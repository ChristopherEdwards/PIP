<?xml version='1.0' encoding='windows-1252' ?>
<glossarydata>
 <entry name="abstract class" value="A superclass that declares the structure of a class without providing a complete implementation of every method. You may want to define a superclass that only defines a generic form that is shared by all its subclasses, yet enabling each subclass to specify the details. For example, the PSL Record class contains all the methods used by its subclasses RecordACN, RecordDEP, RecordLN, RecordCRCD, etc. You cannot create an instance of the Record class because it has no meaning. However, the Record class does contain the methods of all its subclasses." />
 <entry name="class" value="An entity that defines the structure and behavior (i.e., data and code) shared by a set of objects. Each object, therefore, has the structure and behavior defined by its class. The class defines the allowable properties of the objects in that class, as well as the methods that operate on the objects in the class. A class is therefore a template for an object, and an object is an instance of a class. Categories of classes supported in PSL include the following: final class, abstract class, subclass, and superclass." />
 <entry name="encapsulation" value="The ability to hide the details of the implementation of an object, while making the object’s functionality available to other objects. In other words, PSL enables you to wrap an object, its properties, and its methods into a self-contained unit without enabling outside source code to access the code or data within the unit. You know how to access the encapsulated code and can therefore use it regardless of the implementation details. Encapsulation, therefore, enables you to migrate your code to multiple platforms without disrupting program modules or methods." />
 <entry name="final class" value="A class that you cannot designate as a superclass. The properties and methods of a final class cannot be inherited by other classes. For example, if you define the XYZ class as final, you cannot create subclasses based on (i.e., inherited from) the XYZ class. The concept of Final Classes is not available in this PSL release." />
 <entry name="inheritance" value="A way of organizing related classes so that they can share common code. Inheritance facilitates the creation of hierarchical classifications. That is, you can create a class (i.e., the subclass) by having it inherit all the properties of any existing class definition (i.e., the superclass). For example, the deposit record class (RecordDEP) and loan record class (RecordLN) inherit their attributes from the account superclass (RecordACN). Inheritance enables you to leverage development efforts over time." />
 <entry name="instance" value="One manifiestation of a class." />
 <entry name="method" value="The operations or procedures that manipulate object data. For example, if you define an object called Office Telephone, methods used by the Office Telephone object may include the Ring method and the Call Forward method. In Profile, methods for objects defined in the ResultSet class include getCol, getRow, isEmpty, and next. A method contains executable code similar to functions or procedures. You can pass parameters to the method from the calling program; the method can also return a result to the calling program. A method declaration defines the type of value returned by the method. If the method does not return a value, declare the method return type as &quot;void.&quot;" />
 <entry name="object" value="An object is a collection of variables and associated methods that is described by a class. A particular object is an instance of a specific class. You can have multiple instances of an object active at a time (e.g., multiple windows, multiple buttons). An object definition consists of two components -- properties and methods." />
 <entry name="object-oriented design" value="A design theory that focuses on the design of the data (i.e., the objects) and on the interfaces to it. This design, therefore, enables developers to concentrate on the resulting product or application rather than on the tools used to complete the task. For example, PSL provides an object-like extension of the M programming language. Standard object-oriented features (i.e., class, method, and property definitions, as well as data encapsulation, inheritance, and polymorphism) are incorporated into the PSL development environment. PSL enables developers to create modular code related to objects with certain properties and operations that the objects can perform." />
 <entry name="Object Class" value="The Object class is the superclass of all other PSL classes. Because every other class is a subset of the Object class, every other class inherits all the methods and properties accessible from the Object class." />
 <entry name="polymorphism" value="The ability to use one interface for a general set of actions. You develop self-contained, generic methods that can be used in a variety of situations. For example, a spell checker program is designed so that any application can use it. Each application must simply provide an interface to access the spell checker and provide data interpretation. The use of polymorphism in an object-oriented design enables you to develop one method that can be used in a variety of situations. Polymorphism enables you to create clean and adaptable code." />
 <entry name="property" value="A characteristic that describes an object. For example, the properties of a particular keyboard may be that it is white and has 90 keys. The properties of an object are also called the instance variables for the object. Database file definitions define all properties of objects in the Record class. Forexample, the DEP file definition defines all the properties (i.e., data items) of the RecordDEP object." />
 <entry name="subclass" value="A class that inherits all the properties of any existing class definition (i.e., the superclass). For example, the deposit record class (RecordDEP) and loan record class (RecordLN) inherit their attributes from the account superclass (RecordACN). You can then add properties and methods as needed to the new class, as well as modify attributes and methods inherited from the superclass. The subclass, therefore, contains all the attributes of the superclass plus any that you add to it. A class can have any number of subclasses. A subclass can, in turn, be a superclass of another subclass." />
 <entry name="superclass" value="A class definition that serves as a basis for other class definitions. That is, you can create a class (i.e., the subclass) by having it inherit all the methods and properties of any existing class definition (i.e., the superclass). For example, the deposit record class (RecordDEP) and loan record class (RecordLN) inherit their attributes from the account superclass (RecordACN).  A class can only have one immediate superclass." />
 <entry name="variable" value="An entity that contains a reference (i.e., pointer) to an object. A variable, therefore, does not define the object or its identifier. If two variables of the same type exist and one is assigned to the other, both variables refer to the same object." />

</glossarydata>
