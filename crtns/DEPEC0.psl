DEPEC0(RecordDEP dep,RecordTTX ttx,RecordTRN trn)
	/*
	ORIG: Allan Mattson
	DESC: DEBIT ERROR CORRECT
	---- Revision History ------------------------------------------------
	04/16/07 - VARGAJ - CR 24940
		   Change key structure of Check to support the check numbering
		   change of check activation. 
		   
	05/25/06 - DESHPANDE S K - CR 20748
		   Replaced conditional check (%TRNSEQ#1 '= 0) with 
		   (if not ttx.getStoredValue("isPrimary")). Also renamed 
		   local variable TRNSEQ as RSKSEQ. Replaced Transaction variable
		   %TRNPRIM with Transaction Stored Value.
	
	03/22/06 - RussellDS - CR20234
		   Replace incorrect reference to SEQ with TRNSEQ.
	
	12/01/05 - NATRAJAH - 13734
		   Corrected the parameters for the call FSECTR^DEPEC1.

	11/29/05 - NATRAJAH - 13734
		   Included the call to REV^RSKREV when dep.rskopt=1

	11/18/03 - CARROLLJ - CR7239
		   Correct parameter mismatch errors.

	12/13/02 - ZWITKOWITSM - 51349
		   Removed isDefined method and corrected call to ENT^RECALC.

	11/14/02 - ZWITKOWITSM - 43583
		   PSL clean-up.

	06/13/02 - ZWITKOWITSM - 43583
		   Converted to PSL.

	02/26/02 - ANTONOVS - 46454
		   Sections FILE and A were modified to add State Tax
		   Withholding process.

	01/14/02 - Anna Maltepes 48658
		   Modified AUT section to not restrict if ODLIM is null

	----------------------------------------------------------------------
	*/

	// Backdated transaction to a segmented account
	if dep.segflg,%EffectiveDate,%EffectiveDate<%SystemDate do ^RECALSEG(.dep,.ttx) quit

	/*
	If this credit invoked an overdraft sweep processing payment,
	error correct the transfer out and the payment.  If this is a
	fee, error correct the fee. Process authorization if primary
	transaction.
	*/
	if '$D(SRM) set SRM=""
	if ttx.getStoredValue("isPrimary") do { quit:ER
		do FSECTR^DEPEC1(.dep,.ttx)
		if SRM'="" set RM=SRM
		}

	new %EffectiveDate,TAMT,TRB,TYR,YR

	do INIT(.dep,.ttx)

	if dep.ira do ^IRA(.dep,.ttx) quit:ER

	set NET=+$S(TAMT["#":$P(TAMT,"#",2),1:TAMT)
	set PEN=+$P(TAMT,"#",4)
	set DWA=+$P(TAMT,"#",5)
	set DSWA=+$P(TAMT,"#",15)

	// Risk Analysis Option
	if dep.rskopt=1 do {

		new RSKSEQ

		set RSKSEQ=$$FIELD^UTSO(ttx.tso,"RSKANL")
		if RSKSEQ do REV^RSKREV(.dep,.ttx,RSKSEQ)
		}

	if ttx.getStoredValue("isPrimary") do AUT(.dep,.ttx) quit:ER

	set dep.bal=dep.bal-NET
	set dep.tld=%SystemDate
	if 'TRB set dep.cntdr=dep.cntdr-1
	else  set dep.cntcr=dep.cntcr-1

	/*
	  Update the collected balance if the value date/hold of
	  the original transaction has expired.
	*/
	if ttx.vdt'>%SystemDate!(ttx.vdt="") set dep.balcol=dep.balcol-NET

	if dep.iaf=1 set dep.intavl=dep.intavl+$P(ttx.lnerc,"#",20)
	if dep.iaf=2 set dep.intavlncr=dep.intavlncr+$P(ttx.lnerc,"#",20)
	if dep.intavlr=2 set dep.intprior=dep.intprior+$P(ttx.lnerc,"#",21)

	// DEP.BWY should be updated for RPA accounts
	// fin. year buckets
	if YR do {
		set dep.bwy=dep.bwy+DWA+DSWA
		set dep.fwy=dep.fwy+DWA
		set dep.swy=dep.swy+DSWA
		set dep.pytd=dep.pytd+PEN
		}
	else  do {
		set dep.bwp=dep.bwp+DWA+DSWA
		set dep.fwp=dep.fwp+DWA
		set dep.swp=dep.swp+DSWA
		set dep.ppy=dep.ppy+PEN
		}

	// tax year buckets
	if TYR do {
		set dep.bwtytd=dep.bwtytd+DWA+DSWA
		set dep.pentytd=dep.pentytd+PEN
		}
	if 'TYR do {
		// don't update pr.tax year
		if trn.pcfd35 quit

		set dep.bwpty=dep.bwpty+DWA+DSWA
		set dep.penpty=dep.penpty+PEN
		}

	set dep.ppl=dep.ppl+PEN

	// Set up all TSO fields in TSO array to avoid extra calls to FIELD^UTSO
	do OUT^UTSO(.TSO,ttx.tso)

	// update check status if european type check if applicable
	if ttx.tso["CK#" do {

		new CHKTYP,NEWSTAT,CHKNUM

		set CHKNUM=$G(TSO("CK"))
		set CHKTYP = dep.chks
		
		quit:CHKNUM=""

		// Not a check processing account
		quit:'$$EUROCHK^CHKPROC(dep.cid)

		if ttx.itc6 do CHKACT^CHKPROC("EC",CHKNUM,dep.cid,,,.NEWSTAT)
		if ttx.itc12 do CHKACT^CHKPROC("REV",CHKNUM,dep.cid,,,.NEWSTAT)

		// Create an OVR if an error occours
		// Transaction against check <INVCHK> cannot be processed
		if $G(ER) set ER=0 set OVR(dep.cid,"OVR","INVCHK")=CHKNUM quit

		// file new status
		type RecordCHECK check=Db.getRecord("CHECK","CHKS=:CHKTYP,CID=:dep.cid,CHKNUM=:CHKNUM",1)
		if check.getMode()=0 quit

		set check.chksts=NEWSTAT

		do check.save("FRMFILER")
		}

	// Core Account Transaction processing error correction
	if ttx.tso["REV#" do ^UPDCCLD(.dep,.ttx)

	// Ineligible for Investment Funds error correction
	if dep.swpf=1,trn.pcfd14 set dep.swpile=dep.swpile+$$FIELD^UTSO(ttx.tso,"INVADJ")

	// Error correct only - Update returned amount (PCFD17)
	if $E(ttx.itc,6),trn.pcfd17,dep.rnamt set dep.rnamt=dep.rnamt+ttx.tamt

	// Regulation D Category 5 - Money Market Deposit Accounts
	// Error correct - decrement the data field counters(DEP.MMDA1,DEP.MMDA2)
	if dep.regd=5 do EC^DEPMMDA(.dep,.ttx,.trn)

	/*
 	 Update ATM/POS daily amount buckets
 	 if this is the first transaction for today's calendar date then
 	 reset the atm/pos date and zero out the amount buckets
	*/
	if ttx.tso["LMT#" do {

		new UTSO

		do OUT^UTSO(.UTSO,ttx.tso)

		// not a POS or ATM transaction
		if '$D(UTSO("POS"))!'$D(UTSO("ATM")) quit

		if dep.lmtcjd'=%CurrentDate do {
			set dep.lmtcjd=%CurrentDate
			set dep.lmtpos=""
			set dep.lmtatm=""
			}

		if $D(UTSO("POS")) set dep.lmtpos=dep.lmtpos+ttx.tamt
		if $D(UTSO("ATM")) set dep.lmtatm=dep.lmtatm+ttx.tamt
		}

	// Segments in Use
	if dep.segflg do EC^DEPPOSEG(.dep,.ttx)

	if $G(ER) quit

	// Update the current dollar day balance bucket for average balances
	if (%EffectiveDate="")!(%EffectiveDate=%SystemDate) do {
		new TPD

		set TPD=%SystemDate

		do UPDAVB^DEPPO(.dep,.ttx)
		}

	// Budget Account Processing
	new BGTSEQ

	set BGTSEQ=$G(TSO("BGT"))

	if BGTSEQ'="" do {
		new BGTCHK,MISCON,SAVEEC

		// Pass new info from piece 16 of TR(SEQ)
		set SAVEEC=ttx.lnerc
		// Budget Payment
		set BGTCHK=$P(SAVEEC,"#",32)
		// Miscellaneous Budget Contribution
		set MISCON=$P(SAVEEC,"#",33)

		do BGTPROC^DEPPO(.ttx,-NET,BGTSEQ,2,BGTCHK,MISCON)
		}

	// Interest Reserve Processing
	set LNCID=$G(TSO("LNIRCID"))

	if LNCID="" do {
		type ResultSet rs=Db.select("LNCID","RELIR","IRCID=:CID")

		if rs.next() set LNCID=rs.getCol(1)
		}

	if LNCID'="" do {
		new IRAMTR

		type RecordRELIR relir=Db.getRecord("RELIR","CID,LNCID",1)
		if relir.getMode()=0 quit

		set relir.iramtr=relir.iramtr-TAMT

		do relir.bypassSave()
		}

	// Effective dated transactions and overdraft protection
	if %EffectiveDate,%EffectiveDate-%SystemDate do { quit:ER
		/*
		 Effective dated transaction
		 We only recalculate interest on a withdrawal transaction for:
		 . Primary transactions
		 . Secondary transfers?
		 . Secondary automatic loan payment offsets
		*/

		new TCMT,TSO

		set TCMT=ttx.tcmt
		set TSO=ttx.tso

		if ('ttx.getStoredValue("isPrimary")), '$D(LOANRVSQ) quit

		// No int adjustments allowed
		if TSO["NOADJ#1" quit

		do ENT^RECALC(.dep,.ttx)
		}

	// process effective-dated reversal transactions
	if dep.commfper'="",%EffectiveDate'="" do {

		// Update Commitment Fee Effective Date
		set COMMEFD=dep.commefd

		if COMMEFD="" set COMMEFD=%EffectiveDate

		// Get the earliest effective date of today's reversal
		if %EffectiveDate<COMMEFD set COMMEFD=%EffectiveDate

		set dep.commefd=COMMEFD
		}

	quit


INIT(RecordDEP dep,RecordTTX ttx)

	set TAMT=ttx.tamt
	set %EffectiveDate=ttx.efd
	set TRB=$$TRB^UTRB(dep.cid)
	// Update Pr.Fin.Year indicator
	set YR=$$PYFLAG^DEPINT(.dep,.ttx)
	// Update Pr.Tax Year indicator
	set TYR=$$PTYFLAG^DEPINT(.dep,.ttx)
	set CID=dep.cid

	quit


AUT(RecordDEP dep,RecordTTX ttx)	// Authorization Verification

	// Restrict Flag
	if dep.bal,dep.flg do FLG^UFLG(.dep,ttx.itc)

	// Minimum Balance
	if dep.minbal'="",(dep.bal-TAMT)<dep.minbal set OVR(dep.cid,"OVR","MINBAL")=$$^SCARND(dep.minbal,0,dep.cid)

	// Minimum Balance to Accrue Int/Div
	if dep.minacr'="",(dep.bal-TAMT)<dep.minacr set OVR(dep.cid,"OVR","MINACR")=""

	// Restriction Flag
	if +dep.rflg do ^UFLG(.dep)

	// Account Status
	if dep.stat set OVR(dep.cid,"OVR","STAT"_+dep.stat)=""

	if dep.bal-TAMT<0,dep.odlim'="" do {

		// Authorized Overdraft Limit Expiration Date
		if dep.odexp'="",dep.odexp<%SystemDate set OVR(dep.cid,"OVR","ODEXP")=""

		// Negative balance authorized
		if dep.bal-TAMT'<-dep.odlim set OVR(dep.cid,"OVR","ODLIM")=$$^SCARND(dep.odlim,0,dep.cid)

		// Negative balance unauthorized
		if dep.bal-TAMT<-dep.odlim set OVR(dep.cid,"OVR","ODUNAMT")=$$^SCARND(dep.odlim,0,dep.cid)
		}

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60778^44664^John Varga^8088"	// Signature - LTD^TIME^USER^SIZE
