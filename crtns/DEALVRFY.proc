DEALVRFY	// Deal Verification Procedure
	/*
	   Origin: Matt Lessig 04/01/93
	   Description: Deal Verification Procedure

	   This Procedure supports the verification of a foreign exchange deal 
	   record.  The process of verification must be completed daily.
	   
	   Inputs:
	         . System        %FN,%LIBS,%UID

	   Returns:
	         . ER    Error indicator
	                 Returns ER=1 if an error, otherwise ER="W"
	                 
	         . RM    Return message
	                 Returns error message if ER=1, otherwise
	                 completion message
	                 
	  ---- Revision History -------------------------------------------------
	  
	   05/26/06 - KinI - CR21486
	   	      Modified CONPP section to add the new error message that
	   	      is supposed to be displayed in the case a user attempts 
	   	      to verify unmodified deal.
	  
	   03/21/06 - RussellDS - CR20234
	  	      Fixed query syntax for table lookups.
	
	   02/17/06 - KinI - CR 19642
	   	      Modified VPG02 section to set VFMQ to "Q" to properly
	   	      quit when option "Returned" is selected. Modified UPDATE
	   	      section to avoid %GTM-E-TPQUIT error when re-verification
	   	      is performed. Modified VPG00 section to set CO needed for
	   	      CRCD validation.
	   	      
	   01/27/06 - KinI - CR 16664
	   	      DBI related clean-up. Added additional TP logic as this 
	   	      procedure is called by the character driver and updates 
	   	      multiple tables. Modified VPG01 section to send SID to 
	   	      DRV^USID by reference in order to retain its value for 
	   	      further verification.
	   
	   01/06/03 - TELIV - 49451
	   	      Converted to PSL
	  -----------------------------------------------------------------------
	*/

	do VPG
	
	quit


VPG

	set %ProcessMode=2
	
	type Public String ER
	
	type Number %PAGE, %PG, pg
	type Boolean FINISH=0
	type String QRY, OLNTB, VFMQ

	set %PG=0
	set pg=0

	set QRY="[DEAL1]UID'=<<%UID>> AND (([DEAL1]STATUS=1 OR [DEAL1]STATUS=9) OR ([DEAL1]STATUS=5 AND [DEAL1]REFLG=1))"

	type RecordDEAL1 fDEAL1
	type RecordDEALMSG2 DEALMSG2
	type RecordDEALMSG3 DEALMSG3

	for  do { quit:FINISH
		if %PG=0 do VPG00(.fDEAL1,.DEALMSG2,.DEALMSG3,.VFMQ) do VPG0(.FINISH,.%PG,.pg,VFMQ) if FINISH=1 quit
		if %PG=1 do VPG01(.fDEAL1,.DEALMSG2,.DEALMSG3,.VFMQ) do VPG0(.FINISH,.%PG,.pg,VFMQ) if FINISH=1 quit
		if %PG>1 do VPG02(.fDEAL1,.DEALMSG2,.DEALMSG3,.VFMQ) do VPG0(.FINISH,.%PG,.pg,VFMQ) if FINISH=1 quit
		}

	quit
	
	
VPG0(Boolean FINISH,	// Completion flag
     Number %PG,	// Page Number system variable
     Number pg,		// Page Number local variable
     String VFMQ)	// User Action Indicator

	// Process completed/aborted
	if "DFQAR"[VFMQ set FINISH=1 do END quit

	set %PG=pg
	set %PG=%PG+1
	set pg=%PG
		
	quit
	

VPG00(RecordDEAL1 fDEAL1,	// DEAL1 record
      RecordDEALMSG2 DEALMSG2,	// Deal Message File 2 record
      RecordDEALMSG3 DEALMSG3,	// Deal Message File 3 record
      String VFMQ)		// User Action Indicator
      
	type public String ER, CO
	type public String NOEXT, NOINT, QRY
	type String IO, %NOPRMT, %READ, %TAB

	set (NOINT,NOEXT)=""
	
	set CO=CUVAR.CO  // Needed for CRCDB, CRCDS validation
	
	set %TAB("NOINT")="[DEAL1]NOINT/TBL=""[DEAL1]NOINT,NOEXT,AMTB,CRCDB,AMTS,CRCDS,STATUS,TYPE/LEN=1:QU """""_QRY_"""""""/XPP=D CONPP^DEALVRFY(X,.fDEAL1)"
	set %TAB("NOEXT")="[DEAL1]NOEXT/TBL=""[DEALMEMO]NOEXT,NOINT,[DEAL1]AMTB,[DEAL1]CRCDB,[DEAL1]AMTS,[DEAL1]CRCDS,[DEAL1]STATUS,[DEAL1]TYPE/LEN=1:QU """""_QRY_"""""""/XPP=D MEMOPP^DEALVRFY(X,NOINT,.fDEAL1)"
	set %TAB("TRREFNO")="[DEAL1]TRREFNO/TBL=""[DEALREFNO]TRREFNO,NOINT,[DEAL1]AMTB,[DEAL1]CRCDB,[DEAL1]AMTS,[DEAL1]CRCDS,[DEAL1]STATUS,[DEAL1]TYPE/LEN=1:QU """""_QRY_"""""""/XPP=D REFPP^DEALVRFY(X,NOINT,NOEXT,.fDEAL1)"

	// Deal key verification flag
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	if cuvar.rekey do {
		set %TAB("ACN")="[DEAL1]ACN/XPP=D ACNPP^DEALVRFY(X,NOINT,.fDEAL1)"
		set %TAB("CRCDB")="[DEAL1]CRCDB/XPP=D CRCDBPP^DEALVRFY(X,NOINT,.fDEAL1)"
		set %TAB("CRCDS")="[DEAL1]CRCDS/XPP=D CRCDSPP^DEALVRFY(X,NOINT,.fDEAL1)"
		set %TAB("AMT")=".TAMT4/XPP=D AMTPP^DEALVRFY(X,NOINT,.fDEAL1)"
		set %TAB("RATE")="[DEAL1]RATE/XPP=D RATEPP^DEALVRFY(X,NOINT,.fDEAL1)"
		set %TAB("VDT")="[DEAL1]VDT/XPP=D VDTPP^DEALVRFY(X,NOINT,.fDEAL1)"
		set %TAB("IO")=$$IO^SCATAB($I)
		set %READ="@@%FN,,,NOINT#0,NOEXT#0,TRREFNO#0,,ACN#1,CRCDB#1,CRCDS#1,AMT#1,RATE#1,VDT#1" set %NOPRMT="N"
		}

	else  do {
		set %READ="@@%FN,,,NOINT#0,NOEXT#0,TRREFNO#0" 
		set %NOPRMT="N"
		}

	set IO=$I
	
	do ^UTLREAD 

	if "Q"[VFMQ quit

	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")
	set DEALMSG2=Db.getRecord("DEALMSG2","NOINT=:NOINT,MSG=5")
	set DEALMSG3=Db.getRecord("DEALMSG3","NOINT=:NOINT,MSG=6")

	if %ProcessMode=2,IO'=$I do OPEN^SCAIO

	quit


VPG01(RecordDEAL1 fDEAL1,	// DEAL1 record
      RecordDEALMSG2 DEALMSG2,	// Deal Message File 2 record
      RecordDEALMSG3 DEALMSG3,	// Deal Message File 3 record
      String VFMQ)		// User Action Indicator
      
	type public String DEAL1(), NOINT, SID
	type public Boolean ER
	
	// Purchase/Sale
	set SID=$S(fDEAL1.dealps="S":"DEAL1SIS",1:"DEAL1SIP")

	// Record locked by another user
	lock +DEAL1(NOINT):2 else  set VFMQ="Q" do Runtime.setErrMSG("DEAL1",2333) quit:ER

	do DRV^USID(%ProcessMode,.SID,.DEALMSG2,.DEALMSG3,.fDEAL1)

	set VFMQ="C"

	quit


VPG02(RecordDEAL1 fDEAL1,	// DEAL1 record
      RecordDEALMSG2 DEALMSG2,	// Deal Message File 2 record
      RecordDEALMSG3 DEALMSG3,	// Deal Message File 3 record
      String VFMQ)		// User Action Indicator
      
	// Settlement instructions
	
	type public String SID
	
	// User has to get to the last linked screen in order to verify the deal
	if SID'="DEAL1SI7" set VFMQ="Q" quit
	
	// Display a bar menu at the bottom of a screen
		
	// "Approved  Returned  Quit"
	set VFMQ=$$^DBSMBAR(144) 

	// Approved
	if VFMQ=1 do UPDATE(2,.fDEAL1,.DEALMSG2,.DEALMSG3,.VFMQ) quit

	// Returned
	if VFMQ=2 do UPDATE(5,.fDEAL1,.DEALMSG2,.DEALMSG3,.VFMQ) set VFMQ="Q" quit

	if (VFMQ=3) ! (VFMQ="") set VFMQ="Q" quit 
		
	quit


MEMOPP(String X,		// Trader's Memo
       String NOINT,		// Contract Number
       RecordDEAL1 fDEAL1)	// DEAL1 record
       
	// Trader's memo (NOEXT) Post Processor

	if X="" quit

	type public Boolean ER
	type public String RM
	type public Number NI
	
	type RecordDEALMEMO dealmemo=Db.getRecord("DEALMEMO","NOEXT=:X")
	if NOINT="" set NOINT=dealmemo.noint

	// Invalid contract number
	if NOINT="" do Runtime.setErrMSG("DEAL1",7607) quit:ER

	set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT",1)
	if 'fDEAL1.getMode() quit

	// User who created the deal cannot verify it
	if fDEAL1.uid=%UserID do Runtime.setErrMSG("DEAL1",7610) set NOINT="" quit:ER

	// Deal must have settlement instructions prior to verification
	if '(fDEAL1.instrflg) & '(fDEAL1.inst) & (fDEAL1.type="SPOT") do Runtime.setErrMSG("DEAL1",7605) set NOINT="" quit:ER

	// Resubmit Flag
	if (fDEAL1.status=1) ! (fDEAL1.status=9) ! ((fDEAL1.status=5) & (fDEAL1.reflg=1)) set NI=NI+1 set RM=""

	// Invalid table value
	else  do Runtime.setErrMSG("DEAL1",7194) set NOINT="" quit:ER

	quit


REFPP(Number X,			// Transaction Reference Number
      String NOINT,		// Contract Number
      String NOEXT,		// Trader's Memo
      RecordDEAL1 fDEAL1)	// DEAL1 record
      
	// Transaction Reference Number TRREFNO Post-Processor

	type public Boolean ER
	type public String RM
	type public Number NI
	
	// Data required
	if (X="") & (NOINT="") & (NOEXT="") do Runtime.setErrMSG("DEAL1",741) quit:ER

	if NOINT="" do {
		type RecordDEALMEMO dealmemo=Db.getRecord("DEALMEMO","NOEXT=:X")
		set NOINT=dealmemo.noint
		}

	// Invalid transaction reference number
	if NOINT="" do Runtime.setErrMSG("DEAL1",7553) set X="" quit:ER

	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")
	if 'fDEAL1.getMode() quit

	// User who created the deal cannot verify it
	if fDEAL1.uid=%UserID do Runtime.setErrMSG("DEAL1",7610) set NOINT="" quit:ER

	// Deal must have settlement instructions prior to verification
	if '(fDEAL1.instrflg)&'(fDEAL1.inst)&(fDEAL1.type="SPOT") do Runtime.setErrMSG("DEAL1",7605) set NOINT="" quit:ER

	if (fDEAL1.status=1)!(fDEAL1.status=9)!((fDEAL1.status=5)&(fDEAL1.reflg=1)) set NI=NI+1 set RM=""
	// Invalid value
	else  do Runtime.setErrMSG("DEAL1",7609) quit:ER

	quit


UPDATE(Number status,			// Deal Status
       RecordDEAL1 fDEAL1,		// DEAL1 record
       RecordDEALMSG2 DEALMSG2,		// Deal Message File 2 record
       RecordDEALMSG3 DEALMSG3,		// Deal Message File 3 record
       String VFMQ)			// User Action Indicator
       
	// Updates DEAL status
	
	type public String NOINT
	type public Boolean ER
	
	type Number OPT
	
	set fDEAL1.status=status

	if status=5 set fDEAL1.reflg=0

	// Consider extra TP as we don't want to save DEAL1 and HIST records if 
	// an error is returned by DEAL^SWIFTGEN or ^SWIFTPNT
	do Runtime.start("CS", "", "SAVEPTR")
	
	do fDEAL1.save()
	
	if status=5 do { quit		// Quit on returned deals
		// Need to check TP to avoid "Cannot QUIT out of a routine with 
		// an active transaction" error
		if ER do Runtime.rollback("SAVEPTR")	
		if 'ER do Runtime.commit()
		}
		
	do FDHIST("B","",.fDEAL1)	// Amount (Buy)
	
	do FDHIST("S","",.fDEAL1)	// Amount (Sell)

	// Deal Type (Entered)
	if status=2 do {

		do DEAL^SWIFTGEN(NOINT,.fDEAL1) 
		
		// Generate payment order
		if ('fDEAL1.mt202flg) & (fDEAL1.type="SPOT") do POGEN(.fDEAL1)
		}

	// Ssub-menu for print SWIFT messages: "Print SWIFT messages?  Yes  No"
	set OPT=$$^DBSMBAR(146)

	if OPT=1 do ^SWIFTPNT  // Print SWIFT reports

	if ER do Runtime.rollback("SAVEPTR")	
	if 'ER do Runtime.commit()
	
	set VFMQ="Q"

	quit


CONPP(String X,	 		// Contract Number
      RecordDEAL1 fDEAL1)	// DEAL1 record
      
	// Contract number NOINT post processor
	
	if X="" quit
	
	type public Boolean ER
	type public String NOINT
	type public Number NI
	type public String RM

	set fDEAL1=Db.getRecord("DEAL1","NOINT=:X",1)
	if 'fDEAL1.getMode() quit

	// User who created the deal cannot verify it
	if fDEAL1.uid=%UserID do Runtime.setErrMSG("DEAL1",7610) set NOINT="" quit:ER

	// Deal must have settlement instructions prior to verification
	if '(fDEAL1.instrflg) & '(fDEAL1.inst) & (fDEAL1.type="SPOT") do Runtime.setErrMSG("DEAL1",7605) set NOINT="" quit:ER

	// The deal should be modified before it can be verified again
	if (fDEAL1.status=5) , (fDEAL1.reflg=0) do Runtime.setErrMSG("DEAL1",5385) quit:ER
	
	// Resubmit Flag
	if (fDEAL1.status=1) ! (fDEAL1.status=9) ! ((fDEAL1.status=5) & (fDEAL1.reflg=1)) set NI=NI+2 set RM=""

	// Invalid value
	else  do Runtime.setErrMSG("DEAL1",7609) quit:ER

	quit


ACNPP(Number X,			// Counterparty
      String NOINT,		// Contract Number
      RecordDEAL1 fDEAL1)	// DEAL1 record
      
	// Counterparty ACN post processor

	if X="" quit
	
	type public Boolean ER
	type public String RM

	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")
	
	// Invalid value
	if fDEAL1.acn'=X do Runtime.setErrMSG("DEAL1",7609) quit:ER

	set RM=""

	quit


CRCDBPP(Number X,		// Buy Currency
        String NOINT,		// Contract Number
        RecordDEAL1 fDEAL1)	// DEAL1 record

	// Currency (Buy) post processor

	if X="" quit

	type public Boolean ER
	type public String RM
	
	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")

	// Invalid value
	if fDEAL1.crcdb'=X do Runtime.setErrMSG("DEAL1",7609) quit:ER

	set RM=""

	quit


CRCDSPP(Number X,		// Sell Currency
        String NOINT,		// Contract Number
        RecordDEAL1 fDEAL1)	// DEAL1 record	

	// Currency (Sell) post processor

	if X="" quit
	
	type public Boolean ER
	type public String RM
	
	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")

	// Invalid value
	if fDEAL1.crcds'=X do Runtime.setErrMSG("DEAL1",7609) quit:ER

	set RM=""

	quit


AMTPP(Number X,			// Exchange Amount
      String NOINT,		// Contract Number
      RecordDEAL1 fDEAL1)	// DEAL1 record		

	// Amount post processor

	if X="" quit

	type public Boolean ER
	type public String RM
	type Number AMT
	
	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")
		
	if fDEAL1.dealps="S" set AMT=fDEAL1.amts  	// Amount (Sell)	
	else  set AMT=fDEAL1.amtb			// Amount (Buy)

	// Invalid amount
	if +AMT'=+X do Runtime.setErrMSG("DEAL1",7606) quit:ER

	set RM=""

	quit


RATEPP(Number X,		// Exchange Rate
       String NOINT,		// Contract Number
       RecordDEAL1 fDEAL1)	// DEAL1 record			

	// Exchange rate post processor

	if X="" quit
	
	type public Boolean ER
	type public String RM
	
	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")

	//Invalid rate
	if +fDEAL1.rate'=+X do Runtime.setErrMSG("DEAL1",7608) quit:ER

	set RM=""

	quit


VDTPP(Number X,			// Value Date
      String NOINT,		// Contract Number
      RecordDEAL1 fDEAL1)	// DEAL1 record				

	// Value date post processor

	if X="" quit
	
	type public Boolean ER
	
	if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")

	//Invalid date
	if fDEAL1.vdt'=X do Runtime.setErrMSG("DEAL1",1308) set X="" quit:ER

	do GOTO^DBSMACRO("END")

	quit


POGEN(RecordDEAL1 fDEAL1)	// DEAL1 record

	// Generate payment order
	
	if fDEAL1.crcds'=CUVAR.%crcd quit
	
	type Number SEQ
	type String KEY, SRCTYP

	set SEQ=Db.nextVal("EFTPAY","CID=:fDEAL1.nostros") 

	type RecordEFTPAY eftpay=Db.getRecord("EFTPAY","CID=:fDEAL1.nostros,SEQ=:SEQ",1)

	set eftpay.recacct=fDEAL1.nostros

	type RecordUTBLCORRE utblc=Db.getRecord("UTBLCORRE","KEY=:fDEAL1.corrercv",1)
	set eftpay.recinst=utblc.instcd

	set eftpay.amount=fDEAL1.amts

	set eftpay.crcd=fDEAL1.crcds

	set eftpay.efd=fDEAL1.vdt

	set eftpay.cc=fDEAL1.cc

	set eftpay.status="A"

	set eftpay.met="CSCC"

	set eftpay.procdt=fDEAL1.vdt

	set eftpay.amttyp=1

	set eftpay.efttype="PO"

	set SRCTYP="BOFF",KEY="DEAL"
	
	type RecordUTBLSRC utblsrc=Db.getRecord("UTBLSRC","SRCTYP=:SRCTYP,KEY=:KEY",1)
	set eftpay.brcd=utblsrc.brcd    

	set eftpay.ttype=0

	set eftpay.datecre=+%CurrentDate

	set eftpay.timecre=%CurrentTime

	do eftpay.save()

	quit


FDHIST(String SIDE,		// "B"uy or "S"ell indicator
       String FDRM,		// Comment
       RecordDEAL1 fDEAL1)	// DEAL1 record

	// Update future-dated history

	type Number AMT, CID
	type String TCMT, TSO, x()
	
	if 'FDRM.exists() set FDRM=""
	
	if SIDE="B" set CID=fDEAL1.nostrob,AMT=fDEAL1.amtb
	if SIDE="S" set CID=fDEAL1.nostros,AMT=fDEAL1.amts
	
	// No history for G/Ls
	if (Db.isDefined("GLAD","ACN=:CID")) & ('Db.isDefined("ACN","CID=:CID")) quit

	if (SIDE="S"),('fDEAL1.ds1s=""),('fDEAL1.ds2s="") do {

		// DS1 Symbol (Sell)
		set x("ZSTAT")=fDEAL1.ds1s
		
		// DS2 Symbol (Sell)
		set x("ZARES")=fDEAL1.ds2s
		}

	if (SIDE="B"),('fDEAL1.ds1=""),('fDEAL1.ds2="") do {

		// DS1 Symbol (Buy)
		set x("ZSTAT")=fDEAL1.ds1
		
		// DS2 Symbol (Buy)
		set x("ZARES")=fDEAL1.ds2
		}

	set x("DEALID")=fDEAL1.noint
	
	do IN^UTSO(.x,.TSO)
	
	kill x

	// Build history record
	set %EffectiveDate=fDEAL1.vdt 	// Input value for ACNFUNCS
	
	// Future Amount:~p1 ~p2
	set TCMT=$$^MSG(6852,AMT,FDRM)
	
	do HISTBLD^ACNFUNCS(TCMT,CUVAR.BOBR,TSO)
	
	quit


END

	type public String DEAL(), NOINT, ER
	
	if NOINT.exists() lock -DEAL(NOINT)
	
	quit:ER.get()!(%ProcessMode=2)!(%ProcessMode=4)  set ER="W"
	
	quit
	
	

vSIG()	quit "60411^52882^Irina Kin^14673"	// Signature - LTD^TIME^USER^SIZE
