CHKREGFL(RecordCHKREG chkreg,String vpar) // CHKREG - Check Register Filer
	// Copyright(c)2005 Sanchez Computer Associates, Inc.  All Rights Reserved - 06/06/2005 12:03 - spatola
	// Generated from DATA-QWIK schema in: /sanchez/p04devut_gtmlx  by: /p04devut_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL  - Cascade delete
		/[NO]INDEX   - Update Indexes
		/[NO]JOURNAL - Journal update
		/[NO]TRIGAFT - After update triggers
		/[NO]TRIGBEF - Before update triggers
		/[NO]UPDATE  - Update primary table
		/[NO]VALDD   - Validate column values
		/[NO]VALFK   - Validate foreign keys
		/[NO]VALREQ  - Validate not null values
		/[NO]VALRI   - Validate transaction integrity
		/[NO]VALST   - Validate database state
	*/

	type public String verrors()

	type String vx()                                       // audit column array
	type Number %O = chkreg.getMode()                      // Processing mode
	if %O.isNull() set %O = Db.isDefined("CHKREG","CO = :chkreg.co and GL = :chkreg.gl"),vpar = vpar.get()_"/NOVALST" do chkreg.setMode(%O)
	if %O = 1 do AUDIT^UCUTILN(chkreg,.vx(),1,"|")

	set vpar = $$initPar^UCUTILN(.vpar)                    // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CO").data()!vx("GL").data() do vkchged quit    // Primary key changed
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do {
			type Boolean ER = 0
			type String RM

			do VDDUX^DBSFILER("CHKREG",.vx)
			if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
		}
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CHKREG","CO = :chkreg.co and GL = :chkreg.gl") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (e.g. EXT^DBSFILER for %O = 2)

	type Public String CO
	type Public String GL

	type RecordCHKREG chkreg = Db.getRecord("CHKREG","CO=:CO,GL=:GL")
	do chkreg.setMode(%ProcessMode)

	do CHKREGFL(chkreg,vpar)

	quit

vexec // Execute transaction

	type Public Number %O
	type Public String vpar,vobj(),vx()

	type Public RecordCHKREG chkreg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CHKREG","CO = :chkreg.co and GL = :chkreg.gl") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {


		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell
		set ^TCHKREG(vobj(chkreg,-3),vobj(chkreg,-4),0) = vobj(chkreg).trim(1,$C(124))
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type Public String vobj(),vpar
	type Public RecordCHKREG chkreg


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell
	ZWI ^TCHKREG(vobj(chkreg,-3),vobj(chkreg,-4),0)        // Delete Record
	quit


vreqn // Validate required data items

	type Public RecordCHKREG chkreg

	if chkreg.co.isNull() do vreqerr("CO") quit
	if chkreg.gl.isNull() do vreqerr("GL") quit
	if chkreg.tjd.isNull() do vreqerr("TJD") quit
	quit

vreqerr(di) // Required error

	type Boolean ER = 0
	type String RM
	do SETERR^DBSEXECU("CHKREG","MSG",1767,"CHKREG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type Public Number %O
	type Public String vpar(),vx()

	type String RM,X
	type Public RecordCHKREG chkreg

	set X = chkreg.ckno if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set RM=$$^MSG(742,"N") do vdderr("CKNO", RM) quit
	set X = chkreg.sts if 'X.isNull(),X'?1N set RM=$$^MSG(742,"N") do vdderr("STS", RM) quit
	set X = chkreg.brcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set RM=$$^MSG(742,"N") do vdderr("BRCD", RM) quit
	if chkreg.uid.length()>20 set RM = $$^MSG(1076,20) do vdderr("UID", RM) quit
	set X = chkreg.tseq if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set RM=$$^MSG(742,"N") do vdderr("TSEQ", RM) quit
	if chkreg.file.length()>40 set RM = $$^MSG(1076,40) do vdderr("FILE", RM) quit
	set X = chkreg.fmt if 'X.isNull(),'Db.isDefined("UTBLCHKFMT","X") set RM = $$^MSG(1485,X) do vdderr("FMT", RM) quit
	set X = chkreg.tjd if 'X.isNull(),X'?1.5N set RM=$$^MSG(742,"D") do vdderr("TJD", RM) quit
	if chkreg.co.length()>12 set RM = $$^MSG(1076,12) do vdderr("CO", RM) quit
	set X = chkreg.gl if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set RM=$$^MSG(742,"N") do vdderr("GL", RM) quit
	#xecute kill dbLoad("vddver","chkreg")
	quit

vdderr(di, vRM) // Column attribute error

	do SETERR^DBSEXECU("CHKREG","MSG",979,"CHKREG."_di_" "_vRM)
	quit


vkchged // Access key changed

	type Public RecordCHKREG chkreg

	type Public String vpar,vx()

	type Boolean ER = 0
	type Number %O = 1
	type String RM,vnewkey,voldkey,vux

	if vx("CO").data() set vux("CO") = vx("CO")
	if vx("GL").data() set vux("GL") = vx("GL")
	do vkey(1) set voldkey = chkreg.co_","_chkreg.gl       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vreqn
	if vpar["/VALDD/" do vddver
	do vexec

	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/")
	set %O = 3 do vdelete(1)                               // Delete old record
	do vkey(2) set vnewkey = chkreg.co_","_chkreg.gl       // Copy new keys into object

	set %O = 0 do vexec                                    // Create new record
	set %O = 1 do CASUPD^DBSEXECU("CHKREG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	quit

vkey(Number i) // Restore access keys

	type Public String vux()
	type Public RecordCHKREG chkreg

	if vux("CO").data() set chkreg.co = vux("CO").piece("|",i)
	if vux("GL").data() set chkreg.gl = vux("GL").piece("|",i)
	quit
