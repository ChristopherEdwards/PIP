V01S601(Number %ProcessMode,RecordTRNSETPTR fTRNSETP)   // -  - SID= <TRNSETPTR> Transaction Set Pointer Screen
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:35 - joynerd
 // Transaction Set Pointer File Screen
 //  
 // This screen is used to create, modify, or delete transaction set pointer 
 // entries which reference a column in the loan (LN) or loan product (PRODDFTL) 
 // tables which can contain a transaction set.  When a pointer is created, a dummy
 // entry is added to the UTBLTRNSET table so it may be selected from the 
 // transaction set list for a transaction code.  When a transaction code that is 
 // set up un this manner is used in PFW Teller posting, processing will 
 // substitute the transaction set contained in the column the pointer references.
 //  
 // This allows the user to define a different transaction set for use with a
 // particular loan or loan product type rather than hard coding a transaction set
 // to a particular transaction code.
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fTRNSETP.exists() set fTRNSETP = Class.new("RecordTRNSETPTR")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="TRNSETPTR",VPGM=$T(+0),VSNAME="Transaction Set Pointer Screen"
 set VFSN("TRNSETPTR")="zfTRNSETP"
 set vPSL=1
 set KEYS(1)=fTRNSETP.PTRNAME
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fTRNSETP),VDA1(.fTRNSETP),^DBSPNT() quit

 if '%ProcessMode do VNEW(.fTRNSETP),VPR(.fTRNSETP),VDA1(.fTRNSETP)
 if %ProcessMode do VLOD(.fTRNSETP) quit:$G(ER)  do VPR(.fTRNSETP),VDA1(.fTRNSETP)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fTRNSETP)
	quit


VNEW(RecordTRNSETPTR fTRNSETP) // Initialize arrays if %O=0
 
 do VDEF(.fTRNSETP)
 do VLOD(.fTRNSETP)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordTRNSETPTR fTRNSETP)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordTRNSETPTR fTRNSETP) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordTRNSETPTR fTRNSETP) // Display screen prompts
 set VO="3||13|0"
 set VO(0)="|0"
 set VO(1)=$C(5,25,14,1,0,0,0,0,0,0)_"01T Pointer Name:"
 set VO(2)=$C(7,27,12,0,0,0,0,0,0,0)_"01TLoan Column:"
 set VO(3)=$C(8,19,20,0,0,0,0,0,0,0)_"01TLoan Product Column:"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordTRNSETPTR fTRNSETP)  // Display screen data
 new V
 //
 set VO="7|4|13|0"
 set VO(4)=$C(1,1,80,1,0,0,0,0,0,0)_"01T"_$S(%ProcessMode=5:"",1:$$BANNER^UTLREAD(%FN.get()))
 set VO(5)=$C(5,40,12,2,0,0,0,0,0,0)_"01T"_$E(fTRNSETP.PTRNAME,1,12)
 set VO(6)=$C(7,40,20,2,0,0,0,0,0,0)_"00T"_$E(fTRNSETP.LNPTR,1,20)
 set VO(7)=$C(8,40,20,2,0,0,0,0,0,0)_"00T"_$E(fTRNSETP.PRODPTR,1,20)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordTRNSETPTR fTRNSETP)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=3,VPT=1,VPB=8,PGM=$T(+0),DLIB="SYSDEV",DFID="TRNSETPTR"
 set OLNTB=8040
 
 set VFSN("TRNSETPTR")="zfTRNSETP"
 //
 // 
	
	
 set %TAB(1)=$C(4,39,12)_"21T12401|1|[TRNSETPTR]PTRNAME"
 set %TAB(2)=$C(6,39,20)_"00T12401|1|[TRNSETPTR]LNPTR|||do VP1^V01S601(.fTRNSETP)"
 set %TAB(3)=$C(7,39,20)_"00T12402|1|[TRNSETPTR]PRODPTR|||do VP2^V01S601(.fTRNSETP)"
 do VTBL(.fTRNSETP)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordTRNSETPTR fTRNSETP) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordTRNSETPTR fTRNSETP) //
 type public String X
 type String LNCOL
 
 if X.isNull() quit
 set LNCOL=X

 type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS=""SYSDEV"",FID=""LN"",DI=:LNCOL",1)

 // Invalid column name ~p1
 if 'dbtbl1d.getMode() set LNCOL="LN."_LNCOL do Runtime.setErrMSG("TRNSETPTR",1286,LNCOL) quit

 // Selected column must use UTBLTRNSET for table lookup
 if 'dbtbl1d.tbl.find("UTBLTRNSET") do Runtime.setErrMSG("TRNSETPTR",4340) quit
VP2(RecordTRNSETPTR fTRNSETP) //
 type String LNCOL,PRODCOL 

 set PRODCOL=X
 set LNCOL=fTRNSETP.lnptr

 if PRODCOL.isNull(),'LNCOL.isNull() quit

 // Loan or product column must be defined
 if PRODCOL.isNull(),LNCOL.isNull() do Runtime.setErrMSG("TRNSETPTR",4342) quit

 // Invalid column name - ~p1
 type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS=""SYSDEV"",FID=""PRODDFTL"",DI=:PRODCOL",1)

 if 'dbtbl1d.getMode() set PRODCOL="PRODDFTL."_PRODCOL do Runtime.setErrMSG("TRNSETPTR",1286,PRODCOL) quit

 // Selected column must use UTBLTRNSET for table lookup
 if 'dbtbl1d.tbl.find("UTBLTRNSET") do Runtime.setErrMSG("TRNSETPTR",4340) quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordTRNSETPTR fTRNSETP
 do VPR(.fTRNSETP)
 do VDA1(.fTRNSETP)
 do ^DBSPNT()
 quit

VW(RecordTRNSETPTR fTRNSETP)
 do VDA1(.fTRNSETP)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordTRNSETPTR fTRNSETP)
 do VDA1(.fTRNSETP)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordTRNSETPTR fTRNSETP
 do VDA1(.fTRNSETP)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordTRNSETPTR fTRNSETP
 if sn="TRNSETPTR" do vSET1(.fTRNSETP,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordTRNSETPTR fTRNSETP,di,X)
 do fTRNSETP.setAuditFlag(1)
 set fTRNSETP.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordTRNSETPTR fTRNSETP
 if fid="TRNSETPTR" quit $$vREAD1(.fTRNSETP,di)
 quit ""
vREAD1(RecordTRNSETPTR fTRNSETP,di)
 quit fTRNSETP.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
