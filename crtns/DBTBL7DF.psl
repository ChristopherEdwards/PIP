DBTBL7DF(RecordDBTBL7D dbtbl7d, String vpar, Boolean vparNorm) // DBTBL7D - Trigger Procedural code Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              03/19/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl7d.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dbtbl7d,.vxins(),1,$C(1))
	if %O = 1 do AUDIT^UCUTILN(dbtbl7d,.vx(),1,$C(1))

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("%LIBS").exists()!vx("TABLE").exists()!vx("TRGID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL7D",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL7D","%LIBS = :dbtbl7d.%libs and TABLE = :dbtbl7d.table and TRGID = :dbtbl7d.trgid and SEQ = :dbtbl7d.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String %LIBS
	type public String TABLE
	type public String TRGID
	type public String SEQ

	type RecordDBTBL7D dbtbl7d = Db.getRecord("DBTBL7D","%LIBS=:%LIBS,TABLE=:TABLE,TRGID=:TRGID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do dbtbl7d.setMode(2)

		do DBTBL7DF(dbtbl7d,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL7D dbtbl7d

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL7D","%LIBS = :dbtbl7d.%libs and TABLE = :dbtbl7d.table and TRGID = :dbtbl7d.trgid and SEQ = :dbtbl7d.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl7d)) S ^DBTBL(vobj(dbtbl7d,-3),7,vobj(dbtbl7d,-4),vobj(dbtbl7d,-5),vobj(dbtbl7d,-6))=vobj(dbtbl7d)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL7D dbtbl7d


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DBTBL(vobj(dbtbl7d,-3),7,vobj(dbtbl7d,-4),vobj(dbtbl7d,-5),vobj(dbtbl7d,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordDBTBL7D dbtbl7d

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL7D dbtbl7d

	if dbtbl7d.%libs.isNull() do vreqerr("%LIBS") quit
	if dbtbl7d.table.isNull() do vreqerr("TABLE") quit
	if dbtbl7d.trgid.isNull() do vreqerr("TRGID") quit
	if dbtbl7d.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL7D","MSG",1767,"DBTBL7D."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDBTBL7D dbtbl7d
	if 'dbtbl7d.trgid.isNull() set vfkey("^DBTBL("_""""_dbtbl7d.%libs_""""_","_7_","_""""_dbtbl7d.table_""""_","_""""_dbtbl7d.trgid_""""_")")="DBTBL7D(%LIBS,TABLE,TRGID) -> DBTBL7"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDBTBL7D dbtbl7d
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DBTBL7",":dbtbl7d.%libs,:dbtbl7d.table,:dbtbl7d.trgid") set vERRMSG = $$^MSG(8563,"DBTBL7D(%LIBS,TABLE,TRGID) -> DBTBL7") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL7D dbtbl7d

	if dbtbl7d.%libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("%LIBS", vRM) quit
	if dbtbl7d.table.length()>25 set vRM = $$^MSG(1076,25) do vdderr("TABLE", vRM) quit
	if dbtbl7d.trgid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TRGID", vRM) quit
	set X = dbtbl7d.seq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if dbtbl7d.code.length()>255 set vRM = $$^MSG(1076,255) do vdderr("CODE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL7D","MSG",979,"DBTBL7D."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL7D dbtbl7d

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("%LIBS").exists() set vux("%LIBS") = vx("%LIBS")
	if vx("TABLE").exists() set vux("TABLE") = vx("TABLE")
	if vx("TRGID").exists() set vux("TRGID") = vx("TRGID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = dbtbl7d.%libs_","_dbtbl7d.table_","_dbtbl7d.trgid_","_dbtbl7d.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl7d.%libs_","_dbtbl7d.table_","_dbtbl7d.trgid_","_dbtbl7d.seq // Copy new keys into object
	type RecordDBTBL7D vnewrec = dbtbl7d.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL7D",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL7D dbtbl7d

	if vux("%LIBS").exists() set dbtbl7d.%libs = vux("%LIBS").piece("|",i)
	if vux("TABLE").exists() set dbtbl7d.table = vux("TABLE").piece("|",i)
	if vux("TRGID").exists() set dbtbl7d.trgid = vux("TRGID").piece("|",i)
	if vux("SEQ").exists() set dbtbl7d.seq = vux("SEQ").piece("|",i)
	quit
