LNAPONFL(RecordLNAP1OWN lnap1own, String vpar, Boolean vparNorm) // LNAP1OWN - Application Ownership Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:17 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (63)             11/22/2003
	// Trigger Definition (4)                      09/21/2006
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnap1own.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnap1own,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnap1own,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = lnap1own.acn
	type String APPS = lnap1own.apps
	type String APPNUM = lnap1own.appnum
	type String SECACN = lnap1own.secacn

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("APPS").exists()!vx("APPNUM").exists()!vx("SECACN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNAP1OWN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNAP1OWN","ACN = :lnap1own.acn and APPS = :lnap1own.apps and APPNUM = :lnap1own.appnum and SECACN = :lnap1own.secacn") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String APPS
	type public String APPNUM
	type public String SECACN

	type RecordLNAP1OWN lnap1own = Db.getRecord("LNAP1OWN","ACN=:ACN,APPS=:APPS,APPNUM=:APPNUM,SECACN=:SECACN")
	if (%ProcessMode = 2) do {
		do lnap1own.setMode(2)

		do LNAPONFL(lnap1own,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNAP1OWN lnap1own

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNAP1OWN","ACN = :lnap1own.acn and APPS = :lnap1own.apps and APPNUM = :lnap1own.appnum and SECACN = :lnap1own.secacn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnap1own)) S ^LNAP(vobj(lnap1own,-3),vobj(lnap1own,-4),vobj(lnap1own,-5),vobj(lnap1own,-6))=vobj(lnap1own)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnap1own)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNAP1OWN lnap1own

	if vpar["/JOURNAL/" do VJOURNAL(.lnap1own)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNAP(vobj(lnap1own,-3),vobj(lnap1own,-4),vobj(lnap1own,-5),vobj(lnap1own,-6))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNAP1OWN lnap1own

	// Type local variables for access keys for defaults
	type public String ACN
	type public String APPS
	type public String APPNUM
	type public String SECACN

	if lnap1own.empself.isNull() set lnap1own.empself = 0  // empself
	if lnap1own.wspousfl.isNull() set lnap1own.wspousfl = 0 // wspousfl
	quit


vreqn // Validate required data items

	type public RecordLNAP1OWN lnap1own

	if lnap1own.empself.isNull() do vreqerr("EMPSELF") quit
	if lnap1own.mad1.isNull() do vreqerr("MAD1") quit
	if lnap1own.mcity.isNull() do vreqerr("MCITY") quit
	if lnap1own.mcntry.isNull() do vreqerr("MCNTRY") quit
	if lnap1own.relcod.isNull() do vreqerr("RELCOD") quit
	if lnap1own.wspousfl.isNull() do vreqerr("WSPOUSFL") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNAP1OWN lnap1own

	if lnap1own.acn.isNull() do vreqerr("ACN") quit
	if lnap1own.apps.isNull() do vreqerr("APPS") quit
	if lnap1own.appnum.isNull() do vreqerr("APPNUM") quit
	if lnap1own.secacn.isNull() do vreqerr("SECACN") quit

		if vx("EMPSELF").exists(),lnap1own.empself.isNull() do vreqerr("EMPSELF") quit
		if vx("MAD1").exists(),lnap1own.mad1.isNull() do vreqerr("MAD1") quit
		if vx("MCITY").exists(),lnap1own.mcity.isNull() do vreqerr("MCITY") quit
		if vx("MCNTRY").exists(),lnap1own.mcntry.isNull() do vreqerr("MCNTRY") quit
		if vx("RELCOD").exists(),lnap1own.relcod.isNull() do vreqerr("RELCOD") quit
		if vx("WSPOUSFL").exists(),lnap1own.wspousfl.isNull() do vreqerr("WSPOUSFL") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAP1OWN","MSG",1767,"LNAP1OWN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNAP1OWN lnap1own
	if 'lnap1own.acn.isNull() set vfkey("^CIF("_""""_lnap1own.acn_""""_","_1_")")="LNAP1OWN(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNAP1OWN lnap1own
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":lnap1own.acn") set vERRMSG = $$^MSG(8563,"LNAP1OWN(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("BNKZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("EMPZIP").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("WSPOUSFL").exists()!vx("WSPOUSNM").exists()!vx("WSPOUSDOB").exists()!vx("WSPOUSCIF").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_CREATE - After_Create

	type public RecordLNAP1OWN lnap1own

	/*
	---- Revision History--------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Added code to validate ZIP code column.

	04/18/00 - KESTELMANN - 38082
		   Rolled forward from v6.2

	02/23/00 - KESTELMANN - 36178
		   Add VerifyMode check.
	
	02/14/00 - KESTELMAN - 36178
		   This after insert trigger check Working Spouse Protection Flag.
		   If set to "y", it updates WSPOUSFL,WSPOUSNM,WSPOUSDO in LN file.
								-----------------------------------------------------------------------------
								*/

	type public Boolean ER
	type public String RM

								new XCRTED,XAPPNUM,XWSPOUSFL,XWSPOUSNM,XWSPOUSDOB,XWSPOUSCIF

	// Validate ZIP code - Bank
	do ZIP^PROCZIP(lnap1own.bnkcntry, lnap1own.bnkstate, lnap1own.bnkzip)
	if ER.get() do Runtime.setErrMSG("LNAP1OWN", 3333, RM) quit:ER

	// Validate ZIP code - Employer
	do ZIP^PROCZIP(lnap1own.empcntry, lnap1own.empstate, lnap1own.empzip)
	if ER.get() do Runtime.setErrMSG("LNAP1OWN", 3333, RM) quit:ER

								if lnap1own.wspousfl=1 do { quit:ER
																if lnap1own.wspousnm="" do Runtime.setErrMSG("LNAP1OWN",7531,"LNAP1OWN.WSPOUSNM") quit:ER
																if lnap1own.wspousdob="" do Runtime.setErrMSG("LNAP1OWN",7531,"LNAP1OWN.WSPOUSDOB") quit:ER
																}
	
								if '(%O=2) do { quit:ER
																set XAPPNUM=lnap1own.appnum set XWSPOUSFL=lnap1own.wspousfl
																set XWSPOUSCIF=lnap1own.wspouscif
																set XWSPOUSNM=lnap1own.wspousnm set XWSPOUSDOB=lnap1own.wspousdob
	
	        do { quit:ER
			new rs
			type ResultSet rs=Db.select("CRTED","LNAP1","APPNUM=:XAPPNUM")
	                set XCRTED="" if 'rs.next()  quit
        	        set XCRTED=rs.getRow()
           		}
	
																if XCRTED=1 set ER=0 do Db.update("LN","WSPOUSFL=:XWSPOUSFL,WSPOUSNM=:XWSPOUSNM,WSPOUSDOB=:XWSPOUSDOB,WSPOUSCIF=:XWSPOUSCIF","APPNUM=:XAPPNUM") quit:ER
																}
								quit

vau1 // Trigger AU_BNKZIP - After Update of Bank Postal Code

	type public RecordLNAP1OWN lnap1own

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with Bank.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Bank
	do ZIP^PROCZIP(lnap1own.bnkcntry, lnap1own.bnkstate, lnap1own.bnkzip)
	if ER.get() do Runtime.setErrMSG("LNAP1OWN", 3333, RM)

	quit

vau2 // Trigger AU_EMPZIP - After Update of Bank Postal Code

	type public RecordLNAP1OWN lnap1own

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with Employer.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Employer
	do ZIP^PROCZIP(lnap1own.empcntry, lnap1own.empstate, lnap1own.empzip)
	if ER.get() do Runtime.setErrMSG("LNAP1OWN", 3333, RM)

	quit

vau3 // Trigger AU_WSPOUSFL - After update WSPOUSFL trigger

	type public RecordLNAP1OWN lnap1own
								//---- Revision History---------------------------------------------------
								//
								// 04/18/00 - KESTELMANN - 38082
								//       Rolled forward from v6.2

								// 02/14/00 - KESTELMAN - 36178
								//   This after update trigger check Working Spouse Protection Flag.
								//   If set to "y", it updates WSPOUSFL,WSPOUSNM,WSPOUSDO in LN file.
								//-----------------------------------------------------------------------
	
								new XCRTED,XAPPNUM,XWSPOUSFL,XWSPOUSNM,XWSPOUSDOB,XWSPOUSCIF
								if lnap1own.wspousfl=1 do { quit:ER
																if lnap1own.wspousnm="" do Runtime.setErrMSG("LNAP1OWN",7531,"LNAP1OWN.WSPOUSNM") quit:ER
																if lnap1own.wspousdob="" do Runtime.setErrMSG("LNAP1OWN",7531,"LNAP1OWN.WSPOUSDOB") quit:ER
																}
								set XAPPNUM=lnap1own.appnum
								set XWSPOUSFL=lnap1own.wspousfl
								set XWSPOUSNM=lnap1own.wspousnm
								set XWSPOUSDOB=lnap1own.wspousdob
								set XWSPOUSCIF=lnap1own.wspouscif
	
								do { quit:ER
												new rs
												type ResultSet rs=Db.select("CRTED","LNAP1","APPNUM=:XAPPNUM")
												set XCRTED="" if 'rs.next()  quit
												set XCRTED=rs.getRow()
											}
	
								if XCRTED=1 set ER=0 do Db.update("LN","WSPOUSFL=:XWSPOUSFL,WSPOUSNM=:XWSPOUSNM,WSPOUSDOB=:XWSPOUSDOB,WSPOUSCIF=:XWSPOUSCIF","APPNUM=:XAPPNUM") quit:ER
								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNAP1OWN lnap1own

	set X = lnap1own.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = lnap1own.apps if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("APPS", vRM) quit
	set X = lnap1own.appnum if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("APPNUM", vRM) quit
	set X = lnap1own.secacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SECACN", vRM) quit
	if lnap1own.bank.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BANK", vRM) quit
	if lnap1own.bnkad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BNKAD1", vRM) quit
	if lnap1own.bnkad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BNKAD2", vRM) quit
	if lnap1own.bnkad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BNKAD3", vRM) quit
	if lnap1own.bnkcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BNKCITY", vRM) quit
	set X = lnap1own.bnkcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("BNKCNTRY", vRM) quit
	if lnap1own.bnkstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("BNKSTATE", vRM) quit
	if lnap1own.bnkzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("BNKZIP", vRM) quit
	set X = lnap1own.bonus if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1OWN.BONUS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1own.ccode if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
	if lnap1own.depage.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DEPAGE", vRM) quit
	set X = lnap1own.dob if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOB", vRM) quit
	if lnap1own.empad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPAD1", vRM) quit
	if lnap1own.empad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPAD2", vRM) quit
	if lnap1own.empad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPAD3", vRM) quit
	set X = lnap1own.empcd if 'X.isNull(),'Db.isDefined("UTBLEMPCD","X") set vRM = $$^MSG(1485,X) do vdderr("EMPCD", vRM) quit
	if lnap1own.empcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPCITY", vRM) quit
	set X = lnap1own.empcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("EMPCNTRY", vRM) quit
	set X = lnap1own.emplno if 'X.isNull(),'Db.isDefined("UTBLEMPLOYER","X") set vRM = $$^MSG(1485,X) do vdderr("EMPLNO", vRM) quit
	set X = lnap1own.emplnum if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("EMPLNUM", vRM) quit
	if '("01"[lnap1own.EMPSELF) set vRM=$$^MSG(742,"L") do vdderr("EMPSELF", vRM) quit
	set X = lnap1own.empspouse if 'X.isNull(),'Db.isDefined("UTBLEMPLOYER","X") set vRM = $$^MSG(1485,X) do vdderr("EMPSPOUSE", vRM) quit
	if lnap1own.empstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("EMPSTATE", vRM) quit
	if lnap1own.emptel.length()>12 set vRM = $$^MSG(1076,12) do vdderr("EMPTEL", vRM) quit
	if lnap1own.empzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("EMPZIP", vRM) quit
	if lnap1own.hph.length()>12 set vRM = $$^MSG(1076,12) do vdderr("HPH", vRM) quit
	if lnap1own.lenbank.length()>10 set vRM = $$^MSG(1076,10) do vdderr("LENBANK", vRM) quit
	if lnap1own.lenemp.length()>10 set vRM = $$^MSG(1076,10) do vdderr("LENEMP", vRM) quit
	if lnap1own.lenres.length()>10 set vRM = $$^MSG(1076,10) do vdderr("LENRES", vRM) quit
	if lnap1own.mad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD1", vRM) quit
	if lnap1own.mad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD2", vRM) quit
	if lnap1own.mad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD3", vRM) quit
	set X = lnap1own.mar if 'X.isNull(),'Db.isDefined("UTBLMS","X") set vRM = $$^MSG(1485,X) do vdderr("MAR", vRM) quit
	if lnap1own.mcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MCITY", vRM) quit
	set X = lnap1own.mcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("MCNTRY", vRM) quit
	if lnap1own.mstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MSTATE", vRM) quit
	if lnap1own.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	set X = lnap1own.ndep if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("NDEP", vRM) quit
	set X = lnap1own.occ if 'X.isNull(),'Db.isDefined("UTBLOC","X") set vRM = $$^MSG(1485,X) do vdderr("OCC", vRM) quit
	set X = lnap1own.other if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1OWN.OTHER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1own.otherfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAP1OWN]OTHERFRE",0) if 'vRM.get().isNull() do vdderr("OTHERFRE", vRM) quit
	set X = lnap1own.own if 'X.isNull(),'Db.isDefined("UTBLOWN","X") set vRM = $$^MSG(1485,X) do vdderr("OWN", vRM) quit
	if lnap1own.relcod.length()>2 set vRM = $$^MSG(1076,2) do vdderr("RELCOD", vRM) quit
	if lnap1own.reldesc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RELDESC", vRM) quit
	if lnap1own.rmemn.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RMEMN", vRM) quit
	set X = lnap1own.salary if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1OWN.SALARY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1own.salfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAP1OWN]SALFRE",0) if 'vRM.get().isNull() do vdderr("SALFRE", vRM) quit
	set X = lnap1own.salspouse if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1OWN.SALSPOUSE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnap1own.socbent.length()>18 set vRM = $$^MSG(1076,18) do vdderr("SOCBENT", vRM) quit
	set X = lnap1own.socwel if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1OWN.SOCWEL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1own.sother if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1OWN.SOTHER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1own.sotherfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAP1OWN]SOTHERFRE",0) if 'vRM.get().isNull() do vdderr("SOTHERFRE", vRM) quit
	if lnap1own.spocc.length()>3 set vRM = $$^MSG(1076,3) do vdderr("SPOCC", vRM) quit
	set X = lnap1own.spouse if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPOUSE", vRM) quit
	set X = lnap1own.spsalfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAP1OWN]SPSALFRE",0) if 'vRM.get().isNull() do vdderr("SPSALFRE", vRM) quit
	set X = lnap1own.wspouscif if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("WSPOUSCIF", vRM) quit
	set X = lnap1own.wspousdob if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("WSPOUSDOB", vRM) quit
	if '("01"[lnap1own.WSPOUSFL) set vRM=$$^MSG(742,"L") do vdderr("WSPOUSFL", vRM) quit
	if lnap1own.wspousnm.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WSPOUSNM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAP1OWN","MSG",979,"LNAP1OWN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNAP1OWN lnap1own)	//LNAP1OWN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.lnap1own)	// Mode=I Tran=B EFD=N Seq=1 JRNID=LNAP1OWN_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.lnap1own)	// Mode=I Tran=O EFD=N Seq=1 JRNID=LNAP1OWN_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.lnap1own)	// Mode=U Tran=B EFD=N Seq=1 JRNID=LNAP1OWN_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.lnap1own)	// Mode=U Tran=O EFD=N Seq=1 JRNID=LNAP1OWN_U
				}
			}
		}

	quit


vj1(RecordLNAP1OWN lnap1own)	// LNAP1OWN_I  Table LNAP1HIST  Loan Application Ownership (New)

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,vlastkey
	set v1=lnap1own.acn
	set v2=lnap1own.apps
	set v3=lnap1own.appnum
	set vlastkey=Db.nextVal("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3")
	type RecordLNAP1HIST lnap1hist=Db.getRecord("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3,TSEQ=:vlastkey",1)
	set lnap1hist.cdt=+$H
	set lnap1hist.ctime=$P($H,",",2)
	set lnap1hist.spd=TJD
	set lnap1hist.tcmt=$$^MSG(301,"LNAP1OWN")
	set lnap1hist.tlo=TLO
	set lnap1hist.uid=%UID

	do lnap1hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNAP1OWN lnap1own)	// LNAP1OWN_U  Table LNAP1HIST  Loan Application Ownership (Modify)

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%UID,TJD,TLO
		type String v1,v2,v3,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=lnap1own.acn
		set v2=lnap1own.apps
		set v3=lnap1own.appnum
		set vlastkey=Db.nextVal("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3")
		type RecordLNAP1HIST lnap1hist=Db.getRecord("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3,TSEQ=:vlastkey",1)
		set lnap1hist.cdt=+$H
		set lnap1hist.ctime=$P($H,",",2)
		set lnap1hist.spd=TJD
		set lnap1hist.tcmt=$$TCMT^CIFFUNCS("","LNAP1OWN",vdi,vold,vnew)
		set lnap1hist.tlo=TLO
		set lnap1hist.uid=%UID

		do lnap1hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNAP1OWN lnap1own

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("APPS").exists() set vux("APPS") = vx("APPS")
	if vx("APPNUM").exists() set vux("APPNUM") = vx("APPNUM")
	if vx("SECACN").exists() set vux("SECACN") = vx("SECACN")
	do vkey(1) set voldkey = lnap1own.acn_","_lnap1own.apps_","_lnap1own.appnum_","_lnap1own.secacn // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnap1own.acn_","_lnap1own.apps_","_lnap1own.appnum_","_lnap1own.secacn // Copy new keys into object
	type RecordLNAP1OWN vnewrec = lnap1own.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNAP1OWN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNAP1OWN lnap1own

	if vux("ACN").exists() set lnap1own.acn = vux("ACN").piece("|",i)
	if vux("APPS").exists() set lnap1own.apps = vux("APPS").piece("|",i)
	if vux("APPNUM").exists() set lnap1own.appnum = vux("APPNUM").piece("|",i)
	if vux("SECACN").exists() set lnap1own.secacn = vux("SECACN").piece("|",i)
	quit
