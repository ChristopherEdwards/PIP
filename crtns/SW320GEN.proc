SW320GEN(CID,MSTYP,MDT)
 /*
    ORIG: JERUCHIMC - 10/18/1999
    DESC: MT320 Generator
    
    ---- Comments --------------------------------------------------------
   This procedure generates an outgoing MT320 SWIFT message.
  
   Parameters
    CID - account number  - (required)
    MSTYP - message type , either NEW,AMEND,ROLLOVER, or CANCEL (required) 
    MDT - maturity date of account.  If the MT320 is being created for
    rollover information, then this value is the new maturity date when
    the account rolls over. (required)
   ---- Revision History ------------------------------------------------
    01/12/04 - CARROLLJ - CR7901
  		 Corrected parameter mismatch errors.
  
    11/01/2002 - JERUCHIMC - 51283
	         Add dep.type parameter to call to DEPMOD1.  Replace $$^CUVAR
		 with Db.getRecord

    01/06/2000 - JERUCHIMC - 36355
	         Modified procedure to add more white space, block comments,
	         and change indentations.

 */  
	new cuvar,field,fieldprc,rs,MSGTYPE,SWIFTADD
	set MSGTYPE=320
	type RecordCUVAR cuvar=Db.getRecord("CUVAR","*")
	set SWIFTADD=cuvar.swiftadd
	
	/* Create deposit objects so we can get values from the account 
	for use in building the MT320 message. */
	
	new depsw,dep
	type RecordDEP dep
	type RecordDEPSWIFT depsw
	set dep=Db.getRecord("DEP","CID")

	if (MSTYP'="NEW") do {  
		set x=Db.isDefined("DEPSWIFT","CID")
 		if x'=0 set depsw=Db.getRecord("DEPSWIFT","CID")
		}
	if x=0 quit

	/* check number of credits.  If credits have
	been made to account, don't generate MT320. */

	new cntcr
	if (MSTYP="AMEND") set cntcr=dep.cntcr
	if ($G(cntcr)>0),(MSTYP="AMEND") quit

	// Create a new SWIFT object that will be the MT320.
	if $G(MDT)="" set MDT=dep.MDT
	new swift
	type RecordSWIFT swift=Class.new("RecordSWIFT")
	set swift.swdirect="OUT",swift.msg="320"

	// Now loop through ^STBL("SWIFTMSG") to get fields for the MT320.
	type ResultSet rs=Db.select("FIELD","STBLSWMSG","MSGTYPE=320")
	if rs.isEmpty() quit
	for  quit:'rs.next()  do { quit:ER      // point to next row
		set field=rs.getCol(1)		// First column value
		set field=$P(field,":",1)
		set fieldprc="F"_field_"(.swift,.dep,.depsw)"
		do @fieldprc			// Call each linetag to build a field
		if $G(ER)=1 do EXC(.dep)
		}

	if $G(ER)=1 set ER=0  quit		
	
 	/* if we got an error, continue whatever other processing was
	happening, just don't file the SWIFT message. if no errors encountered,
 	After the object is built, file it. Also, save changes to depswift
	that may have occured, such as reference number   */
		
	set swift.sndr=SWIFTADD
	set swift.priority="N"
	do FILESW(.swift,.depsw)
	quit

F20(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)  
	
	/* Transaction Reference Number
	generate transaction reference number using source (method) 5 */
	
	new trrefno,SOURCE
	set SOURCE=5
	do ^TRREFNO(SOURCE)
	if $G(ER)=1 quit
	set trrefno=Db.getOneRow("REFNO","TRREF","SOURCE")
	set swift.trrefno=trrefno

	/* store reference number on the account so we can use
	it again for amendments. */
	
	if MSTYP="NEW" set depsw.mt320ref=trrefno
	quit

F21(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw) 

	// Related Reference
	if MSTYP="NEW" set swift.relref="NEW"
	else  set swift.relref=depsw.mt320ref
	quit

F22(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw) 

	// Code/Common Reference
	new ccr,sender,refcode,recvr,irn
	// This field consists of sender's BIC , reference code, and receiver's BIC
	set sender=SWIFTADD
	if $G(ER)=1 quit
	set recvr=$$RECVR(.swift,.dep,.depsw)
	if $G(ER)=1 quit
	set irn=dep.irn
	set refcode=$$REFCODE(irn)
	if $G(ER)=1 quit
	set ccr=MSTYP_"/"_recvr_refcode_sender
	set swift.cmnref=ccr 
	set swift.rcvr=recvr
	quit

F30(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	// Date Contract Agreed/Amended
	new vdate
	if MSTYP="NEW" set vdate=dep.odt
	if MSTYP="CANCEL" set vdate=dep.dtc
	if (MSTYP="AMEND")!(MSTYP="ROLLOVER") set vdate=TJD
	// convert date to YYMMDD format
	set %JD=vdate
	set vdate=$$DAT^%ZM(%JD,"YYMMDD")
	set swift.vdate=vdate
	quit

F31C(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	/* Maturity Date of Deposit
	convert date to YYMMDD format
	The MDT parameter should be from DEP.MDT or ROLLOVR.MDT, depending
	on what caused the MT320 to be generated. */
	
	new mdtval
	set %JD=MDT
	set mdtval=$$DAT^%ZM(%JD,"YYMMDD")
	set swift.mdtdep=mdtval
	quit

F32a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	// Value Date of Deposit,Currency Code, Contract Amount
	if (MSTYP="NEW")!(MSTYP="CANCEL")!(MSTYP="AMEND") do {
		new org,odt,crcd
		set org=dep.org
		// convert periods to commas
		set org=$$PERTOCOM(org)
		// make sure we have at least one digit with a comma.
		if org="" set org="0,"
		if org'["," set org=org_"," 
		// convert date to YYMMDD format
		set %JD=dep.odt
		set odt=$$DAT^%ZM(%JD,"YYMMDD")
		set crcd=dep.crcd
		set swift.vcab=odt_crcd_org
 		}

	if MSTYP="ROLLOVER" do {
		// use the deposit modeler to calculate future value
		new futval,odt,return,day,org
		new x,val2,val
		set %JD=MDT
		set mdtval=$$DAT^%ZM(%JD,"YYMMDD")			
		set futval=$$MODELER(.dep)
		set swift.vcab=mdtval_dep.crcd_futval
		}
	quit

F33a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	/* Value Date for Change, Currency Code, Principal Amount to 
	be Transferred.  Only include this field if the CD will 
	transfer funds at maturity */
	
	if (dep.rencd'=2),(dep.rencd'=4) quit
	new mdtval,tframt,prena,crcd
	set prena=dep.prena
	set tframt=$$MODELER(.dep)-prena
	set %JD=dep.mdt
	set mdtval=$$DAT^%ZM(%JD,"YYYYMMDD") 
	set swift.vcas=mdtval_dep.crcd_tframt
	quit

F34a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)
	
	// Next Interest Due Date, Currency Code, Interest Amount
	new inpval,nip,crcd
	set %JD=dep.inp
	if %JD="" set ER=1,RM=$$^MSG(4157)
	// SWIFT MT320 message not created. Account must have Interest Next Posting Date.
	if $G(ER)=1 quit
	set inpval=$$DAT^%ZM(%JD,"YYMMDD")
	
	// calculate interest amount to be paid at next interest posting date
	set cntcr=dep.cntcr
	if $G(cntcr)'="" set nip=dep.ipl-dep.ipl

	//amount must have , and must contain at least one digit.
	if $G(cntcr)="" set nip=$$MODELER(.dep)-dep.org
	if $G(ER)=1 quit
	if nip=$$PERTOCOM(nip)
	if nip="0" set nip="0,"
	if nip'["," set nip=nip_"," 
	set crcd=dep.crcd
	set swift.nidd=inpval_crcd_nip	
	quit	 

F37a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)
	
	// Interest Field
	new tagopt,rate,iacm,irn
	
	/* match interest accrual calculation methods from STBLIACM 
	to SWIFT tag options. */

	set iacm=dep.iacm

	if iacm="00" set tagopt="A" 
	if iacm="10" set tagopt="B"
	if iacm="11" set tagopt="C"
	if iacm="01" set tagopt="D"
	if iacm="13" set tagopt="E"
	if iacm="03" set tagopt="F"
	
	/* must have one of the above types to use this field.
	SWIFT MT320 message not created.  
	Interest Accrual Calculation Method invalid. */

	if $G(tagopt)="" set ER=1,RM=$$^MSG(4094)
	if $G(ER)=1 quit
	set irn=dep.irn
	set rate=$$PERTOCOM(irn)

	if (MSTYP="NEW"),(depsw.ipmeth'="") do {
		new period,ipf
		set %JD=dep.inp-1
		set period=$$DAT^%ZM(%JD,"YYMMDD")
		// for this field we need a period specified in months or days.
		set ipf=dep.ipf
		if '(ipf["D")!'(ipf["M") quit
		if (rate="0"),(depsw.ipmeth'="SEE72") set depsw.ipmeth="FIXED"
		if rate="0" set rate="0,"
		set rate=rate_"//"_period_ipf_"/"_depsw.ipmeth				
  		}

	if tagopt="A" set swift.interest=rate	
	if tagopt="B" set swift.intfldb=rate
	if tagopt="C" set swift.intfldc=rate
	if tagopt="D" set swift.intfldd=rate
	if tagopt="E" set swift.intflde=rate
	if tagopt="F" set swift.intfldf=rate 
	quit

F53a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	/* Sender's Correspondent
	SWIFT Sequence A */

	if depsw.sncora'="" set swift.sndrcorr=depsw.sncora
	if depsw.sncorb'="" set swift.sndrcorr1=depsw.sncorb
	if depsw.sncord1'="" do {
		set swift.sndrcorr1=depsw.sncord1
		set swift.sndrcorr2=depsw.sncord2
		set swift.sndrcorr3=depsw.sncord3
		set swift.sndrcorr4=depsw.sncord4
 		}

	// SWIFT Sequence B
	if depsw.sncorab'="" set swift.delivb=depsw.sncorab
	if depsw.sncorbb'="" set swift.delivb1=depsw.sncorbb
	if depsw.sncord1b'="" do {
		set swift.delivb2=depsw.sncord1b
		set swift.delivb3=depsw.sncord2b
		set swift.delivb4=depsw.sncord3b
		set swift.delivb5=depsw.sncord4b
		}
	
	quit

F56a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	/* Intermediary
	SWIFT Sequence A */

	if depsw.intmd'="" set swift.intb=depsw.intmd
	if depsw.intmd1'="" do {
		set swift.intb1=depsw.intmd1
		set swift.intb2=depsw.intmd2
		set swift.intb3=depsw.intmd3
		set swift.intb4=depsw.intmd4
		}	
	
	// SWIFT Sequence B
	if depsw.intmdb'="" set swift.ints=depsw.intmdb
	if depsw.intmd1b'="" do {
		set swift.ints1=depsw.intmd1b
		set swift.ints2=depsw.intmd2b
		set swift.ints3=depsw.intmd3b
		set swift.ints4=depsw.intmd4b
	        }

	// SWIFT Sequence C
	if depsw.intmdc'="" set swift.intc=depsw.intmdc
	if depsw.intmd1c'="" do {
		set swift.intc1=depsw.intmd1c	
		set swift.intc2=depsw.intmd2c
		set swift.intc3=depsw.intmd3c
		set swift.intc4=depsw.intmd4c
 		}

	quit

F57a(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	/* Account with Institution
	SWIFT Sequence A */

	if depsw.accwinst'="" set swift.recv=depsw.accwinst
	if depsw.accwinst1'="" do {
		set swift.recv1=depsw.accwinst1
		set swift.recv2=depsw.accwinst2
		set swift.recv3=depsw.accwinst3
		set swift.recv4=depsw.accwinst4
		}
	
	// SWIFT sequence B
	if depsw.acwinstb'="" set swift.send=depsw.acwinstb
	if depsw.acwinst1b'="" do {
		set swift.send1=depsw.acwinst1b
		set swift.send2=depsw.acwinst2b
		set swift.send3=depsw.acwinst3b
		set swift.send4=depsw.acwinst4b
		}	

	// SWIFT sequence C
	if depsw.acwinstc'="" set swift.sendc=depsw.acwinstc
	if depsw.acwinst1c'="" do {
		set swift.send1c=depsw.acwinst1c
		set swift.send2c=depsw.acwinst2c
		set swift.send3c=depsw.acwinst3c
		set swift.send4c=depsw.acwinst4c
        	}

	quit

F72(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	// Sender to Receiver Information
	set swift.by1=depsw.sntorec1
	set swift.by2=depsw.sntorec2
	set swift.by3=depsw.sntorec3
	set swift.by4=depsw.sntorec4
	set swift.by5=depsw.sntorec5
	set swift.by6=depsw.sntorec6
	quit

RECVR(RecordSWIFT swift,RecordDEP dep,RecordDEPSWIFT depsw)

	/* get receiver's SWIFT address.
	first look at the account level. */

	new val
	set val=dep.mt320a
 	if $G(val)'="" quit val

	/* if not found at the account level, 
	check in the primary CIF record */

	new rs
	type ResultSet rs=Db.select("ACN","DEP","CID=:CID")
	if rs.isEmpty() quit
	new CUST
 	new DONE
	set DONE=0
	for  quit:'rs.next()  do { quit:(DONE=1)
		set CUST=rs.getCol(1)
   		set DONE=1
		}
	set val=Db.getOneRow("MT320A","CIF","CUST")  
	if $G(val)'="" quit val
	set val=Db.getOneRow("SWIFTADD","CIF","CUST")
	if $G(val)'="" quit val
	
	/* if we got to here, we can't find the receiver's address, so log
	exception. */

	set ER=1,RM=$$^MSG(4088)
 	quit 0

REFCODE(IRN)

	/* format interest rate to fit SWIFT format for field 22.
	take out decimal place */
	
	new A,B
	set A=$P(IRN,".",1)
	set B=$P(IRN,".",2)
	set IRN=A_B
	if $L(IRN)>4 s IRN=$E(IRN,1,4)
	if $L(IRN)=1 S IRN="000"_IRN
	if $L(IRN)=2 S IRN="00"_IRN
	if $L(IRN)=3 S IRN="0"_IRN
	quit IRN

PERTOCOM(NUM)

	// format a number so that the decimal place is now a comma.
	new A,B
	set A=$P(NUM,".",1)
	set B=$P(NUM,".",2)
	if $G(B)="" quit A
	quit $G(A)_","_$G(B)

FILESW(RecordSWIFT swift,RecordDEPSWIFT depsw)

	// File the SWIFT record
	do swift.save()
	do depsw.bypassSave()
	quit

MODELER(RecordDEP dep)

	// returns future value of account
	set %JD=dep.odt
	// get the day of the month
	set day=$$DAT^%ZM(%JD,"YYMMDD")
	set day=$E(day,5,6)
	if $E(day)="0" set day=$E(day,2)
	// get term of the account
	new term,lenterm,termnu,termch,futval,return
	set term=dep.trm
	// get length of term
	set lenterm=$L(term)
	// seperate numeric and character portions of term
	set termnu=$E(term,1,(lenterm-1))
	set termch=$E(term,lenterm,lenterm)
	if termch="D" set icompfre=termnu_"DA"
	if termch="W" set icompfre=termnu_"WA"
	if termch="M" set icompfre=termnu_"MA"_day
	if termch="Q" set icompfre=termnu_"QA"_day
	if termch="Y" set icompfre=termnu_"YA"_day

	/* Call DEPMOD procedure to calculate future value
	Original amount not specified.  SWIFT MT320 message cannot be created.
	*/

	if (dep.org="")!(dep.org=0) set ER=1,RM=$$^MSG(4158)
	if $G(ER)=1 quit
	set val=$$^DEPMOD1(.return,1,dep.odt,dep.iacm,icompfre,"1MA1",0,dep.org,"",dep.irn,term,,,dep.type)
	if $G(ER)=1 quit
	S val2=$$LV2V^MSG(return,.x)
	if $G(ER)=1 quit
	set futval=x(3)
	quit futval

EXC(RecordDEP dep)
	
	// log exception to exception report
	do LOG^UTLEXC($T(+0),"*",$G(RM),CID,"",$S($G(ET)'="":ET,1:$G(RM)),dep.bal) 
	quit

vSIG()	quit "59886^43612^Sanchez SCM Administrator^12239"	// Signature - LTD^TIME^USER^SIZE
