TTXBLD		/*

	Procedure ID:  TTXBLD

	Description: Build Transaction Object

	This procedure contains public functions that are related to
	batch processing of financial transactions.

	---- Revision History ------------------------------------------------
	
	03/20/06 - TITOVE - CR 20087
		   Modified OFFSET by correcting data type for BCHID argument.

	03/14/05 - SmithCD - CR 13782
		   Modified OFFSET section to put the TP fence around 
		   individual cost centers instead of the entire array of 
		   offsets. This was originally reported with CR 14223, 
		   and prevents %GTM-E-TRANS2BIG errors when a large number 
		   of offset transactions are involved. Also modified to 
		   comply with current PSL standards.

	01/06/04 - CARROLLJ - CR7658
		   Correct parameter mismatch error.

	06/09/03 - CARROLLJ - 51349
		   Removed the use of the TR array and replace with ttx object
		   array.

	----------------------------------------------------------------------

	*/

	quit

public TTX(RecordTTX ttx, String column())

	/*

	Build PROFILE/IBS transaction input record
	
	This function updates a transaction object used in transaction
	processing.

	INPUTS:
	    . %MCP		Multi-currency flag

	ARGUMENTS:
	    . RecordTTX ttx	Transaction Object

	    . column("CID")	Account number
	    . column("EFD")	Effective date
	    . column("ETC")	Transaction code
	    . column("MSD")	Miscellaneous screen data
	    . column("TAMT")	Transaction amount
	    . column("TCMT")	Transaction comment
	    . column("TLO")	Transaction location
	    . column("TSO")	Transaction source

	    . column("SPR")	Spray number
	    . column("OCC")	Override cost center
	    . column("DISC")	Discretionary data
	    . column("CHKTYP")	Check type

	    . column("CRCD")	Currency code
	    . column("RATE")	Exchange rate
	    . column("VDT")	Value date
	    . column("MULT")	Multiply indicator
	    . column("BSEAMT")	Base anount
	    . column("CUSTCD")	Customer code
	    . column("TRESREF")Treasury reference
	    . column("BCRCD")	Base currency code
	    . column("LNERC")   Loan Error-Correct Data
	    . column("BRCDE")	Branch Code
	    . column("TRC")	Transaction Trace Number
	    . column("UIDT")	User ID
	*/
	
	if 'column("CID").get().isNull() set ttx.cid = column("CID")
	if 'column("ITC").get().isNull() set ttx.itc = column("ITC")
	if 'column("ETC").get().isNull() set ttx.etc = column("ETC")
	if 'column("TSO").get().isNull() set ttx.tso = column("TSO")
	if 'column("EFD").get().isNull() set ttx.efd = column("EFD")
	if 'column("TLO").get().isNull() set ttx.tlo = column("TLO")
	if 'column("TAMT").get().isNull() set ttx.tamt = column("TAMT")
	if 'column("TCMT").get().isNull() set ttx.tcmt = column("TCMT")

	if 'column("OCC").get().isNull() set ttx.cc = column("OCC")
	if 'column("MSD").get().isNull() set ttx.msd = column("MSD")
	if 'column("SPR").get().isNull() set ttx.spr = column("SPR")
	if 'column("CHKTYP").get().isNull() set ttx.chktyp = column("CHKTYP")
	if 'column("LNERC").get().isNull() set ttx.lnerc = column("LNERC")
	if 'column("BRCDE").get().isNull() set ttx.brcde = column("BRCDE")
	if 'column("TRC").get().isNull() set ttx.trc = column("TRC")
	if 'column("UIDT").get().isNull() set ttx.uidt = column("UIDT")

	if 'ttx.etc.isNull(), ttx.itc.isNull() do {
		type Public Cache %CACHE()
		
		type RecordTRN trn = %CACHE("TRN").getRecord("TRN", "ETC=:ttx.etc")
		set ttx.itc = trn.itc
		}

	if 'column("DISC").get().isNull() do {
		type String TSO, UTSO

		set UTSO("DISC1") = column("DISC").piece("#", 1)
		set UTSO("DISC2") = column("DISC").piece("#", 2)
		set TSO = ttx.tso

		do IN^UTSO(.UTSO(), .TSO)

		set ttx.tso = TSO
		}

	#if CUVAR.%MCP
		if 'column("CRCD").get().isNull() set ttx.crcd = column("CRCD")
		if 'column("RATE").get().isNull() set ttx.rate = column("RATE")
		if 'column("VDT").get().isNull() set ttx.vdt = column("VDT")
		if 'column("MULT").get().isNull() set ttx.mult = column("MULT")
		if 'column("BSEAMT").get().isNull() set ttx.bseamt = column("BSEAMT")
		if 'column("CUSTCD").get().isNull() set ttx.custcd = column("CUSTCD")
		if 'column("TRESREF").get().isNull() set ttx.tresref = column("TRESREF")
		if 'column("BCRCD").get().isNull() set ttx.bcrcd = column("BCRCD")
		if 'column("SYSBASE").get().isNull() set ttx.sysbase = column("SYSBASE")
	#endif
	
	quit


public OFFSET(Date TPD, 
	      Number BRCD,
	      String %UserID,
	      String BCHID)

	// Post offsetting transactions stored in TMPBCHOFF

	type Number CC, DRCR
	type String CRCD, DESC, GLSC, PTYPE, tot(,,,,), tot(,,,,,)

	type DbSet ds = Db.selectDbSet("TMPBCHOFF", "TJD=:TPD AND BCHID=:BCHID")
	
	if ds.isEmpty() quit

	while ds.next() do {
		type RecordTMPBCHOFF tmp = ds.getRecord()
		
		set DESC = tmp.desc
		set CRCD = tmp.crcd
		set PTYPE = tmp.type
		set GLSC = tmp.glsc
		set CC = tmp.cc

		if 'tot(DESC,CRCD,PTYPE,GLSC,CC).data() do {
			set tot(DESC,CRCD,PTYPE,GLSC,CC,0) = 0
			set tot(DESC,CRCD,PTYPE,GLSC,CC,1) = 0

			set tot(DESC,CRCD,PTYPE,GLSC,CC).piece("|", 1) = tmp.gldr
			set tot(DESC,CRCD,PTYPE,GLSC,CC).piece("|", 2) = tmp.gldretc

			set tot(DESC,CRCD,PTYPE,GLSC,CC).piece("|", 3) = tmp.glcr
			set tot(DESC,CRCD,PTYPE,GLSC,CC).piece("|", 4) = tmp.glcretc

			set tot(DESC,CRCD,PTYPE,GLSC,CC).piece("|", 5) = tmp.tso
			set tot(DESC,CRCD,PTYPE,GLSC,CC).piece("|", 6) = tmp.tcmt
			}

		set tot(DESC,CRCD,PTYPE,GLSC,CC,0) = tot(DESC,CRCD,PTYPE,GLSC,CC,0) + tmp.debit
		set tot(DESC,CRCD,PTYPE,GLSC,CC,1) = tot(DESC,CRCD,PTYPE,GLSC,CC,1) + tmp.credit
		}

	do scan

	set (DESC,CRCD,PTYPE,GLSC,CC,DRCR) = ""
	
	for  set DESC = tot(DESC).order() quit:DESC.isNull()  do {
		for  set CRCD = tot(DESC,CRCD).order() quit:CRCD.isNull()  do {
			for  set PTYPE = tot(DESC,CRCD,PTYPE).order() quit:PTYPE.isNull()  do {
				for  set GLSC = tot(DESC,CRCD,PTYPE,GLSC).order() quit:GLSC.isNull()  do {
					for  set CC = tot(DESC,CRCD,PTYPE,GLSC,CC).order() quit:CC.isNull()  do {
						type String total(,,,,), total(,,,,,)

						set total(DESC,CRCD,PTYPE,GLSC,CC) = tot(DESC,CRCD,PTYPE,GLSC,CC)

						for  set DRCR = tot(DESC,CRCD,PTYPE,GLSC,CC,DRCR).order() quit:DRCR.isNull()  do {
							set total(DESC,CRCD,PTYPE,GLSC,CC,DRCR) = tot(DESC,CRCD,PTYPE,GLSC,CC,DRCR)
							}
						
						do Runtime.start("BA")
						
						do BCHOFF^UMSC(TPD, BRCD, %UserID, .total())
						
						do Runtime.commit()
						}
					}
				}
			}
		}

	do Db.fastDelete("TMPBCHOFF","TPD,BCHID")
	
	quit


scan	// Scan array for negative posting amounts

	type public String tot(,,,,), tot(,,,,,)

	type Number CC, PTYPE
	type String CRCD, DESC, GLSC

	set (DESC,CRCD,PTYPE,GLSC,CC) = ""
	
	for  set DESC = tot(DESC).order() quit:DESC.isNull()  do {
		for  set CRCD = tot(DESC,CRCD).order() quit:CRCD.isNull()  do {
			for  set PTYPE = tot(DESC,CRCD,PTYPE).order() quit:PTYPE.isNull()  do {
				for  set GLSC = tot(DESC,CRCD,PTYPE,GLSC).order() quit:GLSC.isNull()  do {
					for  set CC = tot(DESC,CRCD,PTYPE,GLSC,CC).order() quit:CC.isNull()  do {
						if tot(DESC,CRCD,PTYPE,GLSC,CC,0) < 0 d neg(0)
						if tot(DESC,CRCD,PTYPE,GLSC,CC,1) < 0 d neg(1)
						}
					}
				}
			}
		}

	quit


neg(Number DC)

	type public String tot(,,,,), tot(,,,,,), DESC, CRCD, GLSC
	type public Number PTYPE, CC

	/*
	Reverse GL account for negative amounts
	
	Define a new key level to contain the amounts moved from
	negative to positive.  Append a hyphen to 'PTYPE' to create
	this new level.  The hyphen designates a negative entry and
	this new key is only used to track these amounts/entries
	separately.
	*/
	type String KEY, TOTREC

	set KEY = "-"_PTYPE
	if tot(DESC,CRCD,KEY,GLSC,CC).get().isNull() do {
		set TOTREC = tot(DESC,CRCD,PTYPE,GLSC,CC)
		set tot(DESC,CRCD,KEY,GLSC,CC) = TOTREC

		// Define a new control level with debit/credit accounts flipped
		set tot(DESC,CRCD,KEY,GLSC,CC).piece("|", 1) = TOTREC.piece("|", 3)
		set tot(DESC,CRCD,KEY,GLSC,CC).piece("|", 3) = TOTREC.piece("|", 1)
		set tot(DESC,CRCD,KEY,GLSC,CC,0) = ""
		set tot(DESC,CRCD,KEY,GLSC,CC,1) = ""
		}

	// Move amount from a negative credit/debit to positive debit/credit
	set tot(DESC,CRCD,KEY,GLSC,CC,'DC) = -tot(DESC,CRCD,PTYPE,GLSC,CC,DC)
	set tot(DESC,CRCD,PTYPE,GLSC,CC,DC) = ""

	quit


public	CURXFR(RecordTTX ttx(), String CTL)

	/*
	Generate/build multi currency exchanges/offset transactions 
	
	This function updates a transaction object used in transaction
	processing with the necessary exchange amount, within currency offsets,
	and other miscellaneous multi currency data items.

	ARGUMENTS:
	    . ttx()		Transaction Object Array	/TYP=RecordTTX/REQ/REF:RW

            . CTL               Control characters
                                0 - perform exchange via EXCH^CRCDUTL
                                1 - Generate currency offset transactions

	*/
	
	type public Boolean ER

	set CTL = CTL.get()
	
	if 'CTL do EXCH^CRCDUTL(.ttx()) if ER quit
	if CTL do EXCHOFF^TTXEXT(.ttx()) if ER quit

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60344^41512^Eugene Titov^8600"	// Signature - LTD^TIME^USER^SIZE
