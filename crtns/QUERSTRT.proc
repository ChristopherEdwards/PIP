QUERSTRT	// Queue Event Restart
	/*
	ORIG:  Pete Chenard 7-10-90
	DESC: Restarts an event that was previously stopped.

	---- Revision History ------------------------------------------------
	  
	12/11/04 - RussellDS - CR13642
		   Fix various errors.  Fix PSL warnings.
		   
		   Modified calls to SBMTBCH^%OSSCRPT to pass new parameters
		   to indicate DBI version handling.
		   
		   Modify call to JOBNAM^%ZFUNC to include VERSION to indicate
		   DBI.  This avoids old calls in JOBNAM^%ZFUNC that interact
		   with globals.
		   
		   Removed old revision history.
	 
	12/18/03 - CARROLLJ - CR7239
		   Correct undefined error in EVNTALL section.

	06/10/02 - DATTAR - ARQ 49794
		   Converted to PSL

	 -----------------------------------------------------------------------

	*/
	
	type Number BEGOFF		// 1st Batch's Offset time
	type String %READ, %TAB(), EVENT, VFMQ

	// Initialize Beginning Offset to <<NULL>>
	set BEGOFF=""

	set %TAB("EVENT")=".EVENT1/TBL=[UTBLEVENT]/XPP=D EVNTPP^QUERSTRT"

	set %READ="@@%FN,,,EVENT/REQ"

	do ^UTLREAD if VFMQ="Q" do END quit

	do REFRESH(EVENT)
	do SUB
	do END 
	quit


SUB	// Submit the queues in the event at the appropriate job

	// Entry point for ^%ZJOB as well -- see ^BCHMON

	type public String ER, EVENT, RM

	if '$$SCABATCH^%ZFUNC do { do END quit

		// Logical SCA$BATCH must be defined
		set ER=1 
		set RM=$$^MSG(1658)
		do EVNTLOG^%ZFUNC(1658,"STBLMSG")
	}

	do EXEC(EVENT)
	quit


EXEC(String EVENT)	//Submit the batch to run

	type Boolean isDone
	type Number BATCH, BCHNUM, JOB

	type ResultSet utblebch=Db.select("BATCH","UTBLEBCH","EVENT=:EVENT","BATCH")
	while utblebch.next() do {
		set BCHNUM=utblebch.getCol("BATCH")
		type RecordQUEUEB queueb=Db.getRecord("QUEUEB","BCHNUM=:BCHNUM")	

		 // Check QUEUE Submission Indicator.
		quit:'queueb.subm
	
		set isDone = 0
	
		type DbSet ds = Db.selectDbSet("QUEUEJ", "BCHNUM=:BCHNUM", "JOBNUM ASC")
		while ds.next() do { quit:isDone
			type RecordQUEUEJ queuej=ds.getRecord("QUEUEJ")
			
			if queuej.lstat=2 do { quit
								
				//Last status
				do SUBMIT(.queueb,.queuej,EVENT)

				//resubmitted
				set isDone = 1
			}

                        /* 	
			Allow restart at a job which aborted on 
			resubmission error only if the rest of the 
			batch did not complete.  This will be true if 
			the job level [QUEUEJ]AOF is set to 1 which 
			means that the rest of the batch would
			not have run.
			*/ 

			if (queuej.lstat=4),(queuej.aof=1) do { quit
				do SUBMIT(.queueb,.queuej,EVENT)
				
				set isDone = 1
			}

			/*	 
			Allow restart at a job which aborted on dependency
			error only if the rest of the batch did not complete.
			This will be true if  the batch level [QUEUEB]AOE is
			set to 1 which means that the entire batch would not
			have run.
			*/

			if (queuej.lstat=6),(queueb.aoe=1) do { quit
				do SUBMIT(.queueb,.queuej,EVENT)
				
				set isDone = 1
			}

			// stopped manually
			if queuej.lstat=7 do { quit
				do SUBMIT(.queueb,.queuej,EVENT)
							
				set isDone = 1
			}

			//job never finished
			if queuej.stim,'queuej.ctim do { quit
				
				//resubmit job
				do SUBMIT(.queueb,.queuej,EVENT)			
	
				//resubmitted
				set isDone = 1
			}

			//no time started
			if 'queuej.stim do { quit

				//resubmit job
				do SUBMIT(.queueb,.queuej,EVENT)

				//resubmitted
				set isDone = 1
			}
		}
	}
	
	quit


SUBMIT(RecordQUEUEB queueb, RecordQUEUEJ queuej, String EVENT) // Submit job

	/*
	Note - some of these variables are used by % routines, in some case
	specific to VMS.  E.g., see %QUEFUNC on VMS for use of QUEDEL and
	QUEIDT.
	*/
	
	type public String ER

	type Boolean QUEDEL, QUEIDT
	type Date QUEDAT
	type Number BCHNUM, BEGOFF, JOBNUM, QUETIM, TJOB
	type String QUEDCL
	
	set BCHNUM=queuej.bchnum
	set JOBNUM=queuej.jobnum

	set QUEDAT=%CurrentDate
	set BEGOFF=queueb.strt

	//Delta time
	set QUETIM=(queueb.strt*60)+%CurrentTime-(BEGOFF*60)
	if QUETIM>86399 set QUEDAT=QUEDAT+1 set QUETIM=QUETIM-86400

	set QUEDCL=queueb.vmstag_".COM"
	set QUEDEL=1 set QUEIDT=0

	set ER=$$SBMTBCH^%OSSCRPT(BCHNUM,JOBNUM,EVENT,QUEDCL,+queuej.reti,queueb.fre,queueb.strt)
	if ER do { quit
		// Batch submit error
		do EVNTLOG^%ZFUNC("QUEBCHSBMT","STBLER",BCHNUM)
	}

	//I18N=OFF

	type ResultSet rs=Db.select("JOBNUM","QUEUEJ","BCHNUM=:BCHNUM","JOBNUM")
	if rs.next() set TJOB=rs.getCol(1)
	
	// Batch ~p1 restarted at job ~p2
	write !,$$^MSG(5763,BCHNUM,$S(JOBNUM'=0:JOBNUM,1:TJOB)))       // Batch ~p1 restarted at job ~p2

	// I18N=ON

	// Batch ~p1 restarted at job ~p2
	do EVNTLOG^%ZFUNC(5763,"STBLMSG",BCHNUM_","_JOBNUM)
	
	quit


REFRESH(String EVENT)	// Reset Batch/Job information and Refresh job dependencies

	type Number BCHNUM, JOBNUM
	type String QUEDCL

	do Runtime.start("CS")

	type RecordQUECTRL quectrl = Db.getRecord("QUECTRL", "EVENT=:EVENT", 1)
	if quectrl.ctlmsg="STOP" do {
		set quectrl.ctlmsg = ""
		do quectrl.bypassSave()
	}
		
        type ResultSet utblebch=Db.select("BATCH","UTBLEBCH","EVENT=:EVENT","BATCH")
        while utblebch.next() do {
		set BCHNUM = utblebch.getCol("BATCH")
                type RecordQUEUEB queueb = Db.getRecord("QUEUEB","BCHNUM=:BCHNUM")

 		//turn stop indicator off
                set queueb.stop = 0
                set QUEDCL = "Q"_BCHNUM_"_"_+%CurrentDate_%CurrentTime
                set queueb.vmstag = QUEDCL
		do queueb.bypassSave()
	
		type DbSet ds = Db.selectDbSet("QUEUEJ", "BCHNUM=:BCHNUM", "JOBNUM ASC")
                while ds.next() do {
	           	type RecordQUEUEJ queuej = ds.getRecord("QUEUEJ")
	           	set JOBNUM = queuej.jobnum
			
			//Re-init retry counter
			set queuej.sdat = 0
			do queuej.bypassSave()
			
			type DbSet ds2 = Db.selectDbSet("QUEUED", "BCHNUM=:BCHNUM AND JOBNUM=:JOBNUM")
			while ds2.next() do {
				type RecordQUEUED queued = ds2.getRecord("QUEUED")

				// Check for completion date
				if 'queued.cdate.isNull() do {
					set queued.cdate = %CurrentDate
					set queued.ctime = %CurrentTime	
					do queued.bypassSave()
				}
			}
		}
	}
		
	do Runtime.commit()		
	
	quit


EVNTPP	//Check all queues in the event.  Make sure this event is restartable

	type public String ER, RM, X
	
	type String QUERST()

	do UCLS(X) quit:ER
	do CHECK(X) quit:ER
	do QUE(X) quit:ER

	// Event ~p1 cannot be restarted
	if '$D(QUERST) set ER=1 set RM=$$^MSG(1022,X)
	
	// Event ~p1 cannot be restarted
	do EVNTLOG^%ZFUNC(1022,"STBLMSG",X)
	
	quit

    
public QUE(String EVENT,	// Event name
	   Boolean RUNNING)	// Running indicator		/NOREQ/MECH=REFNAM:W

	/*
	Check the queues to make sure they're not already running.
	*/

	type public Number %OSAVE
	type public String ER, QUERST(), RM
	
	type Number BCHNUM, ETIM, JOBNUM, QUE, STIM
	type String JOBNAM

	set (ER, RUNNING) = 0

	type ResultSet utblebch=Db.select("BATCH","UTBLEBCH","EVENT=:EVENT","BATCH")
        if 'utblebch.isEmpty() while utblebch.next() do { quit:ER
		set QUE=utblebch.getCol(1)		
		if 'Db.isDefined("QUEUEB","BCHNUM=:QUE") do { quit
			set ER=1
                        // Batch ~p1 was not submitted originally
                        set RM=$$^MSG(340,QUE)
                        do EVNTLOG^%ZFUNC(340,"STBLMSG",QUE)
		}
	
		type RecordQUEUEB queueb=Db.getRecord("QUEUEB","BCHNUM=:QUE")
		
		// If the queue wasn't submitted originally, don't restart it.
		if %OSAVE'=1,'queueb.subm quit
		set JOBNAM=queueb.vmstag

		//Add ref. to Event & batch
		set RUNNING=$$JOBNAM^%ZFUNC(JOBNAM,EVENT,QUE,2)

		if JOBNAM="" set RUNNING=0
		if RUNNING do { quit
			set ER=1
			// ~p1.  Batch ~p2 is currently running.
			set RM=$$^MSG(3106,$G(RM),QUE)
			do EVNTLOG^%ZFUNC(3106,"STBLMSG",QUE)
		}

		//Status of last run - successful completion
		if queueb.lstat=0 quit
		
		type DbSet ds=Db.selectDbSet("QUEUEJ","BCHNUM=:QUE","JOBNUM")
                while ds.next() do {
                	type RecordQUEUEJ queuej=ds.getRecord("QUEUEJ")
			set STIM=queuej.stim
			set ETIM=queuej.ctim		
			if STIM="" set QUERST(QUE)="" quit

			//this job started but never finished
			if STIM'="",ETIM="" set QUERST(QUE)="" quit

			//so restart it
			if queuej.lstat=7 set QUERST(QUE)="" quit
		}
	}
	
	quit


UCLS(String EVENT)	//Check userclass authorization

	type public String ER, RM

	type String UCLS

	// Data required
	if EVENT="" set ER=1 set RM=$$^MSG(741) quit
	if 'Db.isDefined("UTBLEVENT","EVENT=:EVENT") do { quit
		set ER=1
		// ~p1 does not exist in EVENT user table
		set RM=$$^MSG(3030,EVENT)
		do EVNTLOG^%ZFUNC(3030,"STBLMSG",EVENT)
	}

	 type ResultSet rs=Db.select("EVENT","UTBLEBCH","EVENT=:EVENT") 
	 if rs.isEmpty() do { quit
		set ER=1
		// No batches tied to this event
		set RM=$$^MSG(1896)
		do EVNTLOG^%ZFUNC(1896,"STBLMSG")
	}

	 set UCLS=%UserClass
	 if 'Db.isDefined("UTBLEVENTAUH","EVENT=:EVENT,UCLS=:UCLS") do { quit
		set ER=1
		// Userclass ~p1 not authorized to run this event
		set RM=$$^MSG(2902,%UserClass)
		do EVNTLOG^%ZFUNC(2902,"STBLMSG",%UserClass)
	}

	set ER=0
	
	quit


CHECK(String EVENT)	//Verify that all queues for the given event exist

	type public String ER, RM

	type Number BCHNUM
	
	type ResultSet utblebch=Db.select("BATCH","UTBLEBCH","EVENT=:EVENT","BATCH")
        if 'utblebch.isEmpty() while utblebch.next() do { quit:ER
                set BCHNUM=utblebch.getCol(1)
                if 'Db.isDefined("QUEUEB","BCHNUM=:BCHNUM") do { quit
			// Batch ~p1 does not exist
			set ER=1 
			set RM=$$^MSG(338,BCHNUM)
	                do EVNTLOG^%ZFUNC(338,"STBLMSG",BCHNUM)
		}
	}

	quit
	
	
EVNTALL	//Private; Restart all events that were running

	/*
	This linetag is called from an os script during a failover and
	batch auto restart is on.
	*/
	
	type public String ER
	
	type Number %OSAVE
	type String EVENT

	set %OSAVE=0 
	set ER=0 

	type ResultSet quetbleb=Db.select("EVENT","QUETBLEB",,"EVENT")
	while quetbleb.next() do {
		set EVENT=quetbleb.getCol("EVENT")
		do EVENT(EVENT)
	}
	
	quit


EVENT(String EVENT)	//Private; Restart individual events

	type public String ER

	type String QUERST()
	
	do CHECK(EVENT) 
	if ER quit
	
	do QUE(EVENT) 
	if ER quit 	

	quit:'$D(QUERST)
	
	do REFRESH(EVENT)
	
	do EXEC(EVENT)
	
	quit


ERR	// Log MUMPS errors

	type public String ER, VFMQ

	set ER=1 do ^UTLERR
	set VFMQ="Q"
	quit


END	// Exit function

	type public String ER, EVENT, RM, VFMQ
	
	type Number %MSGID

	quit:$G(ER)=1  
	
	set EVENT=$G(EVENT)
	set ER="W"
	
	// Event ~p1 not restarted
	if VFMQ="Q" do {
		// Event ~p1 not restarted
		set RM=$$^MSG(1030,EVENT)
	}
	
	// Event ~p1 restarted
	else  set RM=$$^MSG(1032,EVENT)

	do EVNTLOG^%ZFUNC(+%MSGID,"STBLMSG",EVENT)
	
	quit

vSIG()	quit "59930^72928^Dan Russell^10073"	// Signature - LTD^TIME^USER^SIZE
