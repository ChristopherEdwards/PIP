LNOLCFIL(RecordLNOLC2 lnolc2, String vpar, Boolean vparNorm) // LNOLC2 - On-Line Collection Lseq Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             11/22/2003
	// Trigger Definition (2)                      11/28/2005
	// Journal File Definition (1)                 
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnolc2.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnolc2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnolc2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = lnolc2.acn
	type String UID = lnolc2.uid
	type String LSEQ = lnolc2.lseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("UID").exists()!vx("LSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNOLC2",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNOLC2","ACN = :lnolc2.acn and UID = :lnolc2.uid and LSEQ = :lnolc2.lseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String UID
	type public String LSEQ

	type RecordLNOLC2 lnolc2 = Db.getRecord("LNOLC2","ACN=:ACN,UID=:UID,LSEQ=:LSEQ")
	if (%ProcessMode = 2) do {
		do lnolc2.setMode(2)

		do LNOLCFIL(lnolc2,vpar)
	}
	else  do VINDEX(lnolc2)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNOLC2 lnolc2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNOLC2","ACN = :lnolc2.acn and UID = :lnolc2.uid and LSEQ = :lnolc2.lseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnolc2))  S ^LNOLC(0,vobj(lnolc2,-3),vobj(lnolc2,-4),vobj(lnolc2,-5))=vobj(lnolc2)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnolc2)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lnolc2) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNOLC2 lnolc2

	if vpar["/INDEX/" do VINDEX(.lnolc2)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lnolc2)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^LNOLC(0,vobj(lnolc2,-3),vobj(lnolc2,-4),vobj(lnolc2,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNOLC2 lnolc2

	// Type local variables for access keys for defaults
	type public String ACN
	type public String UID
	type public String LSEQ

	if lnolc2.clf.isNull() set lnolc2.clf = 0              // clf
	type public String TJD
	if lnolc2.efd.isNull() set lnolc2.efd = TJD            // efd
	quit


vreqn // Validate required data items

	type public RecordLNOLC2 lnolc2

	if lnolc2.cid.isNull() do vreqerr("CID") quit
	if lnolc2.clf.isNull() do vreqerr("CLF") quit
	if lnolc2.efd.isNull() do vreqerr("EFD") quit
	if lnolc2.ptd.isNull() do vreqerr("PTD") quit
	if lnolc2.tda.isNull() do vreqerr("TDA") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNOLC2 lnolc2

	if lnolc2.acn.isNull() do vreqerr("ACN") quit
	if lnolc2.uid.isNull() do vreqerr("UID") quit
	if lnolc2.lseq.isNull() do vreqerr("LSEQ") quit

		if vx("CID").exists(),lnolc2.cid.isNull() do vreqerr("CID") quit
		if vx("CLF").exists(),lnolc2.clf.isNull() do vreqerr("CLF") quit
		if vx("EFD").exists(),lnolc2.efd.isNull() do vreqerr("EFD") quit
		if vx("PTD").exists(),lnolc2.ptd.isNull() do vreqerr("PTD") quit
		if vx("TDA").exists(),lnolc2.tda.isNull() do vreqerr("TDA") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNOLC2","MSG",1767,"LNOLC2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNOLC2 lnolc2
	if 'lnolc2.acn.isNull() set vfkey("^CIF("_""""_lnolc2.acn_""""_","_1_")")="LNOLC2(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNOLC2 lnolc2
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":lnolc2.acn") set vERRMSG = $$^MSG(8563,"LNOLC2(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNOLC2 lnolc2
	if vx("").order().isNull() do AUDIT^UCUTILN(lnolc2,.vx(),1,"|") quit
	if vx("CID").exists()!vx("PTD").exists()!vx("TDA").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnolc2,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordLNOLC2 lnolc2
	/*
	-----Revision History--------------------------------------------------
	
	11/11/05 - SATYANAS -18007
		   Modified the code to PSL Standards.
		   
	10/21/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	type public Boolean ER
		
	// Get last sequence from LNOLC2 table
	
	// Missing required data
	if lnolc2.fud.isNull() quit                  
	if lnolc2.cid.isNull() quit 
	if lnolc2.acn.isNull() quit 
		
	// Set up default values for PTD and TDA
	
	type ResultSet rs=Db.select("DIST1ND,GTDUE","LN","CID=:lnolc2.cid") 
	if rs.isEmpty() quit
		
	if ER quit  

	// Next due date
	set lnolc2.ptd=rs.getCol(1)

	// Total due
	set lnolc2.tda=rs.getCol(2)
	
	// To insert the data into DAYENDLNOLC table.
	if 'lnolc2.fud.isNull() do {        
	
		type RecordDAYENDLNOLC dlnolc=Db.getRecord("DAYENDLNOLC","EFD=:lnolc2.fud,UID=:lnolc2.uid,ACN=:lnolc2.acn,CID=:lnolc2.cid,LSEQ=:lnolc2.lseq",1)
		if 'dlnolc.getMode() do {
		
			type RecordDAYENDLNOLC dlnolc=Class.new("RecordDAYENDLNOLC")
			set dlnolc.efd=lnolc2.fud        
			set dlnolc.uid=lnolc2.uid        
			set dlnolc.acn=lnolc2.acn        
			set dlnolc.cid=lnolc2.cid        
			set dlnolc.lseq=lnolc2.lseq        
			do dlnolc.save()        
			}
		}	
	
	quit
	

vbu1 // Trigger BU_CID - Before update CID,PTD,TDA

	type public RecordLNOLC2 lnolc2
	do lnolc2.setAuditFlag(1)
	// Protect columns CID,PTD,TDA

	type public Boolean ER
	
	// Change to column ~p1 not allowed	
	if (lnolc2.cid.oldVal'=lnolc2.cid) do Runtime.setErrMSG("LNOLC2",412,"LNOLC2.CID") quit:ER 
	if (lnolc2.ptd.oldVal'=lnolc2.ptd) do Runtime.setErrMSG("LNOLC2",412,"LNOLC2.PTD") quit:ER 
	if (lnolc2.tda.oldVal'=lnolc2.tda) do Runtime.setErrMSG("LNOLC2",412,"LNOLC2.TDA") quit:ER 
	quit 
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNOLC2 lnolc2

	set X = lnolc2.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = lnolc2.uid if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("UID", vRM) quit
	set X = lnolc2.lseq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LSEQ", vRM) quit
	set X = lnolc2.cid if 'X.isNull(),'Db.isDefined("LN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if '("01"[lnolc2.CLF) set vRM=$$^MSG(742,"L") do vdderr("CLF", vRM) quit
	set X = lnolc2.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = lnolc2.fud if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FUD", vRM) quit
	set X = lnolc2.lchg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNOLC2.LCHG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnolc2.ptd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PTD", vRM) quit
	set X = lnolc2.tda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNOLC2.TDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnolc2.tdue if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNOLC2.TDUE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnolc2.tx1.length()>50 set vRM = $$^MSG(1076,50) do vdderr("TX1", vRM) quit
	if lnolc2.tx2.length()>50 set vRM = $$^MSG(1076,50) do vdderr("TX2", vRM) quit
	if lnolc2.tx3.length()>50 set vRM = $$^MSG(1076,50) do vdderr("TX3", vRM) quit
	if lnolc2.tx4.length()>50 set vRM = $$^MSG(1076,50) do vdderr("TX4", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNOLC2","MSG",979,"LNOLC2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNOLC2 lnolc2)	//LNOLC2 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.lnolc2)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=Last Contact
			}
		else  if TSRC="O" do {
			do vj1(.lnolc2)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=Last Contact
			}
		}

	quit


vj1(RecordLNOLC2 lnolc2)	// Last Contact  Table LNOLC0  Last Contact Date

	type Public String TJD
	type String vlastkey
	set vlastkey=lnolc2.acn
	type RecordLNOLC0 lnolc0=Db.getRecord("LNOLC0","ACN=:vlastkey",1)
	set lnolc0.efd=TJD

	do lnolc0.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNOLC2 lnolc2) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("FUD").exists()!vx("CID").exists() do vi1(.lnolc2)
	}
	do vi1(.lnolc2)

	quit
	

vi1(RecordLNOLC2 lnolc2) // Maintain FUD index entries (Follow Up Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lnolc2.fud
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lnolc2.uid
	type String v4 = lnolc2.acn
	type String v5 = lnolc2.cid
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = lnolc2.lseq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^LNOLC(0,vobj(lnolc2,-3),vobj(lnolc2,-4),vobj(lnolc2,-5)))#2,'$D(^DAYEND(v1,"LNOLC",v3,v4,v5,v6)) do vidxerr("FUD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"LNOLC",v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("FUD").exists() set v1=vx("FUD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("CID").exists() set v5=vx("CID").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"LNOLC",v3,v4,v5,v6)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNOLC2")

	while ds.next() do {
		type RecordLNOLC2 lnolc2=ds.getRecord("LNOLC2")
		if vlist.contains("VINDEX") do VINDEX(.lnolc2) quit
		if vlist.contains("FUD") do vi1(.lnolc2)
	}

	quit


public VIDXBLD1(RecordLNOLC2 lnolc2, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lnolc2) quit
	if vlist.contains("FUD") do vi1(.lnolc2)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNOLC2","MSG",1225,"LNOLC2."_di)

	quit


vkchged // Access key changed

	type public RecordLNOLC2 lnolc2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("UID").exists() set vux("UID") = vx("UID")
	if vx("LSEQ").exists() set vux("LSEQ") = vx("LSEQ")
	do vkey(1) set voldkey = lnolc2.acn_","_lnolc2.uid_","_lnolc2.lseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnolc2.acn_","_lnolc2.uid_","_lnolc2.lseq // Copy new keys into object
	type RecordLNOLC2 vnewrec = lnolc2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNOLC2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNOLC2 lnolc2

	if vux("ACN").exists() set lnolc2.acn = vux("ACN").piece("|",i)
	if vux("UID").exists() set lnolc2.uid = vux("UID").piece("|",i)
	if vux("LSEQ").exists() set lnolc2.lseq = vux("LSEQ").piece("|",i)
	quit

VIDXPGM()	quit "LNOLCFIL"	// Location of index program

