LNERB
	/*

	Procedure ID: LNERB
	DESC: Create Escrow Remittance File Part& full

	---- Revision History ------------------------------------------------
	
	04/11/06 - SmithCD - CR 20697
		   Modified to use XAMT instead of ZAMT to protect ZAMT. Was 
		   causing ZAMT to get reduced before updating dep.bal and 
		   ttx.tamt in LNPTS17 (which also reduces ZAMT).
	
	03/30/06 - SmithCD - CR 20315 / CR 20162
		   Fixed problem in END section where both "Remittance not 
		   complete for batch ~p1" and "Remittance complete for batch 
		   ~p1.  Run anticipated report." warning messages were 
		   printed. Corrected handling of MULT variable in ALL section 
		   to correct unique constraint violation on ERB table in 
		   FILE section.
	
	02/28/06 - SWARNALP - CR 19738
		   Added REMLD as parameter to the ALL section, and changed 
		   EXTERN and BOFF section to pass the trtype.remld and 
		   lntrs1.remld as parameter while calling the section ALL 
		   respectively to avoid the UNDEFINED error occuring in FILE 
		   section.
	
	02/21/06 - SWARNALP - CR 19663
		   Reverted the changes made in CR 18338 to include only the 
		   variable correction while instantiating the record for ERBP 
		   table in PAY section and passed PAYID to EXEC section so 
		   as to make use of it while fetching the record from TRTYPE 
		   table.
	
	02/17/06 - SWARNALP - CR 18338
		   . Modified PAY section to process all the records (ie. all 
		     the PAYID from the table LNTRS1) for the given Escrow type 
		     (TRTYPE) irrespective of the Payee ID (PAYID) selected in 
		     the prompts and then passed the PAYID as parameter to the 
		     section EXEC to process each CID for the PAYID passed and 
		     the given TRTYPE to resolve UNIQUE CONSTRAINT violated 
		     error in Oracle.  This part is changed in par with the 
		     logic used in LNERB.m in PROFILE 01.
		     
	01/26/06 - SmithCD - CR 19343 (16890)
		   . Fixed undefined error on REMAMT variable in CRT section
		   . Resolved several undefined variable errors in conditions 
		     where Db.select() return 0 rows
		   . Removed old revision history, and restructured code to be 
		     compatible with p04
		   
	*/

	type public Boolean ER
	
	type Boolean ERS, FINALREM
	type String ACN, BATDES, PAYID, TRTYPE, VFMQ
	type Number %PG, %PAGE, %ProcessMode, REMFACT
		
	set (%PG, %PAGE) = 1 
	set (%ProcessMode, ERS) = 0

	// Page control
	for  do { quit:"DFQ".isLike("%"_VFMQ_"%") ! (ER)
		if %PG = 1 do VPG00
		
		if "DFQ".isLike("%"_VFMQ_"%") do { quit
			if VFMQ = "Q" do END quit
			
			do BATCH(TRTYPE, FINALREM, REMFACT, PAYID, ACN, BATDES)
			}
			
		set %PG = %PG + 1
		}

	quit


VPG00	// Set up

	type public String %READ, %TAB(), VFMQ
	type public Number REMFACT
	type public Boolean BOFF, FINALREM
	type public String ACN, BATDES, PAYID, TRTYPE

	type Number OLNTB
	
	set ACN = "ALL" 
	set REMFACT = 100
	set (BOFF, FINALREM) = 1
	set BATDES = ""
	set OLNTB = 32

	set %TAB("TRTYPE") = ".TRTYPE1/TBL=[LNTRS]/XPP=D TRTYPE^LNERB/HLP=[LNTRS]TRTYPE"
	set %TAB("FINALREM") = ".FINR1"
	set %TAB("REMFACT") = ".REMFACT1/HLP=[LNTRS1]RAF/MIN=.00001/MAX=100"
	set %TAB("PAYID") = ".QI4/HLP=[LNTRS1]PAYID/TBL=[LNTRS1]PAYID:QU ""[LNTRS1]TRTYPE=<<TRTYPE>>"""
	set %TAB("ACN") = ".ACN4/HLP=[DEP]AREF"
	set %TAB("BATDES") = ".BD1"

	set %READ="@@%FN,,,TRTYPE/REQ,FINALREM/REQ,REMFACT/REQ,PAYID/REQ,ACN,BATDES/REQ"

	do ^UTLREAD 
	if VFMQ = "Q" quit

	quit


BATCH(String TRTYPE,		// Escrow transfer type
      Boolean FINALREM,		// Final remittance
      Number REMFACT,		// Remittance factor
      String PAYID,		// Payee identifier
      Number ACN,		// Account numbers
      String BATDES)		// Batch description

	// Execute escrow remittance batch

	type Number BATCHNUM
	type String DESC, OV(,), TRDES

	type ResultSet rs = Db.select("BATCH", "ERB0", "BATCH>0", "BATCH DESC")
	if rs.next() set BATCHNUM = rs.getCol("BATCH") + 1
	else  set BATCHNUM = 1
	
	set REMFACT = REMFACT / 100
	
	do LOAD(.OV(,))

	// Get transfer description from Escrow types
	type ResultSet des = Db.select("TRDES", "LNTRS", "TRTYPE=:TRTYPE")
	if des.next() set TRDES = des.getCol("TRDES")
	else  set TRDES = ""
	
	// ~p1, Created ~p2  By~p3 :~p4
	set DESC = $$^MSG(4084, TRDES, %SystemDate.toString(), %UserID, BATDES)
        
	type RecordERB0 erb0 = Class.new("RecordERB0", "BATCH=:BATCHNUM")

	set erb0.desc = DESC
	set erb0.finr = FINALREM
	set erb0.remfact = REMFACT
	set erb0.trtype = TRTYPE
	set erb0.pdes = PAYID
	set erb0.ades = ACN

	do erb0.bypassSave()

	do PAY(TRTYPE,PAYID)
	
	do END

	quit


PAY(String TRTYPE,		// Escrow transfer type
    String PAYID)		// Payee identifier

 	// Pay vendor
 	
 	type public Number BATCHNUM
 	type public Boolean ER
 	
 	type String DQQRY(), WHERE
	
	// Construct dynamic SQL WHERE clauses based on queries
	if PAYID = "ALL" set WHERE = ""
	else  do { quit:ER
		set DQQRY(1) = "[LNTRS1]PAYID "_PAYID
		set WHERE = " AND "_$$WHERE^SQLCONV(.DQQRY(), "LNTRS1") quit:ER
		}
	
	#ACCEPT DATE=01/03/06;PGM=SmithCD
	type DbSet ds = Db.selectDbSet("LNTRS1", "TRTYPE=:TRTYPE"_WHERE)

	while ds.next() do {
		type RecordLNTRS1 lntrs1 = ds.getRecord("LNTRS1")
		set PAYID=lntrs1.payid
		
		//  Escrow Remit Batch - Payee ID
		type RecordERBP erbp = Class.new("RecordERBP", "BATCH=:BATCHNUM,PAYID=:PAYID")
		do erbp.bypassSave()
		
		do EXEC(.lntrs1,PAYID)
		}

	quit


EXEC(RecordLNTRS1 lntrs1,String PAYID)		// Escrow payees		/REF:R

	type public Boolean ER

	// Collate Escrow Transfer Type table
	
	type DbSet ds = Db.selectDbSet("TRTYPE", "TRTYPE=:TRTYPE AND PAYID=:PAYID")

	while ds.next() do {
		type RecordTRTYPE trtype = ds.getRecord("TRTYPE")

		type RecordDEP dep = Db.getRecord("DEP", "CID=:trtype.cid", 1)
		if dep.getMode() = 0 do { quit
			// Invalid account ~p1
			do Runtime.setErrMSG("DEP", 1259, trtype.cid)
			do ERBZ(trtype.cid, trtype.typ)
			}

		// Account closed
		if dep.stat = 4 quit           
	
		do BOFF(.lntrs1, .trtype, .dep)
		if ER do ERBZ(dep.cid, trtype.typ) quit
		}
	
	quit
	
	
public EXTERN(RecordTRTYPE trtype,	// Escrow transfer type		/REF:RW
	      RecordTTX ttx,		// Transaction			/REF:R
	      RecordDEP dep)		// Deposit account		/REF:R
	      
	type public Number ZAMT

	type Number EC
	type Boolean BOFF = 0
	type Number XAMT = ZAMT
	
	set EC = ttx.itc6 + ttx.itc12

	// Escrow Payees
	type RecordLNTRS1 lntrs1 = Db.getRecord("LNTRS1", "TRTYPE=:trtype.trtype,PAYID=:trtype.payid")

	do ALL(.lntrs1, .trtype, .dep, EC, 1, 1, trtype.remnd, trtype.remld)

	quit
 

BOFF(RecordLNTRS1 lntrs1,		// Escrow payees		/REF:R
     RecordTRTYPE trtype,		// Escrow transfer type		/REF:R
     RecordDEP dep)			// Deposit (escrow) account

	// Back-office processing
	
	type public Boolean ER, FINALREM
	type public Number REMFACT
	type public String ACN
	
	type String DQQRY(), WHERE
	type Number AREF
	
	set AREF = dep.aref

	// Construct dynamic SQL WHERE clauses based on queries
	if ACN = "ALL" set WHERE = ""
	else  do {
		set DQQRY(1) = "[DEP]CID "_ACN
		set WHERE = " AND "_$$WHERE^SQLCONV(.DQQRY(), "DEP") quit:ER
		}
	
	#ACCEPT DATE=01/03/06;PGM=SmithCD
	type ResultSet rs = Db.select("CID", "LN", "CID=:AREF"_WHERE)
	if 'rs.next() quit

	type RecordLN ln = Db.getRecord("LN", "CID=:AREF")
       
	do VERX(.ln, .dep) quit:ER

	// Account has zero balance	
	if 'ln.bal do Runtime.setErrMSG("LN", 4048) quit

	do ALL(.lntrs1, .trtype, .dep, 0, REMFACT, FINALREM, lntrs1.remnd, lntrs1.remld) quit:ER

	quit


ALL(RecordLNTRS1 lntrs1,	// Escrow payees			/REF:R
    RecordTRTYPE trtype,	// Escrow transfer type			/REF:RW
    RecordDEP dep,		// Deposit (escrow) account		/REF:R
    Number EC,			// Error correct / reversal indicator
    Number REMFACT,		// Remittance factor
    Boolean FINALREM,		// Final remittance
    Date REMND,			// Remittance next date
    Date REMLD)			// Remittance - Last Date
    
    	// Process all applicable batch remittances for the escrow account
    	
    	type public Boolean BOFF, ER, ERS
	
	type Date REMDT
	type String COMMENT = "", RFRE
	type Boolean MULT = 1

	set RFRE = trtype.cremfre
	if RFRE.isNull() set RFRE = lntrs1.cremfre
			
	// Escrow remittance shortcut transaction
	if ERS do { quit
		do AUT(.trtype)
		do CRT(.dep, .trtype, EC, REMND)
		}
		
	while MULT do { quit:ER
		// In the future - done
		if REMND > lntrs1.remnd, BOFF set MULT = 0 quit
		
		// In the past - continue after this one until REMND is in 
		// the future; if the dates are equal, process this one time
		set MULT = REMND < lntrs1.remnd

		do AUT(.trtype) quit:ER

		// If remittance amount record does not exist for trtype.remnd,
		// use most recent remittance amount record on file
		type ResultSet rs = Db.select("REMDT", "RAMT", "CID=:dep.cid AND TYP=:trtype.typ AND REMDT NOT>:REMND", "REMDT DESC")
		if rs.next() set REMDT = rs.getCol("REMDT")
		// No remittance on file for ~p1
		else  do Runtime.setErrMSG("RAMT", 8622, REMND.toString()) quit
			
		type RecordRAMT ramt = Db.getRecord("RAMT", "CID=:dep.cid,TYP=:trtype.typ,REMDT=:REMDT")
		
		// Remittance on estimate not allowed
		if 'EC, ramt.estflg '= "A", 'trtype.roea do Runtime.setErrMSG("RAMT", 8623) quit

		do REMDUE(.trtype, .ramt, .dep)
		}

	quit
	

REMDUE(RecordTRTYPE trtype,	// Escrow transfer type			/REF:RW
       RecordRAMT ramt,		// Transfer Remittance File		/REF:R
       RecordDEP dep)		// Deposit (escrow) account		/REF:R

	// Calculate remittance due amount and file escrow remittance data

	type public Boolean BOFF, FINALREM, MULT
	type public Number EC, REMFACT, XAMT
	
	type Number AMT, REMPTP
 	
	// Find remittance amount due
	// No partial remittance allowed
	if 'FINALREM, 'trtype.prema do Runtime.setErrMSG("RAMT", 8624) quit
		
	if FINALREM do {
		if 'trtype.remptp set AMT = ramt.remamt
		else  set AMT = ramt.remamt - trtype.remptp - $select(EC:ramt.remamt, 1:0)
		}
 
	if 'FINALREM do {
		set:'trtype.remptp AMT = ramt.remamt * REMFACT 
		set:trtype.remptp AMT = (ramt.remamt * REMFACT)- trtype.remptp
		}
 
	set AMT = AMT.roundCur()

	// No remittance due
	if AMT < ($$MOD^SCARND(dep.cid)), BOFF do Runtime.setErrMSG("RAMT", 8625) quit

	if 'BOFF do {

		if EC do {
			set:(AMT > -XAMT) AMT = -XAMT
			set:'trtype.remptp AMT = -AMT
			}
		else  set:AMT > XAMT AMT = XAMT
		
		set XAMT = XAMT - AMT
		// Continue until amount is used up
		set MULT = '(XAMT = 0)
		set trtype.remytd = trtype.remytd + AMT
		}

	if '(ramt.remamt - trtype.remptp - (AMT * $select('EC:1, 1:-1))) set REMPTP = 0
	else  set REMPTP = trtype.remptp + AMT

	do FILE(.trtype, .ramt, .dep, REMPTP)

	quit


FILE(RecordTRTYPE trtype,	// Escrow transfer type			/REF:RW
     RecordRAMT ramt,		// Transfer remittance file		/REF:R
     RecordDEP dep,		// Deposit (escrow) account		/REF:R
     Number REMPTP)		// Partial remittance indicator
   
	// File escrow remittance data
   
   	type public Boolean BOFF
   	type public Date REMLD, REMND, RFRE
   	type public Number AMT, BATCHNUM, EC, REMFACT
   	type public String COMMENT
   	
   	type Number SQ
   	type Date TRANEFD

	set trtype.remipf = $select(BOFF:1, 1:0)

	if 'BOFF do {
		if '%EffectiveDate.get().isNull() set TRANEFD = %EffectiveDate
		else  set TRANEFD = %SystemDate
		
		// Save DAYEND (LNERB) record for online transaction

		type ResultSet rs = Db.select("SEQ", "LNERB", "EFD=:TRANEFD AND TRTYPE=:trtype.trtype AND PAYID=:trtype.payid AND LCID=:dep.aref", "SEQ DESC")
		if rs.next() set SQ = rs.getCol("SEQ") + 1
		else  set SQ = 1
		
		type RecordLNERB lnerb = Class.new("RecordLNERB", "EFD=:TRANEFD,TRTYPE=:trtype.trtype,PAYID=:trtype.payid,LCID=:dep.aref,SEQ=:SQ")
		
		set lnerb.remamt = +AMT
		set lnerb.remdue = ramt.remamt
		set lnerb.ind = ramt.estflg
		set lnerb.remprp = +trtype.remptp
		set lnerb.orgptp = +REMPTP
		set lnerb.remfact = REMFACT
		set lnerb.com = COMMENT
		set lnerb.col = trtype.acoll
		set lnerb.etyp = trtype.typ
		set lnerb.payee = trtype.payid
		set lnerb.aref = dep.aref
		set lnerb.ecid = dep.cid
		
		do lnerb.bypassSave()
		}
	else  do {
		// Save remittance batch (ERB) record for back-office function

		type RecordERB erb = Class.new("RecordERB", "BATCH=:BATCHNUM,CID=:dep.cid,TYP=:trtype.typ,REMDT=:REMND")

		set erb.tamt = +AMT
		set erb.peramo = ramt.remamt
		set erb.ind = ramt.estflg
		set erb.remptp = +trtype.remptp
		set erb.nptrem = +REMPTP
		set erb.remfact = REMFACT
		set erb.com = COMMENT
		set erb.col = trtype.acoll
		set erb.etyp = trtype.trtype
		set erb.payee = trtype.payid
		set erb.aref = dep.aref
		set erb.ecid = dep.cid

		do erb.bypassSave()
		}
	
	if EC, 'REMPTP, 'trtype.remptp do {
		// Backward
		set REMND = trtype.remld
		set REMLD = REMND.nextFreqDate("-"_RFRE)
		}
	else  if 'EC, 'REMPTP do {
		// Forward
		set REMLD = REMND
		set REMND = REMLD.nextFreqDate(RFRE)
		}
	
	if 'BOFF do {
		// Save transfer type record for online transaction
		
		set trtype.remld = REMLD
		set trtype.remnd = REMND
		set trtype.remptp = 0
		set trtype.ldrem = TRANEFD
	
		// File changes to escrow transfer type table
		do trtype.save()
		}
	
	quit


ERBZ(Number CID,	// Account number
     String ETYP)	// Escrow transfer type

	// File error message to Escrow Remittance Batch Error table
	
	type public String ER, RM
	type public Number BATCHNUM

	type RecordERBZ erbz = Class.new("RecordERBZ", "BATCH=:BATCHNUM,CID=:CID,TYP=:ETYP")
	set erbz.desc = RM
	do erbz.bypassSave()
	
	set ER = ""

	quit


CRT(RecordDEP dep,		// Deposit (escrow) account		/REF:RW
    RecordTRTYPE trtype,	// Escrow transfer type			/REF:RW
    Number EC,			// Error correct / reversal indicator
    Date REMND)			// Next remittance date

	// Processing thru teller screen
	
	type public String OVR(,)
	type public Number XAMT

	type Date REMLD
	type Number AMT, RAMT
	
	set RAMT = XAMT + trtype.remptp

	type RecordRAMT ramt = Db.getRecord("RAMT", "CID=:dep.cid,TYP=:trtype.typ,REMDT=:REMND", 1)

	if ramt.getMode() = 1, RAMT '= ramt.remamt do {
		type Number REMDIF = (ramt.remamt * $select('EC:1, 1:-1))
		
		// Trans + partial differs from total remittance of $<REMDIF>
		set OVR(dep.aref, "OVR", "REMDIF") = REMDIF.roundCur()

		if 'EC do {
			set ramt.remamt = RAMT.roundCur()
			
			// Assign "Actual" to Estimate/Actual Flag
			set ramt.estflg = "A"
			do ramt.bypassSave()
			}
		}

	set AMT = XAMT
	
	set trtype.remytd = trtype.remytd + AMT
	
	do FILE(.trtype, .ramt, .dep, 0)
	
	quit


END	
	// Wrap it up
	
	type public String ER, RM, VFMQ
	type public Number BATCHNUM
	
	if ER quit

	set BATCHNUM = BATCHNUM.get()

	// Remittance not complete for batch ~p1
	if VFMQ = "Q" do Runtime.setErrMSG("ERBZ", 2357, BATCHNUM)

	// Remittance complete for batch ~p1.  Run anticipated report.
	if VFMQ '= "Q" do Runtime.setErrMSG("ERBZ", 2355, BATCHNUM)

	// Not actually error messages in this section - FYIs / warnings
	set ER = "W"

	if BATCHNUM.isNull() quit
	
	type ResultSet rs = Db.select("BATCH", "ERBZ", "BATCH=:BATCHNUM")
	
	// ~p1, run error report
	if 'rs.isEmpty(), VFMQ '= "Q" do Runtime.setErrMSG("ERBZ", 3104, RM) set ER = "W"

	quit


LOAD(String OV(,))		// Override restrictions	/REF:W

	// Load escrow restriction indicators

	type String ERBRES(), RFLG
	type Number KIND, PIECE

	//if '$D(Q(1)) set Q(1,1)=1
	//if '$D(Q(2)) set Q(2,1)=1
	
	// Escrow restrict indicators
	set ERBRES(1) = CUVAR.ERBRES1
	set ERBRES(2) = CUVAR.ERBRES2
	set ERBRES(3) = CUVAR.ERBRES3

	for KIND = 1:1:3 do {
		for PIECE = 1:1 do { quit:RFLG.isNull()
			set RFLG = ERBRES(KIND).piece(",", PIECE)	
			quit:RFLG.isNull()
			
			set OV(KIND, RFLG) = ""
			}
		}	

	quit


VERX(RecordLN ln,		// Loan account				/REF:R
     RecordDEP dep)		// Deposit (escrow) account		/REF:R

	// Verify override restrictions
	
	type public String COMMENT, ER, OV(,)

	if 'OV.data() quit

	type DbSet dsdep = Db.selectDbSet("RFLG", "CID=:dep.cid")
	while dsdep.next() do { quit:ER ! ('COMMENT.isNull())
		type RecordRFLG rflg = dsdep.getRecord("RFLG")

		if OV(1, rflg.rflg).exists() set ER = 1

		// ~p1 Restriction on escrow
		if OV(2, rflg.rflg).exists() do Runtime.setErrMSG("RFLG", 4085, rflg.desc)

		if OV(3, rflg.rflg).exists() set COMMENT = rflg.tcmt 
		}

	type DbSet dsln = Db.selectDbSet("RFLG", "CID=:dep.aref")
	while dsln.next() do { quit:ER ! ('COMMENT.isNull())
		type RecordRFLG rflg = dsln.getRecord("RFLG")

		if OV(1, rflg.rflg).exists() set ER = 1

		// ~p1 Restriction on loan
		if OV(2, rflg.rflg).exists() do Runtime.setErrMSG("RFLG", 4086, rflg.desc)

		if OV(3, rflg.rflg).exists() set COMMENT = rflg.tcmt 
		}

	quit


public	TRTYPE

	// Post-processor for escrow type
	
	type public String X

	type RecordLNTRS lntrs = Db.getRecord("LNTRS", "TRTYPE=:X", 1)
	
	if 'lntrs.getMode() quit

	// Non-escrow processing type
	if lntrs.nepf do Runtime.setErrSTBLER("LNTRS", "LNNEPF") 

	quit


AUT(RecordTRTYPE trtype)	// Escrow transfer type		/REF:R

	// Authorization

	// Escrow ~p1 is self-pay
	if trtype.spf do Runtime.setErrMSG("TRTYPE", 7614, trtype.typ) quit

	// Escrow ~p1 has remittance stopped
	if trtype.spf do Runtime.setErrMSG("TRTYPE", 8626, trtype.typ) quit

	quit

vSIG()	quit "60369^41026^Chad Smith^16340"	// Signature - LTD^TIME^USER^SIZE
