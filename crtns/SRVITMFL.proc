SRVITMFL(RecordSRVITM srvitm, String vpar, Boolean vparNorm) // SRVITM - Service Item ID Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (21)             05/17/2005
	// Trigger Definition (2)                      05/13/2005
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = srvitm.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(srvitm,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(srvitm,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SRVCAT = srvitm.srvcat
	type String SRVTYP = srvitm.srvtyp
	type String SRVLOC = srvitm.srvloc
	type String SRVID = srvitm.srvid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SRVCAT").exists()!vx("SRVTYP").exists()!vx("SRVLOC").exists()!vx("SRVID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SRVITM",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SRVITM","SRVCAT = :srvitm.srvcat and SRVTYP = :srvitm.srvtyp and SRVLOC = :srvitm.srvloc and SRVID = :srvitm.srvid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SRVCAT
	type public String SRVTYP
	type public String SRVLOC
	type public String SRVID

	type RecordSRVITM srvitm = Db.getRecord("SRVITM","SRVCAT=:SRVCAT,SRVTYP=:SRVTYP,SRVLOC=:SRVLOC,SRVID=:SRVID")
	if (%ProcessMode = 2) do {
		do srvitm.setMode(2)

		do SRVITMFL(srvitm,vpar)
	}
	else  do VINDEX(srvitm)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSRVITM srvitm

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SRVITM","SRVCAT = :srvitm.srvcat and SRVTYP = :srvitm.srvtyp and SRVLOC = :srvitm.srvloc and SRVID = :srvitm.srvid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(srvitm))  S ^SRVITM(vobj(srvitm,-3),vobj(srvitm,-4),vobj(srvitm,-5),vobj(srvitm,-6))=vobj(srvitm)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.srvitm)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.srvitm) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSRVITM srvitm

	if vpar["/INDEX/" do VINDEX(.srvitm)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.srvitm)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^SRVITM(vobj(srvitm,-3),vobj(srvitm,-4),vobj(srvitm,-5),vobj(srvitm,-6)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordSRVITM srvitm

	// Type local variables for access keys for defaults
	type public String SRVCAT
	type public String SRVTYP
	type public String SRVLOC
	type public String SRVID

	if srvitm.srva.isNull() set srvitm.srva = 0            // srva
	if srvitm.srvopt.isNull() set srvitm.srvopt = 0        // srvopt
	quit


vreqn // Validate required data items

	type public RecordSRVITM srvitm

	if srvitm.srva.isNull() do vreqerr("SRVA") quit
	if srvitm.srvopt.isNull() do vreqerr("SRVOPT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSRVITM srvitm

	if srvitm.srvcat.isNull() do vreqerr("SRVCAT") quit
	if srvitm.srvtyp.isNull() do vreqerr("SRVTYP") quit
	if srvitm.srvloc.isNull() do vreqerr("SRVLOC") quit
	if srvitm.srvid.isNull() do vreqerr("SRVID") quit

		if vx("SRVA").exists(),srvitm.srva.isNull() do vreqerr("SRVA") quit
		if vx("SRVOPT").exists(),srvitm.srvopt.isNull() do vreqerr("SRVOPT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SRVITM","MSG",1767,"SRVITM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSRVITM srvitm
	if vx("").order().isNull() do AUDIT^UCUTILN(srvitm,.vx(),1,"|") quit
	if vx("SRVA").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(srvitm,.vx(),1,"|")
	quit


vbi1 // Trigger BRFORE_INSERT - Before Insert

	type public RecordSRVITM srvitm
	/*
	---- Revision History ------------------------------------------------

	05/11/05 - KELLYP - CR 15872
		   Removed unnecessary code (e.g., checking for null key 
		   values or valid table entries for keys; the filer does 
		   this automatically) and modified to conform to current
		   PSL standards.  Also removed pre-2003 revision history.

	*/

							 
								type public String ER

	type RecordUTBLSRVCAT usrvcat=Db.getRecord("UTBLSRVCAT","SRVCAT=:srvitm.srvcat")

	if usrvcat.chkitm,srvitm.srva.isNull() set srvitm.srva=0 

	// Get fee amount from type table
	if 'usrvcat.chkitm,srvitm.fee.isNull() do { quit:ER 
		type RecordUTBLSRVTYP usrvtyp=Db.getRecord("UTBLSRVTYP","SRVCAT=:srvitm.srvcat,SRVTYP=:srvitm.srvtyp")
		set srvitm.fee=usrvtyp.typval
		}
	
	// If not check item then FEE required
	if 'usrvcat.chkitm,srvitm.fee.isNull() do Runtime.setErrMSG("SRVITM",1767,"SRVITM.FEE") quit:ER 

	quit
	

vbu1 // Trigger BU_SRVA - Before update SRVA flag

	type public RecordSRVITM srvitm
	do srvitm.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------

	05/11/05 - KELLYP - CR 15872
		   Modified to conform to current PSL standards.

	*/

	if srvitm.srva quit 
	
	type RecordUTBLSRVTYP usrvtyp=Db.getRecord("UTBLSRVTYP","SRVCAT=:srvitm.srvcat,SRVTYP=:srvitm.srvtyp")

	// De-assign	
	set srvitm.fee=usrvtyp.typval
	set srvitm.acn=""
	set srvitm.nddt=""
	set srvitm.srvfre=""
	set srvitm.lddt=""
	set srvitm.srvopt=""
	set srvitm.srvamt=""
	set srvitm.srvst=""
	set srvitm.srvsig=""
	set srvitm.srvkeys=""
	set srvitm.srvcom=""
	set srvitm.srvladt=""
	set srvitm.srva=""
	set srvitm.balavl=""

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSRVITM srvitm

	set X = srvitm.srvcat if 'X.isNull(),'Db.isDefined("UTBLSRVCAT","X") set vRM = $$^MSG(1485,X) do vdderr("SRVCAT", vRM) quit
	if srvitm.srvtyp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SRVTYP", vRM) quit
	if srvitm.srvloc.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SRVLOC", vRM) quit
	if srvitm.srvid.length()>15 set vRM = $$^MSG(1076,15) do vdderr("SRVID", vRM) quit
	set X = srvitm.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = srvitm.balavl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRVITM.BALAVL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srvitm.fee if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRVITM.FEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if srvitm.itmgrp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ITMGRP", vRM) quit
	set X = srvitm.lddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDDT", vRM) quit
	set X = srvitm.nddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NDDT", vRM) quit
	if '("01"[srvitm.SRVA) set vRM=$$^MSG(742,"L") do vdderr("SRVA", vRM) quit
	set X = srvitm.srvamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRVITM.SRVAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if srvitm.srvcom.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SRVCOM", vRM) quit
	set X = srvitm.srvfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[SRVITM]SRVFRE",0) if 'vRM.get().isNull() do vdderr("SRVFRE", vRM) quit
	set X = srvitm.srvkeys if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("SRVKEYS", vRM) quit
	set X = srvitm.srvladt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SRVLADT", vRM) quit
	if srvitm.srvnm.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SRVNM", vRM) quit
	if '("01"[srvitm.SRVOPT) set vRM=$$^MSG(742,"L") do vdderr("SRVOPT", vRM) quit
	if srvitm.srvref.length()>14 set vRM = $$^MSG(1076,14) do vdderr("SRVREF", vRM) quit
	set X = srvitm.srvsig if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("SRVSIG", vRM) quit
	if srvitm.srvst.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SRVST", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SRVITM","MSG",979,"SRVITM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSRVITM srvitm)	//SRVITM Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj2(.srvitm)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HISTORY_DELETE
			}
		else  if TSRC="O" do {
			do vj2(.srvitm)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HISTORY_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj3(.srvitm)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HISTORY_INSERT
			}
		else  if TSRC="O" do {
			do vj3(.srvitm)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HISTORY_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.srvitm)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HISTORY
			}
		else  if TSRC="O" do {
			do vj1(.srvitm)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HISTORY
			}
		}

	quit


vj1(RecordSRVITM srvitm)	// HISTORY  Table SRVHIST  Service Item Transaction History

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%UID,TJD,TLO
		type String v1,v2,v3,v4,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=srvitm.srvcat
		set v2=srvitm.srvtyp
		set v3=srvitm.srvloc
		set v4=srvitm.srvid
		set vlastkey=Db.nextVal("SRVHIST","SRVCAT=:v1,SRVTYP=:v2,SRVLOC=:v3,SRVID=:v4")
		type RecordSRVHIST srvhist=Db.getRecord("SRVHIST","SRVCAT=:v1,SRVTYP=:v2,SRVLOC=:v3,SRVID=:v4,SEQ=:vlastkey",1)
		set srvhist.tcmt=$$TCMTFM^ACNFUNCS("","SRVITM",vdi,vold,vnew,$G(EFD))
		set srvhist.time=$P($H,",",2)
		set srvhist.tjd=TJD
		set srvhist.tlo=TLO
		set srvhist.uid=%UID

		do srvhist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj2(RecordSRVITM srvitm)	// HISTORY_DELETE  Table SRVHIST  Service/Check Item Delete History

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,v4,vlastkey
	set v1=srvitm.srvcat
	set v2=srvitm.srvtyp
	set v3=srvitm.srvloc
	set v4=srvitm.srvid
	set vlastkey=Db.nextVal("SRVHIST","SRVCAT=:v1,SRVTYP=:v2,SRVLOC=:v3,SRVID=:v4")
	type RecordSRVHIST srvhist=Db.getRecord("SRVHIST","SRVCAT=:v1,SRVTYP=:v2,SRVLOC=:v3,SRVID=:v4,SEQ=:vlastkey",1)
	set srvhist.tcmt=$$^MSG(2485)
	set srvhist.time=$P($H,",",2)
	set srvhist.tjd=TJD
	set srvhist.tlo=TLO
	set srvhist.uid=%UID

	do srvhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordSRVITM srvitm)	// HISTORY_INSERT  Table SRVHIST  Service/Check Item Insert History

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,v4,vlastkey
	set v1=srvitm.srvcat
	set v2=srvitm.srvtyp
	set v3=srvitm.srvloc
	set v4=srvitm.srvid
	set vlastkey=Db.nextVal("SRVHIST","SRVCAT=:v1,SRVTYP=:v2,SRVLOC=:v3,SRVID=:v4")
	type RecordSRVHIST srvhist=Db.getRecord("SRVHIST","SRVCAT=:v1,SRVTYP=:v2,SRVLOC=:v3,SRVID=:v4,SEQ=:vlastkey",1)
	set srvhist.tcmt=$$^MSG(2483)
	set srvhist.time=$P($H,",",2)
	set srvhist.tjd=TJD
	set srvhist.tlo=TLO
	set srvhist.uid=%UID

	do srvhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordSRVITM srvitm) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NDDT").exists() do vi1(.srvitm)
	}
	do vi1(.srvitm)

	quit
	

vi1(RecordSRVITM srvitm) // Maintain NDDT index entries (Next Billing Date )

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = srvitm.nddt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = srvitm.srvcat
	type String v4 = srvitm.srvtyp
	type String v5 = srvitm.srvloc
	type String v6 = srvitm.srvid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^SRVITM(vobj(srvitm,-3),vobj(srvitm,-4),vobj(srvitm,-5),vobj(srvitm,-6)))#2,'$D(^DAYEND(v1,"SRVITM",v3,v4,v5,v6)) do vidxerr("NDDT")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"SRVITM",v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NDDT").exists() set v1=vx("NDDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"SRVITM",v3,v4,v5,v6)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("SRVITM")

	while ds.next() do {
		type RecordSRVITM srvitm=ds.getRecord("SRVITM")
		if vlist.contains("VINDEX") do VINDEX(.srvitm) quit
		if vlist.contains("NDDT") do vi1(.srvitm)
	}

	quit


public VIDXBLD1(RecordSRVITM srvitm, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.srvitm) quit
	if vlist.contains("NDDT") do vi1(.srvitm)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("SRVITM","MSG",1225,"SRVITM."_di)

	quit


vkchged // Access key changed

	type public RecordSRVITM srvitm

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SRVCAT").exists() set vux("SRVCAT") = vx("SRVCAT")
	if vx("SRVTYP").exists() set vux("SRVTYP") = vx("SRVTYP")
	if vx("SRVLOC").exists() set vux("SRVLOC") = vx("SRVLOC")
	if vx("SRVID").exists() set vux("SRVID") = vx("SRVID")
	do vkey(1) set voldkey = srvitm.srvcat_","_srvitm.srvtyp_","_srvitm.srvloc_","_srvitm.srvid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = srvitm.srvcat_","_srvitm.srvtyp_","_srvitm.srvloc_","_srvitm.srvid // Copy new keys into object
	type RecordSRVITM vnewrec = srvitm.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SRVITM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSRVITM srvitm

	if vux("SRVCAT").exists() set srvitm.srvcat = vux("SRVCAT").piece("|",i)
	if vux("SRVTYP").exists() set srvitm.srvtyp = vux("SRVTYP").piece("|",i)
	if vux("SRVLOC").exists() set srvitm.srvloc = vux("SRVLOC").piece("|",i)
	if vux("SRVID").exists() set srvitm.srvid = vux("SRVID").piece("|",i)
	quit

VIDXPGM()	quit "SRVITMFL"	// Location of index program

