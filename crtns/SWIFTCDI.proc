SWIFTCDI		/*
	ORIG: DTYNER   09/28/95
	Procedure ID: SWIFTCDI
	DESC: SWIFT Computed Data Item Library
	

	ARGUMENTS:
		. SWDIRECT      Swift Direction			/TYP=T/REQ
		. MSG           Swift Message Number		/TYP=N/REQ
		. NODE          Swift Message Line		/TYP=N/REQ
		. TAMT          Transaction Amount		/TYP=$/REQ
		. JD            Julian Date			/TYP=N/REQ
		. YEAR          Year				/TYP=L/REQ
		. TR            Transaction Record		/TYP=T/REQ
		. TRREFNO       Transaction Reference Number	/TYP=T/REQ

	EXAMPLE:
		D ^SWIFTCDI(TAMT)

	LIBRARY:
		. $$AMTCNV  		- Transaction Amount Conversion Utility
		. $$ASIR  		- Account Servicing Institution Reference
		. $$DATE  		- Date Converstion Utility
		. $$DC    		- Debit/Credit Indicator
		. $$FCODE  		- Funds Code
		. $$MULT		- SWIFT Transaction Detail Utility
		. $$MULT2  		- SWIFT sub-node to string Utility
		. $$REF   		- Account Owner Reference
		. $$SUPP  		- Supplemental Information
		. $$TTYPE  		- Transaction Type Code

	 ------------- Revision History----------------------------------------------
	
	01/29/04 - CARROLLJ - CR7997
		   Correctd DC linetag to remove ttx object.

	07/15/03 - GRAY - 51351
		Corrected MULT section to process messages stored on node 79 
		of the SWIFT file in addition to node 61.

	07/07/02 - YENDAPALLIS -43583
                PSL conversion clean up.	

	6/14/02 - YENDAPALLIS - 43583
		Converted to PSL	

	07/19/00 - SCHWARTZC - 40583
		Added MULT2 section to copy sub-nodes to a string without
		a CR LF delimiter.
	
	-----------------------------------------------------------------------------------
	*/
	quit


Public AMTCNV(RecordACN acn,TAMT,CRCD)

	//Formats the amount of the transaction from IBS to SWIFT format

	new DECIMAL,LENGTH,TAMT1,TAMT2
		
	//replace decimal w/comma
	set TAMT=$TR(TAMT,".",",")
	
	//if no decimal-put comma at end
	if TAMT'["," set TAMT=TAMT_","_"00"

	// Currency Code
	if CRCD="" set CRCD=acn.crcd
	
	if Db.isDefined("CRCD","%CO,CRCD") do {
		type RecordCRCD crcd=Db.getRecord("CRCD","%CO,CRCD")
		set DECIMAL=+crcd.curdec
		}
	else  set DECIMAL=""
	if 'DECIMAL set TAMT=$P(TAMT,",",1)_"," quit TAMT
	
	set TAMT1=$P(TAMT,",",1) 
	set TAMT2=$P(TAMT,",",2) 
	set LENGTH=$L(TAMT2)
	
	if '$L(TAMT1) set TAMT1=0
	for I=1:1:(DECIMAL-LENGTH) do {
		set TAMT2=TAMT2_"0"
		set TAMT=TAMT1_","_TAMT2
		}
	if $E(TAMT)="," set TAMT="0"_TAMT

	quit TAMT


Public ASIR()	//Returns the accounts servicing institution's reference for the transaction

	quit SEQ


Public DATE(JD,YEAR)	//Translates the input date into SWIFT format

	new JDATE

	set JDATE=$$DAT^%ZM(%SystemDate,YEAR)

	quit JDATE


Public DC(ITC)	// Returns the debit/credit indicator of the transaction



	//credit reversal
	if $E(ITC,1),$E(ITC,12) quit "RC"

	//credit reveral (error correct)
	if $E(ITC,1),$E(ITC,6) quit "RC"

	//credit
	if $E(ITC,1),'$E(ITC,12) quit "C"

	//debit reversal
	if '$E(ITC,1),$E(ITC,12) quit "RD"

	//debit reversal
	if '$E(ITC,1),$E(ITC,6) quit "RD"

	//debit
	if '$E(ITC,1),'$E(ITC,12) quit "D"

	quit

Public FCODE(RecordACN acn,CRCD)	

	/*
	  Returns the funds code for the transaction which consists of the last
	  character of the currency code
	*/

	new FCODE

	// Currency Code
	if CRCD="" set CRCD=acn.crcd
	
	set FCODE=$E(CRCD,3)

	quit FCODE


Public MULT(SWDIRECT,TRREFNO,MSG,NODE)	//Builds transaction detail for the vostro statement

	new COL,CRLF,I,STRING,SWMSG

	set STRING=""
	set CRLF=$C(13,10)

	if NODE=61 set COL="F61DATA"
	if NODE=79 set COL="F79DATA"

	type RecordSWIFT swift=Db.getRecord("SWIFT","SWDIRECT,TRREFNO,MSG",1)
	if 'swift.getMode() set SWMSG=""

	else  do {
		for I=1:1:15 set COL=COL_I set SWMSG.piece($C(9),I)=swift.@COL
		}
		
	new i
	for i=1:1:15 set STRING=STRING_SWMSG.piece($C(9),i)_CRLF

	//strip off last 2 bytes (CR and LF)
	set STRING=STRING.extract(1,STRING.length()-2)

	quit STRING


Public MULT2(EFTTYP,PTR,FLD)	//


	if $G(EFTTYP)="" quit ""

	new DELIM,SWDIRECT

	if '((EFTTYP="IN")!(EFTTYP="OUT")) set SWDIRECT=$S(EFTTYP="NDPO":"OUT",EFTTYP="NDPOIN":"IN",1:"")
	// When calling from [SWIFT]
	else  set SWDIRECT=EFTTYP

	if ($G(SWDIRECT)="")!($G(PTR)="")!($G(FLD)="") quit ""

	type ResultSet rs=Db.select("FLD","SWFREE","SWDIRECT=:SWDIRECT AND PTR=:PTR and FLD=:FLD")
	if rs.isEmpty() quit ""

	if FLD="77T" set DELIM=""
	else  set DELIM=$C(13,10)

	new STRING

	set STRING=""

	type ResultSet rs=Db.select("SEQ","SWFREE","SWDIRECT=:SWDIRECT AND PTR=:PTR AND FLD=:FLD AND SEQ=:X")
	if rs.isEmpty() quit
	while rs.next() do {
		new X
		set X=rs.getCol(1)
		type RecordSWFREE swfree=Db.getRecord("SWFREE","SWDIRECT,PTR,FLD,X")
		set STRING=STRING_swfree.fldtxt_DELIM
		}

	quit STRING


Public REF(TSO,ETC)	//Returns the reference for the owner of the account
	
	do OUT^UTSO(.TSO,TSO)
	
	//if value in ref - quit with this value
	if $D(TSO("REF")) quit TSO("REF")

	type RecordTRN trn=Db.getRecord("TRN","ETC")

	quit $E(trn.prdes,1,16)


Public SUPP(TSO)	//

	/*
	  Returns any supplemental information for the transaction when no
	  reference for the account owner is supplied in REF
	*/

	new FCID,SEQN,SUPINFO,SUPP

	do OUT^UTSO(.TSO,TSO)

	if $D(TSO("SEQ")) set SEQN=(TSO("SEQ"))
	if $D(TSO("FCID")) set FCID=(TSO("FCID"))
	if $D(SEQN)&$D(FCID)
	else  quit ""

	if Db.isDefined("EFTPAY","FCID,SEQN") do {
		type RecordEFTPAY eftpay=Db.getRecord("EFTPAY","FCID,SEQN")
		set SUPINFO=eftpay.recacct
		}
	else  set SUPINFO=""

	quit SUPINFO


Public TTYPE(TSO,HETC)	//

	/*
	  Returns the transaction type code and prefix of the transaction that
	  was posted to the account
	*/

	new PREFIX,TTYPE

	set PREFIX="N"

	//SWIFT origination from NDPOIN
	if TSO["EFT#NDPOIN" quit "S100"

	//service fees
	if TSO["FEE#" set PREFIX="F"
	
	//interest posting
	if TSO["INT#" set PREFIX="F"

	//miscellaneous
	if HETC="" quit PREFIX_"MSC"

	//trans type code from TRN
	type RecordTRN trn=Db.getRecord("TRN","HETC")
	set TTYPE=trn.tcode

	if TTYPE'="" quit PREFIX_TTYPE

	//miscellaneous
	if TTYPE="" quit PREFIX_"MSC"

	quit

vSIG()	quit "59886^43614^Sanchez SCM Administrator^5690"	// Signature - LTD^TIME^USER^SIZE
