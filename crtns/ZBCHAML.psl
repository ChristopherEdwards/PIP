ZBCHAML //Batch ZBCHAMLCIF - Monthly Extract for Customers to Experia
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - ZBCHAMLCIF Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("ZBCHAMLCIF")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("ZBCHAMLCIF") quit
 do JOBMGR^BCHUTL(%FN,"ZBCHAMLCIF",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("ZBCHAMLCIF")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(ACN) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("ZBCHAMLCIF","*","",ACN.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"ZBCHAMLCIF",ACN.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"ZBCHAMLCIF",ACN.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,ACN)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("ZBCHAMLCIF","*","",ACN.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"ZBCHAMLCIF",ACN.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,ACN) //
	
	type String DATA,FULL,LNM
	type Number TYPE
	type Date DOB
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
	type RecordZAMLCIF zamlcif
	
	set TYPE=cif.pers	//Customer type - 0:Individual, 1:Corporate
	
	if TYPE=0 do {
		set LNM=cif.lnm_" "_cif.mmname
		set FULL=cif.fname_" "_cif.mname_" "_cif.lnm_" "_cif.mmname
		set DOB=cif.dob
		set DATA=cif.acn_DL_cif.fname_DL_LNM_DL_FULL_DL_DOB.toString("MM/DD/YEAR")
		set DATA=DATA_DL_cif.pad1_DL_cif.pcity_DL_cif.pstate_DL_cif.pcntry_DL_cif.pzip
	}
	if TYPE=1 do {
		set DATA=cif.acn_DL_cif.nam_DL_cif.pad1_DL_cif.taxid_DL_cif.pcity_DL
		set DATA=DATA_cif.pstate_DL_cif.pcntry_DL_cif.pzip
	}		
	//Dump DATA into a temporary table to be used for extract file generation 
	set zamlcif = Class.new("RecordZAMLCIF")
	set zamlcif.acn=ACN
	set zamlcif.type=TYPE
	set zamlcif.data=DATA
	do zamlcif.bypassSave()
	
	quit
		
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,ACN
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set ACN=vRECORD.piece($C(9),1)
 do vPROC(ACN)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,ACN
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	if DATE.get()="" set DATE=%SystemDate-1
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("ACN","CIF","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	
	set DL=","		//Delimiter
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type Number TYPE
	type String DATA
	type Date DT=DATE
	type IO io1=Class.new("IO")		//For Individual Customer Records
        type IO io2=Class.new("IO")		//For Corporate Customer Records
        
        set io1.openParams="NEWV/WRITE"
        set io2.openParams="NEWV/WRITE"
	set io1.fileName="CUM"_DT.toString("YEARMMDD")_".TXT"
        set io2.fileName="COM"_DT.toString("YEARMMDD")_".TXT"
        
        do io1.open()
	do io2.open()
	
	//Read from Temporary table to write in Extract Files 
	type ResultSet rs=Db.select("TYPE,DATA","ZAMLCIF")
	if 'rs.isEmpty() while rs.next() do {
 		set TYPE=rs.getCol(1)
 		set DATA=rs.getCol(2)
		if TYPE=0 do io1.write(.DATA)
		if TYPE=1 do io2.write(.DATA)
	}
	
	do io1.close()
	do io2.close()
	do Db.fastDelete("ZAMLCIF")
	
	quit
		
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
