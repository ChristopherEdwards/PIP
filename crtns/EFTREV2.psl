EFTREV2	  	/*
	ORIG: kellyp - 09/26/2005
	DESC: EFT Review Incoming Clean Payments

	---- Comments --------------------------------------------------------

	Review Non-Documentary Payment Orders (Incoming) Routine

	---- Revision History ------------------------------------------------

	   09/26/05 - KELLYP - CR 17050
	   	Converted to PSL

 	*/

	quit

public RVW	// Review Payment Orders

	type String EFTQRY,HDG1,QRY

	set %ProcessMode=0

	set EFTQRY="[EFTREV2]STATUS=""A"" AND [EFTREV2]EFTTYPE=<<SRC>> AND [EFTREV2]CID=<<CID>>"
	set QRY="[GLAD]TYPE'=""H"" AND [GLAD]TYPE'=""M"""
	
	do INIT
	
	quit
	

INIT	// Initialize variables

	type public Boolean ER

	type Boolean gl,ogl
	type Number CID,DCC,GL,RVWCID,RVWSEQ,SEQ,SOURCE
	type String INSTCD(),INSTMSG(),REFNO,VFMQ
	
	type RecordEFTREV2 eftrev2
	type RecordEFTPAY eftpay

	set SOURCE=3,REFNO=""

	do QUERY
	
	if ("Q"[VFMQ)!(ER) do VER(.eftpay) quit
	
	do SCREEN(.eftrev2,.eftpay)
	
	do VER(.eftpay)
	
	quit


QUERY	// Set up prompts in %TAB

	type public Boolean ER,gl,ogl
	type public Number CID,DCC,GL,RVWCID,RVWSEQ,SEQ
	type public String EFTQRY,QRY,REFNO,SRC,VFMQ
	
	type Number I
	type String HDG,%NOPRMT,%READ,%TAB()

	set (CID,GL,DCC,REFNO,SEQ)=""

	type RecordCTBLEFTTYPE cefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC",1)

	// Review ~p1
	set HDG=$$^MSG(5654,cefttype.desc)
	set I=40-(HDG.length()/2),HDG=$J("",I)_HDG_$J("",I)

	set %TAB("CID")=".CID1/XPP=D CIDPP^EFTREV2/NOREQ"
	set %TAB("GL")=".GL2/TBL=[GLAD]:QU """_QRY_"""/XPP=D GLPP^EFTREV2"
	set %TAB("SEQ")=".SEQ7/XPP=D SEQPP^EFTREV2/TBL=[EFTREV2]SEQ,EFD,RECINST,RECACCT,AMOUNT,STATUS:QU """_EFTQRY_""""
	set %READ="@HDG,,,CID/NOREQ,GL/NOREQ,SEQ/NOREQ"

	set %NOPRMT="C"

	do ^UTLREAD 
	
	if "Q"[VFMQ quit

        // Sequence does not exist
        if 'Db.isDefined("EFTREV2","CID=:CID AND SEQ=:SEQ") do Runtime.setErrMSG("EFTREV2","7227") quit:ER

	set RVWCID=CID
	set RVWSEQ=SEQ

	if 'GL.isNull() do {
		if Db.isDefined("GLAD","ACN=:GL") set gl=1,ogl=1
		}

	quit


CIDPP	// Account Number Post-Processor

	type public Boolean ER,gl,ogl
	type public Number CID,GL
	type public String X

	type Boolean %EXT

        if X.isNull() quit
        
        // Not permitted to enter customer and G/L number
        if 'GL.isNull() do Runtime.setErrMSG("EFTREV2","7228") quit:ER

	set CID=X
	
	set %EXT=1 do ^UACN quit:ER

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	
	// Account ~p1 is closed
	if acn.stat=4 do Runtime.setErrMSG("EFTREV2","6050",acn.cid) quit:ER

	set ogl=0,gl=1

	if CID.length() do GOTO^DBSMACRO("@SEQ")

	quit


SEQPP	// Sequence Post Processor

	type public Boolean ER
	type public Number CID
	type public String X

	// Data required
	if X.isNull() do Runtime.setErrMSG("EFTREV2","741") quit:ER

	// Sequence does not exist
        if 'Db.isDefined("EFTREV2","CID=:CID AND SEQ=:X") do Runtime.setErrMSG("EFTREV2","7227") quit:ER
	
	quit


GLPP	// G/L Post Processor

	type public Boolean ER,ogl
	type public Number CID,GL
	type public String X
	
	if X.isNull() set (GL,ogl)=""
	
	// Enter either a customer account or G/L account
	if X.isNull(),CID.isNull() do Runtime.setErrMSG("EFTREV2","3456") quit:ER

	if X.isNull() quit

	set CID=X,ogl=1 
	
	quit
	

SCREEN(RecordEFTREV2 eftrev2,RecordEFTPAY eftpay)	// Screen and data item defaults

	type public Boolean NDPOB,NDPOH,ogl
	type public Number CID,DCC,SEQ
	type public String INSTCD(),INSTMSG(),SRC
	
	type Number FREEPTR
	type String BCRCD,SID

	I 'NDPOB.exists() set NDPOB=0
	I 'NDPOH.exists() set NDPOH=0

	set eftrev2=Db.getRecord("EFTREV2","CID=:CID,SEQ=:SEQ")
	type RecordCTBLEFTTYPE cefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC",1)

	do LOADREC(.eftrev2,.eftpay)

	if ogl set eftpay.cc=DCC
	set eftpay.status="A"
	set eftpay.met=cefttype.paymetdft
	set eftpay.amttyp=1
	set eftpay.feetype=cefttype.feemetdft
	set BCRCD=%SystemCurrency
	set eftpay.datecre=%SystemDate
	set eftpay.brcd=DCC
	set eftpay.ttype=$S(ogl:3,1:0)

	if eftpay.ccode.isNull() set eftpay.ccode=cefttype.ccode

	// Defaults for customer accounts
	if 'ogl do {
		type RecordACN acn=Db.getRecord("ACN","CID=:CID")
		set eftpay.brcd=acn.boo
		set eftpay.acn=acn.acn

		// If no credit cost center exists, set cost center from account level.
        	// If it does, set cost center from credit cost center.
        	if eftpay.crcc.isNull() set eftpay.cc=acn.cc
        	else  set eftpay.cc=eftpay.crcc
		}
	
	set FREEPTR=eftrev2.freeptr
	if 'FREEPTR.isNull() do {
		type String MSG,TXT,X,Z

		// Load SWIFT instruction codes into INSTCD and INSTMSG arrays.
		set TXT=$$MULT2^SWIFTCDI("IN",FREEPTR,"23E")
		for X=1:1 set MSG=TXT.piece($C(13,10),X)  quit:MSG.isNull()  set INSTCD(X)=MSG.piece("/",1),INSTMSG(X)=MSG.piece("/",2)

		// Load Sender's Charges into sender charges variables.
		// Amounts are stored in ^SWFREE in 12345,67 format
		set TXT=$$MULT2^SWIFTCDI("IN",FREEPTR,"71F")
		for X=1:1 set MSG=TXT.piece($C(13,10),X) do {  quit:MSG.isNull()
			set Z="SNDCRCD"_X
			set @Z=MSG.extract(1,3)
			set Z="SNDRCHG"_X
			set @Z=$$INT^%ZM(MSG.extract(4,20),"$",",.",2)
			}
		}

	// Determine screen(s)
	if NDPOH set SID="INTRVWHQ00"
	if ('NDPOB),('NDPOH) set SID="EFTPAY"

	do DRV^USID(%ProcessMode,SID,.eftpay)

	quit


VER(RecordEFTPAY eftpay)

	type public String REFNO,SOURCE,VFMQ

	if (%ProcessMode=0)&(REFNO.exists()) do KTRN^DEAL(SOURCE,REFNO) do END quit

	if (VFMQ="Q") do END quit

	do FILE(.eftpay)
	
	do END
	
	quit


FILE(RecordEFTPAY eftpay)	// File data

	type public Boolean ER
	type public Number CID,RVWCID,RVWSEQ,SEQ
	type public String SRC,usrdi

	type Number OLDCID,OLDSEQ
	type String EFTTYPE

	/* 
	 Below two lines needed because if messages are not defined for an
	 incoming, then it cannot be viewed in Client Advisement report.
	*/

	if usrdi.exists() set eftpay.@usrdi=%UserID

	set OLDCID=RVWCID,OLDSEQ=RVWSEQ		// Store old keys.
	set RVWCID=CID,RVWSEQ=SEQ		// Store ^EFTREV2 keys
	set CID=eftpay.benacn			// Copy BENACN into CID
	set eftpay.uidadd=%UserID		// File user who created it
	set EFTTYPE=SRC
	set eftpay.benseq=SEQ
	
	type RecordEFTPAY1 eftpay1=Db.getRecord("EFTPAY1","CID=:CID",1)
	if 'eftpay1.getMode() set eftpay1.seq=1
	else  set eftpay1.seq=eftpay1.seq+1
	
	set eftpay.seq=eftpay1.seq
	
	do eftpay1.save()
	do eftpay.save()
	
	quit:ER
	
	// Remove the EFTREV2 record
	do Db.delete("EFTREV2","CID=:OLDCID AND SEQ=:OLDSEQ")
	
	quit


END	// End processing

	type public Boolean ER
	type public Number CID,SEQ
	type public String RM,SRC,VFMQ

	if ER!(%ProcessMode=2)!(%ProcessMode=4) quit
	set ER="W"

	if VFMQ="Q" do {
		// ~p1 for account ~p2 not created.
		if %ProcessMode=0 set RM=$$^MSG(7232,SRC,CID.get())
		// ~p1 for account ~p2 not modified.
		else  if %ProcessMode=1 set RM=$$^MSG(7234,SRC,CID.get())
		// ~p1 for account ~p2 not done.
		else  set RM=$$^MSG(7233,SRC,CID.get())
		}
	else  do {
		// ~p1 for account ~p2 Sequence ~p3 created
		if %ProcessMode=0 set RM=$$^MSG(7229,SRC,CID.get()_" "_$$^MSG(6742,SEQ.get()))
		// ~p1 for account ~p2 modified.
		else  if %ProcessMode=1 set RM=$$^MSG(7231,SRC,CID.get())
		// ~p1 for account ~p2 done.
		else  set RM=$$^MSG(7230,SRC,CID.get())
		}
	quit


LOADREC(RecordEFTREV2 eftrev2,RecordEFTPAY eftpay)	// Load data from ^EFTREV2 into local EFTPAY object

	set eftpay.acn=eftrev2.acn
	set eftpay.actamt=eftrev2.actamt
	set eftpay.amount=eftrev2.amount
	set eftpay.amttyp=eftrev2.amttyp
	set eftpay.antamt=eftrev2.antamt
	set eftpay.antfee1=eftrev2.antfee1
	set eftpay.antfee2=eftrev2.antfee2
	set eftpay.antrate=eftrev2.antrate
	set eftpay.anttotal=eftrev2.anttotal
	set eftpay.bankop=eftrev2.bankop
	set eftpay.ben=eftrev2.ben
	set eftpay.benacn=eftrev2.benacn
	set eftpay.benacnsw=eftrev2.benacnsw
	set eftpay.benad1=eftrev2.benad1
	set eftpay.benad2=eftrev2.benad2
	set eftpay.benad3=eftrev2.benad3
	set eftpay.benad4=eftrev2.benad4
	set eftpay.beninst=eftrev2.beninst
	set eftpay.beninst1=eftrev2.beninst1
	set eftpay.beninst2=eftrev2.beninst2
	set eftpay.beninst3=eftrev2.beninst3
	set eftpay.beninst4=eftrev2.beninst4
	set eftpay.beninstl=eftrev2.beninstl
	set eftpay.beninstp=eftrev2.beninstp
	set eftpay.brcd=eftrev2.brcd
	set eftpay.brhqmsg1=eftrev2.brhqmsg1
	set eftpay.brhqmsg2=eftrev2.brhqmsg2
	set eftpay.brhqmsg3=eftrev2.brhqmsg3
	set eftpay.brhqmsg4=eftrev2.brhqmsg4
	set eftpay.cc=eftrev2.cc
	set eftpay.ccode=eftrev2.ccode
	set eftpay.cid=eftrev2.cid
	set eftpay.cifinst=eftrev2.cifinst
	set eftpay.consndpo=eftrev2.consndpo
	set eftpay.constant=eftrev2.constant
	set eftpay.crcc=eftrev2.crcc
	set eftpay.crcd=eftrev2.crcd
	set eftpay.datecre=eftrev2.datecre
	set eftpay.efd=eftrev2.efd
	set eftpay.efttype=eftrev2.efttype
	set eftpay.expdt=eftrev2.expdt
	set eftpay.feeamt=eftrev2.feeamt
	set eftpay.feeamt2=eftrev2.feeamt2
	set eftpay.feeconv=eftrev2.feeconv
	set eftpay.feecrcd=eftrev2.feecrcd
	set eftpay.feecrcd2=eftrev2.feecrcd2
	set eftpay.feepayor=eftrev2.feepayor
	set eftpay.feetype=eftrev2.feetype
	set eftpay.freeptr=eftrev2.freeptr
	set eftpay.frequency=eftrev2.frequency
	set eftpay.hldseq=eftrev2.hldseq
	set eftpay.inter=eftrev2.inter
	set eftpay.inter1=eftrev2.inter1
	set eftpay.inter2=eftrev2.inter2
	set eftpay.inter3=eftrev2.inter3
	set eftpay.inter4=eftrev2.inter4
	set eftpay.interp=eftrev2.interp
	set eftpay.intext=eftrev2.intext
	set eftpay.inttrn=eftrev2.inttrn
	set eftpay.lchdt=eftrev2.lchdt
	set eftpay.lnm=eftrev2.lnm
	set eftpay.met=eftrev2.met
	set eftpay.msg1=eftrev2.msg1
	set eftpay.msg2=eftrev2.msg2
	set eftpay.msg3=eftrev2.msg3
	set eftpay.msg4=eftrev2.msg4
	set eftpay.msgfp1=eftrev2.msgfp1
	set eftpay.msgtyp=eftrev2.msgtyp
	set eftpay.mt202flg=eftrev2.mt202flg
	set eftpay.ord=eftrev2.ord
	set eftpay.ord1=eftrev2.ord1
	set eftpay.ord2=eftrev2.ord2
	set eftpay.ord3=eftrev2.ord3
	set eftpay.ord4=eftrev2.ord4
	set eftpay.ordacc=eftrev2.ordacc
	set eftpay.ordinst=eftrev2.ordinst
	set eftpay.ordinst1=eftrev2.ordinst1
	set eftpay.ordinst2=eftrev2.ordinst2
	set eftpay.ordinst3=eftrev2.ordinst3
	set eftpay.ordinst4=eftrev2.ordinst4
	set eftpay.ordp=eftrev2.ordp
	set eftpay.origcrcd=eftrev2.origcrcd
	set eftpay.origin=eftrev2.origin
	set eftpay.origseq=eftrev2.origseq
	set eftpay.pri=eftrev2.pri
	set eftpay.pri2=eftrev2.pri2
	set eftpay.procdt=eftrev2.procdt
	set eftpay.rate=eftrev2.rate
	set eftpay.rcvrchg=eftrev2.rcvrchg
	set eftpay.rcvrchgc=eftrev2.rcvrchgc
	set eftpay.rcvrcorp=eftrev2.rcvrcorp
	set eftpay.recacct=eftrev2.recacct
	set eftpay.reccorr=eftrev2.reccorr
	set eftpay.recinst=eftrev2.recinst
	set eftpay.recv=eftrev2.recv
	set eftpay.recv1=eftrev2.recv1
	set eftpay.recv2=eftrev2.recv2
	set eftpay.recv3=eftrev2.recv3
	set eftpay.recv4=eftrev2.recv4
	set eftpay.recv5=eftrev2.recv5
	set eftpay.recv6=eftrev2.recv6
	set eftpay.recvcorr=eftrev2.recvcorr
	set eftpay.recvopt=eftrev2.recvopt
	set eftpay.refno=eftrev2.refno
	set eftpay.regrep1=eftrev2.regrep1
	set eftpay.regrep2=eftrev2.regrep2
	set eftpay.regrep3=eftrev2.regrep3
	set eftpay.relrefno=eftrev2.relrefno
	set eftpay.rtrnflg=eftrev2.rtrnflg
	set eftpay.sendcorr=eftrev2.sendcorr
	set eftpay.sendinst=eftrev2.sendinst
	set eftpay.sendnos=eftrev2.sendnos
	set eftpay.sndr=eftrev2.sndr
	set eftpay.sndrcorp=eftrev2.sndrcorp
	set eftpay.sndrp=eftrev2.sndrp
	set eftpay.source=eftrev2.source
	set eftpay.specific=eftrev2.specific
	set eftpay.status=eftrev2.status
	set eftpay.sworgamt=eftrev2.sworgamt
	set eftpay.swrate=eftrev2.swrate
	set eftpay.thold=eftrev2.thold
	set eftpay.timecre=eftrev2.timecre
	set eftpay.triadd1=eftrev2.triadd1
	set eftpay.triadd2=eftrev2.triadd2
	set eftpay.triadd3=eftrev2.triadd3
	set eftpay.triadd4=eftrev2.triadd4
	set eftpay.trib=eftrev2.trib
	set eftpay.tries=eftrev2.tries
	set eftpay.trip=eftrev2.trip
	set eftpay.trntypcd=eftrev2.trntypcd
	set eftpay.tseq=eftrev2.tseq
	set eftpay.ttype=eftrev2.ttype
	set eftpay.variable=eftrev2.variable
	set eftpay.varndpo=eftrev2.varndpo
	set eftpay.xseq=eftrev2.xseq
	
	quit

        
 #OPTION ResultClass ON
Public String vSIG()	quit "60183^38651^Pat Kelly^11416"	// Signature - LTD^TIME^USER^SIZE
