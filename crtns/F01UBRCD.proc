F01UBRCD(RecordUTBLBRCD utblbrcd, String vpar, Boolean vparNorm) // UTBLBRCD - Branch Codes User Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (30)             11/22/2003
	// Trigger Definition (3)                      09/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblbrcd.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblbrcd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblbrcd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String BRCD = utblbrcd.brcd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("BRCD").exists() do vkchged quit                // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLBRCD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLBRCD","BRCD = :utblbrcd.brcd") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String BRCD

	type RecordUTBLBRCD utblbrcd = Db.getRecord("UTBLBRCD","BRCD=:BRCD")
	if (%ProcessMode = 2) do {
		do utblbrcd.setMode(2)

		do F01UBRCD(utblbrcd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLBRCD utblbrcd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLBRCD","BRCD = :utblbrcd.brcd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblbrcd,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblbrcd,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblbrcd))  S ^UTBL("BRCD",vobj(utblbrcd,-3))=vobj(utblbrcd)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLBRCD utblbrcd

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblbrcd,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("BRCD",vobj(utblbrcd,-3))                    // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLBRCD utblbrcd

	// Type local variables for access keys for defaults
	type public String BRCD

	if utblbrcd.hostbr.isNull() set utblbrcd.hostbr = 0    // hostbr
	if utblbrcd.inactv.isNull() set utblbrcd.inactv = 0    // inactv
	quit


vreqn // Validate required data items

	type public RecordUTBLBRCD utblbrcd

	if utblbrcd.desc.isNull() do vreqerr("DESC") quit
	if utblbrcd.hostbr.isNull() do vreqerr("HOSTBR") quit
	if utblbrcd.inactv.isNull() do vreqerr("INACTV") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLBRCD utblbrcd

	if utblbrcd.brcd.isNull() do vreqerr("BRCD") quit

		if vx("DESC").exists(),utblbrcd.desc.isNull() do vreqerr("DESC") quit
		if vx("HOSTBR").exists(),utblbrcd.hostbr.isNull() do vreqerr("HOSTBR") quit
		if vx("INACTV").exists(),utblbrcd.inactv.isNull() do vreqerr("INACTV") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLBRCD","MSG",1767,"UTBLBRCD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("BRZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordUTBLBRCD utblbrcd

	/*
	-- Revision History -----------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Branch Code
	do ZIP^PROCZIP(utblbrcd.brcntry, utblbrcd.brstate, utblbrcd.brzip)
	if ER.get() do Runtime.setErrMSG("UTBLBRCD", 3333, RM)

	quit
	

vau1 // Trigger AU_BRZIP - After Update of Branch Zip Code

	type public RecordUTBLBRCD utblbrcd

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Branch Code
	do ZIP^PROCZIP(utblbrcd.brcntry, utblbrcd.brstate, utblbrcd.brzip)
	if ER.get() do Runtime.setErrMSG("UTBLBRCD", 3333, RM)

	quit

vbd1 // Trigger BEFORE_D - Delete region code

	type public RecordUTBLBRCD utblbrcd
	/*
	-----Revision History--------------------------------------------------
	
	06/07/04 - Hillanbrand - CR 8006
	           Remove call to DBRCD^DEPDI and put correct coding in this trigger.
	
	09/21/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/


	//Cannot delete host
	if utblbrcd.brcd=0 do Runtime.setErrMSG("UTBLBRCD",434) quit
	
	// Delete region code
	if utblbrcd.region'="" do Db.delete("UTBLREGIONS","REGION=:utblbrcd.region AND KEY=:utblbrcd.brcd")

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLBRCD utblbrcd

	set X = utblbrcd.brcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCD", vRM) quit
	if utblbrcd.brad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BRAD1", vRM) quit
	if utblbrcd.brad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BRAD2", vRM) quit
	if utblbrcd.brad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BRAD3", vRM) quit
	if utblbrcd.brcity.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BRCITY", vRM) quit
	set X = utblbrcd.brcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("BRCNTRY", vRM) quit
	if utblbrcd.brcont.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BRCONT", vRM) quit
	if utblbrcd.brstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("BRSTATE", vRM) quit
	if utblbrcd.brtel.length()>12 set vRM = $$^MSG(1076,12) do vdderr("BRTEL", vRM) quit
	if utblbrcd.brzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("BRZIP", vRM) quit
	set X = utblbrcd.ccdef if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CCDEF", vRM) quit
	if utblbrcd.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = utblbrcd.dist if 'X.isNull(),'Db.isDefined("UTBLDISTRICT","X") set vRM = $$^MSG(1485,X) do vdderr("DIST", vRM) quit
	if utblbrcd.fepdir.length()>15 set vRM = $$^MSG(1076,15) do vdderr("FEPDIR", vRM) quit
	if '("01"[utblbrcd.HOSTBR) set vRM=$$^MSG(742,"L") do vdderr("HOSTBR", vRM) quit
	if '("01"[utblbrcd.INACTV) set vRM=$$^MSG(742,"L") do vdderr("INACTV", vRM) quit
	if utblbrcd.nbp.length()>6 set vRM = $$^MSG(1076,6) do vdderr("NBP", vRM) quit
	set X = utblbrcd.nrtrn if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("NRTRN", vRM) quit
	set X = utblbrcd.oacmax if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLBRCD.OACMAX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblbrcd.oacmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLBRCD.OACMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblbrcd.offname.length()>35 set vRM = $$^MSG(1076,35) do vdderr("OFFNAME", vRM) quit
	if utblbrcd.offtitle.length()>20 set vRM = $$^MSG(1076,20) do vdderr("OFFTITLE", vRM) quit
	if utblbrcd.ratno1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RATNO1", vRM) quit
	if utblbrcd.ratno2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RATNO2", vRM) quit
	if utblbrcd.ratno3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RATNO3", vRM) quit
	set X = utblbrcd.region if 'X.isNull(),'Db.isDefined("UTBLREGION","X") set vRM = $$^MSG(1485,X) do vdderr("REGION", vRM) quit
	set X = utblbrcd.sbiid if 'X.isNull(),X'?1.11N,X'?1"-"1.10N set vRM=$$^MSG(742,"N") do vdderr("SBIID", vRM) quit
	set X = utblbrcd.sbnid if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("SBNID", vRM) quit
	if utblbrcd.sbpt.length()>6 set vRM = $$^MSG(1076,6) do vdderr("SBPT", vRM) quit
	set X = utblbrcd.stp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("STP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLBRCD","MSG",979,"UTBLBRCD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLBRCD utblbrcd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("BRCD")
	set voldkey = vux.piece("|",1),vobj(utblbrcd,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblbrcd,-3) = vnewkey // Copy new keys into object
	type RecordUTBLBRCD vnewrec = utblbrcd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLBRCD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utblbrcd,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
