HISTUCG	//
	/*
	ORIG: MATTSON - 04/01/2003
	DESC: History Utility (HISTUTL) Code Generator

	---- Comments --------------------------------------------------------
	This procedure is used to build routine HISTUTL.  HISTUTL is a library
	program that provides the following database server utilities for the
	history related tables:

	$$HISTASC	Open cursor for table HIST (ascending order)
	$$HISTDSC	Open cursor for table HIST (descending order)
	$$HISTREC	Open cursor for table HIST (single row)

	$$HIST0		Open cursor for table HIST0
	$$HISTSB	Open cursor for table HISTSB
	$$HISTDST	Open cursor for table HISTDST
	$$HISTLST	Open cursor for table HISTLST

	$$CNVHIST	Convert HIST record (Euro)
	$$CNVDST	Convert HISTDST record (Euro)
	$$CNVLST	Convert HISTLST record (Euro)
	$$CNVSB		Convert HISTSB record (Euro)
 
	---- Revision History ------------------------------------------------
	
	05/15/06 - RussellDS - CR21296
		   Replace references to %CACHE saving string date, which is
		   reserved for PSL record objects, with cache array.
  
 	12/28/05 - TITOVE - CR 18748
 		   Modified to use correct PSL methods for rounding numbers,
 		   i.e. roundDec() instead of justify(). Replaced the usage
 		   of PSL array with ARR (PSL is a restricted keyword).
 		   
 	
 	07/28/05 - SkariahV- CR16679
	    	   Removed #WARN directive.
	
 
	12/09/04 - Frans S.C. Witte - CR 11445
		   Added .toString() for assignement of Row object 
		   to String object.
	*/
 
	/*
	This procedure defintion requires that procedure definition HISTUCG1
	has been compiled.  The #XECUTE command below compiles HISTUCG1 when
	HISTUCG is compiled to ensure this requirement has been met.
	*/
	
	#XECUTE do COMPILE^DBSPROC("HISTUCG1")
	quit

	
public	HISTUTL()
	/*
	Compile routine HISTUTL (History utilities).  Called by procedure
	definition UHFETCH.
	*/

	type String DEF(),ARR()
	
	/*
	The following call compiles routine HISTDEF to create the row definitions
	used throughout this procedure.
	*/
	
	do HISTDEF^HISTUCG1(.DEF)
	
	set ARR(ARR("").order(-1)+1)="HISTUTL // History Utility (Compiled by procedure UHFETCH)"
	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""

	// ----- Open cursor function calls -----
	set ARR(ARR("").order(-1)+1)="Public HISTASC(ResultSet histrs,Number CID,Date BJD,Number MIN,Number MAX) // HIST ResultSet (Ascending)"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet histrs=Db.select("""_DEF("HIST")_""",""HIST"",""CID=:CID AND TJD NOT < :BJD AND TSEQ NOT < :MIN AND TSEQ NOT > :MAX"",""TSEQ"")"
	set ARR(ARR("").order(-1)+1)="	if histrs.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="Public HISTDSC(ResultSet histrs,Number CID,Date BJD,Number MIN,Number MAX) // HIST ResultSet (Descending)"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet histrs=Db.select("""_DEF("HIST")_""",""HIST"",""CID=:CID AND TJD NOT < :BJD AND TSEQ NOT < :MIN AND TSEQ NOT > :MAX"",""TSEQ DESC"")"
	set ARR(ARR("").order(-1)+1)="	if histrs.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="Public HISTREC(ResultSet histrs,Number CID,Number TSEQ) // HIST ResultSet (Single Record)"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet histrs=Db.select("""_DEF("HIST")_""",""HIST"",""CID=:CID AND TSEQ=:TSEQ"")"
	set ARR(ARR("").order(-1)+1)="	if histrs.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="Public HIST0(ResultSet hist0rs,Number CID,Date JD) // HIST0 ResultSet (Single Record)"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet hist0rs=Db.select("""_DEF("HIST0")_""",""HIST0"",""CID=:CID AND JD=:JD"")"
	set ARR(ARR("").order(-1)+1)="	if hist0rs.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="Public HISTDST(ResultSet histdst,Number CID,Number TSEQ) // HISTDST ResultSet"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet histdst=Db.select("""_DEF("HISTDST")_""",""HISTDST"",""CID=:CID AND DSTSEQ=:TSEQ"")"
	set ARR(ARR("").order(-1)+1)="	if histdst.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="Public HISTLST(ResultSet histlst,Number CID,Number TSEQ) // HISTLST ResultSet"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet histlst=Db.select("""_DEF("HISTLST")_""",""HISTLST"",""CID=:CID AND SLN=:TSEQ"")"
	set ARR(ARR("").order(-1)+1)="	if histlst.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="Public HISTSB(ResultSet histsb,Number CID,Number TSEQ) // HISTSB ResultSet"
	set ARR(ARR("").order(-1)+1)="	type Public ResultSet histsb=Db.select("""_DEF("HISTSB")_""",""HISTSB"",""CID=:CID AND SLN=:TSEQ"")"
	set ARR(ARR("").order(-1)+1)="	if histsb.isEmpty() quit 0"
	set ARR(ARR("").order(-1)+1)="	quit 1"
	set ARR(ARR("").order(-1)+1)=""

	// ----- EURO conversion of HIST currency amounts -----
	set ARR(ARR("").order(-1)+1)="Public CNVHIST(Row hist) // Convert HIST currency columns"
	set ARR(ARR("").order(-1)+1)="	type String ORG"
	do EURO(.ARR,"hist.cid")

	set ARR(ARR("").order(-1)+1)="	if hist.crcd.isNull() do {"

	// Transaction was prior to EURO conversion date
	set ARR(ARR("").order(-1)+1)="		if hist.tjd<euro.eurcnvd set hist.crcd=euro.orgcrcd"

	// Transaction was prior to EURO reversal date
	set ARR(ARR("").order(-1)+1)="		else  if hist.tjd<euro.eurevdt set hist.crcd=CUVAR.emucrcd"

	// Otherwise, currency code is the same as the account
	set ARR(ARR("").order(-1)+1)="		else  set hist.crcd=CRCD"
	set ARR(ARR("").order(-1)+1)="		}"

	// If the same as the account, no conversion is necessary
	set ARR(ARR("").order(-1)+1)="	if hist.crcd=CRCD quit"

	// Save original transaction amount and currency code in TSO
	set ARR(ARR("").order(-1)+1)="	set ORG=hist.tamt_hist.crcd"
	set ARR(ARR("").order(-1)+1)="	set hist.crcd=CRCD"
	
	set ARR(ARR("").order(-1)+1)="	set hist.tamt=$$CNVTAMT(hist.tamt,CRCD,RATE,DECP)"
	set ARR(ARR("").order(-1)+1)="	set hist.tso=$$CNVTSO(hist.tso,ORG,CRCD,RATE,DECP)"
	set ARR(ARR("").order(-1)+1)="	if hist.etc.isNull()!(hist.etc=""FM"") set hist.tcmt=$$CNVTCMT(hist.tcmt,CRCD,RATE,DECP)"
	set ARR(ARR("").order(-1)+1)="	if hist.xhs16'="""" set hist.xhs16=$$CNVXHS16(.hist,CRCD,RATE,DECP)"

	do CURR("HIST",.DEF,.ARR)

	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""

	// ----- EURO conversion of HIST0 currency amounts -----
	set ARR(ARR("").order(-1)+1)="Public CNVHIST0(Row hist0) // Convert HIST0 currency columns"
	do EURO(.ARR,"hist0.cid")
	do CURR("HIST0",.DEF,.ARR)
	
	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""
	
	// ----- EURO conversion of HISTDST currency amounts -----
	set ARR(ARR("").order(-1)+1)="Public CNVDST(Row hist,Row histdst) // Convert HISTDST currency columns"
	set ARR(ARR("").order(-1)+1)="	type String ETC"
	set ARR(ARR("").order(-1)+1)="	type Public Cache %CACHE()"
		
	set ARR(ARR("").order(-1)+1)="	if histdst.acct.isNull() quit"
	set ARR(ARR("").order(-1)+1)="	set ETC=histdst.etc if ETC="""" quit"

	set ARR(ARR("").order(-1)+1)="	type RecordTRN trn=%CACHE(""TRN"").getRecord(""TRN"",""ETC=:ETC"")"
	set ARR(ARR("").order(-1)+1)="	if trn.cls=""M"" quit"

	do EURO(.ARR,"histdst.acct")
	do CURR("HISTDST",.DEF,.ARR)

	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""
	
	// ----- EURO conversion of HISTLST currency amounts -----
	set ARR(ARR("").order(-1)+1)="Public CNVLST(Row hist,Row histlst) // Convert HISTLST currency columns"
	do EURO(.ARR,"histlst.cid")
	do CURR("HISTLST",.DEF,.ARR)

	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""

	// ----- EURO conversion of HISTSB currency amounts -----
	set ARR(ARR("").order(-1)+1)="Public CNVSB(Row hist,Row histsb) // Convert HISTSB currency columns"
	do EURO(.ARR,"histsb.cid")
	do CURR("HISTSB",.DEF,.ARR)

	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""
	
	// ----- Euro conversion functions -----
	set ARR(ARR("").order(-1)+1)="CNVTAMT(String TAMT,String CRCD,Number RATE,Number DECP)	// Convert complex transaction amount"
	set ARR(ARR("").order(-1)+1)="	type Number I"
	
	set ARR(ARR("").order(-1)+1)="	for I=1:1:TAMT.length(""#"") if TAMT.piece(""#"",I) set TAMT.piece(""#"",I)=$$EQVAMT(TAMT.piece(""#"",I),CRCD,RATE,DECP)"
	set ARR(ARR("").order(-1)+1)="	quit TAMT"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="CNVTCMT(String TCMT,String CRCD,Number RATE,Number DECP)	// Convert commnent field"
	set ARR(ARR("").order(-1)+1)="	type String COL,fsn(),NV,OV,X,Y"

	set ARR(ARR("").order(-1)+1)="	if TCMT="""" quit TCMT"
	set ARR(ARR("").order(-1)+1)="	if TCMT'[""["",TCMT'[""]"" quit TCMT"

	set ARR(ARR("").order(-1)+1)="	set COL=$$di^CIFDBS(TCMT) if COL="""" quit TCMT"
	set ARR(ARR("").order(-1)+1)="	if $$TYP^DBSDD(COL)'=""$"" quit TCMT"
	set ARR(ARR("").order(-1)+1)="	set X=TCMT.piece(""]"",1)"
	set ARR(ARR("").order(-1)+1)="	set Y=TCMT.piece(""]"",2)"

	set ARR(ARR("").order(-1)+1)="	set OV=Y.piece("":"",2)	// Old value"
	set ARR(ARR("").order(-1)+1)="	set NV=Y.piece("":"",3)	// New value"
	set ARR(ARR("").order(-1)+1)="	if 'OV,'NV quit TCMT"

	set ARR(ARR("").order(-1)+1)="	if OV set Y.piece("":"",2)=$$EQVAMT(OV,CRCD,RATE,DECP)"
	set ARR(ARR("").order(-1)+1)="	if NV set Y.piece("":"",3)=$$EQVAMT(NV,CRCD,RATE,DECP)"
	set ARR(ARR("").order(-1)+1)="	set TCMT=X_""]""_Y"
	set ARR(ARR("").order(-1)+1)="	quit TCMT"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="CNVTSO(String TSO,String ORG,String CRCD,Number RATE,Number DECP)	// Convert transaction source field"
	set ARR(ARR("").order(-1)+1)="	if TSO="""" set TSO=""OCUR#""_ORG"

	set ARR(ARR("").order(-1)+1)="	else  do {"
	set ARR(ARR("").order(-1)+1)="		type String id,tmp()"
	set ARR(ARR("").order(-1)+1)="		do OUT^UTSO(.tmp,TSO)"

	set ARR(ARR("").order(-1)+1)="		set id="""""
	set ARR(ARR("").order(-1)+1)="		for  set id=tmp(id).order() quit:id=""""  do TSO(id,.tmp,CRCD,RATE,DECP)"

	// Add original currency transaction amount
	set ARR(ARR("").order(-1)+1)="		set tmp(""OCUR"")=ORG"

	// Re-build TSO field with converted amounts
	set ARR(ARR("").order(-1)+1)="		do IN^UTSO(.tmp,.TSO)"
	set ARR(ARR("").order(-1)+1)="		}"
	set ARR(ARR("").order(-1)+1)="	quit TSO"
	set ARR(ARR("").order(-1)+1)=""
	

	set ARR(ARR("").order(-1)+1)="TSO(String id,String tmp(),String CRCD,Number CNVRATE,Number CNVDECP) // Convert currency fields in TSO"
	set ARR(ARR("").order(-1)+1)="	type Public Cache %CACHE()"

	set ARR(ARR("").order(-1)+1)="	type Number pos"
	set ARR(ARR("").order(-1)+1)="	type String del,str,typ,val"

	set ARR(ARR("").order(-1)+1)="	if id=""INTADJ"" do { quit"
	set ARR(ARR("").order(-1)+1)="		for pos=1:1:tmp(id).length(""#"") do {"
	set ARR(ARR("").order(-1)+1)="			set val=tmp(id).piece(""#"",pos) if 'val quit"
	set ARR(ARR("").order(-1)+1)="			set tmp(id).piece(""#"",pos)=$$EQVAMT(val,CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="			}"
	set ARR(ARR("").order(-1)+1)="		}"

	// Standard complex TSO fields that have currency sub-fields
	set ARR(ARR("").order(-1)+1)="	if "",DEFINT,LNFEE,LNFEEIN,SEGA,SEGAA,SEGI,SEGP,""[("",""_id_"","") do { quit"
	set ARR(ARR("").order(-1)+1)="		if id.extract(1,5)=""LNFEE""!(id=""DEFINT"") set del="","""
	set ARR(ARR("").order(-1)+1)="		else  set del=""^"""

	set ARR(ARR("").order(-1)+1)="		for pos=1:1 set str=tmp(id).piece(del,pos) quit:str=""""  do {"
	set ARR(ARR("").order(-1)+1)="			set val=str.piece("":"",2) if 'val quit"
			
	set ARR(ARR("").order(-1)+1)="			set str.piece("":"",2)=$$EQVAMT(val,CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="			set tmp(id).piece(del,pos)=str"
	set ARR(ARR("").order(-1)+1)="			}"
	set ARR(ARR("").order(-1)+1)="		}"

	// Quit if no value to convert
	set ARR(ARR("").order(-1)+1)="	set val=tmp(id) if 'val quit"

	// Get data type from table STBLTSO (standard) or UTBLZTSO (custom)
	set ARR(ARR("").order(-1)+1)="	if id.extract()=""Z"" do {"
	set ARR(ARR("").order(-1)+1)="		catch ERROR {"
	set ARR(ARR("").order(-1)+1)="			set typ=""T"""
	set ARR(ARR("").order(-1)+1)="			}"

	set ARR(ARR("").order(-1)+1)="		type RecordUTBLZTSO utbl=%CACHE(""UTBLZTSO"").getRecord(""UTBLZTSO"",""KEY=:id"")"
	set ARR(ARR("").order(-1)+1)="		set typ=utbl.typ"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	else  do {"
	set ARR(ARR("").order(-1)+1)="		catch ERROR {"
	set ARR(ARR("").order(-1)+1)="			set typ=""T"""
	set ARR(ARR("").order(-1)+1)="			}"

	set ARR(ARR("").order(-1)+1)="		type RecordSTBLTSO stbl=%CACHE(""STBLTSO"").getRecord(""STBLTSO"",""KEY=:id"")"
	set ARR(ARR("").order(-1)+1)="		set typ=stbl.typ"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if typ=""$"" set tmp(id)=$$EQVAMT(val,CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="CNVXHS16(Row hist,String CRCD,Number CNVRATE,Number CNVDECP) // Convert pieces of XHS16 based on EC posting program"
	set ARR(ARR("").order(-1)+1)="	type Number I"
	set ARR(ARR("").order(-1)+1)="	type Public Cache %CACHE()"
	set ARR(ARR("").order(-1)+1)="	type String PGMEC,ETC,XHS16"

	set ARR(ARR("").order(-1)+1)="	set XHS16=hist.xhs16"
	set ARR(ARR("").order(-1)+1)="	set ETC=hist.etc if ETC="""" quit XHS16"
	
	set ARR(ARR("").order(-1)+1)="	type RecordTRN trn=%CACHE(""TRN"").getRecord(""TRN"",""ETC=:ETC"")"

	set ARR(ARR("").order(-1)+1)="	set PGMEC=trn.pgmec"
	set ARR(ARR("").order(-1)+1)="	if PGMEC="""" quit XHS16"
	set ARR(ARR("").order(-1)+1)="	set PGMEC=PGMEC.piece(""("",1)"

	set ARR(ARR("").order(-1)+1)="	if PGMEC=""EC^DEPPW"" do { quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=2,20,22,23 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if PGMEC=""EC^DEPINT4"" do { quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=1,8 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if PGMEC=""EC^SRVTRN"" do { quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=4,5,6,7,8 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if PGMEC=""^LNPTSR"" do { quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=11,30,31 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if PGMEC=""^DEPEC0"" do { quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=14,15,16,17,18,20,21 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if PGMEC=""^DEPEC1"" do { quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=26 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	if PGMEC.piece(""("",1)=""EC^DEPCL"" do {  quit XHS16"
	set ARR(ARR("").order(-1)+1)="		for I=1:1:6,19:1:21,26:1:28,35:1:41 if XHS16.piece(""#"",I) set XHS16.piece(""#"",I)=$$EQVAMT(XHS16.piece(""#"",I),CRCD,CNVRATE,CNVDECP)"
	set ARR(ARR("").order(-1)+1)="		}"
		
	set ARR(ARR("").order(-1)+1)="	quit XHS16"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="EQVAMT(Number AMT,String CRCD,Number RATE,Number DECP)"
	set ARR(ARR("").order(-1)+1)="	type Number EQV"
	set ARR(ARR("").order(-1)+1)="	if CRCD=CUVAR.emucrcd do {"
	set ARR(ARR("").order(-1)+1)="		set EQV=AMT/RATE"
	set ARR(ARR("").order(-1)+1)="		set EQV=EQV.roundDec(2,,0)"
	set ARR(ARR("").order(-1)+1)="		}"
	set ARR(ARR("").order(-1)+1)="	else  do {"
	set ARR(ARR("").order(-1)+1)="		set EQV=AMT*RATE"
	set ARR(ARR("").order(-1)+1)="		set EQV=EQV.roundDec(DECP,,0)"
	set ARR(ARR("").order(-1)+1)="		}"
	set ARR(ARR("").order(-1)+1)="	quit EQV"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="EURO(Number CID)	// Initialize Euro conversion data"
	set ARR(ARR("").order(-1)+1)="	type Public String cache(,)"

	set ARR(ARR("").order(-1)+1)="	type Row euro=cache(""HISTUCG"",""EURO"").get().toRow(""#$$EURO^HISTDEF"","","")"
	set ARR(ARR("").order(-1)+1)="	if euro.cid=CID quit"
	
	set ARR(ARR("").order(-1)+1)="	type String CRCD"
	set ARR(ARR("").order(-1)+1)="	type Number DECP,RATE"
	set ARR(ARR("").order(-1)+1)="	type Date EURCNVD,EUREVDT"

	set ARR(ARR("").order(-1)+1)="	type RecordACN acn=Db.getRecord(""ACN"",""CID=:CID"")"

	set ARR(ARR("").order(-1)+1)="	set CRCD=acn.crcd"
	set ARR(ARR("").order(-1)+1)="	set EURCNVD=acn.eurcnvd"
	set ARR(ARR("").order(-1)+1)="	set EUREVDT=acn.eurevdt"
	
	set ARR(ARR("").order(-1)+1)="	if EURCNVD="""",EUREVDT="""" set RATE="""",DECP="""""
	set ARR(ARR("").order(-1)+1)="	else  do CNVRATE(CRCD,.RATE,.DECP)"

	set ARR(ARR("").order(-1)+1)="	set euro.cid=CID"
	set ARR(ARR("").order(-1)+1)="	set euro.crcd=CRCD"
	set ARR(ARR("").order(-1)+1)="	set euro.rate=RATE"
	set ARR(ARR("").order(-1)+1)="	set euro.decp=DECP"
	set ARR(ARR("").order(-1)+1)="	set euro.eurcnvd=EURCNVD"
	set ARR(ARR("").order(-1)+1)="	set euro.eurevdt=EUREVDT"
	set ARR(ARR("").order(-1)+1)="	if EUREVDT set euro.orgcrcd=CRCD"
	set ARR(ARR("").order(-1)+1)="	else  set euro.orgcrcd=acn.orgcrcd"
	

	set ARR(ARR("").order(-1)+1)="	set cache(""HISTUCG"",""EURO"")=euro.toString()"
	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""

	set ARR(ARR("").order(-1)+1)="CNVRATE(String CRCD,Number RATE,Number DECP)	// Get conversion rate/decimal precision"
	set ARR(ARR("").order(-1)+1)="	type Public Cache %CACHE()"

	set ARR(ARR("").order(-1)+1)="	type RecordCRCD crcd=%CACHE(""CRCD"").getRecord(""CRCD"",""CO=:%CompanyName,CRCD=:CRCD"")"
	set ARR(ARR("").order(-1)+1)="	set RATE=crcd.fncrate"
	set ARR(ARR("").order(-1)+1)="	set DECP=crcd.curdec"
	set ARR(ARR("").order(-1)+1)="	quit"
	set ARR(ARR("").order(-1)+1)=""


	// ----- Compile HISTUTL -----
	do BUILDRTN^UCGM(.ARR,"HISTUTL")
	quit


EURO(String ARR(),String REF)	// Code to initialize EURO conversion data

	set ARR(ARR("").order(-1)+1)="	type Row euro=Class.new(""Row"",""#$$EURO^HISTDEF"")"
	set ARR(ARR("").order(-1)+1)="	do euro.setDelimiter(""|"")"
	set ARR(ARR("").order(-1)+1)="	do EURO("_REF_")"

	set ARR(ARR("").order(-1)+1)="	if euro.eurcnvd="""",euro.eurevdt="""" quit"
	set ARR(ARR("").order(-1)+1)="	type Number DECP,RATE"
	set ARR(ARR("").order(-1)+1)="	type String CRCD"
	
	set ARR(ARR("").order(-1)+1)="	set CRCD=euro.crcd"
	set ARR(ARR("").order(-1)+1)="	set RATE=euro.rate"
	set ARR(ARR("").order(-1)+1)="	set DECP=euro.decp"

	quit
	

CURR(String FID,
    String DEF(),
    String ARR())

	/*
	This sub-routine generates code to convert columns that
	are defined as data type currency ($).
	
	ARGUMENTS:
	     . FID	File ID			/REQ/MECH=VAL
	     . DEF	Row definition array	/REQ/MECH=REFARR:R
	     . ARR	PSL source code array	/REQ/MECH=REFARR:RW
	*/
	
	type Number POS
	type String COL,DI,SFD,TBL

	set TBL=FID.lowerCase()
	
	set (DI,POS)=""
	for  set POS=DEF(FID,POS).order() quit:POS.isNull()  do {
		for  set DI=DEF(FID,POS,DI).order() quit:DI.isNull()  do {	

			set COL=DI.lowerCase()
			set SFD=DEF(FID,POS,DI)
			
			/*
			If the column is not a sub-field, insert code to
			convert the amount to its equivalent in currency
			'CRCD'.
			*/
			
			if SFD.isNull() set ARR(ARR("").order(-1)+1)="	if "_TBL_"."_COL_" set "_TBL_"."_COL_"=$$EQVAMT("_TBL_"."_COL_",CRCD,RATE,DECP)"
			

			/*
			If the column is a sub-field; remap COL to the applicable
			column name and insert code to convert the amount to its
			equivalent in currency 'CRCD'.
			*/
			
			else  do {
				type String COL
				
				set COL=DEF(FID,POS).get() if COL.isNull() quit
				set COL=COL.lowerCase()
				
				set ARR(ARR("").order(-1)+1)="	do {"
				set ARR(ARR("").order(-1)+1)="		type Number AMT"
				set ARR(ARR("").order(-1)+1)="		type String STR"
				set ARR(ARR("").order(-1)+1)="		set STR="_TBL_"."_COL
				set ARR(ARR("").order(-1)+1)="		set AMT=STR.piece("""_$C(SFD.piece("~",2))_""","_SFD.piece("~",4)_") if 'AMT quit"
				set ARR(ARR("").order(-1)+1)="		set STR.piece("""_$C(SFD.piece("~",2))_""","_SFD.piece("~",4)_")=$$EQVAMT(AMT,CRCD,RATE,DECP)"
				set ARR(ARR("").order(-1)+1)="		set "_TBL_"."_COL_"=STR"
				set ARR(ARR("").order(-1)+1)="		}"
				}
			}
		}
	quit

vSIG()	quit "60401^67462^Dan Russell^20200"	// Signature - LTD^TIME^USER^SIZE
