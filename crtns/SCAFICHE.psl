SCAFICHE	//

	/*
	----------------------------------------------------------------------
	ORIG: chhabris - 08/09/2005
	DESC: VAX RMS to IBM Spool File Conversion

	---- Comments --------------------------------------------------------

	SPECIAL M/VX (FORMAT "WNS")

	SINGLE FILE / TAPE
	VOL1,HDR1,HDR2,TM,DATA,EOF1,EOF2,TM,TM

	MULTIPLE FILES / TAPE
	VOL1,HDR1,HDR2,TM,DATA,EOF1,EOF2,TM,TM,HDR1,HDR2,TM,DATA,EOF1,EOF2,TM,TM
	
	INPUT: RMS file
	OUTPUT: Tape

	---- Revision History ------------------------------------------------
	04/04/2006 - GIRIDHARANL - CR20449
		     Removed a Quit statement before START that was preventing
		     the procedure from running.
		     
	01/03/2006 - chhabris - CR18749
		     Cleared the unscope variable issue. Code clean up.

	08/09/2005 - CHHABRIS - CR16677
		     Converted to PSL.
		     Removed revision history prior to 2004.
	----------------------------------------------------------------------
	*/
 	//----------------------------------------------------------------------
START	// Init variables
	//----------------------------------------------------------------------

	type public Boolean ER
	type String DEFDIR
	type String DTYPE,FILES,LAB,RM,PARMS,VFMQ
	type Number BSIZ,BKSIZ,FICHE,FID,FFFLAG,RSIZ,VOL

	// Microfiche flag
	set FICHE=1
	set DEFDIR=""

	set BKSIZ=1330,VOL=1,FID=1,FFFLAG=" "

	do DEFDIR
	do SCREENS if VFMQ="Q" quit

	// No files selected
	if 'FILES.get() set ER=1,RM=$$^MSG(1942) quit

	set PARMS=$S(DTYPE="E":"EBCDIC/",1:"")_$S(LAB="L":"LABEL/",1:"")
	set PARMS=PARMS_"FIXED/RECORD="_RSIZ_"/BLOCK="_BSIZ
	do PROC
	quit


 	//----------------------------------------------------------------------
PROC	// Begin processing
	//----------------------------------------------------------------------

	type public Number RSIZ
	type public String ET,PARMS,RM,TIO
	type public Boolean ER
	type String BLNK,FID,%TAB,XRMS
	type Number I,USETAPE,TOTPG,X,PG
	type IO io

	// Beginning output to tape
	use 0 write !!,$$MSG^%TRMVT($$^MSG(4774)),!

	set BLNK=""
	for I=1:1:RSIZ-1 set BLNK=BLNK_" "

	do PPTDRV^%ZINIT(TIO,.TIO)

	do TINIT quit:ER
	do TMOUNT quit:ER

	set io=Class.new("IO")
	set io.fileName=TIO
	set io.openParams=PARMS
	set io.timeout=3
	do io.open()

	catch ERROR {
		set ET=ERROR.type
		
		// Unable to open tape device
		set ER=1,RM=$$^MSG(4787)
		do ABORT
		}

	if ER quit

	set USETAPE=1,TOTPG=0,PG=0
	set FID=""
	do NXFILE
	quit


NXFILE	//

	type public String ET,FILES(),RM
	type public Number FICHE,TOTPG,PG,FID
	type public Boolean ER
	type String LN,RMSIO,X
	type Number RECCNT
	type IO io

	set TOTPG=TOTPG+PG
	set FID=FILES(FID).order()
	if FID.isNull() do EOFILES quit
	set LN=""

	catch ERROR {
		set ET=ERROR.type
		
		// Unable to open tape device
		set ER=1,RM=$$^MSG(4787)
		do TRAP
		}

	if ER=1 quit

	set RMSIO=FILES(FID)
	set PG=$S(FICHE:1,1:0)

	set io=Class.new("IO")
	set io.fileName=RMSIO
	set io.openParams="READ"
	set io.timeout=3
	do io.open()

	catch ERROR {
		set ET=ERROR.type
		
		// Unable to open RMS file -- process aborted
		set ER=1,RM=$$^MSG(2801)
		do ABORT
		}

	if ER quit

	// Begin writing file ~p1 to tape at ~p2
	use 0 write !,$$MSG^%TRMVT($$^MSG(4773,RMSIO,$$TIM^%ZM(%CurrentTime)))
	set RECCNT=0

	while FICHE do GET
	quit


	//----------------------------------------------------------------------
GET	// Get the next record
	//----------------------------------------------------------------------

	type public Number RECCNT,FICHE
	type public String RMSIO,TIO
	type public Boolean ER
	type String X

	set X=$$^%ZREAD(RMSIO,.ER) if ER do TRAP quit
	if $$EOT^%ZUSE(TIO) do EOT use TIO

	if X["$$EOF" do TRAP quit

	set RECCNT=RECCNT+1

	if FICHE do FWRT quit

	do DWRT
	quit


	//----------------------------------------------------------------------
DWRT	// DBS file write - write record to tape
	//----------------------------------------------------------------------

	type public String BLNK,RM,X,TIO
	type public Number PG,RSIZ
	type public Boolean ER

	if X.length()>RSIZ do { do ABORT quit
		set ER=1

		// Record size ~p1 is too large -- process aborted
		set RM=$$^MSG(2338,X.length())
		}

	// PAD IF SHORT
	if X.length() < RSIZ set X=X_BLNK.extract(X.length(),RSIZ)
	set PG=PG+1

	if PG#50=0 do STATUS

	use TIO write X

	do GET
 	quit


 	//----------------------------------------------------------------------
FWRT	// Fiche write
	//----------------------------------------------------------------------
	type public String FFFLAG,X

	// Write line feed, carriage return
	if X.isNull() write FFFLAG_$J("",132) set FFFLAG=" " quit
	if X=$C(13,12)!(X=12.char()) do FF quit
	if X[$C(13,12) S X=X.piece($C(13,12),1) do LINE,FF quit
	do LINE
	quit


	//----------------------------------------------------------------------
FF	// # (13,12) Form feed
	//----------------------------------------------------------------------
	type public String FFFLAG
	type public Number PG

	if FFFLAG write "1"_$J("",132)
	set FFFLAG=1

	if PG#10=0 do STATUS
	set PG=PG+1
	quit


	//----------------------------------------------------------------------
LINE	// Pad out the line to 132
	//----------------------------------------------------------------------

	type public String FFFLAG,X

	write FFFLAG_X.extract(1,132)_$J("",132-X.length())
	set FFFLAG=" "
	quit 


	//----------------------------------------------------------------------
EOT	// End of tape
	//----------------------------------------------------------------------

	type public String HDR,PARMS,TIO
	type public Number VOL
	type public Boolean ER
	type String X

	// TM,EOF1,EOF2,TM,TM
	if HDR'="N" do TAPE^%ZUSE(TIO,"WRITELBEOF")

	do TAPE^%ZUSE(TIO,"REWIND")

	close TIO do TDISM
	set VOL=VOL+1

	// End-of-tape -- Mount volume ~p1
	write $$MSG^%TRMVT($$^MSG(4776,VOL),0,1)

	set ER=0
	do TINIT quit:ER
	do TMOUNT quit:ER

	set X=$$TAPE^%ZOPEN(TIO,PARMS)

	quit


	//----------------------------------------------------------------------
TINIT	// Initialize tape
	//----------------------------------------------------------------------
	type public String COMPACT,DENSITY,MSG,TIO
	type public Boolean ER
	type Number X

	for  quit:$$EXT^%ZINIT(TIO,DENSITY,"FICHE",COMPACT)  do { quit:ER

		// Unable to initialize tape.  Mount tape then select option:
		set MSG=$$^MSG(4785)
		set X=$$^DBSMBAR(161,"","",1)
		if X=2 set ER=1
		}
	quit 


	//----------------------------------------------------------------------
TMOUNT	// Mount tape
	//----------------------------------------------------------------------
	type public String TIO
	type public Boolean ER

	for  quit:$$EXT^%ZMOUNT(TIO,1)  do { quit:ER
		type String MSG,X

		// Unable to mount tape.  Mount tape then select option:
		set MSG=$$^MSG(4786)
		set X=$$^DBSMBAR(161,"","",1)
		if X=2 set ER=1
		}
	quit 


	//----------------------------------------------------------------------
TDISM	// Dismount tape
	//----------------------------------------------------------------------
	type public String TIO
	type Number NORETRY

	for  quit:$$EXT^%ZDISMOU(TIO)  do { quit:NORETRY.get()
		type String MSG,X

		// Unable to dismount tape.  Retry?
		set MSG=$$^MSG(4784)
		set X=$$^DBSMBAR(1,"","",1)
		if X=2 set NORETRY=1
		}

	quit


	//----------------------------------------------------------------------
TRAP	// Trap errors
	//----------------------------------------------------------------------
	type public String FILES(),HDR,TIO,RM,RMSIO
	type public Number FICHE,FID,PG
	type public Boolean ER
	type String X

	do ENABLE^%ZBREAK
	close RMSIO

	if $$ETLOC^%ZT'["END_OF_FILE" do ZE^UTLERR set ER=1,RM="" do ABORT quit
	if FICHE use TIO write "1"_$J("",132)
	else  do PADBLK

	// EOF1,EOF2,TM,HDR1,HDR2
	if HDR'="N" , '(FILES(FID).order().isNull()) do EOFHDR^%ZUSE(TIO)
		type Number N

		// File complete - ~p1 page(s) for this file
		if FICHE set X=$$^MSG(5710,PG)

		// File complete - ~p1 record(s) for this file
		else  set X=$$^MSG(5711,PG)
		use 0 write !,X

	do NXFILE
	quit


	//----------------------------------------------------------------------
PADBLK	// Pad out the remainder of the block with BLKPD characters
	// Determine number of records to fill block
	//----------------------------------------------------------------------

	type public Number BSIZ,RECCNT,RSIZ,BLKPD
	type public String REC,TIO
	type Number CNT,BLKFAC,I
	type String X

	set BLKFAC=BSIZ/RSIZ
	quit:BLKFAC=1
	set REC.piece(BLKPD,RSIZ+1)=""
	set CNT=BLKFAC-(RECCNT#BLKFAC)

	// Write appropriate number of records of block padding characters to
	// fill the last block on the tape when at end of the file.	
	
	for I=1:1:CNT do {
		set X=REC.extract(1,RSIZ)
		use TIO write X
		}		
	quit


	//----------------------------------------------------------------------
EOFILES	// End of files
	//----------------------------------------------------------------------

	type public String TIO
	type public Number FICHE,TOTPG
	type String X

	// EOF1,EOF2,TM,TM,REWIND
	do TAPE^%ZUSE(TIO,"REWIND") close TIO

	do TDISM

	// Output to tape complete - ~p1 total page(s)
	if FICHE set X=$$^MSG(4782,TOTPG)

	// Output to tape complete - ~p1 total record(s)
	else  set X=$$^MSG(4788,TOTPG)

	use 0 write !!,X,"  ",$$TIM^%ZM(%CurrentTime)
	write !!,$$MSG^%TRMVT("",0,1)

	do STATUS
	quit


	//----------------------------------------------------------------------
STATUS	// Print current status
	//----------------------------------------------------------------------

	type public Number FICHE,PG,TOTPG
	type String X

	// ~p1 total page(s), ~p2 page(s) for this file written to tape
	if FICHE set X=$$^MSG(5713,TOTPG+PG,PG)

	// ~p1 total record(s), ~p2 record(s) for this file written to tape
	else  set X=$$^MSG(4770,TOTPG+PG,PG)
	use 0 write "... ",X,"  ",$$TIM^%ZM(%CurrentTime)
	quit 


	//----------------------------------------------------------------------
ABORT	// Process aborted, dismount tape
	//----------------------------------------------------------------------
	type public Number USETAPE
	type public String RM,TIO
	type public Boolean ER

	use 0 if ER,'RM.isNull() write !!,$$MSG^%TRMVT(RM,0,1)
	if USETAPE do TAPE^%ZUSE(TIO,"REWIND") close TIO

	do TDISM
	quit 


	//----------------------------------------------------------------------
DEFDIR	// Get default directory
	//----------------------------------------------------------------------
	type public String %DIR,DEFDIR

	do INT^%DIR
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set DEFDIR=cuvar.spldir
	if DEFDIR.isNull() set DEFDIR=%DIR
	if DEFDIR.extract(DEFDIR.length())=":" set DEFDIR=DEFDIR.extract(1,(DEFDIR.length()-1))
	quit 


	//----------------------------------------------------------------------
public DBS	// Data-Qwik entry point
	//----------------------------------------------------------------------

	type public Number BSIZ,FICHE,RSIZ
	type public String DEFDIR,LAB,VFMQ,DTYPE
	type public String FROMDIR,PARMS

	// Microfiche flag
	set FICHE=0
	do DEFDIR set FROMDIR=DEFDIR
	do SCREENS if VFMQ="Q" quit 

	set PARMS=$S(DTYPE="E":"EBCDIC/",1:"")
	set PARMS=PARMS_$S(LAB="L":"LABEL/",1:"")
	set PARMS=PARMS_"FIXED/RECORD="_RSIZ_"/BLOCK="_BSIZ

	do PROC
	quit


	//----------------------------------------------------------------------
S1	// Set up screen for DBS entry
	//----------------------------------------------------------------------
	type public String %TAB(),%READ

	set %TAB("RMS")=".RMS5/TBL=[UTBLTAPEFMT],#5/XPP=D FILLIN^SCAFICHE"
	set %TAB("XRMS")=".RMS5/XPP=D FILLIN^SCAFICHE"
	set %TAB("RSIZ")=".RECSIZ1"
	set %TAB("BSIZ")=".BSIZ1"
	set %TAB("BLKPD")=".BLKPD1/XPP=D PDCHK^SCAFICHE"
	set %TAB("LAB")=".LBL1/XPP=I X'=""L""&(X'=""U"") set ER=1,RM=$$^MSG(907)"
	set %TAB("DTYPE")=".FRM1/XPP=I X'=""A""&(X'=""E"") set ER=1,RM=$$^MSG(903)"
	set %TAB("DENSITY")=".DENSITY1/HLP=[UTBLTAPEFMT]DENSITY/XPP=D PPDENS^%ZINIT(X)"
        set %TAB("COMPACT")=".COMPACT"
	set %TAB("TIO")=".%TDRV3/XPP=D PPTDRV^%ZINIT(X)"
	set %TAB("HDR")=".HDR1/XPP=I X'=""H""&(X'=""N"") set ER=1,RM=$$^MSG(8227)"
	set %READ="@@%FN,,,RMS/REQ,RSIZ/REQ,BSIZ/REQ,LAB/REQ,DTYPE/REQ,DENSITY/REQ,COMPACT/REQ,BLKPD/REQ,TIO/REQ,HDR/REQ"
	quit 


	//----------------------------------------------------------------------
S2	// Set up screen for DBS entry (fiche)
	//----------------------------------------------------------------------
	type public String DEFDIR,FROMDIR,%DIR,VFMQ,%TAB(),%READ,RMS,XRMS,MORE

	set %TAB("FROMDIR")=".FROMDIR1/XPP=D POSTDIR^SCAFICHE"
	set %TAB("RMS")=".RMS5/XPP=D FILLIN^SCAFICHE"
	set %TAB("XRMS")=".RMS5/XPP=D FILLIN^SCAFICHE"
	set %TAB("MORE")=".MORE2"

	if 'DEFDIR.isNull() set FROMDIR=DEFDIR
	else  set FROMDIR=%DIR

	set %READ="@@%FN,,,FROMDIR/REQ,,RMS/REQ,XRMS/REP=14,MORE"

	quit 


	//----------------------------------------------------------------------
S3	// Set up screen, continued (fiche)
	//----------------------------------------------------------------------
	type public String %TAB(),%READ

	set %TAB("XRMS")=".RMS5/XPP=D FILLIN^SCAFICHE"
	set %TAB("MORE")=".MORE2"
	set %READ="@@%FN,,,XRMS/REP=15/REQ,MORE/REQ"

	quit 


	//----------------------------------------------------------------------
S4	// Set up screen  (tape)
	//----------------------------------------------------------------------
	type public String %TAB(),%READ

	set %TAB("RSIZ")=".RECSIZ1"
	set %TAB("BSIZ")=".BSIZ1"
	set %TAB("LAB")=".LBL1/XPP=I X'=""L"",X'=""U"" set ER=1,RM=$$^MSG(907)"
	set %TAB("DTYPE")=".FRM1/XPP=I X'=""A"",X'=""E"" set ER=1,RM=$$^MSG(903)"
	set %TAB("DENSITY")=".DENSITY1/HLP=[UTBLTAPEFMT]DENSITY/XPP=D PPDENS^%ZINIT(X)"
	set %TAB("TIO")=".%TDRV3/XPP=D PPTDRV^%ZINIT(X)"
	set %TAB("HDR")=".HDR1/XPP=I X'=""H""&(X'=""N"") set ER=1,RM=$$^MSG(8227)"
	set %READ="@@%FN,,,RSIZ/REQ,BSIZ/REQ,LAB/REQ,DTYPE/REQ,DENSITY/REQ,TIO/REQ,HDR/REQ"

	quit 


	//----------------------------------------------------------------------
SCREENS	//  Primary header for set up screens
	//----------------------------------------------------------------------
	type public String DEFDIR,%TO,VFMQ
	type public Number FICHE
	type public Boolean ER
	type Number FILES,TMPFILES,USETAPE
	type String RM

	if '%TO.data() set %TO=30
	set (ER,FILES,TMPFILES,USETAPE)=0,RM=""
	if FICHE do SCREENF quit

	do SCREEND
	quit


	//----------------------------------------------------------------------
SCREEND	// DBS screen
	//----------------------------------------------------------------------
	type public String RMS,VFMQ

	do S1,^UTLREAD if VFMQ="Q" quit
	do ADDFILES(RMS)
	quit 


	//----------------------------------------------------------------------
SCREENF	// Fiche screen
	//----------------------------------------------------------------------
	type Number MORE,%PG,N
	type public String RMS,VFMQ
	type String XRMS()

	do S2
	set MORE=0,%PG=0
	kill XRMS

	do ^UTLREAD
	quit:VFMQ="Q"

	do ADDFILES(RMS)

	set N=""
	for  set N=XRMS(N).order() quit:N.isNull()  do ADDFILES(XRMS(N))
	if 'MORE do SCRF2A quit

	do SCRF2
	quit


SCRF2	//
	type Number N
	type String XRMS()
	type public String VFMQ
	type public Number %PG,MORE

	while 'MORE do {
		do S3
		set MORE=0,%PG=0

		do ^UTLREAD

		quit:VFMQ="Q"

		set N=""
		for  set N=XRMS(N).order() quit:N.isNull()  do ADDFILES(XRMS(N))
		}

	if 'MORE do SCRF2A quit
	quit


SCRF2A	//
	type Number BSIZ,DENSITY,RSIZ
	type String DTYPE,HDR,LAB
	type public Number %PG
	
	// Microfiche defaults
	set RSIZ=133,BSIZ=1330,LAB="L",DTYPE="E",DENSITY=1600,HDR="N"

	do S4 set %PG=1
	do ^UTLREAD
	quit


	//----------------------------------------------------------------------
ADDFILES(X)	// Add files, in input order, to FILES
	//----------------------------------------------------------------------
	type public String FROMDIR,FILES()
	type Number END,N,NN,FILES
	type String ARRAY(),FILDIR,NOT,XX,FILE

	set XX=X,NOT=X.extract()="'"
	if NOT set XX=XX.extract(2,XX.length())
	set FILDIR=FROMDIR,FILE=XX
	if FILE[":" set FILDIR=XX.piece(":",1),FILE=XX.piece(":",2)
	if FILE["/" do QUAL

	set X=$$EXT^%FSEL(FILDIR,FILE,.ARRAY)

	set (N,NN)="",END=FILES("").order(-1)+1
	if 'NOT for  set N=ARRAY(N).order() quit:N.isNull()  set FILES(END)=N,END=END+1,FILES=FILES+1
	if NOT for  set N=ARRAY(N).order() quit:N.isNull()  for  set NN=FILES(NN).order() quit:NN.isNull()  if FILES(NN)=N kill FILES(NN) set FILES=FILES-1
	quit 


	//-----------------------------------------------------------------------
POSTDIR	// Post processor for directory check
	//----------------------------------------------------------------------
	type public String DEFDIR,X
	type public Boolean ER

	if X.isNull() set X=DEFDIR
	if X.extract(X.length())=":" set X=X.extract(1,X.length()-1)

	type String X
	
	// Save input, since changed by ^%ZDIRCHK
	do ^%ZCHKDIR quit:ER.get()
	quit 


	//----------------------------------------------------------------------
FILLIN	//
	//----------------------------------------------------------------------
	type public Number ZB,TMPEND,FICHE
	type public String ARRAY(),FROMDIR,RM,TMPFILES(),TESTOPEN(),X
	type public Boolean ER
	type Number CNT,N,RET
	type String FILDIR,FILE,ARRAY,NOT,XX,NN,FN

	if ZB=1!(ZB=4)!(X["?") do DIR quit
	quit:X.isNull()

	set XX=X
	set NOT=X.extract()="'"
	if NOT set XX=XX.extract(2,XX.length())
	set FILDIR=FROMDIR,FILE=XX

	// Invalid file selection
	if FILE.isNull() set ER=1,RM=$$^MSG(1342) quit

	// Press SELECT for a list of valid options
	if 'FICHE,'Db.isDefined("UTBLTAPEFMT","KEY=:FILE") set ER=1,RM=$$^MSG(2218) quit
	
	if FILE[":" set FILDIR=FILE.piece(":",1),FILE=FILE.piece(":",2)
	if FILE["/" do QUAL

	// Invalid file selection
	if '$$EXT^%FSEL(FILDIR,FILE,.ARRAY) set ER=1,RM=$$^MSG(1342) quit
	
	set (N,NN)="",ER=0,TMPEND=TMPFILES("").order(-1)+1,CNT=0
	if 'NOT for  set N=ARRAY(N).order() quit:N.isNull()  do TESTOPEN(N) quit:ER  set TMPFILES(TMPEND)=N,TMPEND=TMPEND+1,CNT=CNT+1
	quit:ER

	if NOT for  set N=ARRAY(N).order() quit:N.isNull()  for  set NN=TMPFILES(NN).order() quit:NN.isNull()  if N=TMPFILES(NN) kill TMPFILES(NN) set CNT=CNT+1
	set TMPFILES=TMPFILES+($S(NOT:-1,1:1)*CNT)

	// ~p1 total file(s) selected
	set RM=$$^MSG(3040,TMPFILES)

	if FICHE quit

	// File name
	set FN=X.piece(";",1)

	// No defaults available
	if 'FN.isNull(),'Db.isDefined("UTBLTAPEFMT","KEY=:FN") quit	
	do DBSDEF
	quit


DBSDEF	// DBS output defaults

	type public String FN,density
	type public Number NI
	type String LAB,DTYPE,DENSITY,HDR,RM()
	type Number RSIZ,BSIZ,COMPACT

	if FN.isNull() quit 

	type RecordUTBLTAPEFMT tapefmt=Db.getRecord("UTBLTAPEFMT","KEY=:FN")

	// Default record size
	set RSIZ=tapefmt.rsiz

	// Default block size
	set BSIZ=tapefmt.bsiz

	// Default for label (L or U)
	set LAB=tapefmt.lab

	// Default for data type (A or E)
	set DTYPE=tapefmt.dtype

	// Default for density
	set DENSITY=density
	if 'DENSITY set DENSITY=1600

	// Default for compaction
	set COMPACT=0

	// Header default
	set HDR=tapefmt.header

	set RM(1)=RSIZ_"|"_(NI+1),RM(2)=BSIZ_"|"_(NI+2)
	set RM(3)=LAB_"|"_(NI+3),RM(4)=DTYPE_"|"_(NI+4)
	set RM(5)=DENSITY_"|"_(NI+5),RM(6)=HDR_"|"_(NI+6)
	quit 


	//----------------------------------------------------------------------
TESTOPEN(FILE)	// See if can open files
	//-----------------------------------------------------------------------

	type public String RM
	type public Boolean ER

	// Unable to open file ~p1
	if '$$FILE^%ZOPEN(FILE,"READ",0) set ER=1,RM=$$^MSG(2799,FILE)
	close FILE

	quit 


	//----------------------------------------------------------------------
DIR	// Display directory
	//----------------------------------------------------------------------
	type public String FROMDIR,X
	type String XX,Z

	// DIR ~p~p~p3 *
	set XX="DIR "_FROMDIR_$S(FROMDIR.extract(FROMDIR.length())="]":"",1:":")_(X.translate("?"))_"*"
	write !! use 0 set Z=$$SYS^%ZFUNC(XX)
	write !

	do QUAL
	quit


QUAL	// Added to support RMS file name qualifiers (i.e., /DATE or /USER)
	type public String FILE
	type String IO,QUAL

	set IO=FILE.piece("/",1),QUAL=FILE.piece("/",2)
	do RMSQUAL^SCAIO(QUAL)

	set FILE=IO
	quit


	//----------------------------------------------------------------------
PDCHK	// If no padding characters defined, use space
	//----------------------------------------------------------------------
	type public String X
	type String PDCHK

	if X.isNull() set X=" ",PDCHK=" "
	quit 
 #OPTION ResultClass ON
Public String vSIG()	quit "60359^50591^Lakshmi Giridharan^19377"	// Signature - LTD^TIME^USER^SIZE
