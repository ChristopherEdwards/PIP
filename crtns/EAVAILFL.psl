EAVAILFL(RecordEVENTSAVAIL eventsavail, String vpar, Boolean vparNorm) // EVENTSAVAIL - Events that are available on the system Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = eventsavail.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(eventsavail,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(eventsavail,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EVENTID").exists() do vkchged quit             // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EVENTSAVAIL",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EVENTSAVAIL","EVENTID = :eventsavail.eventid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EVENTID

	type RecordEVENTSAVAIL eventsavail = Db.getRecord("EVENTSAVAIL","EVENTID=:EVENTID")
	if (%ProcessMode = 2) do {
		do eventsavail.setMode(2)

		do EAVAILFL(eventsavail,vpar)
	}
	else  do VINDEX(eventsavail)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEVENTSAVAIL eventsavail

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EVENTSAVAIL","EVENTID = :eventsavail.eventid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(eventsavail)) S ^EVENTINF("AVAIL",vobj(eventsavail,-3))=vobj(eventsavail)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.eventsavail) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEVENTSAVAIL eventsavail

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.eventsavail)              // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^EVENTINF("AVAIL",vobj(eventsavail,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordEVENTSAVAIL eventsavail

	// Type local variables for access keys for defaults
	type public String EVENTID

	if eventsavail.isandbetween.isNull() set eventsavail.isandbetween = 0 // isandbetween
	if eventsavail.isonceperday.isNull() set eventsavail.isonceperday = 0 // isonceperday
	if eventsavail.isonlyonce.isNull() set eventsavail.isonlyonce = 0 // isonlyonce
	if eventsavail.istohistory.isNull() set eventsavail.istohistory = 0 // istohistory
	quit


vreqn // Validate required data items

	type public RecordEVENTSAVAIL eventsavail

	if eventsavail.isandbetween.isNull() do vreqerr("ISANDBETWEEN") quit
	if eventsavail.isonceperday.isNull() do vreqerr("ISONCEPERDAY") quit
	if eventsavail.isonlyonce.isNull() do vreqerr("ISONLYONCE") quit
	if eventsavail.istohistory.isNull() do vreqerr("ISTOHISTORY") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEVENTSAVAIL eventsavail

	if eventsavail.eventid.isNull() do vreqerr("EVENTID") quit

		if vx("ISANDBETWEEN").exists(),eventsavail.isandbetween.isNull() do vreqerr("ISANDBETWEEN") quit
		if vx("ISONCEPERDAY").exists(),eventsavail.isonceperday.isNull() do vreqerr("ISONCEPERDAY") quit
		if vx("ISONLYONCE").exists(),eventsavail.isonlyonce.isNull() do vreqerr("ISONLYONCE") quit
		if vx("ISTOHISTORY").exists(),eventsavail.istohistory.isNull() do vreqerr("ISTOHISTORY") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EVENTSAVAIL","MSG",1767,"EVENTSAVAIL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordEVENTSAVAIL eventsavail
	if 'eventsavail.entitytestid.isNull() set vfkey("^EVENTINF("_"""TESTS"""_","_""""_eventsavail.entitytestid_""""_")")="EVENTSAVAIL(ENTITYTESTID) -> EVENTTESTS"
	if 'eventsavail.systemtestid.isNull() set vfkey("^EVENTINF("_"""TESTS"""_","_""""_eventsavail.systemtestid_""""_")")="EVENTSAVAIL(SYSTEMTESTID) -> EVENTTESTS"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordEVENTSAVAIL eventsavail
	type public Number %O
	type String vERRMSG

	if 'eventsavail.entitytestid.isNull() if 'Db.isDefined("EVENTTESTS",":eventsavail.entitytestid") set vERRMSG = $$^MSG(8563,"EVENTSAVAIL(ENTITYTESTID) -> EVENTTESTS") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'eventsavail.systemtestid.isNull() if 'Db.isDefined("EVENTTESTS",":eventsavail.systemtestid") set vERRMSG = $$^MSG(8563,"EVENTSAVAIL(SYSTEMTESTID) -> EVENTTESTS") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEVENTSAVAIL eventsavail

	set X = eventsavail.eventid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EVENTID", vRM) quit
	set X = eventsavail.attime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("ATTIME", vRM) quit
	if eventsavail.description.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESCRIPTION", vRM) quit
	if eventsavail.entity.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ENTITY", vRM) quit
	set X = eventsavail.entitytestid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ENTITYTESTID", vRM) quit
	if eventsavail.eventtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("EVENTTYPE", vRM) quit
	set X = eventsavail.expiredate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPIREDATE", vRM) quit
	set X = eventsavail.frequency if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[EVENTSAVAIL]FREQUENCY",0) if 'vRM.get().isNull() do vdderr("FREQUENCY", vRM) quit
	set X = eventsavail.interval if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("INTERVAL", vRM) quit
	if '("01"[eventsavail.ISANDBETWEEN) set vRM=$$^MSG(742,"L") do vdderr("ISANDBETWEEN", vRM) quit
	if '("01"[eventsavail.ISONCEPERDAY) set vRM=$$^MSG(742,"L") do vdderr("ISONCEPERDAY", vRM) quit
	if '("01"[eventsavail.ISONLYONCE) set vRM=$$^MSG(742,"L") do vdderr("ISONLYONCE", vRM) quit
	if '("01"[eventsavail.ISTOHISTORY) set vRM=$$^MSG(742,"L") do vdderr("ISTOHISTORY", vRM) quit
	if eventsavail.processor.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PROCESSOR", vRM) quit
	set X = eventsavail.systemtestid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SYSTEMTESTID", vRM) quit
	set X = eventsavail.totime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TOTIME", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EVENTSAVAIL","MSG",979,"EVENTSAVAIL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordEVENTSAVAIL eventsavail) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("ENTITY").exists() do vi1(.eventsavail)
	}
	do vi1(.eventsavail)

	quit
	

vi1(RecordEVENTSAVAIL eventsavail) // Maintain ENTITYAVAIL index entries (Available Events by Entity)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = eventsavail.entity
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eventsavail.eventid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^EVENTINF("AVAIL",vobj(eventsavail,-3)))#2,'$D(^EVENTIDX("AVAIL",v2,v3)) do vidxerr("ENTITYAVAIL")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^EVENTIDX("AVAIL",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ENTITY").exists() set v2=vx("ENTITY").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^EVENTIDX("AVAIL",v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("EVENTSAVAIL")

	while ds.next() do {
		type RecordEVENTSAVAIL eventsavail=ds.getRecord("EVENTSAVAIL")
		if vlist.contains("VINDEX") do VINDEX(.eventsavail) quit
		if vlist.contains("ENTITYAVAIL") do vi1(.eventsavail)
	}

	quit


public VIDXBLD1(RecordEVENTSAVAIL eventsavail, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.eventsavail) quit
	if vlist.contains("ENTITYAVAIL") do vi1(.eventsavail)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("EVENTSAVAIL","MSG",1225,"EVENTSAVAIL."_di)

	quit


vkchged // Access key changed

	type public RecordEVENTSAVAIL eventsavail

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("EVENTID")
	set voldkey = vux.piece("|",1),vobj(eventsavail,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(eventsavail,-3) = vnewkey // Copy new keys into object
	type RecordEVENTSAVAIL vnewrec = eventsavail.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EVENTSAVAIL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(eventsavail,-3) = vux.piece("|",1)            // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordEVENTSAVAIL eventsavail
	type public String vpar

	do Db.delete("EVENTACTIONS","EVENTID=:eventsavail.eventid",vpar) // Cascade delete

	do Db.delete("EVENTS","EVENTID=:eventsavail.eventid",vpar) // Cascade delete

	do Db.delete("EVENTSYSARGV","EVENTID=:eventsavail.eventid",vpar) // Cascade delete

	quit

VIDXPGM()	quit "EAVAILFL"	// Location of index program

