LNAPCEFL(RecordLNAPCHGE lnapchge, String vpar, Boolean vparNorm) // LNAPCHGE - Analysis Payment Change Batch - Escrow Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (39)             11/22/2003
	// Journal File Definition (1)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnapchge.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnapchge,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnapchge,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("APCND").exists()!vx("CID").exists()!vx("ECID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNAPCHGE",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNAPCHGE","APCND = :lnapchge.apcnd and CID = :lnapchge.cid and ECID = :lnapchge.ecid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String APCND
	type public String CID
	type public String ECID

	type RecordLNAPCHGE lnapchge = Db.getRecord("LNAPCHGE","APCND=:APCND,CID=:CID,ECID=:ECID")
	if (%ProcessMode = 2) do {
		do lnapchge.setMode(2)

		do LNAPCEFL(lnapchge,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNAPCHGE lnapchge

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNAPCHGE","APCND = :lnapchge.apcnd and CID = :lnapchge.cid and ECID = :lnapchge.ecid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnapchge))  S ^PCBD("APCND",vobj(lnapchge,-3),vobj(lnapchge,-4),vobj(lnapchge,-5))=vobj(lnapchge)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnapchge)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNAPCHGE lnapchge

	if vpar["/JOURNAL/" do VJOURNAL(.lnapchge)             // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^PCBD("APCND",vobj(lnapchge,-3),vobj(lnapchge,-4),vobj(lnapchge,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordLNAPCHGE lnapchge

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNAPCHGE lnapchge

	if lnapchge.apcnd.isNull() do vreqerr("APCND") quit
	if lnapchge.cid.isNull() do vreqerr("CID") quit
	if lnapchge.ecid.isNull() do vreqerr("ECID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAPCHGE","MSG",1767,"LNAPCHGE."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNAPCHGE lnapchge
	if 'lnapchge.cid.isNull() set vfkey("^PCBD("_"""APCND"""_","_""""_lnapchge.apcnd_""""_","_""""_lnapchge.cid_""""_")")="LNAPCHGE(APCND,CID) -> LNAPCHG"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNAPCHGE lnapchge
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LNAPCHG",":lnapchge.apcnd,:lnapchge.cid") set vERRMSG = $$^MSG(8563,"LNAPCHGE(APCND,CID) -> LNAPCHG") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNAPCHGE lnapchge

	set X = lnapchge.apcnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("APCND", vRM) quit
	set X = lnapchge.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = lnapchge.ecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("ECID", vRM) quit
	set X = lnapchge.abal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.ABAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.acoll if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("ACOLL", vRM) quit
	set X = lnapchge.amtb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.AMTB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.amtc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.AMTC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.amtd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.AMTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.amtl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.AMTL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.amts if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.AMTS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.cbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.CBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.clbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.CLBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.cush if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.CUSH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnapchge.ddm.length()>6 set vRM = $$^MSG(1076,6) do vdderr("DDM", vRM) quit
	set X = lnapchge.def if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.DEF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.eaf if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("EAF", vRM) quit
	set X = lnapchge.ebal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.EBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.elap if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ELAP", vRM) quit
	set X = lnapchge.epmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.EPMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnapchge.ept.length()>10 set vRM = $$^MSG(1076,10) do vdderr("EPT", vRM) quit
	set X = lnapchge.ereq if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.EREQ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.lowbala if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.LOWBALA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.odm if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("ODM", vRM) quit
	set X = lnapchge.opmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.OPMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.otr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.OTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.ovg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.OVG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.payid if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("PAYID", vRM) quit
	set X = lnapchge.pdis if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.PDIS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.proper if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PROPER", vRM) quit
	set X = lnapchge.raf if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RAF", vRM) quit
	set X = lnapchge.rbmet if 'X.isNull(),'Db.isDefined("STBLRBMET","X") set vRM = $$^MSG(1485,X) do vdderr("RBMET", vRM) quit
	set X = lnapchge.rdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RDT", vRM) quit
	set X = lnapchge.remtot if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.REMTOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.rnda if 'X.isNull() set vRM = $$VAL^DBSVER("$",4,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.RNDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnapchge.sdm.length()>6 set vRM = $$^MSG(1076,6) do vdderr("SDM", vRM) quit
	set X = lnapchge.shtg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.SHTG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.str if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.STR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.tdis if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAPCHGE.TDIS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnapchge.trdd if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("TRDD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAPCHGE","MSG",979,"LNAPCHGE."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNAPCHGE lnapchge)	//LNAPCHGE Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.lnapchge)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj1(.lnapchge)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNAPCHGE lnapchge)	// HIST_U  Table HIST  Update Journal File

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnapchge.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnapchge.cid_","_lnapchge.cid_","_lnapchge.ecid,"LNAPCHGE",vdi,vold,vnew,,,vfmtable)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNAPCHGE lnapchge

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("APCND").exists() set vux("APCND") = vx("APCND")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ECID").exists() set vux("ECID") = vx("ECID")
	do vkey(1) set voldkey = lnapchge.apcnd_","_lnapchge.cid_","_lnapchge.ecid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnapchge.apcnd_","_lnapchge.cid_","_lnapchge.ecid // Copy new keys into object
	type RecordLNAPCHGE vnewrec = lnapchge.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNAPCHGE",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNAPCHGE lnapchge

	if vux("APCND").exists() set lnapchge.apcnd = vux("APCND").piece("|",i)
	if vux("CID").exists() set lnapchge.cid = vux("CID").piece("|",i)
	if vux("ECID").exists() set lnapchge.ecid = vux("ECID").piece("|",i)
	quit
