EVENTT1		/*
	ORIG: MATTSON - 05/15/2000
	DESC: Events 1-99

	This procedure definition contains entity tests for transaction
	events.  The entity tests get executed by the Transaction Event
	Monitor (EVENTMON) to determine if a transaction should trigger
	an action for an event in which the customer has subscribed.

	An entity test returns a 0 if the entity test is false; a 1 if the
	entity test is true.


	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------
	
	08/22/07 - NATRAJAH - CR 28578
		   Modified TEST002 section to change the condition check to
		   negate the existing condition for arg(1), since the if block
		   need to execute only when the check number or range is 
		   defined in arg(1).
		   
	01/22/07 - RussellDS - 24902 / 24974
		   Replaced use of variable true with isTrue to avoid conflict
		   with new PSL intrinsic variable

	01/03/07 - NATRAJAH - 24542
		   Retrofit from ICGWeb01_Dev_Profile view:
		   03/21/2006 Ed Sigda - CR 20082
		   Modified section TEST002 to fix a issue with the transaction 
		   amount test when a range is not provided.  v2 should only be
		   defined if a range exists.

	10/04/2000 Erik Scheetz - 41848
		   Modified code to support EVENTS schema changes.

	*/

	quit


	//--------------------------------------------------------------------
TEST000(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	//Always FALSE
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	Account history object	/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R

	This test is always FALSE.  This test provides an easy mechanism to
	stop all notifications of an event without the need to modify each
	individual customer/account event
	*/
	//--------------------------------------------------------------------

	quit 0


	//--------------------------------------------------------------------
TEST001(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	//Always TRUE
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	Account history object	/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R

	This test is always TRUE.  This test should be used if the event
	is always triggered (i.e., there is no qualifying criteria).
	*/
	//--------------------------------------------------------------------

	quit 1


	//--------------------------------------------------------------------
TEST002(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	//Select Transaction
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	Account history object	/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R

			The selection criteria that determines whether the
			event should be triggered.

			Note that the test will be true only if ALL of the
			criteria specified in the arguments are true.  For
			example, if both a check number and a transaction
			amount are specified, the test will only be true
			if the check number AND transaction amount match.

			arg(1) = Check number or range

				 The check number or range of checks to match
				 against the transaction.  A range is
				 specified by a hypen (i.e., 120-250).

			arg(2) = Tran code(s)

				 The tran code(s) to match against the
				 transaction.  Multiple tran codes may
				 be specified by a comma-separated list
				 (i.e., DW,DWATM,SW,SWATM) and/or
				 using wildcards (i.e. DW*,SW*).

			arg(3) = Transaction amount or range

				 The transaction amount or range of amounts
				 to match against the transaction.  A range
				 is specified by a hypen (i.e., 1250-2000).

			arg(4) = Minmum/maximum balance threshold

				 The minimum and maximum balance thresholds
				 that, if crossed, will trigger an event.
				 For example, if a withdrawal caused the
				 balance to fall below the minimum threshold
				 or a deposit caused the balance to rise
				 above the maximum threshold, an event would 
				 be triggered.  The threshold is specified
				 by a hash (i.e., 500#2000).

			arg(5) = Transaction Source

				
	*/
	//--------------------------------------------------------------------


	type Boolean isTrue
	set isTrue=1

	// Argument 1
	// Check number list or range.

	if 'arg(1).get().isNull() do {  if 'isTrue quit 0
		type Number i,v1,v2,val
		type String x

	   	for i=1:1 quit:arg(1).piece(",",i)=""  do {  quit:isTrue=1
			set x=arg(1).piece(",",i)

			if x["-" do {
				set v1=x.piece("-",1)
				set v2=x.piece("-",2)
				if v2="" set v2=v1
				}
			if v1.get().isNull() set (v1,v2)=x

			set val=$$FIELD^UTSO(hist.tso,"CK")
			set isTrue=0
			if val="" quit
			if val<v1 quit
			if val>v2  quit
			set isTrue=1
			}
		}

	// Argument 2
	// Transaction code or list

	if 'arg(2).get().isNull() do {  if 'isTrue quit 0
		type Number i
		type String list,val,x

		set list=","
		for i=1:1 quit:arg(2).piece(",",i)=""  do {
			set x=arg(2).piece(",",i)
			if x["*" set x=$$TRN^UTLASTK(x)
			set list=list_x_","
			}

		set val=hist.etc
		if list[(","_val_",") quit
		set isTrue=0
		}


	// Argument 3
	// Transaction amount or range

	if 'arg(3).get().isNull() do {  if 'isTrue quit 0
		type Number i,v1,v2,val
		type String x

		for i=1:1 quit:arg(3).piece(",",i)=""  do {  quit:isTrue=1
			set x=arg(3).piece(",",i)

			if x["-" do {
				set v1=x.piece("-",1)
				set v2=x.piece("-",2)
				if v1="" set v1=0
 				}

			else  do {
				set v1=x
				set v2=""
				}

			set val=+hist.tamt
			if val<v1 set isTrue=0 quit
			if v2'="",val>v2 set isTrue=0 quit
			set isTrue=1
			}
		}

	// Argument 4
	// Minimum/Maximum balance threshold

	if 'arg(4).get().isNull() do {  if 'isTrue quit 0
		type Number endbal,max,min,startbal

		set min=arg(4).piece("#",1)
		set max=arg(4).piece("#",2)

		set endbal=hist.endbal
		if hist.itc1=0 set startbal=endbal+hist.prin
		else  set startbal=endbal-hist.prin

		if min,endbal<min,startbal'<min quit
		if max,endbal>max,startbal'>max quit
		set isTrue=0
		}

	quit 1


	//--------------------------------------------------------------------
TEST003(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	// Exceeds ATM rebate count
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	History object		/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R

			arg(1) = Tran code(s)

				 The tran code(s) to match against the
				 transaction.  Multiple tran codes may
				 be specified by a comma-separated list
				 (i.e., DW,DWATM,SW,SWATM) and/or
				 using wildcards (i.e. DW*,SW*).

			arg(2) = Number of ATM transactions

				 The number of ATM transactions used
				 during the account cycle period.  The
				 account cycle period is one calander
				 month.
	*/
	//--------------------------------------------------------------------

	new test
	set test(2)=arg(1)
	if '$$TEST002(.event,.hist,.cifh,.test) quit 0
 
	new EVENTSEQ
	set EVENTSEQ=event.eventseq

	new eventdb
	Type RecordEVENTDB eventdb
 
	if 'Db.isDefined("EVENTDB","EVENTSEQ") do {
		set eventdb=Class.new("RecordEVENTDB")
		set eventdb.eventseq=EVENTSEQ
		set eventdb.tld=%CurrentDate
		set eventdb.count=0
		}
	else  set eventdb=Db.getRecord("EVENTDB","EVENTSEQ")
 
	// increment atm count by 1
	if $$EOMJD^SCADAT(eventdb.tld,1)<%CurrentDate set eventdb.count=1
	else  set eventdb.count=eventdb.count+1

	set eventdb.tld=%CurrentDate
	do eventdb.bypassSave()
 
	if eventdb.count>arg(2) quit 1
	
	quit 0


	//--------------------------------------------------------------------
TEST004(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	// Notify when Debit Card is used more than X times in one day
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	History object		/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R

			arg(1) = Tran code(s)

				 The tran code(s) to match against the
				 transaction.  Multiple tran codes may
				 be specified by a comma-separated list
				 (i.e., DW,DWATM,SW,SWATM) and/or
				 using wildcards (i.e. DW*,SW*).

			arg(2) = Number of Debit Card transactions

				 The number of Debit Card transactions 
				 used during one day.
	*/
	//--------------------------------------------------------------------

	new test
	set test(2)=arg(1)
	if '$$TEST002(.event,.hist,.cifh,.test) quit 0
 
	new EVENTSEQ
	set EVENTSEQ=event.eventseq

	new eventdb
	Type RecordEVENTDB eventdb
 
	if 'Db.isDefined("EVENTDB","EVENTSEQ") do {
		set eventdb=Class.new("RecordEVENTDB")
		set eventdb.eventseq=EVENTSEQ
		set eventdb.count=0
		set eventdb.tld=%CurrentDate
		}
	else  set eventdb=Db.getRecord("EVENTDB","EVENTSEQ")
 
	// increment debit card count by 1
	if eventdb.tld'=%CurrentDate set eventdb.count=1
	else  set eventdb.count=eventdb.count+1

	set eventdb.tld=%CurrentDate
	do eventdb.bypassSave()
 
	if eventdb.count>arg(2) quit 1
	
 	quit 0


	//--------------------------------------------------------------------
TEST005(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	// Notify when items are returned
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	History object		/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R
	*/
	//--------------------------------------------------------------------

	new CID,DATE,rs

	set CID=ENTITYID
	set DATE=%SystemDate-1

	Type ResultSet rs
	set rs=Db.select("BRCD,UID,TSEQ","RET","CID=:CID AND TJD=:DATE AND RET=1")

	if rs.isEmpty() quit 0
	quit 1


	//--------------------------------------------------------------------
TEST006(RecordEVENTS event,RecordHIST hist,RecordCIFH cifh,arg)	//
	//--------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . event	Event object		/TYP=T/REQ/MECH=REFARR:R

	     . hist	History object		/TYP=T/REQ/MECH=REFARR:R

	     . cifh	Customer history object	/TYP=T/REQ/MECH=REFARR:R

	     . arg	Argument list		/TYP=T/REQ/MECH=REFARR:R
	*/
	//--------------------------------------------------------------------

	new CID

	set CID=ENTITYID

	new acn,cuvar
	Type RecordACN acn=Db.getRecord("ACN","CID")

	if acn.mdt<%SystemDate do {  quit 0
		set event.expiredate=%CurrentDate
		do event.bypassSave()
		}

	Type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	if acn.mdt=(%CurrentDate+cuvar.mdo) quit 1
	quit 0
 #OPTION ResultClass ON
Public String vSIG()	quit "60865^29276^Hari Natrajan^10819"	// Signature - LTD^TIME^USER^SIZE
