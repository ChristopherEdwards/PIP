BCHDREGD //Batch BCHDEPREGD - Regulation D Processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHDEPREGD Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHDEPREGD",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHDEPREGD","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHDEPREGD","*","",CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	type public Boolean ER
		
	type String MMDA4
	type RecordDEP dep=Db.getRecord("DEP","CID")

	if dep.stat=4 quit
	
	// Define variables
	set MMDA4=dep.mmda4

	do CALCPRIOR(.dep)

	do SDIRND(%SystemDate,.dep,MMDA4)
	
	// MMDA Automatic Conversion
	if dep.mmdacnv&(dep.pinv'<dep.mmdaptc) do MMDACONV(.dep) 
	
	// Regulation D Processing 	
	if ER.get() do EXC(dep.cid,dep.bal,$$^MSG(3974)) quit
	
	quit
	
MMDACONV(RecordDEP dep)		// Deposit Record Object
	
	// MMDA Automatic Conversion
	
	type public String DFT(),par(),RM
	type public boolean ER
	
	type Number ACCNO, ACTYP, BRCD, CUSTNO, MMDAGRP, MMDATYP, TAMT
	type String CLTRN, CRCD, CRTRN, INPUT, PPB, RETURN, STR, TCMT, TSO, TRNACNO	
		
	set CUSTNO=dep.acn
	set ACCNO=dep.cid
	set BRCD=dep.boo
	set CRCD=dep.crcd
	set MMDATYP=dep.mmdacnvtyp
			
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","MMDATYP",1)
	set MMDAGRP=prodctl.grp
	
	set CRTRN=prodctl.crddafrmmda
	if (CRTRN.isNull()) set CRTRN=prodctl.crtrgp
	
	type RecordUTBLREL2 utblrel2=Db.getRecord("UTBLREL2","GRP=:prodctl.grp, KEY=:dep.acnrelc",1)
	
	// MMDA Relationship Code does not exist for Transaction Account
	if 'utblrel2.getMode() do EXC(ACCNO,dep.bal,$$^MSG(5726)) quit	
	
	// Create a new transaction account
	
	type RecordRELCIF relcif=Db.getRecord("RELCIF","CUSTNO,ACCNO",1)
	
	set INPUT="DEP.ACNRELC="_dep.acnrelc_",DEP.ACN="_dep.acn_",RELCIF1.ROLE="_relcif.role_",RELCIF1.ACN="_CUSTNO		
		
	set STR=$$^MRPC043(.RETURN,1,MMDATYP,CRCD,INPUT,CUSTNO,BRCD)
	
	if STR.isNull() set TRNACNO = RETURN.extract(2,RETURN.length()-2)
	else  set ER=1 quit
	
	// Post the transaction
	set ACTYP=dep.type
	type RecordPRODCTL prodctl1=Db.getRecord("PRODCTL","ACTYP",1)
	set CLTRN=prodctl1.drmmdaclose
	
	// MMDA Closeout Transaction Code not Defined
	if (CLTRN.isNull()) do EXC(ACCNO,dep.bal,$$^MSG(5727)) quit
		
	// Calculate MMDA Closeout amount
	// Set the variables for Batch Pre-Processor routine
	type RecordTRN trn=Db.getRecord("TRN","CLTRN",1)
	type RecordACN acn=Db.getRecord("ACN","ACCNO",1)
		
	if 'trn.ppb.isNull() do EXECPPB(.acn, .trn, trn.ppb)
			
	/* 
	   DFT("AMT") is the closeout amount calculated by
	   Batch Pre-Processor routine of the transaction 
	   code.
	*/   
	set TAMT=DFT("AMT")
	
	// MMDA Automatic Conversion to ~p1
	set TCMT=$$^MSG(5728,TRNACNO)  
	
	set TSO=""

	type TranSet ts=Class.new("TranSet")
	do CRTTX(.ts,CLTRN,TAMT,ACCNO,TSO,TCMT,CRCD)
	
	// MMDA Automatic Conversion from ~p1
	set TCMT=$$^MSG(5729,ACCNO) 
	
	set TSO=""
	
	do CRTTX(.ts,CRTRN,TAMT,TRNACNO,TSO,TCMT,CRCD)
	
	set par("OPTION")=2	// Process transactions; update database
	set par("IPMODE")=3	// System generated
	do ts.postTSet(%SystemDate,BRCD,.par) 
	
	// Check status of transaction. Log all errors/exceptions in DAYENDEXC
	if ts.status["1" do EXC(ACCNO,dep.bal,RM.get()) quit
	
	// Insert the record to MMDATODDA table
	type RecordMMDATODDA mmdatodda=Db.getRecord("MMDATODDA","%SystemDate,BRCD,ACCNO",1)
	
	set mmdatodda.mmdatype=ACTYP
	set mmdatodda.ddacid=TRNACNO
	set mmdatodda.ddatype=MMDATYP
	set mmdatodda.mmdatframt=TAMT
	
	do mmdatodda.save()
	
	quit
	
EXECPPB(RecordACN acn, RecordTRN trn, PPB) // Execute Batch Pre-Processor Program

	#ACCEPT DATE=01/24/07;PGM=VANITHAK;CR=27419
	xecute PPB
	
	quit

CRTTX(TranSet ts,	// Transaction set object
	String ETC,	// External Transaction Code
	Number TAMT,	// Transaction Amount
	Number CID,	// Account Number
	String TSO,	// Transaction Source
	String TCMT,	// Transaction Comment
	String CRCD)	// Currency Code

	// Create TTX Entry 
 
	type Number x
	type String ITC	
		
	type RecordTRN trn=Db.getRecord("TRN","ETC")
	set ITC=trn.itc 
	
	type RecordTTX ttx=Class.new("RecordTTX")
 
	set ttx.cid=CID
	set ttx.itc=ITC
	set ttx.etc=ETC
	set ttx.tamt=TAMT
	set ttx.efd=%SystemDate
	set ttx.tlo=%UserStation
	set ttx.tso=TSO
	set ttx.tcmt=TCMT
	set ttx.crcd=CRCD
 
	set x=ts.copyTran(ttx)
 
	quit	
	
CALCPRIOR(RecordDEP dep)	//Reset prior period buckets
	
 	set dep.mmdac12=dep.mmdac11
	set dep.mmdac11=dep.mmdac10
	set dep.mmdac10=dep.mmdac9
	set dep.mmdac9=dep.mmdac8
	set dep.mmdac8=dep.mmdac7
	set dep.mmdac7=dep.mmdac6
	set dep.mmdac6=dep.mmdac5
	set dep.mmdac5=dep.mmdac4
	set dep.mmdac4=dep.mmdac3
        set dep.mmdac3=dep.mmdac2
        set dep.mmdac2=dep.mmdac1
        set dep.mmdac1=dep.mmda1
	set dep.mmda1=0
	set dep.mmdat12=dep.mmdat11
	set dep.mmdat11=dep.mmdat10
	set dep.mmdat10=dep.mmdat9
	set dep.mmdat9=dep.mmdat8
	set dep.mmdat8=dep.mmdat7
	set dep.mmdat7=dep.mmdat6
	set dep.mmdat6=dep.mmdat5
	set dep.mmdat5=dep.mmdat4
	set dep.mmdat4=dep.mmdat3
	set dep.mmdat3=dep.mmdat2
	set dep.mmdat2=dep.mmdat1
	set dep.mmdat1=dep.mmda2
	set dep.mmda2=0

	quit
	
SDIRND(Date EFD,	// Effective Date
	RecordDEP dep,	// Deposit Record Object
	String MMDA4)	// MMDA Cycle Frequency

	// Calculate next regulation change date - set new Dayend and account file

	type public Boolean ER
	type Date NJD
	
	set NJD=$$NJD^UFRE(EFD,MMDA4) quit:ER	
	set dep.mmda3=NJD
	do dep.bypassSave()

	quit
	
EXC(Number CID,		// Account Number
	Number BAL,	// Account Balance
	String RM)	// Error Message
	
	// Log error in exception file
	
	type public Number %ZTSEQ 
	type public String ET
	
	type Number BALANCE=0
	
	if ET.get().isNull() set ET = RM
	if 'CID.get().isNull() set BALANCE = +BAL.get()

	do LOG^UTLEXC(%RoutineName,"*",,CID.get(),%ZTSEQ.get(),ET.get(),BALANCE)
	kill ET,%ZTSEQ

	quit		

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Boolean ER	
	type public Number BRCD
	type public String RM,UCLS

	do SOURCE^BCHSOURC("BOFF","REGD",.%UserID,.BRCD,.UCLS)
	if ER set %BatchExit=1
	// Regulation D teller not defined
	if $G(BRCD)="",$G(%UserID)="" set ER=1,RM=$$^MSG("3974") quit
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("DISTINCT CID","DEP","DEP.MMDA3=:TJD AND DEP.REGD='5'")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Date TPD
	type public Number BRCD
	type public String UCLS

	do SOURCE^BCHSOURC("BOFF","REGD",.%UserID,.BRCD,.UCLS)
	set TPD=%SystemDate

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
