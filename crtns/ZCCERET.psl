ZCCERET		/*
	 ORIG: Prabhu Reginald
	 DESC: CCE Outgoing Return File

	---- Comments --------------------------------------------------------
	----------------------------------------------------------------------

	08/22/2007 - Prabhu Reginald CR 28742
		Modified TSO field variable names to check for 300 limit.
		Removed extra char from batch trailer.
		Removed Db.getRecord() for ACN to get ProdType which caused
		RECNOFL error and skipped sequences.

	07/25/07 - Prabhu Reginald
		Replaced ZETCRSN with ZPRETRES for return reason

	07/13/07 - Prabhu Reginald
		Added ZSECFOL field in the extract. Changed ZBNAM to text
		and ZAA to numeric. Modified the TSO variables to be
		numeric or alphanumeric

	07/11/07 - Prabhu Reginald CR28154
		Modified the DETAIL section to remove #UNDEFINED errors 
	*/
	
	do INIT
	quit

INIT	
	/* 
	Initialize Format Variables
   	Called from RETOUT to initialize RECSIZ variable
	*/
	type public Number RECSIZ
	set RECSIZ = 500
	quit 
	
HEADER(IO io)	
	// No File header in Return File so use one Batch header instead
	type String OUTREC,CRCD
	type public Number SEQNO,TOTAMT,TRUNTOT
	type Number DETCNT
	set SEQNO = 1
	set DETCNT = 0
	set (TOTAMT,TRUNTOT) = 0
	if %SystemCurrency = "USD" set CRCD = 9
	else  if %SystemCurrency = "MXN" set CRCD = 1
	set OUTREC = "01"_SEQNO.zero(7)_"134E01"_CRCD_%SystemDate.toString("DD")_"00001"
	set OUTREC = OUTREC_%SystemDate.toString("YEARMMDD")_"".justify(9)_"0"_"".justify(302)

	quit OUTREC
	
DETAIL(IO io)	
	/* 
	   Format Return Detail Records
	   Called from RETOUT which passes in the following variables
	      
	   REC = Exception file record keyed on Date, and User ID.
	   VAL("CID") = Account number
	   VAL("ITC") = Internal transaction code
	   VAL("ETC") = External transaction code
	   VAL("TAMT")= Transaction amount
	   VAL("EFD") = Effective date
	   VAL("TSO") = Source of funds
	   VAL("TCMT")= Teller comment
	   VAL("CRCD")= Currency code
	   UTSO() = This array contains customer specific values parsed
	     into the TSO field of the exception file when
	     the Inclearing file was originally loaded.
	   RET() = This array contains the reject reasons.	
	*/
	
	type public Number DETCNT,RECSIZ,SEQNO,TOTAMT,TRUNTOT
	type public Date DATE
	type public String REC,RET(),VAL(),XCID,XTELLER,ZPRETRES
	type Number XENDBAL,XTAMT
	type String ETLO,OUTREC,XBEN,XBRCD,XCID1,ZETCRSN,ZPRODTYP,XTELLER1,XTSEQ
	type String CK,ZAA,ZAB,ZBCURP,ZBNAM,ZBRFC,ZCP,ZDEP,ZDTYP,ZENSEQ,ZENTRY,ZEXD
	type String ZEXIT,ZEXP,ZEXSEQ,ZPHLD,ZPMD,ZPTJD,ZSC,ZSECFOL,ZTAMT,ZTRN,ZTRUN
	
	set SEQNO = SEQNO.get() + 1
	set DETCNT = DETCNT.get() + 1
	set XTELLER1 = XTELLER.get().justify(12,,0)
	set XCID1 = XCID.get().justify(13,,"0",1)
	set XBRCD = REC.piece($C(9),2)
	set XTSEQ = REC.piece($C(9),1)
	
	set CK = UTSO("CK").get().justify(10,,"0",1)
	set ZAA = UTSO("ZAA").get().justify(2,,"0",1)
	set ZAB = UTSO("ZAB").get().justify(3,,"0",1)
	set ZBCURP = UTSO("ZCRP").get().justify(18,-1," ",1)
	set ZBNAM = UTSO("ZNM").get().justify(40,-1," ",1)
	set ZBRFC = UTSO("ZRFC").get().justify(13,," ",1)
	set ZCP = UTSO("ZCP").get().justify(3,,"0",1)
	set ZDEP = UTSO("ZDEP").get().justify(20,,"0",1)
	set ZDTYP = UTSO("ZTYP".get()).justify(2,,"0",1)
	set ZENSEQ = UTSO("ZESQ").get().justify(4,,"0",1)
	set ZENTRY = UTSO("ZENT").get().justify(7,," ",1)
	set ZEXD = UTSO("ZEXD").get().justify(1,,,1)
	set ZEXIT = UTSO("ZEXIT").get().justify(7,," ",1)
	set ZEXP = UTSO("ZEXP").get().justify(2,,"0",1)
	set ZEXSEQ = UTSO("ZEXSQ").get().justify(4,,"0",1)
	set ZPHLD = UTSO("ZPLD").get().justify(8,," ",1)
	set ZPMD = UTSO("ZPMD").get().justify(1,,,1)
	set ZPTJD = UTSO("ZTJD").get().justify(8,,,1)
	set ZSC = UTSO("ZSC").get().justify(3,,"0",1)
	set ZTRN = UTSO("ZTRN").get().justify(2,,"0",1)
	set ZTRUN = UTSO("ZTR").get().justify(1,,0,1)
	set ZSECFOL = UTSO("ZSF").get().justify(12,-1," ",1)

	if ZPRETRES.isNull() {
		type RecordRET ret
		set ret = Db.getRecord("RET","TJD=:DATE,BRCD=:XBRCD,CID=:XCID,UID=:XTELLER,TSEQ=:XTSEQ")
		set ZPRETRES = ret.pretres
	}

	set XTAMT = VAL("TAMT").get()*100
	set TOTAMT = TOTAMT.get() + XTAMT
	set ZTAMT = XTAMT.zero(15)
	
	if ZTRUN = 0 set TRUNTOT = TRUNTOT.get() + 1

	if ZPRETRES.length()>2 set ZPRETRES=ZPRETRES.extract(ZPRETRES.length()-1,ZPRETRES.length())
	else  set ZPRETRES=ZPRETRES.justify(2,,"0",1)
	//type Resultset retfee = Db.select("ETC","UTBLRETFEE","RETFEE=:ZPRETRES AND TYPE=:ZPRODTYP")
	//if retfee.next() set ZETCRSN = retfee.getCol(1).justify(2,,,1)
		
	set OUTREC = "02"_SEQNO.zero(7)_"41"_%SystemDate.toString("YEARMMDD")_ZAB_"134"_ZTAMT_ZENTRY_ZENSEQ
	set OUTREC = OUTREC_ZEXIT_ZEXSEQ_ZTRN_ZCP_XCID1_CK_ZEXD_ZPMD_ZSC_ZPHLD_ZTRUN_ZPRETRES_ZPTJD
	set OUTREC = OUTREC_ZEXP_ZBRFC_ZBCURP_ZDTYP_ZDEP_ZBNAM_ZAA_ZSECFOL_"".justify(120,," ",1)

	quit OUTREC
	
TRAILER(IO io)	
	/* Format Return Trailer Record
	   Combine the Batch trailer and the File Trailer
	*/
	type public Number DETCNT,RECSIZ,SEQNO,TOTAMT,TRUNTOT
	type public String FILCNT,OUTREC
	
	set SEQNO=SEQNO.get() + 1
	set DETCNT=DETCNT.get()
	set OUTREC = "09"_SEQNO.zero(7)_"41"_DETCNT.zero(7)_TOTAMT.zero(18)_TRUNTOT.zero(7)_"".justify(300)_$C(13)
	set OUTREC = OUTREC_"51E41"_DETCNT.zero(7)_"01134000000001"_%SystemDate.toString("YEARMMDD")
	set OUTREC = OUTREC_TOTAMT.zero(18)_TRUNTOT.zero(7)_"".justify(284)
	
	quit OUTREC
	
LOGIT(IO io)	//       Process Log
	
	type public String FILCR,FILCNT,FILDR,IO
	type String M(),LOG
	type Number i

	type ResultSet rs = Db.select("MESSAGE","STBLMSG","MSGID in (5118,5119,5120)")
	set i = 0
	while rs.next() do {
	     set i = i+1
	     set M(i) = rs.getCol("MESSAGE")
	     }
	if 'io.exists() {
		set ER = 0 
		set RM = "Unable to open log file to write"
		do ^UTLERR
		quit
	}
	set LOG=M(1)_FILCR.get()_$C(10)_M(2)_FILDR.get()_$C(10)_M(3)_FILCNT.get()
	do io.write(LOG)
	
	quit 
 #OPTION ResultClass ON
Public String vSIG()	quit "60869^53393^Jeff Walton^5627"	// Signature - LTD^TIME^USER^SIZE
