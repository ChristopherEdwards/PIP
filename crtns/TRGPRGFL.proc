TRGPRGFL(RecordTARGETPURGE targetpurge, String vpar, Boolean vparNorm) // TARGETPURGE - Targeted Customer and Account Purge Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = targetpurge.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(targetpurge,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(targetpurge,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String RTYPE = targetpurge.rtype
	type String RKEY = targetpurge.rkey

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("RTYPE").exists()!vx("RKEY").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("TARGETPURGE",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("TARGETPURGE","RTYPE = :targetpurge.rtype and RKEY = :targetpurge.rkey") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String RTYPE
	type public String RKEY

	type RecordTARGETPURGE targetpurge = Db.getRecord("TARGETPURGE","RTYPE=:RTYPE,RKEY=:RKEY")
	if (%ProcessMode = 2) do {
		do targetpurge.setMode(2)

		do TRGPRGFL(targetpurge,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordTARGETPURGE targetpurge

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("TARGETPURGE","RTYPE = :targetpurge.rtype and RKEY = :targetpurge.rkey") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(targetpurge))  S ^TRGTPRG(vobj(targetpurge,-3),vobj(targetpurge,-4))=vobj(targetpurge)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordTARGETPURGE targetpurge


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^TRGTPRG(vobj(targetpurge,-3),vobj(targetpurge,-4)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordTARGETPURGE targetpurge

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordTARGETPURGE targetpurge

	if targetpurge.rtype.isNull() do vreqerr("RTYPE") quit
	if targetpurge.rkey.isNull() do vreqerr("RKEY") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TARGETPURGE","MSG",1767,"TARGETPURGE."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordTARGETPURGE targetpurge
	/*--Revision History----------------------------------------------------
	03/29/01 - SKLYUTD - 44558
		   Created
			----------------------------------------------------------------------
	*/

	if targetpurge.rtype="CIF" do {
	new XACN,XID,ER
	set XID="",ER=0
	set XACN=targetpurge.rkey
	do Db.update("CIF","TAXID=:XID","ACN=:XACN")
	}
	if targetpurge.rtype="ACN" do {
	new XCID
	set XCID=targetpurge.rkey
	do Db.update("ACN","STAT=4","CID=:XCID")
	}
	quit

vbi1 // Trigger BEFORE_INSERT - BEFORE_INSERT

	type public RecordTARGETPURGE targetpurge
	/*--Revision History----------------------------------------------------
	11/14/01 - SKLYUTD - 48392
		   No changes done.  Need a comment to stop v6.1 code from
		   overlaying PSL.

								10/29/01 - SKLYUTD - 48109
																			Default current SystemDate into CRDATE field.
			----------------------------------------------------------------------
	*/
	if targetpurge.crdate="" set targetpurge.crdate=%SystemDate
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordTARGETPURGE targetpurge

	if targetpurge.rtype.length()>10 set vRM = $$^MSG(1076,10) do vdderr("RTYPE", vRM) quit
	set X = targetpurge.rkey if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RKEY", vRM) quit
	set X = targetpurge.crdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CRDATE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TARGETPURGE","MSG",979,"TARGETPURGE."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordTARGETPURGE targetpurge

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("RTYPE").exists() set vux("RTYPE") = vx("RTYPE")
	if vx("RKEY").exists() set vux("RKEY") = vx("RKEY")
	do vkey(1) set voldkey = targetpurge.rtype_","_targetpurge.rkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = targetpurge.rtype_","_targetpurge.rkey // Copy new keys into object
	type RecordTARGETPURGE vnewrec = targetpurge.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("TARGETPURGE",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordTARGETPURGE targetpurge

	if vux("RTYPE").exists() set targetpurge.rtype = vux("RTYPE").piece("|",i)
	if vux("RKEY").exists() set targetpurge.rkey = vux("RKEY").piece("|",i)
	quit
