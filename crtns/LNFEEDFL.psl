LNFEEDFL(RecordLNFEED lnfeed, String vpar, Boolean vparNorm) // LNFEED - Loan Deferred Fee Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             11/22/2003
	// Trigger Definition (1)                      12/17/2004
	// Journal File Definition (2)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnfeed.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnfeed,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnfeed,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnfeed.cid
	type String FEETYP = lnfeed.feetyp
	type String FEESEQ = lnfeed.feeseq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("FEETYP").exists()!vx("FEESEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNFEED",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNFEED","CID = :lnfeed.cid and FEETYP = :lnfeed.feetyp and FEESEQ = :lnfeed.feeseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String FEETYP
	type public String FEESEQ

	type RecordLNFEED lnfeed = Db.getRecord("LNFEED","CID=:CID,FEETYP=:FEETYP,FEESEQ=:FEESEQ")
	if (%ProcessMode = 2) do {
		do lnfeed.setMode(2)

		do LNFEEDFL(lnfeed,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNFEED lnfeed

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNFEED","CID = :lnfeed.cid and FEETYP = :lnfeed.feetyp and FEESEQ = :lnfeed.feeseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnfeed)) S ^LNFEED(vobj(lnfeed,-3),vobj(lnfeed,-4),vobj(lnfeed,-5))=vobj(lnfeed)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnfeed)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNFEED lnfeed

	if vpar["/JOURNAL/" do VJOURNAL(.lnfeed)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNFEED(vobj(lnfeed,-3),vobj(lnfeed,-4),vobj(lnfeed,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNFEED lnfeed

	if lnfeed.amofa.isNull() do vreqerr("AMOFA") quit
	if lnfeed.amorem.isNull() do vreqerr("AMOREM") quit
	if lnfeed.amtass.isNull() do vreqerr("AMTASS") quit
	if lnfeed.cycld.isNull() do vreqerr("CYCLD") quit
	if lnfeed.defrem.isNull() do vreqerr("DEFREM") quit
	if lnfeed.trnefd.isNull() do vreqerr("TRNEFD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNFEED lnfeed

	if lnfeed.cid.isNull() do vreqerr("CID") quit
	if lnfeed.feetyp.isNull() do vreqerr("FEETYP") quit
	if lnfeed.feeseq.isNull() do vreqerr("FEESEQ") quit

		if vx("AMOFA").exists(),lnfeed.amofa.isNull() do vreqerr("AMOFA") quit
		if vx("AMOREM").exists(),lnfeed.amorem.isNull() do vreqerr("AMOREM") quit
		if vx("AMTASS").exists(),lnfeed.amtass.isNull() do vreqerr("AMTASS") quit
		if vx("CYCLD").exists(),lnfeed.cycld.isNull() do vreqerr("CYCLD") quit
		if vx("DEFREM").exists(),lnfeed.defrem.isNull() do vreqerr("DEFREM") quit
		if vx("TRNEFD").exists(),lnfeed.trnefd.isNull() do vreqerr("TRNEFD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNFEED","MSG",1767,"LNFEED."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNFEED lnfeed
	if 'lnfeed.cid.isNull() set vfkey("^ACN("_""""_lnfeed.cid_""""_","_50_")")="LNFEED(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNFEED lnfeed
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnfeed.cid") set vERRMSG = $$^MSG(8563,"LNFEED(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger for LNFEED

	type public RecordLNFEED lnfeed
	/*
	----Revision History---------------------------------------------------
	10/21/99 - CARROLLJ 31126
		   Convert to PSL.
	*/

	new MM,XCID,XFEETYP
	set XCID=lnfeed.cid
	
	set VALUE=Db.getOneRow("CID,STAT","LN","XCID")
	if $P(VALUE,$C(9),1)="" do Runtime.setErrMSG("LNFEED",1259,XCID) quit:ER 
	if $P(VALUE,$C(9),2)=4 do Runtime.setErrMSG("LNFEED",55) quit:ER 
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNFEED lnfeed

	set X = lnfeed.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnfeed.feetyp if 'X.isNull(),'Db.isDefined("LNFEEP","X") set vRM = $$^MSG(1485,X) do vdderr("FEETYP", vRM) quit
	set X = lnfeed.feeseq if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("FEESEQ", vRM) quit
	set X = lnfeed.amoamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEED.AMOAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeed.amocnt if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("AMOCNT", vRM) quit
	set X = lnfeed.amofa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEED.AMOFA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeed.amotot if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("AMOTOT", vRM) quit
	set X = lnfeed.amtass if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEED.AMTASS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeed.cycld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CYCLD", vRM) quit
	set X = lnfeed.deforg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEED.DEFORG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeed.trnefd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TRNEFD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNFEED","MSG",979,"LNFEED."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNFEED lnfeed)	//LNFEED Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj2(.lnfeed)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_D
			}
		else  if TSRC="O" do {
			do vj2(.lnfeed)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.lnfeed)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST
			}
		else  if TSRC="O" do {
			do vj1(.lnfeed)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST
			}
		}

	quit


vj1(RecordLNFEED lnfeed)	// HIST  Table HIST  Journal File for LNFEED

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnfeed.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnfeed.cid_","_lnfeed.feetyp_","_lnfeed.feeseq,"LNFEED",vdi,vold,vnew,$G(EFD),$$^MSG(2775,lnfeed.feetyp,lnfeed.feeseq),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj2(RecordLNFEED lnfeed)	// HIST_D  Table HIST  Journal File for LNFEED

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnfeed.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3202,lnfeed.cid)_":"_$$^MSG(2775,lnfeed.feetyp,lnfeed.feeseq)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNFEED lnfeed

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("FEETYP").exists() set vux("FEETYP") = vx("FEETYP")
	if vx("FEESEQ").exists() set vux("FEESEQ") = vx("FEESEQ")
	do vkey(1) set voldkey = lnfeed.cid_","_lnfeed.feetyp_","_lnfeed.feeseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnfeed.cid_","_lnfeed.feetyp_","_lnfeed.feeseq // Copy new keys into object
	type RecordLNFEED vnewrec = lnfeed.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNFEED",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNFEED lnfeed

	if vux("CID").exists() set lnfeed.cid = vux("CID").piece("|",i)
	if vux("FEETYP").exists() set lnfeed.feetyp = vux("FEETYP").piece("|",i)
	if vux("FEESEQ").exists() set lnfeed.feeseq = vux("FEESEQ").piece("|",i)
	quit
