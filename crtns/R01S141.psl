R01S141	// SCA073 - Loan Sale Warehousing Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:51 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number FRL
	type String VIN10="ALL"
	type String VIN11="ALL"
	type String VIN12="ALL"
	type String VIN13="ALL"
	type String VIN14="ALL"
	type String VIN3="ALL"
	type String VIN7="ALL"
	type String VIN8="ALL"
	type String VIN9="ALL"
	type Number VRL

	set RID="SCA073"
	set RN="Loan Sale Warehousing Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("FRL")="|1|||||I X&(VRL) S ER=1,RM=$$^MSG(6351)||L|Fixed Rate Loans Only|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN10")="|255||[ACN]TYPE|[PRODCTL]:NOVAL||D EXT^DBSQRY||T|Product Type|||||"
	set %TAB("VIN11")="|255||[ACN]CID|[ACN]CID:DISTINCT:NOVAL||D EXT^DBSQRY||T|Account Number|||||"
	set %TAB("VIN12")="|255||[COL]PROPCD|[UTBLPROPCD]:NOVAL||D EXT^DBSQRY||T|Property Code|||||"
	set %TAB("VIN13")="|255||[LN]ICHND|||D EXT^DBSQRY||T|Next Interest Change Date|||||"
	set %TAB("VIN14")="|255||[LN]ONP|||D EXT^DBSQRY||T|Original Number of Payments|||||"
	set %TAB("VIN3")="|255||[LN]PPHLD|||D EXT^DBSQRY||T|Percent Held|||||"
	set %TAB("VIN7")="|255||[LN]IRN|||D EXT^DBSQRY||T|Interest Rate|||||"
	set %TAB("VIN8")="|255||[LN]ODT|||D EXT^DBSQRY||T|Date Opened|||||"
	set %TAB("VIN9")="|255||[ACN]GRP|[STBLGRP]:NOVAL||D EXT^DBSQRY||T|Product Group|||||"
	set %TAB("VRL")="|1|||||||L|Variable Rate Loans Only|||||"

	set %READ="IO/REQ,VRL#1,FRL#1,VIN3#1,VIN7#0,VIN8#0,VIN9#0,VIN10#0,VIN11#0,VIN12#0,VIN13#0,VIN14#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Number VRL,FRL
	type public String VIN3,VIN7,VIN8,VIN9,VIN10,VIN11,VIN12,VIN13,VIN14
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ABALAVG,CONAM,GRP,GRPAVG,PPSLD,RID,RN,TBAL,TCNT,TYPE,TYPEAVG,VL,VLOF,VRF(),VSTATS(),ZF,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA073",RN="Loan Sale Warehousing Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA073","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[LN]PPHLD "_VIN3,SEQ=SEQ+1
		set DQQRY(SEQ)="[LN]BAL>0",SEQ=SEQ+1
		set DQQRY(SEQ)="[ACN]CLS=L",SEQ=SEQ+1
		set DQQRY(SEQ)="[LN]SLBL=0",SEQ=SEQ+1
		if VIN7.get()="" set VIN7="ALL"
		if VIN7'="ALL" set DQQRY(SEQ)="[LN]IRN "_VIN7,SEQ=SEQ+1
		if VIN8.get()="" set VIN8="ALL"
		if VIN8'="ALL" set DQQRY(SEQ)="[LN]ODT "_VIN8,SEQ=SEQ+1
		if VIN9.get()="" set VIN9="ALL"
		if VIN9'="ALL" set DQQRY(SEQ)="[ACN]GRP "_VIN9,SEQ=SEQ+1
		if VIN10.get()="" set VIN10="ALL"
		if VIN10'="ALL" set DQQRY(SEQ)="[ACN]TYPE "_VIN10,SEQ=SEQ+1
		if VIN11.get()="" set VIN11="ALL"
		if VIN11'="ALL" set DQQRY(SEQ)="[ACN]CID "_VIN11,SEQ=SEQ+1
		if VIN12.get()="" set VIN12="ALL"
		if VIN12'="ALL" set DQQRY(SEQ)="[COL]PROPCD "_VIN12,SEQ=SEQ+1
		if VIN13.get()="" set VIN13="ALL"
		if VIN13'="ALL" set DQQRY(SEQ)="[LN]ICHND "_VIN13,SEQ=SEQ+1
		if VIN14.get()="" set VIN14="ALL"
		if VIN14'="ALL" set DQQRY(SEQ)="[LN]ONP "_VIN14,SEQ=SEQ+1
		set DQQRY(SEQ)="([LN]PCIDSTAT=0)!([LN]PCIDSTAT="""")",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("ACN,LN,COL") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",3)="WC2|"_"Percent Held"_"|VIN3|"_VIN3.get()
		set VBNRINFO("PROMPTS",7)="WC2|"_"Interest Rate"_"|VIN7|"_VIN7.get()
		set VBNRINFO("PROMPTS",8)="WC2|"_"Date Opened"_"|VIN8|"_VIN8.get()
		set VBNRINFO("PROMPTS",9)="WC2|"_"Product Group"_"|VIN9|"_VIN9.get()
		set VBNRINFO("PROMPTS",10)="WC2|"_"Product Type"_"|VIN10|"_VIN10.get()
		set VBNRINFO("PROMPTS",11)="WC2|"_"Account Number"_"|VIN11|"_VIN11.get()
		set VBNRINFO("PROMPTS",12)="WC2|"_"Property Code"_"|VIN12|"_VIN12.get()
		set VBNRINFO("PROMPTS",13)="WC2|"_"Next Interest Change Date"_"|VIN13|"_VIN13.get()
		set VBNRINFO("PROMPTS",14)="WC2|"_"Original Number of Payments"_"|VIN14|"_VIN14.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Loan Sale Warehousing Report"
		set VBNRINFO("PGM")="R01S141"
		set VBNRINFO("RID")="SCA073"
		set VBNRINFO("TABLES")="ACN,LN,COL"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,ACN]CLS"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,ACN]GRP"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,ACN]TYPE"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,ACN]CID"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:3 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"ACN.CLS,ACN.GRP,ACN.TYPE,ACN.CID,LN.BAL,LN.IRN,LN."
	set VSELECT=VSELECT_"ONP,LN.SCHNUM,LN.CID,LN.DIST1LD,LN.DTNT,LN.CRLMT,L"
	set VSELECT=VSELECT_"N.DFP,LN.PMTPI,LN.MDT,LN.FCLF,LN.FCPT,COL.NUNIT,LN"
	set VSELECT=VSELECT_".FCLP,LN.LVR,LN.LNM,LN.PPHLD,LN.DY1,LN.DP1,LN.ODD,"
	set VSELECT=VSELECT_"LN.ICHND,COL.AD1,COL.AD2,COL.CITY,COL.STATE,COL.CN"
	set VSELECT=VSELECT_"TRY,COL.MZIP,COL.FCPNAM,COL.FCCLS"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"ACN,LN,COL",VWHERE,"ACN.CLS,ACN.GRP,ACN.TYPE,ACN.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34
	set vc1=V.piece($C(9),1)			// ACN.CLS
	set vc2=V.piece($C(9),2)			// ACN.GRP
	set vc3=V.piece($C(9),3)			// ACN.TYPE
	set vc4=V.piece($C(9),4)			// ACN.CID
	set vc5=V.piece($C(9),5)			// LN.BAL
	set vc6=V.piece($C(9),6)			// LN.IRN
	set vc7=V.piece($C(9),7)			// LN.ONP
	set vc8=V.piece($C(9),8)			// LN.SCHNUM
	set vc9=V.piece($C(9),9)			// LN.CID
	set vc10=V.piece($C(9),10)			// LN.DIST1LD
	set vc11=V.piece($C(9),11)			// LN.DTNT
	set vc12=V.piece($C(9),12)			// LN.CRLMT
	set vc13=V.piece($C(9),13)			// LN.DFP
	set vc14=V.piece($C(9),14)			// LN.PMTPI
	set vc15=V.piece($C(9),15)			// LN.MDT
	set vc16=V.piece($C(9),16)			// LN.FCLF
	set vc17=V.piece($C(9),17)			// LN.FCPT
	set vc18=V.piece($C(9),18)			// COL.NUNIT
	set vc19=V.piece($C(9),19)			// LN.FCLP
	set vc20=V.piece($C(9),20)			// LN.LVR
	set vc21=V.piece($C(9),21)			// LN.LNM
	set vc22=V.piece($C(9),22)			// LN.PPHLD
	set vc23=V.piece($C(9),23)			// LN.DY1
	set vc24=V.piece($C(9),24)			// LN.DP1
	set vc25=V.piece($C(9),25)			// LN.ODD
	set vc26=V.piece($C(9),26)			// LN.ICHND
	set vc27=V.piece($C(9),27)			// COL.AD1
	set vc28=V.piece($C(9),28)			// COL.AD2
	set vc29=V.piece($C(9),29)			// COL.CITY
	set vc30=V.piece($C(9),30)			// COL.STATE
	set vc31=V.piece($C(9),31)			// COL.CNTRY
	set vc32=V.piece($C(9),32)			// COL.MZIP
	set vc33=V.piece($C(9),33)			// COL.FCPNAM
	set vc34=V.piece($C(9),34)			// COL.FCCLS
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 type public Number PPSLD,TBAL,TCNT,ZF

 set PPSLD=0,TCNT=0,TBAL=0
 set ZF=0
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,VH0=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do VSUM3 quit:VFMQ  do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),vc5
	type Public String VSTATS

	set VT(4)=VT(4)+1
	set VT(4,1,1)=VT(4,1,1)+(vc5*vc6)		// @TOT(<<[LN]BAL*[LN]IRN>>)
	set VT(4,2,1)=VT(4,2,1)+(vc7-vc8*vc5)		// @TOT(<<[LN]ONP-[LN]SCHNUM*[LN]BAL>>)
	set VT(4,3,1)=VT(4,3,1)+vc5			// @TOT([LN]BAL)
	quit

VSUM3	// Summary
	type public String %TIM,ABALAVG,GRP,GRPAVG,I,IOSL,PPSLD,TBAL,TCNT,TYPE,TYPEAVG,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),ZF,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if 'VT(3) quit
	if VLC+8>IOSL do VHDG0 quit:VFMQ

	set VL="Group"
	set VL=VL_$J("",6-VL.length())_$E(vc2,1,4)
	do VOM
	set VL="" do VOM
	set VL="          "_"Total"
	do VOM
	set VL="                          "_"Balance:"
	set V=VT(3,3,1)					// @TOT([LN]BAL,)
	set V=$S(V="":"",1:$J(V,0,2)) do VP1 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V		// @TOT([LN]BAL,)
	do VOM
	set VL="                         "_"Accounts:"
	set V=VT(3)					// @CNT(,N,5)
	set V=$J(V,5) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",46-VL.length())_V		// @CNT(,N,5)
	do VOM
	set VL="          "_"Average"
	do VOM
	set VL="                          "_"Balance:"
	do VP3 quit:VFMQ!verror.get()  set V=$S(GRPAVG="":"",1:$J(GRPAVG,0,2))
	set VL=VL_$J("",39-VL.length())_V
	do VOM
	set VL="                    "_"Interest Rate:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(3,1,1)/VT(3,3,1)		// @TOT(<<[LN]BAL*[LN]IRN>>)/@TOT([LN]BAL,)
		}
	set VL=VL_$J("",43-VL.length())_$J(V,8,5)
	do VOM
	set VL="                   "_"Remaining Term:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(3,2,1)/VT(3,3,1)		// @TOT(<<[LN]ONP-[LN]SCHNUM*[LN]BAL>>)/@TOT([LN]BAL,)
		}
	set VL=VL_$J("",44-VL.length())_$J(V,7,3)
	do VOM
	quit

VDTL4	// Detail
	type public String %TIM,ABALAVG,GRP,GRPAVG,IOSL,PPSLD,TBAL,TCNT,TYPE,TYPEAVG,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),ZF,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if VLC+7>IOSL do VHDG0 quit:VFMQ

	set VL=$J(vc9,12)
	set V=vc5,VO=V set V=$J(V,11,2) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",12-VL.length())_V		// [SYSDEV,LN]BAL
	set VL=VL_$J("",24-VL.length())_$J($$DAT^%ZM(vc10),10)
	set VL=VL_$J("",34-VL.length())_$J($$DAT^%ZM(vc11),10)
	set VL=VL_$J("",45-VL.length())_$J(vc12,8,0)
	set VL=VL_$J("",54-VL.length())_$J($$DAT^%ZM(vc13),10)
	set VL=VL_$J("",65-VL.length())_$J(vc14,9,2)
	set VL=VL_$J("",75-VL.length())_$J($$DAT^%ZM(vc15),10)
	set VL=VL_$J("",86-VL.length())_$E(vc16,1,2)
	set V=vc17,VO=V set V=$J(V,1) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V		// [SYSDEV,LN]FCPT
	set VL=VL_$J("",92-VL.length())_$J(vc18,3)
	set VL=VL_$J("",97-VL.length())_$J(vc19,1)
	set VL=VL_$J("",99-VL.length())_$J(vc20,4)
	set VL=VL_$J("",104-VL.length())_$E(vc21,1,28)
	do VOM
	set VL="       "_$J(vc22,6,2)
	set VL=VL_$J("",26-VL.length())_$J(vc23,2)
	set VL=VL_$J("",32-VL.length())_$J(vc24,2)
	set VL=VL_$J("",34-VL.length())_$J($$DAT^%ZM(vc25),10)
	set VL=VL_$J("",54-VL.length())_$J($$DAT^%ZM(vc26),10)
	set VL=VL_$J("",68-VL.length())_$J(vc6,6,3)
	set VL=VL_$J("",104-VL.length())_$E(vc27,1,28)
	do VOM
	set VL="                                                                                                        "_$E(vc28,1,28)
	do VOM
	set VL="                                                                                                        "_$E(vc29,1,28)
	do VOM
	set VL="                                                                                                        "_$E(vc30,1,2)
	set VL=VL_$J("",107-VL.length())_$E(vc31,1,2)
	set VL=VL_$J("",110-VL.length())_$E(vc32,1,5)
	do VOM
	set V=vc33,VO=V set V=$E(V,1,20) do VP6 quit:VFMQ!verror.get()  set VL="                                                                                                        "_V
	set V=vc34,VO=V set V=$E(V,1,3) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",127-VL.length())_V		// [SYSDEV,COL]FCCLS
	do VOM
	set VL="" do VOM
	quit

VSUM4	// Summary
	type public String %TIM,ABALAVG,GRP,GRPAVG,I,IOSL,PPSLD,TBAL,TCNT,TYPE,TYPEAVG,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),ZF,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if 'VT(4) quit
	if VLC+8>IOSL do VHDG0 quit:VFMQ

	set VL="Type"
	set VL=VL_$J("",5-VL.length())_$J(vc3,4)
	do VOM
	set VL="" do VOM
	set VL="          "_"Total"
	do VOM
	set VL="                          "_"Balance:"
	set V=VT(4,3,1)					// @TOT([LN]BAL,)
	set V=$S(V="":"",1:$J(V,0,2)) do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V		// @TOT([LN]BAL,)
	do VOM
	set VL="                         "_"Accounts:"
	set V=VT(4)					// @CNT(,N,5)
	set V=$J(V,5) do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",46-VL.length())_V		// @CNT(,N,5)
	do VOM
	set VL="          "_"Average"
	do VOM
	set VL="                          "_"Balance:"
	do VP10 quit:VFMQ!verror.get()  set V=$S(TYPEAVG="":"",1:$J(TYPEAVG,0,2))
	set VL=VL_$J("",39-VL.length())_V
	do VOM
	set VL="                    "_"Interest Rate:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(4,1,1)/VT(4,3,1)		// @TOT(<<[LN]BAL*[LN]IRN>>)/@TOT([LN]BAL,)
		}
	set VL=VL_$J("",43-VL.length())_$J(V,8,5)
	do VOM
	set VL="                   "_"Remaining Term:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(4,2,1)/VT(4,3,1)		// @TOT(<<[LN]ONP-[LN]SCHNUM*[LN]BAL>>)/@TOT([LN]BAL,)
		}
	set VL=VL_$J("",44-VL.length())_$J(V,7,3)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ABALAVG,CONAM,GRP,GRPAVG,PPSLD,RID,RN,TBAL,TCNT,TYPE,TYPEAVG,VL,ZF,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+11,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",122-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  (SCA073)"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	set VL=" "_"Loan Number     Balance Paid Thru    Note   Original  First Due   P&I Pmt  Maturity  LN PR Num LN  LVR Last Name"
	do VOM
	set VL="       "_"% Held            Cy DLQ Py Disbursed  Amount    Int Chgs    Rate      Date    PT Ty  Un PP   %  Address"
	do VOM
	set VL="                                                                                                        "_"City              "
	do VOM
	set VL="                                                                                                        "_"ST Cnty Zip"
	do VOM
	set VL="                                                                                                        "_"Condo/PUD Name         Cls"
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="Group"
	set VL=VL_$J("",6-VL.length())_$E(vc2,1,4)
	set VL=VL_$J("",13-VL.length())_"Type"
	set VL=VL_$J("",18-VL.length())_$J(vc3,4)
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,ABALAVG,GRP,GRPAVG,PPSLD,TBAL,TCNT,TYPE,TYPEAVG,ZF,vc2,vc3,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+10>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="Report Totals:"
	do VOM
	set VL="" do VOM
	set VL="          "_"Total"
	do VOM
	set VL="                          "_"Balance:"
	set V=0						// @TOT([LN]BAL,0)
	for I=0:1:4 set V=V+VT(I,3,1)
	set V=$S(V="":"",1:$J(V,0,2)) do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V		// @TOT([LN]BAL,0)
	do VOM
	set VL="                         "_"Accounts:"
	set V=(VT(0)+VT(1)+VT(2)+VT(3)+VT(4))		// @CNT(0,N,5)
	set V=$J(V,5) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",46-VL.length())_V		// @CNT(0,N,5)
	do VOM
	set VL="          "_"Average"
	do VOM
	set VL="                          "_"Balance:"
	do VP13 quit:VFMQ!verror.get()  set V=$S(ABALAVG="":"",1:$J(ABALAVG,0,2))
	set VL=VL_$J("",39-VL.length())_V
	do VOM
	set VL="                    "_"Interest Rate:"
	set V=0						// @TOT(<<[LN]BAL*[LN]IRN>>)
	for I=0:1:4 set V=V+VT(I,1,1)
	set VX(2)=0					// @TOT([LN]BAL,)
	for I=0:1:4 set VX(2)=VX(2)+VT(I,3,1)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=V/VX(2)				// @TOT(<<[LN]BAL*[LN]IRN>>)/@TOT([LN]BAL,)
		}
	set VL=VL_$J("",43-VL.length())_$J(V,8,5)
	do VOM
	set VL="                   "_"Remaining Term:"
	set V=0						// @TOT(<<[LN]ONP-[LN]SCHNUM*[LN]BAL>>)
	for I=0:1:4 set V=V+VT(I,2,1)
	set VX(2)=0					// @TOT([LN]BAL,)
	for I=0:1:4 set VX(2)=VX(2)+VT(I,3,1)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=V/VX(2)				// @TOT(<<[LN]ONP-[LN]SCHNUM*[LN]BAL>>)/@TOT([LN]BAL,)
		}
	set VL=VL_$J("",44-VL.length())_$J(V,7,3)
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - @TOT([LN]BAL,,$,13)

 type public Number GRPAVG,V

 set GRPAVG=V
	quit

VP2	// Column post-processor - @CNT(,N,5)

 type public Number LNS,V

 set LNS=V
	quit

VP3	// Column pre-processor - Variable: GRPAVG

 type public Number GRPAVG,LNS

 set GRPAVG=GRPAVG.get().translate(" ","")
 set LNS=LNS.get().translate(" ","")
 if LNS set GRPAVG=GRPAVG/LNS
	quit

VP4	// Column post-processor - [SYSDEV,LN]BAL

 type public Number TBAL,TCNT,VO

 set TBAL=TBAL+VO,TCNT=TCNT+1
	quit

VP5	// Column post-processor - [SYSDEV,LN]FCPT

 type public Number FCPT,VO

 set FCPT=VO
	quit

VP6	// Column post-processor - [SYSDEV,COL]FCPNAM

 type public Number FCPT
 type public String V

 if ((FCPT'=1)!(FCPT'=3)) set V=""
	quit

VP7	// Column post-processor - [SYSDEV,COL]FCCLS

 type public Number FCPT
 type public String V

 if ((FCPT'=1)!(FCPT'=3)) set V=""
	quit

VP8	// Column post-processor - @TOT([LN]BAL,,$,13)

 type public Number TYPEAVG,V

 set TYPEAVG=V
	quit

VP9	// Column post-processor - @CNT(,N,5)

 type public Number LNS,V

 set LNS=V
	quit

VP10	// Column pre-processor - Variable: TYPEAVG

 type public Number LNS,TYPEAVG

 set TYPEAVG=TYPEAVG.get().translate(" ","")
 set LNS=LNS.get().translate(" ","")
 if LNS set TYPEAVG=TYPEAVG/LNS

	quit

VP11	// Column post-processor - @TOT([LN]BAL,0,$,13)

 type public Number ABALAVG,V

 set ABALAVG=V
	quit

VP12	// Column post-processor - @CNT(0,N,5)

 type public Number NUMACC,LNS,V

 set NUMACC=V
 set LNS=V
	quit

VP13	// Column pre-processor - Variable: ABALAVG

 type public Number ABALAVG,NUMACC
 
 set ABALAVG=ABALAVG.get().translate(" ","")
 set NUMACC=NUMACC.get().translate(" ","")
 if NUMACC set ABALAVG=ABALAVG/NUMACC
	quit
