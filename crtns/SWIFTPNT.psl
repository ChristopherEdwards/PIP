public SWIFTPNT	// Print SWIFT reports
	/*

	       ORIG:  	TSAI, 15 FEBRUARY 1994
	  CALLED BY:  	DATA-QWIK Functions (SWIFTPNT)
	      CALLS:  	DBSFILER,SCATAB,USID,UTLDEAL,UTLERR,UTLREAD,
	              	@PGM,UTLO

	   PROJ #'S:  	Deal Processing (SWIFT Enhancements)
	       DESC:  	This routine is used for the SWIFT reports
	              	MT103, MT202, MT210, and MT300.

	        	This is used for printing SWIFT Messages.  It is called
	        	by an IBS function (SWIFTPNT) to print a SWIFT message.
	        	Transaction Reference Number, and the Message Type.
	        	It then prints the appropriate report based upon this
	        	information, and it also check the REPNTFLG, if the flag
	        	is set it will put "COPY" on the report.

	   GLOBALS -
	       READ:  	SWIFT,CRADEN
	        SET:  	SWIFT,CRADEN

	      INPUT:
	     OUTPUT:  	To output device, provided by user.

	---- Revision History -------------------------------------------------

	01/25/06 - KELLYP - CR 18292
		   Rewrote entire procedure to fix several logic errors and to
		   conform to current PSL standards. 
	
	01/11/06 - ratht - CR 18292
		   Modified section VPG00 to put "OUT" within double-qoute 
		   instead of single-quote. Removed the Deprecated Warnings.
		   
	10/17/05 - KUMARB - CR 17050
		   Added "do DIS" at the begining.
	
	09/09/05 - KELLYP - CR 17050
		   Modified VPG00 and VPG01 sections to reference SWIFT instead
		   of SWDTX.  SWDTX is a table mapped to an index and is being
		   obsoleted.

	09/07/05 - KELLYP - CR 17118
		   Removed references to the MT100 message which has been
		   obsoleted by SWIFT.

	07/26/05 - SkariahV- CR 16679
		   Removed #WARN and #OPTIMIZE directives.
	              
	06/16/03 - BHANGALEV - 51351
		   Converted to PSL

	-----------------------------------------------------------------------
	*/
	
	/*
	 The top level of this procedure is used by the @SWIFTPNT function to
	 print one or more SWIFT messages.
	*/
	
	do INIT(2,)

	quit


public DIS(RecordEFTPAY eftpay)
	/*
	 This label is called from EFTNDPO so that the eftpay object can be
	 passed in.  In this case, the SWIFTPNT prompts default to print just 
	 the one message for corresponding eftpay object.
	*/
	
	do INIT(2,.eftpay)
	
	quit


INIT(%ProcessMode,RecordEFTPAY eftpay)

	/*
	  ARGUMENTS:

	  	. %ProcessMode		Process mode	/REQ/MECH=VAL
	  	. eftpay		EFTPAY record	RecordEFTPAY/NOREQ
	*/

	type public Boolean ER

	type Date SWFTDT
	type Number CNT,IDX
	type String %BLK,FILE,IO,MS(),SWDIRECT,TRREFNO,UTLO,VFMQ

	if 'eftpay.exists() set eftpay=Class.new("RecordEFTPAY")
	
	do QUERY(.eftpay) quit:ER
	
	if VFMQ="Q" quit
	
	do RPT

	if CNT.get() do CLOSE^SCAIO
	
	do END

	quit


QUERY(RecordEFTPAY eftpay)	// Query prompts

	type public Boolean ER
	type public Date SWFTDT
	type public String FILE,IO,NOINT,SWDIRECT,TRREFNO,UTLO,VFMQ
	
	type String device,%NOPRMT,%READ,%TAB()
	
	if 'TRREFNO.exists() set TRREFNO=""
	
	if NOINT.exists() do {
		type RecordDEAL1 deal1=Db.getRecord("DEAL1","NOINT=:NOINT",1)
		if '(deal1.getMode()=0) do {
			set SWFTDT=deal1.tdt
			set TRREFNO=deal1.trrefno
			set SWDIRECT="OUT"
			}
		}
	else  if '(eftpay.getMode()=0) do {
		set SWFTDT=eftpay.procdt
		set TRREFNO=eftpay.refno
		set SWDIRECT="OUT"
		}
	
	do ^UTLO
	
	if IO.get()="" set IO=$I
	if UTLO.length() do {
		type RecordCRADENIO cio=Db.getRecord("CRADENIO","IONAME=:UTLO",1)
		set IO=cio.devname
		}

	set %TAB("IO")=$$IO^SCATAB(IO)_"/XPP=D IOPP^SWIFTPNT"

	if 'TRREFNO.length() do {
		set %TAB("SWFTDT")=".SWFTDT/TBL=[SWIFT]SWFTDT:DISTINCT/XPP=D MTDPP^SWIFTPNT"

		set %TAB("TRREFNO")=".TRREFNO/LEN=14/TBL=[SWIFT]TRREFNO:DISTINCT:QU ""[SWIFT]SWFTDT=<<SWFTDT>> AND [SWIFT]SWDIRECT=""OUT""""/XPP=D REFPP^SWIFTPNT"
		
		// add direction prompt
		set %TAB("SWDIRECT")=".SWDIRECT/TBL=[SWIFT]SWDIRECT:DISTINCT"
		set %READ="@@%FN,,,IO/REQ,,SWFTDT/REQ,TRREFNO/REQ,SWDIRECT/REQ"
		}
	else  set %READ="@@%FN,,,IO/REQ"
	
	set %NOPRMT="N"

	do ^UTLREAD 
	
	if VFMQ="Q" set ER=1 quit
	
	type ResultSet rs=Db.select("DEVICE","DEVICE","DEVICE=:IO")
	if rs.next() set device=rs.getCol("DEVICE")
	// No physical device name
	else  do Runtime.setErrMSG("DEVICE","7323") set VFMQ="Q" quit

	set FILE=IO

	if '($$BD^UNBD(SWFTDT)) set VFMQ="Q"

	quit


MTDPP	// Message Transfer Date Post-Processor

	/*
	   Verifies that the date entered is a valid business date
	   Message Generate Date must be a valid business date.
	*/
	type public String ER,RM,X
	
	if '($$BD^UNBD(X)) do Runtime.setErrMSG("SWIFT","7322") quit:ER 
	
	quit


IOPP	// Verify that IO device is not a terminal.
	
	type public String ER,RM,X,%EXT
	
	// Device must be a printer. Use Display ~p1 Message to display.
	if X=$I do Runtime.setErrMSG("SWIFT","7335","SWIFT") quit:ER
	
	set %EXT=1 
	
	do ^SCAIO
	
	quit


REFPP	// Change look up table.

	type public String X

	if X="ALL" do CHANGE^DBSMACRO("TBL","")
	
	quit


SYSVAR	// Pre-define system variables.

	type public Date SWFTDT
	type public String %BLK,FILE
	type public Number CNT,TRREFNO

	set %BLK="/"_$C(1)_FILE.get()_$C(1)_SWFTDT.get()_$C(1)_TRREFNO.get()_$C(1)_"OUT"

	quit

	
RPT	// Report
	
	type public Boolean batchflg,ER
	type public Date SWFTDT
	type public Number CNT,IDX
	type public String SWDIRECT,TRREFNO
	
	set (CNT,IDX)=0
	set batchflg=0

	// Day end process set up.
	if TRREFNO="ALL" do {
		set batchflg=1 
		type ResultSet rs=Db.select("TRREFNO","SWIFT","SWFTDT=:SWFTDT AND SWDIRECT=:SWDIRECT")	
		while rs.next() do ONLINE(rs.getCol("TRREFNO")) quit:ER
		}
	else  do ONLINE(TRREFNO)
	
	quit
	
	
ONLINE(String TRREFNO)	// Online print function.
	
	/*
	  ARGUMENTS:
	  	.trrefno	transaction reference number	/REQ/MECH=VAL
	*/

	type public Boolean batchflg,ER
	type public Number CNT,IDX
	type public String MS(),SWDIRECT,VFMQ

	type Boolean PFLG,%NOCLOSE,%NOOPEN
	type Number STATUS
	type String MSG,PGM,RID,RPT(),TCMT

	// Record locked by another user
	lock +SWIFT(SWDIRECT,TRREFNO):2 else  set VFMQ="Q" do Runtime.setErrMSG("SWIFT","2333") quit:ER
	
	type DbSet ds=Db.selectDbSet("SWIFT","SWDIRECT=:SWDIRECT AND TRREFNO=:TRREFNO")	
	while ds.next() do { quit:ER
		type RecordSWIFT swift=ds.getRecord("SWIFT")
		do swift.setAuditFlag(1)
				
		set MSG=swift.msg
		set PFLG=swift.repntflg
		set STATUS=swift.status
		
		// Quit when it's batch processing and reprint flag is on
		// and print only when the status is "RTT" or "REC"
		if (batchflg&PFLG)!("0,1,2,4,7,8"'[STATUS) quit
		
		do SYSVAR
		
		//Report for "msg" type
		set RID="SWIFT"_MSG
		
		if RPT(MSG).exists() set PGM=RPT(MSG)
		else  do ^URID quit:ER
		
		if 'PGM.isNull() set RPT(MSG)=PGM
		// Invalid screen linkage <<SID>>
		else  do Runtime.setErrSTBLER("SWIFT","INVLDRPT") quit:ER
		
		if CNT.get() set %NOOPEN=1
		set %NOCLOSE=1
		
		do ^@PGM use 0
		
		set CNT=CNT+1
		
		// To print a msg with pflg=0
		if 'PFLG do {
		
			// Set respond date TJD
			if swift.date'=%SystemDate set swift.date=%SystemDate
			
			// Set print flg=1
			set swift.repntflg=1
			
			// Printed and sent to ~p1	//put comment in SWHIST
			set TCMT=$$^MSG(7339,"ST400")
			
			do swift.save()
			}
		
		// If trrefno entered, display msg.
		if 'batchflg do {
			
			// ~p1 ~p2 printed
			if PFLG'=1 set IDX=IDX+1 set MS(IDX)=$$^MSG(7337,TRREFNO,MSG)
			
			// COPY of ~p1 ~p2 reproduced
			if PFLG=1 set IDX=IDX+1 set MS(IDX)=$$^MSG(7334,TRREFNO,MSG)
			}
		}
	do RY

	quit
			

RY	//

	type public Boolean batchflg,ER
	type public Date SWFTDT
	type public String RM,SWDIRECT,TRREFNO,VFMQ
	
	type String ET

	if SWFTDT.exists()&TRREFNO.exists() lock -SWIFT(SWDIRECT,TRREFNO)
	if 'ER set VFMQ="Q"

	// Log error into exception file
	if batchflg,ER do {
		set ET=RM.get()
		
		// Error printing ~p1 message for ~p2~p3
		if ET.isNull() set ET=$$^MSG(7338,"SWIFT","TRREFNO",TRREFNO.get())
		do EXC 
		set ER=0 
		}
	quit


EXC	//Log error in exception file
	
	type public String TRREFNO,ET,%ZTSEQ
	
	// Print ~p1 Message Process
	do LOG^UTLEXC(0,"*",$$^MSG(7336,"SWIFT"),TRREFNO.get(),%ZTSEQ.get(),ET.get(),)
	
	set (ET,%ZTSEQ)=""

	quit

END	// End of processing

	type public Boolean ER
	type public Number IDX
	type public String RM(),MS()

	type Number I

	if ER.get()!(%ProcessMode=2)!(%ProcessMode=4) quit

	// Display message array MS(IDX)
	for I=1:1:IDX set ER="W" set RM(I)=MS(I)

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60290^62951^Pat Kelly^7881"	// Signature - LTD^TIME^USER^SIZE
