UCSDRV		/*
	ORIG: CARROLLJ - 02/04/2001
	DESC: Creates publish record for UCS

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------

	12/28/05 - PRAKASHJ - 17423
		   Removed depricated warnings and scoped variables. 

	07/31/02 - CARROLLJ - 50836
		   Modified TRANDRV section to collate through publish array
		   and removed the passing of the acn object to ^ACCNT.

	07/19/02 - CARROLLJ - 50836
		   Added section TRANDRV to collate through the PUBLISH array
		   to publish account status during transaction processing.

	05/21/02 - CARROLLJ - 50675
		   Roll V6.1 changes forward.

	11/15/01 - CARROLLJ - 48179
		   Released so v6.1 version does not roll.

	*/
	quit

		
CIFDRV(RecordCIF cif)

	type Number ID
	type String FID,message
	
	set FID="CIF"
	set ID=cif.acn

	if %ProcessMode=0 do {  quit
		type RecordPUBLISH publish=Class.new("RecordPUBLISH")
		set publish.id=ID
		set publish.fid=FID
		set publish.seq=Db.nextVal("PUBLISH","ID,FID")
		do publish.save()
		}
	/* 
	Call CIF publisher for update, it will instantiate publish and
	fill in publish.message with the information needed
	*/

	type RecordPUBLISH publish=Class.new("RecordPUBLISH")
	set publish.id=ID
	set publish.fid=FID
	set publish.seq=Db.nextVal("PUBLISH","ID,FID")

	/*
	publish.bypassSave() must be set in the two do loops below to
	prevent a publish record from being set if a duplicate 
	modification has been executed.
	*/
	if cif.pers=0 do {
		do INDUPD^NEWINDV(.cif,.message) 
		if message.isNull() quit
		set publish.message=message
		do publish.bypassSave()
		}

	if cif.pers=1 do {
		do CORPUPD^CORPCUS(.cif,.message)
		if message.isNull() quit
 		set publish.message=message
		do publish.bypassSave()
		}
	quit


ACNDRV(RecordACN acn)

	type Number ID,quit
	type String FID,message

	set FID="ACN"
	set ID=acn.cid

	if %ProcessMode=0 do {  quit
		type RecordPUBLISH publish=Class.new("RecordPUBLISH")
		set publish.id=ID
		set publish.fid=FID
		set publish.seq=Db.nextVal("PUBLISH","ID,FID")
		do publish.save()
		}

	// Checks to see if update entry already exists
	set quit=0
	type RecordPUBLISH pblish=Db.getRecord("PUBLISH","ID=:ID,FID=:FID,SEQ=1",1)
	if pblish.getMode() do { quit:quit
		if pblish.message.isNull() set quit=1
		}
        /*
        Call ACN publisher for update, it will instantiate publish and
        fill in publish.message with the information needed
        */

	type RecordPUBLISH publish=Class.new("RecordPUBLISH")
	set publish.id=ID
	set publish.fid=FID
	set publish.seq=Db.nextVal("PUBLISH","ID,FID")
	do UPDACT^ACCNT(.acn,.message)
	if message.isNull() quit
	set publish.message=message
	do publish.bypassSave()

	quit


RELDRV(RecordRELCIF relcif)

	type Number ID
	type String FID,message
	
	set FID="RELCIF"
	set ID=relcif.cid

	if %ProcessMode=3 do { quit
		type RecordPUBLISH publish=Class.new("RecordPUBLISH")
		set publish.id=ID
		set publish.fid=FID
		set publish.seq=relcif.acn
		do DELREL^ACCNT(.relcif,.message)
		set publish.message=message
		do publish.bypassSave()
		}

	if %ProcessMode=0 do {  quit
		type RecordPUBLISH publish=Class.new("RecordPUBLISH")
		set publish.id=ID
		set publish.fid=FID
		set publish.seq=relcif.acn
		do publish.save()
		}

        /*
        Call RELCIF publisher for update, it will instantiate publish and
        fill in publish.message with the information needed
        */

	type RecordPUBLISH publish=Class.new("RecordPUBLISH")
	set publish.id=ID
	set publish.fid=FID
	set publish.seq=Db.nextVal("PUBLISH","ID,FID")
	do UPDREL^ACCNT(.relcif,.message)
	set publish.message=message
	do publish.bypassSave()

	quit

TRANDRV(PUBLISH)
 
        /*
	This section is called from transaction processing routines DEPCL and
	LNPTS1.
 
	Arguments:
	.  PUBLISH      Publish Array		/TYP=T/REQ
 
	*/
 
	type String FILE,ACT,COL,message
	
	set (FILE,ACT,COL)=""
	for  set FILE=PUBLISH(FILE).order() quit:FILE.isNull()  do {
		for  set ACT=PUBLISH(FILE,ACT).order() quit:ACT.isNull()  do {
			for  set COL=PUBLISH(FILE,ACT,COL).order() quit:COL.isNull()  do {
			type RecordPUBLISH publish=Class.new("RecordPUBLISH")
			set publish.id=ACT
			set publish.fid=FILE
			set publish.seq=Db.nextVal("PUBLISH","ACT,FILE")
			do UPDTRAN^ACCNT(.message,.PUBLISH)
			if message.isNull() quit
			set publish.message=message
			do publish.bypassSave()
			}
		}
	}
        quit

vSIG()	quit "60296^26882^Jaimano Prakash^4220"	// Signature - LTD^TIME^USER^SIZE
