MRPC074(String RETURN,Number VERSN,Number CID,Number AMT,Date EFD,String FREQ)	//Public;MRPC call for Calculated Penalty
	/*

	   DESC: Calculated Penalty Amount for Withdrawal Authorization
	   KEYWORDS: RPC, SEGMENT, WITHDRAWAL AUTHORIZATION

	   ARGUMENTS:

	   	. RETURN 	Date, interest rate	/TYP=T/REQ/MECH=REFNAM:W
				& balance details
	        . VERSN  	^MRPC074 version number	/TYP=N/REQ/MECH=VAL
	                  	current version=1

	        . CID  		Account Number    	/TYP=N/REQ/MECH=VAL

	        . AMT  		Withdrawal Amount   	/TYP=N/REQ/MECH=VAL

	        . EFD  		Effective Date    	/TYP=D/REQ/MECH=VAL

	   	. FREQ  	Frequency    		/TYP=T/REQ/MECH=VAL

	   RETURNS:
	         . $$    	Error Message           /TYP=T
	                 	Null= No Error

	   RELATED:
	         . $$^PBSMRPC - MRPC Service Class Driver

	   EXAMPLE:
	         S RM=$$^MRPC074(.VAL,1,CID,AMT,EFD,FREQ)

	---- Revision History ------------------------------------------------
      
        07/26/05 - SkariahV- CR16679
	           Removed #WARN directive.
	
	01/13/03 - GRAY - 51351
		   Converted to PSL.
	

	*/


	type Date INP,XEFD
	type Number PENAMT,SEGPOPT,TAMT,WDPRIO,XCID
	type String SEGSTART,SEGMENT()

	// CHECK THESE new WDPRIO

	// Version number of client message is not compatible with server
	if VERSN.get()'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))

	// If recurring withdrawal
	if FREQ.get()'="" set RETURN=$$V2LV^MSG("") quit ""

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
	
	// Invalid account ~p1
	if dep.getMode()=0 quit $$ERRMSG^PBSUTL($$^MSG(1259,CID))

	// Segment Penalty Calculation Method
	set SEGPOPT=dep.segpopt
	if SEGPOPT="" set RETURN=$$V2LV^MSG(0) quit ""

	// If account has future dated activities (principal)
	// PAT
	if dep.ptuf set RETURN=$$V2LV^MSG("") quit ""

	set XCID=CID 
	set XEFD=%EffectiveDate

	// TJD<=DEP.INP<=EFD
	set INP=dep.inc
	if INP,INP'<%SystemDate,INP'>EFD set RETURN=$$V2LV^MSG("") quit ""

	do INIT^DEPPISEG(CID)

	// Original Amount
	set TAMT=AMT

	// Withdrawal priority
	set WDPRIO=dep.wdprio

	set SEGSTART=""
	// FIFO
	if WDPRIO=0 for  set SEGSTART=SEGMENT(SEGSTART).order() quit:SEGSTART=""!(AMT=0)  do PROC(.dep,CID,AMT,.PENAMT,.SEGMENT,SEGSTART)

	// LIFO
	if WDPRIO=1 for  set SEGSTART=SEGMENT(SEGSTART).order(-1) quit:SEGSTART=""!(AMT=0)  do PROC(.dep,CID,AMT,.PENAMT,.SEGMENT,SEGSTART))

	// Withdrawal exceeds available Non-Matured Principal Balance
	// Left from Original Amount
	if AMT>0 quit $$ERRMSG^PBSUTL($$^MSG(3325))

	// Withdrawal exceeds available Non-Matured Principal Balance
	// Original Amount + Penalty Amount
	if (TAMT+PENAMT)>dep.tsnmpb quit $$ERRMSG^PBSUTL($$^MSG(3325))

	set RETURN=$$V2LV^MSG(PENAMT)

	quit ""


PROC(RecordDEP dep,	// Withdrawal Process (not file)
	Number CID,
	Number AMT,
	Number PENAMT,
	String SEGMENT,
	String SEGSTART)

	type Number NUM

	// If zero segment quit
	set NUM=SEGMENT(SEGSTART) if NUM=0 quit

	type RecordDEPSEG depseg=Db.getRecord("DEPSEG","CID=:CID,SEGMENT=:NUM")
	
	if AMT>depseg.bal do {
		// Reset Amount
		set AMT=AMT-depseg.bal
		// Penalty Amount
		set PENAMT=$$PEN^DEPPOSEG(.dep,.depseg,depseg.bal)
		}

	else  do {
		set PENAMT=$$PEN^DEPPOSEG(.dep,.depseg,AMT)
		set AMT=0
		}

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60107^17764^Viji Skariah^2976"	// Signature - LTD^TIME^USER^SIZE
