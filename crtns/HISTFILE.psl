HISTFILE(RecordHIST hist, String vpar, Boolean vparNorm) // HIST - Transaction History Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (38)             10/04/2006
	// Journal File Definition (1)                 02/02/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = hist.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(hist,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(hist,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("HIST",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("HIST","CID = :hist.cid and TSEQ = :hist.tseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TSEQ

	type RecordHIST hist = Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do hist.setMode(2)

		do HISTFILE(hist,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordHIST hist

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("HIST","CID = :hist.cid and TSEQ = :hist.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(hist)) S ^HIST(vobj(hist,-3),vobj(hist,-4))=vobj(hist)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.hist)                // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordHIST hist

	if vpar["/JOURNAL/" do VJOURNAL(.hist)                 // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^HIST(vobj(hist,-3),vobj(hist,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordHIST hist

	// Type local variables for access keys for defaults
	type public String CID
	type public String TSEQ

	if hist.cdt.isNull() set hist.cdt = +$H                // cdt
	if hist.time.isNull() set hist.time = $P($H,",",2)     // time
	type public String TJD
	if hist.tjd.isNull() set hist.tjd = TJD                // tjd
	if hist.tlo.isNull() set hist.tlo = $$TLO^UTLO         // tlo
	type public String %UID
	if hist.uid.isNull() set hist.uid = %UID               // uid
	quit


vreqn // Validate required data items

	type public RecordHIST hist

	if hist.itc12.isNull() do vreqerr("ITC12") quit
	if hist.itc6.isNull() do vreqerr("ITC6") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordHIST hist

	if hist.cid.isNull() do vreqerr("CID") quit
	if hist.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("ITC12").exists(),hist.itc12.isNull() do vreqerr("ITC12") quit
		if vx("ITC6").exists(),hist.itc6.isNull() do vreqerr("ITC6") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("HIST","MSG",1767,"HIST."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordHIST hist
	if 'hist.cid.isNull() set vfkey("^ACN("_""""_hist.cid_""""_","_50_")")="HIST(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordHIST hist
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":hist.cid") set vERRMSG = $$^MSG(8563,"HIST(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordHIST hist

	set X = hist.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = hist.tseq if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	if hist.bcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BCRCD", vRM) quit
	set X = hist.ben if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BEN", vRM) quit
	set X = hist.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	set X = hist.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = hist.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	set X = hist.chktyp if 'X.isNull(),'Db.isDefined("STBLCHKTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CHKTYP", vRM) quit
	set X = hist.cmpsav if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.CMPSAV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if hist.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	set X = hist.custcd if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CUSTCD", vRM) quit
	set X = hist.dir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.DIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = hist.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = hist.endbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.ENDBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = hist.etc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("ETC", vRM) quit
	set X = hist.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
	if hist.ident.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDENT", vRM) quit
	if hist.itc.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ITC", vRM) quit
	if hist.msd.length()>120 set vRM = $$^MSG(1076,120) do vdderr("MSD", vRM) quit
	set X = hist.mult if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MULT", vRM) quit
	set X = hist.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = hist.rty if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RTY", vRM) quit
	set X = hist.spr if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
	set X = hist.sysbase if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.SYSBASE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if hist.tamt.length()>60 set vRM = $$^MSG(1076,60) do vdderr("TAMT", vRM) quit
	if hist.tcmt.length()>510 set vRM = $$^MSG(1076,510) do vdderr("TCMT", vRM) quit
	set X = hist.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	set X = hist.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	if hist.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	set X = hist.trc if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("TRC", vRM) quit
	set X = hist.tresref if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("TRESREF", vRM) quit
	set X = hist.tsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.TSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if hist.tso.length()>300 set vRM = $$^MSG(1076,300) do vdderr("TSO", vRM) quit
	set X = hist.udprin if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HIST.UDPRIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if hist.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	set X = hist.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	if hist.xhs16.length()>80 set vRM = $$^MSG(1076,80) do vdderr("XHS16", vRM) quit
	if hist.xpdo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("XPDO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("HIST","MSG",979,"HIST."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordHIST hist)	//HIST Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.hist)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=DTJFM_I
			}
		else  if TSRC="O" do {
			do vj1(.hist)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=DTJFM_I
			}
		}

	quit


vj1(RecordHIST hist)	// DTJFM_I  Table DTJFM  File Maintenance

	type RecordACN acn=Db.getRecord("ACN","CID=:hist.cid",1)

	if acn.cls'=""
	else  quit

	type Public String EFD,%IDENT,TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=acn.cls
	set v3=acn.grp
	set v4=acn.type
	set v5=acn.cid
	set vlastkey=hist.tseq
	type RecordDTJFM dtjfm=Db.getRecord("DTJFM","TJD=:v1,CLS=:v2,GRP=:v3,TYP=:v4,CID=:v5,TSEQ=:vlastkey",1)
	set dtjfm.brcd=acn.boo
	set dtjfm.cc=acn.cc
	set dtjfm.cdt=+$H
	set dtjfm.efd=$G(EFD)
	set dtjfm.ident=%IDENT
	set dtjfm.tcmt=hist.tcmt
	set dtjfm.time=hist.time
	set dtjfm.tlo=hist.tlo
	set dtjfm.uid=hist.uid

	do dtjfm.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordHIST hist

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = hist.cid_","_hist.tseq        // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = hist.cid_","_hist.tseq        // Copy new keys into object
	type RecordHIST vnewrec = hist.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("HIST",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordHIST hist

	if vux("CID").exists() set hist.cid = vux("CID").piece("|",i)
	if vux("TSEQ").exists() set hist.tseq = vux("TSEQ").piece("|",i)
	quit
