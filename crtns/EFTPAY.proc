EFTPAY // Electronic Payements
	/*
	  ----- Revision History ------------------------------------------------

	   12/11/06 - Ravindra Rathi - CR 24321
	              o Modified the VPG01 section to set the correct SID before executing 
	              'Cancellation of Orders' section. 
	              o Modified the 'create' section to remove the condition where
	              SEQ was set to eftpay1.seq+1 as it was incrementing the sequence
	              instead of updating the same. Also deleted the setmode(0) and
	              setmode(1) method to remove DBSFILER errors.
	              o Removed the pre-PSL conversion history and commented initials.
	   
	   07/27/06 - VANITHAK - CR 22163 
                      Modified UPD and DIS section to delete the call to the 
                      EFTRICO section with ctblachid object since there was  
                      mismatch in actual and formal parameters passed. In INIT
                      section declared %PG and %PAGE since PSL compiler was 
                      returning an error when the screen EFTRICO is called. In 
                      VPG section,changed the code to define %PG before calling 
                      VPG02 since the value is being killed in DBS routine call 
                      when executing the screen EFTRICO. Modified to eliminate
                      the PSL compiler warnings.
	  
	   02/08/06 - KELLYP - CR 19055
	   	      Modified create section to set fEFTPAY.seq, SEQ, and ZSEQ
	   	      on separate lines.  The PSL compiler was returning an error
	   	      because object properties can no longer be set along with
	   	      other variables in a multi-variable set statement.
	  
	   05/13/05 - CARROLLJ - CR15991
		      Modified create and VPG sections to file payment 
		      order cancellations.

	   02/15/04 - MBUIM - CR 13273
	   	      Modified ZSRC section to correct DbSet syntax
	   	      Modified CAN section to remove extra call to ZSRC    
	   	      Removed pre-2001 Revision History
	  
	   10/30/02 - TELIV - 49451
		      Converted from M to PSL

	   I18N=OFF
	*/
	do NEW
	
	quit

	
NEW	//
	do INIT(0)
	
	quit


UPD	//
	type public Number EFTRICO, pri
	type public String EFTQRY, SRCQRY, SRC
	
	type Number UPDATE
	 
	set UPDATE=1
			
	/*
	 If not reviewing rejected orders, set query to check EFTTYPE=SRCQRY
	 If reviewing rejected orders, set query to check EFTTYPE=PO,CO.
	*/
	if 'EFTRICO.exists() do SRCQRY set EFTQRY="[EFTPAY]EFTTYPE="_SRCQRY.get()
	else  set EFTQRY="[EFTPAY]EFTTYPE="_$$EFTRICO(2) 

	set EFTQRY=EFTQRY_" AND [EFTPAY]CID=<<CID>>"

	/*
	 If reviewing rejected collection orders, set
	 Query to check for status PR or PP.  Otherwise check status = A or Y.
	*/
		
	if 'EFTRICO.exists() set EFTQRY=EFTQRY_" AND [EFTPAY]STATUS=A,Y"
	else  set EFTQRY=EFTQRY_" AND [EFTPAY]STATUS=PP,PR"

	if pri.get() set EFTQRY=EFTQRY_" AND [EFTPAY]PRI=1"

	else  set EFTQRY=EFTQRY_" AND [EFTPAY]PRI'=1"

	do INIT(1)
	quit


DIS	//
	type public Number EFTRICO, pri
	type public String EFTQRY, SRC, SRCQRY
		
	/*
	 If not reviewing rejected orders, set query to check EFTTYPE=SRCQRY
	 If reviewing rejected orders, set query to check EFTTYPE=PO,CO.
	*/
	if 'EFTRICO.exists() do SRCQRY set EFTQRY="[EFTPAY]EFTTYPE="_SRCQRY.get()

	if EFTRICO.exists() set EFTQRY="[EFTPAY]EFTTYPE="_$$EFTRICO(3)_" AND [EFTPAY]STATUS=PP,PR" 
	set EFTQRY=EFTQRY_" AND [EFTPAY]CID=<<CID>>"
	if pri.get() set EFTQRY=EFTQRY_" AND [EFTPAY]PRI=1"

	else  set EFTQRY=EFTQRY_" AND [EFTPAY]PRI'=1"

	do INIT(2)
	quit


DEL	//
	type public Number pri
	type public String EFTQRY, SRCQRY
	
	do SRCQRY 
	
	set EFTQRY="[EFTPAY]EFTTYPE="_SRCQRY.get()
	set EFTQRY=EFTQRY_" AND [EFTPAY]CID=<<CID>>"
	set EFTQRY=EFTQRY_" AND [EFTPAY]STATUS=A,Y"
	
	if pri.get() set EFTQRY=EFTQRY_" AND [EFTPAY]PRI=1"
	else  set EFTQRY=EFTQRY_" AND [EFTPAY]PRI'=1"

	do INIT(3)
	
	quit

CAN	//
	type public Number pri, CANCEL, STDPAY
	type public String EFTQRY, IO, OSRC, SRC, ZSRC
		
	set OSRC=SRC
	
	type RecordCTBLEFTTYPE ctblefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
	
	set SRC=ctblefttype.stbleft
	set SRC=$E(SRC,0,(SRC.length())-1) 
	set IO=$I 
	set CANCEL=1

	if STDPAY="1" set ZSRC="S"_SRC

	else  set ZSRC=SRC

	set EFTQRY="[EFTPAY]STATUS=C AND [EFTPAY]EFTTYPE="_$$ZSRC(ZSRC)_" AND [EFTPAY]CID=<<CID>>" 
	
	if pri.get() set EFTQRY=EFTQRY_" AND [EFTPAY]PRI=1"

	else  set EFTQRY=EFTQRY_" AND [EFTPAY]PRI'=1"
	
	do INIT(1)
	
	quit
	
INIT(Number %ProcessMode)	//

	/*
	 The following is needed for when these functions are called from the
	 teller posting screen.
	*/

	type public String EFTQRY, OLNTB, PAYMET, VFMQ
	type public Number %PAGE, %PG, CANCEL, DELETE, STDPAY, UPDATE
	
	type String GLQRY
	
	set GLQRY="{GLAD.TYPE}'=""H"""

	set %PG = 0 
	set %PAGE = 1
	kill OLNTB,VFMQ
	
	set CANCEL = CANCEL.get()
	set UPDATE = 0

	if 'CANCEL set UPDATE=%ProcessMode=1
	set DELETE = %ProcessMode=3 
	set STDPAY = STDPAY.get()
	if 'PAYMET.exists() set PAYMET="CC"
	if STDPAY=1 set:%ProcessMode EFTQRY=EFTQRY_" AND [EFTPAY]FREQUENCY'="""""
	else  if STDPAY=0 set:%ProcessMode EFTQRY=EFTQRY_" AND [EFTPAY]FREQUENCY="""""

	type RecordEFTPAY fEFTPAY
	type RecordDEP dep
	type RecordCIF cif

	do VPG(.fEFTPAY,.dep,.cif)

	quit


VPG(RecordEFTPAY fEFTPAY,RecordDEP dep,RecordCIF cif)	// Page control

	type public Number %PG, EFTRICO
	type public String VFMQ
	
	type Boolean FINISH
	type Number SAVPG
	
	set FINISH=0

	for  do { quit:FINISH
		
		if %PG=0 do VPG00(.fEFTPAY,.dep,.cif)
		
		/*
		Save the value of %PG since it has been killed in the DBS 
		routine calls
		*/
		set SAVPG = %PG
		if %PG=1 do VPG01(.fEFTPAY,.dep,.cif)
		if '%PG.exists() set %PG = SAVPG
		
		if %PG>1 do VPG02(.fEFTPAY)

		// Process completed/aborted
		if "CDFQ"[VFMQ do VER(.fEFTPAY) set FINISH=1 quit

		set %PG=%PG+1
		}
	quit

VPG00(RecordEFTPAY fEFTPAY,RecordDEP dep,RecordCIF cif)	// Set up

	type public Boolean ER, gl, ogl
	type public Number %PG, CANCEL, CID, EFTRICO, GL, SEQ, STDPAY
	type public String %READ, %NOPRMT, %TAB(), DCC, HDG2, IO, OSRC, SRC, VFMQ 
	
	type Number msg
	
	set GL="" 
	set DCC="" 
	set SEQ="" 
	set CID=""
	
	/*
	 set HDG2 for a parameter, not for heading. Rachel Yang 10/5/94
	 MSG 2531: Standing
	 Set HDG2 only if not reviewing rejected orders, because SRC isn't
	 set yet. - CAJ 12/15/97
	*/
	 
	if 'EFTRICO.exists() do {

		new CKEY 
		
		set CKEY=$S(OSRC.exists():OSRC,1:SRC)
		type RecordCTBLEFTTYPE ctblefttype = Db.getRecord("CTBLEFTTYPE","KEY=:CKEY")
		
		// Standing
		set HDG2=$S(STDPAY:$$^MSG(2531),'STDPAY:"")
		set HDG2=HDG2_(ctblefttype.desc)
		}

	// Account Number
	set %TAB("CID")=".CID1/XPP=D CIDPP^EFTPAY"
	if %ProcessMode set %TAB("SEQ")="[EFTPAY]SEQ/TBL=[EFTPAY]:QU EFTQRY/XPP=D POST^EFTPAY"
	set %TAB("GL")=".GL/TBL=[GLAD]:QUERY GLQRY/XPP=D GLPP^EFTPAY/XPR=D GLPRE^EFTPAY"
	if ((%ProcessMode=2)&('CANCEL)) set %TAB("IO")=$$IO^SCATAB($I)

	// Debit Cost Center
	set %TAB("DCC")="[EFTPAY]CC/TBL=[UTBLCCNTR]CC"

	if '%ProcessMode set %READ="@@%FN,,,CID,GL,DCC/REQ"
	else  set %READ="@@%FN,,,CID,GL,SEQ/REQ"

	if ((%ProcessMode=2)&('CANCEL)) set %READ=%READ_",,IO/REQ"
	set %NOPRMT="C"
	
	do ^UTLREAD 
	
	if "Q"[VFMQ set ER=1,%PG=0 quit

	set fEFTPAY=Db.getRecord("EFTPAY","CID=:CID,SEQ=:SEQ")
	set dep=Db.getRecord("DEP","CID=:CID")
	set cif=Db.getRecord("CIF","ACN=:dep.acn")

	// If reviewing rejected orders, set the SRC now.  Also set HDG2.
	if EFTRICO.exists() do {
		set SRC=fEFTPAY.efttype
		type RecordCTBLEFTTYPE ctblefttype = Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
		
		// Standing
		set HDG2=$S(STDPAY:$$^MSG(2531),'STDPAY:"")
		set HDG2=HDG2_(ctblefttype.desc)
		}

	if 'GL.isNull() do {
		set CID=GL 
		set gl=1 
		set ogl=1
		}
	else  do {
		set gl=0 
		set ogl=0
		}

	if %ProcessMode do {
		set msg = 1
		if 'fEFTPAY.msg1,'fEFTPAY.msg2,'fEFTPAY.msg3,'fEFTPAY.msg4,'fEFTPAY.rectype set msg=0
		}

	if ((%ProcessMode=2)&('CANCEL)),IO'=$I do OPEN^SCAIO
	quit


CIDPP	// Check if account set up for Payment Orders

	new RECORD

	type public Boolean %OSAVE, ER, ogl
	type public Number %EXT, CID, EFTRICO, GL
	type public String RM, SRC, X

	if X="" quit
	
	// Not permitted to enter both a customer and a G/L number
	if 'GL.isNull() set ER=1 set RM=$$^MSG(2045) quit
	set %EXT=1 
	
	do ^UACN 

	if ER quit

	// ~p1 Not a valid account number
	if '+CID set RM=$$^MSG(3058,CID) set ER=1 quit

        // Check to see if payment type is ok with this account.
        type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	// Account ~p1 is closed
	if dep.stat=4 set ER=1 set RM=$$^MSG(6050,CID) quit

	// For reviewing rejected orders,
	// we don't need to do the rest of this section.  Do two lines then Quit.
	if EFTRICO.exists() do { quit

		if %OSAVE do GOTO^DBSMACRO("@SEQ")

		if '%OSAVE do GOTO^DBSMACRO("END")
		}

	new STBLEFT
	// SELECT STBLEFT FROM CTBLEFTTYPE WHERE KEY=:SRC
	type RecordCTBLEFTTYPE ctblefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
	set STBLEFT=ctblefttype.stbleft

	// Payment orders not permitted for account ~p1
	if STBLEFT["PO",+dep.eftdeb=0 set ER=1 set RM=$$^MSG(3805,CID) quit

	// Collection orders not permitted for account ~p1
	if STBLEFT["CO",+dep.eftreq=0 set ER=1 set RM=$$^MSG(3810,CID) quit

	// Direct debits not permitted for account ~p1
	if STBLEFT="DD",+dep.eftdd=0 set ER=1 set RM=$$^MSG(5085,CID) quit

	if %OSAVE do GOTO^DBSMACRO("@SEQ")

	if '%OSAVE do GOTO^DBSMACRO("END")

	set ogl=0
	quit


GLPRE	//
	quit

CCPRE	//
	quit


GLPP	// G/L Account post processor
	
	type public Boolean ER
	type public Number CID, ogl
	type public String RM, SRC, X
	
	// Must enter either customer account or G/L account
	if X.isNull() & CID.isNull() set ER=1 set RM=$$^MSG(1831) quit
	quit:X.isNull()

	set CID=X
	set ogl=1
	quit


POST	//Post processor on seq.
 
	new Z
	type public Boolean %OSAVE, DELETE, ER, STDPAY
	type public Number CANCEL, CID, UPDATE
	type public String inst, RM, SRC, X
	
	type Number ourinst, ourreg, theirreg
	
		
	// EFT record number ~p1 does not exist
	if 'Db.isDefined("EFTPAY","CID=:CID,SEQ=:X") set ER=1 set RM=$$^MSG(887,X) quit

	type RecordEFTPAY eftpay=Db.getRecord("EFTPAY","CID=:CID,SEQ=:X")

	// Cannot delete EFT record with a status of ~p1
	if DELETE & (eftpay.status'="A"),(eftpay.status'="Y") do {
		new STAT
		set STAT=eftpay.status
		set ER=1 
		type RecordSTBLESTAT stblestat=Db.getRecord("STBLESTAT","STATUS=:STAT")
		set RM=$$^MSG(433,stblestat.desc)
		}

	// Cannot delete EFT record with a status of ~p1
	if %OSAVE=1&'(eftpay.status'="A"!(eftpay.status'="Y")) set ER=1 set RM=$$^MSG(433,eftpay.recacct)

	if CANCEL do { quit:ER
		
		// Cannot cancel EFT record with a status of ~p1
		if (eftpay.status'="C") do { quit
			new STAT
			set STAT=eftpay.status
			set ER=1 
			type RecordSTBLESTAT stblestat=Db.getRecord("STBLESTAT","STATUS=:STAT")
			set RM=$$^MSG(419,stblestat.desc)
			}

		new inst
		new onus
		set inst=eftpay.recinst
		type RecordUTBLEFTINST utbleftinst=Db.getRecord("UTBLEFTINST","KEY=:inst")
		set onus=utbleftinst.onus

		// Cannot cancel "on us" payment order.  Use posting screen to reverse.
		type RecordCTBLEFTTYPE ctblefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
		new SRCHDG 
		set SRCHDG=ctblefttype.desc
		if onus set ER=1 set RM=$$^MSG(418,SRCHDG) quit

		type RecordCUVAR cuvar=Db.getRecord("CUVAR",)
		set ourinst=cuvar.iso

		type RecordUTBLEFTINST utblefinst=Db.getRecord("UTBLEFTINST","KEY=:ourinst")
		set ourreg=utblefinst.region

		type RecordUTBLEFTINST utblefinst1=Db.getRecord("UTBLEFTINST","KEY=:inst")
		set theirreg=utblefinst1.region
		set SRC=eftpay.efttype
		}

	if UPDATE do { quit:ER
		// Can only update EFT records with status of A,Y
		// Cannot update EFT record with a status of ~p1
		if (eftpay.status'="A"),(eftpay.status'="Y"),(eftpay.status'="PP"),(eftpay.status'="PR") set ER=1 do {
			new ESTAT
			set ESTAT=eftpay.status
			type RecordSTBLESTAT stblestat=Db.getRecord("STBLESTAT","STATUS=:ESTAT")
			set RM=$$^MSG(7669,stblestat.desc)
			}
		if (eftpay.status'="A"),(eftpay.status'="Y"),(eftpay.status'="PP"),(eftpay.status'="PR") quit

		}

	if STDPAY do { quit:ER
		if eftpay.frequency'="" quit
		new SAVSRC 
		set SAVSRC=SRC

		// SELECT STBLEFT FROM CTBLEFTTYPE WHERE KEY=:SRC
		type RecordCTBLEFTTYPE ctblefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
		set SRC=ctblefttype.stbleft

		// Use function PAYORD2 to modify non-standing payment orders
		if SRC="PO" set ER=1 set RM=$$^MSG(2829) quit

		// Use function PAYORD2 to modify non-standing payment orders
		if SRC="SPO" set ER=1 set RM=$$^MSG(2829) quit

		// Use function COLORD2 to modify non-standing collection orders
		if SRC="CO" set ER=1 set RM=$$^MSG(2827) quit

		// Use function COLORD2 to modify non-standing collection orders
		if SRC="SCO" set ER=1 set RM=$$^MSG(2827) quit

		// Use function PAYORD5 to cancel non-standing payment orders
		if SRC="POC" set ER=1 set RM=$$^MSG(2830) quit

		// Use function COLORD5 to cancel non-standing collection orders
		if SRC="COC" set ER=1 set RM=$$^MSG(2828) quit
		set SRC=SAVSRC
		}

	if 'STDPAY do { quit:ER
		if eftpay.frequency="" quit
		new SAVSRC 
		set SAVSRC=SRC

		// SELECT STBLEFT FROM CTBLEFTTYPE WHERE KEY=:SRC
		type RecordCTBLEFTTYPE ctblefttype=Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
		set SRC=ctblefttype.stbleft

		// Use function STDPAY2 to modify standing payment orders
		if SRC="PO" set ER=1 set RM=$$^MSG(2833) quit

		// Use function STDPAY2 to modify standing payment orders
		if SRC="SPO" set ER=1 set RM=$$^MSG(2833) quit

		// Use function STDCOL2 to modify standing collection orders
		if SRC="CO" set ER=1 set RM=$$^MSG(2831) quit

		// Use function STDCOL2 to modify standing collection orders
		if SRC="SCO" set ER=1 set RM=$$^MSG(2831) quit

		// Use function STDPAY5 to cancel standing payment orders
		if SRC="POC" set ER=1 set RM=$$^MSG(2834) quit

		// Use function STDCOL5 to cancel standing collection orders
		if SRC="COC" set ER=1 set RM=$$^MSG(2832) quit
		set SRC=SAVSRC
		}
	quit


VPG01(RecordEFTPAY fEFTPAY,RecordDEP dep,RecordCIF cif)	// Screen
	new %DUP
	type public Boolean ER
	type public Number CANCEL, CID, EFTRICO, SEQ
	type public String EFTPAY(,), PDM, PGM, RM, RECACCT, RECGL, SID, SRC, VFMQ
	
	type Number ttype
	type String screen
		
	if 'EFTRICO.exists() set SID="EFTPAY"
	if EFTRICO.exists() set SID="EFTRICO"

	// Record locked by another user
	if %ProcessMode lock +EFTPAY(CID,SEQ):2 else  set VFMQ="Q" set ER=1 set RM=$$^MSG(2333) quit

	if CANCEL do CANCEL(.fEFTPAY,.dep,.cif) quit

	do ^DBSSCR(SID,.PDM)
	set screen = PGM

	if %ProcessMode do {
		set fEFTPAY=Db.getRecord("EFTPAY","CID=:CID,SEQ=:SEQ")
		do fEFTPAY.setAuditFlag(1)
		if SRC'=fEFTPAY.efttype set SRC=fEFTPAY.efttype
		set ttype=fEFTPAY.ttype
		if '(ttype#2) set RECACCT=fEFTPAY.recacct
		else  set RECGL=fEFTPAY.recacct
		}

	if SID="EFTPAY" do DRV^USID(%ProcessMode,SID,.fEFTPAY,.dep,.cif,,)
	if SID="EFTRICO" do DRV^USID(%ProcessMode,SID,.fEFTPAY,.dep,.cif,,)

	quit


VPG02(RecordEFTPAY fEFTPAY)	// Display PO message screen
	
	type public Number MSG
	type public String SID, PDM, PGM
	
	set MSG=1
	set SID="EFTMSG"
	do ^DBSSCR(SID,.PDM)
	if PGM.length() do DRV^USID(%ProcessMode,SID,.fEFTPAY,,,,)
	quit


CANCEL(RecordEFTPAY fEFTPAY,RecordDEP dep,RecordCIF cif)	// Cancellation of Orders
	
	type public Boolean ER
	type public Number %PG, onus
	type public String %fkey, EFTTYPE, HDG2, OSRC, SID, VFMQ, XSEQ
	
	type RecordCTBLACHID ctblachid
	
	new EJD,onus
	set EJD=%SystemDate 
	set onus=0
	do fEFTPAY.setAuditFlag(1)
	set fEFTPAY.status="CA"

	do DRV^USID(%ProcessMode,SID,.fEFTPAY,.dep,.cif,,)

	set %PG=1
	quit:VFMQ="Q"
	set VFMQ=$$YN^DBSMBAR("ENT,PUP,PDN,ESC",HDG2)

	if 'VFMQ!(%fkey="ESC") set VFMQ="Q" quit

	set EFTTYPE = OSRC
	do create(.ctblachid,.fEFTPAY)

	if ER set VFMQ="Q" quit

	// Beneficiary Address Line 2
	set VFMQ="F" 
	set fEFTPAY.benad2="CA"
		
	// Sender's Nostro/Covering Loro Account
	set fEFTPAY.sendnos = XSEQ

	quit


create(RecordCTBLACHID ctblachid,RecordEFTPAY fEFTPAY)	//
	
	new efd,procdt,ER,SEQ
	type public Number CID, LOCK, onus, tries, XSEQ, ZSEQ
	type public String EFTPAY(,), EFTTYPE, OSRC, RM, SRC
	
	type Number Z
	
	set ER=0

	// Transaction Reference Number
	set efd=$$date^EFTFUNCS(%SystemDate,"1DA",onus,1,SRC,fEFTPAY.crcd)

	type RecordCTBLEFTTYPE ctblefttype=Db.getRecord("CTBLEFTTYPE","KEY=:EFTTYPE")
	if 'tries.exists() set tries=ctblefttype.tries

	//map actual amount to amount
	set fEFTPAY.relrefno=fEFTPAY.benacn

	//process date
	set fEFTPAY.cifinst=procdt

	//Effective date
	set fEFTPAY.ord3=efd

	//POCs should never have freqs.
	set fEFTPAY.ord4=""

	//Added
	set fEFTPAY.benad2="A"

	//Reset retries
	set fEFTPAY.benad4=tries

	//Reset actual amoumt
	set fEFTPAY.benacn=""

	//Amount type should always be 1  PC 2/2/94
	set fEFTPAY.origin=1

	//Payment type
	set fEFTPAY.efttype=OSRC
	
	set LOCK=1
	for Z=1:1:10 do { quit:'LOCK
		type RecordEFTPAY1 eftpay1=Db.getRecord("EFTPAY1","CID=:CID")
		set SEQ=eftpay1.seq+1
		lock +EFTPAY(CID,SEQ):1
		else  quit
		if Db.isDefined("EFTPAY","CID=:CID,SEQ=:SEQ") lock -EFTPAY(CID,SEQ) quit
		set LOCK=0 
		set ZSEQ=SEQ
		}

	if LOCK set ER=1 set RM=$$^MSG(2333) quit

	if (%ProcessMode=0)!(%ProcessMode=1) do fEFTPAY.save()

	if %ProcessMode=3 do Db.delete("EFTPAY","CID=:CID AND SEQ=:SEQ")

	lock -EFTPAY(CID,SEQ)
	set XSEQ=SEQ

	quit


ERR	//
	
	type public Boolean ER
	type public String VFMQ
	
	set ER=1 
	set VFMQ="Q"
	quit


VER(RecordEFTPAY fEFTPAY) //

	type public Boolean DELETE
	type public Number CANCEL
	type public String VFMQ
	
	if ((%ProcessMode=2)&('CANCEL))!(%ProcessMode=4)!(VFMQ="Q") do END quit

	if DELETE do {
		// Beneficiary Address Line 2
		set fEFTPAY.benad2="D" 
		set %ProcessMode=1
		}

	do FILE(.fEFTPAY)
	do END

	quit


FILE(RecordEFTPAY fEFTPAY)	// File data
	
	type public Boolean ER
	type public Number CANCEL, CID, LOCK, SEQ, ZSEQ
	type public String EFTPAY(,), EFTTYPE, RM, SRC
	

	set %ProcessMode=$S(CANCEL:1,1:%ProcessMode)
	set EFTTYPE=SRC

	type RecordEFTPAY1 eftpay1

	
	if '%ProcessMode do { quit:$G(ER)
		new LOCK,Z
		set LOCK=1
		for Z=1:1:10 do { quit:'LOCK
			set eftpay1=Db.getRecord("EFTPAY1","CID=:CID")
			set SEQ=eftpay1.seq+1
			lock +EFTPAY(CID,SEQ):1
			else  quit
			if Db.isDefined("EFTPAY","CID=:CID,SEQ=:SEQ") lock -EFTPAY(CID,SEQ) quit
			set LOCK=0 
			set ZSEQ=SEQ
			}
		
		if LOCK set ER=1 set RM=$$^MSG(2333) quit
		}

	if (%ProcessMode=0)!(%ProcessMode=1) do fEFTPAY.save()
	if %ProcessMode=3 do Db.delete("EFTPAY","CID=:CID AND SEQ=:SEQ")

	quit


END	//
	type public Boolean DELETE, ER
	type public Number CANCEL, CID, EFTRICO, SEQ
	type public String %TAB, EFTPAY(,), HDG2, RM, VFMQ
	
	if (CID.exists() & SEQ.exists()) lock -EFTPAY(CID,SEQ)
	kill %TAB

	// If doing EFTRICO processing, HDG2 will probably be undefined.
	// Payment order/collection order
	
	if (EFTRICO.exists())&(HDG2.exists()) set HDG2=$$^MSG(2627)
	if ER.get()!(%ProcessMode=2)!((%ProcessMode=4)&('CANCEL)) quit
	set ER="W"
	if VFMQ="Q" do {

		// ~p1 for account ~p2 not created
		if CANCEL set RM=$$^MSG(5987,HDG2,CID.get()) quit

		// ~p1 for account ~p2 not deleted
		if DELETE set RM=$$^MSG(5991,HDG2,CID.get()) quit

		// ~p1 for account ~p2 not created
		if %ProcessMode=0 set RM=$$^MSG(5987,HDG2,CID.get()) quit

		// ~p1 for account ~p2 not modified
		if %ProcessMode=1 set RM=$$^MSG(5989,HDG2,CID.get()) quit

		// ~p1 for account ~p2 not done
		else  set RM=$$^MSG(5993,HDG2,CID.get())
		}
	else  do {

		// ~p1 for account ~p2 created
		if CANCEL set RM=$$^MSG(5986,HDG2,CID.get()) quit

		// ~p1 for account ~p2 deleted
		if DELETE set RM=$$^MSG(5990,HDG2,CID.get()) quit

		// I %O=0 S RM=$$^MSG(5986,HDG2,$G(CID)) Q ; MJZ - 33617
		// ~p1 for account ~p2 created
		
		if %ProcessMode=0 set RM=$$^MSG(5986,HDG2,CID.get()_" "_$$^MSG(6742,SEQ.get())) quit

		// ~p1 for account ~p2 modified
		if %ProcessMode=1 set RM=$$^MSG(5988,HDG2,CID.get()) quit

		// ~p1 for account ~p2 done
		else  set RM=$$^MSG(5992,HDG2,CID.get())
		}
	quit



SRCQRY	// SRC Query

	/*
	   This section builds variable SRCQRY for use with EFTQRY.  It takes
	   SRC, and if the user is working with standing payments/collections,
	   includes all payment types which may occur based upon a frequency.
	   These types include SPO, POF and POFA; and SCO, COF and COFA.

	*/
	type public Number STDPAY
	type public String SRC, SRCQRY
	
	set SRCQRY=SRC
	if STDPAY=1 do {
		set SRCQRY=SRC
		set SRCQRY=SRCQRY_","_$E(SRC,2,3)_"F"
		set SRCQRY=SRCQRY_","_$E(SRC,2,3)_"FA"
		}

	quit


EFTRICO(X)	//

	/*
	   This section was introduced with STBLEFTTYPE project.
	   This section return string to build query for the rejected
	   payment screen

	*/
	new EFT,I,VALUE
	
	type public String TYPE
	
	set (EFT,VALUE)=""
	for I=1:1:X do {
		if I=1 set TYPE="PO"
		if I=2 set TYPE="CO"
		if I=3 set TYPE="COVAL"

		type ResultSet rs=Db.select("KEY","CTBLEFTTYPE","STBLEFT=:TYPE")
		while rs.next() set VALUE=VALUE_rs.getCol("KEY")_","
		}

	quit $E(VALUE,1,$L(VALUE)-1)


		// pre-processor for the Payment order cancelation
ZSRC(SRC)	// collate thought the eftpay records and get all the seq # with "C" stat

	type String EFT,VALUE
	
	set (EFT,VALUE)=""

	type RecordCTBLEFTTYPE ctblefttype

	type DbSet ds=Db.selectDbSet("CTBLEFTTYPE")
	while ds.next() do {
		set ctblefttype=ds.getRecord("CTBLEFTTYPE")
		set EFT=ctblefttype.stbleft
		if SRC=ctblefttype.stbleft set VALUE=VALUE_EFT_","
		}
	quit $E(VALUE,1,$L(VALUE)-1)
	

vSIG()	quit "60612^19131^Ravindra Rathi^20483"	// Signature - LTD^TIME^USER^SIZE
