WTHAUTFL(RecordWTHAUT wthaut, String vpar, Boolean vparNorm) // WTHAUT - Withdrawal Authorization Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             11/22/2003
	// Trigger Definition (4)                      09/26/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = wthaut.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(wthaut,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(wthaut,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = wthaut.cid
	type String AUTNUM = wthaut.autnum

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("AUTNUM").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("WTHAUT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("WTHAUT","CID = :wthaut.cid and AUTNUM = :wthaut.autnum") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String AUTNUM

	type RecordWTHAUT wthaut = Db.getRecord("WTHAUT","CID=:CID,AUTNUM=:AUTNUM")
	if (%ProcessMode = 2) do {
		do wthaut.setMode(2)

		do WTHAUTFL(wthaut,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordWTHAUT wthaut

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("WTHAUT","CID = :wthaut.cid and AUTNUM = :wthaut.autnum") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(wthaut))  S ^WTHAUT(vobj(wthaut,-3),vobj(wthaut,-4))=vobj(wthaut)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordWTHAUT wthaut


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^WTHAUT(vobj(wthaut,-3),vobj(wthaut,-4))           // Delete Record
	quit


vinit // Initialize default values

	type public RecordWTHAUT wthaut

	// Type local variables for access keys for defaults
	type public String CID
	type public String AUTNUM

	if wthaut.trproc.isNull() set wthaut.trproc = 0        // trproc
	quit


vreqn // Validate required data items

	type public RecordWTHAUT wthaut

	if wthaut.trproc.isNull() do vreqerr("TRPROC") quit
	if wthaut.wthpa.isNull() do vreqerr("WTHPA") quit
	if wthaut.wthrc.isNull() do vreqerr("WTHRC") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordWTHAUT wthaut

	if wthaut.cid.isNull() do vreqerr("CID") quit
	if wthaut.autnum.isNull() do vreqerr("AUTNUM") quit

		if vx("TRPROC").exists(),wthaut.trproc.isNull() do vreqerr("TRPROC") quit
		if vx("WTHPA").exists(),wthaut.wthpa.isNull() do vreqerr("WTHPA") quit
		if vx("WTHRC").exists(),wthaut.wthrc.isNull() do vreqerr("WTHRC") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("WTHAUT","MSG",1767,"WTHAUT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("AMT").exists()!vx("EFD").exists()!vx("WTHPA").exists()!vx("WTHTRACC").exists()!vx("FREQ").exists()!vx("EXPD").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - WTHAUT After Insert Trigger

	type public RecordWTHAUT wthaut
	/* 
	   ----- Revision History ---------------------------------------------
										 
											09/26/05 - RADHIKA - CR 16891
																						Eliminated PSL Warnings. 
																					 
	   07/23/01 - TITOVE - 46053
		      Retrofitted the following from V6.2:
			02/21/00 - OYEGUNZ - 39615
			Default the value of PENCALC to PENAMT.
	*/

	type public Number XPENAMT,XPENCALC,CID,AUTNUM
	type public Boolean ER

	set XPENAMT=wthaut.penamt
	set XPENCALC=wthaut.pencalc

	if XPENAMT="" do { 
		type RecordWTHAUT wth= Db.getRecord("WTHAUT","CID=:CID,AUTNUM=:AUTNUM")
		set wth.penamt=XPENCALC
		do wth.save()
		if ER=1 quit	
 		}
	quit

vau1 // Trigger AFTER_UPDATE - After Update

	type public RecordWTHAUT wthaut
	/*
	-----Revision History --------------------------------------------------
							 
								09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
																		 
	07/23/01 - TITOVE - 46053
		   Added setting of error message in case the payment order
		   associated with withdrawal authorization that is being
		   modified has been deleted. 
		   Retrofitted the following from V6.2:
			02/23/00 - OYEGUNZ - 39615
			When withdrawal amount is changed before w/d trans
			is processed update PENAMT with new PENCALC value.

	12/21/99 - DOUGANM  31126
		   Added missing rs.next() call needed before rs.getCol() call.
		   Removed newing of DATA variable within a block where it was
		   no longer being used.

	09/24/99 - CARROLLJ - 31126
		   Convert to PSL
	
	05/10/99 - ARPAV - 32936
		   Added code to pass expiration date into EFTBUILD
	*/

	// OYEGUNZ - 39615
	type public Boolean ER
	type public Number CID,AUTNUM
	
	if wthaut.amt'=wthaut.amt.oldVal do {
		if ER=1 quit
		type Number XPENCALC
		
		set XPENCALC=wthaut.pencalc
		type RecordWTHAUT wth= Db.getRecord("WTHAUT","CID=:CID,AUTNUM=:AUTNUM")
		set wth.PENAMT=XPENCALC
		do wth.save()
		}

	/*		
	If any of the data items which are about to be changed will affect the
	payment orders made, then we need to remove the old payment order and
	add it back.
	*/
	
	new ACN,AMT,BENCITY,BENNAME,CIFEXT,CRCD,DATA,EFTTYPE,ETC,EXPD,EXTACCT
	new EXTACN,EXTINST,EXTSEQ,FREQ,PSEQ,SEQ,TSO,TYPE,XEFD
	
	/*
	If the payment action was not 0, then an existing payment order must have
	existed.  If this is the case, then get the last sequence number for
	this account.
	*/
	
	if '(wthaut.wthpa.oldVal'=wthaut.wthpa),wthaut.wthpa=0 quit 
	if wthaut.wthpa.oldVal>0 do {
		new CNT,FLAG,SEQ,STAT,UTSO,rs
		set FLAG=0
		type ResultSet rs=Db.select("UNIQTSO,SEQ,EFD,STATUS","EFTPAY","CID=:CID","SEQ DESC")
		if rs.isEmpty() quit	// No payment orders
		while rs.next() do { quit:ER  quit:FLAG  
			set UTSO=rs.getCol(1)
			set SEQ=rs.getCol(2)
			set XEFD=rs.getCol(3)
			set STAT=rs.getCol(4)
			do OUT^UTSO(.UTSO,UTSO)
			if AUTNUM'=$G(UTSO("WTHAUT")) quit 
			/* 
			Cannot modify withdrawal authorization if associated
			payment order has been deleted
			*/
			if STAT="D" do Runtime.setErrMSG("WTHAUT",5005) quit:ER

			do Db.update("EFTPAY","STATUS='D'","CID=:CID AND SEQ=:SEQ")
			set FLAG=1
			}
		}
	
	quit:ER

	// Now we have all information necessary to create a new the payment order.
	
	// Get necessary data from authorization file
	type String FRE
	set AMT=wthaut.amt
	set EXTSEQ=wthaut.wthtracc
	set FRE=wthaut.freq
	set EXPD=wthaut.expd
	if $G(XEFD)="" set XEFD=wthaut.efd
	
	// get account data
	
	type ResultSet acn=Db.select("ACN,CRCD,TYPE","ACN","CID=:CID")
	set DATA=acn.getRow()
	set EXTACN=$P(DATA,$C(9),1)
	set CRCD=$P(DATA,$C(9),2)
	set TYPE=$P(DATA,$C(9),3)
	
	if wthaut.wthpa=1 do {
		/*
		Internal transfer uses CUVAR.ISO as transfer institution and EXTSEQ is
		a valid Profile account
		*/
		set EXTACCT=EXTSEQ
		
		type RecordCUVAR cuvar=Db.getRecord("CUVAR")
		set EXTINST=cuvar.ISO
		set BENNAME=""
		set BENCITY=""
		}
	
	if wthaut.wthpa=2 do {
		// Get external sequence information from CIFEXT table
	
		new rs 
		type ResultSet rs=Db.select("EXTACCT,EXTINST,BENNAME,BENCITY","CIFEXT","ACN=:EXTACN") 
		if rs.isEmpty() quit
		set EXTACCT=rs.next(),EXTACCT=rs.getCol(1)
		set EXTINST=rs.getCol(2)
		set BENNAME=rs.getCol(3)
		set BENCITY=rs.getCol(4)
		}
	
	// Set up TSO and ETC
	
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE")
	set ETC=prodctl.DRNMPSEG
	set TSO=""
	set TSO=$$FIELDIN^UTSO(TSO,"EXTNAME",BENNAME)
	set TSO=$$FIELDIN^UTSO(TSO,"EXTCITY",BENCITY)
	set TSO=$$FIELDIN^UTSO(TSO,"WTHAUT",AUTNUM)
	set TSO=$$FIELDIN^UTSO(TSO,"SEGP","")
	
	// Use the frequency to determine if this is a payment order or standing PO
	if FRE="" set EFTTYPE="PO"
	else  set EFTTYPE="SPO"
	
	// Call eftbuild to generate the payment order
	
	do ^EFTBUILD(CID,.PSEQ,EXTACCT,EXTINST,AMT,CRCD,XEFD,FRE,EFTTYPE,0,TSO,ETC,EXPD)
	
	quit 

vbd1 // Trigger BEFORE_DELETE - Before Delete

	type public RecordWTHAUT wthaut
								/*
								-----Revision History--------------------------------------------------
							 
								09/26/05 - RADHIKA - CR 16891
																			Eliminated PSL Warnings.
																		 
								12/21/99 - DOUGANM  31126
																			Removed newing of DATA variable because it is no longer 
		   being used.
	
								09/24/99 - CARROLLJ - 31126
																			Convert to PSL

	If there is a payment order created, then remove the entry from the EFTPAY
	table.
	*/

	type public Number SEQ,FLAG
	type public String UTSO
	type public Boolean ER
			
	// If a cash payment application, no payment order was ever created
	if wthaut.wthpa=0 quit 
	
	// Mark the eftpay record deleted
	set FLAG=0
	
	type ResultSet rs=Db.select("UNIQTSO,SEQ","EFTPAY","CID=:CID","SEQ DESC")
	if rs.isEmpty() quit	// No payment orders
	while rs.next() do { quit:ER  quit:FLAG  
		set UTSO=rs.getCol(1)
		set SEQ=rs.getCol(2)
		do OUT^UTSO(.UTSO,UTSO)
		if AUTNUM'=$G(UTSO("WTHAUT")) quit 
		do Db.update("EFTPAY","STATUS='D'","CID=:CID AND SEQ=:SEQ")
		set FLAG=1
		}
	quit 

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordWTHAUT wthaut
	/*
	-----Revision History --------------------------------------------------
							 
								09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
																		 
								12/20/99 - DOUGANM - 31126
																			Fixed select statement that was converted incorrectly, by
		   removing $P function and replacing with rs.next() and 
		   rs.getCol() calls.
	
								10/27/99 - CAROLLJ - 31126
																			Converted M code into PSL
	
	05/10/99 - ARPAV - 32936
		   Added code to pass expiration date into EFTBUILD

	
	Check the withdrawal payment action.  If the payment action requires
	that a transfer to another account needs to be made, the use EFTBUILD
	to create a payment order for this authorization.
	*/

	new ACN,AMT,BENCITY,BENNAME,CIFEXT,CRCD,DATA,EFTTYPE,ETC,EXPD,EXTACCT
	new EXTACN,EXTINST,EXTSEQ,FREQ,PSEQ,SEQ,TSO,TYPE,XEFD
	type public String FRE
	type public Number CID

	// Do not create a payment order	
	if wthaut.wthpa=0 quit          
	
	// Get necessary data from authorization file
	set AMT=wthaut.amt
	set EXTSEQ=wthaut.wthtracc
	set FRE=wthaut.freq
	set XEFD=wthaut.efd
	set EXPD=wthaut.expd
	
	// get account data
	type ResultSet acn=Db.select("ACN,CRCD,TYPE","ACN","CID=:CID")
	set DATA=acn.getRow()	
	set EXTACN=$P(DATA,$C(9),1)
	set CRCD=$P(DATA,$C(9),2)
	set TYPE=$P(DATA,$C(9),3)
	
	if wthaut.wthpa=1 do {
		/*
		Internal transfer uses CUVAR.ISO as transfer institution and EXTSEQ is
		a valid Profile account
		*/
		set EXTACCT=EXTSEQ
		type RecordCUVAR cuvar=Db.getRecord("CUVAR")
		set EXTINST=cuvar.ISO
		set BENNAME=""
		set BENCITY=""
		}
	
	if wthaut.wthpa=2 do {
		// Get external sequence information from CIFEXT table
		new rs 
		type ResultSet rs=Db.select("EXTACCT,EXTINST,BENNAME,BENCITY","CIFEXT","ACN=:EXTACN") 
	    	if rs.isEmpty() quit
		set EXTACCT=rs.next(),EXTACCT=rs.getCol(1)
		set EXTINST=rs.getCol(2)
		set BENNAME=rs.getCol(3)
		set BENCITY=rs.getCol(4)
		}
	
	// Set up TSO and ETC
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE")
	set ETC=prodctl.DRNMPSEG
	set TSO=""
	set TSO=$$FIELDIN^UTSO(TSO,"EXTNAME",BENNAME)
	set TSO=$$FIELDIN^UTSO(TSO,"EXTCITY",BENCITY)
	set TSO=$$FIELDIN^UTSO(TSO,"WTHAUT",AUTNUM)
	set TSO=$$FIELDIN^UTSO(TSO,"SEGP","")
	
	// Use the frequency to determine if this is a payment order or standing PO
	if FRE="" set EFTTYPE="PO"
	else  set EFTTYPE="SPO"
	
	// Call eftbuild to generate the payment order
	do ^EFTBUILD(CID,.PSEQ,EXTACCT,EXTINST,AMT,CRCD,XEFD,FRE,EFTTYPE,0,TSO,ETC,EXPD)
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordWTHAUT wthaut

	set X = wthaut.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = wthaut.autnum if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("AUTNUM", vRM) quit
	set X = wthaut.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"WTHAUT.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = wthaut.amttype if 'X.isNull(),'Db.isDefined("STBLAMTTYP","X") set vRM = $$^MSG(1485,X) do vdderr("AMTTYPE", vRM) quit
	set X = wthaut.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = wthaut.expd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPD", vRM) quit
	set X = wthaut.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[WTHAUT]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	set X = wthaut.penamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"WTHAUT.PENAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = wthaut.pencalcs if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"WTHAUT.PENCALCS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if wthaut.tc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TC", vRM) quit
	if '("01"[wthaut.TRPROC) set vRM=$$^MSG(742,"L") do vdderr("TRPROC", vRM) quit
	if wthaut.trref.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TRREF", vRM) quit
	if wthaut.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	set X = wthaut.wthpa if 'X.isNull(),'Db.isDefined("STBLWTHPA","X") set vRM = $$^MSG(1485,X) do vdderr("WTHPA", vRM) quit
	set X = wthaut.wthrc if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("WTHRC", vRM) quit
	set X = wthaut.wthtracc if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("WTHTRACC", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("WTHAUT","MSG",979,"WTHAUT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordWTHAUT wthaut

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("AUTNUM").exists() set vux("AUTNUM") = vx("AUTNUM")
	do vkey(1) set voldkey = wthaut.cid_","_wthaut.autnum  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = wthaut.cid_","_wthaut.autnum  // Copy new keys into object
	type RecordWTHAUT vnewrec = wthaut.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("WTHAUT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordWTHAUT wthaut

	if vux("CID").exists() set wthaut.cid = vux("CID").piece("|",i)
	if vux("AUTNUM").exists() set wthaut.autnum = vux("AUTNUM").piece("|",i)
	quit
