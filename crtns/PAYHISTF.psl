PAYHISTF(RecordPAYHIST payhist, String vpar, Boolean vparNorm) // PAYHIST - Electronic Payment History Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (12)             07/20/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = payhist.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(payhist,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(payhist,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PAYHIST",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PAYHIST","CID = :payhist.cid and SEQ = :payhist.seq and TSEQ = :payhist.tseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ
	type public String TSEQ

	type RecordPAYHIST payhist = Db.getRecord("PAYHIST","CID=:CID,SEQ=:SEQ,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do payhist.setMode(2)

		do PAYHISTF(payhist,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPAYHIST payhist

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PAYHIST","CID = :payhist.cid and SEQ = :payhist.seq and TSEQ = :payhist.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(payhist)) S ^PAYHIST(vobj(payhist,-3),vobj(payhist,-4),vobj(payhist,-5))=vobj(payhist)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPAYHIST payhist


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^PAYHIST(vobj(payhist,-3),vobj(payhist,-4),vobj(payhist,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordPAYHIST payhist

	// Type local variables for access keys for defaults
	type public String CID
	type public String SEQ
	type public String TSEQ

	if payhist.cdt.isNull() set payhist.cdt = +$H          // cdt
	if payhist.time.isNull() set payhist.time = $P($H,",",2) // time
	type public String %UID
	if payhist.uid.isNull() set payhist.uid = %UID         // uid
	quit


vreqn // Validate required data items

	type public RecordPAYHIST payhist

	if payhist.cdt.isNull() do vreqerr("CDT") quit
	if payhist.src.isNull() do vreqerr("SRC") quit
	if payhist.tjd.isNull() do vreqerr("TJD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPAYHIST payhist

	if payhist.cid.isNull() do vreqerr("CID") quit
	if payhist.seq.isNull() do vreqerr("SEQ") quit
	if payhist.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("CDT").exists(),payhist.cdt.isNull() do vreqerr("CDT") quit
		if vx("SRC").exists(),payhist.src.isNull() do vreqerr("SRC") quit
		if vx("TJD").exists(),payhist.tjd.isNull() do vreqerr("TJD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PAYHIST","MSG",1767,"PAYHIST."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordPAYHIST payhist
	if 'payhist.seq.isNull() set vfkey("^EFTPAY("_""""_payhist.cid_""""_","_""""_payhist.seq_""""_")")="PAYHIST(CID,SEQ) -> EFTPAY"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordPAYHIST payhist
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("EFTPAY",":payhist.cid,:payhist.seq") set vERRMSG = $$^MSG(8563,"PAYHIST(CID,SEQ) -> EFTPAY") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPAYHIST payhist

	set X = payhist.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = payhist.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = payhist.tseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	set X = payhist.brcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCD", vRM) quit
	set X = payhist.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	set X = payhist.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	if payhist.src.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SRC", vRM) quit
	if payhist.tcmt.length()>60 set vRM = $$^MSG(1076,60) do vdderr("TCMT", vRM) quit
	set X = payhist.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	set X = payhist.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	if payhist.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if payhist.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PAYHIST","MSG",979,"PAYHIST."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPAYHIST payhist

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = payhist.cid_","_payhist.seq_","_payhist.tseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = payhist.cid_","_payhist.seq_","_payhist.tseq // Copy new keys into object
	type RecordPAYHIST vnewrec = payhist.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PAYHIST",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordPAYHIST payhist

	if vux("CID").exists() set payhist.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set payhist.seq = vux("SEQ").piece("|",i)
	if vux("TSEQ").exists() set payhist.tseq = vux("TSEQ").piece("|",i)
	quit
