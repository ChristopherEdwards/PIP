MRPC100(String RETURN,		// Activity detail			/REF:W
	Number VERSION,		// MRPC100 version number
	Number CID,		// Account number
	Date BJD,		// Beginning Date
	Date EJD)		// Ending Date				/NOREQ

	/*
	ORIG: JERUCHIMC - 11/30/00
	DESC: Interest Accrual Projection Report

	 RETURNS:
		. $$	Error message					/TYP=T
			Null = No error
	
	 RELATED:
		. $$^PBSMRPC - MRPC Service Class Driver
	
	---- Revision History ------------------------------------------------
	
	09/15/06 - NATRAJAH - CR 22040
		   Modified FUTURE section, set the EJD value to TOTJD 
		   variable, since EJD variable is getting updated in 
		   EXEC^UANTIC call.
		   
	04/06/06 - Srinivar - CR 20381
		   Modified the FUTURE section by removing the code that kills 
		   BALIRN array when interest rates between dates are the same.
		   The above change will prevent the error "Mumps to Power Builder
		   filter failed" by populating the DATA arrays DATA(1) and DATA(2). 
		   		   
	02/22/06 - Radhika - CR 19229
                   . Modified Runtime.setErrMSG method as RM=$$^MSG since the 
                     message is not getting retrieved from STBLMSG.
                   . Modified PAST section to pass the parameter WIRN() as
                     reference to retain the values.
                     
        02/09/06 - SmithCD - CR 19505
		   . Repeated last change for the EXEC^UANTIC call in the 
		     FUTURE section
		   . Added Class.new() for ttx to avoid potential problems 
		     with incremental loading of objects
		   . Added Runtime transaction fence to rollback database 
		     updates that UANTIC will cause as a result of account 
		     projection
		   . Changed to use dep and ln objects instead of attempting 
		     re-define acn as RecordDEP / RecordLN to avoid undefined 
		     undefined error
	  
	10/07/05 - SmithCD - CR 16885
		   Removed 4th and 5th parameters in call to EXEC^UANTIC.
		   Removed old revision history.
	
	05/31/05 - SmithCD - CR 15902
		   Moved BALIRN from the 11th parameter in calls to ^UANTIC 
		   to the 10th position to account for the FMIRN() parameter 
 		   removal in EXEC^UANTIC.

	*/
 	
	// Version number of client message is not compatible with server 
	if VERSION.get()'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))

	type public Number ER
	type public String ET,RM

	type String DATA(),FLD()

	type literal String TAB=$char(9)

	set DATA(1)=""
	set DATA(2)=""
	set DATA(3)=""
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	
	do Runtime.start("CS")
	
	// Historical data
	if BJD'>%SystemDate do PAST(.acn,BJD,EJD,.DATA())
	if ER quit $$ERROR()

	// Future data
	if EJD>%SystemDate do FUTURE(.acn,BJD,EJD,.DATA())
	if ER quit $$ERROR()
	
	// Reverse database updates resulting from account projection
	do Runtime.rollback()
	
	// Build return value
	set FLD(1)=acn.type_TAB_acn.grp_TAB_acn.lnm_TAB_CID
	set FLD(2)=""
		
	// Transaction detail
	set FLD(3)=DATA(1)_DATA(2)
	
	// Adjustments to accrual
	set FLD(4)=DATA(3)

	set RETURN=$$V2LV^MSG(.FLD,"",0)
	
	quit ""
	

PAST(RecordACN acn,		// Account				/REF:W
     Date BJD,			// Beginning date
     Date EJD,			// Effective date
     String DATA())		// Data

	// Calculate historical data

	type public Number ER
	type public String RM
	
	type Date FD,JD,TD
	type Number IR,PR
	type String BALIRN(),UAVB(),WIRN()

	type literal String TAB=$char(9)
		
	if acn.cls="D" do {
		type RecordDEP dep={RecordDEP}acn
		set JD=dep.odt
		}
	
	if acn.cls="L" do {
		type RecordLN ln={RecordLN}acn
		set JD=ln.dtnt
		}

	// From Date entered is before account open date.
	if JD>BJD set ER=1,RM=$$^MSG(8214)_" ( "_JD.toString()_" )" quit

	set FD=BJD
	set TD=EJD

	/*
	Only calculate up to today, let future section handle everything
	in the future.
	*/
	
	if TD>%SystemDate set TD=%SystemDate
	if TD'>FD quit

	do INIT^UAVB(.acn,acn.cid,FD,TD,"11111111110011101101",,,,.WIRN()) if ER quit
		
	set DATA(3)=UAVB(2).get().piece("|",10)

	/*
	If the date range goes until today or later, call UANTIC to create
	in WIRN from BALIRN just for today.  We need the value if we are
	reporting from the past to today.  If we are going farther
	into the future, we won't use the value, but we still need
	an entry in WIRN because the loop below calculates the
	beginning date of each entry in the report from the next
	date's start minus 1.
	*/
	
	if EJD'<%SystemDate do {

		set BALIRN=1
		type RecordTTX ttx=Class.new("RecordTTX")
		
		do EXEC^UANTIC(.acn,.ttx,,%SystemDate,"01",,,.BALIRN)

		set PR=BALIRN(%SystemDate).piece("|",1)
		set IR=BALIRN(%SystemDate).piece("|",2)
		if acn.cls="D" set WIRN(%SystemDate)=IR_"|"_PR
		if acn.cls="L" set WIRN(%SystemDate)=IR_"||||"_PR
		}

	set JD=""
	for  set JD=WIRN(JD).order() quit:JD.isNull()  do {
		set FD=JD,TD=WIRN(JD).order()

		/*
		If we are only reporting for the past, and this is the last
		entry, then set the 'To date' manually so the full date
		range will be displayed.
		*/
		
		if EJD'>%SystemDate,TD.isNull() set TD=EJD+1
		if TD.isNull() quit
		set TD=TD-1
		
		set IR=WIRN(JD).piece("|",1)
		if acn.cls="D" set PR=WIRN(JD).piece("|",2)	// dep.bal
		if acn.cls="L" set PR=WIRN(JD).piece("|",5)	// ln.balint

		set DATA(1)=DATA(1)_FD_TAB_TD_TAB_(TD-FD+1)_TAB_PR_TAB_IR_TAB_$$ACR(.acn,PR,IR,FD,TD)_$C(13,10)
		}

	quit
	

FUTURE(RecordACN acn,		// Account				/REF:W
       Date BJD,		// Beginning date
       Date EJD,		// Effective date
       String DATA())		// Data

	// Return data for accruals in the future.

	type public Number ER
	type public String RM

	type Number IR,PR
	type Date FD,JD,TD,TOTJD
	type String BALIRN()

	type literal String TAB=$char(9)	
	
	set TOTJD=EJD
		
	/*
	Get the BALIRN array from UANTIC.  Passing BALIRN=1 means that
	we'll get an entry for today.
	*/

	set BALIRN=1
	type RecordTTX ttx=Class.new("RecordTTX")
	
	do EXEC^UANTIC(.acn,.ttx,,EJD,"01",,,.BALIRN) if ER quit

	// Make sure array includes the "to" date.
	set BALIRN(%SystemDate)=BALIRN(BALIRN("").order()).get()
	set BALIRN(TOTJD+1)=BALIRN(BALIRN("").order(-1)).get()

	/*
	If the date range starts in the future, we need to 
	make sure a BALIRN entry exists for the From date
	BJD.  If none exists, set the value from the previous
	entry in BALIRN.  Since ^UANTIC is called w/ BALIRN=1,
	we should have at least BALIRN(TJD) defined.
	*/

	if BJD>%SystemDate do {
		if BALIRN(BJD).get().isNull() set BALIRN(BJD)=BALIRN(BALIRN(BJD).order(-1))
		}
	
	
	 set JD=BJD-1
			
	// Loop through BALIRN array to produce FSTRING
	for  set JD=BALIRN(JD).order() quit:JD.isNull()  do {
		set FD=JD,TD=BALIRN(JD).order()

		if TD.isNull() quit
		set TD=TD-1

		set PR=BALIRN(JD).piece("|",1)
		set IR=BALIRN(JD).piece("|",2)
				
		set DATA(2)=DATA(2)_FD_TAB_TD_TAB_(TD-FD+1)_TAB_PR_TAB_IR_TAB_$$ACR(.acn,PR,IR,FD,TD)_$C(13,10)
		}

	quit


ACR(RecordACN acn,		// Account				/REF:W
	Number PR,		// Principal
	Number IR,		// Interest rate
	Date FD,		// From date
	Date TD)		// Through date
	
	/*
	Calculate accrued interest on principal PR at interest rate IR
	from date FD to date TD.
	*/

	type Date SL,SN
	type String AF,IF,IM,IP
	
	set (AF,IF,IP,SN,SL)=""

	if acn.cls="L" do {
		type RecordLN ln={RecordLN}acn
		set IM=ln.iacm

		if IM.extract()=0 do {
			set AF=ln.dist1af
			set IF=ln.dist1fre
			set IP=ln.icpf
			set SN=ln.schnd
			set SL=ln.schld
			}
		}

	if acn.cls="D" do {
		type RecordDEP dep={RecordDEP}acn
		set IM=dep.iacm

		if IM.extract()=0 do {
			set IF=dep.ipf
			set IP=dep.icpf
			set SN=dep.inp
			set SL=dep.ipld
			}
		}

	quit $$^UIC(PR,FD,TD,IM,IR,"00",AF,IF,IP,SN,SL)
	
	
ERROR()	// Error handling

	type public String ET,RM

	do Runtime.rollback()

	quit $$ERRMSG^PBSUTL(RM.get(),ET.get())
	

vSIG()	quit "60526^26790^Hari Natrajan^7285"	// Signature - LTD^TIME^USER^SIZE
