DEPODPFL(RecordDEPODP depodp, String vpar, Boolean vparNorm) // DEPODP - Overdraft Protection Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (2)                      11/22/2006
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = depodp.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(depodp,.vxins(),11,"|")
	if %O = 1 quit:'depodp.isChanged()  do AUDIT^UCUTILN(depodp,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = depodp.cid
	type String ODACN = depodp.odacn

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ODACN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEPODP",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEPODP","CID = :depodp.cid and ODACN = :depodp.odacn") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ODACN

	type RecordDEPODP depodp = Db.getRecord("DEPODP","CID=:CID,ODACN=:ODACN")
	if (%ProcessMode = 2) do {
		do depodp.setMode(2)

		do DEPODPFL(depodp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEPODP depodp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEPODP","CID = :depodp.cid and ODACN = :depodp.odacn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(depodp,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(depodp,-3),100,vobj(depodp,-4),n)=vobj(depodp,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(depodp,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(depodp,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(depodp,-3),100,vobj(depodp,-4),n)=vobj(depodp,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(depodp))  S ^ACN(vobj(depodp,-3),100,vobj(depodp,-4))=vobj(depodp)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.depodp)              // Create journal files
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDEPODP depodp
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^ACN(vobj(depodp,-3),100,vobj(depodp,-4),n)) quit:n.isNull()  if 'vobj(depodp,n).data(),^ACN(vobj(depodp,-3),100,vobj(depodp,-4),n).data()#2 set vobj(depodp,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEPODP depodp

	if 'vkeychg.get(),depodp.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/JOURNAL/" do VJOURNAL(.depodp)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^ACN(vobj(depodp,-3),100,vobj(depodp,-4))         // Delete Record
	quit


vreqn // Validate required data items

	type public RecordDEPODP depodp

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEPODP depodp

	if depodp.cid.isNull() do vreqerr("CID") quit
	if depodp.odacn.isNull() do vreqerr("ODACN") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPODP","MSG",1767,"DEPODP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After delete of DEPODP entries

	type public RecordDEPODP depodp
	/*
	-----Revision History-------------------------------------------------

	11/22/06 - NATRAJAH - CR 24214
		   Replaced deprecated method Db.update with Db.getRecord.
		   
	11/30/01 - GOLATO - ARQ46768
		   Created.
		   If an overdraft account is unlinked (deleted) from the 
		   account, and there are no more overdraft accounts assigned
		   to the account, this trigger will update DEP.ODFLG to be "".
	*/
	
	type public Number CID
	type ResultSet rs=Db.select("ODACN","DEPODP","CID=:CID")
	if rs.isEmpty() do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
		if dep.getMode() do {
			set dep.odflg=0
			do dep.save()
			}
		}
	
	quit

vai1 // Trigger AFTER_INSERT - After insert of DEPODP entries

	type public RecordDEPODP depodp
	/*
	-----Revision History--------------------------------------------------

	10/09/06 - KinI - 23523
		   Cleaned up the trigger correcting some PSL errors preventing
		   successful ODP filing.
	
	09/23/05 - NATRAJAH - 17245
		   General DBI3 cleanup.
		   	
	04/04/02 - ABIFARINS - 49707
		   Modified code so that ERR is set when TRB=0, not when TRB=1.
		   This prevents receiving the error message "No accounts
		   available for overdraft protection" even when an account
		   is available for overdraft protection.
	           
	12/05/01 - GOLATOS - 46768
		   Added code to set the Overdraft Option flag (DEP.ODFLG)=1
		   when an overdraft account is linked to the account.  Added
		   code "if $P(X,$C(9),3) set ERR=1" to correct PSL conversion
		   error.  

	10/20/99 - CARROLLJ - 31126
		   Convert to PSL.

	*/

	if %ProcessMode quit        

	// These errors are used to prevent setup of invalid overdraft
	
	type RecordDEP dep = Db.getRecord("DEP","CID=:CID")
	
	if (dep.odo#2 = 0) do { quit:ER

		type RecordSTBLODO stblodo = Db.getRecord("STBLODO","KEY=:dep.odo")
		type Number ODO = dep.odo
		type String MSG = stblodo.desc
			
		// Overdraft option = ~p1 (~p2)
		do Runtime.setErrMSG("DEPODP",2121,"ODO~MSG") quit:ER 
		}		

	type RecordACN acn = Db.getRecord("ACN","CID=:ODACN")

	// No accounts available for overdraft protection	
	if (acn.odo '> 1) ! ((acn.cls = "L")&(acn.trb = 0)) do Runtime.setErrMSG("DEPODP",1887) quit:ER 

	// Update DEP.ODFLG if overdraft account is linked to the account.
	set dep.odflg = 1
	do dep.save()
	
	quit	

	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEPODP depodp

	if (%O = 2) do vload

	if vobj(depodp,1).exists() do {

		set X = depodp.%ravl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPODP.%RAVL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = depodp.%rcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("%RCID", vRM) quit
		if depodp.%rcls.length()>1 set vRM = $$^MSG(1076,1) do vdderr("%RCLS", vRM) quit
		set X = depodp.%rgrp if 'X.isNull(),'Db.isDefined("STBLLIBS","X") set vRM = $$^MSG(1485,X) do vdderr("%RGRP", vRM) quit
		set X = depodp.%rpri if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("%RPRI", vRM) quit
		set X = depodp.%rtype if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("%RTYPE", vRM) quit
	}
	set X = depodp.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = depodp.odacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ODACN", vRM) quit

	if vobj(depodp).exists() ! 'vobj(depodp,"").order().isNull() do {

		set X = depodp.pri if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PRI", vRM) quit
		set X = depodp.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPODP","MSG",979,"DEPODP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEPODP depodp)	//DEPODP Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="O" do {
			do vj1(.depodp)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="O" do {
			do vj2(.depodp)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="O" do {
			quit:'vx.data()
			if vx("PRI").data() do vj3(.depodp,"PRI")	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordDEPODP depodp)	// HIST_D  Table HIST  Record DDPODP updates and delete

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=depodp.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(8475,depodp.odacn,depodp.pri_":")
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEPODP depodp)	// HIST_I  Table HIST  Insert of DEPODP record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=depodp.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(8475,depodp.odacn,":"_depodp.pri)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordDEPODP depodp,String vdi)	// HIST_U  Table HIST  Record DDPODP updates

	type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
	type String v1,vlastkey

	type String vold,vnew,vfmtable

	set vold=vx(vdi).piece("|",1)
	set vnew=vx(vdi).piece("|",2)
	set vfmtable=vx(vdi).piece("|",11)

	set v1=depodp.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(8475,depodp.odacn,vold_":"_vnew_":"_vfmtable)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordDEPODP depodp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ODACN").exists() set vux("ODACN") = vx("ODACN")
	do vkey(1) set voldkey = depodp.cid_","_depodp.odacn   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = depodp.cid_","_depodp.odacn   // Copy new keys into object
	type RecordDEPODP vnewrec = depodp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEPODP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEPODP depodp

	if vux("CID").exists() set depodp.cid = vux("CID").piece("|",i)
	if vux("ODACN").exists() set depodp.odacn = vux("ODACN").piece("|",i)
	quit
