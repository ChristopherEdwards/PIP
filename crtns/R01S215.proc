R01S215	// SCA161 - Service Fee and Usage Credit Plan Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1="ALL"
	type String VIN2="ALL"

	set RID="SCA161"
	set RN="Service Fee and Usage Credit Plan Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[REP161]KEY1|[FEEPLN]PLAN:DISTINCT||S PLAN=X D EXT^DBSQRY||T|Service Fee Plan|||||"
	set %TAB("VIN2")="|255||[REP161]KEY2|[FEEPLN]FEEDT,DESC:DISTINCT:QU ""[FEEPLN]PLAN=<<PLAN>>""||D EXT^DBSQRY||T|Service Fee Plan Date|||||"

	set %READ="IO/REQ,VIN1#0,VIN2#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String VIN1,VIN2
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,BASE,CHGOPT,CONAM,CURFLG,DESC,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,RID,RN,SRVDESC,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA161",RN="Service Fee and Usage Credit Plan Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA161","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[REP161]KEY5#26#1"

	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[REP161]KEY1 "_VIN1,SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[REP161]KEY2 "_VIN2,SEQ=SEQ+1
		set DQQRY(SEQ)="[REP161]PID=<<%ProcessID>>",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("REP161") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC2|"_"Service Fee Plan"_"|VIN1|"_VIN1.get()
		set VBNRINFO("PROMPTS",2)="WC2|"_"Service Fee Plan Date"_"|VIN2|"_VIN2.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Service Fee and Usage Credit Plan Report"
		set VBNRINFO("PGM")="R01S215"
		set VBNRINFO("RID")="SCA161"
		set VBNRINFO("TABLES")="REP161"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,REP161]PID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,REP161]KEY1"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,REP161]KEY2"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,REP161]KEY3"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,REP161]KEY4"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,REP161]KEY5"

		set VBNRINFO("DOC",1)="This report provides information about the service fee and usage credit plans"
		set VBNRINFO("DOC",2)="that have been defined in the Service Fee Plan user table (FEEPLN).  It"
		set VBNRINFO("DOC",3)="includes the plan parameters and specifications for the items associated with"
		set VBNRINFO("DOC",4)="each category in the plan."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:6 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"REP161.PID,REP161.KEY1,REP161.KEY2,REP161.KEY3,REP"
	set VSELECT=VSELECT_"161.KEY4,REP161.KEY5"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"REP161",VWHERE,"REP161.PID,REP161.KEY1,REP161.KEY2,REP161.KEY3,REP161.KEY4,REP161.KEY5","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5,vovc6
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5="",vovc6=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5,vovc6,vc6
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5,vovc6=vc6
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6
	set vc1=V.piece($C(9),1)			// REP161.PID
	set vc2=V.piece($C(9),2)			// REP161.KEY1
	set vc3=V.piece($C(9),3)			// REP161.KEY2
	set vc4=V.piece($C(9),4)			// REP161.KEY3
	set vc5=V.piece($C(9),5)			// REP161.KEY4
	set vc6=V.piece($C(9),6)			// REP161.KEY5
	quit

	// User-defined pre/post-processor code

VPREBQ	// Pre-processor (before query)

	/* Create a single table that provides the pointers to the FEE*
	   tables needed for the report.  Because we are pulling data from
	   three tables FEEQRY, FEESRV, and FEEPLN, that can't be joined
	   successfully by the report writer to provide us data at each
	   level, we'll build a temporary table that uses dummy entries
	   of 0 (zwro) for FEETYP and QUERY when they don't exist to
	   allow generation of the report.

	   Structure of REP161 will correspond to FEEQRY as follows:

		- KEY1 = PLAN
		- KEY2 = FEEDT
		- KEY3 = FEECAT (0 if none)
		- KEY4 = FEETYP (0 if none)
		- KEY5 = QUERY (0 if none)
	*/

	do Db.delete("REP161", "PID=:%ProcessID")

	type ResultSet rspln = Db.select("PLAN,FEEDT", "FEEPLN")

	while rspln.next() do {

		type String feedt, plan

		set feedt = rspln.getCol("FEEDT")
		set plan = rspln.getCol("PLAN")

		type ResultSet rssrv = Db.select("FEECAT,FEETYP", "FEESRV", "PLAN=:plan AND FEEDT=:feedt")

		if rssrv.isEmpty() do settmp(plan, feedt, 0, 0, 0) quit

		while rssrv.next() do {

			type String feecat, feetyp

			set feecat = rssrv.getCol("FEECAT")
			set feetyp = rssrv.getCol("FEETYP")

			type ResultSet rsqry = Db.select("QUERY", "FEEQRY", "PLAN=:plan AND FEEDT=:feedt AND FEECAT=:feecat AND FEETYP=:feetyp")

			if rsqry.isEmpty() do settmp(plan, feedt, feecat, feetyp, 0) quit

			while rsqry.next() do settmp(plan, feedt, feecat, feetyp, rsqry.getCol("QUERY"))
		}
	}

	quit


settmp( String PLAN,
	String FEEDT,
	String FEECAT,
	String FEETYP,
	String QUERY)

	type RecordREP161 REP161 = Class.new("RecordREP161", "PID=%ProcessID,KEY1=:PLAN,KEY2=:FEEDT,KEY3=:FEECAT,KEY4=:FEETYP,KEY5=:QUERY")

	do REP161.save()

	quit





VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(5)=1,vskp(6)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VHDG5 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	do VHDG6 quit:VFMQ
	if 'vskp(6).get() do VDTL6 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(6)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5,vc6,vovc6
	type Number vb1,vb2,vb3,vb4,vb5,vb6
	set (vb1,vb2,vb3,vb4,vb5,vb6)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,VH0=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,VH0=1
	if vb4!(vovc4'=vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1
	if vb5!(vovc5'=vc5) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(6) set vs(6)=1 do VSUM6 quit:VFMQ  do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do VSUM5 quit:VFMQ  do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(6)=VT(6)+1
	quit

VHDG5	// Group Header
	type public String %MSKD,%TIM,BASE,CHGOPT,CONAM,CURFLG,DESC,ER,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,IOSL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,RID,RN,SRVDESC,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,vc1,vc2,vc3,vc4,vc5,vc6,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	quit:vh(5)  set vh(5)=1				// Print flag
	if VLC+4>IOSL do VHDG0 quit:VFMQ

	set VL="  "_"FEE CATEGORY"
	set V=vc4,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(V,1,35) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",15-VL.length())_V		// [SYSDEV,REP161]KEY3
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                                                       "_"FEE    FEE         FEE  FEE              MAX DAILY"
	set V=" " do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",126-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="      "_"FEE TYPE  DESCRIPTION           CHARGE OPTION                 AMOUNT  SCHED     PERCENT  TABLE           FEE AMOUNT"
	set V=" " do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",126-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set V="------------------------------------------------------------------------------------------------------------------------------------" do VP5 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit

VDTL5	// Detail
	type public String %TIM,BASE,CHGOPT,CURFLG,DESC,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,IOSL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,SRVDESC,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	quit:VD(5)  set VD(5)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ  set vh(5)=0 do VHDG5 quit:VFMQ

	set V=vc5,VO=V do VP6 quit:VFMQ!verror.get()  set V=$E(V,1,8) set VL="      "_V
	set VL=VL_$J("",16-VL.length())_$E(SRVDESC,1,20)
	set VL=VL_$J("",38-VL.length())_$E(CHGOPT,1,22)
	set VL=VL_$J("",62-VL.length())_$J(FEEAMT,12,2)
	set VL=VL_$J("",76-VL.length())_$E(FEESCH,1,6)
	set VL=VL_$J("",84-VL.length())_$J(FEEPRCT,9,5)
	set VL=VL_$J("",95-VL.length())_$E(FEETBL,1,12)
	set V=$J(MAXDLY,12,2) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",109-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM5	// Summary
	type public String %TIM,BASE,CHGOPT,CURFLG,DESC,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,I,IOSL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,SRVDESC,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc2,vc3,vc4,vc5,vc6,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if 'VT(5) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ  set vh(5)=0 do VHDG5 quit:VFMQ

	set VL="            "
	do VOM
	quit

VHDG6	// Group Header
	type public String %MSKD,%TIM,BASE,CHGOPT,CONAM,CURFLG,DESC,ER,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,IOSL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,RID,RN,SRVDESC,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,vc1,vc2,vc3,vc4,vc5,vc6,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	quit:vh(6)  set vh(6)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V="----------------------------------------------------------------------------------------------------------------" do VP8 quit:VFMQ!verror.get()  set VL="                "_V
	if 'VL.translate(" ").isNull() do VOM
	quit

VDTL6	// Detail
	type public String %TIM,BASE,CHGOPT,CURFLG,DESC,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,IOSL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,SRVDESC,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if VLC+1>IOSL do VHDG0 quit:VFMQ  set vh(6)=0 do VHDG6 quit:VFMQ

	set VL="                "_"QUERY #"
	set V=vc6,VO=V do VP9 quit:VFMQ!verror.get()  set V=$E(V,1,1)
	set VL=VL_$J("",25-VL.length())_V		// [SYSDEV,REP161]KEY5
	set VL=VL_$J("",28-VL.length())_$E(QDESC,1,30)
	set VL=VL_$J("",62-VL.length())_$J(QFEEAMT,12,2)
	set VL=VL_$J("",76-VL.length())_$E(QFEESCH,1,6)
	set VL=VL_$J("",84-VL.length())_$J(QFEEPRCT,9,5)
	set VL=VL_$J("",95-VL.length())_$E(QFEETBL,1,12)
	set V=$J(QMAXDLY,12,2) do VP10 quit:VFMQ!verror.get()
	set VL=VL_$J("",109-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM6	// Summary
	type public String %TIM,BASE,CHGOPT,CURFLG,DESC,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,I,IOSL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,SRVDESC,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc2,vc3,vc4,vc5,vc6,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if 'VT(6) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ  set vh(6)=0 do VHDG6 quit:VFMQ

	set V="----------------------------------------------------------------------------------------------------------------" do VP11 quit:VFMQ!verror.get()  set VL="                "_V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BASE,CHGOPT,CONAM,CURFLG,DESC,FEEAMT,FEEBAL,FEEBALRF,FEEBALRM,FEEDT,FEEMAX,FEEMIN,FEEPRCT,FEESCH,FEETBL,MAXDLY,PLANCUR,PLANEXC,PLTPD,QDESC,QFEEAMT,QFEEPRCT,QFEESCH,QFEETBL,QMAXDLY,RID,RN,SRVDESC,VL,vc1,vc2,vc3,vc4,vc5,vc6,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+11,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="       "_"PLAN:"
	set V=vc2,VO=V do VP12 quit:VFMQ!verror.get()  set V=$E(V,1,8)
	set VL=VL_$J("",13-VL.length())_V		// [SYSDEV,REP161]KEY1
	set VL=VL_$J("",24-VL.length())_$E(DESC,1,20)
	do VOM
	set VL="       "_"PLAN TYPE: "
	set VL=VL_$J("",18-VL.length())_$E(PLTPD,1,40)
	do VOM
	set VL="" do VOM
	set VL="        "_"Effective             BASE       MINIMUM       MAXIMUM      BALANCE USED FOR   CONV  ROUND    ROUND   PLAN      EXCHANGE"
	do VOM
	set VL="             "_"Date       FEE AMOUNT    FEE AMOUNT    FEE AMOUNT       FEE COMPUTATION   FLAG  METHOD  FACTOR   CURRENCY      RATE"
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="       "_$J($$DAT^%ZM(FEEDT),10)
	set VL=VL_$J("",22-VL.length())_$J(BASE,12,2)
	set VL=VL_$J("",36-VL.length())_$J(FEEMIN,12,2)
	set VL=VL_$J("",50-VL.length())_$J(FEEMAX,12,2)
	set VL=VL_$J("",65-VL.length())_$E(FEEBAL,1,20)
	set VL=VL_$J("",87-VL.length())_$S(CURFLG:"Y",1:"N")
	set VL=VL_$J("",93-VL.length())_$E(FEEBALRM,1,2)
	set VL=VL_$J("",101-VL.length())_$J(FEEBALRF,6)
	set VL=VL_$J("",110-VL.length())_$E(PLANCUR,1,3)
	set V=$J(PLANEXC,1) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",127-VL.length())_V
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,REP161]KEY3

	type public String V
 
        type RecordSTBLFEEFC feefc = Db.getRecord("STBLFEEFC", "OPT=:V", 1)
 
        if 'feefc.desc.isNull() set V = V_" - "_feefc.desc
	quit

VP2	// Column post-processor - [SYSDEV,REP161]KEY3

	type public String vc4
	type public String V, VL

	// Suppress blank line
	if (vc4 = 0) set (V, VL) = ""
	quit

VP3	// Column post-processor - @CHR( ,1)

	type public String vc4
	type public String V, VL
 
	// Suppress blank line
	if (vc4 = 0) set (V, VL) = ""
	quit

VP4	// Column post-processor - @CHR( ,1)

	type public String vc4
	type public String V, VL
 
	// Suppress blank line
	if (vc4 = 0) set (V, VL) = ""
	quit

VP5	// Column post-processor - @CHR(-,132)

	type public String vc4
	type public String V, VL
 
	// Suppress blank line
	if (vc4 = 0) set (V, VL) = ""
	quit

VP6	// Column pre-processor - [SYSDEV,REP161]KEY4

	type public String vc5,vc2,vc3,vc4
	// Set up variables for FEESRV section

	type public Number FEEAMT, FEEPRCT, MAXDLY
	type public String CHGOPT, FEESCH, FEETBL, SRVDESC

	type Date FEEDT
	type Number FEECAT
	type String FEETYP, PLAN

	set FEETYP = vc5

	if (FEETYP = 0) set (CHGOPT, FEEAMT, FEEPRCT, FEESCH, FEETBL, MAXDLY, SRVDESC) = ""

	else  do {

		set PLAN = vc2
		set FEEDT = vc3
		set FEECAT = vc4
		set FEETYP = vc5

		type RecordFEESRV feesrv = Db.getRecord("FEESRV", "PLAN=:PLAN,FEEDT=:FEEDT,FEECAT=:FEECAT,FEETYP=:FEETYP")

		set CHGOPT = feesrv.chgopt

		if (CHGOPT = 1) ! (CHGOPT = 2) ! (CHGOPT = 3) do {

			// Direct Charge - Assess on Analysis - Offset Earnings
			set CHGOPT = CHGOPT_" - "_$$^MSG(6378 + CHGOPT)
		}

		set FEEAMT = feesrv.feeamt
		set FEEPRCT = feesrv.feeprct
		set FEESCH = feesrv.feesch
		set FEETBL = feesrv.feetbl
		set MAXDLY = feesrv.maxdly
		set SRVDESC = feesrv.desc
	}
	
	
	quit

VP7	// Column post-processor - Variable: MAXDLY

	type public String vc5
	type public String V, VL
 
	// Suppress blank line
	if (vc5 = 0) set (V, VL) = ""
	quit

VP8	// Column post-processor - @CHR(-,112)

	type public String vc6
	type public Boolean PNTLINE
	type public String V, VL
 
	// Suppress blank line
	if (vc6 = 0) set (V, VL) = ""
	else  set PNTLINE = 1		// Print closing line in trailer
	quit

VP9	// Column pre-processor - [SYSDEV,REP161]KEY5

	type public String vc6,vc2,vc3,vc4,vc5
	// Set up variables for FEEQRY section

	type public Number QFEEAMT, QFEEPRCT, QMAXDLY
	type public String QDESC, QFEESCH, QFEETBL

	type Date FEEDT
	type Number FEECAT
	type String PLAN, FEETYP, QUERY

	set QUERY = vc6

	if (QUERY = 0) set (QDESC, QFEEAMT, QFEEPRCT, QFEESCH, QFEETBL, QMAXDLY) = ""

	else  do {

		set PLAN = vc2
		set FEEDT = vc3
		set FEECAT = vc4
		set FEETYP = vc5

		type RecordFEEQRY feeqry = Db.getRecord("FEEQRY", "PLAN=:PLAN,FEEDT=:FEEDT,FEECAT=:FEECAT,FEETYP=:FEETYP,QUERY=:QUERY")

		set QDESC = feeqry.qryname_" - "_feeqry.desc
		set QDESC = QDESC.extract(1, 30)
		set QFEEAMT = feeqry.feeamt
		set QFEEPRCT = feeqry.feeprct
		set QFEESCH = feeqry.feesch
		set QFEETBL = feeqry.feetbl
		set QMAXDLY = feeqry.maxdly
	}
	quit

VP10	// Column post-processor - Variable: QMAXDLY

	type public String vc6
	type public String V, VL
 
	// Suppress blank line
	if (vc6 = 0) set (V, VL) = ""
	quit

VP11	// Column post-processor - @CHR(-,112)

	type public Boolean PNTLINE
	type public String V, VL
 
	// Suppress blank line
	if 'PNTLINE.get() set (V, VL) = ""

	set PNTLINE = 0
	quit

VP12	// Column pre-processor - [SYSDEV,REP161]KEY1

	type public String vc2,vc3
	// Set up variables for page header

	type public Boolean CURFLG
	type public Date FEEDT
	type public Number BASE, FEEMAX, FEEBALRF, FEEMIN, PLANEXC
	type public String DESC, FEEBAL, FEEBALRM, PLANCUR, PLTPD

	type Number PLTP
	type String PLAN = vc2

	set FEEDT = vc3

	// Need for header in case no data on report
	if PLAN.isNull() set (BASE, CURFLG, DESC, FEEBAL, FEEBALRF, FEEBALRM, FEEMAX, FEEMIN, PLANCUR, PLANEXC, PLTPD) = "" quit

 	type RecordFEEPLN feepln = Db.getRecord("FEEPLN", "PLAN=:PLAN,FEEDT=:FEEDT")

	set BASE = feepln.base
	set CURFLG = feepln.curflg
	set DESC = feepln.desc
	set FEEBAL = feepln.feebal

	if 'FEEBAL.isNull() do {

		type RecordSTBLFEEFB feefb = Db.getRecord("STBLFEEFB", "OPT=:FEEBAL", 1)
                set FEEBAL = feefb.desc
	}

	set FEEBALRF = feepln.feebalrf
	set FEEBALRM = feepln.feebalrm
	set FEEMAX = feepln.feemax
	set FEEMIN = feepln.feemin
	set PLANCUR = feepln.plancur
	set PLANEXC = feepln.planexc
	set PLTP = feepln.pltp

	if PLTP.isNull() set PLTPD = ""
	else  do {

                type RecordSTBLPLTP stblpltp = Db.getRecord("STBLPLTP", "PLTP=:PLTP", 1) 
                set PLTPD = stblpltp.desc
        }

	quit

VP13	// Column post-processor - Variable: PLANEXC

	type public String vc2
	type public String V, VL

	if vc2.isNull() set (V, VL)=""
	quit
