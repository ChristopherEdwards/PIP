ACNCDI
	/* 

	This procedure definition replaces [.MRTNS]ACNCDI.M
	DESC: All the assignment expressions for computed DI in ACN
	
	LIBRARY:
	$$DEFGENCR  Generic Credit Transaction
	$$DEFGENDR  Generic Debit Transaction
	$$BASEBAL   Balance in Base currency amount
	$$CARDUF    Card Use Flag
	$$PTUF      Pre-Authorized Transfer Use Flag
	$$PAYUF     Payment/Collection Order Use Flag
	$$LDISUF    Loan Disbursement@Recipient Use Flag
	$$FEETARUF  Loan Fee Target@Account Use Flag
	$$BALAVL    Return loan or deposit available balance
	$$BALCMP    Return loan or deposit balance
	$$BALCIF    Equivalent BALCMP and BALAVL in customer currency
	$$ESCBAL    Escrow Balance from Loan or from Deposit	
	$$RENCDCMP  Principal Maturity Renewal Code
	$$TCUSTBAL  Total Customer Balance
        $$THHBAL    Total Household Balance
        $$STMYTD    Statement Financial Year to Date Amount
	---------------- Revision History -----------------------------------
	
	10/24/06 - KELLYP - CR 23750
		   Modified ESCBAL section to only return escrow balance for
		   deposit accounts if GRP="ESC".
	
	07/26/06 - KELLYP - CR 22135
		   Modified the TCUSTBAL and THHBAL sections to call the
		   appropriate extrinsic labels in CIFCDI instead of 
		   retrieving the CIF record and returning the computed column
		   values.
	
	04/19/06 - RussellDS - CR20209
		   Remove code related to obsoleted Mutual Funds/Securities.
		   
	12/09/05 - HILLANBRAND - 18560
	           Modified DEFGEN section to correct several errors when selecting 
	           computed columns DEFGENCR and DEFGENDR.

	08/07/05 - MUIGLVANNAN - CR16732
		   Added new section STMYTD which determines the amount to be
		   displayed on year to date fields on account statements
	
	06/28/05 - KELLYP - CR 16446
		   Modified ESCBAL function to properly type-cast from acn
		   to ln or dep to prevent an UNDEFINED error.
	
	06/24/05 - KinI - 16414
		   Modified PTUF function to return 0 when there are no records
		   in PAT table.
	
	06/14/05 - TITOVE - CR 16289
		   Modified ESCBAL section to prevent undefined errors.

	02/19/05 - KELLYP - CR 13662
		   Removed all Db.getOneRow references and replaced M function calls
		   (e.g., $D, $G, etc.) with their PSL counterparts.  Also merged
		   duplicate code in DEFGENCR and DEFGENDR into a separate function
		   named DEFGEN that each of those functions call.  Also removed
		   indirection strings from Db.select statements in the BALCIF, 
		   BALCMP, BALAVL, and BASEBAL sections to prevent compiler errors.
		   Also removed pre-2002 revision history and cleaned up procedure.

	*/

	quit	

Public DEFGENCR(Number CID)	//	  Default Amount - Generic Credit Transaction

	/*
	The function is used to compute [ACN]DEFGENCR,[DEP]DEFGENCR,[LN]DEFGENCR
	fields.
	
	ARGUMENTS:
	. CID	Account Number				/TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$	Default Amount - Generic Credit Transaction      /TYP=$
	
	EXAMPLE:
	$$DEFGENCR^ACNCDI(1234)
	*/

	quit $$DEFGEN(CID,1)


Public DEFGENDR(Number CID)	// Default Amount - Generic Debit Transaction

	/*
	The function is used to compute [ACN]DEFGENDR,[DEP]DEFGENDR,[LN]DEFGENDR
	fields.
	
	ARGUMENTS:
	. CID		Account Number			/TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$    Default Amount - Generic Debit Transaction      /TYP=$
	
	EXAMPLE:
	$$DEFGENDR^ACNCDI(1234)
	*/

	quit $$DEFGEN(CID,0)


DEFGEN(Number CID,Number DC)

	/*
	The function is used to compute the default amount for a generic credit
	or debit transaction and is called by the DEFGENCR and DEFGENDR function.
	
	ARGUMENTS:
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
	. DC	Debit/Credit Indicator	/TYP=N/REQ/MECH=VAL
		0 - Debit
		1 - Credit
	
	RETURNS:
	. $$	Default Amount - Generic Transaction      /TYP=$
	
	EXAMPLE:
	$$DEFGEN^ACNCDI(1234,1)
	
	*/
	
	type String ETC,VARTAMT
	type Number DFT(),RETURN
	
	if 'Db.isDefined("ACN","CID") quit ""
	
	type RecordACN acn=Db.getRecord("ACN","CID",1)
	
	if acn.getMode()=0 quit 0
	
	// If account is closed, default transaction amount should be zero
	if acn.stat=4 quit 0
	
	// Find Generic Credit Transaction Code
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","acn.type")
	
	if DC=1 set ETC=prodctl.crtrgp
	else  set ETC=prodctl.drtrgp

	if ETC="" quit ""
	
	set %EffectiveDate=%SystemDate
	
	// Find Value of Transaction Code;
	type RecordTRN trn=Db.getRecord("TRN","ETC")
	set VARTAMT=trn.vartamt

	set DFT("AMT")=""

	if VARTAMT'="" do {  
		type String DI,FID
		
		set FID=VARTAMT.piece(".",1)
		set DI=VARTAMT.piece(".",2)

		#ACCEPT DATE=01/10/05;PGM=Pat Kelly
		type ResultSet rs=Db.select(DI,FID,"CID=:CID")
		if rs.isEmpty() set RETURN=""
		if rs.next() set RETURN=rs.getCol(1)

		set DFT("AMT")=RETURN
		}
	else  do {
		type String POP
		set POP=trn.pop

		#ACCEPT DATE=12/02/03;PGM=John Carroll
		if POP'="" xecute POP
		}

	quit DFT("AMT").get()

	
Public BASEBAL(Number CID,String CLS)

	/*

	  The function is used to compute [ACN]BASEBAL field
	
	
	ARGUMENTS:
	. CID                   Account Number 		/TYP=N/REQ/MECH=VAL
	. CLS                   Product Class  		/TYP=T/REQ/MECH=VAL
	
	RETURNS:
	. $$ Balance in Base currency amount  		/TYP=$
	
	EXAMPLE:
	$$BASEBAL^ACNCDI([ACN]CID,[ACN]CLS)

	*/

	type Public Boolean ER

	type String CRCD
	type Number AMT,EXCAMT
	type Boolean EMU
	
	if CLS="L" do {
		type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
		set AMT=ln.balcmp
		set CRCD=ln.crcd
		}
	else  if CLS="D" do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
		set AMT=dep.bal
		set CRCD=dep.crcd
		}
		
	if CRCD=%SystemCurrency quit AMT

	set EMU=0
	
	if CUVAR.emucrcd'="" do {
		type ResultSet rs2=Db.select("EMU","CRCD","CO=:%CompanyName AND CRCD=:CRCD")
		if rs2.isEmpty() quit
		if rs2.next() set EMU=rs2.getCol(1)
		}

	if (EMU),(%SystemCurrency=CUVAR.emucrcd) set EXCAMT=$$EUREQV^CRCDUTL(.AMT,CRCD,%SystemCurrency) quit:ER 0
	else  do EXC^CRCDUTL(%SystemCurrency,CRCD,.AMT,0,2,"")

	set AMT=$$^SCARND(EXCAMT,0,,%SystemCurrency)

	quit AMT


Public CARDUF(Number CID)	// Card use flag

	/*
	The function is used to compute [DEP]CARDUF,[LN]CARDUF field
	
	ARGUMENTS:
	. CID                   Account Number 	/TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$ Card Use Flag  				/TYP=L
	
	EXAMPLE:
	$$CARDUF^ACNCDI(1234)
	*/
	
	type Boolean CARDUF
	type String CRDNUM,CRDTYP

	set CARDUF=0

	type ResultSet rs=Db.select("CARDTYPE,CARDNUM","ACNCRD","CID=:CID")
	
	if rs.isEmpty() quit 0
	while rs.next() do {  quit:CARDUF

		set CRDTYP=rs.getCol(1)
		set CRDNUM=rs.getCol(2)
		
		type RecordCRD crd=Db.getRecord("CRD","CRDTYP,CRDNUM")
		
		if crd.stat'="",crd.stat'=5 set CARDUF=1

		if crd.stat="" do {
			type ResultSet rs2=Db.select("STAT","CRDMEM","CRDTYP=:CRDTYP AND CRDNUM=:CRDNUM")
			if rs2.isEmpty() quit
			while rs2.next() do {  quit:CARDUF
				if rs2.getCol(1)'=5 set CARDUF=1
				}
			}
		}
		
	quit CARDUF
	
	
Public PTUF(Number CID)	//   Pre-authorized Transfer use flag

	/*
	The function is used to compute DEP.PTUF/LN.PTUF field
	
	ARGUMENTS:
	. CID                   Account Number        /TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$ Pre-Authorized Transfer Use Flag 	/TYP=L
	
	EXAMPLE:
	$$PTUF^ACNCDI(1234)
	*/
	
	type Boolean PTUF
	
	set PTUF=0
	
	type DbSet ds=Db.selectDbSet("PAT","CID=:CID")
	if ds.isEmpty() quit 0
	
	while ds.next() do {
		type RecordPAT pat=ds.getRecord()
		
		type RecordPAT1 pat1=Db.getRecord("PAT1","pat.src,pat.acn,pat.batch")
		
		if pat1.stop,pat1.stop<%SystemDate set PTUF=1 quit
		
		type RecordTRN trn=Db.getRecord("TRN","pat.trncd")
		
		if 'trn.dc.extract(1) set PTUF=1
		}

	quit 'PTUF


Public PAYUF(Number CID)	// Payment/Collection order use flag
	
	/*
	The function is used to compute [DEP]PAYUF,[LN]PAYUF field
	
	ARGUMENTS:
	. CID                   Account Number        /TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$ Payment/Collection Order Use Flag 	/TYP=L
	
	EXAMPLE:
	$$PAYUF^ACNCDI(1234)
	*/

	if 'Db.isDefined("EFTPAY1","CID") quit 0

	type Boolean PAYUF
	type String I,STATUS,X()
	
	set PAYUF=1

	for I="C","CA","D","R","RET","REV","RFE","RIF" set X(I)=""

	type ResultSet rs=Db.select("STATUS","EFTPAY","CID=:CID","SEQ DESC")	
	
	if rs.isEmpty() quit 0
	while rs.next() do { quit:'PAYUF
 
			set STATUS=rs.getCol(1)

			if 'X(STATUS).data() set PAYUF=0
			}
	
	quit 'PAYUF

	
Public LDISUF(Number CID)	// Loan disbursement recipient use flag

	/*
	The function is used to compute [DEP]LDISUF,[LN]LDISUF field
	
	ARGUMENTS:
	. CID                   Account Number        /TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$ Loan Disbursement@Recipient Use Flag 	/TYP=L
	
	EXAMPLE:
	$$LDISUF^ACNCDI(1234)
	*/
	
	type RecordLN ln=Db.getRecord("LN","CID",1)
	
	if ln.sdta'="" quit 1

	quit 0


Public FEETARUF(Number CID)	// Loan Fee target account use flag

	/*
	The function is used to compute [DEP]FEETARUF,[LN]FEETARUF field
	
	ARGUMENTS:
	. CID                   Account Number        /TYP=N/REQ/MECH=VAL
	
	RETURNS:
	. $$ Loan Fee Target@Account Use Flag 	/TYP=L
	
	EXAMPLE:
	$$FEETARUF^ACNCDI(1234)
	*/
	
	type RecordLN ln=Db.getRecord("LN","CID",1)
	
	if ln.lnfeeta'="" quit 1

	quit 0
	
	
Public BALCMP(Number CID)	// Balance of deposit or loan account

	/*
	The function is used to compute [DEP]BAL,[LN]BALCMP
	
	ARGUMENTS:
	. CID                   Account Number        /TYP=N/REQ/MECH=VAL
	. CLS                   Product Class         /TYP=T/REQ/MECH=VAL
	
	RETURNS:
	. $$  Balance in Base currency amount         /TYP=$
	
	EXAMPLE:
	$$BALCMP^ACNCDI([ACN]CID)
	*/
	
	type Number BALCMP
	set BALCMP=0
	
	type RecordACN acn=Db.getRecord("ACN","CID",1)
	if acn.getMode()=0 quit 0
	
	if acn.cls="L" do {
		type RecordLN ln=Db.getRecord("LN","CID=:CID")
		set BALCMP=ln.balcmp
		}
	else  if acn.cls="D" do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		set BALCMP=dep.bal
		}
		
	quit BALCMP

	
Public BALAVL(Number CID)	// Loan and Deposit Available Balance

	/*
	The function is used to compute [DEP]BALAVL,[LN]AVLBAL
	
	ARGUMENTS:
	. CID                   Account Number 		/TYP=N/REQ/MECH=VAL
	. CLS                   Product Class 		/TYP=T/REQ/MECH=VAL
	
	RETURNS:
	. $$  Available Balance in account currency 		/TYP=$
	
	EXAMPLE:
	$$BALAVL^ACNCDI([ACN]CID)
	*/
	
	type Number BALAVL
	set BALAVL=0
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if acn.getMode()=0 quit 0
	
	if acn.cls="L" do {
		type RecordLN ln=Db.getRecord("LN","CID=:CID")
		set BALAVL=ln.avlbal
		}
	else  if acn.cls="D" do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		set BALAVL=dep.balavl
		}
		
	quit BALAVL
	

Public BALCIF(Number CID,Number QLF)	// Value of account BALCMP and BALAVL in customer's base currency
	
	/*
	The assignment expression for the computed data items ACN.BALCIFEQ,

	ACN.AVLCIFEQ, DEP.ACNEQV, LN.ACNEQV
	
	ARGUMENTS:
	. CID         Account Number 			/TYP=N/REQ/MECH=VAL
	
	. QLF        Currency Code 				/TYP=N/REQ/MECH=VAL
	      0       Principal Balance
	      1       Available Balance
	RETURNS:
	. $$          Equivalent Value in CIF Base Currency 	/TYP=$
	EXAMPLE:
	W $$BALCIF^ACNCDI(CID,1)
	*/
	
	type Number AMT
	type String CIFCRCD,CRCD
	
	type ResultSet rs=Db.select("ACN.BALLEGR,ACN.BALAVAIL,ACN.CRCD,CIF.CRCD","ACN,CIF","CIF.ACN=ACN.ACN AND ACN.CID=:CID")
	if rs.isEmpty() quit 0
	if rs.next() do {
		if QLF=0 set AMT=rs.getCol(1)
		else  set AMT=rs.getCol(2)
		set CRCD=rs.getCol(3)
		set CIFCRCD=rs.getCol(4)
		}
		
	do CAMT^CRCDUTL(CRCD,CIFCRCD,.AMT)
	
	quit AMT


public ESCBAL(Number CID)
	/*
           The function is used to compute [ACN]ESCBAL
 
           ARGUMENTS:
           . CID                   Account Number        /TYP=N/REQ/MECH=VAL
 	
           RETURNS:
           . $$ 		Escrow Balance     /TYP=$
 
           EXAMPLE:
           $$ESCBAL^ACNCDI(1234)
	*/

	type Number ESCBAL = 0
	
        if CID.isNull() quit 0

	type RecordACN acn = Db.getRecord("ACN", "CID = :CID", 1)
	
	if 'acn.getMode() quit 0
	
	if acn.cls = "L" do {
		
		type RecordLN ln = {RecordLN}acn
		set ESCBAL = ln.teb
		}
		
	if (acn.cls = "D"),(acn.grp = "ESC") do {
		
		type RecordDEP dep = {RecordDEP}acn
		set ESCBAL = dep.bal
		}
		
        quit ESCBAL


Public RENCDCMP(Number CID)     // Principal Maturity Renewal Code
	/*
	  The function is used to compute the [ACN]RENCDCMP field.

	  ARGUMENTS:
	  . CID         Account Number               /TYP=N/REQ/MECH=VAL

	  RETURNS:
	  . $$          Principal Maturity Renewal Code         /TYP=T

	  EXAMPLE:
	  W $$RENCDCMP^ACNCDI(CID)
	*/
	
	type Number RENCD
	
	type RecordACN acn=Db.getRecord("ACN","CID",1)
	
	if acn.getMode()=0 quit ""
	
	if acn.cls="D" do {
		set acn={RecordDEP}acn
		set RENCD=acn.rencd
		}
	else  if acn.cls="L" do {
		set acn={RecordLN}acn
		set RENCD=acn.rencd
		}
	
	quit RENCD


public TCUSTBAL(Number ACN)   //Total Customer Balance
  	 /*
          The function is used to compute the [ACN]RENCDCMP field.
 
          ARGUMENTS:
          . ACN         Customer Number               /TYP=N/REQ/MECH=VAL
 
          RETURNS:
          . $$          Total Customer Balance       /TYP=T
 
          EXAMPLE:
          W $$TCUSTBAL^ACNCDI(ACN)
        */

	quit $$TCUSTBAL^CIFCDI(ACN)


public THHBAL(Number ACN)   //Total Household Balance
         /*
          The function is used to compute the [ACN]RENCDCMP field.
 
          ARGUMENTS:
          . ACN         Customer Number               /TYP=N/REQ/MECH=VAL
 
          RETURNS:
          . $$          Total Household Balance       /TYP=T
 
          EXAMPLE:
          W $$THHBAL^ACNCDI(ACN)
        */
 
 	quit $$THHBAL^CIFCDI(ACN)


Public STMYTD(Number CID,Number YTDAMT,Number PYTDAMT)	// Statement Financial Year to Date Amount
	/*
	ARGUMENTS:
	. CID		Account Number			/TYP=N/REQ/MECH=VAL
	. YTDAMT	Year to date amount		/TYP=$/REQ/MECH=VAL
	. PYTDAMT	Prior year to date amount	/TYP=$/REQ/MECH=VAL

	INPUTS
	. ENDDT		Statement end date		/TYP=D/NOREQ/MECH=VAL

	RETURNS:
	. $$		Year to Date Amount		/TYP=N
			Statement Year to date Amount	/TYP=N

	NOTE: Variable ENDDT is set when executing the Create Combined Statements 
	      Extract Recs (FORMSTMTCMB) and Create Snap Shot Statement Extract Records
	      (FORMSTMTSNAP) functions.

	*/
	type public Date ENDDT
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	if $G(ENDDT)="" set ENDDT=%SystemDate-1
	if (cuvar.finyel+1'<%SystemDate),(ENDDT'>cuvar.finyel) quit PYTDAMT
	else  quit YTDAMT

vSIG()	quit "60562^57930^Pat Kelly^13606"	// Signature - LTD^TIME^USER^SIZE
