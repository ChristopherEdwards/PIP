LNRFILER(RecordUTBLACC utblacc, String vpar, Boolean vparNorm) // UTBLACC - Asset Category Classification Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (65)             03/16/2007
	// Trigger Definition (3)                      03/16/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblacc.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblacc,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblacc,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CLS = utblacc.cls
	type String AC = utblacc.ac

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CLS").exists()!vx("AC").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLACC",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLACC","CLS = :utblacc.cls and AC = :utblacc.ac") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CLS
	type public String AC

	type RecordUTBLACC utblacc = Db.getRecord("UTBLACC","CLS=:CLS,AC=:AC")
	if (%ProcessMode = 2) do {
		do utblacc.setMode(2)

		do LNRFILER(utblacc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLACC utblacc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLACC","CLS = :utblacc.cls and AC = :utblacc.ac") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblacc,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblacc,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblacc)) S ^UTBL("ACC",vobj(utblacc,-3),vobj(utblacc,-4))=vobj(utblacc)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLACC utblacc

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblacc,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("ACC",vobj(utblacc,-3),vobj(utblacc,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLACC utblacc

	if utblacc.desc.isNull() do vreqerr("DESC") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLACC utblacc

	if utblacc.cls.isNull() do vreqerr("CLS") quit
	if utblacc.ac.isNull() do vreqerr("AC") quit

		if vx("DESC").exists(),utblacc.desc.isNull() do vreqerr("DESC") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLACC","MSG",1767,"UTBLACC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("RBLDY").exists()!vx("RBMTH").exists()!vx("RBPAY").exists()!vx("RBLPPCT").exists()!vx("RBLIPCT").exists()!vx("RBLFPCT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - Verify Asset Class and call Compiler

	type public RecordUTBLACC utblacc

								/*
								---- Revision History-------------------------------------------------

								09/18/01 - SWARNALP - CR24947
																			Added code to verify that the Asset Class is not greater 
		   than 5 if the Asset Classification is being created for 
		   bill delinquency reclassification.

	*/

	type public Boolean ER

	// Asset Class values >5 are not valid for bill delinquency
	if (utblacc.ac>5),(utblacc.rbldy!utblacc.rbmth!utblacc.rbpay!utblacc.rblppct!utblacc.rblipct!utblacc.rblfpct) do Runtime.setErrXBAD("UTBLACC","BADACC") quit:ER
	
	//Compile LNRCMP1.M routine
	do ^LNRCMP

	quit

vau1 // Trigger AU_RBITEMS - After Update of Reclass Billed Items

	type public RecordUTBLACC utblacc
	
								/*
								---- Revision History-------------------------------------------------
	
								09/18/01 - SWARNALP - CR24947
																			Added code to verify that the Asset Class is not greater
																			than 5 if the Asset Classification is being created for
																			bill delinquency reclassification.
	
								*/

	type public Boolean ER

 	if (utblacc.ac>5),(utblacc.rbldy!utblacc.rbmth!utblacc.rbpay!utblacc.rblppct!utblacc.rblipct!utblacc.rblfpct) do Runtime.setErrXBAD("UTBLACC","BADACC") quit:ER
	
	quit
	

vau2 // Trigger COMPILER - Trigger to compile LNRCMP1.M routine

	do vad1

	quit

vad1 // Trigger COMPILER - Trigger to compile LNRCMP1.M routine

	type public RecordUTBLACC utblacc
								/*
								-----Revision History---------------------------------------------------

	04/14/05 - TITOVE - CR 15089
		   Modified to call LNRCMP from the top, the START section
		   no longer exists there.

								12/08/99 - DOUGANM - 31126
																			Removed call to ^LNRFILE(%ProcessMode) because it updated
																			UTBL, ran ^DBSLOG and set the compiled routine up for
																			transfer to the frontends via ^DDPXFR.  This was all
																			redundant, because it was already being done elsewhere
																			in the filer.
																			Added call to START^LNRCMP.  This was the only piece of code
																			in LNRFILE that was not already being done elswhere in the
																			filer
	
								09/21/99 - CARROLLJ - 31126
																			Convert to PSL. 
	
								Calls LNRCMP procedure to compile the routine LNRCMP1.M that will have
								a section for each table entry.
							 
								*/

								do ^LNRCMP
							 
								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLACC utblacc

	set X = utblacc.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
	set X = utblacc.ac if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("AC", vRM) quit
	set X = utblacc.crgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("CRGL", vRM) quit
	if utblacc.darcexp.length()>25 set vRM = $$^MSG(1076,25) do vdderr("DARCEXP", vRM) quit
	if utblacc.depexp.length()>25 set vRM = $$^MSG(1076,25) do vdderr("DEPEXP", vRM) quit
	if utblacc.depniext.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DEPNIEXT", vRM) quit
	if utblacc.depnpext.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DEPNPEXT", vRM) quit
	set X = utblacc.deprdo if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DEPRDO", vRM) quit
	if utblacc.depriext.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DEPRIEXT", vRM) quit
	set X = utblacc.deprmo if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DEPRMO", vRM) quit
	set X = utblacc.deprnaip if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.DEPRNAIP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.deprnidq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DEPRNIDQ", vRM) quit
	set X = utblacc.deprnpbp if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.DEPRNPBP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.deprnpdq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DEPRNPDQ", vRM) quit
	if utblacc.deproq.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DEPROQ", vRM) quit
	if utblacc.deprridq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DEPRRIDQ", vRM) quit
	set X = utblacc.deprrip if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.DEPRRIP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.depruidq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DEPRUIDQ", vRM) quit
	set X = utblacc.deprunai if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.DEPRUNAI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblacc.deprunpb if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.DEPRUNPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.deprupdq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DEPRUPDQ", vRM) quit
	if utblacc.depuiext.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DEPUIEXT", vRM) quit
	if utblacc.depupext.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DEPUPEXT", vRM) quit
	if utblacc.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = utblacc.dglii if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLII", vRM) quit
	set X = utblacc.dglnb if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLNB", vRM) quit
	set X = utblacc.dglni if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLNI", vRM) quit
	set X = utblacc.dglri if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLRI", vRM) quit
	set X = utblacc.dglunanb if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLUNANB", vRM) quit
	set X = utblacc.dglunani if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLUNANI", vRM) quit
	set X = utblacc.drgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DRGL", vRM) quit
	set X = utblacc.lgldfi if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDFI", vRM) quit
	set X = utblacc.lgldfp if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDFP", vRM) quit
	set X = utblacc.lgldfr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDFR", vRM) quit
	set X = utblacc.lgldii if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDII", vRM) quit
	set X = utblacc.lgldir if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDIR", vRM) quit
	set X = utblacc.lgldli if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDLI", vRM) quit
	set X = utblacc.lgldlr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLDLR", vRM) quit
	if utblacc.provcalc.length()>50 set vRM = $$^MSG(1076,50) do vdderr("PROVCALC", vRM) quit
	if utblacc.provext.length()>50 set vRM = $$^MSG(1076,50) do vdderr("PROVEXT", vRM) quit
	set X = utblacc.provigl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("PROVIGL", vRM) quit
	set X = utblacc.provpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.PROVPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.provqry.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PROVQRY", vRM) quit
	set X = utblacc.rbldy if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RBLDY", vRM) quit
	set X = utblacc.rblfpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RBLFPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblacc.rblipct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RBLIPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblacc.rblppct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RBLPPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblacc.rbmth if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RBMTH", vRM) quit
	set X = utblacc.rbpay if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RBPAY", vRM) quit
	set X = utblacc.rddys if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RDDYS", vRM) quit
	set X = utblacc.rdmths if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RDMTHS", vRM) quit
	if utblacc.rdprqry.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RDPRQRY", vRM) quit
	set X = utblacc.rdpymts if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RDPYMTS", vRM) quit
	if utblacc.rfeedq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RFEEDQ", vRM) quit
	if utblacc.rfeeext.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RFEEEXT", vRM) quit
	set X = utblacc.rfeepct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RFEEPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.rfprdq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RFPRDQ", vRM) quit
	if utblacc.rfprext.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RFPREXT", vRM) quit
	set X = utblacc.rfprpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RFPRPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.rintdq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RINTDQ", vRM) quit
	if utblacc.rintext.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RINTEXT", vRM) quit
	set X = utblacc.rintpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RINTPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblacc.rlchgdq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RLCHGDQ", vRM) quit
	if utblacc.rlchgext.length()>50 set vRM = $$^MSG(1076,50) do vdderr("RLCHGEXT", vRM) quit
	set X = utblacc.rlchgpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLACC.RLCHGPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLACC","MSG",979,"UTBLACC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLACC utblacc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CLS").exists() set vux("CLS") = vx("CLS")
	if vx("AC").exists() set vux("AC") = vx("AC")
	do vkey(1) set voldkey = utblacc.cls_","_utblacc.ac    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblacc.cls_","_utblacc.ac    // Copy new keys into object
	type RecordUTBLACC vnewrec = utblacc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLACC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLACC utblacc

	if vux("CLS").exists() set utblacc.cls = vux("CLS").piece("|",i)
	if vux("AC").exists() set utblacc.ac = vux("AC").piece("|",i)
	quit
