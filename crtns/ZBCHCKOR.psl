ZBCHCKOR //Batch ZBCHCKORD - Daily Check order File to Garlas Harland
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - ZBCHCKORD Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"ZBCHCKORD",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(BRCD,TJD,CID,CHKS,SEQ) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("ZBCHCKORD","*","",BRCD.get()_","_TJD.get()_","_CID.get()_","_CHKS.get()_","_SEQ.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,BRCD,TJD,CID,CHKS,SEQ)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("ZBCHCKORD","*","",BRCD.get()_","_TJD.get()_","_CID.get()_","_CHKS.get()_","_SEQ.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,BRCD,TJD,CID,CHKS,SEQ) //
	/*
	Collect details for the check order request
	Generate Exchange-Verifier Digit for the customer
	Generate 4 - Digit Secrete code for each folio comprising of
	a HMAC code and Pre-Market Verifier Digit
	*/

	type public Date XTJD
	type public Number BANKNUMB
	type public String CLRPLACE,TRNCODE

	type RecordCHKPRD chkprd
	type RecordDEP dep
	type RecordCIF cif
	type RecordZGHCKORD zghckord

	type Number BOO,CHKDELPL,XCID
	type Number EVD,FFOLIO,FOLIO,IFOLIO
	type Number PMVD,PRODCTLG,SCRTCODE,TRNSIT

	type String CONTEXT,ET,RM
	type String CVVKEY,CVVCODE,DATA,FWKTYPE,HOLDNAME
	type String RFCID,SCODEPMV

	set chkprd=Db.getRecord("CHKPRD","BRCD,TJD,CID,CHKS,SEQ")
	do chkprd.setAuditFlag(1)

	//Extract only if pending for printing
	if ((chkprd.stat'=0)&(chkprd.stat'=3)) quit

	set dep=Db.getRecord("DEP","CID=:chkprd.cid")

	//--- Check book's elaboration Information ---

	//Product Catalogue
	set PRODCTLG=dep.type.toString().justify(4,1,"0",1)

	//Framework Type
	set FWKTYPE=$select(chkprd.chkcnt=25:"01",chkprd.chkcnt=50:"02",chkprd.chkcnt=100:"03",1:"01")

	//Check book delivery place
	set CHKDELPL=chkprd.brcd
	set CHKDELPL=CHKDELPL.toString().justify(4,1,"0",1)

	//--- Customized Check Book Information ---

	//Holder's name
	set cif=Db.getRecord("CIF","ACN=:dep.acn")

	set HOLDNAME=cif.fname_" "_cif.mname_" "_cif.lnm_" "_cif.mmname
	set HOLDNAME=HOLDNAME.justify(60,-1," ",1)

	//RFC (Federal Registry of Taxpayers - TaxPayer's ID)
	set RFCID=cif.taxid.justify(13,-1," ",1)

	//Branch Number
	set BOO=dep.boo
	set BOO=BOO.toString().justify(4,1,"0",1)

	//--- Magnetizable Band Information ----

	//Account Number
	set XCID=chkprd.cid
	set XCID=XCID.toString().justify(11,1,"0",1) //WMM uses 11-digit account number

	//Exchange Verifier Digit
	set EVD=$$GEVD(BANKNUMB,3,XCID,11) //WMM uses 11-digit account number

	//Initial Folio
	set IFOLIO=chkprd.scn
	set IFOLIO=IFOLIO.toString().justify(7,1,"0",1)

	//Final Folio
	set FFOLIO=(chkprd.scn+(chkprd.chkcnt-1))
	set FFOLIO=FFOLIO.toString().justify(7,1,"0",1)

	//Aggregate the transit number from its parts
	set TRNSIT=TRNCODE_CLRPLACE_BANKNUMB_EVD

	//For each check folio Security Code+Pre-market Verifier Digit
	set (SCODEPMV,CVVKEY)=""

	//This loop is just because HSM API takes the data as one single big concatinated string
	//This loop can be avoided provided HSM API takes the agregates of the string 
	//as parameters i.e, BANKNUMB, XCID, IFOLIO, FFOLIO and loops itself for getting secret code for each check folio
	for FOLIO=IFOLIO:1:FFOLIO do {
		//Aggregate CVVKEY with more check specific information
		set CVVKEY=CVVKEY_BANKNUMB_XCID_FOLIO_"|"
	}

	//Call HSM API to obtain security code for all the check folios at once.
	//This API call returns security codes (3 digits each check folio) for all the check folios delimited by "|" symbol
	set CVVCODE=$$SCSHA1^ZHSMAPI(CVVKEY)

	type Number CVVER=0
	type Number I=1
	for FOLIO=IFOLIO:1:FFOLIO do {
		//Piece secret code for current check folio
		set SCRTCODE=CVVCODE.piece("|",I)
		if SCRTCODE="FFF" set CVVER=1
		set I=I+1
		
		set PMVD=$$GPMVD(SCRTCODE,TRNSIT,XCID,FOLIO)

		//Security Code + Pre-Market vierifier digit
		set SCODEPMV=SCODEPMV_SCRTCODE_PMVD
	} //End of Folio loop for PMVD 

	// Throw exception if security code is non-numeric
	if CVVER=1 do {
		type String CVVERTXT
		set CVVERTXT=BRCD_","_TJD_","_CID_","_CHKS_","_SEQ
		throw Class.new("Error","SCSHA1-E-ZHSMAPI,"_CVVERTXT)
	}

	set SCODEPMV=SCODEPMV.justify(400,-1," ",1)

	set DATA=PRODCTLG_FWKTYPE_CHKDELPL
	set DATA=DATA_HOLDNAME_RFCID_BOO
	set DATA=DATA_TRNCODE_CLRPLACE_BANKNUMB_EVD_XCID_IFOLIO_FFOLIO
	set DATA=DATA_SCODEPMV

	//--- Insert data into a temporary table --
	//create new ZGHCKORD record
	set zghckord=Class.new("RecordZGHCKORD")

	set zghckord.cid=chkprd.cid
	set zghckord.data=DATA

	do zghckord.bypassSave()

	//--- Update the CHKPRD record status to ordered
	set chkprd.stat=3
	do chkprd.save()

	quit

	/*
	Calculates Exchange Verifier Digit 
	based on MOD 10, weighted 3,7,1 from left to right
	*/
GEVD(Number BANKNUM,
	Number BNLEN,
	Number XCID,
	Number CIDLEN)
	//Returns Exchange Verifier Digit
	type Number DIG,EVD,LEN,SUM,TEMP
	type String EXVKEY,WEIGHT

	//This is a bit wise operation pad them appropriately
	set EXVKEY=BANKNUM.toString().justify(BNLEN,1,"0",1)_XCID.toString().justify(CIDLEN,1,"0",1)
	set LEN=EXVKEY.length()

	set WEIGHT="371371371371371371371371371371371371"
	set WEIGHT=WEIGHT.extract(0,LEN)

	set SUM=0
	for DIG=1:1:LEN do {
		set TEMP=(EXVKEY.extract(DIG))*(WEIGHT.extract(DIG))
		set SUM=SUM+TEMP.extract(TEMP.length())
	}

	set SUM=SUM.extract(SUM.length());

	if SUM=0 quit SUM

	quit 10-SUM

	/*
	Calculates Pre-Market verifier digit
	based on Modulus 9 DSR(Divider, Subtract, Reminder) method
	*/
GPMVD(Number SCRTCODE,
	Number TRNSIT,
	Number XCID,
	Number FOLIO)
	//Returns Pre-Market Verifier Digit

	type Number PMVD=9-((SCRTCODE+TRNSIT+XCID+FOLIO)#9)
	quit PMVD

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,BRCD,TJD,CID,CHKS,SEQ
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set BRCD=vRECORD.piece($C(9),1)
 set TJD=vRECORD.piece($C(9),2)
 set CID=vRECORD.piece($C(9),3)
 set CHKS=vRECORD.piece($C(9),4)
 set SEQ=vRECORD.piece($C(9),5)
 do vPROC(BRCD,TJD,CID,CHKS,SEQ)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,BRCD,TJD,CID,CHKS,SEQ
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+51>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Date XTJD
	type public String FILENAME
	type String %READ,%TAB(),VFMQ

	set %TAB("XTJD")=".TJD4/NOREQ"
	set %TAB("FILENAME")=".RMS6/NOREQ"

	set %READ="@@%FN,,XTJD,FILENAME"
	do ^UTLREAD

	if VFMQ="Q" set %BatchExit=1 quit

	if XTJD="" set XTJD=%SystemDate-1
	
	//Default file name to "CHKORDDDMMYEAR.TXT"
	if FILENAME="" set FILENAME="CHKORD"_XTJD.toString("DDMMYEAR")_".TXT"

	//Erase all data from temp table
	do Db.fastDelete("ZGHCKORD")

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("BRCD,TJD,CID,CHKS,SEQ","CHKPRD","CHKPRD.TJD=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public String CLRPLACE,TRNCODE
	type public Number BANKNUMB

	set TRNCODE="51"	//Cheques - Mexican Pesos
	set CLRPLACE="999"
	set BANKNUMB=134

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public Date XTJD

	type IO ORDFILE

	type DbSet ds
	type RecordZGHCKORD zghckord

	type String CONTEXT,ET,RM
	type String FILL=" "
	type String FWTYPE=""
	type String HEADER=""
	type String TRAILER=""

	type Number TOTCHKBK=0
	type Number TOTFOLIO=0

	catch Error {
		set ET=Error.type
		set CONTEXT=Error.context
		if ET["%GTM" do ZE^UTLERR quit
		set RM=Error.description
		set ET=ET_"-"_RM_"-"_Error.thrownAt
		do ^UTLERR
	}

	set ORDFILE=Class.new("IO")
	set ORDFILE.fileName=FILENAME
	set ORDFILE.openParams="NEWV/WRITE/SHARED"
	set ORDFILE.recordSize=530

	do ORDFILE.open()

	//Record type - HEADER- BANK & TRANSMISSION ID
	//BankNumber_Date_NumberOfRequests(always 01)
	set HEADER="01"_"134"_XTJD.toString("YEARMMDD")_"01"
	set HEADER=HEADER_FILL.justify(508,-1," ",1)

	do ORDFILE.write(HEADER)

	set ds=Db.selectDbSet("ZGHCKORD")

	while ds.next() do {

		catch Error {
			set ET=Error.type
			set CONTEXT=Error.context
			if ET["%GTM" do ZE^UTLERR quit
			set RM=Error.description
			set ET=ET_"-"_RM_"-"_Error.thrownAt
			do ^UTLERR
		}

		set zghckord=ds.getRecord("ZGHCKORD")

		set FWTYPE=zghckord.data.extract(5,6)

		set TOTFOLIO=TOTFOLIO+$select(FWTYPE="01":25,FWTYPE="02":50,FWTYPE="03":100,1:25)

		//Record type - Detail - Checkbook ID (Customer)
		do ORDFILE.write("02"_zghckord.data)

		set TOTCHKBK=TOTCHKBK+1
	}

	//Record type - TRAILER- Summary
	set TRAILER="03"_TOTCHKBK.toString().justify(6,1,,1)
	set TRAILER=TRAILER_TOTFOLIO.toString().justify(6,1,,1))
	set TRAILER=TRAILER_FILL.justify(509,-1," ",1))

	do ORDFILE.write(TRAILER)

	do ORDFILE.close()

	do Db.fastDelete("ZGHCKORD")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
