RETFILE(RecordRET ret, String vpar, Boolean vparNorm) // RET - Return Items Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (33)             11/22/2003
	// Trigger Definition (6)                      07/26/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ret.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(ret,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ret,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TJD = ret.tjd
	type String BRCD = ret.brcd
	type String CID = ret.cid
	type String UID = ret.uid
	type String TSEQ = ret.tseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJD").exists()!vx("BRCD").exists()!vx("CID").exists()!vx("UID").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RET",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RET","TJD = :ret.tjd and BRCD = :ret.brcd and CID = :ret.cid and UID = :ret.uid and TSEQ = :ret.tseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJD
	type public String BRCD
	type public String CID
	type public String UID
	type public String TSEQ

	type RecordRET ret = Db.getRecord("RET","TJD=:TJD,BRCD=:BRCD,CID=:CID,UID=:UID,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do ret.setMode(2)

		do RETFILE(ret,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRET ret

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RET","TJD = :ret.tjd and BRCD = :ret.brcd and CID = :ret.cid and UID = :ret.uid and TSEQ = :ret.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ret)) S ^RET(vobj(ret,-3),vobj(ret,-4),vobj(ret,-5),vobj(ret,-6),vobj(ret,-7))=vobj(ret)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRET ret


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^RET(vobj(ret,-3),vobj(ret,-4),vobj(ret,-5),vobj(ret,-6),vobj(ret,-7))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordRET ret

	// Type local variables for access keys for defaults
	type public String TJD
	type public String BRCD
	type public String CID
	type public String UID
	type public String TSEQ

	if ret.chg.isNull() set ret.chg = 0                    // chg
	if ret.dret.isNull() set ret.dret = 0                  // dret
	if ret.feeproc.isNull() set ret.feeproc = 0            // feeproc
	if ret.indfee.isNull() set ret.indfee = 0              // indfee
	if ret.oret.isNull() set ret.oret = 0                  // oret
	if ret.proc.isNull() set ret.proc = 0                  // proc
	if ret.ret.isNull() set ret.ret = 0                    // ret
	if ret.review.isNull() set ret.review = 0              // review
	if ret.revu1.isNull() set ret.revu1 = 0                // revu1
	if ret.revu2.isNull() set ret.revu2 = 0                // revu2
	quit


vreqn // Validate required data items

	type public RecordRET ret

	if ret.chg.isNull() do vreqerr("CHG") quit
	if ret.dret.isNull() do vreqerr("DRET") quit
	if ret.feeproc.isNull() do vreqerr("FEEPROC") quit
	if ret.indfee.isNull() do vreqerr("INDFEE") quit
	if ret.oret.isNull() do vreqerr("ORET") quit
	if ret.proc.isNull() do vreqerr("PROC") quit
	if ret.ret.isNull() do vreqerr("RET") quit
	if ret.review.isNull() do vreqerr("REVIEW") quit
	if ret.revu1.isNull() do vreqerr("REVU1") quit
	if ret.revu2.isNull() do vreqerr("REVU2") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRET ret

	if ret.tjd.isNull() do vreqerr("TJD") quit
	if ret.brcd.isNull() do vreqerr("BRCD") quit
	if ret.cid.isNull() do vreqerr("CID") quit
	if ret.uid.isNull() do vreqerr("UID") quit
	if ret.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("CHG").exists(),ret.chg.isNull() do vreqerr("CHG") quit
		if vx("DRET").exists(),ret.dret.isNull() do vreqerr("DRET") quit
		if vx("FEEPROC").exists(),ret.feeproc.isNull() do vreqerr("FEEPROC") quit
		if vx("INDFEE").exists(),ret.indfee.isNull() do vreqerr("INDFEE") quit
		if vx("ORET").exists(),ret.oret.isNull() do vreqerr("ORET") quit
		if vx("PROC").exists(),ret.proc.isNull() do vreqerr("PROC") quit
		if vx("RET").exists(),ret.ret.isNull() do vreqerr("RET") quit
		if vx("REVIEW").exists(),ret.review.isNull() do vreqerr("REVIEW") quit
		if vx("REVU1").exists(),ret.revu1.isNull() do vreqerr("REVU1") quit
		if vx("REVU2").exists(),ret.revu2.isNull() do vreqerr("REVU2") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RET","MSG",1767,"RET."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do vbi2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordRET ret
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(ret,.vx(),1,"|") quit
	if vx("FEE").exists()!vx("PRETRES").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INDFEE").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("REVIEW").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(ret,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert 

	type public RecordRET ret
	/*---- Revision History ------------------------------------------------
	 
		04/18/07 - MbuiM - CR 26618
  	     When an invalid account was passed in, acn.type was null and 
  	     this caused an error to be returned and not logged in RET file.
  	     A check on acn.type isNull was done before retrieving 
  	     UTBLRETFEE.
  	   
		11/14/05 - HAILEYM - CR18146
  	     Updated to DBI Standards.
	 
		05/10/04 - RussellDS - CR9592
  	     Added parenthesis to avoid precendence warning errors.
	
		03/25/03 - CARROLLJ - 51349
	     Removed call to DATA^TTXP2.

	----------------------------------------------------------------------
	*/

	type public Date TJD
	type public Number BRCD,CID,TSEQ
	type public String UID
	
	type Number PRI
	type String ERTXT,ETC,OVR,SRC,TCMT,TSO,ZKEY
	
	type RecordACN acn
	type RecordCTBLINC ctblinc
	type RecordEXC exc
	type RecordSTBLER stbler
	type RecordTTXUID ttxuid
	type RecordUTBLRETFEE uretfee
	type RecordUTBLRETPRI uretpri
	type RecordXRETFWA xretfwa
	type ResultSet rs
	
	set ret.priority=999	// Set default priority
	
	set exc=Db.getRecord("EXC","TJD=:TJD,BRCD=:BRCD,UID=:UID,TSEQ=:TSEQ",1)
	
	set rs=Db.select("OVR","EXC1","TJD=:TJD AND BRCD=:BRCD AND UID=:UID AND TSEQ=:TSEQ")
	
	if rs.isEmpty() do {
		if 'exc.getMode() quit
		if exc.tcmt.isNull() quit
		
		set PRI=""
		set TCMT=exc.tcmt.upperCase()
		
		set ZKEY="RECNOFL"	// Record Not on File
		set stbler=Db.getRecord("STBLER","KEY=:ZKEY",1)
		if 'stbler.getMode() set ERTXT=""
		else  set ERTXT=stbler.rm
		
		if TCMT=ERTXT.upperCase() do {
			set uretpri=Db.getRecord("UTBLRETPRI","OVRLIT=:ZKEY",1)
			if 'uretpri.getMode() set PRI="" quit
			set PRI=uretpri.priority
			}
		
		set ZKEY="ACNCLO"	// Account Closed
		set stbler=Db.getRecord("STBLER","KEY=:ZKEY",1)
		if 'stbler.getMode() set ERTXT=""
		else  set ERTXT=stbler.rm
		
		if TCMT=ERTXT.upperCase() do {
			set uretpri=Db.getRecord("UTBLRETPRI","OVRLIT=:ZKEY",1)
			if 'uretpri.getMode() set PRI="" quit
			set PRI=uretpri.priority
			}

		if 'PRI.isNull(),(PRI<ret.priority) set ret.priority=PRI
		}
	
	for  quit:('rs.next())!(ret.priority=1)  do {
		set uretpri=Db.getRecord("UTBLRETPRI","OVRLIT=rs.getCol(1)",1)
		if 'uretpri.getMode() quit
		if uretpri.priority.isNull() quit

		if uretpri.priority<ret.priority set ret.priority=uretpri.priority
		}
	
	set acn=Db.getRecord("ACN","CID=:CID",1)
	// Set Branch of Ownership from ACN
	set ret.obrcd=acn.boo
	if ret.obrcd.isNull() set ret.obrcd=CUVAR.BOBR

	// Set return item defaults from CTBLINC
	if 'exc.getMode() set (ETC,TSO)=""
	else  set ETC=exc.etc,TSO=exc.tso
	
	set ttxuid=Db.getRecord("TTXUID","TJD=:TJD,BRCD=:BRCD,UID=:UID",1)
	if 'ttxuid.getMode() set SRC=""
	else  set SRC=ttxuid.src
	if SRC.isNull() set SRC=$$FIELD^UTSO(TSO,"POSTSRC")

	if SRC.isNull() set ret.ret=1 quit

	set ret.src=SRC
	
	set ctblinc=Db.getRecord("CTBLINC","KEY=:SRC",1)
	if 'ctblinc.getMode() set ret.ret=1 quit
	
	set ret.fee=+ctblinc.feeopt
	set ret.pretres=ctblinc.defres
	set ret.dpretres=ctblinc.defres
	set ret.dfee=+ctblinc.feeopt
	
	if (ret.fee=0)!(ret.fee=2) set ret.indfee=0
	if ret.fee=1 set ret.indfee=1

	// Determine the pay/return action to be taken based on CTBLINC.RETACT
	set ret.ret=$$RETACT^RETUTL(ctblinc.retact,TJD,BRCD,UID,TSEQ,CID)
	set ret.dret=ret.ret
	
	quit:(ctblinc.feeopt<>1) ! (ctblinc.defres.isNull()) ! (acn.type.isNull())
	
	set uretfee=Db.getRecord("UTBLRETFEE","RETFEE=:ctblinc.defres,TYPE=:acn.type,ETC=:ETC",1)

	set xretfwa=Db.getRecord("XRETFWA","FDATE=:ret.tjd,CID=:CID",1)
	set xretfwa.amount=xretfwa.amount+uretfee.feeamt
	do xretfwa.bypassSave()
	
	quit

vbu1 // Trigger BEFORE_UPDATE - Before Update of All Columns

	type public RecordRET ret
	do ret.setAuditFlag(1)
	/*---- Revision History ------------------------------------------------

		11/14/05 - HAILEYM - CR18146
  	     Updated to DBI Standards.
	 
		12/30/03 - CARROLLJ - CR7658
	     Added #ACCEPT prior to setting %SystemDate.			

		08/16/00 - SCHWARTZC - 41392/41545
													Changed call to $$^CUVAR to Db.getOneRow to meet standards.

		02/25/00 - SCHWARTZC - 35136
	     Correct the verification of the return item restriction time.

		01/18/00 - SCHWARTZC - 36651/35136
													Convert to PSL
	----------------------------------------------------------------------
	*/ 

	// Verify that the return item restriction time has not been exceeded
	// for this return item.

	type public Boolean ER
	type public Date TJD
	type public Number CID
	type public String RM
	
	if ret.src.isNull() quit
	
	type Date FDATE,OFFDAYS
	type Number OFFSET,RETTIME
	type String NBDC
	
	type RecordACN acn
	type RecordCTBLINC ctblinc
	type RecordCUVAR cuvar
	type RecordSCAU0 scau0
	
	set ctblinc=Db.getRecord("CTBLINC","KEY=:ret.src",1)
	if 'ctblinc.getMode() quit
	else  set OFFSET=ctblinc.offset
	
	set scau0=Db.getRecord("SCAU0","UCLS=:%UserClass",1)
	if 'scau0.getMode() set RETTIME=0
	else  set RETTIME=+scau0.rettime
	
	set cuvar=Db.getRecord("CUVAR")
	set FDATE=cuvar.tjd
	
	if OFFSET>0 do {
		set acn=Db.getRecord("ACN","CID=:CID",1)
		if 'acn.getMode() set NBDC=""
		else  set NBDC=acn.nbdc
		
		set OFFDAYS=$$NBD^UNBD(TJD+1,OFFSET,0,NBDC)
		}
	else  set OFFDAYS=FDATE

	// Return item restriction time exceeded for one or more return items
	if (FDATE>OFFDAYS)!((FDATE=OFFDAYS)&(%CurrentTime>RETTIME)) do Runtime.setErrMSG("RET",4182) quit
	
	quit

vbu2 // Trigger BU_FEE - Before Update of Fee

	type public RecordRET ret
	do ret.setAuditFlag(1)
	/*---- Revision History ------------------------------------------------

		11/14/05 - HAILEYM - CR18146
  	     Updated to DBI Standards.
	 
		05/16/01 - SCHWARTZC - 45011:01
	     Correct logic for setting INDFEE.

		08/16/00 - SCHWARTZC - 41392/41545
													Prevent an SQL error occuring when the account is not a
													valid PROFILE account.  Quit when TYPE is not defined.

		01/18/00 - SCHWARTZC - 36651/35136
													Convert to PSL.

	----------------------------------------------------------------------
	*/ 

	//Update waive return item fee tables when fees are updated.
	 
	//Update RET.INDFEE for uncoupled client/server releases.
	if (ret.fee=0)!(ret.fee=2) set ret.indfee=0
	if ret.fee=1 set ret.indfee=1
	
	type public Date TJD
	type public Number BRCD,CID,TSEQ
	type public String UID
	
	type Number NEWAMT,NEWFEE,OLDAMT,OLDFEE
	type String ETC,NEWRES,OLDFUID,OLDRES
	
	type RecordACN acn
	type RecordEXC exc
	type RecordUTBLRETFEE uretfee
	type RecordXRETFWA xretfwa
	type RecordXRETFWU xretfwu
	
	set OLDFUID=ret.feeuid
	set ret.feeuid=%UserID

	set acn=Db.getRecord("ACN","CID=:CID",1)
	if 'acn.getMode() quit
	
	set exc=Db.getRecord("EXC","TJD=:TJD,BRCD=:BRCD,UID=:UID,TSEQ=:TSEQ",1)
	if 'exc.getMode() set ETC=""
	else  set ETC=exc.etc

	if ret.fee.oldVal<>ret.fee set NEWFEE=+ret.fee,OLDFEE=+ret.fee.oldVal
	else  set (NEWFEE,OLDFEE)=+ret.fee
	
	if ret.pretres.oldVal'=ret.pretres do {
 		set NEWRES=ret.pretres
		set OLDRES=ret.pretres.oldVal
 		if NEWRES'="" do {
 			set uretfee=Db.getRecord("UTBLRETFEE","RETFEE=:NEWRES,TYPE=:acn.type,ETC=:ETC",1)
 			if 'uretfee.getMode() set NEWAMT="" quit
 			set NEWAMT=uretfee.feeamt
 			}
 		else  set NEWAMT=0
 		
 		if OLDRES'="" do {
 			set uretfee=Db.getRecord("UTBLRETFEE","RETFEE=:OLDRES,TYPE=:acn.type,ETC=:ETC",1)
 			if 'uretfee.getMode() set OLDAMT="" quit
 			set OLDAMT=uretfee.feeamt
 			}
 		else  set OLDAMT=0
		}
	else  do {
 		set (NEWRES,OLDRES)=ret.pretres
		if NEWRES="" set (NEWAMT,OLDAMT)=0 quit
		
		set uretfee=Db.getRecord("UTBLRETFEE","RETFEE=:NEWRES,TYPE=:acn.type,ETC=:ETC",1)
 		if 'uretfee.getMode() set (NEWAMT,OLDAMT)="" quit
 		set (NEWAMT,OLDAMT)=uretfee.feeamt
		}
	
	// Remove the old amount from XRETFWA or XRETFWU
	if OLDFEE=1 do {
		set xretfwa=Db.getRecord("XRETFWA","FDATE=:TJD,CID=:CID",1)
		if 'xretfwa.getMode() quit
		set xretfwa.amount=xretfwa.amount-OLDAMT
		do xretfwa.bypassSave()
		}
	
	else  if OLDFEE=2,'OLDFUID.isNull() do {
		set xretfwu=Db.getRecord("XRETFWU","FDATE=:TJD,CID=:CID,UID=:OLDFUID",1)
		if 'xretfwu.getMode() quit
		set xretfwu.amount=xretfwu.amount-OLDAMT
		do xretfwu.bypassSave()
		}
	
	// Add the new amount to XRETFWA or XRETFWU 
	if NEWFEE=1 do {
		set xretfwa=Db.getRecord("XRETFWA","FDATE=:TJD,CID=:CID",1)
		set xretfwa.amount=xretfwa.amount+NEWAMT
		do xretfwa.bypassSave()
		}
	
	else  if NEWFEE=2 do {
		set xretfwu=Db.getRecord("XRETFWU","FDATE=:TJD,CID=:CID,UID=:ret.feeuid",1)
		set xretfwu.amount=xretfwu.amount+NEWAMT
		do xretfwu.bypassSave()
		}
	quit

vbu3 // Trigger BU_INDFEE - Before update of INDFEE

	type public RecordRET ret
	do ret.setAuditFlag(1)
	/*---- Revision History ------------------------------------------------

		01/18/00 - SCHWARTZC - 36651/35136
   	     Convert to PSL
	----------------------------------------------------------------------
	*/

	// This trigger will update the RET.FEE column if the RET.INDFEE columns is
 // modified.  This is done for uncoupled client/server releases	
	set ret.fee=ret.indfee
	quit

vbu4 // Trigger BU_REVIEW - Before Update of Review Complete

	type public RecordRET ret
	do ret.setAuditFlag(1)
	/*---- Revision History ------------------------------------------------
	
		11/14/05 - HAILEYM - CR18146
  	     Updated to DBI Standards.
	 
		08/16/00 - SCHWARTZC - 41392/41545
													Prevent an SQL error occuring when the account is not a
													valid PROFILE account.  Quit when TYPE is not defined.
	
		01/18/00 - SCHWARTZC - 36651/35136
													Conver to PSL.

	----------------------------------------------------------------------
	*/
	type public Date TJD
	type public Number BRCD,CID,TSEQ
	type public String UID
	
	// Update the REVU1 and REVU2 flags based on the user IDs.
	if ret.review=1 do {
		if ret.uid1'="",ret.revu1'=1 set ret.review=0,ret.revu1=1
		
		if ret.uid2'="",ret.revu2'=1 set ret.revu2=1,ret.review=1
		}
	
	/*
	If the Review complete flag is set and the return item is set to be 
	paid then place a permanent hold for the amount of the return item plus
	the fee amount. The Permanent hold code will come from CTBLINC for this
	source.
	*/
	if ret.review<>1 quit
	if ret.ret<>0 quit
	
	if ret.src.isNull() set ret.hldseq="" quit

 	type Number FEEAMT,HSEQ,TAMT
 	type String ETC,TCMT,TLO
 	
 	type RecordACN acn
 	type RecordEXC exc
 	type RecordUTBLRETFEE uretfee
 	
 	set acn=Db.getRecord("ACN","CID=:CID",1)
 	if 'acn.getMode() quit
	
	set exc=Db.getRecord("EXC","TJD=:TJD,BRCD=:BRCD,UID=:UID,TSEQ=:TSEQ",1)
	if 'exc.getMode() set (ETC,TAMT,TCMT,TLO)=""
	else  set ETC=exc.etc,TAMT=exc.tamt,TCMT=exc.tcmt,TLO=exc.tlo
	
	if ret.fee=1 do {
		set uretfee=Db.getRecord("UTBLRETFEE","RETFEE=:ret.pretres,TYPE=:acn.type,ETC=:ETC",1)
		if 'uretfee.getMode() set FEEAMT=0 quit
		set FEEAMT=uretfee.feeamt
		}
	else  set FEEAMT=0
	
	set HSEQ=$$PLHLD^RETUTL(CID,TAMT+FEEAMT,ret.src,TLO,TCMT)
	if HSEQ>0 set ret.hldseq=HSEQ
	
	quit

vbi2 // Trigger ZBEF_INSERT - Custom trigger

	type public RecordRET ret
	/*
	07/21/2007 - Prabhu Reginald
		     Created to update the Primary Return Reason
		     [PRETRES] field with the values mapped in UTBLEXTRSP1 
	*/
	type String OVR
	type public String SRC
	type ResultSet rs
	set rs=Db.select("OVR","EXC1","TJD=:TJD AND BRCD=:BRCD AND UID=:UID AND TSEQ=:TSEQ")
	if rs.next() set OVR=rs.getCol(1)

	if SRC.get()="" set SRC=ret.src
	if SRC.get()="" do {
		type RecordTTXUID ttxuid
		set ttxuid=Db.getRecord("TTXUID","TJD=:TJD,BRCD=:BRCD,UID=:UID",1)
		if 'ttxuid.getMode() set SRC=""
		else  set SRC=ttxuid.src
		if SRC.isNull() set SRC=$$FIELD^UTSO(TSO,"POSTSRC")
	}
	if SRC.get()="" quit

	//Added to update the Return Reason
	if OVR.get()'="" do {
		type RecordUTBLEXTRSP1 ext=Db.getRecord("UTBLEXTRSP1","SRC,OVR",1)
		if 'ext.getMode() quit
		set ret.pretres=ext.respcde1
		set ret.dpretres=ext.respcde1
	}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRET ret

	set X = ret.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = ret.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	set X = ret.cid if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if ret.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	set X = ret.tseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	set X = ret.amtavl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RET.AMTAVL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ret.amtcol if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RET.AMTCOL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ret.amtcol2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RET.AMTCOL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ret.amttot if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RET.AMTTOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[ret.CHG) set vRM=$$^MSG(742,"L") do vdderr("CHG", vRM) quit
	set X = ret.dfee if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("DFEE", vRM) quit
	if ret.dpretres.length()>12 set vRM = $$^MSG(1076,12) do vdderr("DPRETRES", vRM) quit
	if '("01"[ret.DRET) set vRM=$$^MSG(742,"L") do vdderr("DRET", vRM) quit
	set X = ret.fee if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("FEE", vRM) quit
	if '("01"[ret.FEEPROC) set vRM=$$^MSG(742,"L") do vdderr("FEEPROC", vRM) quit
	if ret.feeuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("FEEUID", vRM) quit
	set X = ret.hldseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("HLDSEQ", vRM) quit
	if '("01"[ret.INDFEE) set vRM=$$^MSG(742,"L") do vdderr("INDFEE", vRM) quit
	set X = ret.obrcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("OBRCD", vRM) quit
	if '("01"[ret.ORET) set vRM=$$^MSG(742,"L") do vdderr("ORET", vRM) quit
	if ret.pretres.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PRETRES", vRM) quit
	set X = ret.priority if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PRIORITY", vRM) quit
	if '("01"[ret.PROC) set vRM=$$^MSG(742,"L") do vdderr("PROC", vRM) quit
	if '("01"[ret.RET) set vRM=$$^MSG(742,"L") do vdderr("RET", vRM) quit
	if ret.retind.length()>1 set vRM = $$^MSG(1076,1) do vdderr("RETIND", vRM) quit
	if '("01"[ret.REVIEW) set vRM=$$^MSG(742,"L") do vdderr("REVIEW", vRM) quit
	if '("01"[ret.REVU1) set vRM=$$^MSG(742,"L") do vdderr("REVU1", vRM) quit
	if '("01"[ret.REVU2) set vRM=$$^MSG(742,"L") do vdderr("REVU2", vRM) quit
	if ret.src.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SRC", vRM) quit
	if ret.ucls1.length()>12 set vRM = $$^MSG(1076,12) do vdderr("UCLS1", vRM) quit
	if ret.ucls2.length()>12 set vRM = $$^MSG(1076,12) do vdderr("UCLS2", vRM) quit
	if ret.uid1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID1", vRM) quit
	if ret.uid2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID2", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RET","MSG",979,"RET."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordRET ret

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("BRCD").exists() set vux("BRCD") = vx("BRCD")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("UID").exists() set vux("UID") = vx("UID")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = ret.tjd_","_ret.brcd_","_ret.cid_","_ret.uid_","_ret.tseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ret.tjd_","_ret.brcd_","_ret.cid_","_ret.uid_","_ret.tseq // Copy new keys into object
	type RecordRET vnewrec = ret.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RET",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRET ret

	if vux("TJD").exists() set ret.tjd = vux("TJD").piece("|",i)
	if vux("BRCD").exists() set ret.brcd = vux("BRCD").piece("|",i)
	if vux("CID").exists() set ret.cid = vux("CID").piece("|",i)
	if vux("UID").exists() set ret.uid = vux("UID").piece("|",i)
	if vux("TSEQ").exists() set ret.tseq = vux("TSEQ").piece("|",i)
	quit
