PROVVER	// Provision Posting Verification Report
	/*
	   ORIG: LOCKE - 04/17/95
	   DESC: Provision Posting Verification Report

	   This routine is called by reports SCA533 and SCA534. All the data
	   needed for the two reports will be put together within this routine.
	   SCA533 will list the accounts and changes made to the provision
	   balances.  SCA534 will list the GL accounts with the net changes
	   made to them.


	---- Revision History ------------------------------------------------

	03/27/07 - SWARNALP - CR 24947
		   Modified BLDGL section to quit when the variable NUM is 
		   NULL, so that the system will pick up the next available 
		   value in the for loop and continue processing without any 
		   error. This is done to avoid the GTM error "GTM-E-NULSUBSC" 
		   caused due to NULL value being passed into the primary key 
		   while fetching records from the GLAD table. Modified DMJ 
		   section to declare GLNUM array as public so that the value 
		   will not be lost which is required to go through DMJ table 
		   and accumulate the amounts for just the Provision GL's.
	
	10/05/06 - Ravindra Rathi - CR 23390
	           Modified the START section to perform a Db.delete on the 
	           PROVVER table for the current PID to prevent the 
	           RDBSAVEFAIL error as the temp table was not deleted 
	           by the report.

	05/02/05 - TITOVE - CR 15089
		   Modified as part of DBI2 project. Removed the logic to
		   clean up temporary tables created by this procedure.
		   The same logic exists in the reports that call into it.
		   Added RUNDAT section to be called by report's prompts.

 	 ------------------------------------------------------------------------
	*/

public	START	// Entry point for report SCA533 (Account listing)

	do Db.delete("PROVVER","PID=:%ProcessID")
	
	do BLDGL
	
	do CID

	quit


CID	// Get each account in the DAYENDLNRP into PROVVER table

	type public Date RUNDAT
	
	type Number CC, CID, CNT, NEWPROV, NPROVCAT, OLDPROV, OPROVCAT
	type Number PROVADJ, TYPE
	type String CLS, CRCD, GLSC, GLFIL, LNM, TMPPROV(,,,)

	type ResultSet rs = Db.select("CID", "DAYENDLNRP", "PROVNPDT = :RUNDAT")

	while rs.next()  do {
		
       		set CID = rs.getCol("CID")
	
		do INIT
	
		if 'PROVADJ , 'OLDPROV quit
	
		if (NPROVCAT - OPROVCAT) do CHGRAC
	
		if 'PROVADJ.isNull() do PROVADJ

		type RecordPROVVER provver = Class.new("RecordPROVVER")

		// Build file for report SCA533
		set provver.pid = %ProcessID
		set provver.cls = CLS
		set provver.type = TYPE
		set provver.cid = CID
		set provver.title = LNM
		set provver.oldprov = OLDPROV
		set provver.provadj = PROVADJ
		set provver.newprov = NEWPROV
		set provver.oprovcat = OPROVCAT
		set provver.nprovcat = NPROVCAT
		set provver.glnum1 = GLFIL.piece("|",1)
		set provver.glamt1 = GLFIL.piece("|",2)
		set provver.glind1 = GLFIL.piece("|",3)
		set provver.glnum2 = GLFIL.piece("|",4)
		set provver.glamt2 = GLFIL.piece("|",5)
		set provver.glind2 = GLFIL.piece("|",6)
		set provver.glnum3 = GLFIL.piece("|",7)
		set provver.glamt3 = GLFIL.piece("|",8)
		set provver.glind3 = GLFIL.piece("|",9)
		set provver.glnum4 = GLFIL.piece("|",10)
		set provver.glamt4 = GLFIL.piece("|",11)
		set provver.glind4 = GLFIL.piece("|",12)
	
		do provver.bypassSave()
		}

	do END

	quit


PROVADJ	// Update GL accounts for adjustment (Principal,Income,Expense)

	// Principal
	do UPDPR(PROVADJ,$S(NPROVCAT'="":NPROVCAT,1:OPROVCAT),1)
	
	// Income or Expense
	do UPDEI(PROVADJ,$S(NPROVCAT'="":NPROVCAT,1:OPROVCAT),0)
	
	quit


CHGRAC	// Update the GL provision balance numbers if the Provision Category changes

	if OPROVCAT.isNull() ! NPROVCAT.isNull() quit

	// Provision Balance Old category
	do UPDPR(OLDPROV,OPROVCAT,0)

	// Provision Balance New category
	do UPDPR(OLDPROV,NPROVCAT,1)

	quit


UPDPR(AMT,CAT,DC)	// Update the Principal Provision Category GL Accounts.

	if 'AMT quit
	set GL=""
	if $E(AMT)="-" set AMT=$FN(AMT,"-"),DC=0

	// Provision Balance
	set GL=$P(UTBL(CLS,CAT),"|",1)
	if GL="" do {
		new PGM,XECUTE
		set PGM=$$GET^UBCHID("BCHLNRPOST") if PGM="" quit
		set XECUTE="S GL=$$GLACN^"_PGM_"(""PROVPGL"",GLSC,CAT)"
		#ACCEPT DATE=12/18/03;PGM=John Carroll
		xecute XECUTE
		}

	do TMPPROV

	quit


UPDEI(AMT,CAT,DC)	// Update Income or Expense Provision Category GL Accounts.

	if 'AMT quit
	set GL=""

	// Provision Income
	if $E(AMT)="-" do {
		set DC=1
		set AMT=$FN(AMT,"-")
		set GL=$P(UTBL(CLS,CAT),"|",3)
		
		if GL="" do {
			new PGM,XECUTE
			set PGM=$$GET^UBCHID("BCHLNRPOST") if PGM="" quit
			set XECUTE="S GL=$$GLACN^"_PGM_"(""PROVIGL"",GLSC,CAT)"
			#ACCEPT DATE=12/18/03;PGM=John Carroll
			xecute XECUTE
			}
		}

	// Provision Expense
	else  set GL=$P(UTBL(CLS,CAT),"|",2)
	if GL="" do {
		new PGM,XECUTE
		set PGM=$$GET^UBCHID("BCHLNRPOST") if PGM="" quit
		set XECUTE="S GL=$$GLACN^"_PGM_"(""PROVEGL"",GLSC,CAT)"
		#ACCEPT DATE=12/18/03;PGM=John Carroll
		xecute XECUTE
		}

	do TMPPROV

	quit


TMPPROV  // Update DAYEND provision TMPPROV array with GL data

	type public Number AMT, CC, CNT, DC, GL
	type public String CRCD, GLFIL, GLNUM(), TMPPROV(,,,)

	type RecordGLAD glad = Db.getRecord("GLAD", "ACN = :GL")
	
	if 'GLNUM(GL).data() set GLNUM(GL) = glad.desc1
	
	set TMPPROV(GL,CC,CRCD,DC) = TMPPROV(GL,CC,CRCD,DC).get() + AMT
	
	set CNT = CNT + 1
	
	set $P(GLFIL,"|",CNT) = GL
	
	set CNT = CNT + 1
	
	set $P(GLFIL,"|",CNT) = AMT
	
	set CNT = CNT + 1
	
	set $P(GLFIL,"|",CNT) = $S(DC:"CR",1:"DR")
	
	quit


public	START2	// Entry point for report SCA534 (GL Listing)

	type public Date RUNDAT		// Set by report's prompt

	type ResultSet rs = Db.select("PID", "PROVGL", "PID = :%ProcessID")

	if rs.isEmpty() do START

	do DMJ
	
	do CHK		

	quit


DMJ	// Go through DMJ and accumulate the amounts for just the Provision GL's

	type public Date RUNDAT
	type public Number ER
	type public String GLNUM()

	type Number CID, TIM, SEQ, UID
	type String CRCD 
	
	// Get the User ID for provision posting source
	do SOURCE^BCHSOURC("BOFF","PROV",.UID)

	if ER quit
	
	do Db.fastDelete("TMPRPT4", "PID = :%ProcessID")
	
	type ResultSet rs = Db.select("DATETIME,CID,TSEQ", "DMJ", "TJD = :RUNDAT")

        while rs.next()  do {
        	
                set TIM = rs.getCol(1)
		set CID = rs.getCol(2)
		
		if 'GLNUM(CID).data() quit
		
		set SEQ = rs.getCol(3) 
               	
		type RecordDMJ dmj = Db.getRecord("DMJ", "TJD = :RUNDAT, DATETIME = :TIM, CID = :CID, TSEQ = :SEQ")
	
		if dmj.uid '= UID quit		// Not posted by provision
	
		if dmj.tcmt.isNull() quit
		
		set CRCD = dmj.crcd
	
		if CRCD.isNull() set CRCD = %SystemCurrency
	
        	type RecordTMPRPT4 tmprpt4 = Class.new("RecordTMPRPT4")
        	
        	set tmprpt4.pid = %ProcessID
        	set tmprpt4.key1 = dmj.ben
        	set tmprpt4.key2 = CRCD
        	set tmprpt4.key3 = CID
        	set tmprpt4.key4 = +dmj.itc.extract()
		set tmprpt4.data = tmprpt4.data + dmj.tamt
		
        	do tmprpt4.save()
		}

	quit


CHK	// Check to make sure that everything posted to the GL's properly

	type Number CC, CID, DC
	type String CRCD
	
	type ResultSet rs = Db.select("GLNUM,CC,CRCD,DC", "PROVGL", "PID = :%ProcessID")

	while rs.next()  do {
		
        	set CID = rs.getCol("GLNUM")
		set CC = rs.getCol("CC")
		set CRCD = rs.getCol("CRCD")
		set DC = rs.getCol("DC")
		
		type RecordPROVGL provgl = Db.getRecord("PROVGL", "PID = :%ProcessID, GLNUM = :CID, CC = :CC, CRCD = :CRCD, DC = :DC")

		type RecordTMPRPT4 tmprpt4 = Db.getRecord("TMPRPT4", "PID = :%ProcessID, KEY1 = :CC, KEY2 = :CRCD, KEY3 = :CID, KEY4 = :DC", 1)
	
		if provgl.tamt = tmprpt4.data quit
	
		set provgl.diff = tmprpt4.data - provgl.tamt
		
		do provgl.bypassSave()
		}

	quit
	

BLDGL // Build arrays for the provision GL's in [UTBLACC]

	type public String GLNUM(), UTBL(,)

	type Number CAT, NUM
	type String CLS, VAR
	
	type ResultSet rs = Db.select("CLS,AC", "UTBLACC")

	while rs.next()  do {
		
       		set CLS = rs.getCol("CLS")
		set CAT = rs.getCol("AC")

		type RecordUTBLACC utblacc = Db.getRecord("UTBLACC", "CLS = :CLS, AC = :CAT")

		set UTBL(CLS,CAT) = utblacc.crgl_"|"_utblacc.drgl_"|"_utblacc.provigl
		
		for VAR = "CRGL","DRGL","PROVIGL" do {

			set NUM = utblacc.@VAR
			if NUM.isNull() quit
			
			type RecordGLAD glad = Db.getRecord("GLAD", "ACN = :NUM")
			
			set GLNUM(NUM) = glad.desc1
			}
		}
	quit
	

INIT	// Initialize the account data

	type public Date RUNDAT
	type public Number CC, CID, CNT, GLSC, NEWPROV, NPROVCAT, OLDPROV
	type public Number OPROVCAT, PROVADJ, TYPE
	type public String CLS, CRCD, GLFIL, LNM

	type RecordDAYENDLNRP dayendlnrp = Db.getRecord("DAYENDLNRP", "PROVNPDT = :RUNDAT, CID = :CID")

	type RecordACN acn = Db.getRecord("ACN", "CID = :CID")

	// Type
	set TYPE = acn.type

	// Class
	set CLS = acn.cls

	// Short name
	set LNM = acn.lnm

	// Cost Center
	set CC = acn.cc

	// Currency Code
	set CRCD = acn.crcd

	// General Ledger Set Code
	set GLSC = acn.glsc

	// New Provision Category
	set NPROVCAT = dayendlnrp.acls

	// Provision Adjustment
	set PROVADJ = dayendlnrp.provadj

	// Old Provision Balance
	set OLDPROV = dayendlnrp.provbal

	// Old Provision Category
	set OPROVCAT = dayendlnrp.ovacls

	// New Provision Balance
	set NEWPROV = PROVADJ + OLDPROV

	set CNT = 0
	set GLFIL = ""

	quit


END	// File the GL information for SCA534

	type public String GLNUM(), TMPPROV(,,,)

	type Number U, X, Y
	type String Z

	set (U,X,Y,Z)=""
	
	for  set X = TMPPROV(X).order() quit:X.isNull()  do {
		
		for  set Y = TMPPROV(X,Y).order() quit:Y.isNull()  do {
			
			for  set Z = TMPPROV(X,Y,Z).order() quit:Z.isNull()  do {
				
				for  set U = TMPPROV(X,Y,Z,U).order() quit:U.isNull()  do {
					
					set TMPPROV(X,Y,Z,U).piece("|",2) = GLNUM(X)
					
					type RecordPROVGL provgl = Class.new("RecordPROVGL")
					
					set provgl.pid = %ProcessID
					set provgl.glnum = X
					set provgl.cc = Y
					set provgl.crcd = Z
					
					if TMPPROV(X,Y,Z,U).extract() = "-" do {
						
						set TMPPROV(X,Y,Z,U).piece("|",1) = -TMPPROV(X,Y,Z,U)
						
						set provgl.dc = 'U
						}
					else  set provgl.dc = U
						
					set provgl.tamt = TMPPROV(X,Y,Z,U).piece("|",1)
					set provgl.desc = TMPPROV(X,Y,Z,U).piece("|",2)
					set provgl.diff = 0

					do provgl.bypassSave()
					}
				}
			}
		}

	quit
	
	
public	RUNDAT(Date NPDT)	// Verify date entered by user

	type public Number ER = 0

	type ResultSet rs = Db.select("CID", "DAYENDLNRP", "PROVNPDT = :NPDT")
	
	if rs.isEmpty() set ER = 1
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60718^36024^P.R. Swarnalatha^9975"	// Signature - LTD^TIME^USER^SIZE
