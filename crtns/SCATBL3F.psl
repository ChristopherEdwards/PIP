SCATBL3F(RecordSCATBL3 scatbl3, String vpar, Boolean vparNorm) // SCATBL3 - SCA Menu - Userclass Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              05/23/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = scatbl3.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(scatbl3,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(scatbl3,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("FN").exists()!vx("UCLS").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SCATBL3",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SCATBL3","FN = :scatbl3.fn and UCLS = :scatbl3.ucls") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String FN
	type public String UCLS

	type RecordSCATBL3 scatbl3 = Db.getRecord("SCATBL3","FN=:FN,UCLS=:UCLS")
	if (%ProcessMode = 2) do {
		do scatbl3.setMode(2)

		do SCATBL3F(scatbl3,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSCATBL3 scatbl3

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SCATBL3","FN = :scatbl3.fn and UCLS = :scatbl3.ucls") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(scatbl3,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(scatbl3,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(scatbl3)) S ^SCATBL(1,vobj(scatbl3,-3),vobj(scatbl3,-4))=vobj(scatbl3)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSCATBL3 scatbl3

	if vpar'["/NOLOG/" do ^DBSLOGIT(scatbl3,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SCATBL(1,vobj(scatbl3,-3),vobj(scatbl3,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSCATBL3 scatbl3

	// Type local variables for access keys for defaults
	type public String FN
	type public String UCLS

	if scatbl3.auth.isNull() set scatbl3.auth = 1          // auth
	quit


vreqn // Validate required data items

	type public RecordSCATBL3 scatbl3

	if scatbl3.auth.isNull() do vreqerr("AUTH") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSCATBL3 scatbl3

	if scatbl3.fn.isNull() do vreqerr("FN") quit
	if scatbl3.ucls.isNull() do vreqerr("UCLS") quit

		if vx("AUTH").exists(),scatbl3.auth.isNull() do vreqerr("AUTH") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCATBL3","MSG",1767,"SCATBL3."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSCATBL3 scatbl3

	set X = scatbl3.fn if 'X.isNull(),'Db.isDefined("SCATBL","X") set vRM = $$^MSG(1485,X) do vdderr("FN", vRM) quit
	set X = scatbl3.ucls if 'X.isNull(),'Db.isDefined("SCAU0","X") set vRM = $$^MSG(1485,X) do vdderr("UCLS", vRM) quit
	if '("01"[scatbl3.AUTH) set vRM=$$^MSG(742,"L") do vdderr("AUTH", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCATBL3","MSG",979,"SCATBL3."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSCATBL3 scatbl3

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("FN").exists() set vux("FN") = vx("FN")
	if vx("UCLS").exists() set vux("UCLS") = vx("UCLS")
	do vkey(1) set voldkey = scatbl3.fn_","_scatbl3.ucls   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = scatbl3.fn_","_scatbl3.ucls   // Copy new keys into object
	type RecordSCATBL3 vnewrec = scatbl3.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SCATBL3",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSCATBL3 scatbl3

	if vux("FN").exists() set scatbl3.fn = vux("FN").piece("|",i)
	if vux("UCLS").exists() set scatbl3.ucls = vux("UCLS").piece("|",i)
	quit
