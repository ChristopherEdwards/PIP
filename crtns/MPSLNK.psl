MPSLNK	  	/*
	PROC: MPSLNK
	ORIG: MATTSON - 10/02/2000
	DESC: MPS Card Linkage Utility (Called by Batch Definition BCHMPSREC)

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------
	
	 07/03/06 - SPR - CR 21955
		     Modified MAIN section to check whether the account group 
		     exists or not and to avoid undefined error while 
		     running auto dayend suite. 

	 12/12/05 -  SPR - CR 18555
	       	     Card Management - General DBI3 System Area Clean up.
  	*/

	quit


	//---------------------------------------------------------------------
	/*
	Auto-Linkage Rules
	==================

	The number of accounts that can be linked to a card is controlled by
	UTBLMPS.MAXCRD.  The number of DDA, SAV and RC accounts that can be
	linked to a card is controlled by MAXDDA, MAXSAV and MAXRC
	respectively.

	The order the accounts are processed is based upon the ORDERBY
	indicator in table UTBLMPSPROD.

	If a card number was pre-assigned to an account	(ACN.PRECARD), the
	account will be linked to the pre-assigned card number if a card
	record exists.  If the card record does not exist, an error will
	be logged and the account will not be linked to any card record.

	If a card of this card type has not been issued to this customer,
	a new card record will be created.

	Link accounts to existing "available" cards (i.e., those where the
	maximum number of accounts/card or accounts/group have not been
	reached).


	Auto-Linkage Options (LNKOPT)
	=============================

	Option 0 - Do not auto-link

		Disables auto-linking.  No card records will be created;
		accounts will not be linked to a a card.

	Option 1 - Auto-link; when maximums are exceeded, issue a new card

		If there are no existing cards or the maximum
		number of accounts/cardor accounts/group have
		been reached, create a new card record and
		link accounts to this card.

	Option 2 - Auto-link; when maximums are exceeded, do not issue a new card

		Link accounts to the card of this card type for this
		customer.  If the maximum number of accounts/card or
		accounts/group has been reached, do not create a new
		card for the customer.  The account, in this case,
		will not be auto-linked to a card.

	*/
	//---------------------------------------------------------------------


	//---------------------------------------------------------------------
MAIN(CO,CARDTYP,RecordACN acn(),crdlnk)	// Main routine
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . CO	Company Code		/TYP=T/REQ/MECH=VAL
	     . CARDTYP	Card Type		/TYP=T/REQ/MECH=VAL
	     . acn	Account Object Array	/TYP=T/REQ/MECH=REFARR:W
	     . crdlnk	Account/Card Link Index	/TYP=T/REQ/MECH=REFARR:W
	
	This sub-routine handles all the rules for automatically linking new
	accounts to card records.
	*/
	
	type public Boolean ER
	type public Date XTJD
	type public Number crdidx()
	type public String ET,RM,UTBLMPS(,)
	type Number ACN,cid,crdidx,CID,LNKOPT,MAXCRD,MAXDDA,MAXLN,MAXRC,MAXSAV,precard 
	type String CRDNUM,grp,in,prepin,orderby,ordt,ORDT,x
	
	set x=UTBLMPS(CO,CARDTYP)
	set MAXCRD=x.piece("|",1) if MAXCRD.isNull() set MAXCRD=99
	set MAXDDA=x.piece("|",2) if MAXDDA.isNull() set MAXDDA=99
	set MAXSAV=x.piece("|",3) if MAXSAV.isNull() set MAXSAV=99
	set MAXRC=x.piece("|",4) if MAXRC.isNull() set MAXRC=99
	set LNKOPT=x.piece("|",5) if LNKOPT.isNull() set LNKOPT=0
	set MAXLN=x.piece("|",6) if MAXLN.isNull() set MAXLN=99
 	if LNKOPT=0 quit

	set ACN=""
	for  set ACN=crdlnk(ACN).order() quit:ACN=""  do {

		set ER=0
		catch error {
			new ET,RM
			set ET=error.type
 
			if ET["%GTM-" do ZE^UTLERR quit
			set ET=ET_"-"_error.thrownAt
			set RM=error.description
			do ^UTLERR
			}

		
		type RecordCRD crd()

		// Load card information
		do CIFCRD(CARDTYP,ACN,.crd(),.crdidx)

		set orderby=""
		for  set orderby=$O(crdlnk(ACN,orderby)) quit:orderby=""  do {

			set cid=""
			for  set cid=$O(crdlnk(ACN,orderby,cid)) quit:cid=""  do {

				set ER=0
				set CID=cid		// SPG 10/09/01
				catch error {
					set ET=error.type
 
					if ET["%GTM-" do ZE^UTLERR quit
					set ET=ET_"-"_error.thrownAt
					set RM=error.description
					do ^UTLERR
					}
				
				if 'acn(cid).exists() set acn(cid)=Db.getRecord("ACN","CID=:cid",1)
				if acn(cid).grp.isNull() quit
				
				set grp=acn(cid).grp
				set ordt=$P(crdlnk(ACN,orderby,cid),"|",1)
				set ORDT=ordt
				set prepin=$P(crdlnk(ACN,orderby,cid),"|",2)
				set precard=$P(crdlnk(ACN,orderby,cid),"|",3)

				set CRDNUM=""
				if precard.isNull() do {

					// Use existing card if maximum limits not reached
					set CRDNUM=$$FINDCRD(grp,.crdidx) if 'CRDNUM.isNull() quit

					// Only create a card if none exists for this card type
					if LNKOPT=2,crdidx quit

					// Get new card number
					set CRDNUM=$$CRDNUM^MPSCARDU(CO,CARDTYP)
			
					// Log exception if a card number is not calculated
					if CRDNUM.isNull() do { quit
						if ER set ER=0
						// Card not created - account ~p2
						set RM=$$^MSG(3004,$$^MSG(497),CID)
						do EXC
						}
	
					// Create new card record
					do CRDREC(CARDTYP,CRDNUM,ACN,CO,cid,ordt,prepin,.crd(),.crdidx)
					}

				else  do {
					type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CARDTYP,CRDNUM=:CRDNUM",1)
					if crd.getMode() set CRDNUM=precard
					else  set RM=$$^MSG(3063) do EXC
					}

				if CRDNUM.isNull() quit

				// Link account to card
				do CRDGRP(CARDTYP,CRDNUM,ACN,grp,cid,.acn(),.crdidx)

				if precard.isNull() do SETCARD^MPSRECU(CARDTYP,CRDNUM,ACN,XTJD)
				}
			}
		}

	quit


	//---------------------------------------------------------------------
CIFCRD(CARDTYP,ACN,RecordCRD crd(),crdidx) // Load Customer Card Information
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . CARDTYP	Card Type		/TYP=T/REQ/MECH=VAL
	     . ACN	Customer Number		/TYP=N/REQ/MECH=VAL
	     . crd()	Card Object Array	/TYP=T/MECH=REFARR:W
	     . crdidx	Card Object Index	/TYP=T/MECH=REFARR:W

	This subroutine returns an array of card objects (crd) of the card
	type specified by 'CARDTYP' for the customer specified by 'ACN'.
	It also returns an index of the card object array (crdidx) that
	associates the card number to the applicable card object.
	*/
	//---------------------------------------------------------------------

	type String CRDNUM,grp
	type public Number crdidx

	type ResultSet cifcrd=Db.select("CRDNUM","CRD","ACN=:ACN AND CRDTYP=:CARDTYP")

	set crdidx=0

	if cifcrd.isEmpty() quit
	while cifcrd.next() do {
		set CRDNUM=cifcrd.getCol("CRDNUM")

		set crdidx=crdidx+1
		set crdidx(CRDNUM)=0
		set crd(CRDNUM)=Db.getRecord("CRD","CRDTYP=:CARDTYP,CRDNUM=:CRDNUM")

		type ResultSet crdgrp=Db.select("GRP","CRDGRP","CRDTYP=:CARDTYP AND CRDNUM=:CRDNUM")

		if crdgrp.isEmpty() quit
		while crdgrp.next() do {
			set grp=crdgrp.getCol(1)
			set crdidx(CRDNUM)=crdidx(CRDNUM)+1
			set crdidx(CRDNUM,grp)=crdidx(CRDNUM,grp).get()+1
			}
		}
	quit


	//---------------------------------------------------------------------
CRDREC(CARDTYP,CRDNUM,ACN,CO,CID,ORDT,PREPIN,RecordCRD crd(),crdidx)    // Create Card Record
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . CARDTYP	Card Type		/TYP=T/REQ/MECH=VAL
	     . CRDNUM	Card Number		/TYP=T/REQ/MECH=VAL
	     . ACN	Customer Number		/TYP=N/REQ/MECH=VAL
	     . CO	Company code		/TYP=T/REQ/MECH=VAL
	     . CID	Account Number		/TYP=N/REQ/MECH=VAL
	     . ORDT	Card Order Date		/TYP=D/REQ/MECH=VAL
	     . PREPIN	Card Pin Number		/TYP=T/REQ/MECH=VAL
	     . crd()	Card Object Array	/TYP=T/REQ/MECH=REFARR:W
	     . crdidx	Card Object Index	/TYP=T/REQ/MECH=REFARR:W

	This subroutine creates a card record for customer 'ACN' for the card
	type 'CARDTYP' and the card number 'CRDNUM'.
	*/
	//---------------------------------------------------------------------
	
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CARDTYP,CRDNUM=:CRDNUM",1)
	if crd.getMode() quit
	
	// type RecordCRD crd(CRDNUM)=Class.new("RecordCRD")	SPG 01/28/03
	set crd(CRDNUM)=Class.new("RecordCRD")		      //SPG 01/28/03

	do crd(CRDNUM).setAuditFlag(1)
	set crd(CRDNUM).crdtyp=CARDTYP
	set crd(CRDNUM).crdnum=CRDNUM

	set crd(CRDNUM).acn=ACN
	set crd(CRDNUM).ord=ORDT
	set crd(CRDNUM).encpin=PREPIN
	set crd(CRDNUM).co=CO
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1)
	if cif.getMode() do {
		set crd(CRDNUM).crdhld=cif.crdnam
		if cif.crdnam="" set crd(CRDNUM).crdhld=cif.nam
		}

	do crd(CRDNUM).save()

	set crdidx(CRDNUM)=0

	quit
 

	//---------------------------------------------------------------------
CRDGRP(CARDTYP,CRDNUM,ACN,GRP,CID,RecordACN acn(),crdidx)    // Link account
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . CARDTYP	Card Type		/TYP=T/REQ/MECH=VAL
	     . CRDNUM	Card Number		/TYP=T/REQ/MECH=VAL
	     . ACN	Customer Number		/TYP=N/REQ/MECH=VAL
	     . GRP	Account Group		/TYP=T/REQ/MECH=VAL
	     . CID	Account Number		/TYP=N/REQ/MECH=VAL
	     . acn	Account Object Array	/TYP=T/REQ/MECH=REFARR:W
	     . crdidx	Card Object Index	/TYP=T/REQ/MECH=REFARR:W
	*/
	//---------------------------------------------------------------------

	type RecordCRDGRP crdgrp1=Db.getRecord("CRDGRP","CRDTYP=:CARDTYP,CRDNUM=:CRDNUM,GRP=:GRP,CID=:CID",1)
	if crdgrp1.getMode() quit
	
	type RecordCRDGRP crdgrp=Class.new("RecordCRDGRP")

	do crdgrp.setAuditFlag(1)
	set crdgrp.crdtyp=CARDTYP
	set crdgrp.crdnum=CRDNUM
	set crdgrp.grp=GRP
	set crdgrp.cid=CID

	type ResultSet rs=Db.select("CID","CRDGRP","CRDTYP=:CARDTYP AND CRDNUM=:CRDNUM AND GRP=:GRP")
	if rs.isEmpty() set crdgrp.primcrd=1
	else  set crdgrp.primcrd=""
	set crdgrp.lnm=acn(CID).lnm

	do crdgrp.save()
	set crdidx(CRDNUM)=crdidx(CRDNUM).get()+1
	set crdidx(CRDNUM,GRP)=crdidx(CRDNUM,GRP).get()+1

	quit


	//---------------------------------------------------------------------
FINDCRD(grp,crdidx)	// Find "available" card (i.e., max limits not reached)
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . grp	Account Group		/TYP=T/REQ/MECH=VAL
	     . crdidx	Card Object Index	/TYP=T/REQ/MECH=REFARR:W
	
	This sub-routine verifies if an account of the same account group
	can be added to an existing card.
	*/
	
	type public Number MAXCRD,MAXDDA,MAXLN,MAXRC,MAXSAV
	type Boolean hit
	type Number maxgrp 
	type String crdnum
	
	set maxgrp=0
	if grp="DDA" set maxgrp=MAXDDA
	else  if grp="RC" set maxgrp=MAXRC
	else  if grp="SAV" set maxgrp=MAXSAV
	else  if grp="LN" set maxgrp=MAXLN

	set hit=0

	set crdnum=""
	for  set crdnum=crdidx(crdnum).order() quit:crdnum=""  do { if hit quit

		if crdidx(crdnum)'<MAXCRD quit
		if crdidx(crdnum,grp).get()'<maxgrp quit

		// Card is "available"
		set hit=1
		}

	quit crdnum


	//---------------------------------------------------------------------
EXC     // Log error to DAYEND
	//---------------------------------------------------------------------
 
	// SPG 01/28/03
	
	type public Number CID
	type public String RM,%ZTSEQ
	type String DESC
	
	type RecordDBTBL25 dbtbl=Db.getRecord("DBTBL25","%LIBS=""SYSDEV"",PROCID=""MPSLNK""")
	set DESC=dbtbl.des
 
 	do LOG^UTLEXC(%RoutineName,"*",DESC,CID,%ZTSEQ.get(),RM.get())
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60449^21787^Renga SP^10913"	// Signature - LTD^TIME^USER^SIZE
