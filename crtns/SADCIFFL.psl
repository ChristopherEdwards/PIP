SADCIFFL(RecordSADDRCIF saddrcif, String vpar, Boolean vparNorm) // SADDRCIF - Customer Seasonal Address Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (21)             05/23/2006
	// Trigger Definition (2)                      08/16/2006
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = saddrcif.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(saddrcif,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(saddrcif,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = saddrcif.acn

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SADDRCIF",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SADDRCIF","ACN = :saddrcif.acn")  // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN

	type RecordSADDRCIF saddrcif = Db.getRecord("SADDRCIF","ACN=:ACN")
	if (%ProcessMode = 2) do {
		do saddrcif.setMode(2)

		do SADCIFFL(saddrcif,vpar)
	}
	else  do VINDEX(saddrcif)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSADDRCIF saddrcif

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SADDRCIF","ACN = :saddrcif.acn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(saddrcif)) S ^SADDR("CIF",vobj(saddrcif,-3))=vobj(saddrcif)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.saddrcif)            // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.saddrcif) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSADDRCIF saddrcif

	if vpar["/INDEX/" do VINDEX(.saddrcif)                 // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.saddrcif)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SADDR("CIF",vobj(saddrcif,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordSADDRCIF saddrcif

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSADDRCIF saddrcif

	if saddrcif.acn.isNull() do vreqerr("ACN") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SADDRCIF","MSG",1767,"SADDRCIF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSADDRCIF saddrcif
	if 'saddrcif.acn.isNull() set vfkey("^CIF("_""""_saddrcif.acn_""""_","_1_")")="SADDRCIF(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSADDRCIF saddrcif
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":saddrcif.acn") set vERRMSG = $$^MSG(8563,"SADDRCIF(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("SADSD").exists()!vx("SADED").exists()!vx("SAD1").exists()!vx("SAD2").exists()!vx("SAD3").exists()!vx("SAD4").exists()!vx("SCITY").exists()!vx("SCOUNTY").exists()!vx("SSTATE").exists()!vx("SCNTRY").exists()!vx("SZIP").exists()!vx("NSAD1").exists()!vx("NSAD2").exists()!vx("NSAD3").exists()!vx("NSAD4").exists()!vx("NSCITY").exists()!vx("NSCOUNTY").exists()!vx("NSSTATE").exists()!vx("NSCNTRY").exists()!vx("NSZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Customer Seasonal Address

	type public RecordSADDRCIF saddrcif
	/*
	--------------------- Revision History ---------------------------
 	08/16/06 - GIRIDHAL - CR 22581
 		Adding county information to seasonal address that is required
	 	by BASEL II 
	08/29/01 - ANTONOVS - 46279:016
		Trigger BEFORE_INSERT was deleted.
	------------------------------------------------------------------
	*/

	new ACN
	set ACN=saddrcif.acn

	/* - Validate Zip code and State code - */
	
	if saddrcif.nszip'="" do { quit:ER
		do ZIP^PROCZIP(saddrcif.nscntry,saddrcif.nsstate,saddrcif.nszip)
		if $G(ER) do Runtime.setErrMSG("SADDRCIF",3333,RM) quit:ER
	}
	
	if saddrcif.szip'="" do { quit:ER
		do ZIP^PROCZIP(saddrcif.scntry,saddrcif.sstate,saddrcif.szip)
		if $G(ER) do Runtime.setErrMSG("SADDRCIF",3333,RM) quit:ER
	}
	
	if saddrcif.nsstate'="",$$CHKSTATE^ADDRUTL("SADDRCIF",saddrcif.nscntry,saddrcif.nsstate) quit:ER
	if saddrcif.sstate'="",$$CHKSTATE^ADDRUTL("SADDRCIF",saddrcif.scntry,saddrcif.sstate) quit:ER
	
					/* Start and End Date Validation */
	
	/* Start date or End date required*/

	if ((saddrcif.sad1'="")!(saddrcif.scity'="")!(saddrcif.scounty'="")!(saddrcif.scntry'="")!(saddrcif.sstate'="")!(saddrcif.szip'="")!(saddrcif.saded'="")),(saddrcif.sadsd="") do Runtime.setErrMSG("SADDRCIF",4906) quit:ER
	if ((saddrcif.sad1'="")!(saddrcif.scity'="")!(saddrcif.scounty'="")!(saddrcif.scntry'="")!(saddrcif.sstate'="")!(saddrcif.szip'="")!(saddrcif.sadsd'="")),(saddrcif.saded="") do Runtime.setErrMSG("SADDRCIF",4907) quit:ER

	if saddrcif.sadsd'="",saddrcif.saded'="" do { quit:ER
		if saddrcif.sadsd'>%SystemDate do Runtime.setErrMSG("SADDRCIF",4910) quit:ER
		if saddrcif.saded'>%SystemDate do Runtime.setErrMSG("SADDRCIF",4919) quit:ER
		if saddrcif.saded'>saddrcif.sadsd do Runtime.setErrMSG("SADDRCIF",4923) quit:ER
	}
	
	/* Seasonal Address period cannot exceed one year*/
	
	new period
	if saddrcif.sadsd'="",saddrcif.saded'="" do { quit:ER
		set period=$$NOY^SCADAT(saddrcif.saded,saddrcif.sadsd,1,0)
		if period>1 do Runtime.setErrMSG("SADDRCIF",4920) quit:ER
	}

	/* Seasonal address dates conflict with temporary address dates */	

	new TABLE,rs

	set TABLE="CIF"
	type ResultSet rs=Db.select("EFDATE","SADDREFD","FID=:TABLE AND AKEY=:ACN")
	if 'rs.isEmpty() do { quit:ER
		while rs.next() do { quit:ER
			set EFDATE=rs.getCol(1)
			if ((EFDATE'<(saddrcif.sadsd))&(EFDATE'>(saddrcif.saded))) do Runtime.setErrMSG("SADDRCIF",4905) quit:ER
		}
	}
	
	/* Defaulting address to customer accounts */
	
	new rs,xacn,PROD,NONPA
	
	type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
	if rs.isEmpty() quit
	while rs.next() do { quit:ER
		set CID=rs.getCol(1)
		set xacn=Db.getOneRow("ACN","ACN","CID")
		set PROD=Db.getOneRow("TYPE","ACN","CID")
		set NONPA=Db.getOneRow("NONPA","PRODCTL","PROD")
		if ((ACN=xacn)&('NONPA)) do ADEFAULT()
	}
	quit
	
ADEFAULT()   //Defaulting Customer Seasonal Address to all customer accounts
	
	new saddracn,saddrcif 

	type RecordSADDRCIF saddrcif=Db.getRecord("SADDRCIF","ACN")
	type RecordSADDRACN saddracn
	
	if 'Db.isDefined("SADDRACN","CID") do { quit:ER
		set saddracn=Class.new("RecordSADDRACN")
		set saddracn.cid=CID
	}
	else  set saddracn=Db.getRecord("SADDRACN","CID")

	do saddracn.setAuditFlag(1)
	
	set saddracn.sadsd=saddrcif.sadsd
	set saddracn.saded=saddrcif.saded
	set saddracn.sad1=saddrcif.sad1
	set saddracn.sad2=saddrcif.sad2
	set saddracn.sad3=saddrcif.sad3
	set saddracn.sad4=saddrcif.sad4
	set saddracn.scity=saddrcif.scity
	set saddracn.scounty=saddrcif.scounty	
	set saddracn.scntry=saddrcif.scntry
	set saddracn.sstate=saddrcif.sstate
	set saddracn.szip=saddrcif.szip
	
	do saddracn.save()

	quit

vau1 // Trigger AFTER_UPDATE - After Update Seasonal Address

	type public RecordSADDRCIF saddrcif
	/*
	---- Revision History ------------------------------------------------	
	 08/16/06 - GIRIDHAL - 22581
	 	Adding county information to seasonal address that is required
	 	by BASEL II
	 */	
	new oldstart,oldend
	new ACN

	set ACN=saddrcif.acn
	set oldstart=saddrcif.sadsd.oldVal
	set oldend=saddrcif.saded.oldVal

	/* Start and End Date Validation */

	if ((saddrcif.sad1'="")!(saddrcif.scity'="")!(saddrcif.scounty'="")!(saddrcif.scntry'="")!(saddrcif.sstate'="")!(saddrcif.szip'="")!(saddrcif.saded'="")),(saddrcif.sadsd="") do Runtime.setErrMSG("SADDRCIF",4906) quit:ER
	if ((saddrcif.sad1'="")!(saddrcif.scity'="")!(saddrcif.scounty'="")!(saddrcif.scntry'="")!(saddrcif.sstate'="")!(saddrcif.szip'="")!(saddrcif.sadsd'="")),(saddrcif.saded="") do Runtime.setErrMSG("SADDRCIF",4907) quit:ER

	/* Start date cannot be modified if Seasonal address is in effect */
	
	if (saddrcif.sadsd'="")&(oldstart'="") do { quit:ER
		if (saddrcif.isChanged("SADSD"))&(%SystemDate'<oldstart)&(%SystemDate'>(saddrcif.saded)) do Runtime.setErrMSG("SADDRCIF",4921) quit:ER
	}
	
	/* If seasonal address is not in effect - check the valid values for start and end date */

	if (saddrcif.sadsd'="")&(saddrcif.saded'="") do { quit:ER
		if '((%SystemDate'<oldstart)&(%SystemDate'>oldend)) do { quit:ER
			if (saddrcif.sadsd)'>(%SystemDate) do Runtime.setErrMSG("SADDRCIF",4910) quit:ER
			if (saddrcif.saded)'>(%SystemDate) do Runtime.setErrMSG("SADDRCIF",4919) quit:ER
			if (saddrcif.saded)'>(saddrcif.sadsd) do Runtime.setErrMSG("SADDRCIF",4923) quit:ER
		}
		else  do { quit:ER
			if (saddrcif.saded)'>(%SystemDate) do Runtime.setErrMSG("SADDRCIF",4919) quit:ER
			if (saddrcif.saded)'>(saddrcif.sadsd) do Runtime.setErrMSG("SADDRCIF",4923) quit:ER 
		}
	}
	
	/* Seasonal Address period cannot exceed one year*/
	
	new period
	if saddrcif.sadsd'="",saddrcif.saded'="" do { quit:ER
		set period=$$NOY^SCADAT(saddrcif.saded,saddrcif.sadsd,1,0)
		if period>1 do Runtime.setErrMSG("SADDRCIF",4920) quit:ER
	}
	
	/* Seasonal address dates conflict with temporary address dates */

	new rs
	new TABLE

	set TABLE="CIF"
	type ResultSet rs=Db.select("EFDATE","SADDREFD","FID=:TABLE AND AKEY=:ACN")
	if 'rs.isEmpty() do { quit:ER
		while rs.next() do { quit:ER
			set EFDATE=rs.getCol(1)
			if ((EFDATE'<(saddrcif.sadsd))&(EFDATE'>(saddrcif.saded))) do Runtime.setErrMSG("SADDRCIF",4905) quit:ER
		}
	}

						/*  Validate Zip code and State code  */
	
	if saddrcif.nszip'="" do { quit:ER
		do ZIP^PROCZIP(saddrcif.nscntry,saddrcif.nsstate,saddrcif.nszip)
		if $G(ER) do Runtime.setErrMSG("SADDRCIF",3333,RM) quit:ER
	}
	
	if saddrcif.szip'="" do { quit:ER
		do ZIP^PROCZIP(saddrcif.scntry,saddrcif.sstate,saddrcif.szip)
		if $G(ER) do Runtime.setErrMSG("SADDRCIF",3333,RM) quit:ER
	}
	
	if saddrcif.nsstate'="",$$CHKSTATE^ADDRUTL("SADDRCIF",saddrcif.nscntry,saddrcif.nsstate) quit:ER
	if saddrcif.sstate'="",$$CHKSTATE^ADDRUTL("SADDRCIF",saddrcif.scntry,saddrcif.sstate) quit:ER
	
	/* If seasonal address is in effect - default changes to mailing addr */

	if ((%SystemDate'<(saddrcif.sadsd))&(%SystemDate'>(saddrcif.saded))) do { quit:ER
		new SAD1,SAD2,SAD3,SAD4,SCITY,SCOUNTY,SCNTRY,SSTATE,SZIP
		set SAD1=saddrcif.sad1
		set SAD2=saddrcif.sad2
		set SAD3=saddrcif.sad3
		set SAD4=saddrcif.sad4
		set SCITY=saddrcif.scity
		set SCOUNTY=saddrcif.scounty		
		set SCNTRY=saddrcif.scntry
		set SSTATE=saddrcif.sstate
		set SZIP=saddrcif.szip
		do Db.update("CIF","MAD1=:SAD1,MAD2=:SAD2,MAD3=:SAD3,MAD4=:SAD4,MCITY=:SCITY,MCOUNTY=:SCOUNTY,MCNTRY=:SCNTRY,MSTATE=:SSTATE,MZIP=:SZIP","ACN=:ACN")
	}
	
	/* If seasonal address is not in effect, non-seasonal address cannot be modified */
	
	if (saddrcif.sadsd'="")&(saddrcif.saded'="")&'((%SystemDate'<(saddrcif.sadsd))&(%SystemDate'>(saddrcif.saded))) do { quit:ER
		if (saddrcif.isChanged("NSAD1"))!(saddrcif.isChanged("NSAD2"))!(saddrcif.isChanged("NSAD3"))!(saddrcif.isChanged("NSAD4")) do Runtime.setErrMSG("SADDRCIF",4922) quit:ER
		if (saddrcif.isChanged("NSCITY"))!(saddrcif.isChanged("NSCOUNTY"))!(saddrcif.isChanged("NSCNTRY"))!(saddrcif.isChanged("NSSTATE"))!(saddrcif.isChanged("NSZIP")) do Runtime.setErrMSG("SADDRCIF",4922) quit:ER
	}
	
	/* If seasonal address deleted and in effect - reset mailing address.

	!!! This section should always be right before customer accounts update.

		(please place all modifications above) */
	
	if (saddrcif.sadsd=""),(saddrcif.saded=""),(saddrcif.sad1=""),(saddrcif.sad2=""),(saddrcif.sad3=""),(saddrcif.sad4)="" do { quit:ER
	if (saddrcif.scity=""),(saddrcif.scounty=""),(saddrcif.scntry=""),(saddrcif.sstate=""),(saddrcif.szip="") do { quit:ER
		if ((%SystemDate'<(saddrcif.sadsd.oldVal))&(%SystemDate'>(saddrcif.saded.oldVal))) do { quit:ER
			new NSAD1,NSAD2,NSAD3,NSAD4,NSCITY,NSCOUNTY,NSCNTRY,NSSTATE,NSZIP
			set NSAD1=saddrcif.nsad1
			set NSAD2=saddrcif.nsad2
			set NSAD3=saddrcif.nsad3
			set NSAD4=saddrcif.nsad4
			set NSCITY=saddrcif.nscity
			set NSCOUNTY=saddrcif.nscounty			
			set NSCNTRY=saddrcif.nscntry
			set NSSTATE=saddrcif.nsstate
			set NSZIP=saddrcif.nszip

			do Db.update("CIF","MAD1=:NSAD1,MAD2=:NSAD2,MAD3=:NSAD3,MAD4=:NSAD4,MCITY=:NSCITY,MCOUNTY=:NSCOUNTY,MCNTRY=:NSCNTRY,MSTATE=:NSSTATE,MZIP=:NSZIP","ACN=:ACN") quit:ER

			set saddrcif.nsad1=""
			set saddrcif.nsad2=""
			set saddrcif.nsad3=""
			set saddrcif.nsad4=""
			set saddrcif.nscity=""
			set saddrcif.nscounty=""			
			set saddrcif.nscntry=""
			set saddrcif.nsstate=""
			set saddrcif.nszip=""
			
			do saddrcif.bypassSave()
		}
	}
	}
	
  	/* Defaulting address to customer accounts */

	new rs,xacn,PROD,NONPA
	type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
	if rs.isEmpty() quit
	while rs.next() do { quit:ER
		set CID=rs.getCol(1)
		type RecordACN xacn=Db.getRecord("ACN","CID=:CID")
		type RecordPRODCTL NONPA=Db.getRecord("PRODCTL","xacn.type")
		if ((ACN=xacn.acn)&('NONPA.nonpa)) do ACUPDATE(.saddrcif)
	}
	quit
	
ACUPDATE(RecordSADDRCIF saddrcif)      // Update single account with updated seasonal address
	
	new saddracn

	if 'Db.isDefined("SADDRACN","CID") quit

	type RecordSADDRACN saddracn=Db.getRecord("SADDRACN","CID")

	if ($$UPPER^%ZFUNC(saddracn.sadsd)'=$$UPPER^%ZFUNC(saddrcif.sadsd.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.saded)'=$$UPPER^%ZFUNC(saddrcif.saded.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.sad1)'=$$UPPER^%ZFUNC(saddrcif.sad1.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.sad2)'=$$UPPER^%ZFUNC(saddrcif.sad2.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.sad3)'=$$UPPER^%ZFUNC(saddrcif.sad3.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.sad4)'=$$UPPER^%ZFUNC(saddrcif.sad4.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.scity)'=$$UPPER^%ZFUNC(saddrcif.scity.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.scounty)'=$$UPPER^%ZFUNC(saddrcif.scounty.oldVal)) quit	
	if ($$UPPER^%ZFUNC(saddracn.scntry)'=$$UPPER^%ZFUNC(saddrcif.scntry.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.sstate)'=$$UPPER^%ZFUNC(saddrcif.sstate.oldVal)) quit
	if ($$UPPER^%ZFUNC(saddracn.szip)'=$$UPPER^%ZFUNC(saddrcif.szip.oldVal)) quit

	do saddracn.setAuditFlag(1)

	set saddracn.sadsd=saddrcif.sadsd
	set saddracn.saded=saddrcif.saded
	set saddracn.sad1=saddrcif.sad1
	set saddracn.sad2=saddrcif.sad2
	set saddracn.sad3=saddrcif.sad3
	set saddracn.sad4=saddrcif.sad4
	set saddracn.scity=saddrcif.scity
	set saddracn.scounty=saddrcif.scounty	
	set saddracn.scntry=saddrcif.scntry
	set saddracn.sstate=saddrcif.sstate
	set saddracn.szip=saddrcif.szip
	
	do saddracn.save()

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSADDRCIF saddrcif

	set X = saddrcif.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	if saddrcif.nsad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD1", vRM) quit
	if saddrcif.nsad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD2", vRM) quit
	if saddrcif.nsad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD3", vRM) quit
	if saddrcif.nsad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD4", vRM) quit
	if saddrcif.nscity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSCITY", vRM) quit
	set X = saddrcif.nscntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("NSCNTRY", vRM) quit
	if saddrcif.nscounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSCOUNTY", vRM) quit
	if saddrcif.nsstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("NSSTATE", vRM) quit
	if saddrcif.nszip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("NSZIP", vRM) quit
	if saddrcif.sad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD1", vRM) quit
	if saddrcif.sad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD2", vRM) quit
	if saddrcif.sad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD3", vRM) quit
	if saddrcif.sad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD4", vRM) quit
	set X = saddrcif.saded if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SADED", vRM) quit
	set X = saddrcif.sadsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SADSD", vRM) quit
	if saddrcif.scity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SCITY", vRM) quit
	set X = saddrcif.scntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("SCNTRY", vRM) quit
	if saddrcif.scounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SCOUNTY", vRM) quit
	if saddrcif.sstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("SSTATE", vRM) quit
	if saddrcif.szip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("SZIP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SADDRCIF","MSG",979,"SADDRCIF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSADDRCIF saddrcif)	//SADDRCIF Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.saddrcif)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=SADDR_D
			}
		else  if TSRC="O" do {
			do vj1(.saddrcif)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=SADDR_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.saddrcif)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=SADDR_I
			}
		else  if TSRC="O" do {
			do vj2(.saddrcif)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=SADDR_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.saddrcif)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=SADDR_U
			}
		else  if TSRC="O" do {
			do vj3(.saddrcif)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=SADDR_U
			}
		}

	quit


vj1(RecordSADDRCIF saddrcif)	// SADDR_D  Table CIFH  History for Seasonal Address

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=saddrcif.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(4933)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordSADDRCIF saddrcif)	// SADDR_I  Table CIFH  History for new Seasonal Address

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=saddrcif.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(4932)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordSADDRCIF saddrcif)	// SADDR_U  Table CIFH  History for Seasonal Address 

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=saddrcif.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMTFM^CIFFUNCS(saddrcif.acn,"SADDRCIF",vdi,vold,vnew,$G(EFD))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordSADDRCIF saddrcif) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("SADED").exists() do vi1(.saddrcif)
		if vx("SADSD").exists() do vi2(.saddrcif)
	}
	do vi1(.saddrcif)
	do vi2(.saddrcif)

	quit
	

vi1(RecordSADDRCIF saddrcif) // Maintain ADDREDCIF index entries (Customer Season.Address End )

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = saddrcif.saded
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = saddrcif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^SADDR("CIF",vobj(saddrcif,-3)))#2,'$D(^DAYEND(v1,"ADDREDCIF",v3)) do vidxerr("ADDREDCIF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"ADDREDCIF",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SADED").exists() set v1=vx("SADED").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"ADDREDCIF",v3)
	#ENDBYPASS
	quit

vi2(RecordSADDRCIF saddrcif) // Maintain ADDRSDCIF index entries (Customer Season.Address Start)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = saddrcif.sadsd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = saddrcif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^SADDR("CIF",vobj(saddrcif,-3)))#2,'$D(^DAYEND(v1,"ADDRSDCIF",v3)) do vidxerr("ADDRSDCIF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"ADDRSDCIF",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SADSD").exists() set v1=vx("SADSD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"ADDRSDCIF",v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("SADDRCIF")

	while ds.next() do {
		type RecordSADDRCIF saddrcif=ds.getRecord("SADDRCIF")
		if vlist.contains("VINDEX") do VINDEX(.saddrcif) quit
		if vlist.contains("ADDREDCIF") do vi1(.saddrcif)
		if vlist.contains("ADDRSDCIF") do vi2(.saddrcif)
	}

	quit


public VIDXBLD1(RecordSADDRCIF saddrcif, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.saddrcif) quit
	if vlist.contains("ADDREDCIF") do vi1(.saddrcif)
	if vlist.contains("ADDRSDCIF") do vi2(.saddrcif)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("SADDRCIF","MSG",1225,"SADDRCIF."_di)

	quit


vkchged // Access key changed

	type public RecordSADDRCIF saddrcif

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("ACN")
	set voldkey = vux.piece("|",1),vobj(saddrcif,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(saddrcif,-3) = vnewkey // Copy new keys into object
	type RecordSADDRCIF vnewrec = saddrcif.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SADDRCIF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(saddrcif,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "SADCIFFL"	// Location of index program

