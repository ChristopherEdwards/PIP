LNRCMP		/*
	PROCEDURE:  LNRCMP
	ORIG: John Lamy - 9/12/95
	DESC: Asset Classification Compiler

	---- Comments --------------------------------------------------------

	This procedure builds the run time routine, LNRCMP1.

	This routine will compile a routine to be used during the provision and
	reclassification calculation process.  Each time the UTBLACC file is 
	modified or another asset class is added this routine will be called to
	compile a new routine.  

	RETURNS:
		. ER		Error flag	/TYP=L

		. RM		Error message	/TYP=T

 	---- Revision History ------------------------------------------------

	03/16/07 - SWARNALP - CR24947
		   Modified not to set ER with 1 if there are only warning or 
		   information messages are returned while compiling LNRCMP1 
		   because ER should be set to 1 only if errors are returned.
		   Also modified section PACLAS to add a line to quit with 0 
		   if UTBLACC.PROVQRY has no value in it.
		   
	04/28/02 - Dan Russell
		   Rewrote from M to PSL.  Modified to generate PSL code
		   and compile that to M, instead of going directly to M.

		   Removed old change history.
	*/


	// Catch GT.M errors
	catch error {
		do ZE^UTLERR
		set ER=1
		}

	new acls,cls,crgl,drgl,fee,FILES,line,n,pln,provpct,provqry
	new qry,rtn,tblelmnt,QN,X,ZIPP

	new CODE,TAB

	set ER=0,TAB=$C(9)
	kill RM

	// I18N=OFF

	do addline("LNRCMP1"_TAB_"// "_$$DAT^%ZM(%CurrentDate,$G(%MSKD))_" "_$$TIM^%ZM_" - "_%UID)
	do addline(TAB_"// Asset Classification Processing compiled by LNRCMP")
	do addline("")
	do addline(TAB_"quit // Do not call from the top")

	type ResultSet accrs=Db.select("CLS,AC","UTBLACC",,"CLS,AC")
	if 'accrs.isEmpty() while accrs.next() do { quit:ER
		new AC,CLS,QRY,SEQ

		set QRY="",SEQ=1

		set CLS=accrs.getCol(1)
		set AC=accrs.getCol(2)
		type RecordUTBLACC utblacc=Db.getRecord("UTBLACC","AC=:AC,CLS=:CLS")

		do PACLAS(.utblacc) quit:ER		// Provision asset classification
		if CLS="L" do LNRCLAS(.utblacc)		// Loan delinquency reclassification
		if CLS="D" do DEPRCLAS(.utblacc)	// Deposit reclassification
	}

	quit:ER

	do BUILDRTN^UCGM(.CODE,"LNRCMP1",.RM)
	if $D(RM) do {
		new N
		set N=""
		for  set N=$O(RM(N)) quit:N=""  write RM(N),!
		set ER=''RM.get()
	}

	quit

PACLAS(RecordUTBLACC utblacc)	// Private - Provision asset classification
	new X

	set X="public pacls"_utblacc.cls_utblacc.ac
	if utblacc.cls="D" set X=X_"(RecordDEP dep)"
	else  set X=X_"(RecordLN ln)"
	set X=X_TAB_"// Provision"_utblacc.desc

	do addline("")
	do addline(X)
	do addline("")
	do addline(TAB_"// Init Provision Asset Classification Parameters")
	do addline("")

	// percentage amount
	if utblacc.provpct'="" do addline(TAB_"// Percentage = "_utblacc.provpct)
	// G/L Numbers
	if utblacc.crgl'="" do addline(TAB_"// Credit G/L Number = "_utblacc.crgl)
	if utblacc.drgl'="" do addline(TAB_"// Debit G/L Number = "_utblacc.drgl)
	// Query
	if utblacc.provqry'="" do { quit:ER
		do addline(TAB_"// Query = "_utblacc.provqry)
		do BLDQRY(utblacc.provqry,utblacc.cls)
	}
	else  do addline(TAB_"quit 0")
	
	// Provision balance calculation
	if utblacc.provcalc'="" do { quit:ER
		new X

		set X="public dqprov"_utblacc.cls_utblacc.ac_"(Record"
		if utblacc.cls="D" set X=X_"DEP dep)"
		else  set X=X_"LN ln)"_TAB_"// "_utblacc.provcalc

		do addline("")
		do addline(X)
		do addline("")
		do BLDCALC(utblacc.provcalc,utblacc.cls)
	}

	quit

BLDQRY(QUERYID,CLS)	// Private - Build query code for provision query

	new INSTANTS,N,TABLES,PSLOBJ,PSLQRY,X

	if CLS="D" set INSTANTS="DEP=dep"
	else  set INSTANTS="LN=ln"

	// Convert query to PSL code
	do ^UCQRYBLD(QUERYID,INSTANTS,.TABLES,.PSLOBJ,.PSLQRY)
	quit:ER	
				// Invalid query
	// Incomplete query - ~p1
	if $G(TABLES)="" set ER=1,RM=$$^MSG(3559,QUERYID) quit

	if CLS="D",$P(TABLES,",",1)'="DEP" set ER=1,X="DEP"
	if CLS="L",$P(TABLES,",",1)'="LN" set ER=1,X="LN"
	// Incomplete query - ~p1 - Select ~p1 for primary file ID
	if ER set RM=$$^MSG(3559,QUERYID)_" - "_$$^MSG(2470,X) quit

	set N=""
	// Insert lines to instantiate new objects
	for  set N=$O(PSLOBJ(N)) quit:N=""  do addline(TAB_PSLOBJ(N,1))

	// Insert the query lines
	for  set N=$O(PSLQRY(N)) quit:N=""  do {
		do addline(TAB_"if "_PSLQRY(N))
		do addline(TAB_"else  quit 0")
		}

	do addline(TAB_"quit 1")

	quit


BLDCALC(FORMULA,CLS)	// Private - Build code for calculation
	// Only LN or DEP tables valid, based on class

	new DELIMS,ITEM,NEWFORM,PTR

	set PTR=0
	set DELIMS="<>#\'?=:,+-*/_()!&"
	set NEWFORM=""
	for  set ITEM=$$ATOM^%ZS(FORMULA,.PTR,DELIMS) do { quit:ER!(PTR=0)
		if ITEM?1"["1A.AN1"]"1A.AN do {
			set TABLE=$P($P(ITEM,"[",2),"]",1)
			set COL=$P(ITEM,"]",2)
		}
		else  if ITEM?1A.AN1"."1A.AN do {
			set TABLE=$P(ITEM,".",1)
			set COL=$P(ITEM,".",2)
		}
		else  set NEWFORM=NEWFORM_ITEM quit  	// Not table.col reference

		if CLS="D",$$UPPER^%ZFUNC(TABLE)'="DEP" do { quit
			set ER=1
			// Invalid table name - ~p1
			set RM=$$^MSG(1484,"DEP")
		}

		if CLS="L",$$UPPER^%ZFUNC(TABLE)'="LN" do { quit
			set ER=1
			// Invalid table name - ~p1
			set RM=$$^MSG(1484,"LN")
		}

		// Make reference lower case to treat as object
		set NEWFORM=NEWFORM_$$LOWER^%ZFUNC(TABLE_"."_COL)
	}

	if 'ER do addline(TAB_"quit "_NEWFORM)

	quit


LNRCLAS(RecordUTBLACC utblacc)	// Delinquency Reclassification Asset Classification

	do addline("")
	do addline("public racls"_utblacc.cls_utblacc.ac_"(RecordLN ln)"_TAB_"// Delinquency Reclassification "_utblacc.desc)
	do addline("")
	 
	//Query
	if utblacc.rdprqry'="" do { quit:ER
		do addline("")
		do addline(TAB_"// Query = "_utblacc.rdprqry)
		do BLDQRY(utblacc.rdprqry,utblacc.cls)
	}
	else  do addline(TAB_"quit 0")

	if utblacc.rfprdq'="" do {
		do addline("")
		do addline("public dqpr"_utblacc.ac_"(RecordLN ln)"_TAB_"// "_utblacc.rfprdq)
		do addline("")
		do BLDCALC(utblacc.rfprdq,utblacc.cls)
	}

	if utblacc.rintdq'="" do {
		do addline("")
		do addline("public dqint"_utblacc.ac_"(RecordLN ln)"_TAB_"// "_utblacc.rintdq)
		do addline("")
		do BLDCALC(utblacc.rintdq,utblacc.cls)
	}

	if utblacc.rfeedq'="" do {
		do addline("")
		do addline("public dqfee"_utblacc.ac_"(RecordLN ln)"_TAB_"// "_utblacc.rfeedq)
		do addline("")
		do BLDCALC(utblacc.rfeedq,utblacc.cls)
	}

	if utblacc.rlchgdq'="" do {
		do addline("")
		do addline("public dqlchg"_utblacc.ac_"(RecordLN ln)"_TAB_"// "_utblacc.rlchgdq)
		do addline("")
		do BLDCALC(utblacc.rlchgdq,utblacc.cls)
	}

	quit


DEPRCLAS(RecordUTBLACC utblacc)	// Deposit Reclassification Asset Classification

	do addline("")
	do addline("public racls"_utblacc.cls_utblacc.ac_"(RecordDEP dep)"_TAB_"// Deposit Reclassification "_utblacc.desc)
	do addline("")

	// Query
	if utblacc.deproq'="" do { quit:ER
		do addline("")
		do addline(TAB_"// Query = "_utblacc.deproq)
		do BLDQRY(utblacc.deproq,utblacc.cls)
	}
	else  do addline(TAB_"quit 0")


	if utblacc.deprnpdq'="" do {
		do addline("")
		do addline("public dqnp"_utblacc.ac_"(RecordDEP dep)"_TAB_"// "_utblacc.deprnpdq)
		do addline("")
		do BLDCALC(utblacc.deprnpdq,utblacc.cls)
	}
	if utblacc.deprupdq'="" do {
		do addline("")
		do addline("public dqunp"_utblacc.ac_"(RecordDEP dep)"_TAB_"// "_utblacc.deprupdq)
		do addline("")
		do BLDCALC(utblacc.deprupdq,utblacc.cls)
	}
	if utblacc.deprnidq'="" do {
		do addline("")
		do addline("public dqni"_utblacc.ac_"(RecordDEP dep)"_TAB_"// "_utblacc.deprnidq)
		do addline("")
		do BLDCALC(utblacc.deprnidq,utblacc.cls)
	}
	if utblacc.depruidq'="" do {
		do addline("")
		do addline("public dquni"_utblacc.ac_"(RecordDEP dep)"_TAB_"// "_utblacc.depruidq)
		do addline("")
		do BLDCALC(utblacc.depruidq,utblacc.cls)
	}
	if utblacc.deprridq'="" do {
		do addline("")
		do addline("public dqri"_utblacc.ac_"(RecordDEP dep)"_TAB_"// "_utblacc.deprridq)
		do addline("")
		do BLDCALC(utblacc.deprridq,utblacc.cls)
	}

	quit      


addline(DATA)	// Private - add line to end of code

	set CODE($O(CODE(""),-1)+1)=DATA
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60705^56527^P.R. Swarnalatha^7604"	// Signature - LTD^TIME^USER^SIZE
