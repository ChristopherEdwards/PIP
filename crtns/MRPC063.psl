MRPC063(return,versn,ACN)	//Public;MRPC call for Customer Limits
	/*
	   ORIG: DOUGHERTYE - 09/16/97
	   DESC: MRPC call for Customer Limits

	   KEYWORDS:

	   ARGUMENTS:
	   	. RETURN Customer Limits  	/TYP=T/REQ/MECH=VAL
	     	  	 Information

	   	. VERSN  MRPC Version         	/TYP=T/REQ/MECH=VAL
	   		 Number

	   	. ACN  	 Customer Number  	/TYP=N/REQ/MECH=VAL

	   INPUTS:
	   	. System

	   	. Data [ddfile]di

	   	. v1 desc of variable 		/TYP=T

	   RETURNS:
	   	. $$    Error Message  		/TYP=T

	  ---- Revision History ------------------------------------------------

	   03/25/03 - GRAY - 51349
		      Corrected %GTM-E-NOTEXTRINSIC,RET+5^MRPC063 error.

	   03/03/03 - GRAY - 51349
		      Corrected error, RECNOFL,vDb1+5^MRPC063, when CIF
		      entered does not exist.

	   05/02/02 - Sanjay C - 49794
	   	      Converted to PSL


	*/

	new AVCCUST,AVCGRP,AVOCUST,AVOGRP,COMEXPC,COMEXPG,CRLF,CUSAMT,GRP,N
	new NAM,OUTEXPC,OUTEXPG,PLAN,STR,TAB,TMPSTR,X

	// Version number of client message is not compatible with server
	if $G(versn)'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))


RETRIEVE	// Retrieve Calculated Data


	type RecordCIF cif=Db.getRecord("CIF","ACN",1)

	// Record not found
	if cif.getMode()=0 quit $$ERRMSG^PBSUTL($$^MSG(2335))

	// Needs to call array from ^PROCLIM not an insert
	set %ProcessMode=0	
	set X=$$ACCUM^PROCLIM(ACN)

	// Create formatted output string
	set TAB=$C(9)
	set CRLF=$C(13)_$C(10)

	new Y
	set Y=0
	do CUST(.cif)
	quit ""


CUST(RecordCIF cif)	// Customer Limit Data

	set NAM=cif.nam
	set PLAN=cif.plan
	set CUSAMT=cif.cusamt
	set OUTEXPC=$P($G(CUS),"|",2)
	if OUTEXPC="" set OUTEXPC=0
	set COMEXPC=$P($G(CUS),"|",1)
	if COMEXPC="" set COMEXPC=0
	if CUSAMT="" do {
		set AVCCUST=""
		set AVOCUST=""
		}
	else  do {
		set AVCCUST=CUSAMT-COMEXPC
		set AVOCUST=CUSAMT-OUTEXPC
		}
	set $P(TMPGRP(Y),$C(9),5)=NAM
	set $P(TMPGRP(Y),$C(9),6)=CUSAMT
	set $P(TMPGRP(Y),$C(9),7)=COMEXPC
	set $P(TMPGRP(Y),$C(9),8)=OUTEXPC
	set $P(TMPGRP(Y),$C(9),11)=AVCCUST
	set $P(TMPGRP(Y),$C(9),12)=AVOCUST
	set $P(TMPGRP(Y),$C(9),14)=PLAN

	// Get all the group values associated with customer.
GRP
	
	type ResultSet rs=Db.select("GRPLIM","CIFGRPLIM","ACN=:ACN","GRPLIM")
	if 'rs.isEmpty() while rs.next()  do {
		set GRP=rs.getCol(1)
		type RecordCIFGRPLIM cifgrplim=Db.getRecord("CIFGRPLIM","ACN=:ACN,GRPLIM=:GRP")
		set GRPAMT=cifgrplim.grpamt
		set COMEXPG=$P($G(LIMGRP(GRP)),"|",1)
		if COMEXPG="" set COMEXPG=0
		set OUTEXPG=$P($G(LIMGRP(GRP)),"|",2)
		if OUTEXPG="" set OUTEXPG=0
		if GRPAMT="" do {
			set AVCGRP=""
			set AVOGRP=""
			}
		else  do {
			set AVCGRP=GRPAMT-COMEXPG
			set AVOGRP=GRPAMT-OUTEXPG
			}
		set $P(TMPGRP(Y),$C(9),1)=GRP
		set $P(TMPGRP(Y),$C(9),2)=GRPAMT
		set $P(TMPGRP(Y),$C(9),3)=COMEXPG
		set $P(TMPGRP(Y),$C(9),4)=OUTEXPG
		set $P(TMPGRP(Y),$C(9),9)=AVCGRP
		set $P(TMPGRP(Y),$C(9),10)=AVOGRP
		set Y=Y+1
		}

	// Set up the string

RET	set Y=""
	for  set Y=$O(TMPGRP(Y)) quit:Y=""  do {
		set return=$G(return)_TMPGRP(Y)_CRLF
		}
	set return=$$V2LV^MSG(return)
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "59886^43586^Sanchez SCM Administrator^2848"	// Signature - LTD^TIME^USER^SIZE
