IRSTAPE		/*
	ORIG: titove - 09/09/2005
	DESC: IRS Reporting Year-End - Master control

	---- Comments --------------------------------------------------------

	I18N=QUIT: Excluded from I18N standards.
	
	---- Revision History ------------------------------------------------

	22/11/06 - SWARNALP - 23838
		   Added a new section UNLOCK to release the lock for the 
		   table IRSCTTR and this section is called from all the places 
		   before quitting the process in the main section IRSTAPE.
		   
	09/05/06 - GIRIDHAL - 22607
		   Modified COMPILE section to handle PSL warnings without 
		   erroring 
		   
	04/07/06 - TITOVE - CR 20641
		   Modified to use %SystemDate instead of %CurrentDate when
		   defaulting the RMS file name. Also added defaulting of a
		   numeric value for Last Form Rundate, to prevent select 
		   errors in corrections forms when FORMS(FORM)-1 is used.

	09/09/05 - TITOVE - CR 16942
		   Converted into PSL. Removed pre-2004 revision history.

	06/20/05 - ARPAVC - 16188
		   Added setting of IRAOPT as a post processor to
		   the FORM field.  This is used in IRSO498
		   and prevents undefined error.
	   
	12/10/04 - SIVAKUMAR - 13439
		   Modified section SCR2 to remove setting of IRS 5498 Type         
		   Selection look-up.  

	*/
	
	type public Number ER
	type public String ET, IRSC(,), RM

	type Boolean FMVOPT = 0
	type Date BEGYR, ENDYR
	type Number %PAGE, %PG, %TAB, %READ, ARECCNT, FGRP, FRECCNT, IRAOPT, LASTIND, MODE
	type Number NTPSEQ, OLNTB, OPT, REEL, SRT, TESTTAPE, TAPESEQ, YEAR
	type String %INST, %TDRV, BRREG, INST(), FMV(), FORM, FORMLIST, FORMS(), INSTDIR
	type String INSTNAM, LFILIND, LIND(), PROCTYP(), QI(), RAC, SEQBY, STMT(), TAPEOPT
	type String TDRV, VFMQ

	// Beginning of tax year
	set BEGYR = $$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)
	
	// End of tax year
	set ENDYR = $$EOTY^SCADAT(BEGYR,1)
	
	set YEAR = ENDYR.year()
	
	set %INST  =  "ALL"
	set (REEL,ARECCNT,FRECCNT) = 0
	
	set FMV(0) = "IRA Fair Market Value STMT's Not Produced. Print all 5498 forms."
	set FMV(1) = "IRA Fair Market Value STMT's Produced. 5498 Form Not Needed."
	
	set PROCTYP(1) = "Original"
	set PROCTYP(2) = "Test Original"
	set PROCTYP(3) = "Replacement Original"
	set PROCTYP(4) = "Correction"
	set PROCTYP(5) = "Test Correction"
	set PROCTYP(6) = "Replacement Correction"
	
	set LIND(0) = "This is NOT the last YR you will file using this TIN"
	set LIND(1) = "This is the last YR you will file using this TIN"
	
	// Set up Form Groups

	set %PG = -1
	set %PAGE = 1	
	set LASTIND = 0

	set %TAB("FGRP") = ".FGRP1/TBL=[STBLIRSTAPE]"
	set %TAB("OPT") = ".OPT7/TBL=PROCTYP("
	set %TAB("LASTIND") = "|1|||LIND(||||N|Last filing indicator"
	set %TAB("%INST") = ".%INST1"
	set %TAB("MODE") = ".MODE3/XPP=I ""TR""'[X S ER=1,RM=""Enter 'R' for RMS or 'T' for tape"""

	set OLNTB = 35
	
	set %READ = "@@%FN,,,FGRP/REQ,OPT/REQ,LASTIND/REQ,%INST/REQ,MODE/REQ"
	
	do ^UTLREAD
	
	if VFMQ = "Q" set ER = "W",RM = "IRS file processing cancelled by operator" quit
	
	if (OPT = 3)!(OPT = 6) do {
		
		set %TAB("RAC") = ".TCC"
		set OLNTB = 45
		set %READ = "@@%FN,,,RAC/REQ"
		
		do ^UTLREAD
		}
	
	if VFMQ = "Q" set ER = "W",RM = "IRS file processing cancelled by operator" quit
	
	// Get next File Sequence Number
	set NTPSEQ = Db.nextVal("IRSCTTR")

	set TAPESEQ = $S(OPT=1:NTPSEQ,OPT=2:0,OPT=3:0,OPT=4:NTPSEQ,OPT=5:0,OPT=6:0,1:0)

	set TAPEOPT = $S(OPT=1:"O",OPT=2:"O",OPT=3:"R",OPT=4:"C",OPT=5:"C",OPT=6:"R")

	// Last filing indicator 
	if FGRP = 4 set LFILIND = $S(LASTIND=1:"1",1:"0")
	else  set LFILIND = $S(LASTIND=1:"1",1:" ") 

	set TESTTAPE = $S(OPT=2:1,OPT=5:1,1:0)
	
	lock +IRSC("TTR",TAPESEQ):2 else  set ET = "RECLOC" do ERR quit
	
	if TAPESEQ = 0 do {
		
		do Db.delete("IRSCTTR","TSEQ=:TAPESEQ")
		do Db.delete("IRSCTTR1","TSEQ=:TAPESEQ")
		}
	
	// Set up Form types

	if (OPT '> 2)!(%INST = "ALL") set %PG = 1,%PAGE = 1
	else  set %PG = -1,%PAGE = 1
	
	if MODE = "T" set %TAB("%TDRV")=".%TDRV3/XPP=D PPTDRV^%ZINIT(X)",%TDRV="TAPE0"
	else  set %TAB("%TDRV") = ".RMS5",%TDRV = CUVAR.spldir_"IRSDATA-"_$$DAT^%ZM(%SystemDate,"MMDD")_".PBS"
	
	set %READ = "@@%FN,,,%TDRV/REQ,,"
	
	set SRT = ""
	set BRREG = " "
	
	if CUVAR.regflg,(Db.isDefined("STBLIRSTAPE2","FGRP=:FGRP,IRSTPE='1099-INT'")!Db.isDefined("STBLIRSTAPE2","FGRP=:FGRP,IRSTPE='1098'")) do {

		set %TAB("QI(1)")=".QI13/HLP=[LN]BRREG/TBL=[UTBLREGION]/XPP=D REGPOST^IRSTAPE"
		set %READ = %READ_"QI(1),"
		set %TAB("SRT") = ".SRT2/XPP=I 'X,QI(1)'=""ALL"" S ER=1,RM=""Must sort by region"",ERROR=1/XPR=S X=SRT I X S RM=""Y""_%_6030 K vdft(3) I $G(ERROR) H 2 S ERROR=0"
		set %READ = %READ_"SRT,,"
		
		if Db.isDefined("STBLIRSTAPE2","FGRP=:FGRP,IRSTPE='5498'") do {
		
			set SRT = ""
			set SEQBY = "[SYSDEV,LN]BRREG"
			set QI(1) = "ALL"
			}
		}
	
	type ResultSet rs = Db.select("IRSTPE","STBLIRSTAPE2","FGRP=:FGRP")
	
	while rs.next() do {

		set FORM = rs.getCol("IRSTPE")
		set %TAB("FORMS("""_FORM_""")") = "/DES=Form "_FORM_"/TYP=L/LEN=1/XPP=S IRAOPT=X"
		set %READ = %READ_"FORMS("""_FORM_""")/REQ"_","

		if FGRP = 2 do {

			set %TAB("STMT("""_FORM_""")") = "/DES=IRA Fair Market Value Stmt Produced "_FORM_"/=.OPT11/TBL=FMV(/XPP=S FMVOPT=X"
			set %READ = %READ_"STMT("""_FORM_""")/REQ"_","
			}
		}
	
	kill OLNTB
	
	do ^UTLREAD
	
	if QI.data() do ^DBSQRYA kill RM
	
	set (FORM,FORMLIST) = ""
	for  set FORM = FORMS(FORM).order() quit:FORM.isNull()  do {
		
		if FORMS(FORM) set FORMLIST = FORMLIST_FORM_","
		else  kill FORMS(FORM)
		}
	
	set FORMLIST = FORMLIST.extract(1,FORMLIST.length()-1)
	
	// Compile a list of Global Directories
	if %INST = "ALL" do {
		
		type String %DIR
		
		type ResultSet rs1 = Db.select("KEY","CTBLBPS")
		
		while rs1.next() do {
			
			set INSTNAM = rs1.getCol("KEY")
			
			type RecordCTBLBPS ctblbps = Db.getRecord("CTBLBPS","KEY=:INSTNAM")

			set INST(INSTNAM) = ctblbps.glbdir
			}
		
		// Get current global directory in %DIR	
		if INST("").order().isNull() do INT^%DIR set INST(1) = %DIR
		}	
	else  do {
		
		type RecordCTBLBPS ctblbps = Db.getRecord("CTBLBPS","KEY=:%INST")
		
		set INST(%INST) = ctblbps.glbdir
		}
	
	
	if (VFMQ = "Q")!(FORMS.data() < 10) set ER = "W",RM = "IRS file processing cancelled by operator" do UNLOCK quit

	if (OPT < 3)!(%INST = "ALL") do RUN do UNLOCK quit
	
	set (%PG,%PAGE) = 1
	
	set %READ = "@@%FN,,,"
	
	set INSTDIR = INST(%INST)
	
	set FORM = "" 
	for  set FORM = FORMS(FORM).order() quit:FORM.isNull()  do {
		
		set %TAB("FORMS("""_FORM_""")") = "/DES="_FORM_"/TYP=D/LEN=10"
		
		type RecordIRSTPFRM tpfrm = Db.getRecord("IRSTPFRM", "TPLIT = 'TAPE', IRSTPE = :FORM", 1)

		// Last date the form was run
		set FORMS(FORM) = tpfrm.lstrundt
		
		// Need to default a numeric value to prevent select errors in forms
		if FORMS(FORM).isNull() set FORMS(FORM) = 1
		
		set %READ = %READ_"FORMS("""_FORM_""")/REQ"_","
		}
	
	kill OLNTB 
	
	do ^UTLREAD

	if (VFMQ = "Q")!(FORM.data() < 10) set ER = "W",RM = "IRS file processing cancelled by operator" do UNLOCK quit

	do RUN
	
	do UNLOCK
	
	quit
	
	
RUN	// Run time section	
	
	type public Boolean DEBUG
	type public Number ER, FGRP, TAPESEQ
	type public String RM

	type Boolean TPRINT
	type Number RECSEQ, TOTBCNT, WRECCNT
	type String ZPGM

	do MOUNT quit:ER					// Mount the first tape

	use 0 write !!!,"This will be file number ",TAPESEQ,!
	
	set (TOTBCNT,WRECCNT) = 0
	set (RECSEQ,TPRINT) = 1
	
	do COMPILE quit:ER					// Run the form(s)

	if FGRP '= 4 do FRECWRT^@ZPGM quit:ER			// Create an "F" record

	if FGRP = 4 do F42RECWRT^@ZPGM quit:ER			// Create "F" for 1042-s

	do DISMOUNT quit:ER					// Dismount tape

	if 'DEBUG.get() do DEL^%ZRTNDEL(ZPGM)			// Delete routine

	set ER = "W",RM = "IRS file processing is complete"

	quit
	
	
COMPILE	// Compiler section
	
	type public Boolean TPRINT
	type public Number ER, FGRP, FORMS(), OPT, TCC
	type public String CODE, ET, PROCTYP(), ZPGM
	
	type Number I, LNUM
	type String CMPERR(), FORM, MAGCTRY, PGM, XLT(), XX(,), YY()

	set FORM = ""
	for  set FORM = FORMS(FORM).order() quit:FORM.isNull()  do { quit:ER
	
		// Get Transmitter Control Code from UTBLTCC. If null use CUVAR.TCC.
		set TCC = ""
		set MAGCTRY = CUVAR.magctry
		
		if 'MAGCTRY.isNull() do {
		
			type RecordUTBLTRNCC trncc = Db.getRecord("UTBLTRNCC","CNTRY=:MAGCTRY,TXFRM=:FORM",1)
		
			set TCC = trncc.trnscc
			}
		
		if TCC.isNull() set TCC = CUVAR.tcc
	   
		type RecordSTBLIRSTAPE2 tape2 = Db.getRecord("STBLIRSTAPE2","FGRP=:FGRP,IRSTPE=:FORM")

		set CODE = $S(OPT'>3:tape2.original,OPT'<4:tape2.correction,1:"nocode")

		if CODE.isNull()!(CODE = "nocode") use 0 write !,PROCTYP(OPT)," processing for form "_FORM_" is unsupported" hang 3 set ER = 1 quit

		// Load IRS procedure's own code into an array YY. The rest of the code
		// will be added later, based on code in Master Template procedure.
		do ^ULODTMPL(CODE,"YY")

		if 'YY.data() set ER = 1,ET = "Missing compiled code" do ERR quit
	
		set ZPGM = "TMP"_(%ProcessID#100000)
		
		type RecordSTBLIRSTAPE tape = Db.getRecord("STBLIRSTAPE","FGRP=:FGRP")
		
		set PGM = tape.pgm
		
		// Load IRS Tape Processing Master Template code into an array XX
		// and create line tag + line number cross reference array XLT
		do ^ULODTMPL(PGM,"XX",1,.XLT)
		
		set YY = XLT("CODE")
		set LNUM = 0
		
		// Remove the line that contains the CODE linetag
		kill XX(YY)
		
		// Add IRS procedure code to XX array at position of insertion of this
		// code into the Master Template code (YY = former CODE line number)
		for I = 1:1 set LNUM = YY(LNUM).order() quit:LNUM.isNull()  set XX(YY+(I/10000)) = YY(LNUM)
		
		// Compile source code in XX array into a runtime routine. This will
		// also insert IRS procedure code into Master Template code.
		do BUILDRTN^UCGM(.XX,ZPGM,.CMPERR)
		
		kill XX,YY		// No need for code arrays to be hanging around
		
		if CMPERR.exists() do { 

			type String N = ""
		
			for  set N = CMPERR(N).order() quit:N.isNull()  write CMPERR(N),!
		
			}

		if +CMPERR.get() do ERR quit
	
		use 0 write !,PROCTYP(OPT)," processing for form "_FORM_" started at " do ^%T
		
		// Execute combined IRS procedure/Master Template code
		do ^@ZPGM quit:ER
		
		set TPRINT = 0
		}
	
	quit
	
	
public	MOUNT	// Initialize, mount and open the output device
	
	type public Boolean DISMNT
	type public Number ER, FGRP, REEL
	type public String %TDRV, ET, MODE, RM, TDRV
	
	type Boolean X
	type String PARAMS

	
	if MODE = "T" do {
		
		set DISMNT = 0
		
		do ENT^%ZINIT quit:ER		// Initialize the tape
		
		do ENT^%ZMOUNT quit:ER		// Mount the tape drive
		
		set DISMNT = 1
		
		do PPTDRV^%ZINIT(%TDRV,.TDRV)	// Validate tape drive
		
		type RecordSTBLIRSTAPE tape = Db.getRecord("STBLIRSTAPE","FGRP=:FGRP")
		
		set PARAMS = tape.params
		
		set X = $$TAPE^%ZOPEN(TDRV,PARAMS,2) 
		
		// Device cannot be opened
		if 'X set ER = 1,ET = "NOTOPEN" quit
		}	
	
	if MODE = "R" do {
	
		set DISMNT = 0
		set TDRV = %TDRV
		
		set X = $$FILE^%ZOPEN(TDRV,"WRITE/NEWV",2,780)
		
		// Device cannot be opened
		if 'X set ER = 1,ET = "NOTOPEN" quit
		}
	
	if ER do { quit
		
		if ET.get().isNull() set ET = RM
		
		do ERR
		}
	
	set REEL = REEL + 1
	
	quit
	
	
public	DISMOUNT	// Dismount the tape drive

	type public String MODE, TDRV	
	
	if MODE = "T" do TAPE^%ZUSE(TDRV,"REWIND")
	
	close TDRV
	
	if MODE = "T" do ENT^%ZDISMOU
	
	quit
	
	
REGPOST	// Region post processor
	
	type public Number ER, SRT
	type public String RM, X, vdft()
	
	do EXT^DBSQRY quit:ER
	
	if X = "ALL" quit
	
	set SRT = 1
	set RM = "1|6030"
	kill vdft(3)
	
	quit
	
	
public	ERR	// Error Control
	
	type public Boolean %ZTHALT, DISMNT
	type public Number ER
	type public String TDRV
	
        catch vERROR {
        	
                quit	// Reset trap to prevent loop
        	}
                
	set %ZTHALT = 0
	
	do ^UTLERR
 
	if TDRV.exists() close TDRV
	
	if DISMNT.get() do ENT^%ZDISMOU
	
	set ER = 1

	quit
	
UNLOCK

	type public Number TAPESEQ
	type public String IRSC(,)
	
	lock -IRSC("TTR",TAPESEQ)
	
	quit
	

vSIG()	quit "60591^30637^P.R. Swarnalatha^11446"	// Signature - LTD^TIME^USER^SIZE
