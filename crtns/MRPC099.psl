MRPC099(RETURN,VERSN,CID,curr,nonaccr,chgoff,EFD,BRCD)
	/* 
 	 ORIG: MALTEPESA - 02/28/2000
	DESC: Problem Loan transactions 

	ARGUMENTS:
	. RETURN     Loan Sub Account Number	     /TYP=T/REQ/MECH=REFNAM:W
	
	. VERSN      version number		     /TYP=N/REQ/MECH=VAL
			current version=1
 
	. CID	     Parent Account Number	     /TYP=N/REQ/MECH=VAL
 
	. curr	     Amounts of the Current Sub-account	/TYP=N/REQ/MECH=VAL 
		

	. nonaccr	Amounts if the Non-Accr sub-acct /TYP=N/REQ/MECH=VAL

	. chgoff	Amounts od the Charge-Off sub-acct /TYP=N/REQ/MECH=VAL
	
	. EFD	     Effective Date		     /TYP=D/REQ/MECH=VAL
 
	. BRCD	     Branch Code		     /TYP=N/NOREQ/MECH=VAL
 
	This new MRPC procedure will be called from the Problem Loan Balances
	tab  (uo_63_problem_loan). 
	It will generate the transactions to subaccounts
	based upon the reallocation of sub-account balances on this tab.  
	
	This MRPC will do the following:
	
	It will retrieve each sub-account number linked to the parent account
	number passed into this MRPC.

	It will retrieve the general-purpose transaction codes from the product
	type table.

	It will break out the amounts passed into the MRPC and set up the
	appropriate account number and transaction code based upon
	which parameter and which piece the amount was located.
	
	It will build a transaction set for each amount and post the
	transactions.

	If any errors occur during the posting of these transactions the entire
	set will be rolled back and the error will be returned.

	These are pieces that the curr, nonaccr and chgoff
	parameters will be build from:


	piece 1 - principal
  	piece 2 - interest
 	piece 3 - late charges
 	piece 4 - fees
 	
  	---- Revision History ------------------------------------------------
  	
	08/03/07 - Pete Chenard - CR28605
		   Modified call to Runtime.start to add quotes around the
		   savepoint parameter.
  	
  	05/11/07 - DHANALAKSHMI R - CR 27061
		   Modified the section hist to remove the deprecated 
		   functions Db.getNextVal() and Db.insert().

  	07/25/06 - Pete Chenard - CR 22385
		   Removed unsupported parameter on commit() method call.
  	
  	03/31/06 - Ravindra Rathi - CR 20335
  	           Modified the ITC condition for non-accrual processing as 
  	           the condition was not getting executed and the non-accural
  	           processing was doing debit transaction instead of credit.
  	           
	05/24/05 - RussellDS - CR16071
		   Changed TP method from "BA" to "CS".
		   
		   Removed old revision history.
	*/ 

MAIN	// 	
	new ln,ln1,ln2,ln3,lnsub,currcid,nonacrcid,chgcid 
	new TYPE,GLSC,GLSC1,GLSC2,GLSC3,utblglsc1,utblglsc2,utblglsc3
	new ts,rs,DRTRPR,ITC,CRTRPR,TSO,trn
	new lg9,lgllr,plfee,hist,TSEQ
	new crntbal,crntint,crntfee,crntlc,naprbal,naint,nafee,nalc
	new cobal,coint,cofee,colc,cordctn

	
	set nonaccr=$G(nonaccr),curr=$G(curr),chgoff=$G(chgoff)
	set ER=0
	set RM=""
	set ITS=1
	// Version number of client message is not compatible with server
	if $G(VERSN)'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))
	new vtp,NOTP
 
	set NOTP=Db.getOneRow("NOTP","CUVAR") quit:ER $$ERRMSG^PBSUTL($G(RM))
	set vtp=$Tlevel					// TP already on?
	if NOTP set vtp=1				// Turn off TP logic
	do Runtime.start("CS",trnreject,"stack")    	// Start TP
 

	// Default payoff effective date
	if $G(EFD)="" set EFD=%SystemDate
	else  set EFD=$$DSJD^SCADAT(EFD)	
	//Invalid Account ~p1
	if 'Db.isDefined("LN","CID") set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(1259,$G(CID)))

	if '$D(BRCD)!($G(BRCD)="") do {
		new user
		type RecordSCAU user=Db.getRecord("SCAU","UID=:%UID")
		set BRCD=user.brcd
		if BRCD="" set BRCD=Db.getOneRow("BOBR","CUVAR")
	}

	type RecordLN ln=Db.getRecord("LN","CID")
	set TYPE=ln.type
	set GLSC=ln.glsc	; general leger set code
	set CRCD=ln.crcd
	set CC=ln.cc		// Cost Center	
	// set up all the variable that are needed for the HIST record
	set crntbal=ln.crntbal,crntint=ln.crntint,crntfee=ln.crntfee
	set crntlc=ln.crntlc,naprbal=ln.naprbal,naint=ln.naint,nafee=ln.nafee
	set nalc=ln.nalc,cobal=ln.cobal,coint=ln.coint,cofee=ln.cofee,colc=ln.colc 
	new A

	// find the appropriate subaccount based upon a customer 
	//view account number and status
	
	type ResultSet rs=Db.select("CID","LN","CVCID=:CID AND STAT=0 AND PCIDSTAT=1")
	if rs.isEmpty() set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(4312)) 
	//quit with error message "No opened problem loan sub-accoutn
	set A=rs.next(),currcid=rs.getRow()

	type ResultSet rs=Db.select("CID","LN","CVCID=:CID AND STAT=0 AND PCIDSTAT=2")
	if rs.isEmpty() set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(4312))
	set A=rs.next(),nonacrcid=rs.getRow()
	
	type ResultSet rs=Db.select("CID","LN","CVCID=:CID AND STAT=0 AND PCIDSTAT=3")
	if rs.isEmpty() set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(4312))
	set A=rs.next(),chgcid=rs.getRow()


	//get TR code from product

	
	type RecordPRODCTL prod=Db.getRecord("PRODCTL","TYPE=:TYPE")
		set DRTRPR=prod.drtrpr		//DR Principal Tran Code
		set CRTRPR=prod.crtrpr 	//CR Principal Tran Code
		set DRADIN=prod.dradin		//DR Interest Tr Code
		set CRADIN=prod.cradin		//CR Interst Tr code
		set DRTRPE=prod.drtrpe		//DR Late Chg Tr code
		set CRTRPE=prod.crtrpe		//CR Late Chg TR Code
		set DRTRMFI=prod.drtrmfi		//Curr DR Fee TR Code
		set CRTRMFR=prod.crtrmfr		//Curr CR fee TR code
		set COKO=prod.coko
		
	type RecordLN ln1=Db.getRecord("LN","currcid")
	type RecordLN ln2=Db.getRecord("LN","nonacrcid")
	type RecordLN ln3=Db.getRecord("LN","chgcid")

	set GLSC1=ln1.glsc		//gl set code for current sub-accoutn
	set GLSC2=ln2.glsc		//GL set code for non-accr sub-account
	set GLSC3=ln3.glsc		//GL set code for charge-off sub-accnt
	
	//Effective date may not be prior to ~p1
	if ln1.odd>EFD new date set date=$$DAT^%ZM(EFD,"MM/DD/YEAR") set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(878,date))
	
	//account closed 
	if ln1.stat=4 set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(8449))

	//define all the accounts offsets on the customer view

	// GLs from customer view acct used for charge-off and recovery
	type RecordUTBLGLSC utblglsc=Db.getRecord("UTBLGLSC","GLSC")
	set lgl9=utblglsc.lgl9 		// principal charge-off GL

	// Loam Loss Reserve from Current Account
	set lglglr=Db.getOneRow("LGLLR","UTBLGLSC","GLSC1")	//loan loss reserve account

	set plfee=Db.getOneRow("PLFEE","CUVAR")
 
	// Problem sub-account fee plan must be defined in institution
	//variables
	if plfee="" set ER=1 do Runtime.rollback() quit $$ERRMSG^PBSUTL($$^MSG(4376))
	
	
	//get principal,interest,late chg and fees
	// Ensure parameters are not null, then parse out all the amounts
	set TCMT=""	
	set TSO=""
	set ITC=1
	set CTL=1

	
	//current
	set xcurrprin=$P(curr,$C(9),2)
	set xcurrint=$P(curr,$C(9),3)
	set xcurrltchg=$P(curr,$C(9),4)
	set xcurrfee=$P(curr,$C(9),5)
	//non accrual
	set xnonprin=$P(nonaccr,$C(9),2)
	set xnonint=$P(nonaccr,$C(9),3)
	set xnonlatechg=$P(nonaccr,$C(9),4)
	set xnonfee=$P(nonaccr,$C(9),5)
	//charge-off
	set xchgprin=$P(chgoff,$C(9),2)

	set xchgint=$P(chgoff,$C(9),3)
	set xchgltchg=$P(chgoff,$C(9),4)
	set xchfee=$P(chgoff,$C(9),5)
	
	
	if $G(xcurrprin)'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","CRNTBAL",crntbal,crntbal-xcurrprin,EFD)
		do hist(TCMT)
		if $G(xcurrprin)<0 set xcurrprin=-xcurrprin,ITC=0
		if $G(ITC) set ETC=CRTRPR
		else  set ETC=DRTRPR
		set TSO=$$FIELDIN^UTSO(TSO,"CRNP",xcurrprin)
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,currcid) quit 
		//set up TR array
		do SETTR(currcid,ETC,ITC,xcurrprin,EFD,TSO,"",.ts) 
		do POST(.ts) quit:ER		
		set TSO=""
		}
	
	 if xcurrint'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","CRNTINT",crntint,crntint-xcurrint,EFD)
		do hist(TCMT)
		if xcurrint<0 set xcurrint=-xcurrint,ETC=DRADIN,ITC=0
		else  set ETC=CRADIN
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"CRNI",xcurrint)
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,currcid) quit 
		//set up TR array
		do SETTR(currcid,ETC,ITC,xcurrint,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}
	if xcurrltchg'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","CRNTLC",crntlc,crntlc-xcurrltchg,EFD)
		do hist(TCMT)
		if xcurrltchg<0 set xcurrltchg=-xcurrltchg,ETC=DRTRPE,ITC=0
		else  set ETC=CRTRPE
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"LCHGADJ")
		set TSO=$$FIELDIN^UTSO(TSO,"CRNLC",xcurrltchg)
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,currcid) quit
		//set up TR array
		do SETTR(currcid,ETC,ITC,xcurrltchg,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}
		 
	if xcurrfee>0 do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","CRNTFEE",crntfee,crntfee-xcurrfee,EFD)
		do hist(TCMT)
		if xcurrfee<0 set xcurrfee=-xcurrfee,ETC=DRTRMFI,ITC=0
		else  set ETC=CRTRMFR
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"LNFEEIN",plfee_":"_xcurrfee)
		set TSO=$$FIELDIN^UTSO(TSO,"CRNF",xcurrfee)
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,currcid) quit 
		//set up TR array
		do SETTR(currcid,ETC,ITC,xcurrfee,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}

	// non-accrual processing
	 if $G(xnonprin)'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","NAPRBAL",naprbal,naprbal-xnonprin,EFD)
		do hist(TCMT)
		if $G(xnonprin)<0 set xnonprin=-xnonprin,ITC=0,ETC=DRTRPR
		else  set ITC=1,ETC=CRTRPR
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"NAP",xnonprin)
		//set up TR array
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,currcid) quit 
		do SETTR(nonacrcid,ETC,ITC,xnonprin,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}
	 if xnonint'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","NAINT",naint,naint-xnonint,EFD)
		do hist(TCMT)
		if xnonint<0 set xnonint=-xnonint,ETC=DRADIN,ITC=0
		else  set ETC=CRADIN
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"NAI",xnonint)
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,nonacrcid) quit 
		//set up TR array
		do SETTR(nonacrcid,ETC,ITC,xnonint,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}
	if xnonlatechg'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","NALC",nalc,nalc-xnonlatechg,EFD)
		do hist(TCMT)
		if xnonlatechg<0 do {
			set xnonlatechg=-xnonlatechg
			set ETC=DRTRPE	
			set ITC=0
			}
		else  set ETC=CRTRPE
		set TS0=""
		set TSO=$$FIELDIN^UTSO(TSO,"NALC",xnonlatechg)
		set TSO=$$FIELDIN^UTSO(TSO,"LCHGADJ")
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,nonacrcid) quit
		//set up TR array
		do SETTR(nonacrcid,ETC,ITC,xnonlatechg,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}
	if xnonfee>0 do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","NAFEE",nafee,nafee-xnonfee,EFD)
		do hist(TCMT)
		if xnonfee<0 set xnonfee=-xnonfee,ETC=DRTRMFI,ITC=0
		else  set ETC=CRTRMFR
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"LNFEEIN",plfee_":"_xnonfee)      
		set TSO=$$FIELDIN^UTSO(TSO,"NAF",xnonfee)
		// Retun error if transaction code is not set up
		if ETC="" set ER=1,RM=$$^MSG(4312,nonacrcid) quit
		//set up TR array
		do SETTR(nonacrcid,ETC,ITC,xnonfee,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		}

	
	//charge-off process
	//There will be two additional transactions that will occur anytime the
	//C/O principal balance is debited (increased).They will use the PRODCTL.COKO
	//transaction code and the offset will be a linked transaction code (TRN.LNKETC).

	if xchgprin'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
		type TranSet ts
		set ts=Class.new("TranSet")
		set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","COBAL",cobal,cobal-xchgprin,EFD)					
		do hist(TCMT)
		if xchgprin<0 set xchgprin=-xchgprin,ITC=0,ETC=DRTRPR

		else  set ITC=1,ETC=CRTRPR

		//Charge-off reduction flag-indicates chgoff amt was reduced
		set cordctn=ITC

		if ETC="" set ER=1,RM=$$^MSG(4312,chgcid) quit
		set TSO="",TSO=$$FIELDIN^UTSO(TSO,"COP",xchgprin)
		//set up TR array
		do SETTR(chgcid,ETC,ITC,xchgprin,EFD,TSO,"",.ts)
		do POST(.ts) quit:ER
		//Two more additional transactions besides a DR to the chgcid
		//we need to CR charge-off principal offset
		//and DR to loan loss reserve  
			new COETC,COAMT
			set COETC=COKO
			if cordctn set COAMT=-xchgprin
			else  set COAMT=xchgprin
			// Return error if transaction code is not set up
			if COETC="" set ER=1,RM=$$^MSG(4312,chgcid) quit
			//PRODCTL.COKO is a credit to the Principal
			//charge-off general ledger 
			if lgl9="" set ER=1,RM=$$^MSG(4311,chgcid) quit
			type TranSet ts
			set ts=Class.new("TranSet")
			do SETTR(CID,COETC,1,COAMT,EFD,TSO,"",.ts)
			do POST(.ts) quit:ER
			//TRN.LNKETC is a debit to the loan loss reserve acc 
			type RecordTRN trn=Db.getRecord("TRN","COETC")
				new LNKETC
				set LNKETC=trn.lnketc
			// Retun error if transaction code is not set up
			if LNKETC="" set ER=1,RM=$$^MSG(4312,chgcid) quit
			if lglglr="" set ER=1,RM=$$^MSG(4311,chgcid) quit
			type TranSet ts
			set ts=Class.new("TranSet")
			do SETTR(lglglr,LNKETC,0,COAMT,EFD,TSO,"",.ts)
			do POST(.ts) quit:ER
			}		
	

		if xchgint'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
			type TranSet ts
			set ts=Class.new("TranSet")
			set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","COINT",coint,coint-xchgint,EFD)
			do hist(TCMT)
			if xchgint<0 set xchgint=-xchgint,ETC=DRADIN,ITC=1
			else  set ETC=CRADIN if ETC="" set ER=1,RM=$$^MSG(4312,chgcid) quit
			set TSO="",TSO=$$FIELDIN^UTSO(TSO,"COI",xchgint)
			//set up TR array
			do SETTR(chgcid,ETC,ITC,xchgint,EFD,TSO,"",.ts)
			do POST(.ts) quit:ER
			}
		
		if xchgltchg'="" do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
			type TranSet ts
			set ts=Class.new("TranSet")
			set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","COLC",colc,colc-xchgltchg,EFD)
			do hist(TCMT)
			if xchgltchg<0 set xchgltchg=-xchgltchg,ETC=DRTRPE,ITC=1
			else  set ETC=CRTRPE
			if ETC="" set ER=1,RM=$$^MSG(4312,chgcid) quit
			set TSO="",TSO=$$FIELDIN^UTSO(TSO,"LCHGADJ")		
			set TSO=$$FIELDIN^UTSO(TSO,"COLC",xchgltchg)
			//set up TR array
			do SETTR(chgcid,ETC,ITC,xchgltchg,EFD,TSO,"",.ts)
			do POST(.ts) quit:ER
			}
		if xchfee>0 do { if ER do Runtime.rollback() quit $$ERRMSG^PBSUTL(RM)
			type TranSet ts
			set ts=Class.new("TranSet")
			set TCMT=$$TCMTFM^ACNFUNCS(CID,"LN","COFEE",cofee,cofee-xchfee,EFD)
			do hist(TCMT)
			if xchfee<0 set xchfee=-xchfee,ETC=DRTRMFI,ITC=1
			else  set ETC=CRTRMFR
			if ETC="" set ER=1,RM=$$^MSG(4312,chgcid) quit
			set TSO="",TSO=$$FIELDIN^UTSO(TSO,"LNFEEIN",plfee_":"_xchfee)
			set TSO=$$FIELDIN^UTSO(TSO,"COF",xchfee)
			//set up TR array
			do SETTR(chgcid,ETC,ITC,xchfee,EFD,TSO,"",.ts)
			do POST(.ts) quit:ER
			}

	if ER do Runtime.rollback()  quit $$ERRMSG^PBSUTL($G(RM))		// Rollback transaction

	do Runtime.commit()		// Commit transaction

	// set error trap
	catch vERROR {
		do ZE^UTLERR
		}
	quit "" 

SETTR(xcid,ETC,ITC,TAMT,EFD,TSO,TCMT,TranSet ts)  // Private Create Transaction Set
 
	/* Create closeoff transactions Build Transaction object
 
	ARGUMENTS:
 
		.ETC    External transaction code  /TYP=T/REQ/MECH=VAL
 
		.ITC    Internal transaction code  /TYP=T/REQ/MECH=VAL
 
		.CID    Account number		   /TYP=N/REQ/MECH=VAL
 
		.TAMT   Transaction amount	   /TYP=$/REQ/MECH=VAL
		.EFD    Effective Date		   /TYP=D/REQ/MECH=VAL 
		.TSO    Transaction source
		.TCMT   Transaction comment	   /TYP=T/NOREQ/MECH=VAL
		 
	RETURNS:
 
		ttx()     Transaction object				*/
 
 

	new trn
	type RecordTRN trn
	set trn=Db.getRecord("TRN","ETC")
	set ITC=trn.itc
 
	if '$E(CTL) quit
	new ttx
	type RecordTTX ttx
	set ttx=Class.new("RecordTTX")
	set ttx.cid=xcid
	set ttx.itc=ITC
	set ttx.etc=ETC
	set ttx.tamt=TAMT
	set ttx.tjd=%SystemDate
	set ttx.tlo=%UserStation
	set ttx.tso=TSO
	set ttx.tcmt=TCMT
	set ttx.efd=EFD
	set ttx.cc=CC
	#if CUVAR.%MCP set ttx.crcd=CRCD
	set x=ts.copyTran(ttx)
	quit

POST(TranSet ts)
	new par
	set par("IPMODE")=3
	set par("OPTION")=2
	//set par("UPDTTX")=1
	do ts.postTSet(%SystemDate,BRCD,.par)

	// Rejected
	new ET
	if $D(OM) do {
		if OM(1)'="" set ET=$P(OM(1),"|",2)
		else  set ET=$$^MSG(3494)
	}
	if $G(ET)="" set ET=$$^MSG(3494)
	for i=1:1:$L(ts.status,"|") quit:ER  if $P(ts.status,"|",i)=1 set ER=1,RM=ET 
      	quit


hist(TCMT)

	// update history record on the customer view account

	type Number TSEQ = 1
	type ResultSet rs = Db.select("TSEQ","HIST","CID=:CID","TSEQ DESC")

	if rs.next() set TSEQ = rs.getCol("TSEQ") + 1

	type RecordHIST hist = Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ",1)

	set hist.tcmt = TCMT
	set hist.tjd = %SystemDate
	set hist.efd = EFD

	do hist.save()

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60845^39957^Pete Chenard^16687"	// Signature - LTD^TIME^USER^SIZE
