COMPST //Batch BCHCOMPST - Commission Posting
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHCOMPST Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHCOMPST",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(PSTDT,AGENT,CPLAN,CID,SEQ) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHCOMPST","*","",PSTDT.get()_","_AGENT.get()_","_CPLAN.get()_","_CID.get()_","_SEQ.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,PSTDT,AGENT,CPLAN,CID,SEQ)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHCOMPST","*","",PSTDT.get()_","_AGENT.get()_","_CPLAN.get()_","_CID.get()_","_SEQ.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,PSTDT,AGENT,CPLAN,CID,SEQ) //
	/* The following variables are being set in the THRINIT and THREXEC
	   sections:

	PRODTYPE : the product type of the interim settlement account
	ETCCR	 : the extrenal credit transaction code for the settlement acct	
	ITCCR	 : the internal credit transaction code for the settlement acct
	ETCDR	 : the extrenal debit transaction code for the settlement acct
	ITCDR	 : the internal debit transaction code for the settlement acct
	TSO	 : the transaction source field for all transactions
	INTRM	 : the account number if the interim settlement account
	INTCRCD  : the currency code of the settlement account
	MDRETC	 : the miscellaneous debit transaction code
        MDRITC   : the miscellaneous debit internam transaction code 
        MCRETC	 : the miscellaneous credit transaction code
        MCRITC	 : the miscellaneous credit internam transaction code
	DEFEXPGL : the deferred general ledger account
	NOC	 : the number of defered cycles
        TCMT	 : the transaction comment

	*/

        type Public Number INTRM,DEFEXPGL,NOC,PRODTYPE
        type Public String ETCCR,ETCDR,INTCRCD,ITCCR,ITCDR,MDRETC
	type Public String MDRITC,MCRETC,MCRITC,TCMT,TSO
	type Public Boolean ER

	type String CRCD
	type Number ADJAMT,AMT,NEWAMT

	// Load dayend information
	type RecordDAYENDCOMPST compst
        set compst=Db.getRecord("DAYENDCOMPST","PSTDT,AGENT,CPLAN,CID,SEQ")

	if compst.posted quit		// Quit if this record was already posted

	set CRCD=compst.crcd
	set AMT=compst.amt

	// Check for commission adjustments
	set ADJAMT=$$ADJUST
	if ADJAMT'=0 set AMT=AMT+ADJAMT
	if +AMT=0 quit		// Do not process an amount of 0
	
	// The amount in the dayend file may be in a different currency than
	// the settlement account so we may need to convert

	set NEWAMT=AMT
	if CRCD'=INTCRCD do {
		type Number EXCAMT
                do EXC^CRCDUTL(CRCD,INTCRCD,AMT,1,1,00)
                set NEWAMT=$$^SCARND(EXCAMT,0,,INTCRCD)
		}


	// Now build the transaction
	if NEWAMT>0 do POSTPOS    	// post positive commission
	if NEWAMT<0 do POSTNEG		// post negative commission
	if ER quit

	// Do defered processing if necessary
	if (DEFEXPGL'=""),(+NOC'=0) do DEFER

 
       // Check for prior financial year and update Commissions Paid Last
       // Year or Commissions Paid Year-To-Date fields

       	type RecordAGENTCOM agntcom=Db.getRecord("AGENTCOM","AGENT,CPLAN")

	#IF CUVAR.YEOFF
		type Date FINB,TDT

		set FINB=$$BOFY^SCADAT(%SystemDate,1)	// Beginning of Financial year
		if %SystemDate<FINB set agntcom.comply=agntcom.comply+NEWAMT
		else  set agntcom.compytd=agntcom.compytd+NEWAMT  	
	#ELSE
		set agntcom.compytd=agntcom.compytd+NEWAMT
	#ENDIF

	do agntcom.bypassSave()

	// No errors so mark this entry completed
	set compst.posted=1
	do compst.bypassSave()	
	
	quit
	
	//----------------------------------------------------------
POSTPOS	// Generate transactions to post positive commission amounts
	//----------------------------------------------------------

	type Public Number AMT,CC,INTRM,DEFEXPGL,EXPGL,NEWAMT,PRODTYPE
        type Public String BRCD,CRCD,ETCCR,ETCDR,INTCRCD,ITCCR,ITCDR,MDRETC
        type Public String MDRITC,MCRETC,MCRITC,TCMT,TSO
        type Public Boolean ER
	type String PAR()
	type Number SEQ

	// Create transaction to agent's settlement account
	
	type RecordTTX ttx
	type TranSet ts
	set ts=Class.new("TranSet")
	set ttx=Class.new("RecordTTX")

	set ttx.cid=INTRM                // Account Number
        set ttx.itc=ITCCR                // Internal Transaction
        set ttx.etc=ETCCR                // External Transaction
        set ttx.tamt=NEWAMT              // Transaction Amount
        set ttx.efd=%SystemDate          // Effective Date
        set ttx.tlo=%UserStation         // Transaction Location
        set ttx.tcmt=TCMT                // Transaction Comment
        set ttx.tso=TSO                  // Source of Funds
	set ttx.crcd=INTCRCD		 // Currency Code
	set SEQ=ts.copyTran(ttx)

	//Always offset to the expense G/L account

	if DEFEXPGL'="" set ttx.cid=DEFEXPGL
	else  set ttx.cid=EXPGL	         // Account Number
        set ttx.itc=MDRITC               // Internal Transaction
        set ttx.etc=MDRETC               // External Transaction
        set ttx.tamt=AMT                 // Transaction Amount
        set ttx.efd=%SystemDate          // Effective Date
        set ttx.tlo=%UserStation         // Transaction Location
        set ttx.tcmt=TCMT                // Transaction Comment
        set ttx.tso=TSO                  // Source of Funds
	set ttx.crcd=CRCD		 // Currency Code
	set ttx.cc=CC			 // Cost Center
	set SEQ=ts.copyTran(ttx)

	// File the Transaction
        set PAR("IPMODE")=3
        set PAR("OPTION")=2
	do ts.postTSet(%SystemDate,BRCD,.PAR)

	quit

	//----------------------------------------------------------
POSTNEG	// Generate transactions to post negative commission amounts
	//----------------------------------------------------------

        type Public Number AMT,CC,INTRM,DEFEXPGL,EXPGL,NEWAMT,PRODTYPE
        type Public String BRCD,CRCD,ETCCR,ETCDR,INTCRCD,ITCCR,ITCDR,MDRETC
        type Public String MDRITC,MCRETC,MCRITC,TCMT,TSO
        type Public Boolean ER
        type String PAR()
        type Number SEQ

	// Create transaction to agent's settlement account	
	type RecordTTX ttx
	type TranSet ts
	set ts=Class.new("TranSet")
	set ttx=Class.new("RecordTTX")

	set ttx.cid=INTRM                // Account Number
        set ttx.itc=ITCDR                // Internal Transaction
        set ttx.etc=ETCDR                // External Transaction
        set ttx.tamt=NEWAMT*(-1)         // Transaction Amount
        set ttx.efd=%SystemDate          // Effective Date
        set ttx.tlo=%UserStation         // Transaction Location
        set ttx.tcmt=TCMT                // Transaction Comment
        set ttx.tso=TSO                  // Source of Funds
	set ttx.crcd=INTCRCD		 // Currency Code
	set SEQ=ts.copyTran(ttx)

	//Always offset to the expense G/L account

	if DEFEXPGL'="" set ttx.cid=DEFEXPGL
	else  set ttx.cid=EXPGL	         // Account Number
        set ttx.itc=MCRITC               // Internal Transaction
        set ttx.etc=MCRETC               // External Transaction
        set ttx.tamt=AMT*(-1)            // Transaction Amount
        set ttx.efd=%SystemDate          // Effective Date
        set ttx.tlo=%UserStation         // Transaction Location
        set ttx.tcmt=TCMT                // Transaction Comment
        set ttx.tso=TSO                  // Source of Funds
	set ttx.crcd=CRCD		 // Currency Code
	set ttx.cc=CC			 // Cost Center
	set SEQ=ts.copyTran(ttx)

	// File the Transaction
        set PAR("IPMODE")=3
        set PAR("OPTION")=2
	do ts.postTSet(%SystemDate,BRCD,.PAR)

	quit

	//---------------------------------------------------------------------
ADJUST()  // Post Commission Adjustments
	//---------------------------------------------------------------------

        // If there is any data in the commission adjustment file DAYENDCOMADJ,
        // then generate a transaction and post
 
	type Date DATE
	type Boolean POSTED
	type Number ADJAMT
	type String ADJCRCD

	type Public Date PSTDT
	type Public Number AGENT,CID,EXCAMT
	type Public String CPLAN,CRCD

	// Check to see if ant adjustments exist
	if 'Db.isDefined("DAYENDCOMADJ","PSTDT,AGENT,CPLAN,CID") quit 0

        // Load dayend information
        type RecordDAYENDCOMADJ comadj
        set comadj=Db.getRecord("DAYENDCOMADJ","PSTDT,AGENT,CPLAN,CID")
 
	if comadj.posted quit 0	// If already posted, don't continue

	set ADJAMT=comadj.adjamt
	set ADJCRCD=comadj.crcd

	if +ADJAMT=0 Quit 0	// Quit if zero adjustments

	if CRCD'=comadj.crcd do {	    // convert the amount into the base
	        Do EXC^CRCDUTL(CRCD,ADJCRCD,ADJAMT,1,1,00)
        	set ADJAMT=$$^SCARND(EXCAMT,0,,CRCD)
		}

	// Set the adjustment record to already be posted
	set comadj.posted=1
	do comadj.bypassSave()	
		
        quit ADJAMT

	//---------------------------------------------------------------------
DEFER   // Process defer account info
	//---------------------------------------------------------------------

	type Public Number AGENT,AMT,CID,NOC
	type Public String CPLAN,CRCD
	type Number DEFCYC,SEQ

	type RecordCOMDEF comdef
	set comdef=Class.new("RecordCOMDEF")

	set SEQ=Db.nextVal("COMDEF","CID,CPLAN")
	set DEFCYC=AMT/NOC
	set DEFCYC=$$^SCARND(DEFCYC,0,,CRCD)
	set comdef.cid=CID
	set comdef.cplan=CPLAN
	set comdef.seq=SEQ
	set comdef.amtot=NOC
	set comdef.deforg=AMT
	set comdef.defcyc=DEFCYC
	set comdef.deftot=0
	set comdef.crcd=CRCD
	set comdef.amrem=NOC
	set comdef.agent=AGENT

	do comdef.bypassSave()
	
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	type Number AGENT,CC,CID,INTRM,PRODTYPE,SEQ
	type String CLS,CPLAN,DATA,ETCCR,ETCDR,INTCRCD,ITCCR,ITCDR,OLDPLAN,TSO

        // get the agent's interim settlement account and all necessary
        // processing information

	set AGENT=vINPUT	

	type RecordAGENT agent=Db.getRecord("AGENT","AGENT=:AGENT")
	type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:AGENT")
	set INTRM=agent.intrm
	set CC=utblbrcd.ccdef

	type RecordACN acn=Db.getRecord("ACN","CID=:INTRM")
        set PRODTYPE=acn.type
        set INTCRCD=acn.crcd
 
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:PRODTYPE")
        set ETCCR=prodctl.crtrgp
        set ETCDR=prodctl.drtrgp
	if (ETCCR="")!(ETCDR="")  quit
	 
        type RecordTRN trn1=Db.getRecord("TRN","ETC=:ETCCR")
	set ITCCR=trn1.itc
	type RecordTRN trn2=Db.getRecord("TRN","ETC=:ETCDR")
        set ITCDR=trn2.itc

        set TSO=""
        set TSO=$$FIELDIN^UTSO(TSO,"COMPST")

	set OLDPLAN=""
	type ResultSet rs=Db.select("CPLAN,CID,SEQ","DAYENDCOMPST","PSTDT=:%SystemDate and AGENT=:AGENT","CPLAN ASC")
        while rs.next() do {

		type Number DEFEXPGL,EXPGL,NOC

        	set CPLAN=rs.getCol("CPLAN")
		set CID=rs.getCol("CID")
		set SEQ=rs.getCol("SEQ")

		if CPLAN'=OLDPLAN do {
			// Load Commission Plan Information
			type RecordUTBLCOMPLN compln=Db.getRecord("UTBLCOMPLN","CPLAN=:CPLAN")
        		set EXPGL=compln.expgl
			set DEFEXPGL=compln.deferexpgl
			set NOC=compln.noc
			set OLDPLAN=CPLAN
			}

		do vPROC(%SystemDate,AGENT,CPLAN,CID,SEQ)
		
		}
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	type Number AGENT

	set AGENT=vINPUT
	type ResultSet rs=Db.select("AGENT","DAYENDCOMPST","PSTDT=:%SystemDate AND AGENT>:AGENT")
	if 'rs.next() set vINPUT="" quit
	set AGENT=rs.getCol("AGENT")
	set vINPUT=AGENT

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type Public Number BRCD
	type Public Boolean ER

	do SOURCE^BCHSOURC("BOFF","COMM",.%UserID,.BRCD,.%UserClass)
	if ER set %BatchExit=1 quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("PSTDT,AGENT,CPLAN,CID,SEQ","DAYENDCOMPST","DAYENDCOMPST.PSTDT=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type Public Number BRCD
	type Public Date PSTDT
	type Public String TCMT,MCRETC,MCRITC,MDRETC,MDRITC

	// Initialize batch teller
	do SOURCE^BCHSOURC("BOFF","COMM",.%UserID,.BRCD,.%UserClass)
	set PSTDT=%SystemDate

	// Set miscellaneous transaction code data
        set MDRETC="MDR"
	type RecordTRN trn1=Db.getRecord("TRN","ETC=:MDRETC")
        set MDRITC=trn1.itc

	// Commission Posting
	set TCMT=$$^MSG(3379)

	set MCRETC="MCR"
        type RecordTRN trn2=Db.getRecord("TRN","ETC=:MCRETC")
        set MCRITC=trn1.itc

	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	set vINPUT=""

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
