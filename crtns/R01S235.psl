R01S235	// SCA192 - Account Balance Discrepancy Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:54 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String CID,CLS,DTJ,EFD,GRP,SIN,TYPE
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ

	set RID="SCA192"
	set RN="Account Balance Discrepancy Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB

	set %READ="IO/REQ,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String CID,CLS,DTJ,EFD,GRP,SIN,TYPE
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ACNBAL,ACTBAL,ANTBAL,CONAM,DIFF,DTJDAT,HISTSEQ,MSG,NET,RID,RN,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vovc4,vrundate,vsysdate,vudwhere

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA192",RN="Account Balance Discrepancy Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA192","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[ACN]CID#1#12,[ACN]BAL#14#12"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()


		if vudwhere.exists() set VWHERE=vudwhere

		set VBNRINFO("DESC")="Account Balance Discrepancy Report"
		set VBNRINFO("PGM")="R01S235"
		set VBNRINFO("RID")="SCA192"
		set VBNRINFO("TABLES")="ACN"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,ACN]CID"

		set VBNRINFO("DOC",1)="The Account Balance Verification Report (SCA192) verifies, for a specified"
		set VBNRINFO("DOC",2)="date, all balance changes in accounts (Deposit Account Master file [DEP] or"
		set VBNRINFO("DOC",3)="Loan Account Master file [LN]) versus history (Transaction History file"
		set VBNRINFO("DOC",4)="[HIST]).  This report verifies that the current account balance from the"
		set VBNRINFO("DOC",5)="DEP or LN file equals the account balance from a specified date in history plus"
		set VBNRINFO("DOC",6)="or minus all balance changes from that date to the current system processing"
		set VBNRINFO("DOC",7)="date."
		set VBNRINFO("DOC",8)=""
		set VBNRINFO("DOC",9)="The institution has the following options when verifying account balances:"
		set VBNRINFO("DOC",10)="*  Users can request verification of a single account or all accounts within a"
		set VBNRINFO("DOC",11)="   specified product type.  Based on the type of verification the user"
		set VBNRINFO("DOC",12)="   specifies, the system displays one of two request screens."
		set VBNRINFO("DOC",13)="*  If the institution requests verification for a product type, the"
		set VBNRINFO("DOC",14)="   verification can be limited to those accounts with activity that affected the"
		set VBNRINFO("DOC",15)="   account balance on the requested processing date."
		set VBNRINFO("DOC",16)=""
		set VBNRINFO("DOC",17)="Refer to the ""System Balancing Troubleshooting Guide"" for further information."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:1 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:5 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	do VOPRE if VFMQ do VEXIT(0) quit

	set VSELECT=""
	set VSELECT=VSELECT_"ACN.BAL,ACN.STAT,ACN.DTC,ACN.CID,ACN.TRB,ACN.HISCT"
	set VSELECT=VSELECT_"F,ACN.ODT"

	set VWHERE=""
	if vudwhere.exists() set VWHERE=vudwhere
	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"ACN",VWHERE,"ACN.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc4
	set vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc4,vc4
	set vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7
	set vc1=V.piece($C(9),1)			// ACN.BAL
	set vc2=V.piece($C(9),2)			// ACN.STAT
	set vc3=V.piece($C(9),3)			// ACN.DTC
	set vc4=V.piece($C(9),4)			// ACN.CID
	set vc5=V.piece($C(9),5)			// ACN.TRB
	set vc6=V.piece($C(9),6)			// ACN.HISCTF
	set vc7=V.piece($C(9),7)			// ACN.ODT
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2,vc3,vc4,vc5,vc6,vc7
	/* -----Revision History ---------------------------------------------
	
	04/18/07 - RussellDS - CR26387
		   Eliminated use of UHFETCH.  This also removes euro conversion,
		   which will need to be added again, if/when supported again.

	06/03/06 - SmithCD - CR 21450
		   Removed extra setting of PRL=hist.tamt, which could 
		   potentially overwrite the segtxn.lastamt value set in 
		   previous line. Additional minor cleanup.

	05/15/06 - RussellDS - CR21296
		   Changed to use cache array instead of %CACHE, which is
		   reserved for PSL record objects.

	04/05/06 - RussellDS - CR20618
		   Replace ABS(TAMT) with ABS(TOT) in SELECT since TAMT
		   is text column and generates error in Oracle.

	02/03/05 - RussellCD - CR13817
		   Included fix from Profile01 for CR2330.
	*/

	type public Date DTJDAT,%EffectiveDate
	type public Number ACNBAL,ACTBAL,ANTBAL,DIFF,HISTSEQ,NET
	type public String MSG
	
	type Number CID,DC,ENDBAL,ER,FINHIST,TRB
	type String PRL
	
	set HISTSEQ=""
	set (ACTBAL,ANTBAL,DIFF,ER,NET)=0
	set MSG=""

	/*
	Set variable ACNBAL for totalling. Don't want to just use totals
	for [ACN]BAL, since this will get picked up even if the line
	is not displayed.

	ACNBAL, and other totalled items, will be set to zero if the
	line is not printed. This is done in the post-processor on the
	final column on the report.

	Determination to not print will be based on DIFF=0.
	*/
 
	set ACNBAL=vc1

	// Don't print if closed and not closed on requested date
	if vc2=4,vc3'=%EffectiveDate quit

	set ANTBAL=ACNBAL
	set CID=vc4
	set TRB=vc5

	set FINHIST=0
	
	type DbSet ds=Db.selectDbSet("HIST","CID=:CID AND ITC IS NOT NULL AND ETC IS NOT NULL AND ABS(TOT) > 0","TSEQ DESC")
	while ds.next() do { quit:FINHIST
	
		type RecordHIST hist=ds.getRecord("HIST")
		
		set HISTSEQ=hist.tseq
		set ENDBAL=hist.endbal

		type RecordSEGTXN segtxn = Db.getRecord("SEGTXN", "CID=:CID,HSEQ=:HISTSEQ", 1)
		if (segtxn.getMode() = 0) set PRL = hist.tamt
		else  set PRL = segtxn.lastamt

		if PRL.isLike("%#%") set PRL=PRL.piece("#",2)
		
		// Financial transaction on or before EFD
		if hist.tjd<%EffectiveDate do { quit:FINHIST
			set ACTBAL=ENDBAL
			if ACTBAL'="" set FINHIST=1
			}

		set DC=hist.itc1

		if (DC&TRB)!('DC&'TRB) set PRL=-PRL
		set ANTBAL=ANTBAL-PRL
		set NET=NET-PRL
		
		quit:hist.tjd'=%EffectiveDate
		quit:%EffectiveDate<DTJDAT
		
		// See if in DTJ
		type DbSet dtjds=Db.selectDbSet("DTJ","TJD=:%EffectiveDate AND CID=:CID AND TSEQ=:hist.tseq")
		if dtjds.isEmpty() do { quit
			// Sequence ~p1 in HIST file but not in DTJ file
			set MSG=$$^MSG(2478,hist.tseq)
			}
			
		// See if DTJ and HIST entries match
		while dtjds.next() do { quit
			type RecordDTJ dtj=dtjds.getRecord("DTJ")
			
			if hist.etc'=dtj.etc set ER=1
			else  if hist.tamt'=dtj.tamt set ER=1
			else  if hist.efd'=dtj.efd set ER=1
			else  if hist.tlo'=dtj.tlo set ER=1
			else  if hist.tso'=dtj.tso set ER=1
			else  if hist.tcmt'=dtj.tcmt set ER=1
			else  if hist.cdt'=dtj.cdt set ER=1
			else  if hist.time'=dtj.time set ER=1
			else  if hist.brcd'=dtj.brcd set ER=1
			else  if hist.trc'=dtj.trc set ER=1
			else  if hist.uid'=dtj.uid set ER=1
			else  if hist.itc1'=dtj.itc.curVal.extract(1) set ER=1
			else  if +hist.itc8'=+dtj.itc.curVal.extract(8) set ER=1
			
			// HIST file sequence ~p1 does not match DTJ file sequence
			if ER set MSG=$$^MSG(1176,hist.tseq)
			}
		quit:ER
		}
		
	// Make sure all transactions for the date that are in DTJ are in HIST
	type ResultSet dtjrs=Db.select("TSEQ","DTJ","TJD=:%EffectiveDate AND CID=:CID")
	while dtjrs.next() do { quit:ER
		if 'Db.isDefined("HIST","CID=:CID,TSEQ=:dtjrs.getCol(""TSEQ"")") do {
			set ER=1
			// Sequence ~ in DTJ file but not in HIST file
			set MSG=$$^MSG(2477,dtjrs.getCol("TSEQ"))
			}
		}
		
	// No history, or all non-financial on or before EFD - use HIST0 info
	if 'HISTSEQ!'FINHIST do {
	
		type Date JD
		type Number AMT,SEQZERO


		// No history cutoff date
		if vc6="" set ACTBAL=0 quit
		
		set AMT=0
		
		set JD="",SEQZERO=0
		type ResultSet rs=Db.select("JD","HIST0","CID=:CID AND JD < (:%EffectiveDate+1)","JD DESC")
		if rs.next() do {
			set JD=rs.getCol("JD")
			type RecordHIST0 hist0 = Db.getRecord("HIST0", "CID=:CID,JD=:JD", 1)
			set AMT=hist0.bal,SEQZERO=hist0.seqzero
			}

		if JD=%EffectiveDate,SEQZERO>HISTSEQ do {
			type DbSet ds = Db.selectDbSet("HIST0","CID=:CID and JD<:%EffectiveDate","JD DESC")
			if ds.next() do {
				type RecordHIST0 hist0 = ds.getRecord("HIST0")
				set AMT=hist0.bal
				}
			}

		set ACTBAL=AMT
		}

	// If this account was opened on EFD, actual balance = 0
	if 'FINHIST,vc7=%EffectiveDate set FINHIST=1,ACTBAL=0

	// If message, or anticipated bal '= actual bal include as exception
	set DIFF=ANTBAL-ACTBAL
	
	// Account balance not supported by HIST file
	if DIFF,MSG="" set MSG=$$^MSG(54)
	
	quit

VOPRE	// OPEN pre-processor

	type public Date EFD
	type public Number DTJ,SIN,TYPE
	type public String CLS,GRP,vudwhere

	// Set up user-define WHERE clause, based on request for type of
	// report from UBAL06.

	// Single account, all for a type, or all active for a type
	if SIN set vudwhere="CID=:CID"
	else  if 'DTJ.get() set vudwhere="CLS=:CLS AND GRP=:GRP AND TYPE=:TYPE"
	else  set vudwhere="CID IN (SELECT CID FROM DTJ WHERE TJD=:EFD AND CID=:CID)"
	quit

VPREAQ	// Pre-processor (after query)

	type public String DTJDAT

	type ResultSet rs=Db.select("TJD","DTJ","","TJD ASC")
	if rs.next() set DTJDAT=rs.getCol("TJD")
	else  set DTJDAT="" 
	quit

VPREBQ	// Pre-processor (before query)

	//Incoming=CID,CLS,DTJ,EFD,GRP,SIN,TYPE
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1		// Skip detail
	do VBREAK

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(1).get() do VDTL1 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(1)
	type Public String vc4,vovc4
	type Number vb1
	set (vb1)=0
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),ACNBAL,ACTBAL,ANTBAL,DIFF,NET
	type Public String VSTATS

	set VT(1)=VT(1)+1
	set VT(1,1,1)=VT(1,1,1)+ACNBAL			// @TOT(<<ACNBAL>>)
	set VT(1,2,1)=VT(1,2,1)+ACTBAL			// @TOT(<<ACTBAL>>)
	set VT(1,3,1)=VT(1,3,1)+ANTBAL			// @TOT(<<ANTBAL>>)
	set VT(1,4,1)=VT(1,4,1)+DIFF			// @TOT(<<DIFF>>)
	set VT(1,5,1)=VT(1,5,1)+NET			// @TOT(<<NET>>)
	quit

VDTL1	// Detail
	type public String %TIM,ACNBAL,ACTBAL,ANTBAL,CID,CLS,DIFF,DTJ,DTJDAT,EFD,GRP,HISTSEQ,IOSL,MSG,NET,SIN,TYPE,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,vc7,verror,vh(),vovc4,vrundate,vsysdate,vudwhere

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL=$J(vc4,12)
	set V=vc1,VO=V set V=$S(V="":"",1:$J(vc1,0,2)) do VP1 quit:VFMQ!verror.get()
	set VL=VL_$J("",13-VL.length())_V		// [SYSDEV,ACN]BAL
	set VL=VL_$J("",27-VL.length())_$S(NET="":"",1:$J(NET,0,2))
	set VL=VL_$J("",38-VL.length())_$S(ANTBAL="":"",1:$J(ANTBAL,0,2))
	set VL=VL_$J("",51-VL.length())_$S(ACTBAL="":"",1:$J(ACTBAL,0,2))
	set VL=VL_$J("",64-VL.length())_$J(HISTSEQ,5)
	set VL=VL_$J("",70-VL.length())_$S(DIFF="":"",1:$J(DIFF,0,2))
	do VP2 quit:VFMQ!verror.get()  set V=$E(MSG,1,48)
	set VL=VL_$J("",82-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ACNBAL,ACTBAL,ANTBAL,CID,CLS,CONAM,DIFF,DTJ,DTJDAT,EFD,GRP,HISTSEQ,MSG,NET,RID,RN,SIN,TYPE,VL,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vovc4,vrundate,vsysdate,vudwhere
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+10,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="Effective Date: "
	set VL=VL_$J("",16-VL.length())_$J($$DAT^%ZM(EFD),10)
	do VOM
	set VL="  "_"Product Type: "
	set VL=VL_$J("",16-VL.length())_$E(TYPE,1,5)
	do VOM
	set VL="" do VOM
	set VL="                  "_"Current    Net Hist  Anticipated       Actual"
	do VOM
	set VL="     "_"Account      Balance     Change     Balance        Balance   Seq Difference  Error"
	do VOM
	set VL="=================================================================================================================================="
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,ACNBAL,ACTBAL,ANTBAL,CLS,DIFF,DTJ,DTJDAT,EFD,GRP,HISTSEQ,MSG,NET,SIN,TYPE,VPN,vovc4,vrundate,vsysdate,vudwhere
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="    "_"Totals:"
	set V=0						// @TOT(<<ACNBAL>>,0)
	for I=0:1:1 set V=V+VT(I,1,1)
	set VL=VL_$J("",12-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=0						// @TOT(<<NET>>,0)
	for I=0:1:1 set V=V+VT(I,5,1)
	set VL=VL_$J("",26-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=0						// @TOT(<<ANTBAL>>,0)
	for I=0:1:1 set V=V+VT(I,3,1)
	set VL=VL_$J("",38-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=0						// @TOT(<<ACTBAL>>,0)
	for I=0:1:1 set V=V+VT(I,2,1)
	set VL=VL_$J("",51-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=0						// @TOT(<<DIFF>>,0)
	for I=0:1:1 set V=V+VT(I,4,1)
	set VL=VL_$J("",70-VL.length())_$S(V="":"",1:$J(V,0,2))
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - [SYSDEV,ACN]BAL


	quit

VP2	// Column pre-processor - Variable: MSG

        // If there is no difference suppress line and zero amounts that are
        // used for totals
 
        type public Number ACNBAL,ACTBAL,ANTBAL,DIFF,NET
        type public String MSG,V,VL
 
        if 'DIFF do {
                set (MSG,V,VL)=""
                set (ACNBAL,ACTBAL,ANTBAL,NET)=0
	        }
	quit
