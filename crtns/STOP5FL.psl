STOP5FL(RecordSTOP5 stop5, String vpar, Boolean vparNorm) // STOP5 - ACH Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             03/02/2005
	// Trigger Definition (4)                      03/10/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop5.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stop5,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop5,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = stop5.cid
	type String ACH = stop5.ach
	type String SEQ = stop5.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ACH").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP5",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP5","CID = :stop5.cid and ACH = :stop5.ach and SEQ = :stop5.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ACH
	type public String SEQ

	type RecordSTOP5 stop5 = Db.getRecord("STOP5","CID=:CID,ACH=:ACH,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do stop5.setMode(2)

		do STOP5FL(stop5,vpar)
	}
	else  do VINDEX(stop5)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP5 stop5

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP5","CID = :stop5.cid and ACH = :stop5.ach and SEQ = :stop5.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop5.DP = %SystemDate
		if %O = 0  set stop5.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop5)) S ^STOP(5,vobj(stop5,-3),vobj(stop5,-4),vobj(stop5,-5))=vobj(stop5)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.stop5) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP5 stop5

	if vpar["/INDEX/" do VINDEX(.stop5)                    // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^STOP(5,vobj(stop5,-3),vobj(stop5,-4),vobj(stop5,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSTOP5 stop5

	// Type local variables for access keys for defaults
	type public String CID
	type public String ACH
	type public String SEQ

	type public String TJD
	if stop5.dp.isNull() set stop5.dp = TJD                // dp
	if stop5.stcon.isNull() set stop5.stcon = 0            // stcon
	if stop5.time.isNull() set stop5.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP5 stop5

	if stop5.act.isNull() do vreqerr("ACT") quit
	if stop5.dp.isNull() do vreqerr("DP") quit
	if stop5.stcon.isNull() do vreqerr("STCON") quit
	if stop5.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP5 stop5

	if stop5.cid.isNull() do vreqerr("CID") quit
	if stop5.ach.isNull() do vreqerr("ACH") quit
	if stop5.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACT").exists(),stop5.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop5.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop5.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop5.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP5","MSG",1767,"STOP5."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSTOP5 stop5
	if 'stop5.cid.isNull() set vfkey("^ACN("_""""_stop5.cid_""""_","_50_")")="STOP5(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSTOP5 stop5
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":stop5.cid") set vERRMSG = $$^MSG(8563,"STOP5(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("FEECID").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSTOP5 stop5
	if vx("").order().isNull() do AUDIT^UCUTILN(stop5,.vx(),1,"|") quit
	if vx("EXP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(stop5,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT_UPD - After Insert or Update trigger

	do vau1

	quit

vau1 // Trigger AFTER_INSERT_UPD - After Insert or Update trigger

	type public RecordSTOP5 stop5
	/*	
	---- Revision History ------------------------------------------------
	
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up
		   
		   Removed old revision history.
	*/

	// Verify mode
	if %ProcessMode=2 quit               
	
	type public Number ER
	
	type Number FEECID5, STPCID
	type String msg                 
	
	// Stop payment - type - seq
	if (%ProcessMode = 0) set msg = $$^MSG(6701)
	else  if (%ProcessMode = 1) set msg = $$^MSG(6702)
	else  if (%ProcessMode = 3) set msg = $$^MSG(6700)
	
	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='STOP5',DI='ACH'", 1)
	
	//Sequence ~p1
	set msg = msg_"5 - "_dbtbl1d.des_" "_stop5.ach_" "_$$^MSG(6742,stop5.seq)
	
	set STPCID = stop5.cid
	set FEECID5 = stop5.feecid
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// History
	do HISTBLD^ACNFUNCS(msg,acn.boo)       

	// Modify mode
	quit:(%ProcessMode = 1) 	

	// Update account sequence
	if (acn.cls = "D") do {
			
		type RecordDEP dep = {RecordDEP}acn
			
		set dep.stp5 = dep.stp5 + 1
		
		do dep.save("/NOJOURNAL")
	}
		
	if (acn.cls = "L") do {
			
		type RecordLN ln = {RecordLN}acn
			
		set ln.stp5 = ln.stp5 + 1
			
		do ln.save("/NOJOURNAL")
	}

								// Process Stop Fees
	if 'FEECID5.isNull() do {
	
		type RecordDEP dep = Db.getRecord("DEP", "CID=:FEECID5", 1)
		
		// Service charge fee account must be a deposit account
		if (dep.getMode() = 0) do Runtime.setErrMSG("STOP5",803) quit:ER

		// Service charge fee account ~p1 is closed.
		if (dep.stat = 4) do Runtime.setErrMSG("STOP5",457,"FEECID5") quit:ER
		
		do ^SRVSTP(FEECID5, 5, 2, "STP")	// Assess stop type 5 fee
	} 

	quit

vau2 // Trigger AFTER_UPDATE_FEECID - Modify Fee Charge Account

	type public RecordSTOP5 stop5
	if %ProcessMode'=1 quit     // 1 = Update
	set FEECID5=stop5.feecid
	if (stop5.feecid.oldVal'=stop5.feecid) do Runtime.setErrMSG("STOP5",412,"FEECID5") quit:ER
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete trigger

	type public RecordSTOP5 stop5
	/* ----- Revision History ---------------------------------------------
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up.
	*/
	
	type Number STPCID
	type String msg
	
	// Stop payment - type - seq
	set STPCID = stop5.cid

	//Delete stop pmt -
	set msg = $$^MSG(6700)

	//Sequence ~p1
	set msg = msg_"5 - "_$$^MSG(6742, stop5.seq)
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// Account history
	do HISTBLD^ACNFUNCS(msg, acn.boo)

	if (stop5.exp.isNull() ! (stop5.exp > %SystemDate)) do {
	
		if (acn.cls = "D") do {
			
			type RecordDEP dep = {RecordDEP}acn
			
			set dep.stp5 = dep.stp5 - 1
			
			do dep.save("/NOJOURNAL")
		}
		
		if (acn.cls = "L") do {
			
			type RecordLN ln = {RecordLN}acn
			
			set ln.stp5 = ln.stp5 - 1
			
			do ln.save("/NOJOURNAL")
		}
	}
	
	quit

vbu1 // Trigger BU_EXP - Before Update of Expiration Date

	type public RecordSTOP5 stop5
	do stop5.setAuditFlag(1)
	/* ---- Revision History ------------------------------------------------
	
	03/12/02 - BECKERJ - 49316
		   Add trigger to flag an error message when trying to change
		   the expiration date of a stop that has already expired.
	
				----------------------------------------------------------------------
	*/
	// Cannot modify expiration date. Stop has already expired.
	if (stop5.exp.oldVal'>%SystemDate) do Runtime.setErrMSG("STOP5",5148)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP5 stop5

	set X = stop5.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = stop5.ach if 'X.isNull(),'Db.isDefined("CTBLACHID","X") set vRM = $$^MSG(1485,X) do vdderr("ACH", vRM) quit
	set X = stop5.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop5.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	if stop5.amt.length()>12 set vRM = $$^MSG(1076,12) do vdderr("AMT", vRM) quit
	if stop5.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop5.dc if 'X.isNull(),'Db.isDefined("STBLDC","X") set vRM = $$^MSG(1485,X) do vdderr("DC", vRM) quit
	set X = stop5.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop5.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop5.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	if stop5.fre.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FRE", vRM) quit
	set X = stop5.npdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NPDT", vRM) quit
	if '("01"[stop5.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop5.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop5.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop5.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP5","MSG",979,"STOP5."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordSTOP5 stop5) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EXP").exists() do vi1(.stop5)
	}
	do vi1(.stop5)

	quit
	

vi1(RecordSTOP5 stop5) // Maintain DAYEND index entries (Dayend Expiration Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = stop5.exp
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v4 = stop5.cid
	type String v5 = stop5.ach
	type String v6 = stop5.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^STOP(5,vobj(stop5,-3),vobj(stop5,-4),vobj(stop5,-5)))#2,'$D(^DAYEND(v1,"STPEXP",5,v4,v5,v6)) do vidxerr("DAYEND")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"STPEXP",5,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXP").exists() set v1=vx("EXP").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"STPEXP",5,v4,v5,v6)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("STOP5")

	while ds.next() do {
		type RecordSTOP5 stop5=ds.getRecord("STOP5")
		if vlist.contains("VINDEX") do VINDEX(.stop5) quit
		if vlist.contains("DAYEND") do vi1(.stop5)
	}

	quit


public VIDXBLD1(RecordSTOP5 stop5, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.stop5) quit
	if vlist.contains("DAYEND") do vi1(.stop5)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("STOP5","MSG",1225,"STOP5."_di)

	quit


vkchged // Access key changed

	type public RecordSTOP5 stop5

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ACH").exists() set vux("ACH") = vx("ACH")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = stop5.cid_","_stop5.ach_","_stop5.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop5.cid_","_stop5.ach_","_stop5.seq // Copy new keys into object
	type RecordSTOP5 vnewrec = stop5.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP5",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP5 stop5

	if vux("CID").exists() set stop5.cid = vux("CID").piece("|",i)
	if vux("ACH").exists() set stop5.ach = vux("ACH").piece("|",i)
	if vux("SEQ").exists() set stop5.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "STOP5FL"	// Location of index program

