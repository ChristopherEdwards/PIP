EFTOPT	  /*	DESC:	EFT Amount Type Options

	LIBRARY:
	 . TBA		Total Bill Amount
	 . TBAAVL	Available Total Bill Amount
	 . DUE		Total Amount Due
	 . UNC		Total Amount Uncollected
	 . INT		Total Interest Due
	 . INTAVL	Available Total Interest Due
	 . PRIN		Total principal due
	 . PRINAVL	Available Total Principal Due
	 . CHRG		Add Charges
	 . DEPAVL	Available Balance from deposit account
	 . MRB		Most Recent Bill
	 . CB		Current Bill
	 . OBO		Oldest Bill Outstanding
	 . EBL		Each Bill
	 . CUSTOM	Custom section for Amount Type Option 99

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------

	05/06/05 - KinI - 15524
		   Modified to replace lnbil1.bp1 piece references with direct
		   sub-fields references per DBI standards.

	05/06/03 - CARROLLJ - 51349
		   Modified UNC section to remove the use of the BL array.

	04/23/03 - CARROLLJ - 51349
		   Changed calls to CHRG section to pass ln object and also 
		   modified CHRG section to pass correct parameters to
		   MCHG^LNCO3.

	08/22/02 - GALEONE - 51076
		   Modified EBL section for SCOs with amount type 19.
		   Removed partial payment logic.  Outstanding bills will
		   already reflect partial payments.

	04/12/02 - LAOP
		   Converted M routine EFTOPT to PSL.  Also removed sections
		   INTAVL, PRINAVL and DEPAVL since it is no longer being 
		   used.

	--------------------------------------------------------------------*/

	quit


TBA(CID,NC)
	/*
	 Total Bill Amount

	 ARGUMENTS:
		. CID	Account Number		/TYP=N/REQ
		. NC	"No charges" flag	/TYP=L/NOREQ

	 RETURNS:
		. $$	Transaction amount
	*/

	new TAMT

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	// Total Outstanding Due Amount
	set TAMT=+ln.tba

	// Add late charges to amount
	if +$G(NC)=0 set TAMT=TAMT+$$CHRG(.ln)
	
	quit TAMT


TBAAVL(CID,RCID,NC)
	/* 
	 Available Total Bill Amount

	 Calculate TBA for loan and total available funds for the 
	 deposit account and linked accounts for overdraft protection.

	 Calculate the lesser of:

	 1.  Loan's [LN]TBA or
	 2.  Available balance from deposit account + available balance
	     from it's source of protection.
	*/

	new INCDRD,INCDRL,MINDRD,MINDRL,TBAL,TOTAVL

	// Calculate loan's Available Total Bill Amount
	set TBAL=$$TBA(CID,$G(NC))

	if $G(RCID)="" quit TBAL

	// Calculate DDA's overdraft balance base
	else  do { quit:ER ""
		if 'Db.isDefined("DEP","RCID") quit
		type RecordDEP dep=Db.getRecord("DEP","RCID")

		if +dep.odbb=0 set TOTAVL=+dep.bal	// Ledger Balance
		if +dep.odbb=1 set TOTAVL=dep.balcol	// Collected Balance
		if +dep.odbb=2 set TOTAVL=dep.balavl	// Available Balance

		if dep.minbal,(dep.bal-TOTAVL)<dep.minbal set TOTAVL=dep.bal-dep.minbal
		}

	if 'Db.isDefined("ACN","CID") quit ""
	type RecordACN acn=Db.getRecord("ACN","CID")

	// Calculate available amount from overdraft protection accounts and accum the available amounts.
	type ResultSet rs=Db.select("ODACN","DEPODP","CID=:CID")
	if 'rs.isEmpty() do {
		if '$D(OD(acn.type)) do {
			if 'Db.isDefined("PRODCTL","acn.type") quit
			type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","acn.type")
			set OD(TYPE)=prodctl.inctfrl_"|"_prodctl.inctfrd_"|"_prodctl.mintfrl_"|"_prodctl.mintfrd
			}	

		// Used in CHECKACN^TTXODC
		set INCDRL=$P(OD(TYPE),"|",1),INCDRD=$P(OD(TYPE),"|",2) // PRODCTL.INCTFRL,INCTFRD
		set MINDRL=$P(OD(TYPE),"|",3),MINDRD=$P(OD(TYPE),"|",4) // PRODCTL.MINTFRL,MINTFRD
		}

	while rs.next() set TOTAVL=TOTAVL+$$CHECKACN^TTXODC(rs.getCol(1))

	quit $S(TOTAVL<TBAL:TOTAVL,1:TBAL)


DUE(CID,NC)
	/* 
	 Total amount due

	 ARGUMENTS:
		. CID	Account Number		/TYP=N/REQ
		. NC	"No charges" flag	/TYP=L/NOREQ

	 RETURNS:
		. $$	Transaction amount
	*/

	new TAMT

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	// Determine Total Due
	set TAMT=ln.tdue	

	// Add late charges to amount
	if +$G(NC)=0 set TAMT=TAMT+$$CHRG(.ln)
 
	quit TAMT


UNC(CID,NC)
	/* 
	 Total amount uncollected

	 ARGUMENTS:
		. CID	Account Number		/TYP=N/REQ
		. NC	"No charges" flag	/TYP=L/NOREQ

	 RETURNS:
		. $$	Transaction amount
	*/

	new SCHAMT,TAMT
	set SCHAMT=""

	type RecordLN ln=Db.getRecord("LN","CID",1)
	if ln.getMode()'=1 quit ""

	if ln.idp do {
		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,ln.schseq",1)
		set TAMT=ln.tdue-lnbil1.casd
		}

	/* Interest determined at billing:
	   19 Uncollected Interest
	   21 Uncollected Principal
	   23 Uncollected Escrow	*/

	if 'ln.idp set TAMT=ln.unin+ln.unpr+ln.unes

	// Add late charges to amount
	if +$G(NC)=0 set TAMT=TAMT+$$CHRG(.ln)

	quit TAMT


INT(CID,NC)	
	/* 
	 Total interest due

	 ARGUMENTS:
		. CID	Account Number		/TYP=N/REQ
		. NC	"No charges" flag	/TYP=L/NOREQ

	 RETURNS:
		. $$	Transaction amount
	*/

	new TAMT

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	// Current Interest + Uncollected Interest
	set TAMT=ln.cuin+ln.unin

	// Add late charges to amount
	if +$G(NC)=0 set TAMT=TAMT+$$CHRG(.ln)

	quit TAMT


PRIN(CID,NC)
	/* 
	 Total principal due

	 ARGUMENTS:
		. CID	Account Number		/TYP=N/REQ
		. NC	"No charges" flag	/TYP=L/NOREQ

	 RETURNS:
		. $$	Transaction amount
	*/

	new TAMT

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	//  Current Principal + Uncollected Principal
	set TAMT=ln.cupr+ln.unpr

	// Add late charges to amount
	if +$G(NC)=0 set TAMT=TAMT+$$CHRG(.ln)

	quit TAMT


CHRG(RecordLN ln)
	/*
	 Add charges to total amount
	*/

	quit ln.lchg+$$MCND^LNCO3(,.ln)


MRB(CID)
	/*
	 Most Recent Bill

	 Calculate the Most Recent Bill due regardless of it's due date.
	 BSEQ    Billing - Last Sequence Number   NODE: 101 PIECE: 7
	*/

	new TAMT

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	if ln.bseq>0 do {
		if 'Db.isDefined("LNBIL1","CID,ln.bseq") quit
		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,ln.bseq")
		set TAMT=+ lnbil1.casd
		}

	quit TAMT


CB(CID)
	/*
	 Current Bill

	 Calculate the Current Bill (most recent bill due).
	 SCHSEQ  Scheduled Internal Bill Sequence Number NODE: 58  PIECE: 24
	*/

	new TAMT
	set TAMT=""

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	if ln.schseq>0 do {
		if 'Db.isDefined("LNBIL1","CID,ln.schseq") quit
		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,ln.schseq")
		set TAMT=+lnbil1.casd
		}

	quit TAMT


OBO(CID)
	/*
	 Oldest Bill Outstanding

	 Calculate the Oldest bill outstanding.
	 OSEQ    Internal Bill Oldest Unsatisfied Seq Nbr
	*/

	new TAMT

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	if ln.oseq'>ln.bseq do {
		if 'Db.isDefined("LNBIL1","CID,ln.oseq") quit
		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,ln.oseq")
		set TAMT=+lnbil1.casd
		}

	quit $G(TAMT)


EBL(CID)
	/*
	 Each Bill

	 Return separate amounts for each outstanding bill.
	 TAMT takes the format AMT1|AMT2...
	*/

	new TAMT
	set TAMT=""

	if 'Db.isDefined("LN","CID") quit ""
	type RecordLN ln=Db.getRecord("LN","CID")

	type ResultSet rs1=Db.select("CASD","LNBIL1","CID=:CID and CASD > 0")
	if 'rs1.isEmpty() while rs1.next() do {
		set TAMT=TAMT_rs1.getCol(1)_"|"
		}

	// strip off final "|"
	quit $E(TAMT,1,$L(TAMT)-1)


CUSTOM
	/*
	  Custom section for Amount Type Option 99.
 
	  This section can be customized by copying EFTOPT to ZEFTOPT.
	*/
 
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60026^67961^Irina Kin^7052"	// Signature - LTD^TIME^USER^SIZE
