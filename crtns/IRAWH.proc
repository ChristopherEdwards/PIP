public IRAWH(RecordDEP dep,
	     RecordTTX ttx)

	/*
	   DESC:  IRA Distribution Withholding
	   CALLED BY:  ^DEPAES,^DEPDBS,^IRA
	    
	--- Revision History --------------------------------------------------

	07/31/06 - KELLYP - CR 22048
		   Modified WHT3 section to eliminate PRECEDENCE warning.

	07/01/06 - TITOVE - CR 22057
		   Modified CLOSE, RPACRT and RPACRTS to follow new logic of
		   setting up executable string. Removed old revision history.
		   Retrofitted the following fix from V6.4:
		   
		   04/22/03 - BECKERJ - CR 3623
		   Modified code in section CLOSE to set DWA & DSWA equal
		   to $$WHT0^IRAWH when WHCALC or SWHCALC are null. In PFW, 
		   the default closeout amount is calculated before the 
		   distribution code is entered so we need to assume there 
		   is no withholding when WHCALC & SWCHALC are not set.		   

	02/13/03 - DHANALAKSHMI R - 19509
		   Modified the section WHT0 by adding two parameters dep and
		   iratype to avoid the error during the dynamic call from the 
		   section RPACRTS.
		   Modified the scope of the procedure to public.

	*/

	type public Boolean CRT, IRAEXM
	type public Number DWA, DSWA, INT, PEN, PRIN
	type public String ETC, TAMT, TSO

	if 'IRAEXM.get() ! ttx.itc6 ! ttx.itc12 do { quit	
		set DWA = 0		
		set DSWA = 0
		}
	
	type RecordTRN trn = Db.getRecord("TRN", "ETC = :ttx.etc")
	
	if 'TSO.exists() set TSO = ttx.tso

	// Close Account and Prohibit Further Processing flag	
	if trn.pcf.extract(5) do { 
		type Number SVTAMT = TAMT, TAMT 
		if 'CRT.exists(), TSO.get().isLike("%IRADIS#1%") set TAMT = PRIN + INT - PEN
		else  set TAMT = $$CLOSAMT1^DEPDBS(.dep, .ttx)		
		}
		
	do CLOSE(.dep)

	quit	


public CLOSE(RecordDEP dep)
	
	type public Boolean STTAX
	type public Number ACN, DWA, DSWA, IRA, RSPSEQ
	type public String WHCALC, SWHCALC

	do INIT(.dep)

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE", "ACN = :ACN, RPASEQ = :RSPSEQ")
	
	if 'iratype.rspwind do { quit
		if 'STTAX.get() set DWA=0
		else  set DSWA=0
		}

	// RPA Type
	set IRA=dep.ira   

	// Regular withholding
	if 'STTAX.get() do { quit
	
		if 'WHCALC.length() set DWA=$$WHT0(.dep, .iratype) quit
		
		if 'WHCALC.isLike("%(%") set WHCALC="S DWA="_WHCALC_"(.dep,.iratype)"
		
		#ACCEPT DATE=12/08/03;PGM=John Carroll;CR=7239
		xecute WHCALC
		}

	// State withholding
	if 'SWHCALC.length() set DSWA=$$WHT0(.dep,.iratype) quit
	
	if 'SWHCALC.isLike("%(%") set SWHCALC="S DSWA="_SWHCALC_"(.dep,.iratype)"

	#ACCEPT DATE=12/08/03;PGM=John Carroll;CR=7239	
	xecute SWHCALC

	quit 
	

WHT0(RecordDEP dep,
     RecordIRATYPE iratype)	
     
	// No withholding

	quit 0
	

WHT1(RecordDEP dep,
     RecordIRATYPE iratype)
     
	// 100% withholding base
	
	type public Number DWA, DSWA, TAMT

	// Calculate Federal Withholding Amount
	if 'STTAX.get() do { quit DWA
	
		set DWA=$$CALC(.dep, TAMT.get())
		
		do DWA1(.dep, .iratype)
		}

	// Calculate State Withholding Amount
	set DSWA=$$CALC(.dep, TAMT.get())
	
	do DWA1(.dep, .iratype)		

	quit DSWA


WHT2(RecordDEP dep,
     RecordIRATYPE iratype)
     
	// Special W/H Provisions for Annuity Pmt (Canadian Regs)

	type Boolean WHT2 = 1
	
	quit $$WHT3(.dep, .iratype)
	

WHT3(RecordDEP dep,
     RecordIRATYPE iratype)
     
	// Special W/H Provisions for Manual Distribution (Canadian Regs)

	/*
	Variables:
	A  = IRA plan info ([IRATYPE] file)
	A1 = MADAMT - MAD Current Year
		A1 should never be less than zero.
	A2 = Amount computed to determine MADAMT for
		withholding.  For example:
		If there is a periodic amount then
		A2 = that amount.  If no periodic amt
		but a dist freq. then its
		MADAMT / annual Factor.
	
		A2 is then used against A1 to determine
		which is less.  The lessor of the two
		is then subtracted from TAMT (tran amt)
		which is used to calculate withholding.
	  -----------------------------------------------------------------------
	*/

	// I RRIF and plan date is within current year use 100% of base

	
	new MADAMT,MADAVL,MADCY,NR,TYP

	/*
	The following 5 lines were added to meet regulatory requirements that
	withholding from non-residents in the RRIf plan be based on 100% of
	the distribution amount. 
	*/
	
	if 'RSPWIND.exists() set RSPWIND=iratype.rspwind
	
	// RPA Type
	set IRA=dep.ira         
	
	// NRes Alien Indicator
	set NR=dep.nr                        

	if RSPWIND=1,IRA=6,NR=1 quit $$WHT1(.dep,.iratype)
	if RSPWIND=1,IRA=7,NR=1 quit $$WHT1(.dep,.iratype)

	set TYP=iratype.iratyp
	
	if (TYP=6)!(TYP=7) set A=0 do { quit:'A $$WHT1(.dep,.iratype)
	
		if (iratype.pldte)<($$BOTY^SCADAT(%SystemDate,1)) set A=1
		
		if (iratype.pldte)>($$EOTY^SCADAT(%SystemDate,1)) set A=1
		}
	
	// otherwise use amount of TAMT that exceeds MAD portion
	type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RSPSEQ,TAXYR=:CYR",1)

	set MADAMT=ira.madamt
	set MADCY=ira.madcy

	// MAD amount less paid curr yr
	set A1=MADAMT-MADCY set:A1<0 A1=0    

	new ER,RM
	set ER=0
	
	// Error from ^UFRE
	if $G(WHT2) do { quit:ER 0        
		set A2=""
		if $D(TSO)#10 do { quit:A2'="" 
			new UTSO
			do OUT^UTSO(.UTSO,TSO)
			if $D(UTSO("MAD")) set A2=UTSO("MAD")

			}
		// MADAMT field
		set A2=MADAMT                  

		set MADAVL=A2-MADCY

		// Find annual factor (AF)
		set FRE=iratype.autfre 
		if '$L(FRE) quit 
		set NJD=$$NJD^UFRE(%SystemDate,FRE) quit:(ER!(NJD=-1))
 
		// periodic annuity MAD (opt 2)
		if $G(AF) set A2=A2/AF-$G(MADPSAT) 
	
		// end of NJD taxyr
		set NYR=$$YEAR^SCADAT(($$EOTY^SCADAT(NJD,1)),1)  
	
		// if plan date is not within current tax year
		if CYR'=NYR set A2=MADAVL
		if A2>MADAVL set A2=MADAVL
		if A2<0 set A2=0
		}
	
	// TAMT (opt 3)
	if '$G(WHT2) set A2=$G(TAMT) 

	// MAD portion is lesser of the 2         
	set M=A1 
	if A2<M set M=A2            
	set SAMT=$G(TAMT) new TAMT
	set TAMT=SAMT-M
	if TAMT'>0 quit 0
	
	quit $$WHT1(.dep,.iratype)


CALC(RecordDEP dep,
     Number AMT)

	/*

	INPUTS:
		. WP	W/H Percentage		/TYP=N/REQ
		. WS	W/H schedule		/TYP=T/NOREQ
		. TSO	[TTX]TSO		/TYP=T/NOREQ
	
	RETURNS:
		. $$	Withholding amount	/TYP=N
	  ----------------------------------------------------------------------
	
	*/

	new A,A1,A2,CLOSE,MYAMT,RPANET,TRNPCF,W,WP1

	if $G(TSO)'="" do {
		do OUT^UTSO(.UTSO,TSO)
		}

	// WS - [IRATYPE]RSPWSCH - withholding schedule

	if $G(STTAX) set WP=SWP,WS=SWS

	if $G(WS)'="" do {
		new MYAMT
		set MYAMT=AMT
		if $G(UTSO("TOTDIS")) set MYAMT=UTSO("TOTDIS")
		
		type ResultSet rs=Db.select("PCT","UTBLRSPWSCH","WSCH=:WS AND KEY NOT < :MYAMT")
		
		// withholding % from schedule
		if rs.next() set WP1=rs.getCol(1)
		}

	// needed for routine ^IRA
	set AMTWA=AMT                
	
	// RPA Net Distributions
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set RPANET=cuvar.rpanet
	
	if ETC.get()'="" do {
		type RecordTRN trn=Db.getRecord("TRN","ETC")
		// Close out transaction
		set CLOSE=$E(trn.pcf,5)	
		}

	// Closeout already calculated
	if '$G(STTAX) do {
		if $D(UTSO("RPAWH")) set A=UTSO("RPAWH")       
		else  do CALC1(WA)
		}
	else  do {
		if $D(UTSO("RPASWH")) set A=UTSO("RPASWH")
		else  do CALC1(SWA)
		}
	
	if A<0 set A=0

	quit $$^SCARND(A,0,dep.cid)
	
CALC1(Number WAMT)	// Calculate amount according to withholding type

	// If RPA Net Distributions is "N" and not an IRA interest distributiontion
	if 'RPANET,'$D(INTDIS),'$G(CLOSE) do {
		if $G(WP) set A1=(AMT/(1-(WP/100)))-AMT
		if $G(WP1) set A2=(AMT/(1-(WP1/100)))-AMT
		set A=$G(A1)+$G(A2)+WAMT
		}
	else  set A=(AMT*(WP/100))+(AMT*($G(WP1)/100))+WAMT

	quit

INIT(RecordDEP dep)	// Initialize variables
	

	if 'CYR.exists() set CYR=$$YEAR^SCADAT(($$EOTY^SCADAT(%SystemDate,1)),1)
	
	// Retirement Plan Account Sequence Number
	set RSPSEQ=dep.rpaseq          

	// Federal Withholding parameters
	set WHCALC=$G(WHCALC)
	set (WC,WS,WA,WP)=""
	
	// State Withholding parameters
	set SWHCALC=$G(SWHCALC)
	set (SWC,SWS,SWA,SWP)=""

	// find w/hold parameters (%age,amt,sch)
	do WPAR^DEPBW(.dep)

 	quit 


DWA1(RecordDEP dep,
     RecordIRATYPE iratype)
	
	new ANTCHK,ANTCHK2,DEPIRA,QUIT,RPASEQ,X,XCID,ZAMT,ZCID

	set ANTCHK=iratype.antchk
	set ANTCHK2=ANTCHK

	if 'ANTCHK do UPD quit

	if '$G(STTAX) set ZAMT=dep.bal-TAMT-DWA
	else  set ZAMT=dep.bal-TAMT-DSWA	
	if ZAMT'<ANTCHK do UPD quit

	set ZAMT=ZAMT+dep.posacr	
	if '$G(STTAX) set ZAMT=$$^SCARND(ZAMT-(ZAMT/(1-(WP/100))),0,dep.cid)) 
	else  set ZAMT=$$^SCARND(ZAMT-(ZAMT/(1-(SWP/100))),0,dep.cid))
	if ZAMT'<ANTCHK do UPD quit

	set ANTCHK=ANTCHK-ZAMT
	
	set QUIT=0
	set ZCID=dep.cid
	set DEPIRA=dep.ira
	set RPASEQ=dep.rpaseq

	type ResultSet rs=Db.select("CID,BAL,POSACR","RELCIF,DEP","RELCIF.ACN=:ACN AND RELCIF.CID NOT=:ZCID AND DEP.ACN=RELCIF.ACN AND DEP.CID=RELCIF.CID AND DEP.IRA=:DEPIRA AND DEP.RPASEQ=:RPASEQ")

	// Outstanding retirement plan account check for ~p1
	if rs.isEmpty() do Runtime.setErrMSG("DEP",2120,ANTCHK2) do END quit

	while rs.next() do { quit:QUIT 
		
		set XCID=rs.getCol(1)
		set BAL=rs.getCol(2)
		set POSACR=rs.getCol(3)

		if '$G(STTAX) set ZAMT=$$^SCARND(BAL+POSACR-((ANTCHK/(1-(WP/100)))-ANTCHK+WA),0,dep.cid)
		else  set ZAMT=$$^SCARND(BAL+POSACR-((ANTCHK/(1-(SWP/100)))-ANTCHK+SWA),0,dep.cid)
		set ANTCHK=ANTCHK-ZAMT
		
		if ANTCHK>0 quit
		
		set QUIT=1
		}

	if QUIT do UPD

	quit

	
UPD	//

	do END

	quit


END	//	
	kill WA,WP,Y,Y1,Y2,WS,WP1

	quit 
	

public AES(RecordDEP dep)	// Entry point from Anticipated Earnings Status - (^DEPAES)

	do INIT(.dep)

	if '$G(STTAX) set DWA=$$CALC(.dep,PRIN) 
	else  set DSWA=$$CALC(.dep,PRIN)
	quit 
	

public RPACRT(RecordDEP dep,		// Deposit account
	      Number RPADIS,		// RPADIS Distribution reason code
	      Number TAMT)		// Gross withdrawal amount
	      
	/*	
	   Return distribution federal withholding amount

	   Need to declare IRAP locally, because it's being updated in UPD^IRAWH.
	   The withholding amount is being set to 0. When this gets processed
	   on the host, the withdrawal amount is then 0.
	
	*/

	type Boolean STTAX
	type Number ACN, DWA, IRAP, RSPSEQ
	type String WHCALC
	
	set STTAX = 0
	
	set ACN = dep.acn

	do INIT(.dep)
	
	type RecordUTBLIRADIS utblirad = Db.getRecord("UTBLIRADIS", "KEY = :RPADIS", 1)

	// Invalid table entry
	if 'utblirad.getMode() do Runtime.setErrMSG("UTBLIRADIS", 2408) quit ""

	type RecordIRATYPE iratype = Db.getRecord("IRATYPE", "ACN = :ACN, RPASEQ = :RSPSEQ")	

	set WHCALC = utblirad.wh
	
	if WHCALC.isNull() quit $$WHT1(.dep, .iratype)
	
	if 'WHCALC.isLike("%(%") set WHCALC = "S DWA="_WHCALC_"(.dep,.iratype)"

	#ACCEPT DATE=12/08/03;PGM=John Carroll;CR=7239	
	xecute WHCALC
	
	quit DWA
	

public RPACRTS(RecordDEP dep,		// Deposit account
	       Number RPADIS,		// RPADIS Distribution reason code
	       Number TAMT)		// Gross withdrawal amount
	      
	/*	
	   Return distribution state withholding amount

	   Need to declare IRAP locally, because it's being updated in UPD^IRAWH.
	   The withholding amount is being set to 0. When this gets processed
	   on the host, the withdrawal amount is then 0.
	
	*/
	
	type public Number DSWA, RSPSEQ

	type Boolean STTAX = 1
	type Number ACN, IRAP
	type String SWHCALC
 
	set ACN = dep.acn
 
	do INIT(.dep)
 
	type RecordUTBLIRADIS utblirad = Db.getRecord("UTBLIRADIS", "KEY = :RPADIS", 1)

	// Invalid table entry
	if 'utblirad.getMode() do Runtime.setErrMSG("UTBLIRADIS", 2408) quit ""
 
	type RecordIRATYPE iratype = Db.getRecord("IRATYPE", "ACN = :ACN, RPASEQ = :RSPSEQ")
 
	set SWHCALC = utblirad.wh
 
	if SWHCALC.isNull() quit $$WHT1(.dep, .iratype)
	
	if 'SWHCALC.isLike("%(%") set SWHCALC = "S DSWA="_SWHCALC_"(.dep,.iratype)"

	#ACCEPT DATE=12/08/03;PGM=John Carroll;CR=7239
	xecute SWHCALC
 
	quit DSWA

vSIG()	quit "60477^65447^Pat Kelly^11028"	// Signature - LTD^TIME^USER^SIZE
