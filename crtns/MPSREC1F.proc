MPSREC1F(RecordMPSREC1 mpsrec1, String vpar, Boolean vparNorm) // MPSREC1 - MPS Account File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = mpsrec1.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(mpsrec1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(mpsrec1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PROCDATE").exists()!vx("CRDTYP").exists()!vx("CO").exists()!vx("CRDNUM").exists()!vx("CID").exists()!vx("MODE").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("MPSREC1",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("MPSREC1","PROCDATE = :mpsrec1.procdate and CRDTYP = :mpsrec1.crdtyp and CO = :mpsrec1.co and CRDNUM = :mpsrec1.crdnum and CID = :mpsrec1.cid and MODE = :mpsrec1.mode") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PROCDATE
	type public String CRDTYP
	type public String CO
	type public String CRDNUM
	type public String CID
	type public String MODE

	type RecordMPSREC1 mpsrec1 = Db.getRecord("MPSREC1","PROCDATE=:PROCDATE,CRDTYP=:CRDTYP,CO=:CO,CRDNUM=:CRDNUM,CID=:CID,MODE=:MODE")
	if (%ProcessMode = 2) do {
		do mpsrec1.setMode(2)

		do MPSREC1F(mpsrec1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordMPSREC1 mpsrec1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("MPSREC1","PROCDATE = :mpsrec1.procdate and CRDTYP = :mpsrec1.crdtyp and CO = :mpsrec1.co and CRDNUM = :mpsrec1.crdnum and CID = :mpsrec1.cid and MODE = :mpsrec1.mode") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(mpsrec1))  S ^MPSREC1(vobj(mpsrec1,-3),vobj(mpsrec1,-4),vobj(mpsrec1,-5),vobj(mpsrec1,-6),vobj(mpsrec1,-7),vobj(mpsrec1,-8))=vobj(mpsrec1)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordMPSREC1 mpsrec1


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^MPSREC1(vobj(mpsrec1,-3),vobj(mpsrec1,-4),vobj(mpsrec1,-5),vobj(mpsrec1,-6),vobj(mpsrec1,-7),vobj(mpsrec1,-8)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordMPSREC1 mpsrec1

	// Type local variables for access keys for defaults
	type public String PROCDATE
	type public String CRDTYP
	type public String CO
	type public String CRDNUM
	type public String CID
	type public String MODE

	if mpsrec1.primcrd.isNull() set mpsrec1.primcrd = 0    // primcrd
	quit


vreqn // Validate required data items

	type public RecordMPSREC1 mpsrec1

	if mpsrec1.primcrd.isNull() do vreqerr("PRIMCRD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordMPSREC1 mpsrec1

	if mpsrec1.procdate.isNull() do vreqerr("PROCDATE") quit
	if mpsrec1.crdtyp.isNull() do vreqerr("CRDTYP") quit
	if mpsrec1.co.isNull() do vreqerr("CO") quit
	if mpsrec1.crdnum.isNull() do vreqerr("CRDNUM") quit
	if mpsrec1.cid.isNull() do vreqerr("CID") quit
	if mpsrec1.mode.isNull() do vreqerr("MODE") quit

		if vx("PRIMCRD").exists(),mpsrec1.primcrd.isNull() do vreqerr("PRIMCRD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MPSREC1","MSG",1767,"MPSREC1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordMPSREC1 mpsrec1
	if 'mpsrec1.cid.isNull() set vfkey("^ACN("_""""_mpsrec1.cid_""""_","_50_")")="MPSREC1(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordMPSREC1 mpsrec1
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":mpsrec1.cid") set vERRMSG = $$^MSG(8563,"MPSREC1(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordMPSREC1 mpsrec1

	set X = mpsrec1.procdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROCDATE", vRM) quit
	if mpsrec1.crdtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CRDTYP", vRM) quit
	set X = mpsrec1.co if 'X.isNull(),'Db.isDefined("UTBLCO","X") set vRM = $$^MSG(1485,X) do vdderr("CO", vRM) quit
	set X = mpsrec1.crdnum if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("CRDNUM", vRM) quit
	set X = mpsrec1.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = mpsrec1.mode if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MODE", vRM) quit
	if mpsrec1.grp.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GRP", vRM) quit
	if '("01"[mpsrec1.PRIMCRD) set vRM=$$^MSG(742,"L") do vdderr("PRIMCRD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MPSREC1","MSG",979,"MPSREC1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordMPSREC1 mpsrec1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("PROCDATE").exists() set vux("PROCDATE") = vx("PROCDATE")
	if vx("CRDTYP").exists() set vux("CRDTYP") = vx("CRDTYP")
	if vx("CO").exists() set vux("CO") = vx("CO")
	if vx("CRDNUM").exists() set vux("CRDNUM") = vx("CRDNUM")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("MODE").exists() set vux("MODE") = vx("MODE")
	do vkey(1) set voldkey = mpsrec1.procdate_","_mpsrec1.crdtyp_","_mpsrec1.co_","_mpsrec1.crdnum_","_mpsrec1.cid_","_mpsrec1.mode // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = mpsrec1.procdate_","_mpsrec1.crdtyp_","_mpsrec1.co_","_mpsrec1.crdnum_","_mpsrec1.cid_","_mpsrec1.mode // Copy new keys into object
	type RecordMPSREC1 vnewrec = mpsrec1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("MPSREC1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordMPSREC1 mpsrec1

	if vux("PROCDATE").exists() set mpsrec1.procdate = vux("PROCDATE").piece("|",i)
	if vux("CRDTYP").exists() set mpsrec1.crdtyp = vux("CRDTYP").piece("|",i)
	if vux("CO").exists() set mpsrec1.co = vux("CO").piece("|",i)
	if vux("CRDNUM").exists() set mpsrec1.crdnum = vux("CRDNUM").piece("|",i)
	if vux("CID").exists() set mpsrec1.cid = vux("CID").piece("|",i)
	if vux("MODE").exists() set mpsrec1.mode = vux("MODE").piece("|",i)
	quit
