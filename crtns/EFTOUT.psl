EFTOUT(RecordEFTOUT eftout, String vpar, Boolean vparNorm) // EFTOUT - EFT Outgoing Clearing Items File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (33)             03/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = eftout.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(eftout,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(eftout,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJD").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EFTOUT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EFTOUT","TJD = :eftout.tjd and TSEQ = :eftout.tseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJD
	type public String TSEQ

	type RecordEFTOUT eftout = Db.getRecord("EFTOUT","TJD=:TJD,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do eftout.setMode(2)

		do EFTOUT(eftout,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEFTOUT eftout

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EFTOUT","TJD = :eftout.tjd and TSEQ = :eftout.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(eftout)) S ^EFTOUT(vobj(eftout,-3),vobj(eftout,-4))=vobj(eftout)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEFTOUT eftout


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^EFTOUT(vobj(eftout,-3),vobj(eftout,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordEFTOUT eftout

	if eftout.cdt.isNull() do vreqerr("CDT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEFTOUT eftout

	if eftout.tjd.isNull() do vreqerr("TJD") quit
	if eftout.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("CDT").exists(),eftout.cdt.isNull() do vreqerr("CDT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFTOUT","MSG",1767,"EFTOUT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEFTOUT eftout

	set X = eftout.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = eftout.tseq if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	if eftout.bcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BCRCD", vRM) quit
	set X = eftout.brcde if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCDE", vRM) quit
	set X = eftout.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTOUT.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = eftout.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
	set X = eftout.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	set X = eftout.chktyp if 'X.isNull(),'Db.isDefined("STBLCHKTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CHKTYP", vRM) quit
	set X = eftout.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = eftout.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
	set X = eftout.custcd if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CUSTCD", vRM) quit
	set X = eftout.dir if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTOUT.DIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = eftout.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = eftout.endbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTOUT.ENDBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if eftout.etc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ETC", vRM) quit
	set X = eftout.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
	if eftout.itc.length()>5 set vRM = $$^MSG(1076,5) do vdderr("ITC", vRM) quit
	if eftout.lnerc.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNERC", vRM) quit
	if eftout.msd.length()>120 set vRM = $$^MSG(1076,120) do vdderr("MSD", vRM) quit
	set X = eftout.mult if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MULT", vRM) quit
	set X = eftout.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTOUT.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = eftout.rty if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RTY", vRM) quit
	set X = eftout.spr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
	set X = eftout.tamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTOUT.TAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if eftout.tcmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCMT", vRM) quit
	set X = eftout.tim if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIM", vRM) quit
	if eftout.tlo.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TLO", vRM) quit
	set X = eftout.trc if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("TRC", vRM) quit
	set X = eftout.tresref if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("TRESREF", vRM) quit
	set X = eftout.tsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTOUT.TSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if eftout.tso.length()>300 set vRM = $$^MSG(1076,300) do vdderr("TSO", vRM) quit
	if eftout.uidt.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDT", vRM) quit
	set X = eftout.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFTOUT","MSG",979,"EFTOUT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordEFTOUT eftout

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = eftout.tjd_","_eftout.tseq    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = eftout.tjd_","_eftout.tseq    // Copy new keys into object
	type RecordEFTOUT vnewrec = eftout.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EFTOUT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordEFTOUT eftout

	if vux("TJD").exists() set eftout.tjd = vux("TJD").piece("|",i)
	if vux("TSEQ").exists() set eftout.tseq = vux("TSEQ").piece("|",i)
	quit
