LNADVFL(RecordLNADV lnadv, String vpar, Boolean vparNorm) // LNADV - Advance Approval File Lower Level 102 Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:17 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              11/22/2003
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnadv.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnadv,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnadv,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnadv.cid
	type String ADV = lnadv.adv

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ADV").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNADV",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNADV","CID = :lnadv.cid and ADV = :lnadv.adv") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ADV

	type RecordLNADV lnadv = Db.getRecord("LNADV","CID=:CID,ADV=:ADV")
	if (%ProcessMode = 2) do {
		do lnadv.setMode(2)

		do LNADVFL(lnadv,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNADV lnadv

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNADV","CID = :lnadv.cid and ADV = :lnadv.adv") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnadv)) S ^ACN(vobj(lnadv,-3),102,vobj(lnadv,-4))=vobj(lnadv)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnadv)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNADV lnadv

	if vpar["/JOURNAL/" do VJOURNAL(.lnadv)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(lnadv,-3),102,vobj(lnadv,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNADV lnadv

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNADV lnadv

	if lnadv.cid.isNull() do vreqerr("CID") quit
	if lnadv.adv.isNull() do vreqerr("ADV") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNADV","MSG",1767,"LNADV."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNADV lnadv
	if vx("").order().isNull() do AUDIT^UCUTILN(lnadv,.vx(),1,"|") quit
	if vx("AMT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnadv,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After insert trigger

	type public RecordLNADV lnadv
	/*
	---- Revision History--------------------------------------------------------

	
	05/24/00 - MOTENJ - 40196
																			Changed the condition checking syntax of %ProcessMode to the
																			correct form(if %ProcessMode'=).

	
	09/14/99 - CARROLJ - 31126
		   Convert to PSL.

	*/	

	// Update LN information based on new records
	if %ProcessMode'=2 do {
		new DATA,XAMT,XAPLD,XAPTAMT,XCID
		set XAMT=lnadv.amt
		set XCID=lnadv.cid
		set XAPLD=lnadv.advdt
		set DATA=Db.getOneRow("APTAMT","LN","XCID")
		set XAPTAMT=DATA+XAMT
		do Db.update("LN","CRLMT=:XAPTAMT,AMTREQ=:XAPTAMT,APN=APN+1,APLD=:XAPLD,APTAMT=:XAPTAMT","CID=:XCID")
		}
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before insert trigger

	type public RecordLNADV lnadv
	/*
	---- Revision History --------------------------------------------------------
	
	09/14/99 - CARROLLJ - 31126
		   Conver to PSL.

	*/

	
	// Default officer from LN
	if lnadv.off="" do {
		new off,XCID
		set XCID=lnadv.cid
		set lnadv.off=Db.getOneRow("OFF","LN","XCID")
		}
	quit
	

vbu1 // Trigger BEFORE_UPDATE - Before Update for Student Loans

	type public RecordLNADV lnadv
	do lnadv.setAuditFlag(1)
	/*
	---- Revision History--------------------------------------------------------
	
	09/14/99 - CARROLLJ - 31126
		   Convert to PSL.

	
	*/


	// Update LN information based on new records
	new DATA,XAPLD,XAPTAMT,XCID
	set XCID=lnadv.cid
	set XAPLD=lnadv.advdt
	set DATA=Db.getOneRow("APTAMT","LN","XCID")
	set XAPTAMT=DATA-lnadv.amt.oldVal+lnadv.amt
	do Db.update("LN","CRLMT=:XAPTAMT,APLD=:XAPLD,APTAMT=:XAPTAMT,AMTREQ=:XAPTAMT","CID=:XCID")
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNADV lnadv

	set X = lnadv.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnadv.adv if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ADV", vRM) quit
	set X = lnadv.advdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ADVDT", vRM) quit
	set X = lnadv.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNADV.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnadv.cmt.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CMT", vRM) quit
	set X = lnadv.off if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("OFF", vRM) quit
	set X = lnadv.sar if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNADV.SAR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNADV","MSG",979,"LNADV."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNADV lnadv)	//LNADV Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.lnadv)	// Mode=I Tran=B EFD=N Seq=1 JRNID=HIST_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.lnadv)	// Mode=I Tran=O EFD=N Seq=1 JRNID=HIST_U
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.lnadv)	// Mode=U Tran=B EFD=N Seq=1 JRNID=HIST_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.lnadv)	// Mode=U Tran=O EFD=N Seq=1 JRNID=HIST_U
				}
			}
		}

	quit


vj1(RecordLNADV lnadv)	// HIST_U  Table HIST  Student Loan Advance History Update

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnadv.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.ident=%IDENT
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNADV lnadv

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ADV").exists() set vux("ADV") = vx("ADV")
	do vkey(1) set voldkey = lnadv.cid_","_lnadv.adv       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnadv.cid_","_lnadv.adv       // Copy new keys into object
	type RecordLNADV vnewrec = lnadv.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNADV",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNADV lnadv

	if vux("CID").exists() set lnadv.cid = vux("CID").piece("|",i)
	if vux("ADV").exists() set lnadv.adv = vux("ADV").piece("|",i)
	quit
