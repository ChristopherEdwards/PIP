SCATBLFL(RecordSCATBL scatbl, String vpar, Boolean vparNorm) // SCATBL - System Function Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (18)             03/08/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = scatbl.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(scatbl,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(scatbl,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("FN").exists() do vkchged quit                  // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SCATBL",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SCATBL","FN = :scatbl.fn")        // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String FN

	type RecordSCATBL scatbl = Db.getRecord("SCATBL","FN=:FN")
	if (%ProcessMode = 2) do {
		do scatbl.setMode(2)

		do SCATBLFL(scatbl,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSCATBL scatbl

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SCATBL","FN = :scatbl.fn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(scatbl,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(scatbl,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(scatbl)) S ^SCATBL(1,vobj(scatbl,-3))=vobj(scatbl)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSCATBL scatbl

	if vpar'["/NOLOG/" do ^DBSLOGIT(scatbl,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SCATBL(1,vobj(scatbl,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSCATBL scatbl

	// Type local variables for access keys for defaults
	type public String FN

	if scatbl.%sn.isNull() set scatbl.%sn = "PBS"          // %sn
	if scatbl.bpsflg.isNull() set scatbl.bpsflg = 0        // bpsflg
	if scatbl.break.isNull() set scatbl.break = 0          // break
	if scatbl.ddp.isNull() set scatbl.ddp = 0              // ddp
	if scatbl.nohost.isNull() set scatbl.nohost = 0        // nohost
	if scatbl.norepost.isNull() set scatbl.norepost = 0    // norepost
	if scatbl.queue.isNull() set scatbl.queue = 0          // queue
	if scatbl.restore.isNull() set scatbl.restore = 0      // restore
	if scatbl.salon.isNull() set scatbl.salon = 0          // salon
	quit


vreqn // Validate required data items

	type public RecordSCATBL scatbl

	if scatbl.bpsflg.isNull() do vreqerr("BPSFLG") quit
	if scatbl.break.isNull() do vreqerr("BREAK") quit
	if scatbl.ddp.isNull() do vreqerr("DDP") quit
	if scatbl.nohost.isNull() do vreqerr("NOHOST") quit
	if scatbl.norepost.isNull() do vreqerr("NOREPOST") quit
	if scatbl.queue.isNull() do vreqerr("QUEUE") quit
	if scatbl.restore.isNull() do vreqerr("RESTORE") quit
	if scatbl.salon.isNull() do vreqerr("SALON") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSCATBL scatbl

	if scatbl.fn.isNull() do vreqerr("FN") quit

		if vx("BPSFLG").exists(),scatbl.bpsflg.isNull() do vreqerr("BPSFLG") quit
		if vx("BREAK").exists(),scatbl.break.isNull() do vreqerr("BREAK") quit
		if vx("DDP").exists(),scatbl.ddp.isNull() do vreqerr("DDP") quit
		if vx("NOHOST").exists(),scatbl.nohost.isNull() do vreqerr("NOHOST") quit
		if vx("NOREPOST").exists(),scatbl.norepost.isNull() do vreqerr("NOREPOST") quit
		if vx("QUEUE").exists(),scatbl.queue.isNull() do vreqerr("QUEUE") quit
		if vx("RESTORE").exists(),scatbl.restore.isNull() do vreqerr("RESTORE") quit
		if vx("SALON").exists(),scatbl.salon.isNull() do vreqerr("SALON") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCATBL","MSG",1767,"SCATBL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSCATBL scatbl

	if scatbl.fn.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FN", vRM) quit
	if scatbl.%libs.length()>20 set vRM = $$^MSG(1076,20) do vdderr("%LIBS", vRM) quit
	set X = scatbl.%sn if 'X.isNull(),'Db.isDefined("SCASYS","X") set vRM = $$^MSG(1485,X) do vdderr("%SN", vRM) quit
	if '("01"[scatbl.BPSFLG) set vRM=$$^MSG(742,"L") do vdderr("BPSFLG", vRM) quit
	if '("01"[scatbl.BREAK) set vRM=$$^MSG(742,"L") do vdderr("BREAK", vRM) quit
	if '("01"[scatbl.DDP) set vRM=$$^MSG(742,"L") do vdderr("DDP", vRM) quit
	if scatbl.desc.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DESC", vRM) quit
	if '("01"[scatbl.NOHOST) set vRM=$$^MSG(742,"L") do vdderr("NOHOST", vRM) quit
	if '("01"[scatbl.NOREPOST) set vRM=$$^MSG(742,"L") do vdderr("NOREPOST", vRM) quit
	if scatbl.pgm.length()>200 set vRM = $$^MSG(1076,200) do vdderr("PGM", vRM) quit
	if scatbl.pop.length()>255 set vRM = $$^MSG(1076,255) do vdderr("POP", vRM) quit
	if scatbl.prp.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PRP", vRM) quit
	if '("01"[scatbl.QUEUE) set vRM=$$^MSG(742,"L") do vdderr("QUEUE", vRM) quit
	if '("01"[scatbl.RESTORE) set vRM=$$^MSG(742,"L") do vdderr("RESTORE", vRM) quit
	if '("01"[scatbl.SALON) set vRM=$$^MSG(742,"L") do vdderr("SALON", vRM) quit
	if scatbl.tfk.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TFK", vRM) quit
	set X = scatbl.timbeg if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIMBEG", vRM) quit
	set X = scatbl.timend if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIMEND", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCATBL","MSG",979,"SCATBL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSCATBL scatbl

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("FN")
	set voldkey = vux.piece("|",1),vobj(scatbl,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(scatbl,-3) = vnewkey // Copy new keys into object
	type RecordSCATBL vnewrec = scatbl.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SCATBL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(scatbl,-3) = vux.piece("|",1)                 // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
