STOP1FL(RecordSTOP1 stop1, String vpar, Boolean vparNorm) // STOP1 - Customer Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             03/02/2005
	// Trigger Definition (3)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop1.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stop1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = stop1.acn
	type String SEQ = stop1.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP1",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP1","ACN = :stop1.acn and SEQ = :stop1.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String SEQ

	type RecordSTOP1 stop1 = Db.getRecord("STOP1","ACN=:ACN,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do stop1.setMode(2)

		do STOP1FL(stop1,vpar)
	}
	else  do VINDEX(stop1)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP1 stop1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP1","ACN = :stop1.acn and SEQ = :stop1.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop1.DP = %SystemDate
		if %O = 0  set stop1.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop1)) S ^STOP(1,vobj(stop1,-3),vobj(stop1,-4))=vobj(stop1)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.stop1) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP1 stop1

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.stop1)                    // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^STOP(1,vobj(stop1,-3),vobj(stop1,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSTOP1 stop1

	// Type local variables for access keys for defaults
	type public String ACN
	type public String SEQ

	type public String TJD
	if stop1.dp.isNull() set stop1.dp = TJD                // dp
	if stop1.stcon.isNull() set stop1.stcon = 0            // stcon
	if stop1.time.isNull() set stop1.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP1 stop1

	if stop1.act.isNull() do vreqerr("ACT") quit
	if stop1.dp.isNull() do vreqerr("DP") quit
	if stop1.stcon.isNull() do vreqerr("STCON") quit
	if stop1.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP1 stop1

	if stop1.acn.isNull() do vreqerr("ACN") quit
	if stop1.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACT").exists(),stop1.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop1.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop1.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop1.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP1","MSG",1767,"STOP1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSTOP1 stop1
	if 'stop1.acn.isNull() set vfkey("^CIF("_""""_stop1.acn_""""_","_1_")")="STOP1(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSTOP1 stop1
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":stop1.acn") set vERRMSG = $$^MSG(8563,"STOP1(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSTOP1 stop1
	if vx("").order().isNull() do AUDIT^UCUTILN(stop1,.vx(),1,"|") quit
	if vx("EXP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(stop1,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT_UPD - After insert update trigger

	do vau1

	quit

vau1 // Trigger AFTER_INSERT_UPD - After insert update trigger

	type public RecordSTOP1 stop1
	/*
	---------- Revision History ------------------------------------------
	
	05/24/00 - JARVISG - 39638
		   Modified to add FEECAT,FEETYP parameters to SRVSTP call.

	12/13/99 - JARVISG - 34535
		   Add Stop payment fee account and fee processing.	

	09/24/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	// Verify mode	
	if %ProcessMode=2 quit
	
	new cidseq,pm,msg
	new ACT,CID,CLS,CMT,DP,EXP,SRC,STCON,STPWHY,TIME,WHO
	

	// Stop payment - type - seq
	set msg=$S('%ProcessMode:$$^MSG(6701),%ProcessMode=1:$$^MSG(6702),%ProcessMode=3:$$^MSG(6700)) 

	//Sequence ~p1
	set msg=msg_"1 - "_$$^MSG(6742,stop1.seq)

	// Define host variables
	set ACN=stop1.acn 
	set DP=stop1.dp     
	set WHO=stop1.who 
	set EXP=stop1.exp 
	set ACT=stop1.act
	set TIME=stop1.time 
	set CMT=stop1.cmt
	set STCON=stop1.stcon 
	set STPWHY=stop1.stpwhy
	set FEECID1=stop1.feecid
	
	// Customer history
	do CIFHBLD^CIFFUNCS(msg)            

	if $G(FEECID1),%ProcessMode=0 do {  quit:ER	// Check for stop payment fees
		new values
		set values=Db.getOneRow("STAT,CLS","DEP","FEECID1")
		// Error if fee account is closed or not a deposit account.
		if $P(values,$C(9),1)=4 do Runtime.setErrMSG("STOP1",457,"FEECID1") quit:ER
		if $P(values,$C(9),2)'="D" do Runtime.setErrMSG("STOP1",803) quit:ER
		do ^SRVSTP(FEECID1,1,2,"STP")         // Assess type 1 stop fee
		}		

	// update cif FMLD
	do Db.update("CIF","FMLD=%SystemDate","ACN=:ACN","/NOJOURNAL")
	
	// Reference to point back to CIF number and sequence
	set SRC="1,"_ACN_","_stop1.seq
	
	// Copy CIF stops to linked deposit account (RELCIF)
	new rs,CLS
	set CLS="D"
	type ResultSet rs=Db.select("CID","RELCIF,ACN","ACN=:ACN AND CLS=:CLS AND RELCIF.CID=ACN.CID")
	
 	if rs.isEmpty() quit
	while rs.next() do { 
		if %ProcessMode=0 set CID=rs.getCol(1) do zinsert quit 
		if %ProcessMode=1 set CID=rs.getCol(1) do zupdate(.stop1) quit 
		}
	quit 


zinsert  // Create deposit account STOP2 record
	
	new SEQ
	do Db.insert("STOP2","CID,SEQ,ACT,DP,WHO,EXP,TIME,CMT,STCON,STPWHY,SRC",":CID,STOP2.NEXTVAL,:ACT,:DP,:WHO,:EXP,:TIME,:CMT,:STCON,:STPWHY,:SRC")
	set STP=Db.getOneRow("STP","DEP","CID")
	set $P(STP,"#",1)=$P(STP,"#",1)+1
	do Db.update("DEP","STP=:STP","CID=:CID","/NOJOURNAL")
	quit 
	
zupdate(RecordSTOP1 stop1) 

	// Locate original deposit account and then update it with STOP1 changes

	new XSEQ
	do zfind
	if XSEQ="" quit 

	//   Update STOP2 set column='val',... where ...
	type RecordSTOP2 stop2=Db.getRecord("STOP2","CID,SEQ")	
	if (stop1.act.oldVal'=stop1.act) set stop2.act=ACT 
	if (stop1.dp.oldVal'=stop1.dp) set stop2.dp=DP
	if (stop1.who.oldVal'=stop1.who) set stop2.who=WHO
	if (stop1.exp.oldVal'=stop1.exp) set stop2.exp=EXP
	if (stop1.time.oldVal'=stop1.time) set stop2.time=TIME
	if (stop1.cmt.oldVal'=stop1.cmt) set stop2.cmt=CMT
	if (stop1.stcon.oldVal'=stop1.stcon) set stop2.stcon=STCON
	if (stop1.stpwhy.oldVal'=stop1.stpwhy) set stop2.stpwhy=STPWHY
	// Do not allow changes to feecid field
	if (stop1.feecid.oldVal'=stop1.feecid) do Runtime.setErrMSG("STOP1",412,FEECID1) quit:ER
	do stop2.save()
	quit 


zfind  
	

	// Locate original STOP2 deposit account created by this CIF
	
	
	new rs 
	type ResultSet rs=Db.select("SEQ","STOP2","CID=:CID AND SRC=:SRC") 
	if rs.isEmpty() set XSEQ="" quit
	set XSEQ=rs.next(),XSEQ=rs.getCol(1)
	
	quit 

vbd1 // Trigger BEFORE_DELETE - Before Delete trigger

	type public RecordSTOP1 stop1
	/*
	---------- Revision History ------------------------------------------
	12/13/99 - JARVISG - 34535
		   Add stop payment fees.
		   Removed setting ACN after CIFFUNCS call for ARQ:31126

	10/20/98 - BECKERW - 30435
		   Added an SqlUpdate in zdelete to complete stop
		   removal process.
	
	*/

	new cidseq,msg,sql,v,x,CID,CLS,SRC
	
	// Stop payment - type - seq
	set msg=$S('%ProcessMode:$$^MSG(6701),%ProcessMode=1:$$^MSG(6702),%ProcessMode=3:$$^MSG(6700))  

	//Sequence ~p1
	set msg=msg_"1 - "_$$^MSG(6742,stop1.seq)

	// Define host variables
	set ACN=stop1.acn       

	// Customer history
	do CIFHBLD^CIFFUNCS(msg)
	
	
	// Remove Territories before deleting the stop
	do Db.delete("STOP1A","ACN=:ACN AND SEQ=:SEQ")
	
	// Reference to point back to CIF number and sequence
	set SRC="1,"_ACN_","_stop1.seq
	
	// Delete CIF stops from linked deposit account (RELCIF)
	new rs
	set CLS="D"
	type ResultSet rs=Db.select("CID","RELCIF,ACN","ACN=:ACN AND CLS=:CLS AND RELCIF.CID=ACN.CID")

	if rs.isEmpty() quit
	while rs.next() set CID=rs.getCol(1) do zdelete 
	quit 


zdelete
	

	new SEQ,STP,XSEQ,x
	do zfind
	if XSEQ="" quit 
	do Db.delete("STOP2","CID=:CID AND SEQ=:XSEQ")
	set STP=Db.getOneRow("STP","DEP","CID")	// CHANGE STOPCID TO CID
	set $P(STP,"#",1)=$P(STP,"#",1)-1
	do Db.update("DEP","STP=:STP","CID=:CID","/NOJOURNAL")
	quit 

vbu1 // Trigger BU_EXP - Before Update of Expiration Date

	type public RecordSTOP1 stop1
	do stop1.setAuditFlag(1)
	/* ---- Revision History ------------------------------------------------

	03/12/02 - BECKERJ - 49316
		   Add trigger to flag an error message when trying to change
		   the expiration date of a stop that has already expired.

				----------------------------------------------------------------------
	*/
 	// Cannot modify expiration date. Stop has already expired.
	if (stop1.exp.oldVal'>%SystemDate) do Runtime.setErrMSG("STOP1",5148)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP1 stop1

	set X = stop1.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = stop1.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop1.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	if stop1.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop1.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop1.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop1.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	if '("01"[stop1.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop1.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop1.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop1.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP1","MSG",979,"STOP1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordSTOP1 stop1) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EXP").exists() do vi1(.stop1)
	}
	do vi1(.stop1)

	quit
	

vi1(RecordSTOP1 stop1) // Maintain DAYEND index entries (Dayend Expiration Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = stop1.exp
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v4 = stop1.acn
	type String v6 = stop1.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^STOP(1,vobj(stop1,-3),vobj(stop1,-4)))#2,'$D(^DAYEND(v1,"STPEXP",1,v4," ",v6)) do vidxerr("DAYEND")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"STPEXP",1,v4," ",v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXP").exists() set v1=vx("EXP").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"STPEXP",1,v4," ",v6)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("STOP1")

	while ds.next() do {
		type RecordSTOP1 stop1=ds.getRecord("STOP1")
		if vlist.contains("VINDEX") do VINDEX(.stop1) quit
		if vlist.contains("DAYEND") do vi1(.stop1)
	}

	quit


public VIDXBLD1(RecordSTOP1 stop1, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.stop1) quit
	if vlist.contains("DAYEND") do vi1(.stop1)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("STOP1","MSG",1225,"STOP1."_di)

	quit


vkchged // Access key changed

	type public RecordSTOP1 stop1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = stop1.acn_","_stop1.seq       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop1.acn_","_stop1.seq       // Copy new keys into object
	type RecordSTOP1 vnewrec = stop1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP1 stop1

	if vux("ACN").exists() set stop1.acn = vux("ACN").piece("|",i)
	if vux("SEQ").exists() set stop1.seq = vux("SEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordSTOP1 stop1
	type public String vpar

	do Db.delete("STOP1A","ACN=:stop1.acn AND SEQ=:stop1.seq",vpar) // Cascade delete

	quit

VIDXPGM()	quit "STOP1FL"	// Location of index program

