RSPDEF(RecordUTBLRSPDEF utblrspdef, String vpar, Boolean vparNorm) // UTBLRSPDEF - Retirement/Savings Plan Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (37)             07/10/2007
	// Trigger Definition (1)                      06/06/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblrspdef.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblrspdef,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblrspdef,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String KEY = utblrspdef.key

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("KEY").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLRSPDEF",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLRSPDEF","KEY = :utblrspdef.key") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String KEY

	type RecordUTBLRSPDEF utblrspdef = Db.getRecord("UTBLRSPDEF","KEY=:KEY")
	if (%ProcessMode = 2) do {
		do utblrspdef.setMode(2)

		do RSPDEF(utblrspdef,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLRSPDEF utblrspdef

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLRSPDEF","KEY = :utblrspdef.key") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblrspdef,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblrspdef,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblrspdef)) S ^UTBL("RSPDEF",vobj(utblrspdef,-3))=vobj(utblrspdef)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLRSPDEF utblrspdef

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblrspdef,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("RSPDEF",vobj(utblrspdef,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLRSPDEF utblrspdef

	// Type local variables for access keys for defaults
	type public String KEY

	if utblrspdef.dupplnid.isNull() set utblrspdef.dupplnid = 0 // dupplnid
	if utblrspdef.pryropt.isNull() set utblrspdef.pryropt = 0 // pryropt
	if utblrspdef.rspwind.isNull() set utblrspdef.rspwind = 0 // rspwind
	if utblrspdef.taxind.isNull() set utblrspdef.taxind = 0 // taxind
	if utblrspdef.yeflg.isNull() set utblrspdef.yeflg = 0  // yeflg
	quit


vreqn // Validate required data items

	type public RecordUTBLRSPDEF utblrspdef

	if utblrspdef.dupplnid.isNull() do vreqerr("DUPPLNID") quit
	if utblrspdef.pryropt.isNull() do vreqerr("PRYROPT") quit
	if utblrspdef.rspwind.isNull() do vreqerr("RSPWIND") quit
	if utblrspdef.taxind.isNull() do vreqerr("TAXIND") quit
	if utblrspdef.yeflg.isNull() do vreqerr("YEFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLRSPDEF utblrspdef

	if utblrspdef.key.isNull() do vreqerr("KEY") quit

		if vx("DUPPLNID").exists(),utblrspdef.dupplnid.isNull() do vreqerr("DUPPLNID") quit
		if vx("PRYROPT").exists(),utblrspdef.pryropt.isNull() do vreqerr("PRYROPT") quit
		if vx("RSPWIND").exists(),utblrspdef.rspwind.isNull() do vreqerr("RSPWIND") quit
		if vx("TAXIND").exists(),utblrspdef.taxind.isNull() do vreqerr("TAXIND") quit
		if vx("YEFLG").exists(),utblrspdef.yeflg.isNull() do vreqerr("YEFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLRSPDEF","MSG",1767,"UTBLRSPDEF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - UTBLRSPDEF After Delete Trigger

	type public RecordUTBLRSPDEF utblrspdef
	/*

	---- Revision History ----------------------------------------

	05/31/07 - DHANALAKSHMI R - CR 25413
		Created to delete the contribution and distribution 
		codes from UTBLCONTYP and UTBLDISTYP table 
		respectively, for the plan type deleted.

	--------------------------------------------------------------
	*/

	// Delete all the Contribution codes for the Plan deleted
	do Db.fastDelete("UTBLCONTYP","IRATYP=:utblrspdef.key")

	// Delete all the Distribution codes for the Plan deleted
	do Db.fastDelete("UTBLDISTYP","IRATYP=:utblrspdef.key")
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLRSPDEF utblrspdef

	set X = utblrspdef.key if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("KEY", vRM) quit
	set X = utblrspdef.autupd if 'X.isNull(),'Db.isDefined("STBLDISUPD","X") set vRM = $$^MSG(1485,X) do vdderr("AUTUPD", vRM) quit
	if utblrspdef.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = utblrspdef.disage if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.DISAGE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.disdead if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DISDEAD", vRM) quit
	if '("01"[utblrspdef.DUPPLNID) set vRM=$$^MSG(742,"L") do vdderr("DUPPLNID", vRM) quit
	set X = utblrspdef.iraaut if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRAAUT", vRM) quit
	set X = utblrspdef.iraclti if 'X.isNull(),'Db.isDefined("UTBLIRACON","X") set vRM = $$^MSG(1485,X) do vdderr("IRACLTI", vRM) quit
	set X = utblrspdef.iraclto if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRACLTO", vRM) quit
	set X = utblrspdef.iracon if 'X.isNull(),'Db.isDefined("UTBLIRACON","X") set vRM = $$^MSG(1485,X) do vdderr("IRACON", vRM) quit
	set X = utblrspdef.iradis if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRADIS", vRM) quit
	set X = utblrspdef.iraipi if 'X.isNull(),'Db.isDefined("UTBLIRACON","X") set vRM = $$^MSG(1485,X) do vdderr("IRAIPI", vRM) quit
	set X = utblrspdef.iraipo if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRAIPO", vRM) quit
	set X = utblrspdef.lifpct if 'X.isNull(),'Db.isDefined("UTBLLIFDESC","X") set vRM = $$^MSG(1485,X) do vdderr("LIFPCT", vRM) quit
	set X = utblrspdef.limit if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.LIMIT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.limitpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.LIMITPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.madage if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.MADAGE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.madpct if 'X.isNull(),'Db.isDefined("UTBLMADDESC","X") set vRM = $$^MSG(1485,X) do vdderr("MADPCT", vRM) quit
	set X = utblrspdef.maxage if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.MAXAGE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.maxpar if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.MAXPAR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.minadis if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.MINADIS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.minage if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,99.99,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.MINAGE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.pryrdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PRYRDTE", vRM) quit
	if '("01"[utblrspdef.PRYROPT) set vRM=$$^MSG(742,"L") do vdderr("PRYROPT", vRM) quit
	set X = utblrspdef.rspmadb if 'X.isNull(),'Db.isDefined("STBLRSPMADB","X") set vRM = $$^MSG(1485,X) do vdderr("RSPMADB", vRM) quit
	set X = utblrspdef.rspmado if 'X.isNull(),'Db.isDefined("STBLRSPMADO","X") set vRM = $$^MSG(1485,X) do vdderr("RSPMADO", vRM) quit
	set X = utblrspdef.rspwcalc if 'X.isNull(),'Db.isDefined("UTBLWCALC","X") set vRM = $$^MSG(1485,X) do vdderr("RSPWCALC", vRM) quit
	if '("01"[utblrspdef.RSPWIND) set vRM=$$^MSG(742,"L") do vdderr("RSPWIND", vRM) quit
	set X = utblrspdef.rspwsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("RSPWSCH", vRM) quit
	set X = utblrspdef.stwhamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.STWHAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.stwhcalc if 'X.isNull(),'Db.isDefined("UTBLWCALC","X") set vRM = $$^MSG(1485,X) do vdderr("STWHCALC", vRM) quit
	set X = utblrspdef.stwhpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,99,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.STWHPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.stwhsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("STWHSCH", vRM) quit
	if '("01"[utblrspdef.TAXIND) set vRM=$$^MSG(742,"L") do vdderr("TAXIND", vRM) quit
	set X = utblrspdef.wthamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.WTHAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblrspdef.wthpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLRSPDEF.WTHPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[utblrspdef.YEFLG) set vRM=$$^MSG(742,"L") do vdderr("YEFLG", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLRSPDEF","MSG",979,"UTBLRSPDEF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLRSPDEF utblrspdef

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("KEY")
	set voldkey = vux.piece("|",1),vobj(utblrspdef,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblrspdef,-3) = vnewkey // Copy new keys into object
	type RecordUTBLRSPDEF vnewrec = utblrspdef.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLRSPDEF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utblrspdef,-3) = vux.piece("|",1)             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
