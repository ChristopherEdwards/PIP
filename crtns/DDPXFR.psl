DDPXFR		/*

       ORIG:  CHENARD - 16 MAY 1990

	    Client Processing - Software Transfers


	   This utility will set up for transfer to front-end processors
	   from a HOST production directory routines and globals.  Specifically,
	   individual routines, DATA-QWIK files, screens, reports, pre and post
	   processors, as well as miscellaneous globals can be set up for transfer
	   through this utility.  RMS file(s) will be created containing the
	   data for transfer and placed in the DDP subdirectory, SCAU$DDP.
	   Also, transfers can be sent from the HOST to any combination of all
	   the associated front-end processors and set up for any date and time.

	   Processing Flow:

	   1) HOST production is defined by the directory this utility is run from.
	   2) Prompt for individual categories of data to transfer and based on
	      the options chosen , use UTLLIST to accumulate specific entries.
	   3) Build arrays to be used for output
	   4) Lock the DDPTQUE file, get the next queue number to be used for
	      transfer
	   5) Output data from arrays to RMS file(s)
	   6) Prompt for front-end processors to transfer to; choose from
	      built array of %ZDDP table. (Individual entries or ALL)

	---- Revision History ------------------------------------------------
	
	05/29/07 - VanithaK - CR27215
		   Modified the INIT section to make RM as public so that it 
		   will be available in QUIT section to have the error message
		   displayed when escape out of files to transfer page.
		   Also modified the procedure to eliminate compiler warnings.
		   	
	12/20/05 - RussellDS - CR18400
		   Removed TBLINTEG section.  Not called.  Was only user of
		   INTEG^DBSVER, which is now removed as well.  New code under
		   DBI with filers, etc. now better control DB content.  If an
		   similar integ is needed in the future, it can be
		   re-implemented then.
		   
		   Removed old revision history.
	*/
	
	do INIT
	
	quit


INIT	// Initialize variables
	

	type public Boolean ER	
	type public String RM

	type Date DATE
	type Number CLIENT, Z
	type String APPEND, CTBL, CTBL1, DATA, DDPDIR, DESCR, DIR, FEP(), FEPS(),FID, FID1, FLG(),FLIB, FND, MISC, MSG, MSK, N 
	type String %InputTimeOut, %HELP, %READ, %PAGE, %PG, GDSP, HDG, HOSTDIR, I, IO, IOC, IOM, IOS, KVAR, LIB
	type String OLNTB, PFID, PGM, %QN, STBL1, TIME, TRAN1, TYPE, TYP, UTBL, UTBL1, VFMQ, VPGM, X, XX, Y	
			
	catch vERROR {
		new ET,RM
		set ET=vERROR.type
		do ZE^UTLERR
		}
		
	do SETUP^HSYNCALL(0)
	if VFMQ="Q" do QUIT quit
	
	/*
	User has selected  the types of data they wish to transfer
	Now we prompt to get the individual elements to transfer

	*/
	
	if FLG(2) do FID^DDPXFR1 if VFMQ="Q" do QUIT quit
	if FLG(10) do TRAN^DDPXFR1 if VFMQ="Q" do QUIT quit 	   
	if FLG(14) do UTBL^DDPXFR1 if VFMQ="Q" do QUIT quit 
	if FLG(15) do STBL^DDPXFR1 if VFMQ="Q" do QUIT quit
	if FLG(16) do CTBL^DDPXFR1 if VFMQ="Q" do QUIT quit
	if FLG(18) do MISC^DDPXFR1 if VFMQ="Q" do QUIT quit
	
	set X=0
	for I=2,10,14,15,16,18 set X=X+FLG(I)
	if 'X do QUIT quit
	
	// Dispatch to get a que number and then make an entry
	//type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	//do QUE(.cuvar) if VFMQ="Q" do QUIT quit  

	// Build transfer file for all elements selected.

	new IOLIST
	
	do BUILD^HSYNCFBD 
	if ER quit
	
	do FILE^DDPXFR1
	if ER quit
	
	//DDP network transfer queue ~p1 filed
	S RM=$$^MSG("766",%QN)
                              
    	quit		
           
QUE(RecordCUVAR cuvar)	// request the client names and the date and time to transfer

	/*
	Arguments:
 
	. cuvar		CUVAR object		/TYP=RecordCUVAR/REQ/MECH=REF
	*/
	
	 
	type public String %TAB(),OLNTB,%READ,%NOPRMT,%CTPRMT,X,FEP(),FEPS(),HOSTDIR,VFMQ
	type public Number Z,TIME,CLIENT
	
	type Date DATE
	type String HDG1,HDG2
	
	// Enter ""*"" = ALL  or Individual FEP Directories
	set HDG1=$$^MSG("3460")

	//List of FEP Directories
	set HDG2=$$^MSG(8175)
	set %TAB("FEP")=".FEP1/TBL=[DDPHOST]FEPDIR:QU ""[DDPHOST]HOSTDIR=<<HOSTDIR>>"":NOVAL/XPP=D FEPPP^DDPXFR"
	set OLNTB=1
	
	set %READ="@@%FN,,,@HDG1/CEN,,@HDG2/CEN/REV,,FEP/REP=20"
	set %NOPRMT="C" set %CTPRMT=5
	do ^UTLREAD if VFMQ="Q" quit 
	
	set DATE=%CurrentDate
	set TIME=%CurrentTime
		 
	set Z=0	
	set X="" 
	for  set X=$O(FEP(X)) quit:X=""  if FEP(X)'="" set Z=Z+1
	if Z'>0!(FEP(1)="*") do FEPALL
	
	set X=""
	for  set X=$O(FEP(X)) quit:X=""  if FEP(X)'="" set FEPS(FEP(X))=""
	kill CLIENT

	set CLIENT=cuvar.%vn
	kill FEP,FEPS("*") 
	
	// Build information in CLIENT array to reflect the different versions the clients may be on
	set X="" for  set X=$O(FEPS(X)) quit:X=""  do {
		new CURRDATA
		type RecordDDPHOST ddphost=Db.getRecord("DDPHOST","HOSTDIR=:HOSTDIR,FEPDIR=:X")
		set FEP(X)=""
		if ddphost.rid="" set CLIENT(CLIENT,X)="" quit 
		set CURRDATA=$P(ddphost.rid,$C(9),2)
		set CLIENT(CURRDATA,X)=""
		}
	quit 
	
	
FEPPP	// post processor for FEP

	type public String X
	type public Boolean ER
	
	if X=""!(X="*") quit

	// Invalid FEP directory
	if 'Db.isDefined("DDPHOST","HOSTDIR,X") do Runtime.setErrMSG("DDPHOST",1330) set ER=1 quit 
	quit 
	
	
FEPALL	// build array of all clients
	
	
	type public Number CLIENT, Z
	type public String CURRDATA(), FEP(), ER, RM, XZ	
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set CLIENT=cuvar.%vn
	
	if $P(CLIENT,"-",2)="" set $P(CLIENT,"-",2)="0"
	
	type ResultSet rs=Db.select("FEPDIR,RID","DDPHOST","HOSTDIR=:HOSTDIR")
	
	if rs.isEmpty() quit
	
	while rs.next() do {
		set FEP(rs.getCol(1))=rs.getCol(1)
		if rs.getCol(2)="" set CLIENT(CLIENT,rs.getCol(1))="" quit 
		set CURRDATA=rs.getCol(2)
		if $P(CURRDATA,"-",2)="" set $P(CURRDATA,"-",2)="0"
		set CLIENT(CURRDATA,rs.getCol(1))=""
		}
	// All front-end processors
	set ER="W" set RM=$$^MSG("243")
	
	quit 
	

%EXIMP(IO,DIR)	// Public; External call for DDP loading from an RMS Header file
	
	/*
	 This function will enable external calls into the
	 transfer utility to set up data transfers to all FEPs
	 currently in the configuration. The code has been moved to its own procedure in order
	 to remove some of the complexity of this procedure. This call remains because Release
	 loading software is not version dependent.

	 ARGUMENTS:
	  IO			Import Header File			/TYP=T/REQ
	  DIR			Directory name				/TYP=T/REQ

	 RETURNS:
	  ER			Error status (0/1)			/TYP=L

	 EXAMPLE:
	
	 S ER=$$%EXIMP^DDPXFR(IO,DIR)
	*/
                   
	quit $$EXIMP^HSYNCEXT(IO,DIR)
	
	
QUIT	// Quit out of function w/o building a transfer queue
	type public String ER, RM
		
	// DDP transfer queue not created
	set ER="W" set RM=$$^MSG("767") 
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60780^44069^Vanitha Krishnasamy^6316"	// Signature - LTD^TIME^USER^SIZE
