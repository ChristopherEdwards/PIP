R01S704	// YER437 - T4RSP Year-End Forms
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:04 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String IRATAB(),RPASEQ,acn,rpaseq
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String IRATYPE="ALL"
	type String REPDI=CUVAR.spldir_"YER437-"_$$DAT^%ZM(%CurrentDate,"MMDD")_".PBS"
	type String VIN2="ALL"
	type String VIN3="ALL"

	set RID="YER437"
	set RN="T4RSP Year-End Forms"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("IRATYPE")="|3|||IRATAB(||||T|RPA Type|||||"
	set %TAB("REPDI")="|40|||[DEVICE]||||T|Report Device|||||"
	set %TAB("VIN2")="|255||[T4RSPINF]ACN|[T4RSPINF]ACN:DISTINCT:NOVAL||set acn=X D EXT^DBSQRY||T|Customer Number|||||"
	set %TAB("VIN3")="|255||[T4RSPINF]RPASEQ|[T4RSPINF]RPASEQ:DISTINCT:NOVAL||set rpaseq=X D EXT^DBSQRY||T|Retirement/Savings Plan Sequence Numb|||||"

	set %READ="IO/REQ,REPDI#1,VIN2#0,VIN3#0,IRATYPE#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=40
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String IRATAB(),RPASEQ,acn,rpaseq
	type public String REPDI,VIN2,VIN3,IRATYPE
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %BLK,%NOCLOSE,%TIM,ACN,BENACN,BOO,CAD(),CNAME,CONAM,DODD,DRDTH,ESTATE,FTD,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NOFORM,OI,PGM,PLANID,REA,RID,RN,RNEI,RPS,SIO,SPI,SPNAME,SPOUSE,SPSIN,STD,TD,VL,VLOF,VRF(),VSTATS(),WCP,YEAR,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,vovc1,vovc2,vovc3,vovc4,vovc5,vp13,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="YER437",RN="T4RSP Year-End Forms"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YER437","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[T4RSPINF]ACN "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[T4RSPINF]RPASEQ "_VIN3,SEQ=SEQ+1
		set DQQRY(SEQ)="[T4RSPINF]NOFORM'=""1"" OR [T4RSPINF]NEGAMT'=""1""",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("T4RSPINF,CIF,IRATYPE") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}


	// Alignment pattern
	if cuvar.alcount,IOTYP'="TRM",'VRWOPT("NOALIGN").get() do ^DBSRWALN(RID,IO,cuvar.alcount)

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vp13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:7 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:6 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"T4RSPINF.BOO,T4RSPINF.ACN,T4RSPINF.RPASEQ,T4RSPINF"
	set VSELECT=VSELECT_".PLANID,T4RSPINF.FORMSEQ,T4RSPINF.RPS,T4RSPINF.REA"
	set VSELECT=VSELECT_",T4RSPINF.WCP,T4RSPINF.OI,T4RSPINF.DRDTH,T4RSPINF."
	set VSELECT=VSELECT_"TD,T4RSPINF.LLP,CIF.TAXID,CIF.DOB,IRATYPE.SPOUSEID"
	set VSELECT=VSELECT_",CIF.XNAME,T4RSPINF.BENACN,CIF.MAD1,CIF.MAD2,CIF.M"
	set VSELECT=VSELECT_"AD3,CIF.MAD4,CIF.MCSZ"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"T4RSPINF,CIF,IRATYPE",VWHERE,"T4RSPINF.BOO,T4RSPINF.ACN,T4RSPINF.RPASEQ,T4RSPINF.PLANID,T4RSPINF.FORMSEQ","","DQMODE=1/PROTECTION=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=rwrs.getRowProt()		// Data item protection
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vp13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22
	set vc1=V.piece($C(9),1)			// T4RSPINF.BOO
	set vc2=V.piece($C(9),2)			// T4RSPINF.ACN
	set vc3=V.piece($C(9),3)			// T4RSPINF.RPASEQ
	set vc4=V.piece($C(9),4)			// T4RSPINF.PLANID
	set vc5=V.piece($C(9),5)			// T4RSPINF.FORMSEQ
	set vc6=V.piece($C(9),6)			// T4RSPINF.RPS
	set vc7=V.piece($C(9),7)			// T4RSPINF.REA
	set vc8=V.piece($C(9),8)			// T4RSPINF.WCP
	set vc9=V.piece($C(9),9)			// T4RSPINF.OI
	set vc10=V.piece($C(9),10)			// T4RSPINF.DRDTH
	set vc11=V.piece($C(9),11)			// T4RSPINF.TD
	set vc12=V.piece($C(9),12)			// T4RSPINF.LLP
	set vc13=V.piece($C(9),13)			// CIF.TAXID
	set vp13=VI.extract(13)				// Protection indicator
	set vc14=V.piece($C(9),14)			// CIF.DOB
	set vc15=V.piece($C(9),15)			// IRATYPE.SPOUSEID
	set vc16=V.piece($C(9),16)			// CIF.XNAME
	set vc17=V.piece($C(9),17)			// T4RSPINF.BENACN
	set vc18=V.piece($C(9),18)			// CIF.MAD1
	set vc19=V.piece($C(9),19)			// CIF.MAD2
	set vc20=V.piece($C(9),20)			// CIF.MAD3
	set vc21=V.piece($C(9),21)			// CIF.MAD4
	set vc22=V.piece($C(9),22)			// CIF.MCSZ
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 /*
  ---- Revision History ------------------------------------------------

	05/30/07 - DHANALAKSHMI R - CR25413
		Modified the section START to modify the condition
		involving utblbenrel.spi to check against 1 since the 
		type is changed from logical to number.

 -----------------------------------------------------------------------
 */

 type public String acn,CAD(),IRATAB(),MYQRY1,MYQRY2,PLANID,rpaseq,YEAR
 type Number BENACN,DRDTH,LLP,OI,REA,RPS,SPI,START,START1,STOP,STOP1,TD,WCP
 type Boolean DODD,KEEP,NOFORM
 type public Number ACN,BOO,RPASEQ,IRATYPE
 type String A(,)
 set YEAR=$$YEAR^SCADAT(%SystemDate)-1
 do Db.fastDelete("T4RSPINF","PID=:%ProcessID")
 set MYQRY1=acn.translate(",","!")
 set MYQRY2=rpaseq.translate(",","!")
 
 if acn'="ALL" do {
 	type Number I,EX,X
 	set EX=""
 	set START=MYQRY1.piece("!",1)-0.0001
	for I=1:1 quit:EX=1  do {
		set X=MYQRY1.piece("!",I)
		if X'="" set A(2,I)=X
		else  set EX=1
 		}
	set STOP=A(2,A(2,"").order(-1))+0.0001
 	}
 else  set START=0,STOP=10000000000000000000
 
 if rpaseq'="ALL" do {
 	type Number I,EX,X
 	set EX=""
 	set START1=MYQRY2.piece("!",1)-0.0001
	for I=1:1 quit:EX=1  do {
		set X=MYQRY2.piece("!",I)
		if X'="" set A(2,I)=X
		else  set EX=1
 		}
	set STOP1=A(2,A(2,"").order(-1))+0.0001
 	}
 else  set START1=0,STOP1=10000000000000000000

 set ACN=START
 type ResultSet rs
 if ACN.isNull() set rs=Db.select("DISTINCT ACN","IRATYPE")
 else  set rs=Db.select("DISTINCT ACN","IRATYPE","ACN>:START AND (ACN<:STOP or ACN=:STOP)","ACN")

 while rs.next() do {
 	set ACN=rs.getCol("ACN")
 	if MYQRY1'="ALL" set KEEP=1 do {  Q:'KEEP	// Check ACN query
	 	type Number I
 		set I=""
	 	for  set I=A(3,I).order() quit:I=""  if 'A(3,I) set KEEP=0
 		}
 	type ResultSet rs1
     	if START1.isNull() set rs1=Db.select("RPASEQ,IRATYP,YEFLG,PLANID","IRATYPE","ACN=:ACN AND (RPASEQ<:STOP1 or RPASEQ=:STOP1)","RPASEQ")
     	else  set rs1=Db.select("RPASEQ,IRATYP,YEFLG,PLANID","IRATYPE","ACN=:ACN AND RPASEQ>:START1 AND (RPASEQ<:STOP1 or RPASEQ=:STOP1)","RPASEQ")
     	
     	while rs1.next() do {
     		set PLANID=rs1.getCol("PLANID")
		set RPASEQ=rs1.getCol("RPASEQ")
     		if MYQRY2'="ALL" set KEEP=1 do {  Q:'KEEP  	// Check RPASEQ query
 			type Number I
 			set I=""
	 		for  set I=A(4,I).order() quit:I=""  if 'A(4,I) set KEEP=0
 			}
 		if IRATYPE'="ALL",rs1.getCol("IRATYP")'=IRATYPE quit
 		if IRATYPE'="ALL",IRATAB(rs1.getCol("IRATYP"))'=IRATYPE quit
 		// If tax reporting option is set to 'N' skip this RPASEQ.
 		if 'rs1.getCol("YEFLG") quit
 		set (RPS,REA,OI,TD,DRDTH,WCP,BENACN,SPI)=""
 		
 		type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:YEAR")
 		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
 		
 		// Set the Date of Death Distributions variable.
 		set DODD=0
 		// If the plan owner is living, unset the Death Distributions variable.
 		if (ira.d6>0)!(ira.d26>0)!(ira.d27>0) set DODD=1
 		
 		// Determine if a form should be generated for this plan.
		set NOFORM=$$SYSDEVCEFRM(ira)
		if NOFORM=0 set NOFORM=1
		else  set NOFORM=0
		set BOO=cif.boo
		type RecordT4RSPINF t4rspinf()
		
		set t4rspinf(1)=Db.getRecord("T4RSPINF","PID=:%ProcessID,BOO=:BOO,ACN=:ACN,RPASEQ=:RPASEQ,PLANID=:PLANID,FORMSEQ=1",1)
		set t4rspinf(2)=Db.getRecord("T4RSPINF","PID=:%ProcessID,BOO=:BOO,ACN=:ACN,RPASEQ=:RPASEQ,PLANID=:PLANID,FORMSEQ=2",1)
		do START(ira,cif,.t4rspinf())
		do SET(.t4rspinf())
		}
	}
 quit

START(RecordIRA ira,RecordCIF cif,RecordT4RSPINF t4rspinf())  // Check for date of death and set up forms
	
 /*Member not deceased(if there is no value in any of the Death payout buckets.)
 Only 1 form generated.*/
  
 type public Number ACN,BENACN,DRDTH,FTD,OI,LLP,N,REA,RPS,RPASEQ,STD,SPI,TD,WCP
 type public Boolean DODD,NOFORM
 type String BENREL
 type Boolean NODOD
 
 if 'DODD do { quit
 	set REA=ira.d18-ira.nrd18   // Refund of Excess Contrib Curr Yr (Reportable)
 	set WCP=ira.d1-ira.nrd1	    // Normal Distribution, Withdrawal and Commutat.
 	set (STD,FTD)=0
 	if (ira.sw1)!(ira.sw18) set STD=ira.sw1+ira.sw18
 	set FTD=(ira.w1+ira.w18)-(ira.nrw1+ira.nrw18)   // Tax deducted For This Accountira
 	set TD=STD+FTD
 	set LLP=ira.d47
 	set t4rspinf(1).rea=REA
 	set t4rspinf(1).td=TD
 	set t4rspinf(1).wcp=WCP
 	set t4rspinf(1).llp=LLP
 	if (REA<0)!(TD<0) set t4rspinf(1).negamt=1
 	set t4rspinf(1).noform=NOFORM
 	if (REA<.01),(WCP<.01),(TD<.01),(NOFORM=1) set t4rspinf(1).nodetail=1
 	}
  
 /*Determine if there is a beneficiary and its relationship. If there are
 multiple beneficiaries then no second form will be generated.*/

 set N=0
 type ResultSet rs2=Db.select("BENACN,BENREL","IRABEN","ACN=:ACN AND RPASEQ=:RPASEQ")
 while rs2.next() do {
 	set BENACN=rs2.getCol("BENACN")
 	set BENREL=rs2.getCol("BENREL")    // Beneficiary Relationship.
 	type RecordUTBLBENREL utblrel=Db.getRecord("UTBLBENREL","BENREL=:BENREL")
 	if (utblrel.spi = 1) set SPI=1
 	set N=N+1  // Keep track of the number of Beneficiaries for this RSP.
 	}
 // If there is death disburstments but no date of death, set the NODOD flag.
 if cif.dod'>0 set NODOD=1
 else  set NODOD=""
 
 /* Member deceased, spousal beneficiary and the deceased [CIF]DOD is null
 or invalid.  Suppress form sequence #1 and form sequence #2.*/
 if DODD,NODOD do {  quit
 	set t4rspinf(1).nodod=1
 	set t4rspinf(1).noform=1
 	set t4rspinf(2).nodod=1
 	set t4rspinf(2).noform=1
 	}

 /*Member deceased, no beneficiary. 2 forms generated to estate.  We check
 if member is deceased by determining if there is a value in any of the
 death payout buckets.*/
 if DODD,'BENACN do {  quit
 	set REA=ira.d18-ira.nrd13	// Refund of Excess Contrib Curr Yr (Reportable)
    	set WCP=ira.d1-ira.nrd1		// Normal Distribution, Withdrawal and Commutat.
    	set LLP=ira.d47			// Lifelong Learning Plan
 	set OI=ira.d27-ira.nrd27	// Other Income
    	set TD=$$TDBAL(ira)               	// Tax deducted for this account.
 
 	// Set the Deemed Receipt on Death Value to the fair market value.
	set DRDTH=$$DFMV()

 	// The first form will report information up to the time of death.
   	set t4rspinf(1).rea=REA
   	set t4rspinf(1).td=TD
   	set t4rspinf(1).drdth=DRDTH
   	set t4rspinf(1).addr=1
   	set t4rspinf(1).wcp=WCP
   	set t4rspinf(1).nodod=NODOD
   	set t4rspinf(1).llp=LLP

    	/* The second form will report information after the date of death and up
 	    to the payout of the plan to the estate.*/
   	set t4rspinf(2).oi=OI
   	set t4rspinf(2).addr=1
   	
	/* For form sequence 2, if all amounts are equal to 0, do not produce a
	   tax form but display it on the detail report.*/
 	if 'OI set t4rspinf(2).noform=1

	/*If a negative amount is going to be displayed in any field on the report,
	then do not produce the tax forms.*/
	
    	if (REA<0)!(TD<0)!(WCP<0)!(OI<0)!(LLP<0) do {
    		set t4rspinf(1).negamt=1
    		set t4rspinf(2).negamt=1
 		}
 	if t4rspinf(1).noform="" do {
 		set t4rspinf(1).noform=NOFORM
 		}
 	if (t4rspinf(2).noform=""),(t4rspinf(2).oi!t4rspinf(2).rps!t4rspinf(2).addr) do {
 		set t4rspinf(2).noform=NOFORM
 		}
    	
    	/* If there is any positive amounts in the REA,IO,TD,
	DRDTH, or WCP, then Form Sequence 1 should always be generated
	no matter what other condition exists.*/
    	if (REA>0)!(OI>0)!(TD>0)!(DRDTH>0)!(WCP>0)!(LLP>0) set t4rspinf(1).noform=""
    	}

 /* Member deceased, spousal beneficiary. 2 forms-1 to estate,1 to spouse
 unless multiple benifs than only 1 form.  We check if a member is deceased
 by determining if there is a value in any of the death payout buckets.*/

 if DODD,SPI do {  quit
 	//Refund of Premium to Spouse
    	set RPS=((ira.d26-ira.nrd26)+(ira.d27-ira.nrd27))
	set REA=ira.d18-ira.nrd18    // Refund of Excess Contrib Curr Yr (Reportable)
   	set LLP=ira.d47
    	set TD=$$TDBAL(ira)               // Tax deducted
    	set WCP=ira.d1-ira.nrd1
 	
 	// Deemed Receipt on Death is retrieved from the fair market value.
   	set DRDTH=$$DFMV()-ira.d6
	
	set t4rspinf(1).rea=REA
   	set t4rspinf(1).td=TD
   	set t4rspinf(1).drdth=DRDTH
   	set t4rspinf(1).addr=1
   	set t4rspinf(1).wcp=WCP
   	set t4rspinf(1).rps=(ira.d26-ira.nrd13)+(ira.d27-ira.nrd27)
   	set t4rspinf(1).nodod=NODOD
   	set t4rspinf(1).llp=LLP
   	
   	/*The second form will carry the name and address of the beneficiary
 	spouse, and will report the refund of premiums to the spouse as of the
  	date of the payout of the plan.*/
  	
   	if N'>1 do {
   		set t4rspinf(2).rps=RPS
   		set t4rspinf(2).benacn=BENACN
 		}
   	
	 // If more than 1 beneficiary no form will be generated.

 	if N>1 do {
 		set t4rspinf(2).multiben=1
 		set t4rspinf(2).noform=1
 		}

	/*For form sequence 2, if all the amounts equal 0, then do not produce a
  	  tax form but display this form on the detail report with all 0 values.*/
  	  if 'RPS do {
  	  	set t4rspinf(2).noform=1
  	  	}

	/*If a negative amount is going to be displayed in any field on the report,
	  then do not produce the tax forms.*/
	if (REA<0)!(TD<0)!(DRDTH<0)!(WCP<0)!(RPS<0) do {
   		set t4rspinf(1).negamt=1
		}
	
	if N'>1 do {
	  	set t4rspinf(2).negamt=1
	    	}
 	
 	/*In the following line, added the flag for multiple
 	  beneficiaries and removed the flag for negative processing because
	  the multiple benificiary message takes precedence over the neg. msg.*/
	  
	  if N>1 do {
	  	set t4rspinf(1).multiben=1
		set t4rspinf(1).noform=1
	  	}
	  if t4rspinf(1).noform="" do {
	  	set t4rspinf(1).noform=NOFORM
	  	}
	  if (t4rspinf(2).noform=""),(t4rspinf(2).oi!t4rspinf(2).rps!t4rspinf(2).addr) do {
	  	set t4rspinf(2).noform=NOFORM
	  	}

	/*If there is any positive amounts in the REA,RPS,TD,
	  DRDTH, or WCP, then Form Sequence 1 should always be generated
 	  no matter what other condition exists. */
 	if (REA>0)!(RPS>0)!(TD>0)!(DRDTH>0)!(WCP>0) set t4rspinf(1).noform=""
 	}


 /*Member deceased, nonspousal beneficiary. 2 forms-1 to estate,1 to
   beneficiary. If multiple beneficiaries then generate only 1 form to estate.
   Client will manually calculate beneficiaries percentages and type up forms.
   Detail report will show that there were multiple beneficiaries.  We check
   if a member is deceased by determining if there is a value in any of the
   death payout buckets.*/
 if DODD,'SPI do {  quit
 	set REA=ira.d18-ira.nrd18   // Refund of Excess Contrib Curr Yr (Reportable)
 	set WCP=ira.d1-ira.nrd1	    // Normal Distribution, Withdrawal and Commutat.	
 	set LLP=ira.d47		    // lifelong learning plan
 	// Refund of Premium to Spouse
 	set RPS=(ira.d26-ira.nrd13)+(ira.d27-ira.nrd27)
 	set TD=$$TDBAL(ira)
 	set OI=ira.d27-ira.nrd27    // other income
 	// Deemed receipt of death is received from the Fair Market Value.
 	set DRDTH=$$DFMV()
 	
 	/*The first form will carry the address to the Estate, and will report
	  information up to the time of death */
 	set t4rspinf(1).rea=REA
	set t4rspinf(1).td=TD
   	set t4rspinf(1).drdth=DRDTH
	set t4rspinf(1).addr=1
 	set t4rspinf(1).wcp=WCP
   	set t4rspinf(1).nodod=NODOD
 	set t4rspinf(1).llp=LLP
 	
 	/*The second form will carry the address of the beneficiary, and will
  	  report the amount of interest income earned after the date of death */
	if N'>1 do {
 		set t4rspinf(2).oi=OI
 		set t4rspinf(2).benacn=BENACN
 		}
 		
 	// If more than 1 beneficiary no form will be generated.
 	if N>1 do {
 		set t4rspinf(2).multiben=1
 		set t4rspinf(2).noform=1
 		}
 		
 	/*For form sequence 2, if all the amounts equal 0, then do not produce a
 	tax form but display this form on the detail report with all 0 values.*/
 	if 'OI do {
 		if N'>1 do {
 			set t4rspinf(2).noform=1
 			}
 		if N>1 do {
 			set t4rspinf(2).multiben=1 
			set t4rspinf(2).noform=1
 			}
 		}
 		
 	/*If a negative amount is going to be displayed in any field on the report,
  	  then do not produce the tax forms.*/
 	if (LLP<0)!(REA<0)!(TD<0)!(DRDTH<0)!(WCP<0)!(OI<0) do {
 	   	set t4rspinf(1).negamt=1
 		if N'>1 do {
 			set t4rspinf(2).negamt=1
 			}
 		/*Removed the negative processing flag since the
 		  multiple benificiary flag takes precedence.*/
 		if N>1 do {
 			set t4rspinf(2).multiben=1
 			set t4rspinf(2).noform=1
 			}
 		if t4rspinf(1).noform="" do {
 			set t4rspinf(1).noform=NOFORM
 			}
 		if (t4rspinf(2).noform=""),(t4rspinf(2).oi!t4rspinf(2).rps!t4rspinf(2).addr) do {
 			set t4rspinf(2).noform=NOFORM
 			}
 		
 		/*If there is any positive amounts in the REA,IO,TD,
		  DRDTH, or WCP, then Form Sequence 1 should always be generated
 		  no matter what other condition exists.*/
 		if (LLP>0)!(REA>0)!(OI>0)!(TD>0)!(DRDTH>0)!(WCP>0) set t4rspinf(1).noform="" 
 		
 		}
 	}
 quit

SET(RecordT4RSPINF t4rspinf()) // Set up TMP file for forms and detail report
 type public Number DRDTH,LLP,REA,TD,WCP
 if REA+WCP+TD+DRDTH+LLP=0 set t4rspinf(1).noform=1
 do t4rspinf(1).save()
 if (t4rspinf(2).noform=""),(t4rspinf(2).noform!t4rspinf(2).multiben) do {
 	do t4rspinf(2).save()
	}
 quit

TDBAL(RecordIRA ira) // Calculate the Tax Deducted for this account.
 type Number RESDIS,RESSTDIS,NRESDIS
 set (RESDIS,NRESDIS,RESSTDIS)=0
 set RESDIS=RESDIS.get()+(ira.w1+ira.w6+ira.w18+ira.w26+ira.w27)
 set RESSTDIS=RESSTDIS.get()+(ira.sw1+ira.sw6+ira.sw18+ira.sw26+ira.sw27)
 set NRESDIS=NRESDIS.get()+(ira.nrw1+ira.nrw6+ira.nrw18+ira.nrw26+ira.nrw27)
 quit (RESDIS+RESSTDIS-NRESDIS) 

DFMV() // Calculate the Deemed Receipt on Death value from the Fair Market value
 type Number DFMV,CID
 type public Number ACN
 set (DFMV,CID)=""
 type ResultSet rs3=Db.select("CID","DEP","RPASEQ>0")
 while rs3.next() do {
 	set CID=rs3.getCol("CID")
 	type RecordRELCIF relcif=Db.getRecord("RELCIF","ACN=:ACN,CID=:CID")
 	set DFMV=relcif.dfmv
	}
 quit DFMV

SYSDEVCEFRM(RecordIRA ira) // Determine if a form should be produced for this plan.
 
 type public Number NOFORM,DODD
 
 /*If the Plan Owner is deceased.  A form will be generated if there is any
   positive amount in either the Trustee Transfer bucket, Death Transfer to
   Spouse's IRA bucket or Direct Transfer to Qualified Plan bucket.*/
 if DODD do {
 	set NOFORM=((ira.d6-ira.nrd6)>0)!((ira.d26-ira.nrd26)>0)!((ira.d27-ira.nrd27)>0)
 	}
 if DODD quit NOFORM
 
 /* If the Plan Owner is living, produce a form if one of the following
  conditions are met*/
 if (ira.d1-ira.nrd1)>0 quit 1
 if (ira.d18-ira.nrd18)>0 quit 1
 if (ira.w1-ira.nrw1)>0 quit 1
 if (ira.w18-ira.nrw18)>0 quit 1
 if ira.sw1>0 quit 1
 if ira.sw18>0 quit 1
 quit 0
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=acn,rpaseq,RPASEQ,IRATAB()
 type public String IRATAB()

 type ResultSet rs=Db.select("IRA,DESC","STBLIRA")
 while rs.next() do {
	if rs.getCol("IRA")=5 set IRATAB(5)=rs.getCol("DESC")
	if rs.getCol("IRA")=8 set IRATAB(8)=rs.getCol("DESC")
	}
 set IRATAB("ALL")="5,8"
	quit

VRPOST	// Report post-processor

 type public String IO,PGM,REPDI,RID,SIO,%NOCLOSE,%BLK
 type public Number vcrt
 type public Boolean VFMQ
 type Number PN 

 do CLOSE^SCAIO
 set SIO=IO
 set IO=REPDI
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set RID="YER438" do ^URID
 if PGM.length() set %BLK="/,"_REPDI do ^@PGM
 set IO=SIO 
 set %NOCLOSE=""
 do Db.fastDelete("T4RSPINF","PID=:%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1,vskp(6)=1,vskp(7)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(7).get() do VDTL7 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(7)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7)=0
	if vb3!(+vovc1'=+vc1) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1
	if vb4!(+vovc2'=+vc2) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1
	if vb5!(+vovc3'=+vc3) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1
	if vb6!(vovc4'=vc4) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(7) set vs(7)=1 do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),vc10,vc9,vc7,vc6,vc11,vc8
	type Public String VSTATS

	set VT(7)=VT(7)+1
	set VT(7,1,1)=VT(7,1,1)+vc10			// @TOT([T4RSPINF]DRDTH)
	set VT(7,2,1)=VT(7,2,1)+vc9			// @TOT([T4RSPINF]OI)
	set VT(7,3,1)=VT(7,3,1)+vc7			// @TOT([T4RSPINF]REA)
	set VT(7,4,1)=VT(7,4,1)+vc6			// @TOT([T4RSPINF]RPS)
	set VT(7,5,1)=VT(7,5,1)+vc11			// @TOT([T4RSPINF]TD)
	set VT(7,6,1)=VT(7,6,1)+vc8			// @TOT([T4RSPINF]WCP)
	quit

VDTL7	// Detail
	type public String %BLK,%NOCLOSE,ACN,BENACN,BOO,CAD(),CNAME,DODD,DRDTH,ESTATE,FTD,IO,IOSL,IRATAB(),IRATYPE,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NOFORM,OI,PGM,PLANID,REA,REPDI,RID,RNEI,RPASEQ,RPS,SIO,SPI,SPNAME,SPOUSE,SPSIN,STD,TD,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),WCP,YEAR,acn,rpaseq,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vp13

	if VLC+24>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="  "_$J(YEAR,4)
	set VL=VL_$J("",18-VL.length())_$S(vc6="":"",1:$J(vc6,0,2))
	set VL=VL_$J("",29-VL.length())_$S(vc7="":"",1:$J(vc7,0,2))
	set VL=VL_$J("",40-VL.length())_$S(vc8="":"",1:$J(vc8,0,2))
	set VL=VL_$J("",51-VL.length())_$S(vc12="":"",1:$J(vc12,0,2))
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="       "_$S(vc9="":"",1:$J(vc9,0,2))
	set VL=VL_$J("",18-VL.length())_$S(vc11="":"",1:$J(vc11,0,2))
	set VL=VL_$J("",29-VL.length())_$S(vc10="":"",1:$J(vc10,0,2))
	do VP1 quit:VFMQ!verror.get()  set V=$E(SPOUSE,1,1)
	set VL=VL_$J("",53-VL.length())_V
	do VP2 quit:VFMQ!verror.get()  set V=$E(SPOUSE,1,1)
	set VL=VL_$J("",58-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(SPSIN,1,11)
	set VL=VL_$J("",61-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	do VP4 quit:VFMQ!verror.get()  set V=$E(SPNAME,1,20) set VL="                                            "_V
	do VOM
	set VL="" do VOM
	do VP5 quit:VFMQ!verror.get()  set V=$E(ESTATE,1,20) set VL="  "_V
	do VOM
	do VP6 quit:VFMQ!verror.get()  set V=$E(LFM,1,40) set VL="  "_V
	set VL=VL_$J("",44-VL.length())_$S(vp13=3:"***********",1:$E(vc13,1,11))
	set VL=VL_$J("",59-VL.length())_$E(vc4,1,12)
	do VOM
	do VP7 quit:VFMQ!verror.get()  set V=$E(CAD(1),1,40) set VL="  "_V
	do VOM
	set VL="  "_$E(CAD(2),1,40)
	do VP8 quit:VFMQ!verror.get()  set V=$E(CNAME,1,25)
	set VL=VL_$J("",46-VL.length())_V
	do VOM
	set VL="  "_$E(CAD(3),1,40)
	do VOM
	set VL="  "_$E(CAD(4),1,40)
	do VOM
	set VL="  "_$E(CAD(5),1,40)
	do VP9 quit:VFMQ!verror.get()  set V=$E(NBIN,1,15)
	set VL=VL_$J("",44-VL.length())_V
	do VP10 quit:VFMQ!verror.get()  set V=$J($FN(RNEI,",",2),12)
	set VL=VL_$J("",60-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	quit

VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %BLK,%NOCLOSE,ACN,BENACN,BOO,CAD(),CNAME,DODD,DRDTH,ESTATE,FTD,IO,IRATAB(),IRATYPE,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NOFORM,OI,PGM,PLANID,REA,REPDI,RID,RNEI,RPASEQ,RPS,SIO,SPI,SPNAME,SPOUSE,SPSIN,STD,TD,WCP,YEAR,acn,rpaseq,vcrt,vovc1,vovc2,vovc3,vovc4,vovc5
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+12>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                  "_"Total Number of Notices:"
	set V=(VT(0)+VT(1)+VT(2)+VT(3)+VT(4)+VT(5)+VT(6)+VT(7))	// @CNT(0,N,8)
	set VL=VL_$J("",43-VL.length())_$J(V,8)
	do VOM
	set VL="       "_"Total Refund of Premiums to Spouse:"
	set V=0						// @TOT([T4RSPINF]RPS,0)
	for I=0:1:7 set V=V+VT(I,4,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="           "_"Total Refund of Excess Amounts:"
	set V=0						// @TOT([T4RSPINF]REA,0)
	for I=0:1:7 set V=V+VT(I,3,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="   "_"Total Refund of W/D and Comm. Payments:"
	set V=0						// @TOT([T4RSPINF]WCP,0)
	for I=0:1:7 set V=V+VT(I,6,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="                       "_"Total Other Income:"
	set V=0						// @TOT([T4RSPINF]OI,0)
	for I=0:1:7 set V=V+VT(I,2,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="            "_"Total Deemed Receipt on Death:"
	set V=0						// @TOT([T4RSPINF]DRDTH,0)
	for I=0:1:7 set V=V+VT(I,1,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="                       "_"Total Tax Deducted:"
	set V=0						// @TOT([T4RSPINF]TD,0)
	for I=0:1:7 set V=V+VT(I,5,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %BLK,%MSKD,%NOCLOSE,%TIM,ACN,BENACN,BOO,CAD(),CNAME,CONAM,DODD,DRDTH,ESTATE,FTD,IO,IRATAB(),IRATYPE,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NOFORM,OI,PGM,PLANID,REA,REPDI,RID,RN,RNEI,RPASEQ,RPS,SIO,SPI,SPNAME,SPOUSE,SPSIN,STD,TD,VL,WCP,YEAR,acn,rpaseq,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vp13,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	use IO if 'VLC,'vcrt set $Y=1
	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: SPOUSE

	type public String vc14,vc15,vc8,vc7
 type public String SPOUSE
 type Number BEGYR,dob,RSPAGE,X

 set dob=vc14
 set BEGYR=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)  // beginning previous of tax yr
 set X=$$EOTY^SCADAT(BEGYR,1)                       // end of previous tax year
 set RSPAGE=$$NOY^SCADAT(X,dob)
 set SPOUSE=" "
 if vc15,(RSPAGE<74),((vc8)!(vc7>0)) set SPOUSE="X"
	quit

VP2	// Column pre-processor - Variable: SPOUSE

	type public String vc14,vc15,vc8,vc7
 type public String SPOUSE
 type Number BEGYR,dob,RSPAGE,X

 set dob=vc14 
 set BEGYR=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)  // beginning previous of tax yr
 set X=$$EOTY^SCADAT(BEGYR,1)                       // end of previous tax year
 set RSPAGE=$$NOY^SCADAT(X,dob)
 set SPOUSE="X"
 if vc15,(RSPAGE<74),((vc8)!(vc7>0)) set SPOUSE=" "
	quit

VP3	// Column pre-processor - Variable: SPSIN

	type public String vc15,vc8,vc7,vc16
 type public Number ACN,RSPAGE
 type Number OK,X
 type public String SPSIN

 set OK=0,SPSIN=""
 // if there is a spouse benificiary, then retrieve the CIF # of spouse
 if vc15,(RSPAGE<74),((vc8>0)!(vc7>0)) set OK=1

 if 'OK quit

 // contributor and the spouses social insurance number.

 set X=vc15
 if X do {
	 type RecordCIF cif=Db.getRecord("CIF","ACN=:X",1)
	 set SPSIN=vc16
	}
	quit

VP4	// Column pre-processor - Variable: SPNAME

	type public String vc15,vc8,vc7
 type public Number ACN,RSPAGE,RPASEQ
 type Number OK,spouseid,X
 type public String SPNAME 

 set SPNAME="",OK=0

 if vc15,(RSPAGE<74),((vc8>0)!(vc7>0)) set OK=1 
 if 'OK quit
 set X=ACN
 type RecordIRATYPE iratyp=Db.getRecord("IRATYPE","ACN=:X,RPASEQ=:RPASEQ")
 set spouseid=iratyp.spouseid
 if 'spouseid quit

 type RecordCIF cif=Db.getRecord("CIF","ACN=:spouseid")
 set SPNAME=cif.xname
	quit

VP5	// Column pre-processor - Variable: ESTATE

 type public String ESTATE

 set ESTATE=""
	quit

VP6	// Column pre-processor - Variable: LFM

	type public String vc17,vc16
 type Number ACN
 type public String LFM
 type public Number FORMSEQ

 if vc17 do {  quit
	set ACN=vc17
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1)
     	set LFM=cif.xname
	}
 set LFM=vc16
	quit

VP7	// Column pre-processor - Variable: CAD(1)

	type public String vc17,vc18,vc19,vc20,vc21,vc22
 type public Number ACN,FORMSEQ
 type public String CAD()
 type Number BENACN,J,I
 set BENACN=vc17
 if BENACN do {
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
	set CAD(1)=cif.mad1
	set CAD(2)=cif.mad2
	set CAD(3)=cif.mad3
	set CAD(4)=cif.mad4
	set CAD(5)=cif.mcity_", "_cif.mstate_" "_cif.mzip
	}
 else  do {
	set CAD(1)=vc18
	set CAD(2)=vc19
	set CAD(3)=vc20
	set CAD(4)=vc21
	set CAD(5)=vc22
	}

 for J=1:1:4 do {
	for I=1:1:4 do {
		if CAD(I)="" set CAD(I)=CAD(I+1),CAD(I+1)=""
		}
	}

	quit

VP8	// Column pre-processor - Variable: CNAME

 type public String CNAME
 set CNAME=CUVAR.cname.extract(1,25)
	quit

VP9	// Column pre-processor - Variable: NBIN

 type public String NBIN
 set NBIN=CUVAR.t4rsptrn
	quit

VP10	// Column pre-processor - Variable: RNEI

 type public Number ACN,RPASEQ,RNEI,YEAR
 
 type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:YEAR")
 set RNEI=ira.rnei
	quit
