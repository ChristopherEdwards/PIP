public	MRPC004(String return,		// Transaction qualifiers	/REF:W
		Number versn,		// Version number (Current version = 1)		
		Number cid,		// Account number 
		Number max,		// Maximum number records	/DFT=999
		Number seq,		// Starting print sequence	/DFT=DEP.PBKSEQ
		Boolean nolock)		// Skip locking flag		/DFT=0
	/*
	   ORIG: MATTSON - 09/17/93

	   This extrinsic function returns a list of transaction qualifiers
	   (service class TSSP) for a specified account based upon the 
	   transaction code.

	  ---- Revision History ------------------------------------------------
	
	   05/23/06 - TITOVE - CR 21297
	   	      Removed Split Day logic, this processing has been
	   	      obsoleted. Deleted old revision history.

	   09/15/05 - Sreeram Panyaram - 17149
	   	      Initialized unscoped variables for DBI3.
	   	
	*/
	
	type public Number ACN()
	type public String ET
	type Number CID
	
	// Version number of client message is not compatible with server
	if 'versn.get()=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))
	
	set CID=cid.get()

	// Invalid account ~p1
	if 'Db.isDefined("ACN","CID=:CID") quit $$ERRMSG^PBSUTL($$^MSG(1259))

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Not a passbook account
	if 'acn.pbi quit $$ERRMSG^PBSUTL($$^MSG(3263))

	set nolock=+nolock.get()

	if nolock=0 lock +ACN(CID):2 else  set ET="RECLOC" quit $$ERRMSG^PBSUTL("",ET)
	
	type String cls,EC,etc,fld,rec,REV,sub(),tmprec,trc,TSO,XETC
	type Number amt,bal,brcd,cnt,int,itc,itc4,lseq,more,prin,uid,%sq
	type Date efd,efdcmp,tjd,vdt
			
	set %sq=acn.pbkseq+1

	if max.get().isNull() set max=999
	if 'seq.get() set seq=%sq
	if seq>%sq set seq=%sq

	set lseq=seq
	set cnt=1 
	set more=0

	type DbSet rs=Db.selectDbSet("HIST","CID=:CID")

	while rs.next() do { quit:more

		type RecordHIST hist=rs.getRecord("HIST")

		set seq=hist.tseq

		if cnt>max set more=1 set seq=lseq quit
	
		set rec=hist.tjd_"|"_hist.itc_"|"_hist.etc_"|"_hist.tamt_"|"
		set rec=rec_hist.efd_"|"_hist.tlo_"|"_hist.tso_"|"
		set rec=rec_hist.tcmt_"|"_hist.cdt_"|"_hist.time_"|"
		set rec=rec_hist.brcd_"|"_hist.trc_"|"_hist.uid_"|"
		set rec=rec_hist.spr_"|"_hist.tsb_"|"_hist.xhs16_"|"
		set rec=rec_hist.crcd_"|"_hist.rate_"|"_hist.vdt_"|"
		set rec=rec_hist.ben_"|"_hist.dir_"|"_hist.chktyp_"|"
		set rec=rec_hist.endbal

		set TSO=rec.piece("|",7)
		set XETC=rec.piece("|",3)
		set EC=$$FIELD^UTSO(TSO,"EC")
		set REV=$$FIELD^UTSO(TSO,"REV")

		// Quit if this is a FM transaction
		if XETC.isNull(), EC.isNull() quit
	
		// The TPD will be printed to the passbook for Reversals instead of TJD
		set tjd=rec.piece("|",1)
		set itc=rec.piece("|",2)
		set etc=rec.piece("|",3)

		type RecordTRN trn=Db.getRecord("TRN","ETC=:etc")
		
		if trn.skpp quit

		set amt=rec.piece("|",4)
		set efd=rec.piece("|",5)
		set bal=rec.piece("|",23)

		set efdcmp=$select(efd:efd,1:tjd)
		set brcd=rec.piece("|",11)
		set uid=rec.piece("|",13)
		set vdt=rec.piece("|",19)
		set trc=rec.piece("|",12)
		set int=amt.piece("#",3)
		set prin=$select(amt["#":amt.piece("#",2),1:amt)

		set cls=acn.cls
		set itc4=+itc.extract(4)

		if (cls="D")&(itc4=1) do {
		 	set int=prin 
			set prin=""
			}

		set sub(1)=seq
		set sub(2)=tjd
		set sub(3)=etc

		set sub(4)=$$TAMT^PBSTSSP(cls,amt)

		// Effective Date Computed
		set sub(5)=efdcmp
		set sub(6)=bal
		set sub(7)=itc4
	
		// Branch Code
		set sub(8)=brcd

		// User ID
		set sub(9)=uid

		// Value Date
		set sub(10)=vdt

		// Was this transaction corrected/reversed
		set sub(11)=$$REVTRN^HISTCDI(cid,seq)

		// If REVTRN=1, Was this transaction (1) error corrected
		//        			     (2) reversed
		set sub(12)=$$HISTRFLG^HISTCDI(cid,seq)

		// If REVTRN=1, What sequence corrected/reversed this sequence
		set sub(13)=$select(sub(11):$$HISTRSEQ^HISTCDI(cid,seq),1:"")

		// Interest Paid/Collected
		set sub(14)=int

		// Principal
		set sub(15)=prin

		// Transaction Amount
		set sub(16)=+amt

		// Withholding
		set sub(17)=amt.piece("#",5)

		// Penalty/Late Charge
		set sub(18)=amt.piece("#",4)

		// Debit/Credit Indicator
		set sub(19)=+itc.extract()

		// Error Correct Flag
		set sub(20)=+itc.extract(6)

		// Reversal Flag
		set sub(21)=+itc.extract(12)
		
		if cls="L" do {
			// "L" Late Charge
			set sub(22)=amt.piece("#",4)

			// "L" Undispersed principal
			set sub(23)=amt.piece("#",5)

			// "L" Miscellaneous Amount
			set sub(24)=amt.piece("#",6)

			// "L" Escrow Amount
			set sub(25)=amt.piece("#",7)

			// "L" Uncollected Interest
			set sub(26)=amt.piece("#",8)

			// "L" Undisbursed Funds
			set sub(27)=amt.piece("#",9)

			// "L" Principal Charge-Off
			set sub(28)=amt.piece("#",10)

			// "L" Principal Recovery Amount
			set sub(29)=amt.piece("#",11)

			// "L" Loan Loss Reserve
			set sub(30)=amt.piece("#",12)

			// "L" Deferred Loan Fees
			set sub(31)=amt.piece("#",13)
			}

		set rec(cnt)=$$V2LV^MSG(.sub)
		set cnt=cnt+1 set lseq=seq
		}

	// Update account with last record's information

	if cnt>1 do {
		if cls="D" do { quit
			type RecordDEP acnupd=Db.getRecord("DEP","CID=:CID")
			set acnupd.pbkbal=bal
			set acnupd.pbkld=%SystemDate
			set acnupd.pbkseq=seq
			do acnupd.bypassSave()	
			}

		type RecordLN acnupd=Db.getRecord("LN","CID=:CID")
		set acnupd.pbkbal=bal
		set acnupd.pbkld=%SystemDate
		set acnupd.pbkseq=seq
		do acnupd.bypassSave()	
		}

	if nolock=0 lock -ACN(CID)

	set fld(1)=$$V2LV^MSG(.rec) 
	set fld(2)=more
	set return=$$V2LV^MSG(.fld)

	quit ""

vSIG()	quit "60409^59184^Eugene Titov^5140"	// Signature - LTD^TIME^USER^SIZE
