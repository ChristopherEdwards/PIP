URECFIL		/*
	ORIG: chhabris - 09/15/2005
	DESC: Schema Change Filters

	---- Comments --------------------------------------------------------
	Schema Change Filters, when a secondary system is updated to 
	a new release of  PROFILE/Anyware, filter are required for the 
	database replication process in order to manage schema difference 
	between the upgraded system and the system that is not yet upgraded. 
	Filter will be used only on the upgraded system, with the type of 
	active filter dependent on the system is currently playing, primary or secondary.

	Notes:

		1) This routine cannot write to disk, it can only read.
		2) Need to call OLD2NEW or NEW2OLD for replication filter
		   since cannot use parameters from mupip replicate.
		3) It must be bullet proof.  If it stops, then replication
		   stops, which, depending on which side one is on, may
		   freeze activity.

	---- Revision History ------------------------------------------------

	*/

	quit

	//---------------------------------------------------------------------
OLD2NEW	// Called by GT.M replication servers for old to new filtering
	//---------------------------------------------------------------------
	do INPUT(1)
	quit

	//---------------------------------------------------------------------
NEW2OLD	// Called by GT.M replication servers for new to old filtering
	//---------------------------------------------------------------------
	do INPUT(0)
	quit


	//---------------------------------------------------------------------
INPUT(oldnew)	// Main replication filter read/write loop 
	/*--------------------------------------------------------------------
	 INPUT:
		. oldnew	1 -- from old version to new version
	
				0 -- from new version to old version
	
	 RETURN:
		. Updated transaction
	
	 EXAMPLE:
		do INPUT^URECFIL(1)	from old version to new version
		do INPUT^URECFIL(0)	from new versionto old version
	--------------------------------------------------------------------
	*/
	type public String gseq,recordx,TCommit,type
	type public Number trans,TStart
	type Number count,input,output,lost,turnoff
	type String record

	catch Error {
		do ZT^URECFIL
		}

	set (input,output)=0

	set lost=0,turnoff=0
	for  use input read record do { quit:(turnoff=1)

		if record.extract(1,2)="05" set record=$$UNZWR^URECLOST(record)
		set TStart="08"
		set TCommit="09\0,0\0\0\0"
		if record.extract(1,2)="99" set turnoff=1 quit
		if record.extract(1,2)="08" do { quit:(turnoff=1)
			set TStart=record
			set count=0
			for  use input read recordx do { quit:type="09"!(turnoff=1)
				set type=recordx.extract(1,2)
				if type="05" set recordx=$$UNZWR^URECLOST(recordx)
        		        else  if type="99" set turnoff=1 quit
				if type'="09" set trans(count)=recordx,count=count+1
				else  set TCommit=recordx
				}
			}
		else  set trans(0)=record

		if oldnew=1 do OLDNEW
		if oldnew=0 do NEWOLD

		if trans.data()=0 do { quit

			// return empty
			use output write "00",!
			}

		use output write TStart,!

		set gseq="" 
		for  set gseq=trans(gseq).order() quit:gseq.isNull()  do {
			if trans(gseq).extract(1,2)="05" set trans(gseq)=$$SETZWR^URECLOST(trans(gseq))
			use output write trans(gseq),!
			}
		use output write TCommit,!
		}

	close input,output
	halt

	quit


	//----------------------------------------------------------------------
public LOST(trans,oldnew) //called by Non-replicated transcation routine RECLOST
	/*----------------------------------------------------------------------
	 INPUT:
		. trans		A set of transaction
		. oldnew	1 -- from old version to new version
	
				0 -- from new version to old version
	
	
	 RETURN:
		. trans		Updated transaction
	
	 EXAMPLE:
		set trans(1)="05\57579,38192\541650327\33082556\^CIF(1,13)=0|0|2|||||0"
		do LOST^URECFIL(.trans,1)	from old version to new version
		do LOST^URECFIL(.trans,0)	from new versionto old version
	
	 need to call a GTM function to get loacted platform version
	 if lost=0 locate on new version plat. // list=1 locate on old version plat.
	----------------------------------------------------------------------------
	*/

	type Number lost
	type public String DELFILE,ZFROMON,ADDFILE,ZFROMNO

	do SYSVAR^SCADRV0()

	if %VersionID="6.1" set lost=0
	else  if %VersionID="6.0" set lost=1

	// old  to new
        if oldnew=1,lost=0 do OLDNEW quit

        // new to old
        if oldnew=0,lost=1 do NEWOLD
        quit


	//-------------------------------------------------------------------
OLDNEW	//	From old version to new version
	//-------------------------------------------------------------------

	type public String DELFILE,ZFROMON,trans(),ss2
	type Public Number xxx
	type String xtra,X,subs,global,gbl,xkeys,temp(),statem
	type Number seq,lseq,subs,subs(),MATCH

	if DELFILE.data()=0 do DELETEFILE
	if ZFROMON.data()=0 do ONINIT
	set lseq=0
	set seq=""
	for  set seq=trans(seq).order() quit:seq.isNull()  do {
		set xtra=trans(seq)
		if xtra.extract(1,2)'="05" quit
		set X=xtra.piece("\",6,9999)
		set subs=""
		do SPLIT^URECLOST(X,.global,.statem,.subs)

		set global=global.extract(ss2,9999)
		set gbl=global.piece("(",1)
		set xkeys=global.extract(global.find("("),(global.find(")")-2))

		if gbl="ACN",subs=2,subs(2)=54,'statem.piece("|",11).isNull() do MOON
		else  if (global["UTBL(""PROD"",""TYPE"""),(subs=6),(subs(5)=0) do SDON  

		// CIF.BOO
		else  if (gbl="CIF"),(subs=2),(subs(2)=13) do BRREGON(gbl,xkeys)

		// transaction set conversion
		else  if (gbl="TRN"),(subs=2),(subs(2)=3) do TSETON
		if global["(" do {
			set MATCH=$$GETFID(.DELFILE,gbl,xkeys)
			if MATCH'=1 set MATCH=$$ONGETFID(.ZFROMON,gbl,xkeys)
			}
		}

	if temp.data()'=0 set lseq="" for  set lseq=temp(lseq).order() quit:lseq.isNull()  do {
		set xxx=trans("").order(-1)+1
		set trans(xxx)=temp(lseq)
		}
	quit


	//----------------------------------------------------------------
NEWOLD	//	from new version to old version
	//-----------------------------------------------------------------

	type public String ADDFILE,ZFROMNO,trans()
	type Public Number xxx
	type String xtra,X,subs,global,gbl,xkeys,temp(),statem
	type Number seq,lseq,subs,subs(),MATCH

	if ADDFILE.data()=0 do ADDFILE
	if ZFROMNO.data()=0 do NOINIT
	set lseq=0
	set seq=""
	for  set seq=trans(seq).order() quit:seq.isNull()  do {
		set xtra=trans(seq)
		if xtra.extract(1,2)'="05" quit
		set X=xtra.piece("\",6,9999)
		set subs=""
		do SPLIT^URECLOST(X,.global,.statem,.subs)

		set global=global.extract(2,9999)
		set gbl=global.piece("(",1)
		set xkeys=global.extract(global.find("("),(global.find(")")-2))

		if (gbl="ACN"),(subs=2),(subs(2)=428),(statem.piece("|",17)'="") do MONO  quit
		else  if ((global?1"UTBLDFTD".e)!(global?1"UTBLDFTL".e)!(global?1"UTBLCTL".e)!(global?1"UTBLDFTC".e)),(global.length(",")=2) do SDNO  quit
		else  if (gbl="CIF"),(subs=2),(subs(2)=10) do BRREGNO(gbl,xkeys)
		else  if (gbl="TRN"),(subs=3),((subs(3)=1)!(subs(3)=2)!(subs(3)=3)!(subs(3)=4)) do TSETNO

		if global["(" do {

			// if it is a new file 
			set MATCH=$$GETFID(.ADDFILE,gbl,xkeys)

			// if data item was changed
			if MATCH'=1 set MATCH=$$ONGETFID(.ZFROMNO,gbl,xkeys)
			}
		}

	if temp.data()'=0 set lseq="" for   set lseq=temp(lseq).order() quit:lseq.isNull()  do {
		set xxx=trans("").order(-1)+1
		set trans(xxx)=temp(lseq)
		}
	quit


	//-----------------------------------------------------------
UTILITY(input,global,glo,xkeys,statem)
	/*------------------------------------------------------------
	
		OUTPUT:
			global		global include scrip.
			glo		global ony without scrip.
			xkeys		keys + node
			statem		record
	
		Example:
			do UTILITY("^UTBL("""PROD"",""TYPE"",9703)=test|76776",.global,.glo,.xkeys,.statem)
			return: UTBL("PROD","TYPE",9703)
				UTBL
				"PROD","TYPE",9703
				test|76776
	------------------------------------------------------------
	*/

	type String X,subs

	set X=input.piece("\",6,9999)
	set subs=""
	do SPLIT^URECLOST(X,.global,.statem,.subs)
	set global=global.extract(2,9999)
	set glo=global.piece("(",1)
	set xkeys=global.extract(global.find("("),(global.find(")")-2))
	quit


	//---------------------------------------------------------------
BRREGON(gbl,xkeys)	// CNVREG.M, old to new
	//----------------------------------------------------------------
	type public String statem,trans(),temp(),xtra
	type public Number kkk,lseq
	type String x,s10,ztra,zglobal,zgbl,zkeys,zstatem,boo
	type Number acn,xcid,zseq

	// Update CIF.BOO make a new CIF.BRREG
	set boo=statem.piece("|",1),acn=xkeys.piece(",",1)
        set x=""
 	type ResultSet rs=Db.select("REGION","UTBLREGIONS","KEY=:boo","REGION")
	if rs.next() set x=rs.getCol("REGION")

	if 'x.isNull() do {
		set zseq="",kkk=0 
		for  set zseq=trans(zseq).order() quit:(zseq.isNull())!(kkk=1)  do {
			set ztra=trans(zseq)
			do UTILITY(ztra,.zglobal,.zgbl,.zkeys,.zstatem)
			if (zgbl="CIF"),(zkeys.length(",")=2),(zkeys.piece(",",2)=10),(zkeys.piece(",",1)=xcid) do {
				set zstatem.piece("|",20)=x
				set trans(zseq)=ztra.extract(1,ztra.find("^")-1)_zglobal_zstatem
				set kkk=1
				}
			}
		}

	if kkk=0 do {
		type RecordCIF cif=Db.getRecord("CIF","ACN=:acn",1)
		set zstatem=cif.dob_"|"_cif.sex_"|"_cif.mar_"|"_cif.dep_"|"_cif.occ_"|"_cif.inc_"|"_cif.own
		set zstatem=zstatem_"|"_cif.locale_"|||"_cif.cifoff_"|"_cif.shhld_"|"_cif.educ_"|"_cif.dod
		set zstatem=zstatem_"|"_cif.spouse_"|"_cif.extcif_"|"_cif.emplno_"|"_cif.agent_"|"_cif.brreg
		set zstatem=zstatem_"|"_cif.dodsabl

		set zstatem.piece("|",20)=x
		set temp(lseq)=xtra.piece("\",1,5)_"\"_"^CIF("_acn_",10)="_zstatem
		set lseq=lseq+1
		}
	quit


	//------------------------------------------------------------------
BRREGNO(gbl,xkeys)      //       CNVREG.M, new to old		
	//--------------------------------------------------------------------
	type public Number seq
	type public String statem,trans(),xtra
	type String v1

	set statem.piece("|",20)=""
	do SPLIT^URECLOST(xtra,.v1)
	set trans(seq)=v1_"="_statem
	quit


	//---------------------------------------------------------------------
GETFID(arr,gbl,xkeys,again) // gbl = global name xkeys = access keys
        /*----------------------------------------------------------------------
         The section will be used to identify updated data item
	
	 PARAMETERS:
		.arr(GLOBAL,KEY)	Global Index
        	.gbl    		Global Name
         	.xkeys   		Access Keys
	
	 RETURNS:
        
		fid     File name
        
	----------------------------------------------------------------------
	*/

	type public String item,newkeys,trans(),seq
	type String x
	type Number yyy,i,match

	set match=0
	set item=""
	set newkeys=""
	if again.get().isNull() set again=0
	set x=""
	for  set x=arr(gbl,x).order() quit:(x.isNull())!(match=1)  do {

		if x.length(",")'=xkeys.length(",") quit

		if ((gbl="UTBL")!(gbl="STBL")!(gbl="CTBL")),(x.piece(",",1)'=xkeys.piece(",",1)) quit

		if x?.e1n.e do { quit:yyy
			set yyy=0
			for i=1:1:x.length(",") if (x.piece(",",i)?1n.n),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (again'=1),(xkeys?.e1"""".e),(x'="""*""") do { quit:yyy
			set yyy=0
			for i=1:1:xkeys.length(",") if (xkeys.piece(",",i)?1"""".e),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (x?.e1"""".e),(x'="""*""") do { quit:yyy
			set yyy=0
              		for i=1:1:x.length(",") if (x.piece(",",i)?1"""".e),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (again'=1),(gbl="DBTBL"),(xkeys.length()>1),(x.piece(",",2)'=xkeys.piece(",",2)) quit
		set match=1
		kill trans(seq)
		}
	quit match


	//---------------------------------------------------------------------
ONGETFID(array,gbl,xkeys,again,piece) // gbl = global name xkeys = access keys
        /*----------------------------------------------------------------------
	 The section will be used to identify updated data item

	 PARAMETERS:
		.array  	Global Index
		.gbl    	Global Name
		.xkeys   	Access keys
	
         RETURNS:
        
		fid     File name
	----------------------------------------------------------------------
	*/

	//array(gbl,keys+node,piece)=REQ1|REQ2|COMP1|COMP2|NODE1|NODE2|POS1|POS2|default|file.data

	type Number match,yyy,i
	type String reqtyp,req1,req2,statem,trans(),typ1,typ2,xtemp,x,item,newkeys,xtra,v1
	type Public Number seq 

	set match=0
	set item=""
	set newkeys=""
	if again.get().isNull() set again=0
	set x=""
	for  set x=array(gbl,x).order() quit:(x.isNull())!(match=1)  do {
		if x.length(",")'=xkeys.length(",") quit

		if ((gbl="UTBL")!(gbl="STBL")!(gbl="CTBL")),(x.piece(",",1)'=xkeys.piece(",",1)) quit

		if x?.e1n.e do { quit:yyy
			set yyy=0
			for i=1:1:x.piece(",") if (x.piece(",",i)?1n.n),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (again'=1),(xkeys?.e1"""".e),(x'="""*""") do { quit:yyy
			set yyy=0
			for i=1:1:xkeys.length(",") if (xkeys.piece(",",i)?1"""".e),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (x?.e1"""".e),(x'="""*""") do { quit:yyy
			set yyy=0
        	      	for i=1:1:x.length(",") if (x.piece(",",i)?1"""".e),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (again'=1),(gbl="DBTBL"),(xkeys.length()>1),(x.piece(",",2)'=xkeys.piece(",",2)) quit
		set match=1
		set piece=""
		for  set piece=array(gbl,x,piece).order() quit:piece.isNull()  do {
			set xtemp=array(gbl,x,piece).piece("|",9).translate("~","|")

			#ACCEPT PGM=Sanjay Chhabria DATE=10/05/2005
			if 'xtemp.get().isNull() xecute xtemp
			}

		do SPLIT^URECLOST(xtra,.v1)
		set trans(seq)=v1_"="_statem
		}

	quit match


	//---------------------------------------------------------------------
SDON	/* Convert PRODTYPE,DTYPE,LTYPE,CTYPE into PRODDFTD,PRODDFTL,PRODDFTC
	   Old to New 	refrence CNV61.m
	--------------------------------------------------------------------
	*/
	type public String global,trans(),temp(),statem,xtra
	type public Number lseq,seq
	type Number kkk,x
	type String ztra,n50,cls,grp,node,xy,type,xseq,MAST,xglobal

	set n50=""
	set global=global.extract(global.find("("),global.find(")")-2)
	set type=global.piece(",",3),MAST=global.piece(",",4)

	// Filter is on updated system
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:type",1)
	set n50=prodctl.cls_"|"_prodctl.grp

	if n50.isNull() do {
		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() do { quit:(xseq.isNull())!(kkk=1)
			set ztra=trans(xseq)
	 		set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBL(""PROD"",""TYPE"","_type_","_MAST_",0,50)"
			if global=xglobal do {
				set n50=ztra.extract(ztra.find("="),ztra.length())
				set kkk=1
				}
			}
		}

	if n50.isNull() quit
	set cls=n50.piece("|",1)
	set grp=n50.piece("|",2)
	set node=global.piece(",",6)
	set x=statem
	if node=50 do {
		set xy="|"_cls_"|"_grp

		// Save CLS,GRP only
		set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLCTL("_type_",50)="_xy
		set lseq=lseq+1
		}

	if cls="*",(node=5!(node=13)) do CHGCIF
	if cls="L",(node=6!(node=2)!(node=12)!(node=13)!(node=14)!(node=15)!(node=30)) do CHGLN

	// Base table
	if node<49 set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLCTL("_type_","_node_")="_x quit

	// Remove TYP
	if node=50 set x.piece("|",1)=""
	if cls="D" set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLDFTD("_type_","_node_")="_x quit
	if cls="L" set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLDFTL("_type_","_node_")="_x quit
	if cls="*" set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLDFTC("_type_","_node_")="_x quit
	quit


	//----------------------------------------------------------------------
CHGCIF	/*
	 Some data items of the CIF and Loan products had conflicts with the
	 Deposit data items. IN this case the Loan and Cif fields were moved
	 to nodes 36(CIF) and 37(LOANS)
	----------------------------------------------------------------------
	*/
	type public String x,type,temp(),xtra
	type public Number lseq,node
	type String data

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:type",1)
	set data=prodctl.brcd_"|"_prodctl.bwf_"|"_prodctl.fsiscr_"|"_prodctl.fsnscr_"|"_prodctl.intwr_"|"_prodctl.mf_"|"_prodctl.intyprst
	if node=5 set data.piece("|",3)=x.piece("|",3),x.piece("|",3)=""
	if node=5 set data.piece("|",4)=x.piece("|",1),x.piece("|",1)=""
	if node=13 set data.piece("|",1)=x.piece("|",2),x.piece("|",2)=""
	if node=13 set data.piece("|",6)=x.piece("|",4),x.piece("|",4)=""
	if node=13 set data.piece("|",2)=x.piece("|",7),x.piece("|",7)=""
	if node=13 set data.piece("|",5)=x.piece("|",8),x.piece("|",8)=""
	set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLCTL("_type_",36)="_data
	set lseq=lseq+1
	quit


	//----------------------------------------------------------------------
CHGLN	/*
	  Some data items of the CIF and Loan products had conflicts with the
	  Deposit data items. IN this case the Loan and Cif fields were moved
	  to nodes 36(CIF) and 37(LOANS)
	 ----------------------------------------------------------------------
	 */
	type public String type,xtra,x
	type public Number node,lseq,temp()
	type String data

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:type",1)
	set data=prodctl.craddc_"|"_prodctl.cradii_"|"_prodctl.cradts_"|"_prodctl.crtcpc_"|"_prodctl.crtrct_"|"_prodctl.crtrcu_"|"
	set data=data_prodctl.crtrdf_"|"_prodctl.crtrep_"|"_prodctl.crtrst_"|"_prodctl.draddc_"|"_prodctl.dradii
	set data=data_prodctl.dradts_"|"_prodctl.drtrcp_"|"_prodctl.drtrct_"|"_prodctl.drtrcu_"|"_prodctl.drtrdf
	set data=data_prodctl.drtrmu_"|"_prodctl.drtrpr_"|"_prodctl.drtrpv_"|"_prodctl.drtrst_"|"_prodctl.intc
	set data=data_prodctl.lnmdlscr_"|"_prodctl.rnscr_"|"_prodctl.drtrmfi_"|"_prodctl.crtrmfr

	if node=2 set data.piece("|",23)=x.piece("|",4),x.piece("|",4)=""
	if node=2 set data.piece("|",22)=x.piece("|",5),x.piece("|",5)=""

	if (node=6),(prodctl.hrep) do {
		set prodctl.ascr=x.piece("|",1)
		do prodctl.save()
		set x.piece("|",1)=""
		}

	if node=12 set data.piece("|",10)=x.piece("|",4),x.piece("|",4)=""
	if node=12 set data.piece("|",12)=x.piece("|",6),x.piece("|",6)=""
	if node=12 set data.piece("|",11)=x.piece("|",7),x.piece("|",7)=""
	if node=13 set data.piece("|",1)=x.piece("|",4),x.piece("|",4)=""
	if node=13 set data.piece("|",3)=x.piece("|",6),x.piece("|",6)=""
	if node=13 set data.piece("|",2)=x.piece("|",7),x.piece("|",7)=""
	if node=14 set data.piece("|",18)=x.piece("|",2),x.piece("|",2)=""
	if node=14 set data.piece("|",14)=x.piece("|",9),x.piece("|",9)=""
	if node=14 set data.piece("|",16)=x.piece("|",11),x.piece("|",11)=""
	if node=14 set data.piece("|",17)=x.piece("|",19),x.piece("|",19)=""
	if node=14 set data.piece("|",20)=x.piece("|",20),x.piece("|",20)=""
	if node=14 set data.piece("|",15)=x.piece("|",23),x.piece("|",23)=""
	if node=14 set data.piece("|",19)=x.piece("|",24),x.piece("|",24)=""
	if node=14 set data.piece("|",13)=x.piece("|",25),x.piece("|",25)=""
	if node=15 set data.piece("|",5)=x.piece("|",9),x.piece("|",9)=""
	if node=15 set data.piece("|",7)=x.piece("|",11),x.piece("|",11)=""
	if node=15 set data.piece("|",4)=x.piece("|",17),x.piece("|",17)=""
	if node=15 set data.piece("|",8)=x.piece("|",18),x.piece("|",18)=""
	if node=15 set data.piece("|",9)=x.piece("|",20),x.piece("|",20)=""
	if node=15 set data.piece("|",6)=x.piece("|",23),x.piece("|",23)=""
	if node=30 set data.piece("|",21)=x.piece("|",1),x.piece("|",1)=""
	set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^UTBLCTL("_type_",37)="_data
	set lseq=lseq+1
	quit


	//-------------------------------------------------------------------
SDNO	/* SD from new version to old version
	   Refrence CNV61.m
	 --------------------------------------------------------------------
	 input: (trans(seq))		s set of transaction
		xtra=trans(seq)
		global=$E(xtra,$F(xtra,"^"),$F(xtra,"=")-2)		
		statem=$E(xtra,$F(xtra,"="),$L(xtra))
	 --------------------------------------------------------------------
	*/

	type public String global,MAST,statem,trans(),xtra,xglobal
	type String x,type,node,n50,cls,grp,ztra,crcd
	type public Number lost
	type Number kkk,xseq,seq

	set global=global.extract(global.find("("),global.find(")")-2)
	set x=statem
	set type=global.piece(",",1),node=global.piece(",",2)
	if (global="UTBLCTL"),(node=50) quit
	if lost=1 set MAST="USD"
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:type",1)
	set n50=prodctl.cls_"|"_prodctl.grp

	if n50.isNull() do {
		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
		 	set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLCTL("_type_",50)"
			if global=xglobal do {
				set n50=ztra.extract(ztra.find("="),ztra.length())
				set kkk=1
				}
			}
		}

	if n50.isNull() quit
	set cls=n50.piece("|",2)
	set grp=n50.piece("|",3)

	type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:type")
	type RecordPRODDFTL proddftl=Db.getRecord("PRODDFTL","TYPE=:type")
	type RecordPRODDFTC proddftc=Db.getRecord("PRODDFTC","TYPE=:type")

	if (cls="D"),('proddftd.cls.isNull()) set crcd=proddftd.crcd
	else  if (cls="D"),(proddftd.cls.isNull()) do {

		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
			set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLDFTD("_type_",50)"
			if global=xglobal do {
				set crcd=ztra.extract(ztra.find("="),ztra.length())
				set crcd=crcd.piece("|",12)
				set kkk=1
				}
			}
		}

	else  if (cls="L"),('proddftl.cls.isNull()) set crcd=proddftl.crcd
	else  if (cls="L"),(proddftl.cls.isNull()) do {

		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
			set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLDFTL("_type_",50)"
			if global=xglobal do {
				set crcd=ztra.extract(ztra.find("="),ztra.length())
				set crcd=crcd.piece("|",12)
 				set kkk=1
				}
			}
		}

	else  if (cls="*"),('proddftc.cls.isNull()) set crcd=proddftc.crcd
	else  if (cls="*"),(proddftc.cls.isNull()) do {

		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
			set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLDFTC("_type_",50)"
			if global=xglobal do {
				set crcd=ztra.extract(ztra.find("="),ztra.length())
				set crcd=crcd.piece("|",12)
				set kkk=1
				}
			}
		}

	if crcd.get().isNull() set crcd="USD"
	if node=50 set x.piece("|",1)=type
	if (cls="*"),(node=5!(node=13)) do XCHGCIF
	if (cls="L"),(node=6!(node=2)!(node=12)!(node=13)!(node=14)!(node=15)!(node=30)) do XCHGLN
	set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^UTBL(""PROD"",""TYPE"","_type_","_""""_crcd_""""_",0,"_node_")="_x
	quit


	//----------------------------------------------------------------------
XCHGCIF	/*
	 Some data itemset of the CIF and Loan products had conflicts with the
	 Deposit data items. IN this case the Loan and Cif fields were moved
	 to nodes 36(CIF) and 37(LOANS)
	 ----------------------------------------------------------------------
	 */

	type public Number node
	type public String global,type,trans(),xglobal,x,ztra
	type String data,xseq
	type Number kkk

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:type")
	set data=prodctl.brcd_"|"_prodctl.bwf_"|"_prodctl.fsiscr_"|"_prodctl.fsnscr_"|"_prodctl.intwr_"|"_prodctl.mf_"|"_prodctl.intyprst
	if 'data.translate("|") set data=""

	if data.isNull() do {
		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
			set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLCTL("_type_",36)"
			if global=xglobal do {
				set data=ztra.extract(ztra.find("="),ztra.length())
 				set kkk=1
				}
			}
		}

	if 'data.isNull() do {
		if node=5 set x.piece("|",3)=data.piece("|",3)
		if node=5 set x.piece("|",1)=data.piece("|",4)
		if node=13 set x.piece("|",2)=data.piece("|",1)
		if node=13 set x.piece("|",4)=data.piece("|",6)
		if node=13 set x.piece("|",7)=data.piece("|",2)
		if node=13 set x.piece("|",8)=data.piece("|",5)
		}
	quit


	//----------------------------------------------------------------------
XCHGLN	/*
	  Some data items of the CIF and Loan products had conflicts with the
	  Deposit data items. IN this case the Loan and Cif fields were moved
	  to nodes 36(CIF) and 37(LOANS)
	 ----------------------------------------------------------------------
	 */

	type public String trans(),type,x
	type public Number node
	type String data,global,temp,xdata,xglobal,ztra
	type Number kkk,xseq

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:type")
	set data=prodctl.craddc_"|"_ prodctl.cradii_"|"_ prodctl.cradts
	set data=data_"|"_ prodctl.crtcpc_"|"_ prodctl.crtrct_"|"_ prodctl.crtrcu
	set data=data_"|"_ prodctl.crtrdf_"|"_ prodctl.crtrep_"|"_ prodctl.crtrst
	set data=data_"|"_ prodctl.draddc_"|"_ prodctl.dradii_"|"_ prodctl.dradts
	set data=data_"|"_ prodctl.drtrcp_"|"_ prodctl.drtrct_"|"_ prodctl.drtrcu
	set data=data_"|"_ prodctl.drtrdf_"|"_ prodctl.drtrmu_"|"_ prodctl.drtrpr
	set data=data_"|"_ prodctl.drtrpv_"|"_ prodctl.drtrst_"|"_ prodctl.intc
	set data=data_"|"_ prodctl.lnmdlscr_"|"_ prodctl.rnscr_"|"_ prodctl.drtrmfi
	set data=data_"|"_ prodctl.crtrmfr

	if data.isNull() do {
		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
			set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLCTL("_type_",37)"
			if global=xglobal do {
				set data=ztra.extract(ztra.find("="),ztra.length())
 				set kkk=1
				}
			}
		}

	set temp=prodctl.nscr_"|"_prodctl.cscr_"|"_prodctl.hrep_"|"_prodctl.ascr
	set temp=temp_"|"_prodctl.amscr_"|"_prodctl.aiscr_"|"_prodctl.modscr
	
	if temp.isNull() do {
		set xseq="",kkk=0
		for  set xseq=trans(xseq).order() quit:(xseq.isNull())!(kkk=1)  do {
			set ztra=trans(xseq)
			set global=ztra.extract(ztra.find("^"),ztra.find("=")-2)
			set xglobal="UTBLCTL("_type_",2)"
			if global=xglobal do {
				set xdata=ztra.extract(ztra.find("="),ztra.length())
 				set kkk=1
				}
			}
		}

	if node=2 set x.piece("|",4)=data.piece("|",23)
	if node=2 set x.piece("|",5)=data.piece("|",22)
	if node=6 set x.piece("|",1)=xdata.piece("|",4)
	if node=12 set x.piece("|",4)=data.piece("|",10)
	if node=12 set x.piece("|",6)=data.piece("|",12)
	if node=12 set x.piece("|",7)=data.piece("|",11)
	if node=13 set x.piece("|",4)=data.piece("|",1)
	if node=13 set x.piece("|",6)=data.piece("|",3)
	if node=13 set x.piece("|",7)=data.piece("|",2)
	if node=14 set x.piece("|",2)=data.piece("|",18)
	if node=14 set x.piece("|",9)=data.piece("|",14)
	if node=14 set x.piece("|",11)=data.piece("|",16)
	if node=14 set x.piece("|",19)=data.piece("|",17)
	if node=14 set x.piece("|",20)=data.piece("|",20)
	if node=14 set x.piece("|",23)=data.piece("|",15)
	if node=14 set x.piece("|",24)=data.piece("|",19)
	if node=14 set x.piece("|",25)=data.piece("|",13)
	if node=15 set x.piece("|",9)=data.piece("|",5)
	if node=15 set x.piece("|",11)=data.piece("|",7)
	if node=15 set x.piece("|",17)=data.piece("|",4)
	if node=15 set x.piece("|",18)=data.piece("|",8)
	if node=15 set x.piece("|",20)=data.piece("|",9)
	if node=15 set x.piece("|",23)=data.piece("|",6)
	if node=30 set x.piece("|",1)=data.piece("|",21)
	quit

	/*------------------------------------------------------------------
	 The Interest Disbursement Option specified the action at 
	 maturity as well as the action at each posting 
	 interval for available interest.  With the introduction of 
	 Interest Maturity Option, the Interest Disbursement Option no longer
	 applies to maturity.  However, most institutions using 
	 PROFILE/Anyware have already used the "old" processing to 
	 create and maintain accounts.
	 This conversion utility will find all open deposit accounts 
	 with a maturity date and a non-null Interest Disbursement Option, 
	 and default the Interest Maturity Option from the 
	 disbursement option.  The utility will also copy the Interest
	 Disbursement Option to the Interest Maturity Option at the 
	 product type level.
	 */


	//----------------------------------------------------------------------
MOON	// Convert accounts , from old version to new version
	// reference CNV61IMO.m
	//-----------------------------------------------------------------------

	type Public Number lseq,mdt,STAT
	type Public Date MDT
	type Public String statem,temp(),trans(),xkeys,xmmm,xseq,xtra,zkeys
	type String ztra,zstatem,zglobal,zgbl,cls,s428
	type Number fseq,XCID

        set XCID=xkeys.piece(",",1),fseq=""
        set xseq=""
        for  set xseq=trans(xseq).order() quit:xseq.isNull()  do {
		set ztra=trans(xseq)
		set zglobal=ztra.extract(ztra.find("^"),ztra.find("=")-2)
		set zgbl=zglobal.extract(1,zglobal.find("(")-2)
		set zkeys=zglobal.extract(zglobal.find("("),zglobal.find(")")-2)
		set zstatem=ztra.extract(ztra.find("="),ztra.length())
		if (zgbl="ACN"),(zkeys.length(",")=2),(zkeys.piece(",",2)=428),(zkeys.piece(",",1)=XCID) set s428=zstatem,fseq=xseq
		if (zgbl="ACN"),(zkeys.length(",")=2),(zkeys.piece(",",2)=50),(zkeys.piece(",",1)=XCID) set cls=zstatem.piece("|",2)
		if (zgbl="ACN"),(zkeys.length(",")=2),(zkeys.piece(",",2)=53),(zkeys.piece(",",1)=XCID) set mdt=zstatem.piece("|",2)
        	}

	if (cls.get()="D"),('mdt.get().isNull()) do { quit
		if 's428.get().isNull() do { quit
			set s428.piece("|",17)=statem.piece("|",11)
			set trans(fseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",428)="_s428
			}

		else  if (fseq.get().isNull()) do { quit
		      	type RecordDEP dep=Db.getRecord("DEP","CID=:XCID")
		      	set xmmm=dep.aiirn_"|"_dep.aiintfre_"|"_dep.aiindex
		      	set xmmm=xmmm_"|"_dep.aiacrf_"|"_dep.airdet_"|"_dep.aiiopt_"|"_dep.aiipf
		      	set xmmm=xmmm_"|"_dep.aiinp_"|"_dep.aiipld_"|"_dep.aiichnd_"|"_dep.aiichld
		      	set xmmm=xmmm_"|"_dep.aiinttrf_"|"_dep.aiextacn_"|"_dep.aiextseq 
		      	set xmmm=xmmm_"|"_dep.extseq_"|"_dep.extacn_"|"_dep.imo_"|"_dep.offproc
		      	set xmmm=xmmm_"|"_dep.maxseg_"|"_dep.aiacr_"|"_dep.maxempc_"|"_dep.maxemprc
		      	set xmmm=xmmm_"|"_dep.pratio_"|"_dep.segacr_"|"_dep.segmdd_"|"_dep.segper
		      	set xmmm=xmmm_"|"_dep.wdord_"|"_dep.wdprio_"|"_dep.segzirn_"|"_dep.ipimrl
		      	set xmmm=xmmm_"|"_dep.ipimppy_"|"_dep.ipimpytd_"|"_dep.ipinmpl_"|"_dep.ipinmpy
		      	set xmmm=xmmm_"|"_dep.ipinmytd_"|"_dep.ipmpl_"|"_dep.ipmppy_"|"_dep.ipmpytd
		      	set xmmm=xmmm_"|"_dep.ipnmpl_"|"_dep.ipnmppy_"|"_dep.ipnmpytd_"|"_dep.prena
		      	set xmmm=xmmm_"|"_dep.taspm_"|"_dep.taspnm_"|"_dep.taiams_"|"_dep.taianms
		      	set xmmm=xmmm_"|"_dep.taims_"|"_dep.tainms_"|"_dep.tnums_"|"_dep.tsmpb_"|"_dep.tsnmpb
		      	set xmmm=xmmm_"|"_dep.empytd_"|"_dep.emprytd_"|"_dep.segpopt_"|"_dep.aiintmat_"|"_dep.aiintspr
		      	set xmmm=xmmm_"|"_dep.airndmtd_"|"_dep.totwfr_"|"_dep.pengr_"|"_dep.swpi_"|"_dep.swri
        	      	set xmmm.piece("|",17)=statem.piece("|",11)
              		set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",428)="_xmmm
	              	set lseq=lseq+1
			}
        	}
	else  do {
              	type ResultSet rs=Db.select("STAT,MDT","DEP","CID=:XCID")
        	if rs.next() set MDT=rs.getCol("MDT"),STAT=rs.getCol("STAT")
		if MDT.isNull(),('STAT.isNull()) quit
        	if ('STAT.isNull()),(STAT'=4),(STAT'=5) do { quit
			type RecordDEP dep=Db.getRecord("DEP","CID=:XCID")
		      	set xmmm=dep.aiirn_"|"_dep.aiintfre_"|"_dep.aiindex
		      	set xmmm=xmmm_"|"_dep.aiacrf_"|"_dep.airdet_"|"_dep.aiiopt_"|"_dep.aiipf
		      	set xmmm=xmmm_"|"_dep.aiinp_"|"_dep.aiipld_"|"_dep.aiichnd_"|"_dep.aiichld
		      	set xmmm=xmmm_"|"_dep.aiinttrf_"|"_dep.aiextacn_"|"_dep.aiextseq 
		      	set xmmm=xmmm_"|"_dep.extseq_"|"_dep.extacn_"|"_dep.imo_"|"_dep.offproc
		      	set xmmm=xmmm_"|"_dep.maxseg_"|"_dep.aiacr_"|"_dep.maxempc_"|"_dep.maxemprc
		      	set xmmm=xmmm_"|"_dep.pratio_"|"_dep.segacr_"|"_dep.segmdd_"|"_dep.segper
		      	set xmmm=xmmm_"|"_dep.wdord_"|"_dep.wdprio_"|"_dep.segzirn_"|"_dep.ipimrl
		      	set xmmm=xmmm_"|"_dep.ipimppy_"|"_dep.ipimpytd_"|"_dep.ipinmpl_"|"_dep.ipinmpy
		      	set xmmm=xmmm_"|"_dep.ipinmytd_"|"_dep.ipmpl_"|"_dep.ipmppy_"|"_dep.ipmpytd
		      	set xmmm=xmmm_"|"_dep.ipnmpl_"|"_dep.ipnmppy_"|"_dep.ipnmpytd_"|"_dep.prena
		      	set xmmm=xmmm_"|"_dep.taspm_"|"_dep.taspnm_"|"_dep.taiams_"|"_dep.taianms
		      	set xmmm=xmmm_"|"_dep.taims_"|"_dep.tainms_"|"_dep.tnums_"|"_dep.tsmpb_"|"_dep.tsnmpb
		      	set xmmm=xmmm_"|"_dep.empytd_"|"_dep.emprytd_"|"_dep.segpopt_"|"_dep.aiintmat_"|"_dep.aiintspr
		      	set xmmm=xmmm_"|"_dep.airndmtd_"|"_dep.totwfr_"|"_dep.pengr_"|"_dep.swpi_"|"_dep.swri
		      	set xmmm.piece("|",17)=statem.piece("|",11)
			if 's428.isNull() do { quit
				set s428.piece("|",17)=statem.piece("|",11)
				set trans(fseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",428)="_s428
				}
		      	set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",428)="_xmmm
			set lseq=lseq+1
			}
		}
	quit


	//----------------------------------------------------------------------
MONO	// Convert accounts , from new version to old version
	// reference CNV61IMO.m
	//-----------------------------------------------------------------------

	type Public String xkeys,statem,trans(),temp(),xseq,xtra,xmmm
	type Public Number lseq,seq,STAT
	type String ztra,zstatem,zglobal,zgbl,cls,s54,zkeys
	type Number fseq,XCID

	set XCID=xkeys.piece(",",1)

	set xseq=""
	for  set xseq=trans(xseq).order() quit:(xseq.isNull())  do {
		set ztra=trans(xseq)
		set zglobal=ztra.extract(ztra.find("^"),ztra.find("=")-2)
		set zgbl=zglobal.extract(1,zglobal.find("(")-2)
		set zkeys=zglobal.extract(zglobal.find("("),zglobal.find(")")-2)
		set zstatem=ztra.extract(ztra.find("="),ztra.length())
		if (zgbl="ACN"),(zkeys.length(",")=2),(zkeys.piece(",",2)=54),(zkeys.piece(",",1)=XCID) set s54=zstatem,fseq=xseq
		if (zgbl="ACN"),(zkeys.length(",")=2),(zkeys.piece(",",2)=50),(zkeys.piece(",",1)=XCID) set cls=zstatem.piece("|",2)
		}

	if (cls.get()="D") do { quit

		if 's54.get().isNull() do { quit
			set s54.piece("|",11)=statem.piece("|",17)
			set trans(fseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",54)="_s54
			}
		else  if (fseq.get().isNull()) do { quit
			type RecordDEP dep=Db.getRecord("DEP","CID=:XCID")
			set s54=dep.posacr_"|"_dep.cmp_"|"_dep.acs_"|"_dep.intchk
			set s54=s54_"|"_dep.aecamt_"|"_dep.iytd_"|"_dep.ipy_"|"_dep.ipl_"|"_dep.bwy
			set s54=s54_"|"_dep.bwp_"|"_dep.iopt_"|"_dep.itrf_"|"_dep.daa_"|"_dep.bwf
			set s54=s54_"|"_dep.intdef_"|"_dep.negacr_"|"_dep.ipnd
			set s54=s54_"|"_dep.minint_"|"_dep.trexd_"|"_dep.trate_"|"_dep.iwcp
			set s54=s54_"|"_dep.minavg_"|"_dep.negiytd_"|"_dep.negipy_"|"_dep.negipl
			set s54=s54_"|"_dep.intwr_"|"_dep.dbi_"|"_dep.daa1_"|"_dep.dbi1_"|"_dep.daa2
			set s54=s54_"|"_dep.dbi2_"|"_dep.cmp1_"|"_dep.cmp2_"|"_dep.nr
			set s54=s54_"|"_dep.bnot1dt_"|"_dep.bnot2dt_"|"_dep.resint_"|"_dep.ipdtrf
			set s54=s54_"|"_dep.negacrun_"|"_dep.ipda_"|"_dep.hirn_"|"_dep.intwcalc
			set s54=s54_"|"_dep.nrposicy_"|"_dep.nrposipy_"|"_dep.nrwacy
			set s54=s54_"|"_dep.nrwapy_"|"_dep.nrwhcy_"|"_dep.nrwhpy
			set s54=s54_"|"_dep.nrnegicy_"|"_dep.nrnegipy_"|"_dep.nrpcy
			set s54=s54_"|"_dep.nrppy_"|"_dep.lifjur_"|"_dep.itro_"|"_dep.daa3
			set s54=s54_"|"_dep.dbi3_"|"_dep.cmp3_"|"_dep.daa4_"|"_dep.dbi4_"|"_dep.cmp4
			set s54=s54_"|"_dep.ipdaadj_"|"_dep.lbacrdt_"|"_dep.proind_"|"_dep.probal
			set s54=s54_"|"_dep.promat_"|"_dep.prospr_"|"_dep.prornd_"|"_dep.cnotdt_"|"_dep.fwy
			set s54=s54 _"|"_dep.fwp _"|"_dep.swy _"|"_dep.swp
			set s54.piece("|",11)=statem.piece("|",17)
			set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",54)="_s54
			kill trans(seq)
        	      	set lseq=lseq+1
			}
		}
	else  do {
        	type ResultSet rs=Db.select("STAT","DEP","CID=:XCID")
		if rs.next() set STAT=rs.getCol("STAT")

        	if (STAT'=""),(STAT'=4),(STAT'=5) do { quit
			if 's54.isNull() do { quit
				set s54.piece("|",11)=statem.piece("|",17)
				set trans(fseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",54)="_s54
				}

			kill trans(seq)
			type RecordDEP dep=Db.getRecord("DEP","CID=:XCID")
			set xmmm=dep.posacr_"|"_dep.cmp_"|"_dep.acs_"|"_dep.intchk
			set xmmm=xmmm_"|"_dep.aecamt_"|"_dep.iytd_"|"_dep.ipy_"|"_dep.ipl_"|"_dep.bwy
			set xmmm=xmmm_"|"_dep.bwp_"|"_dep.iopt_"|"_dep.itrf_"|"_dep.daa_"|"_dep.bwf
			set xmmm=xmmm_"|"_dep.intdef_"|"_dep.negacr_"|"_dep.ipnd
			set xmmm=xmmm_"|"_dep.minint_"|"_dep.trexd_"|"_dep.trate_"|"_dep.iwcp
			set xmmm=xmmm_"|"_dep.minavg_"|"_dep.negiytd_"|"_dep.negipy_"|"_dep.negipl
			set xmmm=xmmm_"|"_dep.intwr_"|"_dep.dbi_"|"_dep.daa1_"|"_dep.dbi1_"|"_dep.daa2
			set xmmm=xmmm_"|"_dep.dbi2_"|"_dep.cmp1_"|"_dep.cmp2_"|"_dep.nr
			set xmmm=xmmm_"|"_dep.bnot1dt_"|"_dep.bnot2dt_"|"_dep.resint_"|"_dep.ipdtrf
			set xmmm=xmmm_"|"_dep.negacrun_"|"_dep.ipda_"|"_dep.hirn_"|"_dep.intwcalc
			set xmmm=xmmm_"|"_dep.nrposicy_"|"_dep.nrposipy_"|"_dep.nrwacy
			set xmmm=xmmm_"|"_dep.nrwapy_"|"_dep.nrwhcy_"|"_dep.nrwhpy
			set xmmm=xmmm_"|"_dep.nrnegicy_"|"_dep.nrnegipy_"|"_dep.nrpcy
			set xmmm=xmmm_"|"_dep.nrppy_"|"_dep.lifjur_"|"_dep.itro_"|"_dep.daa3
			set xmmm=xmmm_"|"_dep.dbi3_"|"_dep.cmp3_"|"_dep.daa4_"|"_dep.dbi4_"|"_dep.cmp4
			set xmmm=xmmm_"|"_dep.ipdaadj_"|"_dep.lbacrdt_"|"_dep.proind_"|"_dep.probal
			set xmmm=xmmm_"|"_dep.promat_"|"_dep.prospr_"|"_dep.prornd_"|"_dep.cnotdt_"|"_dep.fwy
			set xmmm=xmmm _"|"_dep.fwp _"|"_dep.swy _"|"_dep.swp
		 	set xmmm.piece("|",11)=statem.piece("|",17)
			set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^ACN("_XCID_",54)="_xmmm
			set lseq=lseq+1
			}
		}
	quit


	//---------------------------------------------------------------------
ZT	//Error trap - don't write to disk, save to file, trigger alert
	//---------------------------------------------------------------------
	type Public String ET,IO,IOPAR,IOTYP,RM,%ZIO
	type Public Number ER,MERROR
	type String TMP
	type IO io3

        set $ZT="H"
	set ER=$$ETLOC^%ZT
	set ER=ER.piece(",",1)

	do EVNTLOG^%ZFUNC(ER,MERROR)

        set %ZIO="REPL_FILTER_ERROR.LOG"
	set IO=%ZIO

	set io3=Class.new("IO")
	set io3.fileName=IO
	set io3.openParams="NEW"
	do io3.open()

	catch ERROR {
		set ET=ERROR.type

		// Invalid file ~p1
		set RM=$$^MSG(1334,IO)
		}
	if ER quit

	set TMP=%CurrentDate_","_%CurrentTime
	do io3.write(.TMP)
	do io3.write("")
	set TMP=$ZS
	do io3.write(.TMP)

        ZSH "*"

	do io3.close()
	halt
	quit


	//-------------------------------------------------------------------
CREATE  /*The section will be used to automatically generate code for
	  the filter, which relect two parts: scheme change, added file
	  and deleted file . It is used internal only.
	  Following below steps to generate codes for the filter:
	  step1 : scan TW for scheme change between different version
	  step2 : D CREATE^URECFIL to create a output file that reflect 
		  the scheme change.
	  step3 : parse the output file to URECFIL.m for scheme change filter.
	----------------------------------------------------------------------
	*/

	// TMPXX(gbl,keys+node,piece)=REQ1|REQ2|COMP1|COMP2|NODE1|NODE2|POS1|POS2|default|file.data

	type Public String DI,MS2,%READ,RM,%TAB,OK,VFMQ,XCHECK,XDI,XNOD,XPOS,XXFILE
	type Public String ADDFILE,DELFILE,COLDNEW,data,IO,KEY,IO2,REQ,sqlsta,TYP,PRO,XXX,ZZZ
	type Public Number COMP1,EOT,ER,ET,sqlcnt,XREQ
	type String LINE,STATU,TYP1,TYP2,REQ1,REP2,DATA1,FID,KEYS,GLOBAL,NOD,DATA2,TMP
	type Number NOD,POS,KEYNODE,ITEM,COMP,BEGIN

	set %TAB("IO2")="/DES=Input File/TYP=T/LE=50/REQ/XPP=D IMPP^DBSDDIMP"
        set %TAB("IO")="/DES=Output Device/TBL=[DEVICE]DEVNAME:NOVAL/XPP=D ERRF^URECFIL S %EXT=1 D ^SCAIO"
        set MS2="Create Reference Array for Filter"
        set %READ="@MS2/REV/CEN,,IO2,IO/REQ"
	do ^UTLREAD

	// Invalid file
        if IO=IO2 set ER=1,RM=$$^MSG(1334,IO) do CREATE
        if VFMQ="Q" quit

	type IO io=Class.new("IO")
	set io.fileName=IO2
	set io.openParams="READ"
	do io.open()

	catch ERROR {
		set ET=ERROR.type

		// Invalid file
		set RM=$$^MSG(1334,IO2)
		}
	if ER quit

	type IO io1=Class.new("IO")
	set io1.fileName=IO
	set io1.openParams="WRITE"
	do io1.open()

	catch ERROR {
		set ET=ERROR.type

		// Invalid file
		set RM=$$^MSG(1334,IO2)
		}
	if ER quit

	do Db.fastDelete("TMPRPT0","PID=%ProcessID")

	set STATU=""
	set LINE=""

	for  set LINE=io1.read(EOT) quit:EOT'=0  do {
		if (LINE.length(",")=2) do { quit
			set XXFILE=LINE.piece(",",2)
			if (XXFILE.piece("=",2)="+")!(XXFILE.piece("=",2)="-") do {
				type RecordTMPRPT1 tmprpt1=Db.getRecord("TMPRPT1","PID=:%ProcessID,KEY1=:XXFILE",1)
				set tmprpt1.data=XXFILE.piece("=",2)
				do tmprpt1.save()
				}
			}

		type RecordTMPRPT1 tmprpt1=Db.getRecord("TMPRPT1","PID=:%ProcessID,key1=:LINE",1)
		if (LINE.length(",")>2),tmprpt1.getMode() quit

		if (LINE.length(",")=3),((LINE.piece("=",2)="+")!(LINE.piece("=",2)="C")) do { quit
			if ('GLOBAL.get().isNull()),('KEYNODE.get().isNull()),('POS.get().isNull()),Db.isDefined("TMPRPT3","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE,key3=:POS") do {

				type ResultSet rs=Db.select("DATA","TMPRPT3","PID=:%ProcessID AND KEY1=:GLOBAL AND KEY2=:KEYNODE AND KEY3=:POS")
				if rs.next() set XCHECK=rs.getCol("DATA")
				if (XCHECK.piece("|",1)=""),(XCHECK.piece("|",2)=""),(XCHECK.piece("|",3)=""),(XCHECK.piece("|",4)=""),(XCHECK.piece("|",5)=""),(XCHECK.piece("|",6)=""),(XCHECK.piece("|",7)=""),(XCHECK.piece("|",8)="") do Db.fastDelete("TMPRPT3","PID=:%ProcessID,KEY1=:GLOBAL,KEY2=:KEYNODE,KEY3=:POS")
				}

			set COMP=0
			if LINE.piece("=",2)="+" set STATU="+" 
			if LINE.piece("=",2)="C" set STATU="C"
			set FID=LINE.piece(",",2)
			set ITEM=LINE.piece(",",3),ITEM=ITEM.piece("=",1)

			type ResultSet rs1=Db.select("GLOBAL,ACCKEYS","DBTBL1","FID=:FID")
			if rs1.next() do {
				set GLOBAL=rs1.getCol("GLOBAL")
				set KEYS=rs1.getCol("ACCKEYS")
				}
			if GLOBAL.isNull() set COMP1=1 quit

			type ResultSet rs2=Db.select("NOD,POS","DBTBL1D","FID=:FID and DI=:ITEM")
			set NOD=rs2.getCol("NOD")
			set POS=rs2.getCol("POS")

			if (NOD.isNull()),(POS.isNull()),(STATU="+") set COMP=1 quit

			if (NOD.isNull()),(POS.isNull()),(STATU="C") do { quit
				type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID=:FID,DI=:ITEM")
				set XNOD=dbtbl1d.nod
				set XPOS=dbtbl1d.pos
				set XREQ=dbtbl1d.req
				if (XPOS.isNull()),(XNOD.isNull()) set COMP=1 quit
				else  if (XPOS'=""),(XNOD'="") do {
					set POS=XPOS,NOD=XNOD
					type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE,key3=:POS",1)
					set tmprpt3.data=XREQ_"||||"_NOD_"||"_POS_"|||"_ITEM_"|"_STATU
					do tmprpt3.save()
					}
				}

			if NOD?1N1"*" set POS=NOD,KEYNODE=KEYS
			else  if NOD=KEYS.piece(",",KEYS.length(",")) set KEYNODE=KEYS
			else  set KEYNODE=KEYS_","_NOD

			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE,key3=:POS",1)
			set tmprpt3.data="|||||||||"_FID_"."_ITEM_"|"_STATU
			do tmprpt3.save()
			}

		if (LINE.length(",")=3),(LINE.piece("=",2)="-") do { quit
			if Db.isDefined("TMPRPT0","PID=:%ProcessID") do {
				type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE,key3=:POS",1)
				set XCHECK=tmprpt3.data
				if (XCHECK.piece("|",1)=""),(XCHECK.piece("|",2)=""),(XCHECK.piece("|",3)=""),(XCHECK.piece("|",4)=""),(XCHECK.piece("|",5)=""),(XCHECK.piece("|",6)=""),(XCHECK.piece("|",7)=""),(XCHECK.piece("|",8)="") do Db.fastDelete("TMPRPT3","PID=:%ProcessID,KEY1=:GLOBAL,KEY2=:KEYNODE,KEY3=:POS")
				}

			set STATU="-"
			set COMP=0
			set FID=LINE.piece(",",2)
			set ITEM=LINE.piece(",",3),ITEM=ITEM.piece("=",1)

			type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID")
			set GLOBAL=dbtbl1.global				
			if GLOBAL.isNull() set COMP=1 quit
			set KEYS=dbtbl1.acckeys	

			type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID,DI=:ITEM")
			set NOD=dbtbl1d.nod
			set POS=dbtbl1d.pos
			set TYP=dbtbl1d.typ
			set REQ=dbtbl1d.req
			if (NOD.isNull()),(POS.isNull()) set COMP=1 quit

			if NOD?1N1"*" set POS=NOD,KEYNODE=KEYS
			else  if NOD=KEYS.piece(",",KEYS.length(",")) set KEYNODE=KEYS
			else  set KEYNODE=KEYS_","_NOD

			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE,key3=:POS",1)
			set tmprpt3.data=REQ_"||||"_NOD_"||"_POS_"|||"_FID_"."_ITEM_"|"_STATU
			do tmprpt3.save()
			set STATU="-"
			}

		set ZZZ=LINE.piece("=",1)
		if (ZZZ.length(",")=4),(COMP'=1) do { quit
			set XXX=LINE.piece(",",4),PRO=XXX.piece("=",1),COLDNEW=LINE.piece("=",2)
			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE,key3=:POS",1)
			if STATU="+" do { quit
				if PRO="REQ" set tmprpt3.data="|"_COLDNEW.piece("|",2)
				}
			if STATU="-" do { quit
				if PRO="REQ" set tmprpt3.data=COLDNEW.piece("|",1)
				}

			if STATU="C" do { quit
				if PRO="REQ",('KEYS[ITEM) set tmprpt3.data=COLDNEW.piece("|",1),tmprpt3.data="|"_COLDNEW.piece("|",2)
				if PRO="COMP" do { quit
					if (COLDNEW.piece("|",1)?1"$$".E),(COLDNEW.piece("|",2)?1"$$".E) quit 
					set tmprpt3.data="||"_COLDNEW.piece("|",1),tmprpt3.data="|||"_COLDNEW.piece("|",2)
					}
				if PRO="NODE" set tmprpt3.data="||||"_COLDNEW.piece("|",1),tmprpt3.data="|||||"_COLDNEW.piece("|",2)
				if PRO="POS" set tmprpt3.data="||||||"_COLDNEW.piece("|",1),tmprpt3.data="|||||||"_COLDNEW.piece("|",2)
				do tmprpt3.save()
				}
			}
		}

	do Db.fastDelete("TMPRPT0","PID=%ProcessID")

	set FID=""
	type ResultSet rs3=Db.select("KEY1","TMPRPT1","PID=:%ProcessID")
	if rs3.next() do { quit:FID.isNull()
		set FID=rs3.getCol("KEY1")
		if FID="+" do {
			type ResultSet rs4=Db.select("GLOBAL,ACCKEYS","DBTBL1","FID=:FID")
			if rs4.next() do {
				set GLOBAL=rs4.getCol("GLOBAL")
				set KEYS=rs4.getCol("ACCKEYS")
				}

			type ResultSet rs5=Db.select("NOD,POS,DI","DBTBL1D","FID=:FID and CMP=''")
			while rs5.next() do {
				set NOD=rs5.getCol("NOD"),POS=rs5.getCol("POS"),DI=rs5.getCol("DI")
				if NOD.isNull(),(POS.isNull()) quit
				if NOD?1N1"*" set POS=NOD,KEYNODE=KEYS
				else  if NOD=KEYS.piece(",",KEYS.length(",")) set KEYNODE=KEYS
				else  set KEYNODE=KEYS_","_NOD
				type RecordTMPRPT2 tmprpt2=Db.getRecord("TMPRPT2","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE",1)
				set tmprpt2.data=FID_"."_DI_"|+"
				do tmprpt2.save()
       		 		}
			}
		else  if FID="-" do {
			type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID")
			set GLOBAL=dbtbl1.global
			if GLOBAL.isNull() quit
			set KEYS=dbtbl1.acckeys
			set ITEM=""
			type ResultSet rset=Db.select("DI,NOD,POS","DBTBL1D","%LIBS='SYSDEV' and FID=:FID")
			if rset.next() do { quit:ITEM.isNull()
				set ITEM=rset.getCol("DI")
				set NOD=rset.getCol("NOD")
				set POS=rset.getCol("POS")
				if NOD?1N1"*" set POS=NOD,KEYNODE=KEYS
				else  if NOD=KEYS.piece(",",KEYS.length(",")) set KEYNODE=KEYS
				else  set KEYNODE=KEYS_","_NOD
				type RecordTMPRPT2 tmprpt2=Db.getRecord("TMPRPT2","PID=:%ProcessID,key1=:GLOBAL,key2=:KEYNODE",1)
				set tmprpt2.data=FID_"."_ITEM_"|-"
				do tmprpt2.save()
				}
			}
		}

		set GLOBAL=""

		type ResultSet rss=Db.select("KEY1","TMPRPT1","PID=:%ProcessID")
		if rss.next() do { quit:GLOBAL.isNull()
			set GLOBAL=rss.getCol("KEY1")
			set KEY=""
			type ResultSet rs6=Db.select("KEY2,DATA","TMPRPT2","PID=:%ProcessID AND KEY1=:GLOBAL")
			if rs6.next() do { quit:KEY.isNull()
			set KEY=rs6.getCol("KEY2")
	       		if (rs6.getCol("DATA").piece("|",2)="+") do { quit
				if ((GLOBAL="UTBLDFTD")!(GLOBAL="UTBLDFTL")!(GLOBAL="UTBLCTL")!(GLOBAL="UTBLDFTC")),(KEY.length(",")=2) quit
				if ADDFILE.data()=0 do {
					do io1.write("")
					set TMP="ADDFILE(GBL,NUM,KEYS)   ;"
					do io1.write(.TMP)
					do io1.write("")
					}
				set ADDFILE(GLOBAL,KEY)=rs6.getCol("DATA")
				set TMP="        "_"set "_ADDFILE(GLOBAL,KEY)
				do io1.write(.TMP)
       				}
			}
		}

	set TMP="        "_"Q"
	do io1.write(.TMP)

	set GLOBAL=""
	type ResultSet rs8=Db.select("KEY1","TMPRPT1","PID=:%ProcessID")
	if rs8.next() do { quit:GLOBAL.isNull()
		set GLOBAL=rs8.getCol("KEY1")
		set KEY=""
		type ResultSet rs9=Db.select("KEY2","TMPRPT2","PID=:%ProcessID AND KEY1=:GLOBAL")
		if rs9.next() do { quit:KEY.isNull()
			set KEY=rs9.getCol("KEY2")
			type ResultSet rs10=Db.select("DATA","TMPRPT2","PID=:%ProcessID AND KEY1=:GLOBAL AND KEY2=:KEY")
			if rs10.next() do { 
				if rs10.getCol("DATA").piece("|",2)="-" do {
					if DELFILE.data()=0 do {
						do io1.write("")
						set TMP="DELETEFILE(GBL,NUM,KEYS)   ;"
						do io1.write(.TMP)
						do io1.write("")
						}
					set DELFILE(GLOBAL,KEY)=rs10.getCol("DATA")
					set TMP="        "_"set "_DELFILE(GLOBAL,KEY)
       					}
				}
			}
		}

	set TMP="        "_"Q"
	do io1.write(.TMP)
	do io1.write("")
	set TMP="        "_";-------------------------------------------------------"
	do io1.write(.TMP)

	do SCHEME(.io1,.io)
	quit


SCHEME(IO io1,IO io2)	//

	type public String DATA,PIECE
	type String DATA1,KEY,TMP,XGBL,ZFROMON,ZFROMNO
		
	set XGBL=""
	
	type ResultSet rs0=Db.select("KEY1","TMPRPT1","PID=:%ProcessID")
	if rs0.next() do { quit:XGBL.isNull()
		set XGBL=rs0.getCol("KEY1")
		set KEY=""
		type ResultSet rss1=Db.select("KEY2","TMPRPT2","PID=:%ProcessID AND KEY1=:XGBL")
		if rss1.next() do { quit:KEY.isNull()
			set KEY=rss1.getCol("KEY2")
			set PIECE=""
			type ResultSet rss2=Db.select("KEY3","TMPRPT3","PID=:%ProcessID AND KEY1=:XGBL AND KEY2=:KEY")
			if rss2.next() do { quit:PIECE.isNull()
				set PIECE=rss2.getCol("KEY3")
				type ResultSet rss3=Db.select("DATA","TMPRPT3","PID=:%ProcessID AND KEY1=:XGBL AND KEY2=:KEY AND KEY3=:PIECE")
				if rss3.next() set DATA=rss3.getCol("DATA") 
				if DATA.piece("|",11)="+" do ADDITEM(.io1)  quit
				else  if DATA.piece("|",11)="C" do {
					if ZFROMNO.data()=0 do {
						set TMP="NOINIT   ;"
						do io1.write(TMP)
						do io1.write("")
						}
					set ZFROMNO(XGBL,KEY,PIECE)=rss3.getCol("DATA")
					set TMP="        "_"S "_ZFROMNO(XGBL,KEY,PIECE)
					do io1.write(.TMP)
					}
				}
			}
		}

	set XGBL=""

	type ResultSet rss0=Db.select("KEY1","TMPRPT1","PID=:%ProcessID")
	if rss0.next() do { quit:XGBL.isNull()
		set XGBL=rss0.getCol("KEY1")
		set KEY=""
		
		type ResultSet rss1=Db.select("KEY2","TMPRPT2","PID=:%ProcessID AND KEY1=:XGBL")
		if rss1.next() do { quit:KEY.isNull()
			set KEY=rss1.getCol("KEY2")
			set PIECE=""
			
			type ResultSet rss2=Db.select("KEY3","TMPRPT3","PID=:%ProcessID AND KEY1=:XGBL AND KEY2=:KEY")
			if rss2.next() do { quit:PIECE.isNull()
				
				set PIECE=rss2.getCol("KEY3")
				type ResultSet rss3=Db.select("DATA","TMPRPT3","PID=:%ProcessID AND KEY1=:XGBL AND KEY2=:KEY AND KEY3=:PIECE")
				if rss3.next() set DATA1=rss3.getCol("DATA")
				else  if DATA1.piece("|",11)="-" do DELITEM(.io1)  quit
				else  if DATA1.piece("|",11)="C" do {
					if ZFROMON.data()=0 do {
						set TMP="ONINIT   ;"
						do io1.write(.TMP)
						do io1.write("")
						}
					set ZFROMON(XGBL,KEY,PIECE)=rss3.getCol("DATA")
					set TMP="        "_"S "_ZFROMON(XGBL,KEY,PIECE)
					do io1.write(.TMP)
					}
				}
			}
		}

	do io1.close()
	do io2.close()
	quit


ADDITEM(IO io1)	//

	type public String KEY,PIECE,XGBL,ZFROMNO
	type String TMP

	if ZFROMNO.data()=0 do {
		set TMP="NOINIT   ;"
		do io1.write(.TMP)
		do io1.write("")
		}
	type ResultSet rs=Db.select("DATA","TMPRPT3","PID=:%ProcessID AND KEY1=:XGBL AND KEY2=:KEY AND KEY3=:PIECE")
	if rs.next() set ZFROMNO(XGBL,KEY,PIECE)=rs.getCol("DATA")
	set TMP="        "_"S "_ZFROMNO(XGBL,KEY,PIECE)
	do io1.write(.TMP)
	quit


DELITEM(IO io1)	//
	type Public String KEY,PIECE,XGBL,ZFROMON
	type String TMP

	if ZFROMON.data()=0 do {
		set TMP="ONINIT   ;"
		do io1.write(.TMP)
		do io1.write("")
		}

	type ResultSet rs=Db.select("DATA","TMPRPT3","PID=:%ProcessID AND KEY1=:XGBL AND KEY2=:KEY AND KEY3=:PIECE")
	if rs.next() set ZFROMON(XGBL,KEY,PIECE)=rs.getCol("DATA")

	set TMP="        "_"S "_ZFROMON(XGBL,KEY,PIECE)
	do io1.write(.TMP)
	quit


ERRF    //
	type Public Number ER
	type Public String IO2,RM,X
	
	// Invalid file
        if X=IO2 set ER=1,RM=$$^MSG(1334,X) quit
	quit


        //---------------------------------------------------------------------
ADDFILE // Added new files, created bu CREATE section automatically
	// Keep common lines for version comparision
	//---------------------------------------------------------------------
	// ADDFILE(global,key+node)=file.data|+

	type String ADDFILE()

        set ADDFILE("ACN","CID,121,CPLAN")="COMPLNCID.REMPRD|+"
        set ADDFILE("ACN","CID,200,SEGMENT")="DEPSEG.WFR|+"
        set ADDFILE("ACN","CID,201,YEAR")="DEPYR.YEAR|+"
        set ADDFILE("AGENT","AGENT")="AGENT.START|+"
        set ADDFILE("AGENT","AGENT,""10"",CPLAN")="AGENTCOM.SMARGIN|+"
        set ADDFILE("AGENT","AGENT,20,PFT")="AGENTPFT.YEBALPY|+"
        set ADDFILE("COMDEF","CID,CPLAN,SEQ")="COMDEF.SEQ|+"
        set ADDFILE("STBL","""AIRD"",AIRD")="STBLAIRD.DESC|+"
        set ADDFILE("STBL","""APPMOD"",APPMOD")="STBLAPPMOD.DES|+"
        set ADDFILE("STBL","""CMTH"",CMTH")="STBLCMTH.DESCR|+"
        set ADDFILE("STBL","""COMAMTH"",COMAMTH")="STBLCOMAMTH.DESCR|+"
        set ADDFILE("STBL","""COMBALPD"",BALPD")="STBLCOMBALPD.DESCR|+"
        set ADDFILE("STBL","""COMBALTP"",BALTYP")="STBLCOMBALTP.DESCR|+"
        set ADDFILE("STBL","""COMPMTH"",COMPMTH")="STBLCOMPMTH.DESCR|+"
        set ADDFILE("STBL","""COMTYPE"",COMTYPE")="STBLCOMTYPE.DESCR|+"
        set ADDFILE("STBL","""SAOP"",SAOP")="STBLSAOP.SAOP|+"
        set ADDFILE("STBL","""SEGPOPT"",OPT")="STBLSEGPOPT.OPT|+"
        set ADDFILE("STBL","""SMDO"",SMDO")="STBLSMDO.SMDO|+"
        set ADDFILE("STBL","""WDORD"",WDORD")="STBLWDORD.WDORD|+"
        set ADDFILE("STBL","""WDPRIOR"",WDPRIOR")="STBLWDPRIOR.WDPRIOR|+"
        set ADDFILE("UTBL","""CINDEX"",CINDEX")="UTBLCOMINDX.INDTYP|+"
        set ADDFILE("UTBL","""CINDEX"",CINDEX,EFD,MTIER")="UTBLCOMINDX1.RATE|+"
        set ADDFILE("UTBL","""COMGRP"",COMGRP")="UTBLCOMGRPT.DESCR|+"
        set ADDFILE("UTBL","""COMGRP"",COMGRP,CPLAN")="UTBLCOMGRP.CPLAN|+"
        set ADDFILE("UTBL","""COMPFT""")="UTBLCOMPFTT.JOB|+"
        set ADDFILE("UTBL","""COMPFT"",PFT")="UTBLCOMPFT.QUERY|+"
        set ADDFILE("UTBL","""COMPLN"",CPLAN")="UTBLCOMPLN.TRGRP|+"
        set ADDFILE("UTBL","""DISTRICT"",DISTCODE")="UTBLDISTRICT.SECTOR|+"
        set ADDFILE("UTBL","""DUPCIF"",SEQ")="UTBLDUPCIF.WINPFW|+"
        set ADDFILE("UTBL","""EMPGX"",EMPLGRP,EMPLNO")="UTBLEMPGX.EMPLNO|+"
        set ADDFILE("UTBL","""EMPLGRP"",EMPLGRP")="UTBLEMPLGRP.EMPLGRP|+"
        set ADDFILE("UTBL","""EMPLOYER"",EMPLNO")="UTBLEMPLOYER.TEL|+"
        set ADDFILE("UTBL","""EXPGRTH"",GTBL")="UTBLEXPGRTHT.GTBL|+"
        set ADDFILE("UTBL","""EXPGRTH"",GTBL,EOPBAL")="UTBLEXPGRTH.GTBL|+"
        set ADDFILE("UTBL","""FLDSTAFF"",STAFF")="UTBLFLDSTAFF.STAFF|+"
        set ADDFILE("UTBL","""SECTOR"",SECCODE")="UTBLSECTOR.SECCODE|+"
        set ADDFILE("UTBL","""TRNSET"",TRNSET,SEQ,TRNFIELD")="UTBLTRNSET.TSO|+"
        set ADDFILE("UTBL","""WTREAS1"",RC")="UTBLWTREAS1.UPFDREP|+"
        set ADDFILE("UTBL","""WTREAS2"",EMPID,RC")="UTBLWTREAS2.RC|+"
        set ADDFILE("WTHAUT","CID,AUTNUM")="WTHAUT.WTHTRACC|+"
        set ADDFILE("XREF","""COMAGNT"",CPLAN,AGENT")="XREFCOMAGNT.CPLAN|+"
	set ADDFILE("ACN","CID,428")="DEP.AIIRN|+"
	set ADDFILE("ACN","CID,432")="LN.COMPYTD|+"
	set ADDFILE("CUVAR","""*"",%BATCH")="CUVAR.BATRESTART"
        quit


	//---------------------------------------------------------------------
DELETEFILE	 // deleted files, created by CREATE section automatically
	//----------------------------------------------------------------------
	// DELFILE(global,keys+node)=file.data|-

	type String DELFILE()

	//deleted node
	set DELFILE("ACN","CID,429")="LN.LMTCJD|-"
        quit


        //----------------------------------------------------------------------------
NOINIT	//	new data items ;changed data items, created BY CREATE section
	//----------------------------------------------------------------------------
	// ZFROMNO(gbl,keys+node,piece)=REQ1|REQ2|COMP1|COMP2|NODE1|NODE2|POS1|POS2|default|file.data

	type String ZFROMNO()

        set ZFROMNO("ACN","CID,431",1)="|||||||1||LN.SFRE|C"
        set ZFROMNO("ACN","CID,49",46)="|0|||||||S statem=$P(statem,""~"",1,45)|DEP.MAXACR|+"
        set ZFROMNO("ACN","CID,50",29)="|0|||||||S statem=$P(statem,""~"",1,28)|LN.EMPLBEN|+"
        set ZFROMNO("ACN","CID,54",68)="|0||||||||ACN.PROBAL|+"  ;;??
        set ZFROMNO("ACN","CID,54",69)="|0|||||||S statem=$P(statem,""~"",1,68)|LN.PROMAT|+"
        set ZFROMNO("ACN","CID,55",35)="|0|||||||S statem=$P(statem,""~"",1,34)|LN.FISBAL|+"
        set ZFROMNO("ACN","CID,62",7)="|0||||||||LN.STMDSCD|+"
        set ZFROMNO("ACN","CID,67",2)="|0|||||||S statem=$P(statem,""~"",1)|LN.DDBAL2|+"
        set ZFROMNO("ACN","CID,68",11)="|0|||||||S statem=$P(statem,""~"",1,10)|LN.MEBAL11|+"
        set ZFROMNO("ACN","CID,68",14)="||||||1|14|S $P(statem,""~"",1)=$$P(statem,""~"",14)|LN.USRDEF1|C"
        set ZFROMNO("ACN","CID,68",15)="||||||2|15|S $P(statem,""~"",2)=$$P(statem,""~"",15)|LN.USRDEF2|C"
        set ZFROMNO("ACN","CID,68",16)="||||||3|16|S $P(statem,""~"",3)=$$P(statem,""~"",16)|LN.USRDEF3|C"
        set ZFROMNO("ACN","CID,68",17)="||||||4|17|S $P(statem,""~"",4)=$$P(statem,""~"",17)|LN.USRDEF4|C"
        set ZFROMNO("ACN","CID,68",18)="||||||5|18|S $P(statem,""~"",5)=$$P(statem,""~"",18)|LN.USRDEF5|C"
        set ZFROMNO("ACN","CID,68",19)="||||||6|19|S $P(statem,""~"",6)=$$P(statem,""~"",19)|LN.USRDEF6|C"
        set ZFROMNO("ACN","CID,68",20)="||||||7|20|S $P(statem,""~"",7)=$$P(statem,""~"",20)|LN.USRDEF7|C"
        set ZFROMNO("ACN","CID,68",21)="||||||8|21|S $P(statem,""~"",8)=$$P(statem,""~"",21)|LN.USRDEF8|C"
        set ZFROMNO("ACN","CID,68",22)="||||||9|22|S $P(statem,""~"",9)=$$P(statem,""~"",22)|LN.USRDEF9|C"
        set ZFROMNO("ACN","CID,68",23)="||||||10|23|S $P(statem,""~"",10)=$$P(statem,""~"",23)|LN.USRDEF10|C"
        set ZFROMNO("CIF","ACN,10",17)="|0|||||||S statem=$P(statem,""~"",1,16)|CIF.EXTCIF|+"
        set ZFROMNO("DAYEND","TJD,""INDXRPT"",INDEX,INDXSEQ,CID",25)="|0|||||||S statem=$P(statem,""~"",1,24)|DAYENDIX2.AIACRADJ|+"
        set ZFROMNO("DAYEND","TJD,""MATXRPT"",NAME,MATXSEQ,CID",25)="|0|||||||S statem=$P(statem,""~"",1,24)|DAYENDMAT2.AIACRADJ|+"
        set ZFROMNO("EFTPAY","CID,SEQ",61)="|0|||||||S statem=$P(statem,""~"",1,60)|EFTPAY.UNIQTSO|+"
        set ZFROMNO("SCAU","1,UID",37)="|0|||||||S statem=$P(statem,""~"",1,36)|SCAU.MARSEG|+"
        set ZFROMNO("TMPTTL","TJD,JOB,CRCD,CLS,GRP,TYPE,GLSC,CC",57)="|0||||||||TMPTTL.AIACR|+"
        set ZFROMNO("TRN","ETC,1",17)="|0|||||||S statem=$P(statem,""~"",1,16)|TRN.TRNSET|+"
        set ZFROMNO("TTL","TJD,CRCD,CLS,GRP,TYPE,GLSC,CC",57)="|0||||||||TTL.AIACR|+"
        set ZFROMNO("UTBL","""BRCD"",BRCD",24)="|0|||||||S statem=$P(statem,""~"",1,23)|UTBLBRCD.INACTV|+"
        set ZFROMNO("UTBL","""CMSATYP"",ACCTTYP",2)="|0|||||||S statem=$P(statem,""~"",1)|UTBLCMSATYP.TYPE|+"
        set ZFROMNO("UTBL","""GLSC"",GLSC",36)="|0|||||||S statem=$P(statem,""~"",1,35)|UTBLGLSC.DGLAI|+"
        set ZFROMNO("UTBL","""PROD"",""TYPE"",TYPE,CRCD,0,102",15)="|0||||||||S statem=$P(statem,""~"",1,6)LTYPE.CRATE|+"
	quit


	//-------------------------------------------------------------------------
ONINIT	// deleted data item// changed data items, created by CREATE section
	//-------------------------------------------------------------------------
	// ZFROMON(gbl,keys+node,piece)=REQ1|REQ2|COMP1|COMP2|NODE1|NODE2|POS1|POS2|default|file.data

	type String ZFROMON()

        set ZFROMON("ACN","CID,100,ODACN",2)="0||||ODACN||2||S statem=$P(statem,""~"",1)|DEPODP.TYPE|-"
        set ZFROMON("ACN","CID,430",9)="0||||430||9||S statem=$P(statem,""~"",1,8)|LN.EUREVDT|-"
        set ZFROMON("ACN","CID,65",12)="0||||65||12||S statem=$P(statem,""~"",1,11)|LN.COD|-"
        set ZFROMON("ACN","CID,68",14)="||||||1|14|S $P(statem,""~"",14)=$$P(statem,""~"",1)|LN.USRDEF1|C"
        set ZFROMON("ACN","CID,68",15)="||||||2|15|S $P(statem,""~"",15)=$$P(statem,""~"",2)|LN.USRDEF2|C"
        set ZFROMON("ACN","CID,68",16)="||||||3|16|S $P(statem,""~"",16)=$$P(statem,""~"",3)|LN.USRDEF3|C"
        set ZFROMON("ACN","CID,68",17)="||||||4|17|S $P(statem,""~"",17)=$$P(statem,""~"",4)|LN.USRDEF4|C"
        set ZFROMON("ACN","CID,68",18)="||||||5|18|S $P(statem,""~"",18)=$$P(statem,""~"",5)|LN.USRDEF5|C"
        set ZFROMON("ACN","CID,68",19)="||||||6|19|S $P(statem,""~"",19)=$$P(statem,""~"",6)|LN.USRDEF6|C"
        set ZFROMON("ACN","CID,68",20)="||||||7|20|S $P(statem,""~"",20)=$$P(statem,""~"",7)|LN.USRDEF7|C"
        set ZFROMON("ACN","CID,68",21)="||||||8|21|S $P(statem,""~"",21)=$$P(statem,""~"",8)|LN.USRDEF8|C"
        set ZFROMON("ACN","CID,68",22)="||||||9|22|S $P(statem,""~"",22)=$$P(statem,""~"",9)|LN.USRDEF9|C"
        set ZFROMON("ACN","CID,68",23)="||||||10|23|S $P(statem,""~"",23)=$$P(statem,""~"",10)|LN.USRDEF10|C"
	quit


	//----------------------------------------------------------------------
TSETON	/*	Transaction Set Conversion// old version to new version
	 -----------------------------------------------------------------------
	 DESC:	Transaction Set Conversion Utility
	       All transaction-code following fields (support data fields)
	       will be copied from to the TRNSD file definition.
	       refrence :NV61TSET.m
	 -----------------------------------------------------------------------
	*/

	type public String statem,xkeys,temp,xtra
	type Public Number lseq
	type String MFVAR1,MFVAR2,MFVAR3,MFVAR4,MFREQ1,MFREQ2,MFREQ3,MFREQ4,MFDFT1,MFDFT2,MFDFT3,MFDFT4,STRING
	type Number ETC,FOUND,ETC,XSEQ

	// Convert all transaction-code following fields.

	set MFVAR1=statem.piece("|",1)
	set MFVAR2=statem.piece("|",7)
	set MFVAR3=statem.piece("|",13)
        set MFVAR4=statem.piece("|",19)
	set MFREQ1=statem.piece("|",3)
        set MFREQ2=statem.piece("|",9)
        set MFREQ3=statem.piece("|",15)
        set MFREQ4=statem.piece("|",21)
	set MFDFT1=statem.piece("|",4)
        set MFDFT2=statem.piece("|",10)
        set MFDFT3=statem.piece("|",16)
        set MFDFT4=statem.piece("|",22)
	set STRING="TSO("_34.char()
	set ETC=xkeys.piece(",",1)

	// If this begins with TSO("
        if MFVAR1[STRING do {

		// chop first 5 characters
		set MFVAR1=MFVAR1.extract(6,1000)

		// chop last 2 characters
		set MFVAR1=MFVAR1.extract(1,(MFVAR1.length()-2))
        	}

	// If this begins with TSO("
	if MFVAR2[STRING do {

		// chop first 5 characters
		set MFVAR2=MFVAR2.extract(6,1000)

		// chop last 2 characters
		set MFVAR2=MFVAR2.extract(1,(MFVAR2.length()-2))
		}

	// If this begins with TSO("
	if MFVAR3[STRING do {

		// chop first 5 characters
		set MFVAR3=MFVAR3.extract(6,1000)

		// chop last 2 characters
		set MFVAR3=MFVAR3.extract(1,(MFVAR3.length()-2))
		}

	// If this begins with TSO("
        if MFVAR4[STRING do {

		// chop first 5 characters
		set MFVAR4=MFVAR4.extract(6,1000)

		// chop last 2 characters
		set MFVAR4=MFVAR4.extract(1,(MFVAR4.length()-2))
        	}

	set XSEQ="",FOUND=0
	type ResultSet rs=Db.select("SEQ","STBLTSD")
	if rs.next() do { quit:(XSEQ.isNull()!(FOUND=1))
		set XSEQ=rs.getCol("SEQ")
		type ResultSet rs1=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ")
		if rs1.next() do {
			if rs1.getCol("ACRONYM")=MFVAR1 do {
				set FOUND=1
				set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3,1)="_XSEQ
				set temp(lseq).piece("|",5)=MFDFT1
				set temp(lseq).piece("|",6)=MFREQ1
				set lseq=lseq+1
				}
			}
		}

	set XSEQ="",FOUND=0
	
	type ResultSet rss=Db.select("SEQ","STBLTSD")
	if rss.next() do { quit:(XSEQ.isNull()!(FOUND=1))
		set XSEQ=rss.getCol("SEQ")
		type ResultSet rss1=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ")
		if rss1.next() do {
			if rss1.getCol("ACRONYM")=MFVAR2 do {
				set FOUND=1
				set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3,2)="_XSEQ
				set temp(lseq).piece("|",5)=MFDFT2
				set temp(lseq).piece("|",6)=MFREQ2
				set lseq=lseq+1
	        		}
			}
		}

	set XSEQ="",FOUND=0

	type ResultSet rss2=Db.select("SEQ","STBLTSD")
	if rss2.next() do { quit:(XSEQ.isNull()!(FOUND=1))
		set XSEQ=rss2.getCol("SEQ")
		type ResultSet rss3=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ")
		if rss3.next() do {
			if rss3.getCol("ACRONYM")=MFVAR3 do {
			set FOUND=1
			set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3,3)="_XSEQ
			set temp(lseq).piece("|",5)=MFDFT3
			set temp(lseq).piece("|",6)=MFREQ3
			set lseq=lseq+1
        		}
		}
		}

	set XSEQ="",FOUND=0
	type ResultSet rss4=Db.select("SEQ","STBLTSD")
		if rss4.next() do { quit:(XSEQ.isNull()!(FOUND=1))
			set XSEQ=rss4.getCol("SEQ")
			type ResultSet rss5=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ")
			if rss5.next() do {
				if rss5.getCol("ACRONYM")=MFVAR4 do {
				set FOUND=1
				set temp(lseq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3,4)="_XSEQ
				set temp(lseq).piece("|",5)=MFDFT4
				set temp(lseq).piece("|",6)=MFREQ4
				set lseq=lseq+1
	       	 		}
			}
		}
	quit


	//---------------------------------------------------------------------
TSETNO	/*	Transaction Set Conversion ;new version to old version
	 	refrence :NV61TSET.m
	 ---------------------------------------------------------------------
	 DESC: Transaction Set Conversion Utility
	       All transaction-code following fields (support data fields)
	       will be copied from  TRNSD (^TRN(ETC,3,1),^TRN(ETC,3,2),
	       ^TRN(ETC,3,3),^TRN(ETC,3,4) to ^TRN(ETC,3) .
	
	-----------------------------------------------------------------------
	*/
	// Convert all transaction-code following fields.
	
	type public String trans,statem,xkeys,xstate,xtra
	type public Number seq
	type String MFVAR1,MFVAR2,MFVAR3,MFVAR4,MFDFT,MFREQ,STRING,SUB
	type Number ETC,XSEQ,FOUND,XETC
	
	set ETC=xkeys.piece(",",1)
	set SUB=xkeys.piece(",",3)
	set XETC=ETC.translate("""","")
	
	type RecordTRN trn=Db.getRecord("TRN","ETC=:XETC",1)
	if 'trn.getMode() quit	

	set MFVAR1=trn.mfvar1
	set MFVAR2=trn.mfvar2
	set MFVAR3=trn.mfvar3
        set MFVAR4=trn.mfvar4
	set MFREQ=statem.piece("|",6)
	set MFDFT=statem.piece("|",5)
	set STRING="TSO("_34.char()

	// If this begins with TSO(" chop first 5 characters and last 2 characters for MFVAR1,MFVAR2,
	// MFVAR3,MFVAR4

        if MFVAR1[STRING do {
		set MFVAR1=MFVAR1.extract(6,1000)
		set MFVAR1=MFVAR1.extract(1,(MFVAR1.length()-2))
        	}

	if MFVAR2[STRING do {
		set MFVAR2=MFVAR2.extract(6,1000)
		set MFVAR2=MFVAR2.extract(1,(MFVAR2.length()-2))
		}

	if MFVAR3[STRING do {
		set MFVAR3=MFVAR3.extract(6,1000)
		set MFVAR3=MFVAR3.extract(1,(MFVAR3.length()-2))
		}

        if MFVAR4[STRING do {
		set MFVAR4=MFVAR4.extract(6,1000)
		set MFVAR4=MFVAR4.extract(1,(MFVAR4.length()-2))
        	}

	if SUB=1 do { quit
		set XSEQ="",FOUND=0
		type ResultSet rs=Db.select("SEQ","STBLTSD","SEQ=:XSEQ","SEQ")
		if rs.next() do { quit:(XSEQ.isNull()!(FOUND=1))
			set XSEQ=rs.getCol("SEQ")
			type ResultSet rs1=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ","ACRONYM")
			if rs1.next() do {
				if rs1.getCol("ACRONYM")=MFVAR1 do {
					set FOUND=1
					type RecordTRN trn=Db.getRecord("TRN","ETC=:XETC")
					set xstate=trn.mfvar1_"|"_trn.mfdsc1_"|"_trn.mfreq1_"|"_trn.mfdft1
					set xstate=xstate_"|"_trn.mftbl1_"|"_trn.mfpp1_"|"_trn.mfvar2_"|"_trn.mfdsc2
					set xstate=xstate_"|"_trn.mfreq2_"|"_trn.mfdft2_"|"_trn.mftbl2_"|"_trn.mfpp2
					set xstate=xstate_"|"_trn.mfvar3_"|"_trn.mfdsc3_"|"_trn.mfreq3_"|"_trn.mfdft3
					set xstate=xstate_"|"_trn.mftbl3_"|"_trn.mfpp3_"|"_trn.mfvar4_"|"_trn.mfdsc4
					set xstate=xstate_"|"_trn.mfreq4_"|"_trn.mfdft4_"|"_trn.mftbl4_"|"_trn.mfpp4
					set xstate=xstate_"|"_trn.mfqry1_"|"_trn.mfqry2_"|"_trn.mfqry3_"|"_trn.mfqry4_"|"_trn.mfpre1
					set xstate=xstate_"|"_trn.mfpre2_"|"_trn.mfpre3_"|"_trn.mfpre4_"|"_trn.mfhlp1_"|"_trn.mfhlp2
					set xstate=xstate_"|"_trn.mfhlp3_"|"_trn.mfhlp4
					set xstate.piece("|",4)=MFDFT
					set xstate.piece("|",3)=MFREQ
					set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3)="_xstate
					}
				}
			}
		}

	if SUB=2 do { quit
		set XSEQ="",FOUND=0
		type ResultSet rs2=Db.select("SEQ","STBLTSD","SEQ=:XSEQ","SEQ")
		if rs2.next() do { quit:(XSEQ.isNull()!(FOUND=1))
			set XSEQ=rs2.getCol("SEQ")
			type ResultSet rs3=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ")
			if rs3.next() do {
				if rs3.getCol("ACRONYM")=MFVAR1 do {
					set FOUND=1
					type RecordTRN trn=Db.getRecord("TRN","ETC=:XETC")
					set xstate=trn.mfvar1_"|"_trn.mfdsc1_"|"_trn.mfreq1_"|"_trn.mfdft1
					set xstate=xstate_"|"_trn.mftbl1_"|"_trn.mfpp1_"|"_trn.mfvar2_"|"_trn.mfdsc2
					set xstate=xstate_"|"_trn.mfreq2_"|"_trn.mfdft2_"|"_trn.mftbl2_"|"_trn.mfpp2
					set xstate=xstate_"|"_trn.mfvar3_"|"_trn.mfdsc3_"|"_trn.mfreq3_"|"_trn.mfdft3
					set xstate=xstate_"|"_trn.mftbl3_"|"_trn.mfpp3_"|"_trn.mfvar4_"|"_trn.mfdsc4
					set xstate=xstate_"|"_trn.mfreq4_"|"_trn.mfdft4_"|"_trn.mftbl4_"|"_trn.mfpp4
					set xstate=xstate_"|"_trn.mfqry1_"|"_trn.mfqry2_"|"_trn.mfqry3_"|"_trn.mfqry4_"|"_trn.mfpre1
					set xstate=xstate_"|"_trn.mfpre2_"|"_trn.mfpre3_"|"_trn.mfpre4_"|"_trn.mfhlp1_"|"_trn.mfhlp2
					set xstate=xstate_"|"_trn.mfhlp3_"|"_trn.mfhlp4
					set xstate.piece("|",10)=MFDFT
					set xstate.piece("|",9)=MFREQ
					set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3)="_xstate
					}
				}
			}
		}

	if SUB=1 do { quit
		set XSEQ="",FOUND=0
		type ResultSet rs4=Db.select("SEQ","STBLTSD","SEQ=:XSEQ","SEQ")
		if rs4.next() do { quit:(XSEQ.isNull()!(FOUND=1))
			set XSEQ=rs4.getCol("SEQ")
			type ResultSet rs5=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ")
			if rs5.next() do {
				if rs5.getCol("ACRONYM")=MFVAR1 do {
					set FOUND=1
					type RecordTRN trn=Db.getRecord("TRN","ETC=:XETC")
					set xstate=trn.mfvar1_"|"_trn.mfdsc1_"|"_trn.mfreq1_"|"_trn.mfdft1
					set xstate=xstate_"|"_trn.mftbl1_"|"_trn.mfpp1_"|"_trn.mfvar2_"|"_trn.mfdsc2
					set xstate=xstate_"|"_trn.mfreq2_"|"_trn.mfdft2_"|"_trn.mftbl2_"|"_trn.mfpp2
					set xstate=xstate_"|"_trn.mfvar3_"|"_trn.mfdsc3_"|"_trn.mfreq3_"|"_trn.mfdft3
					set xstate=xstate_"|"_trn.mftbl3_"|"_trn.mfpp3_"|"_trn.mfvar4_"|"_trn.mfdsc4
					set xstate=xstate_"|"_trn.mfreq4_"|"_trn.mfdft4_"|"_trn.mftbl4_"|"_trn.mfpp4
					set xstate=xstate_"|"_trn.mfqry1_"|"_trn.mfqry2_"|"_trn.mfqry3_"|"_trn.mfqry4_"|"_trn.mfpre1
					set xstate=xstate_"|"_trn.mfpre2_"|"_trn.mfpre3_"|"_trn.mfpre4_"|"_trn.mfhlp1_"|"_trn.mfhlp2
					set xstate=xstate_"|"_trn.mfhlp3_"|"_trn.mfhlp4
					set xstate.piece("|",16)=MFDFT
					set xstate.piece("|",15)=MFREQ
					set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3)="_xstate
					}
				}
			}
		}

	if SUB=1 do { quit
		set XSEQ="",FOUND=0
		type ResultSet rs6=Db.select("SEQ","STBLTSD","SEQ=:XSEQ")
		if rs6.next() do { quit:(XSEQ.isNull()!(FOUND=1))
			set XSEQ=rs6.getCol("SEQ")
			type ResultSet rs7=Db.select("ACRONYM","STBLTSD","SEQ=:XSEQ","ACRONYM")
			if rs7.next() do {
				if rs7.getCol("ACRONYM")=MFVAR1 do {
					set FOUND=1
					type RecordTRN trn=Db.getRecord("TRN","ETC=:XETC")
					set xstate=trn.mfvar1_"|"_trn.mfdsc1_"|"_trn.mfreq1_"|"_trn.mfdft1
					set xstate=xstate_"|"_trn.mftbl1_"|"_trn.mfpp1_"|"_trn.mfvar2_"|"_trn.mfdsc2
					set xstate=xstate_"|"_trn.mfreq2_"|"_trn.mfdft2_"|"_trn.mftbl2_"|"_trn.mfpp2
					set xstate=xstate_"|"_trn.mfvar3_"|"_trn.mfdsc3_"|"_trn.mfreq3_"|"_trn.mfdft3
					set xstate=xstate_"|"_trn.mftbl3_"|"_trn.mfpp3_"|"_trn.mfvar4_"|"_trn.mfdsc4
					set xstate=xstate_"|"_trn.mfreq4_"|"_trn.mfdft4_"|"_trn.mftbl4_"|"_trn.mfpp4
					set xstate=xstate_"|"_trn.mfqry1_"|"_trn.mfqry2_"|"_trn.mfqry3_"|"_trn.mfqry4_"|"_trn.mfpre1
					set xstate=xstate_"|"_trn.mfpre2_"|"_trn.mfpre3_"|"_trn.mfpre4_"|"_trn.mfhlp1_"|"_trn.mfhlp2
					set xstate=xstate_"|"_trn.mfhlp3_"|"_trn.mfhlp4
					set xstate.piece("|",22)=MFDFT
					set xstate.piece("|",21)=MFREQ
					set trans(seq)=xtra.extract(1,xtra.find("^")-2)_"^TRN("_ETC_",3)="_xstate
					}
				}
			}
		}
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60195^33229^Sanjay Chhrabria^70069"	// Signature - LTD^TIME^USER^SIZE
