PATOPT	// PAT Amount Options
	/*

	   DESC:  Calculates the transaction amount according to the
	          Pre-authorized Amount Option.  These options are stored
	    	  in [STBLPAT].

	   KEYWORDS: Transfer, Pre-authorized, Options

	   ARGUMENTS:

	   RETURNS:
	  	 . TAMT 	Transaction Amount  	/TYP=N

	   EXAMPLE:
	  	 D @TAMT^PATOPT

	  ---- Revision History ------------------------------------------------
	  
	   08/28/06 - KUMARB - CR 22464
	   	      Modify section DEPAVL to remove line which checks and add
	   	      the Authorized Overdraft Limit to the available balance.

	   03/08/06 - PUTTASWH - 17988
	   	      Deleted the CID parameter that was expected in
	   	      AVL section since this is not passed from PATCALC. 
	   	      
	   12/14/05 - PUTTASWH - 18157
	   	      Modified the code according to DBI Standards.
	   	      
	   05/06/05 - KinI - 15524
	   	      Modified to replace lnbil1.bp1 piece reference with
	   	      direct sub-field reference per DBI standards.

	   10/10/02 - GRAY - 49794
		      Rewrote most of converted procedure.
	
	   05/10/02 - GORDONT - 49794
		      Converted to PSL.
		      Removed Pre-2000 revision history.

	
	*/


TBA	// Total Bill Amount


	/*

	   INPUTS:
	     	. CID 	Account Number  	/TYP=N/REQ

	       	. NC 	"No charges" flag 	/TYP=N/NOREQ

	   OUTPUTS:
	       	. TAMT 	Transaction amount 	/TYP=N


	*/		
	
	// Record Not On file
	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if 'ln.getMode() do Runtime.setErrSTBLER("LN","RECNOF") quit

	// Available Total Bill Amount
	set TAMT=ln.tba
	
	if '(NC.exists()) do CHG(.ln)
	
	quit


TBAAVL	// Calculate TBA for loan and total available 
	//funds for the deposit account and linked accounts for overdraft protection.
	/*

	   Calculate the lesser of:

	   1.  Loan's [LN]TBA or;
	   2.  Available balance from deposit account + [LN]AVLBAL
	       from it's source of protection.

	*/
	
	new T,DCID,TBA

	// Calculate loan's Available Total Bill Amount
	do TBA
	set TBA=TAMT

	// Find deposit account
	set DCID=""
	for T=1:1 quit:'(PAT(T).exists())  if PAT(T).piece("|",3)="*" set DCID=PAT(T).piece("|",2) quit
	
	if DCID="" set TAMT=0 quit

	do CALCBAL
 
	quit


CALCBAL	// Calculate DDA'a overdraft balance base
	
	new AV,BAL,CID,CRCD,HLDAMT,INCDRD,INCDRL,MINBAL,MINDRD,MINDRL,ODBB
	new TYPE,X	
	
	set TAMT=0
	set CID=DCID
	
	// Record Not On file
        type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
        if 'dep.getMode() do Runtime.setErrSTBLER("DEP","RECNOF") quit

	// Product Type
	set TYPE=dep.type

	// Currency Code
	set CRCD=dep.crcd if CRCD="" set CRCD=%SystemCurrency

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE")

	set INCDRL=prodctl.inctfrl
	set INCDRD=prodctl.inctfrd
	set MINDRL=prodctl.mintfrl 
	set MINDRD=prodctl.mintfrd
	
	set TOTAVL=0
	set BAL=dep.bal
	
	// Overdraft Balance Base
	set ODBB=dep.odbb

	if ODBB=0 set TOTAVL=BAL
	
	// Collected Balance
	if ODBB=1 set TOTAVL=dep.balcol
	
	if ODBB=2 set TOTAVL=dep.balavl quit:ER
	
	// Minimum Balance
	set MINBAL=dep.minbal
	if MINBAL,BAL-TOTAVL<MINBAL set TOTAVL=BAL-MINBAL

	// Calculate available amount from overdraft protection accounts
 
        type ResultSet rs=Db.select("ODACN","DEPODP","CID=:DCID")
        
        while rs.next() do {
                 set CID=rs.getCol(1)
	
		type RecordACN acn=Db.getRecord("ACN","CID=:CID")

            	// Accum available amt
		set TOTAVL=TOTAVL+$$CHECKACN^TTXODC(.acn)
		}

	set TAMT=$S(TOTAVL<TBA:TOTAVL,1:TBA)

	quit


DUE	// Total amount due

	/*

	   INPUTS:
	       	. CID 	Account Number  	/TYP=N/REQ

	       	. NC 	"No charges" flag 	/TYP=N/NOREQ

	   OUTPUTS:
	       	. TAMT 	Transaction amount 	/TYP=N

	*/	

	// Record Not On file
	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if 'ln.getMode() do Runtime.setErrSTBLER("LN","RECNOF") quit 
	
	set TAMT=ln.tdue
	
	if '(NC.exists()) do CHG(.ln)

	quit


UNC	// Total amount uncollected

	/*

	   INPUTS:
	       	. CID 	Account Number  	/TYP=N/REQ

	       	. NC 	"No charges" flag 	/TYP=N/NOREQ

	   OUTPUTS:
	       	. TAMT 	Transaction amount 	/TYP=N

	*/	

	set TAMT=0
	
	// Record Not On file
	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if 'ln.getMode() do Runtime.setErrSTBLER("LN","RECNOF") quit
	
	if ln.idp do {
		new SCHAMT,SCHSEQ
		set SCHSEQ=ln.schseq
		
		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:SCHSEQ",1)
		set SCHAMT=+lnbil1.casd		

		set TAMT=ln.tdue-SCHAMT
		}

	// Interest determined at billing
	else  do {
		set TAMT=TAMT+ln.unin+ln.unpr+ln.unes
		}
	
	if '(NC.exists()) do CHG(.ln)

	quit


INT	// Total interest due

	/*

	   INPUTS:
	       	. CID 	Account Number  	/TYP=N/REQ

	       	. NC 	"No charges" flag 	/TYP=N/NOREQ

	   OUTPUTS:
	       	. TAMT 	Transaction amount 	/TYP=N


	*/
	
	// Record Not On file
	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if 'ln.getMode() do Runtime.setErrSTBLER("LN","RECNOF") quit
	
	set TAMT=ln.cuin+ln.unin
	
	if '(NC.exists()) do CHG(.ln)

	quit


INTAVL	// Calculate INT for loan and total available funds for the
	/*
	   deposit account and linked accounts for overdraft protection.


	   Calculate the lesser of:

	   1.  Loan's [LN]INT or;
	   2.  Available balance from deposit account.


	*/
	new INT,BALAVL

	// Calculate loan's Interest
	do INT quit:ER
	set INT=TAMT

	// Calculate deposit's Available Balance
	set BALAVL=$$DEPAVL(.PAT,.TAMT) quit:ER
	
	set TAMT=$S(BALAVL<INT:BALAVL,1:INT)

	quit


PRIN	// Total principal due

	/*

	   INPUTS:
	       	. CID 	Account Number  	/TYP=N/REQ

	       	. NC 	"No charges" flag 	/TYP=N/NOREQ

	   OUTPUTS:
	       	. TAMT 	Transaction amount 	/TYP=N


	*/	

	// Record Not On file
	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if 'ln.getMode() do Runtime.setErrSTBLER("LN","RECNOF") quit
	
	set TAMT=ln.cupr+ln.unpr
	
	if '(NC.exists()) do CHG(.ln)
	
	quit


PRINAVL	// Calculate PRIN for loan and total available funds for the
	/*
	   deposit account and linked accounts for overdraft protection.


	   Calculate the lesser of:

	   1.  Loan's [LN]PRIN or;
	   2.  Available balance from deposit account.


	*/
	new PRIN,BALAVL

	// Calculate loan's Principal
	do PRIN quit:ER
	
	set PRIN=TAMT

	// Calculate deposit's Available Balance
	set BALAVL=$$DEPAVL(.PAT,.TAMT) quit:ER

	set TAMT=$S(BALAVL<PRIN:BALAVL,1:PRIN)
	
	quit


CHG(RecordLN ln)	// Add charges to total amount


	// Penalty Rate
	set TAMT=TAMT+ln.lchg+$$MCND^LNCO3(,.ln)
	
	quit


DEPAVL(PAT,TAMT)	// Calculate Available Balance from deposit account

	/*

	   KEYWORDS: Balance, Available, Deposit

	   ARGUMENTS:
	  	 . PAT Preauthorized Transfer Records /TYP=T/REQ

	  	 . TAMT Transaction Amount  /TYP=N/REQ/MECH=REF

	   RETURNS:
	  	 . $$ [DEP]BALAVL  /TYP=N

	   EXAMPLE:
	  	 S BALAVL=$$DEPAVL(.PAT,.TAMT) Q:ER

	*/
	new BALAVL,CID,T

	// Find deposit account
	set CID=""
	
	for T=1:1 quit:'(PAT(T).exists())  if PAT(T).piece("|",3)="*" set CID=PAT(T).piece("|",2) quit

	if CID="" set TAMT=0 quit 0	

	// Record Not On file
	type RecordDEP dep=Db.getRecord("DEP","CID",1)
	if 'dep.getMode() do Runtime.setErrSTBLER("DEP","RECNOF") quit

	/* 
	Commented out the following call into ^DEPBA1.  The calculation of
	the available balance with overdraft limit will be done by retrieving
	the available balance from the account (computed) and adding the
	unexpired overdraft limit.
	*/	

	// Calculate Available Balance
	set BALAVL=dep.balavl
	
	quit BALAVL


AVL	// Available balance LN.AVLBAL or DEP.BALAVL
	/*
	   - Expects CID
	   - Returns TAMT

	*/
	
	type public Number CID
	
	if '(CID.get()) quit	

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Calculate AVLBAL for Loan account - Returns AVLBAL
	if acn.cls="L" do { quit
		type RecordLN ln=Db.getRecord("LN","CID=:CID")
		do AVLBAL^LNCO(.ln) 
		set TAMT=AVLBAL
		}

	// Calculate BALAVL for Deposit account

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	
	set TAMT=dep.balavl

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60509^5345^Balasubramonian Sankar^7500"	// Signature - LTD^TIME^USER^SIZE
