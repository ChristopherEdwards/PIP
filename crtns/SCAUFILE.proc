SCAUFILE(RecordSCAU scau, String vpar, Boolean vparNorm) // SCAU - User Identification Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (42)             08/23/2006
	// Trigger Definition (4)                      03/22/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = scau.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(scau,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(scau,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String UID = scau.uid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("UID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SCAU",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SCAU","UID = :scau.uid")          // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String UID

	type RecordSCAU scau = Db.getRecord("SCAU","UID=:UID")
	if (%ProcessMode = 2) do {
		do scau.setMode(2)

		do SCAUFILE(scau,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSCAU scau

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SCAU","UID = :scau.uid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(scau,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(scau,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(scau))  S ^SCAU(1,vobj(scau,-3))=vobj(scau)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSCAU scau

	if vpar'["/NOLOG/" do ^DBSLOGIT(scau,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^SCAU(1,vobj(scau,-3))                             // Delete Record
	quit


vinit // Initialize default values

	type public RecordSCAU scau

	// Type local variables for access keys for defaults
	type public String UID

	if scau.automenu.isNull() set scau.automenu = 0        // automenu
	if scau.emulim.isNull() set scau.emulim = 0            // emulim
	if scau.mrstat.isNull() set scau.mrstat = 0            // mrstat
	if scau.newpwdreq.isNull() set scau.newpwdreq = 0      // newpwdreq
	if scau.retbrcd.isNull() set scau.retbrcd = 0          // retbrcd
	if scau.sdrty.isNull() set scau.sdrty = 0              // sdrty
	if scau.tpm.isNull() set scau.tpm = 0                  // tpm
	quit


vreqn // Validate required data items

	type public RecordSCAU scau

	if scau.automenu.isNull() do vreqerr("AUTOMENU") quit
	if scau.emulim.isNull() do vreqerr("EMULIM") quit
	if scau.mrstat.isNull() do vreqerr("MRSTAT") quit
	if scau.newpwdreq.isNull() do vreqerr("NEWPWDREQ") quit
	if scau.retbrcd.isNull() do vreqerr("RETBRCD") quit
	if scau.sdrty.isNull() do vreqerr("SDRTY") quit
	if scau.tpm.isNull() do vreqerr("TPM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSCAU scau

	if scau.uid.isNull() do vreqerr("UID") quit

		if vx("AUTOMENU").exists(),scau.automenu.isNull() do vreqerr("AUTOMENU") quit
		if vx("EMULIM").exists(),scau.emulim.isNull() do vreqerr("EMULIM") quit
		if vx("MRSTAT").exists(),scau.mrstat.isNull() do vreqerr("MRSTAT") quit
		if vx("NEWPWDREQ").exists(),scau.newpwdreq.isNull() do vreqerr("NEWPWDREQ") quit
		if vx("RETBRCD").exists(),scau.retbrcd.isNull() do vreqerr("RETBRCD") quit
		if vx("SDRTY").exists(),scau.sdrty.isNull() do vreqerr("SDRTY") quit
		if vx("TPM").exists(),scau.tpm.isNull() do vreqerr("TPM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCAU","MSG",1767,"SCAU."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PSWD").exists()!vx("PSWDAUT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSCAU scau
	if vx("").order().isNull() do AUDIT^UCUTILN(scau,.vx(),1,"|") quit
	if vx("PSWD").exists()!vx("PSWDAUT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(scau,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - AFTER DELETE of User ID

	type public RecordSCAU scau
	/*
								---Revision History----------------------------------------------------
								ORIG: 11/04/99 - Miles Dougan - 34629
		After the deletion of a User ID from the SCAU file, also delete 
		the User ID from the SCAUPH Password History file.
								-----------------------------------------------------------------------
								*/
	new XUID
	
	set XUID=scau.uid

 	// Delete User from Password History
 	do Db.delete("SCAUPH","UID=:XUID")

	quit

vau1 // Trigger AFTER_UPDATE - After Update of User ID Password

	type public RecordSCAU scau
	/*
	---Revision History----------------------------------------------------

	  03/22/05 - KELLYP - CR 13666
		Modified trigger to reference CUVAR directly instead of using
		a Db.getOneRow.  Also modified entire trigger to conform to
		current PSL standards and removed pre-2003 revision history.

	-----------------------------------------------------------------------	
	*/
	
	#IF 'CUVAR.pswdh.isNull()

	/*
	 Add Old passwords to password history file if they haven't been 
	 previously used, Password History days is not NULL, and password
	 is not NULL.
	*/
	type Date VDATE
	type String OLDPSWD,OLDPSWDA
	
	set OLDPSWD=scau.pswd.oldVal
	if 'OLDPSWD.isNull(),OLDPSWD'=scau.pswd do {
		type RecordSCAUPH scauph1=Class.new("RecordSCAUPH")
		set scauph1.uid=scau.uid
		set scauph1.tjd=%CurrentDate
		set scauph1.encpswd=OLDPSWD
		do scauph1.save()
		}

	set OLDPSWDA=scau.pswdaut.oldVal
	if 'OLDPSWDA.isNull(),OLDPSWDA'=scau.pswdaut do {
		type RecordSCAUPH scauph2=Class.new("RecordSCAUPH")
		set scauph2.uid=scau.uid
		set scauph2.tjd=%CurrentDate
		set scauph2.encpswd=OLDPSWDA
		do scauph2.save()
		}

	// Validation Date = Current Date - # of Password History Days
	set VDATE=%CurrentDate-CUVAR.pswdh

	/*
	 Purge all passwords in the password history file that are older than
	 the validation date (VDATE).
	*/
	do Db.delete("SCAUPH","UID=:scau.uid AND TJD<:VDATE")

	#ENDIF

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert of User ID 

	type public RecordSCAU scau
	/*
	---- Revision History ------------------------------------------------
	09/17/99 - CARROLLJ - 31126
		   Convert to PSL.

	06/15/99 - Allan Mattson - 33469
		   Modified to force a password change for new users (i.e.,
		   (set SCAU.NEWPWDREQ=1).  The password expiration date is
		   no longer updated in this trigger as a result of this
		   change.
	*/
	
	set scau.newpwdreq=1
	quit
	

vbu1 // Trigger BEFORE_UPDATE - Before Update of User ID Password

	type public RecordSCAU scau
	do scau.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------

	  03/22/05 - KELLYP - CR 13666
		Modified trigger to replace Db.getOneRow call and to conform
		to current PSL standards.

	----------------------------------------------------------------------
	*/

	type public Boolean ER

	/*
	 If a user didn't change their own password, force a password change
	 the next time they log in by setting SCAU.NEWPWDREQ=1.
	*/
	if %UserID'=scau.uid set scau.newpwdreq=1

	// Password expiration date wasn't changed, bump it
	if scau.pexpr.oldVal=scau.pexpr do {
		
		type RecordSCAU0 scau0=Db.getRecord("SCAU0","UCLS=:scau.%ucls")
		set scau.pexpr=%CurrentDate+scau0.pwdchg
		}

	/*
	 Check the Password History table to verify that the new password has not
	 been used since the validation date.
	*/
 	if (scau.pswd.oldVal'=scau.pswd) do CHKPSWH^SCADRV1(scau.uid,scau.pswd) quit:ER
 	if (scau.pswdaut.oldVal'=scau.pswdaut) do CHKPSWH^SCADRV1(scau.uid,scau.pswdaut) quit:ER	
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSCAU scau

	if scau.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	set X = scau.%ucls if 'X.isNull(),'Db.isDefined("SCAU0","X") set vRM = $$^MSG(1485,X) do vdderr("%UCLS", vRM) quit
	if scau.%ufn.length()>40 set vRM = $$^MSG(1076,40) do vdderr("%UFN", vRM) quit
	set X = scau.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	if '("01"[scau.AUTOMENU) set vRM=$$^MSG(742,"L") do vdderr("AUTOMENU", vRM) quit
	set X = scau.batrej if 'X.isNull(),'Db.isDefined("STBLBATREJ","X") set vRM = $$^MSG(1485,X) do vdderr("BATREJ", vRM) quit
	set X = scau.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	set X = scau.csovr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("CSOVR", vRM) quit
	set X = scau.csshrt if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("CSSHRT", vRM) quit
	set X = scau.currenv if 'X.isNull(),'Db.isDefined("STBLCURRENV","X") set vRM = $$^MSG(1485,X) do vdderr("CURRENV", vRM) quit
	if scau.eaddr.length()>55 set vRM = $$^MSG(1076,55) do vdderr("EADDR", vRM) quit
	set X = scau.editor if 'X.isNull(),'Db.isDefined("DBCTL","NAME=""EDITOR"",CODE=:X") set vRM = $$^MSG(1485,X) do vdderr("EDITOR", vRM) quit
	if '("01"[scau.EMULIM) set vRM=$$^MSG(742,"L") do vdderr("EMULIM", vRM) quit
	set X = scau.lang if 'X.isNull(),'Db.isDefined("UTBLLANG","X") set vRM = $$^MSG(1485,X) do vdderr("LANG", vRM) quit
	set X = scau.lsgn if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSGN", vRM) quit
	set X = scau.marseg if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("MARSEG", vRM) quit
	set X = scau.marty if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MARTY", vRM) quit
	set X = scau.mreason if 'X.isNull(),'Db.isDefined("UTBLMREASON","X") set vRM = $$^MSG(1485,X) do vdderr("MREASON", vRM) quit
	if '("01"[scau.MRSTAT) set vRM=$$^MSG(742,"L") do vdderr("MRSTAT", vRM) quit
	if '("01"[scau.NEWPWDREQ) set vRM=$$^MSG(742,"L") do vdderr("NEWPWDREQ", vRM) quit
	set X = scau.oacmax if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU.OACMAX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = scau.oacmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU.OACMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = scau.odp if 'X.isNull(),'Db.isDefined("STBLPATODP","X") set vRM = $$^MSG(1485,X) do vdderr("ODP", vRM) quit
	set X = scau.odpret if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ODPRET", vRM) quit
	set X = scau.pexpr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PEXPR", vRM) quit
	if scau.pswd.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PSWD", vRM) quit
	if scau.pswdaut.length()>32 set vRM = $$^MSG(1076,32) do vdderr("PSWDAUT", vRM) quit
	set X = scau.pwdfail if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PWDFAIL", vRM) quit
	set X = scau.retballim if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU.RETBALLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[scau.RETBRCD) set vRM=$$^MSG(742,"L") do vdderr("RETBRCD", vRM) quit
	set X = scau.retcollim if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU.RETCOLLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = scau.retfeelim if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU.RETFEELIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = scau.rocr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("ROCR", vRM) quit
	set X = scau.rodr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("RODR", vRM) quit
	if scau.rtuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RTUID", vRM) quit
	if '("01"[scau.SDRTY) set vRM=$$^MSG(742,"L") do vdderr("SDRTY", vRM) quit
	set X = scau.segid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEGID", vRM) quit
	if scau.tfkdef.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TFKDEF", vRM) quit
	if '("01"[scau.TPM) set vRM=$$^MSG(742,"L") do vdderr("TPM", vRM) quit
	set X = scau.trnsrt if 'X.isNull(),'Db.isDefined("STBLTRNSRT","X") set vRM = $$^MSG(1485,X) do vdderr("TRNSRT", vRM) quit
	set X = scau.tscr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("TSCR", vRM) quit
	set X = scau.tsdr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("TSDR", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCAU","MSG",979,"SCAU."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSCAU scau

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("UID")
	set voldkey = vux.piece("|",1),vobj(scau,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(scau,-3) = vnewkey // Copy new keys into object
	type RecordSCAU vnewrec = scau.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SCAU",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(scau,-3) = vux.piece("|",1)                   // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
