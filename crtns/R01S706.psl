R01S706	// YER439 - T4RIF Year-End Forms
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:04 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String IRATAB(),acn,rpaseq
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String IRATYPE="ALL"
	type String REPDI=CUVAR.spldir_"YER439-"_$$DAT^%ZM(%CurrentDate,"MMDD")_".PBS"
	type String VIN2="ALL"
	type String VIN3="ALL"

	set RID="YER439"
	set RN="T4RIF Year-End Forms"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("IRATYPE")="|3|||IRATAB(||||T|RPA Type|||||"
	set %TAB("REPDI")="|40|||[DEVICE]||||T|Report Device|||||"
	set %TAB("VIN2")="|255||[T4RIFINF]ACN|[T4RIFINF]ACN:DISTINCT:NOVAL||set acn=X D EXT^DBSQRY||T|Customer Number|||||"
	set %TAB("VIN3")="|255||[T4RIFINF]RPASEQ|[T4RIFINF]RPASEQ:DISTINCT:NOVAL||set rpaseq=X D EXT^DBSQRY||T|Retirement/Savings Plan Sequence Numb|||||"

	set %READ="IO/REQ,REPDI#1,VIN2#0,VIN3#0,IRATYPE#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=40
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String IRATAB(),acn,rpaseq
	type public String REPDI,VIN2,VIN3,IRATYPE
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %BLK,%NOCLOSE,%TIM,ACN,ADDR,AT,AT2,BENACN,CAD(),CNAME,CONAM,DMADYTDD,DODD,DRDTH,EA,EA2,ESTATE,FTD,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NDOD,NODOD,NOFORM,PGM,PLANID,REA,RID,RN,RNEI,RPASEQ,SIO,SPI,SPNAME,SPOUSAL,SPSIN,STD,TD,VL,VLOF,VRF(),VSTATS(),WCP,YEAR,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vp11,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="YER439",RN="T4RIF Year-End Forms"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YER439","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[T4RIFINF]ACN "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[T4RIFINF]RPASEQ "_VIN3,SEQ=SEQ+1
		set DQQRY(SEQ)="[T4RIFINF]NOFORM'=""1"" AND [T4RIFINF]NEGAMT'=""1""",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("T4RIFINF,CIF,IRATYPE") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}


	// Alignment pattern
	if cuvar.alcount,IOTYP'="TRM",'VRWOPT("NOALIGN").get() do ^DBSRWALN(RID,IO,cuvar.alcount)

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vp11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:7 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:4 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"T4RIFINF.PID,T4RIFINF.BOO,T4RIFINF.ACN,T4RIFINF.RP"
	set VSELECT=VSELECT_"ASEQ,T4RIFINF.PLANID,T4RIFINF.FORMSEQ,T4RIFINF.AT,"
	set VSELECT=VSELECT_"T4RIFINF.DRDTH,T4RIFINF.EA,T4RIFINF.TD,CIF.TAXID,C"
	set VSELECT=VSELECT_"IF.DOB,IRATYPE.SPOUSEID,CIF.DOD,T4RIFINF.BENACN,CI"
	set VSELECT=VSELECT_"F.XNAME,CIF.MAD1,CIF.MAD2,CIF.MAD3,CIF.MAD4,CIF.MC"
	set VSELECT=VSELECT_"SZ,IRATYPE.IRATYP"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"T4RIFINF,CIF,IRATYPE",VWHERE,"T4RIFINF.PID,T4RIFINF.BOO,T4RIFINF.ACN,T4RIFINF.RPASEQ,T4RIFINF.PLANID,T4RIFINF.FORMSEQ","","DQMODE=1/PROTECTION=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=rwrs.getRowProt()		// Data item protection
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5,vovc6
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5="",vovc6=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5,vovc6,vc6
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5,vovc6=vc6
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vp11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22
	set vc1=V.piece($C(9),1)			// T4RIFINF.PID
	set vc2=V.piece($C(9),2)			// T4RIFINF.BOO
	set vc3=V.piece($C(9),3)			// T4RIFINF.ACN
	set vc4=V.piece($C(9),4)			// T4RIFINF.RPASEQ
	set vc5=V.piece($C(9),5)			// T4RIFINF.PLANID
	set vc6=V.piece($C(9),6)			// T4RIFINF.FORMSEQ
	set vc7=V.piece($C(9),7)			// T4RIFINF.AT
	set vc8=V.piece($C(9),8)			// T4RIFINF.DRDTH
	set vc9=V.piece($C(9),9)			// T4RIFINF.EA
	set vc10=V.piece($C(9),10)			// T4RIFINF.TD
	set vc11=V.piece($C(9),11)			// CIF.TAXID
	set vp11=VI.extract(11)				// Protection indicator
	set vc12=V.piece($C(9),12)			// CIF.DOB
	set vc13=V.piece($C(9),13)			// IRATYPE.SPOUSEID
	set vc14=V.piece($C(9),14)			// CIF.DOD
	set vc15=V.piece($C(9),15)			// T4RIFINF.BENACN
	set vc16=V.piece($C(9),16)			// CIF.XNAME
	set vc17=V.piece($C(9),17)			// CIF.MAD1
	set vc18=V.piece($C(9),18)			// CIF.MAD2
	set vc19=V.piece($C(9),19)			// CIF.MAD3
	set vc20=V.piece($C(9),20)			// CIF.MAD4
	set vc21=V.piece($C(9),21)			// CIF.MCSZ
	set vc22=V.piece($C(9),22)			// IRATYPE.IRATYP
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

 type public String CAD()
 set CAD(1)=""
 set CAD(2)=""
 set CAD(3)=""
 set CAD(4)=""
 set CAD(5)=""
	quit

VPREAQ	// Pre-processor (after query)

 /*
 ---- Revision History ------------------------------------------------

	05/30/07 - DHANALAKSHMI R - CR25413
		Modified the section START to modify the condition
		involving utblbenrel.spi to check against 1 since the
		type is changed from logical to number.
 -----------------------------------------------------------------------
 */

 type public String acn,IRATAB(),MYQRY1,MYQRY2,PLANID,rpaseq
 type Number AT,AT2,EA,EA2,BOO,BENACN,DRDTH,LLP,OI,REA,RPS,SPI,START,START1,STOP,STOP1,TD,WCP
 type Boolean ADDR,DODD,KEEP,NOFORM
 type public Number ACN,IRATYPE,RPASEQ,YEAR
 type String A(,)
 
 set YEAR=$$YEAR^SCADAT(%SystemDate)-1
 do Db.fastDelete("T4RIFINF","PID=:%ProcessID")
 set MYQRY1=acn.translate(",","!")
 set MYQRY2=rpaseq.translate(",","!")
 
 if acn'="ALL" do {
 	type Number I,EX,X
 	set EX=""
 	set START=MYQRY1.piece("!",1)-0.0001
 	for I=1:1 quit:EX=1  do {
		set X=MYQRY1.piece("!",I)
		if X'="" set A(2,I)=X
		else  set EX=1
 		}
	set STOP=A(2,A(2,"").order(-1))+0.0001
 	}
 else  set START=0,STOP=10000000000000000000
 
 if rpaseq'="ALL" do {
 	type Number I,EX,X
 	set EX=""
 	set START1=MYQRY2.piece("!",1)-0.0001
 	for I=1:1 quit:EX=1  do {
		set X=MYQRY2.piece("!",I)
		if X'="" set A(2,I)=X
		else  set EX=1
 		}
	set STOP1=A(2,A(2,"").order(-1))+0.0001
 	}
 else  set START1=0,STOP1=10000000000000000000
 
 set ACN=START
 
 type ResultSet rs
 if ACN.isNull() set rs=Db.select("DISTINCT ACN","IRATYPE")
 else  set rs=Db.select("DISTINCT ACN","IRATYPE","ACN>:START AND (ACN<:STOP or ACN=:STOP)","ACN")

 while rs.next() do {
 	set ACN=rs.getCol("ACN")
 	if MYQRY1'="ALL" set KEEP=1 do {  Q:'KEEP	// Check ACN query
	 	type Number I
 		set I=""
	 	for  set I=A(3,I).order() quit:I=""  if 'A(3,I) set KEEP=0
 		}
 	type ResultSet rs1
     	if START1.isNull() set rs1=Db.select("RPASEQ,IRATYP,YEFLG,PLANID","IRATYPE","ACN=:ACN AND (RPASEQ<:STOP1 OR RPASEQ=:STOP1)","RPASEQ")
     	else  set rs1=Db.select("RPASEQ,IRATYP,YEFLG,PLANID","IRATYPE","ACN=:ACN AND RPASEQ>:START1 AND (RPASEQ<:STOP1 OR RPASEQ=:STOP1)","RPASEQ")
     	
     	while rs1.next() do {
     		set PLANID=rs1.getCol("PLANID")
     		set RPASEQ=rs1.getCol("RPASEQ")
     		if MYQRY2'="ALL" set KEEP=1 do {  Q:'KEEP  	// Check RPASEQ query
 			type Number I
 			set I=""
	 		for  set I=A(4,I).order() quit:I=""  if 'A(4,I) set KEEP=0
 			}
 		if IRATYPE'="ALL",rs1.getCol("IRATYP")'=IRATYPE quit
 		if IRATYPE'="ALL",IRATAB(rs1.getCol("IRATYP"))'=IRATYPE quit
 		// If tax reporting option is set to 'N' skip this RPASEQ.
 		if 'rs1.getCol("YEFLG") quit
 		
 		set (ADDR,AT,AT2,TD,DRDTH,EA,EA2,BENACN,SPI)=""
 		
 		type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:YEAR")
 		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
 		
 		// Set the Date of Death Distributions variable.
 		set DODD=0
 		// If the plan owner is living, unset the Death Distributions variable.
 		if (ira.d6>0)!(ira.d26>0)!(ira.d27>0) set DODD=1
 		
 		// Determine if a form should be generated for this plan.
		set NOFORM=$$SYSDEVCEFRM(ira)
		if NOFORM=0 set NOFORM=1
		else  set NOFORM=0
		set BOO=cif.boo
		type RecordT4RIFINF t4rifinf()
		set t4rifinf(1)=Db.getRecord("T4RIFINF","PID=:%ProcessID,BOO=:BOO,ACN=:ACN,RPASEQ=:RPASEQ,PLANID=:PLANID,FORMSEQ=1",1)
		set t4rifinf(2)=Db.getRecord("T4RIFINF","PID=:%ProcessID,BOO=:BOO,ACN=:ACN,RPASEQ=:RPASEQ,PLANID=:PLANID,FORMSEQ=2",1)
		do START(ira,cif,.t4rifinf())
		do SET(.t4rifinf())
		quit
			
		}
	}
 quit

START(RecordIRA ira,RecordCIF cif,RecordT4RIFINF t4rifinf()) // Check for date of death and set up forms

 /*Member not deceased(if there is no value in any of the Death payout buckets.)
 Only 1 form generated.*/
 
 type public Number ACN,AT,AT2,BENACN,DMADYTDD,DRDTH,EA,EA2,FTD,N,RPASEQ,STD,SPI,TD
 type public Boolean ADDR,DODD,NOFORM,NODOD
 type String BENREL
 
 if 'DODD do {  quit
 	set AT=(ira.d1-ira.nrd1)+(ira.d10-ira.nrd10)
 	set EA=AT-ira.madcy 	// Excess Amounts
 	set (STD,FTD)=0
 	if ira.sw1!ira.sw10 set STD=ira.sw1+ira.sw10
	set FTD=(ira.w1-ira.nrw1)+(ira.w10-ira.nrw10)		// TaxDeducted
	set TD=STD+FTD
	set t4rifinf(1).at=AT
	set t4rifinf(1).ea=EA
	set t4rifinf(1).td=TD
	set t4rifinf(1).addr=0
	
	/* If there is a negative amount going to be displayed, then do not produce
 	 any tax forms.*/
	
	if (AT<0)!(EA<0)!(TD<0) set t4rifinf(1).negamt=1
	
	if t4rifinf(1).noform="" set t4rifinf(1).noform=NOFORM
	
	/* Check to see if a detail line should be written for this
	plan id.  The following conditions should exist for this to be true */
	if (AT.get()<.01),(EA.get()<.01),(TD.get()<.01),t4rifinf(1).noform=1 set t4rifinf(1).nodetail=1
	}

 /* Determine if there is a beneficiary and its relationship.
 If there a multiple beneficiaries then a second form will NOT be
 generated.*/
 set N=0
 type ResultSet rs2=Db.select("BENACN,BENREL","IRABEN","ACN=:ACN AND RPASEQ=:RPASEQ")
 while rs2.next() do {
 	set BENACN=rs2.getCol("BENACN")
 	set BENREL=rs2.getCol("BENREL")    // Beneficiary Relationship.       
 	type RecordUTBLBENREL utblrel=Db.getRecord("UTBLBENREL","BENREL=:BENREL")
	if (utblrel.spi = 1) set SPI=1
 	set N=N+1  // Keep track of the number of Beneficiaries for this RSP.       
 	}
 // If there is death disburstments but no date of death, set the NODOD flag.
 if cif.dod'>0 set NODOD=1
 else  set NODOD=""

 /* Member deceased, spousal beneficiary and the deceased [CIF]DOD is null
 or invalid.  Suppress form sequence #1 and form sequence #2.*/
 if DODD,NODOD do {  quit       
 	set t4rifinf(1).nodod=1
 	set t4rifinf(1).noform=1
 	set t4rifinf(2).nodod=1
 	set t4rifinf(2).noform=1
 	}
  	
 /* Member deceased, no beneficiary or non spouse beneficiary .
  1 form generated, 1 to estate.
  The member is considered deceased if there is a value in any of the death
  disburtment buckets.*/
 if DODD,'SPI do {  quit
 	// Amounts Taxable
 	set AT=(ira.d1-ira.nrd1)+(ira.d6-ira.nrd6)+(ira.d10-ira.nrd10)
 	set DRDTH=$$DFMV()           // Deemed Receipt on Death
 	set DMADYTDD=$$^DODMADCY(ACN,RPASEQ)
 	set EA=AT-DMADYTDD           // Excess Amounts
 	set (STD,FTD)=0
 	if ira.sw1!ira.sw10!ira.sw6 set STD=ira.sw1+ira.sw6+ira.sw10
 	set FTD=(ira.w1-ira.nrw1)+(ira.w6-ira.nrw6)+(ira.w10-ira.nrw10)
	set TD=STD+FTD
	set t4rifinf(1).at=AT
	set t4rifinf(1).drdth=DRDTH
	set t4rifinf(1).ea=EA
	set t4rifinf(1).td=TD
	set t4rifinf(1).addr=1
	set t4rifinf(1).nodod=NODOD

	if BENACN="" set ADDR=1
	set t4rifinf(2).addr=ADDR
	set t4rifinf(2).benacn=BENACN
	
	// If multiple beneficiaries, don't generate a second form.
	
	if N>1 do {
		set t4rifinf(2).multiben=1
		set t4rifinf(2).noform=1
		}
		
	/* If there is a negative amount going to be displayed, then do not produce
	any tax forms.*/
	if (AT<0)!(DRDTH<0)!(EA<0)!(TD<0) do {
		set t4rifinf(1).negamt=1
		if N>1 do {
			set t4rifinf(2).multiben=1
			set t4rifinf(2).noform=1
			}
		if N'>1 do {
			set t4rifinf(2).addr=ADDR
			set t4rifinf(2).benacn=BENACN
			set t4rifinf(2).noform=1
			set t4rifinf(2).negamt=1
			}
		}
	if t4rifinf(1).noform="" set t4rifinf(1).noform=NOFORM
	if (t4rifinf(2).noform=""),(t4rifinf(2).addr!t4rifinf(2).benacn!t4rifinf(2).nodod) set t4rifinf(2).noform=NOFORM
		
	/*If there is any positive amounts in the Amounts
	Taxable, Deemed Receipt on Death, Excess Amounts or Tax Deducted,
	then Form Sequence 1 should always be generated no matter what other
	conditions exist.*/
	if (AT>0)!(DRDTH>0)!(EA>0)!(TD>0) set t4rifinf(1).noform=""
	}

 /*Member deceased, spousal beneficiary. 2 forms-1 to estate,1 to spouse
  unless multiple benifs than only 1 form generated.  The member is considered
  deceased if there is a value in any of the death disburtment buckets.*/
 if DODD,SPI do {  quit
 	set AT=(ira.d1-ira.nrd1)+(ira.d10-ira.nrd10)
 	set AT2=ira.d26-ira.nrd26 	       // Amounts Taxable form 2
 	set EA=AT-ira.madcy                    // Excess Amount 1
 	set EA2=AT2
 	set DRDTH=$$DFMV()-ira.d6              // Deemed Receipt on Death
 	set (STD,FTD)=0
 	if ira.sw1!ira.sw10!ira.sw26 do {
 		set STD=ira.sw1+ira.sw10+ira.sw26
 		}
 	set FTD=(ira.w1-ira.nrw1)+(ira.w10-ira.nrw10)+(ira.w26-ira.nrw26)
 	set TD=STD+FTD
	set t4rifinf(1).at=AT
	set t4rifinf(1).drdth=DRDTH
	set t4rifinf(1).ea=EA
	set t4rifinf(1).td=TD
	set t4rifinf(1).addr=1
	set t4rifinf(1).nodod=NODOD
	if N'>1 do {
		set t4rifinf(2).at=AT2
		set t4rifinf(2).ea=EA2
		set t4rifinf(2).benacn=BENACN
		}
	// If multiple beneficiaries, don't generate a second form.
	if N>1 do {
		set t4rifinf(2).multiben=1
		set t4rifinf(2).noform=1
		}
	/*For form sequence 2, if all the amounts equal zero, do not produce a tax
	form but display a record on the detail report with all zero values.*/

	if 'AT2.get(),'EA2.get() do {
		if N>1 do {
			set t4rifinf(2).multiben=1
			set t4rifinf(2).noform=1
			}
		if N'>1 do {
			set t4rifinf(2).at=AT2
			set t4rifinf(2).ea=EA2
			set t4rifinf(2).benacn=BENACN
			set t4rifinf(2).noform=1
			}
		}
			
	/*If there is a negative amount going to be displayed, then do not produce
	any tax forms. */
	if (AT<0)!(DRDTH<0)!(EA<0)!(TD<0)!(AT2<0)!(EA2<0) do {
		set t4rifinf(1).at=AT
		set t4rifinf(1).drdth=DRDTH
		set t4rifinf(1).ea=EA
		set t4rifinf(1).td=TD
		set t4rifinf(1).addr=1
		set t4rifinf(1).nodod=1
		set t4rifinf(1).negamt=1
		
		/* Removed the negative processing flag for multiple
		benificiaries since multiple benificiary message takes precedence.*/
 		if N>1 do {
 			set t4rifinf(2).multiben=1
 			set t4rifinf(2).noform=1
 			}
 		if N'>1 do {
 			set t4rifinf(2).at=AT2
 			set t4rifinf(2).ea=EA2
 			set t4rifinf(2).benacn=BENACN
 			set t4rifinf(2).negamt=1
			}
		}
	if t4rifinf(1).noform="" set t4rifinf(1).noform=NOFORM
	if (t4rifinf(2).noform=""),(t4rifinf(2).addr!t4rifinf(2).benacn!t4rifinf(2).nodod!t4rifinf(2).at!t4rifinf(2).ea) do {
		set t4rifinf(2).noform=NOFORM
		}
	/*If there is any positive amounts in the Amounts
	Taxable, Deemed Receipt on Death, Excess Amounts or Tax Deducted,
	then Form Sequence 1 should always be generated no matter what other
	conditions exist.*/
	if (AT>0)!(DRDTH>0)!(EA>0)!(TD>0) set t4rifinf(1).noform=""
	}
 quit

SET(RecordT4RIFINF t4rifinf()) // Set up TMP file for forms and detail report
 type public Number DRDTH,LLP,REA,TD,WCP
 do t4rifinf(1).save()
 if (t4rifinf(2).noform=""),(t4rifinf(2).noform!t4rifinf(2).multiben) do {
        do t4rifinf(2).save()
	}
 quit

DFMV() // Calculate the Deemed Receipt on Death value from the Fair Market value
 type Number DFMV,CID
 type public Number ACN
 set (DFMV,CID)=""
 type ResultSet rs3=Db.select("CID","DEP","RPASEQ>0")
 while rs3.next() do {
 	set CID=rs3.getCol("CID")
 	type RecordRELCIF relcif=Db.getRecord("RELCIF","ACN=:ACN,CID=:CID")
 	set DFMV=relcif.dfmv
 	}
 quit DFMV

SYSDEVCEFRM(RecordIRA ira) // Determine if a form should be produced for this plan.
 
 type public Number NOFORM,DODD
 
 /*If the Plan Owner is deceased.  A form will be generated if there is any
  positive amount in either the Trustee Transfer bucket, Death Transfer to
  Spouse's IRA bucket or Direct Transfer to Qualified Plan bucket.*/
 if DODD do {
 	set NOFORM=((ira.d6-ira.nrd6)>0)!((ira.d26-ira.nrd26)>0)!((ira.d27-ira.nrd27)>0)
 	}
 if DODD quit NOFORM
 
 /*If the Plan Owner is living, produce a form if one of the following
  conditions are met.*/
  
 if (ira.d1-ira.nrd1)>0 quit 1
 if (ira.d10-ira.nrd10)>0 quit 1
 if (ira.w1-ira.nrw1)>0 quit 1
 if (ira.w10-ira.nrw10)>0 quit 1
 if ira.sw1>0 quit 1
 if ira.sw10>0 quit 1
 
 quit 0
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=acn,rpaseq,IRATAB()
 type public String IRATAB()
 type ResultSet rs=Db.select("IRA,DESC","STBLIRA")
 while rs.next() do {
        if rs.getCol("IRA")=6 set IRATAB(6)=rs.getCol("DESC")
        if rs.getCol("IRA")=7 set IRATAB(7)=rs.getCol("DESC")
	if rs.getCol("IRA")=9 set IRATAB(9)=rs.getCol("DESC")	
       }
 set IRATAB("ALL")="6,7,9"
	quit

VRPOST	// Report post-processor

 type public String IO,PGM,REPDI,RID,SIO,%NOCLOSE,%BLK
 type public Number vcrt
 type public Boolean VFMQ
 type Number PN
 
 do CLOSE^SCAIO
 set SIO=IO
 set IO=REPDI

 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set RID="YER440" D ^URID
 if PGM.length() set %BLK="/,"_REPDI do ^@PGM
 set IO=SIO 
 set %NOCLOSE=""
 do Db.fastDelete("T4RIFINF","PID=:%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1,vskp(6)=1,vskp(7)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(7).get() do VDTL7 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(7)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5,vc6,vovc6
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7)=0
	if vb1!(+vovc1'=+vc1) set vs(3)=0,vh(3)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1
	if vb3!(+vovc2'=+vc2) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1
	if vb4!(+vovc3'=+vc3) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1
	if vb5!(+vovc4'=+vc4) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1
	if vb6!(vovc5'=vc5) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(7) set vs(7)=1 do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),vc7,vc8,vc9,vc10
	type Public String VSTATS

	set VT(7)=VT(7)+1
	set VT(7,1,1)=VT(7,1,1)+vc7			// @TOT([T4RIFINF]AT)
	set VT(7,2,1)=VT(7,2,1)+vc8			// @TOT([T4RIFINF]DRDTH)
	set VT(7,3,1)=VT(7,3,1)+vc9			// @TOT([T4RIFINF]EA)
	set VT(7,4,1)=VT(7,4,1)+vc10			// @TOT([T4RIFINF]TD)
	quit

VDTL7	// Detail
	type public String %BLK,%NOCLOSE,ACN,ADDR,AT,AT2,BENACN,CAD(),CNAME,DMADYTDD,DODD,DRDTH,EA,EA2,ESTATE,FTD,IO,IOSL,IRATAB(),IRATYPE,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NDOD,NODOD,NOFORM,PGM,PLANID,REA,REPDI,RID,RNEI,RPASEQ,SIO,SPI,SPNAME,SPOUSAL,SPSIN,STD,TD,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),WCP,YEAR,acn,rpaseq,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vp11

	if VLC+24>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="  "_$J(YEAR,4)
	do VOM
	set VL="         "_$S(vc7="":"",1:$J(vc7,0,2))
	set VL=VL_$J("",19-VL.length())_$S(vc8="":"",1:$J(vc8,0,2))
	set VL=VL_$J("",49-VL.length())_$S(vc9="":"",1:$J(vc9,0,2))
	do VP1 quit:VFMQ!verror.get()  set V=$E(SPOUSAL,1,3)
	set VL=VL_$J("",65-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="         "_$S(vc10="":"",1:$J(vc10,0,2))
	do VP2 quit:VFMQ!verror.get()  set V=$E(10E30_NDOD,31+$L(NDOD),99)
	set VL=VL_$J("",21-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(10E30_NDOD,31+$L(NDOD),99)
	set VL=VL_$J("",24-VL.length())_V
	do VP4 quit:VFMQ!verror.get()  set V=$E(10E30_NDOD,31+$L(NDOD),99)
	set VL=VL_$J("",27-VL.length())_V
	do VP5 quit:VFMQ!verror.get()  set V=$E(SPSIN,1,11)
	set VL=VL_$J("",42-VL.length())_V
	do VP6 quit:VFMQ!verror.get()  set V=$E(SPNAME,1,18)
	set VL=VL_$J("",55-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                                            "_$S(vp11=3:"***********",1:$E(vc11,1,11))
	set VL=VL_$J("",59-VL.length())_$E(vc5,1,12)
	do VOM
	do VP7 quit:VFMQ!verror.get()  set V=$E(ESTATE,1,20) set VL="  "_V
	do VOM
	do VP8 quit:VFMQ!verror.get()  set V=$E(LFM,1,40) set VL="  "_V
	do VOM
	do VP9 quit:VFMQ!verror.get()  set V=$E(CAD(1),1,40) set VL="  "_V
	do VP10 quit:VFMQ!verror.get()  set V=$E(CNAME,1,25)
	set VL=VL_$J("",46-VL.length())_V
	do VOM
	set VL="  "_$E(CAD(2),1,40)
	do VOM
	set VL="  "_$E(CAD(3),1,40)
	do VOM
	set VL="  "_$E(CAD(4),1,40)
	do VP11 quit:VFMQ!verror.get()  set V=$E(NBIN,1,15)
	set VL=VL_$J("",45-VL.length())_V
	do VP12 quit:VFMQ!verror.get()  set V=$J($FN(RNEI,",",2),12)
	set VL=VL_$J("",61-VL.length())_V
	do VOM
	set VL="  "_$E(CAD(5),1,40)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	quit

VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %BLK,%NOCLOSE,ACN,ADDR,AT,AT2,BENACN,CAD(),CNAME,DMADYTDD,DODD,DRDTH,EA,EA2,ESTATE,FTD,IO,IRATAB(),IRATYPE,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NDOD,NODOD,NOFORM,PGM,PLANID,REA,REPDI,RID,RNEI,RPASEQ,SIO,SPI,SPNAME,SPOUSAL,SPSIN,STD,TD,WCP,YEAR,acn,rpaseq,vcrt,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+10>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                  "_"Total Number of Notices:"
	set V=(VT(0)+VT(1)+VT(2)+VT(3)+VT(4)+VT(5)+VT(6)+VT(7))	// @CNT(0,N,8)
	set VL=VL_$J("",43-VL.length())_$J(V,8)
	do VOM
	set VL="                    "_"Total Amounts Taxable:"
	set V=0						// @TOT([T4RIFINF]AT,0)
	for I=0:1:7 set V=V+VT(I,1,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="                           "_"Total Deceased:"
	set V=0						// @TOT([T4RIFINF]DRDTH,0)
	for I=0:1:7 set V=V+VT(I,2,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="                      "_"Total Excess Amount:"
	set V=0						// @TOT([T4RIFINF]EA,0)
	for I=0:1:7 set V=V+VT(I,3,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	set VL="                       "_"Total Tax Deducted:"
	set V=0						// @TOT([T4RIFINF]TD,0)
	for I=0:1:7 set V=V+VT(I,4,1)
	set VL=VL_$J("",43-VL.length())_$J($FN(V,",",2),12)
	do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %BLK,%MSKD,%NOCLOSE,%TIM,ACN,ADDR,AT,AT2,BENACN,CAD(),CNAME,CONAM,DMADYTDD,DODD,DRDTH,EA,EA2,ESTATE,FTD,IO,IRATAB(),IRATYPE,LFM,LLP,MYQRY1,MYQRY2,N,NBIN,NDOD,NODOD,NOFORM,PGM,PLANID,REA,REPDI,RID,RN,RNEI,RPASEQ,SIO,SPI,SPNAME,SPOUSAL,SPSIN,STD,TD,VL,WCP,YEAR,acn,rpaseq,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vp11,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	use IO if 'VLC,'vcrt set $Y=1
	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: SPOUSAL

	type public String vc12,vc13,vc9
 type public String SPOUSAL
 type Number BEGYR,dob,RSPAGE,SPOUSEID,X

 set dob=vc12
 set BEGYR=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1) //beginning of previous tax yr
 set X=$$EOTY^SCADAT(BEGYR,1) // end of previous tax year
 set RSPAGE=$$NOY^SCADAT(X,dob)
 set SPOUSAL="NO"
 set SPOUSEID=vc13
 if SPOUSEID,vc9>0 set SPOUSAL="YES"
	quit

VP2	// Column pre-processor - Variable: NDOD

	type public String vc14
 type public Number DDATE,NDOD
 set DDATE=0,NDOD=0
 set DDATE=vc14
 if 'DDATE do { quit
	set NDOD=DDATE.toString("YY")
	}
	quit

VP3	// Column pre-processor - Variable: NDOD

	type public String vc14
 type public Number DDATE,NDOD
 set DDATE=0,NDOD=0
 set DDATE=vc14
 if 'DDATE do { quit
	set NDOD=DDATE.toString("MM")
	}
	quit

VP4	// Column pre-processor - Variable: NDOD

	type public String vc14
 type public Number DDATE,NDOD
 set DDATE=0,NDOD=0
 set DDATE=vc14
 if 'DDATE do { quit       
	set NDOD=DDATE.toString("DD")
	}
	quit

VP5	// Column pre-processor - Variable: SPSIN

	type public String vc13
 type public String SPOUSAL,SPSIN
 type public Number RSPAGE
 type Number X
 set SPSIN=""
 if SPOUSAL="NO" quit
 if RSPAGE'<74 quit
 set X=vc13
 if X do {
	type RecordCIF cif=Db.getRecord("CIF","ACN=:X")
	set SPSIN=cif.taxid
	}
	quit

VP6	// Column pre-processor - Variable: SPNAME

	type public String vc13
 type public String SPNAME,SPOUSAL
 type public Number RSPAGE
 type Number X

 set SPNAME=""
 if SPOUSAL="NO" quit
 if RSPAGE'<74 quit
 set X=vc13
 if 'X quit
 type RecordCIF cif=Db.getRecord("CIF","ACN=:X")
 set SPNAME=cif.xname
	quit

VP7	// Column pre-processor - Variable: ESTATE

 type public String ESTATE
 set ESTATE=""
	quit

VP8	// Column pre-processor - Variable: LFM

	type public String vc15,vc16
 type Number benacn
 type public Number FORMSEQ
 type public String LFM

 set benacn=vc15
 if benacn do {
	type RecordCIF cif=Db.getRecord("CIF","ACN=:benacn")
	set LFM=cif.XNAME
	}
 else  set LFM=vc16
	quit

VP9	// Column pre-processor - Variable: CAD(1)

	type public String vc15,vc17,vc18,vc19,vc20,vc21
 type public Number ACN,FORMSEQ
 type public String CAD()
 type Number BENACN,J,I
 set BENACN=vc15
 if BENACN do {
        type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
        set CAD(1)=cif.mad1
        set CAD(2)=cif.mad2
        set CAD(3)=cif.mad3       
	set CAD(4)=cif.mad4
        set CAD(5)=cif.mcity_", "_cif.mstate_" "_cif.mzip
        }
 else  do {       
	set CAD(1)=vc17       
	set CAD(2)=vc18
	set CAD(3)=vc19       
	set CAD(4)=vc20       
	set CAD(5)=vc21      
	}

 for J=1:1:4 do {
        for I=1:1:4 do {
                if CAD(I)="" set CAD(I)=CAD(I+1),CAD(I+1)=""
                }
        }
	quit

VP10	// Column pre-processor - Variable: CNAME

 type public String CNAME
 set CNAME=CUVAR.cname.extract(1,25)
	quit

VP11	// Column pre-processor - Variable: NBIN

	type public String vc22
 type public Number IRATYPE,NBIN
 set IRATYPE=vc22
 if IRATYPE=9 set NBIN=CUVAR.SDRIFTRN
 else  set NBIN=CUVAR.T4RIFTRN
	quit

VP12	// Column pre-processor - Variable: RNEI

 type public Number ACN,RPASEQ,RNEI,YEAR
 
 type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:YEAR")
 set RNEI=ira.rnei
	quit
