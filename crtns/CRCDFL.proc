CRCDFL(RecordCRCD crcd, String vpar, Boolean vparNorm) // CRCD - Currency Codes Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (71)             12/05/2005
	// Trigger Definition (16)                     03/21/2006
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crcd.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(crcd,.vxins(),11,"|")
	if %O = 1 quit:'crcd.isChanged()  do AUDIT^UCUTILN(crcd,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CO = crcd.co
	type String CRCD = crcd.crcd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CO").exists()!vx("CRCD").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRCD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRCD","CO = :crcd.co and CRCD = :crcd.crcd") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CO
	type public String CRCD

	type RecordCRCD crcd = Db.getRecord("CRCD","CO=:CO,CRCD=:CRCD")
	if (%ProcessMode = 2) do {
		do crcd.setMode(2)

		do CRCDFL(crcd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRCD crcd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRCD","CO = :crcd.co and CRCD = :crcd.crcd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(crcd,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(crcd,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(crcd,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CRCD(vobj(crcd,-3),vobj(crcd,-4),n)=vobj(crcd,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(crcd,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(crcd,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CRCD(vobj(crcd,-3),vobj(crcd,-4),n)=vobj(crcd,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crcd))  S ^CRCD(vobj(crcd,-3),vobj(crcd,-4))=vobj(crcd)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.crcd)                // Create journal files
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordCRCD crcd
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^CRCD(vobj(crcd,-3),vobj(crcd,-4),n)) quit:n.isNull()  if 'vobj(crcd,n).data(),^CRCD(vobj(crcd,-3),vobj(crcd,-4),n).data()#2 set vobj(crcd,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRCD crcd

	if 'vkeychg.get(),crcd.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.crcd)                 // Create journal entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(crcd,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^CRCD(vobj(crcd,-3),vobj(crcd,-4))                // Delete Record
	quit


vinit // Initialize default values

	type public RecordCRCD crcd

	// Type local variables for access keys for defaults
	type public String CO
	type public String CRCD

	if crcd.buy.isNull() set crcd.buy = 0                  // buy
	if crcd.cashcur.isNull() set crcd.cashcur = 0          // cashcur
	if crcd.coacc.isNull() set crcd.coacc = 0              // coacc
	if crcd.conv.isNull() set crcd.conv = 0                // conv
	if crcd.emu.isNull() set crcd.emu = 0                  // emu
	if crcd.intpmt.isNull() set crcd.intpmt = 0            // intpmt
	if crcd.poacc.isNull() set crcd.poacc = 0              // poacc
	if crcd.retail.isNull() set crcd.retail = 1            // retail
	if crcd.sell.isNull() set crcd.sell = 0                // sell
	if crcd.sysceq.isNull() set crcd.sysceq = 0            // sysceq
	if crcd.terms.isNull() set crcd.terms = 0              // terms
	quit


vreqn // Validate required data items

	type public RecordCRCD crcd

	if crcd.buy.isNull() do vreqerr("BUY") quit
	if crcd.cashcur.isNull() do vreqerr("CASHCUR") quit
	if crcd.chkdesc.isNull() do vreqerr("CHKDESC") quit
	if crcd.cntry.isNull() do vreqerr("CNTRY") quit
	if crcd.coacc.isNull() do vreqerr("COACC") quit
	if crcd.conv.isNull() do vreqerr("CONV") quit
	if crcd.crcdno.isNull() do vreqerr("CRCDNO") quit
	if crcd.curdec.isNull() do vreqerr("CURDEC") quit
	if crcd.desc.isNull() do vreqerr("DESC") quit
	if crcd.emu.isNull() do vreqerr("EMU") quit
	if crcd.intpmt.isNull() do vreqerr("INTPMT") quit
	if crcd.maxrate.isNull() do vreqerr("MAXRATE") quit
	if crcd.minrate.isNull() do vreqerr("MINRATE") quit
	if crcd.poacc.isNull() do vreqerr("POACC") quit
	if crcd.ratdec.isNull() do vreqerr("RATDEC") quit
	if crcd.retail.isNull() do vreqerr("RETAIL") quit
	if crcd.sell.isNull() do vreqerr("SELL") quit
	if crcd.sptdys.isNull() do vreqerr("SPTDYS") quit
	if crcd.sysceq.isNull() do vreqerr("SYSCEQ") quit
	if crcd.terms.isNull() do vreqerr("TERMS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRCD crcd

	if crcd.co.isNull() do vreqerr("CO") quit
	if crcd.crcd.isNull() do vreqerr("CRCD") quit

	if 'vobj(crcd,-100,1,"").order().isNull() do {
		if vx("TERMS").exists(),crcd.terms.isNull() do vreqerr("TERMS") quit
	}
	if 'vobj(crcd,-100,"0*","").order().isNull() do {
		if vx("DESC").exists(),crcd.desc.isNull() do vreqerr("DESC") quit
		if vx("CRCDNO").exists(),crcd.crcdno.isNull() do vreqerr("CRCDNO") quit
		if vx("RETAIL").exists(),crcd.retail.isNull() do vreqerr("RETAIL") quit
		if vx("BUY").exists(),crcd.buy.isNull() do vreqerr("BUY") quit
		if vx("SELL").exists(),crcd.sell.isNull() do vreqerr("SELL") quit
		if vx("CURDEC").exists(),crcd.curdec.isNull() do vreqerr("CURDEC") quit
		if vx("RATDEC").exists(),crcd.ratdec.isNull() do vreqerr("RATDEC") quit
		if vx("CNTRY").exists(),crcd.cntry.isNull() do vreqerr("CNTRY") quit
		if vx("CASHCUR").exists(),crcd.cashcur.isNull() do vreqerr("CASHCUR") quit
		if vx("MINRATE").exists(),crcd.minrate.isNull() do vreqerr("MINRATE") quit
		if vx("MAXRATE").exists(),crcd.maxrate.isNull() do vreqerr("MAXRATE") quit
		if vx("CHKDESC").exists(),crcd.chkdesc.isNull() do vreqerr("CHKDESC") quit
		if vx("SYSCEQ").exists(),crcd.sysceq.isNull() do vreqerr("SYSCEQ") quit
		if vx("POACC").exists(),crcd.poacc.isNull() do vreqerr("POACC") quit
		if vx("COACC").exists(),crcd.coacc.isNull() do vreqerr("COACC") quit
		if vx("CONV").exists(),crcd.conv.isNull() do vreqerr("CONV") quit
		if vx("SPTDYS").exists(),crcd.sptdys.isNull() do vreqerr("SPTDYS") quit
		if vx("INTPMT").exists(),crcd.intpmt.isNull() do vreqerr("INTPMT") quit
		if vx("EMU").exists(),crcd.emu.isNull() do vreqerr("EMU") quit
	}
		if vx("BUY").exists(),crcd.buy.isNull() do vreqerr("BUY") quit
		if vx("CASHCUR").exists(),crcd.cashcur.isNull() do vreqerr("CASHCUR") quit
		if vx("CHKDESC").exists(),crcd.chkdesc.isNull() do vreqerr("CHKDESC") quit
		if vx("CNTRY").exists(),crcd.cntry.isNull() do vreqerr("CNTRY") quit
		if vx("COACC").exists(),crcd.coacc.isNull() do vreqerr("COACC") quit
		if vx("CONV").exists(),crcd.conv.isNull() do vreqerr("CONV") quit
		if vx("CRCDNO").exists(),crcd.crcdno.isNull() do vreqerr("CRCDNO") quit
		if vx("CURDEC").exists(),crcd.curdec.isNull() do vreqerr("CURDEC") quit
		if vx("DESC").exists(),crcd.desc.isNull() do vreqerr("DESC") quit
		if vx("EMU").exists(),crcd.emu.isNull() do vreqerr("EMU") quit
		if vx("INTPMT").exists(),crcd.intpmt.isNull() do vreqerr("INTPMT") quit
		if vx("MAXRATE").exists(),crcd.maxrate.isNull() do vreqerr("MAXRATE") quit
		if vx("MINRATE").exists(),crcd.minrate.isNull() do vreqerr("MINRATE") quit
		if vx("POACC").exists(),crcd.poacc.isNull() do vreqerr("POACC") quit
		if vx("RATDEC").exists(),crcd.ratdec.isNull() do vreqerr("RATDEC") quit
		if vx("RETAIL").exists(),crcd.retail.isNull() do vreqerr("RETAIL") quit
		if vx("SELL").exists(),crcd.sell.isNull() do vreqerr("SELL") quit
		if vx("SPTDYS").exists(),crcd.sptdys.isNull() do vreqerr("SPTDYS") quit
		if vx("SYSCEQ").exists(),crcd.sysceq.isNull() do vreqerr("SYSCEQ") quit
		if vx("TERMS").exists(),crcd.terms.isNull() do vreqerr("TERMS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRCD","MSG",1767,"CRCD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCRCD crcd
	if 'crcd.nostrofx.isNull() set vfkey("^ACN("_""""_crcd.nostrofx_""""_","_50_")")="CRCD(NOSTROFX) -> ACN"
	if 'crcd.ourpref.isNull() set vfkey("^ACN("_""""_crcd.ourpref_""""_","_50_")")="CRCD(OURPREF) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCRCD crcd
	type public Number %O
	type String vERRMSG

	if 'crcd.nostrofx.isNull() if 'Db.isDefined("ACN",":crcd.nostrofx") set vERRMSG = $$^MSG(8563,"CRCD(NOSTROFX) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'crcd.ourpref.isNull() if 'Db.isDefined("ACN",":crcd.ourpref") set vERRMSG = $$^MSG(8563,"CRCD(OURPREF) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("RETAIL").exists()!vx("DESC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCRCD crcd
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(crcd,.vx(),11,"|") quit
	if vx("CRCDNO").exists()!vx("MINRATE").exists()!vx("MAXRATE").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FINSPOT").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FNCRATE").exists()!vx("EMU").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MIDRATE").exists() do vbu5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NOSTROFX").exists() do vbu6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OFFBID").exists() do vbu7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OFFOFFER").exists() do vbu8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OTCBID").exists() do vbu9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OTCOFFER").exists() do vbu10 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OURPREF").exists() do vbu11 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SPOTBID").exists() do vbu12 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SPOTOFFER").exists() do vbu13 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(crcd,.vx(),11,"|")
	quit


vau1 // Trigger AFTER_UPDATE - After update of RETAIL & DESC

	type public RecordCRCD crcd
	/*
	-----Revision History--------------------------------------------------

	03/21/06 - KinI - CR 20108
		Cleaned up to comply with DBI standards. Deleted old revision 
		history.
	*/

	if 'crcd.retail do Db.delete("UTBLCRCDX","CRCD=:crcd.crcd","/NOTRIGAFT/NOTRIGBEF") quit

	type RecordUTBLCRCDX utblcrcdx=Db.getRecord("UTBLCRCDX","CRCD=:crcd.crcd",1)
	set utblcrcdx.desc=crcd.desc 
	do utblcrcdx.save()

	quit 

vbd1 // Trigger BEFORE_DELETE - Before Delete Trigger for CRCD

	type public RecordCRCD crcd
	/*	

	---- Revision History ------------------------------------------------
	
	03/21/2006 - KinI - CR 20108
		Modified to revert back to UTBLCRCDX deleting as this file has
		been erroneously obsoleted as pseudo-index but in fact should
		serve as a regular look-up table for retail currencies.		
	
	02/09/2006 - KinI - CR16664
		Modified to revert back to UTBLCRCDNO processing as this has
		been erroneously obsoleted as pseudo-index but in fact should
		serve as a regular look-up table for the Currency Code Number.
	
	----------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type String XXCRCD

	type ResultSet rs = Db.select("DIRCRCD,CRCD","CRCD0","CO=:crcd.co")
	while rs.next() do { quit:ER
		set XXCRCD = rs.getCol("CRCD")
		
		// CRCD.CRCD is a direct relationship currency for currency code CRCD0.CRCD
		if (rs.getCol("DIRCRCD") = crcd.crcd) do Runtime.setErrMSG("CRCD",3043,"crcd.crcd~XXCRCD") quit:ER 
		}
		
	if 'crcd.crcdno.isNull() do Db.delete("UTBLCRCDNO","CRCDNO=:crcd.crcdno","/NOTRIGAFT/NOTRIGBEF") 	
		
	do Db.delete("UTBLCRCDX","CRCD=:crcd.crcd","/NOTRIGAFT/NOTRIGBEF")		
		
	quit 

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger for CRCD

	type public RecordCRCD crcd
	/*	

	---- Revision History ------------------------------------------------
	
	03/21/2006 - KinI - CR 20108
		Modified to revert back to UTBLCRCDX deleting as this file has
		been erroneously obsoleted as pseudo-index but in fact should
		serve as a regular look-up table for retail currencies.		
	
	02/09/2006 - KinI - CR16664
		Modified to revert back to UTBLCRCDNO processing as this has
		been erroneously obsoleted as pseudo-index but in fact should
		serve as a regular look-up table.	

	----------------------------------------------------------------------
	*/	

	type public Boolean ER

	set crcd.dlm=%CurrentDate 
	set crcd.tlm=%CurrentTime
	
	// IN currency, , must have a fixed notional conversion rate
	if (crcd.emu=1)&((crcd.fncrate="")!(crcd.fncrate=0)) do Runtime.setErrMSG("CRCD",3262,crcd.crcd) quit:ER 

	// Post-processor for OURPREF
	if crcd.ourpref'="" do OURNOS^PROCRCD(crcd.ourpref,.crcd) quit:ER 
	
	// Post-processor for NOSTROFX
	if crcd.nostrofx'="" do OURNOS^PROCRCD(crcd.nostrofx,.crcd) quit:ER 
	
	// Post-processor for CRCDNO,MINRATE,MAXRATE
	do POST^PROCRCD(0,.crcd) quit:ER 
	
	// Post-processor for MIDRATE,FINSPOT,SPOTBID,SPOTOFFER,OFFBID,OFFOFFER,OTCBID,OTCOFFER
	if crcd.midrate'="" set ER=$$RATE^PROCRCD(crcd.midrate,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.finspot'="" set ER=$$RATE^PROCRCD(crcd.finspot,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.spotbid'="" set ER=$$RATE^PROCRCD(crcd.spotbid,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.spotoffer'="" set ER=$$RATE^PROCRCD(crcd.spotoffer,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.offbid'="" set ER=$$RATE^PROCRCD(crcd.offbid,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.offoffer'="" set ER=$$RATE^PROCRCD(crcd.offoffer,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.otcbid'="" set ER=$$RATE^PROCRCD(crcd.otcbid,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	if crcd.otcoffer'="" set ER=$$RATE^PROCRCD(crcd.otcoffer,crcd.crcd,crcd.minrate,crcd.maxrate) quit:ER 
	
	// If crcd.crcdno is not defined, "Data required in Data Item ~p1" error 
	// is returned by POST^PROCRCD
	type RecordUTBLCRCDNO utblcrcdno = Class.new("RecordUTBLCRCDNO","CRCDNO=:crcd.crcdno")
	set utblcrcdno.crcd=crcd.crcd	
	do utblcrcdno.bypassSave()
	
	// Valid cash currency
	if 'crcd.retail do Db.delete("UTBLCRCDX","CRCD=:crcd.crcd","/NOTRIGAFT/NOTRIGBEF") quit

	type RecordUTBLCRCDX utblcrcdx=Db.getRecord("UTBLCRCDX","CRCD=:crcd.crcd",1)
	set utblcrcdx.desc=crcd.desc 
	do utblcrcdx.save()
	
	quit 
	

vbu1 // Trigger BU_CRCD - Before Update of CRCD

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set crcd.dlm=%SystemDate
	set crcd.tlm=%CurrentTime
	quit 
	

vbu2 // Trigger BU_CRCDNO - Update CRCDNO,MAXRATE

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	/*	
	---- Revision History ------------------------------------------------

	02/09/2006 - KinI - CR16664
		Modified to revert UTBLCRCDNO processing as this has been 
		erroneously obsoleted as pseudo-index but in fact should serve 
		as a regular look-up table.
		
	11/29/2005 - KinI - CR18478
		Modified the trigger to remove obsoleted UTBLCRCDNO index table 
		references.
	----------------------------------------------------------------------
	*/	
	
	// Post-Processor for crcd.crcdno
	do POST^PROCRCD(1,.crcd)

								if crcd.crcdno=crcd.crcdno.oldVal quit
								else  do {
																type RecordUTBLCRCDNO utblcrcdno=Db.getRecord("UTBLCRCDNO","CRCDNO=:crcd.crcdno",1)
		set utblcrcdno.crcd=crcd.crcd
		do utblcrcdno.bypassSave()
															}
	
	quit 

vbu3 // Trigger BU_FINSPOT - Update of CRCD.FINSPOT

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.finspot,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 
	

vbu4 // Trigger BU_FNCRATE_EMU - Before Update of FNCRATE or EMU

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	/*
	
								---- Revision History ------------------------------------------------
	
								03/07/01 - LEVINTOLR - 43983
		   Removed double quotes from the third argument in line -
																			do Runtime.setErrMSG("CRCD",3262,crcd.crcd) quit:ER
																			in order to display the correct error message.
	----------------------------------------------------------------------
								*/

	if (crcd.emu=1)&((crcd.fncrate="")!(crcd.fncrate=0)) do Runtime.setErrMSG("CRCD",3262,crcd.crcd) quit:ER 
	quit
	

vbu5 // Trigger BU_MIDRATE - Update of CRCD.MIDRATE

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.midrate,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 
	

vbu6 // Trigger BU_NOSTROFX - Update of NOSTROFX

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	do OURNOS^PROCRCD(crcd.nostrofx,.crcd)
	quit

vbu7 // Trigger BU_OFFBID - Update of OFFBID

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.offbid,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 

vbu8 // Trigger BU_OFFOFFER - Update of OFFOFFER

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.offoffer,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 

vbu9 // Trigger BU_OTCBID - Update of CRCD.OTCBID

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.otcbid,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 

vbu10 // Trigger BU_OTCOFFER - Update of CRCD.OTCOFFER

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.otcoffer,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 

vbu11 // Trigger BU_OURPREF - Update of OURPREF

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	do OURNOS^PROCRCD(crcd.ourpref,.crcd)
	quit 

vbu12 // Trigger BU_SPOTBID - Update of CRCD.SPOTBID

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.spotbid,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 

vbu13 // Trigger BU_SPOTOFFER - Update of CRCD.SPOTOFFER

	type public RecordCRCD crcd
	do crcd.setAuditFlag(1)
	set ER=$$RATE^PROCRCD(crcd.spotoffer,crcd.crcd,crcd.minrate,crcd.maxrate)
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRCD crcd

	if (%O = 2) do vload

	if vobj(crcd,1).exists() do {

		set X = crcd.avespotaccum if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.AVESPOTACCUM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.dlm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLM", vRM) quit
		set X = crcd.finspot if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.FINSPOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.midrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.MIDRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.offbid if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.OFFBID"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.offoffer if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.OFFOFFER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.otcbid if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.OTCBID"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.otcoffer if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.OTCOFFER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.spotbid if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.SPOTBID"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.spotoffer if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,.0000001,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.SPOTOFFER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[crcd.TERMS) set vRM=$$^MSG(742,"L") do vdderr("TERMS", vRM) quit
		set X = crcd.tlm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TLM", vRM) quit
	}
	if crcd.co.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CO", vRM) quit
	if crcd.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit

	if vobj(crcd).exists() ! 'vobj(crcd,"").order().isNull() do {

		set X = crcd.bsfwdgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSFWDGL", vRM) quit
		set X = crcd.bsfwdpurgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSFWDPURGL", vRM) quit
		set X = crcd.bsfwdsalgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSFWDSALGL", vRM) quit
		set X = crcd.bsfwdsetgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSFWDSETGL", vRM) quit
		set X = crcd.bsfwdsets if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSFWDSETS", vRM) quit
		set X = crcd.bsfxposgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSFXPOSGL", vRM) quit
		set X = crcd.bsotcgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSOTCGL", vRM) quit
		set X = crcd.bsspotgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSSPOTGL", vRM) quit
		set X = crcd.bssptsetgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSSPTSETGL", vRM) quit
		set X = crcd.bssptsets if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("BSSPTSETS", vRM) quit
		if '("01"[crcd.BUY) set vRM=$$^MSG(742,"L") do vdderr("BUY", vRM) quit
		set X = crcd.calendar if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("CALENDAR", vRM) quit
		if '("01"[crcd.CASHCUR) set vRM=$$^MSG(742,"L") do vdderr("CASHCUR", vRM) quit
		if crcd.chkdesc.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CHKDESC", vRM) quit
		set X = crcd.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
		if '("01"[crcd.COACC) set vRM=$$^MSG(742,"L") do vdderr("COACC", vRM) quit
		if '("01"[crcd.CONV) set vRM=$$^MSG(742,"L") do vdderr("CONV", vRM) quit
		if crcd.crcdno.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCDNO", vRM) quit
		set X = crcd.curdec if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("CURDEC", vRM) quit
		if crcd.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
		if '("01"[crcd.EMU) set vRM=$$^MSG(742,"L") do vdderr("EMU", vRM) quit
		set X = crcd.emuted if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EMUTED", vRM) quit
		set X = crcd.emutsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EMUTSD", vRM) quit
		set X = crcd.exch if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.EXCH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.fncrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.FNCRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.fwdposgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDPOSGL", vRM) quit
		set X = crcd.fwdpurgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDPURGL", vRM) quit
		set X = crcd.fwdpurglnr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDPURGLNR", vRM) quit
		set X = crcd.fwdsalgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDSALGL", vRM) quit
		set X = crcd.fwdsalglnr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDSALGLNR", vRM) quit
		set X = crcd.fwdsetgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDSETGL", vRM) quit
		set X = crcd.fwdsetgln if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDSETGLN", vRM) quit
		set X = crcd.fwdsetsel if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDSETSEL", vRM) quit
		set X = crcd.fwdsetseln if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FWDSETSELN", vRM) quit
		set X = crcd.fxposgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FXPOSGL", vRM) quit
		set X = crcd.fxvar if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("FXVAR", vRM) quit
		if '("01"[crcd.INTPMT) set vRM=$$^MSG(742,"L") do vdderr("INTPMT", vRM) quit
		set X = crcd.maxrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,1,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.MAXRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.mincash if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.MINCASH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.minrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,1,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCD.MINRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = crcd.nostrofx if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("NOSTROFX", vRM) quit
		set X = crcd.otcgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("OTCGL", vRM) quit
		set X = crcd.ourpref if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("OURPREF", vRM) quit
		if '("01"[crcd.POACC) set vRM=$$^MSG(742,"L") do vdderr("POACC", vRM) quit
		set X = crcd.ratdec if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("RATDEC", vRM) quit
		if '("01"[crcd.RETAIL) set vRM=$$^MSG(742,"L") do vdderr("RETAIL", vRM) quit
		if '("01"[crcd.SELL) set vRM=$$^MSG(742,"L") do vdderr("SELL", vRM) quit
		set X = crcd.spotgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SPOTGL", vRM) quit
		set X = crcd.sptdys if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("SPTDYS", vRM) quit
		set X = crcd.sptsetgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SPTSETGL", vRM) quit
		set X = crcd.sptsetgln if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SPTSETGLN", vRM) quit
		set X = crcd.sptsetsel if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SPTSETSEL", vRM) quit
		set X = crcd.sptsetseln if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SPTSETSELN", vRM) quit
		if '("01"[crcd.SYSCEQ) set vRM=$$^MSG(742,"L") do vdderr("SYSCEQ", vRM) quit
		set X = crcd.tfsbsgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("TFSBSGL", vRM) quit
		set X = crcd.tfsgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("TFSGL", vRM) quit
		set X = crcd.variance if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("VARIANCE", vRM) quit
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRCD","MSG",979,"CRCD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCRCD crcd)	//CRCD Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="O" do {
			do vj1(.crcd)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CRCDRATEH
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="O" do {
			do vj1(.crcd)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CRCDRATEH
			}
		}

	quit


vj1(RecordCRCD crcd)	// CRCDRATEH  Table CRCDRATEH  CRCDRATEH

	type Public String TJD
	type String v1,v2,v3,vlastkey
	set v1=crcd.co
	set v2=crcd.crcd
	set v3=TJD
	set vlastkey=Db.nextVal("CRCDRATEH","CO=:v1,CRCD=:v2,EFD=:v3")
	type RecordCRCDRATEH crcdrateh=Db.getRecord("CRCDRATEH","CO=:v1,CRCD=:v2,EFD=:v3,SEQ=:vlastkey",1)
	set crcdrateh.avespotaccum=crcd.avespotaccum
	set crcdrateh.dlm=crcd.dlm
	set crcdrateh.finspot=crcd.finspot
	set crcdrateh.midrate=crcd.midrate
	set crcdrateh.offbid=crcd.offbid
	set crcdrateh.offoffer=crcd.offoffer
	set crcdrateh.otcbid=crcd.otcbid
	set crcdrateh.otcoffer=crcd.otcoffer
	set crcdrateh.spotbid=crcd.spotbid
	set crcdrateh.spotoffer=crcd.spotoffer
	set crcdrateh.terms=crcd.terms
	set crcdrateh.tlm=crcd.tlm

	do crcdrateh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordCRCD crcd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CO").exists() set vux("CO") = vx("CO")
	if vx("CRCD").exists() set vux("CRCD") = vx("CRCD")
	do vkey(1) set voldkey = crcd.co_","_crcd.crcd         // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crcd.co_","_crcd.crcd         // Copy new keys into object
	type RecordCRCD vnewrec = crcd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRCD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRCD crcd

	if vux("CO").exists() set crcd.co = vux("CO").piece("|",i)
	if vux("CRCD").exists() set crcd.crcd = vux("CRCD").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordCRCD crcd
	type public String vpar

	do Db.delete("CRCDMGH","CO=:crcd.co AND CRCD=:crcd.crcd",vpar) // Cascade delete

	do Db.delete("CRCDRATEH","CO=:crcd.co AND CRCD=:crcd.crcd",vpar) // Cascade delete

	quit
