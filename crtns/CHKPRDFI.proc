CHKPRDFI(RecordCHKPRD chkprd, String vpar, Boolean vparNorm) // CHKPRD - Check Book Production File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              09/09/2004
	// Trigger Definition (4)                      01/17/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = chkprd.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(chkprd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(chkprd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String BRCD = chkprd.brcd
	type String TJD = chkprd.tjd
	type String CID = chkprd.cid
	type String CHKS = chkprd.chks
	type String SEQ = chkprd.seq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("BRCD").exists()!vx("TJD").exists()!vx("CID").exists()!vx("CHKS").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CHKPRD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CHKPRD","BRCD = :chkprd.brcd and TJD = :chkprd.tjd and CID = :chkprd.cid and CHKS = :chkprd.chks and SEQ = :chkprd.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String BRCD
	type public String TJD
	type public String CID
	type public String CHKS
	type public String SEQ

	type RecordCHKPRD chkprd = Db.getRecord("CHKPRD","BRCD=:BRCD,TJD=:TJD,CID=:CID,CHKS=:CHKS,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do chkprd.setMode(2)

		do CHKPRDFI(chkprd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCHKPRD chkprd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CHKPRD","BRCD = :chkprd.brcd and TJD = :chkprd.tjd and CID = :chkprd.cid and CHKS = :chkprd.chks and SEQ = :chkprd.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(chkprd))  S ^CHKPRD(vobj(chkprd,-3),vobj(chkprd,-4),vobj(chkprd,-5),vobj(chkprd,-6),vobj(chkprd,-7))=vobj(chkprd)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCHKPRD chkprd


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CHKPRD(vobj(chkprd,-3),vobj(chkprd,-4),vobj(chkprd,-5),vobj(chkprd,-6),vobj(chkprd,-7)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordCHKPRD chkprd

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCHKPRD chkprd

	if chkprd.brcd.isNull() do vreqerr("BRCD") quit
	if chkprd.tjd.isNull() do vreqerr("TJD") quit
	if chkprd.cid.isNull() do vreqerr("CID") quit
	if chkprd.chks.isNull() do vreqerr("CHKS") quit
	if chkprd.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CHKPRD","MSG",1767,"CHKPRD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("STAT").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert of CHKPRD Record

	type public RecordCHKPRD chkprd
	/*
	-----Revision History-------------------------------------------------

	11/15/05 - PUTTASWH CR17011
		   Added the new trigger AFTER_INSERT in order to
		   check whether the number of outstanding checks   
		   exceeds with the parameter CHKOUT defined at
		   the account.  If so an error is thrown and the
		   record is not inserted.
	*/

	type public Boolean ER
	type public String RM
	
	do VEROUT^CHKPROC(chkprd.cid) quit:ER		
	
	quit
	
	
	
	

vau1 // Trigger AFTER_UPDATE - After Update of CHKPRD Record

	type public RecordCHKPRD chkprd
	/*
	-----Revision History-------------------------------------------------

	11/15/05 - PUTTASWH CR17011
		   Added the new trigger AFTER_UPDATE in order to
		   check whether the number of outstanding checks   
		   exceeds with the parameter CHKOUT defined at
		   the account.  If so an error is thrown and the
		   record is not updated.
	*/

	type public Boolean ER
	type public String RM
	
	do VEROUT^CHKPROC(chkprd.cid) quit:ER	
	
	quit
	 
	

vau2 // Trigger AU_STAT - After update of STAT

	type public RecordCHKPRD chkprd
	/*
	-----Revision History--------------------------------------------------
	09/13/00 - LEVINTOLR - 42013
																			Modified to delete the entry from ^XCHKPRD only if Status
																			is equal to 2 (Cancel).

	09/07/99 - CARROLLJ - 33890
		   Convert to PSL.


	*/

	new XCID,XCHKS
	set XCID=chkprd.cid
	set XCHKS=chkprd.chks
	if chkprd.stat=2 set ER=0 do Db.delete("XCHKPRD","CID=:XCID AND CHKS=:XCHKS")
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert of CHKPRD record

	type public RecordCHKPRD chkprd
	/*
								-----Revision History-------------------------------------------------
	
								11/14/05 - PUTTASWH - 17011
        	   Modified the error message 8694 that checks for the 
        	   record in CHKPRD table and replaced it by 8693.
        	   Deleted the code that checks for the record in XCHKPRD.         
	
								*/

	
	type public Boolean ER	
	type String MSG

	set MSG=$$^MSG(7094)		//Check
	if '$$EUROCHK^CHKPROC(chkprd.cid) do Runtime.setErrMSG("CHKPRD",69,"MSG") quit:ER
	 
	set XCID=chkprd.cid
	
	type RecordACN acn=Db.getRecord("ACN","CID=:chkprd.cid",1)
	
	// Account has invalid check type 	
	if acn.chks="" do Runtime.setErrMSG("CHKPRD",8708) quit:ER	
	// Account ~p1 closed	
	if acn.stat=4 do Runtime.setErrMSG("CHKPRD",55,chkprd.cid) quit:ER 
	
	type ResultSet rs=Db.select("STAT","CHKPRD","CID=:chkprd.cid AND CHKS=:acn.chks AND STAT=0")
	// Pending check book request already exists 
	if 'rs.isEmpty() do Runtime.setErrMSG("CHKPRD",8693) quit:ER	
		
	type RecordXCHKPRD xchkprd=Db.getRecord("XCHKPRD","CID=:chkprd.cid,CHKS=:chkprd.chks",1)
	do xchkprd.save()	
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCHKPRD chkprd

	set X = chkprd.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	set X = chkprd.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = chkprd.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = chkprd.chks if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKS", vRM) quit
	set X = chkprd.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = chkprd.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = chkprd.chkcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CHKCNT", vRM) quit
	set X = chkprd.stat if 'X.isNull(),'Db.isDefined("STBLCHKPRD","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
	if chkprd.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CHKPRD","MSG",979,"CHKPRD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCHKPRD chkprd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("BRCD").exists() set vux("BRCD") = vx("BRCD")
	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CHKS").exists() set vux("CHKS") = vx("CHKS")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = chkprd.brcd_","_chkprd.tjd_","_chkprd.cid_","_chkprd.chks_","_chkprd.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = chkprd.brcd_","_chkprd.tjd_","_chkprd.cid_","_chkprd.chks_","_chkprd.seq // Copy new keys into object
	type RecordCHKPRD vnewrec = chkprd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CHKPRD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCHKPRD chkprd

	if vux("BRCD").exists() set chkprd.brcd = vux("BRCD").piece("|",i)
	if vux("TJD").exists() set chkprd.tjd = vux("TJD").piece("|",i)
	if vux("CID").exists() set chkprd.cid = vux("CID").piece("|",i)
	if vux("CHKS").exists() set chkprd.chks = vux("CHKS").piece("|",i)
	if vux("SEQ").exists() set chkprd.seq = vux("SEQ").piece("|",i)
	quit
