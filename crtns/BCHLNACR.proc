BCHLNACR //Batch BCHLNACR - BOD Loan Accrual Utility
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNACR Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNACR")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNACR") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNACR",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNACR")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNACR","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNACR",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNACR",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNACR","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNACR",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	/*
	   Calculate accruals by calling off to appropriate routine based
	   upon value of accounting accrual method.  If method is equal
	   to "2" then act as if it was "1".  Method "2" should only be
	   used as a payoff accrual method.
	*/
	new TMPACN
	
	type RecordLN ln=Db.getRecord("LN","CID")

	set GRP=ln.grp					// Product Group
	set TYPE=ln.type				// Product Type
	set CRCD=ln.crcd				// Currency Code

	if CRCDLIST'[CRCD quit				// currency not available for processing

	/*
	   ACM values:
	   1= Pre-calculated (Amortized)
	   2= Available For Payoff Calc Only
	   3= Add-on, discount
	*/	
	if ACM=1!(ACM=2) do {
		
		set %ACM=1
		
		// Create a new LNACR1 record
		do UPD^LNACR1(.ln, EFD)

		if '%ANT do TCC(.ln)
	}
	
	if ACM=3 set %ACM=3 do {
	
		type RecordLNACR3 lnacr3 = Class.new("RecordLNACR3", "EFD = :EFD, GRP = :GRP, TYPE = :TYPE, CID = :CID")

		do ACR^LNACR3(.ln, .lnacr3)

		if '%ANT do TCC(.ln)

		if ln.stat=4 quit

		// Create a new LNACR3 record
		do lnacr3.bypassSave()
	}
	
	quit


TCC(RecordLN ln)	// Update record

	set CC=ln.cc					// Cost Center
	set CRCD=ln.crcd				// Currency Code
	set GLSC=ln.glsc				// General Ledger Set Code	
	// Loan Accrual Calculation
	if '$L(GLSC) set ER=1,RM=$$^MSG(3809) quit
	
	do BLDTOT(ln.acr)
	set ln.acr=%ACR					// Accrued Interest
	do ln.bypassSave()				// Update account
	quit
	

BLDTOT(ACR)	// 

	// Build offset array to include the amounts posted to each individual
	// account

	/*
	 Build global with the standard information required for posting 
	 the offset, track the existence of the global with an array using
	 the significant keys of the global. After creating the entry, 
	 fall into the code which follows to update the global with the 
	 amount of the transaction.
	*/
	new BCHID,JOB
	set BCHID="BCHLNACR"
	set JOB=%ProcessID

	if 'Db.isDefined("TMPBCHOFF","TJD,BCHID,JOB,GRP,CRCD,TYPE,GLSC,CC") do {
		// Income G/L account from fee plan or account's G/L set code
		new ACN,ACN1,TCMT
		set TCMT="TYPE "_TYPE_" CC "_CC_" ACR ADJ"
		type RecordUTBLGLSC utblglsc=Db.getRecord("UTBLGLSC","GLSC")
		set GLSC1=utblglsc.lgli		// Loan G/L # (Interest Income)
		set GLSC2=utblglsc.lgl2		// Loan G/L # (Accrued Int)
		if GRP="CBL" set ACN=+GLSC2,ACN1=+GLSC1
		else  set ACN=+GLSC1,ACN1=+GLSC2

		do BDOFFSET^BCHSOURC("BCHLNACR",GRP,CRCD,TYPE,GLSC,CC,ACN,ACN1,"MDR","MCR",TCMT)
		}
	
	/* 
	  Offset Record already exists, so update it with the amount from this
	  transaction. Pass debit, credit indicator 0 and 1. This will account
	  for the Interest Income and the accrued interest gl's offsets.The 
	  posting of offsets will flip the gl's if the ultimate posting amount
	  is negative.
	*/	
	do UPOFFSET^BCHSOURC("BCHLNACR",GRP,CRCD,TYPE,GLSC,CC,1,$$^SCARND((%ACR-ACR),0,CID))
	do UPOFFSET^BCHSOURC("BCHLNACR",GRP,CRCD,TYPE,GLSC,CC,0,$$^SCARND((%ACR-ACR),0,CID))

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	new vi
	for vi=1:1 set vRECORD=$P(vINPUT,"|",vi) quit:vRECORD=""  do {
		set CID=$P(vRECORD,$C(9),1)
		set ACM=$P(vRECORD,$C(9),2)
		set CRCDLIST="~"_$P(vRECORD,$C(9),3)
	 	do vPROC(CID)
		}
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	/*
           Build vINPUT for individual accounts, each entry will contain
           CID, ACM, list of currencies allowed. The thread will verify that
           the account uses one of those currencies.
        */

        type public ResultSet nextacct
 
        if $G(vINPUT)="" do {
                set GRP=$O(ACM(""))
                set TYPE=$O(ACM(GRP,""))
                set nextacct=Db.select("CID","LN","GRP=:GRP AND TYPE=:TYPE")
                if nextacct.isEmpty() set TYPE="" quit
                set vINPUT=""
                }
 
        set vINPUT=""
        if TYPE="" quit
        set vi=0
 
        while nextacct.next() do { quit:vi=200
                set vINPUT=vINPUT_"|"_nextacct.getCol(1)_$C(9)_ACM(GRP,TYPE)
                set vi=vi+1
                }
 
        if vi'=200 do {
                do NEXTTYPE
                if TYPE=""!(GRP="") quit
                set nextacct=Db.select("CID","LN","GRP=:GRP AND TYPE=:TYPE")
                if nextacct.isEmpty() set TYPE="",GRP="" quit
                }

        set vINPUT=$P(vINPUT,"|",2,202)
 
        quit

NEXTTYPE        // Get next availabe type
 
        set TYPE=$O(ACM(GRP,TYPE)) quit:TYPE'=""
        set GRP=$O(ACM(GRP)) quit:GRP=""
        set TYPE=$O(ACM(GRP,TYPE))
 
        quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type RecordCUVAR cuvar=Db.getRecord("CUVAR","*")
 	set EFD=cuvar.aand

	if %SystemDate-1-EFD set %BatchExit=1 quit

	/*
	 Determine all product types which should be processed 
	 and build array ACM containing the group, type, ACM and 
	 CRCD of that type.
	*/

	type ResultSet prodctl=Db.select("TYPE,AACM","PRODCTL","AACM>0 AND CLS='L'")

	if prodctl.isEmpty()
	else  while prodctl.next() do {
		new TYPE
		set TYPE=prodctl.getCol(1)
		set proddftl=Db.getOneRow("CRCD,GRP","PRODDFTL","TYPE")
		set ACMTMP(prodctl.getCol(2),prodctl.getCol(1),$P(proddftl,$C(9),1))=$P(proddftl,$C(9),2)
		}

	if '$D(ACMTMP) set %BatchExit=1 quit

	// loop through tmp array and build ACM as required for  SCHEXEC
	new TYPE,AC,CRCD,GRP
	set (AC,CRCD,TYPE)=""
	for  set AC=$O(ACMTMP(AC)) quit:AC=""  do {
		for  set TYPE=$O(ACMTMP(AC,TYPE)) quit:TYPE=""  do {
			for  set CRCD=$O(ACMTMP(AC,TYPE,CRCD)) quit:CRCD=""  do {
				set GRP=ACMTMP(AC,TYPE,CRCD)
				if $D(ACM(GRP,TYPE)) set ACM(GRP,TYPE)=ACM(GRP,TYPE)_"~"_CRCD quit
				set ACM(GRP,TYPE)=AC_$C(9)_CRCD
				}
			}
		}
	quit


 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","LN","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type RecordCUVAR cuvar=Db.getRecord("CUVAR","*")
	set EFD=cuvar.aand

	#accept pgm=spier;date=12/8/03
	set %SystemDate=%SystemDate-1
	set %ANT=0
	do SOURCE^BCHSOURC("LNACR","LNACR",.%UserID,.BRCD) quit:ER
	
	kill TCC
	
	set %PLDF=1

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("LNACR","LNACR",.%UserID,.BRCD) quit:ER
	set STATUS=0 do ^TTXLOK

	set TPD=%SystemDate
	#accept pgm=spier;date=12/8/03
	set %SystemDate=%SystemDate-1
	
	set %ANT=0
	
	// start LNACR global from scratch if this is not a restart
	
	if '$G(%BatchRestart) do {
		do Db.delete("LNACR1","EFD=:EFD")
		do Db.delete("LNACRL2","EFD=:EFD")
		do Db.delete("LNACR3","EFD=:EFD")
		}

	set %PLDF=1


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	new off,BCHID
	set BCHID="BCHLNACR"
	type ResultSet offset=Db.select("CRCD,TYPE,GLSC,CC,DESC,CREDIT","TMPBCHOFF","TJD=:TJD AND BCHID=:BCHID")


	if 'offset.isEmpty() while offset.next() do {
		set CRCD=offset.getCol(1)
		set TYPE=offset.getCol(2)
		set GLSC=offset.getCol(3)
		set CC=offset.getCol(4)
		set GRP=offset.getCol(5)
		set amt=offset.getCol(6)
		set off(CRCD,GRP,TYPE,GLSC,CC)=$G(off(CRCD,GRP,TYPE,GLSC,CC))+amt
		}

	set (CRCD,TYPE,GLSC,CC,GRP)=""


	set CLS="L"
	for  set CRCD=$O(off(CRCD)) quit:CRCD=""  do {
	    for  set GRP=$O(off(CRCD,GRP)) quit:GRP=""  do {
		for  set TYPE=$O(off(CRCD,GRP,TYPE)) quit:TYPE=""  do {
		    for  set GLSC=$O(off(CRCD,GRP,TYPE,GLSC)) quit:GLSC=""  do {
			for  set CC=$O(off(CRCD,GRP,TYPE,GLSC,CC)) quit:CC=""  do {
				
				// this condition occurred in QA
				if 'Db.isDefined("TTL","TJD,CRCD,CLS,GRP,TYPE,GLSC,CC") do { quit
					type RecordTTL ttl=Class.new("RecordTTL")
					set ttl.tjd=TJD
					set ttl.crcd=CRCD
					set ttl.cls=CLS
					set ttl.grp=GRP
					set ttl.type=TYPE
					set ttl.glsc=GLSC
					set ttl.cc=CC
					set ttl.meacradj=off(CRCD,GRP,TYPE,GLSC,CC)
					do ttl.bypassSave()
					}
				type RecordTTL ttl=Db.getRecord("TTL","TJD,CRCD,CLS,GRP,TYPE,GLSC,CC")

				set ttl.meacradj=off(CRCD,GRP,TYPE,GLSC,CC)
				do ttl.bypassSave()
				}
			}
		    }
		}
	   }

	do OFFSET^TTXBLD(%SystemDate,BRCD,%UserID,"BCHLNACR")

	// Generate reports
	
	type public IO io=Class.new("IO")
	
	set io.fileName="LNRPT."_$$DAT^%ZM(%SystemDate,"MMDD")
	set io.openParams="WRITE/NEWV"
 
	do io.open()
 
	if $G(ER) do { quit
		new DIR,FILE,IO
		set DIR=io.directory
		set FILE=io.fileName
		set IO=DIR_" "_FILE
		// Error opening device ~p1
		do Runtime.setErrMSG("LN",7878,IO)
		}
	
	set SAVEFD=EFD
	
	set GRP=""
	set GRP=Db.nextKey("LNACR1","EFD,GRP")
	// Loan Accrual Summary - Method 1 report
	if GRP'="" set RID="SCA009" do REP
	
	set GRP=""
	set GRP=Db.nextKey("LNACR3","EFD,GRP")
	// Loan Accrual Summary - Method 3 report
	if GRP'="" set RID="SCA010" do REP

	do io.close()

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set JD=cuvar.aand		// Accrual Adj - Next Date
	set FRE=cuvar.aaf		// Accrual Adj Frequency

	set NJD=$$NJD^UFRE(JD,FRE) quit:ER
	set cuvar.aald=cuvar.aand	// Update Accrual Adj - Last Date
	set cuvar.aand=NJD		// Update Adj - Next Date

	do cuvar.bypassSave()		// Update 

	set ER=0

	quit


REP	// print reports

	set %ED=$$DAT^%ZM(EFD)
	set MIN(1)=EFD-1,MAX(1)=EFD
	set (%NOOPEN,%NOCLOSE)=""
	do ^URID do V0^@PGM
	set EFD=SAVEFD

	quit
	

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
