LNPL3AFL(RecordLNPL3A lnpl3a, String vpar, Boolean vparNorm) // LNPL3A - Problem Ln Restruct Sequences Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              11/22/2003
	// Trigger Definition (2)                      08/29/2005
	// Journal File Definition (2)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnpl3a.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnpl3a,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnpl3a,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnpl3a.cid
	type String RSEQ = lnpl3a.rseq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("RSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNPL3A",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNPL3A","CID = :lnpl3a.cid and RSEQ = :lnpl3a.rseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String RSEQ

	type RecordLNPL3A lnpl3a = Db.getRecord("LNPL3A","CID=:CID,RSEQ=:RSEQ")
	if (%ProcessMode = 2) do {
		do lnpl3a.setMode(2)

		do LNPL3AFL(lnpl3a,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNPL3A lnpl3a

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNPL3A","CID = :lnpl3a.cid and RSEQ = :lnpl3a.rseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnpl3a))  S ^LNOLC(3,vobj(lnpl3a,-3),vobj(lnpl3a,-4))=vobj(lnpl3a)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnpl3a)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNPL3A lnpl3a

	if vpar["/JOURNAL/" do VJOURNAL(.lnpl3a)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^LNOLC(3,vobj(lnpl3a,-3),vobj(lnpl3a,-4))          // Delete Record
	quit


vreqn // Validate required data items

	type public RecordLNPL3A lnpl3a

	if lnpl3a.plres.isNull() do vreqerr("PLRES") quit
	if lnpl3a.pltyp.isNull() do vreqerr("PLTYP") quit
	if lnpl3a.rdte.isNull() do vreqerr("RDTE") quit
	if lnpl3a.rofc.isNull() do vreqerr("ROFC") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNPL3A lnpl3a

	if lnpl3a.cid.isNull() do vreqerr("CID") quit
	if lnpl3a.rseq.isNull() do vreqerr("RSEQ") quit

		if vx("PLRES").exists(),lnpl3a.plres.isNull() do vreqerr("PLRES") quit
		if vx("PLTYP").exists(),lnpl3a.pltyp.isNull() do vreqerr("PLTYP") quit
		if vx("RDTE").exists(),lnpl3a.rdte.isNull() do vreqerr("RDTE") quit
		if vx("ROFC").exists(),lnpl3a.rofc.isNull() do vreqerr("ROFC") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPL3A","MSG",1767,"LNPL3A."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNPL3A lnpl3a
	if 'lnpl3a.cid.isNull() set vfkey("^LNOLC("_3_","_""""_lnpl3a.cid_""""_")")="LNPL3A(CID) -> LNPL3"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNPL3A lnpl3a
	type public Number %O
	type String vERRMSG

	if 'lnpl3a.cid.isNull() if 'Db.isDefined("LNPL3",":lnpl3a.cid") set vERRMSG = $$^MSG(8563,"LNPL3A(CID) -> LNPL3") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PLTYP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - Update LN file

	type public RecordLNPL3A lnpl3a
	/*
	---------- Revision History ------------------------------------------
	09/16/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	if %ProcessMode=2 quit 
	
	// Update LN.PLF field
	
	new XCID,XPLTYP
	set XCID=lnpl3a.cid
	set XPLTYP=lnpl3a.pltyp
	// Change to modify or other options
	set XPLTYP=$S(XPLTYP=0:1,1:2)       
	
	do Db.update("LN","PLF=:XPLTYP","CID=:XCID")
	quit 

vau1 // Trigger PLTYP_AU - Update LN column PLF

	type public RecordLNPL3A lnpl3a
	/*
	---------- Revision History ------------------------------------------
	09/16/99 - CARROLLJ 31126
		   Convert to PSL.
	*/

	
	// Update LN.PLF field
	
	new XCID,XPLTYP
	set XCID=lnpl3a.cid
	set XPLTYP=lnpl3a.pltyp
	// Change to modify or other options
	set XPLTYP=$S(XPLTYP=0:1,1:2)       
	
	do Db.update("LN","PLF=:XPLTYP","CID=:XCID")
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNPL3A lnpl3a

	set X = lnpl3a.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnpl3a.rseq if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RSEQ", vRM) quit
	set X = lnpl3a.cores if 'X.isNull(),'Db.isDefined("UTBLCORES","X") set vRM = $$^MSG(1485,X) do vdderr("CORES", vRM) quit
	set X = lnpl3a.cotr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPL3A.COTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnpl3a.pldes.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PLDES", vRM) quit
	set X = lnpl3a.plres if 'X.isNull(),'Db.isDefined("UTBLPLRES","X") set vRM = $$^MSG(1485,X) do vdderr("PLRES", vRM) quit
	set X = lnpl3a.pltyp if 'X.isNull(),'Db.isDefined("STBLPLTYP","X") set vRM = $$^MSG(1485,X) do vdderr("PLTYP", vRM) quit
	set X = lnpl3a.rdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RDTE", vRM) quit
	set X = lnpl3a.rofc if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("ROFC", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPL3A","MSG",979,"LNPL3A."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNPL3A lnpl3a)	//LNPL3A Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnpl3a)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_NEW_DEL
			}
		else  if TSRC="O" do {
			do vj1(.lnpl3a)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_NEW_DEL
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.lnpl3a)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_NEW_DEL
			}
		else  if TSRC="O" do {
			do vj1(.lnpl3a)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_NEW_DEL
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj2(.lnpl3a)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj2(.lnpl3a)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNPL3A lnpl3a)	// HIST_NEW_DEL  Table HIST  History entry

	type Public String EFD,%IDENT,%O,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnpl3a.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG($S(%O=0:147,%O=3:148),lnpl3a.cid,lnpl3a.rseq)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNPL3A lnpl3a)	// HIST_U  Table HIST  Maintenance history

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnpl3a.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnpl3a.cid_","_lnpl3a.rseq,"LNPL3A",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNPL3A lnpl3a

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("RSEQ").exists() set vux("RSEQ") = vx("RSEQ")
	do vkey(1) set voldkey = lnpl3a.cid_","_lnpl3a.rseq    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnpl3a.cid_","_lnpl3a.rseq    // Copy new keys into object
	type RecordLNPL3A vnewrec = lnpl3a.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNPL3A",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNPL3A lnpl3a

	if vux("CID").exists() set lnpl3a.cid = vux("CID").piece("|",i)
	if vux("RSEQ").exists() set lnpl3a.rseq = vux("RSEQ").piece("|",i)
	quit
