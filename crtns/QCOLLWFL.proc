QCOLLWFL(RecordQCOLLWK qcollwk, String vpar, Boolean vparNorm) // QCOLLWK - Collection Work File  Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (20)             11/22/2003
	// Trigger Definition (2)                      11/21/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = qcollwk.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(qcollwk,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(qcollwk,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = qcollwk.cid
	type String SEQ = qcollwk.seq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("QCOLLWK",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("QCOLLWK","CID = :qcollwk.cid and SEQ = :qcollwk.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ

	type RecordQCOLLWK qcollwk = Db.getRecord("QCOLLWK","CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do qcollwk.setMode(2)

		do QCOLLWFL(qcollwk,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordQCOLLWK qcollwk

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("QCOLLWK","CID = :qcollwk.cid and SEQ = :qcollwk.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(qcollwk))  S ^QCOLLWK(vobj(qcollwk,-3),vobj(qcollwk,-4))=vobj(qcollwk)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordQCOLLWK qcollwk


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^QCOLLWK(vobj(qcollwk,-3),vobj(qcollwk,-4))        // Delete Record
	quit


vreqn // Validate required data items

	type public RecordQCOLLWK qcollwk

	if qcollwk.tjd.isNull() do vreqerr("TJD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordQCOLLWK qcollwk

	if qcollwk.cid.isNull() do vreqerr("CID") quit
	if qcollwk.seq.isNull() do vreqerr("SEQ") quit

		if vx("TJD").exists(),qcollwk.tjd.isNull() do vreqerr("TJD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("QCOLLWK","MSG",1767,"QCOLLWK."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Collection Work File

	type public RecordQCOLLWK qcollwk
	/* 
	   Revision History

	   11/10/05 - SATYANAS
	   	      Converted to PSL Standards.
	   
	   09/15/99 - CHOK - 31126
		      Converted to PSL.
	*/

	// Select Promise Information on the loan record
	type RecordACN acn=Db.getRecord("ACN","CID=:qcollwk.cid",1)
	if acn.getMode() do {
		if 'qcollwk.prommd.isNull() set acn.prommd=qcollwk.prommd
		if 'qcollwk.promsd.isNull() set acn.promsd=qcollwk.promsd
		if 'qcollwk.promamt.isNull() set acn.promamt=qcollwk.promamt
		if 'qcollwk.prombrd.isNull() set acn.prombrd=qcollwk.prombrd
		}
	
	do acn.save()
	
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert Collection Work File

	type public RecordQCOLLWK qcollwk
	/*
	   ---- Revision History--------------------------------------------------------
	
	   11/10/05 - SATYANAS - 18007
	 	      Converted to PSL Standards. 
	   
	   09/15/99 - CHOK - 31126
		      Converted to PSL.

	   07/02/99 - ROYTENBERGG 33873
	              Changed references from PRODTYPE File to PRODCTL File.
	
	   06/04/99 - ROYTENBERGG 33064
	              Changed data item definition TIME to CTIME
		
	   Set the promise set date if promise set date is null and promise mail
	   date contains a date.
	*/

	// Getting Product type according account number

	type public Boolean ER
			
	if 'qcollwk.prommd.isNull() do { quit:ER
		// Setting promsd to systemdate if promise date contains a value
		set qcollwk.promsd=%SystemDate
	
		// Getting promise duration date from PRODCTL File
		type RecordACN acn=Db.getRecord("ACN","CID=:qcollwk.cid",1)
		if acn.getMode() do {
			type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=acn.type",1)
			if prodctl.getMode() do {
				if prodctl.promdd.isNull() quit 
			
				/* Set promise break date based on promise mail date if mail date
		   		mail date is not greater than set date.  Set date is the system
		   		date when a promise mail date is entered.  */
		   		
				if qcollwk.prommd'>%SystemDate set qcollwk.prombrd=$$EXT^UMDT(prodctl.promdd,qcollwk.prommd) quit:ER 
				else  set qcollwk.prombrd=$$EXT^UMDT(prodctl.promdd,qcollwk.promsd) quit:ER 
				}
			}	
		}
	
	set qcollwk.tjd=%SystemDate
	set qcollwk.ctime=%CurrentTime
	set qcollwk.uid=%UserID
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordQCOLLWK qcollwk

	set X = qcollwk.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = qcollwk.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = qcollwk.actentr if 'X.isNull(),'Db.isDefined("UTBLAE","X") set vRM = $$^MSG(1485,X) do vdderr("ACTENTR", vRM) quit
	if qcollwk.com1.length()>60 set vRM = $$^MSG(1076,60) do vdderr("COM1", vRM) quit
	if qcollwk.com2.length()>60 set vRM = $$^MSG(1076,60) do vdderr("COM2", vRM) quit
	if qcollwk.com3.length()>60 set vRM = $$^MSG(1076,60) do vdderr("COM3", vRM) quit
	if qcollwk.com4.length()>60 set vRM = $$^MSG(1076,60) do vdderr("COM4", vRM) quit
	if qcollwk.com5.length()>60 set vRM = $$^MSG(1076,60) do vdderr("COM5", vRM) quit
	set X = qcollwk.ctime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("CTIME", vRM) quit
	set X = qcollwk.infoact if 'X.isNull(),'Db.isDefined("UTBLINFOACT","X") set vRM = $$^MSG(1485,X) do vdderr("INFOACT", vRM) quit
	set X = qcollwk.loc if 'X.isNull(),'Db.isDefined("UTBLLC","X") set vRM = $$^MSG(1485,X) do vdderr("LOC", vRM) quit
	set X = qcollwk.prescod if 'X.isNull(),'Db.isDefined("UTBLPROGRES","X") set vRM = $$^MSG(1485,X) do vdderr("PRESCOD", vRM) quit
	set X = qcollwk.promamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"QCOLLWK.PROMAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = qcollwk.prombrd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMBRD", vRM) quit
	set X = qcollwk.prommd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMMD", vRM) quit
	set X = qcollwk.promsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMSD", vRM) quit
	set X = qcollwk.rescode if 'X.isNull(),'Db.isDefined("UTBLRES","X") set vRM = $$^MSG(1485,X) do vdderr("RESCODE", vRM) quit
	set X = qcollwk.rfd if 'X.isNull(),'Db.isDefined("UTBLRFD","X") set vRM = $$^MSG(1485,X) do vdderr("RFD", vRM) quit
	set X = qcollwk.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	if qcollwk.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("QCOLLWK","MSG",979,"QCOLLWK."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordQCOLLWK qcollwk

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = qcollwk.cid_","_qcollwk.seq   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = qcollwk.cid_","_qcollwk.seq   // Copy new keys into object
	type RecordQCOLLWK vnewrec = qcollwk.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("QCOLLWK",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordQCOLLWK qcollwk

	if vux("CID").exists() set qcollwk.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set qcollwk.seq = vux("SEQ").piece("|",i)
	quit
