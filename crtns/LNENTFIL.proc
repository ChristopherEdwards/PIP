LNENTFIL(RecordLNENT lnent, String vpar, Boolean vparNorm) // LNENT - Loan Budget Sys Support File  Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (1)                      10/11/2005
	// Journal File Definition (7)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnent.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnent,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnent,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnent.cid
	type String USESRC = lnent.usesrc

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("USESRC").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNENT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNENT","CID = :lnent.cid and USESRC = :lnent.usesrc") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String USESRC

	type RecordLNENT lnent = Db.getRecord("LNENT","CID=:CID,USESRC=:USESRC")
	if (%ProcessMode = 2) do {
		do lnent.setMode(2)

		do LNENTFIL(lnent,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNENT lnent

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNENT","CID = :lnent.cid and USESRC = :lnent.usesrc") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnent))  S ^LNENT(vobj(lnent,-3),vobj(lnent,-4))=vobj(lnent)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnent)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNENT lnent

	if vpar["/JOURNAL/" do VJOURNAL(.lnent)                // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^LNENT(vobj(lnent,-3),vobj(lnent,-4))              // Delete Record
	quit


vreqn // Validate required data items

	type public RecordLNENT lnent

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNENT lnent

	if lnent.cid.isNull() do vreqerr("CID") quit
	if lnent.usesrc.isNull() do vreqerr("USESRC") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNENT","MSG",1767,"LNENT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNENT lnent
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnent,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert or Update of budget

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before Insert or Update of budget

	type public RecordLNENT lnent
	do lnent.setAuditFlag(1)
	/*
	-----Revision History--------------------------------------------------

	03/30/05 - KinI - 14385
		   Cleaned up to comply with DBI standards.
	
	10/26/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	type public Boolean ER

	type RecordLN ln=Db.getRecord("LN","CID=:lnent.cid")
	
	// Account closed
	if ln.stat=4 do Runtime.setErrMSG("LNENT",55) quit:ER 
	
	// Account not coded for loan budget processing
	if 'ln.entf do Runtime.setErrMSG("LNENT",78) quit:ER 
	
	// Account is non-revolving
	if (lnent.add>0) , ('ln.revf) do Runtime.setErrMSG("LNENT",65) quit:ER 
	
	// Zero is not a valid change amount
	if lnent.act=0 do Runtime.setErrMSG("LNENT",2989) quit:ER 
	
	// Cannot change existing code
	if (%ProcessMode'=0) , (lnent.usesrc.oldVal) , (lnent.usesrc'=lnent.usesrc.oldVal) do Runtime.setErrMSG("LNENT",421) quit:ER 
	
	// Code already exists
	if (lnent.usesrc'=""), (lnent.usesrc.oldVal'=lnent.usesrc) do Runtime.setErrMSG("LNENT",561) quit:ER

	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNENT lnent

	set X = lnent.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnent.usesrc if 'X.isNull(),'Db.isDefined("UTBLECT","X") set vRM = $$^MSG(1485,X) do vdderr("USESRC", vRM) quit
	set X = lnent.act if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNENT.ACT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnent.add if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNENT.ADD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnent.bud if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNENT.BUD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnent.chgcode if 'X.isNull(),'Db.isDefined("UTBLECCT","X") set vRM = $$^MSG(1485,X) do vdderr("CHGCODE", vRM) quit
	set X = lnent.ladt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LADT", vRM) quit
	set X = lnent.octant if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNENT.OCTANT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnent.rep if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNENT.REP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnent.repunt if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNENT.REPUNT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNENT","MSG",979,"LNENT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNENT lnent)	//LNENT Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lnent)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I_ACT
			do vj3(.lnent)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I_ADD
			do vj4(.lnent)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I_BUD
			do vj5(.lnent)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I_OCTANT
			do vj6(.lnent)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I_REP
			do vj7(.lnent)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I_REPUNT
			}
		else  if TSRC="O" do {
			do vj2(.lnent)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I_ACT
			do vj3(.lnent)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I_ADD
			do vj4(.lnent)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I_BUD
			do vj5(.lnent)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I_OCTANT
			do vj6(.lnent)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I_REP
			do vj7(.lnent)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I_REPUNT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.lnent)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST
			}
		else  if TSRC="O" do {
			do vj1(.lnent)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST
			}
		}

	quit


vj1(RecordLNENT lnent)	// HIST  Table HIST  Update Journal for LNENT

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if vdi'="CHGCODE" do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnent.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnent.cid_","_lnent.usesrc,"LNENT",vdi,vold,vnew,,,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.tso=$$RSN^LNENT(lnent.chgcode)
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj2(RecordLNENT lnent)	// HIST_I_ACT  Table HIST  LNENT Insert Journal when ACT is inserte

	if lnent.act>0
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnent.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNENT","ACT","",lnent.act)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=$$RSN^LNENT(lnent.chgcode)
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNENT lnent)	// HIST_I_ADD  Table HIST  LNENT Insert Journal when ADD is added

	if lnent.add>0
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnent.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNENT","ADD","",lnent.add)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=$$RSN^LNENT(lnent.chgcode)
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordLNENT lnent)	// HIST_I_BUD  Table HIST  LNENT Insert Journal when BUD is created

	if lnent.bud>0
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnent.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNENT","BUD","",lnent.bud)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=$$RSN^LNENT(lnent.chgcode)
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj5(RecordLNENT lnent)	// HIST_I_OCTANT  Table HIST  LNENT Insert Journal when OCTANT is crea

	if lnent.octant>0
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnent.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNENT","OCTANT","",lnent.octant)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=$$RSN^LNENT(lnent.chgcode)
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj6(RecordLNENT lnent)	// HIST_I_REP  Table HIST  LNENT Insert Journal when REP is created

	if lnent.rep>0
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnent.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNENT","REP","",lnent.rep)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=$$RSN^LNENT(lnent.chgcode)
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj7(RecordLNENT lnent)	// HIST_I_REPUNT  Table HIST  LNENT Insert Journal when REPUNT is crea

	if lnent.repunt>0
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnent.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNENT","REPUNT","",lnent.repunt)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=$$RSN^LNENT(lnent.chgcode)
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNENT lnent

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("USESRC").exists() set vux("USESRC") = vx("USESRC")
	do vkey(1) set voldkey = lnent.cid_","_lnent.usesrc    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnent.cid_","_lnent.usesrc    // Copy new keys into object
	type RecordLNENT vnewrec = lnent.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNENT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNENT lnent

	if vux("CID").exists() set lnent.cid = vux("CID").piece("|",i)
	if vux("USESRC").exists() set lnent.usesrc = vux("USESRC").piece("|",i)
	quit
