CRCDMGFL(RecordCRCDMG crcdmg, String vpar, Boolean vparNorm) // CRCDMG - Currency Code Margin Data Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (21)             11/22/2003
	// Trigger Definition (4)                      12/17/2004
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crcdmg.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(crcdmg,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crcdmg,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CO = crcdmg.co
	type String CRCD = crcdmg.crcd
	type String CUSTCD = crcdmg.custcd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CO").exists()!vx("CRCD").exists()!vx("CUSTCD").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRCDMG",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRCDMG","CO = :crcdmg.co and CRCD = :crcdmg.crcd and CUSTCD = :crcdmg.custcd") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CO
	type public String CRCD
	type public String CUSTCD

	type RecordCRCDMG crcdmg = Db.getRecord("CRCDMG","CO=:CO,CRCD=:CRCD,CUSTCD=:CUSTCD")
	if (%ProcessMode = 2) do {
		do crcdmg.setMode(2)

		do CRCDMGFL(crcdmg,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRCDMG crcdmg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRCDMG","CO = :crcdmg.co and CRCD = :crcdmg.crcd and CUSTCD = :crcdmg.custcd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(crcdmg,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(crcdmg,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crcdmg))  S ^CRCD(vobj(crcdmg,-3),vobj(crcdmg,-4),2,vobj(crcdmg,-5))=vobj(crcdmg)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.crcdmg)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRCDMG crcdmg

	if vpar["/JOURNAL/" do VJOURNAL(.crcdmg)               // Create journal entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(crcdmg,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CRCD(vobj(crcdmg,-3),vobj(crcdmg,-4),2,vobj(crcdmg,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordCRCDMG crcdmg

	// Type local variables for access keys for defaults
	type public String CO
	type public String CRCD
	type public String CUSTCD

	if crcdmg.margint.isNull() set crcdmg.margint = 0      // margint
	quit


vreqn // Validate required data items

	type public RecordCRCDMG crcdmg

	if crcdmg.buycash.isNull() do vreqerr("BUYCASH") quit
	if crcdmg.buyncash.isNull() do vreqerr("BUYNCASH") quit
	if crcdmg.margint.isNull() do vreqerr("MARGINT") quit
	if crcdmg.sellcash.isNull() do vreqerr("SELLCASH") quit
	if crcdmg.sellncash.isNull() do vreqerr("SELLNCASH") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRCDMG crcdmg

	if crcdmg.co.isNull() do vreqerr("CO") quit
	if crcdmg.crcd.isNull() do vreqerr("CRCD") quit
	if crcdmg.custcd.isNull() do vreqerr("CUSTCD") quit

		if vx("BUYCASH").exists(),crcdmg.buycash.isNull() do vreqerr("BUYCASH") quit
		if vx("BUYNCASH").exists(),crcdmg.buyncash.isNull() do vreqerr("BUYNCASH") quit
		if vx("MARGINT").exists(),crcdmg.margint.isNull() do vreqerr("MARGINT") quit
		if vx("SELLCASH").exists(),crcdmg.sellcash.isNull() do vreqerr("SELLCASH") quit
		if vx("SELLNCASH").exists(),crcdmg.sellncash.isNull() do vreqerr("SELLNCASH") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRCDMG","MSG",1767,"CRCDMG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCRCDMG crcdmg
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(crcdmg,.vx(),1,"|") quit
	if vx("TRESREF2").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TRESREF3").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(crcdmg,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger of CRCDMG

	type public RecordCRCDMG crcdmg
	/*
	-----Revision History--------------------------------------------------
	11/02/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/


	new DATA,RRR,SQLCNT,XCO,XCRCD,XCUSTCD
	set XXCO=crcdmg.co 
	set XXCRCD=crcdmg.crcd
	set DATA=Db.getOneRow("CO,CRCD","CRCD","XXCO,XXCRCD")
	if DATA="" do { quit:ER 
		if 'Db.isDefined("CRCD","CO,XCO") do Runtime.setErrMSG("CRCDMG",1485,"CRCDMG.CO") quit:ER

		if 'Db.isDefined("CRCD","CO,XCRCD") do Runtime.setErrMSG("CRCDMG",1485,"CRCDMG.CRCD") quit:ER
		}
	
	set XCUSTCD=crcdmg.custcd
	set DATA=Db.getOneRow("CCODE","UTBLCC","XCUSTCD")
	if DATA="" do Runtime.setErrMSG("CRCDMG",1485,"CRCDMG.CUSTCD") quit
	
	
	if crcdmg.tresref="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.TRESREF") quit 
	set crcdmg.dlm=%SystemDate 
	set crcdmg.tlm=%CurrentTime
	
	if crcdmg.tresref2="" do {
		new Y
		set Y=crcdmg.tresref3 if 'Y do { quit 
			set crcdmg.tresref2=""
			set crcdmg.buycash2=""
			set crcdmg.sellcash2=""
			set crcdmg.buyncsh2=""
			set crcdmg.sellncsh2=""
	
			}
		set crcdmg.tresref2=crcdmg.tresref3
		set crcdmg.buycash2=crcdmg.buycash3
		set crcdmg.sellcash2=crcdmg.sellcash3
		set crcdmg.buyncsh2=crcdmg.buyncsh3
		set crcdmg.sellncsh2=crcdmg.sellncsh3
		set crcdmg.tresref3=""
		set crcdmg.buycash3=""
		set crcdmg.sellcash3=""
		set crcdmg.buyncsh3=""
		set crcdmg.sellncsh3=""
	
		}
	// Must enter Threshholds in ascending order
	else  if crcdmg.tresref2'>crcdmg.tresref do Runtime.setErrMSG("CRCDMG",8637) quit
	
	if crcdmg.tresref2'="" do { quit:ER 
		if crcdmg.buycash2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYCASH2") quit 
		if crcdmg.buyncsh2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYNCSH2") quit 
		if crcdmg.sellcash2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLCASH2") quit 
		if crcdmg.sellncsh2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLNCSH2") quit
		}
	
	if crcdmg.tresref3="" do {
		set crcdmg.tresref3=""
		set crcdmg.buycash3=""
		set crcdmg.sellcash3=""
		set crcdmg.buyncsh3=""
		set crcdmg.sellncsh3=""
		}
	// Must enter Threshholds in ascending order
	else  if crcdmg.tresref3'>crcdmg.tresref2 do Runtime.setErrMSG("CRCDMG",8637) quit
	
	if crcdmg.tresref3'="" do { quit:ER 
		if crcdmg.buycash3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYCASH3") quit 
		if crcdmg.buyncsh3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYNCSH3") quit 
		if crcdmg.sellcash3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLCASH3") quit 
		if crcdmg.sellncsh3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLNCSH3") quit
		}
	
	quit 

vbu1 // Trigger BU_CRCDMG - Before_update of CRCDMG

	type public RecordCRCDMG crcdmg
	do crcdmg.setAuditFlag(1)
	set crcdmg.dlm=%SystemDate
	set crcdmg.tlm=%CurrentTime
	quit 

vbu2 // Trigger BU_TRESREF2 - Before update of TRESREF2

	type public RecordCRCDMG crcdmg
	do crcdmg.setAuditFlag(1)
	/*
	-----Revision History--------------------------------------------------
	12/30/03 - CARROLLJ - CR7658
		   Corrected undefined error found by compiler.
	*/

	new NI
	set NI=0
	if crcdmg.tresref2="" do { quit 
		new Y
		set Y=crcdmg.tresref3 if 'Y do { quit 
			set crcdmg.tresref2=""
			set crcdmg.buycash2=""
			set crcdmg.sellcash2=""
			set crcdmg.buyncsh2=""
			set crcdmg.sellncsh2=""
	
			}
		set crcdmg.tresref2=crcdmg.tresref3
		set crcdmg.buycash2=crcdmg.buycash3
		set crcdmg.sellcash2=crcdmg.sellcash3
		set crcdmg.buyncsh2=crcdmg.buyncsh3
		set crcdmg.sellncsh2=crcdmg.sellncsh3
		set crcdmg.tresref3=""
		set crcdmg.buycash3=""
		set crcdmg.sellcash3=""
		set crcdmg.buyncsh3=""
		set crcdmg.sellncsh3=""
		set NI=NI-1
	
		}
	// Must enter Threshholds in ascending order
	if crcdmg.tresref2'>crcdmg.tresref do Runtime.setErrMSG("CRCDMG",8637) quit 
	
	if crcdmg.tresref2'="" do { quit:ER 
		if crcdmg.buycash2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYCASH2") quit 
		if crcdmg.buyncsh2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYNCSH2") quit 
		if crcdmg.sellcash2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLCASH2") quit 
		if crcdmg.sellncsh2="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLNCSH2") quit 
		}
	quit 

vbu3 // Trigger BU_TRESREF3 - Before Update of TRESREF3

	type public RecordCRCDMG crcdmg
	do crcdmg.setAuditFlag(1)
	if crcdmg.tresref3="" do { quit 
		set crcdmg.tresref3=""
		set crcdmg.buycash3=""
		set crcdmg.sellcash3=""
		set crcdmg.buyncsh3=""
		set crcdmg.sellncsh3=""
		}
	// Must enter Threshholds in ascending order
	if crcdmg.tresref3'>crcdmg.tresref2 do Runtime.setErrMSG("CRCDMG",8637) quit
	
	if crcdmg.tresref3'="" do { quit:ER 
		if crcdmg.buycash3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYCASH3") quit 
		if crcdmg.buyncsh3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.BUYNCSH3") quit 
		if crcdmg.sellcash3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLCASH3") quit 
		if crcdmg.sellncsh3="" do Runtime.setErrMSG("CRCDMG",7531,"CRCDMG.SELLNCSH3") quit
		}
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRCDMG crcdmg

	if crcdmg.co.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CO", vRM) quit
	if crcdmg.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	set X = crcdmg.custcd if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CUSTCD", vRM) quit
	set X = crcdmg.buycash if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,1,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.BUYCASH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.buycash2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.BUYCASH2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.buycash3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.BUYCASH3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.buyncash if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,1,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.BUYNCASH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.buyncsh2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.BUYNCSH2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.buyncsh3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.BUYNCSH3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.dlm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLM", vRM) quit
	if '("01"[crcdmg.MARGINT) set vRM=$$^MSG(742,"L") do vdderr("MARGINT", vRM) quit
	set X = crcdmg.sellcash if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,1,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.SELLCASH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.sellcash2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.SELLCASH2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.sellcash3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.SELLCASH3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.sellncash if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,1,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.SELLNCASH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.sellncsh2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.SELLNCSH2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.sellncsh3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",13,0,,,,,7) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.SELLNCSH3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.tlm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TLM", vRM) quit
	set X = crcdmg.tresref if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.TRESREF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.tresref2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.TRESREF2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crcdmg.tresref3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRCDMG.TRESREF3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRCDMG","MSG",979,"CRCDMG."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCRCDMG crcdmg)	//CRCDMG Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="O" do {
			do vj1(.crcdmg)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CRCDMGH
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="O" do {
			do vj1(.crcdmg)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CRCDMGH
			}
		}

	quit


vj1(RecordCRCDMG crcdmg)	// CRCDMGH  Table CRCDMGH  Currency margin history file

							//// Save this line for Public datatyping, if needed
	type String v1,v2,v3,v4,vlastkey
	set v1=crcdmg.co
	set v2=crcdmg.crcd
	set v3=crcdmg.custcd
	set v4=crcdmg.dlm
	set vlastkey=Db.nextVal("CRCDMGH","CO=:v1,CRCD=:v2,CUSTCD=:v3,EFD=:v4")
	type RecordCRCDMGH crcdmgh=Db.getRecord("CRCDMGH","CO=:v1,CRCD=:v2,CUSTCD=:v3,EFD=:v4,SEQ=:vlastkey",1)
	set crcdmgh.buycash=crcdmg.buycash
	set crcdmgh.buycash2=crcdmg.buycash2
	set crcdmgh.buycash3=crcdmg.buycash3
	set crcdmgh.buyncash=crcdmg.buyncash
	set crcdmgh.buyncsh2=crcdmg.buyncsh2
	set crcdmgh.buyncsh3=crcdmg.buyncsh3
	set crcdmgh.dlm=crcdmg.dlm
	set crcdmgh.margint=crcdmg.margint
	set crcdmgh.sellcash=crcdmg.sellcash
	set crcdmgh.sellcash2=crcdmg.sellcash2
	set crcdmgh.sellcash3=crcdmg.sellcash3
	set crcdmgh.sellncash=crcdmg.sellncash
	set crcdmgh.sellncsh2=crcdmg.sellncsh2
	set crcdmgh.sellncsh3=crcdmg.sellncsh3
	set crcdmgh.tlm=crcdmg.tlm
	set crcdmgh.tresref=crcdmg.tresref
	set crcdmgh.tresref2=crcdmg.tresref2
	set crcdmgh.tresref3=crcdmg.tresref3

	do crcdmgh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordCRCDMG crcdmg

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CO").exists() set vux("CO") = vx("CO")
	if vx("CRCD").exists() set vux("CRCD") = vx("CRCD")
	if vx("CUSTCD").exists() set vux("CUSTCD") = vx("CUSTCD")
	do vkey(1) set voldkey = crcdmg.co_","_crcdmg.crcd_","_crcdmg.custcd // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crcdmg.co_","_crcdmg.crcd_","_crcdmg.custcd // Copy new keys into object
	type RecordCRCDMG vnewrec = crcdmg.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRCDMG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRCDMG crcdmg

	if vux("CO").exists() set crcdmg.co = vux("CO").piece("|",i)
	if vux("CRCD").exists() set crcdmg.crcd = vux("CRCD").piece("|",i)
	if vux("CUSTCD").exists() set crcdmg.custcd = vux("CUSTCD").piece("|",i)
	quit
