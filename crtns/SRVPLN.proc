SRVPLN	// PBS - DEP - V3.3 - CREATE/UPDATE A SERVICE PLAN
	/*
	       ORIG:  David Caliendo (5527) - 12/14/87

	---- Revision History ------------------------------------------------
	
	09/13/06 - KinI - CR 23040
		   Modified VPG02 section to obtain FEESRV2 record needed by 
		   SRVPLN2L screen.
		   Modified PLNQSPP section to correctly set the conditions 
		   under which the errors 2097 and 8728 should be displayed.

	08/02/06 - KELLYP - CR 22048
		   Modified FEE1, FEE3, FEE4, and PLNQSPP sections to eliminate
		   PRECEDENCE warnings.
	
	03/14/06 - Russell - CR19897
		   Eliminate use of UTBLFEE table for TRNGRP.

	02/03/06 - Hillanbrand - CR19386
	           Corrected miss-match between Type & Description for
	           FEECAT=2 in VPG02 section.	

	08/23/05 - RussellDS - CR16911
		   Fixed error in VPG section when quit UTLREAD screen.
		   
		   Add keys for Class.new in FEE1-4 sections.
		   
		   Added :NOVAL when creating a new plan.
		   
		   Removed :NOVAL on transaction code when prompting for
		   FEECAT=1 on modify.
		   
		   Fix date display on lookup.
		   
		   Minor PSL clean-up - still scoping issues.
		   
		   Removed old revision history.
	----------------------------------------------------------------------
	*/
	
	quit


UPD	
	set %ProcessMode=1

	do INIT

	quit


NEW 	
	set %ProcessMode=0

	do INIT

	quit


DEL	
	set %ProcessMode=3

	do INIT

	quit


INIT
	new CNT,FEECAT,FEEDT,FEETYP,PGM,PLAN,SID,X

	set %PG=-1
	set %PAGE=1

	kill OLNTB,VFMQ

	do VPG

	quit


VPG	// Page control

	type public Boolean ER = 0

	type RecordFEEPLN fFEEPLN
	type RecordFEESRV fFEESRV
	type RecordFEESRV1 fFEESRV1()
	type RecordFEESRV2 fFEESRV2=Class.new("RecordFEESRV2")
	type RecordFEEQRY fFEEQRY()

	type Boolean FINISH=0
	
	for  do { quit:FINISH ! ER

		if %PG<0 do VPG00 quit:ER
		if %PG=0 do VPG01(.fFEEPLN,.fFEESRV,.fFEESRV1(),.fFEESRV2,.fFEEQRY()) quit:ER
		if %PG>0 do { quit:ER

			if '%ProcessMode do VPG02(.fFEEPLN,.fFEESRV1(),.fFEESRV2)
			if %ProcessMode do VPG03(.fFEEPLN,.fFEESRV,.fFEEQRY())
			}

		if "DFQ"[VFMQ do VER(.fFEEPLN,.fFEESRV,.fFEESRV1(),.fFEESRV2,.fFEEQRY()) set FINISH=1 quit

		set %PG=%PG+1
		}

	quit


VPG00	// Set up

	if %ProcessMode=0 set %TAB("PLAN")=".PLAN8/TYP=U/HLP=[DEP]FEEPLN/XPP=D POSPLN^SRVPLN/TBL=[FEEPLN]PLAN:DISTINCT:NOVAL"
	else  set %TAB("PLAN")=".PLAN8/TYP=U/HLP=[DEP]FEEPLN/TBL=[FEEPLN]PLAN:DISTINCT"
	set %TAB("FEECAT")=".FEECAT2/TBL=[STBLFEEFC]/XPP=D POSCAT^SRVPLN"
	set %TAB("FEEDT")=".EFD1/TYP=D/TBL=TMPTBL(:NOVAL/XPR=D PLNDT^SRVPLN/XPP=D CHKDT^SRVPLN"

	set %READ="@@%FN,,,PLAN/REQ,FEECAT/REQ,FEEDT/REQ,"
	set %NOPRMT="N"

	do ^UTLREAD

	if VFMQ="Q" set ER=1 quit

	// Define plan parameters first
	if FEECAT,'Db.isDefined("FEEPLN","PLAN,FEEDT") do Runtime.setErrMSG("DEP",789) set VFMQ="Q" quit

	lock +UTBL("FEEPLN",PLAN,FEEDT):2 else  set ET="RECLOC" do ERR quit

	quit


POSPLN	// Post-processor for service fee plan name

	// Punctuation characters not allowed
	if X?.E1P.E do Runtime.setErrMSG("DEP",2281) quit

	quit


POSCAT	// Define %TAB as a function of FEECAT

	if X="" quit

	if %OSAVE=3 do {

		// Cannot delete plan parameters
		if X=0 do Runtime.setErrMSG("DEP",436) quit

		// Cannot delete plan events
		if X=2 do Runtime.setErrMSG("DEP",435) quit
		}
	quit


PLNDT	// Build the look up table for plan date

	type Date DATE

	if 'FEECAT do {

		type ResultSet rs=Db.select("FEEDT","FEEPLN","PLAN=:PLAN")

		while rs.next() do {
			
			set DATE = rs.getCol("FEEDT")
			set TMPTBL(DATE.toString())=""
		}
	}

	else  do {
		type ResultSet rs=Db.select("FEEDT","FEESRV","PLAN=:PLAN AND FEECAT=:FEECAT")

		while rs.next() do {
			
			set DATE = rs.getCol("FEEDT")
			set TMPTBL(DATE.toString())=""
		}
	}

	quit


CHKDT	// Verify plan effective date

	// Effective date must be the same as or after the system date
	if %OSAVE<2,X<%SystemDate do Runtime.setErrMSG("DEP",879) quit

	if %OSAVE=0 do {

		new QUIT

		if FEECAT do { if QUIT quit

			type ResultSet rs=Db.select("FEETYP","FEESRV","PLAN=:PLAN AND FEEDT=:X AND FEECAT=:FEECAT")

			if rs.isEmpty() set QUIT=1
			else  set QUIT=0
			}

		if 'FEECAT,'Db.isDefined("FEEPLN","PLAN,X") quit

		// Plan already on file.  Use function SRV002.
		do Runtime.setErrMSG("DEP",2186) quit
		}

	if %OSAVE=1 do {

		if X=0 quit

		new QUIT

		if FEECAT do { if QUIT quit

			type ResultSet rs=Db.select("FEETYP","FEESRV","PLAN=:PLAN AND FEEDT=:X AND FEECAT=:FEECAT")

			if rs.isEmpty() set QUIT=0
			else  set QUIT=1
			}

		if 'FEECAT,Db.isDefined("FEEPLN","PLAN,X") quit

		// Plan not on file.
		do Runtime.setErrMSG("DEP",210) quit
		}

	quit


VPG01(RecordFEEPLN fFEEPLN,
	RecordFEESRV fFEESRV,
	RecordFEESRV1 fFEESRV1(),
	RecordFEESRV2 fFEESRV2,
	RecordFEEQRY fFEEQRY())

	new TBL,TMPTRN

	if '%ProcessMode!'FEECAT do VPG01A(.fFEEPLN,.fFEESRV,.fFEESRV1(),.fFEESRV2,.fFEEQRY()) quit

	if %ProcessMode=1 do {
		if FEECAT=1 do { quit

			set TBL="TMPTRN("

			type ResultSet rs=Db.select("ETC","TRN","CLS='M' AND GRP='FEE'")

			if rs.isEmpty() quit

			while rs.next() if rs.getCol(1)'?.e1L.e set TMPTRN(rs.getCol(1))=""
			}
		if FEECAT=2 set TBL="[STBLFEECAT2]" quit
		if FEECAT=3 set TBL="[UTBLTRNGRPT]TRNGRP:DISTINCT" quit
		if FEECAT=4 set TBL="[UTBLFEE]KEY:QU ""[UTBLFEE]MNEU=""SRVFEE""""" quit
		}
	else  set TBL="[FEESRV]FEETYP:QU ""[FEESRV]PLAN=<<PLAN>>&[FEESRV]FEEDT=<<FEEDT>>&[FEESRV]FEECAT=<<FEECAT>>"""

	set %TAB("FEETYP")=".FEETYP1/TBL="_TBL
	set OLNTB=6030
	set %READ="FEETYP/REQ"
	set %NOPRMT="N"

	do ^UTLREAD

	if VFMQ="Q" set ER=1 quit

	do VPG01A(.fFEEPLN,.fFEESRV,.fFEESRV1(),.fFEESRV2,.fFEEQRY())

	quit
	

VPG01A(RecordFEEPLN fFEEPLN,
	RecordFEESRV fFEESRV,
	RecordFEESRV1 fFEESRV1(),
	RecordFEESRV2 fFEESRV2,
	RecordFEEQRY fFEEQRY())

	set fFEEPLN=Db.getRecord("FEEPLN","PLAN,FEEDT",1)

	if 'FEECAT,%ProcessMode<2 set %ProcessMode=fFEEPLN.getMode() quit

	if '%ProcessMode do {

		if FEECAT=1 do FEE1(.fFEESRV1()) quit
		if FEECAT=3 do FEE3(.fFEESRV1()) quit
		if FEECAT=4 do FEE4(.fFEESRV1()) quit
		}

	if %ProcessMode do {

		do QRY(.fFEESRV,.fFEEQRY())

		set DESC=$$DESC(FEECAT,FEETYP,FEEDT)
		}

	quit


VPG02(RecordFEEPLN fFEEPLN,RecordFEESRV1 fFEESRV1(),RecordFEESRV2 fFEESRV2)

	// %ProcessMode=0 (NEW input)

	if FEECAT,FEECAT'=2 do {

		set %REPEAT=5
		set %MODS=(((%PG-1)*5)+1)

		if %REPEAT+%MODS>CNT set %REPEAT=CNT-%MODS+1
		}
			
	if 'FEECAT do DRV^USID(%ProcessMode,"SRVPLN0",.fFEEPLN)
	if FEECAT=1!(FEECAT>2) do DRV^USID(%ProcessMode,"SRVPLN"_FEECAT,.fFEESRV1(),.fFEEPLN)
	if FEECAT=2 do {
	
		// Set up descriptions for screens
		type String AVL,CRD,DLY,LDG,LIM,ODT,PATF,PATS,RET,STP,UNC
		
		set AVL=$$GETDSC("AVL")
		set UNC=$$GETDSC("UNC")
		set LDG=$$GETDSC("LDG")
		set LIM=$$GETDSC("LIM")
		set ODT=$$GETDSC("ODT")
		set RET=$$GETDSC("RET")
		set PATS=$$GETDSC("PATS")
		set PATF=$$GETDSC("PATF")
		set CRD=$$GETDSC("CRD")
		set STP=$$GETDSC("STP")
		set DLY=$$GETDSC("DLY")
	
		set fFEESRV2=Db.getRecord("FEESRV2","PLAN,FEEDT",1)
		
		do DRV^USID(%ProcessMode,"SRVPLN2L",.fFEEPLN,.fFEESRV2)
		}
		
	quit


GETDSC(String FEETYP)	// Get description for use on screens SRVPLN2 and 2B

	type RecordSTBLFEECAT2 feecat2=Db.getRecord("STBLFEECAT2","FEETYP=:FEETYP",1)

	quit feecat2.desc


VPG03(RecordFEEPLN fFEEPLN,RecordFEESRV fFEESRV,RecordFEEQRY fFEEQRY())
	// %ProcessMode=1 (UPD input)

	if FEECAT do {

		set %REPEAT=5
		set %MODS=(((%PG-1)*5)+1)

		if %REPEAT+%MODS>CNT set %REPEAT=CNT-%MODS+1
		
		// Need description for screen SRVPLNQ2
		if FEECAT=2 do {
			type RecordSTBLFEECAT2 feecat2=Db.getRecord("STBLFEECAT2","FEETYP=:fFEESRV.feetyp")
			set FDESC=feecat2.desc
			}

		do DRV^USID(%ProcessMode,"SRVPLNQ"_FEECAT,.fFEEQRY(),.fFEESRV,.fFEEPLN)
		}

	else  do DRV^USID(%ProcessMode,"SRVPLN0",.fFEEPLN)
	
	quit


ERR	// Log Errors

	set ER=1

	do ^UTLERR

	set VFMQ="Q"

	quit


VER(RecordFEEPLN fFEEPLN,
	RecordFEESRV fFEESRV,
	RecordFEESRV1 fFEESRV1(),
	RecordFEESRV2 fFEESRV2,
	RecordFEEQRY fFEEQRY())

	if %ProcessMode=2!(%ProcessMode=4)!(VFMQ="Q") do END quit

	do FILE(.fFEEPLN,.fFEESRV,.fFEESRV1(),.fFEESRV2,.fFEEQRY())
	do END

	quit


FILE(RecordFEEPLN fFEEPLN,
	RecordFEESRV fFEESRV,
	RecordFEESRV1 fFEESRV1(),
	RecordFEESRV2 fFEESRV2,
	RecordFEEQRY fFEEQRY())

	// Delete fee type or entire plan
	if %ProcessMode=3 do F4 quit

	// File plan parameters
	if FEECAT=0 do F0(.fFEEPLN) quit

	// Modify existing fee type
	if %ProcessMode do F1(.fFEESRV,.fFEEQRY()) quit

	// Otherwise, file new fee category
	new QUIT

	set QUIT=1

	if FEECAT=2 do F2(.fFEESRV2)
	if FEECAT'=2 do F3(.fFEESRV1())

	if QUIT set VFMQ="Q" quit

	quit


F0(RecordFEEPLN fFEEPLN)	// File plan parameters

	do fFEEPLN.save()

	quit


F1(RecordFEESRV fFEESRV,RecordFEEQRY fFEEQRY())	// Modify fee type

	type Number I,N,XF()

	do fFEESRV.save()

	do QUERY
	
	// Reset priorities
	for I=1:1:5 if fFEEQRY(I).qryname'="" set XF(fFEEQRY(I).pri)=I
	
	set I=1,N=""
	for  set N=XF(N).order() quit:N=""  do {

		/* set fFEEQRY(I).plan=PLAN
		set fFEEQRY(I).feedt=FEEDT
		set fFEEQRY(I).feecat=FEECAT
		set fFEEQRY(I).feetyp=FEETYP
		*/
		set fFEEQRY(XF(N)).pri=I
		set fFEEQRY(XF(N)).query=I

		do fFEEQRY(XF(N)).save()
		
		set I=I+1
		}
	quit


F2(RecordFEESRV2 fFEESRV2)	// File fee category 2 data

	if fFEESRV2.chgopt1 do F2FILE("AVL",fFEESRV2.chgopt1,fFEESRV2.feeamt1,fFEESRV2.feesch1,fFEESRV2.maxdly1,fFEESRV2.feetbl1)
	if fFEESRV2.chgopt2 do F2FILE("UNC",fFEESRV2.chgopt2,fFEESRV2.feeamt2,fFEESRV2.feesch2,fFEESRV2.maxdly2,fFEESRV2.feetbl2)
	if fFEESRV2.chgopt3 do F2FILE("LDG",fFEESRV2.chgopt3,fFEESRV2.feeamt3,fFEESRV2.feesch3,fFEESRV2.maxdly3,fFEESRV2.feetbl3)
	if fFEESRV2.chgopt4 do F2FILE("LIM",fFEESRV2.chgopt4,fFEESRV2.feeamt4,fFEESRV2.feesch4,fFEESRV2.maxdly4,fFEESRV2.feetbl4)
	if fFEESRV2.chgopt5 do F2FILE("ODT",fFEESRV2.chgopt5,fFEESRV2.feeamt5,fFEESRV2.feesch5,fFEESRV2.maxdly5,fFEESRV2.feetbl5)
	if fFEESRV2.chgopt6 do F2FILE("RET",fFEESRV2.chgopt6,fFEESRV2.feeamt6,fFEESRV2.feesch6,fFEESRV2.maxdly6,fFEESRV2.feetbl6)
	if fFEESRV2.chgopt7 do F2FILE("PATS",fFEESRV2.chgopt7,fFEESRV2.feeamt7,fFEESRV2.feesch7,fFEESRV2.maxdly7,fFEESRV2.feetbl7)
	if fFEESRV2.chgopt8 do F2FILE("PATF",fFEESRV2.chgopt8,fFEESRV2.feeamt8,fFEESRV2.feesch8,fFEESRV2.maxdly8,fFEESRV2.feetbl8)
	if fFEESRV2.chgopt9 do F2FILE("CRD",fFEESRV2.chgopt9,fFEESRV2.feeamt9,fFEESRV2.feesch9,fFEESRV2.maxdly9,fFEESRV2.feetbl9)
	if fFEESRV2.chgopt10 do F2FILE("STP",fFEESRV2.chgopt10,fFEESRV2.feeamt10,fFEESRV2.feesch10,fFEESRV2.maxdly10,fFEESRV2.feetbl10)
	if fFEESRV2.chgopt11 do F2FILE("DLY",fFEESRV2.chgopt11,fFEESRV2.feeamt11,fFEESRV2.feesch11,fFEESRV2.maxdly11,fFEESRV2.feetbl11)
	
	
	quit


F2FILE(String FEETYP,Number CHGOPT,Number FEEAMT,String FEESCH,Number MAXDLY,String FEETBL)

		type RecordFEESRV fFEESRV=Class.new("RecordFEESRV")

		set fFEESRV.plan=PLAN
		set fFEESRV.feedt=FEEDT
		set fFEESRV.feecat=FEECAT
		set fFEESRV.feetyp=FEETYP

		set fFEESRV.chgopt=CHGOPT
		set fFEESRV.feeamt=FEEAMT
		set fFEESRV.feesch=FEESCH
		set fFEESRV.maxdly=MAXDLY
		set fFEESRV.feetbl=FEETBL

		do fFEESRV.save()

		set QUIT=0

	quit


F3(RecordFEESRV1 fFEESRV1())	// File fee category 1, 3 and 4 data

	new N

	set N=""

	for  set N=$O(fFEESRV1(N)) quit:N=""  do {

		// Charge Option
		if 'fFEESRV1(N).chgopt quit

		// Miscellaneous Tran Code
		if fFEESRV1(N).misctc="" quit

		type RecordFEESRV fFEESRV=Class.new("RecordFEESRV")

		set fFEESRV.plan=PLAN
		set fFEESRV.feedt=FEEDT
		set fFEESRV.feecat=FEECAT
		set fFEESRV.feetyp=fFEESRV1(N).misctc
		set fFEESRV.chgopt=fFEESRV1(N).chgopt
		set fFEESRV.feeamt=fFEESRV1(N).feeamt
		set fFEESRV.feesch=fFEESRV1(N).feesch
		set fFEESRV.maxdly=fFEESRV1(N).maxdly
		set fFEESRV.feeprct=fFEESRV1(N).feeprct
		set fFEESRV.feetbl=fFEESRV1(N).feetbl

		do fFEESRV.save()

		set QUIT=0
		}

	quit


F4	// Delete Catagories

	if FEECAT do { quit

		do QUERY

		do Db.delete("FEESRV","PLAN=:PLAN AND FEEDT=:FEEDT AND FEECAT=:FEECAT AND FEETYP=:FEETYP")
		}

	else  do Db.delete("FEEPLN","PLAN=:PLAN AND FEEDT=:FEEDT")

	quit


END	// Finishing message

	lock

	if ER!(%ProcessMode=2)!(%ProcessMode=4) quit

	if VFMQ="Q" do {
		// Service plan ~p1 not created
		if %ProcessMode=0 set RM=$$^MSG(2494,PLAN) quit

		// Service plan ~p1 not modified
		if %ProcessMode=1 set RM=$$^MSG(2496,PLAN) quit

		// Service plan ~p1 not deleted
		set RM=$$^MSG(2495,PLAN)
		}

	else  do {
		// Service plan ~p1 created
		if %ProcessMode=0 set RM=$$^MSG(2490,PLAN) quit

		// Service plan ~p1 modified
		if %ProcessMode=1 set RM=$$^MSG(2492,PLAN) quit

		// Service plan ~p1 deleted
		set RM=$$^MSG(2491,PLAN)
		}

	set ER="W"

	quit


FEE1(RecordFEESRV1 fFEESRV1())	// Load section for miscellaneous fees (FEECAT=1), %O=0

	type public Cache %CACHE()

	kill X

	set CNT=0

	type ResultSet rs=Db.select("ETC","TRN","CLS='M' AND GRP='FEE'", "ETC ASC")

	if rs.isEmpty() quit

	new ETC

	while rs.next() do {

		set ETC=rs.getCol(1)

		// Exclude lower case tran codes
		if ETC?.E1L.E quit

		type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

		set CNT=CNT+1
		
		set fFEESRV1(CNT)=Class.new("RecordFEESRV1", "PLAN=:PLAN,FEEDT=:FEEDT")

		set fFEESRV1(CNT).desc=$E(trn.des,1,20)
		set fFEESRV1(CNT).misctc=ETC
		}

	// No miscellaneous fee transactions defined
	if CNT=0 do Runtime.setErrMSG("DEP",1957) quit

	set %PAGE=('(CNT#5=0))+(CNT\5)

	quit


FEE3(RecordFEESRV1 fFEESRV1())	// Load for transaction group fees (FEECAT=3), %O=0

	kill X

	set CNT=0

	type ResultSet rs=Db.select("DISTINCT TRNGRP","UTBLTRNGRPT", "", "TRNGRP ASC")

	// No transaction fee groups defined
	if rs.isEmpty() do Runtime.setErrMSG("DEP",1995) quit

	new TRNGRP

	while rs.next() do {

		set TRNGRP=rs.getCol(1)

		type ResultSet rs1=Db.select("DESC","UTBLTRNGRPT","TRNGRP=:TRNGRP AND TRNGRPDT NOT >:FEEDT","TRNGRPDT DESC")

		if rs1.next() do {

			set CNT=CNT+1
		
			set fFEESRV1(CNT)=Class.new("RecordFEESRV1", "PLAN=:PLAN,FEEDT=:FEEDT")

			set fFEESRV1(CNT).desc=rs1.getCol(1)
			set fFEESRV1(CNT).misctc=TRNGRP
			}
		}

	// No transaction fee groups defined
	if CNT=0 do Runtime.setErrMSG("DEP",1995) quit

	set %PAGE=('(CNT#5=0))+(CNT\5)

	quit


FEE4(RecordFEESRV1 fFEESRV1())	// Load for service fees (FEECAT=4), %O=0

	kill X

	set CNT=0

	type ResultSet rs=Db.select("KEY,DESC","UTBLFEE","MNEU='SRVFEE'", "KEY ASC")

	// No service fees defined
	if rs.isEmpty() do Runtime.setErrMSG("DEP",1989) quit

	while rs.next() do {

		set CNT=CNT+1
		
		set fFEESRV1(CNT)=Class.new("RecordFEESRV1", "PLAN=:PLAN,FEEDT=:FEEDT")

		set fFEESRV1(CNT).desc=$E(rs.getCol(2),1,20)
		set fFEESRV1(CNT).misctc=rs.getCol(1)
		}

	set %PAGE=('(CNT#12=0))+(CNT\12)

	quit


QRY(RecordFEESRV fFEESRV,RecordFEEQRY fFEEQRY())	// Load repeating array (FEEQRY)

	type Number I

	for I=1:1:5 set fFEEQRY(I)=Db.getRecord("FEEQRY","PLAN,FEEDT,FEECAT,FEETYP,I",1)

	set %PAGE=1
	set %REPEAT=5
	set %MODS=1
	set CNT=5

	// Load for all fee categories
	set fFEESRV=Db.getRecord("FEESRV","PLAN,FEEDT,FEECAT,FEETYP",1)

	quit


public DESC(FEECAT,FEETYP,FEEDT)	// Computed value for [FEESRV]DESC

	type Public Cache %CACHE()

	new RET

	if FEECAT=1 do { quit RET

		type RecordTRN trn=%CACHE("TRN").getRecord("TRN","FEETYP")

		set RET=$E(trn.des,1,20)
		}

	if FEECAT=2 do { quit RET

		type RecordSTBLFEECAT2 sfeecat2=Db.getRecord("STBLFEECAT2","FEETYP")

		set RET=$E(sfeecat2.desc,1,20)
		}

	if FEECAT=3 do { quit RET
		
		type ResultSet rs=Db.select("DESC","UTBLTRNGRPT","TRNGRP=:FEETYP AND TRNGRPDT NOT >:FEEDT","TRNGRPDT DESC")

		if rs.isEmpty() set RET="" quit

		if rs.next() set RET=$E(rs.getCol(1),1,20)
		}

	if FEECAT=4 do { quit RET

		new SRVFEE

		set SRVFEE="SRVFEE"

		type RecordUTBLFEE utblfee=Db.getRecord("UTBLFEE","SRVFEE,FEETYP")

		set RET=$E(utblfee.desc,1,20)
		}

	quit RET


QUERY	//   ;Private;Remove queries from feetypes

	do Db.delete("FEEQRY","PLAN=:PLAN AND FEEDT=:FEEDT AND FEECAT=:FEECAT AND FEETYP=:FEETYP")

	quit
	
	
private	PLNQSPP(RecordFEESRV fFEESRV,	// Screen post-processor for SRVPLNQ1-4
	RecordFEEQRY fFEEQRY(),
	Boolean NOPCNT)

	type Number I,PRI(),VAL
	
	// Verify at least one and only one charge type has a value
	if ('fFEESRV.feeamt.isNull()) , ('fFEESRV.feesch.isNull() ! 'fFEESRV.feeprct.isNull()! 'fFEESRV.feetbl.isNull()) do { quit

		// Only fee amount, fee schedule, or fee lookup table allowed for any line item
		if NOPCNT do Runtime.setErrMSG("FEESRV",2097)
		// Only fee amount, fee schedule, fee percent, or fee lookup table allowed for any line item
		else  do Runtime.setErrMSG("FEESRV",8728)
		}
	
	if (fFEESRV.feeamt.curVal.isNull()) , (fFEESRV.feesch.curVal.isNull()) , (fFEESRV.feeprct.curVal.isNull()) , (fFEESRV.feetbl.curVal.isNull()) do { quit

		// Fee amount, fee schedule, or fee lookup table required for each line item
		if NOPCNT do Runtime.setErrMSG("FEESRV",1064)
		// Fee amount, fee schedule, fee percent, or fee lookup required for each line item
		else  do Runtime.setErrMSG("FEESRV",8726)
		}
		
	set VAL=""
	for I=1:1 set VAL=fFEEQRY(VAL).order() quit:VAL.isNull()  if 'fFEEQRY(VAL).qryname.isNull() do { quit:ER

		if ('fFEEQRY(VAL).feeamt.isNull()) , ('fFEEQRY(VAL).feesch.isNull() ! 'fFEEQRY(VAL).feeprct.isNull() ! 'fFEEQRY(VAL).feetbl.isNull()) do { quit

			// Only fee amount, fee schedule, or fee lookup table allowed for any query
			do Runtime.setErrMSG("FEESRV",2098)
			// Only fee amount, fee schedule, fee percent, or fee lookup table allowed for any query
			else  do Runtime.setErrMSG("FEESRV",8729)
			}
			
		if (fFEEQRY(VAL).feeamt.curVal.isNull()) , (fFEEQRY(VAL).feesch.curVal.isNull()) , (fFEEQRY(VAL).feeprct.curVal.isNull()) , (fFEEQRY(VAL).feetbl.curVal.isNull()) do { quit

			// Fee amount or fee schedule required for each query
			do Runtime.setErrMSG("FEESRV",1065)
			// Fee amount, fee schedule, fee percent, or fee lookup table required for each query
			else  do Runtime.setErrMSG("FEESRV",8727)
			}
		}
		
	quit:ER
	
	// Check to make sure only one of any priority
	for I=1:1:5 if ('fFEEQRY(I).qryname.isNull()) , ('fFEEQRY(I).pri.isNull()) do { quit:ER
		if PRI(fFEEQRY(I).pri).data() do {
			set ER=1
			// Priority ~p1 assigned to query #~p2.  Reassign priority for query #~p3
			set RM=$$^MSG(2235,fFEEQRY(I).pri,PRI(fFEEQRY(I).pri))
			}
		else  set PRI(fFEEQRY(I).pri)=I
		}

	quit
	
	

vSIG()	quit "60521^67434^Irina Kin^17318"	// Signature - LTD^TIME^USER^SIZE
