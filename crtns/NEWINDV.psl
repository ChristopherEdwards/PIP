NEWINDV		/*
	ORIG: CARROLLJ - 02/02/2001
	DESC: New Individual Customer

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------

	08/03/06 - KELLYP - CR 22048
		   Modified maddress and paddress sections to eliminate 
		   PRECEDENCE warnings.

	12/07/05 - KELLYP - CR 17423
		   Removed references to CIF.ACTIVE which is being obsoleted.
		   Also removed pre-2003 revision history.  Also replaced 
		   CUVAR Db.getOneRow references with CUVAR literal.

	08/07/05 - MUIGLVANNAN - CR 16732           
		   Modified sections dldetail, pndetail, and odetail to           
		   include Drivers License, passport, and other identification           
		   issue dates respectively in the generated xml string.
	*/


	quit

	// I18N=QUIT

public INDNEW(RecordCIF cif,xml)  // Inserts new Individual Customer

	set xml=""

	// Insert Individual Customer Info
	do INDADD("XpressSync")

	// Topic and Key Information
	set xml=xml_"<TopicInfo type='group' seq='1'>"
	set xml=xml_"<ID>"
	do addtopke("Key name=""PUBLISHER_NAME""","HostPA",xml)
	do addtopke("Key name=""SERVICER_ID""",CUVAR.ucsserv,xml)
	set xml=xml_"</ID>"
	set xml=xml_"</TopicInfo>"

	// Insert new Individual Info
	set string=""
	do adindcol(.cif,.string)
	if string'="" do {
		set xml=xml_"<newIndividualCustomer type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<newIndividualCustomerModValues type='modified'>"
		set xml=xml_string
		set xml=xml_"</newIndividualCustomerModValues>"
		set xml=xml_"</newIndividualCustomer>"
		}
	// Insert Banking Info
	set string=""
	do bank(.cif,.string)
	if string'="" do {
		set xml=xml_"<addBankingInfo type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addBankingInfoModValues type='modified'>"
		set xml=xml_string
		set xml=xml_"</addBankingInfoModValues>"
		set xml=xml_"</addBankingInfo>"		
		}
	// Insert Swift Info
	set string=""
	do swift(.cif,.string)
	if string'="" do {
		set xml=xml_"<addSwiftInfo type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addSwiftInfoModValues type='modified'>"
		set xml=xml_string
		set xml=xml_"</addSwiftInfoModValues>"
		set xml=xml_"</addSwiftInfo>"
		}

	// Insert Driver License IDDetails
	set string=""
	do dldetail(.cif,.string)
	if string'="" do {
		set xml=xml_"<addIDDetails type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""LEGAL_ENTITY_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addIDDetailsModValues type='modified'>"
		do addkey("ID_TYPE","DL",xml)
		set xml=xml_string
		set xml=xml_"</addIDDetailsModValues>"
		set xml=xml_"</addIDDetails>"
		}

	// Insert Passport IDDetails
	set string=""
	do pndetail(.cif,.string)
	if string'="" do {
		set xml=xml_"<addIDDetails type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""LEGAL_ENTITY_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addIDDetailsModValues type='modified'>"
		do addkey("ID_TYPE","PN",xml)
		set xml=xml_string
		set xml=xml_"</addIDDetailsModValues>"
		set xml=xml_"</addIDDetails>"
		}

	// Insert Other IDDetails
	set string=""
	do odetail(.cif,.string)
	if string'="" do {
		set xml=xml_"<addIDDetails type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""LEGAL_ENTITY_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addIDDetailsModValues type='modified'>"
		set xml=xml_string
		set xml=xml_"</addIDDetailsModValues>"
		set xml=xml_"</addIDDetails>"
		}

	// Insert Customer to Servicer
	set xml=xml_"<addCustomerToServicer type='group' seq='1'>"
	set xml=xml_"<ID>"
	do addtopke("Key name=""SERVICER_ID""",CUVAR.ucsserv,xml)
	do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
	set xml=xml_"</ID>"
	set xml=xml_"<addCustomerToServicerModValues type='modified'>"
	do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
	set xml=xml_"</addCustomerToServicerModValues>"
	set xml=xml_"</addCustomerToServicer>"

	// Insert Audit Info
	set string=""
	do audit(.cif,.string)
	if string'="" do {	
		set xml=xml_"<addAuditInfo type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addAuditInfoModValues type='modified'>"
		set xml=xml_string
		set xml=xml_"</addAuditInfoModValues>"
		set xml=xml_"</addAuditInfo>"
		}

	// Insert Customer Mailing Address
	set string=""
	do maddress(.cif,.string)
	if string'="" do {	
		set xml=xml_"<addCustomerAddress type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addCustomerAddressModValues type='modified'>"
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_string
		set xml=xml_"</addCustomerAddressModValues>"
		set xml=xml_"</addCustomerAddress>"
		}
	// Insert Customer Permanent Address
	set string=""
	do paddress(.cif,.string)
	if string'="" do {
		set xml=xml_"<addCustomerAddress type='group' seq='2'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addCustomerAddressModValues type='modified'>"
		do addkey("CONTACT_METHOD_PURPOSE",2,xml)
		do addkey("IS_PRIMARY",0,xml)
		set xml=xml_string
		set xml=xml_"</addCustomerAddressModValues>"
		set xml=xml_"</addCustomerAddress>"
		}
	// Insert Email Address
	set string=""
	do email(.cif,.string)
	if string'="" do {
		set xml=xml_"<addEMailAddressForCustomer type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addEMailAddressForCustomerModValues type='modified'>"
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_string
		set xml=xml_"</addEMailAddressForCustomerModValues>"
		set xml=xml_"</addEMailAddressForCustomer>"
		}
	// Insert Home Phone Info
	set string=""
	do hphone(.cif,.string)
	if string'="" do {
		set xml=xml_"<addPhoneForCustomer type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addPhoneForCustomerModValues type='modified'>"
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_string
		set xml=xml_"</addPhoneForCustomerModValues>"
		set xml=xml_"</addPhoneForCustomer>"
		}
	// Insert Business Phone Info
	set string=""
	do bphone(.cif,.string)
	if string'="" do {
		set xml=xml_"<addPhoneForCustomer type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","NEXTVAL",xml)
		set xml=xml_"</ID>"
		set xml=xml_"<addPhoneForCustomerModValues type='modified'>"
		do addkey("CONTACT_METHOD_PURPOSE",2,xml)
		do addkey("IS_PRIMARY",0,xml)
		set xml=xml_string
		set xml=xml_"</addPhoneForCustomerModValues>"
		set xml=xml_"</addPhoneForCustomer>"
		}
	set xml=xml_"</XpressSync>"
		
	quit
 

public INDUPD(RecordCIF cif,xml)  //
 
	new xmlchg

	set xml=""
	set xmlchg=0

	do INDADD("XpressSync")

	// Set Topic and Key info
	set xml=xml_"<TopicInfo type='group' seq='1'>"
	set xml=xml_"<ID>"
	do addtopke("Key name=""PUBLISHER_NAME""","HostPA",xml)
	do addtopke("Key name=""SERVICER_ID""",CUVAR.ucsserv,xml)
	set xml=xml_"</ID>"
	set xml=xml_"</TopicInfo>"

	// Update Individual Entity
	set string=""
	set modstr=""
	set change=0
	do updent(.cif,.string)
	if change do {
		set xml=xml_"<updateIndividualEntity type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""LEGAL_ENTITY_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
	 
		set xml=xml_"<updateIndividualEntityOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_string
		set xml=xml_"</updateIndividualEntityOrigValues>"
 
		set xml=xml_"<updateIndividualEntityModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_modstr
		set xml=xml_"</updateIndividualEntityModValues>"
		 
		set xml=xml_"</updateIndividualEntity>"
		}

	
	// Update Individual Customer
	set string=""
	set modstr=""
	set change=0
	do upindcol(.cif,.string)
	if change do {
		set xml=xml_"<updateCustomer type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateCustomerOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_string
		set xml=xml_"</updateCustomerOrigValues>"
 
		set xml=xml_"<updateCustomerModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_modstr
		set xml=xml_"</updateCustomerModValues>"
 
		set xml=xml_"</updateCustomer>"
		}

	// Update Banking Info
	set string=""
	set modstr=""
	set change=0
	do bank(.cif,.string)
	if change do {
		set xml=xml_"<updateBankingInfo type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateBankingInfoOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_string
		set xml=xml_"</updateBankingInfoOrigValues>"
 
		set xml=xml_"<updateBankingInfoModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_modstr
		set xml=xml_"</updateBankingInfoModValues>"
 
		set xml=xml_"</updateBankingInfo>"

		}

	// Update Swift Info
	set string=""
	set modstr=""
	set change=0
	do swift(.cif,.string)
	if change do {
		set xml=xml_"<updateSwiftInfo type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
	 
		set xml=xml_"<updateSwiftInfoOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_string
		set xml=xml_"</updateSwiftInfoOrigValues>"
 
		set xml=xml_"<updateSwiftInfoModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_modstr
		set xml=xml_"</updateSwiftInfoModValues>"
		
		set xml=xml_"</updateSwiftInfo>"
		}


	// Update IDDetails Info
	set string=""
	set modstr=""
	set change=0
	do dldetail(.cif,.string)
	if change do {
		set xml=xml_"<updateIDDetails type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""LEGAL_ENTITY_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateIDDetailsOrigValues type='original'>"
		set xml=xml_string
		set xml=xml_"</updateIDDetailsOrigValues>"
 
		set xml=xml_"<updateIDDetailsModValues type='modified'>"
		set xml=xml_modstr
		set xml=xml_"</updateIDDetailsModValues>"
 
		set xml=xml_"</updateIDDetails>"
		}

	// Update Audit Info
	set string=""
	set modstr=""
	set change=0
	do audit(.cif,.string)
	if change do {
		set xml=xml_"<updateAuditInfo type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateAuditInfoOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_string
		set xml=xml_"</updateAuditInfoOrigValues>"

		set xml=xml_"<updateAuditInfoModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		set xml=xml_modstr
		set xml=xml_"</updateAuditInfoModValues>"
 
		set xml=xml_"</updateAuditInfo>"
		}

	// Update Customer Address
	new aseq
	set string=""
	set modstr=""
	set change=0
	do maddress(.cif,.string)
	set aseq=0
	if change do {
		set aseq=1
		set xml=xml_"<updateCustomerAddress type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateCustomerAddressOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_string
		set xml=xml_"</updateCustomerAddressOrigValues>"

		set xml=xml_"<updateCustomerAddressModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_modstr
		set xml=xml_"</updateCustomerAddressModValues>"
 
		set xml=xml_"</updateCustomerAddress>"
		}

	// Update Customer Address
	new seq
	set string=""
	set modstr=""
	set change=0
	do paddress(.cif,.string)
	if change do {	
		set seq=aseq+1
		set xml=xml_"<updateCustomerAddress type='group' seq='"_$G(seq)_"'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
 
		set xml=xml_"<updateCustomerAddressOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",2,xml)
		do addkey("IS_PRIMARY",0,xml)
		set xml=xml_string
		set xml=xml_"</updateCustomerAddressOrigValues>"

		set xml=xml_"<updateCustomerAddressModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",2,xml)
		do addkey("IS_PRIMARY",0,xml)
		set xml=xml_modstr
		set xml=xml_"</updateCustomerAddressModValues>"
	 
		set xml=xml_"</updateCustomerAddress>"
		}

	// Update Customer Email address
	set string=""
	set modstr=""
	set change=0
	do email(.cif,.string)
	if change do {	
		set xml=xml_"<updateCustomerEmail type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateCustomerEmailOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_string
		set xml=xml_"</updateCustomerEmailOrigValues>"
 
		set xml=xml_"<updateCustomerEmailModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_modstr
		set xml=xml_"</updateCustomerEmailModValues>"
 
		set xml=xml_"</updateCustomerEmail>"
		}

	// Update Customer Phone
	new pseq
	set string=""
	set modstr=""
	set change=0
	do hphone(.cif,.string)
	set pseq=0
	if change do {	
		set pseq=1		
		set xml=xml_"<updateCustomerPhone type='group' seq='1'>"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
		set xml=xml_"<updateCustomerPhoneOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_string
		set xml=xml_"</updateCustomerPhoneOrigValues>"

		set xml=xml_"<updateCustomerPhoneModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",1,xml)
		do addkey("IS_PRIMARY",1,xml)
		set xml=xml_modstr
		set xml=xml_"</updateCustomerPhoneModValues>"
 
		set xml=xml_"</updateCustomerPhone>"
		}
	
	// Update Customer Phone
	new seq
	set string=""
	set modstr=""
	set change=0
	do bphone(.cif,.string)
	if change do {	
		set seq=pseq+1
		set xml=xml_"<updateCustomerPhone type='group' seq=""seq"">"
		set xml=xml_"<ID>"
		do addtopke("Key name=""CUSTOMER_ID""","CURRVAL",xml)
		set xml=xml_"</ID>"
 
 
		set xml=xml_"<updateCustomerPhoneOrigValues type='original'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",2,xml)
		do addkey("IS_PRIMARY",0,xml)
		set xml=xml_string
		set xml=xml_"</updateCustomerPhoneOrigValues>"

		set xml=xml_"<updateCustomerPhoneModValues type='modified'>"
		do addkey("SERVICER_CUSTOMER_ID",cif.acn,xml)
		do addkey("CONTACT_METHOD_PURPOSE",2,xml)
		do addkey("IS_PRIMARY",0,xml)
		set xml=xml_modstr
		set xml=xml_"</updateCustomerPhoneModValues>"
 
		set xml=xml_"</updateCustomerPhone>"
		}
	set xml=xml_"</XpressSync>"
	if xmlchg=0 set xml=""
	quit


adindcol(RecordCIF cif,xml) // add columns to individual

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("DAO") do addcol("CREATION_DATE",cif.dao,cif.dao.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LNM") do addcol("LAST_NAME",cif.lnm,cif.lnm.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("FNAME") do addcol("FIRST_NAME",cif.fname,cif.fname.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAR") do addcol("MARITAL_STATUS",cif.mar,cif.mar.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SEX") do addcol("GENDER",cif.sex,cif.sex.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CCODE") do addcol("CUSTOMER_CODE",cif.ccode,cif.ccode.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CC") do addcol("COST_CENTER",cif.cc,cif.cc.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CO") do addcol("COMPANY",cif.co,cif.co.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("BOO") do addcol("BRANCH",cif.boo,cif.boo.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CITZSHP") do addcol("CITIZENSHIP",cif.citzshp,cif.citzshp.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("RESCNTRY") do addcol("RESIDENCY_CODE",cif.rescntry,cif.rescntry.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EMPLNO") do addcol("EMPLOYER_CODE",cif.emplno,cif.emplno.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EDUC") do addcol("EDUCATION_CODE",cif.educ,cif.educ.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EMPCD") do addcol("POSITION",cif.empcd,cif.empcd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("OCC") do addcol("OCCUPATION_CODE",cif.occ,cif.occ.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("NRCNTRY") do addcol("NONRESIDENT_COUNTRY",cif.nrcntry,cif.nrcntry.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("W9STAT") do addcol("TAX_ID_FORM_STATUS",cif.w9stat,cif.w9stat.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("USRESTAT") do addcol("RESIDENCY_STATUS",cif.usrestat,cif.usrestat.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("RESCD") do addcol("RESIDENCY_CODE",cif.rescd,cif.rescd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("BRREG") do addcol("REGION",cif.brreg,cif.brreg.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MARDM") do addcol("MARKETING_MAIL_CODE",cif.mardm,cif.mardm.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAREM") do addcol("MARKETING_EMAIL_CODE",cif.marem,cif.marem.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MARTEL") do addcol("MARKETING_CALLS_CODE",cif.martel,cif.martel.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("TAXEXM") do addcol("IS_TAX_EXEMPT",cif.taxexm,cif.taxexm.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("NATION") do addcol("NATIONALITY",cif.nation,cif.nation.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("RFLGC") do addcol("IS_RESTRICTED",cif.rflgc,cif.rflgc.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("NOPURGE") do addcol("IS_NO_PURGE",cif.nopurge,cif.nopurge.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("W8REQ") do addcol("IS_FOREIGN_STATUS_FORM_REQ",cif.w8req,cif.w8req.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("AFINST") do addcol("IS_AFFILIATED",cif.afinst,cif.afinst.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("ATN") do addcol("ATTENTION_MESSAGE",cif.atn,cif.atn.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CRCD") do addcol("CURRENCY_CODE",cif.crcd,cif.crcd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DODSABL") do addcol("DISABILITY_DATE",cif.dodsabl,cif.dodsabl.oldVal,xml)
	do addcol("LAST_MAINTENANCE_DATE",cif.fmld,cif.fmld.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("STATUSDT") do addcol("LAST_STATUS_CHANGE_DATE",cif.statusdt,cif.statusdt.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("W8DATE") do addcol("FOREIGN_STATUS_FORM_DATE",cif.w8date,cif.w8date.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EMPLNO") do addcol("EMPLOYER_NAME",cif.emplno,cif.emplno.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SUFFIX") do addcol("NAME_SUFFIX",cif.suffix,cif.suffix.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PREF") do addcol("NAME_PREFIX",cif.pref,cif.pref.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MNAME") do addcol("MIDDLE_NAME",cif.mname,cif.mname.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("TAXID") do addcol("TAX_ID",cif.taxid,cif.taxid.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SPOUSE") do addcol("SPOUSE",cif.spouse,cif.spouse.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SHHLD") do addcol("SHAREHOLDER_CODE",cif.shhld,cif.shhld.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CONVCIF") do addcol("PRIOR_CUSTOMER_ID",cif.convcif,cif.convcif.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LOCALE") do addcol("LOCALE",cif.locale,cif.locale.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LANG") do addcol("LANGUAGE",cif.lang,cif.lang.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DEP") do addcol("DEPENDENTS",cif.dep,cif.dep.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DOD") do addcol("DECEASED_ON",cif.dod,cif.dod.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DOB") do addcol("BIRTH_DATE",cif.dob,cif.dob.oldVal,xml)
	quit

bank(RecordCIF cif,xml)	// From Banking Info for adding a new individual XML message
	
	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("CRE") do addcol("DEFAULT_CREDIT_LINE",cif.cre,cif.cre.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DARCOVR") do addcol("DELINQUENCY_ASSET_CLASS",cif.darcovr,cif.darcovr.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DEPCLOVR") do addcol("DEPOSIT_ASSET_CLASS",cif.depclovr,cif.depclovr.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PLAN") do addcol("LIMIT_PLAN",cif.plan,cif.plan.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("INTERBANK") do addcol("IS_INTERBANK_CUSTOMER",cif.interbank,cif.interbank.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SDB") do addcol("SAFE_DEPOSIT_BOX_STATUS",cif.sdb,cif.sdb.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CUSAMT") do addcol("LENDING_LIMIT",cif.cusamt,cif.cusamt.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LNSA") do addcol("LOAN_SETTLEMENT_ACCOUNT",cif.lnsa,cif.lnsa.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PMAXBAL") do addcol("MAX_PRINCIPAL_BALANCE",cif.pmaxbal,cif.pmaxbal.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SHCID") do addcol("PRIMARY_SHARE_ACCOUNT",cif.shcid,cif.shcid.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CUSDATE") do addcol("LENDING_LIMIT_REVIEW_DATE",cif.cusdate,cif.cusdate.oldVal,xml)
 
	quit

swift(RecordCIF cif,xml)	// Swift Information for newIndividualCustomerInfo

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("SWIFTCON") do addcol("CONFIRMATION_ADDRESS",cif.swiftcon,cif.swiftcon.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SWIFTADD") do addcol("DEFAULT_SWIFT_ADDRESS",cif.swiftadd,cif.swiftadd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SWIFTSAK") do addcol("IS_AUTHENTICATION_KEY",cif.swiftsak,cif.swiftsak.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT320") do addcol("IS_MT320",cif.mt320,cif.mt320.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT900") do addcol("IS_MT900",cif.mt900,cif.mt900.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT900A") do addcol("MT900_ADDRESS",cif.mt900a,cif.mt900a.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT900THR") do addcol("MT900_THRESHOLD",cif.mt900thr,cif.mt900thr.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT910") do addcol("IS_MT910",cif.mt910,cif.mt910.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT910A") do addcol("MT910_ADDRESS",cif.mt910a,cif.mt910a.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT910THR") do addcol("MT910_THRESHOLD",cif.mt910thr,cif.mt910thr.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT940") do addcol("IS_MT940",cif.mt940,cif.mt940.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT940A") do addcol("MT940_ADDRESS",cif.mt940a,cif.mt940a.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT942") do addcol("IS_MT942",cif.mt942,cif.mt942.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT942A") do addcol("MT942_ADDRESS",cif.mt942a,cif.mt942a.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT942CRTH") do addcol("MT942_CREDIT_THRESHOLD",cif.mt942crth,cif.mt942crth.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT942DRTH") do addcol("MT942_DEBIT_THRESHOLD",cif.mt942drth,cif.mt942drth.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT942G1") do addcol("MT942_TIME_FOR_MSG1",cif.mt942g1,cif.mt942g1.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT942G2") do addcol("MT942_TIME_FOR_MSG2",cif.mt942g2,cif.mt942g2.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT950") do addcol("IS_MT950",cif.mt950,cif.mt950.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT320A") do addcol("MT320_ADDRESS",cif.mt320a,cif.mt320a.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MT950A") do addcol("MT950_ADDRESS",cif.mt950a,cif.mt950a.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SW940FREQ") do addcol("MT940_FREQUENCY",cif.sw940freq,cif.sw940freq.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("VOSFREQ") do addcol("MT950_FREQUENCY",cif.vosfreq,cif.vosfreq.oldVal,xml)
	 
	quit


dldetail(RecordCIF cif,xml) // IDDetail information for Driver License
 
	set xml=$G(xml)
 
	if %ProcessMode=0!cif.isChanged("DLNUM") do addcol("ID_NUMBER",cif.dlnum,cif.dlnum.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DLSTATE") do {
		if cif.dlnum'="",cif.dlstate="" do addcol("ISSUED_BY","UNKNOWN",cif.dlstate.oldVal,xml)
		else  do addcol("ISSUED_BY",cif.dlstate,cif.dlstate.oldVal,xml)
		}
	if %ProcessMode=0!cif.isChanged("DLEXPDT") do addcol("EXPIRATION_DATE",cif.dlexpdt,cif.dlexpdt.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DLISDT") do addcol("ISSUE_DATE",cif.dlisdt,cif.dlisdt.oldVal,xml)
	quit


pndetail(RecordCIF cif,xml)  // IDDetail for passports
 
	set xml=$G(xml)
 
	if %ProcessMode=0!cif.isChanged("PASNUM") do addcol("ID_NUMBER",cif.pasnum,cif.pasnum.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PCI") do {
		if cif.pasnum'="",cif.pci="" do addcol("ISSUED_BY","UNKNOWN",cif.pci.oldVal,xml)
		else  do addcol("ISSUED_BY",cif.pci,cif.pci.oldVal,xml)
		}
	if %ProcessMode=0!cif.isChanged("PED") do addcol("EXPIRATION_DATE",cif.ped,cif.ped.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PISDT") do addcol("ISSUE_DATE",cif.pisdt,cif.pisdt.oldVal,xml)
	quit


odetail(RecordCIF cif,xml) // IDDetail info for other id's
 
	set xml=$G(xml)

	if %ProcessMode=0!cif.isChanged("OIN") do addcol("ID_NUMBER",cif.oin,cif.oin.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("OED") do addcol("EXPIRATION_DATE",cif.oed,cif.oed.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("ISSR") do {
		if cif.oin'="",cif.issr="" do addcol("ISSUED_BY","UNKNOWN",cif.issr.oldVal,xml)
		else  do addcol("ISSUED_BY",cif.issr,cif.issr.oldVal,xml)
		}
	if %ProcessMode=0!cif.isChanged("OIT") do addcol("ID_TYPE",cif.oit,cif.oit.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("OISDT") do addcol("ISSUE_DATE",cif.oisdt,cif.oisdt.oldVal,xml)
	quit

audit(RecordCIF cif,xml)	// Audit Information for newIndividualCustomerInfo

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("AUD1") do addcol("AUDITOR",cif.aud1,cif.aud1.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("AUD1CF") do addcol("CONFIRMATION_FREQUENCY",cif.aud1cf,cif.aud1cf.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("AUD1LD") do addcol("CONFIRMATION_LAST_DATE",cif.aud1ld,cif.aud1ld.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("AUD1ND") do addcol("CONFIRMATION_NEXT_DATE",cif.aud1nd,cif.aud1nd.oldVal,xml)

	quit
 
maddress(RecordCIF cif,xml)	// Addres info for adding a new individual XML message

	set xml=$G(xml)
	if (cif.acn.isNull())!(cif.mcntry.isNull()) quit
	if %ProcessMode=0!cif.isChanged("MCNTRY") do addcol("COUNTRY",cif.mcntry,cif.mcntry.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MSTATE") do {
		do addcol("STATE_OR_PROVINCE",cif.mstate,cif.mstate.oldVal,xml)
		if %ProcessMode=1,'cif.isChanged("MCNTRY") do addcol("COUNTRY",cif.mcntry,cif.mcntry.oldVal,xml)
		}
	if %ProcessMode=0!cif.isChanged("MLOC") do addcol("LOCALE_CODE",cif.mloc,cif.mloc.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MZIP") do addcol("POSTAL_CODE",cif.mzip,cif.mzip.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CEN") do addcol("CENSUS_TRACT",cif.cen,cif.cen.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MCITY") do addcol("CITY",cif.mcity,cif.mcity.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAD1") do addcol("STREET_NAME",cif.mad1,cif.mad1.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAD2") do addcol("ADDITIONAL_LINE_1",cif.mad2,cif.mad2.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAD1")!cif.isChanged("MAD2")!cif.isChanged("MAD3")!cif.isChanged("MAD4") do addcol("UNSTRUCTURED_ADDRESS",cif.mad1_ cif.mad2_ cif.mad3_ cif.mad4,cif.mad1.oldVal_ cif.mad2.oldVal_ cif.mad3.oldVal_ cif.mad4.oldVal,xml)


	quit
	
paddress(RecordCIF cif,xml) // Permanent address information

	set xml=$G(xml)
	if (cif.acn.isNull())!(cif.pcntry.isNull()) quit
	if %ProcessMode=0!cif.isChanged("PCNTRY") do addcol("COUNTRY",cif.pcntry,cif.pcntry.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PSTATE") do {
		do addcol("STATE_OR_PROVINCE",cif.pstate,cif.pstate.oldVal,xml)
		if %ProcessMode=1,'cif.isChanged("PCNTRY") do addcol("COUNTRY",cif.pcntry,cif.pcntry.oldVal,xml)
		}
	if %ProcessMode=0!cif.isChanged("PLOC") do addcol("LOCALE_CODE",cif.ploc,cif.ploc.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PZIP") do addcol("POSTAL_CODE",cif.pzip,cif.pzip.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PCITY") do addcol("CITY",cif.pcity,cif.pcity.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CEN") do addcol("CENSUS_TRACT",cif.cen,cif.cen.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PAD1") do addcol("STREET_NAME",cif.pad1,cif.pad1.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PAD2") do addcol("ADDITIONAL_LINE_1",cif.pad2,cif.pad2.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PAD1")!cif.isChanged("PAD2")!cif.isChanged("PAD3")!cif.isChanged("PAD4") do addcol("UNSTRUCTURED_ADDRESS",cif.pad1_ cif.pad2_ cif.pad3_ cif.pad4,cif.pad1.oldVal_ cif.pad2.oldVal_ cif.pad3.oldVal_ cif.pad4.oldVal,xml)

	quit

email(RecordCIF cif,xml)	// Email address for Customer

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("EMAIL") do addcol("EMAIL_ADDRESS",cif.email,cif.email.oldVal,xml)
	quit

hphone(RecordCIF cif,xml)	// Home phone info for customer

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("HPH") do addcol("LINE_NUMBER",cif.hph,cif.hph.oldVal,xml)
	quit

bphone(RecordCIF cif,xml)	// Business phone info for customer

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("BPH") do addcol("LINE_NUMBER",cif.bph,cif.bph.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("BPHEXT") do addcol("EXTENSION",cif.bphext,cif.bphext.oldVal,xml)

	quit


updent(RecordCIF cif,xml)	// update Individual Entity for customer

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("DOB") do addcol("BIRTH_DATE",cif.dob,cif.dob.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CITZSHP") do addcol("CITIZENSHIP",cif.citzshp,cif.citzshp.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("RESCNTRY") do addcol("RESIDENCY_CODE",cif.rescntry,cif.rescntry.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DOD") do addcol("DECEASED_ON",cif.dod,cif.dod.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DEP") do addcol("DEPENDENTS",cif.dep,cif.dep.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DODSABL") do addcol("DISABILITY_DATE",cif.dodsabl,cif.dodsabl.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EDUC") do addcol("EDUCATION_CODE",cif.educ,cif.educ.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EMPLNO") do addcol("EMPLOYER_CODE",cif.emplno,cif.emplno.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EMPLNO") do addcol("EMPLOYER_NAME",cif.emplno,cif.emplno.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("FNAME") do addcol("FIRST_NAME",cif.fname,cif.fname.oldVal,xml)	
	if %ProcessMode=0!cif.isChanged("W8DATE") do addcol("FOREIGN_STATUS_FORM_DATE",cif.w8date,cif.w8date.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SEX") do addcol("GENDER",cif.sex,cif.sex.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("AFINST") do addcol("IS_AFFILIATED",cif.afinst,cif.afinst.oldVal,xml)	
	if %ProcessMode=0!cif.isChanged("W8REQ") do addcol("IS_FOREIGN_STATUS_FORM_REQ",cif.w8req,cif.w8req.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("TAXEXM") do addcol("IS_TAX_EXEMPT",cif.taxexm,cif.taxexm.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("W9STAT") do addcol("TAX_ID_FORM_STATUS",cif.w9stat,cif.w9stat.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("TAXID") do addcol("TAX_ID",cif.taxid,cif.taxid.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SPOUSE") do addcol("SPOUSE",cif.spouse,cif.spouse.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SHHLD") do addcol("SHAREHOLDER_CODE",cif.shhld,cif.shhld.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("USRESTAT") do addcol("RESIDENCY_STATUS",cif.usrestat,cif.usrestat.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("RESCD") do addcol("RESIDENCY_CODE",cif.rescd,cif.rescd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("EMPCD") do addcol("POSITION",cif.empcd,cif.empcd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("OCC") do addcol("OCCUPATION_CODE",cif.occ,cif.occ.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("NRCNTRY") do addcol("NONRESIDENT_COUNTRY",cif.nrcntry,cif.nrcntry.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("NATION") do addcol("NATIONALITY",cif.nation,cif.nation.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("SUFFIX") do addcol("NAME_SUFFIX",cif.suffix,cif.suffix.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("PREF") do addcol("NAME_PREFIX",cif.pref,cif.pref.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MNAME") do addcol("MIDDLE_NAME",cif.mname,cif.mname.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAR") do addcol("MARITAL_STATUS",cif.mar,cif.mar.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LOCALE") do addcol("LOCALE",cif.locale,cif.locale.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LANG") do addcol("LANGUAGE",cif.lang,cif.lang.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("LNM") do addcol("LAST_NAME",cif.lnm,cif.lnm.oldVal,xml)
	quit


upindcol(RecordCIF cif,xml)	// Update Individual Customer

	set xml=$G(xml)
	if %ProcessMode=0!cif.isChanged("ATN") do addcol("ATTENTION_MESSAGE",cif.atn,cif.atn.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("BOO") do addcol("BRANCH",cif.boo,cif.boo.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CO") do addcol("COMPANY",cif.co,cif.co.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("RFLGC") do addcol("IS_RESTRICTED",cif.rflgc,cif.rflgc.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("BRREG") do addcol("REGION",cif.brreg,cif.brreg.oldVal,xml)	
	if %ProcessMode=0!cif.isChanged("CONVCIF") do addcol("PRIOR_CUSTOMER_ID",cif.convcif,cif.convcif.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MARDM") do addcol("MARKETING_MAIL_CODE",cif.mardm,cif.mardm.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MAREM") do addcol("MARKETING_EMAIL_CODE",cif.marem,cif.marem.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("MARTEL") do addcol("MARKETING_CALLS_CODE",cif.martel,cif.martel.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("STATUSDT") do addcol("LAST_STATUS_CHANGE_DATE",cif.statusdt,cif.statusdt.oldVal,xml)
	do addcol("LAST_MAINTENANCE_DATE",cif.fmld,cif.fmld.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("NOPURGE") do addcol("IS_NO_PURGE",cif.nopurge,cif.nopurge.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CC") do addcol("COST_CENTER",cif.cc,cif.cc.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("DAO") do addcol("CREATION_DATE",cif.dao,cif.dao.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CRCD") do addcol("CURRENCY_CODE",cif.crcd,cif.crcd.oldVal,xml)
	if %ProcessMode=0!cif.isChanged("CCODE") do addcol("CUSTOMER_CODE",cif.ccode,cif.ccode.oldVal,xml)

	quit

addcol(column,data,oldata,output)
 
	if %ProcessMode=0,data="" quit
	if %ProcessMode=0 set xml=$G(output)_"<"_column_" type = ""data"">"_data_"</"_column_">"
 
	else  do {
		set modstr=$G(modstr)_"<"_column_" type = ""data"">"_data_"</"_column_">"
		set xml=$G(output)_"<"_column_" type = ""data"">"_oldata_"</"_column_">"
		}
	set (xmlchg,change)=1
	quit


addkey(column,data,output)
 
	if %ProcessMode=0,data="" quit
	set xml=$G(output)_"<"_column_" type = ""data"">"_data_"</"_column_">"
	set (xmlchg,change)=1
	quit


INDADD(add) // Creates Header for newIndividualCustomer.dtd
 
	set xml=xml_"<?xml version=""1.0"" encoding=""UTF-8""?>"
	set xml=xml_"<?DocHandler DocHandler=""PIA""?>"
	set xml=xml_"<?PIA Application=""batch""?>"
	set xml=xml_"{cookie}"
	set xml=xml_"<!DOCTYPE "_add_">"
	set xml=xml_"<"_add_">"
	quit

addtopke(column,data,output)    //  Adds topic info
 
	set xml=xml_"<"_column_">"_data_"</"_"Key"_">"
 
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60479^60362^Pat Kelly^35092"	// Signature - LTD^TIME^USER^SIZE
