HSYNCWRT	
	/*
	
	This procedure contains utility labels used to write records to the output file(s)
	They are called from assorted procedures within the host sync procedure set.

	  ---- Revision History ------------------------------------------------

	   01/05/06 - KELLYP - CR 18761
	   	Modified wrtrec section to change "TMPTREC" typo to "TEMPTREC".
	   	Also modified wrtrec section to declare it as public and removed
	   	pre-2003 revision history.

	*/

	quit
	

WRTDBTBL(FILENAME)	// Public; Build the file transfer for schema create

	/* 
		This function is only called when a new schema file is created. It is called 
		from the routine FEPTFILE

	Arguments:
 
	. FILENAME		Table Name		/TYP=T/REQ/MECH=VAL
 
 
	*/

	new %LIBS,Q,SORTFID,WIDEFILE

	set %LIBS="SYSDEV"
	do MAP^DBSDDMAP(FILENAME,.WIDEFILE)
	if $D(WIDEFILE) do RESORT^DDPXFR1(.WIDEFILE,.SORTFID,FILENAME)
	
	/*
	 delete of foreign and index's are sent to the client
	 for the benefit of the mumps clients. These clients
	 do not implicitly kill these two files as part of the
	 file definition delete which a gui will perform.
	*/

	//remove foreign keys that this table points to
	set Q="DBTBL1F.FID=:FILENAME and DBTBL1F.%LIBS='SYSDEV'"
	do BLDRMS^DBSTLOAD("DBTBL1F",3,Q,FILENAME)

	//remove foreign keys which point to this table
	do SNDFKEYS^HSYNCFBD(3,FILENAME)

	// Remove INDEX definitions for this table
	set Q="DBTBL8.FID=:FILENAME and DBTBL8.%LIBS='SYSDEV'"
	do BLDRMS^DBSTLOAD("DBTBL8",3,Q,FILENAME)

	// remove the table
	set Q="DBTBL1.FID=:FILENAME and DBTBL1.%LIBS='SYSDEV'"
	do BLDRMS^DBSTLOAD("DBTBL1",3,Q,FILENAME)
	
	/*
	 Send a rebuild to the client for DBTBL1,
	 DBTBL1D,DBTBLF andDBTBL8.
	*/

	// add table
	set Q="DBTBL1.FID=:FILENAME and DBTBL1.%LIBS='SYSDEV'"
	do BLDRMS^DBSTLOAD("DBTBL1",0,Q,,FILENAME,FILENAME)

	// add columns
	set Q="DBTBL1D.FID=:FILENAME and DBTBL1D.%LIBS='SYSDEV'"
	do BLDRMS^DBSTLOAD("DBTBL1D",0,Q,,FILENAME,FILENAME)

	//add foreign keys
	set Q="DBTBL1F.FID=:FILENAME and DBTBL1F.%LIBS='SYSDEV'"
	do BLDRMS^DBSTLOAD("DBTBL1F",0,Q,,FILENAME,FILENAME)

	// add index rebuild
	set Q="DBTBL8.FID=:FILENAME and DBTBL8.%LIBS='SYSDEV' and DBTBL8.ORDERBY NOT LIKE '%'"
	do BLDRMS^DBSTLOAD("DBTBL8",0,Q,,FILENAME,FILENAME)
	
	/*
	 Send foreign keys from other files which point
	 to this file
	*/
	do SNDFKEYS^HSYNCFBD(0,FILENAME)
	if $D(SORTFID) do SPLITBLD^DDPXFR1
	set TEMPFID=FILENAME
	
	quit 




public wrtrec	// Optional Write of TREC,FREC,SREC while writing DREC
	
	/*
	 Based on TREC,SREC,FREC we may not write a record for these are the same as the last record
	 For those that we do, call IOWRITE to perform the update
	 This is called from FEPTFILE
	*/
	
	
	new VER,VERLIST
	do VALIDVER
	if $D(TREC) do WRITEREC(.TREC) set TEMPTREC=TREC

	if FREC'=$G(TEMPREC)!($D(TREC)) do {
		set TEMPREC=FREC
		set FREC=$TR(FREC,"%","_")
		set VER=""
		for  set VER=$O(FREC(VER)) quit:VER=""  set FREC(VER)=$TR(FREC(VER),"%","_")
		do WRITEREC(.FREC)
		do WRITEREC(.SREC)
		kill FREC,SREC
		}
	else  if TEMPTREC'=$TR(FREC,"%","_")  do {
		set FREC=$TR(FREC,"%","_")	
		new VER 
		set VER=""
		for  set VER=$O(FREC(VER)) quit:VER=""  set FREC(VER)=$TR(FREC(VER),"%","_")
		do WRITEREC(.FREC)
		do WRITEREC(.SREC)
		set TEMPEC=FREC
		kill FREC,SREC
		}
	do WRITEREC(.DREC)
	kill TREC
	if $L(CREC)>1 do WRITEREC(.CREC) kill CREC
	set TEMPFID=FILENAME
	quit 


wrtsplit	// Public; Optional write of TREC,FREC,SREC,DREC for split tables while writing DREC

	// call IOWRITE utility to write all record to file
	// This is called from procedure HSYNCSPLIT

	new VER,VERLIST
	do VALIDVER

	if $D(TREC),TEMPTREC'=TREC do WRITEREC(.TREC)
	if TEMPREC'=FREC!(TEMPTREC'=TREC) D {
		set VER=""
		for  set VER=$O(FREC(VER)) quit:VER=""  set FREC(VER)=$TR(FREC(VER),"%","_")
		do WRITEREC(.FREC)
		do WRITEREC(.SREC)
		}
	set TEMPTREC=TREC
	set TEMPREC=FREC
	do WRITEREC(.DREC)
	quit 
	
	

WRITEREC(RECORD)	// Public, Drive through RECORD array and call IOWRITE to update FILE

	/*
	Arguments:
 
	. RECORD	Array of data records to append to IO		/TYP=T/NOREQ/MECH=refarray

 	*/

	new NEWVER,VER
	set VER=""
	if '$D(VERLIST) do { quit 
		if $D(RECORD)=1 do IOWRITE(RECORD) quit 
		for  set VER=$O(RECORD(VER)) quit:VER=""  do IOWRITE(RECORD(VER),VER)
		if '$D(RECORD(CLIENT)) do IOWRITE(RECORD,CLIENT)
		}
	
	set NEWVER=""
	for  set NEWVER=$O(VERLIST(NEWVER)) quit:NEWVER=""  do {
		if $D(RECORD)=1 do IOWRITE(RECORD,NEWVER) quit 
		if $D(RECORD(NEWVER)) do IOWRITE(RECORD(NEWVER),NEWVER) quit 
		do IOWRITE(RECORD,NEWVER)
		}
	quit 



IOWRITE(WRTREC,WRTVER,TREC)	// Public; write record to file

	/*
	This procedure is used to update a file(s) with a record of data.
	Depending on the current builds of clients, multiple versions of the
	same record may exist and would need to be inserted into each file.  This
	label has bene designed to handle that situation. 
	It is called from procedures DBSTLOAD,HSYNCSPLIT and this procedure.

	Arguments:
 
	. WRTREC	Single formatted record for ouput		/TYP=T/REQ/MECH=VAL
	. WRTVER	Version of host software being transferred 	/TYP=T/NOREQ/MECH=VAL
	. TREC		Indicator that log should be kept		/TYP=L/NOREQ/MECH=VAL
 
	
	*/

	new I,VER
	set VER=""
	for  set VER=$O(IOLIST(VER)) quit:VER=""  do {
		if $G(WRTVER)'="",WRTVER'=VER quit 
		if RECTYPE="C",VER'="N" quit 
		if RECTYPE="G",VER="N" quit 

		//created in future vers
		if $D(NEWFILE(FILENAME)),$$CHKVER^DBSTLOAD(VER) quit   
		use IOLIST(VER)
		for I=1:1:$L(WRTREC,$C(9)) write $P(WRTREC,$C(9),I),!
		if $G(TREC) set DDPLOG(VER)=1
		}
	quit 
	


VALIDVER	// Private; Build array of valid versions

	/*
	 If the file is new in a version, then we can only send the data
	 and schema to clients which are on that version or higher.
	 The data for this check is setup in the procedure FEPTFILE.
	*/

	if $D(NEWFILE(DBTBLFID)) do {          // determine version to start with
		set VER=$O(NEWFILE(DBTBLFID,""))
		set VERLIST(VER)=""
		for  set VER=$O(CLIENT(VER)) quit:VER=""  set VERLIST(VER)=""
		}
	/*
	 send schema changes only to current CLIENT,
	 data to all clients, except if a NEWFILE exists
	 then only for those clients which have the
	 schema.
	*/
	if MODE=3 if FILENAME["DBTBL" kill VERLIST set VERLIST(CLIENT)=""
	quit 
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60270^41589^Pat Kelly^5981"	// Signature - LTD^TIME^USER^SIZE
