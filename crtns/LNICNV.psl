LNICNV	/* Private - Convert Interim Loan To Permanent Status
	ORIG: Chuck Hardy (6721) - 04/20/87
	PROCEDURE ID: LNICNV
	DESC: Convert Interim Loan To Permanent Status

	INPUT: 	ICID - Account to be converted or credited
		IDPF - 	1 = Convert from interim to permanent (open new loan)
			2 = Transfer funds from permanent (credit) to
			    deferred (debit).  Deferred loan was originally
			    created as interim loan.
			3 = Transfer funds from deferred (credit) to
			    permanent (debit).
		CTYPE - Account type being converted to
		EFD - Effective date
		LNICNV() - conversion info array

	OUTPUT: %AMT - Transfer amount
		TYPE - Transfer "from" account type
		CTYPE - Transfer "to" Account type
		IDPF=1 - Created permanent account
		CID - Convert (transfer) "to" account

	------ Revision History ------------------------------------------------
	09/21/05 - BHOLT - 17068
		   Modified the Depricated method to Current Standard.

        07/26/05 - SkariahV- CR16679
	           Removed #WARN and #OPTIMIZE directives.
	              
	03/12/03 - Dan Russell - 51351
		   Convert to PSL.
		   
		   Remove old change history.

	------------------------------------------------------------------------
	*/
	

	type public Boolean ER
	type public Date EFD
	type public Number CID, CTYPE, ICID, IDPF, SEQ
	type public String ET, LNICNV()	
	
	type Date AMODT, JD, NJD
	type Number AF, %AMT, TYPE
	type String CRCD, FRE, PGM			

	set ER = 0
	
	type RecordLN oldln = Db.getRecord("LN", "CID = :ICID", 1)
	
	set TYPE = oldln.type
	set CRCD = oldln.crcd
	if CRCD = "" set CRCD = %SystemCurrency
	
	if IDPF = 2 do PERM(.oldln) quit
	if IDPF = 3 do DEF(.oldln) quit

	/* IDPF=1 - Convert Interim to Permanent
	   If an interim loan with a valid related account has already been
	   converted, quit with an error.
	*/
	
	if oldln.relcid '= "", Db.isDefined("LN", "CID = :oldln.relcid") do { quit
		set ER = 1
		// Account was already converted to permanent status
		set ET = "ACINT"
		do ^UTLERR
		}

	// Create New Account Record
	
	/* Note:  Pre-PSL version tried to rebuilt title from relationship and CIF
	   records.  However, there were numerous bugs.  Instead, until find a reason
	   to do otherwise, just keep the same title and same set of CIF relationships.
	*/

	// See if Permanent account number was set up originally
	kill CID
	if LNICNV(SEQ).piece("|", 6) '= "" set CID = LNICNV(SEQ).piece("|", 6)
	else  set CID = $$CID^NEW quit:ER
	if CID = "" do { quit
		set ER = 1
		// No account number assigned
		set ET = "NOCIDAS"
		do ^UTLERR
		}

	// Create new loan record and load product defaults
	type RecordLN newln = Class.new("RecordLN")
	do newln.default(CTYPE)
	
	// Set info into new loan
	set newln.title1 = oldln.title1
	set newln.title2 = oldln.title2
	set newln.title3 = oldln.title3
	set newln.title4 = oldln.title4
	set newln.acctname = oldln.acctname
	set newln.boo = oldln.boo
	set newln.ccode = oldln.ccode
	set newln.lnm = oldln.lnm
	set newln.cc = oldln.cc
	set newln.pers = oldln.pers
	set newln.atn = oldln.atn
	set newln.secgrp = oldln.secgrp
	set newln.emplben = oldln.emplben
	set newln.fldstaff = oldln.fldstaff
	set newln.emplno = oldln.emplno
	set newln.aomcode = oldln.aomcode
	set newln.acn = oldln.acn
	set newln.acnrelc = oldln.acnrelc
	set newln.aplid = oldln.aplid
	set newln.crcd = oldln.crcd
	set newln.bal = 0
	set newln.cntdr = 0
	set newln.cntcr = 0
	set newln.balcol = 0
	set newln.chkhld = 0
	set newln.teb = 0
	set newln.balint = 0
	set newln.ccl = oldln.ccl
	set newln.revf = oldln.revf
	set newln.udbal = oldln.udbal
	set newln.pbi = oldln.pbi
	set newln.odd = EFD
	set newln.odt = %SystemDate
	set newln.dtnt = EFD
	if LNICNV(SEQ).piece("|", 4) '= "" do {
		set newln.iro = LNICNV(SEQ).piece("|", 4)
		set newln.irn = LNICNV(SEQ).piece("|", 4)
		}
	set newln.off = oldln.off
	set newln.fma = oldln.fma
	set newln.mincl = oldln.mincl
	set newln.dtc = oldln.dtc
	set newln.off2 = oldln.off2
	set newln.off3 = oldln.off3
	set newln.off4 = oldln.off4
	set newln.off5 = oldln.off5
	set newln.convacn = oldln.convacn
	set newln.dfp = oldln.dfp
	set newln.org = 0
	set newln.tdr = 0
	set newln.crlmt = oldln.bal
	set newln.amtreq = oldln.bal
	if LNICNV(SEQ).piece("|", 3) '= "" do {
		set newln.trm = LNICNV(SEQ).piece("|", 3)
		set newln.ptrm = LNICNV(SEQ).piece("|", 3)
		}
	set newln.acr = 0
	set newln.iun = 0
	set newln.iytd = 0
	set newln.ipy = 0
	set newln.ipl = 0
	set newln.daa = 0
	set newln.intdef = 0
	set newln.nai = 0
	set newln.negacr = 0
	set newln.ipnd = 0
	set newln.pytd = 0
	set newln.ppy = 0
	set newln.ppl = 0
	set newln.lchg = 0
	set newln.aniro = newln.irn
	set newln.pvar = 0
	set newln.ppa = 0
	set newln.schnum = 0
	set newln.schbal = 0
	set newln.poamt = 0
	set newln.pflg = 0
	set newln.tdue = 0
	set newln.cuin = 0
	set newln.unin = 0
	set newln.cupr = 0
	set newln.unpr = 0
	set newln.cues = 0
	set newln.unes = 0
	set newln.schseq = 0
	set newln.anoffdt = 0
	set newln.eacip = 0
	set newln.fpc01 = 0
	set newln.fpc02 = 0
	set newln.fpc03 = 0
	set newln.fpc04 = 0
	set newln.fpc05 = 0
	set newln.fpc06 = 0
	set newln.fpc07 = 0
	set newln.fpc08 = 0
	set newln.fpc09 = 0
	set newln.fpc10 = 0
	set newln.fpc11 = 0
	set newln.fpc12 = 0
	set newln.pmtpi = LNICNV(SEQ).piece("|", 8)
	if LNICNV(SEQ).piece("|", 5) '= "" set newln.index = LNICNV(SEQ).piece("|", 5)
	set newln.piacm = 0
	set newln.lcan = 0
	if LNICNV(SEQ).piece("|", 2) '= "" set newln.dist1fre = LNICNV(SEQ).piece("|", 2)
	set newln.inta = 0
	set newln.baola = 0
	set newln.oseq = 0
	set newln.dseq = 0
	set newln.dpmt = 0
	set newln.tba = 0
	set newln.dip = 0
	set newln.lip = 0
	set newln.hip = 0
	set newln.dlrp = 0
	set newln.ptsp = 0
	set newln.mscp = 0
	set newln.coll = oldln.coll
	set newln.colcd = oldln.colcd
	set newln.fclf = oldln.fclf
	set newln.fcpt = oldln.fcpt
	set newln.fclp = oldln.fclp
	set newln.minrate = oldln.minrate
	set newln.adjcrlmt = oldln.adjcrlmt
	set newln.bseq = 0
	set newln.ptbal = 0
	set newln.subamt = 0
	set newln.subnd = 0
	set newln.relcid = ICID
	set newln.idpf = 2
	set newln.dirdef = LNICNV(SEQ).piece("|", 9)
	set newln.ecoa = oldln.ecoa
	set newln.fpp01 = 0
	set newln.fpp02 = 0
	set newln.fpp03 = 0
	set newln.fpp04 = 0
	set newln.fpp05 = 0
	set newln.fpp06 = 0
	set newln.fpp07 = 0
	set newln.fpp08 = 0
	set newln.fpp09 = 0
	set newln.fpp10 = 0
	set newln.fpp11 = 0
	set newln.fpp12 = 0
	set newln.coloff = oldln.coloff
	set newln.pbkbal = 0
	set newln.pbkld = 0
	set newln.pbkseq = 0
	set newln.pbklin = 0
	set FRE = "-"_newln.dist1fre, JD = LNICNV(SEQ).piece("|", 7)
	set NJD = $$NJD^UFRE(JD, FRE, .AF, "") quit:ER
	set newln.dist1nd = JD
	set newln.dist1ld = NJD
	set newln.dist1af = AF
	set newln.dfp = JD
	set AMODT = EFD
	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE = :CTYPE", 1)
	if prodctl.ppif do PPIF^LNPPC1(.newln)
	if AMODT<EFD set AMODT = EFD
	set newln.amodt = AMODT

	do ^LNNEW10(.newln)

	// Deal with related tables and file the loan
	
	// Address
	type RecordACNADDR oldaddr = Db.getRecord("ACNADDR", "CID = :ICID", 1)
	type RecordACNADDR newaddr = oldaddr.copy()
	do newaddr.setMode(0)

	do Runtime.start("CS")
	do newln.save()
	do newaddr.save("NOJOURNAL")
	
	// Related CIFs
	type DbSet relcifds = Db.selectDbSet("RELCIF", "CID = :ICID")
	while relcifds.next() do {
		type RecordRELCIF relcif = relcifds.getRecord("RELCIF")
		type RecordRELCIF newrelc = relcif.copy()
		do newrelc.setMode(0)
		set newrelc.cid = CID
		do newrelc.save()
		}
		
	// Collateral
	if newln.coll do {
		type DbSet lncolds = Db.selectDbSet("LNCOL", "CID = :ICID")
		while lncolds.next() do {
			type RecordLNCOL lncol = lncolds.getRecord("LNCOL")
			type RecordLNCOL newlncol = lncol.copy()
			do newlncol.setMode(0)
			set newlncol.cid = CID
			do newlncol.save("NOJOURNAL")
			}
		}
	
	// Statements
	if newln.smet do {
		type DbSet cmbstmds = Db.selectDbSet("CMBSTM", "ACN = :newln.acn AND CID = :ICID")
		while cmbstmds.next() do {
			type RecordCMBSTM cmbstm = cmbstmds.getRecord("CMBSTM")
			type RecordCMBSTM newcmbst = cmbstm.copy()
			do newcmbst.setMode(0)
			set newcmbst.cid = CID
			set newcmbst.sltd = ""
			set newcmbst.stpr = ""
			do newcmbst.save()
			}
		}

	/* If custom account assignment program used, call update section
	   to update any necessary tables.  Call will be constructed
	   as PGM=UPD^UCIDSCA("L","MTG",400,87438473), for example.
	*/
	#if CUVAR.UCID'=""
	set PGM="do UPD"_CUVAR.UCID_"(""L"","""_newln.grp_""","_newln.type_","_CID_")"
	#ACCEPT DATE=03/12/03;PGM=Dan Russell;CR=Shaun Gray
	xecute PGM
	#endif
	
	set oldln.relcid = CID
	do oldln.save()
	
	if $Tlevel do Runtime.commit()
	
	set %AMT = oldln.bal
	
	quit


PERM(RecordLN ln)	// Private - Convert Permanent to Deferred

	type public Boolean ER
	type public String ET

	type Number %AMT, CID, CTYPE, TYPE

	set %AMT = ln.bal
	set CID = ln.relcid
	if 'CID do { quit
		set ER = 1
		// Account is currently deferred
		set ET = "ACDEF"
		do ^UTLERR
		}
	
	type RecordLN relln = Db.getRecord("LN", "CID = :CID", 1)
	
	set TYPE = relln.type
	set CTYPE = ln.type
	
	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE = :TYPE", 1)
	
	if 'prodctl.defal do { quit
		set ER = 1
		// Permanent loan may not be deferred
		set ET = "MNBDEF"
		do ^UTLERR
		}

	if relln.idpf = 1 do {
		set relln.idpf = 3
		do relln.save()
		}

	quit
	

DEF(RecordLN ln)	// Private - Convert Deferred to Permanent

	type public Boolean ER
	type public String ET

	type Number %AMT, CID, CTYPE, TYPE

	set %AMT = ln.bal
	set CID = ln.relcid
	if 'CID do { quit
		set ER = 1
		// Account is currently permanent
		set ET = "ACPERM"
		do ^UTLERR
		}

	type RecordLN relln = Db.getRecord("LN", "CID = :CID", 1)
	
	set TYPE = relln.type
	set CTYPE = ln.type

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60250^17783^Tanuja Bhol^9283"	// Signature - LTD^TIME^USER^SIZE
