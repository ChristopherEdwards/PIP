LNLS2FL(RecordLNLS2 lnls2, String vpar, Boolean vparNorm) // LNLS2 - Loans Sold - Pool Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (41)             06/26/2006
	// Trigger Definition (5)                      07/13/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnls2.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnls2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnls2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String INCD = lnls2.incd
	type String PL = lnls2.pl

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("INCD").exists()!vx("PL").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNLS2",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNLS2","INCD = :lnls2.incd and PL = :lnls2.pl") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String INCD
	type public String PL

	type RecordLNLS2 lnls2 = Db.getRecord("LNLS2","INCD=:INCD,PL=:PL")
	if (%ProcessMode = 2) do {
		do lnls2.setMode(2)

		do LNLS2FL(lnls2,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNLS2 lnls2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNLS2","INCD = :lnls2.incd and PL = :lnls2.pl") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(lnls2,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(lnls2,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnls2)) S ^UTBL("INCD",vobj(lnls2,-3),vobj(lnls2,-4))=vobj(lnls2)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNLS2 lnls2

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(lnls2,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("INCD",vobj(lnls2,-3),vobj(lnls2,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNLS2 lnls2

	// Type local variables for access keys for defaults
	type public String INCD
	type public String PL

	if lnls2.forgrint.isNull() set lnls2.forgrint = 0      // forgrint
	if lnls2.ignadj.isNull() set lnls2.ignadj = 0          // ignadj
	if lnls2.pipf.isNull() set lnls2.pipf = 0              // pipf
	if lnls2.rdtf.isNull() set lnls2.rdtf = 0              // rdtf
	if lnls2.sff.isNull() set lnls2.sff = 0                // sff
	if lnls2.sfpf.isNull() set lnls2.sfpf = 0              // sfpf
	if lnls2.swap.isNull() set lnls2.swap = 0              // swap
	quit


vreqn // Validate required data items

	type public RecordLNLS2 lnls2

	if lnls2.efd.isNull() do vreqerr("EFD") quit
	if lnls2.forgrint.isNull() do vreqerr("FORGRINT") quit
	if lnls2.ignadj.isNull() do vreqerr("IGNADJ") quit
	if lnls2.picm.isNull() do vreqerr("PICM") quit
	if lnls2.pipf.isNull() do vreqerr("PIPF") quit
	if lnls2.rdtf.isNull() do vreqerr("RDTF") quit
	if lnls2.sff.isNull() do vreqerr("SFF") quit
	if lnls2.sfpf.isNull() do vreqerr("SFPF") quit
	if lnls2.swap.isNull() do vreqerr("SWAP") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNLS2 lnls2

	if lnls2.incd.isNull() do vreqerr("INCD") quit
	if lnls2.pl.isNull() do vreqerr("PL") quit

		if vx("EFD").exists(),lnls2.efd.isNull() do vreqerr("EFD") quit
		if vx("FORGRINT").exists(),lnls2.forgrint.isNull() do vreqerr("FORGRINT") quit
		if vx("IGNADJ").exists(),lnls2.ignadj.isNull() do vreqerr("IGNADJ") quit
		if vx("PICM").exists(),lnls2.picm.isNull() do vreqerr("PICM") quit
		if vx("PIPF").exists(),lnls2.pipf.isNull() do vreqerr("PIPF") quit
		if vx("RDTF").exists(),lnls2.rdtf.isNull() do vreqerr("RDTF") quit
		if vx("SFF").exists(),lnls2.sff.isNull() do vreqerr("SFF") quit
		if vx("SFPF").exists(),lnls2.sfpf.isNull() do vreqerr("SFPF") quit
		if vx("SWAP").exists(),lnls2.swap.isNull() do vreqerr("SWAP") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS2","MSG",1767,"LNLS2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNLS2 lnls2
	if 'lnls2.escwash.isNull() set vfkey("^ACN("_""""_lnls2.escwash_""""_","_50_")")="LNLS2(ESCWASH) -> DEP"
	if 'lnls2.incd.isNull() set vfkey("^UTBL("_"""INCD"""_","_""""_lnls2.incd_""""_")")="LNLS2(INCD) -> LNLS1"
	if 'lnls2.wash.isNull() set vfkey("^ACN("_""""_lnls2.wash_""""_","_50_")")="LNLS2(WASH) -> DEP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNLS2 lnls2
	type public Number %O
	type String vERRMSG

	if 'lnls2.escwash.isNull() if 'Db.isDefined("DEP",":lnls2.escwash") set vERRMSG = $$^MSG(8563,"LNLS2(ESCWASH) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("LNLS1",":lnls2.incd") set vERRMSG = $$^MSG(8563,"LNLS2(INCD) -> LNLS1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'lnls2.wash.isNull() if 'Db.isDefined("DEP",":lnls2.wash") set vERRMSG = $$^MSG(8563,"LNLS2(WASH) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("REMLD").exists()!vx("REMND").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNLS2 lnls2
	if vx("").order().isNull() do AUDIT^UCUTILN(lnls2,.vx(),1,"|") quit
	if vx("SFCM").exists()!vx("SFGL").exists()!vx("GSFEE").exists()!vx("PIPF").exists()!vx("WASH").exists()!vx("ESCWASH").exists()!vx("ESCWASH").exists()!vx("EFD").exists()!vx("IGNADJ").exists()!vx("REMFRE").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnls2,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert 

	type public RecordLNLS2 lnls2
	
	/*
	   ---------- Revision History ------------------------------------------

	   07/13/07 - SVS Kiran - CR26758
		      This trigger is to error check remittance last date and 
		      remittance next date.
	   	
	*/
	
	type public Boolean ER
		
	//Last remittance date is in the future
	if (lnls2.remld)&(lnls2.remld > %SystemDate) do Runtime.setErrMSG("LNLS2",4055) quit:ER
	
	//Remittance next date is in the past
	if (lnls2.remnd)&((lnls2.remnd < %SystemDate)!(lnls2.remnd < lnls2.remld)) do Runtime.setErrMSG("LNLS2",4060) quit:ER
	quit

vau1 // Trigger AU_REMDT - After Update REMLD,REMND

	type public RecordLNLS2 lnls2
	
	/*
	   ---------- Revision History ------------------------------------------

	   07/12/07 - SVS Kiran - CR26758
		      This trigger is to error check remittance last date and 
		      remittance next date.
	   	
	*/
	
	type public Boolean ER
		
	//Last remittance date is in the future
	if (lnls2.remld)&(lnls2.remld > %SystemDate) do Runtime.setErrMSG("LNLS2",4055) quit:ER
	
	//Remittance next date is in the past
	if (lnls2.remnd)&((lnls2.remnd < %SystemDate)!(lnls2.remnd < lnls2.remld)) do Runtime.setErrMSG("LNLS2",4060) quit:ER
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete of LNLS2

	type public RecordLNLS2 lnls2
	/*
	-----Revision History--------------------------------------------------
	10/21/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/


	/*
	Ensure that no accounts are linked, either in a posted or in a
	pending state, before authorizing delete.
	*/
	
	new CID,XINCD,XPL
	
	set XINCD=lnls2.incd
	set XPL=lnls2.pl
	
	// Check posted loan sale files
	
	new rs 
	type ResultSet rs=Db.select("CID","LNLS8","INCD=:XINCD AND PL=:XPL") 
	if rs.isEmpty() quit
	set CID=rs.next(),CID=rs.getCol(1)
	
	
	// If not found, check unposted loan sale files
	
	new rs 
	type ResultSet rs=Db.select("CID","LNLS4B","INCD=:XINCD AND PL=:XPL") 
	if CID="" do {
		if rs.isEmpty() quit
		set CID=rs.next()
		set CID=rs.getCol(1)
		}	
	
	/*	
	Cannot delete.  Accounts have already been sold or pending sales
	exist in designated investment pool.
	*/
	if CID'="" do Runtime.setErrMSG("LNLS2",1897) quit:ER 
	
	quit 
	

vbi1 // Trigger BEFORE_INSERT - Before Insert of LNLS2

	type public RecordLNLS2 lnls2
	; Revision History
	; 06/09/00 - ESTERLYP - 35504
 ;            Include linetag in call to PROLNLS2.	

	do PROLNLS^PROLNLS2(.lnls2)
	quit 

vbu1 // Trigger BU_LNLS2 - Before Update LNLS2

	type public RecordLNLS2 lnls2
	do lnls2.setAuditFlag(1)
	; Revision History
	; 06/09/00 - ESTERLYP - 35504 
	;            Add linetag to call to PROLNLS2.

	do PROLNLS^PROLNLS2(.lnls2)

	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNLS2 lnls2

	if lnls2.incd.length()>5 set vRM = $$^MSG(1076,5) do vdderr("INCD", vRM) quit
	if lnls2.pl.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PL", vRM) quit
	if lnls2.actgrp.length()>10 set vRM = $$^MSG(1076,10) do vdderr("ACTGRP", vRM) quit
	set X = lnls2.docshpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOCSHPDT", vRM) quit
	set X = lnls2.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = lnls2.escgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("ESCGL", vRM) quit
	set X = lnls2.escpp if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.ESCPP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls2.escwash if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ESCWASH", vRM) quit
	set X = lnls2.feep if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.FEEP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnls2.FORGRINT) set vRM=$$^MSG(742,"L") do vdderr("FORGRINT", vRM) quit
	set X = lnls2.frapio if 'X.isNull(),'Db.isDefined("STBLLSPCMFPI","X") set vRM = $$^MSG(1485,X) do vdderr("FRAPIO", vRM) quit
	set X = lnls2.frappo if 'X.isNull(),'Db.isDefined("STBLLSPCMFPP","X") set vRM = $$^MSG(1485,X) do vdderr("FRAPPO", vRM) quit
	set X = lnls2.ftxpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.FTXPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls2.gsfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.GSFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnls2.IGNADJ) set vRM=$$^MSG(742,"L") do vdderr("IGNADJ", vRM) quit
	set X = lnls2.igp if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("IGP", vRM) quit
	set X = lnls2.intgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("INTGL", vRM) quit
	set X = lnls2.issn if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("ISSN", vRM) quit
	set X = lnls2.ityp if 'X.isNull(),'Db.isDefined("STBLITYP","X") set vRM = $$^MSG(1485,X) do vdderr("ITYP", vRM) quit
	set X = lnls2.picm if 'X.isNull(),'Db.isDefined("STBLLSRCM","X") set vRM = $$^MSG(1485,X) do vdderr("PICM", vRM) quit
	if '("01"[lnls2.PIPF) set vRM=$$^MSG(742,"L") do vdderr("PIPF", vRM) quit
	set X = lnls2.pogd if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("POGD", vRM) quit
	set X = lnls2.pp if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,.01,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.PP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls2.premld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PREMLD", vRM) quit
	set X = lnls2.prgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("PRGL", vRM) quit
	set X = lnls2.priro if 'X.isNull(),'Db.isDefined("STBLLSPCMFIR","X") set vRM = $$^MSG(1485,X) do vdderr("PRIRO", vRM) quit
	set X = lnls2.prpro if 'X.isNull(),'Db.isDefined("STBLLSPCMFPR","X") set vRM = $$^MSG(1485,X) do vdderr("PRPRO", vRM) quit
	if '("01"[lnls2.RDTF) set vRM=$$^MSG(742,"L") do vdderr("RDTF", vRM) quit
	set X = lnls2.recp if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.RECP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls2.remfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNLS2]REMFRE",0) if 'vRM.get().isNull() do vdderr("REMFRE", vRM) quit
	set X = lnls2.remld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REMLD", vRM) quit
	set X = lnls2.remnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REMND", vRM) quit
	set X = lnls2.sfchgd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SFCHGD", vRM) quit
	set X = lnls2.sfcm if 'X.isNull(),'Db.isDefined("STBLLSFCM","X") set vRM = $$^MSG(1485,X) do vdderr("SFCM", vRM) quit
	if '("01"[lnls2.SFF) set vRM=$$^MSG(742,"L") do vdderr("SFF", vRM) quit
	set X = lnls2.sfgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SFGL", vRM) quit
	if '("01"[lnls2.SFPF) set vRM=$$^MSG(742,"L") do vdderr("SFPF", vRM) quit
	if lnls2.svn.length()>10 set vRM = $$^MSG(1076,10) do vdderr("SVN", vRM) quit
	if '("01"[lnls2.SWAP) set vRM=$$^MSG(742,"L") do vdderr("SWAP", vRM) quit
	set X = lnls2.wash if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("WASH", vRM) quit
	set X = lnls2.yield if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS2.YIELD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS2","MSG",979,"LNLS2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordLNLS2 lnls2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("INCD").exists() set vux("INCD") = vx("INCD")
	if vx("PL").exists() set vux("PL") = vx("PL")
	do vkey(1) set voldkey = lnls2.incd_","_lnls2.pl       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnls2.incd_","_lnls2.pl       // Copy new keys into object
	type RecordLNLS2 vnewrec = lnls2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNLS2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNLS2 lnls2

	if vux("INCD").exists() set lnls2.incd = vux("INCD").piece("|",i)
	if vux("PL").exists() set lnls2.pl = vux("PL").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordLNLS2 lnls2
	type public String vpar

	do Db.delete("LNLS3","INCD=:lnls2.incd AND PL=:lnls2.pl",vpar) // Cascade delete

	quit
