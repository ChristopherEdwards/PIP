DONORFL(RecordDEPDONOR depdonor, String vpar, Boolean vparNorm) // DEPDONOR - Risk Analysis - Linked Donor Accounts Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = depdonor.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(depdonor,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(depdonor,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = depdonor.cid
	type String DONACT = depdonor.donact

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("DONACT").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEPDONOR",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEPDONOR","CID = :depdonor.cid and DONACT = :depdonor.donact") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String DONACT

	type RecordDEPDONOR depdonor = Db.getRecord("DEPDONOR","CID=:CID,DONACT=:DONACT")
	if (%ProcessMode = 2) do {
		do depdonor.setMode(2)

		do DONORFL(depdonor,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEPDONOR depdonor

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEPDONOR","CID = :depdonor.cid and DONACT = :depdonor.donact") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(depdonor))  S ^ACN(vobj(depdonor,-3),120,vobj(depdonor,-4))=vobj(depdonor)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEPDONOR depdonor


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACN(vobj(depdonor,-3),120,vobj(depdonor,-4))      // Delete Record
	quit


vreqn // Validate required data items

	type public RecordDEPDONOR depdonor

	if depdonor.pri.isNull() do vreqerr("PRI") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEPDONOR depdonor

	if depdonor.cid.isNull() do vreqerr("CID") quit
	if depdonor.donact.isNull() do vreqerr("DONACT") quit

		if vx("PRI").exists(),depdonor.pri.isNull() do vreqerr("PRI") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPDONOR","MSG",1767,"DEPDONOR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert 

	type public RecordDEPDONOR depdonor
	/*
	Verify that donor account (DEPDONOR.DONACT) and recipient account
	(DEPDONOR.CID) have at least one common owner --
	SELECT ACN FROM RELACN WHERE CID=:CID / CID=:DONACT
	Also verify that the donor account is a donor account (ACN.RSKOPT=2)
	
	---- Revision History ------------------------------------------------

	09/09/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also modified this trigger
		   to conform to bring it in-line with current PSL standards.

	09/20/99 - CARROLLJ - 33890
		   Convert to PSL.
	
	10/22/98 - CARROLLJ - 49816:001
		   Select statment was selecting CLS instead of RSKOPT.
	
	*/
	
	type Public String ER
	
	type Boolean MFLG
	type Number ACND,ACNR,DATA3,DONACT,XCID
	
	set MFLG=0 
	set XCID=depdonor.cid 
	set DONACT=depdonor.donact
	
	// 11982 - Replaced RELACN with RELCIF
	type ResultSet rs1=Db.select("ACN","RELCIF","CID=:CID") quit:ER 
	if 'rs1.isEmpty() do {
		while rs1.next()!(MFLG) set ACNR=rs1.getCol(1)
	
		// 11982 - Replaced RELACN with RELCIF
		type ResultSet rs2=Db.select("ACN","RELCIF","CID=:DONACT") quit:ER 
		if rs2.isEmpty()
		while rs2.next()!(MFLG) do { 
			set ACND=rs2.getCol(1)
			if ACNR=ACND set MFLG=1
			}
		}
		
	// Donor and recipient accounts do not have the same owner
	if 'MFLG do Runtime.setErrMSG("DEPDONOR",3470) quit:ER 

	type ResultSet rs3=Db.select("RSKOPT","ACN","CID=:DONACT")
	if 'rs3.isEmpty() if rs3.next() set DATA3=rs3.getCol(1)
	
	// Account is not a donor account
	if DATA3'=2 do Runtime.setErrMSG("DEPDONOR",3471) quit:ER 
	
	quit

vau1 // Trigger AU_DONACT - After update donor account

	type public RecordDEPDONOR depdonor
	/*
	Verify that donor account (DEPDONOR.DONACT) and recipient account
	(DEPDONOR.CID) have at least one common owner --
	SELECT ACN FROM RELACN WHERE CID=:CID / CID=:DONACT
	Also verify that the donor account is a donor account (ACN.RSKOPT=2)
	
	---- Revision History ------------------------------------------------
	
	09/09/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also modified this trigger
		   to conform to bring it in-line with current PSL standards.	
	
	10/22/98 - CARROLLJ - 49816:001
		   Select statment was selecting CLS instead of RSKOPT.
	*/
	
	type Public String ER
	
	type Boolean MFLG
	type Number ACND,ACNR,DATA3,DONACT,XCID
	
	set MFLG=0 
	set XCID=depdonor.cid 
	set DONACT=depdonor.donact
	
	// 11982 - Replaced RELACN with RELCIF
	type ResultSet rs1=Db.select("ACN","RELCIF","CID=:CID") quit:ER 
	if 'rs1.isEmpty() do {
		while rs1.next()!(MFLG) set ACNR=rs1.getCol(1)
	
		// 11982 - Replaced RELACN with RELCIF
		type ResultSet rs2=Db.select("ACN","RELCIF","CID=:DONACT") quit:ER 
		if rs2.isEmpty()
		while rs2.next()!(MFLG) do { 
			set ACND=rs2.getCol(1)
			if ACNR=ACND set MFLG=1
			}
		}
		
	// Donor and recipient accounts do not have the same owner
	if 'MFLG do Runtime.setErrMSG("DEPDONOR",3470) quit:ER 

	type ResultSet rs3=Db.select("RSKOPT","ACN","CID=:DONACT")
	if 'rs3.isEmpty() if rs3.next() set DATA3=rs3.getCol(1)
	

	// Account is not a donor account
	if DATA3'=2 do Runtime.setErrMSG("DEPDONOR",3471) quit:ER 
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEPDONOR depdonor

	set X = depdonor.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = depdonor.donact if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("DONACT", vRM) quit
	set X = depdonor.pri if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PRI", vRM) quit
	set X = depdonor.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPDONOR","MSG",979,"DEPDONOR."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDEPDONOR depdonor

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("DONACT").exists() set vux("DONACT") = vx("DONACT")
	do vkey(1) set voldkey = depdonor.cid_","_depdonor.donact // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = depdonor.cid_","_depdonor.donact // Copy new keys into object
	type RecordDEPDONOR vnewrec = depdonor.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEPDONOR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" if vx("DONACT").exists() do vau1

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEPDONOR depdonor

	if vux("CID").exists() set depdonor.cid = vux("CID").piece("|",i)
	if vux("DONACT").exists() set depdonor.donact = vux("DONACT").piece("|",i)
	quit
