MCGRPFL(RecordUTBLMKCHKGRP utblmkchkgrp, String vpar, Boolean vparNorm) // UTBLMKCHKGRP - Maker-Checker Userclass Group Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              02/28/2006
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblmkchkgrp.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblmkchkgrp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblmkchkgrp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String GRP = utblmkchkgrp.grp
	type String UCLS = utblmkchkgrp.ucls

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("GRP").exists()!vx("UCLS").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLMKCHKGRP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLMKCHKGRP","GRP = :utblmkchkgrp.grp and UCLS = :utblmkchkgrp.ucls") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String GRP
	type public String UCLS

	type RecordUTBLMKCHKGRP utblmkchkgrp = Db.getRecord("UTBLMKCHKGRP","GRP=:GRP,UCLS=:UCLS")
	if (%ProcessMode = 2) do {
		do utblmkchkgrp.setMode(2)

		do MCGRPFL(utblmkchkgrp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLMKCHKGRP utblmkchkgrp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLMKCHKGRP","GRP = :utblmkchkgrp.grp and UCLS = :utblmkchkgrp.ucls") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblmkchkgrp,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblmkchkgrp,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblmkchkgrp))  S ^UTBL("MKCHKGRP",vobj(utblmkchkgrp,-3),vobj(utblmkchkgrp,-4))=vobj(utblmkchkgrp)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLMKCHKGRP utblmkchkgrp

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblmkchkgrp,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("MKCHKGRP",vobj(utblmkchkgrp,-3),vobj(utblmkchkgrp,-4)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLMKCHKGRP utblmkchkgrp

	// Type local variables for access keys for defaults
	type public String GRP
	type public String UCLS

	if utblmkchkgrp.exc.isNull() set utblmkchkgrp.exc = 0  // exc
	quit


vreqn // Validate required data items

	type public RecordUTBLMKCHKGRP utblmkchkgrp

	if utblmkchkgrp.exc.isNull() do vreqerr("EXC") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLMKCHKGRP utblmkchkgrp

	if utblmkchkgrp.grp.isNull() do vreqerr("GRP") quit
	if utblmkchkgrp.ucls.isNull() do vreqerr("UCLS") quit

		if vx("EXC").exists(),utblmkchkgrp.exc.isNull() do vreqerr("EXC") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMKCHKGRP","MSG",1767,"UTBLMKCHKGRP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert and Update Trigger

	do vau1

	quit

vau1 // Trigger AFTER_INSERT - After Insert and Update Trigger

	type public RecordUTBLMKCHKGRP utblmkchkgrp
	/*
	  ---- Revision History ------------------------------------------------

	  02/01/02 - SIGDAE - 48773
		Convert to PSL.

	 ----------------------------------------------------------------------
	*/

	new DATA,GRP,UCLS
	type ResultSet rs

	set GRP=utblmkchkgrp.grp
	set UCLS=utblmkchkgrp.ucls

	// Current entry exclusive, check for userclass in another group
	if utblmkchkgrp.exc set rs=Db.select("GRP","UTBLMKCHKGRP","UCLS = :UCLS AND GRP <> :GRP")

	/*
	 Current entry not exclusive, check if userclass in exclusive in
	 another group.
	*/
	if 'utblmkchkgrp.exc set rs=Db.select("GRP","UTBLMKCHKGRP","UCLS = :UCLS AND GRP <> :GRP AND EXC=1")

	if 'rs.isEmpty(),rs.next() set DATA=rs.getCol(1)
	else  set DATA=""

	// ~p1 already exists in group ~p2
	if DATA'="" do Runtime.setErrMSG("UTBLMKCHKGRP",3020,"UCLS~DATA") quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLMKCHKGRP utblmkchkgrp

	set X = utblmkchkgrp.grp if 'X.isNull(),'Db.isDefined("UTBLUCLSGRP","X") set vRM = $$^MSG(1485,X) do vdderr("GRP", vRM) quit
	set X = utblmkchkgrp.ucls if 'X.isNull(),'Db.isDefined("SCAU0","X") set vRM = $$^MSG(1485,X) do vdderr("UCLS", vRM) quit
	if '("01"[utblmkchkgrp.EXC) set vRM=$$^MSG(742,"L") do vdderr("EXC", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMKCHKGRP","MSG",979,"UTBLMKCHKGRP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLMKCHKGRP utblmkchkgrp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("GRP").exists() set vux("GRP") = vx("GRP")
	if vx("UCLS").exists() set vux("UCLS") = vx("UCLS")
	do vkey(1) set voldkey = utblmkchkgrp.grp_","_utblmkchkgrp.ucls // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblmkchkgrp.grp_","_utblmkchkgrp.ucls // Copy new keys into object
	type RecordUTBLMKCHKGRP vnewrec = utblmkchkgrp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLMKCHKGRP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLMKCHKGRP utblmkchkgrp

	if vux("GRP").exists() set utblmkchkgrp.grp = vux("GRP").piece("|",i)
	if vux("UCLS").exists() set utblmkchkgrp.ucls = vux("UCLS").piece("|",i)
	quit
