BCHLNFEE //Batch BCHLNFEEDE - Back-office Loan Fee Assessments
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNFEEDE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNFEEDE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNFEEDE") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNFEEDE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNFEEDE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(ASND,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNFEEDE","*","",ASND.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNFEEDE",ASND.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNFEEDE",ASND.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,ASND,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNFEEDE","*","",ASND.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNFEEDE",ASND.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,ASND,CID) //
	type Number CC, ER = 0
	type String CRCD, FEE, GLSC, OFFREC, OFFST(,,,)
	
	type RecordLN ln = Db.getRecord("LN", "CID = :CID", 1)
	
	do EXTERN(.ln) quit:ER
	
	set (CRCD,FEE,GLSC,CC) = ""
	for  set CRCD = OFFST(CRCD).order() quit:CRCD.isNull()  do {
		for  set FEE = OFFST(CRCD,FEE).order() quit:FEE.isNull()  do {
			for  set GLSC = OFFST(CRCD,FEE,GLSC).order() quit:GLSC.isNull()  do {
				for  set CC = OFFST(CRCD,FEE,GLSC,CC).order() quit:CC.isNull()  do {  

					set OFFREC = OFFST(CRCD,FEE,GLSC,CC)
					
					do SET
					}
				}
			}
		}
	
	quit
	
	
SET	// Build temporary table if this is the first time we deal with this set of parameters

	type public Number CC, TYPE
	type public String CRCD, FEE, GLSC, OFFREC, OFFST(,,,,)
	
	type Number CRAMT, DRAMT, GLCR, GLDR
	type String CRETC, DRETC

	if 'Db.isDefined("TMPBCHOFF","TJD,""BCHLNFEEDE"",JOB,""MFC"",CRCD,TYPE,GLSC,CC") do {

		set GLDR = OFFREC.piece("|",1)
		set DRETC = OFFREC.piece("|",2)
		set GLCR = OFFREC.piece("|",3)
		set CRETC = OFFREC.piece("|",4)
		
		do BDOFFSET^BCHSOURC("BCHLNFEEDE","MFC",CRCD,TYPE,GLSC,CC,GLDR,GLCR,DRETC,CRETC)
		}

	// Update the table with debits and credits
	set DRAMT = OFFST(CRCD,FEE,GLSC,CC,0).get()
	set CRAMT = OFFST(CRCD,FEE,GLSC,CC,1).get()
	
	if DRAMT do UPOFFSET^BCHSOURC("BCHLNFEEDE","MFC",CRCD,TYPE,GLSC,CC,0,DRAMT)
	if CRAMT do UPOFFSET^BCHSOURC("BCHLNFEEDE","MFC",CRCD,TYPE,GLSC,CC,1,CRAMT)
	
	quit
	
	
public	EXTERN(RecordLN ln,
	       RecordTTX ttxpri)
	
	// Process one account
	
	type public Boolean LNPTSRV = +LNPTSRV.get()
	type public Number CC, CID, ER, TYPE
	type public String %ZTSEQ, FEE, GLSC, OFFST(), RM
	
	type Date XTJD
	type Number BAL, CTL
	type String CHKRVFEE, CRCD
	
	if (ln.stat = 4) quit		// Closed account

	set ER = 0
	set (%EffectiveDate,XTJD) = %SystemDate
	set CTL = $select(LNPTSRV:110,1:111)
	set BAL = ln.bal
	set CC = ln.cc
	set CRCD = ln.crcd
	set GLSC = ln.glsc
	set TYPE = ln.type

	/* 
	  If the primary transaction is a reversal, we need to see if this is 
	  reversing a loan fee. If so, then we will flag it in the DAYEND
	  table. The fee will not be computed in the roll forward process.
	*/
	if LNPTSRV do {
		
		if (ttxpri.efd > %SystemDate) quit
		
		if (ttxpri.itc6 + ttxpri.itc12) = 0 quit

		set CHKRVFEE = $$FIELD^UTSO(ttxpri.tso,"LNFEE").piece(":",1)
		
		if CHKRVFEE.isNull() set CHKRVFEE = $$FIELD^UTSO(ttxpri.tso,"LNFEEIN").piece(":",1)

		if CHKRVFEE.isNull() quit

		type RecordDAYENDLNFEEC daylnfeec = Db.getRecord("DAYENDLNFEEC", "ASND = :%SystemDate, CID = :CID, FEETYP = :CHKRVFEE", 1)
		
		set daylnfeec.reversed = 1
			
		do daylnfeec.bypassSave()
		}

	// Find fees to calculate, except the ones that were reversed previously
	type ResultSet rs = Db.select("FEETYP","DAYENDLNFEEC","ASND=:XTJD AND CID=:CID AND REVERSED=0")
	
	while rs.next() do {
		
		set FEE = rs.getCol("FEETYP")
		
		type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP = :FEE", 1)
		
		// Calculate and assess fees
		if 'lnfeep.lfee do CALC^LNFEEU(.ln,.ttxpri,CID,FEE,.OFFST(),CTL) if ER do EXC quit
	
		do BUMPCND(.lnfeep) quit:ER
		}

	if ER do { quit
		
		type Number ER
		
		// If called externally
		if LNPTSRV kill OFFST
		
		type ResultSet rs1 = Db.select("FEETYP","DAYENDLNFEEC","ASND=:XTJD AND CID=:CID AND REVERSED=0")
		
		while rs1.next() do {
			
			set FEE = rs1.getCol("FEETYP")
			
			type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP = :FEE", 1)
			
			set ER = 0
			
			do BUMPCND(.lnfeep)
			
			if ER do EXC
			}
		}

	quit

	
BUMPCND(RecordLNFEEP lnfeep)	// Bump next calc/assessment date
	
	type public Number CID, ER
	type public String FEE
	
	type Date NJD
	
	if lnfeep.cfre.isNull() set NJD = ""	
	else  set NJD = %SystemDate.nextFreqDate(lnfeep.cfre) quit:ER	

	type RecordLNFEE lnfee = Db.getRecord("LNFEE", "CID = :CID, FEETYP = :FEE", 1)
	
	set lnfee.asld = %SystemDate
	set lnfee.asnd = NJD
	
	do lnfee.bypassSave()
	
	if NJD.isNull() quit
	
	// Set an entry for next assessment date in DAYEND table
	type RecordDAYENDLNFEEC daylnfeec = Db.getRecord("DAYENDLNFEEC", "ASND = :NJD, CID = :CID, FEETYP = :FEE", 1)
		
	if daylnfeec.getMode() quit
	
	set daylnfeec.reversed = 0

	do daylnfeec.bypassSave()

	quit
	
	
EXC	// Log error to DAYEND

	type public Number BAL, CID, ER
	type public String %ZTSEQ, FEE, RM	

	set RM = FEE_" - "_RM.get()
	
	do LOG^UTLEXC($T(+0),"*","",CID,%ZTSEQ.get(),RM.get(),+BAL)
	
	set ER = 0

	quit
	

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,ASND,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set ASND=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(ASND,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,ASND,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Date TPD, XTJD
	type public Number BRCD, ER
	type public String RM

        set ER = 0
	set TPD = %SystemDate

        do SOURCE^BCHSOURC("MFC","ALL",.%UserID,.BRCD,.%UserClass)
        
        // Batch teller and/or branch not defined
        if ER set RM = $$^MSG(7484),%BatchExit = 1 do EXC quit

	// TTX file locked by another user - job aborted
	do ^TTXLOK if ER set RM = "TTXLOK",%BatchExit = 1 do EXC quit

	set XTJD = %SystemDate
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("DISTINCT ASND,CID","DAYENDLNFEEC","DAYENDLNFEEC.ASND=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Boolean %ODP
	type public Date TPD
	type public Number BRCD, JOB

	set TPD = %SystemDate

        do SOURCE^BCHSOURC("MFC","ALL",.%UserID,.BRCD,.%UserClass,,,.%ODP)  
	
	set JOB = %ProcessID

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public Date TPD
	type public Number BRCD
	
	do OFFSET^TTXBLD(TPD,BRCD,%UserID,"BCHLNFEEDE")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
