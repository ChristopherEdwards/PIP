LNAMOFL(RecordLNAMOAO lnamoao, String vpar, Boolean vparNorm) // LNAMOAO - Loan Amortized Add-On (Node70) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (38)             11/22/2003
	// Trigger Definition (2)                      02/21/2006
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnamoao.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnamoao,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnamoao,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnamoao.cid
	type String TYP = lnamoao.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNAMOAO",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNAMOAO","CID = :lnamoao.cid and TYP = :lnamoao.typ") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP

	type RecordLNAMOAO lnamoao = Db.getRecord("LNAMOAO","CID=:CID,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do lnamoao.setMode(2)

		do LNAMOFL(lnamoao,vpar)
	}
	else  do VINDEX(lnamoao)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNAMOAO lnamoao

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNAMOAO","CID = :lnamoao.cid and TYP = :lnamoao.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnamoao))  S ^ACN(vobj(lnamoao,-3),70,vobj(lnamoao,-4))=vobj(lnamoao)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnamoao)             // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lnamoao) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNAMOAO lnamoao

	if vpar["/INDEX/" do VINDEX(.lnamoao)                  // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lnamoao)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACN(vobj(lnamoao,-3),70,vobj(lnamoao,-4))         // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNAMOAO lnamoao

	// Type local variables for access keys for defaults
	type public String CID
	type public String TYP

	if lnamoao.apr.isNull() set lnamoao.apr = 0            // apr
	if lnamoao.pbal.isNull() set lnamoao.pbal = 100        // pbal
	if lnamoao.rcm.isNull() set lnamoao.rcm = 0            // rcm
	quit


vreqn // Validate required data items

	type public RecordLNAMOAO lnamoao

	if lnamoao.apr.isNull() do vreqerr("APR") quit
	if lnamoao.rcm.isNull() do vreqerr("RCM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNAMOAO lnamoao

	if lnamoao.cid.isNull() do vreqerr("CID") quit
	if lnamoao.typ.isNull() do vreqerr("TYP") quit

		if vx("APR").exists(),lnamoao.apr.isNull() do vreqerr("APR") quit
		if vx("RCM").exists(),lnamoao.rcm.isNull() do vreqerr("RCM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAMOAO","MSG",1767,"LNAMOAO."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNAMOAO lnamoao
	if 'lnamoao.cid.isNull() set vfkey("^ACN("_""""_lnamoao.cid_""""_","_50_")")="LNAMOAO(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNAMOAO lnamoao
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnamoao.cid") set vERRMSG = $$^MSG(8563,"LNAMOAO(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert LNAMOAO

	type public RecordLNAMOAO lnamoao
	/*
	---------- Revision History ------------------------------------------
	
	01/21/06 - MBUIM - 19700
	   	   Replaced column aoamo.count with column aoamo.cnt. COUNT 
	   	   is an oracle reserve word and was process issues 
	   	   e.g error returned in DBSLOAD when running function 
	   	   @DDPXFR – manual transfers to FEPS
	   	      
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
	
	05/24/00 - MOTENJ - 40196
	             Changed the condition checking syntax of %ProcessMode to the
																					correct form(if %ProcessMode'=).


	09/13/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	type public Boolean ER
	type public Number CID
	type public String LNLS2ARY(),TYP
	type Boolean add
	type Date NJD
	type Number ops,percsold
	type String data,INCD,lnls2,PL
	
	type RecordLN ln=Db.getRecord("LN","CID")
	
	// Create/Modify mode
	if %ProcessMode=0 do {                
		
		// Update loan credit limit for insurance premiums
		if lnamoao.pdby do {
			
			type RecordSTBLIPDBY stblipdby=Db.getRecord("STBLIPDBY","KEY=:lnamoao.pdby",1)
			set add=stblipdby.add
			
			if 'add.get() quit
			
			type RecordLN lnupdate=Db.getRecord("LN","CID=:lnamoao.cid",1)
			set lnupdate.crlmt=lnupdate.crlmt+lnamoao.amt
			do lnupdate.save()
			}
			
		type RecordLN lnflags=Db.getRecord("LN","CID=:lnamoao.cid",1)
		
		// Update flags in loan record
		if lnamoao.typ="ID" set lnflags.dip=1
		if lnamoao.typ="IL" set lnflags.lip=1
		if lnamoao.typ="IH" set lnflags.hip=1
		if lnamoao.typ="DLD" set lnflags.dlrp=1
		if lnamoao.typ="PTS" set lnflags.ptsp=1
		if lnamoao.typ="MSC" set lnflags.mscp=1
		do lnflags.save()
		
		// Update Dealer/Ins/Def Fee User Table COUNT
		if ((lnamoao.typ).extract()'="I"),(lnamoao.typ'="PTS") do { quit:ER 
					
			//  Missing required data item ~p1
			if lnamoao.payee.isNull() do Runtime.setErrMSG("LNAMOAO",1767,"PAYEE") quit:ER 
			if lnamoao.plan.isNull() do Runtime.setErrMSG("LNAMOAO",1767,"PLAN") quit:ER 
						
			type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lnamoao.typ,PAYEE=:lnamoao.payee,PLAN=:lnamoao.plan",1)
			set aoamo.cnt=aoamo.cnt+1
			do aoamo.save()
			
				
			// Insert Dayend Loan Add-On/ net Deferred Fees
			if ln.odt set NJD=ln.odt
			else  set NJD=(%SystemDate).nextFreqDate(lnamoao.freq,,"00001") quit:ER 
			
			if lnamoao.nxadt>NJD set NJD=(lnamoao.nxadt).nextFreqDate(lnamoao.freq,,"00001") quit:ER 
			
			type RecordDAYENDAOAMO daoamo=Class.new("RecordDAYENDAOAMO") 
			set daoamo.nxadt=NJD
			set daoamo.typ=lnamoao.typ
			set daoamo.payee=lnamoao.payee
			set daoamo.plan=lnamoao.plan
			set daoamo.cid=lnamoao.cid
			do daoamo.save()
			
			if lnamoao.nxadt'=NJD do {
				type RecordDAYENDAOAMO daoamo=Class.new("RecordDAYENDAOAMO") 
				set daoamo.nxadt=lnamoao.nxadt
				set daoamo.typ=lnamoao.typ
				set daoamo.payee=lnamoao.payee
				set daoamo.plan=lnamoao.plan
				set daoamo.cid=lnamoao.cid
				set daoamo.ncd=NJD
				do daoamo.save()
				}	
			}
		}
	
	// Remaining only occurs if in VerifyMode
	if %ProcessMode'=2 quit 
	
	// Verify Dealer Discount and Misc Add-on Information
	if lnamoao.typ="DLD"!(TYP="MSC") do {
		if lnamoao.cntr'<lnamoao.term quit 
		if lnamoao.caltd,+lnamoao.caltd=+lnamoao.amt quit 
		if ln.stat'=4 quit 
		
		// Closed Account with Non-Performing Fee Balance
		if lnamoao.npda'=0 do Runtime.setErrXBAD("LNAMOAO",94) quit:ER 
	
		// Closed Account with Deferred Fee Balance
		if lnamoao.amt-lnamoao.caltd-lnamoao.npda do Runtime.setErrXBAD("LNAMOAO",93) quit:ER 
		}
	
	// Verify Capitalized Points
	if lnamoao.typ="PTS" do { quit:ER 
	
		if +lnamoao.caltd=+lnamoao.amt,lnamoao.cntr'<lnamoao.term quit 
		
		// If the loan is sold, verify percentage information
		if Db.isDefined("LNLS6","ln.cid,1") do { quit:ER  quit:percsold=100 

			set percsold=0
		
			type ResultSet rs=Db.select("INCD,PL,OPS","LNLS6,LNLS6B","CID=:lnamoao.cid") quit:ER 
			if rs.isEmpty() quit
			while rs.next() do { 
				set INCD=rs.getCol(1) 
				set PL=rs.getCol(2) 
				set ops=rs.getCol(3)
				if 'LNLS2ARY("LNLS2",INCD,PL).data() do {
						
				type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:INCD,PL=:PL",1)
				set data=lnls2.pp_$C(9)_lnls2.picm
							
				set LNLS2ARY("LNLS2",INCD,PL)=data
				}
				
				set lnls2=LNLS2ARY("LNLS2",INCD,PL)
				// LNLS2.PICM
				if lnls2.piece($C(9),2)=6 set percsold=percsold+ops
				// LNLS2.PP
				else  set percsold=percsold+ lnls2.piece($C(9),1)
				}
			// 100% Sold Loan has Deferred Fee Balance
			if percsold<100,lnamoao.caltd'=lnamoao.amt do Runtime.setErrXBAD("LNAMOAO",111) quit:ER 
			}
	
		if lnamoao.cntr'<lnamoao.term quit 
		if +lnamoao.caltd=+lnamoao.amt quit 

		// NEXT POINTS CYCLING DATE in the Past
		if lnamoao.nxadt,lnamoao.nxadt<%SystemDate do Runtime.setErrXBAD("LNAMOAO",84,"NXADT",lnamoao.nxadt) quit:ER 
		if 'lnamoao.rate do { quit:ER 
			type String data,ZPAYEE,ZPLAN,typ              
			
			set typ="PTS" set ZPAYEE=lnamoao.payee 
			set ZPLAN=lnamoao.plan       
			
			if 'LNLS2ARY("FMET","PTS",ZPAYEE,ZPLAN).data() do {
				type RecordAOAMO aoamopts=Db.getRecord("AOAMO","TYP='PTS',PAYEE=:ZPAYEE,PLAN=:ZPLAN",1)
				set data=aoamopts.fmet	
				set LNLS2ARY("FMET","PTS",ZPAYEE,ZPLAN)=data.get()
				}
				
			// NET INVESTMENT YIELD Inconsistent with Interest Method
			if LNLS2ARY("FMET","PTS",ZPAYEE,ZPLAN)=0 do Runtime.setErrXBAD("LNAMOAO",92) quit:ER 
			}
	
		// Check that recalculation frequency is supported
		if 'lnamoao.ryfre.isNull(),lnamoao.rynd do { quit:ER 
			// Next Yield Recalc Date in the Past
			if lnamoao.rynd<%SystemDate do Runtime.setErrXBAD("LNAMOAO",108,"RYND",lnamoao.rynd) quit:ER 
			}
		}
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert LNAMOAO.

	type public RecordLNAMOAO lnamoao
	/*
	---------- Revision History ------------------------------------------
	
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
	
	12/30/03 - CARROLLJ - CR7658
		   Added #ACCEPT prior xecute command.
	*/ 
	
 	type public Boolean ER
 	type public Number amt,CID
 	type Date ENDDT,NJD
	type Number NP
	type String params(),STOP
	
	type RecordLN ln=Db.getRecord("LN","CID")
	
	// Calculate insurance premium if not already calculated
	if (lnamoao.typ).extract()="I",'lnamoao.amt do { quit:ER 
	
		if lnamoao.typ.isNull()!lnamoao.payee.isNull()!lnamoao.plan.isNull() quit
				
		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lnamoao.typ,PAYEE=:lnamoao.payee,PLAN=:lnamoao.plan",1)
		
		if 'aoamo.getMode() quit
			
		if aoamo.cmet.isNull() quit 

		type RecordLNINS lnins=Db.getRecord("LNINS","TYPE=:lnamoao.typ,PAYEE=:lnamoao.payee,PLAN=:aoamo.cmet",1)
				
		if lnins.ppgm.isNull() quit 
		
		/*
		Program must be extrinsic function that returns amt
		Function parameters are TJD and params list
		*/
		
		if (lnins.ppgm)'?1"$$".E1"^".E quit 
		
		set params("AMTREQ")=ln.amtreq
		set params("TRM")=ln.trm
		set params("DIST1FRE")=ln.dist1fre
		set params("ODD")=ln.odd
		set params("DIST1ND")=ln.dist1nd
		set params("IRN")=ln.irn

		type RecordCIF cif=Db.getRecord("CIF","ACN=:ln.acn",1)
		set params("DOB")=cif.dob
		
		set params("PAYEE")=lnamoao.payee
		set params("PLAN")=lnamoao.plan
	
		#ACCEPT DATE=12/30/03;PGM=John Carroll
		
		xecute "S amt="_lnins.ppgm_"("_%SystemDate_",.params)"
		
		if amt.get() set lnamoao.amt=amt

		}
	
	// set defaults if the fields have not been provided

	type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lnamoao.typ,PAYEE=:lnamoao.payee,PLAN=:lnamoao.plan",1)
	if 'aoamo.getMode() quit	

	type RecordLN lnset=Db.getRecord("LN","CID=:lnamoao.cid")
		
	set lnamoao.caltd=0
	set lnamoao.cntr=0
	if lnamoao.freq.isNull() set lnamoao.freq=aoamo.fre
	if lnamoao.freq.isNull() set lnamoao.freq=lnset.dist1fre
	if 'lnamoao.rate.isNull(),aoamo.met'="ACT" set lnamoao.rate=""
	if lnamoao.rate.isNull(),aoamo.met="ACT" set lnamoao.rate=lnset.irn
	if 'lnamoao.apr set lnamoao.apr=aoamo.apr
	if 'lnamoao.rcm set lnamoao.rcm=aoamo.rcm
	if 'lnamoao.dcp set lnamoao.dcp=aoamo.dcp
	
	if (lnamoao.typ).extract()="I" set lnamoao.nxadt=""
	else  if lnamoao.nxadt.isNull() do {
		set NJD=(lnset.odt).nextFreqDate(lnamoao.freq) quit:ER
		set lnamoao.nxadt=NJD
		}
		
	if lnamoao.typ="DLD" do {
		if lnamoao.drcp.isNull() set lnamoao.drcp=aoamo.drcp
		if lnamoao.drcdd.isNull() set lnamoao.drcdd=aoamo.drcdd
		}
	
	if lnamoao.itrm.isNull() set lnamoao.itrm=lnset.trm if lnamoao.itrm.isNull() quit 
	if ((lnamoao.itrm).length()-(+lnamoao.itrm).length())=1 set lnamoao.itrm=lnamoao.itrm_"A"
	
	// ~p1
	set NJD=(lnset.odd).nextFreqDate(lnamoao.itrm) if ER.get() do Runtime.setErrMSG("LNAMOAO",3333,"RM") quit:ER 
	set ENDDT=NJD 
	set STOP=""
	
	for NP=0:1 set NJD=(lnset.odd).nextFreqDate(lnamoao.freq) quit:ER  do { quit:STOP 
		if NJD'<ENDDT set STOP=1 quit 
		set lnset.odd=NJD
		
		do lnset.save()
		}
			
	if ER.get() quit 
	
	set lnamoao.term=NP
	
	quit
	
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNAMOAO lnamoao

	set X = lnamoao.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if lnamoao.typ.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TYP", vRM) quit
	set X = lnamoao.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnamoao.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
	set X = lnamoao.cacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.CACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.caltd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.CALTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.cbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.CBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.cipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.CIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.cntr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CNTR", vRM) quit
	if lnamoao.cnum.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CNUM", vRM) quit
	set X = lnamoao.cseq if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CSEQ", vRM) quit
	set X = lnamoao.dcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.DCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnamoao.drc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DRC", vRM) quit
	set X = lnamoao.drcdd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DRCDD", vRM) quit
	set X = lnamoao.drcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.DRCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAMOAO]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	set X = lnamoao.iamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.IAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.irla if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.IRLA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnamoao.itrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ITRM", vRM) quit
	set X = lnamoao.lsadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSADT", vRM) quit
	set X = lnamoao.mben if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.MBEN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.npda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.NPDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.nsip if 'X.isNull(),'Db.isDefined("STBLNSIP","X") set vRM = $$^MSG(1485,X) do vdderr("NSIP", vRM) quit
	set X = lnamoao.nxadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NXADT", vRM) quit
	set X = lnamoao.nyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.NYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.oipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.OIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnamoao.payee.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYEE", vRM) quit
	set X = lnamoao.pbal if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.PBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.pdby if 'X.isNull(),'Db.isDefined("STBLIPDBY","X") set vRM = $$^MSG(1485,X) do vdderr("PDBY", vRM) quit
	if lnamoao.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = lnamoao.ramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.RAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnamoao.RCM) set vRM=$$^MSG(742,"L") do vdderr("RCM", vRM) quit
	set X = lnamoao.reb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAMOAO.REB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnamoao.ryfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAMOAO]RYFRE",0) if 'vRM.get().isNull() do vdderr("RYFRE", vRM) quit
	set X = lnamoao.ryld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYLD", vRM) quit
	set X = lnamoao.rynd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYND", vRM) quit
	set X = lnamoao.term if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("TERM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAMOAO","MSG",979,"LNAMOAO."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNAMOAO lnamoao)	//LNAMOAO Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.lnamoao)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj1(.lnamoao)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}

	quit


vj1(RecordLNAMOAO lnamoao)	// HIST_INSERT  Table HIST  History for creation of new record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnamoao.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$LNAMOJRN^LNFUNCS(lnamoao.typ,lnamoao.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNAMOAO lnamoao) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("RYND").exists() do vi1(.lnamoao)
		if vx("PAYEE").exists()!vx("PLAN").exists() do vi2(.lnamoao)
	}
	do vi1(.lnamoao)
	do vi2(.lnamoao)

	quit
	

vi1(RecordLNAMOAO lnamoao) // Maintain DYNFRYLD index entries (Recalc Net Investment Yield)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lnamoao.rynd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lnamoao.cid
	type String v4 = lnamoao.typ

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^ACN(vobj(lnamoao,-3),70,vobj(lnamoao,-4)))#2,'$D(^DAYEND(v1,"NFRYLD",v3,v4)) do vidxerr("DYNFRYLD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"NFRYLD",v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("RYND").exists() set v1=vx("RYND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"NFRYLD",v3,v4)
	quit

vi2(RecordLNAMOAO lnamoao) // Maintain LNXAMO index entries (Payee, Plan, CID X-Ref)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lnamoao.typ
	type String v3 = lnamoao.payee
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = lnamoao.plan
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lnamoao.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^ACN(vobj(lnamoao,-3),70,vobj(lnamoao,-4)))#2,'$D(^XREF("LNAMO",v2,v3,v4,v5)) do vidxerr("LNXAMO")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("LNAMO",v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PAYEE").exists() set v3=vx("PAYEE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v4=vx("PLAN").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("LNAMO",v2,v3,v4,v5)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNAMOAO")

	while ds.next() do {
		type RecordLNAMOAO lnamoao=ds.getRecord("LNAMOAO")
		if vlist.contains("VINDEX") do VINDEX(.lnamoao) quit
		if vlist.contains("DYNFRYLD") do vi1(.lnamoao)
		if vlist.contains("LNXAMO") do vi2(.lnamoao)
	}

	quit


public VIDXBLD1(RecordLNAMOAO lnamoao, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lnamoao) quit
	if vlist.contains("DYNFRYLD") do vi1(.lnamoao)
	if vlist.contains("LNXAMO") do vi2(.lnamoao)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNAMOAO","MSG",1225,"LNAMOAO."_di)

	quit


vkchged // Access key changed

	type public RecordLNAMOAO lnamoao

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = lnamoao.cid_","_lnamoao.typ   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnamoao.cid_","_lnamoao.typ   // Copy new keys into object
	type RecordLNAMOAO vnewrec = lnamoao.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNAMOAO",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNAMOAO lnamoao

	if vux("CID").exists() set lnamoao.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set lnamoao.typ = vux("TYP").piece("|",i)
	quit

VIDXPGM()	quit "LNAMOFL"	// Location of index program

