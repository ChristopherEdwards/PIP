BCHLNAMO //Batch BCHLNAMOAO - Dayend Processing for Addons and Dealers
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNAMOAO Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHLNAMOAO",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(NXADT,TYP,PAYEE,PLAN,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNAMOAO","*","",NXADT.get()_","_TYP.get()_","_PAYEE.get()_","_PLAN.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,NXADT,TYP,PAYEE,PLAN,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNAMOAO","*","",NXADT.get()_","_TYP.get()_","_PAYEE.get()_","_PLAN.get()_","_CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,NXADT,TYP,PAYEE,PLAN,CID) //
	// Variabls being passed in from vPROC:  NXADT,TYP,PAYEE,PLAN,CID

	set (ER,RM)=""
	
	if TYP="PTS" quit  // patch SPG 7/9/98
	
	set CURRPLAN=TYP_"|"_PAYEE_"|"_PLAN
	
	if CURRPLAN'=LASTPLAN do { if ER quit

		new aoamo
		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP,PAYEE,PLAN")
	
		if aoamo.dtran="" set ER=1,RM=$$^MSG(3825) quit
		if aoamo.dgl="" set ER=1,RM=$$^MSG(3824) quit
		if aoamo.ctran="" set ER=1,RM=$$^MSG(3825) quit
		if aoamo.cgl="" set ER=1,RM=$$^MSG(3824) quit
	
		set DTC=aoamo.dtran
		set DGL=aoamo.dgl
		set GLD=aoamo.gld
		set CTC=aoamo.ctran
		set CGL=aoamo.cgl
		set GLC=aoamo.glc
	
		set MET=aoamo.met
		set DBF=+aoamo.decline
	 	set DESC=$$DAT^%ZM(EFD,$G(%MSKD))_" "_TYP_" "_PAYEE
		set RCM=aoamo.rcm
		set VFR=aoamo.vfrate
	
		if '$D(TRN(DTC)) do {
			new trn
			type RecordTRN trn=Db.getRecord("TRN","DTC")
			set TRN(DTC)=trn.itc
			}
	
		set DITC=TRN(DTC) do TR(.DITC)
	
		if '$D(TRN(CTC)) do {
			new trn
			type RecordTRN trn=Db.getRecord("TRN","CTC")
			set TRN(CTC)=trn.itc
			}
	
		set CITC=TRN(CTC) do TR(.CITC)
	 	}
 
	set LASTPLAN=CURRPLAN
	
	do CID
	
	quit 
	


CID	// Process single account

	type public Boolean ER,RCM
	type public Number CID
	type public String RM,TYP

	type Number IRO,PMTPI
	type String TYPE1

	type RecordLN ln = Db.getRecord("LN","CID=:CID")
	
	set TYPE1 = TYP.extract(1)
	
	/*
	 Dealer items with RCM = 1 need to cycle one last time
	 after the account is closed so that any interest included
	 in the payoff amount can be evaluated for remittance to
	 the dealer.
	*/
	if (ln.stat = 4),'((TYPE1 = "D")&(RCM = 1)) quit
	
	set ER=0,RM=""

	set PMTPI = ln.pmtpi
	set IRO = ln.iro 	
		
	if TYPE1 = "M" do PROCMSC(.ln)
	if TYPE1 = "I" do PROCINS(.ln)
	if TYPE1 = "D" do PROCDLD(.ln)
	
	quit
		
PROCMSC(RecordLN ln)

	type RecordLNCYCMSC lncyc=Db.getRecord("LNCYCMSC","CID=:CID,TYP=:TYP",1)

	if lncyc.getMode()=0 quit	// Record does not exist
	if lncyc.nxadt'=EFD quit	// Restart Logic - Account already cycled	
	if lncyc.cntr=lncyc.term quit	// Fully Amortized 	 
	
	kill AF,CALC
	
	new NR,SKIP
	set AOC=lncyc.cntr
	set AOT=lncyc.term
	set AOTD=lncyc.caltd
	set AO=lncyc.amt
	
	set AOI=lncyc.rate 
	if AOI="" set AOI=+ln.irn
	
	set FRE=lncyc.freq
	if FRE="" set FRE=ln.dist1fre
	
	set NR=AOT-AOC
	set SKIP=1			// Current Month's Rebate

	if AO<0 set NEG=1,AO=-AO
	else  set NEG=0
	
	if 'AOI&((MET=1)!(RCM>0)) set ER=1,RM=$$^MSG(3827) quit
	
	set AOB=AO-AOTD 		// AOB=amort balance (what is left) 
	
	set NJD=$$NJD^UFRE(lncyc.nxadt,FRE,.AF)
	if ER set RM=$$^MSG(3817) quit
	
	set %AMT=0

	if 'RCM do {
		do START^LNCYCMET(.ln,MET)
		if ER set ER=1,RM=$$^MSG(3818)
		}
		
	else  do RCM(ln.ipl,lncyc.cipl,lncyc.dcp,lncyc.pbal) quit:ER
	
	if NEG set %AMT=-%AMT
	
	set CC=ln.cc
	set CRCD=ln.crcd
	set KEY=PAYEE_","_PLAN
	
	set lncyc.caltd=AOTD+%AMT		// DJH 02/22/00
	set lncyc.oipl=lncyc.cipl		// DJH 02/22/00
	set lncyc.cipl=ln.ipl
	set lncyc.cacr=ln.acr
	set lncyc.cbal=ln.bal
	set lncyc.cseq=Db.nextVal("HIST","CID")

	if 'RCM!(%AMT'=0) do {	
		set lncyc.lsadt=lncyc.nxadt
		set lncyc.cntr=lncyc.cntr+1
		set lncyc.ramt=%AMT
		}
	
	set lncyc.nxadt=NJD

	new dayendaoamo
	type RecordDAYENDAOAMO dayendaoamo
	set dayendaoamo=Db.getRecord("DAYENDAOAMO","NXADT,TYP,PAYEE,PLAN,CID")
	
	if dayendaoamo.ncd'="" set lncyc.nxadt=dayendaoamo.ncd
	
	do lncyc.bypassSave()
	
	do PROCOFF(lncyc.nxadt)
	quit


PROCINS(RecordLN ln)

	type RecordLNCYCINS lncyc=Db.getRecord("LNCYCINS","CID=:CID,TYP=:TYP",1)

	if lncyc.getMode()=0 quit	// Record does not exist
	if lncyc.nxadt'=EFD quit	// Restart Logic - Account already cycled	
	if lncyc.cntr=lncyc.term quit	// Fully Amortized 	 
	
	kill AF,CALC
	
	new NR,SKIP
	set AOC=lncyc.cntr
	set AOT=lncyc.term
	set AOTD=lncyc.caltd
	set AO=lncyc.amt
	
	set AOI=lncyc.rate 
	if AOI="" set AOI=+ln.irn
	
	set FRE=lncyc.freq
	if FRE="" set FRE=ln.dist1fre
	
	set NR=AOT-AOC
	set SKIP=1			// Current Month's Rebate

	if AO<0 set NEG=1,AO=-AO
	else  set NEG=0
	
	if 'AOI&((MET=1)!(RCM>0)) set ER=1,RM=$$^MSG(3827) quit
	
	set AOB=AO-AOTD 		// AOB=amort balance (what is left) 
	
	set NJD=$$NJD^UFRE(lncyc.nxadt,FRE,.AF)
	if ER set RM=$$^MSG(3817) quit
	
	set %AMT=0

	if 'RCM do {
		do START^LNCYCMET(.ln,MET)
		if ER set ER=1,RM=$$^MSG(3818)
		}

	else  do RCM(ln.ipl,lncyc.cipl,lncyc.dcp,lncyc.pbal) quit:ER
	
	if NEG set %AMT=-%AMT
	
	set CC=ln.cc
	set CRCD=ln.crcd
	set KEY=PAYEE_","_PLAN
	
	set lncyc.caltd=AOTD+%AMT		// DJH 02/22/00
	set lncyc.oipl=lncyc.cipl		// DJH 02/22/00
	set lncyc.cipl=ln.ipl
	set lncyc.cacr=ln.acr
	set lncyc.cbal=ln.bal
	set lncyc.cseq=Db.nextVal("HIST","CID")

	if 'RCM!(%AMT'=0) do {	
		set lncyc.lsadt=lncyc.nxadt
		set lncyc.cntr=lncyc.cntr+1
		set lncyc.ramt=%AMT
		}
	
	set lncyc.nxadt=NJD

	new dayendaoamo
	type RecordDAYENDAOAMO dayendaoamo
	set dayendaoamo=Db.getRecord("DAYENDAOAMO","NXADT,TYP,PAYEE,PLAN,CID")
	
	if dayendaoamo.ncd'="" set lncyc.nxadt=dayendaoamo.ncd
	
	do lncyc.bypassSave()
	
	do PROCOFF(lncyc.nxadt)
	quit


PROCDLD(RecordLN ln)

	type RecordLNCYCDLD lncyc=Db.getRecord("LNCYCDLD","CID=:CID,TYP=:TYP",1)

	if lncyc.getMode()=0 quit	// Record does not exist
	if lncyc.nxadt'=EFD quit	// Restart Logic - Account already cycled	
	if lncyc.cntr=lncyc.term quit	// Fully Amortized 	 
	
	kill AF,CALC
	
	new NR,SKIP
	set AOC=lncyc.cntr
	set AOT=lncyc.term
	set AOTD=lncyc.caltd
	set AO=lncyc.amt
	
	set AOI=lncyc.rate 
	if AOI="" set AOI=+ln.irn
	
	set FRE=lncyc.freq
	if FRE="" set FRE=ln.dist1fre
	
	set NR=AOT-AOC
	set SKIP=1			// Current Month's Rebate

	if AO<0 set NEG=1,AO=-AO
	else  set NEG=0
	
	if 'AOI&((MET=1)!(RCM>0)) set ER=1,RM=$$^MSG(3827) quit
	
	set AOB=AO-AOTD 		// AOB=amort balance (what is left) 
	
	set NJD=$$NJD^UFRE(lncyc.nxadt,FRE,.AF)
	if ER set RM=$$^MSG(3817) quit
	
	set %AMT=0

	if 'RCM do {
		do START^LNCYCMET(.ln,MET)
		if ER set ER=1,RM=$$^MSG(3818)
		}

	else  do RCM(ln.ipl,lncyc.cipl,lncyc.dcp,lncyc.pbal) quit:ER
	
	// If loan is closed and no amount is left to be remitted when
	// RCM=1, quit and don't bump the next cycle date.
	if (%AMT = 0),(RCM = 1),(ln.stat = 4) quit
	
	if NEG set %AMT=-%AMT
	
	set CC=ln.cc
	set CRCD=ln.crcd
	set KEY=PAYEE_","_PLAN
	
	set lncyc.caltd=AOTD+%AMT
	set lncyc.oipl=lncyc.cipl
	set lncyc.cipl=ln.ipl
	set lncyc.cacr=ln.acr
	set lncyc.cbal=ln.bal
	set lncyc.cseq=Db.nextVal("HIST","CID")

	if 'RCM!(%AMT'=0) do {	
		set lncyc.lsadt=lncyc.nxadt
		set lncyc.cntr=lncyc.cntr+1
		set lncyc.ramt=%AMT
		}
	
	set lncyc.nxadt=NJD

	type RecordDAYENDAOAMO dayendaoamo = Db.getRecord("DAYENDAOAMO","NXADT,TYP,PAYEE,PLAN,CID")
	
	if dayendaoamo.ncd'="" set lncyc.nxadt=dayendaoamo.ncd
	
	do lncyc.bypassSave()
	
	do PROCOFF(lncyc.nxadt)
	quit


PROCOFF(NXADT)
	
	type RecordDAYENDAOAMO newaoamo=Class.new("RecordDAYENDAOAMO")
	set newaoamo.nxadt=NXADT
	set newaoamo.typ=TYP
	set newaoamo.payee=PAYEE
	set newaoamo.plan=PLAN
	set newaoamo.cid=CID
	set newaoamo.ncd=""
	do newaoamo.bypassSave()

	if %AMT>-.005,%AMT<.005 do { quit
		if 'NEG,'RCM set ER=1,RM=$$^MSG(3819) do LOGERR
		if NEG,'RCM set ER=1,RM=$$^MSG(3819) do LOGERR
		}
	
	if GLD do {
		set PTYPE="TOT"
		if '$D(TOT(CRCD,TYP,KEY,CC)) do TOTINI set TOT(CRCD,TYP,KEY,CC)=""
	
		new tmpbch
		type RecordTMPBCHOFF tmpbch
		set tmpbch=Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=:PTYPE,CRCD=:CRCD,TYPE=:TYP,GLSC=:KEY,CC=:CC")		// DJH 02/22/00

		set tmpbch.debit=tmpbch.debit+%AMT
		do tmpbch.bypassSave()
		}
	
	else  do {
		set PTYPE="TOTD"
		if '$D(TOTD(CRCD,TYP,KEY,CC)) do TOTINI set TOTD(CRCD,TYP,KEY,CC)=""
	
		new tmpbch
		type RecordTMPBCHOFF tmpbch
		set tmpbch=Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=:PTYPE,CRCD=:CRCD,TYPE=:TYP,GLSC=:KEY,CC=:CC")

		set tmpbch.debit=tmpbch.debit+%AMT
		do tmpbch.bypassSave()
		}
	
	if GLC do {
		set PTYPE="TOT"
		if '$D(TOT(CRCD,TYP,KEY,CC)) do TOTINI set TOT(CRCD,TYP,KEY,CC)=""
	
		new tmpbch
		type RecordTMPBCHOFF tmpbch
		set tmpbch=Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=:PTYPE,CRCD=:CRCD,TYPE=:TYP,GLSC=:KEY,CC=:CC")		// DJH 02/22/00

		set tmpbch.credit=tmpbch.credit+%AMT
		do tmpbch.bypassSave()
		}
	
	else  do {
		set PTYPE="TOTD"
		if '$D(TOTD(CRCD,TYP,KEY,CC)) do TOTINI set TOTD(CRCD,TYP,KEY,CC)=""
	
		new tmpbch
		type RecordTMPBCHOFF tmpbch
		set tmpbch=Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=:PTYPE,CRCD=:CRCD,TYPE=:TYP,GLSC=:KEY,CC=:CC")

		set tmpbch.credit=tmpbch.credit+%AMT
		do tmpbch.bypassSave()
		}
	quit
	
	
TR(X)	// Setting the PMing indicator

 
	if TPD-%SystemDate set X=$E(X,1,7)_$E("0000000",1,7-$L(X))_1_$E(X,9,99)
	quit
	


TOTINI	// Initialize TOT (G/L)
	// TYPE ~p1  PAYEE~p2  PLAN~p3  CC~p4
 
	new tmpbch 
	type RecordTMPBCHOFF tmpbch=Class.new("RecordTMPBCHOFF")
	
	set tmpbch.tjd=%SystemDate
	set tmpbch.bchid=BCHID
	set tmpbch.job=JOB
	set tmpbch.desc=PTYPE
	set tmpbch.crcd=CRCD
	set tmpbch.type=TYP
	set tmpbch.glsc=KEY
	set tmpbch.cc=CC
	set tmpbch.debit=0
	set tmpbch.credit=0
	set tmpbch.gldr=DGL			// DJH 02/22/00
	set tmpbch.glcr=CGL			// DJH 02/22/00
	set tmpbch.gldretc=DTC
	set tmpbch.glcretc=CTC
	set tmpbch.tcmt=$$^MSG(3826,TYP,PAYEE,PLAN,CC)
	
	do tmpbch.bypassSave()
	
	quit
	


ZT	// Mumps error - continue
	// Error in account, not processed

 
	set RM=$$^MSG(3511)
	do ZTLOG
	quit
	


ZTEXIT	// Mumps error - exit
	// Error in job, no posting done

 
	set RM=$$^MSG(3820)
	do ZTLOG
	quit
 


ZTLOG	// Log Mumps error

 
	set %ZTHALT=0 do ZE^UTLERR 		//Log MUMPS error
	do LOGERR
	quit
 


LOGERR	// Log error in exception file
	// Add-on Item Posting
	
	new acn
	type RecordACN acn
	set acn=Db.getRecord("ACN","CID") 
	set BAL=acn.bal

	do LOG^UTLEXC($T(+0),"*",$$^MSG(7063)_"|1",$G(CID),$G(%ZTSEQ),$G(ET),$S($G(CID):BAL,1:""))
	kill RM,%ZTSEQ
	quit
 


RCM(IPL,CIPL,DCP,PBAL)	// Remittance as collected 


	type RecordACN acn
	set acn=Db.getRecord("ACN","CID")
	set %AMT=IPL-CIPL

	I '$L(DCP) set ER=1,RM=$$^MSG(3822) quit
	I 'PBAL set ER=1,RM=$$^MSG(3821) quit
	set %AMT=+$$^SCARND((%AMT*DCP/AOI*PBAL)/100,0,CID)
	quit
 

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,NXADT,TYP,PAYEE,PLAN,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set NXADT=vRECORD.piece($C(9),1)
 set TYP=vRECORD.piece($C(9),2)
 set PAYEE=vRECORD.piece($C(9),3)
 set PLAN=vRECORD.piece($C(9),4)
 set CID=vRECORD.piece($C(9),5)
 do vPROC(NXADT,TYP,PAYEE,PLAN,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,NXADT,TYP,PAYEE,PLAN,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+47>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set XTJD=%SystemDate

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("NXADT,TYP,PAYEE,PLAN,CID","DAYENDAOAMO","DAYENDAOAMO.NXADT=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("AOAMO","ALL",.%UserID,.BRCD,.%UserClass)
	
	set TPD=""
	if Db.isDefined("TPCTRL","BRCD,%UserID,TJD") do {
		new tpctrl
		type RecordTPCTRL tpctrl
		set tpctrl=Db.getRecord("TPCTRL","BRCD,%UserID,TJD")
		if tpctrl.pmdate'="" set TPD=tpctrl.pmdate
		}
	
	if TPD="" set TPD=%SystemDate
	set EFD=%SystemDate

	set (LASTPLAN,CURRPLAN)=""
	set BCHID="LNAMOAO"
	set JOB=%ProcessID
	 

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("AOAMO","ALL",.%UserID,.BRCD,.%UserClass)

	if BRCD="" set ER=1,RM=$$^MSG(3823) quit
	if %UserID="" set ER=1,RM=$$^MSG(3816) quit
	if %UserClass="" set ER=1,RM=$$^MSG(3815) quit

	set TPD=""
	if Db.isDefined("TPCTRL","BRCD,%UserID,TJD") do {
		new tpctrl
		type RecordTPCTRL tpctrl
		set tpctrl=Db.getRecord("TPCTRL","BRCD,%UserID,TJD")
		if tpctrl.pmdate'="" set TPD=tpctrl.pmdate
		}
	
	if TPD="" set TPD=%SystemDate
	do ^TTXLOK if ER quit

	set BCHID="LNAMOAO"
	
	quit
	

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	/*
        SPG / DJH 02/22/00
        Added all of the following code to SCHEXIT section in order to retrieve
        deposit account offsets from TMPBCHOFF under the description TOTD and
        then build transactions for posting.  All regular GL offsets are filed
        under the description TOT, which will be posted via the call to
        OFFSET^TTXBLD.
        */

	set par("IPMODE")=3     // System generated
        set par("OPTION")=2     // Process transactions; update database

	new rs,DESC
        set DESC="TOTD"
	type ResultSet rs=Db.select("JOB,CRCD,TYPE,GLSC,CC","TMPBCHOFF","TJD=:TJD AND BCHID=:BCHID AND DESC=:DESC")

	if rs.isEmpty() do OFFSET^TTXBLD(TPD,BRCD,%UserID,BCHID) quit

	while rs.next() do {
                new tmpbchoff,ts
                type TranSet ts=Class.new("TranSet")
                set JOB=rs.getCol(1)
                set CRCD=rs.getCol(2)
                set TYPE=rs.getCol(3)
                set GLSC=rs.getCol(4)
                set CC=rs.getCol(5)

		type RecordTMPBCHOFF tmpbchoff=Db.getRecord("TMPBCHOFF","%SystemDate,BCHID,JOB,DESC,CRCD,TYPE,GLSC,CC")

		new DEBIT,CREDIT,GLDR,GLCR,GLDRETC,GLCRETC,TSO,TCMT,CID,ETC,TAMT,SAVCRCD,SAVTYPE,SAVGLSC,SAVCC

		set GLDR=tmpbchoff.gldr
                set GLCR=tmpbchoff.glcr
                set GLDRETC=tmpbchoff.gldretc
                set GLCRETC=tmpbchoff.glcretc
                set TSO=tmpbchoff.tso
                set TCMT=tmpbchoff.tcmt
 
                set DEBIT=tmpbchoff.debit
                if DEBIT set TAMT=DEBIT,CID=GLDR,ETC=GLDRETC do SETTR(.ts)
 
                set CREDIT=tmpbchoff.credit
                if CREDIT set TAMT=CREDIT,CID=GLCR,ETC=GLCRETC do SETTR(.ts)

		set SAVCRCD=CRCD
                set SAVTYPE=TYPE
                set SAVGLSC=GLSC
                set SAVCC=CC
 
                do ts.postTSet(TPD,BRCD,.par)
 
                set CRCD=SAVCRCD
                set TYPE=SAVTYPE
                set GLSC=SAVGLSC
                set CC=SAVCC

		do Db.delete("TMPBCHOFF","TJD=:TJD AND BCHID=:BCHID AND JOB=:JOB AND DESC=:DESC AND CRCD=:CRCD AND TYPE=:TYPE AND GLSC=:GLSC AND CC=:CC")
		}

	do OFFSET^TTXBLD(TPD,BRCD,%UserID,BCHID)
	
	quit
 
SETTR(TranSet ts)	// Build transactions for deposit account offsets
 
        new ttx
        type RecordTTX ttx=Class.new("RecordTTX")
	Type RecordTRN trn=Db.getRecord("TRN","ETC")
 
        set ttx.cid=CID
        set ttx.etc=ETC
	set ttx.itc=trn.itc
        set ttx.tamt=TAMT
        set ttx.tso=TSO
        set ttx.tcmt=TCMT
        set ttx.crcd=CRCD
 
        set x=ts.copyTran(ttx)
 
        quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
