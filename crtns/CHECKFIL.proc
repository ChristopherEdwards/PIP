CHECKFIL(RecordCHECK check, String vpar, Boolean vparNorm) // CHECK - Issued Check File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              11/22/2003
	// Trigger Definition (2)                      05/05/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = check.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(check,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(check,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CHKS = check.chks
	type String CHKNUM = check.chknum

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CHKS").exists()!vx("CHKNUM").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CHECK",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CHECK","CHKS = :check.chks and CHKNUM = :check.chknum") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CHKS
	type public String CHKNUM

	type RecordCHECK check = Db.getRecord("CHECK","CHKS=:CHKS,CHKNUM=:CHKNUM")
	if (%ProcessMode = 2) do {
		do check.setMode(2)

		do CHECKFIL(check,vpar)
	}
	else  do VINDEX(check)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCHECK check

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CHECK","CHKS = :check.chks and CHKNUM = :check.chknum") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(check))  S ^CHECK(vobj(check,-3),vobj(check,-4))=vobj(check)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.check) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCHECK check

	if vpar["/INDEX/" do VINDEX(.check)                    // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CHECK(vobj(check,-3),vobj(check,-4))              // Delete Record
	quit


vreqn // Validate required data items

	type public RecordCHECK check

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCHECK check

	if check.chks.isNull() do vreqerr("CHKS") quit
	if check.chknum.isNull() do vreqerr("CHKNUM") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CHECK","MSG",1767,"CHECK."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After  Insert trigger

	type public RecordCHECK check
	/*

	---- Revision History---------------------------------------------------
	
	06/21/01 - HALPINJ - 45666
		   Removed code that was inserting an entry in XCHECK.
		   This needs to be handled in PFW.  XCHECK should only have 1
		   entry with a range of checks.  When the insert was in the 
		   filer there was an entry in XCHECK for each entry in CHECK.

	04/10/01 - Terrie Dougherty - 42228
		   Modified to allow allocation of checks in PFW.

	09/07/99 - CARROLLJ - 33890
		   Convert to PSL.

	04/08/99 - Terrie Dougherty - 31782
		   Modified to allow a split range of checks to be allocated.
	
	*/

	new DATA,HI,X,XBRCD,XCHKS,XHIGH,XNAME,XNO,XTJD,XUID

	set XCHKS=check.chks
	set XNO=check.chknum
	set XBRCD=check.brcd
	set XTJD=%SystemDate
	set XUID=%UserID
	
	/*
	Update CHKALLOC file to show that these checks have been allocated.  This is
	done for all inserts (including void and inserts)
	*/
	
	new rs 
	type ResultSet rs=Db.select("LOW,HIGH","CHKALLOC","BRCD=:XBRCD AND TYPE=:XCHKS AND LOW<=:XNO AND HIGH>=:XNO","HIGH DESC") 
	if rs.isEmpty() do Runtime.setErrMSG("CHECK",8698,XBRCD) quit:ER
	set XHIGH=rs.next()
	set XLOW=rs.getCol(1)
	set XHIGH=rs.getCol(2)

	// No checks are allocated for the branch in the range of this check number
	if $G(XHIGH)="" do Runtime.setErrMSG("CHECK",8698,XBRCD) quit:ER 
	if XLOW'=XNO do {
		set HI=$$CHKPRV^CHKNUTL(XNO)
		do Db.insert("CHKALLOC","BRCD,TYPE,HIGH,LOW,ISSD,UID",":XBRCD,:XCHKS,:HI,:XLOW,:XTJD,:XUID")
		}
	set XNO=$$CHKNXT^CHKNUTL(XNO,1)
	if $G(XNO)="" do Runtime.setErrMSG("CHECK",8698,XBRCD) quit:ER 
	if $E(XNO,3,12)>$E(XHIGH,3,12) do Db.delete("CHKALLOC","BRCD=:XBRCD AND TYPE=:CHKS AND HIGH=:XHIGH") quit 
	do Db.update("CHKALLOC","LOW=:XNO","BRCD=:XBRCD AND TYPE=:XCHKS AND HIGH=:XHIGH")
	quit 

vbi1 // Trigger BEFORE_INSERT - Before insert of CHECK

	type public RecordCHECK check
	/*
		
	--- Revision History ---------------------------------------------------

	05/03/01 - GOLATOS - 44336
		   Modified to set default check status of
		   16(Issued -Inactive) when check status is null or 11 and	
		   DEP.CHKACTF (check activation) is true. If check status is 
		   null and DEP.CHKACTF is false, default status is 11.


	*/

	new MSG,XCID

	set MSG=$$^MSG(7094)                   //Check
	set XCID=check.cid
	if XCID,'$$EUROCHK^CHKPROC(check.cid) do Runtime.setErrMSG("CHECK",69,"MSG") quit:ER 
	
	// invalid check number
	if check.chknum'?2U7N do Runtime.setErrMSG("CHECK",1277) quit:ER 
	
	// invalid check number
	if +$E(check.chknum,3,9)=0 do Runtime.setErrMSG("CHECK",1277) quit:ER 
	if 'XCID quit 

	new DATA
	set DATA=Db.getOneRow("CHKS,STAT,BOO,CHKACTF","DEP","XCID")
	if $P(DATA,$C(9),1)="" do Runtime.setErrMSG("CHECK",8708) quit:ER 
	if $P(DATA,$C(9),2)=4 do Runtime.setErrMSG("CHECK",55) quit:ER 
	
	if check.chksts="",$P(DATA,$C(9),4)=0 set check.chksts=11	//SMG
	if check.chksts="",$P(DATA,$C(9),4)=1 set check.chksts=16	//SMG
	if check.chksts=11,$P(DATA,$C(9),4)=1 set check.chksts=16	//SMG
	if check.brcd="" set check.brcd=$P(DATA,$C(9),3)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCHECK check

	set X = check.chks if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKS", vRM) quit
	if check.chknum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CHKNUM", vRM) quit
	set X = check.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = check.brcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCD", vRM) quit
	set X = check.chksts if 'X.isNull(),'Db.isDefined("STBLCHKSTS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKSTS", vRM) quit
	set X = check.cid if 'X.isNull(),'Db.isDefined("DEP","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = check.issd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISSD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CHECK","MSG",979,"CHECK."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordCHECK check) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("ISSD").exists()!vx("CID").exists() do vi1(.check)
	}
	do vi1(.check)

	quit
	

vi1(RecordCHECK check) // Maintain ISSDCID index entries (Date of Issue/Account Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = check.issd
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = check.cid
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = check.chks
	type String v5 = check.chknum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^CHECK(vobj(check,-3),vobj(check,-4)))#2,'$D(^XCHECK("ISSDCID",v2,v3,v4,v5)) do vidxerr("ISSDCID")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XCHECK("ISSDCID",v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ISSD").exists() set v2=vx("ISSD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("CID").exists() set v3=vx("CID").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XCHECK("ISSDCID",v2,v3,v4,v5)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CHECK")

	while ds.next() do {
		type RecordCHECK check=ds.getRecord("CHECK")
		if vlist.contains("VINDEX") do VINDEX(.check) quit
		if vlist.contains("ISSDCID") do vi1(.check)
	}

	quit


public VIDXBLD1(RecordCHECK check, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.check) quit
	if vlist.contains("ISSDCID") do vi1(.check)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CHECK","MSG",1225,"CHECK."_di)

	quit


vkchged // Access key changed

	type public RecordCHECK check

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CHKS").exists() set vux("CHKS") = vx("CHKS")
	if vx("CHKNUM").exists() set vux("CHKNUM") = vx("CHKNUM")
	do vkey(1) set voldkey = check.chks_","_check.chknum   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = check.chks_","_check.chknum   // Copy new keys into object
	type RecordCHECK vnewrec = check.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CHECK",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCHECK check

	if vux("CHKS").exists() set check.chks = vux("CHKS").piece("|",i)
	if vux("CHKNUM").exists() set check.chknum = vux("CHKNUM").piece("|",i)
	quit

VIDXPGM()	quit "CHECKFIL"	// Location of index program

