LNEABPD	//; Create Escrow Analysis Plan Defaults
	/*
	       ORIG:  Chuck Hardy (6721) - 8/29/88

	  ---- Revision History ------------------------------------------------

	   09/20/06 - KELLYP - CR 23207
	   	      Modified the LOAD section to prevent a compilation error
	   	      that occurred when OPTIMIZE FUNCTIONS OFF.  Removed pre-
	   	      2003 revision history.

	   11/18/05 - Srinivar - CR 16890
	  	      Modified the section LOAD to include the code rs.next()
	  	      before loading the loan and escrow related datas .This 
	  	      way it will avoid the undefined error.

	   12/09/03 - CARROLLJ - CR7239
		      Added #ACCEPT prior to xecute command to correct compile
		      errors.

	   09/25/03 - CARROLLJ - 51630
		      Modified LOAD section to remove toArray.

	*/

	quit

public LN
	/*
	  This section is called from ^LNEAB1 to determine loan default data.
	  Load loan data from LED and PLAN arrays that were built by calling
	  LOAD section earlier on.
	*/

	new P,S
	set S=""
	for  set S=$O(LED(0,S)) quit:S=""  do {
		set P=LED(0,S)
		new N,QT
		set N=""
		set QT=0
 		for  set N=$O(LED(0,S,N)) quit:N=""  do { quit:QT
			#ACCEPT DATE=12/09/03;PGM=John Carroll
			if 1 xecute LED(0,S,N) else  set QT=1 quit
			}
		if 'QT do OVRPLN
		}
	quit

OVRPLN	// Overlay loan data items with those stored in the PLAN array

	if $P(PLAN(P),"|",3)'="" set AFLG=$P(PLAN(P),"|",3)
	if $P(PLAN(P),"|",4)'="" set SDIS=$P(PLAN(P),"|",4)
	if $P(PLAN(P),"|",5)'="" set ODIS=$P(PLAN(P),"|",5)
	if $P(PLAN(P),"|",6)'="" set ELMET=$P(PLAN(P),"|",6)
	if $P(PLAN(P),"|",7)'="" set ETAC=$P(PLAN(P),"|",7)
	if $P(PLAN(P),"|",8)'="" set PROF=$P(PLAN(P),"|",8)
	if $P(PLAN(P),"|",9)'="" set ODM=$P(PLAN(P),"|",9)
	if $P(PLAN(P),"|",10)'="" set MTT=$P(PLAN(P),"|",10)
	if $P(PLAN(P),"|",11)'="" set CONCAL=$P(PLAN(P),"|",11)
	if $P(PLAN(P),"|",12)'="" set ROPT=$P(PLAN(P),"|",12)
	quit

public LOAD	
	/*
	 Load the loan and escrow default data into the global arrays:
		LED(LESC,SEQ)=PLAN
		LED(LESC,SEQ,Q(n))=Query
		PLAN(PLAN)=LNESCP record where PLAN=:PLAN
	*/
	new LESC,N,Q,SEQ

	// Create PLAN array for use in OVRPLN section later
	type ResultSet rs=Db.select("DESC,LESC,AFLG,SDIS,ODIS,ELMET,ETAC,PROF,ODM,MTT,CONCAL,ROPT","LNESCP")
	if rs.next() do {
		type String DESC
		type String ROW
		set ROW = rs.getRow().toString()
		set DESC = ROW.piece($C(9),1)
		set ROW = ROW.piece($C(9),2,12)
		set ROW = ROW.translate($C(9),"|")
		set PLAN(DESC) = ROW
		}

	type ResultSet lnescpsrs=Db.select("SEQ","LNESCPS","ANOFF=:ANOFF")
	if 'lnescpsrs.isEmpty() while lnescpsrs.next() do {
		set SEQ=lnescpsrs.getCol(1)
		type ResultSet lnescpqrs=Db.select("LESC","LNESCPQ","ANOFF=:ANOFF AND SEQ=:SEQ")
		if 'lnescpqrs.isEmpty() while lnescpqrs.next() do {
			set LESC=lnescpqrs.getCol(1)
			type RecordLNESCPS lnescps=Db.getRecord("LNESCPS","ANOFF=:ANOFF,SEQ=:SEQ")
			set PLAN=lnescps.plan
			set LED(LESC,SEQ)=PLAN
			type ResultSet lnesqrs=Db.select("Q","LNESCPQ","ANOFF=:ANOFF AND SEQ=:SEQ AND LESC=:LESC")
			if 'lnesqrs.isEmpty() while lnesqrs.next() do {
				set Q=lnesqrs.getCol(1)
				type RecordLNESCPQ lnescpq=Db.getRecord("LNESCPQ","ANOFF=:ANOFF,SEQ=:SEQ,LESC=:LESC,Q=:Q")
				set LED(LESC,SEQ,Q)=lnescpq.query
				}
			}
		}
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60528^47713^Pat Kelly^3092"	// Signature - LTD^TIME^USER^SIZE
