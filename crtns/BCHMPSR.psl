BCHMPSR //Batch BCHMPSREC - Create MPS records
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHMPSREC Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHMPSREC")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHMPSREC") quit
 do JOBMGR^BCHUTL(%FN,"BCHMPSREC",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHMPSREC")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CO,CARDTYP,ACN) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHMPSREC","*","",CO.get()_","_CARDTYP.get()_","_ACN.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHMPSREC",CO.get()_","_CARDTYP.get()_","_ACN.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHMPSREC",CO.get()_","_CARDTYP.get()_","_ACN.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CO,CARDTYP,ACN)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHMPSREC","*","",CO.get()_","_CARDTYP.get()_","_ACN.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHMPSREC",CO.get()_","_CARDTYP.get()_","_ACN.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CO,CARDTYP,ACN) //
	
	type public Boolean ER
	type public String crdlnk(),RELCODE,UTBLMPS()
	type Boolean DL
	type Date ordt,ORDT
	type Number CID,orderby,precard,primacn,ROLE
	type String ACNRELC,atm,prepin,type
	
	
	set ER=0
	
	if 'UTBLMPS(CO,CARDTYP).exists() do INIT

	type RecordACN acn()
	type ResultSet rs=Db.select("CID,ORDT,ORDERBY","MPSTMP","CO=:CO AND CARDTYP=:CARDTYP AND ACN=:ACN")

	if rs.isEmpty() quit
	while rs.next() do {
		set CID=rs.getCol("CID")
		set ordt=rs.getCol("ORDT")
		set ORDT=ordt
		set orderby=rs.getCol("ORDERBY")
		
		set acn(CID)=Db.getRecord("ACN","CID=:CID",1)

		set primacn=acn(CID).acn
		set type=acn(CID).type
		set prepin=acn(CID).prepin
		set precard=acn(CID).precard
		set ACNRELC=acn(CID).acnrelc 

		type ResultSet relacn=Db.select("ROLE,ACN","RELCIF","CID=:CID")
		if relacn.isEmpty() quit
		while relacn.next() do {

			// Do not issue card for joint accounts
			if ACNRELC="B",primacn'=ACN,'UTBLMPS(CO,CARDTYP,type).piece("|",3),'crdlnk("").query().isNull() quit
			
			set ROLE=relacn.getCol("ROLE")
			set ACN=relacn.getCol("ACN")

			//checking if customer is directly liable for the account
			type RecordRELCODE relcode=Db.getRecord("RELCODE","REL=:ACNRELC,ROLE=:ROLE",1)
			set DL=relcode.dl
			
			type RecordRELCIF relcif=Db.getRecord("RELCIF","ACN=:ACN,CID=:CID",1)
			set atm=relcif.atm
						
			if atm.isNull() do {
				
				type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1)
				set atm=cif.atm
				}
				
			// If not prohibited from ATM use, issue card for seconadry CIF

			if 'crdlnk("").query().isNull() do {	
				if DL,atm'=9 set crdlnk(ACN,orderby,CID)=ordt
				}
			else  do {
				if DL,atm'=9 set crdlnk(ACN,orderby,CID)=ordt_"|"_prepin_"|"_precard
				}

			}
		}

	// Link accounts to card groups
	
 	do MAIN^MPSLNK(CO,CARDTYP,.acn(),.crdlnk)

	quit


	//---------------------------------------------------------------------
EXC	// Log error to DAYEND
	//---------------------------------------------------------------------
	
	type public Number CID,%ZTSEQ
	type public String %FN,RM
	type String DESC
	
	type RecordSCATBL scatbl=Db.getRecord("SCATBL","FN=:%FN",1)
	if scatbl.getMode() set DESC=scatbl.desc
	
	do LOG^UTLEXC(%RoutineName,"*",DESC,CID.get(),%ZTSEQ.get(),RM.get())
	
	kill RM,%ZTSEQ
	quit


	//---------------------------------------------------------------------
MPSTMP(XTJD,reccnt)	// Build MPSTMP (Called from OPEN)
	//---------------------------------------------------------------------
	
	type public Date ord,ordt
	type String CARDTYP,CO
	type Number TYP,cid,off,opt,jnt

	set reccnt=0
	do Db.fastDelete("MPSTMP")

	type ResultSet rs=Db.select("CO,CARDTYP,TYP,FNDOPT,OFST,MPSJNTCRD,ORDERBY","UTBLMPSPROD")

	while rs.next() do {
		set CO=rs.getCol("CO")
		set CARDTYP=rs.getCol("CARDTYP")
		set TYP=rs.getCol("TYP")
		set opt=rs.getCol("FNDOPT")
		set off=rs.getCol("OFST")
		set jnt=rs.getCol("MPSJNTCRD")
		set ord=rs.getCol("ORDERBY") if 'ord set ord=1

		set ordt=XTJD+off

		if opt do {

			type ResultSet rs=Db.select("CID","DAYENDFNDT","FDT=:XTJD AND TYP=:TYP")

			if rs.isEmpty() quit
			while rs.next() do {
				set cid=rs.getCol("CID")
				do mpstmp(cid)
				}
			}	 

		else  do {

			type ResultSet rs=Db.select("CID","DTJNA","TJD=:XTJD AND CLS NOT='*' AND TYP=:TYP")

			if rs.isEmpty() quit
			while rs.next() do {
				set cid=rs.getCol("CID")
				do mpstmp(cid)
				}
			}
		}

	quit
	

	//---------------------------------------------------------------------
INIT	// Build UTBLMPS Array
	//---------------------------------------------------------------------
	type public Date ord
	type public Number jnt,off,opt,TYP	
	type public String CO,CARDTYP,UTBLMPS()
	type String ACARDTYP,x
		
	set UTBLMPS=UTBLMPS.get()+1
	if UTBLMPS>50 kill UTBLMPS
	
	set x=""
	type ResultSet rs=Db.select("MAXCRD,MAXDDA,MAXSAV,MAXRC,LNKOPT,MAXLN","UTBLMPS","CO=:CO AND CARDTYP=:CARDTYP")

	if rs.isEmpty() quit
	while rs.next() do {
		set x.piece("|",1)=rs.getCol("MAXCRD")
		set x.piece("|",2)=rs.getCol("MAXDDA")
		set x.piece("|",3)=rs.getCol("MAXSAV")
		set x.piece("|",4)=rs.getCol("MAXRC")
		set x.piece("|",5)=rs.getCol("LNKOPT")
		set x.piece("|",6)=rs.getCol("MAXLN")
		set UTBLMPS(CO,CARDTYP)=x
		}

	type ResultSet rs1=Db.select("TYP,FNDOPT,OFST,MPSJNTCRD,ORDERBY,ACARDTYP","UTBLMPSPROD","CO=:CO AND CARDTYP=:CARDTYP")

	while rs1.next() do {
		set TYP=rs1.getCol("TYP")
		set opt=rs1.getCol("FNDOPT")
		set off=rs1.getCol("OFST")
		set jnt=rs1.getCol("MPSJNTCRD")
		set ord=rs1.getCol("ORDERBY") if 'ord set ord=1
		set ACARDTYP=rs1.getCol("ACARDTYP")
		set UTBLMPS(CO,CARDTYP,TYP)=opt_"|"_off_"|"_jnt_"|"_ord
		if 'ACARDTYP.isNull() set UTBLMPS(CO,ACARDTYP,TYP)=opt_"|"_off_"|"_jnt_"|"_ord
		}

	quit
	
	
	//---------------------------------------------------------------------
mpstmp(CID)	// Build temporary sort file
	//---------------------------------------------------------------------
	type public Date ord,ordt
	type public Number ACN,jnt,reccnt,TYP
	type public String ACARDTYP,CO,CARDTYP
	type String ATM
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Closed account
	if acn.stat=4 quit
	
	// No match on company code
	if $$GETCO^MPSRECU(CID)'=CO quit
	
	set ACN=acn.acn

	// No cards to be created (primary or secondary owners)
	type RecordRELCIF relcif=Db.getRecord("RELCIF","ACN=:ACN,CID=:CID",1)
	set ATM=relcif.atm
	
	
	if 'jnt,ATM=9 quit

	// Use Alternate MPS card type
	if ATM=8 do {
		type RecordUTBLMPSPROD utblmpsprod=Db.getRecord("UTBLMPSPROD","CO=:CO,CARDTYP=:CARDTYP,TYP=:TYP",1)
		set ACARDTYP=utblmpsprod.acardtyp
		}

	type RecordMPSTMP mpstmp=Class.new("RecordMPSTMP")
	
	set mpstmp.co=CO
	if 'ACARDTYP.get().isNull() set mpstmp.cardtyp=ACARDTYP
	else  set mpstmp.cardtyp=CARDTYP
	set mpstmp.acn=ACN
	set mpstmp.cid=CID

	set mpstmp.ordt=ordt
	set mpstmp.orderby=ord

	do mpstmp.bypassSave()
	set reccnt=reccnt+1

	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CO,CARDTYP,ACN
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CO=vRECORD.piece($C(9),1)
 set CARDTYP=vRECORD.piece($C(9),2)
 set ACN=vRECORD.piece($C(9),3)
 do vPROC(CO,CARDTYP,ACN)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CO,CARDTYP,ACN
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+39>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public String RM
	type Date XTJD
	type Number reccnt	
	
	set XTJD=%SystemDate-1
	do MPSTMP(XTJD,.reccnt)
	if 'reccnt set RM=$$^MSG(4309,XTJD.toString("MM-DD-YEAR")),%BatchExit=1 do EXC quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("DISTINCT CO,CARDTYP,ACN","MPSTMP","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	
	type public Date XTJD 
	type Number ATMOPT
	
	set ATMOPT=CUVAR.atmopt
	set XTJD=%SystemDate-1
	set %UserID="BATCH"


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	do Db.fastDelete("MPSTMP")


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
