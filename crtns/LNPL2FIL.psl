LNPL2FIL(RecordLNPL2 lnpl2, String vpar, Boolean vparNorm) // LNPL2 - Problem Loan Action Date File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Trigger Definition (1)                      11/15/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnpl2.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnpl2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnpl2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnpl2.cid
	type String CAD = lnpl2.cad

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("CAD").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNPL2",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNPL2","CID = :lnpl2.cid and CAD = :lnpl2.cad") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String CAD

	type RecordLNPL2 lnpl2 = Db.getRecord("LNPL2","CID=:CID,CAD=:CAD")
	if (%ProcessMode = 2) do {
		do lnpl2.setMode(2)

		do LNPL2FIL(lnpl2,vpar)
	}
	else  do VINDEX(lnpl2)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNPL2 lnpl2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNPL2","CID = :lnpl2.cid and CAD = :lnpl2.cad") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnpl2)) S ^LNOLC(2,vobj(lnpl2,-3),vobj(lnpl2,-4))=vobj(lnpl2)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lnpl2) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNPL2 lnpl2

	if vpar["/INDEX/" do VINDEX(.lnpl2)                    // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNOLC(2,vobj(lnpl2,-3),vobj(lnpl2,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNPL2 lnpl2

	if lnpl2.ades.isNull() do vreqerr("ADES") quit
	if lnpl2.cdt.isNull() do vreqerr("CDT") quit
	if lnpl2.uid.isNull() do vreqerr("UID") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNPL2 lnpl2

	if lnpl2.cid.isNull() do vreqerr("CID") quit
	if lnpl2.cad.isNull() do vreqerr("CAD") quit

		if vx("ADES").exists(),lnpl2.ades.isNull() do vreqerr("ADES") quit
		if vx("CDT").exists(),lnpl2.cdt.isNull() do vreqerr("CDT") quit
		if vx("UID").exists(),lnpl2.uid.isNull() do vreqerr("UID") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPL2","MSG",1767,"LNPL2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNPL2 lnpl2
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnpl2,.vx(),1,"|")
	quit


vbu1 // Trigger AFTER_INSERT - After insert or update

	do vai1

	quit

vai1 // Trigger AFTER_INSERT - After insert or update

	type public RecordLNPL2 lnpl2
	do lnpl2.setAuditFlag(1)
	/*
	-----Revision History--------------------------------------------------
	
	11/10/05 - SATYANAS - 18007
		   Modified the Code to PSL Standards.
	
	09/16/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/
	
	// Action date must be greater than system date
	
	type public Boolean ER
	type Date zsysdat
	
	set zsysdat=%SystemDate.toString("MM-DD-YEAR")
	
	//Value below minimum range ~p1
	if lnpl2.cad<%SystemDate do Runtime.setErrMSG("LNPL2",2920,zsysdat) if ER quit 
	
	// Compliance date must be greater than action date
	
	// Compliance date must be the same as or after the action date
	if 'lnpl2.cdt.isNull(),lnpl2.cdt<lnpl2.cad do Runtime.setErrMSG("LNPL2",593) if ER quit 
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNPL2 lnpl2

	set X = lnpl2.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnpl2.cad if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CAD", vRM) quit
	if lnpl2.ades.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADES", vRM) quit
	set X = lnpl2.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	if lnpl2.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = lnpl2.uid if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPL2","MSG",979,"LNPL2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordLNPL2 lnpl2) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.lnpl2)

	quit
	

vi1(RecordLNPL2 lnpl2) // Maintain PLAD index entries (Action Date Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lnpl2.cad
	type String v3 = lnpl2.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNOLC(2,vobj(lnpl2,-3),vobj(lnpl2,-4)))#2,'$D(^DAYEND(v1,"PLAD",v3)) do vidxerr("PLAD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"PLAD",v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"PLAD",v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNPL2")

	while ds.next() do {
		type RecordLNPL2 lnpl2=ds.getRecord("LNPL2")
		if vlist.contains("VINDEX") do VINDEX(.lnpl2) quit
		if vlist.contains("PLAD") do vi1(.lnpl2)
	}

	quit


public VIDXBLD1(RecordLNPL2 lnpl2, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lnpl2) quit
	if vlist.contains("PLAD") do vi1(.lnpl2)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNPL2","MSG",1225,"LNPL2."_di)

	quit


vkchged // Access key changed

	type public RecordLNPL2 lnpl2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CAD").exists() set vux("CAD") = vx("CAD")
	do vkey(1) set voldkey = lnpl2.cid_","_lnpl2.cad       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnpl2.cid_","_lnpl2.cad       // Copy new keys into object
	type RecordLNPL2 vnewrec = lnpl2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNPL2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNPL2 lnpl2

	if vux("CID").exists() set lnpl2.cid = vux("CID").piece("|",i)
	if vux("CAD").exists() set lnpl2.cad = vux("CAD").piece("|",i)
	quit

VIDXPGM()	quit "LNPL2FIL"	// Location of index program

