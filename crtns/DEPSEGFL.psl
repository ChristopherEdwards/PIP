DEPSEGFL(RecordDEPSEG depseg, String vpar, Boolean vparNorm) // DEPSEG - Deposit Account Segment Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (35)             02/12/2007
	// Trigger Definition (11)                     05/22/2007
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = depseg.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(depseg,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(depseg,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = depseg.cid
	type String SEGMENT = depseg.segment

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEGMENT").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEPSEG",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACNSEG","CID = :depseg.cid and SEGMENT = :depseg.segment") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEGMENT

	type RecordDEPSEG depseg = Db.getRecord("DEPSEG","CID=:CID,SEGMENT=:SEGMENT")
	if (%ProcessMode = 2) do {
		do depseg.setMode(2)

		do DEPSEGFL(depseg,vpar)
	}
	else  do VINDEX(depseg)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEPSEG depseg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACNSEG","CID = :depseg.cid and SEGMENT = :depseg.segment") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(depseg)) S ^ACN(vobj(depseg,-3),200,vobj(depseg,-4))=vobj(depseg)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.depseg)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.depseg) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEPSEG depseg

	if vpar["/INDEX/" do VINDEX(.depseg)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.depseg)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(depseg,-3),200,vobj(depseg,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDEPSEG depseg

	// Type local variables for access keys for defaults
	type public String CID
	type public String SEGMENT

	if depseg.segval.isNull() set depseg.segval = 0        // segval
	quit


vreqn // Validate required data items

	type public RecordDEPSEG depseg

	if depseg.cls.isNull() do vreqerr("CLS") quit
	if depseg.segval.isNull() do vreqerr("SEGVAL") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEPSEG depseg

	if depseg.cid.isNull() do vreqerr("CID") quit
	if depseg.segment.isNull() do vreqerr("SEGMENT") quit

		if vx("CLS").exists(),depseg.cls.isNull() do vreqerr("CLS") quit
		if vx("SEGVAL").exists(),depseg.segval.isNull() do vreqerr("SEGVAL") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPSEG","MSG",1767,"DEPSEG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDEPSEG depseg
	if 'depseg.cid.isNull() set vfkey("^ACN("_""""_depseg.cid_""""_","_50_")")="DEPSEG(CID) -> DEP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDEPSEG depseg
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DEP",":depseg.cid") set vERRMSG = $$^MSG(8563,"DEPSEG(CID) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("AIIPF").exists()!vx("AIIPLD").exists()!vx("AIINP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INDEX").exists()!vx("INTFRE").exists()!vx("ICHLD").exists()!vx("ICHND").exists()!vx("INTMAT").exists()!vx("INTSPR").exists()!vx("RNDMTD").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IPF").exists()!vx("INP").exists()!vx("IPLD").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRN").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PRENA").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEGTERM").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDEPSEG depseg
	if vx("").order().isNull() do AUDIT^UCUTILN(depseg,.vx(),1,"|") quit
	if vx("IPF").exists()!vx("INP").exists()!vx("IPLD").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRN").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(depseg,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - Deposit Segment AFTER Insert

	type public RecordDEPSEG depseg
	/*
	---- Revision History--------------------------------------------------------
							 
								05/11/07 - SANTHUMS - CR 27044               
	           Modified to insert a record into DAYENDINP, since
		   interest was not getting posted on the next interest 
	     	   posting date whenever segmented deposit accounts were 
	     	   created.
	     	      
								09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
																		 
	02/21/00 - HAYMANP - 39626
		   Added Db.isDefined check before insert of DAYENDSEGIP records.

	02/16/00 - HAYMANP - 36743
		   Commented out code to check for DEPSEG columns in
		   DEPSEG.INTMAT per client requirement.  It is necessary to
		   allow matrices that do not use columns in DEPSEG file.
	
	12/28/99 - MAGERAM - 36112
		   Roll Forward for ARQ 34062 Interest Matrix            	
	
	10/21/99 - CARROLLJ - 31126
		   Convert to PSL.

	07/15/99 - MAGERAM - 34078
		   Return an error message when Matrix Row and Matrix Column
		   do not have a value = 19 (Days Since Segment End Date).
	
	06/10/99 - SMITHC - 32048
		   Set up DAYEND entry for all types of next interest
		   posting dates (segment principal, segment available)
		   manually.  This coding replaces the traditional filer
		   index definitions for next interest posting dates.
	
	06/09/99 - MOHAMEDE - ARQ32783
		   Only return error "Account accruing interest must have interest
		   rate" when the offer processing flag is not on and interest
		   rate is not defined and the segment accrues at the account
		   level.
	
	05/18/99 - MOHAMEDE - 32783
		   Added code to check if DEPSEG.IRN is defined where the
		   account is accruing at the segment level.
	
	04/09/99 - YENDAPALLIS - 32301
		   Modified code by adding the term "Q" as a valid term to the
		   list of D,W,M,Y.
	
	01/06/98 - MAGERAM - 31315
		   Added code to check if DEPSEG.INP is defined.
	
	11/04/98 - HAYMANP - 28594
		   Added code to only unlock if not coming in through transaction
		   processing.
	
	*/
	type public Number CID,SEGMENT,I
	type public Boolean ER

	type RecordDEP dep=Db.getRecord("DEP","CID")
	/*
		
	Segment account set to accrue at segment level should bear interest if
	the account is accruing at the segment level.
	*/
	if '(dep.offproc),(depseg.irn=""),'(dep.segacr) do Runtime.setErrXBAD("DEPSEG","IRN") quit:ER         
	
	// Check for interest posting frequency
	new X
	set X=depseg.ipf
	do EDT^UFRE
	//Interest Posting Frequency is invalid
	if ER do Runtime.setErrXBAD("DEPSEG",211) quit:ER 
	
	// Int Next Posting Date cannot be earlier than the system date
	if depseg.inp,(depseg.inp<%SystemDate) do Runtime.setErrXBAD("DEPSEG",205) quit:ER 
	
	/*
	Set up DAYEND entry for next segment interest posting date manually
	This coding replaces the traditional filer index definitions for
	next interest posting dates.
	*/
	if depseg.inp'="",'dep.segacr do { quit:ER 
		
		type public Date XTJD
		set XTJD=depseg.inp
		if Db.isDefined("DAYENDSEGIP","XTJD,CID,2,SEGMENT") quit
		type RecordDAYENDSEGIP dayndseg=Class.new("RecordDAYENDSEGIP")
		set dayndseg.tjd=XTJD
		set dayndseg.cid=CID
		set dayndseg.posting=2
		set dayndseg.seg=SEGMENT
		do dayndseg.save()
		
		type RecordDAYENDINP dayendinp=Class.new("RecordDAYENDINP")
		set dayendinp.tjd=XTJD  
		set dayendinp.cid=CID  
		set dayendinp.posting=2  
 		do dayendinp.save()	
		}
	
	/*
	Set up DAYEND entry for next segment available interest posting
	date manually.  This coding replaces the traditional filer index
	definitions for next interest posting dates.
	*/
	if depseg.aiinp'="",'dep.segacr do { quit:ER 
		new XTJD
		set XTJD=depseg.aiinp
		if Db.isDefined("DAYENDSEGIP","XTJD,CID,3,SEGMENT") quit
		
		type RecordDAYENDSEGIP dayendsegip=Class.new("RecordDAYENDSEGIP")
		set dayendsegip.tjd=XTJD
		set dayendsegip.cid=CID
		set dayendsegip.posting=3
		set dayendsegip.seg=SEGMENT
		do dayendsegip.save()
		
		type RecordDAYENDINP dayendinp=Class.new("RecordDAYENDINP")
		set dayendinp.tjd=XTJD  
		set dayendinp.cid=CID  
		set dayendinp.posting=3  
 		do dayendinp.save()  
		}
	
	if (depseg.index'="") do { quit:ER 
		// Interest Change Frequency is required with Interest Index
		if (depseg.intfre="") do Runtime.setErrXBAD("DEPSEG",208) quit:ER 

		// Int Next Change Date cannot be earlier than the system date
		if depseg.ichnd<%SystemDate do Runtime.setErrXBAD("DEPSEG",204) quit:ER 

		// Seg Int Last Change Date is required with Segment Int Index
		if (depseg.ichld="") do Runtime.setErrXBAD("DEPSEG",224) quit:ER 
		}
	
	// Segment Term must contain a valid term
	if (depseg.segment'=0),(depseg.segterm'="") do { quit:ER 
		// First character of term may not be '0'
		if $E(depseg.segterm)=0 do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// First character of term must be numeric
		if +depseg.segterm=0 do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// Term must contain character D, W, M, Y or Q
		if depseg.segterm=+depseg.segterm do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// Lowercase characters not allowed
		if depseg.segterm?.E1L.E do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// First character of quarter term must be 1, 2, 3, or 4
		if $E(depseg.segterm,2)="Q",$E(depseg.segterm)>4 do Runtime.setErrMSG("DEPSEG",3869) quit:ER 
	
		for I=1:1:$L(depseg.segterm) if '("DWMYQ"[$E(depseg.segterm,I)!($E(depseg.segterm,I)?1N)) set ER=1 quit 
		// Term may only contain characters D, W, M, Y or Q
		if ER do Runtime.setErrXBAD("DEPSEG",230) quit:ER 
	
		}
	if depseg.segment'=0 do { quit:ER 
		// Partial Renewal Amt must be null if Prin Mat Opt equals 0, 3, or 5
		if depseg.prena'="",((dep.rencd=0)!(dep.rencd=3)!(dep.rencd=5)) do Runtime.setErrXBAD("DEPSEG",216) quit:ER 
	
		// Partial Renewal Amt cannot be greater than Segment Ledger Bal
		if depseg.prena>depseg.bal do Runtime.setErrXBAD("DEPSEG",217) quit:ER 
		}
	/*
	if depseg.intmat'="" do { quit:ER 
		new INTMAT,MATCOL,ROW,data
		set INTMAT=depseg.intmat
		set data=Db.getOneRow("ROW,MATCOL","UTBLMATATT","INTMAT")
		set ROW=$P(data,$C(9),1)
		set MATCOL=$P(data,$C(9),2)
		
		new DEPITEM,ERFLAG,ITEM,rs

		//Retrieves 'DEPSEG' items from 'STBLMATATT'
		type ResultSet rs=Db.select("ITEM,DEP","STBLMATATT","DEP LIKE 'DEPSEG%'")
		if rs.isEmpty() quit
		
		set ERFLAG=1
		
		F  quit:'rs.next()  do { quit:'ERFLAG
			set ITEM=rs.getCol(1)
			set DEPITEM=rs.getCol(2)
			// Checks for ROW or COLUMN to have segmented data items
			if (ROW=ITEM)!(MATCOL=ITEM) set ERFLAG=0 quit			
			}		
		// Matrix must reference segment data items
		if ERFLAG do Runtime.setErrMSG("DEPSEG",3979) quit:ER 

		}
	*/
	quit

vau1 // Trigger AU_AIIPF - After Update Avail Int Posting Frequency

	type public RecordDEPSEG depseg
	/*	
	---------- Revision History ------------------------------------------
	
	05/11/07 - SANTHUMS - CR 27044               
	           Modified to insert a record into DAYENDINP, since
		   interest was not getting posted on the next interest 
	     	   posting date whenever segmented deposit accounts were 
	     	   created.
	     	   
	09/26/05 - RADHIKA - 16891 
																			Eliminated PSL deprecated features and Warnings.
																			Removed revision history prior to 2004.
																		 
	06/01/04 - KELLYP - CR 9665
		   Modified Db.delete call to use semicolons properly
	*/
	
	type public Number CID
	type public Boolean ER
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	if dep.segacr=1 do {
		// ~p1 must be null when accruing at account level
		if depseg.aiipf'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.AIIPF") quit:ER 
		if depseg.aiinp'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.AIINP") quit:ER 
		if depseg.aiipld'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.AIIPLD") quit:ER 
		}
	
	/*
	Maintain DAYEND entry for next interest posting date manually
	This coding replaces the traditional filer index definitions for
	next interest posting dates.
	*/
	if depseg.aiinp'=depseg.aiinp.oldVal do { quit:ER 
		
		type public Number SEGMENT
		type Date AIINP,XTJD
		set AIINP=depseg.aiinp
		/*
		Segmented interest on principal, accruing/posting at
		account level
		*/
		set XTJD=depseg.aiinp.oldVal
		if depseg.aiinp.oldVal'="" do Db.delete("DAYENDSEGIP","CID=:CID AND TJD=:XTJD AND POSTING=3 AND SEG=:SEGMENT")
		
		if depseg.aiinp'="" do {
			type RecordDAYENDSEGIP dyedsgip=Class.new("RecordDAYENDSEGIP")

			set dyedsgip.tjd=AIINP
		 	set dyedsgip.cid=CID
			set dyedsgip.posting=3
			set dyedsgip.seg=SEGMENT
			do dyedsgip.save()
			
			type RecordDAYENDINP dayendinp=Class.new("RecordDAYENDINP")
			set dayendinp.tjd=AIINP  
			set dayendinp.cid=CID  
			set dayendinp.posting=3 
 			do dayendinp.save()
			
			}
		}
	quit 

vau2 // Trigger AU_INDEX - After Update of Interest Index

	type public RecordDEPSEG depseg

        /*	
	---------- Revision History ------------------------------------------
	
	09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
								*/           
																		 
	type public Number segacr,CID
	type public Boolean ER
	
	type RecordDEP seg=Db.getRecord("DEP","CID")
	set segacr=seg.segacr
	
	if segacr=1 do {
		// ~p1 must be null when accruing at account level
		if depseg.index'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.INDEX") quit:ER 
		if depseg.intfre'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.INTFRE") quit:ER 
		if depseg.ichld'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.ICHLD") quit:ER 
		if depseg.ichnd'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.ICHND") quit:ER 
		if depseg.intmat'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.INTMAT") quit:ER 
		if depseg.intspr'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.INTSPR") quit:ER 
		if depseg.rndmtd'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.RNDMTD") quit:ER 
		}
	
	/*
	When the Interest Index, DEPSEG.INDEX, contains a value,
	Interest Change Frequency, DEPSEG.INTFRE and DEPSEG.ICHLD
	must also contain a value.
	*/
	
	if depseg.index'="" do {
		// Interest Change Frequency is required with Interest Index
		if depseg.intfre="" do Runtime.setErrXBAD("DEPSEG",208) quit:ER 

		// Seg Int Last Change Date is required with Segment Int Index
		if depseg.ichld="" do Runtime.setErrXBAD("DEPSEG",224) quit:ER 

		// Int Next Change Date cannot be less than the system date
		if depseg.ichnd<%SystemDate do Runtime.setErrXBAD("DEPSEG",204) quit:ER 
		}
	quit 

vau3 // Trigger AU_IPF - After Update of Interest Posting Frequen

	type public RecordDEPSEG depseg
	/*	
	---------- Revision History ------------------------------------------
	
	05/11/07 - SANTHUMS - CR 27044               
	           Modified to insert a record into DAYENDINP, since
		   interest was not getting posted on the next interest 
	     	   posting date whenever segmented deposit accounts were 
	     	   created.
	     	   
	09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
																			Removed revision history prior to 2004.
																		 
	06/01/04 - KELLYP - CR 9665
		   Modified Db.delete call to use semicolons properly.
	
	*/

      	type public Number CID,SEGMENT
	type public Boolean ER

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")	
	if dep.segacr=1 do {
		// ~p1 must be null when accruing at account level
		if depseg.ipf'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.IPF") quit:ER 
		if depseg.ipld'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.IPLD") quit:ER 
		if depseg.inp'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.INP") quit:ER 
		}
	// Interest Posting Frequency is invalid
	new X
	set X=depseg.ipf
	do EDT^UFRE
	if ER do Runtime.setErrXBAD("DEPSEG",211) quit:ER 
	
	// Int Next Posting Date cannot be earlier than the system date
	if depseg.inp<%SystemDate do Runtime.setErrXBAD("DEPSEG",205) quit:ER 
	
	/*
	Maintain DAYEND entry for next interest posting date manually
	This coding replaces the traditional filer index definitions for
	next interest posting dates.
	*/
	if depseg.inp'=depseg.inp.oldVal do { quit:ER 
		new TJD,XTJD
		set TJD=depseg.inp
		/*
		Segmented interest on principal, accruing/posting at
		account level
		*/
		set XTJD=depseg.inp.oldVal		
		if depseg.inp.oldVal'="" do { 
			do Db.delete("DAYENDSEGIP","CID=:CID AND TJD=:XTJD AND POSTING=2 AND SEG=:SEGMENT")
			type ResultSet rs = Db.select("TJD","DAYENDSEGIP","CID=:CID AND TJD=:XTJD AND POSTING=2")
			if 'rs.next() do Db.delete("DAYENDINP","CID=:CID AND TJD=:XTJD AND POSTING=2")
			}
		if depseg.inp'="" do {
			
			type RecordDAYENDSEGIP dayendseg=Class.new("RecordDAYENDSEGIP")
			set dayendseg.tjd=TJD  
			set dayendseg.cid=CID  
			set dayendseg.posting=2  
 			set dayendseg.seg=SEGMENT  
			do dayendseg.save()
			
			type RecordDAYENDINP dayendinp=Class.new("RecordDAYENDINP")
			set dayendinp.tjd=TJD  
			set dayendinp.cid=CID  
			set dayendinp.posting=2  
 			do dayendinp.save()
	
			}
		}
	quit 

vau4 // Trigger AU_IRN - After Update of Interest Rate

	type public RecordDEPSEG depseg
	/*
	   ---- Revision History ------------------------------------------------

	     09/26/05 - RADHIKA - 16891
																								Eliminated PSL Warnings.
		      
	*/
	
	type public Number CID
	type public Boolean ER
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	if dep.segacr=1 do {
		// ~p1 must be null when accruing at account level
		if depseg.irn'="" do Runtime.setErrXBAD("DEPSEG",183,"DEPSEG.IRN") quit:ER		
		}
	quit

vau5 // Trigger AU_PRENA - After Update of Partial Renewal Amount

	type public RecordDEPSEG depseg
								/*
	   ---- Revision History ------------------------------------------------

	     09/26/05 - RADHIKA - 16891
																								Eliminated PSL Warnings.
		      
	*/
	
	type public Number CID
	type public Boolean ER	

	type RecordDEP dep=Db.getRecord("DEP","CID")
	if depseg.segment'=0 do { quit:ER 
		// Partial Renewal Amt must be null if Prin Mat Opt equals 0, 3, or 5	
		if depseg.prena'="",((dep.rencd=0)!(dep.rencd=3)!(dep.rencd=5)) do Runtime.setErrXBAD("DEPSEG",216) quit:ER 

		// Partial Renewal Amt cannot be greater than the Segment Ledger Balance
		if depseg.prena>depseg.bal do Runtime.setErrXBAD("DEPSEG",217) quit:ER 
		}
	quit 

vau6 // Trigger AU_SEGTERM - After Update of Segment Term

	type public RecordDEPSEG depseg
								/*
	   ---- Revision History ------------------------------------------------

	     09/26/05 - RADHIKA - 16891
																								Eliminated PSL Warnings.
		      
	*/
	
	type public Boolean ER
	type Number I
	
	// Segment Term must contain a valid term
	if depseg.segment'=0,(depseg.segterm'="") do { quit:ER 
		// First character of period may not be '0'
		if $E(depseg.segterm)=0 do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// First character of period must be numeric
		if +depseg.segterm=0 do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// Period must contain character D, W, M, or Y
		if depseg.segterm=+depseg.segterm do Runtime.setErrXBAD("DEPSEG",230) quit:ER 

		// Lowercase characters not allowed
		if depseg.segterm?.E1L.E do Runtime.setErrXBAD("DEPSEG",230) quit:ER 
	
		for I=1:1:$L(depseg.segterm) if '("DWMY"[$E(depseg.segterm,I)!($E(depseg.segterm,I)?1N)) set ER=1 quit 
		// Period may only contain characters D, W, M, or Y
		if ER do Runtime.setErrXBAD("DEPSEG",230) quit:ER 
		}
	quit 

vbd1 // Trigger BEFORE_DELETE - Before Delete Trigger

	type public RecordDEPSEG depseg

	/*------- Revision History ---------------------------------------------------
							 
								09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
	
	05/10/00 - HAYMANP - 39953
		   Added code to remove DAYENDSEGIP entries upon segment delete.

	*/
	
	type public Number CID,TNUMS

	type RecordDEP dep=Db.getRecord("DEP","CID")
	set TNUMS=dep.TNUMS-1
	
	do Db.update("DEP","TNUMS=:TNUMS","CID=:CID")

	// remove old interest posting DAYENDSEGIP entry
	if depseg.inp,Db.isDefined("DAYENDSEGIP","depseg.inp,CID,2,SEGMENT") do {
		new INP
		set INP=depseg.inp
		do Db.delete("DAYENDSEGIP","CID=:CID AND TJD=:INP AND POSTING=2 AND SEG=:SEGMENT")
		}

 	// remove old available interest posting DAYENDSEGIP entry
	if depseg.aiinp,Db.isDefined("DAYENDSEGIP","depseg.aiinp,CID,3,SEGMENT") do {
		new AIINP
		set AIINP=depseg.aiinp
		do Db.delete("DAYENDSEGIP","CID=:CID AND TJD=:AIINP AND POSTING=3 AND SEG=:SEGMENT")
		}

1	quit
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger Deposit

	type public RecordDEPSEG depseg
	/*
	---- Revision History--------------------------------------------------------
	
	09/26/05 - RADHIKA - 16891
																			Eliminated PSL deprecated features and Warnings.
																		 
	12/30/03 - CARROLLJ - CR7658
		   Modified call to CTL^UINDX.	

	08/05/99 - MAGERAM - 34078
		   Modified call to UFRE in check for ICHLD - Interest Change Last
		   Date Must Have A Date. Changed key from BSDT to DEPSEG.ICHND
	
	02/26/99 - RAJARAMD - 32122
		   Added check to default no values for the following columns,
		   where DEP.SEGACR=1. IRN,IPF,IPLD,INP,INDEX,INTFRE,ICHLD,ICHND,
		   INTMAT,INTSPR,RNDMTD.
	
	01/25/99 - HAYMANP - 28594
		   Modified logic to verify that a new segment does not overlap
		   an existing segment.
	
	10/23/98 - HAYMANP - 28594
		   Added logic to calculate initial interest rate value if INDEX
		   is defined.  Also modified default of ICHLD.
	
	10/05/98 - HAYMANP - 28594
		   Modified section that sets segment start and end date to use
		   UMDT instead of UFRE.
	
	*/

	type Number MAXSEG,SEGACR,SEGMDD,TNUMS
	type public Number CID
	type String SEGPER,TRM,STRING,RM
	type public Boolean OFFPROC,SEGFLG,ER
	type Date ODT,JD,SEGSTART
		 
	type RecordDEP dep=Db.getRecord("DEP","CID")
	set SEGFLG=dep.segflg
	set TNUMS=dep.tnums
	set MAXSEG=dep.maxseg
	set SEGPER=dep.segper
	set SEGACR=dep.segacr
	set SEGMDD=dep.segmdd
	set OFFPROC=dep.offproc
	set ODT=dep.odt

	
	// Segments in Use Flag must be Yes
	if 'SEGFLG do Runtime.setErrXBAD("DEPSEG",231) quit:ER 
	
	/*
	If the Total Number of Seg = Max Number of Segments a new segment cannot be
	opened for the account.  If Total Segments < Max Number of Segments Total
	Segments will be incremented by one
	*/	

	// Total Number of Segments Equals Maximum Number of Segments
	if TNUMS=MAXSEG do Runtime.setErrXBAD("DEPSEG",232) quit:ER 
	if TNUMS'=MAXSEG,depseg.segment'=0 do { quit:ER       
		set TNUMS=TNUMS+1
		do Db.update("DEP","TNUMS=:TNUMS","CID=:CID")
		}
	
	// Determine segment start date and end date
	if depseg.segstart="" set depseg.segstart=%SystemDate
	if (depseg.segend=""),(depseg.segment'=0) do { quit:ER 
		set TRM=SEGPER
		set JD=depseg.segstart
		set depseg.segend=$$EXT^UMDT(TRM,JD) quit:ER 
		}
	
	// If this is not the zero segment
	if depseg.segment'=0 do { quit:ER 
		// Determine segment maturity date
		if (depseg.segmdt=""),(SEGMDD=0) set depseg.segmdt=$$EXT^UMDT(depseg.segterm,depseg.segstart,0,"A","IBS") quit:ER 
		if (depseg.segmdt=""),(SEGMDD=1) set depseg.segmdt=$$EXT^UMDT(depseg.segterm,depseg.segend,0,"A","IBS") quit:ER 
		}
	
	set ER=0
	// If not coming in through transaction processing-
	if '$G(RECALSEG)=1 do {
		// Determine if new segment does not overlap with an existing segment
		new rs 
		type ResultSet rs=Db.select("SEGMENT,SEGSTART,SEGEND","DEPSEG","CID=:CID")
		if rs.isEmpty() quit
		while rs.next()!ER do {   
			// don't look at zero segment
			if 'rs.getCol(1) quit
			set SEGSTART=rs.getCol(2)
			set SEGEND=rs.getCol(3)
			if depseg.segstart'<SEGEND quit
			if ((depseg.segstart<SEGSTART)&(depseg.segend'>SEGSTART)) quit

			// Segment currently open, additional segments cannot be opened
			do Runtime.setErrXBAD("DEPSEG",227) quit:ER 
			}
		}
	
	// ICHLD - Interest Change Last Date Must Have A Date
	if depseg.intfre do {
		if depseg.ichld'="" quit 
		new NJD
		if depseg.ichnd'="" set NJD=$$NJD^UFRE(depseg.ichnd,depseg.intfre,,"10001") quit:ER 
		else  set NJD=ODT
		if NJD<ODT set NJD=ODT
		set depseg.ichld.journal=0,depseg.ichld=NJD
		}
	else  if SEGACR=0 set depseg.ichld.journal=0,depseg.ichld=ODT
	
	// Default interest rate if INDEX is defined and IRN is null
	if depseg.index'="",depseg.irn="" do {
		new ER,IX
		set ER=0
		set par("INDEX")=depseg.index
		set par("SPREAD")=depseg.intspr
		set par("ROUND")=depseg.rndmtd
		set par("LIMIT")=1
		set par("MATRIX")=depseg.intmat
		do CTLCID^UINDX(CID,depseg.ichld,depseg.bal,.par)
		if ER&($P($G(IX(depseg.index)),"|",14)) do {
			new ERDT
			set (ER,RM)=""
			set ERDT="" 
			set ERDT=$O(IX(depseg.index,ERDT))
			if ERDT="" quit 
			set RATE=$P(IX(depseg.index,ERDT,0),"|",1)
			if RATE'?.N.1".".N do {
				set par("INDEX")=depseg.index
				set par("SPREAD")=depseg.intspr
				set par("ROUND")=depseg.rndmtd
				set par("LIMIT")=1
				set par("MATRIX")=depseg.intmat
				do CTLCID^UINDX(CID,depseg.ichld,depseg.bal,.par)
				}
			}
		if 'ER set depseg.irn.journal=0,depseg.irn=RATE
		}
	
	// Determine if predefined interest rate is offered
	if OFFPROC=0 set depseg.segval=1
	if OFFPROC=1 set depseg.segval=0
	
	if SEGACR=1 do {
		// ~p1 must be null when accruing at account level

		//Avail Int Posting Freq
		if depseg.aiipf'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.aiipf") quit:ER  

		//Avail Int Next Posting Date
		if depseg.aiinp'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.aiinp") quit:ER 

		//Avail Int Last Posting Date
		if depseg.aiipld'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.aiipld") quit:ER 

		//Interest Rate
		if depseg.irn'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.irn") quit:ER   

		//Interest Posting Frequency
		if depseg.ipf'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.ipf") quit:ER  

		//Interest Last Posting Date
		if depseg.ipld'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.ipld") quit:ER

		//Interest Next Posting Date
		if depseg.inp'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.inp") quit:ER 

		//Interest Index
		if depseg.index'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.index") quit:ER       

		//Interest Change Frequency
		if depseg.intfre'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.intfre") quit:ER     

		//Interest Next Change Date
		if depseg.ichnd'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.ichnd") quit:ER        

		//Interest Matrix
		if depseg.intmat'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.intmat") quit:ER     

		//Interest Spread
		if depseg.intspr'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.intspr") quit:ER     

		//Rounding Method
		if depseg.rndmtd'="" do Runtime.setErrXBAD("DEPSEG",183,"depseg.rndmtd") quit:ER     
		}
	
	// INP - Interest Next Posted
	if (depseg.ipf'="")&(depseg.inp="") do {
		new NJD
		type public Number INTPOS 

		type RecordCUVAR cuvar=Db.getRecord("CUVAR")
		set INTPOS =cuvar.intpos
		set INTPOS=$S(cuvar.intpos=1:1,1:0)
		set NJD=$$FRSTDATE^ACNFUNCS(depseg.segstart,depseg.ipf,INTPOS) quit:ER 
		if depseg.inp="" set depseg.inp.journal=0,depseg.inp=NJD
		}
	quit 

vbu1 // Trigger BU_IPF - Before Update Int/Div Posting Frequency

	type public RecordDEPSEG depseg
	do depseg.setAuditFlag(1)
	/*
		----------- Revision History ------------------------------------------------
		 
			09/26/05 - RADHIKA - 16891
														Eliminated PSL deprecated features and Warnings.
																		 
			01/23/02 - GORDONT - 48534
													 
	     Maintain DAYEND entry of next interest posting dates
													(segment interest on principal) manually.

		-----------------------------------------------------------------------------
	*/

	type public Number CID,SEGACR
	type public String ODT,data
	type public Boolean ER
	set CID=depseg.cid

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	set SEGACR=dep.segacr
	set ODT=dep.odt
	 

	if depseg.ipf'="" do { quit:ER
 		
 		type public String AF,NJD
		// Int/Div Next Posted and Int/Div Paid - Last Date not
		// applicable if segmented account accruing at account level
		if SEGACR do { quit
			set depseg.inp=""
			set depseg.ipld=""
			}

		// Default next date if not defined or in the past
		if depseg.inp'>%SystemDate do { quit:ER
				
			type Number INTPOS
			set INTPOS=$S(CUVAR.intpos=1:1,1:0)
			set NJD=$$FRSTDATE^ACNFUNCS(ODT,depseg.ipf,INTPOS) quit:ER
			set depseg.inp=NJD
			}

		// Default last date if not defined
		if depseg.ipld="" do { quit:ER
			set NJD=$$NJD^UFRE(depseg.inp,depseg.ipf,,"1") quit:ER
			if NJD<depseg.segstart S NJD=depseg.segstart
			set depseg.ipld=NJD
			}
		}
	quit	

vbu2 // Trigger BU_IRN - Before Update Interest Rate

	type public RecordDEPSEG depseg
	do depseg.setAuditFlag(1)
	/* 
	----- Revision History -------------------------------------------------
							 
								09/26/05 - RADHIKA - CR 16891
																			Eliminated PSL Warnings.
																			Removed revision history prior to 2004.
																		 
	06/01/04 - KELLYP - CR 9665
		   Dropped $G around %EffectiveDate as it now causes a
		   compilation error.

	*/
		
	type public Boolean ER
	type public Number CID 	

	if %EffectiveDate,%EffectiveDate<%SystemDate do { quit:ER
		// Accounts tied to an interest index cannot be changed
		if depseg.index'="" do Runtime.setErrMSG("DEPSEG",192) quit:ER
	
		new dep,dumval
	
		type RecordDEP dep=Db.getRecord("DEP","CID")
	
		// Account ~p1 closed
		if dep.stat=4 do Runtime.setErrMSG("DEPSEG",55) quit:ER
	
		// Cannot effective-date prior to opening date
		if dep.odt>%EffectiveDate do Runtime.setErrMSG("DEPSEG",450) quit:ER
	
		// Cannot effective-date prior to date last renewed
		if dep.dlr>%EffectiveDate do Runtime.setErrMSG("DEPSEG",449) quit:ER
	
		if %EffectiveDate'>dep.hisctf do { quit:ER
			type Date HISTCTF
			type String x
			set HISTCTF = dep.hisctf
			set x = HISTCTF.toString()
			// Must be after the history purge date of ~p1
			do Runtime.setErrMSG("DEPSEG",1801,x) quit:ER
			}
	
		// This dummy code is to populate dep object with 49 and 450
		// nodes to be used by DEPIRN.
		set dumval=dep.flg
		set dumval=dep.bwsched
	
		do EFDIRN^DEPIRN(CID,.dep,,depseg.irn.oldVal,.depseg)
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEPSEG depseg

	set X = depseg.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = depseg.segment if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEGMENT", vRM) quit
	set X = depseg.aiacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.AIACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.aibal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.AIBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.aiinp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AIINP", vRM) quit
	set X = depseg.aiipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEPSEG]AIIPF",0) if 'vRM.get().isNull() do vdderr("AIIPF", vRM) quit
	set X = depseg.aiipld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AIIPLD", vRM) quit
	set X = depseg.bal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.BAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
	set X = depseg.cntcr if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CNTCR", vRM) quit
	set X = depseg.dlr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLR", vRM) quit
	set X = depseg.ichld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHLD", vRM) quit
	set X = depseg.ichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHND", vRM) quit
	if depseg.index.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX", vRM) quit
	set X = depseg.inp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INP", vRM) quit
	set X = depseg.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEPSEG]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
	set X = depseg.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
	if depseg.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
	set X = depseg.ipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEPSEG]IPF",0) if 'vRM.get().isNull() do vdderr("IPF", vRM) quit
	set X = depseg.ipld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("IPLD", vRM) quit
	set X = depseg.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.noacrbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.NOACRBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.noacrexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NOACREXP", vRM) quit
	set X = depseg.offamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.OFFAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.offdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("OFFDT", vRM) quit
	set X = depseg.offrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.OFFRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.posacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.POSACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depseg.prena if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.PRENA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if depseg.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
	set X = depseg.segend if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGEND", vRM) quit
	set X = depseg.segmdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGMDT", vRM) quit
	set X = depseg.segstart if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGSTART", vRM) quit
	if depseg.segterm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SEGTERM", vRM) quit
	if '("01"[depseg.SEGVAL) set vRM=$$^MSG(742,"L") do vdderr("SEGVAL", vRM) quit
	set X = depseg.wfr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPSEG.WFR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPSEG","MSG",979,"DEPSEG."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEPSEG depseg)	//DEPSEG Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.depseg)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.depseg)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.depseg)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.depseg)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.depseg)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.depseg)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordDEPSEG depseg)	// HIST_DELETE  Table HIST  History of record deletion for DEPSEG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=depseg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3477,depseg.segment)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEPSEG depseg)	// HIST_INSERT  Table HIST  History for new record in DEPSEG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=depseg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3475,depseg.segment)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordDEPSEG depseg)	// HIST_UPDATE  Table HIST  History on update of DEPSEG

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=depseg.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(depseg.cid_","_depseg.segment,"DEPSEG",vdi,vold,vnew,$G(EFD),$$^MSG(3476,depseg.segment),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordDEPSEG depseg) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("INDEX").exists() do vi1(.depseg)
		if vx("INTMAT").exists() do vi2(.depseg)
		if vx("SEGMDT").exists() do vi3(.depseg)
	}
	do vi1(.depseg)
	do vi2(.depseg)
	do vi3(.depseg)

	quit
	

vi1(RecordDEPSEG depseg) // Maintain INDEXSEG index entries (Segment Interest Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = depseg.index
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = depseg.cid
	type String v4 = depseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(depseg,-3),200,vobj(depseg,-4)))#2,'$D(^XREF("INDEXSEG",v2,v3,v4)) do vidxerr("INDEXSEG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("INDEXSEG",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INDEX").exists() set v2=vx("INDEX").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("INDEXSEG",v2,v3,v4)
	#ENDBYPASS
	quit

vi2(RecordDEPSEG depseg) // Maintain MATRIXSG index entries (Segment Interest Matrix)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = depseg.intmat
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = depseg.cid
	type String v4 = depseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(depseg,-3),200,vobj(depseg,-4)))#2,'$D(^XREF("MATATSEG",v2,v3,v4)) do vidxerr("MATRIXSG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("MATATSEG",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INTMAT").exists() set v2=vx("INTMAT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("MATATSEG",v2,v3,v4)
	#ENDBYPASS
	quit

vi3(RecordDEPSEG depseg) // Maintain SEGMDT index entries (Segment Maturity Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = depseg.segmdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = depseg.cid
	type String v4 = depseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(depseg,-3),200,vobj(depseg,-4)))#2,'$D(^DAYEND(v1,"SEGMDT",v3,v4)) do vidxerr("SEGMDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"SEGMDT",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SEGMDT").exists() set v1=vx("SEGMDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"SEGMDT",v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DEPSEG")

	while ds.next() do {
		type RecordDEPSEG depseg=ds.getRecord("DEPSEG")
		if vlist.contains("VINDEX") do VINDEX(.depseg) quit
		if vlist.contains("INDEXSEG") do vi1(.depseg)
		if vlist.contains("MATRIXSG") do vi2(.depseg)
		if vlist.contains("SEGMDT") do vi3(.depseg)
	}

	quit


public VIDXBLD1(RecordDEPSEG depseg, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.depseg) quit
	if vlist.contains("INDEXSEG") do vi1(.depseg)
	if vlist.contains("MATRIXSG") do vi2(.depseg)
	if vlist.contains("SEGMDT") do vi3(.depseg)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DEPSEG","MSG",1225,"DEPSEG."_di)

	quit


vkchged // Access key changed

	type public RecordDEPSEG depseg

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEGMENT").exists() set vux("SEGMENT") = vx("SEGMENT")
	do vkey(1) set voldkey = depseg.cid_","_depseg.segment // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = depseg.cid_","_depseg.segment // Copy new keys into object
	type RecordDEPSEG vnewrec = depseg.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEPSEG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEPSEG depseg

	if vux("CID").exists() set depseg.cid = vux("CID").piece("|",i)
	if vux("SEGMENT").exists() set depseg.segment = vux("SEGMENT").piece("|",i)
	quit

VIDXPGM()	quit "DEPSEGFL"	// Location of index program

