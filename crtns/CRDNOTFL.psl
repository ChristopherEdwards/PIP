CRDNOTFL(RecordCRDNOT crdnot, String vpar, Boolean vparNorm) // CRDNOT - Card Notes Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              12/28/2005
	// Trigger Definition (2)                      07/26/2006
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crdnot.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(crdnot,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crdnot,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CRDTYP = crdnot.crdtyp
	type String CRDNUM = crdnot.crdnum
	type String NNUM = crdnot.nnum

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CRDTYP").exists()!vx("CRDNUM").exists()!vx("NNUM").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRDNOT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRDNOT","CRDTYP = :crdnot.crdtyp and CRDNUM = :crdnot.crdnum and NNUM = :crdnot.nnum") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CRDTYP
	type public String CRDNUM
	type public String NNUM

	type RecordCRDNOT crdnot = Db.getRecord("CRDNOT","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM,NNUM=:NNUM")
	if (%ProcessMode = 2) do {
		do crdnot.setMode(2)

		do CRDNOTFL(crdnot,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRDNOT crdnot

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRDNOT","CRDTYP = :crdnot.crdtyp and CRDNUM = :crdnot.crdnum and NNUM = :crdnot.nnum") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crdnot)) K:$D(vobj(crdnot,1,1)) ^CARD(vobj(crdnot,-3),vobj(crdnot,-4),"N",vobj(crdnot,-5)) S ^CARD(vobj(crdnot,-3),vobj(crdnot,-4),"N",vobj(crdnot,-5))=vobj(crdnot)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(crdnot,1,1)) N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(crdnot,1,1)) S vS1=vS1+1,^CARD(vobj(crdnot,-3),vobj(crdnot,-4),"N",vobj(crdnot,-5),vS1)=$E(vobj(crdnot,1,1),vS2,vS2+449)
			#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.crdnot)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRDNOT crdnot

	if vpar["/JOURNAL/" do VJOURNAL(.crdnot)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^CARD(vobj(crdnot,-3),vobj(crdnot,-4),"N",vobj(crdnot,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordCRDNOT crdnot

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRDNOT crdnot

	if crdnot.crdtyp.isNull() do vreqerr("CRDTYP") quit
	if crdnot.crdnum.isNull() do vreqerr("CRDNUM") quit
	if crdnot.nnum.isNull() do vreqerr("NNUM") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDNOT","MSG",1767,"CRDNOT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCRDNOT crdnot
	if 'crdnot.crdnum.isNull() set vfkey("^CARD("_""""_crdnot.crdtyp_""""_","_""""_crdnot.crdnum_""""_")")="CRDNOT(CRDTYP,CRDNUM) -> CRD"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCRDNOT crdnot
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CRD",":crdnot.crdtyp,:crdnot.crdnum") set vERRMSG = $$^MSG(8563,"CRDNOT(CRDTYP,CRDNUM) -> CRD") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCRDNOT crdnot
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(crdnot,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_TRIGGER - After insert,delete,update trigger

	do vad1

	quit

vau1 // Trigger AFTER_TRIGGER - After insert,delete,update trigger

	do vad1

	quit

vad1 // Trigger AFTER_TRIGGER - After insert,delete,update trigger

	type public RecordCRDNOT crdnot
	/*
	----Revision History---------------------------------------------------
	
	07/25/06 - Pete Chenard - CR 22385
		   Removed unsupported parameter from bypassSave() call.

	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 System Area Clean up.
	
	-----------------------------------------------------------------------
	*/

	type public Number ACN
	
	if ACN.exists()=0 set ACN=crdnot.acn	

	if %ProcessMode=1 do {
		type String TCMT
		
		//CIF ~p1 card# ~p2 note# ~p3 modified
		set TCMT=$$^MSG(5568,crdnot.acn,crdnot.crdnum,crdnot.nnum)
		do CIFHBLD^CIFFUNCS(TCMT)
		}
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:crdnot.acn",1)
	if cif.getMode() do {
		set cif.fmld=%SystemDate
		do cif.bypassSave()
		}
	
	quit

vbi1 // Trigger BEFORE_INSERT_UPD - before update and insert of a card note

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT_UPD - before update and insert of a card note

	type public RecordCRDNOT crdnot
	do crdnot.setAuditFlag(1)
	// always default these values during insert and create
	if crdnot.lupd'=%SystemDate set crdnot.lupd=%SystemDate
	if crdnot.uid'=%UserID set crdnot.uid=%UserID
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRDNOT crdnot

	if crdnot.crdtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CRDTYP", vRM) quit
	if crdnot.crdnum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CRDNUM", vRM) quit
	set X = crdnot.nnum if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("NNUM", vRM) quit
	if crdnot.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = crdnot.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = crdnot.lupd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LUPD", vRM) quit
	if crdnot.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDNOT","MSG",979,"CRDNOT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCRDNOT crdnot)	//CRDNOT Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="O" do {
			do vj1(.crdnot)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="O" do {
			do vj2(.crdnot)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="O" do {
			do vj3(.crdnot)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordCRDNOT crdnot)	// HIST_D  Table CIFH  Card Notes insert history

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crdnot.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(5569,crdnot.acn,crdnot.crdnum,crdnot.nnum)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCRDNOT crdnot)	// HIST_I  Table CIFH  Card Notes insert history

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crdnot.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(5567,crdnot.acn,crdnot.crdnum,crdnot.nnum)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordCRDNOT crdnot)	// HIST_U  Table CIFH  Card Notes update history

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey
		set v1=crdnot.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$^MSG(5568,crdnot.acn,crdnot.crdnum,crdnot.nnum)
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordCRDNOT crdnot

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CRDTYP").exists() set vux("CRDTYP") = vx("CRDTYP")
	if vx("CRDNUM").exists() set vux("CRDNUM") = vx("CRDNUM")
	if vx("NNUM").exists() set vux("NNUM") = vx("NNUM")
	do vkey(1) set voldkey = crdnot.crdtyp_","_crdnot.crdnum_","_crdnot.nnum // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crdnot.crdtyp_","_crdnot.crdnum_","_crdnot.nnum // Copy new keys into object
	type RecordCRDNOT vnewrec = crdnot.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRDNOT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRDNOT crdnot

	if vux("CRDTYP").exists() set crdnot.crdtyp = vux("CRDTYP").piece("|",i)
	if vux("CRDNUM").exists() set crdnot.crdnum = vux("CRDNUM").piece("|",i)
	if vux("NNUM").exists() set crdnot.nnum = vux("NNUM").piece("|",i)
	quit
