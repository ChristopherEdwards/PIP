LNPL3FIL(RecordLNPL3 lnpl3, String vpar, Boolean vparNorm) // LNPL3 - Problem Loan Restructures Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Journal File Definition (1)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnpl3.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnpl3,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnpl3,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNPL3",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNPL3","CID = :lnpl3.cid")        // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordLNPL3 lnpl3 = Db.getRecord("LNPL3","CID=:CID")
	if (%ProcessMode = 2) do {
		do lnpl3.setMode(2)

		do LNPL3FIL(lnpl3,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNPL3 lnpl3

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNPL3","CID = :lnpl3.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnpl3)) S ^LNOLC(3,vobj(lnpl3,-3))=vobj(lnpl3)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnpl3)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNPL3 lnpl3

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.lnpl3)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNOLC(3,vobj(lnpl3,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNPL3 lnpl3

	if lnpl3.latt.isNull() do vreqerr("LATT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNPL3 lnpl3

	if lnpl3.cid.isNull() do vreqerr("CID") quit

		if vx("LATT").exists(),lnpl3.latt.isNull() do vreqerr("LATT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPL3","MSG",1767,"LNPL3."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNPL3 lnpl3
	if 'lnpl3.cid.isNull() set vfkey("^ACN("_""""_lnpl3.cid_""""_","_50_")")="LNPL3(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNPL3 lnpl3
	type public Number %O
	type String vERRMSG

	if 'lnpl3.cid.isNull() if 'Db.isDefined("LN",":lnpl3.cid") set vERRMSG = $$^MSG(8563,"LNPL3(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNPL3 lnpl3

	set X = lnpl3.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if lnpl3.baad.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BAAD", vRM) quit
	if lnpl3.baad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BAAD2", vRM) quit
	if lnpl3.batf.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BATF", vRM) quit
	if lnpl3.batn.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BATN", vRM) quit
	if lnpl3.batp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("BATP", vRM) quit
	if lnpl3.cac.length()>6 set vRM = $$^MSG(1076,6) do vdderr("CAC", vRM) quit
	if lnpl3.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = lnpl3.latt if 'X.isNull(),'Db.isDefined("UTBLATT","X") set vRM = $$^MSG(1485,X) do vdderr("LATT", vRM) quit
	set X = lnpl3.olr if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPL3.OLR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPL3","MSG",979,"LNPL3."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNPL3 lnpl3)	//LNPL3 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.lnpl3)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj1(.lnpl3)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNPL3 lnpl3)	// HIST_U  Table HIST  Maintenance history

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnpl3.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNPL3",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNPL3 lnpl3

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(lnpl3,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(lnpl3,-3) = vnewkey // Copy new keys into object
	type RecordLNPL3 vnewrec = lnpl3.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNPL3",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(lnpl3,-3) = vux.piece("|",1)                  // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordLNPL3 lnpl3
	type public String vpar

	do Db.delete("LNPL3A","CID=:lnpl3.cid",vpar)           // Cascade delete

	quit
