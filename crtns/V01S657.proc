V01S657(%ProcessMode,RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())   //PBS -  - SID= <UTBLDFT> Default Group Table Maintenance
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:54 - shetyes
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="UTBLDFT",VPGM=$T(+0),VSNAME="Default Group Table Maintenance"
 set VFSN("UTBLDFT")="zDFT",VFSN("UTBLDFT1")="zfUTBLDFT"
 set vPSL=1
 set KEYS(1)=fUTBLDFT.DFTTYP
 set KEYS(2)=fUTBLDFT.DFTGRP
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=14 do VPR(.fUTBLDFT,.DFT()),VDA1(.fUTBLDFT,.DFT()),V5^DBSPNT quit

 set ER=0 do VSCRPRE(.fUTBLDFT,.DFT()) if ER quit  // Screen Pre-Processor
 
 if '%ProcessMode do VNEW(.fUTBLDFT,.DFT()),VPR(.fUTBLDFT,.DFT()),VDA1(.fUTBLDFT,.DFT())
 if %ProcessMode do VLOD(.fUTBLDFT,.DFT()) quit:$G(ER)  do VPR(.fUTBLDFT,.DFT()),VDA1(.fUTBLDFT,.DFT())

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLDFT,.DFT())
 type Number ptr
 set ptr=""
 for  set ptr = DFT(ptr).order() quit:ptr.isNull()  do {
     if DFT(ptr).DINAM="" kill DFT(ptr)
     }
	quit


VNEW(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) // Initialize arrays if %O=0
 
 do VDEF(.fUTBLDFT,.DFT())
 do VLOD(.fUTBLDFT,.DFT())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) // Load data from disc - %O = (1-5)
 if '$D(%REPEAT) set %REPEAT=14
 if '$D(%MODS) set %MODS=1
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) // Display screen prompts
 set VO="6||13|"
 set VO(0)="|0"
 set VO(1)=$C(1,27,26,1,0,0,0,0,0,0)_"01T Default Group User Table "
 set VO(2)=$C(3,10,14,0,0,0,0,0,0,0)_"01T Default Type:"
 set VO(3)=$C(4,9,15,0,0,0,0,0,0,0)_"01T Default Group:"
 set VO(4)=$C(5,5,19,1,0,0,0,0,0,0)_"01T Group Description:"
 set VO(5)=$C(7,5,9,2,0,0,0,0,0,0)_"01TData Item"
 set VO(6)=$C(7,35,13,2,0,0,0,0,0,0)_"01TDefault Value"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())  // Display screen data
 new V
 //
 set VO="9|7|13|"
 set VO(7)=$C(3,25,4,2,0,0,0,0,0,0)_"01T"_$E(fUTBLDFT.DFTTYP,1,4)
 set VO(8)=$C(4,25,4,2,0,0,0,0,0,0)_"01T"_$E(fUTBLDFT.DFTGRP,1,4)
 set VO(9)=$C(5,25,40,2,0,0,0,0,0,0)_"00T"_$E(fUTBLDFT.DESC,1,40)
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+2,DY=9 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLDFT,.DFT())
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())  // Display data %REPEAT times
 //instantiate new object if necessary
  if 'DFT(I).getPointer() do {
     set DFT(I)=Class.new("RecordUTBLDFT","$G(KEYS(1)),$G(KEYS(2))")
     }
 set VO(VX+1)=$C(DY,5,20,2,0,0,0,0,0,0)_"01T"_$E(DFT(I).DINAM,1,20)
 set VO(VX+2)=$C(DY,35,40,2,0,0,0,0,0,0)_"00T"_$E(DFT(I).VALUE,1,40)
 set DY=DY+1,VX=VX+2
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %REPREQ=5 set %MODGRP=1
 set %MODOFF=3,%MOD=2,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=1,VPB=8+%REPEAT,BLKSIZ=(60*%REPEAT)+48,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLDFT1,UTBLDFT",VSCRPP=1
 set OLNTB=VPB*1000
 
 set VFSN("UTBLDFT")="zDFT",VFSN("UTBLDFT1")="zfUTBLDFT"
 //
 for I=6:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(2,24,4)_"21T12401|1|[UTBLDFT1]DFTTYP"
 set %TAB(2)=$C(3,24,4)_"21T12402|1|[UTBLDFT1]DFTGRP"
 set %TAB(3)=$C(4,24,40)_"01T12401||[UTBLDFT1]DESC"
 set %TAB(4)=$C(8,4,20)_"20T12403|1|[UTBLDFT]DINAM|||do VP1^V01S657(.fUTBLDFT,.DFT)"
 set %TAB(5)=$C(8,34,40)_"00T12401|1|[UTBLDFT]VALUE|||do VP2^V01S657(.fUTBLDFT,.DFT)|do VP3^V01S657(.fUTBLDFT,.DFT)"
 do VTBL(.fUTBLDFT,.DFT())
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit



 quit

VSPP

 do VSPPREQ(.fUTBLDFT,.DFT()) if ER quit


VSPPREQ(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) 
 //_______________________________________________________
 //  User Defined Required Data Item Definitions
 //_______________________________________________________

 set ER=0

 for I=%MODS:1:%REPEAT+%MODS-1 do VR1(.fUTBLDFT,.DFT()) if ER set NI=((I-1)*2)+(1+%MODOFF) quit
 quit

VR1(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) 

 // ([UTBLDFT]DINAM,[UTBLDFT]VALUE)

 I (DFT(I).DINAM'=""),(DFT(I).VALUE'="") quit


 // ([UTBLDFT]DINAM,[UTBLDFT]VALUE-)

 I (DFT(I).DINAM'=""),(DFT(I).VALUE="") quit


 // ([UTBLDFT]DINAM-,[UTBLDFT]VALUE-)

 I (DFT(I).DINAM=""),(DFT(I).VALUE="") quit

 do VR99 quit

VR99 
 set RM="Missing required field(s)/data item set definition error"
 set ER=1 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) //
	type Public String DI(),NI,SVI(),X
	type Number I

	quit:X=""!(X="?")!(X="!")

	do CHK(X) quit:ER 

	// Save data item attributes for input validation 

	set SVI(NI+1)="" 
	for I=2,5,6,9,12,13,14 set SVI(NI+1)=SVI(NI+1)_DI(I)_"|" 

	quit
 

Private CHK(String X) // Validate data item

	type Public String DFID,DLIB,FILES

	type String FID	 // type FID locally as DBSDI utility alters FID

	//Invalid format ~p1

	if X'["["!(X'["]") do Runtime.setErrMSG("UTBLDFT",1350) quit:ER

	//Data item name required

	if X["[",X.piece("]",2)="" do Runtime.setErrMSG("UTBLDFT",731) quit:ER

	set FILES=UTBL("DFTTYP").piece("|",2)  
	set DFID=FILES.piece(",",1),DLIB=%LIBS 
	do ^DBSDI quit:ER  

	//Invalid file ~p1

	if FID'=DFID do Runtime.setErrMSG("UTBLDFT",1334) quit:ER

	//Computed data items not allowed - ~p1

	if DI(16).length() do Runtime.setErrMSG("UTBLDFT",597) quit:ER

	//Data item cannot be file-maintained

	if DI(23) do Runtime.setErrMSG("UTBLDFT",728) quit:ER
	quit

VP2(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) //
	type public String %MSKE,RM
	type public Boolean ER
	type Boolean ZRBLER
	type Number E67
	type String E8
	
	quit:X.isNull()
	quit:SVI(NI).get()="" 

	set E67=+SVI(NI)             // Length 
	set E8=SVI(NI).piece("|",4)  // Format 

	if %MSKE="" N %MSKE S %MSKE="."             
	if E8="$",X[(%MSKE_"00") S X=$$INT^%ZM(X,E8,%MSKE)         

	do CHANGE^DBSMACRO("TBL",SVI(NI).piece("|",2))  // Table look-up 
	do CHANGE^DBSMACRO("PAT",SVI(NI).piece("|",3))  // Pattern match 
	do CHANGE^DBSMACRO("MIN",SVI(NI).piece("|",5))  // Minimum value 
	do CHANGE^DBSMACRO("MAX",SVI(NI).piece("|",6))  // Maximum value  
	do CHANGE^DBSMACRO("DEC",SVI(NI).piece("|",7))  // Decimal precision
	if 'ZTBLER.data() quit
                
	set ER="W" 
	do CHANGE^DBSMACRO("TBL","")               

	// Warning - table look-up on this data item cannot be validated

	do Runtime.setErrMSG("UTBLDFT",2971) quit:ER
	quit


VP3(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT()) //
	type public String I(),SVI()
	type Boolean ZTBLER

	quit:SVI(NI).get()="" 

	set E67=+SVI(NI)      // Length 
	set E8=SVI(NI).piece("|",4)    // Format 

	do CHANGE^DBSMACRO("TBL",SVI(NI).piece("|",2)) // Table look-up 
	do CHANGE^DBSMACRO("PAT",SVI(NI).piece("|",3)) // Pattern match 
	do CHANGE^DBSMACRO("MIN",SVI(NI).piece("|",5)) // Minimum value 
	do CHANGE^DBSMACRO("MAX",SVI(NI).piece("|",6)) // Maximum value 
	do CHANGE^DBSMACRO("PAT",SVI(NI).piece("|",7)) // Decimal precision 

	if I(3)'="" do I3CHK(.I)

	quit

 
I3CHK(String I())  // I array containing screen display information

	type String J,X,Y 

	set X=I(3) 

	if X.extract()[ "[" set X=$$GETTBL(X) if X="" set I(3)="",ZTBLER=1 quit
	set X=X.piece("(",2)        

	for J=1:1 set Y=X.piece(",",J) do { quit:Y="" 
		if Y'["""" set I(3)="",ZTBLER=1 quit
		}

	quit

Private GETTBL(String tbl)  // Input table name
                                
	type Public String global,newkeys 

	set tbl=tbl.piece("]",1),tbl=tbl.piece("[",2)    //parse table ref
	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS,FID=:tbl")
	set global=(dbtbl1.glref)
	set newkeys=$$TRIMKEYS(global) quit:newkeys="" "" 
	set tbl=global.piece("(",1)_"("_newkeys           //  Build global ref 

	quit tbl                                          //  Return global ref 

 
Public TRIMKEYS(String global)  // Input the Global Reference

	type String keys,keyval,newkeys
	type Number i,nonlit 
 
	set newkeys="",nonlit=0 
	set keys=global.piece("(",2) quit:keys="" "" //get keys from global ref 
 
	for i=1:1:keys.length(",") do { quit:(nonlit>1)   // parse key dinams
		set keyval=keys.piece(",",i)     // to find only the literals 
		if '$$LITERAL(keyval) set nonlit=nonlit+1 quit  
		//Not a literal key 
		set newkeys=newkeys_keyval_","         // Keep the literals 
		}

	if (nonlit>1) set newkeys="" 

	quit newkeys                        // return key list of literals


Public LITERAL(String dinam)  //Checking for Numeric or String Literal

	if dinam=+dinam quit 1                 //  Numeric key value 
	if dinam.extract()=$CHAR(34) quit 1    //  Quoted string value          
	quit 0                                 // Not a literal

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLDFT1 fUTBLDFT
 type Public RecordUTBLDFT DFT()
 do VPR(.fUTBLDFT,.DFT())
 do VDA1(.fUTBLDFT,.DFT())
 do ^DBSPNT()
 quit

VW(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())
 do VDA1(.fUTBLDFT,.DFT())
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())
 do VDA1(.fUTBLDFT,.DFT())
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLDFT1 fUTBLDFT
 type Public RecordUTBLDFT DFT()
 do VDA1(.fUTBLDFT,.DFT())
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLDFT1 fUTBLDFT
 if sn="UTBLDFT1" do vSET1(.fUTBLDFT,di,X)
 type Public RecordUTBLDFT DFT()
 if sn="UTBLDFT" do vSET2(DFT(I(1)),di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordUTBLDFT1 fUTBLDFT,di,X)
 do fUTBLDFT.setAuditFlag(1)
 set fUTBLDFT.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET2(RecordUTBLDFT DFT,di,X)
 do DFT.setAuditFlag(1)
 set DFT.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordUTBLDFT1 fUTBLDFT
 if fid="UTBLDFT1" quit $$vREAD1(.fUTBLDFT,di)
 type Public RecordUTBLDFT DFT()
 if fid="UTBLDFT" quit $$vREAD2(DFT(I(1)),di)
 quit ""
vREAD1(RecordUTBLDFT1 fUTBLDFT,di)
 quit fUTBLDFT.@di
vREAD2(RecordUTBLDFT DFT,di)
 quit DFT.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 //
VSCRPRE(RecordUTBLDFT1 fUTBLDFT,RecordUTBLDFT DFT())  // Screen Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
	type public String UTBL()
	
	set UTBL("DFTTYP")=""
	type ResultSet rs=Db.select("DESCR,DFID","UTBLDFTT","DFTTYP=:DFTTYP")
	while rs.next() do {
 		set UTBL("DFTTYP")= rs.getCol("DESCR")_"|"_rs.getCol("DFID")
		}
	
 
 #ACCEPT date=11/05/03;PGM=Screen Compiler
 quit
