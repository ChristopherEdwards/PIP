BCHSRVAN //Batch BCHSRVANL - Service fee processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHSRVANL Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHSRVANL",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHSRVANL","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHSRVANL","*","",CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	/* 
	Though this section is a PUBLIC section, prior to calling it,
	the variable PLTP must be set to 0. It is used to indicate that
	the processing being performed is service fee and combined commercial
	analysis processing for Lead accounts (dep.anltyp=1)
	*/


	kill %TRN
	set SCND=%SystemDate

	set FEECAT=0
	do Db.delete("SRVD","CID=:CID AND PLTP=:PLTP AND SCND=:SCND AND FEECAT=:FEECAT")	// for all types
	set FEECAT=4
	do Db.delete("SRVD","CID=:CID AND PLTP=:PLTP AND SCND=:SCND AND FEECAT=:FEECAT")	// for all types
	
	
	new ts,ttxset
	type TranSet ts
 	set ts=Class.new("TranSet")

 	set ttxset=0
		
	new dep
	type RecordDEP dep
	set dep=Db.getRecord("DEP","CID")

	if 'PLTP,dep.scnd'=%SystemDate quit	// Service Charge - Next Date
	
	set CID=dep.cid				//  Original Account Number

	do PROC^BCHFEEUT(CID,1,%SystemDate,.ts,.dep) if ER quit
	
	// ttxset will be set to 1 if a transaction was created
	if ttxset do { 
		new par
		set par("IPMODE")=3
		set par("OPTION")=2
		do ts.postTSet(%SystemDate,BRCD,.par)
	}

	do BUMP^BCHFEEUT(.dep)
	
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set PLTP=0
	set SRC="FEE"

	// Retrieve batch teller information
	do %UID^BCHFEEUT(PLTP)
	if ER quit

	set XTJD=%SystemDate

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","DEP","DEP.SCND=:XTJD and DEP.ANLTYP='1'")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set PLTP=0
	set SRC="FEE"
	do %UID^BCHFEEUT(PLTP)
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	// Update ^SRVH global
 
	type String feepln
 
	set feepln = ""
 
	for  set feepln = FEEPLN(feepln).order() quit:feepln.isNull()  do {
		
		type Date XSCND
		type String XFEEPLN
		
		set XFEEPLN = feepln		//KEY 1
		set XSCND = %SystemDate		//KEY 2
		
		quit:Db.isDefined("SRVH","XFEEPLN,XSCND")
		
		type RecordSRVH srvh = Class.new("RecordSRVH", "FEEPLN=:XFEEPLN,SCND=:XSCND")
		
		set srvh.base = FEEPLN(feepln).piece("|", 2)
		set srvh.feemin = FEEPLN(feepln).piece("|", 3)
		set srvh.feemax = FEEPLN(feepln).piece("|", 4)
		set srvh.feebal = FEEPLN(feepln).piece("|", 5)
		set srvh.curflag = FEEPLN(feepln).piece("|",9)
		set srvh.plancur = FEEPLN(feepln).piece("|", 10)
		set srvh.planexc = FEEPLN(feepln).piece("|", 11)
		
		do srvh.save()
	} 
 
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	/*
	Set up entries in ^TTX(TPD,BRCD,%UID) by calling TTXLOK,
	then release the lock on ^TTX(TPD,BRCD,%UID)
	*/

	set STATUS=0 do ^TTXLOK if ER quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	do OFFSET^TTXBLD(%SystemDate,BRCD,%UserID,"BCHSRVFEE")
 
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
