DEP101F(RecordDEP101 dep101, String vpar, Boolean vparNorm) // DEP101 - Sweep Relationship (Invest #s) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:15 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (4)                      12/05/2006
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dep101.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dep101,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dep101,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = dep101.cid
	type String ICID = dep101.icid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ICID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEP101",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEP101","CID = :dep101.cid and ICID = :dep101.icid") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ICID

	type RecordDEP101 dep101 = Db.getRecord("DEP101","CID=:CID,ICID=:ICID")
	if (%ProcessMode = 2) do {
		do dep101.setMode(2)

		do DEP101F(dep101,vpar)
	}
	else  do VINDEX(dep101)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEP101 dep101

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEP101","CID = :dep101.cid and ICID = :dep101.icid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dep101)) S ^ACN(vobj(dep101,-3),101,vobj(dep101,-4))=vobj(dep101)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.dep101)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.dep101) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEP101 dep101

	if vpar["/INDEX/" do VINDEX(.dep101)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.dep101)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(dep101,-3),101,vobj(dep101,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordDEP101 dep101

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEP101 dep101

	if dep101.cid.isNull() do vreqerr("CID") quit
	if dep101.icid.isNull() do vreqerr("ICID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEP101","MSG",1767,"DEP101."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDEP101 dep101
	if vx("").order().isNull() do AUDIT^UCUTILN(dep101,.vx(),1,"|") quit
	if vx("PCT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(dep101,.vx(),1,"|")
	quit


vbd1 // Trigger BEFORE_DELETE - Before Delete Trigger

	type public RecordDEP101 dep101
	/*
	---- Revision History ------------------------------------------------

	03/16/00 - HAYMANP - 37650
		   Modified to recognize SWPOPT 3 and process the same as 2.

	09/15/99 - CARROLLJ - 33890
		   Convert to PSL.
	
	03/04/98 - SMITHC - 49801
		   Added the automatic resetting of IOPT and ITRF for linked
		   percentage-based investment accounts.
	*/


	type RecordDEP dep=Db.getRecord("DEP","CID")
	if dep.swpopt<2 quit                  // Not Percentage Based
	
	// Reset the following data items on existing investment account
	new FLG,IOPT,ITRF
	set FLG=""                             // No restrictions
	set IOPT=""                            // Remain on Deposit
	set ITRF=""                            // No Interest Transfer Account
	do Db.update("DEP","FLG=:FLG,IOPT=:IOPT,ITRF=:ITRF","CID=:ICID")
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordDEP101 dep101
	
	/*
	---- Revision History ------------------------------------------------
	12/23/05 - ALAGARSS - CR 18006
		   The section NEWINV was modified ,the statement
		   (set acnaddr1.cid =dep101.icid) was included to change 
		   the CID of the newly copied record to hold the investment
		   account number.
		
	
	09/08/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also removed pre-2003
		   revision history.

	12/30/03 - CARROLLJ - CR7658
		   Added #ACCEPT prior to xecute command.

	03/20/03 - Spier - 51423
		   Modified  use of copy method to not pass paramater, 
		   instead use setMode method to indicate it should be 
		   inserted.
	
	For valid percentage based transaction (sweep) accounts:
	  . The restriction flag will be set to 3 (Restrict Both DRs and CRs).
	  . Investment accounts will be created here automatically if the
	    investment account does not exist.
	*/


	type RecordDEP dep=Db.getRecord("DEP","CID")

	// Invalid sweep account
	if 'dep.swpf!('dep.swpopt) do Runtime.setErrMSG("DEP101",1474) quit:ER 
	
	// Force the following data items on pct-based investment accounts
	if dep.swpopt>1 new FLG,IOPT,ITRF do {
		// Restrict Both DRs and CRs
		set FLG=3	
		// Transfer to Another Account
		set IOPT=2         
		// Interest Transfer Account	
		set ITRF=CID 
		}
	
	if Db.isDefined("DEP","dep101.icid") do CHKICID(dep101.icid,.dep101) quit 
	
	// Investment account does not exist, so create it automatically
	do NEWINV(dep101.itype,.dep101,.dep) quit:ER 
	quit 


CHKICID(Number ICID,RecordDEP101 dep101)

	type Public Number CID
	type Public String ER,FLG,IOPT,ITRF

	type Boolean SWPNI
	type Number BAL,CACN,NEGACR,POSACR,SWPF
	type String CLS,GRP
	
	/*
	Owner verification must be performed in both directions in case there
	are more owners for one account than for the other
	
	Verify that all owners of transaction account are also owners of
	investment account
	*/

	// 11982 - Replaced RELACN with RELCIF
	type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
	if 'rs.isEmpty() while rs.next() do { quit:ER
		set CACN=rs.getCol(1)
		// Account ~p1 is not owned by CIF ~p2
		if 'Db.isDefined("RELCIF","CACN,ICID") do Runtime.setErrMSG("DEP101",4365,"ICID~CACN") quit:ER 
		}
	/*
	Verify that all owners of investment account are also owners of
	transaction account

	Number of transaction account owners not equal to number of investment 
	account owners - further checking required
	*/

	// 11982 - Replaced RELACN with RELCIF
	type ResultSet rs=Db.select("ACN","RELCIF","CID=:ICID")
	if 'rs.isEmpty() while rs.next() do { quit:ER
		set CACN=rs.getCol(1)
		// Account ~p1 is not owned by CIF ~p2
		if 'Db.isDefined("RELCIF","CACN,CID") do Runtime.setErrMSG("DEP101",4365,"CID~CACN") quit:ER 
		}
	
	type RecordDEP depicid=Db.getRecord("DEP","CID=:ICID")
	
	set BAL=depicid.bal
	set CLS=depicid.cls
	set GRP=depicid.grp
	set SWPF=depicid.swpf
	set SWPNI=depicid.swpni
	
	if depicid.swpopt>1 do {
		set NEGACR=depicid.negacr
		set POSACR=depicid.posacr
		}

	// Must be a deposit account
	if CLS'="D" do Runtime.setErrMSG("DEP101",1791) quit:ER 

	// Not an allowable investment type
	if SWPF'=2 do Runtime.setErrMSG("DEP101",2029) quit:ER 

	// Group ~p1 not valid for investment sweep processing
	if GRP="ESC" do Runtime.setErrMSG("DEP101",2853,GRP) quit:ER 
	
	// TITOVE - 47573 - If this is an institution account, skip the rest
	quit:'SWPNI

	// Continue only if sweep acount is percentage based
	if depicid.swpopt=1 quit 
	
	// Ledger and accrual balances for investment account ~p1 must be zero
	if BAL!NEGACR!POSACR do Runtime.setErrMSG("DEP101",2847,ICID) quit:ER 
	
	// Procedure INVPCT
	do VERPCT^PROCIPCT(ICID,dep101.pct,1) quit:ER
	
	// Force the following data items on existing investment account
	do Db.update("DEP","FLG=:FLG,IOPT=:IOPT,ITRF=:ITRF","CID=:ICID")
	
	quit 

NEWINV(TYPE,RecordDEP101 dep101,RecordDEP dep)

	// Investment account required for priority input
	if dep.swpopt=1 do Runtime.setErrMSG("DEP101",1527) quit:ER 
	
	// Procedure INVTYPE
	do VERTYPE^PROCINV(TYPE,%SystemCurrency) quit:ER
	// Procedure INVPCT
	do VERPCT^PROCIPCT(dep101.icid,dep101.pct,0) quit:ER
	
	new ACN,ACNRELC,BOO,BWF,CC,CCODE,CRCD,LNM,NR,PERS,PGM,SCID,USRESTAT
	new TITLE1,TITLE2,TITLE3,TITLE4,vfkey
	
	// Load local variables with sweep (core) account data
	set BOO=dep.boo 

	// Currency Code
	set CRCD=dep.crcd

	// Account Title - Line 1
	set TITLE1=dep.title1 

	// Account Title - Line 2
	set TITLE2=dep.title2

	// Account Title - Line 3
	set TITLE3=dep.title3

	// Account Title - Line 4
	set TITLE4=dep.title4

	// Report Short Name
	set LNM=dep.lnm

	// Cost Center
	set CC=dep.cc

	// Personal/Non-Personal Code
	set PERS=dep.pers

	// Customer Code
	set CCODE=dep.ccode

	// Customer Number
	set ACN=dep.acn

	// Account Relationship Code
	set ACNRELC=dep.acnrelc

	// Nonresident Indicator
	set NR=dep.nr

	// Backup Withholding
	set BWF=dep.bwf          

	// U. S. Residency Status
	set USRESTAT=dep.usrestat

	
	new dep
	
	type RecordDEP dep=Class.new("RecordDEP")
	do dep.default(TYPE)
	set dep.cid=dep101.icid
	set dep.type=TYPE
	do AVL^NEW(TYPE) quit:ER 
	
	// Save sweep account #
	set SCID=CID           
	new CID
	// Use Investment account #
	set CID=dep101.icid
	
	// Load investment account data from local variables
	set dep.boo=BOO
	set dep.title1=TITLE1
	set dep.title2=TITLE2
	set dep.title3=TITLE3
	set dep.title4=TITLE4
	set dep.lnm=LNM
	set dep.cc=CC
	set dep.pers=PERS
	set dep.ccode=CCODE
	set dep.acn=ACN
	set dep.acnrelc=ACNRELC
	set dep.nr=NR
	set dep.bwf=BWF
	set dep.usrestat=USRESTAT
	
	// Force the following data items on new investment account
	// Restrict Flag
	set dep.flg=FLG  

	// Interest Disbursement Option
	set dep.iopt=IOPT              

	// Interest Transfer Account
	set dep.itrf=ITRF           
	
	// New account record
	do dep.save("/NOFKCHK") quit:ER

	// Account address file	
	type RecordACNADDR acnaddr=Db.getRecord("ACNADDR",SCID)		//AV
	type RecordACNADDR acnaddr1=acnaddr.copy()
	set acnaddr1.cid=dep101.icid
	do acnaddr1.setMode(0)
	do acnaddr1.save("/NOFKCHK")
	
	// Create CIF relationship records
	new rs,CACN,CROLE,CFSID,CPROINQ,CPROFANA,CS1099,RELDATA
	type ResultSet rs=Db.select("ACN,ROLE,FSID,PROINQ,PROFANA,S1099","RELCIF","CID=:SCID")
	if rs.isEmpty() quit
	while rs.next() do {  quit:ER
		new relcif,xacn
		type RecordRELCIF relcif=Class.new("RecordRELCIF")

		set relcif.cid=CID
		set relcif.acn=rs.getCol(1)
		set relcif.role=rs.getCol(2)
		set relcif.fsid=rs.getCol(3)
		set relcif.proinq=$S(rs.getCol(4)'="":rs.getCol(4),1:0)
		set relcif.profana=$S(rs.getCol(5)'="":rs.getCol(5),1:0)
		set relcif.s1099=$S(rs.getCol(6)'="":rs.getCol(6),1:0)
		do relcif.save("/NOFKCHK")
		}

	// Verify foreign keys
	do vfkey^SQLBUF

	/*
	If custom account assignment program used, call update section
	to update any necessary tables.  Call will be constructed
	as PGM=UPD^UCIDSCA("D","DDA",400,87438473), for example
	*/
	set PGM=Db.getOneRow("UCID","CUVAR")
	if PGM'="" do {
		set PGM="D UPD"_PGM_"(""D"","""_dep.grp_""","_dep.type_","_CID_")"
		#ACCEPT DATE=12/30/03;PGM=John Carroll
		xecute PGM
		}
	quit 

vbu1 // Trigger BU_PCT - Before Update Percentage Allocation

	type public RecordDEP101 dep101
	do dep101.setAuditFlag(1)
	
	do VERPCT^PROCIPCT(dep101.icid,dep101.pct,1) quit:ER   // Procedure INVPCT
	quit
	

vai1 // Trigger DEP_FMLD - Update DEP File Maintenance - Last Date

	do vad1

	quit

vau1 // Trigger DEP_FMLD - Update DEP File Maintenance - Last Date

	do vad1

	quit

vad1 // Trigger DEP_FMLD - Update DEP File Maintenance - Last Date

	type public RecordDEP101 dep101
	/*
	---- Revision History ------------------------------------------------

			12/05/06 - Ravindra Rathi - CR 23043
																Added a condition to check the curreny of investment account  
																and sweep account. If investment account does not have same 
																currency as sweep account an error message "Investment account 
																must be same currency as sweep account" is displayed.
		 
			02/27/01 - HALPINJ - 43406
	      Added newing of UX to prevent going into update triggers
	      of DEP and getting "Record Already Exists" errors.
	
	----------------------------------------------------------------------
*/

	new UX   // JMH - 02/27/01
	type Public String ER
	type Number ICID

	
	type RecordDEP dep=Db.getRecord("DEP","CID")
	set dep.fmld.journal=0,dep.fmld=%SystemDate
	do dep.save()
	
	if (%ProcessMode=0) do { 
		
		set ICID=dep101.icid

		type RecordDEP dep=Db.getRecord("DEP","CID")
	
		type RecordDEP depscid=Db.getRecord("DEP","CID=:ICID")

		// Investment account must be same currency as sweep account
		if depscid.crcd'=dep.crcd do Runtime.setErrMSG("STBLMSG",6175) if ER quit
	
		}
	quit
	
	
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEP101 dep101

	set X = dep101.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = dep101.icid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("ICID", vRM) quit
	set X = dep101.cprio if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CPRIO", vRM) quit
	set X = dep101.itype if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("ITYPE", vRM) quit
	set X = dep101.pct if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PCT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEP101","MSG",979,"DEP101."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEP101 dep101)	//DEP101 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.dep101)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HISTFM_D
			}
		else  if TSRC="O" do {
			do vj1(.dep101)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HISTFM_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.dep101)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HISTFM_I
			}
		else  if TSRC="O" do {
			do vj2(.dep101)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HISTFM_I
			}
		}

	quit


vj1(RecordDEP101 dep101)	// HISTFM_D  Table HIST  History Investment Account Deleted

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=dep101.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5617",dep101.icid,"REMOVED")
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEP101 dep101)	// HISTFM_I  Table HIST  History Investment Account Added

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=dep101.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5617",dep101.icid,"ADDED")
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordDEP101 dep101) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.dep101)
	do vi2(.dep101)
	do vi3(.dep101)

	quit
	

vi1(RecordDEP101 dep101) // Maintain SWP102 index entries (Sweep Processing 102)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep101.icid
	type String v3 = dep101.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(dep101,-3),101,vobj(dep101,-4)))#2,'$D(^ACN(v1,102,v3)) do vidxerr("SWP102")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^ACN(v1,102,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^ACN(v1,102,v3)
	#ENDBYPASS
	quit

vi2(RecordDEP101 dep101) // Maintain XREFSWP index entries (Sweep Processing X-REF)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep101.cid
	type String v3 = dep101.icid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(dep101,-3),101,vobj(dep101,-4)))#2,'$D(^XREF("SWP",v2,v3)) do vidxerr("XREFSWP")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("SWP",v2,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("SWP",v2,v3)
	#ENDBYPASS
	quit

vi3(RecordDEP101 dep101) // Maintain XREFSWPPCT index entries (Percentage Base Sweep X-REF)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep101.cid
	type String v3 = dep101.icid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(dep101,-3),101,vobj(dep101,-4)))#2,'$D(^XREF("SWPPCT",v2,v3)) do vidxerr("XREFSWPPCT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("SWPPCT",v2,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("SWPPCT",v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DEP101")

	while ds.next() do {
		type RecordDEP101 dep101=ds.getRecord("DEP101")
		if vlist.contains("VINDEX") do VINDEX(.dep101) quit
		if vlist.contains("SWP102") do vi1(.dep101)
		if vlist.contains("XREFSWP") do vi2(.dep101)
		if vlist.contains("XREFSWPPCT") do vi3(.dep101)
	}

	quit


public VIDXBLD1(RecordDEP101 dep101, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.dep101) quit
	if vlist.contains("SWP102") do vi1(.dep101)
	if vlist.contains("XREFSWP") do vi2(.dep101)
	if vlist.contains("XREFSWPPCT") do vi3(.dep101)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DEP101","MSG",1225,"DEP101."_di)

	quit


vkchged // Access key changed

	type public RecordDEP101 dep101

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ICID").exists() set vux("ICID") = vx("ICID")
	do vkey(1) set voldkey = dep101.cid_","_dep101.icid    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dep101.cid_","_dep101.icid    // Copy new keys into object
	type RecordDEP101 vnewrec = dep101.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEP101",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEP101 dep101

	if vux("CID").exists() set dep101.cid = vux("CID").piece("|",i)
	if vux("ICID").exists() set dep101.icid = vux("ICID").piece("|",i)
	quit

VIDXPGM()	quit "DEP101F"	// Location of index program

