AGTCOMFL(RecordAGENTCOM agentcom, String vpar, Boolean vparNorm) // AGENTCOM - Agent Commission Plan Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (21)             11/22/2003
	// Trigger Definition (2)                      04/28/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = agentcom.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(agentcom,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(agentcom,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String AGENT = agentcom.agent
	type String CPLAN = agentcom.cplan

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("AGENT").exists()!vx("CPLAN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("AGENTCOM",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("AGENTCOM","AGENT = :agentcom.agent and CPLAN = :agentcom.cplan") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String AGENT
	type public String CPLAN

	type RecordAGENTCOM agentcom = Db.getRecord("AGENTCOM","AGENT=:AGENT,CPLAN=:CPLAN")
	if (%ProcessMode = 2) do {
		do agentcom.setMode(2)

		do AGTCOMFL(agentcom,vpar)
	}
	else  do VINDEX(agentcom)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordAGENTCOM agentcom

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("AGENTCOM","AGENT = :agentcom.agent and CPLAN = :agentcom.cplan") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(agentcom))  S ^AGENT(vobj(agentcom,-3),"10",vobj(agentcom,-4))=vobj(agentcom)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.agentcom) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordAGENTCOM agentcom

	if vpar["/INDEX/" do VINDEX(.agentcom)                 // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^AGENT(vobj(agentcom,-3),"10",vobj(agentcom,-4))   // Delete Record
	quit


vinit // Initialize default values

	type public RecordAGENTCOM agentcom

	// Type local variables for access keys for defaults
	type public String AGENT
	type public String CPLAN

	if agentcom.app.isNull() set agentcom.app = 0          // app
	if agentcom.dftacct.isNull() set agentcom.dftacct = 0  // dftacct
	if agentcom.skppmt.isNull() set agentcom.skppmt = 0    // skppmt
	quit


vreqn // Validate required data items

	type public RecordAGENTCOM agentcom

	if agentcom.app.isNull() do vreqerr("APP") quit
	if agentcom.dftacct.isNull() do vreqerr("DFTACCT") quit
	if agentcom.skppmt.isNull() do vreqerr("SKPPMT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordAGENTCOM agentcom

	if agentcom.agent.isNull() do vreqerr("AGENT") quit
	if agentcom.cplan.isNull() do vreqerr("CPLAN") quit

		if vx("APP").exists(),agentcom.app.isNull() do vreqerr("APP") quit
		if vx("DFTACCT").exists(),agentcom.dftacct.isNull() do vreqerr("DFTACCT") quit
		if vx("SKPPMT").exists(),agentcom.skppmt.isNull() do vreqerr("SKPPMT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("AGENTCOM","MSG",1767,"AGENTCOM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete for Agent/Commission Plan

	type public RecordAGENTCOM agentcom
	/*	
	---- Revision History --------------------------------------------------------
	
	04/28/06- SPR - 21020
		  Modified the reference for index table "XBRCD" with the base 
		  table "ACN" to reference the Branch of Ownership "BOO" column 
		  for the customer. 	
		
	------------------------------------------------------------------------------
	*/
	
	/*
	During a delete, the portfolio may need to be removed from the
	agent/portfolio file.  If this is the only commission plan tied to
	the agent that uses this commission plan, then remove the record from
	the agentpft file.
	*/
	
	type public Number AGENT
	type public String CPLAN
	type Boolean ALC
	type Number CID,DEL
	type String DATA,PFT,XPFT,XCPLAN
		
	set DEL=1                              // Set delete flag to true
	
	type RecordUTBLCOMPLN utblcompln=Db.getRecord("UTBLCOMPLN","CPLAN",1)
	if utblcompln.getMode() set PFT=utblcompln.pft
	
	if PFT'="" do {                             // portfolio defined at the plan level
		type RecordAGENTPFT agentpft=Db.getRecord("AGENTPFT","AGENT,PFT",1)
		if agentpft.getMode() set DATA=agentpft.pft
		
		if DATA="" quit                // Portfolio is not in the file

		type ResultSet rs=Db.select("CPLAN","AGENTCOM","AGENT=:AGENT AND CPLAN NOT = :CPLAN")
		if rs.isEmpty() quit
		while rs.next()  do { quit:'DEL
			/*
			We need to check the portfolio on each commission plan.  If
			any plan uses the same portfolio, then we won't delete it.
			*/
			set XCPLAN=rs.getCol("CPLAN")

			type RecordUTBLCOMPLN utblcompln=Db.getRecord("UTBLCOMPLN","XCPLAN",1)
			if utblcompln.getMode() set XPFT=utblcompln.pft
			
			if XPFT=PFT set DEL=0           // Another plan with portfolio
			}
		// call DBSFILER to delete the record
		if DEL do Db.delete("AGENTPFT","AGENT=:AGENT AND PFT=:PFT")
		}

	/*
	If the account level calculations flag is set, then delete the plan
	from the complncid file.
	*/
	
	type RecordUTBLCOMPLN compln=Db.getRecord("UTBLCOMPLN","CPLAN",1)
	if compln.getMode() set ALC=compln.alc
	
	if ALC do {                            // Only file to cid the plans that are at account level
		type ResultSet rscid=Db.select("CID","ACN","BOO=:AGENT")
		if rscid.isEmpty() quit
		while rscid.next() set CID=rscid.getCol("CID") do Db.delete("COMPLNCID","CID=:CID AND CPLAN=:CPLAN") 
		}
	quit 

vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordAGENTCOM agentcom
	/*	
	---- Revision History --------------------------------------------------------
	11/17/05 - ARPAVC - 17008
		   Cleaned up for DBI3

	09/03/99 - CARROLLJ - 33890
		   Convert to PSL.
	
	11/04/98 - ARPAV - 28590
		   Adding processing to check for flag before adding commission
		   plan to all accounts linked to the agent.
	
	10/29/98 - ARPAV - 28590
		   Added check for data in portfolio and account level files before
		   defaulting information.
	
	Get portfolio from the agent/commission plan filer and update the agent
	portfolio file.
	*/

	type String PFT
	type Number CID
	type Public String CPLAN
	type Public Number AGENT
	
	type RecordUTBLCOMPLN compln=Db.getRecord("UTBLCOMPLN","CPLAN=:CPLAN")
	
	// portfolio defined at the plan level
	if compln.pft'="" do {
		set PFT=compln.pft
		type RecordAGENTPFT agentpft=Db.getRecord("AGENTPFT","AGENT=:AGENT,PFT=:PFT",1)		
		if agentpft.getMode()=0 do agentpft.save()
		quit 
		}
	
	// Loop through all of the agent's accounts and add the new 
	// commission plan to each account
	
	// Only file to cid the plans that are at account level
	if compln.alc,agentcom.dftacct do {
		new rs 
		type ResultSet rs=Db.select("CID","ACN","BOO=:AGENT")
		if rs.isEmpty() quit
		while rs.next() do {
			set CID=rs.getCol("CID")
			type RecordCOMPLNCID comcid=Db.getRecord("COMPLNCID","CID=:CID,CPLAN=:CPLAN",1)
			if comcid.getMode()=0 do comcid.save()
			}
		}
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordAGENTCOM agentcom

	set X = agentcom.agent if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("AGENT", vRM) quit
	if agentcom.cplan.length()>8 set vRM = $$^MSG(1076,8) do vdderr("CPLAN", vRM) quit
	set X = agentcom.acagrth if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.ACAGRTH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.agcyrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.AGCYRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if agentcom.agyindex.length()>12 set vRM = $$^MSG(1076,12) do vdderr("AGYINDEX", vRM) quit
	if '("01"[agentcom.APP) set vRM=$$^MSG(742,"L") do vdderr("APP", vRM) quit
	set X = agentcom.comply if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.COMPLY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.compytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.COMPYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[agentcom.DFTACCT) set vRM=$$^MSG(742,"L") do vdderr("DFTACCT", vRM) quit
	set X = agentcom.ecomamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.ECOMAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.expagrth if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.EXPAGRTH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.grthbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.GRTHBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.grthdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("GRTHDT", vRM) quit
	if agentcom.index.length()>12 set vRM = $$^MSG(1076,12) do vdderr("INDEX", vRM) quit
	set X = agentcom.margin if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.MARGIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.oamprd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("OAMPRD", vRM) quit
	if agentcom.ovrindex.length()>12 set vRM = $$^MSG(1076,12) do vdderr("OVRINDEX", vRM) quit
	set X = agentcom.ovrrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.OVRRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = agentcom.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[agentcom.SKPPMT) set vRM=$$^MSG(742,"L") do vdderr("SKPPMT", vRM) quit
	set X = agentcom.smargin if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENTCOM.SMARGIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("AGENTCOM","MSG",979,"AGENTCOM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordAGENTCOM agentcom) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.agentcom)

	quit
	

vi1(RecordAGENTCOM agentcom) // Maintain XREFAGENTCOM index entries (Agent/Commission Plan File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = agentcom.cplan
	type String v3 = agentcom.agent

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^AGENT(vobj(agentcom,-3),"10",vobj(agentcom,-4)))#2,'$D(^XREF("COMAGNT",v2,v3)) do vidxerr("XREFAGENTCOM")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("COMAGNT",v2,v3)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("COMAGNT",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("AGENTCOM")

	while ds.next() do {
		type RecordAGENTCOM agentcom=ds.getRecord("AGENTCOM")
		if vlist.contains("VINDEX") do VINDEX(.agentcom) quit
		if vlist.contains("XREFAGENTCOM") do vi1(.agentcom)
	}

	quit


public VIDXBLD1(RecordAGENTCOM agentcom, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.agentcom) quit
	if vlist.contains("XREFAGENTCOM") do vi1(.agentcom)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("AGENTCOM","MSG",1225,"AGENTCOM."_di)

	quit


vkchged // Access key changed

	type public RecordAGENTCOM agentcom

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("AGENT").exists() set vux("AGENT") = vx("AGENT")
	if vx("CPLAN").exists() set vux("CPLAN") = vx("CPLAN")
	do vkey(1) set voldkey = agentcom.agent_","_agentcom.cplan // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = agentcom.agent_","_agentcom.cplan // Copy new keys into object
	type RecordAGENTCOM vnewrec = agentcom.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("AGENTCOM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordAGENTCOM agentcom

	if vux("AGENT").exists() set agentcom.agent = vux("AGENT").piece("|",i)
	if vux("CPLAN").exists() set agentcom.cplan = vux("CPLAN").piece("|",i)
	quit

VIDXPGM()	quit "AGTCOMFL"	// Location of index program

