STOP3AFL(RecordSTOP3A stop3a, String vpar, Boolean vparNorm) // STOP3A - Check Stops - Territory Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop3a.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(stop3a,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop3a,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = stop3a.cid
	type String CHKHI = stop3a.chkhi
	type String SEQ = stop3a.seq
	type String TER = stop3a.ter

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("CHKHI").exists()!vx("SEQ").exists()!vx("TER").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP3A",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP3A","CID = :stop3a.cid and CHKHI = :stop3a.chkhi and SEQ = :stop3a.seq and TER = :stop3a.ter") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String CHKHI
	type public String SEQ
	type public String TER

	type RecordSTOP3A stop3a = Db.getRecord("STOP3A","CID=:CID,CHKHI=:CHKHI,SEQ=:SEQ,TER=:TER")
	if (%ProcessMode = 2) do {
		do stop3a.setMode(2)

		do STOP3AFL(stop3a,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP3A stop3a

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP3A","CID = :stop3a.cid and CHKHI = :stop3a.chkhi and SEQ = :stop3a.seq and TER = :stop3a.ter") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop3a))  S ^STOP(3,vobj(stop3a,-3),vobj(stop3a,-4),vobj(stop3a,-5),vobj(stop3a,-6))=vobj(stop3a)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP3A stop3a


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^STOP(3,vobj(stop3a,-3),vobj(stop3a,-4),vobj(stop3a,-5),vobj(stop3a,-6)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordSTOP3A stop3a

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP3A stop3a

	if stop3a.cid.isNull() do vreqerr("CID") quit
	if stop3a.chkhi.isNull() do vreqerr("CHKHI") quit
	if stop3a.seq.isNull() do vreqerr("SEQ") quit
	if stop3a.ter.isNull() do vreqerr("TER") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP3A","MSG",1767,"STOP3A."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER - After trigger

	do vad1

	quit

vau1 // Trigger AFTER - After trigger

	do vad1

	quit

vad1 // Trigger AFTER - After trigger

	type public RecordSTOP3A stop3a

	// Verify mode
	if %ProcessMode=2 quit                  
	
	new chkdes,msg,seq,sql,z,BOO,STPCID
	// Stop payment - type - chkhi
	//Place stop pmt -
	set msg=$S('%ProcessMode:$$^MSG(6701),%ProcessMode=1:$$^MSG(6702),%ProcessMode=3:$$^MSG(6700))  
	set chkdes=Db.getOneRow("DES","DBTBL1D","'SYSDEV','STOP3A','CHKHI'")

	//Sequence ~p1
	set msg=msg_"3 - "_chkdes_" "_stop3a.chkhi_" "_$$^MSG(6742,stop3a.seq)_","_stop3a.ter  
	set STPCID=stop3a.cid
	set BOO=Db.getOneRow("BOO","DEP","STPCID")

	// History
	do HISTBLD^ACNFUNCS(msg,BOO)    
	quit 

vbi1 // Trigger BEFORE_ACTION - Before Insert/Delete

	do vbd1

	quit

vbd1 // Trigger BEFORE_ACTION - Before Insert/Delete

	type public RecordSTOP3A stop3a
	/*
	---------- Revision History ------------------------------------------
	01/12/00 - CHOK - 31126
		   Fix PSL code.

	09/20/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/	

	// Create STOPLOGT entry
	
	new LSEQ,vlist,val,x,LSEQ,ZKEY1,ZKEY2,ZPM,ZSEQ,ZTER,ZTJD
	set ZTJD=%SystemDate 
	set ZKEY1=stop3a.cid 
	set ZKEY2=stop3a.chkhi 
	set ZPM=%ProcessMode
	set ZSEQ=stop3a.seq
	
	// Get last log sequence number
	
	new rs 
	type ResultSet rs=Db.select("LSEQ","STOPLOGA","TJD=:ZTJD AND STPTYP=3 AND KEY1=:ZKEY1 AND KEY2=:ZKEY2 AND SEQ=:ZSEQ","LSEQ DESC") 
	if rs.isEmpty() set LSEQ=1
	else  set LSEQ=rs.next(),LSEQ=rs.getCol(1)+1
	
	// Insert new STOPLOGT entry
	set ZTER=stop3a.ter
	do Db.insert("STOPLOGT","TJD,STPTYP,KEY1,KEY2,SEQ,LSEQ,ACTFLG,TER",":ZTJD,3,:ZKEY1,:ZKEY2,:ZSEQ,:LSEQ,:ZPM,:ZTER")

	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP3A stop3a

	set X = stop3a.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if stop3a.chkhi.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CHKHI", vRM) quit
	set X = stop3a.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop3a.ter if 'X.isNull(),'Db.isDefined("UTBLTER","X") set vRM = $$^MSG(1485,X) do vdderr("TER", vRM) quit
	set X = stop3a.dtsend if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTSEND", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP3A","MSG",979,"STOP3A."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSTOP3A stop3a

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CHKHI").exists() set vux("CHKHI") = vx("CHKHI")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	if vx("TER").exists() set vux("TER") = vx("TER")
	do vkey(1) set voldkey = stop3a.cid_","_stop3a.chkhi_","_stop3a.seq_","_stop3a.ter // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop3a.cid_","_stop3a.chkhi_","_stop3a.seq_","_stop3a.ter // Copy new keys into object
	type RecordSTOP3A vnewrec = stop3a.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP3A",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP3A stop3a

	if vux("CID").exists() set stop3a.cid = vux("CID").piece("|",i)
	if vux("CHKHI").exists() set stop3a.chkhi = vux("CHKHI").piece("|",i)
	if vux("SEQ").exists() set stop3a.seq = vux("SEQ").piece("|",i)
	if vux("TER").exists() set stop3a.ter = vux("TER").piece("|",i)
	quit
