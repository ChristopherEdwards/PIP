ZBCHALGO //Batch ZBCHALGOR - Monthly File to Algorithmics
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - ZBCHALGOR Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("ZBCHALGOR")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("ZBCHALGOR") quit
 do JOBMGR^BCHUTL(%FN,"ZBCHALGOR",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("ZBCHALGOR")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("ZBCHALGOR","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"ZBCHALGOR",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"ZBCHALGOR",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("ZBCHALGOR","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"ZBCHALGOR",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	/*
	The procedure collects the required information from LN 
	and files the data to temp table ZALGOR.
	*/

	type RecordLN ln=Db.getRecord("LN","CID")
	if ln.stat=4 quit

	//Check and Initialize the variables before filing the record

	type Date ISSDT,MATDT,SCHND
	type Number AMRTPYT
	type public String IACM,IFRE,INDEX,IRNFRE,LOCALE,NBDR,PYTDAY,ZCID,ZDATA
	type public String ACC,COMM,CRCD,CRSTATE,DF,FMDESC,REGTBL,SPLTBL,ZONE

	if ln.crcd="MXN" set CRCD="MXP" 
	else  set CRCD=ln.crcd

	
	set (ISSDT,MATDT,AMRTPYT,ZONE,PYTDAY)=""

	if ln.revf=1 do {				//Revolving Accounts
		set ISSDT=ln.odt.toString("YEAR/MM/DD")
		set AMRTPYT=ln.lpdtamt
	}
	else  if ln.revf=0 do {				//Non-Revolving Accounts
		set ISSDT=ln.odd.toString("YEAR/MM/DD")
		set MATDT=ln.mdt.toString("YEAR/MM/DD")
		set AMRTPYT=ln.pmtpi
	}
	
	set DF=ln.dirfre.extract(2)
	set DF=$SELECT(DF="D":"DAY",DF="M":"MON",DF="Q":"QURT",1:"ANNU")
	set IRNFRE=ln.irn_$C(32)_DF	
	
	set IACM=ln.iacm
	set IACM=$SELECT(IACM="10":"actual/360",IACM="00":"30/360",IACM="13":"actual/365",IACM="11":"actual/actual",1:"")

	if ln.dist1fre="1MA15E" set IFRE="2W"
	else  do {
		set IFRE=ln.dist1fre.extract(2)		//Interest Frequency
		set IFRE=$SELECT(IFRE="D":"Days",IFRE="W":"Weeks",IFRE="M":"Months",IFRE="Y":"Years",1:"")
		set IFRE=ln.dist1fre.extract(1)_$C(32)_IFRE
		if "MQ"[ln.dist1fre.extract(2) set PYTDAY=ln.dist1fre.extract(4,6)
	}
	
	set SCHND=ln.schnd.toString("YEAR/MM/DD")	//Next Amortization Payment date

	set NBDR=ln.dist1fre.extract(3)			//Non business day rule
	set NBDR=$SELECT(NBDR="A":"None",NBDR="N":"Following",NBDR="P":"Previous",1:"")
	
	if ln.index="" set INDEX="Fixed"
	else  set INDEX=ln.index

	set CRSTATE=ACC(ln.darcls,ln.cls).get()
	
	type RecordCIF cif=Db.getRecord("CIF",":ln.acn")
	set ZONE=LOCALE(cif.locale).get()
	
	//Create data array to file into temp table
	set ZCID=ln.cid
	set ZDATA=ln.cid_c_ln.acn_c_cif.lnm_c_CRCD_c_ISSDT_c_MATDT_c_ln.bal_c_IRNFRE_c_IACM
	set ZDATA=ZDATA_c_IFRE_c_IFRE_c_AMRTPYT_c_SCHND_c_NBDR_c_"1"_c_ln.grp_c_COMM
	set ZDATA=ZDATA_c_INDEX_c_CRSTATE_c_cif.sic_c_ZONE_c_ln.dupr_c_ln.duin_c_ln.intspr_c_ln.revf
	set ZDATA=ZDATA_c_PYTDAY_c_SPLTBL_c_REGTBL_c_ln.grp_c_ln.totcol

        type RecordZALGOR zalg=Class.new("RecordZALGOR")
        set zalg.cid=ZCID
        set zalg.data=ZDATA
        do zalg.bypassSave()

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type String %READ,%TAB
	type public String FILEID="WALM_POSC_"_%SystemDate.toString("YEARMMDD")_".EXT"
	set %TAB("FILEID")=".RMS6/REQ"
	set %READ="@@%FN,,FILEID"
	do ^UTLREAD
	if VFMQ="Q" set %BatchExit=1 quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","LN","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set c=","
	set (COMM,CRSTATE)=""				//Commission to be confirmed
	set (SPLTBL,REGTBL)=""				//Future use, TBD

	type ResultSet loc=Db.select("LOCALE,FMDESC","UTBLLOCALE")
	if 'loc.isEmpty() while loc.next() set LOCALE(loc.getCol(1))=loc.getCol(2)

	type ResultSet acc=Db.select("AC,CLS,FMDESC","UTBLACC")
	if 'acc.isEmpty() while acc.next() do {
		set FMDESC=acc.getCol(3)
		set ACC(acc.getCol(1),acc.getCol(2))=FMDESC.extract(FMDESC.find("("),FMDESC.find(")")-2)
	}

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type String REC
	type IO io=Class.new("IO")
	set io.openParams="NEWV/WRITE"
	set io.fileName=FILEID
	do io.open()
	type ResultSet rs=Db.select("DATA","ZALGOR")
	if rs.isEmpty() do io.close() quit
	while rs.next() do {
		set REC=rs.getCol(1)
		do io.write(.REC)
		}
	do io.close() 
	do Db.fastDelete("ZALGOR")
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
