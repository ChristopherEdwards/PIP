EMPLFILE(RecordUTBLEMPLOYER utblemployer, String vpar, Boolean vparNorm) // UTBLEMPLOYER - Employer Code Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (13)             11/22/2003
	// Trigger Definition (5)                      09/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblemployer.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblemployer,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblemployer,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String EMPLNO = utblemployer.emplno

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EMPLNO").exists() do vkchged quit              // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLEMPLOYER",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLEMPLOYER","EMPLNO = :utblemployer.emplno") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EMPLNO

	type RecordUTBLEMPLOYER utblemployer = Db.getRecord("UTBLEMPLOYER","EMPLNO=:EMPLNO")
	if (%ProcessMode = 2) do {
		do utblemployer.setMode(2)

		do EMPLFILE(utblemployer,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLEMPLOYER utblemployer

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLEMPLOYER","EMPLNO = :utblemployer.emplno") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblemployer,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblemployer,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblemployer))  S ^UTBL("EMPLOYER",vobj(utblemployer,-3))=vobj(utblemployer)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLEMPLOYER utblemployer

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblemployer,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("EMPLOYER",vobj(utblemployer,-3))            // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLEMPLOYER utblemployer

	if utblemployer.ad1.isNull() do vreqerr("AD1") quit
	if utblemployer.cntry.isNull() do vreqerr("CNTRY") quit
	if utblemployer.nam.isNull() do vreqerr("NAM") quit
	if utblemployer.state.isNull() do vreqerr("STATE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLEMPLOYER utblemployer

	if utblemployer.emplno.isNull() do vreqerr("EMPLNO") quit

		if vx("AD1").exists(),utblemployer.ad1.isNull() do vreqerr("AD1") quit
		if vx("CNTRY").exists(),utblemployer.cntry.isNull() do vreqerr("CNTRY") quit
		if vx("NAM").exists(),utblemployer.nam.isNull() do vreqerr("NAM") quit
		if vx("STATE").exists(),utblemployer.state.isNull() do vreqerr("STATE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLEMPLOYER","MSG",1767,"UTBLEMPLOYER."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("EZIP").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLEMPLOYER utblemployer
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblemployer,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert trigers

	type public RecordUTBLEMPLOYER utblemployer
	/*
	---- Revision History--------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   Added code to validate ZIP code column.

	09/26/05 - RADHIKA - CR 16891
																			Eliminated PSL Deprecated Features and Warnings.
																			Removed revision history prior to 2004.
							 
	*/

	type public Boolean ER
	type public String RM, XEMPLNO,XGRP

	// Validate ZIP code - Employer
	do ZIP^PROCZIP(utblemployer.cntry, utblemployer.state, utblemployer.ezip)
	if ER.get() do Runtime.setErrMSG("UTBLEMPLOYER", 3333, RM) quit:ER

	set XEMPLNO=utblemployer.emplno
	set XGRP=utblemployer.emplgrp

	if XGRP'="" do {
		type RecordUTBLEMPGX utbempgx=Class.new("RecordUTBLEMPGX")
		set utbempgx.emplno=XEMPLNO
		set utbempgx.emplgrp=XGRP
		do utbempgx.save()
		}		
	quit

	

vau1 // Trigger AFTER_UPDATE - After Update trigers

	type public RecordUTBLEMPLOYER utblemployer

	/*
	---- Revision History--------------------------------------------------------
	
	09/26/05 - RADHIKA - CR 16891
																			Eliminated PSL Deprecated features and Warnings.
																		 
	11/04/98 - SKLYUTD - 27872
		   Based on the existance of value in the Employer Group field
		   create an entry in UTBLEMPGX.
	
	 */

	type public Boolean ER
	type public String XEMPLNO,XGRP

	set XEMPLNO=utblemployer.emplno
	set XGRP=utblemployer.emplgrp
	
	if XGRP'="" do {
		type RecordUTBLEMPGX utblempgx=Class.new("RecordUTBLEMPGX")
		set utblempgx.emplno=XEMPLNO
		set utblempgx.emplgrp=XGRP  
		do utblempgx.save()
		if ER=1 quit
		}
	quit

vau2 // Trigger AU_EZIP - After Update of Postal Code

	type public RecordUTBLEMPLOYER utblemployer

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Employer
	do ZIP^PROCZIP(utblemployer.cntry, utblemployer.state, utblemployer.ezip)
	if ER.get() do Runtime.setErrMSG("UTBLEMPLOYER", 3333, RM)

	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete trigger

	type public RecordUTBLEMPLOYER utblemployer
								/*
								---- Revision History---------------------------------------------------
	
	09/26/05 - RADHIKA - CR 16891
																			Eliminated PSL Warnings.
																		 
	12/07/99 - DOUGANM - 31126
		   Moved code from AFTER_DELETE trigger into this BEFORE_DELETE
	  	   trigger, because after the delete the employer code and 
		   employer group no longer existed, and could not be loaded
		   to be used to delete the UTBLEMPGX entry if necessary.   

								09/21/99 - CARROLLJ - 31126
																			Convert to PSL.
	
								11/04/98 - SKLYUTD - 27872
																			delete an entry in UTBLEMPGX.
							*/
       	
	type public Boolean ER
	type public Number EMPLNO,EMPLGRP
	type String XEMPLNO,XGRP 
	
	set XEMPLNO=utblemployer.emplno
	set XGRP=utblemployer.emplgrp
	
	if XGRP'="" do Db.delete("UTBLEMPGX","EMPLGRP=:XGRP AND EMPLNO=:XEMPLNO") quit:ER
	quit

vbu1 // Trigger BEFORE_UPDATE - Before Update

	type public RecordUTBLEMPLOYER utblemployer
	do utblemployer.setAuditFlag(1)
	/*
	---- Revision History--------------------------------------------------------
	
	09/26/05 - RADHIKA - CR 16891
																			Eliminated PSL Warnings.
																		 
	11/04/98 - SKLYUTD - 27872
		   Based on the existance of value in the Employer Group field
		   delete an entry in UTBLEMPGX.  After_update will create a new one
	
	 */

	type public Boolean ER
	type String XEMPLNO,XGRP

	set XEMPLNO=utblemployer.emplno

	type RecordUTBLEMPLOYER XGRP=Db.getRecord("UTBLEMPLOYER","EMPLNO=:XEMPLNO")
	if XGRP'="" do {
		do Db.fastDelete("UTBLEMPGX","EMPLGRP=:XGRP,EMPLNO=:XEMPLNO")
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLEMPLOYER utblemployer

	if utblemployer.emplno.length()>12 set vRM = $$^MSG(1076,12) do vdderr("EMPLNO", vRM) quit
	if utblemployer.ad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD1", vRM) quit
	if utblemployer.ad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD2", vRM) quit
	if utblemployer.ad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD3", vRM) quit
	if utblemployer.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	set X = utblemployer.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	if utblemployer.con.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CON", vRM) quit
	set X = utblemployer.emplgrp if 'X.isNull(),'Db.isDefined("UTBLEMPLGRP","X") set vRM = $$^MSG(1485,X) do vdderr("EMPLGRP", vRM) quit
	if utblemployer.ezip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("EZIP", vRM) quit
	set X = utblemployer.fcidd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FCIDD", vRM) quit
	if utblemployer.nam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NAM", vRM) quit
	if utblemployer.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	if utblemployer.tel.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TEL", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLEMPLOYER","MSG",979,"UTBLEMPLOYER."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLEMPLOYER utblemployer

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("EMPLNO")
	set voldkey = vux.piece("|",1),vobj(utblemployer,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblemployer,-3) = vnewkey // Copy new keys into object
	type RecordUTBLEMPLOYER vnewrec = utblemployer.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLEMPLOYER",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utblemployer,-3) = vux.piece("|",1)           // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
