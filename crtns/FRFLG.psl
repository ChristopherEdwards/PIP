FRFLG	 /*
		ORIG: Dennis Ratmansky  05/30/97
		Procedure ID: FRFLG
		DESC: Function Access Restrictions Retrofit
		

	---- Revision History ---------------------------------------------	
	
	08/11/06 - SmithCD - CR 22489 (20748)
		   Removed code / comments regarding %TRNSEQ - no longer 
		   needed in p04 b/c we never get into this code for 
		   transaction posting.
	
	05/25/06 - DESHPANDE S K - CR 20748
		   Replaced variable %TRNMODE with ORIGTM in section 
		   CRTPROC. 
	
	09/29/05 - RussellDS - CR16911
		   Modified CHECK section to only update acn.rflg if
		   it is not already the right value.
		   
		   Cleaned up non-scope warnings.
		   
		   Removed old revision history.

	03/02/05 - TITOVE - CR 13291
	  	   Modified CRTPROC section to pass ttx object to CRTOVR. 
	  	   Replaced setting of CRT with %TRNMODE, since CRT is no
	  	   longer an acceptable argument for CRTOVR.
	----------------------------------------------------------------------
	*/
	
	quit
	

public CHECK(CID)

	/*
	Desc:	This section of the routine checks for existing function
		restrictions applicable to the account.  If so the override
		array (OVR) is set up to process the override.
	
	Called by Loan or Deposit account maintenance functions
	
	Arguments:
		- CID     Account number.
	
	Returns:
		- OVR(CID,"RFLG",RFLG)/Conditions:
			.  If the restriction is applicable for current system date
			(%SystemDate).
			.  If the restriction is applicable to functions
			[UTBLRFLG]FARES.
	*/

	new ACN,CRT,EXPDT,FARES,GRP,L2,OVR,RFLG,SAVACN,STDT,SVCURPOS,TARES
	
	if $D(cur) do {

		// Clear screen after the last prompt
		write $$CLR^%TRMVT(((cur\1000)+1),24)

		// save cursor position	
		set SVCURPOS=cur                   
		}
	
	set ER=""
	
	if $G(CID)="" quit
	
	// Check for existing restrictions on account owners
	new VRFLG,VXRFLGC,XRFLG
	
	set (VRFLG,VXRFLGC)=0

	type DbSet rs=Db.selectDbSet("RFLG","CID=:CID")
	if rs.isEmpty() set VRFLG=1

	type ResultSet rst=Db.select("CID","RFLGCCID","CID=:CID")
	if rst.isEmpty() set VXRFLGC=1

	// Restriction Flag - reset if no longer any restrictions
	if VRFLG,VXRFLGC do { quit
		type RecordACN acn=Db.getRecord("ACN","CID=:CID")
		
		if acn.rflg do {
			set acn.rflg = 0
			do acn.save()
		}
	}

	do CRFLGCID
	set ACN=$G(SAVACN)
	
	/*
	Check for account restrictions. If there are no Transaction/Function
	restrictions placed on the account, quit.
	*/
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	
	// Restriction flag
	if acn.rflg do { 
		
		// Product Group
		set GRP=acn.grp 

		while rs.next() do {
			type RecordRFLG rflg=rs.getRecord("RFLG")
			set TMP=rflg.stdt_"|"_rflg.exdt_"|"_rflg.tcmt
			do PRCRFLG(rflg.rflg,TMP,CID) quit:ER                   
			}
		}
	do CRTPROC
	
	// Restrictions cannot be overriden
	if ER,$G(RM)="" do Runtime.setErrMSG("UTBLRFLG",2407)   
	
	// Clear screen after the last prompt
	if $D(SVCURPOS) write $$CLR^%TRMVT(((SVCURPOS\1000)+1),24) 
	quit 


public CIFFRFLG(ACN)	// Check for function restrictions on customer account.

	/*
	Desc:	This section of the routine checks for existing function
		restrictions applicable to the  CIF account.  If so the
		override array (OVR) is set up to process the override.
		Called by CIF account maintenance functions
		
	Arguments:
		- ACN  Customer number
	   
	Returns:
		- OVR(CID,"RFLG",RFLG)/Conditions:
			.  If the restriction is applicable for current system date
			(%SystemDate).
			.  If the restriction is applicable to functions
			[UTBLRFLG]FARES.
	*/

	new EXPDT,FARES,L2,OVR,RFLG,SPV,STDT,SVCURPOS,TARES
	
	if $D(cur) do {
		
		// Clear screen after the last prompt
		write $$CLR^%TRMVT(((cur\1000)+1),24)   
		// save cursor position
		set SVCURPOS=cur         
		}
	
	set ER=""
	set ACN=$G(ACN) quit:ACN="" 
	
	/*
	Check for account restrictions. If there are no Transaction/Function
	restrictions placed on the account, quit.
	*/	

	do CRFLGCIF(ACN)
	do CRTPROC
	
	// Restrictions cannot be overriden
	if ER,$G(RM)="" do Runtime.setErrMSG("UTBLRFLG",2407)    

	// Clear screen after the last prompt
	if $D(SVCURPOS) write $$CLR^%TRMVT(((SVCURPOS\1000)+1),24)  
	quit 


CRFLGCID	// Customer Restrictions on Loan and Deposit accounts.

	/*
	Review the customer restrictions placed on customer number in
	variable ACN, if they apply to the account number in variable CID
	set up the restriction for an override. This section of the code is
	applicable to the Loan and Deposit maintenance functions.
	*/
	
	set GRP="CIF"
	
	new ACN,RFLG,TMP
	
	type ResultSet rs=Db.select("ACN,RFLG","RFLGCCID","CID=:CID")
	if rs.isEmpty() quit
	while rs.next()  quit:ER  do {
		set ACN=rs.getCol(1)
		set RFLG=rs.getCol(2)
		if Db.isDefined("RFLGC","ACN=:ACN,RFLG=:RFLG") do {
			type RecordRFLGC rflgc=Db.getRecord("RFLGC","ACN=:ACN,RFLG=:RFLG")
			set TMP=rflgc.stdt_"|"_rflgc.exdt_"|"_rflgc.tcmt
			}
		else  set TMP=""	
		do PRCRFLG(RFLG,TMP,ACN)
		set SAVACN=ACN
		}
	quit 



CRFLGCIF(ACN)  // Customer Restrictions with regard to CIF maintenance functions
	
	/*
	Review the customer restrictions placed on customer number in
	variable ACN, set up the restriction for an override if applicable.
	This section of the code is applicable to the CIF maintenance functions.
	*/
	
	new GRP,TMP,RFLG
	
	type DbSet rs=Db.selectDbSet("RFLGC","ACN=:ACN")
	if rs.isEmpty() quit
	while rs.next() do {
		type RecordRFLGC rflgc=rs.getRecord("RFLGC")
		set TMP=rflgc.stdt_"|"_rflgc.exdt_"|"_rflgc.tcmt
		set GRP="CIF"	
		do PRCRFLG(rflgc.rflg,TMP,ACN) quit:ER 
		}
	quit 


PRCRFLG(RFLG,TMP,ACNORCID)

	/*
	This section of the code will check for the following:
	.  Is the restriction applicable for current system date (%SystemDate)
	.  Does the restriction apply to functions.
	If yes, set OVR array to process the override.
	
	ARGUMENTS:
		.  RFLG     - User defined restriction
		.  TMP      - Information related to the restriction on account
		.  ACNORCID - ACN(Customer Number) or CID (Loan, Deposit account number)

	set TMP to data associated with the user defined restriction as it
	applies to the account.
	*/

	set STDT=$P(TMP,"|",1) 
	set EXDT=$P(TMP,"|",2) 
	
	// Quit, if restriction expired or is applicable on a future date
	if EXDT="",(%SystemDate<STDT) quit 
	if EXDT'="",((%SystemDate<STDT)!(%SystemDate>EXDT)) quit 
		
	//Restriction must exist in OVR system table or RFLG user table
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") set ER="W",RM=$$^MSG(2408) quit

	new TMPMES 
	set TMPMES=$P(TMP,"|",3)
	
	//Redefine TMP to contain restriction data [UTBLRFLG]
	type RecordUTBLRFLG utblrflg=Db.getRecord("UTBLRFLG","GRP=:GRP,RFLG=:RFLG")

	set FARES=utblrflg.fares 
	set TARES=utblrflg.tares
	
	// for functions restrictions only
	quit:'FARES                            
	
	// set up OVR for function overide.
	set OVR(ACNORCID,"RFLG",RFLG)=TMPMES 
	if GRP="CIF" set OVR(ACNORCID,"RFLG",RFLG)=TMPMES_"|||CIF"
	
	// function restriction override flag
	set FNRFLG=1                    
	
	quit 


FNCTNRST     //

	/*	
	Check UTBLRFLG3 to verify that the user is authorized to override  
	the restriction. Lower level of ^utbl("rflg3",grp,rflg,ucls contains 
	the functions that the userclass (ucls) CANNOT override.
	
	NOTE:  Called by CRTOVR screen from the post processors on user id and
		password.
	*/

	new ALUCLS,ZUCLS
	
	set ZUCLS=$G(UCLS)
		
	set ER=0
	set ALUCLS="*"

	type ResultSet rs=Db.select("GRP,RFLG,UCLS","UTBLRFLG3","GRP=:GRP AND RFLG=:L2 AND UCLS=:ALUCLS")
	
	if 'rs.isEmpty() set ZUCLS="*"
	else  do {
		type ResultSet rst=Db.select("GRP,RFLG,UCLS","UTBLRFLG3","GRP=:GRP AND RFLG=:L2 AND UCLS=:ZUCLS")

		//Userclass ~p1 not authorized to override
		if rst.isEmpty() do Runtime.setErrMSG("UTBLRFLG3",2900,ZUCLS) quit
		}
	if ER quit

	//Userclass ~p1 not authorized for this function
	if Db.isDefined("UTBLRFLG3","GRP,L2,ZUCLS,%FN") do Runtime.setErrMSG("UTBLRFLG3",2898,ZUCLS) quit

	quit 



CRTPROC	 // Override section
	
	type public Number FNRFLG
	type public String OVR()

	if 'OVR.data(),FNRFLG.get() quit
	
	// Exclusive "N"ew command is required in this situation
	set x = "(ACN,%LIBS,%FN,ER,RM,FNRFLG,OVR,%LOGID,%TO,%O,%OSAVE,%UCLS,TLO,%UID,TJD,%MSKC,%MSKD,%MSKE,%MSKF,%MSKL,%MSKN,%MSKT,%MSKU,%fkey,CLS,vdft)"
	new @x

	type RecordTTX ttx = Class.new("RecordTTX")
	
	type Number ORIGTM = 1
	
	do ^CRTOVR(.ttx)                      

	quit 
 #OPTION ResultClass ON
Public String vSIG()	quit "60488^52414^Chad Smith^7978"	// Signature - LTD^TIME^USER^SIZE
