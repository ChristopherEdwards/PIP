HLD8FILE(RecordHLD8 hld8, String vpar, Boolean vparNorm) // HLD8 - Check Hold File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (3)                      02/12/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = hld8.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(hld8,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(hld8,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = hld8.cid
	type String EXPDT = hld8.expdt

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("EXPDT").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("HLD8",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("HLD8","CID = :hld8.cid and EXPDT = :hld8.expdt") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String EXPDT

	type RecordHLD8 hld8 = Db.getRecord("HLD8","CID=:CID,EXPDT=:EXPDT")
	if (%ProcessMode = 2) do {
		do hld8.setMode(2)

		do HLD8FILE(hld8,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordHLD8 hld8

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("HLD8","CID = :hld8.cid and EXPDT = :hld8.expdt") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(hld8)) S ^HLD(8,vobj(hld8,-3),vobj(hld8,-4))=vobj(hld8)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordHLD8 hld8


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^HLD(8,vobj(hld8,-3),vobj(hld8,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordHLD8 hld8

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordHLD8 hld8

	if hld8.cid.isNull() do vreqerr("CID") quit
	if hld8.expdt.isNull() do vreqerr("EXPDT") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("HLD8","MSG",1767,"HLD8."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordHLD8 hld8
	if 'hld8.cid.isNull() set vfkey("^ACN("_""""_hld8.cid_""""_","_50_")")="HLD8(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordHLD8 hld8
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":hld8.cid") set vERRMSG = $$^MSG(8563,"HLD8(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordHLD8 hld8
	if vx("").order().isNull() do AUDIT^UCUTILN(hld8,.vx(),1,"|") quit
	if vx("AMT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(hld8,.vx(),1,"|")
	quit


vbd1 // Trigger BEFORE_DELETE - Before delete

	type public RecordHLD8 hld8
	/*
	   ---- Revision History ------------------------------------------------

	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   10/15/02 - Spier 51089

	   Corrected setting of %SystemDate, it will always exist

	   01/30/01 - TITOVE - 43236
	   Added condition I '$G(CALL2) before updating ACN.CHKHLD
	   to prevent double update through call to Db.delete in
	   HIST trigger. Moved the code that resets HLD8.TOTAMT
	   for TJD to HIST trigger.

	   10/25/00 - TITOVE - 42064
	   Added code to update Total Hold Amount (HLD8.TOTAMT) for
	   TJD (hold's effective date).
	
	   09/13/99 - CHOK - 31126
	   Converted to PSL.

	   04/15/99 - KONGJ - 32622
	   CHANGED FILE NAME FROM DEP to ACN so that the process will be
	   handled for both DEP and LN records. This will also solve the
	   problem with deleted check holds being debited twice.
	*/

	type Number XAMT,XCID
	set XCID=hld8.cid

	// Decrement check hold amount ACN.CHKHLD
	
	if '$G(CALL2) do { quit:ER
		set XAMT=hld8.amt
		do Db.update("ACN","CHKHLD=CHKHLD-:XAMT","CID=:XCID")
		}
	
	quit

vbu1 // Trigger BU_AMT - Before update amount

	type public RecordHLD8 hld8
	do hld8.setAuditFlag(1)
	/*
	    ---- Revision History ------------------------------------------------
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   03/08/01 - TITOVE - 43236:001
	   Removed changes under ARQ 42064. Error checking and
	   update to TOTAMT are now done in HIST trigger.

	   10/25/00 - TITOVE - 42064
	   Added code to update Total Hold Amount (HLD8.TOTAMT) for
	   TJD (hold's effective date). Set error message if hold's
	   expiration date is prior to system date.

	   09/13/99 - CHOK - 31126
	   Converted to PSL.
	
	   04/15/99 - KONGJ - 32622
	   Replaced DEP with ACN file so that the process will be handled
	   for both DEP and LN records. This will also solve the
	        problem with deleted check holds being debited twice.
	*/	

	// Update check hold amount ACN.CHKHLD
	
	type Number XAMT,XCID
	set XCID=hld8.cid
	set XAMT=hld8.amt-hld8.amt.oldVal
	
	do Db.update("ACN","CHKHLD=CHKHLD+:XAMT","CID=:XCID")
	
	quit
	

vai1 // Trigger HIST - History transaction

	do vad1

	quit

vau1 // Trigger HIST - History transaction

	do vad1

	quit

vad1 // Trigger HIST - History transaction

	type public RecordHLD8 hld8
	/*
	   ---- Revision History ----------------------------------------------
	   
	   02/12/07 - RussellDS - CR25044
		   Remove change related to CR22464.  Check holds will not
		   be suppressed.
	   
	   10/24/06 - KUMARB - CR 22464
		   Modify in the begining of the trigger to suppress 
		   the Check Hold record creation if Check Hold is 
		   not defined in Available Balance Calculation Formula
		   for the account during the insert mode.

	   11/28/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   04/19/02 - TITOVE - 50416
	   Added error check that will prevent the user from placing,
	   modifying or deleting a manual hold on a closed account.

	   01/30/01 - TITOVE - 43236
	   Added "+" in front of $P(data,...) in order to account for
	   null values when making a comparison during DELETE mode.
	   Moved the code which resets TOTAMT for TJD, if necessary,
	   from BEFORE_DELETE trigger. Replaced error message from
	   ARQ 42064 with new one that will not allow to create hold
	   with expiration date in the past or equal to system date.

	   10/25/00 - TITOVE - 42064
	   Added check to prevent building the history record if new
	   amount is equal to the old, to zero or if code is executed
	   twice due to use of Db.delete. The comments which go
	   into history record were enhanced to show the deleted
	   amount. In case EXPDT is changed on an existing record and
	   hold amount remains the same, the history entry for the
	   new record will be created.
	   Also added code to insert or update the record for Total
	   Hold Amount (HLD8.TOTAMT) for TJD (hold's effective date)
	   and delete it if AMT and TOTAMT are NULL.
	   Set error message if hold's expiration date is prior to 
	   system date.	   
	
	   09/13/99 - CHOK - 31126
	   Converted to PSL.

	   04/15/99 - KONGJ - 32622
	   Changed file name from DEP to ACN so that the process will be
	   handled for both DEP and LN records. This will also solve the
	   problem with deleted check holds being debited twice.
	 
	*/
	
	if %ProcessMode=2 quit                          // Validation mode
	if $G(CALL2) quit
	
	type public Boolean ER
	
	/*
	TITOVE - 43236 - cannot allow to delete/modify hold with expiration
	date equal to system date, since that would result in account info
	being updated twice. Limitation: the user would be able to create/
	modify/delete zero-day holds only through transaction processing.
	*/
	// Expiration date must be in the future 
	I '$G(XEDT) set XEDT=hld8.expdt
	if (XEDT=%SystemDate)!(XEDT<%SystemDate) do Runtime.setErrMSG("HLD8",4755) quit:ER

	type Number CALL2,CHKAMT,XALCAMT,XAMT,XCID
	set CALL2=0
	set XCID=hld8.cid

	type RecordACN acn=Db.getRecord("ACN","CID=:XCID")
	
	if acn.stat=4 do Runtime.setErrMSG("ACN",8449) quit:ER

	set XAMT=hld8.amt
	set XALCAMT=hld8.alcamt
	
	// Increment check hold amount ACN.CHKHLD
	
	if %ProcessMode=0 do {
		set acn.chkhld=acn.chkhld+hld8.amt
		do acn.save()
		}
	
	// Insert/Update record for HLD8.TOTAMT
	
	if %ProcessMode=0 do { quit:ER
		type Number HAMT,NEWTOT,OLDTOT
		set HAMT=""
	
		if 'Db.isDefined("HLD8","hld8.cid,TJD") do { quit:ER
			type RecordHLD8 hld8=Db.getRecord("HLD8","CID=:XCID,EXPDT=:TJD",1)
			set hld8.cid=XCID
			set hld8.expdt=TJD
			set hld8.amt=HAMT
			set hld8.totamt=XAMT
			set hld8.alcamt=XALCAMT
			do hld8.bypassSave()
			}
		else  do { quit:ER
			type RecordHLD8 hld8=Db.getRecord("HLD8","CID=:XCID,EXPDT=:TJD")
			set OLDTOT=hld8.totamt
			set NEWTOT=OLDTOT+XAMT
			do Db.update("HLD8","TOTAMT=:NEWTOT","CID=:XCID AND EXPDT=:TJD")
			}
		}
	
	// Delete record if AMT, TOTAMT and ALCAMT are NULL
	
	if %ProcessMode=3 do { quit:ER
		type Number DAMT,DLTAMT,DALCAMT
		type ResultSet rs2=Db.select("AMT,TOTAMT,ALCAMT","HLD8","CID=:XCID AND EXPDT=:TJD")		
		if rs2.next() do {
			set DAMT=rs2.getCol("AMT")
			set DALCAMT=rs2.getCol("TOTAMT")
			set DLTAMT=rs2.getCol("ALCAMT")
			}
		set DLTAMT=DLTAMT-hld8.amt.oldVal
	
		if (DAMT=0)&(DLTAMT=0)&(DALCAMT=0) set CALL2=1 do Db.delete("HLD8","CID=:XCID AND EXPDT=:TJD")
		}
	
	// Reset TOTAMT for TJD, if necessary - TITOVE 43236
	do { quit:ER
		type Number TOT,OLDTOT
		set TOT=0
		type RecordHLD8 hld8=Db.getRecord("HLD8","CID=:XCID,EXPDT=:TJD")
		set OLDTOT=hld8.totamt
		new rs
		type ResultSet rs=Db.select("AMT","HLD8","CID=:XCID AND EXPDT>:TJD")
		if rs.isEmpty() quit
		while rs.next() set TOT=TOT+rs.getCol(1)
		if TOT&(OLDTOT'=TOT) do Db.update("HLD8","TOTAMT=:TOT","CID=:XCID AND EXPDT=:TJD")
		}

	// Create history record
	
	new TCMT,date,new,old
	set date=$$DAT^%ZM(hld8.expdt)                  // Date
	set TCMT=$$^MSG(6704,date)                      // Comment field
	// New record old amount
	if %ProcessMode=0 set old="" set new=hld8.amt
	if %ProcessMode=1!(%ProcessMode=3) set old=hld8.amt.oldVal set new=hld8.amt
	// Hold deleted
	if %ProcessMode=3 set new=0 set TCMT=TCMT_":"_old_":"_new_" ("_$$^MSG(3028)_")"
	// EXPDT changed
	if hld8.expdt'=hld8.expdt.oldVal,'(hld8.amt=hld8.amt.oldVal) set old=0
	// Show old and new amount
	if %ProcessMode'=3 set TCMT=TCMT_":"_old_":"_new
	// Do not create history record
	if %ProcessMode'=3&(old=new!(new=0)) quit
	if %ProcessMode=3,CALL2 quit
	// Create history record
	do HISTBLD^ACNFUNCS(TCMT)
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordHLD8 hld8

	set X = hld8.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = hld8.expdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPDT", vRM) quit
	set X = hld8.alcamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HLD8.ALCAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = hld8.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HLD8.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = hld8.totamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"HLD8.TOTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("HLD8","MSG",979,"HLD8."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordHLD8 hld8

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("EXPDT").exists() set vux("EXPDT") = vx("EXPDT")
	do vkey(1) set voldkey = hld8.cid_","_hld8.expdt       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = hld8.cid_","_hld8.expdt       // Copy new keys into object
	type RecordHLD8 vnewrec = hld8.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("HLD8",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordHLD8 hld8

	if vux("CID").exists() set hld8.cid = vux("CID").piece("|",i)
	if vux("EXPDT").exists() set hld8.expdt = vux("EXPDT").piece("|",i)
	quit
