LNACR0	
	/*
	       ORIG:  Neal E. Gorman (5053) - 09/03/86
	      INPUT:  CID - Account number
	              TJD - System date
	              EFD - Effective date
	
	     OUTPUT:
	    ACR       - Current accrual balance
	    ADJ       - Adjustment for a) payoff date, b) effective dated file
	    %ACR      - Calculated accrual
	    %DAYS     - Accrual adjustment - number of days
	
	---- Revision History ------------------------------------------------
	07/30/07 - Chhabris - CR27841
		   Modified ACR section to reference %PLDF (for e.g. called by
		   ^LNPTS22) instead of the variable PLDF. Variable PLDF is not
		   being used in ^LNPO2, which is being called from ^LNPTS23/
		   ^LNPTS22 to calculate the accrual amounts/adjustment.
		   Previously ln.pldf (%PLDF) was not considered.

	10/11/05 - Radhika - CR 17252
	           The call to ACRCALC^LNPTS2B is passed with .WIRN() as the 
	           second parameter.
	            
	07/12/05 - KinI - 16566
		   Modified INIT^UAVB call in ACR section to pass WIRN() array 
		   by reference to avoid undefined error returned when running 
		   Payoff Status report for the date in the past.
	
	05/06/05 - SmithCD - CR 15902
		   Clean up per current PSL standards. Removed old revision 
		   history.
	
	02/01/05 - SmithCD - CR13661
		   Removed check on LNMDLR variable, and consolidated calls 
		   to INIT^UAVB into a single call in section ACR, since both 
		   calls were identical due to 51629 changes. Other minor 
		   cleanup.

	------------------------------------------------------------------
	*/

	quit	


public OL(RecordLN ln)	// On-line access (transaction processing, inquiry)

	/*
	Aruguments:
	. ln	Loan Object			/TYP=RecordLN/REQ/REF:RW
	
	*/
	
	type public String %LNACR
	type public Number %ACR, %DAYS, ADJ, CID
	type public Boolean ER

	set %LNACR="0|0|0|0|0"
	do ACR(.ln) quit:ER
	
	quit 
	

ACR(RecordLN ln) //
	
	type public Number %ACR, %DAYS, ADJ, CID
	type public String %LNACR, ETC
	type public Boolean ER, %PLDF

	type Number INT
	type String UAVB(), WIRN()
	type Date LD, ND
	type Boolean pldf, FORWARD
		
	if ln.stat = 4 set (%DAYS, ADJ, %ACR) = 0 quit
	
	if '(ln.bal + ln.acr) quit 
	
	set %ACR = ln.acr set (%DAYS, ADJ) = 0
	
	set pldf = %PLDF.get()
	
	if %EffectiveDate > %SystemDate do {
		set FORWARD = 1
		set LD = %SystemDate
		set ND = $select(pldf:%EffectiveDate + 1, 1:%EffectiveDate)
		}
	else  if %EffectiveDate < %SystemDate do {
		set FORWARD = 0
		set ND = %SystemDate
		set LD = $select(pldf:%EffectiveDate + 1, 1:%EffectiveDate)
		}
	// Effective date is todays date.
	else  do {
		set FORWARD = 1
		set (LD, ND) = %SystemDate
		set ND = ND + pldf
		}
	
	set %DAYS = ND - LD

	// If there are no days to process then discontinue
	if '%DAYS set %LNACR = %ACR_"|0|"_ln.balint_"|0|"_%ACR_"|"_ln.irn quit 
	
	do INIT^UAVB(.ln, CID, LD, ND, "10000000000000001",,,,.WIRN()) quit:ER
	
	// Accrual Calculations
	do {
		type Date %EffectiveDate, %SystemDate
		set %EffectiveDate = LD
		
		#ACCEPT DATE=12/08/03;PGM=John Carroll
		set %SystemDate = ND
		
		if %EffectiveDate > %SystemDate do {
			type Date X, Y
			
			set X = %EffectiveDate
			set Y = %SystemDate
			set %EffectiveDate = Y
			
			#ACCEPT DATE=12/08/03;PGM=John Carroll
			set %SystemDate = X
			}
		/*
		$$ACRCALC^LNPTS2B calculates up to but not including TJD
		Calculate accrual adjustment based on WIRN
		*/
		set INT = $$ACRCALC^LNPTS2B(.ln,.WIRN())
	
		}
	
	if 'FORWARD set INT = INT * (-1)
	
	set %ACR = $$^SCARND(%ACR, 0, CID.get()) + $$^SCARND(INT, 0, CID.get())
	set ADJ = $$^SCARND(INT, 0, CID.get())

	set %LNACR = ln.acr_"|"_%DAYS_"|"_ln.balint_"|"_ADJ_"|"_%ACR_"|"_ln.irn
	
	quit 
 #OPTION ResultClass ON
Public String vSIG()	quit "60841^62425^Sanjay Chhabria^3513"	// Signature - LTD^TIME^USER^SIZE
