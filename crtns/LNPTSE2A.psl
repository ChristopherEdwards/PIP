public	LNPTSE2A(RecordLN ln, RecordTTX ttx)

	/*
	Get/update history data for error corrects
	
	Arguments:
	.  ln   Loan object             /TYP=RecordLN/REQ/MECH=REF:R
        .  ttx  Transaction Object      /TYP=RecordTTX/REQ/MECH=REF:R

	----------   Revision History   ------------------------------------
	
	01/13/06 - KELLYP - CR 19018
		   Modified to plus SEQZERO (when JD is defined) to prevent
		   "Insufficient Values" Oracle error.
	
	01/12/06 - SmithCD - CR 18987
		   . Plussed the assignment of JD to ln.hisctf and 
		     %EffectiveDate to prevent "Insufficient Values" Oracle 
		     error
		   . Added 1 as the third parameter in the first Db.select() 
		     on HIST0 to prevent "Record not Found" PSL error

	03/14/05 - TITOVE - CR 13733
	 	   Modified as part of DBI2 project. Removed old revision
	   	   history.

	*/

	type public Cache %CACHE()
	type public Date LADT
	type public Number BAOLA, HABL1, HABL2

	type Boolean CRDR
	type Date JD
	type Number ADJAVCR, CID, SEQZERO, UDBAL, VBAL
	type String HAMT, PCF, XTSO

	set CID = ttx.cid
	
	// Set up TSO array to check sequence numbers
	set XTSO = ttx.tso		// Transaction Source of Funds
	if 'XTSO.isNull() do OUT^UTSO(.XTSO,XTSO)

	// Get last purge date
	set JD = +ln.hisctf		// History Cut-Off Date

	// If no History Cut-Off date, find the date prior to the effective date
	if 'JD set JD = +%EffectiveDate do {
		type ResultSet rs = Db.select("JD", "HIST0", "CID = :CID AND JD < :JD", "JD DESC")
		if rs.next() set JD = rs.getCol("JD")
		}

	if 'JD set (BAOLA,HABL1,HABL2,LADT,SEQZERO,UDBAL,VBAL) = 0
	else  do {
		type RecordHIST0 hist0 = Db.getRecord("HIST0", "CID = :CID ,JD = :JD", 1)

		set BAOLA = hist0.baola		// Balance as of Last Advance
		set HABL1 = hist0.habl1		// Highest Balance - Life
		set HABL2 = hist0.habl2		// Highest Balance - From Last Zero Bal
		set LADT = hist0.ladt		// Date of Last Loan Advance
		set SEQZERO = +hist0.seqzero	// Zero Level Sequence Number
		set UDBAL = hist0.udbal		// Undisbursed Balance
		set VBAL = hist0.bal		// Account Balance
		}

	// If using undisbursed processing (ARUF=1) decrease the balance by
	// the undisbursed amount
	if ln.aruf set VBAL = VBAL - UDBAL

	// Process history transactions starting from Zero Level Sequence Number
	type DbSet ds = Db.selectDbSet("HIST", "CID = :CID AND TSEQ >= :SEQZERO")
	while ds.next() do {

		type RecordHIST  hist = ds.getRecord("HIST")	

		// File Maintenance transaction
		if 'hist.tamt.translate("#0") quit

	   	// Skip over error corrected and reversed transactions	
		if ttx.itc12,(hist.tseq = XTSO("REV").get()) quit 	
	        if ttx.itc6,$$ECD(.ttx,.hist,XTSO("EC").get()) quit

		// Get information from TRN record
		type RecordTRN trn = %CACHE("TRN").getRecord("TRN", "ETC = :hist.etc")
		set CRDR = trn.itc.extract()
		set PCF = trn.pcf
		
		set HAMT = hist.tamt
		
		if HAMT.isLike("%#%") set HAMT = HAMT.piece("#",2) + HAMT.piece("#",5)

		// Calculate account balance up to this history transaction
		set ADJAVCR = hist.tso.getSub("ADJAVCR","~","#")

		// Transaction to Reduce Balance
		if 'ADJAVCR do {
			if ln.trb set VBAL = VBAL - $select(CRDR:HAMT,1:-HAMT)
			else  set VBAL = VBAL + $select(CRDR:HAMT,1:-HAMT)
			}

		// Disbursement - get BAOLA and LADT		
		if trn.pcf.extract(4),(ln.trb - hist.itc.extract()) do {
			if 'ttx.itc6 set BAOLA = VBAL
			set LADT = hist.tjd
			if hist.efd set LADT = hist.efd
			}

		// Highest account balance - life
		if '(ttx.itc6 + ttx.itc12),(VBAL > HABL1) set HABL1 = VBAL

		// Reset HABL2 (high account balance between zero balances)
		if '(ttx.itc6 + ttx.itc12),(VBAL > HABL2) set HABL2 = VBAL
		else  if (VBAL < .01),(HABL2 > 0) set HABL2 = VBAL

		if ttx.itc6 quit

		// If procesing transaction is a reversal or effective dated,
		// update existing 0 levels
		if (%SystemDate - %EffectiveDate) ! ttx.itc12 do {
			type RecordHIST0 hist0 = Db.getRecord("HIST0","CID = :CID, JD = :hist.tjd", 1)
			if hist0.getMode() = 0 quit
			
			set hist0.bal = VBAL
			set hist0.seqzero = SEQZERO
			set hist0.baola = BAOLA
			set hist0.ladt = LADT
			set hist0.habl1 = HABL1
			set hist0.habl2 = HABL2

			do hist0.bypassSave()
			}
		}

	quit

ECD(RecordTTX ttx,		// Transaction Object		/MECH=REF:R
  RecordHIST hist,		// History Object		/MECH=REF:R
        Number EC)		// Client trace number
	/*
	   Finds out whether this is an error corrected transaction
	*/

	type public Number CID
	
	//  Same date 
	if hist.tjd '= %SystemDate quit 0
	//  Same branch 
	if hist.brcd '= ttx.brcd quit 0
	//  Same user 
	if hist.uid '= %UserID quit 0

	if '$$ECSCAN^TTXEXT(CID,hist.etc,hist.tamt,EC,hist.tjd,ttx.brcd,hist.uid) quit 0

	quit 1
 #OPTION ResultClass ON
Public String vSIG()	quit "60278^45994^Pat Kelly^4464"	// Signature - LTD^TIME^USER^SIZE
