public LNLS5A(RecordLNLS2 pl,Date TPD,Number BRCD,String SVUID,String INCD,String PL)	

	//POST PARTICIPARTION POOL

	/*
	---- Revision History ------------------------------------------------

	04/25/07 - SENTHIL J. KUMAR - CR 24990
		   Modified LOAD section to fetch HIST.TSEQ correctly.

	07/12/06 - KELLYP - CR 22154
		   Modified LOAD section to prevent various UNDEFINED errors.
		   Also cleaned up various items throughout procedure and 
		   modified top level to be more efficient when collating
		   through LNLS4.

	01/13/06 - KELLYP - CR 19018
		   Modified INITCON section to set TRC=0 instead of "".  This
		   prevents an "Insufficient Values" Oracle error.

	11/23/05 - chhabris - CR18008
		   Replaced depricated methods. Also, removed the revision 
		   history prior to 2004.

	07/26/05 - SkariahV- CR16679
		   Removed #WARN directive.
		                 	
	----------------------------------------------------------------------- 
	*/
	
	type public Number ER
	type public String ET,RM
		
	type Number CID,NFBRCD,NFTRC,PICM,PP,WCID
	type Boolean SWAP
	type String GRP,NFUID

	set (NFBRCD,NFUID,NFTRC)=""
	set ER=0

	set PP=+pl.pp
	set SWAP=pl.swap
	set PICM=pl.picm
	set WCID=pl.wash

	// contra accounts
	if PICM=6 do INITCON(TPD,BRCD) if ER quit 

	// Initialize loan net fee processing
	if 'SWAP do {
		do INIT(BRCD,.NFBRCD,.NFUID,.NFTRC)
		if ER set SWAP=1
 		}

	catch vERROR {
		set ET=vERROR.type

		if ET["%GTM-" do { quit
			do ZE^UTLERR
			do LOGERR()
			}

		//Error in account, not processed
		set ET=$$^MSG(3511)

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description
		do LOGERR()
		}

	type DbSet ds=Db.selectDbSet("LNLS4","INCD=:INCD AND PL=:PL","INCD,PL,GRP,CID ASC")
	while ds.next() do {
		type RecordLNLS4 lnls4=ds.getRecord("LNLS4")
		do LOAD(.lnls4,lnls4.grp,lnls4.cid,PP,PICM,INCD,PL,NFBRCD,NFUID,NFTRC,SWAP,TPD,BRCD,WCID)
		}

	do END(.pl,INCD,PL,PICM)

	quit


LOAD(RecordLNLS4 lnls4,
	String GRP,
	Number CID,
	Number PP,
	Number PICM,
	String INCD,
	String PL,
	Number NFBRCD,
	String NFUID,
	Number NFTRC,
	Boolean SWAP,
	Date TPD,
	Number BRCD,
	Number WCID)	//

 	type public String ACN,ET,LS

	// Record locked by another user
	lock +ACN(CID):2 else  set ET="RECLOC" do LOGERR(CID) quit

	// Record locked by another user
	lock +LS(CID):2 else  set ET="RECLOC" do LOGERR(CID) lock -ACN(CID) quit

	type Number ACR,BAL,BAL1,CC,CCID,CONTRA,PSEQ,TSEQ,TYPE,XSEQ
	type String CLS,LNGRP,TCMT,X
	type Date %EffectiveDate,ESD

	type RecordLN ln=Db.getRecord("LN","CID=:CID")

	set CLS=ln.cls
	set LNGRP=ln.grp 
	set TYPE=ln.type
	set CC=ln.cc 

	type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID","TSEQ DESC")
	if rs.next() set TSEQ=rs.getCol("TSEQ")+1

	// Accrued Interest
	set ACR=ln.acr

	// Investor's percentage of accrued interest
	set ACR=PP/100*ACR

	// round
	set ACR=$$FN^SCARND(ACR,0,CID)

	// Contra interest account
	set CONTRA=CUVAR.contra

	set BAL=lnls4.sbal 
	set ESD=lnls4.dtap 
	set XSEQ=lnls4.xseq

	if PICM=6,BAL=0 lock -ACN(CID) lock -LS(CID) quit

	if PICM=6 do { 
		set BAL1=lnls4.sold 
		set PP=$$^SCARND(BAL1/BAL*100,0,"","",5) 
		set CCID=lnls4.contra
		}

	type ResultSet rs1=Db.select("PSEQ","LNLS6","CID>:CID")
	if rs1.next() set PSEQ=rs1.getCol("PSEQ")
	else  set PSEQ=1

	set %EffectiveDate=""
	if ESD'=%SystemDate set %EffectiveDate=ESD

	set X=$S(PICM=6:"$"_BAL1,1:PP_"%")

	// Sold ~p1 to ~p2 in pool ~p3
	set TCMT=$$^MSG(6871,X,INCD,PL)

	//FILE section - Update LNLS6,LNLS4

	type RecordLNLS6 lnls6=Class.new("RecordLNLS6")
	set lnls6.cid=CID
	set lnls6.pseq=PSEQ
	set lnls6.incd=INCD
	set lnls6.pl=PL
	set lnls6.grp=GRP
	set lnls6.sdat=ESD
	set lnls6.bbal=BAL
	set lnls6.plrpb=BAL
	set lnls6.plrsb=BAL

	if PICM=6 do { 
		type RecordLNLS6B lnls6b=Class.new("RecordLNLS6B")
		set lnls6b.cid=CID
		set lnls6b.pseq=PSEQ
		set lnls6b.ops=PP
		set lnls6b.plrpb=BAL1
		do lnls6b.bypassSave()

		set lnls6.ccid=CCID
		}

	do lnls6.bypassSave()

	type RecordLNLS8 lnls8=Class.new("RecordLNLS8")
	set lnls8.incd=INCD
	set lnls8.pl=PL
	set lnls8.grp=GRP
	set lnls8.cid=CID
	set lnls8.pseq=PSEQ
	do lnls8.bypassSave()

	do Db.delete("LNLS4B","CID=:CID AND XSEQ=:XSEQ")  

	/*
	Entry to Loans Sold Daily Transactions - will be used for contra
	interest correction if there is a GLCONTRA account.
	*/	
	
	if CONTRA,PICM'=6 do { 	
		type RecordLNLSDT lnlsdt=Class.new("RecordLNLSDT")
       	 	set lnlsdt.efd=%SystemDate
		set lnlsdt.incd=INCD
		set lnlsdt.pl=PL
		set lnlsdt.cid=CID
		set lnlsdt.tseq=TSEQ
		set lnlsdt.lnsfl=1
		set lnlsdt.sdatacr=ACR
		do lnlsdt.bypassSave()
		}

	//Update HIST file
	type RecordHIST hist=Class.new("RecordHIST")
	set hist.cid=CID
	set hist.tseq=TSEQ
	set hist.tjd=%SystemDate
	set hist.tlo=%UserStation
	set hist.tcmt=TCMT
	set hist.cdt=%CurrentDate
	set hist.time=%CurrentTime
	set hist.uid=%UserID

	// The HIST filer will update DTJFM
	do hist.save()
	
	// Decrement "Sales Pending" counter
	set ln.tflg=ln.tflg-1

	// Turn participation flag on
	set ln.pflg=1

	do ln.bypassSave()

	if PICM=6 do CONTRA(TPD,BRCD,%EffectiveDate,CCID,INCD,PL,CID,PSEQ,BAL1,WCID)

	/*
	Post any deferred fees for this loan which may be taken into income
	because of the sale.  Loans which are swapped do not have fees
	recognized at the sale.
	*/	

	if 'SWAP do ^LNNFLS(.ln,NFBRCD,NFUID,.NFTRC)

	lock -ACN(CID)
	lock -LS(CID)
	
	quit


LOGERR(Number CID)	// Log error in exception file

	type public String ET,RM

	// Post Participation Pool
	do LOG^UTLEXC($T(+0),"*",$$^MSG(6870),$G(CID),"",$G(ET))
	quit


END(RecordLNLS2 pl,String INCD,String PL,Number PICM)	//

	type Public String ET,RM
 	type Public String ACN,LS
	type Public Number CID

	catch vERROR {
		set ET=vERROR.type

		if ET["%GTM-" do { quit
			do ZE^UTLERR
			do LOGERR()
			}

		//Error in account, not processed
		set ET=$$^MSG(3511)

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description
		do LOGERR()
		}


	do pl.save()	
	
	//do not kill this global anymore for remittance method 6 (at least for now)
	if PICM'=6 do Db.delete("LNLS4","INCD=:INCD AND PL=:PL")

	quit


INITCON(Date TPD,Number BRCD)	// contra accounts

	type Number %BRCD,TRC

	type Public Number ER
	type Public String ET

	if TPD="" set TPD=%SystemDate

	set %BRCD=BRCD 
	set TRC=0

	type RecordTPCTRL ztcptrl=Db.getRecord("TPCTRL","BRCD=:BRCD,UID=:%UserID,TPD=:%SystemDate",1)
	if ztcptrl.getMode() do { if ER quit
		type RecordTPCTRL tpctrl=Db.getRecord("TPCTRL","BRCD=:BRCD,UID=:%UserID,TPD=:%SystemDate",1)
		
		// Batch posting invalid for PMed users
		if tpctrl.pmdate set ER=1 set ET="BTCHPM"
		}

	type RecordTTXUID ttxuid1=Db.getRecord("TTXUID","TJD=:%SystemDate,BRCD=:BRCD,UID=:%UserID",1) 
	if 'ttxuid1.getMode() do {
		type RecordTTXUID ttxuid=Class.new("RecordTTXUID")
		set ttxuid.tjd=%SystemDate
		set ttxuid.brcd=BRCD
		set ttxuid.uid=%UserID
		do ttxuid.bypassSave()
		set TRC=1001
		}

	else  do {
		type ResultSet rs=Db.select("TSEQ","TTX","TJD=:%SystemDate AND BRCD=:BRCD AND UID=:%UserID AND TSEQ<:TRC")
		if rs.next() set TRC=rs.getCol("TSEQ")
		set TRC=(((TRC\1000)+1)*1000)+1
		}	

	quit


CONTRA(Date TPD,
	Number BRCD,
	Date %EffectiveDate,
	Number CCID,
	String INCD,
	String PL,
	Number CID,
	Number PSEQ,
	Number BAL1,
	Number WCID)	// contra accounts

	type Boolean %MCP
	type Number ITC,TRC,TRNSEQ,TYPE
	type String CRCD,ETC,TCMT

	set TRC=""

	type ResultSet rs1=Db.select("TSEQ","TTX","TJD=:%SystemDate AND BRCD=:BRCD AND UID=:%UserID","TRC")
	if rs1.next() set TRC=rs1.getCol("TSEQ")
	set TRC=(((TRC\1000)+1)*1000)+1

	type RecordLN cln=Db.getRecord("LN","CID=:CCID",1)
	if cln.getMode() do {
		set TYPE=cln.type
		set CRCD=cln.crcd 
		}
	else  set (TYPE,CRCD)=""
	if CRCD.isNull() set CRCD=%SystemCurrency

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE",1)
	if prodctl.getMode() set ETC=prodctl.drtrgp
	else  set ETC=""
	
	type RecordTRN trn=Db.getRecord("TRN","ETC=:prodctl.drtrgp",1)	
	if trn.getMode() set ITC=trn.itc
	else  set ITC=""
		
	
	set TCMT=""_INCD_","_PL_","_CID_","_PSEQ_""

	type RecordTTX ttx()

	set TRNSEQ=1

	set ttx(TRNSEQ)=Class.new("RecordTTX")

	set ttx(TRNSEQ).tjd=TPD
	set ttx(TRNSEQ).brcd=BRCD
	set ttx(TRNSEQ).uid=%UserID
	set ttx(TRNSEQ).tseq=TRC

	set ttx(TRNSEQ).cid=CCID
	set ttx(TRNSEQ).itc=ITC
	set ttx(TRNSEQ).etc=ETC
	set ttx(TRNSEQ).tamt=BAL1
	set ttx(TRNSEQ).efd=%EffectiveDate
	set ttx(TRNSEQ).tlo=%UserStation
	set ttx(TRNSEQ).tcmt=TCMT
	set ttx(TRNSEQ).cdt=%CurrentDate
	set ttx(TRNSEQ).tim=%CurrentTime
	set ttx(TRNSEQ).brcde=BRCD
	set ttx(TRNSEQ).uidt=%UserID

	set %MCP=CUVAR.%MCP

	if %MCP,cln.crcd'="" set ttx(TRNSEQ).crcd=cln.crcd

	set TRC=TRC+1
	set TRNSEQ=TRNSEQ+1

	type RecordDEP wash=Db.getRecord("DEP","CID=:WCID")
	set TYPE=wash.type
	set CRCD=wash.crcd 
	if CRCD="" set CRCD=%SystemCurrency
		
	type RecordPRODCTL prodctl1=Db.getRecord("PRODCTL","TYPE=:TYPE",1)
	if prodctl1.getMode() set ETC=prodctl1.drtrgp
	else  set ETC=""

	type RecordTRN trn1=Db.getRecord("TRN","ETC=:ETC",1)
	if trn1.getMode() set ITC=trn1.itc
	else  set ITC=""
 
	set ttx(TRNSEQ)=Class.new("RecordTTX")
 
	set ttx(TRNSEQ).tjd=TPD
	set ttx(TRNSEQ).brcd=BRCD
	set ttx(TRNSEQ).uid=%UserID
	set ttx(TRNSEQ).tseq=TRC

	set ttx(TRNSEQ).cid=WCID
	set ttx(TRNSEQ).itc=ITC
	set ttx(TRNSEQ).etc=ETC
	set ttx(TRNSEQ).tamt=BAL1
	set ttx(TRNSEQ).efd=%EffectiveDate
	set ttx(TRNSEQ).tlo=%UserStation
	set ttx(TRNSEQ).tcmt=TCMT
	set ttx(TRNSEQ).cdt=%CurrentDate
	set ttx(TRNSEQ).tim=%CurrentTime
	set ttx(TRNSEQ).brcde=BRCD
	set ttx(TRNSEQ).uidt=%UserID

	if %MCP,wash.crcd'="" set ttx(TRNSEQ).crcd=wash.crcd

	do TRNSET^TRNDRV(.ttx(),TPD,BRCD,2)

	quit


INIT(Number BRCD,Number NFBRCD,String NFUID,Number NFTRC)    //

	type public Number ER
	type public String ET,ERRM

	type Date %EffectiveDate
	type Number STATUS
	type String %UserID,KEY,SRCTYP

	// Loan Points Amortization teller is not defined.
	set ERRM(1)=$$^MSG(4162)

	// Loan Points Teller is not set up in user table.
	set ERRM(2)=$$^MSG(4163)

	// Posting Branch Not Defined
	set ERRM(3)=$$^MSG(3823)

	// Posting Tran Code Not Defined - Posting Halted
	set ERRM(4)=$$^MSG(3825)

	// Posting Offset Account Not Defined - Posting Halted
	set ERRM(5)=$$^MSG(3824)

	// Amount Processed Equal to Zero
	set ERRM(6)=$$^MSG(3819)

	// Account in non-accrual, no amortization
	set ERRM(7)=$$^MSG(4150)

	set %EffectiveDate=%SystemDate

	set SRCTYP="PTS"
	set KEY="ALL"

	do SOURCE^BCHSOURC(SRCTYP,KEY,.%UserID,.BRCD,.%UserClass)
	if ER do LOGERR() quit

	set NFBRCD=BRCD
	set NFUID=%UserID
 
	set STATUS=0 do ^TTXLOK if ER do { quit
		if '$G(ET) set ET="TTXLOK"
		do LOGERR()
		}
		
	type RecordTTXUID ttxuid1=Db.getRecord("TTXUID","TJD=:%SystemDate,BRCD=:NFBRCD,UID=:NFUID",1)
	if 'ttxuid1.getMode() do {
		type RecordTTXUID ttxuid=Class.new("RecordTTXUID")
		set ttxuid.tjd=%SystemDate
		set ttxuid.brcd=NFBRCD
		set ttxuid.uid=NFUID
		do ttxuid.bypassSave()
		}

	set NFTRC=Db.currVal("TTX","TJD=:%SystemDate,BRCD=:NFBRCD,UID=:NFUID")
	set NFTRC=(((NFTRC\1000)+1)*1000)+1

 	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60745^15655^Senthilkumar Jeyaeasan^10378"	// Signature - LTD^TIME^USER^SIZE
