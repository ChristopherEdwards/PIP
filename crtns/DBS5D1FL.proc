DBS5D1FL(RecordDBTBL5D1 dbtbl5d1, String vpar, Boolean vparNorm) // DBTBL5D1 - Report Definition (Pre/Post-Proc) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl5d1.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(dbtbl5d1,.vxins(),1,$C(12))
	if %O = 1 do AUDIT^UCUTILN(dbtbl5d1,.vx(),1,$C(12))

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("LIBS").exists()!vx("RID").exists()!vx("GRP").exists()!vx("ITMSEQ").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL5D1",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL5D1","LIBS = :dbtbl5d1.libs and RID = :dbtbl5d1.rid and GRP = :dbtbl5d1.grp and ITMSEQ = :dbtbl5d1.itmseq and SEQ = :dbtbl5d1.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String LIBS
	type public String RID
	type public String GRP
	type public String ITMSEQ
	type public String SEQ

	type RecordDBTBL5D1 dbtbl5d1 = Db.getRecord("DBTBL5D1","LIBS=:LIBS,RID=:RID,GRP=:GRP,ITMSEQ=:ITMSEQ,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do dbtbl5d1.setMode(2)

		do DBS5D1FL(dbtbl5d1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL5D1 dbtbl5d1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL5D1","LIBS = :dbtbl5d1.libs and RID = :dbtbl5d1.rid and GRP = :dbtbl5d1.grp and ITMSEQ = :dbtbl5d1.itmseq and SEQ = :dbtbl5d1.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl5d1))  S ^DBTBL(vobj(dbtbl5d1,-3),5,vobj(dbtbl5d1,-4),vobj(dbtbl5d1,-5),vobj(dbtbl5d1,-6),vobj(dbtbl5d1,-7))=vobj(dbtbl5d1)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL5D1 dbtbl5d1


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DBTBL(vobj(dbtbl5d1,-3),5,vobj(dbtbl5d1,-4),vobj(dbtbl5d1,-5),vobj(dbtbl5d1,-6),vobj(dbtbl5d1,-7)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordDBTBL5D1 dbtbl5d1

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL5D1 dbtbl5d1

	if dbtbl5d1.libs.isNull() do vreqerr("LIBS") quit
	if dbtbl5d1.rid.isNull() do vreqerr("RID") quit
	if dbtbl5d1.grp.isNull() do vreqerr("GRP") quit
	if dbtbl5d1.itmseq.isNull() do vreqerr("ITMSEQ") quit
	if dbtbl5d1.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL5D1","MSG",1767,"DBTBL5D1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL5D1 dbtbl5d1

	if dbtbl5d1.libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LIBS", vRM) quit
	if dbtbl5d1.rid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RID", vRM) quit
	if dbtbl5d1.grp.length()>33 set vRM = $$^MSG(1076,33) do vdderr("GRP", vRM) quit
	set X = dbtbl5d1.itmseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ITMSEQ", vRM) quit
	set X = dbtbl5d1.seq if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,1,,,,,3) if 'vRM.isNull() set vRM = $$^MSG(979,"DBTBL5D1.SEQ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if dbtbl5d1.data.length()>400 set vRM = $$^MSG(1076,400) do vdderr("DATA", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL5D1","MSG",979,"DBTBL5D1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL5D1 dbtbl5d1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("LIBS").exists() set vux("LIBS") = vx("LIBS")
	if vx("RID").exists() set vux("RID") = vx("RID")
	if vx("GRP").exists() set vux("GRP") = vx("GRP")
	if vx("ITMSEQ").exists() set vux("ITMSEQ") = vx("ITMSEQ")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = dbtbl5d1.libs_","_dbtbl5d1.rid_","_dbtbl5d1.grp_","_dbtbl5d1.itmseq_","_dbtbl5d1.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl5d1.libs_","_dbtbl5d1.rid_","_dbtbl5d1.grp_","_dbtbl5d1.itmseq_","_dbtbl5d1.seq // Copy new keys into object
	type RecordDBTBL5D1 vnewrec = dbtbl5d1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL5D1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL5D1 dbtbl5d1

	if vux("LIBS").exists() set dbtbl5d1.libs = vux("LIBS").piece("|",i)
	if vux("RID").exists() set dbtbl5d1.rid = vux("RID").piece("|",i)
	if vux("GRP").exists() set dbtbl5d1.grp = vux("GRP").piece("|",i)
	if vux("ITMSEQ").exists() set dbtbl5d1.itmseq = vux("ITMSEQ").piece("|",i)
	if vux("SEQ").exists() set dbtbl5d1.seq = vux("SEQ").piece("|",i)
	quit
