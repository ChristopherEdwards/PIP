R01S085	// SCA014 - Rate Change Summary
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 09/10/2007 15:38 - root

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date VIN1

	set RID="SCA014"
	set RN="Rate Change Summary"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|10||[LNVRCHG]ICHND|[LNVRCHG]ICHND:DISTINCT||||D|Interest Change Next Date|||||"

	set %READ="IO/REQ,VIN1#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date VIN1
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,BOO,CONAM,ICHND,RID,RN,TYPE,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA014",RN="Rate Change Summary"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA014","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[LNVRCHG]CID#1#12,[LN]LNM#15#15,[LN]BAL#34#12,[LN]IRN#49#8,[LN]PMTPI#59#12,[LN]INDEX#73#10,[LNVRCHG]RATE#91#8,[LNVRCHG]CALBAL#99#12,[LNVRCHG]CALTRM#114#5,[LNVRCHG]NRATE#125#8"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE

		set VBNRINFO("PROMPTS",1)="WC1|"_"Interest Change Next Date"_"|VIN1|"_$$DAT^%ZM(VIN1.get(),%MSKD)

		set VWHERE=""
		set VWHERE=VWHERE_"LNVRCHG.ICHND=:VIN1 AND ((LN.PCIDSTAT=0) OR (LN.PC"
		set VWHERE=VWHERE_"IDSTAT=''))"

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Rate Change Summary"
		set VBNRINFO("PGM")="R01S085"
		set VBNRINFO("RID")="SCA014"
		set VBNRINFO("TABLES")="LNVRCHG,LN"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,LNVRCHG]""ICHND"""
		set VBNRINFO("ORDERBY",2)="[SYSDEV,LNVRCHG]ICHND"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,LN]BOO"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,LN]TYPE"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,LNVRCHG]CID"

		set VBNRINFO("DOC",1)=" Lists accounts as rates are modified."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:5 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:7 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("LNVRCHG.ICHND,LN.BOO,LN.TYPE,LNVRCHG.CID,LN.LNM,LN.BAL,LN.IRN,LN.PMTPI,LN.INDEX,LNVRCHG.RATE,LNVRCHG.CALBAL,LNVRCHG.CALTRM,LNVRCHG.NRATE,LNVRCHG.IRN","LNVRCHG,LN","LNVRCHG.ICHND=:VIN1 AND ((LN.PCIDSTAT=0) OR (LN.PCIDSTAT=''))","LNVRCHG.ICHND,LN.BOO,LN.TYPE,LNVRCHG.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14
	set vc1=V.piece($C(9),1)			// LNVRCHG.ICHND
	set vc2=V.piece($C(9),2)			// LN.BOO
	set vc3=V.piece($C(9),3)			// LN.TYPE
	set vc4=V.piece($C(9),4)			// LNVRCHG.CID
	set vc5=V.piece($C(9),5)			// LN.LNM
	set vc6=V.piece($C(9),6)			// LN.BAL
	set vc7=V.piece($C(9),7)			// LN.IRN
	set vc8=V.piece($C(9),8)			// LN.PMTPI
	set vc9=V.piece($C(9),9)			// LN.INDEX
	set vc10=V.piece($C(9),10)			// LNVRCHG.RATE
	set vc11=V.piece($C(9),11)			// LNVRCHG.CALBAL
	set vc12=V.piece($C(9),12)			// LNVRCHG.CALTRM
	set vc13=V.piece($C(9),13)			// LNVRCHG.NRATE
	set vc14=V.piece($C(9),14)			// LNVRCHG.IRN
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(5)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4,vb5
	set (vb1,vb2,vb3,vb4,vb5)=0
	if vb2!(vovc1'=vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,VH0=1
	if vb3!(+vovc2'=+vc2) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,VH0=1
	if vb4!(+vovc3'=+vc3) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(5) set vs(5)=1 do VSUM5 quit:VFMQ  do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),vc11,vc12,vc14,vc13,vc6,vc7,vc8
	type Public String VSTATS

	set VT(5)=VT(5)+1
	set VT(5,1,1)=VT(5,1,1)+vc11			// @TOT([LNVRCHG]CALBAL)
	set VT(5,2,1)=VT(5,2,1)+vc12			// @AVG([LNVRCHG]CALTRM)
	set VT(5,3,1)=VT(5,3,1)+vc14			// @AVG([LNVRCHG]IRN)
	if VT(5,3,2)=""!(vc14>VT(5,3,2)) set VT(5,3,2)=+vc14	// @MAX([LNVRCHG]IRN)
	if VT(5,3,3)=""!(vc14<VT(5,3,3)) set VT(5,3,3)=+vc14	// @MIN([LNVRCHG]IRN)
	set VT(5,4,1)=VT(5,4,1)+vc13			// @AVG([LNVRCHG]NRATE)
	if VT(5,4,2)=""!(vc13>VT(5,4,2)) set VT(5,4,2)=+vc13	// @MAX([LNVRCHG]NRATE)
	if VT(5,4,3)=""!(vc13<VT(5,4,3)) set VT(5,4,3)=+vc13	// @MIN([LNVRCHG]NRATE)
	set VT(5,5,1)=VT(5,5,1)+vc6			// @TOT([LN]BAL)
	set VT(5,6,1)=VT(5,6,1)+vc7			// @AVG([LN]IRN)
	if VT(5,6,2)=""!(vc7>VT(5,6,2)) set VT(5,6,2)=+vc7	// @MAX([LN]IRN)
	if VT(5,6,3)=""!(vc7<VT(5,6,3)) set VT(5,6,3)=+vc7	// @MIN([LN]IRN)
	set VT(5,7,1)=VT(5,7,1)+vc8			// @TOT([LN]PMTPI)
	quit

VDTL5	// Detail
	type public String %TIM,BOO,ICHND,IOSL,TYPE,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc4,VO=V do VP1 quit:VFMQ!verror.get()  set V=$J(V,12) set VL=V
	set VL=VL_$J("",14-VL.length())_$E(vc5,1,15)
	set VL=VL_$J("",33-VL.length())_$S(vc6="":"",1:$J(vc6,0,2))
	set VL=VL_$J("",48-VL.length())_$S(vc7="":"",1:$J(vc7,0,2))
	set VL=VL_$J("",58-VL.length())_$S(vc8="":"",1:$J(vc8,0,2))
	set VL=VL_$J("",72-VL.length())_$E(vc9,1,10)
	set VL=VL_$J("",90-VL.length())_$S(vc10="":"",1:$J(vc10,0,2))
	set VL=VL_$J("",98-VL.length())_$S(vc11="":"",1:$J(vc11,0,2))
	set VL=VL_$J("",113-VL.length())_$J(vc12,5)
	set VL=VL_$J("",124-VL.length())_$S(vc13="":"",1:$J(vc13,0,2))
	do VOM
	quit

VSUM5	// Summary
	type public String %TIM,BOO,I,ICHND,IOSL,TYPE,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if 'VT(5) quit
	if VLC+37>IOSL do VHDG0 quit:VFMQ

	set VL="TOTALS FOR TYPE:"
	set VL=VL_$J("",17-VL.length())_$J(vc3,4)
	do VOM
	set VL="                      "_"TOTALS:"
	set V=VT(5,5,1)					// @TOT([LN]BAL,)
	set VL=VL_$J("",31-VL.length())_$J(V,14,2)
	set V=VT(5,7,1)					// @TOT([LN]PMTPI,)
	set VL=VL_$J("",56-VL.length())_$J(V,14,2)
	set V=VT(5,1,1)					// @TOT([LNVRCHG]CALBAL,)
	set VL=VL_$J("",96-VL.length())_$J(V,14,2)
	do VOM
	set VL="                    "_"AVERAGES:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,5,1)/VT(5),1:0)	// @AVG([LN]BAL,)
		}
	set VL=VL_$J("",33-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,6,1)/VT(5),1:0)	// @AVG([LN]IRN,)
		}
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,7,1)/VT(5),1:0)	// @AVG([LN]PMTPI,)
		}
	set VL=VL_$J("",58-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,3,1)/VT(5),1:0)	// @AVG([LNVRCHG]IRN,)
		}
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,1,1)/VT(5),1:0)	// @AVG([LNVRCHG]CALBAL,)
		}
	set VL=VL_$J("",98-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,2,1)/VT(5),1:0)	// @AVG([LNVRCHG]CALTRM,)
		}
	set VL=VL_$J("",113-VL.length())_$J(V,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,4,1)/VT(5),1:0)	// @AVG([LNVRCHG]NRATE,)
		}
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="                     "_"MINIMUM:"
	set V=VT(5,6,3)					// @MIN([LN]IRN,)
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	set V=VT(5,3,3)					// @MIN([LNVRCHG]IRN,)
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	set V=VT(5,4,3)					// @MIN([LNVRCHG]NRATE,)
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="                     "_"MAXIMUM:"
	set V=VT(5,6,2)					// @MAX([LN]IRN,)
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	set V=VT(5,3,2)					// @MAX([LNVRCHG]IRN,)
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	set V=VT(5,4,2)					// @MAX([LNVRCHG]NRATE,)
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="               "_"# OF ACCOUNTS:"
	set V=VT(5)					// @CNT(,N,4)
	set VL=VL_$J("",33-VL.length())_$J(V,4)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="TOTALS FOR BRANCH:"
	set VL=VL_$J("",19-VL.length())_$J(vc2,6)
	do VOM
	set VL="                      "_"TOTALS:"
	set V=VT(5,5,1)					// @TOT([LN]BAL,)
	set VL=VL_$J("",31-VL.length())_$J(V,14,2)
	set V=VT(5,7,1)					// @TOT([LN]PMTPI,)
	set VL=VL_$J("",56-VL.length())_$J(V,14,2)
	set V=VT(5,1,1)					// @TOT([LNVRCHG]CALBAL,)
	set VL=VL_$J("",96-VL.length())_$J(V,14,2)
	do VOM
	set VL="                    "_"AVERAGES:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,5,1)/VT(5),1:0)	// @AVG([LN]BAL,)
		}
	set VL=VL_$J("",33-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,6,1)/VT(5),1:0)	// @AVG([LN]IRN,)
		}
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,7,1)/VT(5),1:0)	// @AVG([LN]PMTPI,)
		}
	set VL=VL_$J("",58-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,3,1)/VT(5),1:0)	// @AVG([LNVRCHG]IRN,)
		}
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,1,1)/VT(5),1:0)	// @AVG([LNVRCHG]CALBAL,)
		}
	set VL=VL_$J("",98-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,2,1)/VT(5),1:0)	// @AVG([LNVRCHG]CALTRM,)
		}
	set VL=VL_$J("",113-VL.length())_$J(V,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,4,1)/VT(5),1:0)	// @AVG([LNVRCHG]NRATE,)
		}
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="                     "_"MINIMUM:"
	set V=VT(5,6,3)					// @MIN([LN]IRN,)
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	set V=VT(5,3,3)					// @MIN([LNVRCHG]IRN,)
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	set V=VT(5,4,3)					// @MIN([LNVRCHG]NRATE,)
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="                     "_"MAXIMUM:"
	set V=VT(5,6,2)					// @MAX([LN]IRN,)
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	set V=VT(5,3,2)					// @MAX([LNVRCHG]IRN,)
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	set V=VT(5,4,2)					// @MAX([LNVRCHG]NRATE,)
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="               "_"# OF ACCOUNTS:"
	set V=VT(5)					// @CNT(,N,4)
	set VL=VL_$J("",33-VL.length())_$J(V,4)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="TOTALS FOR DATE:"
	set VL=VL_$J("",17-VL.length())_$J($$DAT^%ZM(vc1),10)
	do VOM
	set VL="                      "_"TOTALS:"
	set V=VT(5,5,1)					// @TOT([LN]BAL,)
	set VL=VL_$J("",31-VL.length())_$J(V,14,2)
	set V=VT(5,7,1)					// @TOT([LN]PMTPI,)
	set VL=VL_$J("",56-VL.length())_$J(V,14,2)
	set V=VT(5,1,1)					// @TOT([LNVRCHG]CALBAL,)
	set VL=VL_$J("",96-VL.length())_$J(V,14,2)
	do VOM
	set VL="                    "_"AVERAGES:"
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,5,1)/VT(5),1:0)	// @AVG([LN]BAL,)
		}
	set VL=VL_$J("",33-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,6,1)/VT(5),1:0)	// @AVG([LN]IRN,)
		}
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,7,1)/VT(5),1:0)	// @AVG([LN]PMTPI,)
		}
	set VL=VL_$J("",58-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,3,1)/VT(5),1:0)	// @AVG([LNVRCHG]IRN,)
		}
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,1,1)/VT(5),1:0)	// @AVG([LNVRCHG]CALBAL,)
		}
	set VL=VL_$J("",98-VL.length())_$J(V,12,2)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,2,1)/VT(5),1:0)	// @AVG([LNVRCHG]CALTRM,)
		}
	set VL=VL_$J("",113-VL.length())_$J(V,5)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(5):VT(5,4,1)/VT(5),1:0)	// @AVG([LNVRCHG]NRATE,)
		}
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="                     "_"MINIMUM:"
	set V=VT(5,6,3)					// @MIN([LN]IRN,)
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	set V=VT(5,3,3)					// @MIN([LNVRCHG]IRN,)
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	set V=VT(5,4,3)					// @MIN([LNVRCHG]NRATE,)
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="                     "_"MAXIMUM:"
	set V=VT(5,6,2)					// @MAX([LN]IRN,)
	set VL=VL_$J("",48-VL.length())_$J(V,8,5)
	set V=VT(5,3,2)					// @MAX([LNVRCHG]IRN,)
	set VL=VL_$J("",88-VL.length())_$J(V,8,5)
	set V=VT(5,4,2)					// @MAX([LNVRCHG]NRATE,)
	set VL=VL_$J("",124-VL.length())_$J(V,8,5)
	do VOM
	set VL="               "_"# OF ACCOUNTS:"
	set V=VT(5)					// @CNT(,N,4)
	set VL=VL_$J("",33-VL.length())_$J(V,4)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BOO,CONAM,ICHND,RID,RN,TYPE,VL,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+9,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",122-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL="RATE CHANGE SUMMARY REPORT                                                                            System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="                                 "_"<--------------CURRENT-------------->                  <---------CALCULATED--------->           NEW"
	do VOM
	set VL="     "_"ACCOUNT  LAST NAME               BALANCE   INT RATE       PAYMENT  INDEX           UNADJ RATE     BALANCE    TERM          RATE"
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="" do VOM
	set VL="FOR DATE"
	set VL=VL_$J("",9-VL.length())_$J($$DAT^%ZM(vc1),10)
	set VL=VL_$J("",22-VL.length())_"BRANCH"
	set VL=VL_$J("",29-VL.length())_$J(vc2,6)
	set VL=VL_$J("",37-VL.length())_"TYPE"
	set VL=VL_$J("",42-VL.length())_$J(vc3,4)
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,LNVRCHG]CID

 S (DCNT,BCNT,TCNT)=1
	quit
