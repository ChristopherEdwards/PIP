CTFGR1FL(RecordUTBLCTFGRP1 utblctfgrp1, String vpar, Boolean vparNorm) // UTBLCTFGRP1 - Commission/tax/fee Grp Table detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (3)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblctfgrp1.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblctfgrp1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblctfgrp1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String GRPNAME = utblctfgrp1.grpname
	type String CTFPLN = utblctfgrp1.ctfpln

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("GRPNAME").exists()!vx("CTFPLN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLCTFGRP1",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLCTFGRP1","GRPNAME = :utblctfgrp1.grpname and CTFPLN = :utblctfgrp1.ctfpln") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String GRPNAME
	type public String CTFPLN

	type RecordUTBLCTFGRP1 utblctfgrp1 = Db.getRecord("UTBLCTFGRP1","GRPNAME=:GRPNAME,CTFPLN=:CTFPLN")
	if (%ProcessMode = 2) do {
		do utblctfgrp1.setMode(2)

		do CTFGR1FL(utblctfgrp1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLCTFGRP1 utblctfgrp1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLCTFGRP1","GRPNAME = :utblctfgrp1.grpname and CTFPLN = :utblctfgrp1.ctfpln") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblctfgrp1,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblctfgrp1,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblctfgrp1))  S ^UTBL("CTFGRP",vobj(utblctfgrp1,-3),vobj(utblctfgrp1,-4))=vobj(utblctfgrp1)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLCTFGRP1 utblctfgrp1

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblctfgrp1,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("CTFGRP",vobj(utblctfgrp1,-3),vobj(utblctfgrp1,-4)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLCTFGRP1 utblctfgrp1

	if utblctfgrp1.calcord.isNull() do vreqerr("CALCORD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLCTFGRP1 utblctfgrp1

	if utblctfgrp1.grpname.isNull() do vreqerr("GRPNAME") quit
	if utblctfgrp1.ctfpln.isNull() do vreqerr("CTFPLN") quit

		if vx("CALCORD").exists(),utblctfgrp1.calcord.isNull() do vreqerr("CALCORD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCTFGRP1","MSG",1767,"UTBLCTFGRP1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("CALCORD").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - The CTF Group Table After Insert

	type public RecordUTBLCTFGRP1 utblctfgrp1
	/* 

	03/29/01 - STATTOND - 43390

	The After Insert trigger will assign any new plans to a group
	into the DAYENDCTFGRP file. 

	*/

	new CALCORD,CTFPLN,EFD,GRPNAME
	set EFDATE=TJD
	 
	set CTFPLN=utblctfgrp1.ctfpln
	set GRPNAME=utblctfgrp1.grpname
	set CALCORD=utblctfgrp1.calcord

	// do not insert new Group names into DAYENDCTFGRP file

	set x=Db.isDefined("UTBLCTFGRP","GRPNAME") 
	if x=0 quit


	//check if end date on plan has past
	new ENDDATE
	set ENDDATE=Db.getOneRow("ENDDATE","UTBLCTFPLN","CTFPLN")
	if (ENDDATE'="")&(TJD>ENDDATE) set ER=1,RM=$$^MSG(4817) quit


	if Db.isDefined("DAYENDCTFGRP","EFDATE,GRPNAME,CTFPLN") quit
	if 'Db.isDefined("DAYENDCTFGRP","EFDATE,GRPNAME,CTFPLN") do Db.insert("DAYENDCTFGRP","EFDATE,GRPNAME,CTFPLN",":EFDATE,:GRPNAME,:CTFPLN") 	
 	
	quit

vau1 // Trigger AFTER_UPDATE - The CTF Group Table After Update

	type public RecordUTBLCTFGRP1 utblctfgrp1
	/*
	
	03/29/01 - STATTOND - 43390

	The After Update trigger will check for duplicate calculation orders.

	*/ 
	
	new CALCORD,CORD,CTFPLN,GRPNAME,PLN
	
	
	set CTFPLN=utblctfgrp1.ctfpln
	set GRPNAME=utblctfgrp1.grpname
	set CALCORD=utblctfgrp1.calcord

	if ($D(DUP))!(CALCORD="") quit
	type ResultSet rs=Db.select("CTFPLN,CALCORD","UTBLCTFGRP1","GRPNAME=:GRPNAME")
		while rs.next() do {
		set PLN=rs.getCol(1)
		set CORD=rs.getCol(2)
		if $D(PLN(CORD)) set ER=1,RM=$$^MSG(7177) quit:ER
		set PLN(CORD)=""
		}
	quit

vbi1 // Trigger BEFORE_INSERT - The CTF Group Table Before Insert

	type public RecordUTBLCTFGRP1 utblctfgrp1
	/*
	03/29/01 - STATTOND - 43390

	The Before Insert trigger will check for duplicate calculation orders.
	
	*/

	new CALCORD,CORD,CTFPLN,GRPNAME
	
	
	set CTFPLN=utblctfgrp1.ctfpln
	set GRPNAME=utblctfgrp1.grpname
	set CALCORD=utblctfgrp1.calcord

	if CALCORD="" quit
	type ResultSet rs=Db.select("CALCORD","UTBLCTFGRP1","GRPNAME=:GRPNAME")
		while rs.next() do {
		set CORD=rs.getCol(1)
		if CALCORD=CORD set ER=1,RM=$$^MSG(7177) quit:ER
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLCTFGRP1 utblctfgrp1

	if utblctfgrp1.grpname.length()>8 set vRM = $$^MSG(1076,8) do vdderr("GRPNAME", vRM) quit
	set X = utblctfgrp1.ctfpln if 'X.isNull(),'Db.isDefined("UTBLCTFPLN","X") set vRM = $$^MSG(1485,X) do vdderr("CTFPLN", vRM) quit
	set X = utblctfgrp1.calcord if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CALCORD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCTFGRP1","MSG",979,"UTBLCTFGRP1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLCTFGRP1 utblctfgrp1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("GRPNAME").exists() set vux("GRPNAME") = vx("GRPNAME")
	if vx("CTFPLN").exists() set vux("CTFPLN") = vx("CTFPLN")
	do vkey(1) set voldkey = utblctfgrp1.grpname_","_utblctfgrp1.ctfpln // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblctfgrp1.grpname_","_utblctfgrp1.ctfpln // Copy new keys into object
	type RecordUTBLCTFGRP1 vnewrec = utblctfgrp1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLCTFGRP1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLCTFGRP1 utblctfgrp1

	if vux("GRPNAME").exists() set utblctfgrp1.grpname = vux("GRPNAME").piece("|",i)
	if vux("CTFPLN").exists() set utblctfgrp1.ctfpln = vux("CTFPLN").piece("|",i)
	quit
