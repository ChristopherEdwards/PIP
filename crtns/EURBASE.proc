public EURBASE	//

	/*
	ORIG: KumarSS - 11/29/2005
	DESC: EURO - SYSTEM BASE CURRENCY CONVERSION

	KEYWORDS:	

	INPUTS:
		. System	

		. Data	[ddfile]di

		. v1	desc of variable	/TYP=T

	RETURNS:
		. XX	desc of return		/TYP=T

	NOTES:
		CNVMTHD	1 - Straight Conversion
		CNVMTHD	2 - Threshold conversion

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------
	
	04/04/06 - RussellDS - CR20209
		   Remove code related to obsoleted Mutual Funds/Securities.

	11/29/05 - KumarSS - 16668
		   Converted to PSL.
		   Removed revision history prior to 2004
		   
	----------------------------------------------------------------------

	*/

	do START
	quit


	//-----------------------------------------------------------------------
START	// Define Variables, Initialise
	//-----------------------------------------------------------------------

	type Number RFR
	type String %CRCD,CRCD,EMUCRCD,RMC

	set CRCD=CUVAR.%CRCD			// Base Currency
	set EMUCRCD=CUVAR.EMUCRCD		// Currency to convert to
	set %CRCD=EMUCRCD				
	set RMC=CUVAR.RMC                   	// Rounding Method - Conversion
        set RFR=CUVAR.RFR			// Rounding Factor - Conversion

	// Loop through the CTBLEURB table which stores all the files 
	// that need to be converted, and convert the data.
	type ResultSet rseurb=Db.select("FID","CTBLEURB")

	while rseurb.next() do {

		do GETFILE(rseurb.getCol("FID"),CRCD,EMUCRCD)
		}

	// Convert CIF Product Types
	do CIFPRO(EMUCRCD)

	quit


	//-----------------------------------------------------------------------
GETFILE(String FILE,			// Table Name
        String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	// Branch out to convert by checking tablename in CTBLEURB table

	if FILE="AOAMO" do AOAMO(CRCD,EMUCRCD)
	if FILE="CHKSTS" do CHKSTS(CRCD,EMUCRCD)
	if FILE="CIF" do CIF(CRCD,EMUCRCD)
	if FILE="CIFGRPLIM" do CIFGRP(CRCD,EMUCRCD)
	if FILE="CIFTYPLIM" do CIFTYP(CRCD,EMUCRCD)
	if FILE="CRD" do CRD(CRCD,EMUCRCD)
	if FILE="CRDTYP" do CRDTYP(CRCD,EMUCRCD)

	//if FILE="CTBLPTMPTS" do CTBLPTMPTS		- Table CTBLPTMPTS does not exist

	if FILE="CUVAR" do CUVAR(CRCD,EMUCRCD)
	if FILE="DEBAUT" do DEBAUT(CRCD,EMUCRCD)
	if FILE="DEBAUT2" do DEBAUT2(CRCD,EMUCRCD)
	if FILE="DEPOTS" do DEPOTS(CRCD,EMUCRCD)
	if FILE="ERB0" do ERB0(CRCD,EMUCRCD)
	if FILE="EFTFEE" do EFTFEE(CRCD,EMUCRCD)
	if FILE="HTBLLTYPE" do HTBLTYPE(CRCD,EMUCRCD)
	if FILE="KITE0" do KITE0(CRCD,EMUCRCD)
	if FILE="LNOTSCMR" do LNOTSCMR(CRCD,EMUCRCD)
	if FILE="LNOTSMR" do LNOTSMR(CRCD,EMUCRCD)
	if FILE="LNOTSMR1" do LNOTSMR1(CRCD,EMUCRCD)

	//if FILE="RELADPBT" do RELAD			- Table RELADPBT does not exist
	//if FILE="REP224B" do REP224B			- Table REP224B does not exist

	if FILE="SCAU" do SCAU(CRCD,EMUCRCD)
	if FILE="SCAU0" do SCAU0(CRCD,EMUCRCD)
	if FILE="SRVITM" do SRVITM(CRCD,EMUCRCD)
	if FILE="TRN" do TRN(CRCD,EMUCRCD)
	if FILE="UTBLBRCD" do UTBLBRCD(CRCD,EMUCRCD)
	if FILE="UTBLCNTRYLIM" do UTBLCTRY(CRCD,EMUCRCD)
	if FILE="UTBLEFTINST" do UTBLEFT(CRCD,EMUCRCD)

	//if FILE="UTBLEXFEE" do UTBLEXF		- Table UTBLEXFEE does not exist

	if FILE="UTBLINSC" do UTBLINSC(CRCD,EMUCRCD)
	if FILE="UTBLLNPLIM" do UTBLLNPL(CRCD,EMUCRCD)
	if FILE="UTBLOFILIM" do UTBLOFIL(CRCD,EMUCRCD)
	if FILE="UTBLOFPLIM" do UTBLOFPL(CRCD,EMUCRCD)
	if FILE="UTBLRPPB" do UTBLRPPB(CRCD,EMUCRCD)
	if FILE="UTBLRSPDEF" do UTBLRSP(CRCD,EMUCRCD)
	if FILE="UTBLRSPWSCH" do UTBLRSPW(CRCD,EMUCRCD)
	if FILE="UTBLSIC" do UTBLSIC(CRCD,EMUCRCD)
	if FILE="UTBLSRVTYP" do UTBLSRV(CRCD,EMUCRCD)
	if FILE="UTBLSVAL" do UTBLSVAL(CRCD,EMUCRCD)

	quit
	

	//-----------------------------------------------------------------------
CIFPRO(String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Convert CIF Product types in UTBL. First check if [PRODTYPE]CLS="*"
        and [PRODTYPE]GRP="CIF" to ensure that only CIF product types are
        converted. Then check if the currency is an IN currency.
	Only then convert the Currency to [CUVAR]EMUCRCD.
        Since Currency is a key, and is also piece 12 of node 50 it needs to
        be converted in both places and the global currency value needs to be killed.
        */

	type public String CO
	type String CURR

	set CO=CUVAR.CO  // to be used in determining if it is an IN currency

	type DbSet ds=Db.selectDbSet("PRODDFTC")

	while ds.next() do {

		type RecordPRODDFTC proddftc=ds.getRecord("PRODDFTC")

		set CURR=proddftc.crcd
		if CURR=EMUCRCD quit
		set proddftc.crcd=EMUCRCD

		do proddftc.save()
		}
        quit


	//-----------------------------------------------------------------------=
AOAMO(String CRCD,			// Base Currency
      String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through AOAMO table and convert the following data items
        [AOAMO]RPD - Straight Conversion
	[AOAMO]MXAMT, [AOAMO]MXMNBEN - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("AOAMO")

	while ds.next() do {

		type RecordAOAMO aoamo=ds.getRecord("AOAMO")

		if aoamo.rpd.isNull() quit

		set aoamo.rpd=$$RETEXC(aoamo.rpd)

		if 'aoamo.mxamt.isNull() set aoamo.mxamt=$$RETEXC1(aoamo.mxamt,CRCD,EMUCRCD)
		if 'aoamo.mxmnben.isNull() set aoamo.mxmnben=$$RETEXC1(aoamo.mxmnben,CRCD,EMUCRCD)		

		do aoamo.save()
		}

	quit

	//-----------------------------------------------------------------------
CHKSTS(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through ^HLD and convert the following data items
	[CHKSTS]AMT - Straight Conversion
	*/

	type RecordCHKSTS chksts=Db.getRecord("CHKSTS")

	if chksts.getMode() do {

		set chksts.amt=$$RETEXC(chksts.amt,CRCD,EMUCRCD)

		do chksts.save()
		}

	quit


	//-----------------------------------------------------------------------
CIF(String CRCD,			// Base Currency
    String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Convert the currency code to EUR from the Base currency in CIF. 
	This is a reference for the currency of CIF product types.

	Go through CIF table.
	[CIF]AS, [CIF]NW, [CIF]SBLI, [CIF]TA - Striaght Conversion
	[CIF]CRE, [CIF]CUSAMT - Threshold Conversion	
	*/

	type DbSet ds=Db.selectDbSet("CIF")

	while ds.next() do {

		type RecordCIF cif=ds.getRecord("CIF")

		set cif.crcd=EMUCRCD

		if 'cif.ta.isNull() set cif.ta=$$RETEXC(cif.ta,CRCD,EMUCRCD)
		if 'cif.nw.isNull() set cif.nw=$$RETEXC(cif.nw,CRCD,EMUCRCD)
		if 'cif.as.isNull() set cif.as=$$RETEXC(cif.as,CRCD,EMUCRCD)
		if 'cif.sbli.isNull() set cif.sbli=$$RETEXC(cif.sbli,CRCD,EMUCRCD)

		if 'cif.cre.isNull() set cif.cre=$$RETEXC1(cif.cre,CRCD,EMUCRCD)
		if 'cif.cusamt.isNull() set cif.cusamt=$$RETEXC1(cif.cusamt,CRCD,EMUCRCD)

		do cif.save()
		}

	quit


	//-----------------------------------------------------------------------
CIFGRP(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through CIFGRPLIM table and convert the following data items
	[CIFGRPLIM]GRPAMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("CIFGRPLIM")

	while ds.next() do {

		type RecordCIFGRPLIM cgrplim=ds.getRecord("CIFGRPLIM")

		set cgrplim.grpamt=$$RETEXC1(cgrplim.grpamt,CRCD,EMUCRCD)

		do cgrplim.save()
		}

	quit


	//-----------------------------------------------------------------------
CIFTYP(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through CIFTYPELIM table and convert the following data items
	[CIFTYPELIM]TYPEAMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("CIFTYPELIM")

	while ds.next() do {

		type RecordCIFTYPELIM ctypelim=ds.getRecord("CIFTYPELIM")

		set ctypelim.typeamt=$$RETEXC1(ctypelim.typeamt,CRCD,EMUCRCD)

		do ctypelim.save()
		}

	quit


	//-----------------------------------------------------------------------
CRD(String CRCD,			// Base Currency
    String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through CRD table and convert the following data items
	[CRD]TWTLD - Straight Conversion
	[CRD]LMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("CRD")

	while ds.next() do {

		type RecordCRD crd=ds.getRecord("CRD")

		if crd.twtld'="" set crd.twtld=$$RETEXC(crd.twtld,CRCD,EMUCRCD)

		if crd.lmt'="" set crd.lmt=$$RETEXC1(crd.lmt,CRCD,EMUCRCD)

		do crd.save()
		}

	quit


	//-----------------------------------------------------------------------
CRDTYP(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through CRDTYP table and convert the following data items
	[CRDTYP]DLYLMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("CRDTYP")

	while ds.next() do {

		type RecordCRDTYP crdtyp=ds.getRecord("CRDTYP")

		if crdtyp.dlylmt'="" set crdtyp.dlylmt=$$RETEXC1(crdtyp.dlylmt,CRCD,EMUCRCD)

		do crdtyp.save()
		}

	quit


	//-----------------------------------------------------------------------
CUVAR(String CRCD,			// Base Currency
      String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through CUVAR table and convert the following data items
	[CUVAR]NR4BRAMT,[CUVAR]T5RAMT,[CUVAR]TOTASS, [CUVAR]TOTCAP - Straight Conversion
	[CUVAR]%CC, [CUVAR]MINAMT - Threshold Conversion
	*/

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	if cuvar.nr4bramt'="" set cuvar.nr4bramt=$$RETEXC(cuvar.nr4bramt,CRCD,EMUCRCD)
	if cuvar.t5ramt'="" set cuvar.t5ramt=$$RETEXC(cuvar.t5ramt,CRCD,EMUCRCD)
	if cuvar.totass'="" set cuvar.totass=$$RETEXC(cuvar.totass,CRCD,EMUCRCD)
	if cuvar.totcap'="" set cuvar.totcap=$$RETEXC(cuvar.totcap,CRCD,EMUCRCD)

	if cuvar.%cc'="" set cuvar.%cc=$$RETEXC1(cuvar.%cc,CRCD,EMUCRCD)
	if cuvar.minamt'="" set cuvar.minamt=$$RETEXC1(cuvar.minamt,CRCD,EMUCRCD)

	do cuvar.save()

	quit


	//-----------------------------------------------------------------------
DEBAUT(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through DEBAUT table and convert the follwoing data items
	[DEBAUT]LIMIT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("DEBAUT")

	while ds.next() do {

		type RecordDEBAUT debaut=ds.getRecord("DEBAUT")

		if debaut.limit'="" set debaut.limit=$$RETEXC1(debaut.limit,CRCD,EMUCRCD)

		do debaut.save()
		}

	quit


	//-----------------------------------------------------------------------
DEBAUT2(String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through DEBAUT2 table and convert the follwoing data items
	[DEBAUT2]LIMIT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("DEBAUT2")

	while ds.next() do {

		type RecordDEBAUT2 debaut2=ds.getRecord("DEBAUT2")

		if debaut2.limit'="" set debaut2.limit=$$RETEXC1(debaut2.limit,CRCD,EMUCRCD)

		do debaut2.save()
		}

	quit


	//-----------------------------------------------------------------------
DEPOTS(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through DEPOTS table and convert the following data items
	[DEPOTS]PC1, [DEPOTS]PC2, [DEPOTS]PC3, [DEPOTS]PC4 - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("DEPOTS")

	while ds.next() do {

		type RecordDEPOTS depots=ds.getRecord("DEPOTS")

		if depots.pc1'="" set depots.pc1=$$RETEXC(depots.pc1,CRCD,EMUCRCD)
		if depots.pc2'="" set depots.pc2=$$RETEXC(depots.pc2,CRCD,EMUCRCD)
		if depots.pc3'="" set depots.pc3=$$RETEXC(depots.pc3,CRCD,EMUCRCD)
		if depots.pc4'="" set depots.pc4=$$RETEXC(depots.pc4,CRCD,EMUCRCD)

		do depots.save()
		}

	quit


	//-----------------------------------------------------------------------
ERB0(String CRCD,			// Base Currency
     String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through ERB0 table and convert the following data items
	[ERB0]FINR - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("ERB0")

	while ds.next() do {

		type RecordERB0 erb0=ds.getRecord("ERB0")

		set erb0.finr=$$RETEXC(erb0.finr,CRCD,EMUCRCD)

		do erb0.save()
		}

	quit


	//-----------------------------------------------------------------------
EFTFEE(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through EFTFEE table and convert the following data items
	[EFTFEE]AMTFIX, [EFTFEE]AMTMAX, [EFTFEE]AMTMIN - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("EFTFEE")

	while ds.next() do {

		type RecordEFTFEE eftfee=ds.getRecord("EFTFEE")

		if eftfee.amtfix set eftfee.amtfix=$$RETEXC1(eftfee.amtfix,CRCD,EMUCRCD)
		if eftfee.amtmax set eftfee.amtmax=$$RETEXC1(eftfee.amtmax,CRCD,EMUCRCD)
		if eftfee.amtmin set eftfee.amtmin=$$RETEXC1(eftfee.amtmin,CRCD,EMUCRCD)

		do eftfee.save()
		}

	quit


	//-----------------------------------------------------------------------
HTBLTYPE(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through HTBLLTYPE table and convert the following data items
	[HTBLLTYPE]CRLMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("HTBLLTYPE")

	while ds.next() do {

		type RecordHTBLLTYPE htblltyp=ds.getRecord("HTBLLTYPE")

		set htblltyp.crlmt=$$RETEXC1(htblltyp.crlmt,CRCD,EMUCRCD)

		do htblltyp.save()
		}

	quit


	//-----------------------------------------------------------------------
KITE0(String CRCD,			// Base Currency
      String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go though KITE0 and convert the following data items
	[KITE0]DLRSPR - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("KITE0")

	while ds.next() do {

		type RecordKITE0 kite0=ds.getRecord("KITE0")

		set kite0.dlrspr=$$RETEXC(kite0.dlrspr,CRCD,EMUCRCD)

		do kite0.save()
		}

	quit


	//-----------------------------------------------------------------------
LNOTSCMR(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through LNOTSCMR table and convert the follwoing data items
	[LNOTSCMR]PRIN - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("LNOTSCMR")

	while ds.next() do {

		type RecordLNOTSCMR lnotscmr=ds.getRecord("LNOTSCMR")

		set lnotscmr.prin=$$RETEXC(lnotscmr.prin,CRCD,EMUCRCD)

		do lnotscmr.save()
		}

	quit


	//-----------------------------------------------------------------------
LNOTSMR(String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through LNOTSMR table and convert the following data items
	[LNOTSMR]PRIN, [LNOTSMR]PRINADJ - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("LNOTSMR")

	while ds.next() do {

		type RecordLNOTSMR lnotsmr=ds.getRecord("LNOTSMR")

		if lnotsmr.prin'="" set lnotsmr.prin=$$RETEXC(lnotsmr.prin,CRCD,EMUCRCD)
		if lnotsmr.prinadj'="" set lnotsmr.prinadj=$$RETEXC(lnotsmr.prinadj,CRCD,EMUCRCD)

		do lnotsmr.save()
		}

	quit


	//-----------------------------------------------------------------------
LNOTSMR1(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through LNOTSMR1 table and convert the following data items
	[LNOTSMR1]BAL, [LNOTSMR1]RATE - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("LNOTSMR1")

	while ds.next() do {

		type RecordLNOTSMR1 lnotsmr1=ds.getRecord("LNOTSMR1")

		if lnotsmr1.bal'="" set lnotsmr1.bal=$$RETEXC(lnotsmr1.bal,CRCD,EMUCRCD)
		if lnotsmr1.rate'="" set lnotsmr1.rate=$$RETEXC(lnotsmr1.rate,CRCD,EMUCRCD)

		do lnotsmr1.save()
		}

	quit


	//-----------------------------------------------------------------------
SCAU(String CRCD,			// Base Currency
     String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through SCAU table and convert the following data items
	[SCAU]OACMAX, [SCAU]OACMIN - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("SCAU")

	while ds.next() do {

		type RecordSCAU scau=ds.getRecord("SCAU")

		if scau.oacmax'="" set scau.oacmax=$$RETEXC1(scau.oacmax,CRCD,EMUCRCD)
		if scau.oacmin'="" set scau.oacmin=$$RETEXC1(scau.oacmin,CRCD,EMUCRCD)

		do scau.save()
		}

	quit


	//-----------------------------------------------------------------------
SCAU0(String CRCD,			// Base Currency
      String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through SCAU0 table and convert the following data items
	[SCAU0]OACMAX, [SCAU0]OACMIN - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("SCAU0")

	while ds.next() do {

		type RecordSCAU0 scauo=ds.getRecord("SCAU0")

		if scauo.oacmax'="" set scauo.oacmax=$$RETEXC1(scauo.oacmax,CRCD,EMUCRCD)
		if scauo.oacmin'="" set scauo.oacmin=$$RETEXC1(scauo.oacmin,CRCD,EMUCRCD)

		do scauo.save()
		}

	quit


	//-----------------------------------------------------------------------
SRVITM(String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through SRVITM table and convert the following data items
	[SRVITM]BALAVAL, [SRVITM]FEE, [SRVITM]SRVAMT - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("SRVITM")

	while ds.next() do {

		type RecordSRVITM srvitm=ds.getRecord("SRVITM")

		if srvitm.fee'="" set srvitm.fee=$$RETEXC(srvitm.fee,CRCD,EMUCRCD)
		if srvitm.srvamt'="" set srvitm.srvamt=$$RETEXC(srvitm.srvamt,CRCD,EMUCRCD)
		if srvitm.balavl'="" set srvitm.balavl=$$RETEXC(srvitm.balavl,CRCD,EMUCRCD)

		do srvitm.save()
		}

	quit


	//-----------------------------------------------------------------------
TRN(String CRCD,			// Base Currency
    String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through TRN table and convert the following data items
	[TRN]AMT, [TRN]TRMAX - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("TRN")

	while ds.next() do {

		type RecordTRN trn=ds.getRecord("TRN")

		if trn.amt'="" set trn.amt=$$RETEXC1(trn.amt,CRCD,EMUCRCD)
		if trn.trmax'="" set trn.trmax=$$RETEXC1(trn.trmax,CRCD,EMUCRCD)

		do trn.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLBRCD(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLBRCD table and convert the following data items
	[UTBLBRCD]OACMAX, [UTBLBRCD]OACMIN - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLBRCD")

	while ds.next() do {

		type RecordUTBLBRCD utblbrcd=ds.getRecord("UTBLBRCD")

		if utblbrcd.oacmax'="" set utblbrcd.oacmax=$$RETEXC1(utblbrcd.oacmax,CRCD,EMUCRCD)
		if utblbrcd.oacmin'="" set utblbrcd.oacmin=$$RETEXC1(utblbrcd.oacmin,CRCD,EMUCRCD)

		do utblbrcd.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLCTRY(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through ^UTBLCNTRYLIM table and convert the following data items
	[UTBLCNTRYLIM]AMT, [UTBLCNTRYLIM]GOVTAMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLCNTRYLIM")

	while ds.next() do {

		type RecordUTBLCNTRYLIM cntrylim=ds.getRecord("UTBLCNTRYLIM")

		if cntrylim.amt'="" set cntrylim.amt=$$RETEXC1(cntrylim.amt,CRCD,EMUCRCD)
		if cntrylim.govtamt'="" set cntrylim.govtamt=$$RETEXC1(cntrylim.govtamt,CRCD,EMUCRCD)

		do cntrylim.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLEFT(String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLEFTINST table and convert the following data items
	[UTBLEFTINST]CHKLIM - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLEFTINST")

	while ds.next() do {

		type RecordUTBLEFTINST eftinst=ds.getRecord("UTBLEFTINST")

		set eftinst.chklim=$$RETEXC1(eftinst.chklim,CRCD,EMUCRCD)

		do eftinst.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLINSC(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLINSC table and convert the following data items
	[UTBLINSC]RPD - Striaght Conversion
	[UTBLINSC]MXAMT, [UTBLINSC]MXNMBEN - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLINSC")

	while ds.next() do {

		type RecordUTBLINSC insc=ds.getRecord("UTBLINSC")

		set insc.rpd=$$RETEXC(insc.rpd,CRCD,EMUCRCD)
		if insc.mxnmben'="" set insc.mxnmben=$$RETEXC1(insc.mxnmben,CRCD,EMUCRCD)
		if insc.mxamt'="" set insc.mxamt=$$RETEXC1(insc.mxamt,CRCD,EMUCRCD)

		do insc.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLLNPL(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLLNPLIM table and convert the following data items
	[UTBLLNPLIM]LIMIT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLLNPLIM")

	while ds.next() do {

		type RecordUTBLLNPLIM lnplim=ds.getRecord("UTBLLNPLIM")

		set lnplim.limit=$$RETEXC1(lnplim.limit,CRCD,EMUCRCD)

		do lnplim.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLOFIL(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLOFILIM table and convert the following data items
	[UTBLOFILIM]SECLIM, [UTBLOFILIM]UNLIM - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLOFILIM")

	while ds.next() do {

		type RecordUTBLOFILIM ofilim=ds.getRecord("UTBLOFILIM")

		if ofilim.seclim'="" set ofilim.seclim=$$RETEXC1(ofilim.seclim,CRCD,EMUCRCD)
		if ofilim.unslim'="" set ofilim.unslim=$$RETEXC1(ofilim.unslim,CRCD,EMUCRCD)

		do ofilim.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLOFPL(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLOFPLIM table and convert the following data items
	[UTBLOFPLIM]DOLLIM, [UTBLOFPLIM]PRCLIM - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLOFPLIM")

	while ds.next() do {

		type RecordUTBLOFPLIM ofplim=ds.getRecord("UTBLOFPLIM")

		if ofplim.dollim'="" set ofplim.dollim=$$RETEXC1(ofplim.dollim,CRCD,EMUCRCD)
		if ofplim.prclim'="" set ofplim.prclim=$$RETEXC1(ofplim.prclim,CRCD,EMUCRCD)

		do ofplim.save()
		}


	quit


	//-----------------------------------------------------------------------
UTBLRPPB(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLRPPB table and convert the following data items
	[UTBLRPPB]TIER - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLRPPB")

	while ds.next() do {

		type RecordUTBLRPPB rppb=ds.getRecord("UTBLRPPB")

		set rppb.tier=$$RETEXC1(rppb.tier,CRCD,EMUCRCD)

		do rppb.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLRSP(String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLRSPDEF table and convert the following data items
	[UTBLRSPDEF]LIMIT, [UTBLRSPDEF]WTHAMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLRSPDEF")

	while ds.next() do {

		type RecordUTBLRSPDEF rspdef=ds.getRecord("UTBLRSPDEF")

		if rspdef.limit'="" set rspdef.limit=$$RETEXC1(rspdef.limit,CRCD,EMUCRCD)
		if rspdef.wthamt'="" set rspdef.wthamt=$$RETEXC1(rspdef.wthamt,CRCD,EMUCRCD)

		do rspdef.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLRSPW(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLRSPWSCH table and convert the following data items
	[UTBLRSPWSCH]KEY - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLRSPWSCH")

	while ds.next() do {

		type RecordUTBLRSPWSCH rspwsch=ds.getRecord("UTBLRSPWSCH")

		set rspwsch.key=$$RETEXC1(rspwsch.key,CRCD,EMUCRCD)

		do rspwsch.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLSIC(String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLSIC table and convert the following data items
	[UTBLSIC]AMT - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLSIC")

	while ds.next() do {

		type RecordUTBLSIC sic=ds.getRecord("UTBLSIC")

		set sic.amt=$$RETEXC1(sic.amt,CRCD,EMUCRCD)

		do sic.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLSRV(String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLSRVTYP table and convert the following data items
	[UTBLSRVTYP]TYPVAL - Threshold Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLSRVTYP")

	while ds.next() do {

		type RecordUTBLSRVTYP srvtyp=ds.getRecord("UTBLSRVTYP")

		set srvtyp.typval=$$RETEXC1(srvtyp.typval,CRCD,EMUCRCD)

		do srvtyp.save()
		}

	quit


	//-----------------------------------------------------------------------
UTBLSVAL(String CRCD,			// Base Currency
         String EMUCRCD)		// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Go through UTBLSVAL table and convert the following data items
	[UTBLSVAL]VAL - Straight Conversion
	*/

	type DbSet ds=Db.selectDbSet("UTBLSVAL")

	while ds.next() do {

		type RecordUTBLSVAL sval=ds.getRecord("UTBLSVAL")

		set sval.val=$$RETEXC(sval.val,CRCD,EMUCRCD)

		do sval.save()
		}

	quit


	//-----------------------------------------------------------------------
RETEXC(Number VAR1,			// Converstion Value
       String CRCD,			// Base Currency
       String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Straight Conversion.
	Convert by placing a call to EXC^CRCDUTL.
	*/

	type Number EXCAMT

	set EXCAMT=0
	do EXC^CRCDUTL(EMUCRCD,CRCD,VAR1,0,2,11,,,1)

	quit (EXCAMT.roundDec())


	//-----------------------------------------------------------------------
RETEXC1(Number VAR1,			// Converstion Value
        String CRCD,			// Base Currency
        String EMUCRCD)			// Currency to convert to
	//-----------------------------------------------------------------------

	/*
	Threshold Conversion.
	Convert by placing a call to EXC^CRCDUTL.
	Round the value by placing a call to ROUND.
	*/

	type public Number RFR
	type public String RMC
	type Number EXCAMT

	set EXCAMT=0
	do EXC^CRCDUTL(EMUCRCD,CRCD,VAR1,0,2,11,,,1)

	quit ($$ROUND(RMC,EXCAMT,RFR))


	//-----------------------------------------------------------------------
ROUND(String OPTION,			// Rounding Method - Conversion
      Number OLAMT,			// Converstion Value
      Number NUM)			// Rounding Factor - Reversal
	//-----------------------------------------------------------------------

	/*
	Round values converted using Threshold Conversion depending on 
	the Rounding Method and Rounding Factor defined in CUVAR table.
	*/

	if OPTION=0 quit OLAMT					// Do not round
	if OPTION=1 quit ((OLAMT/NUM).roundDec(0))*NUM		// Round to the nearest specified factor
	if OPTION=2 quit ((OLAMT/NUM).roundDec(0,"+"))*NUM	// Round up to the nearest specified factor
	if OPTION=3 quit ((OLAMT/NUM).roundDec(0,"-"))*NUM	// Round down to the nearest specified factor

	quit

vSIG()	quit "60375^63457^Dan Russell^28280"	// Signature - LTD^TIME^USER^SIZE
