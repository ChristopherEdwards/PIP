BCHCLARK //Batch BCHCLARKE - Create Check Order File - Clarke Checks
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHCLARKE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHCLARKE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,CLS,GRP,TYP,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHCLARKE","*","",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,CLS,GRP,TYP,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHCLARKE","*","",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,CLS,GRP,TYP,CID) //
         /* Detail Record Format - Checks		CHHABRIAS      07/25/01
 
        Description             Value                   Len     Beg Pos End Pos
        ----------------------------------------------------------------------
	Record Type		'5'			1	1	1
	TR#			CUVAR.RT		9	2	10
        Branch#                 UTBLCLARKEBR.CLARKEBRCD5       11      15
                                This is mapped using
                                ACN.BOO
	Account#		ACN.CID			20	16	35
	Product Code		UTBLDELUXEPR.CHKDES	8	36	43
				UTBLDELUXEPR.SLPDES (if only deposit slips)
	Acct. Type Code		Blank (spaces)		1	44	44
	Start Check #		UTBLDELUXEPR.STCKNUM	6	45	50
	Order Quantity		UTBLDELUXEPR.CHKQUAN	6	51	56
				UTBLDELUXEPR.SLPQUAN (if only deposit slips)
	Cut Number		Blank (spaces)		6	57	62
	Check Monogram		Blank (spaces)		3	63	65
	Cover Product Code	UTBLDELUXEPR.COVER	8	66	73
	Cover Monogram		Blank (spaces)		3	74	76
	Billing Code		UTBLDELUXEPR.CHKBIL	2	77	78
	Deposit Product Code	UTBLDELUXEPR.SLPDES	8	79	86
				Blank (spaces) (if only deposit slips)
	Deposit Quantity	UTBLDELUXEPR.SLPQUAN	6	87	92
				Blank (spaces) (if only deposit slips)
	Billing Branch		Blank (spaces)		5	93	97
	Account Length		$L(CID)			2	98	99
	Mail-to Code		Blank (spaces)		1	100	100
	Mail Class Code		Blank (spaces)		1	101	101
	Distinctive Type Style	Blank (spaces)		2	102	103
	1st Name Line		ACN.TITLE1		40	104	143
        2nd Name Line           ACN.TITLE2              40      144     183
				(or based on Direct Liability Option)
        1st Address Line        ACNADDR.AD1             40      184     223
        2nd Address Line        ACNADDR.AD2             40      224     263
        Phone #                 CIF.HPH                 10      264     273
        3rd Address Line        ACNADDR.AD3             40      274     313
        City                    ACNADDR.CITY            30      314     343
        State                   ACNADDR.STATE           2       344     345
	Zip			ACNADDR.MZIP		9	346	354
	1st Alt. Address	Blank (spaces)		40	355	394
        2nd Alt. Address        Blank (spaces)          40      395     434
        3rd Alt. Address        Blank (spaces)          40      335     474
        4th Alt. Address        Blank (spaces)          40      375     514
	Alt City		Blank (spaces)		30	515	544
	Alt State		Blank (spaces)		2	545	546
	Alt Zip			Blank (spaces)		9	547	555
	Special Program Code	Blank (spaces)		2	556	557
	Endorsement Stamp	Blank (spaces)		8	558	565
	Endorse Stamp Qty	Blank (spaces)		1	566	566
	Voucher Apron		Blank (spaces)		2	567	568
	Pers Justification Code	Blank (spaces)		1	569	569
	1st Special Instruction	UTBLDELUXEPR.SI		30	570	599
	2nd Special Instruction	Blank (spaces)		30	600	629
	OSL Font		Blank (spaces)		2	630	631
	OSL Justification	Blank (spaces)		1	632	632
	1st OSL Text		Blank (spaces)		40	633	672
	2nd OSL Text		Blank (spaces)		40	673	712
	2nd Signature line ind	Blank (spaces)		1	713	713
	Country Code		ACNADDR.CNTRY		2	714	715
	Reserved		Blank (spaces)		85	716	800
 
        ---------------------------------------------------------------------- 
        */
        
	type public Boolean IBRCD,IHPH
	type public Number FILCNT,FILHASH
        type public String CO,RM,X()

	type public Number ACN,ACCLEN,ACCTYPE,BILL,BOO,CHKMONO,CUT,CCID,DEPQTY,STRTCHK,QTY
	type Number CLBR,CNT,CNTRS,FLG,MMDA,STAT
	type public String AD1,AD2,AD3,CITY,CNTRY,COVER,DEPTYPE,INST1,PRODCD,RT,STATE,ZIP
	type public String ALTAD4,ALTCITY,ALTSTATE,ALTZIP,ESTAMP,ESTAMPQTY,RES,RECTYPE,SPPROG
	type public String DEST,VOUCHER,PERSJUST,INST2,OSLFNT,OSLJUST,OSLTXT1,OSLTXT2,SIGIND2
	type public String ALTAD1,ALTAD2,ALTAD3,BILLBR,COVERMONO,CHKDES,DISTTYPE,MAIL
	type public String TITLE1,TITLE2,ACNR,DLO,HPH,REC,VAR
	
        set (MMDA,STAT)=0
 
        type RecordACN acn=Db.getRecord("ACN","CID")
        set ACN=acn.acn
        
        type RecordUTBLDELUXEPR deluxe=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP")
 	
        type RecordUTBLDELUXE utbldeluxe=Db.getRecord("UTBLDELUXE","CO=:CO")
 
        type public IO io
 
        
        if acn.regd=5 set MMDA=1 		// Check whether account is MMDA

        set DLO=+deluxe.dlo                     // Direct Liability Option
 
 
        if 'DLO do {
 	
	// Get first and second CIFs from RELCIF and get their names from CIF file
        set (CNT,CNTRS)=0
 
        type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
        if rs.isEmpty() quit
 
        while rs.next() do {
		set CNTRS=CNTRS+1
		set ACNR=rs.getCol("ACN")
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACNR",1)
		set X(ACNR)=cif.nam
                }
 	if CNTRS=1 set TITLE2=""		// If only one CIF on account
        set ACNR=""
        for  set ACNR=X(ACNR).order() quit:ACNR.isNull()!(CNT=2)  do {
                set CNT=CNT+1
                set VAR="TITLE"_CNT
                set @VAR=X(ACNR)
                }
 
                /*
                Secondary Authorized User Name is a custom data item.  If
                this custom data item has been added to the ACN file, the
                variable CUSTOM will have been set in the THRINIT section.
 
                If this particular column, ZAUTHUSER, is not set up in the ACN
                file definition then [ACN]TITLE2 will be used.
                */
                
                #if Db.isDefined("DBTBL1D","""SYSDEV"",""ACN"",""ZAUTHUSER""")
		set TITLE2=Db.getOneRow("ZAUTHUSER","ACN","CID")	// 2nd auth. user
		#endif
          }      
 
	// do SUPSUF(CID,.TITLE1,.TITLE2)

        if DLO do DLO(CID,.TITLE1,.TITLE2)
 
        type RecordACNADDR addr=Db.getRecord("ACNADDR","CID=:CID",1)
 
        set AD1=addr.ad1                                // Address Line 1
        set AD2=addr.ad2                                // Address Line 2
        set AD3=addr.ad3  		                // Address Line 3
	set CITY=addr.city				// City	
	set STATE=addr.state              		// State
        set ZIP=addr.mzip                               // ZIP Code
	set ZIP=$E(ZIP,1,5)_$E(ZIP,7,10)                // Removing '-' in zip
	set CNTRY=addr.cntry				// Country Code
        
	/*
        IBRCD, IHPH and ITAXID are institution options indicating whether or
        not to include the branch code, home phone number or tax ID for
        each customer in the Deluxe order record.  These are initialized
        in the THREXEC section for each company/affinity group.
        */
 
	if IBRCD do { quit:STAT
		set BOO=acn.boo  	// Branch Code
		type RecordUTBLCLARKEBR uclk=Db.getRecord("UTBLCLARKEBR","BRCD=:BOO",1)
		set CLBR=uclk.clarkebrcd
		
		if CLBR.isNull() do {
			set STAT=1 
			set RM=$$^MSG(1485,$$^MSG(6889)_" - "_BOO) 
			do EXC
			}
		}
        else  set BOO="",CLBR=""
                
        if IHPH do {
        	type RecordCIF hph=Db.getRecord("CIF","ACN=:ACN",1) // Home phone number
  	     	set HPH=hph.hph
        	}
        else  set HPH=""
        
        set HPH=$$LJ^%ZTEXT(HPH.translate("-",""),10)
 
        //  Order just deposit slips if account is a non-MMDA Savings account
 	set FLG=0
	do GETDATA(.deluxe)
        if GRP="SAV",'MMDA do {
		do DEPPROC2(.acn,.deluxe,.io)
		set FLG=1 
		quit
		}

        // If both Cheques and Deposit Slips have to be printed
	
        if deluxe.addslp,FLG=0 do {
        	set DEPTYPE=$$LJ^%ZTEXT(deluxe.slpdes,8)
        	set DEPQTY=$$LJ^%ZTEXT(deluxe.slpquan,6)
		}

        set REC=RECTYPE_RT_CLBR_CCID_PRODCD_ACCTYPE_STRTCHK_QTY_CUT_CHKMONO
        set REC=REC_COVER_COVERMONO_BILL_DEPTYPE_DEPQTY_BILLBR_ACCLEN_MAIL_DEST
        set REC=REC_DISTTYPE_TITLE1_TITLE2_AD1_AD2_HPH_AD3_CITY_STATE
        set REC=REC_ZIP_ALTAD1_ALTAD2_ALTAD3_ALTAD4_ALTCITY_ALTSTATE_ALTZIP
        set REC=REC_SPPROG_ESTAMP_ESTAMPQTY_VOUCHER_PERSJUST_INST1_INST2
        set REC=REC_OSLFNT_OSLJUST_OSLTXT1_OSLTXT2_SIGIND2_CNTRY_RES
	
        do io.write(.REC)
 
        set FILCNT=FILCNT+1
        set FILHASH=FILHASH+CID
        set FILHASH=$E(FILHASH,$L(FILHASH)-9,$L(FILHASH)) // Getting last 10 digits of File # hash
        quit		

DEPPROC2(RecordACN acn,RecordUTBLDELUXEPR deluxe,IO io)  // only for deposit slip
	
	type public Number DEPQTY,QTY
	type public String BILL,COVER,DEPTYPE,PRODCD,STRTCHK
		
        set QTY=$$LJ^%ZTEXT(deluxe.slpquan,6) 	// Quantity
	set DEPTYPE=$$LJ^%ZTEXT(" ",8) 		// Deposit Product Code (blank)
	set DEPQTY=$$LJ^%ZTEXT(" ",6)		// Deposit Slip Quantity
        set BILL=$$LJ^%ZTEXT(deluxe.slpbil,2)  	// Bill Code
	set PRODCD=$$LJ^%ZTEXT(deluxe.slpdes,8)	// Deposit Product Code (in product code)
	set COVER=$$LJ^%ZTEXT(" ",8)		// Cover
	set STRTCHK=$$LJ^%ZTEXT(" ",6)		// Start Check Number
	quit	

GETDATA(RecordUTBLDELUXEPR deluxe)	// Get Data for the following variables

	type public Number ACCLEN,ACCTYPE,BOO,CHKMONO,CUT,CCID,CID,DEPQTY,QTY
	type public String AD1,AD2,AD3,BILL,CITY,COVER,CNTRY,DEPTYPE,MAIL,RECTYPE,RT,STRTCHK,STATE
	type public String ALTAD4,ALTCITY,ALTSTATE,ALTZIP,CLBR,ESTAMP,ESTAMPQTY,RES,SPPROG,ZIP
	type public String DEST,VOUCHER,PERSJUST,INST2,OSLFNT,OSLJUST,OSLTXT1,OSLTXT2,SIGIND2
	type public String ALTAD1,ALTAD2,ALTAD3,BILLBR,COVERMONO,CHKDES,DISTTYPE,INST1,PRODCD,SI
	type public String TITLE1,TITLE2
	
        set RECTYPE=$$LJ^%ZTEXT("5",1)			// Record Type "5"
        set RT=$$LJ^%ZTEXT(RT,9)			// Routing & Transit # [CUVAR]RT
        set CLBR=$$LJ^%ZTEXT(CLBR,5)			// Branch
	set BOO=$$LJ^%ZTEXT(BOO,5)
        set CCID=$$LJ^%ZTEXT(CID,20)             	// Account #
        set CHKDES=$$LJ^%ZTEXT(deluxe.chkdes,8)		// Check Design Code
        set ACCTYPE=$$LJ^%ZTEXT(" ",1)			// Account Type
        set STRTCHK=$$LJ^%ZTEXT(deluxe.stcknum,6)	// Start Check #
	set PRODCD=$$LJ^%ZTEXT(deluxe.chkdes,8)		// Product Code
        set QTY=$$LJ^%ZTEXT(deluxe.chkquan,6)		// Check Quantity
        set CUT=$$LJ^%ZTEXT(" ",6)			// Cut Number
        set CHKMONO=$$LJ^%ZTEXT(" ",3)			// Check Monogram
        set COVER=$$LJ^%ZTEXT(deluxe.cover,8)		// Cover Product Code
        set COVERMONO=$$LJ^%ZTEXT(" ",3)			// Cover Monogram
        set BILL=$$LJ^%ZTEXT(deluxe.chkbil,2)		// Billing Code
        set DEPTYPE=$$LJ^%ZTEXT(" ",8)			// Deposit Product Type
        set DEPQTY=$$LJ^%ZTEXT(" ",6)			// Deposit Quantity
        set BILLBR=$$LJ^%ZTEXT(" ",5)			// Billing Branch
        set ACCLEN=$L(CID)				// Account Length
        set ACCLEN=$$LJ^%ZTEXT(ACCLEN,2)
	set MAIL=$$LJ^%ZTEXT(" ",1)			// Mail-to Code
        set DEST=$$LJ^%ZTEXT(" ",1)			// Mail Class Code
        set DISTTYPE=$$LJ^%ZTEXT(" ",2)			// Distinctive Type Style
        set TITLE1=$$LJ^%ZTEXT(TITLE1,40)		// 1st Name Line
        set TITLE2=$$LJ^%ZTEXT(TITLE2,40)		// 2nd Name Line
        set AD1=$$LJ^%ZTEXT(AD1,40)			// 1st Address Line
        set AD2=$$LJ^%ZTEXT(AD2,40)			// 2nd Address Line
        set AD3=$$LJ^%ZTEXT(AD3,40)			// 3rd Address Line
        set STATE=$$LJ^%ZTEXT(STATE,2)			// State
        set CITY=$$LJ^%ZTEXT(CITY,30)			// City
        set ZIP=$$LJ^%ZTEXT(ZIP,9)			// Zip
	set CNTRY=$$LJ^%ZTEXT(CNTRY,2)			// Country Code
        set ALTAD1=$$LJ^%ZTEXT(" ",40)			// 1st Alternate Address Line
        set ALTAD2=$$LJ^%ZTEXT(" ",40)			// 2nd Alternate Address Line
        set ALTAD3=$$LJ^%ZTEXT(" ",40)			// 3rd Alternate Address Line
        set ALTAD4=$$LJ^%ZTEXT(" ",40)			// 4th Alternate Address Line
        set ALTSTATE=$$LJ^%ZTEXT(" ",2)			// Alternate State
        set ALTCITY=$$LJ^%ZTEXT(" ",30)			// Alternate City
        set ALTZIP=$$LJ^%ZTEXT(" ",9)			// Alternate Zip
        set SPPROG=$$LJ^%ZTEXT(" ",2)			// Special Program Code
        set ESTAMP=$$LJ^%ZTEXT(" ",8)			// Endorsement Stamp
        set ESTAMPQTY=$$LJ^%ZTEXT(" ",1)			// Endorse Stamp Qty
        set VOUCHER=$$LJ^%ZTEXT(" ",2)			// Voucher Apron
        set PERSJUST=$$LJ^%ZTEXT(" ",1)			// Pers. Justification Code
        set INST1=$$LJ^%ZTEXT(deluxe.si,30)		// 1st Special Instruction
        set INST2=$$LJ^%ZTEXT(" ",30)			// 2nd Special Instruction
        set OSLFNT=$$LJ^%ZTEXT(" ",2)			// OSL Font
        set OSLJUST=$$LJ^%ZTEXT(" ",1)			// OSL Justification
        set OSLTXT1=$$LJ^%ZTEXT(" ",40)			// OSL Text 1
        set OSLTXT2=$$LJ^%ZTEXT(" ",40)			// OSL Text 2
        set SIGIND2=$$LJ^%ZTEXT(" ",1)			// 2nd Signature Line ind
        set RES=$$LJ^%ZTEXT(" ",85)			// Reserved Spaces
	
	quit	
		
EXC	// Log error to DAYEND
	type public String RM,%ZTSEQ
	type public Number CID
	
	type String DESC
	
	set DESC="Clarke Check Order"
	do LOG^UTLEXC(%RoutineName,"*",DESC,CID.get(),%ZTSEQ.get(),RM.get())
	kill RM,%ZTSEQ
	quit

LN	// Collate through [DTJNA] for loan accounts
	type public String CO,X()
	type String ZCLS
	set ZCLS="L"
	
	type ResultSet rs=Db.select("CLS,GRP,TYP,CID","DTJNA","TJD=:ORDT AND CLS=:ZCLS AND TYP=:TYP")
	
	// No loan accounts opened on the previous date.
	if rs.isEmpty() quit

	while rs.next() do {
		new CID,CLS,CO1,GRP,TYP
		set CLS=rs.getCol("CLS")
		set GRP=rs.getCol("GRP")
		set TYP=rs.getCol("TYP")
		set CID=rs.getCol("CID")
		
		// Don't include accounts opened/closed same day
		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
               	if acn.stat=4 quit
		
		type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
                set CO1=ln.co
		
		if (CO1.get()).isNull() set CO1=CUVAR.CO
		
		if CO'=CO1 quit

		/* 
		Only update sort file if there were accounts opened for those 
		companies and product types set up to produce checkbook orders.
		*/
		
		type RecordUTBLDELUXEPR deluxepr=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP",1)
		if 'deluxepr.getMode() quit
		
		if 'X(CO).exists() set X(CO)=""
	
		do SORT
		}
	
	quit

	
DEPDAYEND	// Collate through [DAYENDFNDT] for deposit accounts
	
	type public String CO,CO1,X()
	type String ZCLS
	type Number CNTCR
	
	set ZCLS="D"
	type ResultSet rs=Db.select("CLS,GRP,TYP,CID","DAYENDFNDT","FDT=:ORDT AND CLS=:ZCLS AND TYP=:TYP")
	
	// No newly funded deposit accounts for the previous day
	if rs.isEmpty() quit
	
	while rs.next() do {
		
		type Number CID
		type String CLS,GRP,TYP
		
		set CLS=rs.getCol("CLS")
		set GRP=rs.getCol("GRP")
		set TYP=rs.getCol("TYP")
		set CID=rs.getCol("CID")

		/* 		
		Don't include accounts newly funded/closed same day and        
	        don't include accounts if the number of credits has not
                been incremented.  This is being added in the event a
                new account deposit has been reversed and not redeposited.
                */
                
                type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
               	if acn.stat=4 quit
		
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
		set CNTCR=dep.CNTCR
		if 'CNTCR quit
		set CO1=dep.co
		if (CO1.get()).isNull() set CO1=CUVAR.co
		if CO1'=CO quit
	
		/* 
		Only update sort file if there were accounts opened for those 
		companies and product types set up to produce checkbook orders.
		*/
	
		type RecordUTBLDELUXEPR deluxepr=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP",1)
		if 'deluxepr.getMode() quit
	
		if 'X(CO).exists() set X(CO)=""

		do SORT
		}
	
	quit

DEPDTJNA	// Collate through [DTJNA] for deposit accounts

	type public String CO,CO1,X()
	type String ZCLS
		
	set ZCLS="D"
	type ResultSet rs=Db.select("CLS,GRP,TYP,CID","DTJNA","TJD=:ORDT AND CLS=:ZCLS AND TYP=:TYP")
 
	// No newly funded deposit accounts for the previous day
        if rs.isEmpty() quit

	while rs.next() do {
		type Number CID
		type String CLS,GRP,TYP
		
		set CLS=rs.getCol("CLS")
		set GRP=rs.getCol("GRP")
		set TYP=rs.getCol("TYP")
		set CID=rs.getCol("CID")

		/*
		Don't include accounts newly funded/closed same day and
		don't include accounts if the number of credits has not
		been incremented.  This is being added in the event a
		new account deposit has been reversed and not redeposited.
		*/

		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
		if acn.stat=4 quit

		type RecordDEP dep1=Db.getRecord("DEP","CID=:CID",1)
		set CO1=dep1.CO

		if (CO1.get()).isNull() set CO1=CUVAR.co

		if CO1'=CO quit

		/*
		Only update sort file if there were accounts opened for those
		companies and product types set up to produce checkbook orders.
		*/

		type RecordUTBLDELUXEPR deluxepr=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP",1)
		if 'deluxepr.getMode() quit

		if 'X(CO).exists() set X(CO)=""

		do SORT
		}

	quit
	
SORT	// Build file sorted by Company to be used by the scheduler
	
	type public Number CID,SCHPID
	type public String CO,CLS,GRP,TYP
	
	type RecordTMPRPT5 zsort=Class.new("RecordTMPRPT5")
	
	set zsort.pid=SCHPID
	set zsort.key1=CO
	set zsort.key2=CLS
	set zsort.key3=GRP
	set zsort.key4=TYP
	set zsort.key5=CID
	do zsort.bypassSave()	
		
	quit

ZEROREC	// Create zero record file if no check or deposit slip ordered.

 	type public Boolean ER
 	type Date CRTIME
 	type String CO,RT
	
	set CO=CUVAR.co
	set CRTIME=%CurrentTime
	set CRTIME=CRTIME.toString("2460")	// Creation Time
	set RT=CUVAR.rt					// Routing & Transit #
	type public IO io=Class.new("IO")
	do IOFILE(.io) quit:ER.get()      		// open file
	do FHDR2(.io) quit:ER.get()       		// builer header record
	do FTLR2(.io)                    		// build trailer record
	do io.close()
	quit

	/* 
	This function was written to filter suffix from Title1 and Title 2 
	if the same is taken from ACN.TITLE1 and ACN.TITLE2. However the 
	approach was later changed and now the names are taken from CIF 
	where there is no suffix. This function has to be deleted when 
	the project is finalized
	*/

SUPSUF(CID,TITLE1,TITLE2) // Suppress Suffix for Titles

        type Number ACN,CNT,ROLE
        type String ACNRELC,SUFFIX,SFXLEN,VAR
        
        set CNT=0
 
        type ResultSet rs=Db.select("ROLE,ACN","RELCIF","CID=:CID")
        if rs.isEmpty() quit
 
        // Get the relationship code from the account.
        type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
        set ACNRELC=acn.acnrelc
  
        while rs.next() do {
                set ROLE=rs.getCol("ROLE")
                set ACN=rs.getCol("ACN")
                type RecordRELCODE relcode = Db.getRecord("RELCODE","REL=:ACNRELC,ROLE=:ROLE",1)
                set SUFFIX=relcode.sfx
                
                if SUFFIX.isNull() set CNT=CNT+1 quit
		
		set CNT=CNT+1
		if 'SUFFIX.isNull(),CNT>2 quit
		set SFXLEN=SUFFIX.length()
                set VAR="TITLE"_CNT
	        set @VAR=@VAR.extract(1,@VAR.length()-SFXLEN)
		
                }
	quit



DLO(CID,TITLE1,TITLE2)	// Obtain TITLE1 and TITLE2 based on direct liability flag

	type public String X()
	type Boolean DL
	type Number ACN,CNT,ROLE,CNTRS
        type String ACNRELC,VAR
        
	set (CNT,CNTRS)=0
	
	type ResultSet rs=Db.select("ROLE,ACN","RELCIF","CID=:CID")
	if rs.isEmpty() quit
	
	// Get the relationship code from the account.
	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
        set ACNRELC=acn.acnrelc
	
	/*
	The direct liability flag will be based on [RELCODE]DL.
	
	When the direct liability option is used, the names will be derived
	from each CIF record, not the ACN.
	*/

	while rs.next() do {
		//set CNTRS=CNTRS+1
		set ROLE=rs.getCol("ROLE")
		set ACN=rs.getCol("ACN")
		
		type RecordRELCODE relcode=Db.getRecord("RELCODE","REL=:ACNRELC,ROLE=:ROLE",1)
		set DL=relcode.dl
		
		if 'DL quit
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1)
		set X(ROLE,ACN)=cif.nam
		set CNTRS=CNTRS+1
      		}
	if CNTRS=1 set TITLE2=""		// If account has only one owner
	set (ACN,ROLE)=""
	for  set ROLE=X(ROLE).order() quit:ROLE.isNull()  do {
		for  set ACN=X(ROLE,ACN).order() quit:ACN.isNull()!(CNT=2)  do {
			set CNT=CNT+1
			set VAR="TITLE"_CNT
			set @VAR=X(ROLE,ACN)
			}
		}
	quit

	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	type public IO io
	type public Boolean ER,IBRCD,IHPH
	type public String CO
	
	set CO=vINPUT
	set ER=0
	
	type RecordUTBLDELUXE udeluxe=Db.getRecord("UTBLDELUXE","CO=:CO",1)
	if udeluxe.getMode() do {
		set IBRCD=udeluxe.ibrcd 	// Include Customer Home Phone Number
		set IHPH=udeluxe.ihph		// Include Branch Codes for Accounts
		}	
		
	type ResultSet rs=Db.select("KEY2,KEY3,KEY4,KEY5","TMPRPT5","PID=:SCHPID AND KEY1=:CO")
	
	while rs.next() do {
		type Number CID
		type String CLS,GRP,TYP
		set CLS=rs.getCol("KEY2")
		set GRP=rs.getCol("KEY3")
		set TYP=rs.getCol("KEY4")
		set CID=rs.getCol("KEY5")
		do vPROC(%SystemDate,CLS,GRP,TYP,CID)
		}
	
	quit

FHDR(IO io)     //      File Header Record
        /*
          File Header Record Format		CHHABRIAS	07/25/01
 
	Description		Value			Len	Beg Pos	End Pos	
        ----------------------------------------------------------------------
	Record Type Code	'1'			1	1	1
	TR#			CUVAR.RT		9	2	10
	Branch#			UTBLCLARKECO.CLARKECO	5	11	15
				This is mapped using
				CUVAR.CO
	File Name		'CHECK ORDER FILE'  	16	16	31
	File Date		YYMMDD			6	32	37
	File Time		HHMM			4	38	41
	File Number		'000'			3	42	44
	Printer Id		'061161274'		9	45	53
	Sender's Name           CUVAR.DISTNAM           40      54      93
	Reserved		Blank (spaces)		707	94	800

        ----------------------------------------------------------------------
        */
	
	type String CO
	
	set CO=" "
	
	type ResultSet rs = Db.select("KEY1","TMPRPT5","PID=:SCHPID AND KEY1>:CO")
        
        if rs.next() set CO=rs.getCol("KEY1")
        
	do FHDR2(.io)
	quit

	
FHDR2(IO io)    // Continue of Header for CLARKE
 	
	type public Number FILCNT,FILHASH
 	type public String BRANCH,CO,REC,RT
 	type public Date CRTIME
	type public Date CRDATE
	type Number PID,RECTYPE
	type String FNAME,FNUM,RES,HDRCO,SNDNAME

        type RecordUTBLDELUXE utbldeluxe=Db.getRecord("UTBLDELUXE","CO=:CO",1)
        if utbldeluxe.getMode() set REC=utbldeluxe.rec
        	
        do io.write(.REC)
        
	set CRDATE=%CurrentDate.toString("YYMMDD")     // File Creation Date

        set HDRCO=CUVAR.co		// Company Code
	
	type RecordUTBLCLARKECO uclarkeco=Db.getRecord("UTBLCLARKECO","CO=:HDRCO",1)
        if uclarkeco.getMode() set BRANCH=uclarkeco.clarkeco
	
	set REC=""

	set RECTYPE=$$LJ^%ZTEXT("1",1)			// Record Type "1" for header
	set RT=$$LJ^%ZTEXT(RT,9)			// Routing & Transit # [CUVAR]RT
	set BRANCH=$$LJ^%ZTEXT(BRANCH,5)		// Branch #
	set FNAME=$$LJ^%ZTEXT("CHECK ORDER FILE",16)	// File Name "CHECK ORDER FILE"
	set CRDATE=$$LJ^%ZTEXT(CRDATE,6)		// File Creation Date
	set CRTIME=$$LJ^%ZTEXT(CRTIME,4)		// File Creation Time
	set FNUM="000"					// File Number "000"
	set SNDNAME=CUVAR.distnam			// Sender's Name [CUVAR]DISTNAM
	set SNDNAME=$$LJ^%ZTEXT(SNDNAME,40)		// Sender's Name
	set PID=$$LJ^%ZTEXT("061161274",9)		// Printer Id "061161274"
    	set RES=$$LJ^%ZTEXT(" ",707)			// Reserved Spaces

        set REC=RECTYPE_RT_BRANCH_FNAME_CRDATE_CRTIME_FNUM_PID_SNDNAME_RES
       
        do io.write(.REC)
	// Initialize File Counters:

        set FILCNT=0                                    // No of Detail Records
        set FILHASH=0                                   // Hash Total
 
        quit 


FTLR2(IO io)     // File Trailer for CLARKE
        /*
          File Trailer Record Format		CHHABRIAS       07/25/01
 
        Description             Value                   Len     Beg Pos End Pos
        ----------------------------------------------------------------------
        Record Type Code        '9'                     1       1       1     
        TR#                     CUVAR.RT                9       2       10
        Branch#                 UTBLCLARKECO.CLARKECO  5       11      15
                                This is mapped using
                                CUVAR.CO
        Record Count            total of detail records 6       16      21
        Account # hash          sum of account numbers  10      22      31
        Reserved                Blank (spaces)          769     32      800
 
        ---------------------------------------------------------------------- 
        */
 
 	type public Number FILHASH
 	type public String BRANCH,FILCNT,RT
	type String HDRCO,REC,RES
	type Number RECTYPE
	
        set HDRCO=CUVAR.co		// Company Code
	
	type RecordUTBLCLARKECO uclarkeco=Db.getRecord("UTBLCLARKECO","CO=:HDRCO",1)
        if uclarkeco.getMode() set BRANCH=uclarkeco.clarkeco

        set RECTYPE=$$LJ^%ZTEXT("9",1)			// Record Type "9" for Trailer
        set FILHASH=$$LJ^%ZTEXT(FILHASH,10)		// Acct Number Hash
        set FILCNT="000000".extract(1,6-FILCNT.length())_FILCNT	// # of Detail Records
        set RT=$$LJ^%ZTEXT(RT,9)			// Routing & Transit # [CUVAR]RT
        set BRANCH=$$LJ^%ZTEXT(BRANCH,5)		// Branch
 	set RES=$$LJ^%ZTEXT(" ",769)     		// Reserved Spaces
 
	set REC=RECTYPE_RT_BRANCH_FILCNT_FILHASH_RES 
        do io.write(.REC)
 
        quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	type public String CO
	
	type ResultSet rs1 = Db.select("KEY1","TMPRPT5","PID=:SCHPID AND KEY1>:CO")
     	if rs1.next() do { 
	        set CO=rs1.getCol("KEY1")
       		set vINPUT=CO
     		}
        else  set vINPUT=""

	quit
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
     	// I18N=OFF  Excluded from I18N standards.
     	type public Boolean FD
     	type public Date ORDT
     	type public String MAPCO,RM,X()
     	type public Date XTJD
     	type public Number OD,SCHPID,TYP
     	type String CO,CLS,DESC,FID,HDRCO,INST
     	
     	type RecordDBTBL1 dbtbl1
	
	set XTJD=%SystemDate-1
	set SCHPID=%ProcessID

	do Db.fastDelete("TMPRPT5","PID=:SCHPID")
	
	set HDRCO=CUVAR.co            // Company Code [CUVAR]CO
        
	type RecordUTBLCLARKECO utck=Db.getRecord("UTBLCLARKECO","CO=:HDRCO",1)
	if utck.getMode() set MAPCO=utck.clarkeco
	if MAPCO.get().isNull() do {  quit
                set FID="UTBLCLARKECO"
                set dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID",1)
                set DESC=dbtbl1.des
                //Invalid company ID                 
                set RM=$$^MSG(1289,DESC)
                set %BatchExit=1
                do EXC
                }
	
	type ResultSet rs=Db.select("CO,TYP,FD,OD,INST","UTBLDELUXEPR")
	if rs.isEmpty() do {  quit
		set FID="UTBLDELUXEPR"
		set dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID",1)
                set DESC=dbtbl1.des
                // Look-up table not defined for ~p1
		set RM=$$^MSG(1660,DESC)
		set %BatchExit=1
		do EXC
		}
	while rs.next() do {
		set CO=rs.getCol("CO")
		set TYP=rs.getCol("TYP")
		
		type RecordPRODCTL prodct=Db.getRecord("PRODCTL","TYPE=:TYP",1)
		set CLS=prodct.cls
		
		set FD=rs.getCol("FD")
                set OD=rs.getCol("OD")
		set INST=rs.getCol("INST")

		if OD.isNull() set OD=0
                set ORDT=XTJD-OD

		if INST'="CLARKE" quit	// Quit if file is not to be generated in CLARKE format
		if CLS="D" do {
			if FD.isNull() set FD=1
			// If funding date option is yes, get info from ^DAYEND(,"FNDT"
			if FD=1 do DEPDAYEND

			// If funding date option is no, get info from ^DTJNA
			if FD=0 do DEPDTJNA
			}
		else  do LN
		}


	// No record found.
	if 'X.data() do {
		do ZEROREC
		//No file needed for ~p1
		set RM=$$^MSG(4309,XTJD.toString("MM-DD-YY")),%BatchExit=1 do EXC
		}
	quit
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,CLS,GRP,TYP,CID","DTJNA","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Boolean ER
	type Date CRTIME
	type Number CUSTOM
	type public String CO,RT
	
	set CUSTOM=0
	/* 
	The following variables are used throughout this process depending
	on whether the output is in CLARKE format
	*/ 
	set CRTIME=%CurrentTime
        set CRTIME=CRTIME.toString("2460")       // Creation Time
        set RT=CUVAR.rt              		 // R&T Number
	
        /*
        Secondary Authorized User Name is a custom data item.  If
        this custom data item has been added to the ACN file, the variable
        CUSTOM will be used in the EXEC section for TITLE2.
        */
        
        type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID='ACN',DI='ZAUTHUSER'",1)
        if dbtbl1d.getMode() set CUSTOM=1

        type public IO io=Class.new("IO")

        do IOFILE(.io) quit:ER.get()      // open file
 
        do FHDR(.io) quit:ER.get()        // build file header
        
 	set CO=" "
        quit 



IOFILE(IO io)	// Open Outgoing File
		
	/*
	Open file for Check Orders, where the file name will be
	CLARKE_julian date.OUT. For example:
	
	CLARKE_57735.OUT
	*/
	
	type public Boolean ER
	type public String RM
	type public Date XTJD
	
	set io.fileName="CLARKE_"_XTJD_".OUT"

	/* 
	Record size has been set at 800 characters. Should the record size
	exceed this limit, this line has to be changed
	*/

	set io.recordSize=800
	set io.openParams="WRITE/NEWV"
	
	do io.open()
	
	if ER.get() do { quit
		type String DIR,FILE,IO
		set DIR=io.directory
		set FILE=io.fileName
		set IO=DIR_" "_FILE
		//Error opening device ~p1
		set RM=$$^MSG(7878,IO) do EXC
		}
	quit
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	type public IO io
	do FTLR2(.io)			// build trailer record and close file
	do io.close()
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type Date CRTIME
	type Boolean IBRCD,IHPH
	type Number CUSTOM,FILCNT,FILHASH
	type String DEST,MAIL,RT
	type public String CO
	
	set CO=" "

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public Number SCHPID

	do Db.fastDelete("TMPRPT5","PID=:SCHPID")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
