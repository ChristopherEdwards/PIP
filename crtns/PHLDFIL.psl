PHLDFIL(RecordPHLD phld, String vpar, Boolean vparNorm) // PHLD - Permanent Hold Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (24)             05/03/2007
	// Trigger Definition (7)                      12/14/2005
	// Journal File Definition (4)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = phld.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(phld,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(phld,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = phld.cid
	type String SEQ = phld.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PHLD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PHLD","CID = :phld.cid and SEQ = :phld.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ

	type RecordPHLD phld = Db.getRecord("PHLD","CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do phld.setMode(2)

		do PHLDFIL(phld,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPHLD phld

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PHLD","CID = :phld.cid and SEQ = :phld.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set phld.TIM = %CurrentTime
		if %O = 0  set phld.%UID = %UserID
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(phld)) S ^HLD(3,vobj(phld,-3),vobj(phld,-4))=vobj(phld)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.phld)                // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPHLD phld

	if vpar["/JOURNAL/" do VJOURNAL(.phld)                 // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^HLD(3,vobj(phld,-3),vobj(phld,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordPHLD phld

	// Type local variables for access keys for defaults
	type public String CID
	type public String SEQ

	type public String %UID
	if phld.%uid.isNull() set phld.%uid = %UID             // %uid
	if phld.cdt.isNull() set phld.cdt = +$H                // cdt
	if phld.stfhost.isNull() set phld.stfhost = 0          // stfhost
	if phld.tim.isNull() set phld.tim = $P($H,",",2)       // tim
	type public String TLO
	if phld.tlo.isNull() set phld.tlo = TLO                // tlo
	quit


vreqn // Validate required data items

	type public RecordPHLD phld

	if phld.%uid.isNull() do vreqerr("%UID") quit
	if phld.cdt.isNull() do vreqerr("CDT") quit
	if phld.phc.isNull() do vreqerr("PHC") quit
	if phld.stdt.isNull() do vreqerr("STDT") quit
	if phld.stfhost.isNull() do vreqerr("STFHOST") quit
	if phld.tim.isNull() do vreqerr("TIM") quit
	if phld.tlo.isNull() do vreqerr("TLO") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPHLD phld

	if phld.cid.isNull() do vreqerr("CID") quit
	if phld.seq.isNull() do vreqerr("SEQ") quit

		if vx("%UID").exists(),phld.%uid.isNull() do vreqerr("%UID") quit
		if vx("CDT").exists(),phld.cdt.isNull() do vreqerr("CDT") quit
		if vx("PHC").exists(),phld.phc.isNull() do vreqerr("PHC") quit
		if vx("STDT").exists(),phld.stdt.isNull() do vreqerr("STDT") quit
		if vx("STFHOST").exists(),phld.stfhost.isNull() do vreqerr("STFHOST") quit
		if vx("TIM").exists(),phld.tim.isNull() do vreqerr("TIM") quit
		if vx("TLO").exists(),phld.tlo.isNull() do vreqerr("TLO") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PHLD","MSG",1767,"PHLD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordPHLD phld
	if 'phld.cid.isNull() set vfkey("^ACN("_""""_phld.cid_""""_","_50_")")="PHLD(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordPHLD phld
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":phld.cid") set vERRMSG = $$^MSG(8563,"PHLD(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("EXPDT").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordPHLD phld
	if vx("").order().isNull() do AUDIT^UCUTILN(phld,.vx(),1,"|") quit
	if vx("AMT").exists()!vx("DEPSC").exists()!vx("COMP").exists()!vx("AREF").exists()!vx("PERCNT").exists()!vx("STDT").exists()!vx("EXPDT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(phld,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - After Delete Permanent Hold

	type public RecordPHLD phld
	
	/*
	  ------------------- Revision History -------------------------------

	  11/22/05 - NATRAJAH - 13734
		     General DBI3 cleanup.

	  04/19/02 - TITOVE - 50416
		Added error check that will prevent the user from deleting
		a manual hold on a closed account.

	  03/12/02 - YURKOVICG - 49298
		Added code to remove host store and forward entries, 
		specifically SQL messages in STFMSG, that are attached to the 
		permanent hold.

	  12/09/98 - SCHWARTZC - 30193
		Add code to update the permanent hold inticator for loans
		PHLD - Delete Deposit Permanent Hold Indicator

	*/

	type Number hld,PHLD,XCID
	type String CLS
	set hld=""
	set XCID=phld.cid

	type RecordACN acn=Db.getRecord("ACN","CID=:XCID")
	
	if acn.stat=4 do Runtime.setErrMSG("ACN",8449) quit:ER
	
	set XTJD=%SystemDate 
	type ResultSet rs=Db.select("SEQ","PHLD","CID=:XCID AND EXPDT IS NULL OR EXPDT>:XTJD") 
	if 'rs.isEmpty() set hld=1 
	
	set CLS=acn.cls
	if CLS="D" do {
		type ResultSet rs1=Db.select("PHLD","DEP","CID=:XCID")
		if 'rs1.isEmpty() if rs1.next() set PHLD=rs1.getCol("PHLD")
		if PHLD'=1 set PHLD=1 do Db.update("DEP","PHLD=:PHLD","CID=:XCID","/nojournal")
		}

	if CLS="L" do {
		type ResultSet rs1=Db.select("PHLD","LN","CID=:XCID")
		if 'rs1.isEmpty() if rs1.next() set PHLD=rs1.getCol("PHLD")
		if PHLD'=1 set PHLD=1 do Db.update("LN","PHLD=:PHLD","CID=:XCID","/nojournal")
		}

	/*
	  Find the STF record that holds the SQL message that will update the
	  hold. If the record exists, delete it.
	*/

	if phld.stfhost=1,$G(%STFHOST) do {
		type String EXPR,PAR,XMSG
		type Boolean x
		type Number XSTFSEQ
		set EXPR="UPDATE PHLD SET STFHOST=0 WHERE CID=:CID AND SEQ=:SEQ"
		set PAR="/USING=CID="_CID_",SEQ="_SEQ
		set XMSG=$$FMTMSQL^STFUTL(EXPR,PAR)

		// Find sequence number of host store and forward record
		type ResultSet rs2=Db.select("STFSEQ","STFMSG","MSG=:XMSG")
		if rs2.isEmpty() quit
		set x=rs2.next()
		set XSTFSEQ=rs2.getCol(1)

		// Delete the store and forward record.
		do Db.delete("STFHSEQ","STFSEQ=:XSTFSEQ")
		}

	quit

vai1 // Trigger AFTER_INSERT - Permanent Hold After Insert trigger

	type public RecordPHLD phld
       	
	/*
	  --------------- Revision History -------------------------------

	  11/22/05 - NATRAJAH - 13734
		     General DBI3 cleanup.

	  04/19/02 - TITOVE - 50416
		Added error check that will prevent the user from placing
		a manual hold on a closed account.

	  03/12/02 - YURKOVICG - 49298
		o Remove "(" from /USING qualifier.
		o Added check for %STFHOST when inserting SQL message into STF.
		  Cannot rely on PHLD.STFHOST alone.
	
	  03/07/00 - JOYNER - 36638
		Modified code to support PHLD.STFHOST flag for
		24x7 support.

	  09/15/99 - MOTENJ - 31126
		Converted to PSL.
	            	
	  01/06/98 - SCHWARTZC - 30193
	  	Add code to set the Permanent hold indicator for Loans

	  PHLD - Update Deposit/Loan Permanent Hold Indicator

	*/

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Account Closed, Unable To Process
	if %ProcessMode'=2,acn.stat=4 do Runtime.setErrMSG("ACN",8449) quit:ER

	type String CLS,EXPR,PAR
	type Number PHLD
	set CLS=acn.cls
	
	if CLS="D" do {
		type ResultSet rs1=Db.select("PHLD","DEP","CID=:CID")
		if 'rs1.isEmpty() if rs1.next() set PHLD=rs1.getCol("PHLD")
		if PHLD'=1 set PHLD=1 do Db.update("DEP","phld=:PHLD","CID=:CID","/nojournal")
	 	}

	if CLS="L" do {
		type ResultSet rs1=Db.select("PHLD","LN","CID=:CID")
		if 'rs1.isEmpty() if rs1.next() set PHLD=rs1.getCol("PHLD")
		if PHLD'=1 set PHLD=1 do Db.update("LN","phld=:PHLD","CID=:CID","/nojournal")
		}	
	
	/*
	If hold was placed by an online process during the host store and 
	forward (STFHOST) period  place a SQL Update statement in the STFHOST
	tables so that it can be considered during the play back at the
	appropriate point in time.
	*/

	if phld.stfhost=1,$G(%STFHOST) do {
		set EXPR="UPDATE PHLD SET STFHOST=0 WHERE CID=:CID AND SEQ=:SEQ"
		set PAR="/USING=CID="_CID_",SEQ="_SEQ
		do STFREC^STFUTL(5,,,EXPR,PAR,CID)
		}

	quit 
	

vau1 // Trigger AFTER_UPDATE - After Update trigger

	type public RecordPHLD phld
	/*
	 ------------------- Revision History -------------------------------
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   04/19/02 - TITOVE - 50416
		Added error check that will prevent the user from updating
		a manual hold on a closed account.
	*/

	type Public Boolean ER
	type Number XCID
	set XCID=phld.cid
	type RecordACN acn=Db.getRecord("ACN","CID=:XCID")
 	//Account Closed, Unable To Process
	if acn.stat=4 do Runtime.setErrMSG("ACN",8449) quit:ER
	
	quit

vau2 // Trigger AU_EXPDT - After Update of EXPDT

	type public RecordPHLD phld
	/* 
			---- Revision History ------------------------------------------------
	
			11/22/05 - NATRAJAH - 13734
	      General DBI3 cleanup.

			01/15/02 - BECKERJ - 48788
 	      Added trigger to update the Permanent Hold indicator if
 	      expiration date was change.
	
			----------------------------------------------------------------------
			*/
	type String CLS
	type Number PHLD,XPHLD
	type ResultSet rs=Db.select("CLS","ACN","CID=:CID")
	if 'rs.isEmpty() if rs.next() set CLS=rs.getCol("CLS")

	set XPHLD=0
	if (phld.expdt="")!(phld.expdt>%SystemDate) S XPHLD=1
	
	if CLS="D" do {
		type ResultSet rs1=Db.select("PHLD","DEP","CID=:CID")
		if 'rs1.isEmpty() if rs1.next() set PHLD=rs1.getCol("PHLD")
		if PHLD'=XPHLD do Db.update("DEP","phld=:XPHLD","CID=:CID","/nojournal")
		}
	
	if CLS="L" do {
		type ResultSet rs1=Db.select("PHLD","LN","CID=:CID")
		if 'rs1.isEmpty() if rs1.next() set PHLD=rs1.getCol("PHLD")
		if PHLD'=XPHLD do Db.update("LN","phld=:XPHLD","CID=:CID","/nojournal")
		}
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete Hold

	type public RecordPHLD phld
	/*
	----- Revision History ------------------------------------------------
	
	07/19/05 - RussellDS - CR16614
		   Removed reference to vpar("SYSTEM") and replaced with
		   vpar variable, FRMFILER reference.
	*/
	
	/*
	  Only triggers to Collateral File Can delete a permanent hold when
	  the hold is placed because of a deposit secured loan.
	*/
	
	type public Boolean ER
	type public String vpar

	if phld.depsc,'vpar.isLike("%/FRMFILER/%") do Runtime.setErrMSG("PHLD",3536) if ER quit
		 
	// Delete deposit secured loan hold through collateral deletion
	
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordPHLD phld
	/*
	----------------------Revision History--------------------------------
	
	07/19/05 - RussellDS - CR16614
		   Removed reference to vpar("SYSTEM") and replaced with
		   vpar variable, FRMFILER reference.
		   
		   Minor PSL clean up.
		   
		   Removed old revision history.
	*/
	
	type public Boolean ER
	type public String vpar

	// Default value
	
	set phld.tlo=%UserStation
	
	/*
	  Only triggers to Collateral File Can Insert a permanent hold when
	  the hold is placed because of a deposit secured loan.
	*/

	if phld.depsc,'vpar.isLike("%/FRMFILER/%") do Runtime.setErrMSG("PHLD",3531) if ER quit
			 
	// Create deposit secured loan hold through collateral creation
	
	// Required set
	if phld.comp.isNull(), phld.aref.isNull(), (+phld.percnt = 0) quit 
	if 'phld.comp.isNull(), 'phld.aref.isNull(), (+phld.percnt '=0) quit 
	do Runtime.setErrMSG("PHLD", 1767, "COMP AREF PERCNT") if ER quit 
	
	quit

vbu1 // Trigger BU_DEPSC - Before Update Deposit Secured Hold

	type public RecordPHLD phld
	do phld.setAuditFlag(1)
	/*
	----- Revision History ------------------------------------------------
	
	07/19/05 - RussellDS - CR16614
		   Removed reference to vpar("SYSTEM") and replaced with
		   vpar variable, FRMFILER reference.
	*/
	
	/*	
	  Only triggers to Collateral File Can Update a permanent hold when
	  the hold is placed because of a deposit secured loan.
	*/

	type public Boolean ER
	type public String vpar

	if phld.depsc,'vpar.isLike("%/FRMFILER/%") do Runtime.setErrMSG("PHLD", 3534) if ER quit
			 
	// "Update deposit secured loan hold through collateral maintemance"
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPHLD phld

	set X = phld.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = phld.seq if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if phld.%uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("%UID", vRM) quit
	set X = phld.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PHLD.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = phld.aref if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("AREF", vRM) quit
	if phld.autcode.length()>6 set vRM = $$^MSG(1076,6) do vdderr("AUTCODE", vRM) quit
	set X = phld.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	if phld.chknum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CHKNUM", vRM) quit
	set X = phld.comp if 'X.isNull(),'Db.isDefined("STBLHOLD","X") set vRM = $$^MSG(1485,X) do vdderr("COMP", vRM) quit
	set X = phld.crdnum if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("CRDNUM", vRM) quit
	set X = phld.crdtyp if 'X.isNull(),'Db.isDefined("CRDTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CRDTYP", vRM) quit
	set X = phld.depsc if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("DEPSC", vRM) quit
	set X = phld.expdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPDT", vRM) quit
	set X = phld.oramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PHLD.ORAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if phld.orcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("ORCRCD", vRM) quit
	set X = phld.percnt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,.01,999.99,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PHLD.PERCNT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = phld.phc if 'X.isNull(),'Db.isDefined("UTBLPHC","X") set vRM = $$^MSG(1485,X) do vdderr("PHC", vRM) quit
	set X = phld.spr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
	set X = phld.stdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STDT", vRM) quit
	if '("01"[phld.STFHOST) set vRM=$$^MSG(742,"L") do vdderr("STFHOST", vRM) quit
	if phld.tcmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCMT", vRM) quit
	set X = phld.tim if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIM", vRM) quit
	if phld.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if phld.tso.length()>300 set vRM = $$^MSG(1076,300) do vdderr("TSO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PHLD","MSG",979,"PHLD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordPHLD phld)	//PHLD Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj2(.phld)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj2(.phld)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.phld)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=ATMHLD_I
			do vj3(.phld)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="F" do {
			do vj1(.phld)	// Mode=I Tran=F EFD=N,E Seq=1 JRNID=ATMHLD_I
			}
		else  if TSRC="O" do {
			do vj1(.phld)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=ATMHLD_I
			do vj3(.phld)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj4(.phld)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj4(.phld)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordPHLD phld)	// ATMHLD_I  Table ATMHLD  ATM Daily Hold Table

	if +phld.phc=92
	else  quit

	type Public String %UID
	type String v1,v2,vlastkey
	set v1=phld.expdt
	set v2=phld.cid
	set vlastkey=phld.seq
	type RecordATMHLD atmhld=Db.getRecord("ATMHLD","EXPDT=:v1,CID=:v2,SEQ=:vlastkey",1)
	set atmhld.amt=phld.amt
	set atmhld.stdt=phld.stdt
	set atmhld.tcmt=phld.tcmt
	set atmhld.tlo=phld.tlo
	set atmhld.uid=%UID

	do atmhld.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordPHLD phld)	// HIST_DELETE  Table HIST  History for deletion of PHLD

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=phld.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.spr=phld.spr
	set hist.tcmt=$$^MSG("5665",phld.seq)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.trc=phld.seq
	set hist.tso=phld.tso
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordPHLD phld)	// HIST_INSERT  Table HIST  History for creation of PHLD

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=phld.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.spr=phld.spr
	set hist.tcmt=$$^MSG("5664",phld.seq)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.trc=phld.seq
	set hist.tso=phld.tso
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordPHLD phld)	// HIST_UPDATE  Table HIST  History for updates to PHLD

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=phld.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.spr=phld.spr
		set hist.tcmt=$$TCMTFM^ACNFUNCS(phld.cid_","_phld.seq,"PHLD",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.trc=phld.seq
		set hist.tso=phld.tso
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordPHLD phld

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = phld.cid_","_phld.seq         // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = phld.cid_","_phld.seq         // Copy new keys into object
	type RecordPHLD vnewrec = phld.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PHLD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordPHLD phld

	if vux("CID").exists() set phld.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set phld.seq = vux("SEQ").piece("|",i)
	quit
