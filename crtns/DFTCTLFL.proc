DFTCTLFL(RecordPRODCTL prodctl, String vpar, Boolean vparNorm) // PRODCTL - Product Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (404)            01/03/2007
	// Trigger Definition (5)                      01/18/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = prodctl.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(prodctl,.vxins(),10,"|")
	if %O = 1 quit:'prodctl.isChanged()  do AUDIT^UCUTILN(prodctl,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYPE = prodctl.type

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
		do SET^UCLREGEN("PRODCTL","*")                        // Literal references to PRODCTL exist
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYPE").exists() do vkchged quit                // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PRODCTL",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
		do {                                                  // Check to see if updated columns involved in literal references
			type String vcol, vlitcols()

			type ResultSet rslits = Db.select("DISTINCT COLUMN", "SYSMAPLITDTA", "TABLE='PRODCTL'")
			while rslits.next()  set vlitcols(rslits.getCol("COLUMN")) = ""

			set vcol = ""
			for  set vcol = vlitcols(vcol).order() quit:vcol.isNull()  if vx(vcol).exists() do SET^UCLREGEN("PRODCTL",vcol)
		}
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PRODCTL","TYPE = :prodctl.type")  // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		do SET^UCLREGEN("PRODCTL","*")                        // Literal references to PRODCTL exist
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYPE

	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL","TYPE=:TYPE")
	if (%ProcessMode = 2) do {
		do prodctl.setMode(2)

		do DFTCTLFL(prodctl,vpar)
	}

	quit

vLITCHK() quit 1 // Table has columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPRODCTL prodctl

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PRODCTL","TYPE = :prodctl.type") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(prodctl,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(prodctl,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(prodctl,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLCTL(vobj(prodctl,-3),n)=vobj(prodctl,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(prodctl,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(prodctl,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLCTL(vobj(prodctl,-3),n)=vobj(prodctl,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordPRODCTL prodctl
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^UTBLCTL(vobj(prodctl,-3),n)) quit:n.isNull()  if 'vobj(prodctl,n).data(),^UTBLCTL(vobj(prodctl,-3),n).data()#2 set vobj(prodctl,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPRODCTL prodctl

	if 'vkeychg.get(),prodctl.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(prodctl,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^UTBLCTL(vobj(prodctl,-3))                        // Delete Record
	quit


vinit // Initialize default values

	type public RecordPRODCTL prodctl

	// Type local variables for access keys for defaults
	type public String TYPE

	if prodctl.aec.isNull() set prodctl.aec = 0            // aec
	if prodctl.aeci.isNull() set prodctl.aeci = 0          // aeci
	if prodctl.ana.isNull() set prodctl.ana = 0            // ana
	if prodctl.anlpnt.isNull() set prodctl.anlpnt = 0      // anlpnt
	if prodctl.assumf.isNull() set prodctl.assumf = 0      // assumf
	if prodctl.balsup.isNull() set prodctl.balsup = 0      // balsup
	if prodctl.bwf.isNull() set prodctl.bwf = 0            // bwf
	if prodctl.cfgen.isNull() set prodctl.cfgen = 0        // cfgen
	if prodctl.cls.isNull() set prodctl.cls = "D"          // cls
	if prodctl.darccu.isNull() set prodctl.darccu = 0      // darccu
	if prodctl.darcpo.isNull() set prodctl.darcpo = 0      // darcpo
	if prodctl.dda.isNull() set prodctl.dda = 0            // dda
	if prodctl.defal.isNull() set prodctl.defal = 0        // defal
	if prodctl.dftcid.isNull() set prodctl.dftcid = 0      // dftcid
	if prodctl.dftirn.isNull() set prodctl.dftirn = 0      // dftirn
	if prodctl.drskip.isNull() set prodctl.drskip = 0      // drskip
	type public String TJD
	if prodctl.dtbeg.isNull() set prodctl.dtbeg = TJD      // dtbeg
	if prodctl.finstmt.isNull() set prodctl.finstmt = 0    // finstmt
	if prodctl.fpf.isNull() set prodctl.fpf = 0            // fpf
	if prodctl.intyprst.isNull() set prodctl.intyprst = 0  // intyprst
	if prodctl.mcolc.isNull() set prodctl.mcolc = 0        // mcolc
	if prodctl.mf.isNull() set prodctl.mf = 1              // mf
	if prodctl.minhist.isNull() set prodctl.minhist = 90   // minhist
	if prodctl.nonpa.isNull() set prodctl.nonpa = 0        // nonpa
	if prodctl.nostro.isNull() set prodctl.nostro = 0      // nostro
	if prodctl.pacf.isNull() set prodctl.pacf = 0          // pacf
	if prodctl.pdcf.isNull() set prodctl.pdcf = 0          // pdcf
	if prodctl.poeft.isNull() set prodctl.poeft = 0        // poeft
	if prodctl.popat.isNull() set prodctl.popat = 0        // popat
	if prodctl.ppcf.isNull() set prodctl.ppcf = 0          // ppcf
	if prodctl.ppif.isNull() set prodctl.ppif = 0          // ppif
	if prodctl.provpo.isNull() set prodctl.provpo = 0      // provpo
	if prodctl.ptmf.isNull() set prodctl.ptmf = 0          // ptmf
	if prodctl.resreq.isNull() set prodctl.resreq = 0      // resreq
	if prodctl.rlp.isNull() set prodctl.rlp = 0            // rlp
	if prodctl.rpc.isNull() set prodctl.rpc = 0            // rpc
	if prodctl.savdbda.isNull() set prodctl.savdbda = 0    // savdbda
	if prodctl.vrp.isNull() set prodctl.vrp = 0            // vrp
	quit


vreqn // Validate required data items

	type public RecordPRODCTL prodctl

	if prodctl.aec.isNull() do vreqerr("AEC") quit
	if prodctl.aeci.isNull() do vreqerr("AECI") quit
	if prodctl.ana.isNull() do vreqerr("ANA") quit
	if prodctl.anlpnt.isNull() do vreqerr("ANLPNT") quit
	if prodctl.assumf.isNull() do vreqerr("ASSUMF") quit
	if prodctl.balsup.isNull() do vreqerr("BALSUP") quit
	if prodctl.bwf.isNull() do vreqerr("BWF") quit
	if prodctl.cfgen.isNull() do vreqerr("CFGEN") quit
	if prodctl.cls.isNull() do vreqerr("CLS") quit
	if prodctl.darccu.isNull() do vreqerr("DARCCU") quit
	if prodctl.darcpo.isNull() do vreqerr("DARCPO") quit
	if prodctl.dda.isNull() do vreqerr("DDA") quit
	if prodctl.defal.isNull() do vreqerr("DEFAL") quit
	if prodctl.des.isNull() do vreqerr("DES") quit
	if prodctl.dftcid.isNull() do vreqerr("DFTCID") quit
	if prodctl.drskip.isNull() do vreqerr("DRSKIP") quit
	if prodctl.finstmt.isNull() do vreqerr("FINSTMT") quit
	if prodctl.fpf.isNull() do vreqerr("FPF") quit
	if prodctl.grp.isNull() do vreqerr("GRP") quit
	if prodctl.intyprst.isNull() do vreqerr("INTYPRST") quit
	if prodctl.mcolc.isNull() do vreqerr("MCOLC") quit
	if prodctl.minhist.isNull() do vreqerr("MINHIST") quit
	if prodctl.nonpa.isNull() do vreqerr("NONPA") quit
	if prodctl.nostro.isNull() do vreqerr("NOSTRO") quit
	if prodctl.pacf.isNull() do vreqerr("PACF") quit
	if prodctl.pdcf.isNull() do vreqerr("PDCF") quit
	if prodctl.poeft.isNull() do vreqerr("POEFT") quit
	if prodctl.popat.isNull() do vreqerr("POPAT") quit
	if prodctl.ppcf.isNull() do vreqerr("PPCF") quit
	if prodctl.ppif.isNull() do vreqerr("PPIF") quit
	if prodctl.provpo.isNull() do vreqerr("PROVPO") quit
	if prodctl.ptmf.isNull() do vreqerr("PTMF") quit
	if prodctl.rlp.isNull() do vreqerr("RLP") quit
	if prodctl.rpc.isNull() do vreqerr("RPC") quit
	if prodctl.savdbda.isNull() do vreqerr("SAVDBDA") quit
	if prodctl.vrp.isNull() do vreqerr("VRP") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPRODCTL prodctl

	if prodctl.type.isNull() do vreqerr("TYPE") quit

	if 'vobj(prodctl,-100,0,"").order().isNull() do {
		if vx("DES").exists(),prodctl.des.isNull() do vreqerr("DES") quit
	}
	if 'vobj(prodctl,-100,10,"").order().isNull() do {
		if vx("MINHIST").exists(),prodctl.minhist.isNull() do vreqerr("MINHIST") quit
		if vx("CFGEN").exists(),prodctl.cfgen.isNull() do vreqerr("CFGEN") quit
		if vx("AEC").exists(),prodctl.aec.isNull() do vreqerr("AEC") quit
		if vx("AECI").exists(),prodctl.aeci.isNull() do vreqerr("AECI") quit
	}
	if 'vobj(prodctl,-100,25,"").order().isNull() do {
		if vx("DDA").exists(),prodctl.dda.isNull() do vreqerr("DDA") quit
		if vx("DFTCID").exists(),prodctl.dftcid.isNull() do vreqerr("DFTCID") quit
	}
	if 'vobj(prodctl,-100,30,"").order().isNull() do {
		if vx("PPIF").exists(),prodctl.ppif.isNull() do vreqerr("PPIF") quit
		if vx("FPF").exists(),prodctl.fpf.isNull() do vreqerr("FPF") quit
		if vx("PTMF").exists(),prodctl.ptmf.isNull() do vreqerr("PTMF") quit
		if vx("MCOLC").exists(),prodctl.mcolc.isNull() do vreqerr("MCOLC") quit
		if vx("DEFAL").exists(),prodctl.defal.isNull() do vreqerr("DEFAL") quit
		if vx("PPCF").exists(),prodctl.ppcf.isNull() do vreqerr("PPCF") quit
		if vx("RPC").exists(),prodctl.rpc.isNull() do vreqerr("RPC") quit
		if vx("PDCF").exists(),prodctl.pdcf.isNull() do vreqerr("PDCF") quit
	}
	if 'vobj(prodctl,-100,31,"").order().isNull() do {
		if vx("POPAT").exists(),prodctl.popat.isNull() do vreqerr("POPAT") quit
		if vx("ASSUMF").exists(),prodctl.assumf.isNull() do vreqerr("ASSUMF") quit
		if vx("RLP").exists(),prodctl.rlp.isNull() do vreqerr("RLP") quit
		if vx("VRP").exists(),prodctl.vrp.isNull() do vreqerr("VRP") quit
		if vx("POEFT").exists(),prodctl.poeft.isNull() do vreqerr("POEFT") quit
	}
	if 'vobj(prodctl,-100,32,"").order().isNull() do {
		if vx("DRSKIP").exists(),prodctl.drskip.isNull() do vreqerr("DRSKIP") quit
		if vx("PACF").exists(),prodctl.pacf.isNull() do vreqerr("PACF") quit
		if vx("ANA").exists(),prodctl.ana.isNull() do vreqerr("ANA") quit
		if vx("PROVPO").exists(),prodctl.provpo.isNull() do vreqerr("PROVPO") quit
		if vx("DARCPO").exists(),prodctl.darcpo.isNull() do vreqerr("DARCPO") quit
		if vx("DARCCU").exists(),prodctl.darccu.isNull() do vreqerr("DARCCU") quit
	}
	if 'vobj(prodctl,-100,35,"").order().isNull() do {
		if vx("BALSUP").exists(),prodctl.balsup.isNull() do vreqerr("BALSUP") quit
		if vx("FINSTMT").exists(),prodctl.finstmt.isNull() do vreqerr("FINSTMT") quit
	}
	if 'vobj(prodctl,-100,36,"").order().isNull() do {
		if vx("BWF").exists(),prodctl.bwf.isNull() do vreqerr("BWF") quit
		if vx("INTYPRST").exists(),prodctl.intyprst.isNull() do vreqerr("INTYPRST") quit
	}
	if 'vobj(prodctl,-100,45,"").order().isNull() do {
		if vx("NONPA").exists(),prodctl.nonpa.isNull() do vreqerr("NONPA") quit
	}
	if 'vobj(prodctl,-100,47,"").order().isNull() do {
		if vx("ANLPNT").exists(),prodctl.anlpnt.isNull() do vreqerr("ANLPNT") quit
		if vx("NOSTRO").exists(),prodctl.nostro.isNull() do vreqerr("NOSTRO") quit
		if vx("SAVDBDA").exists(),prodctl.savdbda.isNull() do vreqerr("SAVDBDA") quit
	}
	if 'vobj(prodctl,-100,50,"").order().isNull() do {
		if vx("CLS").exists(),prodctl.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),prodctl.grp.isNull() do vreqerr("GRP") quit
	}
		if vx("AEC").exists(),prodctl.aec.isNull() do vreqerr("AEC") quit
		if vx("AECI").exists(),prodctl.aeci.isNull() do vreqerr("AECI") quit
		if vx("ANA").exists(),prodctl.ana.isNull() do vreqerr("ANA") quit
		if vx("ANLPNT").exists(),prodctl.anlpnt.isNull() do vreqerr("ANLPNT") quit
		if vx("ASSUMF").exists(),prodctl.assumf.isNull() do vreqerr("ASSUMF") quit
		if vx("BALSUP").exists(),prodctl.balsup.isNull() do vreqerr("BALSUP") quit
		if vx("BWF").exists(),prodctl.bwf.isNull() do vreqerr("BWF") quit
		if vx("CFGEN").exists(),prodctl.cfgen.isNull() do vreqerr("CFGEN") quit
		if vx("CLS").exists(),prodctl.cls.isNull() do vreqerr("CLS") quit
		if vx("DARCCU").exists(),prodctl.darccu.isNull() do vreqerr("DARCCU") quit
		if vx("DARCPO").exists(),prodctl.darcpo.isNull() do vreqerr("DARCPO") quit
		if vx("DDA").exists(),prodctl.dda.isNull() do vreqerr("DDA") quit
		if vx("DEFAL").exists(),prodctl.defal.isNull() do vreqerr("DEFAL") quit
		if vx("DES").exists(),prodctl.des.isNull() do vreqerr("DES") quit
		if vx("DFTCID").exists(),prodctl.dftcid.isNull() do vreqerr("DFTCID") quit
		if vx("DRSKIP").exists(),prodctl.drskip.isNull() do vreqerr("DRSKIP") quit
		if vx("FINSTMT").exists(),prodctl.finstmt.isNull() do vreqerr("FINSTMT") quit
		if vx("FPF").exists(),prodctl.fpf.isNull() do vreqerr("FPF") quit
		if vx("GRP").exists(),prodctl.grp.isNull() do vreqerr("GRP") quit
		if vx("INTYPRST").exists(),prodctl.intyprst.isNull() do vreqerr("INTYPRST") quit
		if vx("MCOLC").exists(),prodctl.mcolc.isNull() do vreqerr("MCOLC") quit
		if vx("MINHIST").exists(),prodctl.minhist.isNull() do vreqerr("MINHIST") quit
		if vx("NONPA").exists(),prodctl.nonpa.isNull() do vreqerr("NONPA") quit
		if vx("NOSTRO").exists(),prodctl.nostro.isNull() do vreqerr("NOSTRO") quit
		if vx("PACF").exists(),prodctl.pacf.isNull() do vreqerr("PACF") quit
		if vx("PDCF").exists(),prodctl.pdcf.isNull() do vreqerr("PDCF") quit
		if vx("POEFT").exists(),prodctl.poeft.isNull() do vreqerr("POEFT") quit
		if vx("POPAT").exists(),prodctl.popat.isNull() do vreqerr("POPAT") quit
		if vx("PPCF").exists(),prodctl.ppcf.isNull() do vreqerr("PPCF") quit
		if vx("PPIF").exists(),prodctl.ppif.isNull() do vreqerr("PPIF") quit
		if vx("PROVPO").exists(),prodctl.provpo.isNull() do vreqerr("PROVPO") quit
		if vx("PTMF").exists(),prodctl.ptmf.isNull() do vreqerr("PTMF") quit
		if vx("RLP").exists(),prodctl.rlp.isNull() do vreqerr("RLP") quit
		if vx("RPC").exists(),prodctl.rpc.isNull() do vreqerr("RPC") quit
		if vx("SAVDBDA").exists(),prodctl.savdbda.isNull() do vreqerr("SAVDBDA") quit
		if vx("VRP").exists(),prodctl.vrp.isNull() do vreqerr("VRP") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODCTL","MSG",1767,"PRODCTL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After inserting product control record

	type public RecordPRODCTL prodctl
	/*
	  ----------------------------------- Revision History ----------------------------------------------

	  01/18/05 - ARPAVC - 19108
		     Removed check on CFMAX.  Column was marked obsolete in
		     2003 and all references should be removed from the 
		     system.  

	  01/13/06 - ARPAVC - 18928
	  	     Changed error message 1498 to pass in X instead of DI
	  	     DI was causing confusion as the message should display a
	  	     transaction code and not a column name:  Invalid 
	  	     transaction code ~p1	  	     
	  	     
	  11/07/00 - HUNDERMARKD - 41847
		     In section LNTRAN removed reference to CRTREA as it has
		     been obsoleted.

	  08/21/00 - Spier - 40349
		     Changed calls to DRTCVER,CRTCVER,CRCHECK and DRCHECK
		     to pass TRB rather then the entire object. This is
		     a tempoary delay to a problem with the PSL compiler
		     that occurs when too many calls into a single label 
		     pass the object.
	
	  12/01/99 - GRAY - 32507
		     Modified to no longer use references to native screen 
		     names as a part of the Eliminate Teller/Branch Character 
		     Interface project.
	
	  09/24/99 - MOTENJ - 31126
	             Converted to PSL.
	
	  01/25/99 - Terrie Dougherty - 31345
		     Modified CRCHECK and DRCHECK sections to pass data item as
	             second parameter when returning an error.	
	
	  After INSERT verification. If adding a new verification, please determine if
	  the change is common to both loans and deposits, changes should be made to
	  the label COMMON. If the change is for just one product type then put it
	  into either DEPVER or LOANVER.
	
	*/

	new CLS
	set CLS=prodctl.cls
	if CLS="L" do COMMON(.prodctl) quit:ER  do LOANVER(.prodctl) quit:ER  do LNTRAN(.prodctl) quit:ER 
	if CLS="D" do COMMON(.prodctl) quit:ER  do DEPVER(.prodctl) quit:ER  do DEPTRAN(.prodctl) quit:ER 
	if CLS="*" do CIFVER(.prodctl) quit:ER
	
	quit 
	
CIFVER(RecordPRODCTL prodctl) 

	// Check CIF required fields
	// Data required

	if prodctl.brcd="" do Runtime.setErrMSG("PRODCTL",979,"BRCD"_$$^MSG(741)) if ER quit   		
	/*  12/01/99 SPG
	if prodctl.nscr="" do Runtime.setErrMSG("PRODCTL",979,"NSCR"_$$^MSG(741)) if ER quit   		
	if prodctl.mscr="" do Runtime.setErrMSG("PRODCTL",979,"MSCR"_$$^MSG(741)) if ER quit   		
	if prodctl.iscr="" do Runtime.setErrMSG("PRODCTL",979,"ISCR"_$$^MSG(741)) if ER quit  		
	*/
	if prodctl.minhist="" do Runtime.setErrMSG("PRODCTL",979,"MINHIST"_$$^MSG(741)) if ER quit  	
	quit 
	
COMMON(RecordPRODCTL prodctl)
	
	// Cash flow generation requires cash flow projection days

	if prodctl.cfgen,'prodctl.cfpdys do Runtime.setErrMSG("PRODCTL",2677) if ER quit 
	
	// Check that DTBEG is not greater than ENDATE

	if prodctl.dtbeg,prodctl.endate,prodctl.dtbeg>prodctl.endate do Runtime.setErrMSG("PRODCTL",345) if ER quit
	
	// Checks that MINTFRD is evenly divisible by INCTFRD.

	if prodctl.inctfrd,prodctl.mintfrd,prodctl.mintfrd#prodctl.inctfrd do Runtime.setErrMSG("PRODCTL",1742) if ER quit 
	
	// Checks that MINTFRL is evenly divisible by INCTFRL.

	if prodctl.inctfrl,prodctl.mintfrl,prodctl.mintfrl#prodctl.inctfrl do Runtime.setErrMSG("PRODCTL",1742) if ER quit 
	
	// Checks that ODSMTR is evenly divisible by ODSITR.

	if prodctl.odsmtr,prodctl.odsitr,(prodctl.odsmtr#prodctl.odsitr) do Runtime.setErrMSG("PRODCTL",1742) if ER quit
	
	// Check teaser rate term

	set (TRM,X)=prodctl.trtrm
	set ODT=%SystemDate
	if X'="" do ^UMDT
	if ER do Runtime.setErrMSG("PRODCTL",3333,"RM") if ER quit 
	quit 
	
DEPVER(RecordPRODCTL prodctl) 
	
	// Check deposit required fields
	// Data required
	if prodctl.crtrgp="" do Runtime.setErrMSG("PRODCTL",979,"CRTRGP"_$$^MSG(741)) if ER quit       
	if prodctl.drtrgp="" do Runtime.setErrMSG("PRODCTL",979,"DRTRGP"_$$^MSG(741)) if ER quit       
	if prodctl.resreq="" do Runtime.setErrMSG("PRODCTL",979,"RESREQ"_$$^MSG(741)) if ER quit      
	/* 12/01/99 SPG
	if prodctl.iscr="" do Runtime.setErrMSG("PRODCTL",979,"ISCR"_$$^MSG(741)) if ER quit   	
	if prodctl.mscr="" do Runtime.setErrMSG("PRODCTL",979,"MSCR"_$$^MSG(741)) if ER quit   	
	*/
	if prodctl.resreq="" do Runtime.setErrMSG("PRODCTL",979,"RESREQ"_$$^MSG(741)) if ER quit    
	
	if prodctl.rclstype'="",prodctl.rclsbal="" do Runtime.setErrMSG("PRODCTL",979,"RCLSBAL "_$$^MSG(741)) if ER quit    
	
	if prodctl.rclstype'="" do {
		new DATA,XTYPE
		set XTYPE=prodctl.rclstype
		set DATA=Db.getOneRow("CRCD","PRODDFTD","XTYPE")
		//New product type must be a deposit product type
		if DATA="" do Runtime.setErrMSG("PRODCTL",8648) if ER quit
		}
	if prodctl.rclstype=prodctl.type do Runtime.setErrMSG("PRODCTL",8647) if ER quit 
	// end deposit verification
	quit 
	
LOANVER(RecordPRODCTL prodctl)

	// Check loan required fields
	new X
	// Data required
	if prodctl.cradin="" do Runtime.setErrMSG("PRODCTL",979,"CRADIN"_$$^MSG(741)) if ER quit     
	if prodctl.dcc1="" do Runtime.setErrMSG("PRODCTL",979,"DCC1"_$$^MSG(741)) if ER quit   	
	if prodctl.dradin="" do Runtime.setErrMSG("PRODCTL",979,"DRADIN"_$$^MSG(741)) if ER quit     
	if prodctl.drtrmu="" do Runtime.setErrMSG("PRODCTL",979,"DRTRMU"_$$^MSG(741)) if ER quit     
	if prodctl.dtbeg="" do Runtime.setErrMSG("PRODCTL",979,"DTBEG"_$$^MSG(741)) if ER quit       
	/* 12/01/99 SPG
	if prodctl.ascr="" do Runtime.setErrMSG("PRODCTL",979,"ASCR"_$$^MSG(741)) if ER quit   	
	if prodctl.iscr="" do Runtime.setErrMSG("PRODCTL",979,"ISCR"_$$^MSG(741)) if ER quit    	
	if prodctl.mscr="" do Runtime.setErrMSG("PRODCTL",979,"MSCR"_$$^MSG(741)) if ER quit   	
	if prodctl.nscr="" do Runtime.setErrMSG("PRODCTL",979,"NSCR"_$$^MSG(741)) if ER quit   	
	*/
	
	/*
	  FBP Verify Fixed Bullet Product Flag
	  Repriced Term Loan codes are mutually exclusive.  If Fixed Bullet Product
	  is selected, values entered in Agreement Product or Variable Control
	  Products are invalid.
	*/

	do { quit:ER 
		set X=prodctl.fbp
		if 'X quit 
		if 'prodctl.rlp,'prodctl.vrp quit 
		do Runtime.setErrMSG("PRODCTL",2380) if ER quit 
		}
	
	
	/*
	  RLP Verify Agreement Product Flag
	  Repriced Term Loan codes are mutually exclusive. If Agreement Product is
	  selected, values entered in Fixed Bullet Product or Variable Control
	  Products are invalid.
	*/

	if prodctl.rlp,prodctl.fbp,prodctl.vrp do Runtime.setErrMSG("PRODCTL",2380) if ER quit
	
	/*
	   ODSITR Verify OD Source - Increm Transfer
	   Checks that ODSMTR is evenly divisible by ODSITR.
	*/

	if prodctl.odsitr,prodctl.odsmtr,prodctl.odsmtr#prodctl.odsitr do Runtime.setErrMSG("PRODCTL",1742) if ER quit
	
	/*
	   VRP Verify Variable Control Product Flg
	   Repriced Term Loan Codes are mutually exclusive.  If Variable Control
	   Product has been selected, values entered in Fixed Bullet Product or
	   Repriced Loan Product are invalid.
	*/

	if prodctl.vrp,prodctl.fbp,prodctl.rlp do Runtime.setErrMSG("PRODCTL",2380) if ER quit 
	
	if prodctl.extpct="",prodctl.extopt do Runtime.setErrMSG("PRODCTL",741) if ER quit
	
	/*
	   TRB Loan Transaction to Reduce Balance
	   Post processor ensures that TRB value of 0 is only used when the loan group
	   is "CBL".  Similarly, logic ensures that value of 1 is only used when the
	   loan group is not "CBL".
	*/
	
	// TRB value of 1
	
	if prodctl.trb,prodctl.grp="CBL" do Runtime.setErrMSG("PRODCTL",1449) if ER quit
	if ER do Runtime.setErrMSG("PRODCTL",3333,"RM") if ER quit 
	
	// TRB value of 0
	
	if 'prodctl.trb,prodctl.grp'="CBL" do Runtime.setErrMSG("PRODCTL",1450) if ER quit 
	new ELETAB
	do TBL1^LNFEEU(.ELETAB)
	do DISTFRE(prodctl.dpef1) quit:ER 
	do DISTFRE(prodctl.dpef2) quit:ER 
	do DISTFRE(prodctl.dpef3) quit:ER 
	do DISTFRE(prodctl.dpef4) quit:ER 
	if prodctl.aacm,"2.4"[prodctl.aacm set X=prodctl.aacm do Runtime.setErrMSG("PRODCTL",2111,"X") if ER quit
	
	// End Loan product verification
	quit 

DISTFRE(X)

	// default data items are valid.
	if X="" quit 	
	new A,E,R
	for A=1:1 set E=$P(X,",",A) quit:E=""  do DPEF quit:ER 
	quit 
	
DPEF
	
	set E=$P(E,"(",1)
	if $D(R(E)) do Runtime.setErrMSG("PRODCTL",889,"E") if ER quit 
	set R(E)=""
	if $E(E,$L(E))="*" quit 
	if '$D(ELETAB(E)) do Runtime.setErrMSG("PRODCTL",889,"E") if ER quit 
	quit 
DEPTRAN(RecordPRODCTL prodctl)
	
	// Tran codes are verified that credits are for credits and debits for debits
	NEW TRB
	set TRB=prodctl.trb
	do DRTCVER(prodctl.dradpr,"DRADPR",TRB) if ER quit 
	do CRTCVER(prodctl.cradpr,"CRADPR",TRB) if ER quit 
	do DRTCVER(prodctl.dradin,"DRADIN",TRB) if ER quit 
	do CRTCVER(prodctl.cradin,"CRADIN",TRB) if ER quit 
	do DRTCVER(prodctl.dradna,"DRADNA",TRB) if ER quit 
	do CRTCVER(prodctl.cradna,"CRADNA",TRB) if ER quit 
	do DRTCVER(prodctl.drnegacrua,"DRNEGACRUA",TRB) if ER quit 
	do CRTCVER(prodctl.crnegacrua,"CRNEGACRUA",TRB) if ER quit 
	do DRTCVER(prodctl.dradbw,"DRADBW",TRB) if ER quit 
	do CRTCVER(prodctl.cradbw,"CRADBW",TRB) if ER quit 
	do CRTCVER(prodctl.cradpe,"CRADPE",TRB) if ER quit 
	do DRTCVER(prodctl.dradie,"DRADIE",TRB) if ER quit 
	do CRTCVER(prodctl.cradie,"CRADIE",TRB) if ER quit 
	do DRTCVER(prodctl.dradres,"DRADRES",TRB) if ER quit 
	do CRTCVER(prodctl.cradres,"CRADRES",TRB) if ER quit 
	do DRTCVER(prodctl.drtrgp,"DRTRGP",TRB) if ER quit 
	do CRTCVER(prodctl.crtrgp,"CRTRGP",TRB) if ER quit 
	do DRTCVER(prodctl.drtrin,"DRTRIN",TRB) if ER quit 
	do CRTCVER(prodctl.crtrin,"CRTRIN",TRB) if ER quit 
	do DRTCVER(prodctl.drtrip,"DRTRIP",TRB) if ER quit 
	do DRTCVER(prodctl.dradni,"DRADNI",TRB) if ER quit 
	do CRTCVER(prodctl.cradni,"CRADNI",TRB) if ER quit 
	do DRTCVER(prodctl.drtrit,"DRTRIT",TRB) if ER quit 
	do CRTCVER(prodctl.crtrit,"CRTRIT",TRB) if ER quit 
	do DRTCVER(prodctl.drtrot,"DRTROT",TRB) if ER quit 
	do CRTCVER(prodctl.crtrot,"CRTROT",TRB) if ER quit 
	do DRTCVER(prodctl.drtrsc,"DRTRSC",TRB) if ER quit 
	do CRTCVER(prodctl.crtrsc,"CRTRSC",TRB) if ER quit 
	do DRTCVER(prodctl.drtrrc,"DRTRRC",TRB) if ER quit 
	do CRTCVER(prodctl.crtrpf,"CRTRPF",TRB) if ER quit 
	do CRTCVER(prodctl.odtc1,"ODTC1",TRB) if ER quit 
	do CRTCVER(prodctl.odtc2,"ODTC1",TRB) if ER quit 
	do DRTCVER(prodctl.drtrfr,"DRTRFR",TRB) if ER quit 
	do DRTCVER(prodctl.drtrts,"DRTRTS",TRB) if ER quit 
	do CRTCVER(prodctl.crtrts,"CRTRTS",TRB) if ER quit 
	do DRTCVER(prodctl.drtros,"DRTROS",TRB) if ER quit 
	do DRTCVER(prodctl.drirad,"DRIRAD",TRB) if ER quit 
	do DRTCVER(prodctl.drtrci,"DRTRCI",TRB) if ER quit 
	do CRTCVER(prodctl.crtrci,"CRTRCI",TRB) if ER quit 
	do DRTCVER(prodctl.drtrcs,"DRTRCS",TRB) if ER quit 
	do CRTCVER(prodctl.crtrcs,"CRTRCS",TRB) if ER quit 
	quit 
	
LNTRAN(RecordPRODCTL prodctl) 

	// tran codes are verified that credits are for credits and debits for debits
	new TRB
	set TRB=prodctl.trb
	do CRCHECK(prodctl.cradin,"CRADIN",TRB) if ER quit 
	do CRCHECK(prodctl.cradpe,"CRADPE",TRB) if ER quit 
	do CRCHECK(prodctl.crtacn1,"CRTACN1",TRB) if ER quit 
	do CRCHECK(prodctl.crtacn2,"CRTACN2",TRB) if ER quit 
	do CRCHECK(prodctl.crtcpc,"CRTCPC",TRB) if ER quit 
	do CRCHECK(prodctl.crtlcr,"CRTLCR",TRB) if ER quit 
	do CRCHECK(prodctl.crtrcd,"CRTRCD",TRB) if ER quit 
	do CRCHECK(prodctl.crtrci,"CRTRCI",TRB) if ER quit 
	do CRCHECK(prodctl.crtrct,"CRTRCT",TRB) if ER quit 
	do CRCHECK(prodctl.crtrdc,"CRTRDC",TRB) if ER quit 
	do CRCHECK(prodctl.crtraf,"CRTRAF",TRB) if ER quit 
	do CRCHECK(prodctl.crtrcu,"CRTRCU",TRB) if ER quit 
	do CRCHECK(prodctl.crtrdf,"CRTRDF",TRB) if ER quit 
	do CRCHECK(prodctl.crtrdm,"CRTRDM",TRB) if ER quit 
	do CRCHECK(prodctl.crtrgp,"CRTRGP",TRB) if ER quit 
	do CRCHECK(prodctl.crtrcf,"CRTRCF",TRB) if ER quit 
	do CRCHECK(prodctl.crtrcp,"CRTRCP",TRB) if ER quit 
	do CRCHECK(prodctl.crtrcv,"CRTRCV",TRB) if ER quit 
	do CRCHECK(prodctl.crtrdi,"CRTRDI",TRB) if ER quit 
	do CRCHECK(prodctl.crtrdfia,"CRTRDFIA",TRB) if ER quit 
	do CRCHECK(prodctl.crtria,"CRTRIA",TRB) if ER quit 
	do CRCHECK(prodctl.crtric,"CRTRIC",TRB) if ER quit 
	do CRCHECK(prodctl.crtrin,"CRTRIN",TRB) if ER quit 
	do CRCHECK(prodctl.crtrei,"CRTREI",TRB) if ER quit 
	do CRCHECK(prodctl.crtrep,"CRTREP",TRB) if ER quit 
	do CRCHECK(prodctl.crtreuec,"CRTREUEC",TRB) if ER quit 
	do CRCHECK(prodctl.crtreulc,"CRTREULC",TRB) if ER quit 
	do CRCHECK(prodctl.crtrmfr,"CRTRMFR",TRB) if ER quit 
	do CRCHECK(prodctl.crtrmi,"CRTRMI",TRB) if ER quit 
	do CRCHECK(prodctl.crtrmp,"CRTRMP",TRB) if ER quit 
	do CRCHECK(prodctl.crtrmu,"CRTRMU",TRB) if ER quit 
	do CRCHECK(prodctl.crtrna,"CRTRNA",TRB) if ER quit 
	do CRCHECK(prodctl.crtros,"CRTROS",TRB) if ER quit 
	do CRCHECK(prodctl.crtrri,"CRTRRI",TRB) if ER quit 
	do CRCHECK(prodctl.crtrpe,"CRTRPE",TRB) if ER quit 
	do CRCHECK(prodctl.crtrpp,"CRTRPP",TRB) if ER quit 
	do CRCHECK(prodctl.crtrpv,"CRTRPV",TRB) if ER quit 
	do CRCHECK(prodctl.crtrpr,"CRTRPR",TRB) if ER quit 
	do CRCHECK(prodctl.crtrsp,"CRTRSP",TRB) if ER quit 
	do CRCHECK(prodctl.crtrst,"CRTRST",TRB) if ER quit 
	do CRCHECK(prodctl.crtrts,"CRTRTS",TRB) if ER quit 
	do CRCHECK(prodctl.crtprec,"CRTPREC",TRB) if ER quit 
	do CRCHECK(prodctl.crtrppa,"CRTRPPA",TRB) if ER quit 
	do CRCHECK(prodctl.crtvrt,"CRTVRT",TRB) if ER quit 
	
	do DRCHECK(prodctl.dradin,"DRADIN",TRB) if ER quit 
	do DRCHECK(prodctl.drtacn1,"DRTACN1",TRB) if ER quit 
	do DRCHECK(prodctl.drtacn2,"DRTACN2",TRB) if ER quit 
	do DRCHECK(prodctl.drters,"DRTERS",TRB) if ER quit 
	do DRCHECK(prodctl.drtraf,"DRTRAF",TRB) if ER quit 
	do DRCHECK(prodctl.drtrcd,"DRTRCD",TRB) if ER quit 
	do DRCHECK(prodctl.drtrci,"DRTRCI",TRB) if ER quit 
	do DRCHECK(prodctl.drtrcf,"DRTRCF",TRB) if ER quit 
	do DRCHECK(prodctl.drtrcp,"DRTRCP",TRB) if ER quit 
	do DRCHECK(prodctl.drtrct,"DRTRCT",TRB) if ER quit 
	do DRCHECK(prodctl.drtrcu,"DRTRCU",TRB) if ER quit 
	do DRCHECK(prodctl.drtrcv,"DRTRCV",TRB) if ER quit 
	do DRCHECK(prodctl.drtrdc,"DRTRDC",TRB) if ER quit 
	do DRCHECK(prodctl.drtrdf,"DRTRDF",TRB) if ER quit 
	do DRCHECK(prodctl.drtrdfda,"DRTRDFDA",TRB) if ER quit 
	do DRCHECK(prodctl.drtrdi,"DRTRDI",TRB) if ER quit 
	do DRCHECK(prodctl.drtrdm,"DRTRDM",TRB) if ER quit 
	do DRCHECK(prodctl.drtrei,"DRTREI",TRB) if ER quit 
	do DRCHECK(prodctl.drtreuld,"DRTREULD",TRB) if ER quit 
	do DRCHECK(prodctl.drtreued,"DRTREUED",TRB) if ER quit 
	do DRCHECK(prodctl.drtrfr,"DRTRFR",TRB) if ER quit 
	do DRCHECK(prodctl.drtrgp,"DRTRGP",TRB) if ER quit 
	do DRCHECK(prodctl.drtrin,"DRTRIN",TRB) if ER quit 
	do DRCHECK(prodctl.drtrmfi,"DRTRMFI",TRB) if ER quit 
	do DRCHECK(prodctl.drtrmi,"DRTRMI",TRB) if ER quit 
	do DRCHECK(prodctl.drtrmu,"DRTRMU",TRB) if ER quit 
	do DRCHECK(prodctl.drtrna,"DRTRNA",TRB) if ER quit 
	do DRCHECK(prodctl.drtrri,"DRTRRI",TRB) if ER quit 
	do DRCHECK(prodctl.drtrpe,"DRTRPE",TRB) if ER quit 
	do DRCHECK(prodctl.drtrpr,"DRTRPR",TRB) if ER quit 
	do DRCHECK(prodctl.drtrppp,"DRTRPPP",TRB) if ER quit 
	do DRCHECK(prodctl.drtrpv,"DRTRPV",TRB) if ER quit 
	do DRCHECK(prodctl.drtrst,"DRTRST",TRB) if ER quit 
	do DRCHECK(prodctl.drtrts,"DRTRTS",TRB) if ER quit 
	do DRCHECK(prodctl.drtprec,"DRTPREC",TRB) if ER quit 
	do DRCHECK(prodctl.patglo,"PATGLO",TRB) if ER quit 
	
	quit 
	
DRTCVER(X,DI,TRB)
	
	/*
	   This check is done on transaction codes that are increase
	   transactions to ensure the combination of the debit credit indicator
	   and the value of TRB increase the balance of the account.
	*/
	
	quit:X="" 
	if X?.E1L.E do Runtime.setErrMSG("PRODCTL",1663) if ER quit 
	set X1=Db.getOneRow("DC","TRN","X")
	// Debit/credit indicator
	// Invalid transaction code ~p1
	if X1="" do Runtime.setErrMSG("PRODCTL",1498,"X") if ER quit
	set DC=$$DC^UTRB(X1,TRB) quit:ER 
	if DC do { quit:ER 
		set DI="PRODCTL."_DI
		if TRB do Runtime.setErrMSG("PRODCTL",2696,"DI") if ER quit 
		do Runtime.setErrMSG("PRODCTL",2695,"DI") if ER quit
		}
	quit 
	
CRTCVER(X,DI,TRB)
	
	/*
	   This check is done on transaction codes that are increase
	   transactions to ensure the combination of the debit credit indicator
	   and the value of TRB increase the balance of the account.
	*/
	quit:X="" 
	if X?.E1L.E do Runtime.setErrMSG("PRODCTL",1663) if ER quit 
	
	new DC,X1
	// Debit/credit indicator
	set X1=Db.getOneRow("DC","TRN","X")
	if X1="" do Runtime.setErrMSG("PRODCTL",1498,"DI") if ER quit
	
	set DC=$$DC^UTRB(X1,TRB)		// Increase/decrease indicator
	
	if 'DC do {
		set DI="PRODCTL."_DI
		if TRB do Runtime.setErrMSG("PRODCTL",2696,"DI") if ER quit 
		do Runtime.setErrMSG("PRODCTL",2695,"DI") if ER quit
		}
	quit 
DRCHECK(X,DI,TRB)
	
	/*
	   This check is done on transaction codes that are increase
	   transactions to ensure the combination of the debit credit indicator
	   and the value of TRB increase the balance of the account.
	*/
	quit:X="" 
	if X?.E1L.E do Runtime.setErrMSG("PRODCTL",1663) if ER quit 
	new X1
	// Debit/credit indicator
	set X1=Db.getOneRow("DC","TRN","X")
	if X1="" do Runtime.setErrMSG("PRODCTL",1498,"DI") if ER quit
	set DC=$$DC^UTRB(X1,TRB)
	if 'DC do { quit:ER 
		set DI="PRODCTL."_DI
		if TRB do Runtime.setErrMSG("PRODCTL",2696,"DI") if ER quit
		do Runtime.setErrMSG("PRODCTL",2695,"DI") if ER quit
		}
	quit 
CRCHECK(X,DI,TRB)

	/*
	  This check is done on transaction codes that are decrease
	  transactions to ensure the combination of the debit credit indicator
	  and the value of TRB decrease the balance of the account.
	*/
	quit:X="" 
	if X?.E1L.E do Runtime.setErrMSG("PRODCTL",1663) if ER quit
	
	new X1
	// Debit/credit indicator
	set X1=Db.getOneRow("DC","TRN","X")
	if X1="" do Runtime.setErrMSG("PRODCTL",1498,"DI") if ER quit
	set DC=$$DC^UTRB(X1,TRB) quit:ER 
	if DC do { quit:ER 
		set DI="PRODCTL."_DI
		if TRB do Runtime.setErrMSG("PRODCTL",2696,"DI") if ER quit
		
		else  do Runtime.setErrMSG("PRODCTL",2695,"DI") if ER quit
		}
	quit 
			

vau1 // Trigger AFTER_UPDATE - General After update trigger

	type public RecordPRODCTL prodctl
	/*
	  ------------ Revision History ------------------------------------------------

	11/07/00 - HUNDERMARKD - 41847
		   In section LNETVER removed reference to CRTREA as it has
		   been obsoleted.

	08/11/00 - Spier - 40349
																			Changed calls to DRTCVER,CRTCVER,CRCHECK and DRCHECK
																			to pass TRB rather then the entire object. This is
																			a temporary delay to a problem with the PSL compiler
																			that occurs when too many calls into a single label
																			pass the object.
	
	09/27/99 - MOTENJ - 31126
	  	Converted to PSL.         	

	*/
			
	new TRB
	set TRB=prodctl.trb
	if prodctl.cls="D" do DEPETVER(.prodctl)
	if prodctl.cls="L" do LNETVER(.prodctl)
	quit 
	
DEPETVER(RecordPRODCTL prodctl) // Deposit tran code validation
	
	// tran codes are verified that credits are for credits and debits for debits
	
	new TRB
	set TRB=prodctl.trb
	if (prodctl.dradpr.oldVal'=prodctl.dradpr) do DRTCVER(prodctl.dradpr,"DRADPR",TRB) if ER quit 
	if (prodctl.cradpr.oldVal'=prodctl.cradpr) do CRTCVER(prodctl.cradpr,"CRADPR",TRB) if ER quit 
	if (prodctl.dradin.oldVal'=prodctl.dradin) do DRTCVER(prodctl.dradin,"DRADIN",TRB) if ER quit 
	if (prodctl.cradin.oldVal'=prodctl.cradin) do CRTCVER(prodctl.cradin,"CRADIN",TRB) if ER quit 
	if (prodctl.dradna.oldVal'=prodctl.dradna) do DRTCVER(prodctl.dradna,"DRADNA",TRB) if ER quit 
	if (prodctl.cradna.oldVal'=prodctl.cradna) do CRTCVER(prodctl.cradna,"CRADNA",TRB) if ER quit 
	if (prodctl.drnegacrua.oldVal'=prodctl.drnegacrua) do DRTCVER(prodctl.drnegacrua,"DRNEGACRUA",TRB) if ER quit 
	if (prodctl.crnegacrua.oldVal'=prodctl.crnegacrua) do CRTCVER(prodctl.crnegacrua,"CRNEGACRUA",TRB) if ER quit 
	if (prodctl.dradbw.oldVal'=prodctl.dradbw) do DRTCVER(prodctl.dradbw,"DRADBW",TRB) if ER quit 
	if (prodctl.cradbw.oldVal'=prodctl.cradbw) do CRTCVER(prodctl.cradbw,"CRADBW",TRB) if ER quit 
	if (prodctl.cradpe.oldVal'=prodctl.cradpe) do CRTCVER(prodctl.cradpe,"CRADPE",TRB) if ER quit 
	if (prodctl.dradie.oldVal'=prodctl.dradie) do DRTCVER(prodctl.dradie,"DRADIE",TRB) if ER quit 
	if (prodctl.cradie.oldVal'=prodctl.cradie) do CRTCVER(prodctl.cradie,"CRADIE",TRB) if ER quit 
	if (prodctl.dradres.oldVal'=prodctl.dradres) do DRTCVER(prodctl.dradres,"DRADRES",TRB) if ER quit 
	if (prodctl.cradres.oldVal'=prodctl.cradres) do CRTCVER(prodctl.cradres,"CRADRES",TRB) if ER quit 
	if (prodctl.drtrgp.oldVal'=prodctl.drtrgp) do DRTCVER(prodctl.drtrgp,"DRTRGP",TRB) if ER quit 
	if (prodctl.crtrgp.oldVal'=prodctl.crtrgp) do CRTCVER(prodctl.crtrgp,"CRTRGP",TRB) if ER quit 
	if (prodctl.drtrin.oldVal'=prodctl.drtrin) do DRTCVER(prodctl.drtrin,"DRTRIN",TRB) if ER quit 
	if (prodctl.crtrin.oldVal'=prodctl.crtrin) do CRTCVER(prodctl.crtrin,"CRTRIN",TRB) if ER quit 
	if (prodctl.drtrip.oldVal'=prodctl.drtrip) do DRTCVER(prodctl.drtrip,"DRTRIP",TRB) if ER quit 
	if (prodctl.dradni.oldVal'=prodctl.dradni) do DRTCVER(prodctl.dradni,"DRADNI",TRB) if ER quit 
	if (prodctl.cradni.oldVal'=prodctl.cradni) do CRTCVER(prodctl.cradni,"CRADNI",TRB) if ER quit 
	if (prodctl.drtrit.oldVal'=prodctl.drtrit) do DRTCVER(prodctl.drtrit,"DRTRIT",TRB) if ER quit 
	if (prodctl.crtrit.oldVal'=prodctl.crtrit) do CRTCVER(prodctl.crtrit,"CRTRIT",TRB) if ER quit 
	if (prodctl.drtrot.oldVal'=prodctl.drtrot) do DRTCVER(prodctl.drtrot,"DRTROT",TRB) if ER quit 
	if (prodctl.crtrot.oldVal'=prodctl.crtrot) do CRTCVER(prodctl.crtrot,"CRTROT",TRB) if ER quit 
	if (prodctl.drtrsc.oldVal'=prodctl.drtrsc) do DRTCVER(prodctl.drtrsc,"DRTRSC",TRB) if ER quit 
	if (prodctl.crtrsc.oldVal'=prodctl.crtrsc) do CRTCVER(prodctl.crtrsc,"CRTRSC",TRB) if ER quit 
	if (prodctl.drtrrc.oldVal'=prodctl.drtrrc) do DRTCVER(prodctl.drtrrc,"DRTRRC",TRB) if ER quit 
	if (prodctl.crtrpf.oldVal'=prodctl.crtrpf) do CRTCVER(prodctl.crtrpf,"CRTRPF",TRB) if ER quit 
	if (prodctl.odtc1.oldVal'=prodctl.odtc1) do CRTCVER(prodctl.odtc1,"ODTC1",TRB) 	if ER quit 
	if (prodctl.odtc2.oldVal'=prodctl.odtc2) do CRTCVER(prodctl.odtc2,"ODTC2",TRB) 	if ER quit 
	if (prodctl.drtrfr.oldVal'=prodctl.drtrfr) do DRTCVER(prodctl.drtrfr,"DRTRFR",TRB) if ER quit 
	if (prodctl.drtrts.oldVal'=prodctl.drtrts) do DRTCVER(prodctl.drtrts,"DRTRTS",TRB) if ER quit 
	if (prodctl.crtrts.oldVal'=prodctl.crtrts) do CRTCVER(prodctl.crtrts,"CRTRTS",TRB) if ER quit 
	if (prodctl.drtros.oldVal'=prodctl.drtros) do DRTCVER(prodctl.drtros,"DRTROS",TRB) if ER quit 
	if (prodctl.drirad.oldVal'=prodctl.drirad) do DRTCVER(prodctl.drirad,"DRIRAD",TRB) if ER quit 
	if (prodctl.drtrci.oldVal'=prodctl.drtrci) do DRTCVER(prodctl.drtrci,"DRTRCI",TRB) if ER quit 
	if (prodctl.crtrci.oldVal'=prodctl.crtrci) do CRTCVER(prodctl.crtrci,"CRTRCI",TRB) if ER quit 
	if (prodctl.drtrcs.oldVal'=prodctl.drtrcs) do DRTCVER(prodctl.drtrcs,"DRTRCS",TRB) if ER quit 
	if (prodctl.crtrcs.oldVal'=prodctl.crtrcs) do CRTCVER(prodctl.crtrcs,"CRTRCS",TRB) if ER quit 
	quit 
	
LNETVER(RecordPRODCTL	prodctl) // Loan tran code validation
	// tran codes are verified that credits are for credits and debits for debits
	new TRB
	set TRB=prodctl.trb
	
	if (prodctl.cradin.oldVal'=prodctl.cradin) do CRCHECK(prodctl.cradin,"CRADIN",TRB) if ER quit 
	if (prodctl.cradpe.oldVal'=prodctl.cradpe) do CRCHECK(prodctl.cradpe,"CRADPE",TRB) if ER quit 
	if (prodctl.crtacn1.oldVal'=prodctl.crtacn1) do CRCHECK(prodctl.crtacn1,"CRTACN1",TRB) if ER quit 
	if (prodctl.crtacn2.oldVal'=prodctl.crtacn2) do CRCHECK(prodctl.crtacn2,"CRTACN2",TRB) if ER quit 
	if (prodctl.crtcpc.oldVal'=prodctl.crtcpc) do CRCHECK(prodctl.crtcpc,"CRTCPC",TRB) if ER quit 
	if (prodctl.crtlcr.oldVal'=prodctl.crtlcr) do CRCHECK(prodctl.crtlcr,"CRTLCR",TRB) if ER quit 
	if (prodctl.crtrcd.oldVal'=prodctl.crtrcd) do CRCHECK(prodctl.crtrcd,"CRTRCD",TRB) if ER quit 
	if (prodctl.crtrci.oldVal'=prodctl.crtrci) do CRCHECK(prodctl.crtrci,"CRTRCI",TRB) if ER quit 
	if (prodctl.crtrct.oldVal'=prodctl.crtrct) do CRCHECK(prodctl.crtrct,"CRTRCT",TRB) if ER quit 
	if (prodctl.crtrdc.oldVal'=prodctl.crtrdc) do CRCHECK(prodctl.crtrdc,"CRTRDC",TRB) if ER quit 
	if (prodctl.crtraf.oldVal'=prodctl.crtraf) do CRCHECK(prodctl.crtraf,"CRTRAF",TRB) if ER quit 
	if (prodctl.crtrcu.oldVal'=prodctl.crtrcu) do CRCHECK(prodctl.crtrcu,"CRTRCU",TRB) if ER quit 
	if (prodctl.crtrdf.oldVal'=prodctl.crtrdf) do CRCHECK(prodctl.crtrdf,"CRTRDF",TRB) if ER quit 
	if (prodctl.crtrdm.oldVal'=prodctl.crtrdm) do CRCHECK(prodctl.crtrdm,"CRTRDM",TRB) if ER quit 
	if (prodctl.crtrgp.oldVal'=prodctl.crtrgp) do CRCHECK(prodctl.crtrgp,"CRTRGP",TRB) if ER quit 
	if (prodctl.crtrcf.oldVal'=prodctl.crtrcf) do CRCHECK(prodctl.crtrcf,"CRTRCF",TRB) if ER quit 
	if (prodctl.crtrcp.oldVal'=prodctl.crtrcp) do CRCHECK(prodctl.crtrcp,"CRTRCP",TRB) if ER quit 
	if (prodctl.crtrcv.oldVal'=prodctl.crtrcv) do CRCHECK(prodctl.crtrcv,"CRTRCV",TRB) if ER quit 
	if (prodctl.crtrdi.oldVal'=prodctl.crtrdi) do CRCHECK(prodctl.crtrdi,"CRTRDI",TRB)  if ER quit 
	if (prodctl.crtrdfia.oldVal'=prodctl.crtrdfia) do CRCHECK(prodctl.crtrdfia,"CRTRDFIA",TRB) if ER quit 
	if (prodctl.crtria.oldVal'=prodctl.crtria) do CRCHECK(prodctl.crtria,"CRTRIA",TRB) if ER quit 
	if (prodctl.crtric.oldVal'=prodctl.crtric) do CRCHECK(prodctl.crtric,"CRTRIC",TRB) if ER quit 
	if (prodctl.crtrin.oldVal'=prodctl.crtrin) do CRCHECK(prodctl.crtrin,"CRTRIN",TRB) if ER quit 
	if (prodctl.crtrei.oldVal'=prodctl.crtrei) do CRCHECK(prodctl.crtrei,"CRTREI",TRB) if ER quit 
	if (prodctl.crtrep.oldVal'=prodctl.crtrep) do CRCHECK(prodctl.crtrep,"CRTREP",TRB) if ER quit 
	if (prodctl.crtreuec.oldVal'=prodctl.crtreuec) do CRCHECK(prodctl.crtreuec,"CRTREUEC",TRB) if ER quit 
	if (prodctl.crtreulc.oldVal'=prodctl.crtreulc) do CRCHECK(prodctl.crtreulc,"CRTREULC",TRB) if ER quit 
	if (prodctl.crtrmfr.oldVal'=prodctl.crtrmfr) do CRCHECK(prodctl.crtrmfr,"CRTRMFR",TRB) if ER quit 
	if (prodctl.crtrmi.oldVal'=prodctl.crtrmi) do CRCHECK(prodctl.crtrmi,"CRTRMI",TRB) if ER quit 
	if (prodctl.crtrmp.oldVal'=prodctl.crtrmp) do CRCHECK(prodctl.crtrmp,"CRTRMP",TRB) if ER quit 
	if (prodctl.crtrmu.oldVal'=prodctl.crtrmu) do CRCHECK(prodctl.crtrmu,"CRTRMU",TRB) if ER quit 
	if (prodctl.crtrna.oldVal'=prodctl.crtrna) do CRCHECK(prodctl.crtrna,"CRTRNA",TRB) if ER quit 
	if (prodctl.crtros.oldVal'=prodctl.crtros) do CRCHECK(prodctl.crtros,"CRTROS",TRB) if ER quit 
	if (prodctl.crtrri.oldVal'=prodctl.crtrri) do CRCHECK(prodctl.crtrri,"CRTRRI",TRB) if ER quit 
	if (prodctl.crtrpe.oldVal'=prodctl.crtrpe) do CRCHECK(prodctl.crtrpe,"CRTRPE",TRB) if ER quit 
	if (prodctl.crtrpp.oldVal'=prodctl.crtrpp) do CRCHECK(prodctl.crtrpp,"CRTRPP",TRB) if ER quit 
	if (prodctl.crtrpv.oldVal'=prodctl.crtrpv) do CRCHECK(prodctl.crtrpv,"CRTRPV",TRB) if ER quit 
	if (prodctl.crtrpr.oldVal'=prodctl.crtrpr) do CRCHECK(prodctl.crtrpr,"CRTRPR",TRB) if ER quit 
	if (prodctl.crtrsp.oldVal'=prodctl.crtrsp) do CRCHECK(prodctl.crtrsp,"CRTRSP",TRB) if ER quit 
	if (prodctl.crtrst.oldVal'=prodctl.crtrst) do CRCHECK(prodctl.crtrst,"CRTRST",TRB) if ER quit 
	if (prodctl.crtrts.oldVal'=prodctl.crtrts) do CRCHECK(prodctl.crtrts,"CRTRTS",TRB) if ER quit 
	if (prodctl.crtprec.oldVal'=prodctl.crtprec) do CRCHECK(prodctl.crtprec,"CRTPREC",TRB) if ER quit 
	if (prodctl.crtrppa.oldVal'=prodctl.crtrppa) do CRCHECK(prodctl.crtrppa,"CRTRPPA",TRB) if ER quit 
	if (prodctl.crtvrt.oldVal'=prodctl.crtvrt) do CRCHECK(prodctl.crtvrt,"CRTVRT",TRB) if ER quit 
	
	if (prodctl.dradin.oldVal'=prodctl.dradin) do DRCHECK(prodctl.dradin,"DRADIN",TRB) if ER quit 
	if (prodctl.drtacn1.oldVal'=prodctl.drtacn1) do DRCHECK(prodctl.drtacn1,"DRTACN1",TRB) if ER quit 
	if (prodctl.drtacn2.oldVal'=prodctl.drtacn2) do DRCHECK(prodctl.drtacn2,"DRTACN2",TRB) if ER quit 
	if (prodctl.drters.oldVal'=prodctl.drters) do DRCHECK(prodctl.drters,"DRTERS",TRB) if ER quit 
	if (prodctl.drtraf.oldVal'=prodctl.drtraf) do DRCHECK(prodctl.drtraf,"DRTRAF",TRB) if ER quit 
	if (prodctl.drtrcd.oldVal'=prodctl.drtrcd) do DRCHECK(prodctl.drtrcd,"DRTRCD",TRB) if ER quit 
	if (prodctl.drtrci.oldVal'=prodctl.drtrci) do DRCHECK(prodctl.drtrci,"DRTRCI",TRB) if ER quit 
	if (prodctl.drtrcf.oldVal'=prodctl.drtrcf) do DRCHECK(prodctl.drtrcf,"DRTRCF",TRB) if ER quit 
	if (prodctl.drtrcp.oldVal'=prodctl.drtrcp) do DRCHECK(prodctl.drtrcp,"DRTRCP",TRB) if ER quit 
	if (prodctl.drtrct.oldVal'=prodctl.drtrct) do DRCHECK(prodctl.drtrct,"DRTRCT",TRB) if ER quit 
	if (prodctl.drtrcu.oldVal'=prodctl.drtrcu) do DRCHECK(prodctl.drtrcu,"DRTRCU",TRB) if ER quit 
	if (prodctl.drtrcv.oldVal'=prodctl.drtrcv) do DRCHECK(prodctl.drtrcv,"DRTRCV",TRB) if ER quit 
	if (prodctl.drtrdc.oldVal'=prodctl.drtrdc) do DRCHECK(prodctl.drtrdc,"DRTRDC",TRB) if ER quit 
	if (prodctl.drtrdf.oldVal'=prodctl.drtrdf) do DRCHECK(prodctl.drtrdf,"DRTRDF",TRB) if ER quit 
	if (prodctl.drtrdfda.oldVal'=prodctl.drtrdfda) do DRCHECK(prodctl.drtrdfda,"DRTRDFDA",TRB) if ER quit 
	if (prodctl.drtrdi.oldVal'=prodctl.drtrdi) do DRCHECK(prodctl.drtrdi,"DRTRDI",TRB) if ER quit 
	if (prodctl.drtrdm.oldVal'=prodctl.drtrdm) do DRCHECK(prodctl.drtrdm,"DRTRDM",TRB) if ER quit 
	if (prodctl.drtrei.oldVal'=prodctl.drtrei) do DRCHECK(prodctl.drtrei,"DRTREI",TRB) if ER quit 
	if (prodctl.drtreuld.oldVal'=prodctl.drtreuld) do DRCHECK(prodctl.drtreuld,"DRTREULD",TRB) if ER quit 
	if (prodctl.drtreued.oldVal'=prodctl.drtreued) do DRCHECK(prodctl.drtreued,"DRTREUED",TRB) if ER quit 
	if (prodctl.drtrfr.oldVal'=prodctl.drtrfr) do DRCHECK(prodctl.drtrfr,"DRTRFR",TRB) if ER quit 
	if (prodctl.drtrgp.oldVal'=prodctl.drtrgp) do DRCHECK(prodctl.drtrgp,"DRTRGP",TRB) if ER quit 
	if (prodctl.drtrin.oldVal'=prodctl.drtrin) do DRCHECK(prodctl.drtrin,"DRTRIN",TRB) if ER quit 
	if (prodctl.drtrmfi.oldVal'=prodctl.drtrmfi) do DRCHECK(prodctl.drtrmfi,"DRTRMFI",TRB) if ER quit 
	if (prodctl.drtrmi.oldVal'=prodctl.drtrmi) do DRCHECK(prodctl.drtrmi,"DRTRMI",TRB) if ER quit 
	if (prodctl.drtrmu.oldVal'=prodctl.drtrmu) do DRCHECK(prodctl.drtrmu,"DRTRMU",TRB) if ER quit 
	if (prodctl.drtrna.oldVal'=prodctl.drtrna) do DRCHECK(prodctl.drtrna,"DRTRNA",TRB) if ER quit 
	if (prodctl.drtrri.oldVal'=prodctl.drtrri) do DRCHECK(prodctl.drtrri,"DRTRRI",TRB) if ER quit 
	if (prodctl.drtrpe.oldVal'=prodctl.drtrpe) do DRCHECK(prodctl.drtrpe,"DRTRPE",TRB) if ER quit 
	if (prodctl.drtrpr.oldVal'=prodctl.drtrpr) do DRCHECK(prodctl.drtrpr,"DRTRPR",TRB) if ER quit 
	if (prodctl.drtrppp.oldVal'=prodctl.drtrppp) do DRCHECK(prodctl.drtrppp,"DRTRPPP",TRB) if ER quit 
	if (prodctl.drtrpv.oldVal'=prodctl.drtrpv) do DRCHECK(prodctl.drtrpv,"DRTRPV",TRB) if ER quit 
	if (prodctl.drtrst.oldVal'=prodctl.drtrst) do DRCHECK(prodctl.drtrst,"DRTRST",TRB) if ER quit 
	if (prodctl.drtrts.oldVal'=prodctl.drtrts) do DRCHECK(prodctl.drtrts,"DRTRTS",TRB) if ER quit 
	if (prodctl.drtprec.oldVal'=prodctl.drtprec) do DRCHECK(prodctl.drtprec,"DRTPREC",TRB) if ER quit 
	if (prodctl.patglo.oldVal'=prodctl.patglo) do DRCHECK(prodctl.patglo,"PATGLO",TRB) if ER quit 
	
	quit 

vau2 // Trigger AU_ODSITR - After Update for ODSITR

	type public RecordPRODCTL prodctl

	/* ---- Revision History ------------------------------------------------

	  02/24/05 - ARPAVC 13861
		     Modified check on cls to get INCDR from correct table
		     
	  ------------------------------------------------------------------------

	*/
	
	// INCDR MUST BE A FACTOR OF ODSITR

	new ODSITR,XTYPE,INCDR
	set XTYPE=prodctl.type
	set INCDR=""
	if prodctl.cls="D" set INCDR=Db.getOneRow("INCDR","PRODDFTD","XTYPE")
	if prodctl.cls="L" set INCDR=Db.getOneRow("INCDR","PRODDFTL","XTYPE")
	set ODSITR=prodctl.odsitr
	// Incremental debit amount must be a factor of the incremental transfer amount of $<<$J(ODSITR,0,2)>> for type <<TYPE>>.
	if INCDR,ODSITR,ODSITR#INCDR do Runtime.setErrSTBLER("PRODCTL","ODSITR") if ER quit 
	quit 

vbd1 // Trigger BEFORE_DELETE - Before deleting a product type

	type public RecordPRODCTL prodctl
	/*
	  ------------------- Revision History -----------------------------------------------------------------
	
	
	   01/13/99 - SPIER - 31401
	          Fixed error on CLS and added test of PRODDFT tables as
	          those tables must be deleted first.
	
	*/
	
	if prodctl.cls="*",Db.isDefined("PRODDFTC","prodctl.type") do Runtime.setErrMSG("PRODCTL",3780) if ER quit 
	if prodctl.cls="L",Db.isDefined("PRODDFTL","prodctl.type") do Runtime.setErrMSG("PRODCTL",3780) if ER quit 
	if prodctl.cls="D",Db.isDefined("PRODDFTD","prodctl.type") do Runtime.setErrMSG("PRODCTL",3780) if ER quit 
	quit
	

vbi1 // Trigger BEFORE_INSERT - Default logic

	type public RecordPRODCTL prodctl
	/*
	  -------------------------- Revision History ------------------------------------------------
	
	   12/01/99 - GRAY - 32507
		      Modified to no longer use references to native screen
		      names as a part of the Eliminate Teller/Branch Character
		      Interface project.
	
	   01/25/99 - Terrie Dougherty - 31345
	        Modified call to LINSERT to check on PRODCTL.CLS="L" rather than PRODCTL.CLS="D"
	
	*/

	if prodctl.type="" quit 
	
	// Default screen name
	
	if prodctl.grp="" quit 
	/* 12/01/99 SPG
	if prodctl.nscr="" do {
		if prodctl.grp="SAV" set prodctl.nscr="DEPSAV0"       // SAV screen
		if prodctl.grp="DDA" set prodctl.nscr="DEPDDA0"       // DDA screen
		if prodctl.grp="CD" set prodctl.nscr="DEPCD0"         // CD screen
		if prodctl.type=1 set prodctl.nscr="CIFCOM0"          // CIF commercial
		if prodctl.grp="*" set prodctl.nscr="CIFPER0"         // CIF personal
		quit 
		}
	*/
	if prodctl.cls="D" do DINSERT(.prodctl)
	if prodctl.cls="L" do LINSERT(.prodctl)
	quit 
	
DINSERT(RecordPRODCTL prodctl) // Deposit product defaults

	set CKINT=prodctl.ckint
	if CKINT="",prodctl.aeci="" set prodctl.aeci=0
	else  if prodctl.aeci="" set prodctl.aeci=Db.getOneRow("AEC","UTBLCHKS","CKINT")
	set CKMDT=prodctl.ckmdt
	if CKMDT="",prodctl.aec="" set prodctl.aec=0
	else  if prodctl.aec="" set prodctl.aec=Db.getOneRow("AEC","UTBLCHKS","CKMDT")
	if prodctl.rclstype="" set prodctl.rclsbal=""
	quit 

LINSERT(RecordPRODCTL	prodctl) // Loan product defaults
	
	if 'prodctl.extopt set prodctl.extpct=""
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPRODCTL prodctl

	if (%O = 2) do vload

	if vobj(prodctl,0).exists() do {

		if prodctl.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
		if prodctl.pmcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("PMCRCD", vRM) quit
	}

	if vobj(prodctl,2).exists() do {

		if prodctl.aiscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("AISCR", vRM) quit
		if prodctl.amscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("AMSCR", vRM) quit
		if prodctl.ascr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ASCR", vRM) quit
		if prodctl.cscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CSCR", vRM) quit
		if prodctl.hrep.length()>12 set vRM = $$^MSG(1076,12) do vdderr("HREP", vRM) quit
		if prodctl.modscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MODSCR", vRM) quit
		if prodctl.nscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("NSCR", vRM) quit
	}

	if vobj(prodctl,3).exists() do {

		if prodctl.mscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR", vRM) quit
		if prodctl.mscr10.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR10", vRM) quit
		if prodctl.mscr11.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR11", vRM) quit
		if prodctl.mscr12.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR12", vRM) quit
		if prodctl.mscr13.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR13", vRM) quit
		if prodctl.mscr14.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR14", vRM) quit
		if prodctl.mscr15.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR15", vRM) quit
		if prodctl.mscr16.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR16", vRM) quit
		if prodctl.mscr17.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR17", vRM) quit
		if prodctl.mscr18.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR18", vRM) quit
		if prodctl.mscr19.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR19", vRM) quit
		if prodctl.mscr2.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR2", vRM) quit
		if prodctl.mscr20.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR20", vRM) quit
		if prodctl.mscr3.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR3", vRM) quit
		if prodctl.mscr4.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR4", vRM) quit
		if prodctl.mscr5.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR5", vRM) quit
		if prodctl.mscr6.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR6", vRM) quit
		if prodctl.mscr7.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR7", vRM) quit
		if prodctl.mscr8.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR8", vRM) quit
		if prodctl.mscr9.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCR9", vRM) quit
		if prodctl.mscrefd.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCREFD", vRM) quit
	}

	if vobj(prodctl,4).exists() do {

		if prodctl.iscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR", vRM) quit
		if prodctl.iscr10.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR10", vRM) quit
		if prodctl.iscr11.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR11", vRM) quit
		if prodctl.iscr12.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR12", vRM) quit
		if prodctl.iscr13.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR13", vRM) quit
		if prodctl.iscr14.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR14", vRM) quit
		if prodctl.iscr15.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR15", vRM) quit
		if prodctl.iscr16.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR16", vRM) quit
		if prodctl.iscr17.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR17", vRM) quit
		if prodctl.iscr18.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR18", vRM) quit
		if prodctl.iscr19.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR19", vRM) quit
		if prodctl.iscr2.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR2", vRM) quit
		if prodctl.iscr20.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR20", vRM) quit
		if prodctl.iscr3.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR3", vRM) quit
		if prodctl.iscr4.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR4", vRM) quit
		if prodctl.iscr5.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR5", vRM) quit
		if prodctl.iscr6.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR6", vRM) quit
		if prodctl.iscr7.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR7", vRM) quit
		if prodctl.iscr8.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR8", vRM) quit
		if prodctl.iscr9.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ISCR9", vRM) quit
	}

	if vobj(prodctl,5).exists() do {

		if prodctl.arscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ARSCR", vRM) quit
		if prodctl.ccscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CCSCR", vRM) quit
		if prodctl.fsmscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FSMSCR", vRM) quit
		if prodctl.mscrplr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSCRPLR", vRM) quit
		if prodctl.nascr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("NASCR", vRM) quit
		if prodctl.poscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("POSCR", vRM) quit
	}

	if vobj(prodctl,6).exists() do {

		if prodctl.tscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TSCR", vRM) quit
	}

	if vobj(prodctl,7).exists() do {

		if prodctl.delscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("DELSCR", vRM) quit
	}

	if vobj(prodctl,9).exists() do {

		if prodctl.dscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("DSCR", vRM) quit
		if prodctl.dscr1.length()>12 set vRM = $$^MSG(1076,12) do vdderr("DSCR1", vRM) quit
	}

	if vobj(prodctl,10).exists() do {

		if '("01"[prodctl.AEC) set vRM=$$^MSG(742,"L") do vdderr("AEC", vRM) quit
		if '("01"[prodctl.AECI) set vRM=$$^MSG(742,"L") do vdderr("AECI", vRM) quit
		if '("01"[prodctl.CFGEN) set vRM=$$^MSG(742,"L") do vdderr("CFGEN", vRM) quit
		set X = prodctl.cfmax if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CFMAX", vRM) quit
		set X = prodctl.cfpdys if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CFPDYS", vRM) quit
		set X = prodctl.ckint if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CKINT", vRM) quit
		set X = prodctl.ckmdt if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CKMDT", vRM) quit
		set X = prodctl.clohist if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CLOHIST", vRM) quit
		set X = prodctl.dtbeg if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTBEG", vRM) quit
		set X = prodctl.endate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ENDATE", vRM) quit
		set X = prodctl.eracr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.ERACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.eradr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.ERADR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if prodctl.fid.length()>15 set vRM = $$^MSG(1076,15) do vdderr("FID", vRM) quit
		set X = prodctl.lnbalpc1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LNBALPC1", vRM) quit
		set X = prodctl.lnbalpc2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LNBALPC2", vRM) quit
		set X = prodctl.maxfnd if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.MAXFND"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.minhist if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MINHIST", vRM) quit
	}

	if vobj(prodctl,12).exists() do {

		set X = prodctl.draai if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRAAI", vRM) quit
		set X = prodctl.dradbw if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADBW", vRM) quit
		set X = prodctl.drades if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADES", vRM) quit
		set X = prodctl.dradie if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADIE", vRM) quit
		set X = prodctl.dradin if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADIN", vRM) quit
		set X = prodctl.dradmi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADMI", vRM) quit
		set X = prodctl.dradna if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADNA", vRM) quit
		set X = prodctl.dradni if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADNI", vRM) quit
		set X = prodctl.dradpe if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADPE", vRM) quit
		set X = prodctl.dradpr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADPR", vRM) quit
		set X = prodctl.dradres if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADRES", vRM) quit
		set X = prodctl.drnegacrua if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRNEGACRUA", vRM) quit
		set X = prodctl.drpai if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRPAI", vRM) quit
		set X = prodctl.drtrena if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRENA", vRM) quit
		set X = prodctl.drtrenac if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRENAC", vRM) quit
		set X = prodctl.drtrenau if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRENAU", vRM) quit
		set X = prodctl.drtrenp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRENP", vRM) quit
		set X = prodctl.drtrenpa if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRENPA", vRM) quit
		set X = prodctl.drtrenpu if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRENPU", vRM) quit
		set X = prodctl.drtrepa if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTREPA", vRM) quit
	}

	if vobj(prodctl,13).exists() do {

		set X = prodctl.craai if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRAAI", vRM) quit
		set X = prodctl.cradbw if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADBW", vRM) quit
		set X = prodctl.crades if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADES", vRM) quit
		set X = prodctl.cradie if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADIE", vRM) quit
		set X = prodctl.cradin if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADIN", vRM) quit
		set X = prodctl.cradmi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADMI", vRM) quit
		set X = prodctl.cradna if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADNA", vRM) quit
		set X = prodctl.cradni if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADNI", vRM) quit
		set X = prodctl.cradpac if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADPAC", vRM) quit
		set X = prodctl.cradpe if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADPE", vRM) quit
		set X = prodctl.cradpr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADPR", vRM) quit
		set X = prodctl.cradres if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADRES", vRM) quit
		set X = prodctl.crnegacrua if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRNEGACRUA", vRM) quit
		set X = prodctl.crpai if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRPAI", vRM) quit
		set X = prodctl.crtrena if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRENA", vRM) quit
		set X = prodctl.crtrenac if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRENAC", vRM) quit
		set X = prodctl.crtrenau if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRENAU", vRM) quit
		set X = prodctl.crtrenpa if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRENPA", vRM) quit
		set X = prodctl.crtrenpu if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRENPU", vRM) quit
		set X = prodctl.crtrepa if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTREPA", vRM) quit
	}

	if vobj(prodctl,14).exists() do {

		set X = prodctl.crtus if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTUS", vRM) quit
		set X = prodctl.drbtgp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRBTGP", vRM) quit
		set X = prodctl.drcinpi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRCINPI", vRM) quit
		set X = prodctl.drcinpni if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRCINPNI", vRM) quit
		set X = prodctl.drcipi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRCIPI", vRM) quit
		set X = prodctl.drcipni if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRCIPNI", vRM) quit
		set X = prodctl.drirad if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRIRAD", vRM) quit
		set X = prodctl.drnmpseg if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRNMPSEG", vRM) quit
		set X = prodctl.drodpet if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRODPET", vRM) quit
		set X = prodctl.drtacn1 if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTACN1", vRM) quit
		set X = prodctl.drtacn2 if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTACN2", vRM) quit
		set X = prodctl.drters if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTERS", vRM) quit
		set X = prodctl.drtprec if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTPREC", vRM) quit
		set X = prodctl.drtraf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRAF", vRM) quit
		set X = prodctl.drtrcd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCD", vRM) quit
		set X = prodctl.drtrcf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCF", vRM) quit
		set X = prodctl.drtrci if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCI", vRM) quit
		set X = prodctl.drtrcs if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCS", vRM) quit
		set X = prodctl.drtrcv if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCV", vRM) quit
		set X = prodctl.drtrdc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRDC", vRM) quit
		set X = prodctl.drtrdfda if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRDFDA", vRM) quit
		set X = prodctl.drtrdi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRDI", vRM) quit
		set X = prodctl.drtrdm if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRDM", vRM) quit
		set X = prodctl.drtrei if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTREI", vRM) quit
		set X = prodctl.drtreued if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTREUED", vRM) quit
		set X = prodctl.drtreuld if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTREULD", vRM) quit
		set X = prodctl.drtrfr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRFR", vRM) quit
		set X = prodctl.drtrgp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRGP", vRM) quit
		set X = prodctl.drtrgpseg if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRGPSEG", vRM) quit
		set X = prodctl.drtrin if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRIN", vRM) quit
		set X = prodctl.drtrip if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRIP", vRM) quit
		set X = prodctl.drtrir if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRIR", vRM) quit
		set X = prodctl.drtrit if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRIT", vRM) quit
		set X = prodctl.drtrmi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRMI", vRM) quit
		set X = prodctl.drtrna if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRNA", vRM) quit
		set X = prodctl.drtros if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTROS", vRM) quit
		set X = prodctl.drtrot if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTROT", vRM) quit
		set X = prodctl.drtrpe if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRPE", vRM) quit
		set X = prodctl.drtrppp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRPPP", vRM) quit
		set X = prodctl.drtrrc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRRC", vRM) quit
		set X = prodctl.drtrri if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRRI", vRM) quit
		set X = prodctl.drtrrl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRRL", vRM) quit
		set X = prodctl.drtrsc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRSC", vRM) quit
		set X = prodctl.drtrts if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRTS", vRM) quit
	}

	if vobj(prodctl,15).exists() do {

		set X = prodctl.crbtgp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRBTGP", vRM) quit
		set X = prodctl.crtacn1 if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTACN1", vRM) quit
		set X = prodctl.crtacn2 if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTACN2", vRM) quit
		set X = prodctl.crtlcr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTLCR", vRM) quit
		set X = prodctl.crtprec if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTPREC", vRM) quit
		set X = prodctl.crtraf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRAF", vRM) quit
		set X = prodctl.crtrcd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCD", vRM) quit
		set X = prodctl.crtrcf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCF", vRM) quit
		set X = prodctl.crtrci if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCI", vRM) quit
		set X = prodctl.crtrcp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCP", vRM) quit
		set X = prodctl.crtrcs if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCS", vRM) quit
		set X = prodctl.crtrcv if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCV", vRM) quit
		set X = prodctl.crtrdc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRDC", vRM) quit
		set X = prodctl.crtrdfia if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRDFIA", vRM) quit
		set X = prodctl.crtrdi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRDI", vRM) quit
		set X = prodctl.crtrdm if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRDM", vRM) quit
		set X = prodctl.crtrea if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTREA", vRM) quit
		set X = prodctl.crtrei if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTREI", vRM) quit
		set X = prodctl.crtreuec if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTREUEC", vRM) quit
		set X = prodctl.crtreulc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTREULC", vRM) quit
		set X = prodctl.crtrfr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRFR", vRM) quit
		set X = prodctl.crtrgp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRGP", vRM) quit
		set X = prodctl.crtria if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRIA", vRM) quit
		set X = prodctl.crtric if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRIC", vRM) quit
		set X = prodctl.crtrin if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRIN", vRM) quit
		set X = prodctl.crtrir if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRIR", vRM) quit
		set X = prodctl.crtrit if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRIT", vRM) quit
		set X = prodctl.crtrls if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRLS", vRM) quit
		set X = prodctl.crtrmi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRMI", vRM) quit
		set X = prodctl.crtrmp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRMP", vRM) quit
		set X = prodctl.crtrmu if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRMU", vRM) quit
		set X = prodctl.crtrna if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRNA", vRM) quit
		set X = prodctl.crtros if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTROS", vRM) quit
		set X = prodctl.crtrot if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTROT", vRM) quit
		set X = prodctl.crtrpe if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRPE", vRM) quit
		set X = prodctl.crtrpf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRPF", vRM) quit
		set X = prodctl.crtrpp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRPP", vRM) quit
		set X = prodctl.crtrppa if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRPPA", vRM) quit
		set X = prodctl.crtrpr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRPR", vRM) quit
		set X = prodctl.crtrpv if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRPV", vRM) quit
		set X = prodctl.crtrri if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRRI", vRM) quit
		set X = prodctl.crtrrl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRRL", vRM) quit
		set X = prodctl.crtrsc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSC", vRM) quit
		set X = prodctl.crtrsp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSP", vRM) quit
		set X = prodctl.crtrts if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRTS", vRM) quit
		set X = prodctl.crtvrt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTVRT", vRM) quit
		set X = prodctl.drtus if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTUS", vRM) quit
	}

	if vobj(prodctl,25).exists() do {

		set X = prodctl.cdm if 'X.isNull(),'Db.isDefined("UTBLCDM","X") set vRM = $$^MSG(1485,X) do vdderr("CDM", vRM) quit
		if '("01"[prodctl.DDA) set vRM=$$^MSG(742,"L") do vdderr("DDA", vRM) quit
		if '("01"[prodctl.DFTCID) set vRM=$$^MSG(742,"L") do vdderr("DFTCID", vRM) quit
		set X = prodctl.inctfrd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.INCTFRD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.inctfrl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.INCTFRL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.mintfrd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.MINTFRD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.mintfrl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.MINTFRL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.odsitr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.ODSITR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.odsmtr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.ODSMTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.odtc1 if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("ODTC1", vRM) quit
		set X = prodctl.odtc2 if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("ODTC2", vRM) quit
		set X = prodctl.prefix if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("PREFIX", vRM) quit
	}

	if vobj(prodctl,30).exists() do {

		set X = prodctl.al1y if 'X.isNull(),'Db.isDefined("STBLAL1Y","X") set vRM = $$^MSG(1485,X) do vdderr("AL1Y", vRM) quit
		set X = prodctl.cbprod if 'X.isNull(),'Db.isDefined("UTBLCBPROD","X") set vRM = $$^MSG(1485,X) do vdderr("CBPROD", vRM) quit
		if '("01"[prodctl.DEFAL) set vRM=$$^MSG(742,"L") do vdderr("DEFAL", vRM) quit
		set X = prodctl.dftirn if 'X.isNull(),'Db.isDefined("STBLDFTIRN","X") set vRM = $$^MSG(1485,X) do vdderr("DFTIRN", vRM) quit
		if prodctl.dpef1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DPEF1", vRM) quit
		if prodctl.dpef2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DPEF2", vRM) quit
		if prodctl.dpef3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DPEF3", vRM) quit
		if prodctl.dpef4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DPEF4", vRM) quit
		set X = prodctl.eppoff if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.EPPOFF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.extopt if 'X.isNull(),'Db.isDefined("STBLEXTOPT","X") set vRM = $$^MSG(1485,X) do vdderr("EXTOPT", vRM) quit
		set X = prodctl.extpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.EXTPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.feegrp if 'X.isNull(),'Db.isDefined("UTBLLNFEEGRP","X") set vRM = $$^MSG(1485,X) do vdderr("FEEGRP", vRM) quit
		if '("01"[prodctl.FPF) set vRM=$$^MSG(742,"L") do vdderr("FPF", vRM) quit
		set X = prodctl.intf if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.INTF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.irc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,3) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.IRC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[prodctl.MCOLC) set vRM=$$^MSG(742,"L") do vdderr("MCOLC", vRM) quit
		set X = prodctl.patglo if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("PATGLO", vRM) quit
		set X = prodctl.patsrc if 'X.isNull(),'Db.isDefined("UTBLSRC","SRCTYP=""PAT"",KEY=:X") set vRM = $$^MSG(1485,X) do vdderr("PATSRC", vRM) quit
		if '("01"[prodctl.PDCF) set vRM=$$^MSG(742,"L") do vdderr("PDCF", vRM) quit
		if '("01"[prodctl.PPCF) set vRM=$$^MSG(742,"L") do vdderr("PPCF", vRM) quit
		if prodctl.ppico.length()>2 set vRM = $$^MSG(1076,2) do vdderr("PPICO", vRM) quit
		if '("01"[prodctl.PPIF) set vRM=$$^MSG(742,"L") do vdderr("PPIF", vRM) quit
		if '("01"[prodctl.PTMF) set vRM=$$^MSG(742,"L") do vdderr("PTMF", vRM) quit
		if '("01"[prodctl.RPC) set vRM=$$^MSG(742,"L") do vdderr("RPC", vRM) quit
		set X = prodctl.sar if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.SAR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(prodctl,31).exists() do {

		set X = prodctl.aacm if 'X.isNull(),'Db.isDefined("STBLAACM","X") set vRM = $$^MSG(1485,X) do vdderr("AACM", vRM) quit
		set X = prodctl.acctnumlen if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACCTNUMLEN", vRM) quit
		if '("01"[prodctl.ASSUMF) set vRM=$$^MSG(742,"L") do vdderr("ASSUMF", vRM) quit
		set X = prodctl.bilsav if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BILSAV", vRM) quit
		set X = prodctl.blpsav if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("BLPSAV", vRM) quit
		set X = prodctl.fbp if 'X.isNull(),'Db.isDefined("STBLFBP","X") set vRM = $$^MSG(1485,X) do vdderr("FBP", vRM) quit
		if prodctl.fpln.length()>6 set vRM = $$^MSG(1076,6) do vdderr("FPLN", vRM) quit
		set X = prodctl.fredy if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FREDY", vRM) quit
		set X = prodctl.irgd if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("IRGD", vRM) quit
		set X = prodctl.lexf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.LEXF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.lexv if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.LEXV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.limigrp if 'X.isNull(),'Db.isDefined("UTBLLNILIM","X") set vRM = $$^MSG(1485,X) do vdderr("LIMIGRP", vRM) quit
		set X = prodctl.limpgrp if 'X.isNull(),'Db.isDefined("UTBLLNPLIM","X") set vRM = $$^MSG(1485,X) do vdderr("LIMPGRP", vRM) quit
		set X = prodctl.minrb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.MINRB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.pchgo if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.PCHGO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.plmdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.PLMDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.plmpr if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.PLMPR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[prodctl.POEFT) set vRM=$$^MSG(742,"L") do vdderr("POEFT", vRM) quit
		if '("01"[prodctl.POPAT) set vRM=$$^MSG(742,"L") do vdderr("POPAT", vRM) quit
		if '("01"[prodctl.RLP) set vRM=$$^MSG(742,"L") do vdderr("RLP", vRM) quit
		if '("01"[prodctl.VRP) set vRM=$$^MSG(742,"L") do vdderr("VRP", vRM) quit
	}

	if vobj(prodctl,32).exists() do {

		if '("01"[prodctl.ANA) set vRM=$$^MSG(742,"L") do vdderr("ANA", vRM) quit
		if prodctl.bfp.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BFP", vRM) quit
		if '("01"[prodctl.DARCCU) set vRM=$$^MSG(742,"L") do vdderr("DARCCU", vRM) quit
		if '("01"[prodctl.DARCPO) set vRM=$$^MSG(742,"L") do vdderr("DARCPO", vRM) quit
		set X = prodctl.dcc1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC1", vRM) quit
		set X = prodctl.dcc2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC2", vRM) quit
		set X = prodctl.dcc3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC3", vRM) quit
		set X = prodctl.dcc4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC4", vRM) quit
		set X = prodctl.dcc5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC5", vRM) quit
		set X = prodctl.dcc6 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC6", vRM) quit
		set X = prodctl.dcc7 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DCC7", vRM) quit
		set X = prodctl.dnc01 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC01", vRM) quit
		set X = prodctl.dnc02 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC02", vRM) quit
		set X = prodctl.dnc03 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC03", vRM) quit
		set X = prodctl.dnc04 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC04", vRM) quit
		set X = prodctl.dnc05 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC05", vRM) quit
		set X = prodctl.dnc1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC1", vRM) quit
		set X = prodctl.dnc2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC2", vRM) quit
		set X = prodctl.dnc3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC3", vRM) quit
		set X = prodctl.dnc4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC4", vRM) quit
		set X = prodctl.dnc5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DNC5", vRM) quit
		if '("01"[prodctl.DRSKIP) set vRM=$$^MSG(742,"L") do vdderr("DRSKIP", vRM) quit
		set X = prodctl.ents if 'X.isNull(),'Db.isDefined("UTBLENTS","X") set vRM = $$^MSG(1485,X) do vdderr("ENTS", vRM) quit
		set X = prodctl.nagl if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("NAGL", vRM) quit
		if '("01"[prodctl.PACF) set vRM=$$^MSG(742,"L") do vdderr("PACF", vRM) quit
		if '("01"[prodctl.PROVPO) set vRM=$$^MSG(742,"L") do vdderr("PROVPO", vRM) quit
		if prodctl.trtrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRTRM", vRM) quit
	}

	if vobj(prodctl,33).exists() do {

		set X = prodctl.caintcr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CAINTCR", vRM) quit
		set X = prodctl.dravl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRAVL", vRM) quit
		set X = prodctl.drcrd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRCRD", vRM) quit
		set X = prodctl.drdly if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRDLY", vRM) quit
		set X = prodctl.drldg if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRLDG", vRM) quit
		set X = prodctl.drlim if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRLIM", vRM) quit
		set X = prodctl.drpatf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRPATF", vRM) quit
		set X = prodctl.drpats if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRPATS", vRM) quit
		set X = prodctl.drret if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRRET", vRM) quit
		set X = prodctl.drstp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRSTP", vRM) quit
		set X = prodctl.drunc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRUNC", vRM) quit
	}

	if vobj(prodctl,35).exists() do {

		if '("01"[prodctl.BALSUP) set vRM=$$^MSG(742,"L") do vdderr("BALSUP", vRM) quit
		if '("01"[prodctl.FINSTMT) set vRM=$$^MSG(742,"L") do vdderr("FINSTMT", vRM) quit
		if prodctl.promdd.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PROMDD", vRM) quit
		if prodctl.stmdscd.length()>30 set vRM = $$^MSG(1076,30) do vdderr("STMDSCD", vRM) quit
		if prodctl.stmdscs.length()>16 set vRM = $$^MSG(1076,16) do vdderr("STMDSCS", vRM) quit
		if prodctl.stmsum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("STMSUM", vRM) quit
	}

	if vobj(prodctl,36).exists() do {

		set X = prodctl.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
		if '("01"[prodctl.BWF) set vRM=$$^MSG(742,"L") do vdderr("BWF", vRM) quit
		if prodctl.fsiscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FSISCR", vRM) quit
		if prodctl.fsnscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FSNSCR", vRM) quit
		set X = prodctl.intwr if 'X.isNull(),'Db.isDefined("UTBLINTWR","X") set vRM = $$^MSG(1485,X) do vdderr("INTWR", vRM) quit
		if '("01"[prodctl.INTYPRST) set vRM=$$^MSG(742,"L") do vdderr("INTYPRST", vRM) quit
		set X = prodctl.mf if 'X.isNull(),'Db.isDefined("UTBLMF","X") set vRM = $$^MSG(1485,X) do vdderr("MF", vRM) quit
	}

	if vobj(prodctl,37).exists() do {

		set X = prodctl.craddc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADDC", vRM) quit
		set X = prodctl.cradii if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADII", vRM) quit
		set X = prodctl.cradts if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRADTS", vRM) quit
		set X = prodctl.crtcpc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTCPC", vRM) quit
		set X = prodctl.crtrct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCT", vRM) quit
		set X = prodctl.crtrcu if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCU", vRM) quit
		set X = prodctl.crtrdf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRDF", vRM) quit
		set X = prodctl.crtrep if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTREP", vRM) quit
		set X = prodctl.crtrmfr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRMFR", vRM) quit
		set X = prodctl.crtrst if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRST", vRM) quit
		set X = prodctl.draddc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADDC", vRM) quit
		set X = prodctl.dradii if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADII", vRM) quit
		set X = prodctl.dradts if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRADTS", vRM) quit
		set X = prodctl.drtrcp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCP", vRM) quit
		set X = prodctl.drtrct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCT", vRM) quit
		set X = prodctl.drtrcu if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCU", vRM) quit
		set X = prodctl.drtrdf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRDF", vRM) quit
		set X = prodctl.drtrmfi if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRMFI", vRM) quit
		set X = prodctl.drtrmu if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRMU", vRM) quit
		set X = prodctl.drtrpr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRPR", vRM) quit
		set X = prodctl.drtrpv if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRPV", vRM) quit
		set X = prodctl.drtrst if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRST", vRM) quit
		set X = prodctl.intc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.INTC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if prodctl.lnmdlscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNMDLSCR", vRM) quit
		if prodctl.rnscr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RNSCR", vRM) quit
	}

	if vobj(prodctl,38).exists() do {

		set X = prodctl.draiud if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRAIUD", vRM) quit
		set X = prodctl.dralp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRALP", vRM) quit
		set X = prodctl.drctfpln if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRCTFPLN", vRM) quit
		set X = prodctl.drianc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRIANC", vRM) quit
		set X = prodctl.drirap if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRIRAP", vRM) quit
		set X = prodctl.driufd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRIUFD", vRM) quit
		set X = prodctl.drlaf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRLAF", vRM) quit
		set X = prodctl.drnbtr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRNBTR", vRM) quit
		set X = prodctl.drpipd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRPIPD", vRM) quit
		set X = prodctl.drtrcinp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRCINP", vRM) quit
		set X = prodctl.drtrdv if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRDV", vRM) quit
		set X = prodctl.drtrft if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRFT", vRM) quit
		set X = prodctl.drtrmfp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRMFP", vRM) quit
		set X = prodctl.drtrsbn if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRSBN", vRM) quit
		set X = prodctl.drtrsecb if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRSECB", vRM) quit
		set X = prodctl.drtrseci if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRSECI", vRM) quit
		set X = prodctl.drtrsecshstl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRSECSHSTL", vRM) quit
		set X = prodctl.drtrsecstl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRTRSECSTL", vRM) quit
		set X = prodctl.drvat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DRVAT", vRM) quit
	}

	if vobj(prodctl,39).exists() do {

		if prodctl.coca.length()>12 set vRM = $$^MSG(1076,12) do vdderr("COCA", vRM) quit
		if prodctl.coko.length()>12 set vRM = $$^MSG(1076,12) do vdderr("COKO", vRM) quit
		set X = prodctl.craiuc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRAIUC", vRM) quit
		set X = prodctl.crctfpln if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRCTFPLN", vRM) quit
		set X = prodctl.crirap if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRIRAP", vRM) quit
		set X = prodctl.criufc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRIUFC", vRM) quit
		set X = prodctl.crlaf if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRLAF", vRM) quit
		set X = prodctl.crnbtr if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRNBTR", vRM) quit
		set X = prodctl.crpipd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRPIPD", vRM) quit
		set X = prodctl.crtrcinp if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRCINP", vRM) quit
		set X = prodctl.crtrdv if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRDV", vRM) quit
		set X = prodctl.crtrft if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRFT", vRM) quit
		set X = prodctl.crtrmfred if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRMFRED", vRM) quit
		set X = prodctl.crtrsbn if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSBN", vRM) quit
		set X = prodctl.crtrsecd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSECD", vRM) quit
		set X = prodctl.crtrseco if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSECO", vRM) quit
		set X = prodctl.crtrsecs if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSECS", vRM) quit
		set X = prodctl.crtrsecshstl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSECSHSTL", vRM) quit
		set X = prodctl.crtrsecstl if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CRTRSECSTL", vRM) quit
	}

	if vobj(prodctl,45).exists() do {

		set X = prodctl.coverid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COVERID", vRM) quit
		set X = prodctl.day5bal if 'X.isNull(),'Db.isDefined("STBLDAY5BAL","X") set vRM = $$^MSG(1485,X) do vdderr("DAY5BAL", vRM) quit
		set X = prodctl.formid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("FORMID", vRM) quit
		if '("01"[prodctl.NONPA) set vRM=$$^MSG(742,"L") do vdderr("NONPA", vRM) quit
	}

	if vobj(prodctl,47).exists() do {

		if '("01"[prodctl.ANLPNT) set vRM=$$^MSG(742,"L") do vdderr("ANLPNT", vRM) quit
		set X = prodctl.din if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DIN", vRM) quit
		set X = prodctl.drmt if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DRMT", vRM) quit
		set X = prodctl.expoweight if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.EXPOWEIGHT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.grace if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("GRACE", vRM) quit
		set X = prodctl.grcdys if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("GRCDYS", vRM) quit
		set X = prodctl.maxadj if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.MAXADJ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.minoda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,"0.00",,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.MINODA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[prodctl.NOSTRO) set vRM=$$^MSG(742,"L") do vdderr("NOSTRO", vRM) quit
		set X = prodctl.par if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PAR", vRM) quit
		set X = prodctl.pro if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PRO", vRM) quit
		set X = prodctl.rclsbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.RCLSBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = prodctl.rclstype if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("RCLSTYPE", vRM) quit
		set X = prodctl.resreq if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.RESREQ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[prodctl.SAVDBDA) set vRM=$$^MSG(742,"L") do vdderr("SAVDBDA", vRM) quit
		set X = prodctl.threspct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODCTL.THRESPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(prodctl,49).exists() do {

		set X = prodctl.trb if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("TRB", vRM) quit
	}

	if vobj(prodctl,50).exists() do {

		if prodctl.cls.length()>1 set vRM = $$^MSG(1076,1) do vdderr("CLS", vRM) quit
		if prodctl.grp.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GRP", vRM) quit
	}
	set X = prodctl.type if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODCTL","MSG",979,"PRODCTL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPRODCTL prodctl

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("TYPE")
	set voldkey = vux.piece("|",1),vobj(prodctl,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(prodctl,-3) = vnewkey // Copy new keys into object
	type RecordPRODCTL vnewrec = prodctl.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PRODCTL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(prodctl,-3) = vux.piece("|",1)                // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordPRODCTL prodctl
	type public String vpar

	do Db.delete("UTBLPRODAUTH","TYPE=:prodctl.type",vpar) // Cascade delete

	do Db.delete("UTBLPRODLNK","TYPE=:prodctl.type",vpar)  // Cascade delete

	quit
