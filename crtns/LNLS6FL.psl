LNLS6FL(RecordLNLS6 lnls6, String vpar, Boolean vparNorm) // LNLS6 - Loans Sold - Account Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (45)             06/26/2006
	// Trigger Definition (4)                      04/02/2007
	// Journal File Definition (2)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnls6.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnls6,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnls6,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnls6.cid
	type String PSEQ = lnls6.pseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("PSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNLS6",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNLS6","CID = :lnls6.cid and PSEQ = :lnls6.pseq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String PSEQ

	type RecordLNLS6 lnls6 = Db.getRecord("LNLS6","CID=:CID,PSEQ=:PSEQ")
	if (%ProcessMode = 2) do {
		do lnls6.setMode(2)

		do LNLS6FL(lnls6,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNLS6 lnls6

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNLS6","CID = :lnls6.cid and PSEQ = :lnls6.pseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnls6)) S ^LS(vobj(lnls6,-3),vobj(lnls6,-4))=vobj(lnls6)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnls6)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNLS6 lnls6

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.lnls6)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LS(vobj(lnls6,-3),vobj(lnls6,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNLS6 lnls6

	// Type local variables for access keys for defaults
	type public String CID
	type public String PSEQ

	if lnls6.rfpf.isNull() set lnls6.rfpf = 0              // rfpf
	quit


vreqn // Validate required data items

	type public RecordLNLS6 lnls6

	if lnls6.rfpf.isNull() do vreqerr("RFPF") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNLS6 lnls6

	if lnls6.cid.isNull() do vreqerr("CID") quit
	if lnls6.pseq.isNull() do vreqerr("PSEQ") quit

		if vx("RFPF").exists(),lnls6.rfpf.isNull() do vreqerr("RFPF") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS6","MSG",1767,"LNLS6."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNLS6 lnls6
	if 'lnls6.cid.isNull() set vfkey("^ACN("_""""_lnls6.cid_""""_","_50_")")="LNLS6(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNLS6 lnls6
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnls6.cid") set vERRMSG = $$^MSG(8563,"LNLS6(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNLS6 lnls6
	if vx("").order().isNull() do AUDIT^UCUTILN(lnls6,.vx(),1,"|") quit
	if vx("GRP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RFPF").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnls6,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - LNLS6 After Delete

	type public RecordLNLS6 lnls6
								/*
								----Revision History---------------------------------------------------
							 
								04/02/07 - KumarSS - 25707
        	   Defined CID to resolve the undefined error.
							 
								09/07/00 - ESTERLYP - 35504:23
		   Create after update trigger.
		   Move LN.PFLG logic from before_update and correct.

								*/

	// There are remaining participations, no change needed.

	type public Number CID
	
	type ResultSet rs=Db.select("INCD","LNLS6","CID=:CID")
	
	if 'rs.isEmpty() quit

	// No participations, change flag.

	type RecordLN ln=Db.getRecord("LN","CID")

	set ln.pflg=""

	do ln.save()
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete Trigger for LNLS6

	type public RecordLNLS6 lnls6
								/*
								----Revision History---------------------------------------------------
								09/07/00 - ESTERLYP - 35504:23
																			Correct undefined, move lnls2 down.
		   Remove LN.PFLG update to after_update to work correctly.
		   Change ln.grp to lnls6.grp so delete of LNLS8 works.
								*/

	new XCID,XPSEQ,XINCD,XGRP,XPFLG,XPL
	set XCID=lnls6.cid 
	set XPL=lnls6.pl 
	set XINCD=lnls6.incd 
	set XPSEQ=lnls6.pseq
	set XGRP=lnls6.grp

	new lnls2
	type RecordLNLS2 lnls2=Db.getRecord("LNLS2","XINCD,XPL")

	if lnls2.picm=6 do Db.delete("LNLS6B","CID=:XCID AND PSEQ=:XPSEQ")
	do Db.delete("LNLS8","INCD=:XINCD AND PL=:XPL AND GRP=:XGRP AND CID=:XCID")
	
	quit

vbu1 // Trigger BU_GRP - Before update of GRP in LNLS6

	type public RecordLNLS6 lnls6
	do lnls6.setAuditFlag(1)
	/*
	----Revision History---------------------------------------------------
	
	04/02/07 - KumarSS - CR 25707
		   Modified to prevent infinite loop caused by RRR variable.
	
	09/16/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/


	new RRR,SQLCNT,XPL,XCID,XINCD,XGRP,XXGRP
	type public Boolean ER

	// Data required in Data Item ~p1
	if lnls6.grp.oldVal.isNull() do Runtime.setErrMSG("LNLS6",7531,"LNLS6.GRP") quit 

	set XPL=lnls6.pl 
	set XCID=lnls6.cid 
	set XINCD=lnls6.incd 
	set XGRP=lnls6.grp 
	set XXGRP=lnls6.grp.oldVal
	set RRR=0

	type ResultSet rs=Db.select("GRP","LNLS3","PL=:XPL AND INCD=:XINCD")
	while rs.next() do {
		if lnls6.grp=rs.getCol("GRP") set RRR=1 
		}
		
	// Invalid data item ~p1
	if RRR=0 do Runtime.setErrMSG("LNLS6",1298,"lnls6.grp") quit:ER 
	
	type RecordLNLS8 lnls8 = Db.getRecord("LNLS8","INCD=:XINCD,PL=:XPL,GRP=:XXGRP,CID=:XCID")
	
	set lnls8.grp = XGRP	// Set new group
	
	do lnls8.bypassSave()

	quit  

vbu2 // Trigger BU_RFPF - Before Update of [LNLS6]RFPF

	type public RecordLNLS6 lnls6
	do lnls6.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	12/05/05 - chhabris - CR18008
		   Replaced the depricated methods. Also removed the revision
		   history prior to 2004.
	----------------------------------------------------------------------
								*/

	type Number ARUF,BAL,BALCMP,DATA,TEMP,UDBAL,XCID,XINCD,XPL,XPSEQ
	
	if lnls6.cid.isNull() do Runtime.setErrMSG("LNLS6",7531,"Loan Sold Account") quit:ER 
	if lnls6.pseq.isNull() do Runtime.setErrMSG("LNLS6",7531,"Sequence Number") quit:ER 
	
	set XCID=lnls6.cid 
	set XINCD=lnls6.incd 
	set XPL=lnls6.pl
	set XPSEQ=lnls6.pseq
	if (lnls6.rfpf=1),(lnls6.rfpf.oldVal=1) do Runtime.setErrMSG("LNLS6",685) quit 
	
	// Currently active
	if (lnls6.rfpf=0),(lnls6.rfpf.oldVal=0) do Runtime.setErrMSG("LNLS6",683) quit 
	
	// Being changed from inactive to active
	if lnls6.rfpf=0 do { quit 
		do CHK(.lnls6) quit:ER 

		// Balance when removed
		set lnls6.rfplb=""

		// Date removed
		set lnls6.rfpsd=""
		}
	
	else  if lnls6.rfpf=1 do { quit 
	
		// Balance when removed
		type RecordLN ln=Db.getRecord("LN","CID=:XCID",1)
		if ln.getMode() do {
			set BAL=ln.bal
			set ARUF=ln.aruf
			set UDBAL=ln.udbal
			}

		set BALCMP=BAL if ARUF set BALCMP=BAL-UDBAL

		type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:XINCD,PL=:XPL",1)
		if lnls2.getMode() do {
			set TEMP=BALCMP*(lnls2.pp/100)
			set lnls6.rfplb=$$^SCARND(TEMP,0,XCID)
			}
	
		// Date removed
		set lnls6.rfpsd=%SystemDate

		// Scheduled Interest Since Inactive
		set lnls6.inactrmt=0
		}
	quit


CHK(RecordLNLS6 lnls6) //

		
	// Check if total percent sold is >100 before restoring loan
	if 'lnls6.rfpf.oldVal do Runtime.setErrSTBLER("LNLS6","LNPRT4D") quit 
	if lnls6.ccid quit
	
	type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:XINCD,PL=:XPL",1)
	if lnls2.getMode() set TPP=lnls2.pp

	type ResultSet rs=Db.select("PSEQ,INCD,PL,RFPF","LNLS6","CID=:XCID")
	while rs.next() do {
		set P=rs.getCol("PSEQ")
		set XXINCD=rs.getCol("INCD")
		set XXPL=rs.getCol("PL")
		set XXRFPF=rs.getCol("RFPF")
		if (XPSEQ-P) quit 
		if XXRFPF quit 

		type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:XXINCD,PL=:XXPL",1)
		if lnls2.getMode() do {
			set XTPP=lnls2.pp
			set TPP=TPP+XTPP
			}
		}

	type ResultSet rs1=Db.select("INCD,PL","LNLS4B","CID=:XCID")
	while rs1.next() do {
		set XXINCD=rs1.getCol("INCD")
		set XXPL=rs1.getCol("PL")

		type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:XXINCD,PL=:XXPL",1)
		if lnls2.getMode() do {
			set XTPP=lnls2.pp
			set TPP=TPP+XTPP
			}
		}

	if TPP>100 do Runtime.setErrSTBLER("LNLS6","LNPRT4B") quit:ER 
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNLS6 lnls6

	set X = lnls6.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = lnls6.pseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PSEQ", vRM) quit
	set X = lnls6.accd if 'X.isNull(),'Db.isDefined("STBLACCD","X") set vRM = $$^MSG(1485,X) do vdderr("ACCD", vRM) quit
	set X = lnls6.acdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACDT", vRM) quit
	set X = lnls6.bals if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BALS", vRM) quit
	set X = lnls6.bbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.BBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.ccid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CCID", vRM) quit
	set X = lnls6.forint if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.FORINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnls6.grp.length()>7 set vRM = $$^MSG(1076,7) do vdderr("GRP", vRM) quit
	set X = lnls6.inactrmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.INACTRMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.incd if 'X.isNull(),'Db.isDefined("LNLS1","X") set vRM = $$^MSG(1485,X) do vdderr("INCD", vRM) quit
	if lnls6.invac.length()>15 set vRM = $$^MSG(1076,15) do vdderr("INVAC", vRM) quit
	set X = lnls6.maxyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,9) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.MAXYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.minyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,9) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.MINYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.optr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.OPTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.passthru if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,9) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PASSTHRU"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnls6.pl.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PL", vRM) quit
	set X = lnls6.pllchgr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLLCHGR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrap if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRAP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrca if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRCA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrcd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRCD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrfc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRFC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrfr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRFR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plric if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrir if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plroc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLROC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrpb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrpc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRPC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrpenc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRPENC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrpenr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRPENR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrpr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRPR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrpt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PLRPT", vRM) quit
	set X = lnls6.plrrl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRRL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrrp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRRP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.plrsc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PLRSC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.popp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.POPP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.poric if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PORIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.prndf if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,3) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PRNDF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.prndm if 'X.isNull(),'Db.isDefined("STBLPRNDM","X") set vRM = $$^MSG(1485,X) do vdderr("PRNDM", vRM) quit
	set X = lnls6.prpriper if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.PRPRIPER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnls6.RFPF) set vRM=$$^MSG(742,"L") do vdderr("RFPF", vRM) quit
	set X = lnls6.rfplb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS6.RFPLB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls6.rfpsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RFPSD", vRM) quit
	set X = lnls6.sdat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SDAT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS6","MSG",979,"LNLS6."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNLS6 lnls6)	//LNLS6 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnls6)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_D
			}
		else  if TSRC="O" do {
			do vj1(.lnls6)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj2(.lnls6)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj2(.lnls6)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNLS6 lnls6)	// HIST_D  Table HIST  History of Deleting of LNLS6

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnls6.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(5969,lnls6.cid,lnls6.pseq,lnls6.incd)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNLS6 lnls6)	// HIST_U  Table HIST  History for LNLS6

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnls6.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS("","LNLS6",vdi,vold,vnew,$G(EFD),$S(vold#10:$$^MSG(5485,lnls6.pseq),1:""),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNLS6 lnls6

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("PSEQ").exists() set vux("PSEQ") = vx("PSEQ")
	do vkey(1) set voldkey = lnls6.cid_","_lnls6.pseq      // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnls6.cid_","_lnls6.pseq      // Copy new keys into object
	type RecordLNLS6 vnewrec = lnls6.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNLS6",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNLS6 lnls6

	if vux("CID").exists() set lnls6.cid = vux("CID").piece("|",i)
	if vux("PSEQ").exists() set lnls6.pseq = vux("PSEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordLNLS6 lnls6
	type public String vpar

	do Db.delete("LNLS6B","CID=:lnls6.cid AND PSEQ=:lnls6.pseq",vpar) // Cascade delete

	do Db.delete("LNLS6C","CID=:lnls6.cid AND PSEQ=:lnls6.pseq",vpar) // Cascade delete

	quit
