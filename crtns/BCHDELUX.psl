BCHDELUX //Batch BCHDELUXE - Create Check Order File - Deluxe Checks
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHDELUXE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHDELUXE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,CLS,GRP,TYP,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHDELUXE","*","",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,CLS,GRP,TYP,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHDELUXE","*","",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,CLS,GRP,TYP,CID) //
	//Process Detail Record for Check Orders.
	/*
	
	  Detail Record Format - Checks
	 
	 
	  Data Code	Description		Value 
	 ----------------------------------------------------------------------
	  0009		Product ID		'00'
	  0010		Financial Inst ID	CUVAR.RT
	  0020		Account Number		ACN.CID
	  0050		Branch Code		ACN.BOO or blanks (optional)
	  0070		Order Date		%SystemDate-1
	  0080		Order Time		CRTIME
	  0100		Account Name(s)		(Multiple)
	  0110		Account Address		(Multiple)
	  0120		Zip Code		ACNADDR.ZIP
	  0130		Phone Number		CIF.HPH or blanks (optional)
	  0140		SSN			CIF.TAXID or blanks (optional)
	  0160		Opening Date		ACN.ODT
	  0210		Mneumonic**		'WAL   VP5     '
	  0215		Language		'E'
	  0300		Starting Check Number	'101'
	  0310		Check Quantity		'50'
	  0320		Deluxe Check Cut	'CHKCUT1'
	  0330		Cover			'RB    '
	  0340		Special Instruction	'ATP2'
	  0400		Mailing Method		'00'
	  0410		Mailing Destination	'00'
	  0500		Billing Code		'04'
	  0520		Country Code		'USA'
	  0550		Currency Code		ACN.CRCD
	  0600		Account Type		'0'
	  9999		End of Record		blank 
	
	 ** The Mneumonic code consists of the binding style and design.
	
	 ----------------------------------------------------------------------
	*/
	
	type public Boolean IBRCD,IHPH
	type public Date ORDATE,CRTIME
	type public String CO,ITAXID
	
	type Boolean DLO
	type Number ACN,BOO,CODT,FILCNT,FILHASH,ODT,OTYPE,ILL,QUAN
	type Number CCID,MMDA,PRODID,SNUM
	type String AD1,AD2,AD3,DEST,HPH,LANG,MAIL,REC,RT,TAXID,TITLE1,TITLE2,TITLE3,ZIP
	type String BILL,CUT,COV,CNTRY,CRCD,CHKBND,CHKDES,MNEM,SI
	
	set MMDA=0				// SPG 9/26/00
	
	type RecordACN acn=Db.getRecord("ACN","CID",1)
	set ACN=acn.acn
	if acn.regd=5 set MMDA=1			// SPG 9/26/00

	type RecordUTBLDELUXEPR deluxe=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP")

	type RecordUTBLDELUXE utbldeluxe=Db.getRecord("UTBLDELUXE","CO=:CO")

	type public IO io 
	
	set CCID="0020"_$$LJ^%ZTEXT(CID,20) 		// Account

	set DLO=+deluxe.dlo			// Direct Liability Option
	
	set TITLE1=acn.title1				// First Name
	set TITLE2=""
	set TITLE3=""	

	if 'DLO do {

		set TITLE2=acn.title2			// Second Name
		set TITLE3=acn.title3
		/* 
		Secondary Authorized User Name is a custom data item.  If
		this custom data item has been added to the ACN file, the 
		variable CUSTOM will have been set in the THRINIT section.
	
		If this particular column, ZAUTHUSER, is not set up in the ACN 
		file definition then [ACN]TITLE2 will be used.
		*/
		
		#if Db.isDefined("DBTBL1D","""SYSDEV"",""ACN"",""ZAUTHUSER""")
		set TITLE2=Db.getOneRow("ZAUTHUSER","ACN","CID")	// 2nd auth. user
		#endif
		}
	
	if DLO do DLO(CID,.TITLE1,.TITLE2,.TITLE3)

	set TITLE1="0100"_$$LJ^%ZTEXT(TITLE1,45)
	set TITLE2="0100"_$$LJ^%ZTEXT(TITLE2,45)
        set TITLE3="0100"_$$LJ^%ZTEXT(TITLE3,45)
	
	type RecordACNADDR addr=Db.getRecord("ACNADDR","CID=:CID",1)

	set AD1=addr.ad1				// Address Line 1
	set AD1="0110"_$$LJ^%ZTEXT(AD1,45)
	set AD2=addr.ad2				// Address Line 2
	if AD2'="" set AD2="0110"_$$LJ^%ZTEXT(AD2,45)

	set AD3=addr.city_", "_addr.state		// Address Line 3
	set AD3="0110"_$$LJ^%ZTEXT(AD3,45)
	set ZIP=addr.mzip				// ZIP Code
	set ZIP=$TR(ZIP,"-","")				// Translate out -
	set ZIP="0120"_$$LJ^%ZTEXT(ZIP,9)

	/*
	IBRCD, IHPH and ITAXID are institution options indicating whether or
	not to include the branch code, home phone number or tax ID for
	each customer in the Deluxe order record.  These are initialized
	in the THREXEC section for each company/affinity group.  SPG 6/2/00
	*/
	
	if IBRCD set BOO=acn.boo			// Branch Code
	else  set BOO=""
	if BOO="" set BOO="0050"_$$LJ^%ZTEXT(BOO,5)
	else  set BOO="0050"_$$RJ^%ZTEXT(BOO,5,0)	// CHOK 6/16/00
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1) // Home phone number
	if IHPH set HPH=cif.hph
        else  set HPH=""
        
	set HPH="0130"_$$LJ^%ZTEXT(HPH.translate("-",""),10)
	
	if ITAXID set TAXID=cif.taxid
	else  set TAXID=""			
	
	set TAXID="0140"_$$LJ^%ZTEXT(TAXID.translate("-",""),9)
	
	// Include Opening Date for accounts
	set CODT=acn.odt
	if utbldeluxe.iod set ODT="0160"_CODT.toString("MMDDYY")	
	else  set ODT=$$LJ^%ZTEXT("0160",10)

	//  Order just deposit slips if account is a savings account
	
	if GRP="SAV",'MMDA do DEPPROC(.acn,.deluxe,.io) quit	// SPG 9/26/00
	
	set PRODID="0009"_"00"				// Product ID
	
	set CHKBND=$$LJ^%ZTEXT(deluxe.chkbnd,6)
	set CHKDES=$$LJ^%ZTEXT(deluxe.chkdes,8) 
	set MNEM="0210"_CHKBND_CHKDES			// Mnemonic Style

	set SNUM="0300"_$$RJ^%ZTEXT(deluxe.stcknum,8,0)	// Starting Check no.
	set QUAN="0310"_$$RJ^%ZTEXT(deluxe.chkquan,6,0)	// Quantity
	set COV="0330"_$$LJ^%ZTEXT(deluxe.cover,6)	// Cover

	// Deluxe Check Cut
	if deluxe.delcut'="" set CUT="0320"_$$LJ^%ZTEXT(deluxe.delcut,7)
	else  set CUT=""
	
	// Special Instruction
	if deluxe.si'="" set SI="0340"_$$LJ^%ZTEXT(deluxe.si,30)
	else  set SI=""

	set BILL="0500"_$$RJ^%ZTEXT(deluxe.chkbil,2,0)	// Bill Code
	
	set REC=PRODID_RT_CCID_BOO_ORDATE_"0080"_CRTIME_TITLE1_TITLE2_TITLE3
	set REC=REC_AD1_AD2_AD3_ZIP_HPH_TAXID_ODT_MNEM_LANG_SNUM_QUAN
	set REC=REC_CUT_COV_SI_MAIL_DEST_BILL_CNTRY_CRCD_OTYPE_9999
	
	do io.write(.REC)
	
	set FILCNT=FILCNT+1
	set FILHASH=FILHASH+CID
	set FILHASH=$E(FILHASH,$L(FILHASH)-9,$L(FILHASH))
	
	// Now build record for deposit slips
	if deluxe.addslp do DEPPROC(.acn,.deluxe,.io)
	quit
	
	
DEPPROC(RecordACN acn,RecordUTBLDELUXEPR deluxe,IO io)	// Process Detail Record for Deposit slips.
	/*
	
	  Detail Record Format - Deposit slips
	 
	 
	  Data Code	Description		Value 
	 ----------------------------------------------------------------------
	  0009		Product ID		'01'
	  0010		Financial Inst ID	CUVAR.RT
	  0020		Account Number		ACN.CID
	  0050		Branch Code		ACN.BOO or blanks (optional)
	  0070		Order Date		%SystemDate-1
	  0080		Order Time		CRTIME
	  0100		Account Name(s)		(Multiple)
	  0110		Account Address		(Multiple)
	  0120		Zip Code		ACNADDR.ZIP
	  0130		Home Phone Number	CIF.HPH or blanks (optional)
	  0140		SSN			CIF.TAXID or blanks (optional)
	  0160		Opening Date		ACN.ODT
	  0210		Mneumonic**		'DEP   HD101   '
	  0215		Language		'E'
	  0310		Quantity		'100'
	  0340		Special Instruction	'ATP2'
	  0400		Mailing Method		'00'
	  0410		Mailing Destination	'00'
	  0500		Billing Code		'04'
	  0520		Country Code		'USA'
	  0550		Currency Code		ACN.CRCD
	  0600		Account Type		'0'
	  9999		End of Record		blank 

	 ** The Mneumonic code consists of the the binding style and design.
	 
	 ----------------------------------------------------------------------
	*/
	type public Boolean TAXID
	type public Date ODT,ORDATE,CRTIME
	type public Number BOO,CCID,FILCNT,FILHASH,OTYPE,PRODID
	type public String AD1,AD2,AD3,LANG,HPH,RT,TITLE1,TITLE2,TITLE3,ZIP
	type public String CNTRY,CRCD,DEST,MAIL
	
	type Number QUAN
	type String BILL,MNEM,REC,SI,SLPDES,SLPSTY
	
	set PRODID="0009"_"01"				// Product ID

	set SLPSTY=$$LJ^%ZTEXT(deluxe.slpsty,6)		// SPG 6/2/00
	if deluxe.slpsty="" set SLPSTY=$$LJ^%ZTEXT("DEP",6)	// CHOK 6/15/00
	set SLPDES=$$LJ^%ZTEXT(deluxe.slpdes,8)
	set MNEM="0210"_SLPSTY_SLPDES			// Mnemonic Style
	
	set QUAN="0310"_$$RJ^%ZTEXT(deluxe.slpquan,6,0)	// Quantity

	// Special Instruction
	if deluxe.si'="" set SI="0340"_$$LJ^%ZTEXT(deluxe.si,30)
	else  set SI=""

	set BILL="0500"_$$RJ^%ZTEXT(deluxe.slpbil,2,0)	// Bill Code
	
	set REC=PRODID_RT_CCID_BOO_ORDATE_"0080"_CRTIME_TITLE1_TITLE2_TITLE3
	set REC=REC_AD1_AD2_AD3_ZIP_HPH_TAXID_ODT_MNEM_LANG_QUAN
	set REC=REC_SI_MAIL_DEST_BILL_CNTRY_CRCD_OTYPE_9999
	
	do io.write(.REC)
	
	set FILCNT=FILCNT+1
	set FILHASH=$E(FILHASH,$L(FILHASH)-9,$L(FILHASH))
	quit
	
		
EXC	// Log error to DAYEND

	type public String RM,%ZTSEQ
	type public Number CID
	type String DESC 	
	
	set DESC="Deluxe Check Order"
	do LOG^UTLEXC($T(+0),"*",DESC,CID.get(),%ZTSEQ.get(),RM.get())
	kill RM,%ZTSEQ
	quit

	/*
	The following sections are being called by the OPEN section to locate
	all accounts that need to produce a checkbook order and place them
	in a sort file to be used by the scheduler.
	*/
	
LN	// Collate through [DTJNA] for loan accounts
	
	type public String CO,X()
	type Number STAT
	type String ZCLS
	
	set ZCLS="L"
	
	type ResultSet rs=Db.select("CLS,GRP,TYP,CID,OLDCRLMT,NEWCRLMT","DTJNA","TJD=:ORDT AND CLS=:ZCLS AND TYP=:TYP")
	
	// No loan accounts opened on the previous date.
	if rs.isEmpty() quit

	while rs.next() do {
		type Number CID,OLDCRLMT,NEWCRLMT
		type String CLS,CO1,GRP,TYP
		
		set OLDCRLMT=rs.getCol("OLDCRLMT")
		set NEWCRLMT=rs.getCol("NEWCRLMT")
	
		// Exclude accounts that were filed due to CRLMT changes
		if '(OLDCRLMT=""&(NEWCRLMT="")) quit
	
		set CLS=rs.getCol("CLS")
		set GRP=rs.getCol("GRP")
		set TYP=rs.getCol("TYP")
		set CID=rs.getCol("CID")
		
		// Don't include accounts opened/closed same day
		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
               	if acn.stat=4 quit
		
		type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
                set CO1=ln.co
		
		if (CO1.get()).isNull() set CO1=CUVAR.co
		
		if CO'=CO1 quit

		/* 
		Only update sort file if there were accounts opened for those 
		companies and product types set up to produce checkbook orders.
		*/
	
		type RecordUTBLDELUXEPR deluxepr=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP",1)
		if 'deluxepr.getMode() quit
	
		if 'X(CO).exists() set X(CO)=""
	
		do SORT
		}
	
	quit

	
DEPDAYEND	// Collate through [DAYENDFNDT] for deposit accounts
	
	type public String CO,CO1,X()
	type String CNCTR,ZCLS
	type Number STAT,CNTCR
	
	set ZCLS="D"
	type ResultSet rs=Db.select("CLS,GRP,TYP,CID","DAYENDFNDT","FDT=:ORDT AND CLS=:ZCLS AND TYP=:TYP")
	
	// No newly funded deposit accounts for the previous day
	if rs.isEmpty() quit
	
	while rs.next() do {
		
		type Number CID
		type String CLS,GRP,TYP
		
		set CLS=rs.getCol("CLS")
		set GRP=rs.getCol("GRP")
		set TYP=rs.getCol("TYP")
		set CID=rs.getCol("CID")

		/* 		
		Don't include accounts newly funded/closed same day and        
	        don't include accounts if the number of credits has not
                been incremented.  This is being added in the event a
                new account deposit has been reversed and not redeposited.
                */
 
		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
		if acn.stat=4 quit
		
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
		set CO1=dep.CO
	
		if (CO1.get()).isNull() set CO1=CUVAR.co
		if CO1'=CO quit
	
		/* 
		Only update sort file if there were accounts opened for those 
		companies and product types set up to produce checkbook orders.
		*/
	
		type RecordUTBLDELUXEPR deluxepr=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP",1)
		if 'deluxepr.getMode() quit
	
		if 'X(CO).exists() set X(CO)=""

		do SORT
		}
	
	quit

DEPDTJNA	// Collate through [DTJNA] for deposit accounts

	type public String CO,CO1,X()
	type String ZCLS
	type Number STAT
	
	set ZCLS="D"
	type ResultSet rs=Db.select("CLS,GRP,TYP,CID","DTJNA","TJD=:ORDT AND CLS=:ZCLS AND TYP=:TYP")
 
	// No newly funded deposit accounts for the previous day
	if rs.isEmpty() quit

	while rs.next() do {
		
		type Number CID
		type String CLS,GRP,TYP
		
		set CLS=rs.getCol("CLS")
		set GRP=rs.getCol("GRP")
		set TYP=rs.getCol("TYP")
		set CID=rs.getCol("CID")

		/*
		Don't include accounts newly funded/closed same day and
		don't include accounts if the number of credits has not
		been incremented.  This is being added in the event a
		new account deposit has been reversed and not redeposited.
		*/

		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
               	if acn.stat=4 quit

		type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
		set CO1=dep.CO

		if (CO1.get()).isNull() set CO1=CUVAR.co

		if CO1'=CO quit

		/*
		Only update sort file if there were accounts opened for those
		companies and product types set up to produce checkbook orders.
		*/

		type RecordUTBLDELUXEPR deluxepr=Db.getRecord("UTBLDELUXEPR","CO=:CO,TYP=:TYP",1)
		if 'deluxepr.getMode() quit

		if 'X(CO).exists() set X(CO)=""

		do SORT
		}

	quit
	
SORT	// Build file sorted by Company to be used by the scheduler
	
	type public Number CID,SCHPID
	type public String CO,CLS,GRP,TYP
	
	type RecordTMPRPT5 tmprpt5=Class.new("RecordTMPRPT5")
	
	set tmprpt5.pid=SCHPID
	set tmprpt5.key1=CO
	set tmprpt5.key2=CLS
	set tmprpt5.key3=GRP
	set tmprpt5.key4=TYP
	set tmprpt5.key5=CID
	do tmprpt5.bypassSave()	
		
	quit

ZEROREC	// Create zero record file if no check or deposit slip ordered.
 
	type public Boolean ER
	type public String CO,RT
 	type Date CRTIME
	
	set CO=CUVAR.co
	set CRTIME=%CurrentTime
	set CRTIME=CRTIME.toString("2460")		// Creation Time
	set CRTIME=CRTIME_"00"
	type public IO io=Class.new("IO")
	do IOFILE(.io) quit:ER.get()     		// open file
	do FHDR1(.io) quit:ER.get()       		// builer header record
	do FTLR(.io)                    		// build trailer record
	do io.close()
	quit

DLO(CID,TITLE1,TITLE2,TITLE3)	// Obtain TITLE1,TITLE2 and TITLE3 based on direct liability flag

	type public String X()
	type Boolean DL
	type Number ACN,CNT,ROLE
        type String ACNRELC,VAR
        
	set CNT=0
	
	type ResultSet rs=Db.select("ROLE,ACN","RELCIF","CID=:CID")
	if rs.isEmpty() quit
	
	// Get the relationship code from the account.
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
        set ACNRELC=acn.acnrelc
	
	/*
	The direct liability flag will be based on [RELCODE]DL.
	
	When the direct liability option is used, the names will be derived
	from each CIF record, not the ACN.
	*/

	while rs.next() do {
		set ROLE=rs.getCol("ROLE")
		set ACN=rs.getCol("ACN")
		
		type RecordRELCODE relcode=Db.getRecord("RELCODE","REL=:ACNRELC,ROLE=:ROLE",1)
		set DL=relcode.dl
		
		if 'DL quit
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1)
		set X(ROLE,ACN)=cif.nam
		}
	
	set (ACN,ROLE)=""
	for  set ROLE=X(ROLE).order() quit:ROLE=""  do {
		for  set ACN=X(ROLE,ACN).order() quit:ACN=""!(CNT=3)  do {
			set CNT=CNT+1
			set VAR="TITLE"_CNT
			set @VAR=X(ROLE,ACN)
			}
		}
	quit

	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	type public IO io
	type public Boolean IBRCD,IHPH,ITAXID
	type public Boolean ER
	type public String CO
	
	set CO=vINPUT
	set ER=0
	
	type RecordUTBLDELUXE udeluxe=Db.getRecord("UTBLDELUXE","CO=:CO")
	set IBRCD=udeluxe.ibrcd 	// Include Customer Home Phone Number
	set IHPH=udeluxe.ihph		// Include Branch Codes for Accounts
	set ITAXID=udeluxe.itaxid	//Include Customer Tax ID Numbers
			
	type ResultSet rs=Db.select("KEY2,KEY3,KEY4,KEY5","TMPRPT5","PID=:SCHPID AND KEY1=:CO")
	
	while rs.next() do {
		type Number CID
		type String CLS,GRP,TYP
		set CLS=rs.getCol("KEY2")
		set GRP=rs.getCol("KEY3")
		set TYP=rs.getCol("KEY4")
		set CID=rs.getCol("KEY5")
		do vPROC(%SystemDate,CLS,GRP,TYP,CID)
		}
		
	quit


FHDR(IO io)	//	File Header Record
	/*
	  File Header Record Format
	 
	  Data Code	Description		Value 
	 ----------------------------------------------------------------------
	  8000		Header Record		null
	  8001		File Date		YYMMDD
	  8002		Trans. Time		HHMMSS
	  8003		File Name		'Check Order File'
	  8004		File Number		'000'
	  8005		Deluxe ID		'410216800' (fixed value*)
	  8006		Memo Field		CUVAR.DISTNAM
	  8007		FI Country Code		blanks
	  9999		End of Record		null
	
	 * This is the employer identification # for Deluxe.

	 ----------------------------------------------------------------------
	*/
		
	/*
	The first record in each file is supplied by Deluxe to authorize
	the acceptance of the file.  The following is an example of what
	this first record might look like:

		$$ADD ID=Z9999CHK BID='Sanchez Computer Associates'
	*/
	
	type public Boolean ER
	type String CO
	
	type ResultSet rs = Db.select("KEY1","TMPRPT5","PID=:SCHPID","KEY1")
        if rs.next() do { quit:ER
      		set CO=rs.getCol("KEY1")
	        }	
	do FHDR1(.io)
	quit

FHDR1(IO io)	// Continue of Header

	type public Date CRTIME
	type public String CO
	
	type String MEMO,REC
	type Date CRDATE
	type Number FILCNT,FILHASH,RECTYPE

	type RecordUTBLDELUXE utbldeluxe=Db.getRecord("UTBLDELUXE","CO=:CO",1)
        set REC=utbldeluxe.rec
		
	do io.write(.REC)
	
	set REC=""
	set RECTYPE=8000				// Record Type
	set CRDATE=%CurrentDate
	set CRDATE=CRDATE.toString("YYMMDD")		// Creation Date
	set MEMO=CUVAR.distnam				// Distributors Name
	set MEMO=$$LJ^%ZTEXT(MEMO,80)
	
	
	set REC=RECTYPE_8001_CRDATE_8002_CRTIME_8003_"Check Order File"
	set REC=REC_8004_"000"_8005_410216800_8006_MEMO_8007_"   "_9999
	
	do io.write(.REC)
	
	// Initialize File Counters:
	
	set FILCNT=0 					// No of Detail Records
	set FILHASH=0					// Hash Total		
	
	quit
	
	
FTLR(IO io)	// File Trailer
	/*
	  Filer Record Format
	 
	 
	  Data Code	Description		Value 
	 ----------------------------------------------------------------------
	  9000		Record ID		blank
	  9002		Account Number Hash	FILHASH
	  9003		Detail Record Count	FILCNT
	  9999		End of Data		blank
	 ----------------------------------------------------------------------
	*/
	
	type public Number FILHASH,FILCNT
	type String REC
	type Number RECTYPE
	
	set RECTYPE=9000				// Record Type
	set FILHASH=$$RJ^%ZTEXT(FILHASH,10,0)		// Acct Number Hash
	set FILCNT=$$RJ^%ZTEXT(FILCNT,7,0)		// # of Detail Records
	
	set REC=RECTYPE_9002_FILHASH_9003_FILCNT_9999
	
	do io.write(.REC)
	
	quit
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	
	type public String CO
	type public Boolean ER

	type ResultSet rs1 = Db.select("KEY1","TMPRPT5","PID=:SCHPID","KEY1")
	if rs1.next() do { quit:ER
        	set CO=rs1.getCol("KEY1")
		set vINPUT=CO
		}
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	// I18N=OFF  Excluded from I18N standards.
	type public String RM,X,ZAUTHUSER
	type Date ORDT,XTJD
	type Boolean FD
	type Number INST,OD,SCHPID,TYP
	type String CO,CLS,DESC,FID
	
	
	set XTJD=%SystemDate-1
	set SCHPID=%ProcessID	

	do Db.fastDelete("TMPRPT5","PID=:SCHPID")

	/*
	The code for the sections that retrieve the LN and DEP accounts cannot 
	reside in this OPEN section.  They can be found at the end of the EXEC 
	section in this batch definition.
	*/
	
	type ResultSet rs=Db.select("CO,TYP,FD,OD,INST","UTBLDELUXEPR")
	if rs.isEmpty() do {  quit
		set FID="UTBLDELUXEPR"
		type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID",1)
		set DESC=dbtbl1.des
		// Look-up table not defined for ~p1
		set RM=$$^MSG(1660,DESC)
		set %BatchExit=1
		do EXC
		}
	while rs.next() do {
		set CO=rs.getCol("CO")
		set TYP=rs.getCol("TYP")
		
	/* CHHABRIAS - 07/25/01
	   Validation for Check Processor Code is added in order to identify
	   the Check Processor and generate files according to the specified
	   format of the Check Processor
	*/
              
                type RecordPRODCTL prodct=Db.getRecord("PRODCTL","TYPE=:TYP",1)
		set CLS=prodct.cls
                
		set FD=rs.getCol("FD")
                set OD=rs.getCol("OD")
		set INST=rs.getCol("INST")
                
                
		if OD.isNull() set OD=0
		set ORDT=XTJD-OD
                if ('INST.isNull())&(INST'="DELUXE") quit  // Quit if not NULL or DELUXE
		if CLS="D" do {
			if FD.isNull() set FD=1
			// If funding date option is yes, get info from ^DAYEND(,"FNDT"
			if FD=1 do DEPDAYEND

			// If funding date option is no, get info from ^DTJNA
			if FD=0 do DEPDTJNA
			}
		else  do LN
		}


	// No record found.
	if 'X.data() do {
		do ZEROREC
		//No file needed for ~p1
		set RM=$$^MSG(4309,XTJD.toString("MM-DD-YEAR")),%BatchExit=1 do EXC
		}
	quit
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,CLS,GRP,TYP,CID","DTJNA","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Boolean ER
	type public Date CRTIME,ORDATE
	type public String CNTRY,CRCD,DEST,LANG,MAIL,RT
	type public Number OTYPE
	type Date DT,TM 
	type Number CUSTOM	

	set CUSTOM=0
	
	// The following variables are used throughout this process.
	
	set DT=%SystemDate-1
	set ORDATE="0070"_DT.toString("MMDDYY")	// Order Date
	
	set TM=%CurrentTime
	set CRTIME=TM.toString("2460")	// Creation Time
	set CRTIME=CRTIME_"00"
	
	set RT=CUVAR.rt					// R&T Number
	set RT="0010"_RT
	
	set LANG="0215"_"E"				// Language
	set MAIL="0400"_"00"				// Mail Code
	set DEST="0410"_"00"				// Dest Code

	
	/*
	Note, Country Code must be USA or CAN only.  This is used for mail
	sorting, and per Deluxe hardcoding this to USA is fine for all	
	addresses, including foreign addresses. Also, only USD and CAD
	supported by Deluxe.  MRR.
	*/
	
	
	set CNTRY="0520"_"USA"				// Country Code
	set CRCD="0550"_"USD"				// Currency Code
	set OTYPE="0600"_"0"				// Type of Order - New
	
	
	/* 
	Secondary Authorized User Name is a custom data item.  If
	this custom data item has been added to the ACN file, the variable
	CUSTOM will be used in the EXEC section for TITLE2.
	*/
	
	//if Db.isDefined("DBTBL1D","""SYSDEV"",""ACN"",""ZAUTHUSER""") set CUSTOM=1
	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID='ACN',DI='ZAUTHUSER'",1)
        if dbtbl1d.getMode() set CUSTOM=1

	type public IO io=Class.new("IO") 

	do IOFILE(.io) quit:ER.get()	// open file

	do FHDR(.io) quit:ER.get()	// build file header

	quit

IOFILE(IO io)	// Open Outgoing File
		
	/*
	Open file for Check Orders, where the file name will be
	DELUXE_julian date.OUT. For example:
	
	DELUXE_57735.OUT
	*/
	
	type public Boolean ER
	type public String RM
	type public Date XTJD	
	
	set io.fileName="DELUXE_"_XTJD_".OUT"
	set io.recordSize=500
	set io.openParams="WRITE/NEWV"
	
	do io.open()
	
	if ER.get() do { quit
		type String DIR,FILE,IO
		
		set DIR=io.directory
		set FILE=io.fileName
		set IO=DIR_" "_FILE
		//Error opening device ~p1
		set RM=$$^MSG(7878,IO) do EXC
		}
	quit
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	type Public IO io
	do FTLR(.io)			// build trailer record and close file
	do io.close()
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type Date CRTIME,ORDATE
	type Boolean IBRCD,IHPH,ITAXID
	type Number CUSTOM,FILCNT,FILHASH,OTYPE
	type String CNTRY,CO,DEST,LANG,RT,MAIL
	
	set CO=""
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	
	type public Number SCHPID
	
	do Db.fastDelete("TMPRPT5","PID=:SCHPID")
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
