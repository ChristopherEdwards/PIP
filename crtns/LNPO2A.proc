LNPO2A	
	/*
	
	Loan Payoff Calculations, Continued - Part 2
	
	       ORIG:  Chuck Hardy (6721) - 09/10/87

	---- Revision History ------------------------------------------------
	
	09/28/06 - Ravindra Rathi - CR 23083
	           Modified the CALCPEN section to set EPPEN=0 if EPPEN<0 to
	           prevent negative pre-payment/early payoff penalties from 
	           being assessed.
	
	06/29/06 - TITOVE - CR 21957
		   Modified EPPEN to pass two new arguments to CALCPEN.
		   CALCPEN modified by restoring lost V6.4 logic that
		   differentiates between calculating penalty based on
		   full loan balance (payoff) or just the payment amount,
		   when penalty base option is 4 - Principal Pmt Paid Early.

	05/05/06 - SANTHUMS - CR 21102
		   Modified EPPEN Section to check PCFL23 variable only if
		   ETC is not NULL.
		   
	04/07/06 - SmithCD - CR 20510
		   Modified last change to specify DESC instead of ASC order 
		   in CALCPEN section when utbllnppn.tiertype is 0 or null. 
		   Performed some cleanup.
	
	04/04/06 - ratht -CR 20194
		   Modified CALCPEN section to get the value for the variable
		   TIER and added 1 as the last parameter to the objects 
		   lneppms. Removed the deprecated features for Db.nextKey()
		   and Db.prevKey(). Added the else condition for the variable
		   TIER and payments.
	
	03/21/06 - SkariahV
		   Modified INTESC and INTESC1 to process Loan account while 
		   the principal maturity option selected as Payoff Deposit 
		   Secured Loan Account(option 6).In the section INTESC1,
		   Loan CID should be used instead of Deposit CID.		   

	03/15/06 - ArpaVC
		   Modified INTESC1 section to not process bills if there
		   are no bills to process.

	06/10/05 - ScottC - 15816
		   Removed code that checked to see if Lnbil0 is defined in 
		   section INTESC1. Lnbil0 should never be undefined if the 
		   account is created properly.
	
	----------------------------------------------------------------------
	*/

	quit


public EPPEN(RecordLN ln)		// Loan account			/REF:R

	// Calculate early payoff penalty amount

	type public Cache %CACHE()
	type public String ETC
	type public Number EPPEN = 0
	
	type Number BLAMT, PAMT = ""
	type Date EDAT
	type Boolean PCFL23 = 0, PSFLG = 0

	// Consider Early Payment Penalty
	if 'ETC.get().isNull() do { if 'PCFL23.get() quit

		type RecordTRN trn = %CACHE("TRN").getRecord("TRN", "ETC = :ETC")

		set PCFL23 = trn.pcfl23
		}
		
	if ln.eppendat, (%SystemDate > ln.eppendat) quit 
	
	// See if negotiated payoff penalty amount applies
	if ln.isChanged("PAMT") set PSFLG = 1
	
	// Payoff Lockout Valid From Date
	if ln.paylkfrm.isNull(), PSFLG set ln.paylkfrm = %EffectiveDate
	
	// Payoff Lockout Valid To Date
	if ln.paylkto.isNull(), PSFLG set ln.paylkto = %EffectiveDate
	
	if 'ln.paylkfrm.isNull(), 'ln.paylkto.isNull() do {
		
		if PSFLG set PAMT = ln.pamt		
		// Within lockout period, use Negotiated Prepayment Amt
		if PAMT.isNull(), (ln.paylkfrm '> %EffectiveDate), (ln.paylkto '< %EffectiveDate) set PAMT = ln.pamt
		}
		
	// Use negotiated payoff penalty amount
	if 'PAMT.isNull() set EPPEN = PAMT

	// Calculate payoff penalty amount
	else  set EPPEN = $$CALCPEN(.ln, ln.eppenmet, ln.bal, 0)

	quit


private	CALCPEN(RecordLN ln,		// Loan acount			/REF:R
		String METH,		// Penalty method
		Number BLAMT,		// Principal payment amount paid early
		Boolean PRFLG)		// Compute Penalty as Net of Transactions flag

	// Calculate penalty amount
	
	type public Number EPPEN
	type public Number %ACR
	
	// No penalty method defined
	if METH.isNull() quit 0
	
	type Number BALCMP, BBAL, LIEFFCT, LORGTRM, ND, PAMT, PAYMNTS, PBAL, PBAS
	type Number PCT, PC, SCHNUM, TIER, TRMPRC
	type String PGM, TIERREC
	
	type RecordUTBLLNPPN utbllnppn = Db.getRecord("UTBLLNPPN", "METHOD = :METH")
	
	// Payment Tier
	if 'utbllnppn.tiertype do {
	
		// Scheduled Payment Number
		type ResultSet rs = Db.select("PAYMENTS", "LNEPPMS", "METHOD=:METH AND PAYMENTS>:(ln.schnum-1)", "PAYMENTS ASC") 
		
		if rs.next() set TIER = rs.getCol("PAYMENTS")
		else  set TIER = ""
		}
	// Term Percent Tier
	else  do {
		
		// Loan Original Term
		set LORGTRM = ln.mdt - ln.dtnt

		// Loan in Effect
		set LIEFFCT = %EffectiveDate - ln.dtnt
		set TRMPRC = ((LIEFFCT / LORGTRM) * 100) + .01
		
		type ResultSet rs = Db.select("PAYMENTS", "LNEPPMS", "METHOD=:METH AND PAYMENTS<:TRMPRC", "PAYMENTS DESC")
		
		if rs.next() set TIER = rs.getCol("PAYMENTS")
		else  set TIER = ""
		}
	
	// If there is no tier defined, then no penalty should be assessed
	if TIER.isNull() quit

	// Scheduled Payment Number compared to Number of Payments	
	if 'utbllnppn.tiertype do { if ln.schnum > PAYMNTS quit 0
	
		type ResultSet rs = Db.select("PAYMENTS", "LNEPPMS", "METHOD=:METH", "PAYMENTS DESC")
		
		if rs.next() set PAYMNTS = rs.getCol("PAYMENTS")
		else  set PAYMNTS = ""
		}

	type RecordLNEPPMS lneppms = Db.getRecord("LNEPPMS", "METHOD = :METH, PAYMENTS = :TIER", 1)

	// Flat Amount
	set PAMT = lneppms.amount

	// Percentage
	set PCT = lneppms.percent / 100

	// Base
	set PBAS = lneppms.base

	// Custom Program
	set PGM = lneppms.pgm
	
	// Fixed Dollar amount
	if 'PAMT.isNull() quit PAMT

	// Execute Custom Payment Tier Program, if one exists, and quit
	if 'PGM.isNull() do { quit EPPEN.roundCur(ln.crcd))
	
		set PGM = "S EPPEN=$$"_PGM_"()"

		#ACCEPT DATE=12/10/03;PGM=John Carroll;CR=7239
		xecute PGM
		}
	
	set BALCMP = +ln.bal
	if ln.aruf set BALCMP = BALCMP - ln.udbal
	
	// Percentage calculation
	// Computed Balance
	if (PBAS = 1) set BBAL = BALCMP
	// Credit Limit - Current
	else  if (PBAS = 2) set BBAL = ln.crlmt
	// Scheduled Balance
	else  if (PBAS = 3) set BBAL = ln.schbal
	// Prin Pmt Paid Early
	else  set BBAL = BLAMT
	
	if (PBAS = 5) do {
		
		// Add accrual amount to payoff amount
		if '%ACR.get() do PAYACR^LNPO2(.ln)
		
		set BBAL = BBAL + %ACR.get()
		}
	
	// Compute Penalty as Net of Transactions flag could only be set when
	// calling from LNPTS4 procedure, as this logic does not apply to payoffs
	if PRFLG set EPPEN = BBAL - (BBAL / (1 + PCT))
	else  set EPPEN = BBAL * PCT

	set EPPEN = EPPEN.roundCur(ln.crcd)
 	
 	if EPPEN<0 set EPPEN=0
	
	quit EPPEN
	

public INTESC(RecordLN ln)		// Loan account			/REF:R

	// Total interest accrual on escrow accounts and escrow balances
	
	type public Number ESCBAL,INTESC

	type String %ESC(),LNBIL0
	type Number ECID,ELENUM
	
	set (INTESC,ESCBAL)=0

	if '%EffectiveDate set %EffectiveDate=%SystemDate

	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:ln.cid")
	
	// quit if there are no bills to process
	if lnbil0.getMode()=0 quit
	
	set ELENUM=0
	for  set LNBIL0=$$ESCACT^BILFUNCS(.lnbil0,.ELENUM) quit:LNBIL0.isNull()  do {
		type Number INT
		
		set ECID=LNBIL0.piece($char(9),1) 
		if ECID.isNull() quit
		
		type RecordDEP dep=Db.getRecord("DEP","CID=:ECID")
		
		if 'ln.stat,dep.bal'=0,dep.iwcp'=0 quit
		
		set ESCBAL=ESCBAL+dep.bal
		set INTESC=INTESC+dep.posacr.roundCur(dep.crcd)
		set INT=0
		
		if %SystemDate-%EffectiveDate do INTESC2(.dep,.INT)
		
		if %ESC.data() set %ESC(ECID)=dep.posacr.roundCur(dep.crcd)_"|"_INT_"|"_dep.bal
		}

	quit

	
INTESC2(RecordDEP dep,		// Deposit account			/REF:R
	Number INT)		// Interest amount			/REF:W
	
	type public Boolean ER
	type public Number INTESC

	if dep.iacm.isNull() quit 

	set INT=$$^UIC(dep.bal,%SystemDate,%EffectiveDate,dep.iacm,dep.irn,0,"",dep.ipf,dep.icpf) quit:ER

	set INT=INT.roundCur(dep.crcd)
	set INTESC=INTESC+INT

	quit

vSIG()	quit "60536^19655^Ravindra Rathi^7175"	// Signature - LTD^TIME^USER^SIZE
