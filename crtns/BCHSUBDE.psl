BCHSUBDE //Batch BCHLNSUBDE - Loan Subsidy Review Processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNSUBDE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNSUBDE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNSUBDE") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNSUBDE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNSUBDE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNSUBDE","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNSUBDE",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNSUBDE",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNSUBDE","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNSUBDE",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	do exec
	quit

exec //
	new SUBPLN,SUBRAT,SUBAMT,SUBFRE,SUBLD,SUBND,RFREOPT
	new CTL
	set CTL=1

	type RecordLN ln
	set ln=Db.getRecord("LN","CID")
	do ln.setAuditFlag(1)

	do proc(.ln)

	quit

proc(RecordLN ln) //

	type public Boolean ER

	set CTL=$G(CTL)

	if ln.stat=4 quit	// Abort processing if account is closed

	// Subsidized Loans must have interest determined at billing
	if 'ln.subpln.isNull(),ln.idp do Runtime.setErrXBAD("LN",103) quit:ER

	// Subsidized Loans cannot be Add-On or discount Loan
	if 'ln.subpln.isNull(),ln.iam do Runtime.setErrXBAD("LN",104) quit:ER

 	set SUBPLN=ln.subpln	// Plan
 	set SUBRAT=ln.subrat	// Rate
	set SUBAMT=ln.subamt	// Amount
	
	if SUBPLN="" quit	// Abort processing if no subsidy processing

	// Ensure that annual anniversary processing has not already been done
	if ln.subld=%SystemDate quit

	Type RecordUTBLLNSUB utbllnsub=Db.getRecord("UTBLLNSUB","SUBPLN=:ln.subpln")

	// Calculate frequency
	set SUBFRE=utbllnsub.rfre
	
	// Ensure that account is not beyond point where new amts are computed
	if ln.mdt,ln.schnd'<ln.mdt quit

	/*
	   Flag in subsidy plan indicates that it is necessary to calculate
	   new amounts on the scheduled payment dates.  Processing will
	   continue if either this flag is turned on, or if today is a
	   scheduled subsidy review date.
	*/
	
	set RFREOPT=utbllnsub.rfreopt			// Frequency option
	set SUBND=ln.subnd				// Next Processing Date
	set SUBLD=ln.subld				// Last Processing Date
	
	if '(RFREOPT=1!(SUBND'=""&(SUBND'>TJD))) quit
	
	// Calculate new rate and amount (annual subsidy processing)
	if SUBND'="",(SUBND'>TJD) do {
		
		new OVSUBRAT,OVSUBAMT
		
		set OVSUBRAT=SUBRAT
		set OVSUBAMT=SUBAMT
		
		do CALC^LNSUBU(.ln,CID,TJD,.SUBRAT,.SUBAMT) if ER quit
		
		do ln.setAuditFlag(1)

		if SUBRAT'=OVSUBRAT set ln.subrat=SUBRAT
		if SUBAMT'=OVSUBAMT set ln.subamt=SUBAMT

		// Bump dates by frequency found in subsidy plan
		set SUBFRE=utbllnsub.rfre
		set SUBND=$$NJD^UFRE(TJD,SUBFRE)
		set ln.subnd=SUBND
		set ln.subld=TJD

		if $E(CTL)=1 do {
			new desub
			type RecordDAYENDSUB desub=Class.new("RecordDAYENDSUB")
		
			set desub.subdt=SUBND
			set desub.cid=CID
			do desub.bypassSave()
		}
	}

	/*
	  Or, consider only whether or not to calculate new subsidy amount.
	  (If the check is conditional, those conditions should be found
	  in the custom extrinsic written for the subsidy plan.)
	*/

	else  do {
		new OVSUBAMT
		set OVSUBAMT=SUBAMT
		set SUBAMT=$$AMT^LNSUBU(.ln,CID,TJD) if ER quit
	}

	if $E(CTL)'=1 quit

	do ln.save()
	quit


Public EXTERN(RecordLN ln,TJD)	//

	// Interface for use by ^UANTIC

	new SUBPLN,SUBRAT,SUBAMT,SUBFRE,SUBND,RFREOPT

	do proc(.ln)

	if '$G(RFREOPT) do {
		type RecordUTBLLNSUB utbllnsub=Db.getRecord("UTBLLNSUB","SUBPLN=:ln.subpln")
		set RFREOPT=utbllnsub.rfreopt
		}
	set SUBND=ln.subnd					   // Next Processing Date

	if (RFREOPT=1!(SUBND'=""&(SUBND'>TJD)))  do {
		//File 
		if '$G(SUBND) set SUBND=$$NJD^UFRE(TJD,SUBFRE)
		type RecordDAYENDSUB dayendsub=Class.new("RecordDAYENDSUB")
		set dayendsub.cid=CID
		set dayendsub.subdt=SUBND
		do dayendsub.bypassSave()
		}
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set XTJD=%SystemDate

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","LN","SCHND=:XTJD AND DIST1FRE NOT = ''")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("BOFF","LN",.%UID,.BRCD,.%UCLS)

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("BOFF","LN",.%UserID,.BRCD,.%UserClass)

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
