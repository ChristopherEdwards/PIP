V01S708(Number %ProcessMode,RecordUTBLSWCHTR fUTBLSWC())   // -  - SID= <UTBLSWCHTR> SWIFT Character Translation
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:35 - joynerd
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fUTBLSWC(1).exists() set fUTBLSWC(1) = Class.new("RecordUTBLSWCHTR")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="UTBLSWCHTR",VPGM=$T(+0),VSNAME="SWIFT Character Translation"
 set VFSN("UTBLSWCHTR")="zfUTBLSWC"
 set vPSL=1
 set KEYS(1)=fUTBLSWC(1).SEQ.get()
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=17 do VPR(.fUTBLSWC()),VDA1(.fUTBLSWC()),V5^DBSPNT quit

 set ER=0 do VSCRPRE(.fUTBLSWC()) if ER quit  // Screen Pre-Processor
 
 if '%ProcessMode do VNEW(.fUTBLSWC()),VPR(.fUTBLSWC()),VDA1(.fUTBLSWC())
 if %ProcessMode do VLOD(.fUTBLSWC()) quit:$G(ER)  do VPR(.fUTBLSWC()),VDA1(.fUTBLSWC())

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLSWC())
 type Number ptr
 set ptr=""
 for  set ptr = fUTBLSWC(ptr).order() quit:ptr.isNull()  do {
     if fUTBLSWC(ptr).SEQ="" kill fUTBLSWC(ptr)
     }
	quit


VNEW(RecordUTBLSWCHTR fUTBLSWC()) // Initialize arrays if %O=0
 
 do VDEF(.fUTBLSWC())
 do VLOD(.fUTBLSWC())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordUTBLSWCHTR fUTBLSWC())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordUTBLSWCHTR fUTBLSWC()) // Load data from disc - %O = (1-5)
 if '$D(%REPEAT) set %REPEAT=17
 if '$D(%MODS) set %MODS=1
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLSWCHTR fUTBLSWC()) // Display screen prompts
 set VO="2||13|0"
 set VO(0)="|0"
 set VO(1)=$C(2,27,27,2,0,0,0,0,0,0)_"01TCharacter Translation Table"
 set VO(2)=$C(4,7,67,2,0,0,0,0,0,0)_"01TO  T     O  T     O  T     O  T     O  T     O  T     O  T     O  T"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordUTBLSWCHTR fUTBLSWC())  // Display screen data
 new V
 //
 set VO="2|3|13|0"
  
 set:'%MODS.exists() %MODS=1 set VX=VO.piece("|",2)+-1,DY=6 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLSWC())
 set VO.piece("|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLSWCHTR fUTBLSWC())  // Display data %REPEAT times
 //instantiate new object if necessary
  #ACCEPT;DATE=08/08/06; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEPRECATED
  if 'fUTBLSWC(I).getPointer() do {
     set fUTBLSWC(I)=Class.new("RecordUTBLSWCHTR","")
     }
 set VO(VX+1)=$C(DY,7,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH1,1,1)
 set VO(VX+2)=$C(DY,10,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR1,1,1)
 set VO(VX+3)=$C(DY,16,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH2,1,1)
 set VO(VX+4)=$C(DY,19,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR2,1,1)
 set VO(VX+5)=$C(DY,25,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH3,1,1)
 set VO(VX+6)=$C(DY,28,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR3,1,1)
 set VO(VX+7)=$C(DY,34,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH4,1,1)
 set VO(VX+8)=$C(DY,37,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR4,1,1)
 set VO(VX+9)=$C(DY,43,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH5,1,1)
 set VO(VX+10)=$C(DY,46,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR5,1,1)
 set VO(VX+11)=$C(DY,52,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH6,1,1)
 set VO(VX+12)=$C(DY,55,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR6,1,1)
 set VO(VX+13)=$C(DY,61,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH7,1,1)
 set VO(VX+14)=$C(DY,64,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR7,1,1)
 set VO(VX+15)=$C(DY,70,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).CH8,1,1)
 set VO(VX+16)=$C(DY,73,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLSWC(I).TR8,1,1)
 set DY=DY+1,VX=VX+16
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordUTBLSWCHTR fUTBLSWC())
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=1
 set %MODOFF=0,%MOD=16,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=2,VPB=5+%REPEAT,BLKSIZ=(16*%REPEAT)+0,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLSWCHTR"
 set OLNTB=VPB*1000
 
 set VFSN("UTBLSWCHTR")="zfUTBLSWC"
 //
 for I=17:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(5,6,1)_"00T12401|1|[UTBLSWCHTR]CH1|||do VP1^V01S708(.fUTBLSWC)"
 set %TAB(2)=$C(5,9,1)_"00T12402|1|[UTBLSWCHTR]TR1|||do VP2^V01S708(.fUTBLSWC)"
 set %TAB(3)=$C(5,15,1)_"00T12403|1|[UTBLSWCHTR]CH2|||do VP3^V01S708(.fUTBLSWC)"
 set %TAB(4)=$C(5,18,1)_"00T12404|1|[UTBLSWCHTR]TR2|||do VP4^V01S708(.fUTBLSWC)"
 set %TAB(5)=$C(5,24,1)_"00T12405|1|[UTBLSWCHTR]CH3|||do VP5^V01S708(.fUTBLSWC)"
 set %TAB(6)=$C(5,27,1)_"00T12406|1|[UTBLSWCHTR]TR3|||do VP6^V01S708(.fUTBLSWC)"
 set %TAB(7)=$C(5,33,1)_"00T12407|1|[UTBLSWCHTR]CH4|||do VP7^V01S708(.fUTBLSWC)"
 set %TAB(8)=$C(5,36,1)_"00T12408|1|[UTBLSWCHTR]TR4|||do VP8^V01S708(.fUTBLSWC)"
 set %TAB(9)=$C(5,42,1)_"00T12409|1|[UTBLSWCHTR]CH5|||do VP9^V01S708(.fUTBLSWC)"
 set %TAB(10)=$C(5,45,1)_"00T12410|1|[UTBLSWCHTR]TR5|||do VP10^V01S708(.fUTBLSWC)"
 set %TAB(11)=$C(5,51,1)_"00T12411|1|[UTBLSWCHTR]CH6|||do VP11^V01S708(.fUTBLSWC)"
 set %TAB(12)=$C(5,54,1)_"00T12412|1|[UTBLSWCHTR]TR6|||do VP12^V01S708(.fUTBLSWC)"
 set %TAB(13)=$C(5,60,1)_"00T12413|1|[UTBLSWCHTR]CH7|||do VP13^V01S708(.fUTBLSWC)"
 set %TAB(14)=$C(5,63,1)_"00T12414|1|[UTBLSWCHTR]TR7|||do VP14^V01S708(.fUTBLSWC)"
 set %TAB(15)=$C(5,69,1)_"00T12415|1|[UTBLSWCHTR]CH8|||do VP15^V01S708(.fUTBLSWC)"
 set %TAB(16)=$C(5,72,1)_"00T12416|1|[UTBLSWCHTR]TR8|||do VP16^V01S708(.fUTBLSWC)"
 do VTBL(.fUTBLSWC())
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordUTBLSWCHTR fUTBLSWC()) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR2","1","0")
 	do GOTO^DBSMACRO("UTBLSWCHTR.CH2") quit 
 	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit
VP2(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */

 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414)
 quit
VP3(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR3","1","0")
 	do GOTO^DBSMACRO("UTBLSWCHTR.CH3") quit 
 	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit
VP4(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */
 
 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414)
 quit

VP5(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR4","1","0")
 	do GOTO^DBSMACRO("UTBLSWCHTR.CH4") quit 
 	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit
VP6(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */
 
 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414)
 quit

VP7(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR5","1","0")
 	do GOTO^DBSMACRO("UTBLSWCHTR.CH5") quit 
 	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit
VP8(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character 
 */
 
 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414) 
 quit

VP9(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR6","1","0")
	do GOTO^DBSMACRO("UTBLSWCHTR.CH6") quit 
	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit
VP10(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */
 
 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414) 
 quit

VP11(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR7","1","0")
 	do GOTO^DBSMACRO("UTBLSWCHTR.CH7") quit 
 	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit

VP12(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */
 
 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414)
 quit

VP13(RecordUTBLSWCHTR fUTBLSWC()) //
 // check user's translatable character must not be from standard char set.
 if X="" do { quit
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR8","1","0")
 	do GOTO^DBSMACRO("UTBLSWCHTR.CH8") 
 	}
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit

VP14(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */

 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414)
 quit

VP15(RecordUTBLSWCHTR fUTBLSWC()) //
 // Check user's translatable character must not be from standard char set.
 if X="" do {
 	do DELETE^DBSMACRO("UTBLSWCHTR.TR9","1","0")
 	set NI=NI+1
 	}
 
 // Invalid Input Character 
 if (INVALID[X)!(VALID1[X) do Runtime.setErrMSG("UTBLSWCHTR",7239)
 quit

VP16(RecordUTBLSWCHTR fUTBLSWC()) //
 /*
  Check user's translated character must be within the standard char set.
  Translated character must be a valid SWIFT character
 */ 
 
 if VALID1'[X do Runtime.setErrMSG("UTBLSWCHTR",7414)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLSWCHTR fUTBLSWC()
 do VPR(.fUTBLSWC())
 do VDA1(.fUTBLSWC())
 do ^DBSPNT()
 quit

VW(RecordUTBLSWCHTR fUTBLSWC())
 do VDA1(.fUTBLSWC())
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLSWCHTR fUTBLSWC())
 do VDA1(.fUTBLSWC())
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLSWCHTR fUTBLSWC()
 do VDA1(.fUTBLSWC())
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLSWCHTR fUTBLSWC()
 if sn="UTBLSWCHTR" do vSET1(fUTBLSWC(I(1)),di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordUTBLSWCHTR fUTBLSWC,di,X)
 do fUTBLSWC.setAuditFlag(1)
 set fUTBLSWC.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordUTBLSWCHTR fUTBLSWC()
 if fid="UTBLSWCHTR" quit $$vREAD1(fUTBLSWC(I(1)),di)
 quit ""
vREAD1(RecordUTBLSWCHTR fUTBLSWC,di)
 quit fUTBLSWC.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 //
VSCRPRE(RecordUTBLSWCHTR fUTBLSWC())  // Screen Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
 /*
  Build SWIFT standard character string VALID1, and SWIFT fatal error string
  INVALID in order to be used in the field post-processor.
 */
 do BUILDST^SWFTEDIT quit 
 
 quit
 #ACCEPT date=11/05/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
