IRADBS	// PBS - IRA - V3.0 - IRA Reports pre/post processor
	// Copyright(c)1998 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/17/98 14:09:08 - JERUCHIMC
	//     ORIG:  Allan R. Mattson (6915) - 03/17/87
	//     DESC:  IRA Reports pre/post processor.

	/*
	------ Revision History -----------------------------------------------

        12/19/05 - Dhanalakshmi R - CR16851
	           Modified sections IRACHECK to correct an error in SCA547.
	           Added quit at the end of the IRATRAN section.

        12/16/05 - Dhanalakshmi R - CR16851
	           Added a section IRATRAN.
	           Modified sections MINDATE,CIDPP,SCA551 to correct the 
	           warnings.

        08/24/05 - Dhanalakshmi R - CR16851
	           Converted to PSL code.
	           Added sections MINDATE and IRACHECK.
	           Modified the Description of this procedure.
	
	-----------------------------------------------------------------------
	*/

	quit


SCA551	// build lookup table for report SCA551 and SCA552 sequence prompt

	type public Number ACN,CID,RPASEQ
	type public String ARRAY(),vhdg

	type Number EXCLUDE,SACN,TAMT,TSEQ
	type Date EFD,NDATE,RDATE
	type String UID

	kill ARRAY		// Array used for lookup on history sequence
	set SACN=ACN.get()

	// If multiple accounts entered quit
	if (('CID.exists())!(CID'=+CID)) quit

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	set (SACN,ACN)=acn.acn

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	set RPASEQ=dep.rpaseq

	// Retirement plan account information not on file
	if 'RPASEQ do Runtime.setErrMSG("DEP",1564) quit
 	
	// I18N=OFF
	set vhdg="TRAN SEQ  TRAN AMT  TRAN EFD  EXCL IND     ORG DATE   RPRNT DATE  USER ID"

	// I18N=ON
	type ResultSet rs=Db.select("TSEQ,TAMT,EFD,EXCLUDE,NDATE,RDATE,UID","RSPDNOT","ACN=:ACN AND RPASEQ=:RPASEQ AND CID=:CID","TSEQ ASC")

	while rs.next() do {

		set TSEQ=rs.getCol("TSEQ")
		set TAMT=rs.getCol("TAMT")
		set EFD=rs.getCol("EFD")
		set EXCLUDE=rs.getCol("EXCLUDE")
		set NDATE=rs.getCol("NDATE")
		set RDATE=rs.getCol("RDATE")
		set UID=rs.getCol("UID")

		set ARRAY(TSEQ)=$$^SCARND(TAMT,10,2)_"  "_EFD.toString("MM/DD/YY")_"         "_$J(EXCLUDE,1)

		if NDATE set ARRAY(TSEQ)=ARRAY(TSEQ)_"     "_$J(NDATE.toString("MM/DD/YY"),8)
		else  set ARRAY(TSEQ)=ARRAY(TSEQ)_"          "

		if RDATE set ARRAY(TSEQ)=ARRAY(TSEQ)_"     "_$J(RDATE.toString("MM/DD/YY"),8)
		else  set ARRAY(TSEQ)=ARRAY(TSEQ)_"             "

		set ARRAY(TSEQ)=ARRAY(TSEQ)_"     "_UID
		}
	quit


SCA552	// post processor for CID for report SCA552

	type public Number CONS
	type public String X

	set CONS=""
	if X="ALL" set CONS=1

	quit


TSEQPP	// post processor for TSEQ for report SCA551

	type public String REPR,X
	type public Number ACN,CID,RPASEQ
	type Date NDATE

	if X="ALL" quit

	type Number EX

	type RecordRSPDNOT rspdnot=Db.getRecord("RSPDNOT","ACN=:ACN , RPASEQ=:RPASEQ , CID=:CID , TSEQ=:X")

	set NDATE=rspdnot.ndate

	// Generate original notice before reprint
	if REPR,'NDATE do Runtime.setErrMSG("RSPDNOT",986) quit

	// Original notice generated. Reprint notice only.
	if 'REPR,NDATE do Runtime.setErrMSG("RSPDNOT",1139) quit

	if REPR do {

		set EX=rspdnot.exclude

		if 'EX.isNull() do {

			// Notice not printed. Transaction reversed.
			if EX=1 do Runtime.setErrMSG("RSPDNOT",1142) quit

			// Notice not printed. Transaction error corrected.
			if EX=2 do Runtime.setErrMSG("RSPDNOT",1143) quit

			// Notice not printed. Contribution reason code modified.
			if EX=3 do Runtime.setErrMSG("RSPDNOT",1165) quit
			}
		}
	quit


CUTOFF	// post processor for CUTOFF for report SCA552

	type public Date STRT
	type public String X
	type Number YRS,YRC

	set STRT=STRT.get()
	set YRS=$$DAT^%ZM(STRT,"YEAR")
	set YRC=$$DAT^%ZM(X,"YEAR")

	// Precedes start date
	if X<STRT do Runtime.setErrMSG("RSPDNOT",2216) quit

	// Invalid. Enter period-start/cutoff date in the same year
	if YRS'=YRC do Runtime.setErrMSG("RSPDNOT",1155) quit

	quit


CIDPP	// post processor for CID for report SCA552

	type public Number CID,ER,X
	type Number %EXT
	type String ZCLS,TEMP
	
	set CID=X,TEMP=X
	set %EXT=1,ZCLS="D"

	if X'="ALL",TEMP.extract()?1A.E do ^UACN quit:ER.get()
	do SCA552

	quit


CID552  // pre-processor for CID for report SCA552

	type public String I(),TAB(),vhdg
	type public Number ACN,RPASEQ

	set I(3)=""

	if +ACN'=ACN quit
	if +RPASEQ'=RPASEQ quit

	kill TAB,vhdg

	set I(3)="TAB("

	type ResultSet rs=Db.select("CID","DEP","ACN=:ACN AND RPASEQ=:RPASEQ","CID ASC")
	
	while rs.next() set TAB(rs.getCol("CID"))=""
	quit


MINDATE	// post processor for ASOF for report SCA060

	type public Date ASOF,MINDAT
	type Number DAY,MO,YR
	type Date %DS
	type String AF
 
	// Determine minimum DOB (MINDAT)= ASOF date minus 70 1/2 years.
	set AF=ASOF.toString("MM/DD/YEAR")
	set DAY=AF.piece("/",2),MO=AF.piece("/",1),YR=AF.piece("/",3)
	set YR=YR-70
	set MO=MO-6 if MO<1 set MO=MO+12,YR=YR-1
 
	if MO=2,DAY>29 set MO=MO+1,DAY=1
	if MO=4!(MO=6)!(MO=11)!(MO=9) if DAY=31 set MO=MO+1,DAY=1

	set %DS=MO_"/"_DAY_"/"_YR
	set MINDAT=$$^SCAJD(%DS)
	quit


IRACHECK( String acn)	// post processor for ACN for report SCA547

	type public Number %EXT,ER

	if (acn'="ALL") do {
		set %EXT=1 do ^UCIF
		if ('ER),((+acn).isNull()) do {
			type ResultSet rs=Db.select("ACN","IRA","ACN=:acn")
			if rs.isEmpty() do Runtime.setErrMSG("IRA",1564)
			}
		}
	quit


public IRATRAN	// Pre processor of the funtion IRATRAN

	type public Date BDAT,EDAT

	set EDAT=%SystemDate for EDAT=EDAT:-1 quit:((EDAT#7)=2)
	set BDAT=EDAT-6
	quit

vSIG()	quit "60261^27972^Dhanalakshmi R^5244"	// Signature - LTD^TIME^USER^SIZE
