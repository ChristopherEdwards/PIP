PDOFL(RecordPDO pdo, String vpar, Boolean vparNorm) // PDO - Name/Address for PDO Checks Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              02/14/2006
	// Trigger Definition (5)                      09/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = pdo.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(pdo,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(pdo,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = pdo.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PDO",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PDO","CID = :pdo.cid")            // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordPDO pdo = Db.getRecord("PDO","CID=:CID")
	if (%ProcessMode = 2) do {
		do pdo.setMode(2)

		do PDOFL(pdo,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPDO pdo

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PDO","CID = :pdo.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(pdo)) S ^PDO(vobj(pdo,-3))=vobj(pdo)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPDO pdo


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^PDO(vobj(pdo,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordPDO pdo

	// Type local variables for access keys for defaults
	type public String CID

	if pdo.cntry.isNull() set pdo.cntry = "CUVAR.CNTRY"    // cntry
	quit


vreqn // Validate required data items

	type public RecordPDO pdo

	if pdo.addr1.isNull() do vreqerr("ADDR1") quit
	if pdo.city.isNull() do vreqerr("CITY") quit
	if pdo.cntry.isNull() do vreqerr("CNTRY") quit
	if pdo.name.isNull() do vreqerr("NAME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPDO pdo

	if pdo.cid.isNull() do vreqerr("CID") quit

		if vx("ADDR1").exists(),pdo.addr1.isNull() do vreqerr("ADDR1") quit
		if vx("CITY").exists(),pdo.city.isNull() do vreqerr("CITY") quit
		if vx("CNTRY").exists(),pdo.cntry.isNull() do vreqerr("CNTRY") quit
		if vx("NAME").exists(),pdo.name.isNull() do vreqerr("NAME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PDO","MSG",1767,"PDO."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordPDO pdo
	if 'pdo.cid.isNull() set vfkey("^ACN("_""""_pdo.cid_""""_","_50_")")="PDO(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordPDO pdo
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":pdo.cid") set vERRMSG = $$^MSG(8563,"PDO(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("MZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordPDO pdo
	if vx("").order().isNull() do AUDIT^UCUTILN(pdo,.vx(),1,"|") quit
	if vx("MZIP").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STATE").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(pdo,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordPDO pdo

	/*
	-- Revision History -----------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code
	do ZIP^PROCZIP(pdo.cntry, pdo.state, pdo.mzip)
	if ER.get() do Runtime.setErrMSG("PDO", 3333, RM)

	quit
	

vau1 // Trigger AU_MZIP - After Update of ZIP Code

	type public RecordPDO pdo

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code
	do ZIP^PROCZIP(pdo.cntry, pdo.state, pdo.mzip)
	if ER.get() do Runtime.setErrMSG("PDO", 3333, RM)

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert of PDO

	type public RecordPDO pdo
	/*
	------------------------ Revision History -------------------------
	05/04/04 - RussellDS - CR9172
		   Fix error in call to setErrMSG causing PSL precedence
		   warning.

	08/01/01 - TITOVE - 46708
		   Modified quitting condition after error # 1767.

	09/20/99 - MOTENJ - 31126
		   Converted to PSL.

	*/

	new X,DATA1,DATA2,XCNTRY
	set XCID=pdo.cid 
	set XCNTRY=pdo.cntry
	if 'Db.isDefined("DEP","CID") do Runtime.setErrMSG("PDO",1259,XCID) if ER quit 
	set DATA1=Db.getOneRow("CNTRY","STBLCNTRY","XCNTRY") 
	set DATA2=""
	set DATA2=Db.nextKey("STBLCNTRY1","XCNTRY,DATA2")
	    
	if (DATA1'=""),(DATA2'=""),(pdo.state="") do Runtime.setErrMSG("PDO",1767,"[PDO].STATE") if ER quit
	do ZIP^PROCZIP(pdo.cntry,pdo.state,pdo.mzip) if ER do Runtime.setErrMSG("PDO",1515,": "_RM) quit 

	quit

	

vbu1 // Trigger BU_STATE - Before Update PDO.STATE

	type public RecordPDO pdo
	do pdo.setAuditFlag(1)
								/*
										------------------------ Revision History -------------------------
	
	  08/01/01 - TITOVE - 46708
		     Modified quitting condition after error # 1767.

	*/

	new XCNTRY
	set XCNTRY=pdo.cntry
	set DATA1=Db.getOneRow("CNTRY","STBLCNTRY","XCNTRY")
	set DATA2="" 
	set DATA2=Db.nextKey("STBLCNTRY1","XCNTRY,DATA2")
	    
	if (DATA1'=""),(DATA2'=""),(pdo.state="") do Runtime.setErrMSG("PDO",1767,"[PDO].STATE") if ER quit 
	
	quit
	

vbu2 // Trigger BU_ZIP - Before Update PDO.ZIP

	type public RecordPDO pdo
	do pdo.setAuditFlag(1)
	/*
	------------------------ Revision History -------------------------
	05/04/04 - RussellDS - CR9172
		   Fix error in call to setErrMSG causing PSL precedence
		   warning.
	  	     
	*/
	
	do ZIP^PROCZIP(pdo.cntry,pdo.state,pdo.mzip) if ER do Runtime.setErrMSG("PDO",1515,": "_RM) quit 
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPDO pdo

	set X = pdo.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if pdo.addr1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDR1", vRM) quit
	if pdo.addr2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDR2", vRM) quit
	if pdo.addr3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDR3", vRM) quit
	if pdo.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	set X = pdo.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	if pdo.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	if pdo.name.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NAME", vRM) quit
	if pdo.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PDO","MSG",979,"PDO."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPDO pdo

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(pdo,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(pdo,-3) = vnewkey  // Copy new keys into object
	type RecordPDO vnewrec = pdo.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PDO",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(pdo,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
