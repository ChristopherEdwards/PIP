DEPEXPFL(RecordDEPEXPLN depexpln, String vpar, Boolean vparNorm) // DEPEXPLN - Account Level Exemption Plan Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              11/22/2003
	// Trigger Definition (2)                      08/27/2005
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = depexpln.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(depexpln,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(depexpln,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = depexpln.cid
	type String EXMPLN = depexpln.exmpln

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("EXMPLN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEPEXPLN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEPEXPLN","CID = :depexpln.cid and EXMPLN = :depexpln.exmpln") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String EXMPLN

	type RecordDEPEXPLN depexpln = Db.getRecord("DEPEXPLN","CID=:CID,EXMPLN=:EXMPLN")
	if (%ProcessMode = 2) do {
		do depexpln.setMode(2)

		do DEPEXPFL(depexpln,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEPEXPLN depexpln

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEPEXPLN","CID = :depexpln.cid and EXMPLN = :depexpln.exmpln") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(depexpln))  S ^ACN(vobj(depexpln,-3),112,vobj(depexpln,-4))=vobj(depexpln)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.depexpln)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEPEXPLN depexpln

	if vpar["/JOURNAL/" do VJOURNAL(.depexpln)             // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACN(vobj(depexpln,-3),112,vobj(depexpln,-4))      // Delete Record
	quit


vreqn // Validate required data items

	type public RecordDEPEXPLN depexpln

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEPEXPLN depexpln

	if depexpln.cid.isNull() do vreqerr("CID") quit
	if depexpln.exmpln.isNull() do vreqerr("EXMPLN") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPEXPLN","MSG",1767,"DEPEXPLN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("FRITSB").exists()!vx("FEBAL").exists()!vx("MOC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Accnt Level Exemption Plan

	type public RecordDEPEXPLN depexpln
	// Free Item Basis should be $ amount or "PERIOD"
	
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
	----------------------------------------------------------------------
	*/
	
	if depexpln.fritsb'="" do { quit:ER 
		if depexpln.fritsb?.N quit 
		if depexpln.fritsb="PERIOD" quit
		
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='DEPEXPLN',DI='FRITSB'", 1)
		
		do Runtime.setErrMSG("DEPEXPLN",8316, dbtbl1d.des) quit:ER 
	}
	
	// Invalid Balance Base.
	if +depexpln.balb=0,(depexpln.febal+depexpln.fritsb'=0) do { quit:ER
	
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='DEPEXPLN',DI='BALB'", 1)
		 
		do Runtime.setErrMSG("DEPEXPLN",8316, dbtbl1d.des) quit:ER 
	}
	
	/*
	Method of Calculation
	Calculation method of 1 (item count) and free item basis (period)
	can not be used together
	*/
	if depexpln.moc=1,depexpln.fritsb="PERIOD" do Runtime.setErrMSG("DEPEXPLN",2742) quit:ER 
	
	quit

vau1 // Trigger AU_FRITSB - After Update Free Item Basis

	type public RecordDEPEXPLN depexpln
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
		   
		   Removed old revision history.
	----------------------------------------------------------------------
	*/
	
	// Free Item Basis should be $ amount or "PERIOD"
	if depexpln.fritsb'="" do { quit:ER 

		if depexpln.fritsb?.N quit 
		if depexpln.fritsb="PERIOD" quit 
		
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='DEPEXPLN',DI='FRITSB'", 1)
		
		do Runtime.setErrMSG("DEPEXPLN",8316, dbtbl1d.des) quit:ER 
	}
	
	// Invalid Balance Base.
	if +depexpln.balb=0,(depexpln.febal+depexpln.fritsb'=0) do {
	
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='DEPEXPLN',DI='BALB'", 1)
		 
		do Runtime.setErrMSG("DEPEXPLN",8316, dbtbl1d.des) quit:ER 
	}
	
	/*
	Method of Calculation
	Calculation method of 1 (item count) and free item basis (period)
	can not be used together
	*/
	if depexpln.moc=1,depexpln.fritsb="PERIOD" do Runtime.setErrMSG("DEPEXPLN",2742) quit:ER 
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEPEXPLN depexpln

	set X = depexpln.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if depexpln.exmpln.length()>12 set vRM = $$^MSG(1076,12) do vdderr("EXMPLN", vRM) quit
	set X = depexpln.balb if 'X.isNull(),'Db.isDefined("STBLFEEFB","X") set vRM = $$^MSG(1485,X) do vdderr("BALB", vRM) quit
	set X = depexpln.febal if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEPEXPLN.FEBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = depexpln.frits if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FRITS", vRM) quit
	if depexpln.fritsb.length()>9 set vRM = $$^MSG(1076,9) do vdderr("FRITSB", vRM) quit
	set X = depexpln.moc if 'X.isNull(),'Db.isDefined("STBLEXPMOC","X") set vRM = $$^MSG(1485,X) do vdderr("MOC", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPEXPLN","MSG",979,"DEPEXPLN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEPEXPLN depexpln)	//DEPEXPLN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.depexpln)	// Mode=D Tran=B EFD=N Seq=1 JRNID=HIST_D
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.depexpln)	// Mode=D Tran=O EFD=N Seq=1 JRNID=HIST_D
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.depexpln)	// Mode=I Tran=B EFD=N Seq=1 JRNID=HIST_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.depexpln)	// Mode=I Tran=O EFD=N Seq=1 JRNID=HIST_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj3(.depexpln)	// Mode=U Tran=B EFD=N Seq=1 JRNID=HIST_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj3(.depexpln)	// Mode=U Tran=O EFD=N Seq=1 JRNID=HIST_U
				}
			}
		}

	quit


vj1(RecordDEPEXPLN depexpln)	// HIST_D  Table HIST  History Entry for Exemption Plan Delete

	type RecordDEP dep=Db.getRecord("DEP","CID=:depexpln.cid",1)


	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=dep.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=dep.boo
	set hist.cdt=+$H
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(2189,depexpln.exmpln)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEPEXPLN depexpln)	// HIST_I  Table HIST  History Entry for New Exemption Plan

	type RecordDEP dep=Db.getRecord("DEP","CID=:depexpln.cid",1)


	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=dep.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=dep.boo
	set hist.cdt=+$H
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(2188,depexpln.exmpln)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordDEPEXPLN depexpln)	// HIST_U  Table HIST  History for Exemption Plan Maintenance

	type RecordDEP dep=Db.getRecord("DEP","CID=:depexpln.cid",1)


	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=dep.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=dep.boo
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.spr=%UID
		set hist.tcmt=$$TCMTFM^ACNFUNCS("","DEPEXPLN",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordDEPEXPLN depexpln

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("EXMPLN").exists() set vux("EXMPLN") = vx("EXMPLN")
	do vkey(1) set voldkey = depexpln.cid_","_depexpln.exmpln // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = depexpln.cid_","_depexpln.exmpln // Copy new keys into object
	type RecordDEPEXPLN vnewrec = depexpln.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEPEXPLN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEPEXPLN depexpln

	if vux("CID").exists() set depexpln.cid = vux("CID").piece("|",i)
	if vux("EXMPLN").exists() set depexpln.exmpln = vux("EXMPLN").piece("|",i)
	quit
