EUROEFD	//

	/*
	ORIG: kumarss - 09/26/2005
	DESC: Convert EFD entries for Euro converion

	---- Comments --------------------------------------------------------

	Convert EFD entries for an account going through the euro
	conversion.

	KEYWORDS:	Euro,Conversion

	RELATED:
		. ^EUROCNV and ^EUROSEG - make use of this routine

	LIBRARY:
		. EXEC^EUROEFD - converts EFD file for a single account

	---- Revision History ------------------------------------------------
	
	05/15/06 - RussellDS - CR21296
		   Replace references to %CACHE, which is reserved for PSL
		   record objects, with cache array.

	09/26/05 - KumarSS - 16668
		   Converted to PSL.
		   Removed revision history prior to 2004

	----------------------------------------------------------------------

	*/

 	quit
 

 	//-----------------------------------------------------------------------
public EXEC	// Update EFD table for CID
	//-----------------------------------------------------------------------

	/* 
	Update the EFD table for DEP and LN entries for the account provided
	by CID, changing appropriate currency values, as identified in 
	cache("EUROCNV"), from the old currency (CRCD) to the new
	currency (NEWCRCD).

	Note that only entries for TJD and later will be converted.

	A copy of any updated entries will be saved to EFDEURO table to support
	reversals of updates.

	Since this call is from EUROCNV and EUROSEG, it depends on the
	inputs below being defined by those routines.

	INPUTS:
		. cache("CRCD"	Currency and rate info	/TYP=ARRAY

		. cache("EUROCNV"	Columns to change	/TYP=ARRAY

		. cache("EURINT"  Index mapping

		. CID		Account number		/TYP=N

		. CLS		Account class		/TYP=T

		. CRCD		Current currency code	/TYP=T

		. EURSTAT	Conversion status flag	/TYP=N

		. NEWCRCD	New currency code	/TYP=T

		. TJD		System date		/TYP=D

	RETURNS:
		. ER		Error flag		/TYP=L

		. RM		Error message if ER=1	/TYP=T

	EXAMPLE:
		D EXEC^EUROEFD

	-----------------------------------------------------------------------
	*/

	type public Number CID,ER,EURSTAT
	type public String CLS,$ZT
	type Date efdate
	type Number buff,seq
	type String table,rec

	set $ZT="ZG "_$ZL_":ZT^EUROEFD"
	
	set ER=0

	if CLS="D" set table="DEP"
	else  if CLS="L" set table="LN"

	if EURSTAT=3 do reverse(CID,table) quit	// Reverse conversion

	type ResultSet rsefd=Db.select("EFDATE,BUFF,SEQ,SQL","EFD","TABLE=:table AND AKEY=:CID AND EFDATE>=:%SystemDate")

	if rsefd.isEmpty() quit	// No EFD entries

	set (buff,seq)=0

	while rsefd.next() do {

		set efdate=rsefd.getCol("EFDATE")
		set buff=rsefd.getCol("BUFF")
		set seq=rsefd.getCol("SEQ")
		set rec=rsefd.getCol("SQL")

		do convert(table,CID,efdate,buff,seq,rec)
		}

	quit


	//-----------------------------------------------------------------------
convert(String table,		// Table Name
        Number CID,		// Account Number
        Date efdate,		// Effective Date
        Number buff,		// Buffer
        Number seq,		// Sequence
        String rec)		// EFD transaction (SQL format)
	//-----------------------------------------------------------------------

	// Convert single EFD record

	type String columns,i,newx,oldrec,oldtok,tok,where,x

	// Tokenize to get literals out of the way
	set rec=$$SQL^%ZS(rec,.tok)
	set oldrec=rec,oldtok=tok				// To compare at end

	set columns=rec.piece(" SET ",2).piece(" WHERE ",1)
	set where=rec.piece(" WHERE ",2)

	for i=1:1:columns.length(",") do {

		set x=columns.piece(",",i)
		if $$chgval(x,.newx,table) set columns.piece(",",i)=newx
		}

	for i=1:1:where.length(" AND ") do {

		set x=where.piece(" AND ",i)
		if $$chgval(x,.newx,table) set where.piece(" AND ",i)=newx
		}

	// Rebuild record
	set rec=rec.piece(" SET ",1)_" SET "_columns_" WHERE "_where

	// Check to see if record has changed (check in tokenized form to
	// avoid appearance of change because of elimination of spaces)
	if rec=oldrec,tok=oldtok quit			// No change

	// Untokenized record to restore to normal syntax
	set rec=$$UNTOK^%ZS(rec,tok)

	// Save old info to EFDEURO to allow reversal
	type RecordEFD efd=Db.getRecord("EFD","EFDATE=:efdate,BUFF=:buff,SEQ=:seq")

	if efd.getMode() do {

		type RecordEFDEURO efdeuro=Db.getRecord("EFDEURO","EFDTABLE=:table,CID=:CID,EFDATE=:efdate,BUFF=:buff,SEQ=:seq",1)

		set efdeuro.efdinfo=efd.table_"|"_efd.akey_"|"_efd.tlo_"|"_efd.uid_"||||"_efd.curdate_"|"_efd.curtime_"|"_efd.tjd
		set efdeuro.efdsql=efd.sql

		do efdeuro.save()
		}

	quit


	//----------------------------------------------------------------------
chgval(String input,		// Old Value Pair
       String newpair,		// New Value Pair
       String table)		// Table Name
	//----------------------------------------------------------------------

	/*
	Change the column value, if required
	
	ARGUMENTS:
		. input		Column=value pair	/TYP=T/MECH=VALUE/REQ

		. newpair	New column=value pair	/TYP=T/MECH=REF:W
				if change was made

	RETURNS:
		. $$		0 if no change		/TYP=L
				1 if change to value
	*/

	type public String cache()
	type Number nulled,tokpos
	type String col,dec,method,newvalue,tok,type,value,where,x
	
	set col=input.piece("=",1)
	set value=input.piece("=",2)
	set tokpos=0,tok=""

	if value[$CHAR(0) do {		                        // Untokenize

		set tokpos=value.piece($CHAR(0),2)
		set value=$$UNTOK^%ZS(value,tok)
		// Remove single quotes, if any
		if value.extract(1,1)="'" set value=$$QSUB^%ZS(value,"'")
		}

	set nulled=0
	if value="NULL" set value="",nulled=1

	set x=cache("EUROCNV",table,col).get() if x="" quit 0
	set type=x.piece("|",2),dec=x.piece("|",3),method=x.piece("|",5)

	set newvalue=value
	do CONVERT^EUROCNV(table,col,where,.newvalue,method,2)

	// Keep form of NULL as it was before
	if newvalue="" do {

		if nulled set newvalue="NULL"
		else  set newvalue="''"
		}

	// Remove trailing zeros for $ and N
	else  if "$N"[type set newvalue=+newvalue

	// Add single quotes to strings
	else  set newvalue=$$QADD^%ZS(newvalue,"'")

	if newvalue=value quit 0                            // No change

	// If tokenized, replace the token and update tok with new value
	if tokpos do {

		set tok.piece($CHAR(1),tokpos)=newvalue
		set newvalue=$CHAR(0)_tokpos_$CHAR(0)
		}
	set newpair=col_"="_newvalue

	quit 1


	//----------------------------------------------------------------------
reverse(Number CID,		// Account Number
        String table)		// Table Name
	//----------------------------------------------------------------------

	/*
	Reverse a Euro conversion for EFD records

	Reversal is handled by taking elements in EFDEURO for the given
	account, seeing if there is a matching element remaining in EFD,
	and if so, moving the old element into the new

	INPUT:
		. CID		Account number		/TYP=N
	
		. table		DEP or LN table		/TYP=T
	*/

	type Date efdate
	type Number buff,seq
	type String EFD
	
	type ResultSet rsefdero=Db.select("EFDATE,BUFF,SEQ","EFDEURO","EFDTABLE=:table AND CID=:CID")

	while rsefdero.next() do {

		set efdate=rsefdero.getCol("EFDATE")
		set buff=rsefdero.getCol("BUFF")
		set seq=rsefdero.getCol("SEQ")


		/*
		Check and reverse this entry, if appropriate

		If top level entry is not the same, the EFD entry has been changed,
		so don't reverse, just remove EFDEURO entry
		*/

		type RecordEFD efd=Db.getRecord("EFD","EFDATE=:efdate,BUFF=:buff,SEQ=:seq")
		
		if efd.getMode() do {

			set EFD=efd.table_"|"_efd.akey_"|"_efd.tlo_"|"_efd.uid_"||||"_efd.curdate_"|"_efd.curtime_"|"_efd.tjd
			
			type RecordEFDEURO efdeuro=Db.getRecord("EFDEURO","EFDTABLE=:table,CID=:CID,EFDATE=:efdate,BUFF=:buff,SEQ=:seq")

			if efdeuro.efdinfo=EFD do {

				set efd.sql=efdeuro.efdsql
				do efd.save()
				}
			}
	
		do Db.delete("EFDEURO","EFDTABLE=:table AND CID=:CID AND EFDATE=:efdate AND BUFF=:buff AND SEQ=:seq")
	}

	quit


	//----------------------------------------------------------------------
ZT	// Error trap
	//----------------------------------------------------------------------

	type public Boolean ER
	
	do ZE^UTLERR
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60401^67458^Dan Russell^7649"	// Signature - LTD^TIME^USER^SIZE
