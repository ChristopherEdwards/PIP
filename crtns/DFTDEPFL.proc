DFTDEPFL(RecordPRODDFTD proddftd, String vpar, Boolean vparNorm) // PRODDFTD - Deposit Product Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (346)            09/27/2006
	// Trigger Definition (7)                      06/20/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = proddftd.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(proddftd,.vxins(),10,"|")
	if %O = 1 quit:'proddftd.isChanged()  do AUDIT^UCUTILN(proddftd,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYPE = proddftd.type

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYPE").exists() do vkchged quit                // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PRODDFTD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PRODDFTD","TYPE = :proddftd.type") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYPE

	type RecordPRODDFTD proddftd = Db.getRecord("PRODDFTD","TYPE=:TYPE")
	if (%ProcessMode = 2) do {
		do proddftd.setMode(2)

		do DFTDEPFL(proddftd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPRODDFTD proddftd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PRODDFTD","TYPE = :proddftd.type") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(proddftd,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(proddftd,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(proddftd,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLDFTD(vobj(proddftd,-3),n)=vobj(proddftd,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(proddftd,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(proddftd,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLDFTD(vobj(proddftd,-3),n)=vobj(proddftd,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordPRODDFTD proddftd
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^UTBLDFTD(vobj(proddftd,-3),n)) quit:n.isNull()  if 'vobj(proddftd,n).data(),^UTBLDFTD(vobj(proddftd,-3),n).data()#2 set vobj(proddftd,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPRODDFTD proddftd

	if 'vkeychg.get(),proddftd.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(proddftd,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^UTBLDFTD(vobj(proddftd,-3))                      // Delete Record
	quit


vinit // Initialize default values

	type public RecordPRODDFTD proddftd

	// Type local variables for access keys for defaults
	type public String TYPE

	if proddftd.aiacrf.isNull() set proddftd.aiacrf = 0    // aiacrf
	if proddftd.anflg.isNull() set proddftd.anflg = 0      // anflg
	if proddftd.anlfpr.isNull() set proddftd.anlfpr = 0    // anlfpr
	if proddftd.anlsys.isNull() set proddftd.anlsys = 0    // anlsys
	if proddftd.aubbf.isNull() set proddftd.aubbf = 0      // aubbf
	if proddftd.awtp.isNull() set proddftd.awtp = 0        // awtp
	if proddftd.bgtpro.isNull() set proddftd.bgtpro = 0    // bgtpro
	if proddftd.blproc.isNull() set proddftd.blproc = 0    // blproc
	if proddftd.bwf.isNull() set proddftd.bwf = 0          // bwf
	if proddftd.chkactf.isNull() set proddftd.chkactf = 0  // chkactf
	if proddftd.chkeuro.isNull() set proddftd.chkeuro = 0  // chkeuro
	if proddftd.chkiss.isNull() set proddftd.chkiss = 0    // chkiss
	if proddftd.cls.isNull() set proddftd.cls = "D"        // cls
	if proddftd.colelg.isNull() set proddftd.colelg = 0    // colelg
	if proddftd.comm.isNull() set proddftd.comm = 0        // comm
	if proddftd.cumdep.isNull() set proddftd.cumdep = 0    // cumdep
	if proddftd.custom1.isNull() set proddftd.custom1 = 0  // custom1
	if proddftd.custom2.isNull() set proddftd.custom2 = 0  // custom2
	if proddftd.custom3.isNull() set proddftd.custom3 = 0  // custom3
	if proddftd.daparwd.isNull() set proddftd.daparwd = 0  // daparwd
	if proddftd.dedintpd.isNull() set proddftd.dedintpd = 0 // dedintpd
	if proddftd.definadj.isNull() set proddftd.definadj = 0 // definadj
	if proddftd.eftdd.isNull() set proddftd.eftdd = 0      // eftdd
	if proddftd.eftdeb.isNull() set proddftd.eftdeb = 0    // eftdeb
	if proddftd.eftreq.isNull() set proddftd.eftreq = 0    // eftreq
	if proddftd.eligbpay.isNull() set proddftd.eligbpay = 0 // eligbpay
	if proddftd.emplben.isNull() set proddftd.emplben = 0  // emplben
	if proddftd.errflg.isNull() set proddftd.errflg = 0    // errflg
	if proddftd.fnbodp.isNull() set proddftd.fnbodp = 0    // fnbodp
	if proddftd.gis.isNull() set proddftd.gis = 0          // gis
	if proddftd.ira.isNull() set proddftd.ira = 0          // ira
	if proddftd.iwcp.isNull() set proddftd.iwcp = 0        // iwcp
	if proddftd.lpswp.isNull() set proddftd.lpswp = 0      // lpswp
	if proddftd.lsp.isNull() set proddftd.lsp = 0          // lsp
	if proddftd.mdtext.isNull() set proddftd.mdtext = 0    // mdtext
	if proddftd.minbalfl.isNull() set proddftd.minbalfl = 0 // minbalfl
	if proddftd.mt320.isNull() set proddftd.mt320 = 0      // mt320
	if proddftd.odo.isNull() set proddftd.odo = 0          // odo
	if proddftd.odsf.isNull() set proddftd.odsf = 0        // odsf
	if proddftd.offproc.isNull() set proddftd.offproc = 0  // offproc
	if proddftd.oid.isNull() set proddftd.oid = 0          // oid
	if proddftd.pbi.isNull() set proddftd.pbi = 0          // pbi
	if proddftd.pdiv.isNull() set proddftd.pdiv = 0        // pdiv
	if proddftd.pipw.isNull() set proddftd.pipw = 0        // pipw
	if proddftd.pis.isNull() set proddftd.pis = 0          // pis
	if proddftd.regcc.isNull() set proddftd.regcc = 0      // regcc
	if proddftd.regdd.isNull() set proddftd.regdd = 0      // regdd
	if proddftd.schproc.isNull() set proddftd.schproc = 0  // schproc
	if proddftd.segflg.isNull() set proddftd.segflg = 0    // segflg
	if proddftd.segmdd.isNull() set proddftd.segmdd = 0    // segmdd
	if proddftd.shareacct.isNull() set proddftd.shareacct = 0 // shareacct
	if proddftd.smet.isNull() set proddftd.smet = 0        // smet
	if proddftd.spf.isNull() set proddftd.spf = 0          // spf
	if proddftd.swpdelip.isNull() set proddftd.swpdelip = 0 // swpdelip
	if proddftd.swpni.isNull() set proddftd.swpni = 0      // swpni
	if proddftd.trb.isNull() set proddftd.trb = 0          // trb
	if proddftd.trunc.isNull() set proddftd.trunc = 0      // trunc
	if proddftd.voselec.isNull() set proddftd.voselec = 0  // voselec
	if proddftd.vostro.isNull() set proddftd.vostro = 0    // vostro
	if proddftd.wdord.isNull() set proddftd.wdord = 0      // wdord
	if proddftd.wdprio.isNull() set proddftd.wdprio = 0    // wdprio
	quit


vreqn // Validate required data items

	type public RecordPRODDFTD proddftd

	if proddftd.aiacrf.isNull() do vreqerr("AIACRF") quit
	if proddftd.anflg.isNull() do vreqerr("ANFLG") quit
	if proddftd.anlfpr.isNull() do vreqerr("ANLFPR") quit
	if proddftd.anlsys.isNull() do vreqerr("ANLSYS") quit
	if proddftd.aubbf.isNull() do vreqerr("AUBBF") quit
	if proddftd.awtp.isNull() do vreqerr("AWTP") quit
	if proddftd.bgtpro.isNull() do vreqerr("BGTPRO") quit
	if proddftd.blproc.isNull() do vreqerr("BLPROC") quit
	if proddftd.bwf.isNull() do vreqerr("BWF") quit
	if proddftd.chkactf.isNull() do vreqerr("CHKACTF") quit
	if proddftd.chkeuro.isNull() do vreqerr("CHKEURO") quit
	if proddftd.chkiss.isNull() do vreqerr("CHKISS") quit
	if proddftd.cls.isNull() do vreqerr("CLS") quit
	if proddftd.colelg.isNull() do vreqerr("COLELG") quit
	if proddftd.comm.isNull() do vreqerr("COMM") quit
	if proddftd.cumdep.isNull() do vreqerr("CUMDEP") quit
	if proddftd.custom1.isNull() do vreqerr("CUSTOM1") quit
	if proddftd.custom2.isNull() do vreqerr("CUSTOM2") quit
	if proddftd.custom3.isNull() do vreqerr("CUSTOM3") quit
	if proddftd.daparwd.isNull() do vreqerr("DAPARWD") quit
	if proddftd.dedintpd.isNull() do vreqerr("DEDINTPD") quit
	if proddftd.definadj.isNull() do vreqerr("DEFINADJ") quit
	if proddftd.eftdd.isNull() do vreqerr("EFTDD") quit
	if proddftd.eftdeb.isNull() do vreqerr("EFTDEB") quit
	if proddftd.eftreq.isNull() do vreqerr("EFTREQ") quit
	if proddftd.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
	if proddftd.emplben.isNull() do vreqerr("EMPLBEN") quit
	if proddftd.errflg.isNull() do vreqerr("ERRFLG") quit
	if proddftd.fnbodp.isNull() do vreqerr("FNBODP") quit
	if proddftd.gis.isNull() do vreqerr("GIS") quit
	if proddftd.glsc.isNull() do vreqerr("GLSC") quit
	if proddftd.grp.isNull() do vreqerr("GRP") quit
	if proddftd.ira.isNull() do vreqerr("IRA") quit
	if proddftd.iwcp.isNull() do vreqerr("IWCP") quit
	if proddftd.lpswp.isNull() do vreqerr("LPSWP") quit
	if proddftd.lsp.isNull() do vreqerr("LSP") quit
	if proddftd.mdtext.isNull() do vreqerr("MDTEXT") quit
	if proddftd.minbalfl.isNull() do vreqerr("MINBALFL") quit
	if proddftd.mt320.isNull() do vreqerr("MT320") quit
	if proddftd.odsf.isNull() do vreqerr("ODSF") quit
	if proddftd.offproc.isNull() do vreqerr("OFFPROC") quit
	if proddftd.oid.isNull() do vreqerr("OID") quit
	if proddftd.pbi.isNull() do vreqerr("PBI") quit
	if proddftd.pdiv.isNull() do vreqerr("PDIV") quit
	if proddftd.pipw.isNull() do vreqerr("PIPW") quit
	if proddftd.pis.isNull() do vreqerr("PIS") quit
	if proddftd.regcc.isNull() do vreqerr("REGCC") quit
	if proddftd.regd.isNull() do vreqerr("REGD") quit
	if proddftd.regdd.isNull() do vreqerr("REGDD") quit
	if proddftd.schproc.isNull() do vreqerr("SCHPROC") quit
	if proddftd.segflg.isNull() do vreqerr("SEGFLG") quit
	if proddftd.shareacct.isNull() do vreqerr("SHAREACCT") quit
	if proddftd.smet.isNull() do vreqerr("SMET") quit
	if proddftd.spf.isNull() do vreqerr("SPF") quit
	if proddftd.swpdelip.isNull() do vreqerr("SWPDELIP") quit
	if proddftd.swpni.isNull() do vreqerr("SWPNI") quit
	if proddftd.trb.isNull() do vreqerr("TRB") quit
	if proddftd.trunc.isNull() do vreqerr("TRUNC") quit
	if proddftd.voselec.isNull() do vreqerr("VOSELEC") quit
	if proddftd.vostro.isNull() do vreqerr("VOSTRO") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPRODDFTD proddftd

	if proddftd.type.isNull() do vreqerr("TYPE") quit

	if 'vobj(proddftd,-100,49,"").order().isNull() do {
		if vx("ODSF").exists(),proddftd.odsf.isNull() do vreqerr("ODSF") quit
		if vx("TRB").exists(),proddftd.trb.isNull() do vreqerr("TRB") quit
		if vx("FNBODP").exists(),proddftd.fnbodp.isNull() do vreqerr("FNBODP") quit
	}
	if 'vobj(proddftd,-100,50,"").order().isNull() do {
		if vx("CLS").exists(),proddftd.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),proddftd.grp.isNull() do vreqerr("GRP") quit
		if vx("REGD").exists(),proddftd.regd.isNull() do vreqerr("REGD") quit
		if vx("OID").exists(),proddftd.oid.isNull() do vreqerr("OID") quit
		if vx("ANLSYS").exists(),proddftd.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("COMM").exists(),proddftd.comm.isNull() do vreqerr("COMM") quit
		if vx("REGCC").exists(),proddftd.regcc.isNull() do vreqerr("REGCC") quit
		if vx("GLSC").exists(),proddftd.glsc.isNull() do vreqerr("GLSC") quit
		if vx("CUSTOM1").exists(),proddftd.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),proddftd.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),proddftd.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("EMPLBEN").exists(),proddftd.emplben.isNull() do vreqerr("EMPLBEN") quit
	}
	if 'vobj(proddftd,-100,51,"").order().isNull() do {
		if vx("IRA").exists(),proddftd.ira.isNull() do vreqerr("IRA") quit
		if vx("PBI").exists(),proddftd.pbi.isNull() do vreqerr("PBI") quit
		if vx("LPSWP").exists(),proddftd.lpswp.isNull() do vreqerr("LPSWP") quit
		if vx("COLELG").exists(),proddftd.colelg.isNull() do vreqerr("COLELG") quit
	}
	if 'vobj(proddftd,-100,52,"").order().isNull() do {
		if vx("TRUNC").exists(),proddftd.trunc.isNull() do vreqerr("TRUNC") quit
	}
	if 'vobj(proddftd,-100,53,"").order().isNull() do {
		if vx("MDTEXT").exists(),proddftd.mdtext.isNull() do vreqerr("MDTEXT") quit
	}
	if 'vobj(proddftd,-100,54,"").order().isNull() do {
		if vx("BWF").exists(),proddftd.bwf.isNull() do vreqerr("BWF") quit
		if vx("IWCP").exists(),proddftd.iwcp.isNull() do vreqerr("IWCP") quit
	}
	if 'vobj(proddftd,-100,55,"").order().isNull() do {
		if vx("PIPW").exists(),proddftd.pipw.isNull() do vreqerr("PIPW") quit
	}
	if 'vobj(proddftd,-100,57,"").order().isNull() do {
		if vx("SEGFLG").exists(),proddftd.segflg.isNull() do vreqerr("SEGFLG") quit
	}
	if 'vobj(proddftd,-100,61,"").order().isNull() do {
		if vx("CHKISS").exists(),proddftd.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CHKEURO").exists(),proddftd.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKACTF").exists(),proddftd.chkactf.isNull() do vreqerr("CHKACTF") quit
	}
	if 'vobj(proddftd,-100,62,"").order().isNull() do {
		if vx("EFTDEB").exists(),proddftd.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),proddftd.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("EFTDD").exists(),proddftd.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("SMET").exists(),proddftd.smet.isNull() do vreqerr("SMET") quit
		if vx("SWPNI").exists(),proddftd.swpni.isNull() do vreqerr("SWPNI") quit
		if vx("ELIGBPAY").exists(),proddftd.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
	}
	if 'vobj(proddftd,-100,66,"").order().isNull() do {
		if vx("VOSTRO").exists(),proddftd.vostro.isNull() do vreqerr("VOSTRO") quit
		if vx("VOSELEC").exists(),proddftd.voselec.isNull() do vreqerr("VOSELEC") quit
	}
	if 'vobj(proddftd,-100,107,"").order().isNull() do {
		if vx("BGTPRO").exists(),proddftd.bgtpro.isNull() do vreqerr("BGTPRO") quit
	}
	if 'vobj(proddftd,-100,115,"").order().isNull() do {
		if vx("SHAREACCT").exists(),proddftd.shareacct.isNull() do vreqerr("SHAREACCT") quit
	}
	if 'vobj(proddftd,-100,210,"").order().isNull() do {
		if vx("ANFLG").exists(),proddftd.anflg.isNull() do vreqerr("ANFLG") quit
		if vx("SPF").exists(),proddftd.spf.isNull() do vreqerr("SPF") quit
		if vx("AUBBF").exists(),proddftd.aubbf.isNull() do vreqerr("AUBBF") quit
	}
	if 'vobj(proddftd,-100,428,"").order().isNull() do {
		if vx("AIACRF").exists(),proddftd.aiacrf.isNull() do vreqerr("AIACRF") quit
		if vx("OFFPROC").exists(),proddftd.offproc.isNull() do vreqerr("OFFPROC") quit
	}
	if 'vobj(proddftd,-100,432,"").order().isNull() do {
		if vx("DEFINADJ").exists(),proddftd.definadj.isNull() do vreqerr("DEFINADJ") quit
	}
	if 'vobj(proddftd,-100,434,"").order().isNull() do {
		if vx("SWPDELIP").exists(),proddftd.swpdelip.isNull() do vreqerr("SWPDELIP") quit
		if vx("GIS").exists(),proddftd.gis.isNull() do vreqerr("GIS") quit
		if vx("PIS").exists(),proddftd.pis.isNull() do vreqerr("PIS") quit
	}
	if 'vobj(proddftd,-100,435,"").order().isNull() do {
		if vx("MINBALFL").exists(),proddftd.minbalfl.isNull() do vreqerr("MINBALFL") quit
	}
	if 'vobj(proddftd,-100,436,"").order().isNull() do {
		if vx("PDIV").exists(),proddftd.pdiv.isNull() do vreqerr("PDIV") quit
	}
	if 'vobj(proddftd,-100,437,"").order().isNull() do {
		if vx("LSP").exists(),proddftd.lsp.isNull() do vreqerr("LSP") quit
	}
	if 'vobj(proddftd,-100,438,"").order().isNull() do {
		if vx("MT320").exists(),proddftd.mt320.isNull() do vreqerr("MT320") quit
	}
	if 'vobj(proddftd,-100,444,"").order().isNull() do {
		if vx("ANLFPR").exists(),proddftd.anlfpr.isNull() do vreqerr("ANLFPR") quit
		if vx("DEDINTPD").exists(),proddftd.dedintpd.isNull() do vreqerr("DEDINTPD") quit
	}
	if 'vobj(proddftd,-100,446,"").order().isNull() do {
		if vx("REGDD").exists(),proddftd.regdd.isNull() do vreqerr("REGDD") quit
	}
	if 'vobj(proddftd,-100,450,"").order().isNull() do {
		if vx("ERRFLG").exists(),proddftd.errflg.isNull() do vreqerr("ERRFLG") quit
		if vx("AWTP").exists(),proddftd.awtp.isNull() do vreqerr("AWTP") quit
	}
	if 'vobj(proddftd,-100,456,"").order().isNull() do {
		if vx("BLPROC").exists(),proddftd.blproc.isNull() do vreqerr("BLPROC") quit
	}
	if 'vobj(proddftd,-100,464,"").order().isNull() do {
		if vx("SCHPROC").exists(),proddftd.schproc.isNull() do vreqerr("SCHPROC") quit
		if vx("CUMDEP").exists(),proddftd.cumdep.isNull() do vreqerr("CUMDEP") quit
		if vx("DAPARWD").exists(),proddftd.daparwd.isNull() do vreqerr("DAPARWD") quit
	}
		if vx("AIACRF").exists(),proddftd.aiacrf.isNull() do vreqerr("AIACRF") quit
		if vx("ANFLG").exists(),proddftd.anflg.isNull() do vreqerr("ANFLG") quit
		if vx("ANLFPR").exists(),proddftd.anlfpr.isNull() do vreqerr("ANLFPR") quit
		if vx("ANLSYS").exists(),proddftd.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("AUBBF").exists(),proddftd.aubbf.isNull() do vreqerr("AUBBF") quit
		if vx("AWTP").exists(),proddftd.awtp.isNull() do vreqerr("AWTP") quit
		if vx("BGTPRO").exists(),proddftd.bgtpro.isNull() do vreqerr("BGTPRO") quit
		if vx("BLPROC").exists(),proddftd.blproc.isNull() do vreqerr("BLPROC") quit
		if vx("BWF").exists(),proddftd.bwf.isNull() do vreqerr("BWF") quit
		if vx("CHKACTF").exists(),proddftd.chkactf.isNull() do vreqerr("CHKACTF") quit
		if vx("CHKEURO").exists(),proddftd.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKISS").exists(),proddftd.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CLS").exists(),proddftd.cls.isNull() do vreqerr("CLS") quit
		if vx("COLELG").exists(),proddftd.colelg.isNull() do vreqerr("COLELG") quit
		if vx("COMM").exists(),proddftd.comm.isNull() do vreqerr("COMM") quit
		if vx("CUMDEP").exists(),proddftd.cumdep.isNull() do vreqerr("CUMDEP") quit
		if vx("CUSTOM1").exists(),proddftd.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),proddftd.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),proddftd.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("DAPARWD").exists(),proddftd.daparwd.isNull() do vreqerr("DAPARWD") quit
		if vx("DEDINTPD").exists(),proddftd.dedintpd.isNull() do vreqerr("DEDINTPD") quit
		if vx("DEFINADJ").exists(),proddftd.definadj.isNull() do vreqerr("DEFINADJ") quit
		if vx("EFTDD").exists(),proddftd.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("EFTDEB").exists(),proddftd.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),proddftd.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("ELIGBPAY").exists(),proddftd.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
		if vx("EMPLBEN").exists(),proddftd.emplben.isNull() do vreqerr("EMPLBEN") quit
		if vx("ERRFLG").exists(),proddftd.errflg.isNull() do vreqerr("ERRFLG") quit
		if vx("FNBODP").exists(),proddftd.fnbodp.isNull() do vreqerr("FNBODP") quit
		if vx("GIS").exists(),proddftd.gis.isNull() do vreqerr("GIS") quit
		if vx("GLSC").exists(),proddftd.glsc.isNull() do vreqerr("GLSC") quit
		if vx("GRP").exists(),proddftd.grp.isNull() do vreqerr("GRP") quit
		if vx("IRA").exists(),proddftd.ira.isNull() do vreqerr("IRA") quit
		if vx("IWCP").exists(),proddftd.iwcp.isNull() do vreqerr("IWCP") quit
		if vx("LPSWP").exists(),proddftd.lpswp.isNull() do vreqerr("LPSWP") quit
		if vx("LSP").exists(),proddftd.lsp.isNull() do vreqerr("LSP") quit
		if vx("MDTEXT").exists(),proddftd.mdtext.isNull() do vreqerr("MDTEXT") quit
		if vx("MINBALFL").exists(),proddftd.minbalfl.isNull() do vreqerr("MINBALFL") quit
		if vx("MT320").exists(),proddftd.mt320.isNull() do vreqerr("MT320") quit
		if vx("ODSF").exists(),proddftd.odsf.isNull() do vreqerr("ODSF") quit
		if vx("OFFPROC").exists(),proddftd.offproc.isNull() do vreqerr("OFFPROC") quit
		if vx("OID").exists(),proddftd.oid.isNull() do vreqerr("OID") quit
		if vx("PBI").exists(),proddftd.pbi.isNull() do vreqerr("PBI") quit
		if vx("PDIV").exists(),proddftd.pdiv.isNull() do vreqerr("PDIV") quit
		if vx("PIPW").exists(),proddftd.pipw.isNull() do vreqerr("PIPW") quit
		if vx("PIS").exists(),proddftd.pis.isNull() do vreqerr("PIS") quit
		if vx("REGCC").exists(),proddftd.regcc.isNull() do vreqerr("REGCC") quit
		if vx("REGD").exists(),proddftd.regd.isNull() do vreqerr("REGD") quit
		if vx("REGDD").exists(),proddftd.regdd.isNull() do vreqerr("REGDD") quit
		if vx("SCHPROC").exists(),proddftd.schproc.isNull() do vreqerr("SCHPROC") quit
		if vx("SEGFLG").exists(),proddftd.segflg.isNull() do vreqerr("SEGFLG") quit
		if vx("SHAREACCT").exists(),proddftd.shareacct.isNull() do vreqerr("SHAREACCT") quit
		if vx("SMET").exists(),proddftd.smet.isNull() do vreqerr("SMET") quit
		if vx("SPF").exists(),proddftd.spf.isNull() do vreqerr("SPF") quit
		if vx("SWPDELIP").exists(),proddftd.swpdelip.isNull() do vreqerr("SWPDELIP") quit
		if vx("SWPNI").exists(),proddftd.swpni.isNull() do vreqerr("SWPNI") quit
		if vx("TRB").exists(),proddftd.trb.isNull() do vreqerr("TRB") quit
		if vx("TRUNC").exists(),proddftd.trunc.isNull() do vreqerr("TRUNC") quit
		if vx("VOSELEC").exists(),proddftd.voselec.isNull() do vreqerr("VOSELEC") quit
		if vx("VOSTRO").exists(),proddftd.vostro.isNull() do vreqerr("VOSTRO") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODDFTD","MSG",1767,"PRODDFTD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("GCRS").exists()!vx("GCRCD").exists()!vx("MSCRTBL").exists()!vx("DSCRTBL").exists()!vx("SCRFREQ").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GLSC").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordPRODDFTD proddftd
	if vx("").order().isNull() do AUDIT^UCUTILN(proddftd,.vx(),10,"|") quit
	if vx("LSP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(proddftd,.vx(),10,"|")
	quit


vad1 // Trigger AFTER_DELETE - Remove Prodctl after removing proddftd

	type public RecordPRODDFTD proddftd
	/*
	  ------------------ Revision History ----------------------------------
	
	   09/28/99 - MOTENJ - 31126
	   	Converting to PSL.         

	
	   01/12/99 - SPIER - 31401
		Added this trigger to remove corresponding prodctl table
	*/	

	new XTYPE
	set XTYPE=proddftd.type
	do Db.delete("PRODCTL","TYPE=:XTYPE")
	quit
	

vai1 // Trigger AFTER_INSERT - Validate Data

	type public RecordPRODDFTD proddftd
	/* 
	  -------------------- Revision History -------------------------------------------------------------------------          

	02/17/05 - Kini - 13991	
		   Modified to replace UTBLGLSCX index table with UTBLGLSC
		   since UTBLGLSCX has been obsoleted.
		   Cleaned up to comply with DBI standards.

	07/28/01 - MAYLATHR - 44689
		Added penalty code 15 to list for verifying penalty assessment
		days.  Removed redundant checking of verifying penalty 
 		assessment days.
	
	05/25/00 - LUS - 40263
        	Retrofitted change below:
		04/03/00 - LUS -37723
		Removed the check to verify the requied of Float Hold and
		Check Hold.

	02/10/00 - AHMEDS - 35866
		Removed code and comments related to Validate Low Balance
		Calculation Frequency.

	01/27/00 - MOHAMEDE - 36815
		Added code to include penalty method 15 in the penalty 
		assessment days validation.          

	03/24/99 - KONGJ - 32222
		Replaced DTYPE.MSCRTBL with DTYPE.SCRFREQ as parameter passed in
		$$NJD^UFRE utility.
	
	03/12/99 - Terrie Dougherty - 32267
		Changed PRODCTL to PRODDFTD for SWPF select statement.
		Changed INDEX to use PINDEX when determining if a penalty
		rate exists, a penalty index cannot exist.
	*/
	
	type public Boolean ER
	type String X
	
	// Invalid GL set code 
	if 'Db.isDefined("UTBLGLSC",":proddftd.glsc") do Runtime.setErrSTBLER("PRODDFTD","INVGLSC") if ER quit 		
		
	// Error SWPOPT Data required
	if (proddftd.swpf) , ('proddftd.swpopt) do Runtime.setErrMSG("PRODDFTD",979,"SWPOPT "_$$^MSG(741)) if ER quit	   
	
	// Error NEGIPF Data required
	if (proddftd.negipo=2) , (proddftd.negipf="") do Runtime.setErrMSG("PRODDFTD",979,"NEGIPF "_$$^MSG(741)) if ER quit	   

	
	// Check items which are dependent on other fields.
	
	// Option other than 2 required when Reset Int/Div Available is 1 or 2
	if (proddftd.iaf=2) , ((proddftd.intavlr=1) ! (proddftd.intavlr=2)) do Runtime.setErrMSG("PRODDFTD",43)  if ER quit
	
	// Verify Interest Calc Period Frequency
	set X=proddftd.icpf
	do ICPF^UCO
	if ER do Runtime.setErrMSG("PRODDFTD",3333,"RM") if ER quit 
	
	set X=proddftd.index
	do ^UINDX
	if ER do Runtime.setErrMSG("PRODDFTD",3333,"RM") if ER quit
	
	
	if (proddftd.notice=1) ! (proddftd.notice=2) do { quit:ER 
		/* 
		  Verify Max # of Days Notice Effect
		  Checks that if NOTICE is a 1 or 2 then NOTMAX is greater than zero.
		*/
		
		// Maximum days notice effective required for notice products
		if 'proddftd.notmax do Runtime.setErrMSG("PRODDFTD",1685) if ER quit

		/*
		   Verify Minimum Notice Period
		   Checks that if NOTICE is a 1 or 2 then NOTMIN is greater than zero
		*/
		
		// Minimum notice period required for notice products
		if 'proddftd.notmin do Runtime.setErrMSG("PRODDFTD",1738) if ER quit
		}
	
	// Option 0 required when Int/Div Available Flag is 2
	if (proddftd.iaf=2) , (proddftd.intavlr=1!(proddftd.intavlr=2)) do Runtime.setErrMSG("PRODDFTD",42) if ER quit
	
	/*
	   GCRS - Good Customer Status - If GCR status contains a value, GCR 
	   processing is invoked.  Scoring tables, etc are required even when 
	   the status is fixed or revoked.  When the status if fixed or 
	   revoked, the account will not be automatically be scored in the 
	   monthly or daily scoring processes.
	*/

	if proddftd.gcrs do { quit:ER 
		
		// Good customer recognition status is revoked. Good customer recognition code is not applicable.
		if (proddftd.gcrs=3) , (proddftd.gcrcd'="") do Runtime.setErrMSG("PRODDFTD",3283) if ER quit 

		// Monthly scoring table, GCR code, and Scoring Frequency are required if GCR status is Dynamic or Fixed
		if proddftd.gcrs'=3 do { quit:ER 
		
			// Data required in Data Item ~p1
			if proddftd.mscrtbl="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.MSCRTBL") if ER quit      		

			type String P1,P2
			set P1=proddftd.gcrcd
			set P2=proddftd.mscrtbl
			// Good customer recognition code does not exist in monthly scoring table
			if 'Db.isDefined("UTBLGCRBAL","proddftd.mscrtbl,proddftd.gcrcd") do Runtime.setErrMSG("PRODDFTD",3284,"P1~P2") if ER quit

			// Data required in Data Item ~p1
			if proddftd.gcrcd="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.GCRCD") if ER quit          		
			if proddftd.scrfreq="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.SCRFREQ") if ER quit      		
			}
			
		if proddftd.gcrs=1 do { quit:ER 
			// Daily scoring table and daily scoring option are required if GCR status is Dynamic
			if proddftd.dscrtbl="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.DSCRTBL") if ER quit   		   
			if 'proddftd.dsopt do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.DSOPT") if ER quit         		   
			}
		}
	
	if proddftd.scrfreq'="" do { quit:ER 

		type Number AF
		type Date DATE
		
		set DATE=(%SystemDate).nextFreqDate(proddftd.scrfreq,.AF) quit:ER 
		// Scoring frequency must be monthly
		if AF'=12 do Runtime.setErrMSG("PRODDFTD",3286) if ER quit
		}
	
	type String D(),DESC,P()
	
	// Verify Float holds, can not have entry in seq if none in the sequence before
	set P(1)=proddftd.fltp1
	set P(2)=proddftd.fltp2
	set P(3)=proddftd.fltp3
	set P(4)=proddftd.fltp4
	set P(5)=proddftd.fltp5
	set D(1)=proddftd.fltd1
	set D(2)=proddftd.fltd2
	set D(3)=proddftd.fltd3
	set D(4)=proddftd.fltd4
	set D(5)=proddftd.fltd5
	set DESC=$$^MSG(6053)                  // float hold
	do VERHOLDS quit:ER 
	
	// Verify Check holds, can not have entry in seq if none in the sequence before		
	set P(1)=proddftd.hldp1
	set P(2)=proddftd.hldp2
	set P(3)=proddftd.hldp3
	set P(4)=proddftd.hldp4
	set P(5)=proddftd.hldp5
	set D(1)=proddftd.hldd1
	set D(2)=proddftd.hldd2
	set D(3)=proddftd.hldd3
	set D(4)=proddftd.hldd4
	set D(5)=proddftd.hldd5
	set DESC=$$^MSG(6704)                  // Check hold ~p1
	do VERHOLDS quit:ER 
	
	// Need error message here

	if '((proddftd.fltp1'=""&(proddftd.fltd1'=""))!(proddftd.fltp1=""&(proddftd.fltd1="")))
	if '((proddftd.fltp2'=""&(proddftd.fltd2'=""))!(proddftd.fltp2=""&(proddftd.fltd2="")))
	if '((proddftd.fltp3'=""&(proddftd.fltd3'=""))!(proddftd.fltp3=""&(proddftd.fltd3="")))
	if '((proddftd.fltp4'=""&(proddftd.fltd4'=""))!(proddftd.fltp4=""&(proddftd.fltd4="")))
	if '((proddftd.fltp5'=""&(proddftd.fltd5'=""))!(proddftd.fltp5=""&(proddftd.fltd5="")))
	if '((proddftd.hldp1'=""&(proddftd.hldd1'=""))!(proddftd.hldp1=""&(proddftd.hldd1="")))
	if '((proddftd.hldp2'=""&(proddftd.hldd2'=""))!(proddftd.hldp2=""&(proddftd.hldd2="")))
	if '((proddftd.hldp3'=""&(proddftd.hldd3'=""))!(proddftd.hldp3=""&(proddftd.hldd3="")))
	if '((proddftd.hldp4'=""&(proddftd.hldd4'=""))!(proddftd.hldp4=""&(proddftd.hldd4="")))
	if '((proddftd.hldp5'=""&(proddftd.hldd5'=""))!(proddftd.hldp5=""&(proddftd.hldd5="")))
	

	// Penalty days are only valid with penalty options 3, 7, 8, or 15
	if (proddftd.pdys) , ",3,7,8,15,"'[(","_proddftd.popt_",") do Runtime.setErrMSG("PRODDFTD",2180) if ER quit
	
	if (proddftd.prate'="") , (proddftd.popt=11) , (proddftd.irn'="") do {

		type Number IRN,P1

		set IRN=proddftd.irn
		set P1=0
		// Invalid rate. The valid range is between and 
		if (proddftd.prate>proddftd.irn) ! (proddftd.prate<0) do Runtime.setErrMSG("PRODDFTD",7641,"P1~IRN") if ER quit 
		}
	
	// Penalty rate already defined
	if (proddftd.pindex'="") , (proddftd.prate'="") do Runtime.setErrMSG("PRODDFTD",32) if ER quit 
	if proddftd.pindex'="" do { quit:ER 

		set X=proddftd.pindex
		do ^UINDX
		if ER do Runtime.setErrMSG("PRODDFTD",3333,"RM") if ER quit
		}
	
	if proddftd.odterm'="" do { quit:ER 

		set X=proddftd.odterm
		do ^UMDT
		if ER do Runtime.setErrMSG("PRODDFTD",3333,"RM") if ER quit
		}


	// Verify data entered with the data stored in the product control file
		
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:proddftd.type")
	
	// PRODDFTD.TRB must be set to 'credit' (1) for nostro accounts
	if (prodctl.nostro=1) , (proddftd.trb'=1) do Runtime.setErrMSG("PRODDFTD",2993) if ER quit 
	
	/*
	   Checks that MINCR is evenly divisible by INCCR.
	   Checks that PRODCTL.MINODA is evenly divisible by INCCR.
	   Checks that MAXCR is evenly divisible by INCCR.
	*/
	
	do { quit:ER 
		
		if 'proddftd.inccr quit 
		
		// Minimum deposit is not evenly divisible by incremental deposit amount
		if (proddftd.mincr) , (proddftd.mincr#proddftd.inccr) do Runtime.setErrMSG("PRODDFTD",1734) if ER quit 

		// Maximum deposit is not evenly divisible by incremental deposit amount
		if (proddftd.maxcr) , (proddftd.maxcr#proddftd.inccr) do Runtime.setErrMSG("PRODDFTD",1687) if ER quit 

		// Minimum opening deposit is not evenly divisible by incremental deposit amount
		if (prodctl.minoda) , (prodctl.minoda#proddftd.inccr) do Runtime.setErrMSG("PRODDFTD",1740) if ER quit 

		quit
		}
	
	// Checks that MINDR and MAXDR are evenly divisible by INCDR.
	do { quit:ER 

		if 'proddftd.incdr quit 
		
		// Minimum withdrawal is not evenly divisible by incremental withdrawal amount
		if (proddftd.mindr) , (proddftd.mindr#proddftd.incdr) do Runtime.setErrMSG("PRODDFTD",1745) if ER quit 

		// Maximum withdrawal is not evenly divisible by incremental withdrawal amount
		if (proddftd.maxdr) , (proddftd.maxdr#proddftd.incdr) do Runtime.setErrMSG("PRODDFTD",1698) if ER quit 
		}
	
	/*
	   Checks that MAXCR is not greater than the MAXBAL.
	   Checks that PRODCTL.MINODA is not greater than the MAXBAL.
	   Checks that MINBAL and MINCR is not greater than MAXBAL.
	*/
	do { quit:ER 

		if 'proddftd.maxbal quit 
		
		// Maximum deposit is greater than the maximum balance
		if (proddftd.maxcr) , (proddftd.maxcr>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1686) if ER quit 

		// Minimum opening deposit is greater than the maximum balance
		if (prodctl.minoda) , (prodctl.minoda>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1739) if ER quit 

		// Minimum balance is greater than the maximum balance
		if (proddftd.minbal) , (proddftd.minbal>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1728) if ER quit 
	
		// Minimum deposit is greater than the maximum balance
		if (proddftd.mincr) , (proddftd.mincr>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1732) if ER quit 

		quit
		}
	
	/*
	   Checks that MAXCR is evenly divisible by the incremental credit.
	   Checks that MAXCR is not greater than the maximum balance.
	   Checks that MAXCR is greater than the minimum deposit.
	*/

	do { quit:ER 

		if 'proddftd.maxcr quit 

		// Maximum deposit is not evenly divisible by incremental deposit amount
		if (proddftd.inccr) , (proddftd.maxcr#proddftd.inccr) do Runtime.setErrMSG("PRODDFTD",1687) if ER quit 

		// Maximum deposit is greater than the maximum balance
		if (proddftd.maxbal), (proddftd.maxcr>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1686) if ER quit 

		// Minimum deposit is greater than the maximum deposit
		if (proddftd.mincr) , (proddftd.maxcr<proddftd.mincr) do Runtime.setErrMSG("PRODDFTD",1733) if ER quit 

		quit
		}
	
	/*
	   Checks that MAXDR is evenly divisible by INCDR.
	   Checks that MAXDR is greater than the minimum withdrawal.
	*/

	do { quit:ER 

		if 'proddftd.maxdr quit 

		// Maximum withdrawal is not evenly divisible by incremental withdrawal amount
		if (proddftd.incdr) , (proddftd.maxdr#proddftd.incdr) do Runtime.setErrMSG("PRODDFTD",1698) if ER quit 

		// Minimum withdrawal is greater than the maximum withdrawal
		if (proddftd.mindr) , (proddftd.maxdr<proddftd.mindr) do Runtime.setErrMSG("PRODDFTD",1744) if ER quit

		quit 
		}
	
	/*
	   Checks that MINBAL is not greater than PRODCTL.MINODA.
	   Checks that MINBAL is not greater than MAXBAL.
	*/

	do { quit:ER 

		if 'proddftd.minbal quit 

		// Minimum balance is greater than the minimum opening deposit
		if (prodctl.minoda) , (proddftd.minbal>prodctl.minoda) do Runtime.setErrMSG("PRODDFTD",1729) if ER quit 

		// Minimum balance is greater than the maximum balance
		if (proddftd.maxbal) , (proddftd.minbal>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1728) if ER quit 

		quit 
		}
	
	/*
	   Checks that MINCR is evenly divisible by the incremental credit.
	   Checks that MINCR is not greater than the Maximum Balance.
	   Checks that MINCR is not greater than the maximum deposit.
	*/

	do { quit:ER 

		if 'proddftd.mincr quit 

		// Minimum deposit is not evenly divisible by incremental deposit amount
		if (proddftd.inccr) , (proddftd.mincr#proddftd.inccr) do Runtime.setErrMSG("PRODDFTD",1734) if ER quit 

		// Minimum deposit is greater than the maximum balance
		if (proddftd.maxbal) , (proddftd.mincr>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1732) if ER quit

		// Minimum deposit is greater than the maximum deposit
		if (proddftd.maxcr) , (proddftd.mincr>proddftd.maxcr) do Runtime.setErrMSG("PRODDFTD",1733) if ER quit 

		quit 
		}
	
	/*
	   Checks that MINDR is evenly divisible by INCDR.
	   Checks that MINDR is not greater than maximum withdrawal.
	*/

	do { quit:ER 

		if 'proddftd.mindr quit 

		// Minimum withdrawal is not evenly divisible by incremental withdrawal amount
		if (proddftd.incdr) , (proddftd.mindr#proddftd.incdr) do Runtime.setErrMSG("PRODDFTD",1745) if ER quit 
		
		// Minimum withdrawal is greater than the maximum withdrawal
		if (proddftd.maxdr) , (proddftd.mindr>proddftd.maxdr) do Runtime.setErrMSG("PRODDFTD",1744) if ER quit 

		quit 
		}
	
	/*
	   Checks that PRODCTL.MINODA is equal to or greater than MINBAL.
	   Checks that PRODCTL.MINODA is evenly divisible by INCCR.
	   Checks that PRODCTL.MINODA is not greater than MAXBAL.
	*/

	do { quit:ER 

		if 'prodctl.minoda quit 
		
		// Minimum balance is greater than the minimum opening deposit
		if (proddftd.minbal) , (prodctl.minoda<proddftd.minbal) do Runtime.setErrMSG("PRODDFTD",1729) if ER quit 

		// Minimum opening deposit is not evenly divisible by incremental deposit amount
		if (proddftd.inccr) , (prodctl.minoda#proddftd.inccr) do Runtime.setErrMSG("PRODDFTD",1740) if ER quit 

		// Minimum opening deposit is greater than the maximum balance
		if (proddftd.maxbal) , (prodctl.minoda>proddftd.maxbal) do Runtime.setErrMSG("PRODDFTD",1739) if ER quit 

		quit 
		}
	
	/*
	   Checks that if NOTICE is a 1 or 2 then
	   NOTMAX is greater than zero and MOTMIN is greater thsn 0
	*/

	if (proddftd.notice=1) ! (proddftd.notice=2) do { quit:ER 
		
		// Maximum days notice effective required for notice products
		if 'proddftd.notmax do Runtime.setErrMSG("PRODDFTD",1685) if ER quit 
		
		// Minimum notice period required for notice products
		if 'proddftd.notmin do Runtime.setErrMSG("PRODDFTD",1738) if ER quit 
		}
	
	// Checks that PRODCTL.ODSITR is evenly divisible by INCDR
	
	// Incremental debit amount must be a factor of the incremental
	if (proddftd.incdr) , (prodctl.odsitr) , (prodctl.odsitr#proddftd.incdr) do Runtime.setErrSTBLER("PRODDFTD","ODSITR") if ER quit 
	
	
VERHOLDS // Verify %HELD input

	type Number I,J
	
	set P=0 for I=1:1:5 if P(I) < 100 set P=P+P(I)

	// Total %HELD exceeds 100%
	if P>100 do Runtime.setErrMSG("PRODDFTD",2668,DESC) if ER quit
	
	for I=5,4,3,2 if P(I) , P(I)' < P(I-1) set ER=1 quit 

	// Percent held # cannot be greater than #
	if ER set J=I-1 do Runtime.setErrMSG("PRODDFTD",24,"DESC~I~J") if ER quit 
	
	for I=1,2,3,4 if P(I) , P(I+1) , D(I+1)' > D(I) set ER=1 quit 

	// Days held for factor # must be greater than #
	if ER set J=I+1 do Runtime.setErrMSG("PRODDFTD",762,"DESC~J~I") if ER quit

	quit

	

vau1 // Trigger AU_GCR - After Update Good Customer Information

	type public RecordPRODDFTD proddftd
	/*
	  ------------------- Revision History -------------------------------

	  11/22/05 - NATRAJAH - 13734
		     General DBI3 cleanup.
   	 ----------------------------------------------------------------------
		 
	   After Update verification for GCRS - Good Customer Status - If GCR status contains a
	   value, GCR processing is invoked.  Scoring tables, etc are required even
	   when the status is fixed or revoked.  When the status if fixed or revoked,
	   the account will not be automatically be scored in the monthly or
	   daily scoring processes.
	*/
	type Public Boolean ER
	type Date DATE

	if proddftd.gcrs do { quit:ER 
		if proddftd.gcrs=3,(proddftd.gcrcd'="") do Runtime.setErrMSG("PRODDFTD",3283) if ER quit 
	
		/*
		   Monthly scoring table, GCR code, and Scoring Frequency
		   are required if GCR status is Dynamic or Fixed
		*/

		
		if proddftd.gcrs'=3 do { quit:ER 
			// Data required in Data Item ~p1
			if proddftd.mscrtbl="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.MSCRTBL") if ER quit
			new P1,P2
			set P1=proddftd.gcrcd
			set P2=proddftd.mscrtbl
			if 'Db.isDefined("UTBLGCRBAL","proddftd.mscrtbl,proddftd.gcrcd") do Runtime.setErrMSG("PRODDFTD",3284,"P1~P2") if ER quit 

			// Data required in Data Item ~p1
			if proddftd.gcrcd="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.DGCRCD") if ER quit
								 
			// Data required in Data Item ~p1
			if proddftd.scrfreq="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.SCRFREQ") if ER quit
			}
		if proddftd.gcrs=1 do { quit:ER 
			// Daily scoring table and daily scoring option are required if GCR status is Dynamic

			// Data required in Data Item ~p1
			if proddftd.dscrtbl="" do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.DSCRTBL") if ER quit
					 
			// Data required in Data Item ~p1
			if 'proddftd.dsopt do Runtime.setErrMSG("PRODDFTD",7531,"PRODDFTD.DSOPT") if ER quit
			}
		}
	
	if proddftd.scrfreq'="" do { quit:ER 
		set DATE=$$NJD^UFRE(Db.getOneRow("TJD","CUVAR",""),proddftd.scrfreq,.AF) quit:ER 
		if AF'=12 do Runtime.setErrMSG("PRODDFTD",3286) if ER quit
		}
	quit
	

vau2 // Trigger AU_GLSC - After update valid G/L set code

	type public RecordPRODDFTD proddftd
	/*
	  ---------------------- Revision History ---------------------------------------------
	 
	    02/17/05 - Kini - 13991	
		   Modified to replace UTBLGLSCX index table with UTBLGLSC
		   since UTBLGLSCX has been obsoleted.
	*/
		           	
	type public Boolean ER
	
	// Invalid GL set code
	if 'Db.isDefined("UTBLGLSC",":proddftd.glsc") do Runtime.setErrSTBLER("PRODDFTD","INVGLSC") if ER quit
		
	quit
	

vbd1 // Trigger BEFORE_DELETE - Before deleting a deposit product type

	type public RecordPRODDFTD proddftd
	/*
	  ---- Revision History ------------------------------------------------
	
	03/28/06 - Sreeram P - CR19269
		   Modified Where Clause in ACN result set.     
	
	01/26/06 - KinI - CR16664
		   Modified to replace obsolete XREFXCRCD index table with ACN.
	
	08/08/01 - SHVACHKINAD - 43897
		   Added check that will invoke error message if user tries
		   to delete product type where all associated accounts have
		   currency codes that are different from product type
		   currency code.

	09/30/99 - MOTENJ - 31126
		   Conversion to PSL.

	*/
	
	type ResultSet rs=Db.select("CID","ACN","TYPE=:proddftd.type")

	// Accounts exist with this product type. Cannot delete
	if 'rs.isEmpty() do Runtime.setErrMSG("PRODDFTD",2981) if ER quit
   	
	// Accounts exist with this product type. Cannot delete
	if proddftd.cnt do Runtime.setErrMSG("PRODDFTD",2981) if ER quit 

	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Inserting a new deposit product

	type public RecordPRODDFTD proddftd
	/*
	  ---------------- Revision History -------------------------------------
	   06/20/06 - chhabris - CR21824
		      Set the logical column 'chkiss' to 0 instead of a Null as
		      'Missing required data item' errors were logged while
		      copieng a new deposit product type.
		      Removed old revision history.
	  -----------------------------------------------------------------------            
	*/
	
	
	new X,XTYPE
	set XTYPE=proddftd.type
	
	/*
	   PRODCTL and PRODDFTD can not be out of sync for grp,cls and TRB
	   Override whatever was set by client and use PRODCTL values.
	*/

	set X=Db.getOneRow("CLS,GRP,TRB","PRODCTL","XTYPE")
	if X="" quit 
	set proddftd.cls=$P(X,$C(9),1)
	set proddftd.grp=$P(X,$C(9),2)
	set proddftd.trb=$P(X,$C(9),3)
	if proddftd.trb="" set proddftd.trb=0
	
	// code from after insert may need to be added here
	
	set X=proddftd.ipf
	do PRODIPF^PROCLBB(.X,.proddftd) quit:ER 
	set proddftd.ipf=X
	
	if 'proddftd.voselec set proddftd.vosfreq=""
	
	if proddftd.swpf'=1 do {
		set proddftd.swpt=""
		set proddftd.swpbo=""
		}
	if 'proddftd.swpf set proddftd.swpopt=""
	
	// Investment Plan allowed with Percentage based swepp only

	if proddftd.swpopt'=2 set proddftd.swppln=""
	
	if 'proddftd.chkeuro do {
		set proddftd.chkiss=0
		set proddftd.chkcnt=""
		set proddftd.chkout=""
		set proddftd.chks=""
		}
	
	if proddftd.cusho=1 set proddftd.cushf=""
	if proddftd.cusho=0 set proddftd.cusha=""
	
	if proddftd.cushf?.N1"/".N do {
		new Z,X
		set X=proddftd.cushf
		// perform division
		#ACCEPT DATE=12/30/03;PGM=John Carroll
		set Z="S X="_X xecute Z
		set proddftd.cushf=$$^SCARND(X,0,,,9)
		}
	
	if proddftd.flttbl do {
		new KEY,DATA set KEY=proddftd.flttbl
		set DATA=Db.getOneRow("KEY","UTBLRTTBL","KEY")
		if DATA="" quit 
		set proddftd.fltp1=""
		set proddftd.fltp2=""
		set proddftd.fltp3=""
		set proddftd.fltp4=""
		set proddftd.fltp5=""
		set proddftd.fltd1=""
		set proddftd.fltd2=""
		set proddftd.fltd3=""
		set proddftd.fltd4=""
		set proddftd.fltd5=""
		}
	
	if proddftd.hldtbl do {
		new KEY,DATA set KEY=proddftd.hldtbl
		set DATA=Db.getOneRow("KEY","UTBLRTTBL","KEY")
		if DATA="" quit 
		set proddftd.hldp1=""
		set proddftd.hldp2=""
		set proddftd.hldp3=""
		set proddftd.hldp4=""
		set proddftd.hldp5=""
		set proddftd.hldd1=""
		set proddftd.hldd2=""
		set proddftd.hldd3=""
		set proddftd.hldd4=""
		set proddftd.hldd5=""
		}
	
	if proddftd.negipo'=2 do {
		set proddftd.negipf=""
		set proddftd.negminop=""
		set proddftd.negminint=""
		}
	
	
	 if (proddftd.anlsys),'(proddftd.anltyp) set proddftd.anltyp=1
	quit
	

vbu1 // Trigger BU_LSP - Before Update of colunn Lease Sec. Proc.

	type public RecordPRODDFTD proddftd
	do proddftd.setAuditFlag(1)
 	/*
								---- Revision History --------------------------------------------
									02/24/00 - VETSENM - 35995
	
								*/

	new ZOOM,xdep,xcp,xlsp
								set ZOOM=proddftd.type
								set xlsp=proddftd.lsp   
	 
	set xdep=Db.getOneRow("DRLAF","PRODCTL","ZOOM")
								set xcp=Db.getOneRow("CRLAF","PRODCTL","ZOOM")
								if (xdep=""),(xcp=""),(xlsp=1) do Runtime.setErrMSG("PRODDFTD",4194) if ER quit
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPRODDFTD proddftd

	if (%O = 2) do vload

	if vobj(proddftd,1).exists() do {

		if proddftd.acctname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ACCTNAME", vRM) quit
	}

	if vobj(proddftd,49).exists() do {

		set X = proddftd.flg if 'X.isNull(),'Db.isDefined("STBLFLG","X") set vRM = $$^MSG(1485,X) do vdderr("FLG", vRM) quit
		if '("01"[proddftd.FNBODP) set vRM=$$^MSG(742,"L") do vdderr("FNBODP", vRM) quit
		if proddftd.iacm.length()>2 set vRM = $$^MSG(1076,2) do vdderr("IACM", vRM) quit
		set X = proddftd.iaf if 'X.isNull(),'Db.isDefined("STBLIAF","X") set vRM = $$^MSG(1485,X) do vdderr("IAF", vRM) quit
		set X = proddftd.icf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]ICF",0) if 'vRM.get().isNull() do vdderr("ICF", vRM) quit
		set X = proddftd.inccr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INCCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.incdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INCDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intgrc if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("INTGRC", vRM) quit
		set X = proddftd.ircb if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("IRCB", vRM) quit
		set X = proddftd.maxacr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxcr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxdrct if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXDRCT", vRM) quit
		set X = proddftd.minacr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MINACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.minbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MINBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.mincr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MINCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.mindr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MINDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.minopt if 'X.isNull(),'Db.isDefined("STBLMINOPT","X") set vRM = $$^MSG(1485,X) do vdderr("MINOPT", vRM) quit
		set X = proddftd.negacrpo if 'X.isNull(),'Db.isDefined("STBLNEGACRPO","X") set vRM = $$^MSG(1485,X) do vdderr("NEGACRPO", vRM) quit
		set X = proddftd.negbalop if 'X.isNull(),'Db.isDefined("STBLNEGBALOP","X") set vRM = $$^MSG(1485,X) do vdderr("NEGBALOP", vRM) quit
		set X = proddftd.negipo if 'X.isNull(),'Db.isDefined("STBLNIPO","X") set vRM = $$^MSG(1485,X) do vdderr("NEGIPO", vRM) quit
		set X = proddftd.negminint if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.NEGMININT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.negminop if 'X.isNull(),'Db.isDefined("STBLNIMIN","X") set vRM = $$^MSG(1485,X) do vdderr("NEGMINOP", vRM) quit
		set X = proddftd.notice if 'X.isNull(),'Db.isDefined("STBLNOTICE","X") set vRM = $$^MSG(1485,X) do vdderr("NOTICE", vRM) quit
		set X = proddftd.notmax if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NOTMAX", vRM) quit
		set X = proddftd.notmin if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NOTMIN", vRM) quit
		set X = proddftd.notnbc if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("NOTNBC", vRM) quit
		set X = proddftd.odo if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("ODO", vRM) quit
		if '("01"[proddftd.ODSF) set vRM=$$^MSG(742,"L") do vdderr("ODSF", vRM) quit
		set X = proddftd.odsm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ODSM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftd.pdag.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PDAG", vRM) quit
		set X = proddftd.pdys if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("PDYS", vRM) quit
		set X = proddftd.popt if 'X.isNull(),'Db.isDefined("STBLPOPT","X") set vRM = $$^MSG(1485,X) do vdderr("POPT", vRM) quit
		if proddftd.scc.length()>3 set vRM = $$^MSG(1076,3) do vdderr("SCC", vRM) quit
		set X = proddftd.trb if 'X.isNull(),'Db.isDefined("STBLDC","X") set vRM = $$^MSG(1485,X) do vdderr("TRB", vRM) quit
	}

	if vobj(proddftd,50).exists() do {

		if '("01"[proddftd.ANLSYS) set vRM=$$^MSG(742,"L") do vdderr("ANLSYS", vRM) quit
		if proddftd.cls.length()>1 set vRM = $$^MSG(1076,1) do vdderr("CLS", vRM) quit
		if '("01"[proddftd.COMM) set vRM=$$^MSG(742,"L") do vdderr("COMM", vRM) quit
		set X = proddftd.commfper if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.COMMFPER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftd.crcd.length()>4 set vRM = $$^MSG(1076,4) do vdderr("CRCD", vRM) quit
		if '("01"[proddftd.CUSTOM1) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM1", vRM) quit
		if '("01"[proddftd.CUSTOM2) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM2", vRM) quit
		if '("01"[proddftd.CUSTOM3) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM3", vRM) quit
		if '("01"[proddftd.EMPLBEN) set vRM=$$^MSG(742,"L") do vdderr("EMPLBEN", vRM) quit
		if proddftd.feepln.length()>5 set vRM = $$^MSG(1076,5) do vdderr("FEEPLN", vRM) quit
		set X = proddftd.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
		set X = proddftd.grp if 'X.isNull(),'Db.isDefined("STBLGRP","CLS=""D"",GRP=:X") set vRM = $$^MSG(1485,X) do vdderr("GRP", vRM) quit
		if '("01"[proddftd.OID) set vRM=$$^MSG(742,"L") do vdderr("OID", vRM) quit
		if '("01"[proddftd.REGCC) set vRM=$$^MSG(742,"L") do vdderr("REGCC", vRM) quit
		set X = proddftd.regd if 'X.isNull(),'Db.isDefined("STBLREGD1","X") set vRM = $$^MSG(1485,X) do vdderr("REGD", vRM) quit
	}

	if vobj(proddftd,51).exists() do {

		if '("01"[proddftd.COLELG) set vRM=$$^MSG(742,"L") do vdderr("COLELG", vRM) quit
		set X = proddftd.flttbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("FLTTBL", vRM) quit
		set X = proddftd.hldtbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("HLDTBL", vRM) quit
		set X = proddftd.ira if 'X.isNull(),'Db.isDefined("STBLIRA","X") set vRM = $$^MSG(1485,X) do vdderr("IRA", vRM) quit
		if '("01"[proddftd.LPSWP) set vRM=$$^MSG(742,"L") do vdderr("LPSWP", vRM) quit
		if '("01"[proddftd.PBI) set vRM=$$^MSG(742,"L") do vdderr("PBI", vRM) quit
		set X = proddftd.rskopt if 'X.isNull(),'Db.isDefined("STBLRSKOPT","X") set vRM = $$^MSG(1485,X) do vdderr("RSKOPT", vRM) quit
		if proddftd.rskpln.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RSKPLN", vRM) quit
	}

	if vobj(proddftd,52).exists() do {

		set X = proddftd.boo if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BOO", vRM) quit
		set X = proddftd.maxbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxfta if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXFTA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxftd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXFTD", vRM) quit
		if '("01"[proddftd.TRUNC) set vRM=$$^MSG(742,"L") do vdderr("TRUNC", vRM) quit
	}

	if vobj(proddftd,53).exists() do {

		set X = proddftd.busopt if 'X.isNull(),'Db.isDefined("STBLBUSOPT","X") set vRM = $$^MSG(1485,X) do vdderr("BUSOPT", vRM) quit
		set X = proddftd.dftmdt if 'X.isNull(),'Db.isDefined("UTBLDFT1","DFTTYP=""MDT"",DFTGRP=:X") set vRM = $$^MSG(1485,X) do vdderr("DFTMDT", vRM) quit
		set X = proddftd.ero if 'X.isNull(),'Db.isDefined("STBLERO","X") set vRM = $$^MSG(1485,X) do vdderr("ERO", vRM) quit
		set X = proddftd.gopt if 'X.isNull(),'Db.isDefined("STBLGOPT","X") set vRM = $$^MSG(1485,X) do vdderr("GOPT", vRM) quit
		set X = proddftd.intavlr if 'X.isNull(),'Db.isDefined("STBLINTAVLR","X") set vRM = $$^MSG(1485,X) do vdderr("INTAVLR", vRM) quit
		set X = proddftd.mdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDT", vRM) quit
		if '("01"[proddftd.MDTEXT) set vRM=$$^MSG(742,"L") do vdderr("MDTEXT", vRM) quit
		set X = proddftd.nbdc if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("NBDC", vRM) quit
		set X = proddftd.org if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ORG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmedat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PMEDAT", vRM) quit
		set X = proddftd.pmo if 'X.isNull(),'Db.isDefined("STBLPMO","X") set vRM = $$^MSG(1485,X) do vdderr("PMO", vRM) quit
		if proddftd.rencd.length()>4 set vRM = $$^MSG(1076,4) do vdderr("RENCD", vRM) quit
		set X = proddftd.rro if 'X.isNull(),'Db.isDefined("STBLRRO","X") set vRM = $$^MSG(1485,X) do vdderr("RRO", vRM) quit
		if proddftd.trm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRM", vRM) quit
	}

	if vobj(proddftd,54).exists() do {

		if '("01"[proddftd.BWF) set vRM=$$^MSG(742,"L") do vdderr("BWF", vRM) quit
		set X = proddftd.iopt if 'X.isNull(),'Db.isDefined("STBLIOPT","X") set vRM = $$^MSG(1485,X) do vdderr("IOPT", vRM) quit
		if '("01"[proddftd.IWCP) set vRM=$$^MSG(742,"L") do vdderr("IWCP", vRM) quit
		set X = proddftd.minavg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MINAVG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.minint if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MININT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftd.proind.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PROIND", vRM) quit
		set X = proddftd.trate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.TRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.trexd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TREXD", vRM) quit
	}

	if vobj(proddftd,55).exists() do {

		if proddftd.pindex.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PINDEX", vRM) quit
		set X = proddftd.pint if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftd.PIPW) set vRM=$$^MSG(742,"L") do vdderr("PIPW", vRM) quit
		set X = proddftd.prate if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.prm if 'X.isNull(),'Db.isDefined("STBLPRM","X") set vRM = $$^MSG(1485,X) do vdderr("PRM", vRM) quit
		set X = proddftd.prs if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("PRS", vRM) quit
		set X = proddftd.pthresh if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PTHRESH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftd.pxtrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PXTRM", vRM) quit
	}

	if vobj(proddftd,57).exists() do {

		set X = proddftd.icpf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]ICPF",0) if 'vRM.get().isNull() do vdderr("ICPF", vRM) quit
		set X = proddftd.intmn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTMN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intmx if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTMX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intramt1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTRAMT1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intramt2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTRAMT2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intramt3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTRAMT3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intrrat1 if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTRRAT1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intrrat2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTRRAT2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intrrat3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTRRAT3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.irf if 'X.isNull(),'Db.isDefined("STBLIRF","X") set vRM = $$^MSG(1485,X) do vdderr("IRF", vRM) quit
		set X = proddftd.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.irsexm if 'X.isNull(),'Db.isDefined("STBLIRS1099","X") set vRM = $$^MSG(1485,X) do vdderr("IRSEXM", vRM) quit
		set X = proddftd.sch if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("SCH", vRM) quit
		if '("01"[proddftd.SEGFLG) set vRM=$$^MSG(742,"L") do vdderr("SEGFLG", vRM) quit
	}

	if vobj(proddftd,60).exists() do {

		if proddftd.compirn.length()>10 set vRM = $$^MSG(1076,10) do vdderr("COMPIRN", vRM) quit
		if proddftd.index.length()>12 set vRM = $$^MSG(1076,12) do vdderr("INDEX", vRM) quit
		if proddftd.index1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX1", vRM) quit
		if proddftd.index10.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX10", vRM) quit
		if proddftd.index2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX2", vRM) quit
		if proddftd.index3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX3", vRM) quit
		if proddftd.index4.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX4", vRM) quit
		if proddftd.index5.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX5", vRM) quit
		if proddftd.index6.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX6", vRM) quit
		if proddftd.index7.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX7", vRM) quit
		if proddftd.index8.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX8", vRM) quit
		if proddftd.index9.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX9", vRM) quit
		set X = proddftd.intchkfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]INTCHKFRE",0) if 'vRM.get().isNull() do vdderr("INTCHKFRE", vRM) quit
		set X = proddftd.intchkmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTCHKMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
		set X = proddftd.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
		set X = proddftd.intmxdc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTMXDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intmxdl if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTMXDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intmxic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTMXIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intmxil if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INTMXIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.intoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("INTOFF", vRM) quit
		if proddftd.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
		set X = proddftd.ipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]IPF",0) if 'vRM.get().isNull() do vdderr("IPF", vRM) quit
		set X = proddftd.negipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]NEGIPF",0) if 'vRM.get().isNull() do vdderr("NEGIPF", vRM) quit
		set X = proddftd.odlim if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ODLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftd.odterm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ODTERM", vRM) quit
		set X = proddftd.pmxddc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXDDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxddl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXDDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxdic if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXDIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxdil if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXDIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxpdc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXPDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxpdl if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXPDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxpic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXPIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.pmxpil if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PMXPIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.prcb if 'X.isNull(),'Db.isDefined("STBLPRCB","X") set vRM = $$^MSG(1485,X) do vdderr("PRCB", vRM) quit
		if proddftd.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
		if proddftd.trmmx.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRMMX", vRM) quit
	}

	if vobj(proddftd,61).exists() do {

		if '("01"[proddftd.CHKACTF) set vRM=$$^MSG(742,"L") do vdderr("CHKACTF", vRM) quit
		set X = proddftd.chkcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CHKCNT", vRM) quit
		if '("01"[proddftd.CHKEURO) set vRM=$$^MSG(742,"L") do vdderr("CHKEURO", vRM) quit
		if '("01"[proddftd.CHKISS) set vRM=$$^MSG(742,"L") do vdderr("CHKISS", vRM) quit
		set X = proddftd.chkout if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CHKOUT", vRM) quit
		set X = proddftd.chks if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKS", vRM) quit
		set X = proddftd.fltd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD1", vRM) quit
		set X = proddftd.fltd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD2", vRM) quit
		set X = proddftd.fltd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD3", vRM) quit
		set X = proddftd.fltd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD4", vRM) quit
		set X = proddftd.fltd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD5", vRM) quit
		set X = proddftd.fltp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP1", vRM) quit
		set X = proddftd.fltp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP2", vRM) quit
		set X = proddftd.fltp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP3", vRM) quit
		set X = proddftd.fltp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP4", vRM) quit
		set X = proddftd.fltp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP5", vRM) quit
		set X = proddftd.hldd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD1", vRM) quit
		set X = proddftd.hldd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD2", vRM) quit
		set X = proddftd.hldd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD3", vRM) quit
		set X = proddftd.hldd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD4", vRM) quit
		set X = proddftd.hldd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD5", vRM) quit
		set X = proddftd.hldp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP1", vRM) quit
		set X = proddftd.hldp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP2", vRM) quit
		set X = proddftd.hldp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP3", vRM) quit
		set X = proddftd.hldp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP4", vRM) quit
		set X = proddftd.hldp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP5", vRM) quit
	}

	if vobj(proddftd,62).exists() do {

		if '("01"[proddftd.EFTDD) set vRM=$$^MSG(742,"L") do vdderr("EFTDD", vRM) quit
		if '("01"[proddftd.EFTDEB) set vRM=$$^MSG(742,"L") do vdderr("EFTDEB", vRM) quit
		if '("01"[proddftd.EFTREQ) set vRM=$$^MSG(742,"L") do vdderr("EFTREQ", vRM) quit
		if '("01"[proddftd.ELIGBPAY) set vRM=$$^MSG(742,"L") do vdderr("ELIGBPAY", vRM) quit
		set X = proddftd.feeopt if 'X.isNull(),'Db.isDefined("STBLFEEF","X") set vRM = $$^MSG(1485,X) do vdderr("FEEOPT", vRM) quit
		set X = proddftd.ftrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.FTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxtrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.mintrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MINTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.otrtrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.OTRTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.scfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]SCFRE",0) if 'vRM.get().isNull() do vdderr("SCFRE", vRM) quit
		if '("01"[proddftd.SMET) set vRM=$$^MSG(742,"L") do vdderr("SMET", vRM) quit
		set X = proddftd.swpbo if 'X.isNull(),'Db.isDefined("STBLBBO","X") set vRM = $$^MSG(1485,X) do vdderr("SWPBO", vRM) quit
		set X = proddftd.swpf if 'X.isNull(),'Db.isDefined("STBLSWPF","X") set vRM = $$^MSG(1485,X) do vdderr("SWPF", vRM) quit
		if '("01"[proddftd.SWPNI) set vRM=$$^MSG(742,"L") do vdderr("SWPNI", vRM) quit
		set X = proddftd.swpopt if 'X.isNull(),'Db.isDefined("STBLSWPO","X") set vRM = $$^MSG(1485,X) do vdderr("SWPOPT", vRM) quit
		set X = proddftd.swppln if 'X.isNull(),'Db.isDefined("UTBLINVPLN","X") set vRM = $$^MSG(1485,X) do vdderr("SWPPLN", vRM) quit
		set X = proddftd.swpt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SWPT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftd,63).exists() do {

		set X = proddftd.anlacm if 'X.isNull(),'Db.isDefined("STBLIACM","X") set vRM = $$^MSG(1485,X) do vdderr("ANLACM", vRM) quit
		set X = proddftd.anlchg if 'X.isNull(),'Db.isDefined("STBLANLC","X") set vRM = $$^MSG(1485,X) do vdderr("ANLCHG", vRM) quit
		set X = proddftd.anlicf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]ANLICF",0) if 'vRM.get().isNull() do vdderr("ANLICF", vRM) quit
		if proddftd.anlidx.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ANLIDX", vRM) quit
		set X = proddftd.anlirf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]ANLIRF",0) if 'vRM.get().isNull() do vdderr("ANLIRF", vRM) quit
		set X = proddftd.anlirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ANLIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.anlmba if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ANLMBA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.anlmbo if 'X.isNull(),'Db.isDefined("STBLANLM","X") set vRM = $$^MSG(1485,X) do vdderr("ANLMBO", vRM) quit
		set X = proddftd.anlrcb if 'X.isNull(),'Db.isDefined("STBLANLI","X") set vRM = $$^MSG(1485,X) do vdderr("ANLRCB", vRM) quit
		set X = proddftd.upfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]UPFRE",0) if 'vRM.get().isNull() do vdderr("UPFRE", vRM) quit
		if proddftd.uspl.length()>5 set vRM = $$^MSG(1076,5) do vdderr("USPL", vRM) quit
	}

	if vobj(proddftd,66).exists() do {

		if '("01"[proddftd.VOSELEC) set vRM=$$^MSG(742,"L") do vdderr("VOSELEC", vRM) quit
		set X = proddftd.vosfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]VOSFREQ",0) if 'vRM.get().isNull() do vdderr("VOSFREQ", vRM) quit
		if '("01"[proddftd.VOSTRO) set vRM=$$^MSG(742,"L") do vdderr("VOSTRO", vRM) quit
	}

	if vobj(proddftd,100).exists() do {

		set X = proddftd.mmda1 if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MMDA1", vRM) quit
		set X = proddftd.mmda2 if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MMDA2", vRM) quit
		set X = proddftd.mmda4 if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]MMDA4",0) if 'vRM.get().isNull() do vdderr("MMDA4", vRM) quit
		set X = proddftd.nbodplm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.NBODPLM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.nsflim if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.NSFLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.ntodplm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.NTODPLM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.odbb if 'X.isNull(),'Db.isDefined("STBLODBB","X") set vRM = $$^MSG(1485,X) do vdderr("ODBB", vRM) quit
		set X = proddftd.odsbb if 'X.isNull(),'Db.isDefined("STBLODBB","X") set vRM = $$^MSG(1485,X) do vdderr("ODSBB", vRM) quit
		set X = proddftd.rc if 'X.isNull(),'Db.isDefined("STBLRC","X") set vRM = $$^MSG(1485,X) do vdderr("RC", vRM) quit
	}

	if vobj(proddftd,107).exists() do {

		set X = proddftd.bgtfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]BGTFREQ",0) if 'vRM.get().isNull() do vdderr("BGTFREQ", vRM) quit
		set X = proddftd.bgtoffst if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("BGTOFFST", vRM) quit
		if '("01"[proddftd.BGTPRO) set vRM=$$^MSG(742,"L") do vdderr("BGTPRO", vRM) quit
	}

	if vobj(proddftd,111).exists() do {

		set X = proddftd.whexr if 'X.isNull(),'Db.isDefined("STBLEXR","X") set vRM = $$^MSG(1485,X) do vdderr("WHEXR", vRM) quit
	}

	if vobj(proddftd,114).exists() do {

		set X = proddftd.cusha if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.CUSHA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.cushf if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,9) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.CUSHF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.cusho if 'X.isNull(),'Db.isDefined("STBLCUSHO","X") set vRM = $$^MSG(1485,X) do vdderr("CUSHO", vRM) quit
		set X = proddftd.ddmg if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("DDMG", vRM) quit
		set X = proddftd.ddml if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("DDML", vRM) quit
		set X = proddftd.dfda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.DFDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.oda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ODA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.odmg if 'X.isNull(),'Db.isDefined("STBLODM","X") set vRM = $$^MSG(1485,X) do vdderr("ODMG", vRM) quit
		set X = proddftd.odml if 'X.isNull(),'Db.isDefined("STBLODM","X") set vRM = $$^MSG(1485,X) do vdderr("ODML", vRM) quit
		set X = proddftd.sda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.sdmg if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("SDMG", vRM) quit
		set X = proddftd.sdml if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("SDML", vRM) quit
		set X = proddftd.sdo if 'X.isNull(),'Db.isDefined("STBLSDO","X") set vRM = $$^MSG(1485,X) do vdderr("SDO", vRM) quit
	}

	if vobj(proddftd,115).exists() do {

		if '("01"[proddftd.SHAREACCT) set vRM=$$^MSG(742,"L") do vdderr("SHAREACCT", vRM) quit
	}

	if vobj(proddftd,210).exists() do {

		set X = proddftd.abmc if 'X.isNull(),'Db.isDefined("STBLABMC","X") set vRM = $$^MSG(1485,X) do vdderr("ABMC", vRM) quit
		if '("01"[proddftd.ANFLG) set vRM=$$^MSG(742,"L") do vdderr("ANFLG", vRM) quit
		if '("01"[proddftd.AUBBF) set vRM=$$^MSG(742,"L") do vdderr("AUBBF", vRM) quit
		set X = proddftd.aubcu if 'X.isNull(),'Db.isDefined("UTBLECT","X") set vRM = $$^MSG(1485,X) do vdderr("AUBCU", vRM) quit
		set X = proddftd.autaf if 'X.isNull(),'Db.isDefined("STBLAUO","X") set vRM = $$^MSG(1485,X) do vdderr("AUTAF", vRM) quit
		set X = proddftd.odeao if 'X.isNull(),'Db.isDefined("STBLAUO","X") set vRM = $$^MSG(1485,X) do vdderr("ODEAO", vRM) quit
		if '("01"[proddftd.SPF) set vRM=$$^MSG(742,"L") do vdderr("SPF", vRM) quit
	}

	if vobj(proddftd,400).exists() do {

		set X = proddftd.lbbdo if 'X.isNull(),'Db.isDefined("STBLLBBDO","X") set vRM = $$^MSG(1485,X) do vdderr("LBBDO", vRM) quit
		set X = proddftd.lbcm if 'X.isNull(),'Db.isDefined("STBLLBCM","X") set vRM = $$^MSG(1485,X) do vdderr("LBCM", vRM) quit
		set X = proddftd.lbcp if 'X.isNull(),'Db.isDefined("STBLLBCP","X") set vRM = $$^MSG(1485,X) do vdderr("LBCP", vRM) quit
		set X = proddftd.lbgpna if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LBGPNA", vRM) quit
	}

	if vobj(proddftd,425).exists() do {

		set X = proddftd.ithlddays if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ITHLDDAYS", vRM) quit
	}

	if vobj(proddftd,426).exists() do {

		set X = proddftd.dscrtbl if 'X.isNull(),'Db.isDefined("UTBLGCRDS","X") set vRM = $$^MSG(1485,X) do vdderr("DSCRTBL", vRM) quit
		set X = proddftd.dsopt if 'X.isNull(),'Db.isDefined("STBLDSOPT","X") set vRM = $$^MSG(1485,X) do vdderr("DSOPT", vRM) quit
		set X = proddftd.gcrcd if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("GCRCD", vRM) quit
		set X = proddftd.gcrs if 'X.isNull(),'Db.isDefined("STBLGCROPT","X") set vRM = $$^MSG(1485,X) do vdderr("GCRS", vRM) quit
		set X = proddftd.hsovrdm if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HSOVRDM", vRM) quit
		set X = proddftd.inicvopt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.INICVOPT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.lsovrdm if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LSOVRDM", vRM) quit
		if proddftd.mscrtbl.length()>8 set vRM = $$^MSG(1076,8) do vdderr("MSCRTBL", vRM) quit
		set X = proddftd.odlimopt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODLIMOPT", vRM) quit
		set X = proddftd.retmxfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.RETMXFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.scrfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]SCRFREQ",0) if 'vRM.get().isNull() do vdderr("SCRFREQ", vRM) quit
	}

	if vobj(proddftd,428).exists() do {

		if '("01"[proddftd.AIACRF) set vRM=$$^MSG(742,"L") do vdderr("AIACRF", vRM) quit
		if proddftd.aiindex.length()>20 set vRM = $$^MSG(1076,20) do vdderr("AIINDEX", vRM) quit
		set X = proddftd.aiintfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]AIINTFRE",0) if 'vRM.get().isNull() do vdderr("AIINTFRE", vRM) quit
		set X = proddftd.aiintmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("AIINTMAT", vRM) quit
		set X = proddftd.aiintspr if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("AIINTSPR", vRM) quit
		set X = proddftd.aiiopt if 'X.isNull(),'Db.isDefined("STBLIOPT","X") set vRM = $$^MSG(1485,X) do vdderr("AIIOPT", vRM) quit
		set X = proddftd.aiipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]AIIPF",0) if 'vRM.get().isNull() do vdderr("AIIPF", vRM) quit
		set X = proddftd.aiirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.AIIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.airdet if 'X.isNull(),'Db.isDefined("STBLAIRD","X") set vRM = $$^MSG(1485,X) do vdderr("AIRDET", vRM) quit
		if proddftd.airndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("AIRNDMTD", vRM) quit
		set X = proddftd.imo if 'X.isNull(),'Db.isDefined("STBLIMO","X") set vRM = $$^MSG(1485,X) do vdderr("IMO", vRM) quit
		set X = proddftd.maxempc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXEMPC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxemprc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXEMPRC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxseg if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXSEG", vRM) quit
		if '("01"[proddftd.OFFPROC) set vRM=$$^MSG(742,"L") do vdderr("OFFPROC", vRM) quit
		set X = proddftd.pengr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PENGR", vRM) quit
		set X = proddftd.pratio if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PRATIO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.segacr if 'X.isNull(),'Db.isDefined("STBLSAOP","X") set vRM = $$^MSG(1485,X) do vdderr("SEGACR", vRM) quit
		set X = proddftd.segmdd if 'X.isNull(),'Db.isDefined("STBLSMDO","X") set vRM = $$^MSG(1485,X) do vdderr("SEGMDD", vRM) quit
		if proddftd.segper.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SEGPER", vRM) quit
		set X = proddftd.segpopt if 'X.isNull(),'Db.isDefined("STBLSEGPOPT","X") set vRM = $$^MSG(1485,X) do vdderr("SEGPOPT", vRM) quit
		set X = proddftd.segzirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SEGZIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.swpi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SWPI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.swri if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SWRI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.totwfr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.TOTWFR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.wdord if 'X.isNull(),'Db.isDefined("STBLWDORD","X") set vRM = $$^MSG(1485,X) do vdderr("WDORD", vRM) quit
		set X = proddftd.wdprio if 'X.isNull(),'Db.isDefined("STBLWDPRIOR","X") set vRM = $$^MSG(1485,X) do vdderr("WDPRIO", vRM) quit
	}

	if vobj(proddftd,431).exists() do {

		set X = proddftd.sfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTD]SFRE",0) if 'vRM.get().isNull() do vdderr("SFRE", vRM) quit
	}

	if vobj(proddftd,432).exists() do {

		if '("01"[proddftd.DEFINADJ) set vRM=$$^MSG(742,"L") do vdderr("DEFINADJ", vRM) quit
	}

	if vobj(proddftd,434).exists() do {

		set X = proddftd.dgrace if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DGRACE", vRM) quit
		if '("01"[proddftd.GIS) set vRM=$$^MSG(742,"L") do vdderr("GIS", vRM) quit
		if '("01"[proddftd.PIS) set vRM=$$^MSG(742,"L") do vdderr("PIS", vRM) quit
		if '("01"[proddftd.SWPDELIP) set vRM=$$^MSG(742,"L") do vdderr("SWPDELIP", vRM) quit
	}

	if vobj(proddftd,435).exists() do {

		if '("01"[proddftd.MINBALFL) set vRM=$$^MSG(742,"L") do vdderr("MINBALFL", vRM) quit
	}

	if vobj(proddftd,436).exists() do {

		set X = proddftd.dumi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.DUMI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.idomi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.IDOMI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.niao if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("NIAO", vRM) quit
		if '("01"[proddftd.PDIV) set vRM=$$^MSG(742,"L") do vdderr("PDIV", vRM) quit
		set X = proddftd.sdomi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SDOMI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.ufindex if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("UFINDEX", vRM) quit
	}

	if vobj(proddftd,437).exists() do {

		set X = proddftd.iep if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.IEP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.lafm if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("LAFM", vRM) quit
		if '("01"[proddftd.LSP) set vRM=$$^MSG(742,"L") do vdderr("LSP", vRM) quit
		set X = proddftd.oborirp if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.OBORIRP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftd,438).exists() do {

		if '("01"[proddftd.MT320) set vRM=$$^MSG(742,"L") do vdderr("MT320", vRM) quit
	}

	if vobj(proddftd,440).exists() do {

		if proddftd.cogs.length()>4 set vRM = $$^MSG(1076,4) do vdderr("COGS", vRM) quit
		set X = proddftd.com if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COM", vRM) quit
		set X = proddftd.cot if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COT", vRM) quit
		set X = proddftd.dtco if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DTCO", vRM) quit
	}

	if vobj(proddftd,444).exists() do {

		set X = proddftd.anlbalrf if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("ANLBALRF", vRM) quit
		set X = proddftd.anlbalrm if 'X.isNull(),'Db.isDefined("STBLRNDMTH","X") set vRM = $$^MSG(1485,X) do vdderr("ANLBALRM", vRM) quit
		set X = proddftd.anlbefe if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.ANLBEFE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftd.ANLFPR) set vRM=$$^MSG(742,"L") do vdderr("ANLFPR", vRM) quit
		set X = proddftd.anloffdy if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ANLOFFDY", vRM) quit
		set X = proddftd.anlsnl if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ANLSNL", vRM) quit
		set X = proddftd.anltyp if 'X.isNull(),'Db.isDefined("STBLANLTYP","X") set vRM = $$^MSG(1485,X) do vdderr("ANLTYP", vRM) quit
		if '("01"[proddftd.DEDINTPD) set vRM=$$^MSG(742,"L") do vdderr("DEDINTPD", vRM) quit
	}

	if vobj(proddftd,446).exists() do {

		if '("01"[proddftd.REGDD) set vRM=$$^MSG(742,"L") do vdderr("REGDD", vRM) quit
		set X = proddftd.rmtbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.RMTBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.rmtthr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.RMTTHR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.swpropt if 'X.isNull(),'Db.isDefined("STBLSWPROPT","X") set vRM = $$^MSG(1485,X) do vdderr("SWPROPT", vRM) quit
		set X = proddftd.swptr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.SWPTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftd,448).exists() do {

		set X = proddftd.sgncrd if 'X.isNull(),'Db.isDefined("STBLSGNCRD","X") set vRM = $$^MSG(1485,X) do vdderr("SGNCRD", vRM) quit
	}

	if vobj(proddftd,450).exists() do {

		set X = proddftd.awti if 'X.isNull(),'Db.isDefined("UTBLAWTI","X") set vRM = $$^MSG(1485,X) do vdderr("AWTI", vRM) quit
		if '("01"[proddftd.AWTP) set vRM=$$^MSG(742,"L") do vdderr("AWTP", vRM) quit
		set X = proddftd.bwsched if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("BWSCHED", vRM) quit
		set X = proddftd.erracct if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("ERRACCT", vRM) quit
		if '("01"[proddftd.ERRFLG) set vRM=$$^MSG(742,"L") do vdderr("ERRFLG", vRM) quit
	}

	if vobj(proddftd,452).exists() do {

		set X = proddftd.rce if 'X.isNull(),'Db.isDefined("STBLSRCE","X") set vRM = $$^MSG(1485,X) do vdderr("RCE", vRM) quit
		if proddftd.rsintspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("RSINTSPR", vRM) quit
		if proddftd.rsrndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RSRNDMTD", vRM) quit
	}

	if vobj(proddftd,456).exists() do {

		if '("01"[proddftd.BLPROC) set vRM=$$^MSG(742,"L") do vdderr("BLPROC", vRM) quit
		set X = proddftd.colexthrsh if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.COLEXTHRSH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.colextrdys if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("COLEXTRDYS", vRM) quit
		set X = proddftd.stmtsrt if 'X.isNull(),'Db.isDefined("STBLSTMTSRT","X") set vRM = $$^MSG(1485,X) do vdderr("STMTSRT", vRM) quit
	}

	if vobj(proddftd,458).exists() do {

		set X = proddftd.slc if 'X.isNull(),'Db.isDefined("STBLSBSLC","X") set vRM = $$^MSG(1485,X) do vdderr("SLC", vRM) quit
	}

	if vobj(proddftd,462).exists() do {

		if proddftd.intspra.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPRA", vRM) quit
		if proddftd.intsprp.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPRP", vRM) quit
		if proddftd.intspru.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPRU", vRM) quit
	}

	if vobj(proddftd,464).exists() do {

		if '("01"[proddftd.CUMDEP) set vRM=$$^MSG(742,"L") do vdderr("CUMDEP", vRM) quit
		if '("01"[proddftd.DAPARWD) set vRM=$$^MSG(742,"L") do vdderr("DAPARWD", vRM) quit
		set X = proddftd.lfeepr if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.LFEEPR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxsaadv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.MAXSAADV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.maxsnadv if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXSNADV", vRM) quit
		set X = proddftd.minnsreq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MINNSREQ", vRM) quit
		set X = proddftd.prclfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.PRCLFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftd.SCHPROC) set vRM=$$^MSG(742,"L") do vdderr("SCHPROC", vRM) quit
	}

	if vobj(proddftd,466).exists() do {

		if proddftd.ctfgrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("CTFGRP", vRM) quit
	}

	if vobj(proddftd,470).exists() do {

		set X = proddftd.balavlcode if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BALAVLCODE", vRM) quit
	}

	if vobj(proddftd,900).exists() do {

		set X = proddftd.itro if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("ITRO", vRM) quit
	}

	if vobj(proddftd,901).exists() do {

		set X = proddftd.costfa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.COSTFA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftd.costfp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTD.COSTFP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftd.papln.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAPLN", vRM) quit
	}
	set X = proddftd.type if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODDFTD","MSG",979,"PRODDFTD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPRODDFTD proddftd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("TYPE")
	set voldkey = vux.piece("|",1),vobj(proddftd,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(proddftd,-3) = vnewkey // Copy new keys into object
	type RecordPRODDFTD vnewrec = proddftd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PRODDFTD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(proddftd,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordPRODDFTD proddftd
	type public String vpar

	type String vERRMSG

	if Db.isDefined("DEP","TYPE=:proddftd.type") set vERRMSG = $$^MSG(8563,"DEP(TYPE) -> PRODDFTD(TYPE)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	quit
