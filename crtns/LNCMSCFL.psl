LNCMSCFL(RecordLNCYCMSC lncycmsc, String vpar, Boolean vparNorm) // LNCYCMSC - Loan Cycled Items - Miscellaneous Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (32)             11/22/2003
	// Trigger Definition (4)                      03/15/2007
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lncycmsc.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lncycmsc,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lncycmsc,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lncycmsc.cid
	type String TYP = lncycmsc.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNCYCMSC",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNCYCMSC","CID = :lncycmsc.cid and TYP = :lncycmsc.typ") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP

	type RecordLNCYCMSC lncycmsc = Db.getRecord("LNCYCMSC","CID=:CID,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do lncycmsc.setMode(2)

		do LNCMSCFL(lncycmsc,vpar)
	}
	else  do VINDEX(lncycmsc)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNCYCMSC lncycmsc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNCYCMSC","CID = :lncycmsc.cid and TYP = :lncycmsc.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lncycmsc)) S ^LNCYC("MSC",vobj(lncycmsc,-3),vobj(lncycmsc,-4))=vobj(lncycmsc)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lncycmsc)            // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lncycmsc) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNCYCMSC lncycmsc

	if vpar["/INDEX/" do VINDEX(.lncycmsc)                 // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lncycmsc)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNCYC("MSC",vobj(lncycmsc,-3),vobj(lncycmsc,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNCYCMSC lncycmsc

	// Type local variables for access keys for defaults
	type public String CID
	type public String TYP

	if lncycmsc.apr.isNull() set lncycmsc.apr = 0          // apr
	if lncycmsc.pbal.isNull() set lncycmsc.pbal = 100      // pbal
	if lncycmsc.rcm.isNull() set lncycmsc.rcm = 0          // rcm
	quit


vreqn // Validate required data items

	type public RecordLNCYCMSC lncycmsc

	if lncycmsc.apr.isNull() do vreqerr("APR") quit
	if lncycmsc.rcm.isNull() do vreqerr("RCM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNCYCMSC lncycmsc

	if lncycmsc.cid.isNull() do vreqerr("CID") quit
	if lncycmsc.typ.isNull() do vreqerr("TYP") quit

		if vx("APR").exists(),lncycmsc.apr.isNull() do vreqerr("APR") quit
		if vx("RCM").exists(),lncycmsc.rcm.isNull() do vreqerr("RCM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCMSC","MSG",1767,"LNCYCMSC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNCYCMSC lncycmsc
	if 'lncycmsc.cid.isNull() set vfkey("^ACN("_""""_lncycmsc.cid_""""_","_50_")")="LNCYCMSC(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNCYCMSC lncycmsc
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lncycmsc.cid") set vERRMSG = $$^MSG(8563,"LNCYCMSC(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("NXADT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete LNCYCMSC

	type public RecordLNCYCMSC lncycmsc
	/*
								---------- Revision History ------------------------------------------

	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
		   
	07/24/01 - MBUIM - 46110
		   Corrected the code that only updates the ln.mscp flag. An
		   account integrity error "Misc cycling Flag Inaccurate in
		   Account", was received when typ "MSC" was deleted and not the
		   "MSC1", or "MSC2"... The previous syntax was getting all
		   MSC types i.e MSC,MSC1,MSC2 etc.
		   ln.mscp is only updated when typ is "MSC"

	-----------------------------------------------------------------------
	*/		   

	// delete flag in loan record

	type public Number CID

	type RecordLN ln=Db.getRecord("LN","CID",1)
		
	if lncycmsc.typ="MSC" set ln.mscp=0
	
	do ln.save()

	do Db.delete("DAYENDAOAMO","NXADT=:lncycmsc.nxadt AND TYP=:lncycmsc.typ AND PAYEE=:lncycmsc.payee AND PLAN=:lncycmsc.plan AND CID=:lncycmsc.cid")

	quit
	

vai1 // Trigger AFTER_INSERT - After Insert LNCYCMSC

	type public RecordLNCYCMSC lncycmsc
	/*
	---------- Revision History ------------------------------------------

	03/15/07 - KumarSS - CR 25177
		   Removed Invalid Unicode Characters.

	01/27/07 - SENTHIL J. KUMAR - CR 24983
		   Moved DAYENDAOAMO record creation above %ProcessMode check
		   that was quitting in create mode.  Ensures DAYENDAOAMO
		   records are created properly so the cycled item amortizes.

	10/30/06 - KELLYP - CR 23814
		   Removed the setting of the audit flag for loan column 
		   changes.  This prevents a fatal integ from appearing on
		   the account after an account is opened with financed
		   cycled items and a backdated disbursement is processed.

	10/27/06 - KELLYP - CR 23304
		   Added edit checks on beginning/end dates defined in the
		   cycled item's corresponding AOAMO record.  Also removed
		   pre-2003 revision history.
	
	01/21/06 - MBUIM - 19700
	   	   Replaced column aoamo.count with column aoamo.cnt. COUNT 
	   	   is an oracle reserve word and was process issues 
	   	   e.g error returned in DBSLOAD when running function 
	   	   @DDPXFR - manual transfers to FEPS.
	   	      
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.

	-----------------------------------------------------------------------
	*/

	type public Boolean ER	
	
	type RecordLN ln=Db.getRecord("LN","CID=:lncycmsc.cid",1)

	if '(%ProcessMode=2) do { quit:ER

		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lncycmsc.typ,PAYEE=:lncycmsc.payee,PLAN=:lncycmsc.plan",1)

		// Payee ended on ~p1
		if (aoamo.pldate),(%SystemDate > aoamo.pldate) do Runtime.setErrMSG("LNCYCMSC","2151",aoamo.pldate.toString()) quit:ER
		
		// Payee does not begin until ~p1
		if (aoamo.pbdate),(%SystemDate < aoamo.pbdate) do Runtime.setErrMSG("LNCYCMSC","2150",aoamo.pbdate.toString()) quit:ER

		// Update loan credit limit for insurance premiums
		if lncycmsc.amt,lncycmsc.pdby do {
			
			type RecordSTBLIPDBY sipdby=Db.getRecord("STBLIPDBY","KEY=:lncycmsc.pdby",1)
							
			if 'sipdby.add quit 

			// Recalculate payment and disclosure information
			do PROC^LNCYCPRO(.ln)

			set ln.crlmt=ln.crlmt+lncycmsc.amt
			set ln.udbal=ln.udbal+lncycmsc.amt
			set ln.aoamtorg=ln.aoamtorg+lncycmsc.amt
			}
	
		// Update flag in loan record
		if lncycmsc.typ="MSC" set ln.mscp=1

																do ln.save() 

		// Missing required data item ~p1
		if lncycmsc.payee.isNull() do Runtime.setErrMSG("LNCYCMSC",1767,"PAYEE") quit:ER
		if lncycmsc.plan.isNull() do Runtime.setErrMSG("LNCYCMSC",1767,"PLAN") quit:ER
		
		// Update Miscellaneous/Ins/Def Fee User Table COUNT
		set aoamo.cnt=aoamo.cnt+1
		
		do aoamo.save()
		
		// To insert the data into the DAYENDAOAMO table manually.
		type RecordDAYENDAOAMO daoamo=Db.getRecord("DAYENDAOAMO","NXADT=:lncycmsc.nxadt,TYP=:lncycmsc.typ,PAYEE=:lncycmsc.payee,PLAN=:lncycmsc.plan,CID=:lncycmsc.cid",1)
		if 'daoamo.getMode() do daoamo.bypassSave()

		}
		 
	// Remaining only occurs if in VerifyMode
	if '(%ProcessMode=2) quit 
	
	// Verify Misc Add-on Information
	if lncycmsc.cntr'<lncycmsc.term quit 
	if lncycmsc.caltd,+lncycmsc.caltd=+lncycmsc.amt quit 
	if ln.stat'=4 quit 

	// Closed Account with Non-Performing Fee Balance
	if lncycmsc.npda'=0 do Runtime.setErrXBAD("LNCYCMSC",94) quit:ER 

	// Closed Account with Deferred Fee Balance
	if lncycmsc.amt-lncycmsc.caltd-lncycmsc.npda do Runtime.setErrXBAD("LNCYCMSC",93) quit:ER 
	quit 
	

vau1 // Trigger AU_NXADT - After Update Next Action Date

	type public RecordLNCYCMSC lncycmsc
	/*
	---------- Revision History ------------------------------------------

	12/21/06 - KELLYP - CR 24622
		   Added this new trigger to delete the old DAYENDAOAMO record
		   and create a new one when the Next Action Date on the cycled 
		   item is modified.

	-----------------------------------------------------------------------
	*/

	type Date OLDDT

	set OLDDT = lncycmsc.nxadt.oldVal

	do Db.delete("DAYENDAOAMO","NXADT=:OLDDT AND TYP=:lncycmsc.typ AND PAYEE=:lncycmsc.payee AND PLAN=:lncycmsc.plan AND CID=:lncycmsc.cid")

	type RecordDAYENDAOAMO daoamo = Db.getRecord("DAYENDAOAMO","NXADT=:lncycmsc.nxadt,TYP=:lncycmsc.typ,PAYEE=:lncycmsc.payee,PLAN=:lncycmsc.plan,CID=:lncycmsc.cid",1)

	if daoamo.getMode() quit

	do daoamo.bypassSave()

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert LNCYCMSC

	type public RecordLNCYCMSC lncycmsc
	
	/*
	---------- Revision History ------------------------------------------

	01/10/06 - KELLYP - CR 24662
		   Modified to remove DAYENDAOAMO record creation.  This is
		   already handled by the after insert trigger.  Also removed
		   pre-2004 revision history.
	
	09/21/06 - KELLYP - CR 23233
		   Modified to fix an issue where lncycmsc.itrm was being 
		   changed to append an "A" in order to determine the ENDDT. 
		   Modified to use a scratch variable for this purpose (as P01 
		   used to) so as not to alter the itrm value.  Also fixed the
		   NP loop to correct an issue where lncycmsc.trm was being
		   calculated improperly.

	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.		

	*/

	type public Boolean ER
	
	type Boolean STOP
	type Date ENDDT,NJD
	type Number FA,FANP,NP
	type String FRE
		
	// set defaults if the fields have not been provided
		
	if lncycmsc.typ.isNull()!lncycmsc.payee.isNull()!lncycmsc.plan.isNull() quit
	
	type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lncycmsc.typ,PAYEE=:lncycmsc.payee,PLAN=:lncycmsc.plan",1)

	if 'aoamo.getMode() quit

	type RecordLN ln=Db.getRecord("LN","CID=:lncycmsc.cid",1)
				
	set lncycmsc.caltd=0
	set lncycmsc.cntr=0
	
	if lncycmsc.freq.isNull() set lncycmsc.freq=aoamo.fre
	if lncycmsc.freq.isNull() set lncycmsc.freq=ln.dist1fre
	if 'lncycmsc.rate.isNull(),aoamo.met'="ACT" set lncycmsc.rate=""
	if lncycmsc.rate.isNull(),aoamo.met="ACT" set lncycmsc.rate=ln.irn
	if 'lncycmsc.apr set lncycmsc.apr=aoamo.apr
	if 'lncycmsc.rcm set lncycmsc.rcm=aoamo.rcm
	if 'lncycmsc.dcp set lncycmsc.dcp=aoamo.dcp
	if lncycmsc.nxadt.isNull() set lncycmsc.nxadt=ln.odt.nextFreqDate(lncycmsc.freq) quit:ER

	set FRE=lncycmsc.itrm
	if FRE.isNull() set FRE=ln.trm
	if FRE.isNull() quit
	
	if (FRE.length()-(+FRE).length())=1 set FRE=FRE_"A"
	
	//  ~p1
	set NJD=ln.odd.nextFreqDate(FRE) if ER do Runtime.setErrMSG("LNCYCMSC",3333,"RM") quit:ER 

	set ENDDT=NJD

	set NJD=ln.odd
	set (NP,STOP)=0
	for  set NJD=NJD.nextFreqDate(lncycmsc.freq) quit:ER  do { quit:STOP 
		if NJD>ENDDT set STOP=1 quit 
		set NP=NP+1
		}

	if ER quit 

	set FA=NP#1
	set FANP=$S(FA:NP+.5,1:NP)
	set lncycmsc.term=FANP.roundDec(0,"","")
	
	quit
	
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNCYCMSC lncycmsc

	set X = lncycmsc.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if lncycmsc.typ.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TYP", vRM) quit
	set X = lncycmsc.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycmsc.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
	set X = lncycmsc.cacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.CACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.caltd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.CALTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.cbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.CBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.cipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.CIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.cntr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CNTR", vRM) quit
	set X = lncycmsc.cseq if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CSEQ", vRM) quit
	set X = lncycmsc.dcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.DCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycmsc.drc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DRC", vRM) quit
	set X = lncycmsc.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCMSC]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	if lncycmsc.itrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ITRM", vRM) quit
	set X = lncycmsc.lsadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSADT", vRM) quit
	set X = lncycmsc.npda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.NPDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.nsip if 'X.isNull(),'Db.isDefined("STBLNSIP","X") set vRM = $$^MSG(1485,X) do vdderr("NSIP", vRM) quit
	set X = lncycmsc.nxadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NXADT", vRM) quit
	set X = lncycmsc.nyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.NYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.oipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.OIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycmsc.payee.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYEE", vRM) quit
	set X = lncycmsc.pbal if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.PBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.pdby if 'X.isNull(),'Db.isDefined("STBLIPDBY","X") set vRM = $$^MSG(1485,X) do vdderr("PDBY", vRM) quit
	if lncycmsc.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = lncycmsc.ramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.RAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycmsc.RCM) set vRM=$$^MSG(742,"L") do vdderr("RCM", vRM) quit
	set X = lncycmsc.reb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCMSC.REB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycmsc.ryfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCMSC]RYFRE",0) if 'vRM.get().isNull() do vdderr("RYFRE", vRM) quit
	set X = lncycmsc.ryld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYLD", vRM) quit
	set X = lncycmsc.rynd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYND", vRM) quit
	set X = lncycmsc.term if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("TERM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCMSC","MSG",979,"LNCYCMSC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNCYCMSC lncycmsc)	//LNCYCMSC Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lncycmsc)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lncycmsc)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lncycmsc)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lncycmsc)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}

	quit


vj1(RecordLNCYCMSC lncycmsc)	// HIST_DELETE  Table HIST  History for deletion of the record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycmsc.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5084","MSC",lncycmsc.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNCYCMSC lncycmsc)	// HIST_INSERT  Table HIST  History for creation of new record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycmsc.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$LNAMOJRN^LNFUNCS("MSC",lncycmsc.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNCYCMSC lncycmsc) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NXADT").exists()!vx("PAYEE").exists()!vx("PLAN").exists() do vi1(.lncycmsc)
		if vx("PAYEE").exists()!vx("PLAN").exists() do vi2(.lncycmsc)
	}
	do vi1(.lncycmsc)
	do vi2(.lncycmsc)

	quit
	

vi1(RecordLNCYCMSC lncycmsc) // Maintain AOAMOMSC index entries (Misc Cycled Item - Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lncycmsc.nxadt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lncycmsc.typ
	type String v4 = lncycmsc.payee
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycmsc.plan
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = lncycmsc.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("MSC",vobj(lncycmsc,-3),vobj(lncycmsc,-4)))#2,'$D(^DAYEND(v1,"AOAMO",v3,v4,v5,v6)) do vidxerr("AOAMOMSC")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"AOAMO",v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NXADT").exists() set v1=vx("NXADT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("PAYEE").exists() set v4=vx("PAYEE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v5=vx("PLAN").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"AOAMO",v3,v4,v5,v6)
	#ENDBYPASS
	quit

vi2(RecordLNCYCMSC lncycmsc) // Maintain LNXAMSC index entries (Payee, Plan, CID X-Ref)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lncycmsc.typ
	type String v3 = lncycmsc.payee
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = lncycmsc.plan
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycmsc.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("MSC",vobj(lncycmsc,-3),vobj(lncycmsc,-4)))#2,'$D(^XREF("LNCYCMSC",v2,v3,v4,v5)) do vidxerr("LNXAMSC")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("LNCYCMSC",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PAYEE").exists() set v3=vx("PAYEE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v4=vx("PLAN").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("LNCYCMSC",v2,v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNCYCMSC")

	while ds.next() do {
		type RecordLNCYCMSC lncycmsc=ds.getRecord("LNCYCMSC")
		if vlist.contains("VINDEX") do VINDEX(.lncycmsc) quit
		if vlist.contains("AOAMOMSC") do vi1(.lncycmsc)
		if vlist.contains("LNXAMSC") do vi2(.lncycmsc)
	}

	quit


public VIDXBLD1(RecordLNCYCMSC lncycmsc, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lncycmsc) quit
	if vlist.contains("AOAMOMSC") do vi1(.lncycmsc)
	if vlist.contains("LNXAMSC") do vi2(.lncycmsc)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNCYCMSC","MSG",1225,"LNCYCMSC."_di)

	quit


vkchged // Access key changed

	type public RecordLNCYCMSC lncycmsc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = lncycmsc.cid_","_lncycmsc.typ // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lncycmsc.cid_","_lncycmsc.typ // Copy new keys into object
	type RecordLNCYCMSC vnewrec = lncycmsc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNCYCMSC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNCYCMSC lncycmsc

	if vux("CID").exists() set lncycmsc.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set lncycmsc.typ = vux("TYP").piece("|",i)
	quit

VIDXPGM()	quit "LNCMSCFL"	// Location of index program

