LNPTS15(RecordLN ln,		// Loan account			/REF:RW
	RecordTTX ttx,		// Teller Transaction		/REF:RW
	RecordTRN trn,		// Transaction Codes		/REF:R
	String CTL)		// Control Value		/NOREQ/REF:R

	/*

	Loan interest debit and credit transactions


	       ORIG:  David Caliendo (5527) - 06/27/86
	       
	CTL first position
	
	0  Do not reduce Interest Paid
	1  Reduce Interest Paid, report to IRS
	2  Reduce interest Prior Year, report to IRS
	
	CTL second position
	
	0  Regular accrual
	1  Last Period Accrual (current accrual on one ago balances)
	2  Accumulated Prior Period Accrual (current accrual on Two Ago
	    balances)
		
	---- Revision History ------------------------------------------------
	
	08/20/07 - PUTTASWH / SmithCD - CR 28626
		   Modified to pay VAT on Interest while posting Interest 
		   Amount that is due during excess payments of the bill 
		   record. Added code to use EXACTACR if specified in TSO. 
		   Cleaned up to PSL standards.
	
	07/16/07 - PUTTASWH - CR 28194
		   Modified VAT section to insert "VI" while VAT on Interest 
		   Amount Due entry is filed into History of bills for 
		   satisfied (HISTSB).
	
	06/28/07 - PUTTASWH - CR 27530
		   Modified VATPMT section to update LNBIL5 record during 
		   VAT On Interest payments.
		   
	04/16/07 - PUTTASWH - CR 26508
		   Modified VAT section to validate for negative VAT on 
		   interest.
		   
	04/09/07 - KUMARB - CR24680
		   Modified section FILE to use the EXACTACR amount taking 
		   from ttx.tso field.
	
	03/01/07 - PUTTASWH - CR 24945
		   Added VAT and VATPMT tags that are invoked by assessment and
		   payment VAT transaction codes for VAT on Interest. 
		   
	01/05/07 - KUMARB - CR24680
		   Added new Transaction Code Object(TRN) and control (CTRL)
		   parameter in the procedure.
		   Modified the INIT section to remove the instantiation of
		   Transaction Code Object (TRN).
		   Modified section FILE to update the accrued interest amount
		   on loans with Segments Allowed (LN.SEGMENTS) selected by
		   calling UPDACR^LNSEG.
		   Removed section IRSC and IRSP and the transaction codes that
		   call IRSC are modified to pass CTL

	03/21/06 - NATRAJAH - 20094
		   In START section, modified the getRecord' where clause for
		   TRN table as ETC=:LTC.
	*/

	type public Cache %CACHE()
	type public Number ZAMT
	type public String E23, LTC
	type public Boolean ER, IDC
	
	type Number ADJAMT, EXACTACR, REMACR, ROUNDACR, SAVZAMT, VATREMACR = 0
	
	if CTL.get().isNull() set CTL = "0"

	// Acrrual Tran Codes Not Valid For This Account
	if +ln.ircb = 0 do Runtime.setErrMSG("LN", 8218) quit

	// Tran Code Not Valid For Commitments
	if ln.cpf do Runtime.setErrMSG("LN", 8219) quit

	// Original transaction code (may be same as ETC)
	type RecordTRN trn1 = %CACHE("TRN").getRecord("TRN", "ETC=:LTC")
	
	/*
	If add-on loan, the interest only payment plus the current interest
	paid life can not be greater than the unearned original interest.	

	Int/Div Paid Life greater than Int/Div Unearned Original
	*/
	if ln.iam.extract(1) = 1, (ln.ipl + ZAMT) > ln.iun, 'trn1.pcfl20 do Runtime.setErrMSG("LN", 8433) quit

	set ROUNDACR = ln.acr.roundCur(ln.crcd)
	
        // Collect Int to Extent of Accrual on Regular payment, not a direct 
        // "only" transaction
	if trn1.pcfl15, (('LTC.get().isNull()) & (ttx.etc '= LTC)) do {
		
                // Process VAT on Interest in current period
                set REMACR = ROUNDACR

                // VAT on Interest Calculation Option
                if ln.vatintopt, REMACR do { quit:ER 

                	type RecordLNBIL1 lnbil1 = Class.new("RecordLNBIL1")

                        /*
                        Calculate the VAT on remaining accrual for the loan
                        account. We are passing '20' as the 4th parameter as
                        we just want to calculate the VAT and also process
                        the secondary offset transactions.			
                        */
                        do VATINT^PROCLNB1(.ln, .lnbil1, REMACR, "20", %UserClass, %UserID, ln.boo, .VATREMACR, .ttx)			
                        } 
                
                if 'VATREMACR quit
                
                // Apply payment to Interest and VAT on Interest
                // proportionally, if applicable
		do PROVATPMT^LNPTSU(.ln, .ttx, .REMACR, .VATREMACR)
                
                // Update VAT on Interest (note ZAMT will be reduced here by 
                // VATREMACR)
                do UPDVAT^LNPTS3(.ln, .ttx, VATREMACR)
                }

	// Collect Int to Extent of Accrual - keep track of extra monies with SAVZAMT
	if trn1.pcfl15, (ZAMT > ROUNDACR) set SAVZAMT = ZAMT - ROUNDACR, ZAMT = ROUNDACR
	else  set SAVZAMT = 0
	
	// Update Accrued Interest (ttx.int)
	do GL^LNPTSU(.ttx, ZAMT, 3)
	
	do %HSEQ^LNPTSU(.ttx, "*#I#"_ZAMT)
	
	// If ADD-ON loan, adjust principal balance and uncollected interest
	if ln.iam.extract(1) = 1, 'trn1.pcfl20 do {
		do GL^LNPTSU(.ttx, -ZAMT, 8)
		do GL^LNPTSU(.ttx, ZAMT, 2)
		set ln.bal = ln.bal - ZAMT
		}
	
	// Determine + or - ro update accrual, depending on debit / credit
	set ADJAMT = $select(ln.trb - IDC:ZAMT, 1:-ZAMT)

	// Use exact accrual amount, if specified
	set EXACTACR = $$FIELD^UTSO(ttx.tso, "EXACTACR")
	if 'EXACTACR.isNull() do {
		if ADJAMT < 0 set ADJAMT = -EXACTACR
		else  set ADJAMT = EXACTACR
		}
	
	// Reduce Interest Paid, report to IRS
	if CTL.extract(1) = 1 set ln.refint = ln.refint + ADJAMT
	// Reduce interest Prior Year, report to IRS	
	else  if CTL.extract(1) = 2 set ln.prefint = ln.prefint + ADJAMT
	// Reduce interest paid and not Ignore Interest Paid Fields
	else  if CTL.extract(1) = 0, 'trn1.pcfl20 do INTPAID(.ln, -ADJAMT)
	
	// Not Ignore Interest Paid Fields - update interest paid life
	if 'trn1.pcfl20 set ln.ipl = ln.ipl - ADJAMT
	
	if '$$FIELD^UTSO(ttx.tso, "SUBPMT").isNull() do SUBPMT(.ttx, ADJAMT) quit:ER

	// Incr Capped & Decr Uncapped Deferred Int
	if E23.extract(16), ln.diu do CAPIT(.ln, $select(ADJAMT < 0:-ADJAMT, 1:ADJAMT))
			
	set ln.acr = ln.acr + ADJAMT
	
	// In case EXACTACR is not used, and accrual is reduced to virtually 0
	if 'ln.acr.roundCur(ln.crcd) set ln.acr = 0
	
	#IF ('CUVAR.NOSEGMENTS!(CUVAR.NOSEGMENTS=3))!($$SEGUSE^BTTOPTMZ("L"))
		if ln.segments do {
			if trn1.pcfl20 do UPDACR^LNSEG(.ln, .ttx, ADJAMT, CTL.extract(2))
			if 'trn1.pcfl20 do PAYACR^LNSEG(.ln, .ttx, ADJAMT)
			}
	#ENDIF

	// %ZAMT will be 0 at this point, unless collecting interest to extent of accrual
	set ZAMT = SAVZAMT
	
	quit


INTPAID(RecordLN ln, 		// Loan account			/REF:RW
	Number CAPINT)		// Amount of interest to cap

	// Capitalize interest

	type public Date CUVAR2
	
	type Date FIN1, TAX1

	set FIN1 = $$BOFY^SCADAT(CUVAR2, 1)
	set TAX1 = $$BOTY^SCADAT(CUVAR2, 1)
	
	#IF CUVAR.YEOFF
		if (%EffectiveDate < FIN1) & (CUVAR2 '> (FIN1 + CUVAR.YEOFF)) set ln.ipy = ln.ipy + CAPINT
		else  set ln.iytd = ln.iytd + CAPINT
	#ELSE
		set ln.iytd = ln.iytd + CAPINT
	#ENDIF

	#IF CUVAR.TAXYEOFF
		if (%EffectiveDate < TAX1) & (CUVAR2 '> (TAX1 + CUVAR.TAXYEOFF)) set ln.ipty = ln.ipty + CAPINT
		else  set ln.itytd = ln.itytd + CAPINT
	#ELSE
		set ln.itytd = ln.itytd + CAPINT
	#ENDIF

	quit

	
CAPIT(RecordLN ln, 		// Loan account			/REF:RW
      Number CAPINT)		// Adjustment amount

	// Capitalize deferred interest

	set ln.diu = ln.diu - CAPINT
	if ln.diu < 0 set ln.diu = 0

	// Recognize paid interest during capitalization
	if ln.rpidc do {
		set ln.ipl = ln.ipl + CAPINT
		set ln.narl = ln.narl + CAPINT

		do INTPAID(.ln, CAPINT)
		}

	quit 
	
	
public SUBPMT(RecordTTX ttx,	// Transaction			/REF:R
	      Number AMT)	// Transaction Amount

	// Update bill for Subsidy payment

	type public Number CID

	type Date SUBDT
	type Number BLSEQ

	set SUBDT = $$FIELD^UTSO(ttx.tso, "SUBDT")
	if 'SUBDT.isNull() set SUBDT = $$INT^%ZM(SUBDT, "D")
	if SUBDT.isNull() set SUBDT = $select(%EffectiveDate.get():%EffectiveDate, 1:%SystemDate)
	
	set BLSEQ = $$SUBSEQ(SUBDT)
	if BLSEQ do {
		type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1", "CID=:CID,SCHSEQ=:BLSEQ")
		set lnbil1.csubdue = lnbil1.csubdue + AMT

		// Subsidy Payment Amount exceeds Subsidy Amount Remaining
		if lnbil1.csubdue < 0 do Runtime.setErrMSG("LNBIL1", 899) quit
		do lnbil1.bypassSave()
		}
	      // Subsidy Payment Amount exceeds Subsidy Amount Remaining
	else  do Runtime.setErrMSG("LNBIL1", 899) quit
	
	quit 

	
public	SUBSEQ(Date SUBDT)	// Subsidy date

	// Return highest bill sequence number in bill file for subsidy date

	type public Number CID

	type ResultSet rs = Db.select("SCHSEQ", "LNBIL1", "CDPD=:SUBDT AND CID=:CID", "SCHSEQ DESC")
	if rs.next() quit rs.getCol("SCHSEQ")

	quit ""
	
	
public VAT(RecordLN ln,		// Loan account			/REF:RW
	   RecordTTX ttx,	// Transaction			/REF:RW
           RecordTRN trn)	// Transaction code		/REF:R
        
        /*
	Assess Value Added Tax on Interest Amount

	Called externally by Assessment of Tax on Interest adjustment 
	transaction codes.	
	*/
          
        type public Number ZAMT           
        
        // Update Tran Detail: L:Val Tax Int (ttx.swhld)
	do GL^LNPTSU(.ttx, ZAMT, 15)
	   
        // Add VAT on Interest Amount Due entry into History of bills for satisfied (HISTSB)
	do %HSEQ^LNPTSU(.ttx, "*#VI#"_ZAMT)
	
	set ln.vatintdue = ln.vatintdue + $select((ln.trb - ttx.itc1):ZAMT, 1:-ZAMT)
	
	// Transaction results in negative VAT on interest
	if (ln.vatintdue < 0) do Runtime.setErrMSG("LN", 6878) quit
	
	set ZAMT = 0	
	       
	quit
	

public VATPMT(RecordLN ln,	// Loan account			/REF:RW
	      RecordTTX ttx,	// Transaction			/REF:RW
              RecordTRN trn)	// Transaction code		/REF:R

	/*
	Pay Value Added Tax on Interest Amount

	Called externally by Payment of Tax on Interest adjustment transaction 
	codes.
	*/
	
	type public Number ZAMT

	type Number VATAMT = ln.vatintdue
	
	set VATAMT = $select(ZAMT < VATAMT:ZAMT, 1:VATAMT)

	// Update Tran Detail: L:Val Tax Int (ttx.swhld)
	do GL^LNPTSU(.ttx, VATAMT, 15)
	
	set ZAMT = ZAMT - VATAMT
	
	// Pay down VAT on Interest Amount fee level on bill file
	do REDUCBL^LNPTS13(.ln, .ttx, "VI", VATAMT)	
	
	// Add VAT on Interest Amount entry into History of bills for
	// satisfied (HISTSB)
	do %HSEQ^LNPTSU(.ttx, "*#VI#"_VATAMT)
	
	set ln.vatintpd = ln.vatintpd + VATAMT
	set ln.vatintdue = ln.vatintdue - VATAMT
		
	quit
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60865^11621^Hema Puttaswamy^9944"	// Signature - LTD^TIME^USER^SIZE
