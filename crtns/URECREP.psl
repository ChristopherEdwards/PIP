URECREP	// Public;Non-replicated Transaction Report
	/*
	ORIG: chhabris - 08/22/2005
	DESC: Non-replicated Transaction Report

	---- Comments --------------------------------------------------------
	 KEYWORDS: Non-replicated Transaction

	 The routine will be used to create non-replicated transaction report.
	 It is assumed that file URECD, a non-replicated transcation re-process
	 global, has been created by ^URECLOST routine.
	 Once files URECL and URECLOST is created , function SCA631 can be used 
	 to run non-replicated report.

	 INPUTS:
		. URECD		global created by ^URECLOST routine

	 Example:

	 s ^TTX(57391,10,1212,3001)="35450|1|CD|200|57343|_ELWOOD$NTA162:|SEGCREATE#1~SEGP#1:200||
	 57659|40361||3001|||||USD||||||299.51"

	 convert this global reference into following SQL statement

	 INSERT into HIST (CID,TSEQ,TJD,ITC,ETC,TAMT,EFD,TLO,TSO,CDT,TIME,BRCD,
         TRC,UID,CRCD,ENDBAL) values ('35450','9','57391','1','CD','200','57343',
         '_ELWOOD$NTA162:','SEGCREATE#1~SEGP#1:200','1212','USD','299.51')

	---- Revision History ------------------------------------------------
	03/08/06 - RussellDS - CR19962
		   Remove references to obsoleted routine CGMSSRV - and use of
		   ELF format.  This was all Citibank specific.
		   
		   Eliminated a number of PSL warning situations.
	
	12/08/05 - chhabris - CR16677
		   Replaced index file reference DBSTR with DBTBL1D as DBSTR
		   is obseleted.

	08/22/05 - chhabris - CR16677
		   Converted to PSL.
		   Removed the Revision history prior to 2004.
	----------------------------------------------------------------------
 	*/

	type ResultSet rs1=Db.select("TIMESEQ","URECD")
	type ResultSet rs2=Db.select("TIMESEQ","URECDSEQ")

	if (rs1.isEmpty()),(rs2.isEmpty()) quit			// Input data files not created

	type Number no,online,subseq,time,timeseq
	type String file,jourfile,jrnlfile,xxx,yyy,zon,zonx,zt,zzz
	type String clause,csql,keyv,kk,kkv,knode,kx,n,nn,xk,ynn
	type Number ffid,fkey,fx,i,lll,nnn,pos,seq,sqldata,stax1,stax2,xnn,xsql,xsub

	set online=0,no=0

	// new table has to be created from tmplost with one key PID
	// Delete temporary file
	do Db.fastDelete("TMPRPT1","PID=:%ProcessID")

	// Create DQ file def/global xref file
	type ResultSet rsgbl=Db.select("KEY2","TMPRPT3","PID=:%ProcessID and KEY1='GBL'")
	if rsgbl.isEmpty() do tmpgbl

	// Create index file/global temp file
	type ResultSet rsidx=Db.select("KEY2","TMPRPT3","PID=:%ProcessMode and KEY1='IDX'")
	if rsidx.isEmpty() do tmpgbl1

	// Create journal file/primary file temp file
	type ResultSet rsjrn=Db.select("PID","TMPRPT3","PID=:%ProcessMode and KEY1='JRN'")
	if rsjrn.isEmpty() do tmpgbl2

	type ResultSet urecd=Db.select("TIMESEQ","URECDSEQ",,"TIMESEQ")
	while urecd.next() do {
		set timeseq=urecd.getCol("TIMESEQ")

		type ResultSet urecd=Db.select("JRNLFILE","URECDSEQ","TIMESEQ=:timeseq","JRNLFILE")
		while urecd.next() do {
			set jrnlfile=urecd.getCol("JRNLFILE")

			type ResultSet rs=Db.select("STATUS","URECL","DATE1=:timeseq AND FILE=:jrnlfile")

			// Already processed
			if rs.next(),rs.getCol("STATUS")="complete" quit

			//delete old extract file
			do Db.fastDelete("URECL1","DATE1=:timeseq,FILE=:jrnlfile")

			type ResultSet rs1=Db.select("SEQR","URECDSEQ","TIMESEQ=:timeseq AND JRNLFILE=:jrnlfile","SEQR")
			while rs1.next() do {
				set seq=rs1.getCol("SEQR")

				type ResultSet rs2=Db.select("DATA1","URECDSEQ","TIMESEQ=:timeseq AND JRNLFILE=:jrnlfile and SEQR=:seq and SUBSEQ=1")
				if rs2.next() set zt=rs2.getCol("DATA1")

				// character update with tp
				// TP start indicator
				if zt="08" do { quit

					set online=1,subseq=0,no=seq
					type RecordURECL1 urecl1=Class.new("RecordURECL1")
					set urecl1.date1=timeseq
					set urecl1.file=jrnlfile
					set urecl1.tranid=no
					set urecl1.online=0
					set urecl1.status=2
					do urecl1.bypassSave()

					// TP start logic
					do xtype8
					}

				// online transaction	
				if zt.piece("|",1)="08CS" do { quit

					set online=2,subseq=0,no=seq
					type RecordURECL1 urecl1=Class.new("RecordURECL1")
					set urecl1.date1=timeseq
					set urecl1.file=jrnlfile
					set urecl1.tranid=no
					set urecl1.online=0
					set urecl1.status=2
					set urecl1.class=zt.piece("|",2)
					set urecl1.message=zt.piece("|",3)
					do urecl1.bypassSave()

					do rtypecs
					}

				// character update 
				if online=0 do {

					set no=seq 
					kill zonx,zon
					type RecordURECL1 urecl1=Class.new("RecordURECL1")
					set urecl1.date1=timeseq
					set urecl1.file=jrnlfile
					set urecl1.tranid=no
					set urecl1.online=0
					set urecl1.status=2
					do urecl1.bypassSave()
					}

				do xreport(zt,online)
				}

			type RecordURECL urecl=Class.new("RecordURECL")
			set urecl.date1=timeseq
			set urecl.file=jrnlfile
			set urecl.status="complete"
			do urecl.bypassSave()
			}
		}
	quit


rtypecs	// cs non-replicated transaction report

	type public Number no
	type String ret1,xmessage,xnrep,xorep,xreq,zt
	type Number class1,noseq,online,subseq

        catch vERROR {
		do ZE^UTLERR
		}

	set class1=zt.piece("|",2)
	set xmessage=zt.piece("|",3)

	set xreq="",xnrep="",xorep=""

	type ResultSet rs=Db.select("DATA1","URECDSEQ","TIMESEQ=:TIMESEQ AND JRNLFILE=:JRNLFILE AND SEQR=:no AND SUBSEQ>1","SUBSEQ")

	while rs.next() do { quit:zt="09"

		set zt=rs.getCol("DATA1")

		if zt.piece("|",1)="request" set xreq=xreq_zt.piece("|",1,zt.length())
		else  if zt.piece("|",1)="newreply" set xnrep=xnrep_zt.piece("|",1,zt.length())
		else  if zt.piece("|",1)="oldreply" set xorep=xorep_zt.piece("|",1,zt.length())

		// msql
		if zt="09",class1=5 do msql  quit
		
		// MNSP service class
		else  if zt="09",class1=0 do mnsp  quit
		
		// MRPC service class
		else  if zt="09",class1=3 do mrpc  quit
		
		// TSSP service class
		else  if zt="09",class1=1 do { quit
			do detssp(xreq)
			do retssp(xorep,$$^MSG(3738)_":",.ret1)
			do retssp(xnrep,$$^MSG(4183)_":",.ret1)
			set online=0,subseq=0
			}
		}

	set online=0,subseq=0
	quit


mrpc	// parse mrpc message for report

	type public String chr(),xreq,xmessage
	type public Date timeseq
	type public Number no,online
	type String array(),ckr(),retype,space,t1,t2,t3,t4,t5,t6,t7,tt,xi,xmm,x
	type String vzpar,vzptr,zpar
	type Number xx

	set x=$$LV2V^MSG(xreq,.ckr)

	//"mrpc id/pgm"
	set t1=$$^MSG(3706)

	//"version number"
	set t2=$$^MSG(3707)

	//"input parameters"
	set t3=$$^MSG(3708)

	//"ordered list"
	set t4=$$^MSG(3709)

	//"variable load string"
	set t5=$$^MSG(3710)

	//"variable save string"
	set t6=$$^MSG(3711)

	//"log message indicator"
	set t7=$$^MSG(3712)
	set array(1)=ckr(1)
	set array(2)=ckr(2)
	set array(3)=ckr(3)
	set array(4)=ckr(4).get()
	set array(5)=ckr(5).get()
	set array(6)=ckr(6).get()
	set array(7)=ckr(7).get()

	set space=" "
	if array(1)=67!(array(1)=20)!(array(1)=3) quit
	if array(1)'["^" do {
		set vzptr=$$LV2V^MSG(ckr(3),.zpar)
		set vzpar=$$param^PBSUTL(.zpar)
		set array(3)=zpar(1) for xx=2:1:zpar("").order(-1) set array(3)=array(3)_","_zpar(xx)
		}

	// request message
	do output(timeseq,no,online,$$^MSG(3737)_":"_xmessage.get())

	set retype=t1_$j(space,5)_t2_$j(space,5)
	do output(timeseq,no,online,retype)
	set xmm=array(1)_$j(space,(t1_$j(space,6)).length()-array(1).length())_array(2)_$j(space,(t2_$j(space,6)).length()-array(2).length())
	do output(timeseq,no,online,xmm)
	if ('array(4).isNull()) ! ('array(5).isNull()) ! ('array(6).isNull()) ! ('array(7).isNull()) do {
		set retype=t4_$j(space,5)_t5_$j(space,5)_t6_$j(space,5)_t7
		set xmm=array(4)_$j(space,(t1_$j(space,6)).length()-array(4).length())_array(5)_$j(space,(t2_$j(space,6)).length()-array(5).length())_array(6)_$j(space,(t3_$j(space,6)).length()-array(6).length())_array(7)
		do output(timeseq,no,online,retype)
		do output(timeseq,no,online,xmm)
		}

	set retype=t3_":"
	do output(timeseq,no,online,retype)
	do output(timeseq,no,online,array(3))

	do reply
	quit


reply	// reply message
	type public String xorep,xnrep,jourfile
	type public Date timeseq
	type public Number no,online,subseq
	type String ckr(),x,xi,tt()
	type Number ii,jj

	set x=$$LV2V^MSG(xorep,.ckr)
	set xi=""
	for  set xi=ckr(xi).order() quit:xi.isNull()  do {
		if (ckr(xi)'[2.char()),(ckr(xi)'[10.char()) quit
		if ckr(xi).exists() kill tt set x=$$LV2V^MSG(ckr(xi),.tt) do {
			if tt.data()=0 quit
			set ckr(xi)=tt(1).get() for jj=2:1:tt("").order(-1) set ckr(xi)=ckr(xi)_" "_tt(jj)
        		}
        	}

	set xorep=""
	for ii=2:1:ckr("").order(-1) set xorep=xorep_"  "_ckr(ii)
	do output(timeseq,no,online,$$^MSG(3738)_":"_xorep)

	if xnrep.get().isNull() quit
	set x=$$LV2V^MSG(xnrep,.ckr)
	set xi=""
	for  set xi=ckr(xi).order() quit:xi.isNull()  do {
	if (ckr(xi)'[2.char()),(ckr(xi)'[10.char()) quit
		if ckr(xi).data()>0 kill tt set x=$$LV2V^MSG(ckr(xi),.tt) do {
			if tt.data()=0 quit
			set ckr(xi)=tt(1).get() for jj=2:1:tt("").order(-1) set ckr(xi)=ckr(xi)_" "_tt(jj)
			}
		}

	set xnrep=""
	for ii=2:1:ckr("").order(-1) set xnrep=xnrep_"  "_ckr(ii)

	type RecordURECL1 urecl1=Db.getRecord("URECL1","DATE1=:timeseq,FILE=:jourfile,TRANID=:no",1)

	// re-process success
	if (xnrep=xorep) , (urecl1.status'="1") do {
		set urecl1.status=0
		do urecl1.bypassSave()
		}
	// re-process failure
	else  if xnrep'=xorep do {
		set urecl1.status=1
		do urecl1.bypassSave()
		}

	//MSG - Replay reply
	do output(timeseq,no,online,$$^MSG(4183)_":"_xnrep)
	set online=0,subseq=0
	quit


mnsp	// parse mnsp message for report
	type public String xmessage,xreq,xorep,xnrep,jourfile
	type public Date timeseq
	type public Number no,online
	type String ckr(),mess,mess1,mess2,mess3,mess4,x,xstatus,tt
	type Number xi,ii,jj,subseq,tt()

	// parse request message
	set x=$$LV2V^MSG(xreq,.ckr)
	set xreq=ckr(1)

	// 3740 Sign-off
	set mess=$$^MSG(3737)_":"_xmessage.get()_"("_$$^MSG(3740)_")"

	// 3741 Sign-on
	set mess1=$$^MSG(3737)_":"_xmessage.get()_"("_$$^MSG(3741)_")"

	// 3742 Heartbeat
	set mess2=$$^MSG(3737)_":"_xmessage.get()_"("_$$^MSG(3742)_")"

	// 3743 Client Context
	set mess3=$$^MSG(3737)_":"_xmessage.get()_"("_$$^MSG(3743)_")"

	// 3744 Function calls/non-IBS specific
	set mess4=$$^MSG(3737)_":"_xmessage.get()_"("_$$^MSG(3744)_")"

	if xreq.get()=0 do output(timeseq,no,online,mess)
	else  if xreq.get()=1 do output(timeseq,no,online,mess1)
	else  if xreq.get()=2 do output(timeseq,no,online,mess2)
	else  if xreq.get()=3 do output(timeseq,no,online,mess3)
	else  if xreq.get()=4 do output(timeseq,no,online,mess4)
	else  do output(timeseq,no,online,$$^MSG(3737)_":"_xreq)

	// parse original reply message
	set x=$$LV2V^MSG(xorep,.ckr)
	set xi=""
	for  set xi=ckr(xi).order() quit:xi.isNull()  do {
		if ckr(xi)'[9.char(),(ckr(xi)'[2.char()),(ckr(xi)'[2.char()) quit
		if ckr(xi).exists() kill tt set x=$$LV2V^MSG(ckr(xi),.tt) do {
			if tt.data()=0 quit
			set ckr(xi)=tt(1).get() for jj=2:1:tt("").order(-1) set ckr(xi)=ckr(xi)_" "_tt(jj)
			}
		}

	set xorep=ckr(1)
	for ii=2:1:ckr("").order(-1) set xorep=xorep_ckr(ii)
	do output(timeseq,no,online,$$^MSG(3738)_":"_xorep)

	// parse new reply message 
	set x=$$LV2V^MSG(xnrep,.ckr)
	set xi=""
	for  set xi=ckr(xi).order() quit:xi.isNull()  do {
		if ckr(xi)'[9.char(),(ckr(xi)'[2.char()),(ckr(xi)'[10.char()) quit
		if ckr(xi).data()>0 kill tt set x=$$LV2V^MSG(ckr(xi),.tt) do {
			if tt.data()=0 quit
			set ckr(xi)=tt(1).get() for jj=2:1:tt("").order(-1) set ckr(xi)=ckr(xi)_" "_tt(jj)
        		}
		}

	set xnrep=ckr(1).get()
	for ii=2:1:ckr("").order(-1) set xnrep=xnrep_ckr(ii)

	type RecordURECL1 urecl1=Db.getRecord("URECL1","DATE1=:timeseq,FILE=:jourfile,TRANID=:no",1)

	// re-process success
	if (xnrep.get()=xorep) , (urecl1.status'="1") do {
		set urecl1.status=0
		do urecl1.bypassSave()		
		}

	// re-process failure
	else  if xnrep'=xorep do {
		set urecl1.status=1
		do urecl1.bypassSave()
		}

	do output(timeseq,no,online,$$^MSG(4183)_":"_xnrep)
	set online=0,subseq=0
	quit


	//---------------------------------------------------------------------	
msql	// parse msql mesasge for report
	//---------------------------------------------------------------------
	type public String jourfile,xreq,xmessage,xorep,xnrep
	type public Number no,online
	type public Date timeseq
	type String ckr(),x
	type Number ii,subseq

	// parse request message
	set x=$$LV2V^MSG(xreq,.ckr)

	set xreq=ckr(1)
	do output(timeseq,no,online,$$^MSG(3737)_":"_xmessage.get()_xreq)

	// parse original reply message
	set x=$$LV2V^MSG(xorep,.ckr)
	set xorep=""
	for ii=2:1:ckr("").order(-1) set xorep=xorep_ckr(ii)
	if xorep[3.char()!(xorep[9.char())!(xorep[5.char())!(xorep[10.char())!(xorep[3.char()) do {
		set x=$$LV2V^MSG(xorep,.ckr)
		set xorep=""
		for ii=1:1:ckr("").order(-1) set xorep=xorep_ckr(ii)
		}

	do output(timeseq,no,online,$$^MSG(3738)_":"_xorep)

	// parse new reply message
	set x=$$LV2V^MSG(xnrep,.ckr)
	set xnrep=""
	for ii=2:1:ckr("").order(-1) set xnrep=xnrep_ckr(ii)
	if xnrep[3.char()!(xnrep[9.char())!(xnrep[5.char())!(xnrep[10.char())!(xnrep[3.char()) do {
		set x=$$LV2V^MSG(xnrep,.ckr)
		set xnrep=""
		for ii=1:1:ckr("").order(-1) set xnrep=xnrep_ckr(ii)
		}

	type RecordURECL1 urecl1=Db.getRecord("URECL1","DATE1=:timeseq,FILE=:jourfile,TRANID=:no",1)

	// re-process success
	if (xnrep=xorep) , (urecl1.status'="1") do {
		set urecl1.status=0
		do urecl1.bypassSave()
		}
	// re-process failure
	else  if xnrep'=xorep do {
		set urecl1.status=1
		do urecl1.bypassSave()
		}

	do output(timeseq,no,online,$$^MSG(4183)_":"_xnrep)
	set online=0,subseq=0
	quit


	//--------------------------------------------------------------------
retssp(String vzreply, String retype, String xret())	// parse tssp reply message
	//--------------------------------------------------------------------
	type public Number no,online
	type public String jourfile,retssp()
	type public Date timeseq
	type Number i,ii,iii,jj,tamt(),v,xi
	type String reply,x,xxrep(),xrep(),space,tt(),t1,t2,t3,t4,t5,t6

	// Unwrap message
	set x=$$LV2V^MSG(vzreply,.reply)

	do output(timeseq,no,online,retype)

	for i=2:1:reply("").order(-1) do { quit:xrep(1).get()="ER"
		kill xrep
		set x=$$LV2V^MSG(reply(i),.xrep)
		if xrep.data()=0 quit
		if xrep(1)="ER" do output(timeseq,no,online,xrep(5)) quit
		for ii=1:1:xrep("").order(-1) do { quit:xxrep(1).get()="ER"
			kill xxrep
			set x=$$LV2V^MSG(xrep(ii),.xxrep)
			if xxrep.data()=0 quit
			if xxrep(1)="ER" quit
			for v=1:1:xxrep("").order(-1) set retssp(ii,v)=xxrep(v).get()
			set iii=""
			for  set iii=xxrep(iii).order() quit:iii.isNull()  do {
				if xxrep(iii)'[9.char(),(xxrep(iii)'[2.char()),(xxrep(iii)'[10.char()),(xxrep(iii)'[5.char()) quit
				if xxrep(iii).exists() kill tamt set x=$$LV2V^MSG(xxrep(iii),.tamt)
				if tamt.data()=0 quit
				set xi=""
				for  set xi=tamt(xi).order() quit:xi.isNull()  do {
					if tamt(xi)'[9.char(),(tamt(xi)'[2.char()),(tamt(xi)'[10.char()),(tamt(xi)'[5.char()) quit
					if tamt(xi).exists() set x=$$LV2V^MSG(tamt(xi),.tt) do {
						if tt.data()=0 quit
						set tamt(xi)=tt(1).get() for jj=2:1:tt("").order(-1) set tamt(xi)=tamt(xi)_" "_tt(jj).get()
						}
					}
				set retssp(ii,iii)=tamt(1)
				for v=2:1:tamt("").order(-1) set retssp(ii,iii)=retssp(ii,iii)_"/"_tamt(v)
				}
			}
		}

	if xret.data()>0 , ((xrep(1).get()="ER")!(xxrep(1).get()="ER")) do { quit
		type RecordURECL1 urecl1=Db.getRecord("URECL1","DATE1=:timeseq,FILE=:jourfile,TRANID=:no",1)
		set urecl1.status=1
		do urecl1.bypassSave()
		}

	set space=""

	//"ref num"
	set t1=$$^MSG(3713)

	//"amount"
	set t2=$$^MSG(7844)

	//"end balance"
	set t3=$$^MSG(3714)

	//"hist seq"
	set t4=$$^MSG(3715)

	//"misc 1"
	set t5=$$^MSG(3716)

	//"misc 2"
	set t6=$$^MSG(3717)
	if retssp.data()=0 quit
	set retype=t1_$j(space,5)_t2_$j(space,5)_t3_$j(space,5)_t4_$j(space,5)_t5_$j(space,5)_t6

	do output(timeseq,no,online,retype)
	set iii="" 
	for  set iii=retssp(iii).order() quit:iii.isNull()  do {
		for ii=1:1:17  do {
			if retssp(iii,ii).get().isNull() set retssp(iii,ii)=""
			}
		}

	for  set iii=retssp(iii).order() quit:iii.isNull()  do {
		set retype=retssp(iii,1)_$j(space,(t1_$j(space,5)).length()-retssp(iii,1).length())_retssp(iii,2)_$j(space,(t2_$j(space,5)).length()-retssp(iii,2).length())_retssp(iii,3)_$j(space,(t3_$j(space,5)).length()-retssp(iii,3).length())_retssp(iii,4)_$j(space,(t4_$j(space,5)).length()-retssp(iii,4).length())_retssp(iii,5)_$j(space,(t5_$j(space,5)).length()-retssp(iii,5).length())_retssp(iii,5)
		if 'xret(iii).exists() do { quit
			set xret(iii)=retssp(iii,3)
			do output(timeseq,no,online,retype)
			}

		if xret(iii).data()>0 do { quit
			type RecordURECL1 urecl1r=Db.getRecord("URECL1","DATE1=:timeseq,FILE=:jourfile,TRANID=:no",1)
			if xret(iii)'=retssp(iii,3) set urecl1r.status=1
			else  if (xret(iii)=retssp(iii,3)) , (urecl1r.status'=1) set urecl1r.status=0
			do urecl1r.bypassSave()
			do output(timeseq,no,online,retype)
			}
		}
	quit


	//---------------------------------------------------------------------
detssp(message)	// parse tssp incoming message
	//---------------------------------------------------------------------
	type public String xmessage,ckr(),qlf,vzptr
	type public Number no,online
	type public Date timeseq
	type String t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17
	type String rec,x,vxptr,space,xr,xcrcd(),fld(),psi(),msc(),array(),xmm,class
	type Number i,l1,l2,l3,l4,l5,l6,rest,m,iii,xi

	do output(timeseq,no,online,$$^MSG(3737)_": "_xmessage.get())

	set x=$$LV2V^MSG(message,.rec)
	set vzptr=""
	set space=" "
	set xr=0

	//"branch"
	set t1=$$^MSG(3718)

	//"posting"
	set t2=$$^MSG(3719)

	//"account"
	set t3=$$^MSG(3720)

	//"tran"
	set t4=$$^MSG(3721)

	//"amount"
	set t5=$$^MSG(7844)

	//"trace num"
	set t6=$$^MSG(3722)

	set t7(1)=$$^MSG(3721),t7(2)=$$^MSG(3723),t7(3)=$$^MSG(3724),t7(4)=$$^MSG(3725),t7(6)=$$^MSG(7844),t7(8)=$$^MSG(3727)

	//"currency"
	set t7=$$^MSG(3492)

	//"effe date"
	set t8=$$^MSG(3728)

	//"val date"
	set t9=$$^MSG(3729)

	//"qualifier"
	set t11=$$^MSG(3731)

	//"pay instr"
	set t12=$$^MSG(3732)

	//"miscellaneous"
	set t13=$$^MSG(6847)

	//"comment"
	set t14=$$^MSG(3733)

	//"notes"
	set t15=$$^MSG(3734)

	//"register"
	set t16=$$^MSG(3735)

	//"system base equiv. amt"
	set t17=$$^MSG(3736)

	set class=""
	for i=1:1:rec("").order(-1) do {

		set x=$$LV2V^MSG(rec(i),.fld)
		if 'fld(7).get().isNull() do {
			kill xcrcd
			set x=$$LV2V^MSG(fld(7),.xcrcd)
			set fld(7)=xcrcd(1).get(),t7=t7(1)
			for m=2:1:7 do {
				if 'xcrcd(m).get().isNull() set fld(7)=fld(7)_"/"_xcrcd(m),t7=t7_"/"_t7(m).get()
				}
			}
		if 'fld(11).get().isNull() do {
			kill qlf set x=$$LV2V^MSG(fld(11),.qlf)
			set fld(11)=qlf(1)
			for m=2:1:qlf("").order(-1) set fld(11)=fld(11)_"/"_qlf(m)
			}
		if 'fld(12).get().isNull() do {
			kill psi set x=$$LV2V^MSG(fld(12),.psi)
			set fld(13)=psi(1)
			for m=2:1:psi("").order(-1) set fld(12)=fld(12)_"/"_psi(m)
			}
		if 'fld(13).get().isNull() do {
			kill msc set x=$$LV2V^MSG(fld(13),.msc)
			set fld(13)=msc(1)
			for m=2:1:msc("").order(-1) set fld(13)=fld(13)_"/"_msc(m)
			}
		if 'fld(17).get().isNull() do {
			set x=$$LV2V^MSG(fld(11),.ckr)
			set fld(16)=ckr(1)
			for m=2:1:ckr("").order(-1) set fld(16)=fld(16)_"/"_ckr(m)
			}
		if 'fld(2).get().isNull() set fld(2)=$$DAT^%ZM(fld(2))
		if 'fld(8).get().isNull() set fld(8)=$$DAT^%ZM(fld(8))
		if 'fld(9).get().isNull() set fld(9)=$$DAT^%ZM(fld(9))

		for iii=1:1:17 set array(xr,iii)=fld(iii).get()
		set xr=xr+1
		}

	set xmm=t1_$j(space,7)_t2_$j(space,7)_t3_$j(space,17)_t4_$j(space,7)_t5_$j(space,7)_t6
	do output(timeseq,no,online,xmm)

	set i=""
	for  set i=array(i).order() quit:i.isNull()  do {
		set xmm=array(i,1)_$j(space,(t1_$j(space,7)).length()-array(i,1).length())_array(i,2)_$j(space,(t2_$j(space,7)).length()-array(i,2).length())_array(i,3)_$j(space,(t3_$j(space,17)).length()-array(i,3).length())_array(i,4)_$j(space,(t4_$j(space,7)).length()-array(i,4).length())_array(i,5)_$j(space,(t5_$j(space,7)).length()-array(i,5).length())_array(i,6)
		do output(timeseq,no,online,xmm)
		}

	set l1=(t1_$j(space,7)).length(),l2=(t2_$j(space,7)).length(),l3=(t3_$j(space,17)).length(),l4=(t4_$j(space,7)).length()
	set l4=(t4_$j(space,7)).length(),l5=(t5_$j(space,7)).length(),l6=(t6_$j(space,7)).length()
	set rest=0

	set i=""
	for  set i=array(i).order() quit:i.isNull()  do {
		for xi=7:1:11 do { quit:rest=1
			if 'array(i,xi).get().isNull() set rest=1
			}
		}

	if rest do {
		set xmm=t7_$j(space,l1+l2-t7.length())_t8_$j(space,l3-t8).length()_t9_$j(space,l4-t9.length())_t11
		do output(timeseq,no,online,xmm)
		set i=""
		for  set i=array(i).order() quit:i.isNull()  do {
			set xmm=array(i,7)_$j(space,l1+l2-array(i,7).length())_array(i,8)_$j(space,l3-array(i,8).length())_array(i,9)_$j(space,l4-array(i,9).length())_array(i,11)
			}
		do output(timeseq,no,online,xmm)
		}

	set rest=0
	set i=""
	for  set i=array(i).order() quit:i.isNull()  do {
		for xi=13:1:17 do { quit:rest=1
			if 'array(i,xi).get().isNull() set rest=1
			}
		}
	if rest=0 quit

	set xmm=t13_$j(space,l1+l2-t13).length()_t14_$j(space,l3-t14).length()_t16_$j(space,l4-t16).length()_t17
	do output(timeseq,no,online,xmm)

	set i=""
	for  set i=array(i).order() quit:i.isNull()  do {
		set xmm=array(i,13)_$j(space,(l1+l2)-array(i,13).length())_array(i,14)_$j(space,l3-array(i,14).length())_array(i,16)_$j(space,l4-array(i,16).length())_array(i,17)
		do output(timeseq,no,online,xmm)
		}
	quit


	//------------------------------------------------------------------
xtype8	// report for character interface updates with tp 
	//-----------------------------------------------------------------

	type public String jourfile,zt,tras()
	type public Number no,xnn,zon,zonx,online,subseq
	type public Date timeseq

	type String acnsql
	type Number ddseq,tras

        catch vERROR {
		do ZE^UTLERR
		}

	set ddseq=0
	type ResultSet rs=Db.select("DATA1","URECDSEQ","TIMESEQ=:timeseq and JRNLFILE=:jourfile and SEQR=:no","SUBSEQ")
	while rs.next() do { quit:zt="09"
		set zt=rs.getCol("DATA1")

		// TP start indicator
		if zt="09" do { quit
			kill zon,zonx
			set xnn=1
			set ddseq=""
			for  set ddseq=tras(ddseq).order() quit:ddseq.isNull()  d xreport(tras(ddseq),1)
			d out2
			set online=0,subseq=0
			}
		else  set tras(ddseq)=zt,ddseq=ddseq+1
		}
	quit


out1	//
	type public Number no,online
	type public String zonx(,,)
	type public Date timeseq
	type String xxx,yyy,zzz

	if zonx.data()>0 do {
		set xxx=""
		for  set xxx=zonx(xxx).order() quit:xxx.isNull()  do {
			set yyy=""
			for  set yyy=zonx(xxx,yyy).order() quit:yyy.isNull()  do {
				set zzz=""
				for  set zzz=zonx(xxx,yyy,zzz).order() quit:zzz.isNull()  do {
					if yyy="nofile" do output(timeseq,no,online,zonx(xxx,yyy,zzz).piece("|",3,1000)) quit
					else  do output(timeseq,no,online,zonx(xxx,yyy,zzz).piece("|",3,1000))
					}
				}
			}
		}

	quit


out2	//
	type public Number no,online
	type public String zonx(),zon()
	type public Date timeseq
	type String ftype,xxx,yyy,zzz

	set xxx=""
	for  set xxx=zon(xxx).order() quit:xxx.isNull()  do {
		set yyy=""
		for  set yyy=zon(xxx,yyy).order() quit:yyy.isNull()  do {
			set zzz=""
			for  set zzz=zon(xxx,yyy,zzz).order() quit:zzz.isNull()  do {
				if yyy="nofile" do output(timeseq,no,online,zon(xxx,yyy,zzz).piece("|",3,1000)) quit
				else  do output(timeseq,no,online,zon(xxx,yyy,zzz).piece("|",3,1000))
				}
			}
		}

	if zonx.data()>0 do out1

	quit


	//-------------------------------------------------------------------
ifsec	// file type check, primary ? journal ? index ?
	//-------------------------------------------------------------------
	type public String ftype,file,global,p1,p2,p3,xfid,FID,pfid
	type public Number online,index
	type String fid

	set ftype="1"
	if (file.piece("=",2)'=""""""),(file.extract(3)="^") set ftype="" quit

	if (file?1"INSERT".e)!(file?1"DELETE".e) set fid=file.piece(" ",3)
	else  if file?1"UPDATE".e set fid=file.piece(" ",2)
	else  if (file.extract(3)="^") do { quit
		set global=file.extract(file.find("^"),file.find("(")-2)
		set p3=file.extract(file.find("("),file.find(")")-2)
	 	if p3.isNull() quit

		// Is this an index file?
		do getindex(global,p3)
		if index=1 do {
			if pfid="ACN",(online=1) do {
				set xfid=$$ACN()
				if 'xfid.isNull() set pfid=xfid
				}
			// Type 2 (index file)
			set ftype=2_(92.char())_pfid
			}
		}

	// A journal fle?
	if 'fid.get().isNull() do {  quit
		set FID=fid

		// Journal file?
		set pfid=""
		type ResultSet rs=Db.select("KEY3","TMPRPT3","KEY1='JRN' AND KEY2=:FID","KEY3")
		if rs.next() set pfid=rs.getCol("KEY3")

		if 'pfid.get().isNull() do {  quit
			if pfid="ACN",(online=1) do {

				// checkill DEP or LN file
				set xfid=$$ACN()
				if 'xfid.isNull() set pfid=xfid
				}

			// Type 3 (Journal file)
			set ftype=3_(92.char())_pfid quit
			}

		type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID",1)
		if 'dbtbl1.getMode() quit

		// Global and access keys
		set global=dbtbl1.global
		set p3=dbtbl1.acckeys

		// Index file?
		do getindex(global,p3)
		if index=1 do {
			if pfid="ACN",(online=1) do {
				set xfid=$$ACN()
				if 'xfid.isNull() set pfid=xfid
				}
			set ftype=2_(92.char())_pfid
			}
		}
	quit


ACN()	// Determine if the table name is DEP,LN, or ACN
	type public String file,zon(),xxfid
	type Number x,y,z

	set x=""

	for  set x=zon(x).order() quit:x.isNull()!(xxfid.get()="DEP")!(xxfid.get()="LN")!(xxfid.get()="ACN")  do {
		set y="" 
		for  set y=zon(x,y).order() quit:y.isNull()!(xxfid.get()="DEP")!(xxfid.get()="LN")!(xxfid.get()="ACN")  do {
			set z=""
			for  set z=zon(x,y,z).order() quit:z.isNull()!(xxfid.get()="DEP")!(xxfid.get()="LN")!(xxfid.get()="ACN")  do {
				set file=zon(x,y,z).piece("|",3)
				if (file.extract(3)="^") quit
				if (file?1"INSERT".e)!(file?1"DELETE".e) set xxfid=file.piece(" ",3)
				else  if file?1"UPDATE".e set xxfid=file.piece(" ",2)
				if xxfid.get()="DEP"!(xxfid.get()="LN")!(xxfid.get()="ACN") quit
				}
			}
		}
	
	quit xxfid.get()


	//--------------------------------------------------------------------
output(timeseq,no,online,result,class)	// output to file URECL to create report
	/*---------------------------------------------------------------------

	 input:
		timeseq		time sequence
		no		tran seq.
		online		0 character update 
				1 character update with tp
				2 on-line transcation with tp: cs & bc
		result		message (income, reply)
		class		file type

	---------------------------------------------------------------------
	*/
	type public String jourfile
	type String file,xsub,ftype
	type Number xonline,iii,jj,len,k,k1,xsubseq,k2,subseq

	set file=result,ftype=""
	if 'class.get().isNull() set ftype=class
	if online=0 ! (online=1) set xonline=0
	else  if online=2 set xonline=1,ftype=1
	if xonline=0 do ifsec
	if result.extract(3)'="^" set result=result.translate("""","")

	// force "\" to "/" , "\" is a delimiter of file URECLOST
	set result=result.translate("\","/")
	if (result.extract(3)="^") ! (xonline=1) do { quit
		set xsubseq=1
		type ResultSet rs=Db.select("SUBSEQ","URECLOST","DATE1=:timeseq and FILE=:jourfile and TRANID=:no","SUBSEQ DESC")
		if rs.next() set xsubseq=rs.getCol("SUBSEQ")+1
		set subseq=1
		for iii=1:95:result.length() do {
			type RecordURECLOST ureclost=Db.getRecord("URECLOST","DATE1=:timeseq,FILE=:jourfile,TRANID=:no,SUBSEQ=:xsubseq,SUBSUB=:subseq",1)
			set ureclost.record=result.extract(iii,iii+94)
			set ureclost.ftype=ftype.get()
			do ureclost.bypassSave()
			set subseq=subseq+1
			}
		}

	if result.length()>80 do {
		set xsub=1
		type ResultSet rs=Db.select("SUBSEQ","URECLOST","DATE1=:timeseq and FILE=:jourfile and TRANID=:no","SUBSEQ DESC")
		if rs.next() set xsub=rs.getCol("SUBSEQ")+1
		set jj=0,k2=1
		set len=result.length()
		for k=1:70:len quit:k=len  do {
			set k1=k+69 
		      	if k1<len do {
		     		set k1=result.find(",",k1)-1 if k1,((k1-k2)>80) set k1=result.find(",",(k+60))-1
	     			if k1=-1 set k1=result.find(" ",(k+69))-1 if k1,((k1-k2)>80) set k1=(result.find(" ",(k+60)))-1  
	     			if k1=-1 set k1=len,k=len+80 
	      			}
		      	else  set k1=len 
			set jj=jj+1 
			set xsubseq=xsub
			type RecordURECLOST ureclost=Db.getRecord("URECLOST","DATE1=:timeseq,FILE=:jourfile,TRANID=:no,SUBSEQ=:xsubseq,SUBSUB=:jj",1)
			set ureclost.record=result.extract(k2,k1)
			set ureclost.ftype=ftype.get()
			do ureclost.bypassSave()
		
			set k2=k1+1
			}
		}
	else  do {
		set xsubseq=1
		type ResultSet rs=Db.select("SUBSEQ","URECLOST","DATE1=:timeseq and FILE=:jourfile and TRANID=:no","SUBSEQ DESC")
		if rs.next() set xsubseq=rs.getCol("SUBSEQ")+1
		
		type RecordURECLOST ureclost=Db.getRecord("URECLOST","DATE1=:timeseq,FILE=:jourfile,TRANID=:no,SUBSEQ=:xsubseq,SUBSUB=1",1)
		set ureclost.record=result
		set ureclost.ftype=ftype.get()
		do ureclost.bypassSave()
		}
	quit


	//--------------------------------------------------------------------
xreport(zt,online)	// potential transactions report
	//--------------------------------------------------------------------
	type public String acnsql,global,p3,zon(),fkey,y,ffid,knode,key9,keyv,state1,state2
	type public Number no,xnn,nosql,csql
	type public Date timeseq
	type String data,didata,filetyp,kkk,key,keyval,fid,sqldata,xsqldata,tras(),xfid,XFID,xsql
	type Number hseq,iii,jjj,mmm,x,xcid,piece

	set filetyp=""	

        catch vERROR {
		do ZE^UTLERR
		}

	if zt["(" do { quit
		set global=zt.extract(4,zt.find("(")-2)
		set p3=zt.extract(zt.find("("),zt.find(")")-2)
		do getfid(global,p3,,"")
		if fid.isNull() do {
			do getfid(global,p3,1,"")
			if fid.isNull() do {
				if online=0 do output(timeseq,no,online,zt)
				else  if online=1 do {
					set xnn=zon("").order(-1)+1
					set zon(xnn,"nofile","nofile")="||"_zt
					}
				}
			}

		if fid.isNull() quit
		else  do {
			if (fid="ACN") ! (fid="AMORT") ! (fid="DEP") ! (fid="LN") do {
				set mmm=0
	 	    		set xcid=p3.piece(",",1) 

	 	    		if Db.isDefined("DEP","CID=:xcid") set fid="DEP"
	 	    		else  if Db.isDefined("LN","CID=:xcid") set fid="LN"
				else  set hseq="" for  set hseq=tras(hseq).order() quit:hseq.isNull() ! (mmm=1)  do {
					set jjj=tras(hseq).extract(tras(hseq).find("^"),(tras(hseq).find(")"))-1)
					set kkk=tras(hseq).extract(tras(hseq).find("="),tras(hseq).length())
					if (jjj=("ACN("_xcid_",50)")) , (kkk.piece("|",2)="L") set fid="LN",mmm=1
					else  if (jjj=("ACN("_xcid_",50)")) , (kkk.piece("|",2)="D") set fid="DEP",mmm=1
					else  if 'acnsql.get().isNull() do {
						if acnsql.piece("|",1)="D",p3.piece(",",1)=acnsql.piece("|",2) set fid="DEP",mmm=1
						else  if (acnsql.piece("|",1)="L") , (p3.piece(",",1)=acnsql.piece("|",2)) set fid="LN",mmm=1
						}
					}
				}

			set fkey=y,ffid=fid,knode=key9,keyv=p3.piece(",",1,y.length(","))
			if zt.extract(1)="k" do sqldelete quit

			if online=0 do sql(.state1,.state2,.sqldata) quit:nosql=1
			else  if online=1,(zon.data()=0) do sql(.state1,.state2,.sqldata) quit:nosql=1
			else  if (online=1),(zon.data()>0) do {  quit:nosql=1
				set nosql=0	
				do csql(.sqldata)
				if csql=0 do sql(.state1,.state2,.sqldata) if nosql=0 set xnn=(zon("").order(-1))+1
				}

			set data=zt.extract(zt.find("="),zt.length())
			set piece=data.length("|")
			set xfid=fid,XFID=fid

			type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:XFID")
			set filetyp=dbtbl1.filetyp

			if (filetyp=4) ! (data="""""") do {
				if sqldata.get().isNull() do {
					set xsql=state1_")"_state2_")" 
					if online=0 do output(timeseq,no,online,xsql)
					else  set xnn=zon("").order(-1)+1,zon(xnn,ffid,keyv)="||"_xsql
					}
				else  set xsql=state1_state2
				}
			else  if (filetyp'=4)!(data'="""""") for iii=1:1:piece do xreport11
			if sqldata.get().isNull() set xsql=state1_")"_state2_")"
			else  set xsql=state1_state2
			if online=0 do {
				do output(timeseq,no,online,xsql)
				do out1
				}
			else  if online=1 set zon(xnn,ffid,keyv)=state1_"|"_state2_"|"_xsql

			if zt.extract(1)="s" do {
				type String key1
				set key1=ffid_"("_keyv_")"
				type RecordTMPRPT1 tmprpt1=Db.getRecord("TMPRPT1","PID=:%ProcessID,KEY1=:key1",1)
				do tmprpt1.bypassSave()
				}
			}
		}
	else  do {
		if online=0 do output(timeseq,no,online,zt)
		else  if online=1 do {
			set xnn=zon("").order(-1)+1
			set zon(xnn,"nofile","nofile")="||"_zt
			}
		}
	quit


sqldelete //

	type public String fkey,keyval,p3,kk(),kkv(),fid,zt,y,FFID,ffid,knode,KNODE,zon(),sqldata,keyv
	type public Date timeseq
	type public Number no,csql,online
	type String di,clause,key,xdd,state1,state2,xsql,xdi,xdd
	type Number lll,mseq,xnn

	set lll=1,clause="",xdi="",xdd=""

	for mseq=1:1:fkey.length(",") do {
		set key=fkey.piece(",",mseq),keyval=p3.piece(",",mseq)
		if (key'?1n.n),(key'?1"""".e),(key'?1"""*""") set kk(lll)=key,kkv(lll)=keyval,lll=lll+1
		}

	if (fid="CUVAR") ! (kk.data()=0) do { quit
		set xsql=zt
		do k1
		}

	set lll=""
	for  set lll=kk(lll).order() quit:lll.isNull()  do {
		if lll=1 set clause=kk(lll)_"='"_kkv(lll)_"'"
		}

	// only delele few node instead of whole file
	if p3.length(",")'=y.length(",") do { quit
		set FFID=ffid,KNODE=knode
		set di=""
		type ResultSet rs=Db.select("DI,NOD","DBTBL1D","%LIBS='SYSDEV' and FID=:FFID","DI")
		while rs.next() do {		
			set di=rs.getCol("DI")
			if rs.getCol("NOD")'=KNODE quit
			if xdi.isNull() set xdi=di_" = ''",xdd=di
			else  set xdi=xdi_","_di_" = ''",xdd=xdd_","_di
			}
		if online=0 do { quit
			set xsql="UPDATE "_fid_" set "_xdi_" where "_clause
			do output(timeseq,no,online,xsql)
			}
		else  if online=1 do { quit
			if zon.data()=0 do { quit
				do sql(.state1,.state2,.sqldata) quit:sqldata.isNull()
				set xsql="UPDATE "_fid_" set "_xdi_" where "_clause
				set state1="UPDATE "_fid_" set "_xdi
				set state2=" where "_clause
				set xnn=zon("").order(-1)+1
				set zon(xnn,ffid,keyv)=state1_"|"_state2_"|"_xsql
				}
	 		else  if zon.data()>0 do {
				do csqlk
				if csql=0 do { quit
					do sql(.state1,.state2,.sqldata) quit:sqldata.isNull()
					set xsql="UPDATE "_fid_" set "_xdi_" where "_clause
					set state1=" UPDATE "_fid_" set "_xdi
					set state2=" where "_clause
					set xnn=zon("").order(-1)+1
					if no=4 b
					set zon(xnn,ffid,keyv)=state1_"|"_state2_"|"_xsql
					}
				else  do {
					if state1?1"INSERT".e quit
					set state1=state1_","_xdi
					set xsql=state1_state2
					set zon(xnn,ffid,keyv)=state1_"|"_state2_"|"_xsql
					}
				}
			}
		}
	else  set xsql="DELETE from "_ffid_" where "_clause	

	do k1
	quit


k1	//
	type public Number online,no
	type public String fid,keyv,xsql,zon(),ffid
	type public Date timeseq
	type Number xnn

	if online=0 do output(timeseq,no,online,xsql)
	else  if online=1 do {
		set xnn=zon("").order(-1)+1
		set zon(xnn,ffid,keyv)="||"_xsql_"|k"
		}
	quit


sql(xstate1,xstate2,sqldata)
	type public Number nosql,online,no,zt,xnn
	type public String acnsql,fid,fkey,p3,kk(),zon(),xfid,key1,keyv
	type public Date timeseq
	type Number lll,mseq,j,i
	type String kkv(),lll,clause,key,keyval,ikey,upkey,ival,state,etc,cls

	set cls=""
	set lll=1,clause="",nosql=0,sqldata=""
	if fid="CUVAR" , (fkey="*") do { quit
		set xstate1="UPDATE "_fid_" set "
		set xstate2=""
		}

	for mseq=1:1:fkey.length(",") do {
		set key=fkey.piece(",",mseq),keyval=p3.piece(",",mseq)
		if (key'?1n.n),(key'?1"""".e),(key'?1"""*""") set kk(lll)=key,kkv(lll)=keyval,lll=lll+1
		}

	set lll=""
	for  set lll=kk(lll).order() quit:lll.isNull()  do {
		if lll=1 do {
			set clause=kk(lll)_"='"_kkv(lll)_"'"
			set ikey=kk(1)
			set upkey=kk(1)_" = '"_kkv(1)_"'"
			set ival="'"_kkv(1)_"'"
			}
		else  do {
			set clause=clause_" and "_kk(lll)_"='"_kkv(lll)_"'"
			set ikey=ikey_","_kk(lll)
			set ival=ival_",'"_kkv(lll)_"'"
			set upkey=upkey_","_kk(lll)_" = '"_kkv(lll)_"'"
			}
		}

	if kk.data()=0 d { quit
		set nosql=1
  		if online=0 do output(timeseq,no,online,zt)
		else  if online=1 do {
        		set xnn=zon("").order(-1)+1
        		set zon(xnn,"nofile","nofile")="||"_zt
			}
		}

	set state=kk(1)_" from "_fid_" where "_clause

	if fid="HIST" do {
		set etc=({String}zt).piece("|",3)
		if 'etc.isNull() do {

			type RecordTRN trn=Db.getRecord("TRN","ETC=:etc")
			set cls=trn.cls
			if cls="D" set acnsql="D|"_p3.piece(",",1)
			else  if cls="L" set acnsql="L|"_p3.piece(",",1)
			else  if 'cls.isNull() set acnsql="M|"_p3.piece(",",1)
			}
		}

	if 'acnsql.get().isNull() , ((fid="DEP")!(fid="LN")) , (p3.piece(",",1)=acnsql.piece("|",2)) do { quit
		set sqldata="***"
		do build 
		}

	// HIST,CIFH,CIFD and TTX do insert only
	if fid="HIST"!(fid="TTX")!(fid="CIFH")!(fid="CIFD") set sqldata="" do build quit

	// if it is a finicial transaction with DTJNA file ( create a ne account)
	set j=0

	if zon.data() do {
		set i=""
		for  set i=zon(i).order() quit:i.isNull()!(j=1)  do {
			set xfid=""
			for  set xfid=zon(i,xfid).order() quit:(xfid.isNull())!(sqldata=1)  do {
 				if xfid="DTJNA" set j=1
				}
			}
		}

	if j=1 set sqldata="" do build quit

	// if file is in system already
	do SELECT^SQL(state,,,.sqldata)

	set key1=fid_"("_keyv_")"
	if Db.isDefined("TMPRPT1","PID=:%ProcessID,KEY1=:key1")
	
	// if file is in proious transactions
	if sqldata.isNull() , Db.isDefined("TMPRPT1","PID=:%ProcessID,KEY1=:key1") set sqldata="***"

	do build
	quit


build	//
	type public String sqldata,xstate1,xstate2,ikey,ival,fid,clause

	if sqldata.isNull() do {
		set xstate1="INSERT into "_fid_" ("_ikey
		set xstate2=" values ("_ival
		}
	else  if 'sqldata.isNull() do {

		//_upkey
		set xstate1="UPDATE "_fid_" set "
		set xstate2=" where "_clause
		}

	quit


csql(sqlstate)	//

	type public Number csql
	type Number delete,stax1,stax2
	type public String fid,zon(),p3,y,xnn,state1,state2,zonx(),ynn
	type String xfid,xk,nn

	set csql=0,delete=0
	set nn=""
	for  set nn=zon(nn).order() quit:(nn.isNull())!(delete=1)  do { 
		set xfid=""
		for  set xfid=zon(nn,xfid).order() quit:(xfid.isNull())!(delete=1)  do {
			if xfid=fid set xk=""
			for  set xk=zon(nn,xfid,xk).order() quit:(xk.isNull())!(delete=1)  do {
				if xk=p3.piece(",",1,y.length(",")) do {
					set xnn=nn
					if zon(nn,xfid,xk).piece("|",4)="k" set delete=1 quit
					set state1=zon(nn,xfid,xk).piece("|",1)
					set state2=zon(nn,xfid,xk).piece("|",2),csql=1
					}
				}
			}
		}

	if delete=0,(csql=1) set csql=1
	else  set csql=0 

	if (csql) ! (zonx.data()=0) do { quit
		if csql,state1["INSERT" set sqlstate=""
		else  if csql,state1["UPDATE" set sqlstate="***"
		}

	// checkill if the file is in zonx array

	set nn=""
	for  set nn=zonx(nn).order() quit:(nn.isNull())!(csql=1)  do {
		set xfid=""
		for  set xfid=zonx(nn,xfid).order() quit:(xfid.isNull())!(csql=1)  do {
			if xfid=fid set xk=""
			for  set xk=zonx(nn,xfid,xk).order() quit:(xk.isNull())!(csql=1)  do {
				if xk=p3.piece(",",1,y.length(",")) do {
					set stax1=zonx(nn,xfid,xk).piece("|",1)
					set stax2=zonx(nn,xfid,xk).piece("|",2)
					set csql=1
					set ynn=nn
					}
				}
			}
		}

	if csql do {
		if csql,state1["INSERT" set sqlstate=""
		else  if csql,state1["UPDATE" set sqlstate="***"
		}

	quit


csqlk	//
	type public String zon(),xfid,fid,xk,state1,state2,p3,y,xnn,xdd,zonx()
	type public Number csql
	type Number delete,nn,temp,i,j
	type String xval,xdata

	set csql=0,delete=0
	set nn=""
	for  set nn=zon(nn).order() quit:(nn.isNull())!(delete=1)  do {
		set xfid=""
		for  set xfid=zon(nn,xfid).order() quit:(xfid.isNull())!(delete=1)  do {
			if xfid=fid set xk=""
			for  set xk=zon(nn,xfid,xk).order() quit:(xk.isNull())!(delete=1)  do {
				if xk=p3.piece(",",1,y.length(",")) do {
					set xnn=nn
					if zon(nn,xfid,xk).piece("|",4)="k" set delete=1 quit
					set state1=zon(nn,xfid,xk).piece("|",1)
					set state2=zon(nn,xfid,xk).piece("|",2),csql=1
					}
				}
			}
		}

	if (delete=0),(csql=1) do {
		set temp=0
		if state1?1"INSERT".e do {
			set xval=state1.piece("(",2)
			for i=1:1:xdd.length(",") quit:temp=1  do {
				for j=1:1:xval.length(",") quit:temp=1  do {
					if xval.piece(",",j)=xdd.piece(",",i) set temp=1
					}
				}
			}
		else  if state1?1"UPDATE".e do {

			set xval=state1.piece("set ",2)

			for i=1:1:xdd.length(",") quit:temp=1  do {
				for j=1:1:xval.length(",") quit:temp=1  do {
					set xdata=xval.piece(",",j)
					if xdata.piece("=",1)=xdd.piece(",",i) set temp=1
					}
				}
			}
		if temp=0 set csql=1
		}
	else  set csql=0 

	quit


csqlx(xsqlstate)	//
	type public Number csql
	type public String zonx(),fid,p3,stax1,stax2,ynn,state1,y
	type String xfid
	type Number xk,nn

	set csql=0
	set nn=""
	for  set nn=zonx(nn).order() quit:(nn.isNull())!(csql=1)  do {
		set xfid=""
		for  set xfid=zonx(nn,xfid).order() quit:(xfid.isNull())!(csql=1)  do {
			if xfid=fid set xk=""
			for  set xk=zonx(nn,xfid,xk).order() quit:(xk.isNull())!(csql=1)  do {
				if xk=p3.piece(",",1,y.length(",")) do {
					set stax1=zonx(nn,xfid,xk).piece("|",1)
					set stax2=zonx(nn,xfid,xk).piece("|",2)
					set csql=1
					set ynn=nn
					}
				}
			}
		}

	if csql do {
		if csql,state1["INSERT" set xsqlstate=""
		else  if csql,state1["UPDATE" set xsqlstate="***"
		}
	quit


	//----------------------------------------------------------------------
xreport11	// potential transactions report with file definition
	//---------------------------------------------------------------------
	type public Number iiim,no,online,iii
	type public String knode,didata,data,piece,ffid,fid,global,p3,sqldata,state1,state2
	type public Date timeseq
	type Number pos,ccc,xccc,xll
	type String dinam,xxfid,result

	set pos=iii
	set didata=data.piece("|",iii)
	if iii=1 set didata=didata.extract(2,didata.length())
	else  if iii=piece set didata=didata.extract(1,didata.length()-1)
	if knode?1"""".e set knode=knode.translate("""","")

	type ResultSet rs=Db.select("DI","DBTBL1D","FID=:ffid and NOD=:knode and POS=:pos","DI")
	if rs.next() set dinam=rs.getCol("DI")

	set xxfid=ffid

	if dinam.isNull() do {
		if xxfid="LNBIL0" quit
		set ccc=0,xccc=0,fid=ffid
		for xll=1:1:20 quit:ccc=1!(xccc=1)  do xloop 
		if dinam.isNull(),(didata.isNull()) quit
		else  if (dinam.isNull()),('didata.isNull()) do {

			set result="set ^"_global_"("_p3_")"_","_"piece "_iii_" = "_didata

			do output(timeseq,no,online,result)
			}
		}
	else  do {
	 	if sqldata.get().isNull() , ('didata.isNull()) do {
			set state1=state1_","_dinam
			set state2=state2_",'"_didata_"'"
			}
		else  if 'sqldata.get().isNull() do {
			if state1.extract(state1.length()-3,state1.length()-1)'="set" set state1=state1_","_dinam_" = '"_didata_"'"
			else  set state1=state1_dinam_" = '"_didata_"'"
			}
		}
	quit


xloop	//
	type public String didata,dinam,fid,global,key9,p3,pos,stax1,stax2,xsqldata,xxfid,y,zonx()
	type public Number csql
	type Number ccc,xccc,ynn
	type String xsql

	do getfid(global,p3,,fid) 
	if fid.isNull() set ccc=1 quit
	if xxfid="DEP",fid="LN" quit
	if xxfid="LN",fid="DEP" quit
	if key9?1"""".e set key9=key9.translate("""","")

	if 'fid.isNull() do {
		type ResultSet rs=Db.select("DI","DBTBL1D","FID=:fid and NOD=:key9 and POS=:pos","DI")
		if rs.next() set dinam=rs.getCol("DI")
		}

	if dinam.isNull() quit
	set xccc=1

	if zonx.data()=0 do { 
		do sql(.stax1,.stax2,.xsqldata) 
		set ynn=1
		}
	else  if zonx.data()>0 do {
		do csqlx(.xsqldata)
		if csql=0 do sql(.stax1,.stax2,.xsqldata) set ynn=zonx("").order(-1)+1
		}

	if xsqldata.get().isNull(),('didata.isNull()) do {
		set stax1=stax1_","_dinam
		set stax2=stax2_",'"_didata_"'"
		set xsql=stax1_")"_stax2_")"
		}
	else  if 'xsqldata.get().isNull() do {
		if stax1.extract(stax1.length()-3,stax1.length()-1)'="set" set stax1=stax1_","_dinam_" = '"_didata_"'"
		else  set stax1=stax1_dinam_" = '"_didata_"'"
		set xsql=stax1_stax2
		}
	else  if xsqldata.get().isNull() , (didata.isNull()) quit

	set zonx(ynn,fid,p3.piece(",",1,y.length(",")))=stax1_"|"_stax2_"|"_xsql
	quit


	//---------------------------------------------------------------------
tmpgbl	// create global/file name index file 
	//---------------------------------------------------------------------- 
	type public String noapp()
	type String FID,gbl,keys,data,di,rectyp,filetyp,nod

	do notable^URECLOST

	do Db.fastDelete("TMPRPT3","PID=:%ProcessID,KEY1='GBL'")
	do Db.fastDelete("TMPRPT4","PID=:%ProcessID,KEY1='GBL'")

	set FID=""

	type ResultSet rs=Db.select("FID,GLOBAL,ACCKEYS","DBTBL1","%LIBS='SYSDEV'","FID")
	while rs.next() do {
		set FID=rs.getCol("FID")		
		type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID")

		set gbl=dbtbl1.global
		set keys=dbtbl1.acckeys

		if gbl.isNull() ! (gbl="TMPCACHE") quit
		set rectyp=dbtbl1.rectyp
		set filetyp=dbtbl1.filetyp

		if filetyp=5!(gbl?1"TMP".e)!(gbl?1"TEMP".e)!(gbl?1"tmp".e)!(gbl?1"ZTMP".e)!(noapp(gbl).exists()) quit
		if rectyp=1 do { quit
			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,KEY1='GBL',KEY2=:gbl,KEY3=:FID",1)
			set tmprpt3.data=keys_"|"_rectyp
			do tmprpt3.bypassSave()
			}
		set data=""

		// Locate unique node number form file FID
		set nod=""
		type ResultSet rs=Db.select("NOD","DBTBL1D","FID=:FID","NOD")
		while rs.next() do {
			set nod=rs.getCol("NOD")
			if nod?1n1"*" quit
			set data=data_","_nod	 
			}

		set data=data.extract(2,data.length())
		if data.length()<470 do {
			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,KEY1='GBL',KEY2=:gbl,KEY3=:FID",1)
			set tmprpt3.data=keys_"|"_rectyp_"|"_data
			do tmprpt3.bypassSave()
			}
	       else  do {
			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,KEY1='GBL',KEY2=:gbl,KEY3=:FID",1)
			set tmprpt3.data=keys_"|"_rectyp_"|"_data.extract(1,470)
			do tmprpt3.bypassSave()

			type RecordTMPRPT4 tmprpt4=Db.getRecord("TMPRPT4","PID=:%ProcessID,KEY1='GBL',KEY2=:gbl,KEY3=:FID,KEY4=1",1)
			set tmprpt4.data=keys_"|"_rectyp_"|"_data.extract(471,940)
			do tmprpt4.bypassSave()

			if data.length()>940 do {
				type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,KEY1='GBL',KEY2=:gbl,KEY3=:FID",1)
				set tmprpt3.data=keys_"|"_rectyp_"|"_data.extract(941,data.length())
				do tmprpt3.bypassSave()
				}
			}
		}
	quit


	//------------------------------------------------------------------
check	// used to checkill getfid section
	//------------------------------------------------------------------
	type public String p3,fid,y,rectyp,io
	type public Number ER
	type String gbl1,fid1,keys1,xrectyp,value,xxnod,ET,RM,WRT
	type Number keynum

	type IO io1=Class.new("IO")
	set io1.fileName=io
	set io1.openParams="WRITE/NEWV"

	do io1.open()
	catch ERROR {
		set ET=ERROR.type
		set RM=ERROR.context
		}

	if ER quit

	set gbl1=""
	type ResultSet rs=Db.select("KEY2","TMPRPT3","PID=:%ProcessID and KEY1='GBL'","KEY2")
	while rs.next() do {
		set gbl1=rs.getCol("KEY2")
		type ResultSet rs1=Db.select("DATA,KEY3","TMPRPT3","PID=:%ProcessID and KEY1='GBL' and KEY2=:gbl1","KEY3")
		while rs1.next() do {
			set fid1=rs1.getCol("KEY3")
			set keys1=rs1.getCol("DATA").piece("|",1)
			set xrectyp=rs1.getCol("DATA").piece("|",2)
			set value="1"

			if xrectyp=1 do {
				set keynum=keys1.length(",")
				set p3=keys1
				}
			else  if (xrectyp=10)!(xrectyp=11) do {
				set xxnod=rs1.getCol("DATA").piece("|",3)
				set p3=keys1_","_xxnod.piece(",",1)
				}

			do getfid(gbl1,p3,,"") 
			if fid.isNull() do getfid(gbl1,p3,1,"")
			if fid1'=fid do {
				do io1.write("")
				set WRT="global:"_gbl1_";  fid:"_fid1_";  fid:"_fid_";  keys:"_keys1_"; keys:"_y_";  rectyp:"_xrectyp_"; rectyp:"_rectyp
				do io1.write(.WRT)
				}
			}
		}
	do io1.close()

	quit


	//-------------------------------------------------------------------
getfid(gbl,xkeys,again,x)	// gbl = global name  keys = number of access keys 
	/*---------------------------------------------------------------------- 

	 parameters:
	       .gbl     global name 
	       .xkeys   access keys 
	       .again   0 call first time, 1 call second time 
	
	 returns: 
	 
	       fid     file name 

	----------------------------------------------------------------------
	*/

	type public String value,keyset,p3
	type Number iii,mmm,mmm1,find,yyy,i
	type String match,nod,data,keys,fid,y,y1,rectyp

	if x.get().isNull() set x=""
	if again.get().isNull() set again=0
	set keys=xkeys.length(",")
	set match=0,fid="",mmm=0

	type ResultSet rs=Db.select("KEY3,DATA","TMPRPT3","PID=:%ProcessID and KEY1='GBL' and KEY2=:gbl","KEY3")
	while rs.next() do {
		set x=rs.getCol("KEY3")
		set data=rs.getCol("DATA")
		set mmm1=0
		set y=data.piece("|",1)
		if (again'=1),(x="DAYEND"),('value.get().isNull()) quit
		set rectyp=data.piece("|",2)
		if rectyp=1,y.length(",")'=keyset quit
		set y1=p3

		if rectyp=10 do { quit:mmm1
			if ((y.length(",")+1)'=keys) , (y'="""*""") set mmm1=1 quit
			if (y="""*"""),(y.length(",")'=keys) set mmm1=1 quit
			if p3.piece(",",p3.length(","))?1n.n set y1=p3.piece(",",1,p3.length(",")-1)
			set find=0
			set nod=data.piece("|",3)
			for iii=1:1:nod.length()  quit:find  do {
				if nod.piece(",",iii)=xkeys.piece(",",xkeys.length(",")) set find=1
				}
			if find=0 set mmm1=1 quit
			}

		if rectyp=11 do { quit:mmm1
			if ((y.length(",")+1)'=keys),(y.length(",")'=keys) set mmm1=1 quit
			if ((y.length(",")+1)=keys) do { quit
				if p3.piece(",",p3.length(","))?1n.n set y1=p3.piece(",",1,(p3.length(",")-1))
				set find=0
				set nod=data.piece("|",3)
				for iii=1:1:nod.length()  quit:find  do {
					if nod.piece(",",iii)=xkeys.piece(",",xkeys.length(",")) set find=1
					}
				}
			if find=0 set mmm1=1 quit
			}

		if (gbl="UTBL") ! (gbl="STBL") ! (gbl="CTBL") if y.piece(",",1)'=p3.piece(",",1) quit
		if y?.e1n.e do { quit:yyy 
			set yyy=0
			for i=1:1:y.length(",") if (y.piece(",",i)?1n.n),(y.piece(",",i)'=p3.piece(",",i)) set yyy=1 quit
			}

		if (again'=1),(y1'="""*"""),y1?.e1"""".e do { quit:yyy
			set yyy=0
			for i=1:1:y1.length(",") if (y1.piece(",",i)?1"""".e),(y.piece(",",i)'=p3.piece(",",i)) set yyy=1 quit
			}

		if (y'="""*"""),y?.e1"""".e do { quit:yyy
			set yyy=0
			for i=1:1:y.length(",") if (y.piece(",",i)?1"""".e),(y.piece(",",i)'=p3.piece(",",i)) set yyy=1 quit
			}

		if (again'=1),(gbl="DBTBL"),(keys>1),(y1.piece(",",2)'=y.piece(",",2)) quit
		do key9
		}
	quit


key9	//
	type public String fid,key9,x,p3,y,keys
	type public Number match,rectyp

	set fid=x,match=1

	if rectyp=1 set key9=$p(y,",",keys)
	else  if rectyp=11 do {
		if (y.length(",")+1=keys) set key9=p3.piece(",",p3.piece(","))
		else  set key9=y.piece(",",keys)
		}
	else  if rectyp=10 set key9=p3.piece(",",p3.length(","))

	quit


	//----------------------------------------------------------------------
getindex(gbl,xkeys)	// get index file
	/*---------------------------------------------------------------------- 
	 
	 parameters:
	       .gbl    global name 			/TYP=T/REQ/MECH=VAL
	       .xkeys   access keys 			/TYP=T/REQ/MECH=VAL
	
	 returns: 
	 
	       index     indicator
	       pfid	  primary table name
	----------------------------------------------------------------------
	*/
	type Number yyy,i,index
	type String x,fid,pfid

	set index=0,pfid=""

	set x=""
	type ResultSet rs=Db.select("KEY3","TMPRPT4","PID=:%ProcessID and KEY1='IDX' and KEY2=:gbl","KEY3")

	// not in index definition
	if rs.isEmpty() quit

	while rs.next() do {
		set x=rs.getCol("KEY3")
		type ResultSet rs1=Db.select("KEY4","TMPRPT4","PID=:%ProcessID and KEY1='IDX' and KEY2=:gbl and KEY3=:x","KEY4")

		// primary table name
		set fid=rs1.getCol("KEY4")

		// compare orderby with global key structure
		if x.length(",")'=xkeys.length(",") quit
		if x?.e1n.e do { quit:yyy
			set yyy=0
			for i=1:1:x.length(",") if (x.piece(",",i)?1n.n),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}

		if (x?.e1"""".e) do { quit:yyy
			set yyy=0
			for i=1:1:x.length(",") if (x.piece(",",i)?1"""".e),(x.piece(",",i)'=xkeys.piece(",",i)) set yyy=1 quit
			}
		set index=1,pfid=fid
		}
	quit


	//----------------------------------------------------------------------
tmpgbl1	// Rebuild index file/global xref file
	//----------------------------------------------------------------------
	// Create global/index key xref file TMPRPT4(PID,global,orderby,fid)=""

	type String idx,fid,global,orderby

	set fid="",idx=""
	type ResultSet rs=Db.select("FID","DBTBL8","%LIBS='SYSDEV'","FID")
	while rs.next() do {
		set fid=rs.getCol("FID")
		type ResultSet rs1=Db.select("INDEXNM,GLOBAL,ORDERBY","DBTBL8","%LIBS='SYSDEV' and FID=:fid","INDEXNM")
		while rs1.next() do {

			set idx=rs1.getCol("INDEXNM")
			set global=rs1.getCol("GLOBAL")
			set orderby=rs1.getCol("ORDERBY")
			type RecordTMPRPT4 tmprpt4=Db.getRecord("TMPRPT4","PID=:%ProcessID,KEY1='IDX',KEY2=:global,KEY3=:orderby,KEY4=:fid",1)
			do tmprpt4.bypassSave()
			}
		}
	quit


	//----------------------------------------------------------------------
tmpgbl2	/* Rebuild journal file/global xref file
	  ----------------------------------------------------------------------
	   Create journal/primary xref file TMPRPT3(PID,journal_file,Primary_file)=""
	*/

	type String fid,jrnfile,jrnid
	set fid="",jrnid=""
	
	type ResultSet rs=Db.select("PRITABLE","DBTBL9","%LIBS='SYSDEV'","PRITABLE")
	while rs.next() do {
		set fid=rs.getCol("PRITABLE")
		type ResultSet rs1=Db.select("JRNID,SUBTABLE","DBTBL9","%LIBS='SYSDEV'","JRNID")
		while rs1.next() do {
			set jrnfile=rs1.getCol("SUBTABLE")
			type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:%ProcessID,KEY1='JRN',KEY2=:jrnfile,KEY3=:fid",1)
			do tmprpt3.bypassSave()
			}
		}	

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60332^70038^Dan Russell^51508"	// Signature - LTD^TIME^USER^SIZE
