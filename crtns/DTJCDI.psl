DTJCDI	  
  /*
  ORIG: ofaltr - 06/29/2000
  DESC: Computed Fields for DTJ
  
 
   LIBRARY
   
   $$ XHS16PC   Loan error-correct pieces  
   $$ HISTRVAL 	Reversal/Error Correct for Transactions
 
  ---- Comments --------------------------------------------------------
  
  ---- Revision History ------------------------------------------------
  11/24/05 - ALAGARSS - CR16677
	     Added the sections data,DSET,LOOKUP,TBL,GETTBL,TRIMKEYS
	     from the Procedure SCARPTS.
  
  08/30/01 - JERUCHIMC - 47204
	     Add XHS16PC section to return loan error-correct pieces.
  
 */

	quit

XHS16PC(TJD,DATETIME,CID,TSEQ,PSQ)  //Returns value taken from [DTJ]LNERC depending on PSQ
 
        /*
         ARGUMENTS:
         . TJD  Julian Date                  /TYP=N/REQ/MECH=VAL
         . DATETIME Date Time                /TYP=N/REQ/MECH=VAL
         . CID Account Number                /TYP=N/REQ/MECH=VAL
         . TSEQ Transaction Sequence         /TYP=N/REQ/MECH=VAL
         . PSQ  Piece Sequence               /TYP=N/REQ/MECH=VAL
 
         RETURNS:
         . $$   Error-Correcting amount   /TYP=$
 
        */
 
        new LNERC
        
        type ResultSet rs=Db.select("XHS16","DTJ","TJD=:TJD AND DATETIME=:DATETIME AND CID=:CID AND TSEQ=:TSEQ")
        if rs.next() set LNERC=rs.getCol("XHS16")
 
        new RESULT
        set RESULT=$P(LNERC,"#",PSQ)
        quit RESULT

HISTRVAL(XCID,XTSEQ)	//Reversal/Error Correct for Transactions
	/*
        The function is used to compute [DTJ]HISTRVAL field.
        
        ARGUMENTS:
		CID	Account Number		/TYPE=N/REQ/MECH=VAL
               TSEQ    Transaction Seq Number  /TYPE=N/REQ/MECH=VAL
        
         RETURNS: Reversal/Error Correct for Transactions
        
         EXAMPLE: $$HISTRVAL^DTJCDI(CID,TSEQ)
	*/
	
	new XHISTRVAL
	
	type ResultSet rs1=Db.select("REVFLG","HISTR","CID=:XCID AND TSEQ=:XTSEQ")
	if rs1.next() set XHISTRVAL=rs1.getCol("REVFLG")
	
	quit XHISTRVAL
	

TRFAVLBL(TJD,DATETIME,XCID,TSEQ)   //Transfer Account's Available Balance
	/*
        The function is used to compute [DTJ]TRAVLBAL field.
        
        ARGUMENTS:
		TJD	Posting Date		/TYPE=D/REQ/MECH=VAL
	   DATETIME 	Date/Time Stamp 	/TYPE=N/REQ/MECH=VAL
	       XCID	Account Number		/TYPE=N/REQ/MECH=VAL
               TSEQ    	Transaction Seq Number  /TYPE=N/REQ/MECH=VAL
        
         RETURNS: Transfer Account's Ledger Balance
        
         EXAMPLE: $$TRFAVLBAL^DTJCDI(TJD,DATETIME,CID,TSEQ)
	*/

	if $G(TJD)="" quit ""
	if $G(DATETIME)="" quit ""
	if $G(XCID)="" quit ""
	if $G(TSEQ)="" quit ""

	new CLS,TRFAVL,TRFACC
	
	type ResultSet rs2=Db.select("TRFACC","DTJ","TJD=:TJD AND DATETIME=:DATETIME AND CID=:XCID AND TSEQ=:TSEQ")
        if rs2.next() set TRFACC=rs2.getCol("TRFACC")
        
	if TRFACC="" quit ""

	type ResultSet rs3=Db.select("CLS","ACN","CID=:TRFACC")
	if rs3.next() set CLS=rs3.getCol("CLS")
	
	if CLS="D" do {
		type ResultSet rs4=Db.select("BALAVL","DEP","CID=:TRFACC")
		if rs4.next() set TRFAVL=rs4.getCol("BALAVL")
	}
	else  do {
		
		type ResultSet rs5=Db.select("AVLBAL","LN","CID=:TRFACC")
		if rs5.next() set TRFAVL=rs5.getCol("AVLBAL")
	}
	quit TRFAVL


TRFLEGBL(TJD,DATETIME,XCID,TSEQ)   //Transfer Account's Ledger Balance
	/*
        The function is used to compute [DTJ]TRLEGBAL field.
        
        ARGUMENTS:
		TJD	Posting Date		/TYPE=D/REQ/MECH=VAL
	   DATETIME 	Date/Time Stamp 	/TYPE=N/REQ/MECH=VAL
	       XCID	Account Number		/TYPE=N/REQ/MECH=VAL
               TSEQ    Transaction Seq Number  /TYPE=N/REQ/MECH=VAL
        
         RETURNS: Transfer Account's Ledger Balance
        
         EXAMPLE: $$TRFLEGBAL^DTJCDI(TJD,DATETIME,CID,TSEQ)
	*/

	if $G(TJD)="" quit ""
	if $G(DATETIME)="" quit ""
	if $G(XCID)="" quit ""
	if $G(TSEQ)="" quit ""

	new TRFBAL,TRFACC
	
	type ResultSet rs6=Db.select("TRFACC","DTJ","TJD=:TJD AND DATETIME=:DATETIME AND CID=:XCID AND TSEQ=:TSEQ")
        if rs6.next() set TRFACC=rs6.getCol("TRFACC")
        
	if TRFACC="" quit ""

	type ResultSet rs7=Db.select("BAL","ACN","CID=:TRFACC")
	if rs7.next() set TRFBAL=rs7.getCol("BAL")
	
	quit TRFBAL


TRFUDBAL(TJD,DATETIME,XCID,TSEQ)    //Transfer Account's Unadvanced Balance
	/*
        The function is used to compute [DTJ]TRFUDBAL field.
        
        ARGUMENTS:
		TJD	Posting Date		/TYPE=D/REQ/MECH=VAL
	   DATETIME 	Date/Time Stamp 	/TYPE=N/REQ/MECH=VAL
	       XCID	Account Number		/TYPE=N/REQ/MECH=VAL
               TSEQ    Transaction Seq Number  /TYPE=N/REQ/MECH=VAL

         RETURNS: Transfer Account's Unadvanced Balance
        
         EXAMPLE: $$TRFUDBAL^DTJCDI(TJD,DATETIME,CID,TSEQ)
	*/

	if $G(TJD)="" quit ""
	if $G(DATETIME)="" quit ""
	if $G(XCID)="" quit ""
	if $G(TSEQ)="" quit ""

	new TRFBAL,TRFACC
		
	type ResultSet rs8=Db.select("TRFACC","DTJ","TJD=:TJD AND DATETIME=:DATETIME AND CID=:XCID AND TSEQ=:TSEQ")
        if rs8.next() set TRFACC=rs8.getCol("TRFACC")
        
	if TRFACC="" quit ""

	type ResultSet rs9=Db.select("UDBAL","LN","CID=:TRFACC")
	if rs9.next() set TRFBAL=rs9.getCol("UDBAL")
	
	quit TRFBAL
	
public	data(Date %SystemDate,
	     String CLS,
	     String GRP,
	     Number TYP,
	     Number CID,
	     Number TSEQ)

	// Assignment Expression for column DATA in table DTJFM
	
	type public String MPLCT(,)
	type public Boolean ER
	
	type String %LIBS, DATA, DESC, DFID, DI, DI1, DILNM, DIX, KEY, NEWV
	type String NEWV1, NEWV2, NEWV3, NEWV4, NEWVUF, OLDV1, OLDV2
	type String OLDV3, OLDV4, TBL, X

	set %LIBS = "SYSDEV"
	set (DATA, KEY) = ""

	set (NEWV, NEWV2, NEWV3, NEWV4) = ""
	set (OLDV2, OLDV3, OLDV4) = ""
	
	type RecordDTJFM dtjfm = Db.getRecord("DTJFM", "%SystemDate,CLS,GRP,TYP,CID,TSEQ")

	set DATA = dtjfm.tcmt
	set OLDV1 = DATA.piece(":", 2)
	set NEWV1 = DATA.piece(":", 3)
	set DIX = DATA.piece(":", 1)
	set NEWVUF = DATA.piece(":", 3)

	if DIX.isLike("%[%") set DIX = DIX.piece("[",2), DIX = "["_DIX
	else  do { quit DATA
		set DESC = DIX
		set DI=""
		do DSET
	}

	if 'DATA.isLike("%[%") set:DESC.isNull() DESC = DATA, DI = "" do DSET quit DATA
	
	set DFID = DIX.piece("]", 1)
	set DFID = DFID.piece("[", 2)
	
	set DI1 = DIX.piece("]", 2)
	set X = DIX
	
	do ^DBSDI
	if ER quit ""
	
	set DESC = DILNM.get()

	// Mailing Address
	if DI = "MSEQ" set DESC = $$^MSG("4857")

	// Legal Address
	if DI = "LSEQ" set DESC = $$^MSG("4856")

	// Invalid Data Item (DI not in ^DBTBL)
	if DI.isNull() do { quit ""
		set DESC = $$^MSG(1298)
		set DI = DIX
		do DSET
	}
	
	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:DFID,DI=:DI1", 1)

	set TBL = dbtbl1d.tbl
	set DESC = dbtbl1d.des
	
	if dbtbl1d.typ = "D" do {
		set:(OLDV1?1.5N) OLDV1 = {Date}OLDV1.toString()
		set:(NEWV1?1.5N) NEWV1 = {Date}NEWV1.toString()
	}

	if TBL.extract() = "[" set TBL = $$GETTBL(TBL, .KEY)

	if 'TBL.isNull(),'KEY.isNull() do LOOKUP
	
	set DI = DI1
	set DESC = DESC.extract(1, 20)
	set OLDV1 = OLDV1.extract(1, 35)
	set NEWV1 = NEWV1.extract(1, 35)
	
	do DSET
	
	quit DATA
	
DSET	// set the variables

	type public String DI, DATA, DESC, NEWV, NEWVUF, NEWV1, NEWV2, NEWV3
	type public String NEWV4, OLDV1, OLDV2, OLDV3, OLDV4

	if 'DI.isNull(), OLDV1.isNull() set OLDV1 = "Null"
	if 'DI.isNull(), NEWV1.isNull() set NEWV1 = "Null"

	set DATA = DI_"|"_DESC_"|"_OLDV1_"|"_OLDV2_"|"_OLDV3_"|"_OLDV4_"|"_NEWV1_"|"_NEWV2_"|"_NEWV3_"|"_NEWV4_"|"_NEWV_"|"_NEWVUF
	
	quit
	

LOOKUP	// Find table values

	type public String COL = "", KEY, NEWV1, OLDV1, TBL
	
	type Number LEN
	
	// Select non-key columns
	type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:TBL AND NOD NOT LIKE '%*%'")
	
	// Assume first column
	if rs.next() set COL = rs.getCol("DI")
	if COL.isNull() quit

	do TBL(COL, TBL, KEY, .NEWV1)
	do TBL(COL, TBL, KEY, .OLDV1)

	set LEN = $S(NEWV1.length() > OLDV1.length():NEWV1, 1:OLDV1).length()

	set NEWV1 = NEWV1_" "_"                    ".extract(1, LEN - NEWV1.length())
	set OLDV1 = OLDV1_" "_"                    ".extract(1, LEN - OLDV1.length())
	
	quit
	
TBL(String COL, String TBL, String KEY, String VAL)	// Decode table

	type String WHERE

	if VAL.isNull() set VAL = "Null" quit
	
	set WHERE = KEY_"='"_VAL_"' OR "_KEY_"='"_VAL.piece(" ", 1)_"'"

	#ACCEPT DATE=03/21/05;PGM=SmithCD
	type ResultSet rs = Db.select(COL, TBL, WHERE)
	
	if rs.next() set VAL = VAL_" ["_rs.getCol(1)_"]"  quit
	
	// No Table Entry
	set VAL = $$^MSG("4858")
	
	quit
	
GETTBL(String TBL, String KEY)	// Get table from table reference

	type public String %LIBS

	type String KEYLIST
	
	// Parse table ref
	set TBL = TBL.piece("]", 1)
	set TBL = TBL.piece("[", 2)
	
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:TBL", 1)
	
	set KEYLIST = dbtbl1.acckeys
	quit:KEYLIST.isNull() TBL
	
	set KEY = $$TRIMKEYS(KEYLIST) quit:KEY="" ""
	
	// Return table name
	quit TBL

TRIMKEYS(String KEYLIST)	// Trim key names from global ref

	type String KEYVAL, KEY = ""
	type Number I, NUMKEYS
	type Boolean NONLIT = 0
	
	set NUMKEYS = KEYLIST.length(",")

	// Parse key dinams
	for I = 1:1:NUMKEYS do {  quit:NONLIT = 1
		set KEYVAL = KEYLIST.piece(",", I)
		
		// Exclude literal keys
		if KEYVAL.isLiteral() quit
		
		set NONLIT = 1

		// Keep the first non-literal
		set KEY = KEYVAL
	}

	quit KEY
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60233^36281^Sivakumar Alagarsamy^8817"	// Signature - LTD^TIME^USER^SIZE
