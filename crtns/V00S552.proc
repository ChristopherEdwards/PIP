V00S552(%ProcessMode,RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)   //PBS -  - SID= <UTBLAWTIR> Accrued withholding tax index tiers
 ;;Copyright(c)2006 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/24/2006 12:20 - kini
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,TIER",VSID="UTBLAWTIR",VPGM=$T(+0),VSNAME="Accrued withholding tax index tiers"
 set VFSN("UTBLAWTI")="zfUTBLAWT",VFSN("UTBLAWTIR")="zfUTBLAWR"
 set vPSL=1
 set KEYS(1)=fUTBLAWT.AWTI
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=14 do VPR(.fUTBLAWT,.fUTBLAWR),VDA1(.fUTBLAWT,.fUTBLAWR),V5^DBSPNT quit

 if '%ProcessMode do VNEW(.fUTBLAWT,.fUTBLAWR),VPR(.fUTBLAWT,.fUTBLAWR),VDA1(.fUTBLAWT,.fUTBLAWR)
 if %ProcessMode do VLOD(.fUTBLAWT,.fUTBLAWR) quit:$G(ER)  do VPR(.fUTBLAWT,.fUTBLAWR),VDA1(.fUTBLAWT,.fUTBLAWR)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLAWT,.fUTBLAWR)
	quit


VNEW(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR) // Initialize arrays if %O=0
 
 do VDEF(.fUTBLAWT,.fUTBLAWR)
 do VLOD(.fUTBLAWT,.fUTBLAWR)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR) // Load data from disc - %O = (1-5)
 if '$D(%REPEAT) set %REPEAT=14
 if '$D(%MODS) set %MODS=1
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR) // Display screen prompts
 set VO="5||13|0"
 set VO(0)="|0"
 set VO(1)=$C(2,2,24,0,0,0,0,0,0,0)_"01TAccr W/H Tax Index Name:"
 set VO(2)=$C(3,14,12,0,0,0,0,0,0,0)_"01TDescription:"
 set VO(3)=$C(5,26,21,1,0,0,0,0,0,0)_"01TWithholding Tax Index"
 set VO(4)=$C(7,26,15,0,0,0,0,0,0,0)_"01TEffective Date:"
 set VO(5)=$C(8,5,51,0,0,0,0,0,0,0)_"01TLevel       Interest Rate Tier             Tax Rate"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)  // Display screen data
 new V
 s DES=$G(DES)
 s TIER=$G(TIER)
 //
 set VO="8|6|13|0"
 set VO(6)=$C(2,27,6,2,0,0,0,0,0,0)_"01T"_$E(fUTBLAWT.AWTI,1,6)
 set VO(7)=$C(3,27,40,2,0,0,0,0,0,0)_"01T"_$G(DES)
 set VO(8)=$C(7,42,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM(fUTBLAWR.EFDATE)
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+2,DY=9 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLAWT,.fUTBLAWR)
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)  // Display data %REPEAT times
 //instantiate new object if necessary
 if %ProcessMode=5 new v1
 if  set (v1)=""
 else  new v1
 else  set (v1,TIER(I))=$G(TIER(I))
 
 set VO(VX+1)=$C(DY,7,2,2,0,0,0,0,0,0)_"01T"_$P(v1,"|",1)
 set VO(VX+2)=$C(DY,19,18,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",2)
 set VO(VX+3)=$C(DY,42,18,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",3)
 set DY=DY+1,VX=VX+3
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=1
 set %MODOFF=3,%MOD=3,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=2,VPB=8+%REPEAT,BLKSIZ=(38*%REPEAT)+56,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLAWTI",VSCRPP=1,VSCRPP=1
 set OLNTB=VPB*1000
 
 set VFSN("UTBLAWTI")="zfUTBLAWT",VFSN("UTBLAWTIR")="zfUTBLAWR"
 //
 for I=7:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(1,26,6)_"20T12401|1|[UTBLAWTI]AWTI"
 set %TAB(2)=$C(2,26,40)_"20T|*DES|[*]@DES"
 set %TAB(3)=$C(6,41,10)_"20D12402|1|[UTBLAWTIR]EFDATE|[UTBLAWTIEFD]"
 set %TAB(4)=$C(8,6,2)_"20T12401|*TIER(1)|[*]@NUM"
 set %TAB(5)=$C(8,18,18)_"00T12402|*TIER(1)|[*]@IRT|||do VP1^V00S552(.fUTBLAWT,.fUTBLAWR)"
 set %TAB(6)=$C(8,41,18)_"00T12403|*TIER(1)|[*]@AWTR|||do VP2^V00S552(.fUTBLAWT,.fUTBLAWR)"
 do VTBL(.fUTBLAWT,.fUTBLAWR)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VSPP   // screen post proc
 type Public RecordUTBLAWTI fUTBLAWT
 type Public RecordUTBLAWTIR fUTBLAWR
 do VSPP1(.fUTBLAWT,.fUTBLAWR)
 #ACCEPT Date=11/05/03; pgm=Screen Compilerxxx
 quit
VSPP1(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)
 	;---- Revision History -----------------------------------------
	; 11/16/05 - Sreeram Panyaram
	;	     Changed to PSL Standards.	
        ;
	; 12/20/01 - SCHWARTZA - 46105:03
	;	     Changing 'TAXRATE to TAXRATE'="" to allow the Tax Rate 
	;	     to be 0.
	;
	;---------------------------------------------------------------
	type Number CNT,DUPE,INTRATE,NEWTIER(),TAXRATE
	
	// Check for duplicate tiers before filing
	
	set (CNT,DUPE)=0
	for  set CNT=TIER(CNT).order() quit:CNT=""  do {
		set INTRATE=TIER(CNT).piece("|",2)
		if NEWTIER(INTRATE).get(),INTRATE'="" set DUPE=1 quit
		if INTRATE'="" set NEWTIER(INTRATE)=1
	}
	// No duplicates allowed
	if DUPE=1 set ER=1,RM=$$^MSG(7177) quit
	
	// Check for Interest Tiers with no Rate associated
	
	set (CNT,DUPE)=0	
	for  set CNT=TIER(CNT).order() quit:CNT=""  do {
 		set INTRATE=TIER(CNT).piece("|",2)
		set TAXRATE=TIER(CNT).piece("|",3)
		if INTRATE,(TAXRATE="") set DUPE=1 quit	; ABS 1/9/02
	}
	// Verify that all tiers have values associated with them
	if DUPE=1 set ER=1,RM=$$^MSG(2949) quit
	
	
	// Remove empty tiers
	
	type String CNT
	type Number NEWCNT,NEWTIER()
	set CNT="",NEWCNT=1
	for  set CNT=TIER(CNT).order() quit:CNT=""  do {
		if TIER(CNT).piece("|",2)'="" set NEWTIER(NEWCNT)=TIER(CNT),NEWCNT=NEWCNT+1
	}
	
	set CNT=""
	
	for  set CNT=TIER(CNT).order() quit:CNT=""  do {
		if 'NEWTIER(CNT).get() set TIER(CNT)=CNT_"||"
		if NEWTIER(CNT).get() set TIER(CNT)=TIER(CNT) 
	}
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR) //
	type public String X
	type String tempx,y,dicheck

	set (dicheck,dup,z,y)=0
	set tempx=X
	
	// Invalid entry 
	if tempx'<100 set ER=1,RM=$$^MSG(5791) quit
	quit:tempx="" 
	quit:tempx?1.3N
	quit:tempx?1.3N1"."1.5N
	
	// Invalid entry 
	if tempx'?1"["1.20E1"]" set ER=1,RM=$$^MSG(5791) quit
        
	set tempx=tempx.extract(tempx.find("["),tempx.length(-1))
	
	//	Check for valid Data Items 
	
	type ResultSet rs=Db.select("TICA","STBLTICA",,"TICA")
	while rs.next() do {
		set y=rs.getCol("TICA")
		if tempx=y set dicheck=1
		}

	quit:dicheck'=0

	//	Invalid entry ~p1
	set ER=1,RM=$$^MSG(5791)
VP2(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR) //
	type public String tempx,dicheck,X

	set tempx=X
	set dicheck=0

	//	Verify that all values have an associated tier
	if TIER(z1).piece("|",2)="",tempx'="" set ER=1,RM=$$^MSG(2950) quit
	
	if tempx?0.2N1"."1.5N quit
	if tempx?0.2N quit
	
	set (num,di,front,back)=0
	set check=1
	/*
		If the entry contains a *, seperate it into two parts and
		check each pair for .XX and [DI].  Store whichever side is 
		inside brackets as tempx, tempx is then checked against valid
		data items */
	
	if tempx["*" do { 
		set check=1
		set front=tempx.extract(1,tempx.find("*")-2)
		set back=tempx.extract(tempx.find("*"),tempx.length())
		if front?1"."1.3N set num=1
		if back?1"["7E1"]" do {
			set di=1 
			if num=1 set tempx=back
			}
		if num,di set check=0 quit
		set (num,di)=0
		if back?1"."1.3N set num=1
		if front?1"["7E1"]" do {
			set di=1
			if num=1 set tempx=front
			}
		if num,di set check=0
		}

		//	Invalid Entry

	if check set ER=1,RM=$$^MSG(5791) quit
	set tempx=tempx.extract(2,tempx.length()-1)

	
	type ResultSet rs=Db.select("TICA","STBLTICA",,"TICA")
	while rs.next() do {
		set y=rs.getCol("TICA")
		if tempx=y set dicheck=1
		}

	quit:dicheck'=0

	//	Invalid Entry
	set ER=1,RM=$$^MSG(5791) 
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLAWTI fUTBLAWT
 type Public RecordUTBLAWTIR fUTBLAWR
 do VPR(.fUTBLAWT,.fUTBLAWR)
 do VDA1(.fUTBLAWT,.fUTBLAWR)
 do ^DBSPNT()
 quit

VW(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)
 do VDA1(.fUTBLAWT,.fUTBLAWR)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLAWTI fUTBLAWT,RecordUTBLAWTIR fUTBLAWR)
 do VDA1(.fUTBLAWT,.fUTBLAWR)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLAWTI fUTBLAWT
 type Public RecordUTBLAWTIR fUTBLAWR
 do VDA1(.fUTBLAWT,.fUTBLAWR)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLAWTI fUTBLAWT
 if sn="UTBLAWTI" do vSET1(.fUTBLAWT,di,X)
 type Public RecordUTBLAWTIR fUTBLAWR
 if sn="UTBLAWTIR" do vSET2(.fUTBLAWR,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordUTBLAWTI fUTBLAWT,di,X)
 do fUTBLAWT.setAuditFlag(1)
 set fUTBLAWT.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET2(RecordUTBLAWTIR fUTBLAWR,di,X)
 do fUTBLAWR.setAuditFlag(1)
 set fUTBLAWR.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordUTBLAWTI fUTBLAWT
 if fid="UTBLAWTI" quit $$vREAD1(.fUTBLAWT,di)
 type Public RecordUTBLAWTIR fUTBLAWR
 if fid="UTBLAWTIR" quit $$vREAD2(.fUTBLAWR,di)
 quit ""
vREAD1(RecordUTBLAWTI fUTBLAWT,di)
 quit fUTBLAWT.@di
vREAD2(RecordUTBLAWTIR fUTBLAWR,di)
 quit fUTBLAWR.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
