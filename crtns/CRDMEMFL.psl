CRDMEMFL(RecordCRDMEM crdmem, String vpar, Boolean vparNorm) // CRDMEM - ATM Card Member File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crdmem.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(crdmem,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crdmem,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CRDTYP = crdmem.crdtyp
	type String CRDNUM = crdmem.crdnum
	type String MNUM = crdmem.mnum

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CRDTYP").exists()!vx("CRDNUM").exists()!vx("MNUM").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRDMEM",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRDMEM","CRDTYP = :crdmem.crdtyp and CRDNUM = :crdmem.crdnum and MNUM = :crdmem.mnum") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CRDTYP
	type public String CRDNUM
	type public String MNUM

	type RecordCRDMEM crdmem = Db.getRecord("CRDMEM","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM,MNUM=:MNUM")
	if (%ProcessMode = 2) do {
		do crdmem.setMode(2)

		do CRDMEMFL(crdmem,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRDMEM crdmem

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRDMEM","CRDTYP = :crdmem.crdtyp and CRDNUM = :crdmem.crdnum and MNUM = :crdmem.mnum") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crdmem)) S ^CARD(vobj(crdmem,-3),vobj(crdmem,-4),"M",vobj(crdmem,-5))=vobj(crdmem)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.crdmem)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRDMEM crdmem

	if vpar["/JOURNAL/" do VJOURNAL(.crdmem)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CARD(vobj(crdmem,-3),vobj(crdmem,-4),"M",vobj(crdmem,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordCRDMEM crdmem

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRDMEM crdmem

	if crdmem.crdtyp.isNull() do vreqerr("CRDTYP") quit
	if crdmem.crdnum.isNull() do vreqerr("CRDNUM") quit
	if crdmem.mnum.isNull() do vreqerr("MNUM") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDMEM","MSG",1767,"CRDMEM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCRDMEM crdmem
	if 'crdmem.crdnum.isNull() set vfkey("^CARD("_""""_crdmem.crdtyp_""""_","_""""_crdmem.crdnum_""""_")")="CRDMEM(CRDTYP,CRDNUM) -> CRD"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCRDMEM crdmem
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CRD",":crdmem.crdtyp,:crdmem.crdnum") set vERRMSG = $$^MSG(8563,"CRDMEM(CRDTYP,CRDNUM) -> CRD") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCRDMEM crdmem
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(crdmem,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Create of A CRDMEM entry

	type public RecordCRDMEM crdmem
	/*
	---- Revision History ------------------------------------------------
	
	09/10/99 - CARROLLJ - 33890
		   Convert to PSL.

	07/20/99 - SCHWARTZC - 33975
		   Add code to check if the issue date is the null string before
		   comparing it with the order date.
	
	07/06/99 - SCHWARTZC - 32386
		   Remove code to default the issue date to the system date
		   plus 15 days.  Changed check for issue date/order date to
		   check that the issue date is less than the order date.  This
		   allows them to be equal instead of requiring the issue date to
		   greater than the order date.
	*/
	
	if crdmem.ord="" set crdmem.ord=%SystemDate
	if crdmem.isdt'="",crdmem.isdt<crdmem.ord do Runtime.setErrMSG("CRDMEM",2203) quit 
	if crdmem.exp'="",crdmem.exp'>crdmem.isdt do Runtime.setErrMSG("CRDMEM",750) quit 
	quit
	

vbu1 // Trigger BU_ISDT - Before Update Issue Date

	type public RecordCRDMEM crdmem
	do crdmem.setAuditFlag(1)
	if crdmem.isdt'>crdmem.ord do Runtime.setErrMSG("CRDMEM",2203) quit 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRDMEM crdmem

	if crdmem.crdtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CRDTYP", vRM) quit
	if crdmem.crdnum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CRDNUM", vRM) quit
	set X = crdmem.mnum if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MNUM", vRM) quit
	set X = crdmem.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = crdmem.isdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISDT", vRM) quit
	set X = crdmem.ord if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ORD", vRM) quit
	set X = crdmem.stat if 'X.isNull(),'Db.isDefined("STBLCRDSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDMEM","MSG",979,"CRDMEM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCRDMEM crdmem)	//CRDMEM Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.crdmem)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_D
			}
		else  if TSRC="O" do {
			do vj1(.crdmem)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.crdmem)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I
			}
		else  if TSRC="O" do {
			do vj2(.crdmem)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.crdmem)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj3(.crdmem)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordCRDMEM crdmem)	// HIST_D  Table CIFH  Card Member delete journal file

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crdmem.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","CRDMEM","MNUM",crdmem.mnum,$$^MSG(805)_":"_crdmem.crdtyp_"-"_crdmem.crdnum)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCRDMEM crdmem)	// HIST_I  Table CIFH  Insert journal file

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crdmem.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","CRDMEM","MNUM",crdmem.mnum,$$^MSG(7131)_":"_crdmem.crdtyp_"-"_crdmem.crdnum)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordCRDMEM crdmem)	// HIST_U  Table CIFH  Card Member update journal file

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=crdmem.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^CIFFUNCS("","CRDMEM",vdi,vold,vnew_":"_$$^MSG(6744,crdmem.crdtyp_"-"_crdmem.crdnum,crdmem.mnum))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordCRDMEM crdmem

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CRDTYP").exists() set vux("CRDTYP") = vx("CRDTYP")
	if vx("CRDNUM").exists() set vux("CRDNUM") = vx("CRDNUM")
	if vx("MNUM").exists() set vux("MNUM") = vx("MNUM")
	do vkey(1) set voldkey = crdmem.crdtyp_","_crdmem.crdnum_","_crdmem.mnum // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crdmem.crdtyp_","_crdmem.crdnum_","_crdmem.mnum // Copy new keys into object
	type RecordCRDMEM vnewrec = crdmem.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRDMEM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRDMEM crdmem

	if vux("CRDTYP").exists() set crdmem.crdtyp = vux("CRDTYP").piece("|",i)
	if vux("CRDNUM").exists() set crdmem.crdnum = vux("CRDNUM").piece("|",i)
	if vux("MNUM").exists() set crdmem.mnum = vux("MNUM").piece("|",i)
	quit
