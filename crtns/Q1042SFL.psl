Q1042SFL(RecordQ1042S q1042s, String vpar, Boolean vparNorm) // Q1042S - Q Record - 1042-S Form Data Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (26)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = q1042s.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(q1042s,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(q1042s,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("JOB").exists()!vx("TYPE").exists()!vx("RTIN").exists()!vx("ACN").exists()!vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("Q1042S",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("Q1042S","JOB = :q1042s.job and TYPE = :q1042s.type and RTIN = :q1042s.rtin and ACN = :q1042s.acn and CID = :q1042s.cid and SEQ = :q1042s.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String JOB
	type public String TYPE
	type public String RTIN
	type public String ACN
	type public String CID
	type public String SEQ

	type RecordQ1042S q1042s = Db.getRecord("Q1042S","JOB=:JOB,TYPE=:TYPE,RTIN=:RTIN,ACN=:ACN,CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do q1042s.setMode(2)

		do Q1042SFL(q1042s,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordQ1042S q1042s

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("Q1042S","JOB = :q1042s.job and TYPE = :q1042s.type and RTIN = :q1042s.rtin and ACN = :q1042s.acn and CID = :q1042s.cid and SEQ = :q1042s.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(q1042s)) S ^Q1042S(vobj(q1042s,-3),vobj(q1042s,-4),vobj(q1042s,-5),vobj(q1042s,-6),vobj(q1042s,-7),vobj(q1042s,-8))=vobj(q1042s)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordQ1042S q1042s


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^Q1042S(vobj(q1042s,-3),vobj(q1042s,-4),vobj(q1042s,-5),vobj(q1042s,-6),vobj(q1042s,-7),vobj(q1042s,-8))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordQ1042S q1042s

	// Type local variables for access keys for defaults
	type public String JOB
	type public String TYPE
	type public String RTIN
	type public String ACN
	type public String CID
	type public String SEQ

	if q1042s.rforcntr.isNull() set q1042s.rforcntr = 0    // rforcntr
	if q1042s.w8req.isNull() set q1042s.w8req = 0          // w8req
	quit


vreqn // Validate required data items

	type public RecordQ1042S q1042s

	if q1042s.rforcntr.isNull() do vreqerr("RFORCNTR") quit
	if q1042s.w8req.isNull() do vreqerr("W8REQ") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordQ1042S q1042s

	if q1042s.job.isNull() do vreqerr("JOB") quit
	if q1042s.type.isNull() do vreqerr("TYPE") quit
	if q1042s.rtin.isNull() do vreqerr("RTIN") quit
	if q1042s.acn.isNull() do vreqerr("ACN") quit
	if q1042s.cid.isNull() do vreqerr("CID") quit
	if q1042s.seq.isNull() do vreqerr("SEQ") quit

		if vx("RFORCNTR").exists(),q1042s.rforcntr.isNull() do vreqerr("RFORCNTR") quit
		if vx("W8REQ").exists(),q1042s.w8req.isNull() do vreqerr("W8REQ") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("Q1042S","MSG",1767,"Q1042S."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordQ1042S q1042s
	if 'q1042s.acn.isNull() set vfkey("^CIF("_""""_q1042s.acn_""""_","_1_")")="Q1042S(ACN) -> CIF"
	if 'q1042s.cid.isNull() set vfkey("^ACN("_""""_q1042s.cid_""""_","_50_")")="Q1042S(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordQ1042S q1042s
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":q1042s.acn") set vERRMSG = $$^MSG(8563,"Q1042S(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("ACN",":q1042s.cid") set vERRMSG = $$^MSG(8563,"Q1042S(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordQ1042S q1042s

	set X = q1042s.job if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("JOB", vRM) quit
	set X = q1042s.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	if q1042s.rtin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RTIN", vRM) quit
	set X = q1042s.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = q1042s.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = q1042s.seq if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = q1042s.bwpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"Q1042S.BWPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if q1042s.crflg.length()>1 set vRM = $$^MSG(1076,1) do vdderr("CRFLG", vRM) quit
	set X = q1042s.inc if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("INC", vRM) quit
	set X = q1042s.ipyd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"Q1042S.IPYD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = q1042s.nbwa if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"Q1042S.NBWA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if q1042s.nr.length()>2 set vRM = $$^MSG(1076,2) do vdderr("NR", vRM) quit
	if q1042s.prname.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PRNAME", vRM) quit
	if q1042s.prtin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PRTIN", vRM) quit
	if q1042s.raddr.length()>55 set vRM = $$^MSG(1076,55) do vdderr("RADDR", vRM) quit
	if q1042s.rcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RCITY", vRM) quit
	if q1042s.rcntryn.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RCNTRYN", vRM) quit
	set X = q1042s.rcode if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RCODE", vRM) quit
	if q1042s.rctrytax.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RCTRYTAX", vRM) quit
	if q1042s.rfirstn.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RFIRSTN", vRM) quit
	if '("01"[q1042s.RFORCNTR) set vRM=$$^MSG(742,"L") do vdderr("RFORCNTR", vRM) quit
	if q1042s.rlastn.length()>45 set vRM = $$^MSG(1076,45) do vdderr("RLASTN", vRM) quit
	if q1042s.rstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("RSTATE", vRM) quit
	if q1042s.rzip.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RZIP", vRM) quit
	if '("01"[q1042s.W8REQ) set vRM=$$^MSG(742,"L") do vdderr("W8REQ", vRM) quit
	set X = q1042s.whexr if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("WHEXR", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("Q1042S","MSG",979,"Q1042S."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordQ1042S q1042s

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("JOB").exists() set vux("JOB") = vx("JOB")
	if vx("TYPE").exists() set vux("TYPE") = vx("TYPE")
	if vx("RTIN").exists() set vux("RTIN") = vx("RTIN")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = q1042s.job_","_q1042s.type_","_q1042s.rtin_","_q1042s.acn_","_q1042s.cid_","_q1042s.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = q1042s.job_","_q1042s.type_","_q1042s.rtin_","_q1042s.acn_","_q1042s.cid_","_q1042s.seq // Copy new keys into object
	type RecordQ1042S vnewrec = q1042s.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("Q1042S",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordQ1042S q1042s

	if vux("JOB").exists() set q1042s.job = vux("JOB").piece("|",i)
	if vux("TYPE").exists() set q1042s.type = vux("TYPE").piece("|",i)
	if vux("RTIN").exists() set q1042s.rtin = vux("RTIN").piece("|",i)
	if vux("ACN").exists() set q1042s.acn = vux("ACN").piece("|",i)
	if vux("CID").exists() set q1042s.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set q1042s.seq = vux("SEQ").piece("|",i)
	quit
