STOP4FL(RecordSTOP4 stop4, String vpar, Boolean vparNorm) // STOP4 - Check Amount Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             03/02/2005
	// Trigger Definition (5)                      03/10/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop4.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(stop4,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop4,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = stop4.cid
	type String AMT = stop4.amt
	type String SEQ = stop4.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("AMT").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP4",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP4","CID = :stop4.cid and AMT = :stop4.amt and SEQ = :stop4.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String AMT
	type public String SEQ

	type RecordSTOP4 stop4 = Db.getRecord("STOP4","CID=:CID,AMT=:AMT,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do stop4.setMode(2)

		do STOP4FL(stop4,vpar)
	}
	else  do VINDEX(stop4)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP4 stop4

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP4","CID = :stop4.cid and AMT = :stop4.amt and SEQ = :stop4.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop4.DP = %SystemDate
		if %O = 0  set stop4.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop4))  S ^STOP(4,vobj(stop4,-3),vobj(stop4,-4),vobj(stop4,-5))=vobj(stop4)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.stop4) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP4 stop4

	if vpar["/INDEX/" do VINDEX(.stop4)                    // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^STOP(4,vobj(stop4,-3),vobj(stop4,-4),vobj(stop4,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordSTOP4 stop4

	// Type local variables for access keys for defaults
	type public String CID
	type public String AMT
	type public String SEQ

	type public String TJD
	if stop4.dp.isNull() set stop4.dp = TJD                // dp
	if stop4.stcon.isNull() set stop4.stcon = 0            // stcon
	if stop4.time.isNull() set stop4.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP4 stop4

	if stop4.act.isNull() do vreqerr("ACT") quit
	if stop4.dp.isNull() do vreqerr("DP") quit
	if stop4.stcon.isNull() do vreqerr("STCON") quit
	if stop4.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP4 stop4

	if stop4.cid.isNull() do vreqerr("CID") quit
	if stop4.amt.isNull() do vreqerr("AMT") quit
	if stop4.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACT").exists(),stop4.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop4.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop4.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop4.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP4","MSG",1767,"STOP4."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSTOP4 stop4
	if 'stop4.cid.isNull() set vfkey("^ACN("_""""_stop4.cid_""""_","_50_")")="STOP4(CID) -> DEP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSTOP4 stop4
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DEP",":stop4.cid") set vERRMSG = $$^MSG(8563,"STOP4(CID) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("FEECID").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSTOP4 stop4
	if vx("").order().isNull() do AUDIT^UCUTILN(stop4,.vx(),1,"|") quit
	if vx("EXP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(stop4,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT_UPD - After insert or update trigger

	do vau1

	quit

vau1 // Trigger AFTER_INSERT_UPD - After insert or update trigger

	type public RecordSTOP4 stop4
	/*	
	---- Revision History ------------------------------------------------
	
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up
		   
		   Removed old revision history.
	*/

	// Verify mode
	if %ProcessMode=2 quit               
	
	type public Number ER
	
	type Number FEECID4, STPCID
	type String msg                 
	
	// Stop payment - type - seq
	if (%ProcessMode = 0) set msg = $$^MSG(6701)
	else  if (%ProcessMode = 1) set msg = $$^MSG(6702)
	else  if (%ProcessMode = 3) set msg = $$^MSG(6700)
	
	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='STOP4',DI='AMT'", 1)
	
	//Sequence ~p1
	set msg = msg_"4 - "_dbtbl1d.des_" "_stop4.amt_" "_$$^MSG(6742,stop4.seq)

	set STPCID = stop4.cid
	set FEECID4 = stop4.feecid
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// History
	do HISTBLD^ACNFUNCS(msg,acn.boo)       

	// Modify mode
	quit:(%ProcessMode = 1)
	             
	
	// Update account sequence
	if (acn.cls = "D") do {
			
		type RecordDEP dep = {RecordDEP}acn
			
		set dep.stp4 = dep.stp4 + 1
		
		do dep.save("/NOJOURNAL")
	}
		
	if (acn.cls = "L") do {
			
		type RecordLN ln = {RecordLN}acn
			
		set ln.stp4 = ln.stp4 + 1
			
		do ln.save("/NOJOURNAL")
	}
	
	// Process Stop Fees
	if 'FEECID4.isNull() do {
	
		type RecordDEP dep = Db.getRecord("DEP", "CID=:FEECID4", 1)
		
		// Service charge fee account must be a deposit account
		if (dep.getMode() = 0) do Runtime.setErrMSG("STOP4",803) quit:ER

		// Service charge fee account ~p1 is closed.
		if (dep.stat = 4) do Runtime.setErrMSG("STOP4",457,"FEECID4") quit:ER
		
		do ^SRVSTP(FEECID4, 4, 2, "STP")	// Assess stop type 4 fee
	} 

	quit

vau2 // Trigger AFTER_UPDATE_FEECID - Modify Fee Charge Account

	type public RecordSTOP4 stop4
	if %ProcessMode'=1 quit     // 1 = Update
	set FEECID4=stop4.feecid
	if (stop4.feecid.oldVal'=stop4.feecid) do Runtime.setErrMSG("STOP4",412,"FEECID4") quit:ER
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete trigger

	type public RecordSTOP4 stop4
	/* ----- Revision History ---------------------------------------------
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up.
	*/
		
		
	type Number STPCID
	type String msg
	
	set STPCID=stop4.cid

	//Delete stop pmt -
	set msg = $$^MSG(6700)

	//Sequence ~p1
	set msg=msg_"4 - "_$$^MSG(6742, stop4.seq) 

	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// Account history
	do HISTBLD^ACNFUNCS(msg, acn.boo)           
	
	if (stop4.exp.isNull() ! (stop4.exp > %SystemDate)) do {
	
		if (acn.cls = "D") do {
			
			type RecordDEP dep = {RecordDEP}acn
			
			set dep.stp4 = dep.stp4 - 1
			
			do dep.save("/NOJOURNAL")
		}
		
		if (acn.cls = "L") do {
			
			type RecordLN ln = {RecordLN}acn
			
			set ln.stp4 = ln.stp4 - 1
			
			do ln.save("/NOJOURNAL")
		}
	}
	
	quit

vbi1 // Trigger BEFORE_INSERT - BEFORE INSERT

	type public RecordSTOP4 stop4
	/*
	---- Revision History ------------------------------------------------
	07/30/01 - SKLYUTD - 46690
		   Fixed getOneRow method call.  Incorrect syntax used.

	04/03/01 - SKLYUTD - 43257
		   Pop a value into stop4.exp in case it is not defined (like
		   coming in from a web client)
	
								*/
	
	if %ProcessMode=0,stop4.exp="" do {
		new STPOF
		set STPOF=Db.getOneRow("STPOF","UTBLCHKSTP","4")
		if STPOF="" set STPOF=Db.getOneRow("STPOF","CUVAR")
		set stop4.exp=%SystemDate+STPOF
	}
	quit

vbu1 // Trigger BU_EXP - Before Update of Expiration Date

	type public RecordSTOP4 stop4
	do stop4.setAuditFlag(1)
	/* ---- Revision History ------------------------------------------------
	
	03/12/02 - BECKERJ - 49316
		   Add trigger to flag an error message when trying to change
		   the expiration date of a stop that has already expired.
	
				----------------------------------------------------------------------
	*/
	// Cannot modify expiration date. Stop has already expired.
	if (stop4.exp.oldVal'>%SystemDate) do Runtime.setErrMSG("STOP4",5148)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP4 stop4

	set X = stop4.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = stop4.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STOP4.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = stop4.seq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop4.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	if stop4.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop4.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop4.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop4.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	set X = stop4.iss if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISS", vRM) quit
	if stop4.ncki.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NCKI", vRM) quit
	if stop4.payee.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAYEE", vRM) quit
	if '("01"[stop4.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop4.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop4.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop4.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP4","MSG",979,"STOP4."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordSTOP4 stop4) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EXP").exists() do vi1(.stop4)
	}
	do vi1(.stop4)

	quit
	

vi1(RecordSTOP4 stop4) // Maintain DAYEND index entries (Dayend Expiration Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = stop4.exp
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v4 = stop4.cid
	type String v5 = stop4.amt
	type String v6 = stop4.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^STOP(4,vobj(stop4,-3),vobj(stop4,-4),vobj(stop4,-5)))#2,'$D(^DAYEND(v1,"STPEXP",4,v4,v5,v6)) do vidxerr("DAYEND")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"STPEXP",4,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXP").exists() set v1=vx("EXP").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"STPEXP",4,v4,v5,v6)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("STOP4")

	while ds.next() do {
		type RecordSTOP4 stop4=ds.getRecord("STOP4")
		if vlist.contains("VINDEX") do VINDEX(.stop4) quit
		if vlist.contains("DAYEND") do vi1(.stop4)
	}

	quit


public VIDXBLD1(RecordSTOP4 stop4, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.stop4) quit
	if vlist.contains("DAYEND") do vi1(.stop4)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("STOP4","MSG",1225,"STOP4."_di)

	quit


vkchged // Access key changed

	type public RecordSTOP4 stop4

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("AMT").exists() set vux("AMT") = vx("AMT")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = stop4.cid_","_stop4.amt_","_stop4.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop4.cid_","_stop4.amt_","_stop4.seq // Copy new keys into object
	type RecordSTOP4 vnewrec = stop4.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP4",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP4 stop4

	if vux("CID").exists() set stop4.cid = vux("CID").piece("|",i)
	if vux("AMT").exists() set stop4.amt = vux("AMT").piece("|",i)
	if vux("SEQ").exists() set stop4.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "STOP4FL"	// Location of index program

