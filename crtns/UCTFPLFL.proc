UCTFPLFL(RecordUTBLCTFPLN utblctfpln, String vpar, Boolean vparNorm) // UTBLCTFPLN - Commissions, Taxes, and Fees Plan Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (30)             11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblctfpln.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblctfpln,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblctfpln,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CTFPLN = utblctfpln.ctfpln

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CTFPLN").exists() do vkchged quit              // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLCTFPLN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLCTFPLN","CTFPLN = :utblctfpln.ctfpln") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CTFPLN

	type RecordUTBLCTFPLN utblctfpln = Db.getRecord("UTBLCTFPLN","CTFPLN=:CTFPLN")
	if (%ProcessMode = 2) do {
		do utblctfpln.setMode(2)

		do UCTFPLFL(utblctfpln,vpar)
	}
	else  do VINDEX(utblctfpln)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLCTFPLN utblctfpln

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLCTFPLN","CTFPLN = :utblctfpln.ctfpln") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblctfpln,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblctfpln,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblctfpln))  S ^UTBL("CTFPLN",vobj(utblctfpln,-3))=vobj(utblctfpln)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.utblctfpln) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLCTFPLN utblctfpln

	if vpar["/INDEX/" do VINDEX(.utblctfpln)               // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblctfpln,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("CTFPLN",vobj(utblctfpln,-3))                // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLCTFPLN utblctfpln

	// Type local variables for access keys for defaults
	type public String CTFPLN

	if utblctfpln.mtsprocf.isNull() set utblctfpln.mtsprocf = 0 // mtsprocf
	if utblctfpln.strtdate.isNull() set utblctfpln.strtdate = $$^CUVAR("TJD") // strtdate
	quit


vreqn // Validate required data items

	type public RecordUTBLCTFPLN utblctfpln

	if utblctfpln.amth.isNull() do vreqerr("AMTH") quit
	if utblctfpln.cmth.isNull() do vreqerr("CMTH") quit
	if utblctfpln.descr.isNull() do vreqerr("DESCR") quit
	if utblctfpln.mtsprocf.isNull() do vreqerr("MTSPROCF") quit
	if utblctfpln.paygl.isNull() do vreqerr("PAYGL") quit
	if utblctfpln.strtdate.isNull() do vreqerr("STRTDATE") quit
	if utblctfpln.trgrp.isNull() do vreqerr("TRGRP") quit
	if utblctfpln.type.isNull() do vreqerr("TYPE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLCTFPLN utblctfpln

	if utblctfpln.ctfpln.isNull() do vreqerr("CTFPLN") quit

		if vx("AMTH").exists(),utblctfpln.amth.isNull() do vreqerr("AMTH") quit
		if vx("CMTH").exists(),utblctfpln.cmth.isNull() do vreqerr("CMTH") quit
		if vx("DESCR").exists(),utblctfpln.descr.isNull() do vreqerr("DESCR") quit
		if vx("MTSPROCF").exists(),utblctfpln.mtsprocf.isNull() do vreqerr("MTSPROCF") quit
		if vx("PAYGL").exists(),utblctfpln.paygl.isNull() do vreqerr("PAYGL") quit
		if vx("STRTDATE").exists(),utblctfpln.strtdate.isNull() do vreqerr("STRTDATE") quit
		if vx("TRGRP").exists(),utblctfpln.trgrp.isNull() do vreqerr("TRGRP") quit
		if vx("TYPE").exists(),utblctfpln.type.isNull() do vreqerr("TYPE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCTFPLN","MSG",1767,"UTBLCTFPLN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("COMCALC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLCTFPLN utblctfpln
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblctfpln,.vx(),1,"|")
	quit


vau1 // Trigger AU_CTFCALC - After Update - Com/Tax/Fee Calculation

	type public RecordUTBLCTFPLN utblctfpln
	/*Rebuild the commission calculation routine

	Revision History:
	
	6-15-01 GOLATOS - ARQ44647 Created.
	*/

	do ^CTFRTN
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert/Update trigger

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before Insert/Update trigger

	type public RecordUTBLCTFPLN utblctfpln
	do utblctfpln.setAuditFlag(1)
								/*
								---- Revision History---------------------------------------------------
	11/26/01 - ABIFARINS - 47151
		   Added code for CPMF tax processing enhancement. When the
		   assessment method for a CTF plan is a dayend, the Misc Tax
		   Status Flag (MTSPROCF) can be turned on/off by the user.
	           If MTSPROCF is on, then a suspense G/L is required for the 
		   dayend process.

	07/11/01 - KESTELMANN - 46257
		   Added code for freqency/next run date enhancement
		   when assessment method is 2 - Day-end.            
		   Changed code to delete all checks for data item CAMT. 
		   (was obsoleted).

	06/18/01 - SIVCHUKA - 45935
	           Clean up.
	
								03/27/01 - SIVCHUKA - 43390
	          BEFORE_INSERT Created.
 	
								*/
	
	new counter        

 	/*
	   If the collection method uptbctfpln.cmth is 0 then utblctfpln.expgl
	   must be defined (i.e. cmth can not be null, and must be defined with a valid
	   G/L number)
	   MSG#   "G/L account number required".
	*/ 

	if (utblctfpln.cmth=0)&(utblctfpln.expgl="") do Runtime.setErrMSG("UTBLCTFPLN",4855) quit:ER
	
	/* 
	   If the tiered index filed (utblctfpln.index) is defined, then the currency code
	   filed (utblctfpln.crcd)  needs to be defined
	   MSG#   "Currency code required".
	*/

	if (utblctfpln.index'="")&(utblctfpln.crcd="") do Runtime.setErrMSG("UTBLCTFPLN",4861) quit:ER
 	
	/*
	   The second index rate utblctfpln.rate2 can only be defined if the
	   Fixed Index Rate, utblctfpln.rate is defined.
	   MSG#   "Must define a primary rate before defining a secondary rate".
	*/

	if (utblctfpln.rate2'="")&(utblctfpln.rate="") do Runtime.setErrMSG("UTBLCTFPLN",4848) quit:ER

	/* 
	   There can only be either utblctfpln.rate, or utblctf.index defined.  Only 1 of these 
	   three can be defined.
	   MSG#   "Define ONE of the following: Fixed Amount, Rate, or Index".
	*/

	set counter=""
	if utblctfpln.rate'="" set counter=counter+1
	if utblctfpln.index'="" set counter=counter+1
	if (counter>1) do Runtime.setErrMSG("UTBLCTFPLN",4846) quit:ER
 	
	/* 
	   There can only be either utblctfpln.comcalc or utblctfpln.pcall.
	   Only 1 of these can be defined.   So they will either both be null, or just 1
	   of them will not be null.
	   MSG#   "Specify a Calculation Formula or a Procedure Call, not both".
	*/

	if (utblctfpln.comcalc'="")&(utblctfpln.pcall'="") do Runtime.setErrMSG("UTBLCTFPLN",4847) quit:ER
 	
	/* 
	   At least 1 of these five fields must be defined.  That is either
	   utblctfpln.rate, utblctfpln.index,utblctfpln.comcalc or utblctfpln.pcall must be defined.
	   MSG#   "Specify at least one field: Rate, Index, Calculation Formula, or Procedure Call."
	*/ 	

	set counter=""
	if utblctfpln.rate'="" set counter=counter+1
	if utblctfpln.index'="" set counter=counter+1
	if utblctfpln.comcalc'="" set counter=counter+1
	if utblctfpln.pcall'="" set counter=counter+1
	if (counter="") do Runtime.setErrMSG("UTBLCTFPLN",4849) quit:ER
	
	// ARQ 46257
	// Day-end Assessment Method Frequency required if Assessment Method = 2
 	if (utblctfpln.damfreq=""),utblctfpln.amth=2 do Runtime.setErrMSG("UTBLCTFPLN",5002) quit:ER

 	// If Frequency is defined and Next Date is not, defauld Next Date.
	new FRE,TJD
	if (utblctfpln.damnd=""),utblctfpln.damfreq'="" do { quit:ER
		set FRE=utblctfpln.damfreq
		if '$d(%SystemDate) set TJD=Db.getOneRow("TJD","CUVAR")	
		set utblctfpln.damnd=$$NJD^UFRE(TJD,FRE)
		}

	//ARQ 47151 Suspense G/L required if Misc Tax Status Flag is set.
	if (utblctfpln.mtsprocf=1)&(utblctfpln.susgl="") do Runtime.setErrMSG("UTBLCTFPLN",4855) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLCTFPLN utblctfpln

	if utblctfpln.ctfpln.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CTFPLN", vRM) quit
	set X = utblctfpln.amth if 'X.isNull(),'Db.isDefined("STBLCTFAMTH","X") set vRM = $$^MSG(1485,X) do vdderr("AMTH", vRM) quit
	set X = utblctfpln.camt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLCTFPLN.CAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblctfpln.cmth if 'X.isNull(),'Db.isDefined("STBLCTFCM","X") set vRM = $$^MSG(1485,X) do vdderr("CMTH", vRM) quit
	if utblctfpln.comcalc.length()>80 set vRM = $$^MSG(1076,80) do vdderr("COMCALC", vRM) quit
	if utblctfpln.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	set X = utblctfpln.damfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[UTBLCTFPLN]DAMFREQ",0) if 'vRM.get().isNull() do vdderr("DAMFREQ", vRM) quit
	set X = utblctfpln.damld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DAMLD", vRM) quit
	set X = utblctfpln.damnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DAMND", vRM) quit
	if utblctfpln.descr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESCR", vRM) quit
	if utblctfpln.dpndpln1.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DPNDPLN1", vRM) quit
	if utblctfpln.dpndpln2.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DPNDPLN2", vRM) quit
	if utblctfpln.dpndpln3.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DPNDPLN3", vRM) quit
	if utblctfpln.dpndpln4.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DPNDPLN4", vRM) quit
	if utblctfpln.dpndpln5.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DPNDPLN5", vRM) quit
	set X = utblctfpln.enddate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ENDDATE", vRM) quit
	set X = utblctfpln.expgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("EXPGL", vRM) quit
	set X = utblctfpln.index if 'X.isNull(),'Db.isDefined("UTBLCOMINDX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX", vRM) quit
	if utblctfpln.intquery.length()>12 set vRM = $$^MSG(1076,12) do vdderr("INTQUERY", vRM) quit
	if '("01"[utblctfpln.MTSPROCF) set vRM=$$^MSG(742,"L") do vdderr("MTSPROCF", vRM) quit
	set X = utblctfpln.paygl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("PAYGL", vRM) quit
	if utblctfpln.pcall.length()>80 set vRM = $$^MSG(1076,80) do vdderr("PCALL", vRM) quit
	if utblctfpln.query.length()>14 set vRM = $$^MSG(1076,14) do vdderr("QUERY", vRM) quit
	set X = utblctfpln.rate if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("RATE", vRM) quit
	set X = utblctfpln.rate2 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("RATE2", vRM) quit
	set X = utblctfpln.rdays if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RDAYS", vRM) quit
	set X = utblctfpln.strtdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STRTDATE", vRM) quit
	set X = utblctfpln.susgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SUSGL", vRM) quit
	if utblctfpln.trgrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRGRP", vRM) quit
	set X = utblctfpln.type if 'X.isNull(),'Db.isDefined("STBLCTFTYP","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCTFPLN","MSG",979,"UTBLCTFPLN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordUTBLCTFPLN utblctfpln) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("DAMND").exists() do vi1(.utblctfpln)
	}
	do vi1(.utblctfpln)

	quit
	

vi1(RecordUTBLCTFPLN utblctfpln) // Maintain DAYENDCTFPLN index entries (CTF Plan Index)

	type Public String vx()
	type Boolean vdelete = 0
	type Boolean vflag = 0
	type String v1 = utblctfpln.damnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = utblctfpln.ctfpln

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $$vq1(.utblctfpln) if $D(^UTBL("CTFPLN",vobj(utblctfpln,-3)))#2,'$D(^DAYEND(v1,"CTFPLN",v3)) do vidxerr("DAYENDCTFPLN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 if $$vq1(.utblctfpln) set vflag=1 set ^DAYEND(v1,"CTFPLN",v3)="" 
	quit:%ProcessMode=0

	if vflag,'vx("DAMND").exists() quit
	if %ProcessMode=3 set vdelete=1
	if vx("DAMND").exists() set v1=vx("DAMND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if (%ProcessMode=3)!vflag!'$$vq1(.utblctfpln)  kill ^DAYEND(v1,"CTFPLN",v3)
	quit

vq1(RecordUTBLCTFPLN utblctfpln) // Conditional index query for CTF Plan Index

	if '(+utblctfpln.amth=2) quit 0
	quit 1


public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("UTBLCTFPLN")

	while ds.next() do {
		type RecordUTBLCTFPLN utblctfpln=ds.getRecord("UTBLCTFPLN")
		if vlist.contains("VINDEX") do VINDEX(.utblctfpln) quit
		if vlist.contains("DAYENDCTFPLN") do vi1(.utblctfpln)
	}

	quit


public VIDXBLD1(RecordUTBLCTFPLN utblctfpln, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.utblctfpln) quit
	if vlist.contains("DAYENDCTFPLN") do vi1(.utblctfpln)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("UTBLCTFPLN","MSG",1225,"UTBLCTFPLN."_di)

	quit


vkchged // Access key changed

	type public RecordUTBLCTFPLN utblctfpln

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CTFPLN")
	set voldkey = vux.piece("|",1),vobj(utblctfpln,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblctfpln,-3) = vnewkey // Copy new keys into object
	type RecordUTBLCTFPLN vnewrec = utblctfpln.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLCTFPLN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utblctfpln,-3) = vux.piece("|",1)             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "UCTFPLFL"	// Location of index program

