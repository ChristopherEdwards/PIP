R01S244	// SCA220 - Rejected Transaction Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date VIN1=%SystemDate
	type String VIN10="ALL"
	type String VIN11="ALL"
	type String VIN12="ALL"
	type String VIN13="ALL"
	type String VIN2="ALL"
	type String VIN3=%UserID
	type String VIN4="ALL"
	type String VIN5="ALL"
	type String VIN6="ALL"
	type String VIN7="ALL"
	type String VIN8="ALL"
	type String VIN9="ALL"

	set RID="SCA220"
	set RN="Rejected Transaction Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|10||[EXC]TJD|[EXC]TJD:DISTINCT:NOVAL||||D|Transaction Date|||||"
	set %TAB("VIN10")="|255||[EXC]TAMT|||D EXT^DBSQRY||T|Transaction Amount|||||"
	set %TAB("VIN11")="|255||[EXC]RTY|||D EXT^DBSQRY||T|Retries Remaining|||||"
	set %TAB("VIN12")="|255||[EXC]TIM|||D EXT^DBSQRY||T|Time of Day|||||"
	set %TAB("VIN13")="|255||[EXC]TCMT|||D EXT^DBSQRY||T|Comment|||||"
	set %TAB("VIN2")="|255||[EXC]BRCD|[UTBLBRCD]:NOVAL||D EXT^DBSQRY||T|Transaction Branch Code|||||"
	set %TAB("VIN3")="|255||[EXC]UID|[EXC]UID:DISTINCT:NOVAL||D EXT^DBSQRY||T|User ID|||||"
	set %TAB("VIN4")="|255||[EXC]TSEQ|[EXC]TSEQ:DISTINCT:NOVAL||D EXT^DBSQRY||T|Sequence #|||||"
	set %TAB("VIN5")="|255||[ACN]CLS|[STBLCLS]:NOVAL||D EXT^DBSQRY||T|Product Class|||||"
	set %TAB("VIN6")="|255||[ACN]GRP|[STBLGRP]:NOVAL||D EXT^DBSQRY|S I(3)=""""|T|Product Group|||||"
	set %TAB("VIN7")="|255||[ACN]TYPE|[PRODCTL]:NOVAL||D EXT^DBSQRY||T|Product Type|||||"
	set %TAB("VIN8")="|255||[ACN]BOO|[UTBLBRCD]:NOVAL||D EXT^DBSQRY||T|Account Branch Code|||||"
	set %TAB("VIN9")="|255||[EXC]ETC|[TRN]:NOVAL||D EXT^DBSQRY||T|Transaction Code|||||"

	set %READ="IO/REQ,VIN1#1,VIN2#0,VIN3#0,VIN4#0,VIN5#0,VIN6#0,VIN7#0,VIN8#0,VIN9#0,VIN10#0,VIN11#0,VIN12#0,VIN13#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date VIN1
	type public String VIN2,VIN3,VIN4,VIN5,VIN6,VIN7,VIN8,VIN9,VIN10,VIN11,VIN12,VIN13
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,BOO,CONAM,D1,ETC,LNM,RC(),RID,RN,RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,VL,VLOF,VRF(),VSTATS(),VWHERE,ZLOC,vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA220",RN="Rejected Transaction Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA220","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[TMPRPT7]KEY4#1#7,[TMPRPT7]KEY5#9#12"

	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		set DQQRY(SEQ)="[EXC]TJD = "_$$addqts^DBSRWUTL(VIN1),SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[EXC]BRCD "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[EXC]UID "_VIN3,SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[EXC]TSEQ "_VIN4,SEQ=SEQ+1
		if VIN5.get()="" set VIN5="ALL"
		if VIN5'="ALL" set DQQRY(SEQ)="[ACN]CLS "_VIN5,SEQ=SEQ+1
		if VIN6.get()="" set VIN6="ALL"
		if VIN6'="ALL" set DQQRY(SEQ)="[ACN]GRP "_VIN6,SEQ=SEQ+1
		if VIN7.get()="" set VIN7="ALL"
		if VIN7'="ALL" set DQQRY(SEQ)="[ACN]TYPE "_VIN7,SEQ=SEQ+1
		if VIN8.get()="" set VIN8="ALL"
		if VIN8'="ALL" set DQQRY(SEQ)="[ACN]BOO "_VIN8,SEQ=SEQ+1
		if VIN9.get()="" set VIN9="ALL"
		if VIN9'="ALL" set DQQRY(SEQ)="[EXC]ETC "_VIN9,SEQ=SEQ+1
		if VIN10.get()="" set VIN10="ALL"
		if VIN10'="ALL" set DQQRY(SEQ)="[EXC]TAMT "_VIN10,SEQ=SEQ+1
		if VIN11.get()="" set VIN11="ALL"
		if VIN11'="ALL" set DQQRY(SEQ)="[EXC]RTY "_VIN11,SEQ=SEQ+1
		if VIN12.get()="" set VIN12="ALL"
		if VIN12'="ALL" set DQQRY(SEQ)="[EXC]TIM "_VIN12,SEQ=SEQ+1
		if VIN13.get()="" set VIN13="ALL"
		if VIN13'="ALL" set DQQRY(SEQ)="[EXC]TCMT "_VIN13,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("TMPRPT7") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC1|"_"Transaction Date"_"|VIN1|"_$$DAT^%ZM(VIN1.get(),%MSKD)
		set VBNRINFO("PROMPTS",2)="WC2|"_"Transaction Branch Code"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC2|"_"User ID"_"|VIN3|"_VIN3.get()
		set VBNRINFO("PROMPTS",4)="WC2|"_"Sequence #"_"|VIN4|"_VIN4.get()
		set VBNRINFO("PROMPTS",5)="WC2|"_"Product Class"_"|VIN5|"_VIN5.get()
		set VBNRINFO("PROMPTS",6)="WC2|"_"Product Group"_"|VIN6|"_VIN6.get()
		set VBNRINFO("PROMPTS",7)="WC2|"_"Product Type"_"|VIN7|"_VIN7.get()
		set VBNRINFO("PROMPTS",8)="WC2|"_"Account Branch Code"_"|VIN8|"_VIN8.get()
		set VBNRINFO("PROMPTS",9)="WC2|"_"Transaction Code"_"|VIN9|"_VIN9.get()
		set VBNRINFO("PROMPTS",10)="WC2|"_"Transaction Amount"_"|VIN10|"_VIN10.get()
		set VBNRINFO("PROMPTS",11)="WC2|"_"Retries Remaining"_"|VIN11|"_VIN11.get()
		set VBNRINFO("PROMPTS",12)="WC2|"_"Time of Day"_"|VIN12|"_VIN12.get()
		set VBNRINFO("PROMPTS",13)="WC2|"_"Comment"_"|VIN13|"_VIN13.get()

		if vudwhere.exists() set VWHERE=vudwhere

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Rejected Transaction Report"
		set VBNRINFO("PGM")="R01S244"
		set VBNRINFO("RID")="SCA220"
		set VBNRINFO("TABLES")="TMPRPT7"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TMPRPT7]PID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TMPRPT7]KEY1"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TMPRPT7]KEY2"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TMPRPT7]KEY3"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,TMPRPT7]KEY4"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,TMPRPT7]KEY5"
		set VBNRINFO("ORDERBY",7)="[SYSDEV,TMPRPT7]KEY6"
		set VBNRINFO("ORDERBY",8)="[SYSDEV,TMPRPT7]KEY7"

		set VBNRINFO("DOC",1)="This report provides information about all batch transactions that"
		set VBNRINFO("DOC",2)="have been rejected due to restrictions that are not overridable by the"
		set VBNRINFO("DOC",3)="batch teller."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:8 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"TMPRPT7.PID,TMPRPT7.KEY1,TMPRPT7.KEY2,TMPRPT7.KEY3"
	set VSELECT=VSELECT_",TMPRPT7.KEY4,TMPRPT7.KEY5,TMPRPT7.KEY6,TMPRPT7.KE"
	set VSELECT=VSELECT_"Y7,TMPRPT7.DATA"

	set VWHERE=""
	if vudwhere.exists() set VWHERE=vudwhere
	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"TMPRPT7",VWHERE,"TMPRPT7.PID,TMPRPT7.KEY1,TMPRPT7.KEY2,TMPRPT7.KEY3,TMPRPT7.KEY4,TMPRPT7.KEY5,TMPRPT7.KEY6,TMPRPT7.KEY7","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5="",vovc6="",vovc7="",vovc8=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5,vovc6,vc6,vovc7,vc7,vovc8,vc8
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5,vovc6=vc6,vovc7=vc7,vovc8=vc8
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9
	set vc1=V.piece($C(9),1)			// TMPRPT7.PID
	set vc2=V.piece($C(9),2)			// TMPRPT7.KEY1
	set vc3=V.piece($C(9),3)			// TMPRPT7.KEY2
	set vc4=V.piece($C(9),4)			// TMPRPT7.KEY3
	set vc5=V.piece($C(9),5)			// TMPRPT7.KEY4
	set vc6=V.piece($C(9),6)			// TMPRPT7.KEY5
	set vc7=V.piece($C(9),7)			// TMPRPT7.KEY6
	set vc8=V.piece($C(9),8)			// TMPRPT7.KEY7
	set vc9=V.piece($C(9),9)			// TMPRPT7.DATA
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 /*
 ---- Revision History ------------------------------------------------
 
        01/21/06 - TITOVE - CR 19160
		   Added logic to build TMPRPT7 file entries.

        02/28/05 - TITOVE - CR 13291
                   Converted into PSL.
 */
 type public Number RC(), RT()
 type public String VWHERE, vudwhere

 type Date EXCEFD
 type Number BRCD, I, TSEQ
 type String FROMLIST, SELLIST, UID

 for I = 0,1 set (RC(I),RT(I)) = 0

 do Db.delete("TMPRPT7","PID=:%ProcessID")
 
 if VWHERE["ACN" do {
 	
        set VWHERE = VWHERE_" AND ACN.CID=EXC.CID"
        set SELLIST="EXC.CID,ACN.CID,EXC.TJD,EXC.BRCD,EXC.UID,EXC.TSEQ"
        set FROMLIST="EXC,ACN"
        }
 else  do {
 	
        set SELLIST="EXC.TJD,EXC.BRCD,EXC.UID,EXC.TSEQ"
        set FROMLIST="EXC"
        }

 #ACCEPT Date=01/20/2006; PGM=Eugene Titov
 type ResultSet rs = Db.select(SELLIST,FROMLIST,VWHERE)
  
 while rs.next() do {
 
 	set EXCEFD = rs.getCol("EXC.TJD")
 	set BRCD = rs.getCol("EXC.BRCD")
 	set UID = rs.getCol("EXC.UID")
 	set TSEQ = rs.getCol("EXC.TSEQ")
 	
 	type RecordEXC exc = Db.getRecord("EXC","TJD=:EXCEFD,BRCD=:BRCD,UID=:UID,TSEQ=:TSEQ")
 	
 	type RecordACN acn = Db.getRecord("ACN", "CID = :exc.cid", 1)

 	type DbSet ds = Db.selectDbSet("EXC1","TJD=:EXCEFD AND BRCD=:BRCD AND UID=:UID AND TSEQ=:TSEQ AND CID=:exc.cid")

 	if ds.isEmpty() do FILETMP(.exc,.acn,EXCEFD,"OVR","OVRFLG","") quit

 	while ds.next() do {
 		
 		type RecordEXC1 exc1 = ds.getRecord("EXC1")
 		
  		do FILETMP(.exc,.acn,EXCEFD,exc1.ovr,exc1.ovrflg,exc1.amt)		
 		}
	}
 
 set VWHERE = ""
 
 set vudwhere="TMPRPT7.PID="_%ProcessID

 //Incoming=vudwhere
 		
 quit
 
 
FILETMP(RecordEXC exc,
	RecordACN acn,
	Date EXCEFD,
	String OVR,
	String OVRFLG,
	Number AMT)

 type RecordTMPRPT7 rpt7 = Class.new("RecordTMPRPT7")
 		
 set rpt7.pid = %ProcessID
 set rpt7.key1 = $$DAT^%ZM(EXCEFD)
 set rpt7.key2 = exc.brcd
 set rpt7.key3 = exc.uid
 set rpt7.key4 = exc.tseq
 set rpt7.key5 = exc.cid
 set rpt7.key6 = OVRFLG
 set rpt7.key7 = OVR
	 		
 set rpt7.data = acn.lnm_"|"_exc.etc_"|"_exc.tamt_"|"_exc.tcmt_"|"_exc.tlo_"|"_acn.tld_"|"_exc.tso_"|"_acn.boo_"|"_exc.spr_"|"_exc.rty_"|"_exc.itc_"|"_acn.grp_"|"_AMT_"|"_acn.cls
	 		
 do rpt7.save() 

 quit
	quit

VRPOST	// Report post-processor

 /*
  ---- Revision History ------------------------------------------------
 
        01/20/06 - TITOVE - CR 19160
                   Converted into PSL.
 */
 do Db.delete("TMPRPT7","PID=:%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0,vs(8)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(5)=1,vskp(8)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VHDG5 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	if 'vskp(8).get() do VDTL8 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(8)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5,vc6,vovc6,vc7,vovc7,vc8,vovc8
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7,vb8
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7,vb8)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb4!(vovc4'=vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb5!(vovc5'=vc5) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1,vb8=1
	if vb6!(vovc6'=vc6) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1,vb8=1
	if vb7!(vovc7'=vc7) set vs(8)=0,vh(8)=0,VD(7)=0,vb8=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(8) set vs(8)=1 do stat^DBSRWUTL(8)
	if 'vs(7) set vs(7)=1 do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do VSUM5 quit:VFMQ  do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(8)=VT(8)+1
	quit

VHDG5	// Group Header
	type public String %MSKD,%TIM,BOO,CONAM,D1,ER,ETC,IOSL,LNM,RC(),RID,RN,RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,VWHERE,ZLOC,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere

	quit:vh(5)  set vh(5)=1				// Print flag
	if VLC+5>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=" "_"Effective:"
	set VL=VL_$J("",13-VL.length())_$J(vc2,10)
	do VOM
	set VL="    "_"Branch: "
	set VL=VL_$J("",13-VL.length())_$E(vc3,1,6)
	do VOM
	set VL="   "_"User ID: "
	set V=vc4,VO=V set V=$E(V,1,20) do VP1 quit:VFMQ!verror.get()
	set VL=VL_$J("",13-VL.length())_V		// [SYSDEV,TMPRPT7]KEY3
	do VOM
	set VL="" do VOM
	quit

VDTL5	// Detail
	type public String %TIM,BOO,D1,ETC,IOSL,LNM,RC(),RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),VWHERE,ZLOC,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere

	quit:VD(5)  set VD(5)=1				// Print flag
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL=$J(vc5,7)
	set VL=VL_$J("",8-VL.length())_$J(vc6,12)
	do VP2 quit:VFMQ!verror.get()  set V=$E(LNM,1,20)
	set VL=VL_$J("",22-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(ETC,1,12)
	set VL=VL_$J("",44-VL.length())_V
	do VP4 quit:VFMQ!verror.get()  set V=$J($FN(TAMT,",",2),14) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",59-VL.length())_V
	do VP6 quit:VFMQ!verror.get()  set V=$E(TCMT,1,30)
	set VL=VL_$J("",75-VL.length())_V
	do VP7 quit:VFMQ!verror.get()  set V=$E(TLO,1,12)
	set VL=VL_$J("",107-VL.length())_V
	do VP8 quit:VFMQ!verror.get()  set V=$J($$DAT^%ZM(TLD),10)
	set VL=VL_$J("",120-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP9 quit:VFMQ!verror.get()  set V=$E(TSOS,1,20) set VL="                      "_V
	do VP10 quit:VFMQ!verror.get()  set V=$J(BOO,6)
	set VL=VL_$J("",44-VL.length())_V
	do VP11 quit:VFMQ!verror.get()  set V=$J(SPR,20)
	set VL=VL_$J("",53-VL.length())_V
	do VP12 quit:VFMQ!verror.get()  set V=$E(ZLOC,1,18)
	set VL=VL_$J("",101-VL.length())_V
	do VP13 quit:VFMQ!verror.get()  set V=$J(RTY,3)
	set VL=VL_$J("",127-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="                      "_$E(TSOL,1,104)
	do VOM
	quit

VSUM5	// Summary
	type public String %TIM,BOO,D1,ETC,I,IOSL,LNM,RC(),RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VWHERE,VX(),ZLOC,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere

	if 'VT(5) quit
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="                                "_"Debit Rejects:"
	set VL=VL_$J("",48-VL.length())_$J($FN(UT(0),",",2),18)
	set VL=VL_$J("",70-VL.length())_"Count:"
	set VL=VL_$J("",78-VL.length())_$J(UC(0),5)
	do VOM
	set VL="                               "_"Credit Rejects:"
	set VL=VL_$J("",48-VL.length())_$J($FN(UT(1),",",2),18)
	set VL=VL_$J("",70-VL.length())_"Count:"
	set VL=VL_$J("",78-VL.length())_$J(UC(1),5)
	do VOM
	set VL="" do VOM
	quit

VDTL8	// Detail
	type public String %TIM,BOO,D1,ETC,IOSL,LNM,RC(),RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),VWHERE,ZLOC,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	do VP14 quit:VFMQ!verror.get()  set V=$E(D1,1,85) set VL="                      "_V
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BOO,CONAM,D1,ETC,LNM,RC(),RID,RN,RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,VL,VWHERE,ZLOC,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+6,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="Sequence     Account  Customer              Code                   Amount  Description                     Location      Last Tran"
	do VOM
	set VL="                      "_"Reference             Branch                  Spray  ACH Name                        ACH Location      Retry"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,BOO,D1,ETC,LNM,RC(),RT(),RTY,SPR,TAMT,TCMT,TLD,TLO,TSOL,TSOS,VPN,VWHERE,ZLOC,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate,vudwhere
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+5>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="                              "_"[ Report Totals ]"
	do VOM
	set VL="" do VOM
	set VL="                                 "_"Debit Rejects: "
	set VL=VL_$J("",48-VL.length())_$J($FN(RT(0),",",2),18)
	set VL=VL_$J("",70-VL.length())_"Count:"
	set VL=VL_$J("",78-VL.length())_$J(RC(0),5)
	do VOM
	set VL="                                "_"Credit Rejects:"
	set VL=VL_$J("",48-VL.length())_$J($FN(RT(1),",",2),18)
	set VL=VL_$J("",70-VL.length())_"Count:"
	set VL=VL_$J("",78-VL.length())_$J(RC(1),5)
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - [SYSDEV,TMPRPT7]KEY3

 /*
 ---- Revision History ------------------------------------------------
 
        04/05/05 - TITOVE - CR 15221
                   Added initialization of user ID-level arrays that
                   store subtotals.
 
 */
 
 type public Number UC(), UT()
 
 type Number I
 
 for I = 0,1 set (UC(I),UT(I)) = 0
	quit

VP2	// Column pre-processor - Variable: LNM

	type public String vc9
 type public String LNM
 
 set LNM = vc9.piece("|",1)
	quit

VP3	// Column pre-processor - Variable: ETC

	type public String vc9
 type public String ETC
 
 set ETC = vc9.piece("|",2)
	quit

VP4	// Column pre-processor - Variable: TAMT

	type public String vc9
 type public Number TAMT
 
 set TAMT = vc9.piece("|",3)
	quit

VP5	// Column post-processor - Variable: TAMT

	type public String vc9
 /*
 ---- Revision History ------------------------------------------------
 
 	01/21/06 - TITOVE - CR 19160
		   Modified to get data from TMPRPT7 table.

        04/05/05 - TITOVE - CR 15221
                   Added code to populate arrays that store user ID
                   subtotals and report totals.
 
 */
 
 type public Number RC(), RT(), UC(), UT(), TAMT, X
 
 // First piece of ETC.ITC
 set X = vc9.piece("|",11).extract()
 
 // Only collect info on debits and credits
 if (X '= 0),(X '= 1) quit
 
 // Subtotals by User ID
 set UC(X) = UC(X) + 1
 set UT(X) = UT(X) + TAMT

 // Report totals
 set RC(X) = RC(X) + 1
 set RT(X) = RT(X) + TAMT
	quit

VP6	// Column pre-processor - Variable: TCMT

	type public String vc9
 type public String TCMT
 
 set TCMT = vc9.piece("|",4)
	quit

VP7	// Column pre-processor - Variable: TLO

	type public String vc9
 type public String TLO
 
 set TLO = vc9.piece("|",5)
	quit

VP8	// Column pre-processor - Variable: TLD

	type public String vc9
 type public Date TLD
 
 set TLD = vc9.piece("|",6)
	quit

VP9	// Column pre-processor - Variable: TSOS

	type public String vc9
 /*
 ---- Revision History ------------------------------------------------
 
        02/28/05 - TITOVE - CR 13291
                   Converted into PSL.

 */

 // If TSO is larger than 22 chars, display on a separate line
 type public String TSOL, TSOS

 set TSOS =  vc9.piece("|",7)

 if TSOS.length() '> 22 set TSOL = ""
 else  set TSOL = TSOS,TSOS = ""
	quit

VP10	// Column pre-processor - Variable: BOO

	type public String vc9
 type public Number BOO
 
 set BOO = vc9.piece("|",8)
	quit

VP11	// Column pre-processor - Variable: SPR

	type public String vc9
 type public Number SPR
 
 set SPR = vc9.piece("|",9)
	quit

VP12	// Column pre-processor - Variable: ZLOC

	type public String vc9
 /*
 ---- Revision History ------------------------------------------------
 
        02/28/05 - TITOVE - CR 13291
                   Converted into PSL.
 
 */

 type public String ZLOC

 // Set it based on ETC.TLO
 set ZLOC = vc9.piece("|",5)

 if ZLOC["ACH-" do { quit

	set ZLOC = ZLOC.piece("|",2)
	
	// ACH inclearing
	type RecordCTBLACHID ctblach = Db.getRecord("CTBLACHID", "ID = :ZLOC", 1)

 	set ZLOC = ctblach.cname
	} 

 set ZLOC = ""
	quit

VP13	// Column pre-processor - Variable: RTY

	type public String vc9
 type public Number RTY
 
 set RTY = vc9.piece("|",10)
	quit

VP14	// Column pre-processor - Variable: D1

	type public String vc8,vc7,vc9
 /*
 ---- Revision History ------------------------------------------------

	01/21/06 - TITOVE - CR 19160
		   Modified to get data from TMPRPT7 table.
 
        02/28/05 - TITOVE - CR 13291
                   Converted into PSL.
 
 */
 type public String D1, STBL(,,), UTBL(,,)

 type String GRP, OVR, OVRFLG
 
 set OVR = vc8
 set OVRFLG = vc7
 
 if (OVRFLG = "OVR") set D1 = $$OVR(OVRFLG,vc9.piece("|",13))
 else  do {

 	set GRP = vc9.piece("|",12)
 	if GRP.isNull() set GRP = "*"
 	set D1 = $$RFLG(OVRFLG,GRP,vc9.piece("|",13))
 	}

 quit


OVR(String OVRFLG,      // Type of Restriction
       String AMT)      // Override Reason Value
 
 type public String OVR, STBL(,,)
 
 type String A, CLASS, D1
 
 set CLASS = vc9.piece("|",14)
 if CLASS.isNull() set CLASS = "*"
 
 if 'STBL(OVRFLG,CLASS,OVR).exists() do {
 
        type RecordOVRLIT ovrlit = Db.getRecord("OVRLIT", "OVR = :OVR", 1)
        if 'ovrlit.getMode() set STBL(OVRFLG,CLASS,OVR) = "" quit
 
        if (CLASS = "D") set A = ovrlit.desc
        if (CLASS = "L") set A = ovrlit.desc1
        else  set A = ovrlit.desc2
 
        if A["<" set A = A.piece("<",1)
        if A["(" set A = A.piece("(",1)
 
        set STBL(OVRFLG,CLASS,OVR) = A
        }

 set D1 = STBL(OVRFLG,CLASS,OVR)
 
 if (CUVAR.%CRCD = "USD") do {

 	if (D1.extract(D1.length()) = "$") do {

		if AMT.isNull() set D1 = D1.piece("$",1)
		else  set D1 = D1_AMT
 		}
 	else  if 'AMT.isNull() set D1 = D1_" "_AMT
 	}
 	
 else  set D1 = D1.piece("$",1)_AMT

 quit D1


RFLG(String TYP,        // Type of Restriction
     String GRP,        // Product Group
     String VAL)        // Override Reason Value
     
 type public String OVR, UTBL(,,)
 
 type String DESC

 if 'UTBL(TYP,GRP,OVR).exists() do {
 
        type RecordUTBLRFLG urflg = Db.getRecord("UTBLRFLG", "GRP = :GRP, RFLG = :OVR", 1)

        // No description
        if 'urflg.getMode() set (DESC,UTBL(TYP,GRP,OVR)) = $$^MSG(6343) quit
 
        set (DESC,UTBL(TYP,GRP,OVR)) = urflg.desc
        }
 else  set DESC = UTBL(TYP,GRP,OVR)

 // Variable insertion
 if (DESC["<"),(DESC[">") set DESC=DESC.piece("<",1)_VAL_DESC.piece(">",2)
 
 quit DESC
	quit
