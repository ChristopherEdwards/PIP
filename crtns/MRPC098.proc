MRPC098(return,versn,reqopt,PARS,EPARS,INTRFACE)

	/* Copyright(c)2000 Sanchez Computer Associates, Inc.  All Rights Reserved
	   Procedure ID: 098
	   ORIG: CHOK  03/08/00
	
	   DESC:
	   Customer Enrollment.
	   This RPC can be used to enroll a valid customer in PROFILE/Anyware. 
	   It is a process that occurs after the origination process, which means that a
	   customer must already exist before enrollment can be made.  This process will
	   need to be able to uniquely identify a customer based on information stored in
	   the PROFILE database to allow access into the customer's account. The end
	   result will be to allow a user to assign or update theirs own access
	   information.  The enrollment process allows the following access columns to be
	   updated:USERID1, PASSWORD, PWD2, PWD3, PWD1RESET, PWD2RESET, PWD3RESET.

	   If a customer is not found, a status will return in XML format.

	   If a customer is found but the other validation information does not match up
	   with what is in the customer record, the enrollment is failed, CIFAUTH audit
	   information is updated and the a status will return in XML format.

	   If any customization is needed, copy MRPC098 to ZMRPC098.  Add custom code to
	   ZMRPC098 and compile ZMRPC098 followed by MRPC098.  ZMRPC098 will be called
	   directly from MRPC098 if it exists.  There is no need to modify the entries in
	   the M Remote Procedures Call Table (SCATBL5).

	   Non application error will return error message in XML format.

	   A successful reply when using option "R" and "A" will return the customer's account
	   number, question and a response status of 0, option "E" will return a response
	   status of 0 only.  Both of these responses will be in XML format.

	   This input string is in the format:  FID.DI=VAL,FID.DI=VAL,FID.DI=VAL, etc.,
	   where FID is the table (file definition), DI is the column (data item), and VAL
	   is the value.

	   Use caution with the following characters:  |  '  ,  " 

	   That's pipe, single quote, comma and double quote. 

	   The pipe character is used throughout the M environment to separate data in the
	   database and should never be contain in data. 
	   When passing single quotes in Tag/Value lists in MRPC098 you will need to
	   double up the single quote.  For example, to pass 'Who's my best friend?' you
	   will need to send 'Who"s my best friend?'.  This logic should also be used for
	   any free-form text fields if a user can enter a single quote.  For example,
	   CIFAUTH.QUESTION='Who"s my best friend?'. 

	   The comma character is used as a delimiter in MRPC098 to separate Tag/Value
	   pairs.  To avoid problems with this place single quotes around strings
	   containing this character.  You should also add single quotes around any user
	   free-form text fields since they may contain this character.  For example,
	   CIFAUTH.SCRTWRD='Martin, Junior'. 

	   When passing double quotes in Tag/Value lists in MRPC098 you will need to
	   double up the double quotes.  For example, to pass 'Apt "C"  ' you will need
	   to send 'Apt ""C"" '.  This logic should also be used for any free-form
	   text fields if a user can enter a double quote.  For example,
	   CIFAUTH.ANSWER='Apt ""C"" '.
	
	   KEYWORDS: RPC

	   ARGUMENTS:
		. return  desc							/TYP=T/REQ/MECH=REFNAM:W

		. versn  version number						/TYP=N/REQ/MECH=VAL
		  current version=1
 
		. reqopt  bitmap of requested options				/TYP=T/REQ/MECH=VAL

			byte 1  - code to indicate building DTD and data
				0 - build DTD only
				1 - build data
				2 - build DTD and data

			byte 2  - code to indicate request, enroll, or authenticate
				"R" - request question option
				"E" - enroll/update option
				"A" - authentication only option

		. PARS  Customer validation criteria; named value pairs		/TYP=T/NOREQ/MECH=VAL
			CIF.ACN			- Customer Number
			CIF.TAXID		- Tax identification
			CIF.CO			- Company code
			   Used with TAXID & USERID1 when using Affinity groups
			CIF.DOB			- Date of birth
			CIF.HPH			- Home phone number
			CIF.EMAIL		- Electronic mail
			CIF.LNM			- Customer Last Name
			CIF.PID			- Personal identification
			CIF.PIN			- Electronic Banking PIN
			CIF.EXTCIF		- External Customer Number
			CIFAUTH.ACN		- Customer Number
			CIFAUTH.SCRTWRD		- Secret word/phrase (Mothers' maiden name)
			CIFAUTH.USERID1		- User ID
			CIFAUTH.PASSWORD	- Primary encrypted password
			CIFAUTH.PWD2		- Second encrypted password
			CIFAUTH.PWD3		- Third encrypted password
			CIFAUTH.QUESTION	- Customer's authentication question
			CIFAUTH.ANSWER		- Customer's authentication answer

		. EPARS Customer enrollment criteria				/TYP=T/NOREQ
			CIFAUTH.USERID1		- User ID
			CIFAUTH.PASSWORD	- Primary encrypted password
			CIFAUTH.PWD2		- Second encrypted password
			CIFAUTH.PWD3		- Third encrypted password
			CIFAUTH.PWD1RESET	- Primary Password Reset Value
			CIFAUTH.PWD2RESET	- Secondary Password Reset Value
			CIFAUTH.PWD3RESET	- Alternate Password Reset Value

		. INTRFACE Calling Interface					/TYPE=T/NOREQ/MECH=VAL

	
	   RETURNS:

		. $$	<STATUS>0</STATUS>	/No error
 
		. return  requested information /TYP=N	

			        Enrollment status
				STATUS=-1 - Error
				STATUS=0  - Success
				STATUS=1  - Customer record not found
				STATUS=2  - Authentication failure
				STATUS=3  - Authentication failure - exceeded maximum tries
				STATUS=4  - Authentication success, duplicate USERID
				STATUS=5  - Customer record is blocked by bank

			  if reqopt byte 2 is "R", return status with question and ACN.
			  if reqopt byte 2 is "E", return status only.
			  if reqopt byte 2 is "A", return status with question and ACN.

	   RELATED:

		. $$^PBSMRPC - MRPC Service Class Driver
	
	   EXAMPLE:

		S RM=$$^MRPC098(.return,1,reqopt,PARS,INTRFACE)
		S reply=$$SPODBC^MRPC098(1,"1E","CIF.TAXID=876-55-9876,CIF.DOB=47208,CIFAUTH.SCRTWRD=TEST,	
		CIFAUTH.ANSWER=VIRGINIA,CIF.ACN=2,CIFAUTH.USERID1=XYZ123,CIFAUTH.PASSWORD=1632A64F75609E23C032B")		
		S reply=$$SPODBC^MRPC098(1,"1R","CIF.TAXID=876-55-9876,CIF.DOB=47208,CIFAUTH.SCRTWRD=TEST")
		S reply=$$SPODBC^MRPC098(1,"1E","CIF.TAXID=876-55-9876,CIFAUTH.USERID1=X","CIFAUTH.USERID1=Y")
		S reply=$$SPODBC^MRPC098(0,"1R","CIF.TAXID=876-55-9876,CIF.DOB=47208,CIFAUTH.SCRTWRD=TEST")

		reply:

		<ERROR>
			<CODE>MSG_2951</CODE>
			<DESCRIPTION>Version number of client message is not compatible with server</DESCRIPTION>
		</ERROR>

	   ---- Revision History -----------------------------------------------

	  12/05/01 - YURKOVICG - 48607
		     Changed misspelled 'AGRUMENT' to 'ARGUMENT' in DTD section.

	  12/11/00 - GALEONET - 42810
		     Added code to extract ENCMTHD (encryption method) from 
		     External Interface table.
		     Modified call to CIFVAL2^ECOMMERC to include encryption 
		     method parameter.
		     Modified section ENROLL to support CIFAUTH password reset
		     fields PWD1RESET, PWD2RESET, and PWD3RESET.
		     Modified section ENROLL to encrypt password fields in 
		     EPARS argument. 

	  09/18/00 - SIGDAE - 41717
		     Modified section ENROLL to set stat=-1 in catch block
		     and to check for a %MSGID of null.

	  07/10/00 - SIGDAE - 41042
		     Added request option "A", Authentication Only.  This option
		     will allow a client to test for an existing customer based
		     on the Customer validation criteria.  Authentication 
		     failures will not update the customer's CIFAUTH table.  
		     Successful responses will return a status of 0, the 
		     customer's account number, and their secret question.

	  06/26/00 - SIGDAE - 40730
		     Modified documentation at top of routine.

	  05/09/00 - SHANL - 37246
		     Modified the catch code to catch duplicated userid login.           	  

	  04/18/00 - CHOK - 37246
		     Change ERRXML call

	  04/17/00 - CHOK - 37246
		     Add parameters EARS
	
	*/

	#if $$VALID^%ZRTNS("ZMRPC098") 
	do getdata^ZMRPC098
	#else  
	do getdata
	#endif

	// Wrap in LV format
	set return=$$V2LV^MSG(return)
	quit ""

getdata
 
	type HTML xx
	set xx=Class.new("HTML")

	set return=""

	/*
	   Version number of client message is not compatible with server
	   The test must be applied after the call to the custom program
	   since it may have its own version number.
	*/

	// Version number of client message is not compatible with server
	if $G(versn)'=1 set return=$$ERRXML^ECOMMERC(2951,$E(reqopt,1),"MRPC098") quit


	if +$E(reqopt,1)=0 do DTD quit


	// Invalid option - reqopt byte 1
	if +$E(reqopt,1)>2 set return=$$ERRXML^ECOMMERC(1411,$E(reqopt,1),"MRPC098") quit

	// Invalid option - reqopt byte 2
	if $E(reqopt,2)'="R",$E(reqopt,2)'="E",$E(reqopt,2)'="A" set return=$$ERRXML^ECOMMERC(1411,$E(reqopt,1),"MRPC098") quit

	// Missing required field
	if $E(reqopt,2)="E",$G(EPARS)="" set return=$$ERRXML^ECOMMERC(1768,$E(reqopt,1),"MRPC098") quit
	if $G(PARS)="" set return=$$ERRXML^ECOMMERC(1768,$E(reqopt,1),"MRPC098") quit

	if +$E(reqopt,1)=2 do DTD

	set return=xx.addString("MRPC098",0)

	new ACN,ENCMTHD,input,status

	// Extract encryption method
	if $G(INTRFACE)'="" set ENCMTHD=Db.getOneRow("ENCMTHD","UTBLEXTINT","INTRFACE")
	else  set ENCMTHD=""

	do AUTH(PARS,.status,.ACN)						//Authenticate user

	if status=0 do {
		if $E(reqopt,2)'="E" do GETQ(ACN,.status)			//Fetch question
		if $E(reqopt,2)="E" do ENROLL(ACN,EPARS,.status)
		}

	if status=-1 quit

	set return=xx.addProp("STATUS",status)
	set return=xx.addString("MRPC098",1)

	quit


DTD
	type HTML xx=Class.new("HTML")
	set return=xx.addTitle("MRPC098")
	set return=xx.addElement("MRPC098","ERROR?,CIF?,CIFAUTH?,STATUS?")
	set return=xx.addElement("ERROR","CODE,ARGUMENT?,DESCRIPTION")
	set return=xx.addAttrib("ERROR","CODE,ARGUMENT,DESCRIPTION")
	set return=xx.addElement("CIF","ACN")
	set return=xx.addAttrib("CIF","ACN")
	set return=xx.addElement("CIFAUTH","QUESTION")
	set return=xx.addAttrib("CIFAUTH","QUESTION")
	quit


AUTH(PARS,stat,ACN)
	
	set stat=$$CIFVAL2^ECOMMERC(PARS,.ACN,ENCMTHD)

	if $E(reqopt,2)="A" quit					// Authenticate only, do not update CIFAUTH

	if stat=1 quit							//Not found
	
	if stat=2 do { quit						//Update failed counter and change stat if maxtry
		new xcdmax						//is exceeded
		set xcdmax=0
		do LOGFAIL^ECOMMERC(ACN,.xcdmax)
		quit:'xcdmax 
		set stat=3						//exceeded maxtries
		}
	
	if stat'=0 quit

	new BLKRSN,DATA,LSTFAILDT,PAR,STATUS
	set DATA=Db.getOneRow("STATUS,LSTFAILDT,BLKRSN","CIFAUTH","ACN") 
	set STATUS=$P(DATA,$C(9),1)
	set LSTFAILDT=$P(DATA,$C(9),2)
	set BLKRSN=$P(DATA,$C(9),3)
	if STATUS=2 do { quit						//Customer is blocked
		set stat=3
		if BLKRSN>1 set stat=5 quit				//Customer blocked
		if %CurrentDate-LSTFAILDT=0 quit			//Last failure was today
		do LOGRESET^ECOMMERC(ACN)				//Date reset
		set stat=0
		}
	quit


ENROLL(ACN,EPARS,stat)
	/* 
	   This subroutine will attempt to enroll an authenticated customer
	   using the USERID and PASSWORD passed in the message.
	*/
	new ANSWER,ENROLLDT,ENROLLTM,PASSWORD,PWD2,PWD3,PWD1RESET,PWD2RESET
	new PWD3RESET,QUESTION,RET,STATUS,USERID1
	do STR2ARR^UTLMRPC(EPARS,.input)					//Parse input string
	if ENCMTHD="MD5" set RET=$$ENCMD5^ECOMMERC(.input)			//Encrypt password fields
	set USERID1=$$UPPER^%ZFUNC($G(input("CIFAUTH.USERID1")))
	set PASSWORD=$G(input("CIFAUTH.PASSWORD"))
	set PWD2=$G(input("CIFAUTH.PWD2"))
	set PWD3=$G(input("CIFAUTH.PWD3"))
	set PWD1RESET=$G(input("CIFAUTH.PWD1RESET"))
 	set PWD2RESET=$G(input("CIFAUTH.PWD2RESET"))
	set PWD3RESET=$G(input("CIFAUTH.PWD3RESET"))

	catch error {
		if $P($G(%MSGID),"|",1)=4325 set stat=4 quit
		
		new Q,msgid,fld
		set stat=-1

		// System error
		if $P($G(%MSGID),"|",1)="" set %MSGID=7061

		set msgid=$P(%MSGID,"|",1)
		set Q=$$LV2V^MSG($P(%MSGID,"|",2),.fld)
		set return=$$ERRXML^ECOMMERC(msgid,$E(reqopt,1),"MRPC098",$G(fld(1)),$G(fld(2)),$G(fld(3)),$G(fld(4)),$G(fld(5))) quit		
		}

	set STATUS=1								//Activate customer status
	set ENROLLDT=%CurrentDate
	set ENROLLTM=%CurrentTime

	if 'Db.isDefined("CIFAUTH","ACN") do { quit
		do Db.insert("CIFAUTH","ACN,USERID1,PASSWORD,PWD2,PWD3,PWD1RESET,PWD2RESET,PWD3RESET,ENROLLDT,ENROLLTM,STATUS",":ACN,:USERID1,:PASSWORD,:PWD2,:PWD3,:PWD1RESET,:PWD2RESET,:PWD3RESET,:ENROLLDT,:ENROLLTM,:STATUS")
		do LOGRESET^ECOMMERC(ACN)
		}

	new data	
	set data=Db.getOneRow("USERID1,PASSWORD,PWD2,PWD3,PWD1RESET,PWD2RESET,PWD3RESET","CIFAUTH","ACN",124)
	if USERID1="" set USERID1=$P(data,"|",1)
	if PASSWORD="" set PASSWORD=$P(data,"|",2)
	if PWD2="" set PWD2=$P(data,"|",3)
	if PWD3="" set PWD3=$P(data,"|",4)
	if PWD1RESET="" set PWD1RESET=$P(data,"|",5)
	if PWD2RESET="" set PWD2RESET=$P(data,"|",6)
	if PWD3RESET="" set PWD3RESET=$P(data,"|",7)
	do Db.update("CIFAUTH","USERID1=:USERID1,PASSWORD=:PASSWORD,PWD2=:PWD2,PWD3=:PWD3,PWD1RESET=:PWD1RESET,PWD2RESET=:PWD2RESET,PWD3RESET=:PWD3RESET,ENROLLDT=:ENROLLDT,ENROLLTM=:ENROLLTM,STATUS=:STATUS","ACN=:ACN")
	do LOGRESET^ECOMMERC(ACN)						//Reset logon fields
	quit


GETQ(ACN,stat)

	new QUEST
	set QUEST=Db.getOneRow("QUESTION","CIFAUTH","ACN")
	if QUEST="" set QUEST="?"

	type HTML xx=Class.new("HTML")
	set return=xx.addList("CIF","ACN",ACN)
	set return=xx.addList("CIFAUTH","QUESTION",QUEST)
	set stat=0
	quit 
	
	
SPODBC(versn,reqopt,PARS,EPARS,INTRFACE)

	/*
	   This function is intended to provide a capability to invoke a
	   true MRPC from the EXECUTE procedure facility within the PROFILE
	   ODBC driver.  This is needed in order to get the normal response
	   argument that is part of the MRPC structure returned to the calling
	   ODBC client.
	*/

	#if $$VALID^%ZRTNS("ZMRPC098") 
	do getdata^ZMRPC098
	#else  
	do getdata
	#endif
	quit return

vSIG()	quit "59948^54934^Laura Hillanbrand^13182"	// Signature - LTD^TIME^USER^SIZE
