LNUEFD1	//;Utility to find balance and int paid on specified date
	/*
	       ORIG:  Neal E. Gorman

	  ---- Revision History ------------------------------------------------
	  
	   02/20/06 - KUMARB - CR 13272
	   	Modified section INIT to call VPG01 and section 
	   	VPG and VPG0 are removed.
	   	Modified section VER to call section FILE and END.
	   	Modified section EXEC to call section A and quit.
	  
	   04/15/2002 - Reena Datta - ARQ 49794
			Converted to PSL

	   04/03/00 - TANY - 37915
	              Optimized performance by modifying ^SCADAT1 calls
	              to ^SCAJD. Also remove revision history older than
	              one year.

	
          ----------------------------------------------------------------------
	*/
	
	do INIT
	
	quit

INIT	// Initialization

	type String VFMQ
	
	do VPG01
	if "DFQ"[VFMQ do VER quit
        
        quit

VPG01	// Set up.

	type public String VFMQ
	
	type Date EFD
	type Number CID
	type String %READ,%TAB()

	set %TAB("CID")=".CID3/XPP=set %EXT=1 do ^UACN"
	set %TAB("EFD")=".EFD1/XPP=do EFD^LNUEFD1"

	set %READ="@@%FN,,,CID/REQ,EFD/REQ"
	do ^UTLREAD
	
	quit

ERR	// Error

	type public Boolean ER
	type public String VFMQ

	set ER=1 do ^UTLERR

	set VFMQ="Q"
	
	quit

VER	// Verification

	type public String VFMQ

	if VFMQ="Q" do END quit
	
	do FILE
	do END
	
	quit

FILE	// File data

	type public Number %TSEQ

	do EXEC

	set %TSEQ=%TSEQ+0
	
	quit
	
END	// End of processing
	if VFMQ="Q" quit

	//  Recalculated Balance: ~p1
	set RM(1)=$$^MSG(21,$$^SCARND(%BAL,12,$G(CID)))

	// Interest/Dividend paid ~p1
	set RM(2)=$$^MSG(3858,$$^SCARND(%IPL,12,$G(CID)))

	//   Neg Amort Reduction: ~p1
	set RM(3)=$$^MSG(10,$$^SCARND(%NARL,12,$G(CID)))

	//   Capitalized deferred int/div: ~p1
	set RM(4)=$$^MSG(6,$$^SCARND(%DIC,12,$G(CID)))

	//   Principal Only Pmts: ~p1
	set RM(5)=$$^MSG(11,$$^SCARND(%POP,12,$G(CID)))

	//   Balance Last Advance: ~p1
	set RM(6)=$$^MSG(5,$$^SCARND(%BAOLA,12,$G(CID)))

	//     Last Advance Date:     ~p1
	set RM(7)=$$^MSG(3,$$DAT^%ZM(%LADT,$G(%MSKD)))

	//   High Balance - Life: ~p1
	set RM(8)=$$^MSG(8,$$^SCARND(%HABL1,12,$G(CID)))

	//  High Bal Since Zero: ~p1
	set RM(9)=$$^MSG(7,$$^SCARND(%HABL2,12,$G(CID)))

	//  Total Escrow Balance: ~p1
	set RM(10)=$$^MSG(22,$$^SCARND(%TEB,12,$G(CID)))

	//    Unadvanced Balance: ~p1
	set RM(11)=$$^MSG(4,$$^SCARND(%UDBAL,12,$G(CID)))

	set ER="W"
	quit


EFD	// Post processor to effective date prompt
	set %JD=$$^SCAJD(X)

	// Future-dated request invalid
	if %JD>%SystemDate do {
		set ER=1 
		set RM=$$^MSG(1152)
		}
	quit


EXEC    // Single account access
	new A,ARUF,%B,BAL,BAOLA,DIC,ETC,FOUND,G,H,HABL1,HABL2,HISCTF
	new I,IPL,IUNT,J,LADT,N,NARL,P,T,TEB,TRB,TSEQ,UDBAL

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set ARUF=ln.aruf
	set BAL=ln.bal

	// Unadvanced Balance
	set UDBAL=ln.udbal
	if ARUF set BAL=BAL-UDBAL

	// Total Escrow Balance
	set TEB=ln.teb

	// High Account Balance - Life
	set HABL1=ln.habl1

	// High Account Balance - Between Zero Bals
	set HABL2=ln.habl2

	// History Cut-Off Date
	set HISCTF=ln.hisctf

	// Transaction to Reduce Balance
	set TRB=ln.trb

	// Advances to Reduce Undisbursed Flag
	set ARUF=ln.aruf

	// Int/Div Paid - Life
	set IPL=ln.ipl

	// Int/Div Paid - Life
        set IUNT=ln.iun-IPL

	// Deferred Interest - Capitalized
	set DIC=ln.dic 

	// Negative Amortization Reduction - Life
	set NARL=ln.narl

	// Date of Last Loan Advance
	set LADT=ln.ladt

	// Balance - Last Advance Date
	set BAOLA=ln.baola

	set %BAL=BAL 
	set %IPL=IPL 
	set %DIC=DIC 
	set %NARL=NARL
	set %TEB=TEB 
	set %UDBAL=UDBAL 
	set %IUNT=IUNT
	set (%BAOLA,%LADT,%HABL1,%HABL2,%T)=""
	set (%POP)=0
	
	do A

	quit

A	//This section was perviously handled by UHFETCH
        new FOUND1,FOUNDL
	set FOUND1=0
	type ResultSet histt=Db.select("TSEQ","HIST","CID=:CID","TSEQ DESC")
        if histt.isEmpty() set (%HABL1,%HABL2)=%BAL,(%LADT,%BAOLA)="" quit
       	while histt.next() do { quit:FOUND1
        	set TSEQ=histt.getCol(1)
              	type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ")

		set %TSEQ=TSEQ
	
	        if hist.tjd'>%EffectiveDate do { quit
			set %T=%TSEQ+1 
			set (%B,%HABL1,%HABL2)=%BAL 
			set:%BAL<.01 G=1 
			kill A 
			set FOUND1=1 
			do EXEC2
			}
	
		// Transaction amount
		set T=hist.tamt if '$L(T) quit
	
		// J = Int tran code, N = Neg Am reduction
		set J=hist.itc,N=hist.vdt
	
		// Principal and interest piece
	        if T["#" set P=$P(T,"#",2),I=$P(T,"#",3) 
	
		//  Transaction is all principal
        	else  set P=T,I=0
        
		set P=P+$P(T,"#",5)
        
		// Tran code
		set ETC=hist.etc
	
		// anticipate history conversion problems
		if ETC="" set ETC=" "
	
		if '$D(A(ETC)) do {
			type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
			set A=trn.pcf,A(ETC)=$E(A,20)_"|"_$E(A,16) 
			}

		if TRB-$E(J) do B
		else  do C

		if TRB-$E(J) quit
		
	
		//This section was perviously handled by UHFETCH
		set FOUNDL=0
        	type ResultSet histsb=Db.select("SLSEQ,PE01,PE02,PE03,PE04,PE05","HISTSB","CID=:CID AND SLN=:%TSEQ")
		if histsb.isEmpty() quit
        	while histsb.next() do { quit:FOUNDL
       			set X=histsb.getRow()
	        	set FOUNDL=1
			for J=2:1 quit:$P(X,"*#P#",J)=""  set %POP=%POP+$P(X,"*#P#",J)
			}	
		}
	quit


B	set %BAL=%BAL-P set %NARL=%NARL+N
	set %TEB=$P(S,"|",15)
	set %UDBAL=%UDBAL+$P(T,"#",5)
	set %IUNT=%IUNT-$P(T,"#",8)
	set:'+A(ETC) %IPL=%IPL+I
	quit


C	set %BAL=%BAL+P set %NARL=%NARL-N
	set %TEB=$P(S,"|",15)
	set %UDBAL=%UDBAL-$P(T,"#",5)
	set %IUNT=%IUNT-$P(T,"#",8)
	set:'+A(ETC) %IPL=%IPL-I
	set:$P(A(ETC),"|",2) %DIC=%DIC-I
	quit


EXEC2	//This section was perviously handled by UHFETCH
  	
	new FOUND2
	set FOUND2=0
	type ResultSet histt=Db.select("TSEQ","HIST","CID=:CID","TSEQ DESC")
        if histt.isEmpty() quit
        while histt.next() do { quit:FOUND2
		set TSEQ=histt.getCol(1)
        	type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ")	
		if hist.tjd'>HISCTF do { quit
			if '$G(FOUND("BAOLA")) set %BAOLA=BAOLA set %LADT=LADT
			if '$G(FOUND("HABL2")) set %HABL2=HABL2
			if '$G(FOUND("HABL1")) set %HABL1=HABL1
			set FOUND2=1
			}

		// J = Int tran code
		set J=hist.itc

		// not monetary trans
		if '$L(J),'$L(hist.tamt) quit

		// Tran code
		set E=hist.etc

		if E="" set E=" "
		if '$D(A(E)) do {
			type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
        		set A(E)=trn.pcf
			}
	
		set T=hist.tamt
		if T["#" set P=$P(T,"#",2)+$P(T,"#",5)+$P(T,"#",8)
	
		else  set P=T
	
		if '$G(FOUND("BAOLA")),TRB-$E(J),$E(A(E),4) do {
			set %LADT=+H 
			set %BAOLA=%B 
			set FOUND("BAOLA")=1 
			set FOUND("LADT")=1
			}
	
		set %B=%B+$S((TRB-$E(J)):-P,1:P)

		// [LN]HABL1 - High balance (life)
		if %B>%HABL1 set %HABL1=%B

		// [LN]HABL2 - High balance (between zero balances)
		if '$G(FOUND("HABL2")),%B<.01 set FOUND("HABL2")=1
		if '$G(FOUND("HABL2")),%B>%HABL2 set %HABL2=%B
		}
	quit
	

vSIG()	quit "60317^22484^Balasubramonian Sankar^6501"	// Signature - LTD^TIME^USER^SIZE
