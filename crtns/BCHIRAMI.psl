BCHIRAMI //Batch BCHLETIRAMIN - MAD Minimum Amount Letters
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLETIRAMIN Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLETIRAMIN")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLETIRAMIN") quit
 do JOBMGR^BCHUTL(%FN,"BCHLETIRAMIN",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLETIRAMIN")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(ACN,RPASEQ,TAXYR) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLETIRAMIN","*","",ACN.get()_","_RPASEQ.get()_","_TAXYR.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLETIRAMIN",ACN.get()_","_RPASEQ.get()_","_TAXYR.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLETIRAMIN",ACN.get()_","_RPASEQ.get()_","_TAXYR.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,ACN,RPASEQ,TAXYR)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLETIRAMIN","*","",ACN.get()_","_RPASEQ.get()_","_TAXYR.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLETIRAMIN",ACN.get()_","_RPASEQ.get()_","_TAXYR.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,ACN,RPASEQ,TAXYR) //
	//Already Defined ACN,RPASEQ,TAXYR
	
	type public Date BOY
	type public Number XAGE
	
	type Date DOB
        type Number AGE,CID,D10,MADAMT
        type String CO,XVAR,XFORM
        
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
	set DOB=cif.dob
	set AGE=$$NOY^SCADAT(DOB,BOY,1,1)
	if AGE<XAGE quit

        type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:TAXYR")
        set D10=ira.d10
       	set MADAMT=ira.madamt
        set CID=ira.firstacc

        
	set CO=$$GETCO^LETTERU(ACN,CID)

	set XFORM="IRAMADMIN"
	set XVAR=Db.currVal("UTBLFORMVAR","CO,XFORM")

	if (MADAMT>0),(D10<MADAMT) do TRIGGER^LETTERU(CO,XFORM,XVAR)
			
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,ACN,RPASEQ,TAXYR
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set ACN=vRECORD.piece($C(9),1)
 set RPASEQ=vRECORD.piece($C(9),2)
 set TAXYR=vRECORD.piece($C(9),3)
 do vPROC(ACN,RPASEQ,TAXYR)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,ACN,RPASEQ,TAXYR
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+31>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
        type Date BOY,XCURYR
        type Number vEXIT,XAGEYR
	type String VFMQ,%READ,%TAB
	
	set XCURYR=%SystemDate
	set XCURYR=XCURYR.toString("YEAR")
	set XCURYR="01/01/"_XCURYR
	set BOY=XCURYR.toString("MM/DD/YEAR")
	
	set XAGEYR=70.5
	set %TAB("XAGEYR")="/TYP=T/REQ/LEN=4/DES="_$$^MSG(4473,XCURYR)
	set %READ="@@%FN/REV/CEN,,XAGEYR"
	do ^UTLREAD if VFMQ="Q" set vEXIT=1 quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("ACN,RPASEQ,TAXYR","IRA","TAXYR=:XCURYR")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	
	type public Date BOY
	type public Number XAGEYR
	type Number LETTJD,XAGE 
	
	set XAGE=XAGEYR.get()
	set BOY=BOY.get()
	set LETTJD=%SystemDate

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
