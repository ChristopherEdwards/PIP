LPSWPFIL(RecordLPSWEEP lpsweep, String vpar, Boolean vparNorm) // LPSWEEP - Loan Payment Sweep File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:27 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lpsweep.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lpsweep,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lpsweep,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lpsweep.cid
	type String LPCID = lpsweep.lpcid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("LPCID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LPSWEEP",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LPSWEEP","CID = :lpsweep.cid and LPCID = :lpsweep.lpcid") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String LPCID

	type RecordLPSWEEP lpsweep = Db.getRecord("LPSWEEP","CID=:CID,LPCID=:LPCID")
	if (%ProcessMode = 2) do {
		do lpsweep.setMode(2)

		do LPSWPFIL(lpsweep,vpar)
	}
	else  do VINDEX(lpsweep)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLPSWEEP lpsweep

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LPSWEEP","CID = :lpsweep.cid and LPCID = :lpsweep.lpcid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lpsweep))  S ^LPSWP(vobj(lpsweep,-3),vobj(lpsweep,-4))=vobj(lpsweep)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lpsweep)             // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lpsweep) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLPSWEEP lpsweep

	if vpar["/INDEX/" do VINDEX(.lpsweep)                  // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lpsweep)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^LPSWP(vobj(lpsweep,-3),vobj(lpsweep,-4))          // Delete Record
	quit


vinit // Initialize default values

	type public RecordLPSWEEP lpsweep

	// Type local variables for access keys for defaults
	type public String CID
	type public String LPCID

	if lpsweep.duedel.isNull() set lpsweep.duedel = 0      // duedel
	quit


vreqn // Validate required data items

	type public RecordLPSWEEP lpsweep

	if lpsweep.duedel.isNull() do vreqerr("DUEDEL") quit
	if lpsweep.pri.isNull() do vreqerr("PRI") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLPSWEEP lpsweep

	if lpsweep.cid.isNull() do vreqerr("CID") quit
	if lpsweep.lpcid.isNull() do vreqerr("LPCID") quit

		if vx("DUEDEL").exists(),lpsweep.duedel.isNull() do vreqerr("DUEDEL") quit
		if vx("PRI").exists(),lpsweep.pri.isNull() do vreqerr("PRI") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LPSWEEP","MSG",1767,"LPSWEEP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLPSWEEP lpsweep
	if 'lpsweep.cid.isNull() set vfkey("^ACN("_""""_lpsweep.cid_""""_","_50_")")="LPSWEEP(CID) -> ACN"
	if 'lpsweep.lpcid.isNull() set vfkey("^ACN("_""""_lpsweep.lpcid_""""_","_50_")")="LPSWEEP(LPCID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLPSWEEP lpsweep
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":lpsweep.cid") set vERRMSG = $$^MSG(8563,"LPSWEEP(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("ACN",":lpsweep.lpcid") set vERRMSG = $$^MSG(8563,"LPSWEEP(LPCID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vbd1 // Trigger BEFORE_DELETE - Before delete

	type public RecordLPSWEEP lpsweep
	/*
	-----Revision History--------------------------------------------------
	10/26/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	// Change priority to 0
	
	set lpsweep.pri=0
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordLPSWEEP lpsweep

	/*
	---- Revision History---------------------------------------------------

	07/23/03 - CARROLLJ - 51349
		Change call from DUE^LNPSR to DUE^BCHLNPSR

	09/26/02  Spier 51089
		Corrected Syntax errors and rewrote to make use of 
		new better methods ( removed getonerow used 3rd parameter
		to getRecord)

	*/
	// Check sweep account status
	
	new ZACN,ZCID,ZLCID
	set ZCID=lpsweep.cid
	set ZLCID=lpsweep.lpcid

	type RecordDEP dep=Db.getRecord("DEP","ZCID",1)

	// Invalid deposit account
	if dep.getMode()=0 do Runtime.setErrMSG("LPSWEEP",1259,ZCID) quit:ER

	// Primary CIF
	set ZACN=dep.acn
	if 'Db.isDefined("RELCIF","ACN=:ZACN,CID=:ZLCID") do Runtime.setErrMSG("LPSWEEP",1340,"ZCID~ZLCID") quit:ER 
	
	// Account closed
	if dep.stat=4 do Runtime.setErrMSG("LPSWEEP",6050,ZCID) quit:ER 

	// Not defined as sweep account
	if 'dep.lpswp do Runtime.setErrMSG("LPSWEEP",866) quit:ER        
	
	// Check loan account status
	
	set ZLCID=lpsweep.lpcid
	type RecordACN acn=Db.getRecord("ACN","CID=:ZLCID",1)

	// Invalid loan account
	if acn.getMode()=0 do Runtime.setErrMSG("LPSWEEP",1259,ZLCID) quit:ER 

	// Account closed
	if acn.stat=4 do Runtime.setErrMSG("LPSWEEP",6050,ZLCID) quit:ER 
	
	// Is the loan acoount related to sweep account?

	// Calculate due flag
	set lpsweep.duedel=$$DUE^BCHLNPSR(lpsweep.lpcid)

	// If loan flag is due, set the deposit LPDUE flag as well
	if lpsweep.duedel,acn.stat=0 do {
		set dep.lpdue=1
		do dep.save()
		}
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLPSWEEP lpsweep

	set X = lpsweep.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lpsweep.lpcid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("LPCID", vRM) quit
	if '("01"[lpsweep.DUEDEL) set vRM=$$^MSG(742,"L") do vdderr("DUEDEL", vRM) quit
	set X = lpsweep.pri if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PRI", vRM) quit
	set X = lpsweep.type if 'X.isNull(),'Db.isDefined("PRODDFTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LPSWEEP","MSG",979,"LPSWEEP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLPSWEEP lpsweep)	//LPSWEEP Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if TSRC="B" do {
		do vj1(.lpsweep)	// Mode=I,U,D Tran=B EFD=N,E Seq=1 JRNID=HIST
		}
	else  if TSRC="O" do {
		do vj1(.lpsweep)	// Mode=I,U,D Tran=O EFD=N,E Seq=1 JRNID=HIST
		}

	quit


vj1(RecordLPSWEEP lpsweep)	// HIST  Table HIST  History journal (New)

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lpsweep.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(1962,lpsweep.lpcid,lpsweep.pri)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLPSWEEP lpsweep) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.lpsweep)

	quit
	

vi1(RecordLPSWEEP lpsweep) // Maintain LPSWP index entries (Loan Payment Sweep Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lpsweep.lpcid
	type String v3 = lpsweep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^LPSWP(vobj(lpsweep,-3),vobj(lpsweep,-4)))#2,'$D(^XREF("LPSWP",v2,v3)) do vidxerr("LPSWP")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("LPSWP",v2,v3)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("LPSWP",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LPSWEEP")

	while ds.next() do {
		type RecordLPSWEEP lpsweep=ds.getRecord("LPSWEEP")
		if vlist.contains("VINDEX") do VINDEX(.lpsweep) quit
		if vlist.contains("LPSWP") do vi1(.lpsweep)
	}

	quit


public VIDXBLD1(RecordLPSWEEP lpsweep, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lpsweep) quit
	if vlist.contains("LPSWP") do vi1(.lpsweep)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LPSWEEP","MSG",1225,"LPSWEEP."_di)

	quit


vkchged // Access key changed

	type public RecordLPSWEEP lpsweep

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("LPCID").exists() set vux("LPCID") = vx("LPCID")
	do vkey(1) set voldkey = lpsweep.cid_","_lpsweep.lpcid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lpsweep.cid_","_lpsweep.lpcid // Copy new keys into object
	type RecordLPSWEEP vnewrec = lpsweep.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LPSWEEP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLPSWEEP lpsweep

	if vux("CID").exists() set lpsweep.cid = vux("CID").piece("|",i)
	if vux("LPCID").exists() set lpsweep.lpcid = vux("LPCID").piece("|",i)
	quit

VIDXPGM()	quit "LPSWPFIL"	// Location of index program

