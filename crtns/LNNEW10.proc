public LNNEW10(RecordLN ln)

	/*

	    New Loan Account - Disclosure

	   ORIG:  Unknown
	
	   This routine creates various default values for loan fields and
	   calculates disclosure field values.  It is intended to be used
	   only by the native PROFILE loan create process (^LNNEW), the loan
	   convert interim to permament process (^LNICNV), and from an
	   MRPC call (at entry point RPC) (call to be defined).
	
	   When called from the top, the ln object is defined.  This array is
	   used by subsequent calls out of LNNEW10 and LNNEW10A, including
	   LNAPR which ends up calling LNCFBLD* routines.  Certain values in
	   the ln object may be changed by these routines.
	
	   When called at RPC, no ln object exists on entry.  Therefore the
	   RPC section creates a temporary ln object for use by this process.
	   The temporary ln object is partial only, based on the input into
	   RPC.  See the RPC section for required columns on entry and changed
	   columns that may be returned.
	
	   Columns that may change are examined here so that new/changed
	   values can be returned to the RPC caller.  If new columns are
	   potentials for modification in subsequent calls, add them here.
	
	---- Revision History ------------------------------------------------
	
	10/16/06 - NATRAJAH - CR 23619
		   Modified LNAMFEES section, to avoid parenthesis expected 
		   error.
		   
	10/10/06 - NATRAJAH - CR 23054
		   . Added New section LNAMFEES, to calculate lnamfees values
		     when Add-on Items are added.
		   . Modified RPC section, to set the lndata's TRATE and TREXD
		     value to loan account(ln) object.
		     
	07/31/06 - KELLYP - CR 22048
		   Modified ADDON and PMTTRS sections to eliminate PRECEDENCE
		   warnings.
	
	02/27/06 - KELLYP - CR 19765
		   Modified RPC section to set ln.bloff and ln.caf correctly
		   as they were being set equal to the wrong variables.  Also
		   made top of procedure public and removed pre-2003 revision
		   history.
	
	01/12/04 - CARROLLJ - CR7901
		   Correct parameter mismatch errors.

	11/13/03 - CARROLLJ - 51630
		   Pass ln object to PROCSAN procedure.

	05/05/03 - GRAY - 51349
		   Corrected several errors when trying to set up payment
		   schedule information.

	----------------------------------------------------------------------
	
	   Entry point with LN defined.  %PR is also required.
	
	*/
	
	new lndata,changes,IFRE
	
	new ambas,AMDT,amodt,amtreq,aoamtorg,aprapp,ballamt,caf,dxsi,COINT,comfa,comfp,CRCD
	new crlmt,DAYS,DC,dispmp,disppi,dist1af,dfp,dist1fre,dist1nd,dist2fre,dist3fre,dist4fre
	new dist2nd,dist3nd,dist4nd,distint,distpmt,DIY,FBP,flat,FROMDT,iacm,iam,icpf,idpf,irn
	new iro,iun,JD,mdt,LPD,MDT,mult,NEG,NJD,numch,odd,odt,ODT,OINT,onp,orgfa,orgfp,pcfre,pchm
	new pcmval,piacm,pldf,PMDT,PMT,pmttrs,pmtpi,PPICO,PPIF,ppinc,PRIN,ptrm,ropt,RPC,schld
	new sldtd,TBAL,TODT,trm,TRS,type,XPCM
	
	
	// Get interest frequency
	set IFRE=$P($G(%PR(+$G(PR("I")))),"|",3) 
	set AF="" 
	set FRE=ln.dist1fre
	set IFRE=$S(IFRE=1:ln.dist1fre,IFRE=2:ln.dist2fre,IFRE=3:ln.dist3fre,IFRE=4:ln.dist4fre,1:ln.dist1fre)
	
	// Move data into variables for use by LNNEW10 and LNNEW10A

	// Amortization Base (Number of Payments)
	set ambas=ln.ambas

	// Interest Prepaid Date
	set amodt=ln.amodt

	// Amount Requested
	set amtreq=ln.amtreq

	// Add-on Fees Original Amount
	set aoamtorg=ln.aoamtorg

	// Balloon Amount
	set ballamt=ln.ballamt

	// Billing Date Offset
	set bloff=ln.bloff

	// APR - Fees Required of All Borrowers
	set aprapp=ln.aprapp

	// Number of Payments Per Change
	set caf=ln.caf

	// Defer Interest In Excess of Accrual
	set dxsi=ln.dxsi

	// Commitment Fee - Amount
	set comfa=ln.comfa

	// Commitment Fees - Percentage
	set comfp=ln.comfp

	// Currency Code
	set CRCD=ln.crcd

	// Credit Limit - Current
	set crlmt=ln.crlmt

	// Date of First Payment
	set dfp=ln.dfp

	// Disclosure - Mtg Ins Prem Pd
	set dismip=ln.dismip

	// Disclosure - Mtg Ins Premium Paid
	set dispmp=ln.dispmp

	// Disclosure - Prepaid Interest Amount
	set disppi=ln.disppi

	// Distribution 1 Frequency
	set dist1fre=ln.dist1fre

	// Distribution 2 Frequency
	set dist2fre=ln.dist2fre

	// Distribution 3 - Frequency
	set dist3fre=ln.dist3fre

	// Distribution 4 - Frequency
	set dist4fre=ln.dist4fre

	// Distribution 1 Next Due
	set dist1nd=ln.dist1nd

	// Distribution 2 Next Due
	set dist2nd=ln.dist2nd

	// Distribution 3 - Next Due
	set dist3nd=ln.dist3nd

	// Distribution 4 - Next Due
	set dist4nd=ln.dist4nd

	// Interest Accrual Method
	set iacm=ln.iacm

	// Interest Amortization Method
	set iam=ln.iam

	// Interest Calculation Period Frequency
	set icpf=ln.icpf

	// Interim Loan Status
	set idpf=ln.idpf

	// Nominal Int/Div Rate
	set irn=ln.irn

	// Original Int/Div Rate
	set iro=ln.iro

	// Interest - Unearned (Original)
	set iun=ln.iun

	// Account Maturity Date
	set mdt=ln.mdt

	// Number of Payment Changes
	set numch=ln.numch

	// Original Disbursement Date
	set odd=ln.odd

	// Original Number of Payments
	set onp=ln.onp

	// Origination Fee - Amount
	set orgfa=ln.orgfa

	// Origination Fees - Percentage
	set orgfp=ln.orgfp

	// Payment Change Frequency
	set pcfre=ln.pcfre

	// Payment Change Method
	set pchm=ln.pchm
	set XPCM=ln.pcm
	Type RecordSTBLPCM stblpcm=Db.getRecord("STBLPCM","KEY=:XPCM")
	set pcmval=stblpcm.pcmp

	// Calculate P&I Based on IACM
	set piacm=ln.piacm

	// Payoff - Include Payoff Date Flag
	set pldf=ln.pldf

	// Principal and Interest Payment
	set pmtpi=ln.pmtpi

	// Payment Escrow Amount
	set pmttrs=ln.pmttrs

	// Payment Percentage Increase
	set ppinc=ln.ppinc

	// Payment Term
	set ptrm=ln.ptrm

	// Payment Rounding Option
	set ropt=ln.ropt

	// Scheduled Payment - Last Date
	set schld=ln.schld

	// SL Deferment Ending Date
	set sldtd=ln.sldtd

	// Account Term
	set trm=ln.trm

	// Product Type
	set type=ln.type

	// Flat Rate Interest Calculation indicator
	set flat=ln.flat

	// Date Account Opened
	set odt=ln.odt
	
	do START(.ln,IFRE,aoamtorg,,)
	quit 


	
public RPC(lndata,ps,ins,ndf,changes)


	/*
	   Called from ^MRPC035
	   Called from After Insert Triggers LNCYCDLD, LNCYCINS, LNCYCMSC and
	   LNCYCDLD.
	
	   Supports a call for creation of disclosure data and other default
	   values from non-native clients.  Input is via array 'lndata' (see
	   below for all required columns).  The array 'changes' signals those
	   columns that have been added or have changed.
	
	   The approach used here is to move the information in lndata() into
	   a ln object for use by further processing.  Returned values
	   will be placed in the changes array.
	
	   INPUTS:
	
	   . lndata Input data				/TYP=array/MECH=REFNAM:RW
	    All required loan column values are
	    passed in this array.  All changes
	    and additions will be marked in
	    the changes array.
	
	    Format:  lndata("AMBAS")=ambas_value
	
	    Required input columns in data array:
	
	     ambas,amodt,amtreq,anirnd,anptnd,anpto,aprapp,
	     caf,comfa,comfp,crcd,crlmt,dismip,dispmp,
	     dist1fre,dist1ld,dist1nd,dist2fre,dist2nd,
	     dist3fre,dist3nd,dist4fre,dist4nd,distip,
	     dseq,fia,fpa,iacm,iam,ichld,ichnd,icpf,idpf,
	     index,intfre,intmn,intmx,intoff,irn,
	     iro,iun,lbdd,lvr,maxdrct,mdt,mfcb,numch,odd,
	     onp,orgfa,orgfp,pcfre,pchm,pchnd,pcm,pcoff,
	     pldf,pmnddc,pmndic,pmtdist,pmtdistf,pmtmin,
	     pmtorg,pmtpi,pmttrs,pmxddc,pmxddl,pmxddy,
	     pmxdic,pmxdil,pmxdiy,pmxpdc,pmxpdl,pmxpdy,
	     pmxpic,pmxpil,pmxpiy,ppa,ppinc,ptrm,rafre,
	     rald,rand,ropt,rpp,sldtd,trm,type
	
	    Columns that may be added by this process (plus those
	    above may be modified):
	
	     aniro,dfp,disamf,disapr,disppi,disppid,dist1af
	     distint,distpmt,idf,pa1a-pa15a,pa1f-pa15f
	     pa1t-pa15t,schld,schnd
	
	   . ps LNPS1 payment schedule records		/TYP=array/MECH=REFNAM:R

	
	   . ins LNAMOAO insurance records		/TYP=array/MECH=REFNAM:R
	
	   . ndf LNAOPTS net deferred fee record	/TYP=T/MECH=VAL
	
	   . changes  Changed data marker		/TYP=array/MECH=REFNAM:W
	    For each loan column value
	    in the data array that is
	    modified as a result of this
	    routine, an entry is set up
	    in the changes array.
	
	    Example:  changes("DFP")=value
	
	   RETURNS:
	   . ER Error indicator  			/TYP=N
	
	*/

	new ambas,AMDT,amodt,amtreq,anirnd,anptnd,anpto,aprapp,aprmthd,ballamt
	new bloff,caf,dxsi,CID,COINT,comfa,comfp,CRCD,crlmt,DAYS,DC,dismip
	new dispmp,disppi,dist1af,dist1fre,dist1ld,dist2fre,dist3fre,dist4fre
	new dist1nd,dist2nd,dist3nd,dist4nd,distint,distip,distpmt,DIY,dseq
	new FBP,flat,fpa,FROMDT,i,iacm,iam,ichld,ichnd,icpf,idpf,ifre,index
	new intfre,intmn,intmx,intoff,irn,iro,iun,JD,lbdd,lnamfees,ln,LNP,LPD
	new lvr,maxdrct,mdt,MDT,mfcb,mult,NEG,NJD,numch,odd,odt,ODT,OINT,onp
	new orgfa,orgfp,p,pap,pas,pcfre,pchm,pcm,pcmval,pcoff,piacm,pldf,PMDT
	new pmnddc,pmndic,PMT,pmtdist,pmtdistf,pmtmin,pmtorg,pmttrs,pmtpi
	new pmxddc,pmxddl,pmxddy,pmxdic,pmxdil,pmxdiy,pmxpdc,pmxpdl,pmxpdy
	new pmxpic,pmxpiy,PPICO,PPIF,ppinc,%PR,PRIN,ptrm,rafre,rald,rand,ropt
	new rpp,RPC,schld,sldtd,TBAL,TODT,trm,TRS,type,TYPE
	
	type RecordLN ln=Class.new("RecordLN")

	// Amortization Base (Number of Payments)
	set ambas=$G(lndata("AMBAS")) 
	set ln.ambas=ambas

	// Interest Prepaid Date
	set amodt=$G(lndata("AMODT")) 
	set ln.amodt=amodt

	// Amount Requested
	set amtreq=$G(lndata("AMTREQ")) 
	set ln.amtreq=amtreq

	// Annual Rate Limit - Next Change Date
	set anirnd=$G(lndata("ANIRND")) 
	set ln.anirnd=anirnd

	// Annual Pmt Limit - Next Change Date
	set anptnd=$G(lndata("ANPTND")) 
	set ln.anptnd=anptnd

	// Annual Pmt Limit - Original P&I
	set anpto=$G(lndata("ANPTO")) 
	set ln.anpto=anpto

	// APR - Fees Required of All Borrowers
	set aprapp=$G(lndata("APRAPP")) 
	set ln.aprapp=aprapp

	// APR Calculation Method
	set aprmthd=$G(lndata("APRMTHD")) 
	set ln.aprmthd=aprmthd

	// Balloon Amount
	set ballamt=$G(lndata("BALLAMT")) 
	set ln.ballamt=ballamt

	// Billing Date Offset
	set bloff=$G(lndata("BLOFF")) 
	set ln.bloff=bloff

	// Reserved For Future Use
	set caf=$G(lndata("CAF")) 
	set ln.caf=caf

	// Defer Interest In Excess of Accrual
	set dxsi=$G(lndata("DXSI")) 
	set ln.dxsi=dxsi

	// Commitment Fee - Amount
	set comfa=$G(lndata("COMFA")) 
	set ln.comfa=comfa

	// Commitment Fees - Percentage
	set comfp=$G(lndata("COMFP")) 
	set ln.comfp=comfp

	// Currency Code
	set CRCD=$G(lndata("CRCD")) 
	if CRCD="" set CRCD=%SystemCurrency
	set ln.crcd=CRCD

	// Credit Limit - Current
	set crlmt=$G(lndata("CRLMT")) 
	set ln.crlmt=crlmt

	// Date of First Payment
	set dfp=$G(lndata("DFP")) 
	set ln.dfp=dfp

	// Disclosure - Mtg Ins Prem Pd
	set dismip=$G(lndata("DISMIP")) 
	set ln.dismip=dismip

	// Disclosure - Mtg Ins Premium Paid
	set dispmp=$G(lndata("DISPMP")) 
	set ln.dispmp=dispmp

	// Disclosure - Prepaid Interest Amount
	set disppi=$G(lndata("DISPPI")) 
	set ln.disppi=disppi

	// Distribution 1 Frequency
	set dist1fre=$G(lndata("DIST1FRE")) 
	set ln.dist1fre=dist1fre

	// Distribution 1 Next Due
	set dist1nd=$G(lndata("DIST1ND")) 
	set ln.dist1nd=dist1nd

	// Distribution 2 Frequency
	set dist2fre=$G(lndata("DIST2FRE")) 
	set ln.dist2fre=dist2fre

	// Distribution 1 Last Due
	set dist1ld=$G(lndata("DIST1LD")) 
	set ln.dist1ld=dist1ld

	// Distribution 2 Next Due
	set dist2nd=$G(lndata("DIST2ND")) 
	set ln.dist2nd=dist2nd

	// Distribution 3 - Frequency
	set dist3fre=$G(lndata("DIST3FRE")) 
	set ln.dist3fre=dist3fre

	// Distribution 3 - Next Due
	set dist3nd=$G(lndata("DIST3ND")) 
	set ln.dist3nd=dist3nd

	// Distribution 4 - Frequency
	set dist4fre=$G(lndata("DIST4FRE")) 
	set ln.dist4fre=dist4fre

	// Distribution 4 - Next Due
	set dist4nd=$G(lndata("DIST4ND")) 
	set ln.dist4nd=dist4nd

	// Total Estimated Mortgage Ins Premiums
	set distip=$G(lndata("DISTIP")) 
	set ln.distip=distip

	// Internal Bill Seq Nbr Next Due Date
	set dseq=$G(lndata("DSEQ")) 
	set ln.dseq=dseq

	// Flat Rate Interest Calculation indicator
	set flat=$G(lndata("FLAT")) 
	set ln.flat=flat

	// Fixed Principal Amount
	set fpa=$G(lndata("FPA")) 
	set ln.fpa=fpa

	// Interest Accrual Method
	set iacm=$G(lndata("IACM")) 
	set ln.iacm=iacm

	// Interest Amortization Method
	set iam=$G(lndata("IAM")) 
	set ln.iam=iam

	// Int/Div Change - Last Date
	set ichld=$G(lndata("ICHLD")) 
	set ln.ichld=ichld

	// Interest Calculation Period Frequency
	set icpf=$G(lndata("ICPF")) 
	set ln.icpf=icpf

	// Int/Div Change - Next Date
	set ichnd=$G(lndata("ICHND")) 	
	set ln.ichnd=ichnd

	// Interest on Disburs Grace Period (Days)
	set idgp=$G(lndata("IDGP")) 
	set ln.idgp=idgp

	// Interim Loan Status
	set idpf=$G(lndata("IDPF")) 
	set ln.idpf=idpf

	// Int/Div Index
	set index=$G(lndata("INDEX")) 
	set ln.index=index

	// Int/Div Check Frequency
	set intfre=$G(lndata("INTFRE")) 
	set ln.intfre=intfre

	// Interest Rate - Minimum
	set intmn=$G(lndata("INTMN")) 
	set ln.intmn=intmn

	// Interest Rate - Maximum
	set intmx=$G(lndata("INTMX")) 
	set ln.intmx=intmx

	// Interest Review Offset Days
	set intoff=$G(lndata("INTOFF")) 
	set ln.intoff=intoff

	// Nominal Int/Div Rate
	set irn=$G(lndata("IRN")) 
	set ln.irn=irn

	// Original Int/Div Rate
	set iro=$G(lndata("IRO")) 
	set ln.iro=iro

	// Interest - Unearned (Original)
	set iun=$G(lndata("IUN")) 
	set ln.iun=iun

	// Last Bill - Loan Due Date Billed
	set lbdd=$G(lndata("LBDD")) 
	set ln.lbdd=lbdd

	// Disclosure - Loan to Value Ratio
	set lvr=$G(lndata("LVR")) 
	set ln.lvr=lvr

	// Maximum Number of Debits
	set maxdrct=$G(lndata("MAXDRCT")) 
	set ln.maxdrct=maxdrct

	// Account Maturity Date
	set mdt=$G(lndata("MDT")) 
	set ln.mdt=mdt

	// Minimum Finance Charge Per Bill
	set mfcb=$G(lndata("MFCB")) 
	set ln.mfcb=mfcb

	// Number of Payment Changes
	set numch=$G(lndata("NUMCH")) 
	set ln.numch=numch

	// Original Disbursement Date
	set odd=$G(lndata("ODD")) 
	set ln.odd=odd

	// Date Account Opened
	set odt=$G(lndata("ODT")) 
	set ln.odt=odt

	// Original Number of Payments
	set onp=$G(lndata("ONP")) 
	set ln.onp=onp

	// Origination Fee - Amount
	set orgfa=$G(lndata("ORGFA")) 
	set ln.orgfa=orgfa

	// Origination Fees - Percentage
	set orgfp=$G(lndata("ORGFP")) 
	set ln.orgfp=orgfp

	// Payment Application Path
	set pap=$G(lndata("PAP")) 
	set ln.pap=pap

	// Payment Application String
	set pas=$G(lndata("PAS")) 
	set ln.pas=pas

	// Payment Change Frequency
	set pcfre=$G(lndata("PCFRE")) 
	set ln.pcfre=pcfre

	// Payment Change Method
	set pchm=$G(lndata("PCHM")) 
	set ln.pchm=pchm

	// P&I Payment Change Next Date
	set pchnd=$G(lndata("PCHND")) 
	set ln.pchnd=pchnd

	// Payment Calculation Method
	set pcm=$G(lndata("PCM")) 
	set ln.pcm=pcm
	set PCM=pcm
	Type RecordSTBLPCM stblpcm=Db.getRecord("STBLPCM","KEY=PCM")
	set pcmval=stblpcm.pcmp

	// P&I Payment Change Date Offset
	set pcoff=$G(lndata("PCOFF")) 
	set ln.pcoff=pcoff

	// Calculate P&I Based on IACM
	set piacm=$G(lndata("PIACM")) 
	set ln.piacm=piacm

	// Payoff - Include Payoff Date Flag
	set pldf=$G(lndata("PLDF")) 
	set ln.pldf=pldf

	// P&I Chg Min $ Dec - Per Chg
	set pmnddc=$G(lndata("PMNDDC")) 
	set ln.pmnddc=pmnddc

	// P&I Chg Min $ Inc - Per Chg
	set pmndic=$G(lndata("PMNDIC")) 
	set ln.pmndic=pmndic

	// Payment Distribution
	set pmtdist=$G(lndata("PMTDIST")) 
	set ln.pmtdist=pmtdist
 	
	// Payment Distribution Frequency Numbers
	set pmtdistf=$G(lndata("PMTDISTF")) 
	set ln.pmtdistf=pmtdistf

	// Minimum Payment Amount
	set pmtmin=$G(lndata("PMTMIN")) 
	set ln.pmtmin=pmtmin

	// Payment Amount - Original
	set pmtorg=$G(lndata("PMTORG")) 
	set ln.pmtorg=pmtorg

	// Principal and Interest Payment
	set pmtpi=$G(lndata("PMTPI")) 
	set ln.pmtpi=pmtpi

	// Payment Escrow Amount
	set pmttrs=$G(lndata("PMTTRS")) 
	set ln.pmttrs=pmttrs

	// P&I Chg Max $ Dec - Per Chg
	set pmxddc=$G(lndata("PMXDDC")) 
	set ln.pmxddc=pmxddc
	
	// P&I Chg Max $ Dec - Life
	set pmxddl=$G(lndata("PMXDDL")) 
	set ln.pmxddl=pmxddl

	// P&I Chg Max $ Dec - Per Year
	set pmxddy=$G(lndata("PMXDDY")) 
	set ln.pmxddy=pmxddy

	// P&I Chg Max $ Inc - Per Chg
	set pmxdic=$G(lndata("PMXDIC")) 
	set ln.pmxdic=pmxdic

	// P&I Chg Max $ Inc - Life
	set pmxdil=$G(lndata("PMXDIL")) 
	set ln.pmxdil=pmxdil

	// P&I Chg Max $ Inc - Per Year
	set pmxdiy=$G(lndata("PMXDIY")) 
	set ln.pmxdiy=pmxdiy

	// P&I Chg Max % Dec - Per Chg
	set pmxpdc=$G(lndata("PMXPDC")) 
	set ln.pmxpdc=pmxpdc

	// P&I Chg Max % Dec - Life
	set pmxpdl=$G(lndata("PMXPDL")) 
	set ln.pmxpdl=pmxpdl

	// P&I Chg Max % Dec - Per Year
	set pmxpdy=$G(lndata("PMXPDY")) 
	set ln.pmxpdy=pmxpdy

	// P&I Chg Max % Inc - Per Chg
	set pmxpic=$G(lndata("PMXPIC")) 
	set ln.pmxpic=pmxpic

	// P&I Chg Max % Inc - Life
	set pmxpil=$G(lndata("PMXPIL")) 
	set ln.pmxpil=pmxpil

	// P&I Chg Max % Inc - Per Year
	set pmxpiy=$G(lndata("PMXPIY")) 
	set ln.pmxpiy=pmxpiy

	// Payment - Partial Amount
	set ppa=$G(lndata("PPA")) 
	set ln.ppa=ppa

	// Payment Percentage Increase
	set ppinc=$G(lndata("PPINC")) 
	set ln.ppinc=ppinc

	// Payment Term
	set ptrm=$G(lndata("PTRM")) 
	set ln.ptrm=ptrm

	// Re-amortization Frequency
	set rafre=$G(lndata("RAFRE")) 
	set ln.rafre=rafre

	// Re-amortization - Last Date
	set rald=$G(lndata("RALD")) 
	set ln.rald=rald

	// Re-amortization - Next Date
	set rand=$G(lndata("RAND")) 
	set ln.rand=rand

	// Payment Rounding Option
	set ropt=$G(lndata("ROPT")) 
	set ln.ropt=ropt

	// Principal Repayment Plan
	set rpp=$G(lndata("RPP")) 
	set ln.rpp=rpp

	// Scheduled Payment - Last Date
	set schld=$G(lndata("SCHLD")) 	
	set ln.schld=schld

	// SL Deferment Ending Date
	set sldtd=$G(lndata("SLDTD")) 
	set ln.sldtd=sldtd

	// Account Term
	set trm=$G(lndata("TRM")) 
	set ln.trm=trm

	//Promotional Rate
	set trate=$G(lndata("TRATE"))
	set ln.trate=trate
	
	//Promotional rate expire date
	set trexd=$G(lndata("TREXD")) 
	set ln.trexd=trexd

	// Product Type
	set type=$G(lndata("TYPE")) 
	set ln.type=type 
	set TYPE=type

	set CID=$G(lndata("CID"))
	set ln.cid=CID	

	/*
	Establish value of pmtdist and pmtdistf.  Needed to create %PR
	array which is used by APR calculation routines.
	*/
	if pmtdist="",pap'="",pas'="" do ^LNCNVST(.ln,CID,pas,pap,.pmtdist,.pmtdistf,.npc,.ppdcat) quit:ER 

	// Set %PR array and get interest frequency
	for i=1:1 set p=$P(pmtdist,"-",i) quit:p=""  do {
		set %PR(i)=p_"|"_$P(pmtdistf,"-",i)_"|1"
		// Int frequency
		if p="I" set ifre=$P(pmtdistf,"-",i)
		}
	
	if '$G(ifre) set ifre=1
	set ifre=$G(lndata("DIST"_ifre_"FRE"))
	if ifre="" set ifre=dist1fre

	// Payment schedules
	// Create LNPS1 array and pass to LNNEW10A,LNAPR and LNCFBLDP
	type RecordLNPS1 lnps1()
	if $D(ps) do {
		new n
		set n=""
		for  set n=$O(ps(n)) quit:n=""  do {
			set lnps1(n)=Class.new("RecordLNPS1")
			set lnps1(n).cid=CID
			set lnps1(n).pdd=n
			}
		}
	
	set lnamfees=0
	// Insurance

	// Create LNAMOAO array and pass to LNNEW10A & LNAPR
	type RecordLNAMOAO lnamoao()
	set lnamfees=$$LNAMFEES(CID,.lnamoao())
	
	// Net deferred fees
	set LNP(1)=$G(ndf)                     
	
	// Signal to CHANGE section
	set changes=""
	do START(.ln,ifre,lnamfees,.lnps1(),.lnamoao())
	quit 
	

START(RecordLN ln,ifre,lnamfees,RecordLNPS1 lnps1(),RecordLNAMOAO lnamoao())

	//accumulated select for this table
	
	new TYPE 
	set TYPE=type
	Type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE")
	set PPIF=prodctl.ppif
	set PPICO=prodctl.ppico
	if PPICO="" set PPICO=iacm
	set RPC=prodctl.rpc
	set FBP=prodctl.fbp
	
	if $G(ifre)="" set ifre=dist1fre
	set lnamfees=$G(lnamfees)
	// Include for calcs
	if $E(iam)'=2 set crlmt=amtreq+lnamfees+iun
	
	// Set payment term equal to account term if not defined
	if ptrm="" do {
		set ptrm=trm
		set ln.ptrm=trm
		set changes("PTRM")=trm
		}
	
	// calculate DFP if not defined,this is req for amodt calculation.
	if dfp="" set dfp=$$DFP^PROCLN(type,CRCD,odd,dist1fre,dist1nd,dfp,bloff) do {
		set ln.dfp=dfp
		set changes("DFP")=dfp
		}	

	/*
	Calculate value for AMODT
	
	Variable LPD is equal to the "last payment date", defined as one
	hit of the payment frequency before the account's date of first
	payment.  Example:  If an account with a 1MA1 frequency is
	opened on December 23, and the product is configured to force
	at least one full payment before the first payment date, then
	the first payment date will be February 1.  The corresponding
	value of LPD is therefore January 1. The variable is used in
	maturity date, last scheduled date,  and capitalized odd-days
	interest calculations.

	If we have an amodt, set last payment date equal to 1 full period
	before the first payment date.
	*/	
	if amodt'="" do { quit:ER
		new FTYPE,DIST1FRE
		set FTYPE=""
		set LPD=odd
		set DIST1FRE=dist1fre
		if DIST1FRE'="" do { 
			Type RecordUSRFRE usrfre=Db.getRecord("USRFRE","UFRE=:DIST1FRE",1)
			set FTYPE=usrfre.fretyp
			}
		if DIST1FRE'="",DIST1FRE'="*",dfp,'FTYPE do { if ER do Runtime.setErrMSG("LN",3333,"RM") quit:ER
			set LPD=$$NJD^UFRE(dfp,"-"_dist1fre) quit:ER 
			if LPD<amodt set LPD=amodt
			}
		if FTYPE set LPD=amodt
		}
	
	// If no amodt, calculate the value of amodt and LPD.
	else  do { quit:ER 
		set amodt=$$AMODT^PROCLN(type,CRCD,odd,dist1fre,dfp,.LPD) quit:ER 
		set ln.amodt=amodt
		set changes("AMODT")=amodt
		}
	
	// Determine maturity date if not defined
	if mdt="" do {
		set mdt=$$MDT^PROCLN(ln.dtnt,odd,ptrm,trm,ln.busopt,ln.nbdc,LPD,pcmval,dist1fre,.AMDT)
		if 'ER do {
			set ln.mdt=mdt
			set changes("MDT")=mdt	
			}
		}
	
	/*
	Build payment schedule array for standard frequencies.  This array
	is built temporarily for the purposes of the disclosure calculation.
	Nothing is sent back to client.
	*/
	if dist1fre="*",mdt do { quit:ER 
	
		new nxtdat,quit
	
		do LNPS1BLD(.lnps1(),dist2fre,dist2nd,1)
		do LNPS1BLD(.lnps1(),dist3fre,dist3nd,2)
		do LNPS1BLD(.lnps1(),dist4fre,dist4nd,3)
		}
	
	set (AMDT,PMDT)=""
	set (COINT,OINT,DC)=0
	
	// Calculate annual factor based on interest frequency (dist 1-4)
	if "*"'[ifre set NJD=$$NJD^UFRE(%SystemDate,ifre,.dist1af) quit:ER 
	if '$G(dist1af) set dist1af=1
	else  do {
		set ln.dist1af=dist1af
		set changes("DIST1AF")=dist1af
		}
	
	if ambas'="",'mdt do { quit:ER 
		set JD=amodt set ER=0
		for I=1:1:ambas set JD=$$NJD^UFRE(JD,dist1fre) quit:ER 
		if 'ER do {
			set mdt=JD 
			set ln.mdt=mdt
			set changes("MDT")=mdt
			}
		}
	
	if mdt,ambas="" do {
		if ptrm'=trm set PMDT=$$MDT^PROCLN(ln.dtnt,odd,ptrm,trm,ln.busopt,ln.nbdc,LPD,pcmval,dist1fre,.AMDT)
		else  set (PMDT,AMDT)=mdt
		if dist1fre'="",dist1fre'="*" do {
			set ambas=$$NBROPMT^PROCLN(AMDT,odd,dist1fre,LPD,dist1af)
			set ln.ambas=ambas
			set changes("AMBAS")=ambas
			set onp=$$NBROPMT^PROCLN(PMDT,odd,dist1fre,LPD,dist1af)
			set ln.onp=onp
			set changes("ONP")=onp
			}
	
		}
	
	// Set up principal balance
	set NEG=$S($E(iam)=2:0,1:1)
	set PRIN=crlmt-(NEG*iun)-lnamfees
	set TBAL=PRIN+lnamfees 
	set PMT=pmtpi
	
	// Set up interest data
	if ln.trexd>ln.odd set irn=ln.trate
	else  set irn=ln.irn
	
	// Set up interest data : IRO and ANIRO
	if iro="" do {
		set ln.irn=irn
		set changes("IRO")=irn
		}
	set ln.irn=irn
	set changes("ANIRO")=irn
	
	set idf=$$^SCARND(irn/365,0,,CRCD,5)
	set ln.idf=idf
	set changes("IDF")=idf
	
	// Calculate Odd Days Interest
	set FROMDT=odd 
	set TODT=amodt
	set ODT=FROMDT
	set DAYS=TODT-FROMDT
	set TODT=TODT-1
	if DAYS do {
		new int
		set int=$$^UIC(crlmt,FROMDT,TODT,PPICO,irn,0,dist1af,dist1fre,icpf)
		if int#.01 set OINT=$$^SCARND(int,0,,CRCD,,"+")
		else  set OINT=int
		}
	
	set DIY=$$DY^UIC(iacm,TODT)
	
	// Set up payment schedule data
	if dist1fre="*" do { quit 
		set schld=odd

		set ln.schld=schld
		set changes("SCHLD")=schld

		set ln.schnd=dist1nd
		set changes("SCHND")=dist1nd
		
		set ln.dfp=dist1nd
		set changes("DFP")=dist1nd

		set dist1af=$$^SCARND(onp*365/(mdt-odd),0,,CRCD,2)
		set ln.dist1af=dist1af
		set changes("DIST1AF")=dist1af

		set mult=0
		set mdt=$$MDT^PROCLN(ln.dtnt,odd,ptrm,trm,ln.busopt,ln.nbdc,LPD,pcmval,dist1fre,.AMDT)
		do PMTTRS
		do END(.ln,.lnps1(),.lnamoao())
		}
	
	set JD=dist1nd
	set schld=amodt

	set ln.schld=schld
	set changes("SCHLD")=schld

	set ln.schnd=dist1nd
	set changes("SCHND")=dist1nd
	
	set ln.dfp=dist1nd
	set changes("DFP")=dist1nd
	
	
	if 'PPIF,dist1nd'="",$E(pcmval),$E(pcmval,3)'=2 do {
	
		// Calculate Capitalized Odd-days interest
		set FROMDT=ODT 
		set TODT=LPD
	
		/*
		If SCHLD is prior to ODT, then we have a short first period.  In that
		case, reverse next and last dates an multiply COINT by -1.
		*/
		set mult=1
		if TODT<FROMDT set mult=-1 set FROMDT=TODT set TODT=ODT
		set DAYS=TODT-FROMDT
		if FROMDT<TODT set TODT=TODT-1
	
		if DAYS do {
			new int
			set int=$$^UIC(crlmt,FROMDT,TODT,PPICO,irn,0,dist1af,dist1fre,icpf)
			if int#.01 set COINT=mult*$$^SCARND(int,0,,CRCD,,"+")
			else  set COINT=mult*int
			}
		set TBAL=TBAL+COINT set OINT=0
		}
	
	if ambas="",'$E(pcmval) set DC=1
	
	if 'DC do ADDON if PMT>0 do BALLOON
	
	if 'DC&(PMT'>0)!$E(pcmval) do { if '$E(pcmval) quit
		if PMT="" do CALCPI(.ln)
		if $E(pcmval),pchm'=2 do BALLOON
		if '$E(pcmval) do PMTTRS do END(.ln,.lnps1(),.lnamoao())
		}
	
	if DC,'$E(pcmval) do {
		do SINGLPAY
		set distpmt=onp*PMT
		set distint=$$^SCARND(onp*PMT-PRIN-lnamfees,0,,CRCD)
		if distint<0 set distint=-distint
		}
	
	
	if DC do { quit 
		set (ambas,onp)="" 
		set PMT=0
		set ln.ambas=ambas
		set changes("AMBAS")=ambas
		set ln.onp=onp
		set changes("ONP")=onp
		do PMTTRS 
		do END(.ln,.lnps1(),.lnamoao())
		}
	
	/*
	If FBP option = 2, do not init PMTORG.  This will be set by transfers
	into this bullet.
	*/
	if FBP'=2 do {
		set ln.pmtorg=PMT
		set changes("PMTORG")=PMT
		}
	set pmtpi=PMT
	set ln.pmtpi=pmtpi
	set changes("PMTPI")=pmtpi
	
	if 'iam do PMTTRS do END(.ln,.lnps1(),.lnamoao()) quit 
	if 'flat set distint=iun
	if 'distint do {
		new FROMDT,int,TODT
		set mult=onp
		if NEG set distint=PMT*mult-TBAL+COINT quit 
		// Discount
		new PMT
		set PMT=$$PI^UFINC(TBAL,irn,onp,,amodt,iacm,dist1fre,iacm,dist1af,0,trm)
		set PMT=$$^SCARND(PMT,0,CID)
		set distint=PMT*onp-TBAL+COINT
		set distint=$$^SCARND(distint,0,,CRCD,,"+")
		}
	
	set iun=distint
	set ln.iun=iun
	set changes("IUN")=iun
	set crlmt=PRIN+(NEG*distint)
	set ln.crlmt=crlmt
	set changes("CRLMT")=crlmt
	set distpmt=crlmt+lnamfees
	do PMTTRS do END(.ln,.lnps1(),.lnamoao())
	quit 
	

ADDON	// Handle Add-on/Discount loans, or those with payment amounts entered

	if 'iam!(PMT'="") quit 
	if iun!'(NEG!iun) do {
		set PMT=(PRIN+lnamfees+(NEG*iun))/onp
		if +PMT'=(PMT\1) set PMT=$$^SCARND(PMT,0,,CRCD) set distint=iun
		}
	if 'NEG set TBAL=TBAL-COINT
	quit 

	
BALLOON	// Calculate balloon loan disclosure data

	new FV
	set CF(1)=PMT_"|"_onp
	if onp,+onp=+ambas do { quit 
		if 'flat set distpmt=onp*PMT 
		if 'flat set distint=$$^SCARND(onp*PMT-PRIN-lnamfees,0,,CRCD)
		if $G(distint)<0 set distint=-$G(distint)
		}
	
	set FV=$$FV^UFINC(crlmt+COINT,irn,onp,PMT,dist1af)
	set FV=$$^SCARND(FV,0,,CRCD,,"+")
	set distint=$$^SCARND(onp*PMT-crlmt+FV-lnamfees,0,,CRCD)
	set distpmt=onp*PMT
	set CF(1)=PMT_"|"_(onp-1)
	set CF(2)=(FV+PMT)_"|1"
	quit 

	
CALCPI(RecordLN	ln) // Calculate a P & I payment using GEM formulas

	if pchm=2 do { quit 
		new xcaf,PMTPI,PVF,ZPMT
		do CALC^LNGEM(dist1af,.ZPMT,.distint,.xcaf,.PMTPI,lnamfees,.PVF,.ln)
		set PMT=$$^SCARND((PRIN+lnamfees)*PVF/1000,0,,CRCD)
		set distpmt=$$^SCARND(ZPMT,0,,CRCD)
		set distint=$$^SCARND(distint,0,,CRCD)
		if $G(xcaf) do {
			set caf=xcaf
			set ln.caf=caf
			set changes("CAF")=caf
			}
		if $G(PMTPI) do {
			set pmtpi=PMTPI
			set ln.pmtpi=pmtpi
			set changes("PMTPI")=pmtpi
			}
		}
	
	/*
	Calculate a normal P&I (LN.PCMVAL=0)
	Exclude I+P loans
	*/
	if $E(pcmval) do { quit:ER  set PMT=$$^SCARND(PMT,0,,CRCD)
		if flat,iam do { quit
			new TERM
			if mdt="" set mdt=$$EXT^UMDT(trm,ln.dtnt,0,ln.busopt,ln.nbdc)
			set TERM=$$NOY^SCADAT(ln.dtnt,mdt,1)
			set distint=$$^SCARND(amtreq*irn/100*TERM)
			set distpmt=amtreq+distint
			set PMT=(amtreq+distint)/onp
			}
		if 'piacm do { quit 
	
			/*
			If interest is capitalized on SAN loans,
			find the rate necessary to calculate the correct P&I
			*/
			new savirn
			set savirn=irn
			if $E(pcmval,2,4)="300",dxsi=1 do {
				set savirn=$$EIRN^PROCSAN(.ln,irn,2,dist1af)
				}
			if ballamt'="" do { quit 
				new BAL,INT
				set BAL=TBAL-ballamt 
				set FROMDT=amodt 
				set TODT=dist1nd
				set INT=$$^UIC(ballamt,FROMDT,TODT,"00",savirn,1,dist1af,dist1fre,icpf)
				set PMT=$$PMT^UFINC(BAL,savirn,ambas,dist1af)
				set PMT=PMT+$$^SCARND(INT,0,"",$G(CRCD))
				set PMT=$$^SCARND(PMT,0,"",$G(CRCD)) quit 
				}
			else  set PMT=$$PMT^UFINC(TBAL,savirn,ambas,dist1af) quit 
			}
		new CTL
		set CTL='PPIF
		// Determine if 1st period is short
		if 'dfp do {
			set dfp=$$DFP^PROCLN(type,CRCD,odd,dist1fre,dist1nd,dfp,bloff) 
			set ln.dfp=dfp
			set changes("DFP")=dfp
			}
		new LDD
		set LDD=$$NJD^UFRE(dfp,"-"_dist1fre) quit:ER 
		if LDD<amodt set CTL=CTL_1
		set PMT=$$PI^UFINC(TBAL,irn,ambas,0,amodt,iacm,dist1fre,PPICO,dist1af,CTL)
		}
	quit 

	
PMTTRS	// Calculate transfer amount and round

	set TRS=pmttrs
	if TRS,$G(RND)'="",RPC,ropt'>1 do {
		new R
		if ropt=1 set R=TRS set R=(1-(R-(R\1)))#1
		else  set R=pmtpi+TRS set R=(1-(R-(R\1)))#1
		set TRS=TRS+R 
		set $P(RND,"|",2)=R
		}
	quit 

	
SINGLPAY	// Single Payment Loans, loans with no term

	new A,I,IF,int,P
	set P=PRIN+lnamfees
	if mdt-amodt>0 do {
		set FROMDT=amodt 
		set TODT=mdt
		if 'pldf set TODT=TODT-1
		set int=$$^UIC(P,FROMDT,TODT,iacm,irn,1,dist1af,dist1fre,icpf)
		if int#($$MOD^SCARND(CID)) set PMT=P+$$^SCARND(int,0,,CRCD,,"+")
		else  set PMT=P+$$^SCARND(int,0,,CRCD)
		set CF(1)=PMT_"|1"
		}
	else  do {
		set IF=DIY*100
		set I=$$^SCARND(P*irn*DIY/IF/dist1af,0,,CRCD)
		set A=dist1af-1
		if 'A set CF(1)=(P+I)_"|1"
		else  set CF(1)=I_"|"_A set CF(2)=(P+I)_"|1"
		set PMT=(P+I)*dist1af
		}
	quit 

	
LNPS1BLD(RecordLNPS1 lnps1(),fre,nxtdat,piece)	// Private; Build payment schedule array
	
	if fre=""!(fre="*")!(nxtdat="") quit 
	
	set quit=""
	for  do { quit:quit!(ER)
		if nxtdat>mdt set quit=1 quit 
		if lnps1(nxtdat).getPointer()="" do {
			set lnps1(nxtdat)=Class.new("RecordLNPS1")
			set lnps1(nxtdat).cid=CID
			set lnps1(nxtdat).pdd=nxtdat
			}
		if piece=1 set lnps1(nxtdat).d2f=1
		if piece=2 set lnps1(nxtdat).d3f=1
		if piece=3 set lnps1(nxtdat).d4f=1
		set nxtdat=$$NJD^UFRE(nxtdat,fre) quit:ER  
		}
	quit 


END(RecordLN ln,RecordLNPS1 lnps1(),RecordLNAMOAO lnamoao())

	set ln.pmt=$S('PMT:0,1:PMT+TRS)
	set changes("PMT")=$S('PMT:0,1:PMT+TRS)

	set pmttrs=TRS
	set ln.pmttrs=$G(pmttrs)
	set changes("PMTTRS")=$G(pmttrs)

	set disppi=$G(OINT)
	set ln.disppi=$G(disppi)
	set changes("DISPPI")=$G(disppi)

	set ln.disppid=$G(DAYS)
	set changes("DISPPID")=$G(DAYS)

	set ln.distint=$G(distint)
	set changes("DISTINT")=$G(distint)

	set ln.distpmt=$G(distpmt)
	set changes("DISTPMT")=$G(distpmt)
	
	// Calculate disclosure and APR data
	do ^LNNEW10A(.ln,.lnps1(),.lnamoao())
	quit

LNAMFEES(Number CID,RecordLNAMOAO lnamoao())		

	/*
	 Get Add-on item value.
	 Arguments:
		.CID		Account Number
		.lnamoao()	Record LNAMOAO	
	 Returns
		lnamfees	TYP=N
	*/
	
	type public Cache %CACHE()
	type Number lnamfees
	type String TYP
	
	set lnamfees=0
	
	//For Cycled insurance
	type DbSet ds1=Db.selectDbSet("LNCYCINS","CID=:CID")
	while ds1.next() do {
		type RecordLNCYCINS lncycins=ds1.getRecord("LNCYCINS")
		if 'lncycins.pdby quit
		type RecordSTBLIPDBY stblipdby=%CACHE("STBLIPDBY").getRecord("STBLIPDBY","KEY=:lncycins.pdby")
		if 'stblipdby.add quit
		set lnamfees=lnamfees+lncycins.amt
		}

	//For Dealer processing
	type DbSet ds2=Db.selectDbSet("LNCYCDLD","CID=:CID")
	while ds2.next() do {
		type RecordLNCYCDLD lncycdld=ds2.getRecord("LNCYCDLD")
		if 'lncycdld.pdby quit
		type RecordSTBLIPDBY stblipdby=%CACHE("STBLIPDBY").getRecord("STBLIPDBY","KEY=:lncycdld.pdby")
		if 'stblipdby.add quit
		set lnamfees=lnamfees+lncycdld.amt
		}

	//For Miscellaneous cycled item
	type DbSet ds3=Db.selectDbSet("LNCYCMSC","CID=:CID")
	while ds3.next() do {
		type RecordLNCYCMSC lncycmsc=ds3.getRecord("LNCYCMSC")
		if 'lncycmsc.pdby quit
		type RecordSTBLIPDBY stblipdby=%CACHE("STBLIPDBY").getRecord("STBLIPDBY","KEY=:lncycmsc.pdby")
		if 'stblipdby.add quit
		set lnamfees=lnamfees+lncycmsc.amt
		}
				
	//Net Deferred Fee
	type DbSet ds=Db.selectDbSet("LNAMOAO","CID=:CID")
	while ds.next() do {
		type RecordLNAMOAO lnamoao1=ds.getRecord("LNAMOAO")
		set TYP=lnamoao1.typ
		if 'lnamoao1.pdby quit
		type RecordSTBLIPDBY stblipdby=%CACHE("STBLIPDBY").getRecord("STBLIPDBY","KEY=:lnamoao1.pdby")
		if 'stblipdby.add quit
		set lnamoao(TYP)=ds.getRecord("LNAMOAO")
		set lnamfees=lnamfees+lnamoao1.amt
		}
	quit lnamfees

vSIG()	quit "60555^31034^Hari Natrajan^31160"	// Signature - LTD^TIME^USER^SIZE
