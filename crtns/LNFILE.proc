LNFILE(RecordLN ln, String vpar, Boolean vparNorm) // LN - Loan File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (1012)           06/01/2006
	// Trigger Definition (149)                    10/30/2006
	// Journal File Definition (15)                01/03/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ln.getMode()                          // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ln,.vxins(),10,"|")
	if %O = 1 quit:'ln.isChanged()  do AUDIT^UCUTILN(ln,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = ln.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI^LNFIL0                     // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver^LNFIL1                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI^LNFIL0                     // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU^LNFIL0                     // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU^LNFIL0                     // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI^LNFIL0                     // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACN","CID = :ln.cid")             // No record exists
		if vpar["/TRIGBEF/" do VBD^LNFIL0                     // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordLN ln = Db.getRecord("LN","CID=:CID")
	if (%ProcessMode = 2) do {
		do ln.setMode(2)

		do LNFILE(ln,vpar)
	}
	else  do VINDEX^LNFIL3(ln)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLN ln

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACN","CID = :ln.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set ln.FMLD = %SystemDate
		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(ln,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(ln,-3),n)=vobj(ln,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(ln,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(ln,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(ln,-3),n)=vobj(ln,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL^LNFIL2(.ln)                  // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX^LNFIL3(.ln) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordLN ln
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^ACN(vobj(ln,-3),n)) quit:n.isNull()  if 'vobj(ln,n).data(),^ACN(vobj(ln,-3),n).data()#2 set vobj(ln,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLN ln

	if 'vkeychg.get(),ln.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX^LNFIL3(.ln)                       // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL^LNFIL2(.ln)                   // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^ACN(vobj(ln,-3))                                 // Delete Record
	quit


vinit // Initialize default values

	type public RecordLN ln

	// Type local variables for access keys for defaults
	type public String CID

	if ln.actibpay.isNull() set ln.actibpay = 0            // actibpay
	if ln.addlchg.isNull() set ln.addlchg = 0              // addlchg
	if ln.adf.isNull() set ln.adf = 0                      // adf
	if ln.adjcol.isNull() set ln.adjcol = 0                // adjcol
	if ln.adjcrlmt.isNull() set ln.adjcrlmt = 0            // adjcrlmt
	if ln.affln.isNull() set ln.affln = 0                  // affln
	if ln.aflg.isNull() set ln.aflg = 0                    // aflg
	if ln.aipr.isNull() set ln.aipr = 0                    // aipr
	if ln.air.isNull() set ln.air = 0                      // air
	if ln.alprty.isNull() set ln.alprty = 0                // alprty
	if ln.anlsys.isNull() set ln.anlsys = 0                // anlsys
	if ln.aomcode.isNull() set ln.aomcode = 0              // aomcode
	if ln.aruf.isNull() set ln.aruf = 0                    // aruf
	if ln.assumf.isNull() set ln.assumf = 0                // assumf
	if ln.auo.isNull() set ln.auo = 0                      // auo
	if ln.avcrlmt.isNull() set ln.avcrlmt = 0              // avcrlmt
	if ln.bcapint.isNull() set ln.bcapint = 0              // bcapint
	if ln.bmet.isNull() set ln.bmet = 0                    // bmet
	if ln.bpocl.isNull() set ln.bpocl = 0                  // bpocl
	if ln.cbf.isNull() set ln.cbf = 0                      // cbf
	if ln.ccbind.isNull() set ln.ccbind = 0                // ccbind
	if ln.cdf.isNull() set ln.cdf = 0                      // cdf
	if ln.chkeuro.isNull() set ln.chkeuro = 0              // chkeuro
	if ln.chkiss.isNull() set ln.chkiss = 0                // chkiss
	if ln.cintbnp.isNull() set ln.cintbnp = 0              // cintbnp
	if ln.cmsflg.isNull() set ln.cmsflg = 0                // cmsflg
	if ln.cof.isNull() set ln.cof = 0                      // cof
	if ln.collimpr.isNull() set ln.collimpr = 0            // collimpr
	if ln.collque.isNull() set ln.collque = 0              // collque
	if ln.comm.isNull() set ln.comm = 0                    // comm
	if ln.concal.isNull() set ln.concal = 0                // concal
	if ln.cpf.isNull() set ln.cpf = 0                      // cpf
	if ln.custom1.isNull() set ln.custom1 = 0              // custom1
	if ln.custom2.isNull() set ln.custom2 = 0              // custom2
	if ln.custom3.isNull() set ln.custom3 = 0              // custom3
	if ln.dip.isNull() set ln.dip = 0                      // dip
	if ln.dirdef.isNull() set ln.dirdef = 0                // dirdef
	if ln.dl1.isNull() set ln.dl1 = 0                      // dl1
	if ln.dl2.isNull() set ln.dl2 = 0                      // dl2
	if ln.dl3.isNull() set ln.dl3 = 0                      // dl3
	if ln.dl4.isNull() set ln.dl4 = 0                      // dl4
	if ln.dl5.isNull() set ln.dl5 = 0                      // dl5
	if ln.dl6.isNull() set ln.dl6 = 0                      // dl6
	if ln.dl7.isNull() set ln.dl7 = 0                      // dl7
	if ln.dlcaf.isNull() set ln.dlcaf = 0                  // dlcaf
	if ln.dlrp.isNull() set ln.dlrp = 0                    // dlrp
	if ln.dmndln.isNull() set ln.dmndln = 0                // dmndln
	if ln.dp1.isNull() set ln.dp1 = 0                      // dp1
	if ln.dp2.isNull() set ln.dp2 = 0                      // dp2
	if ln.dp3.isNull() set ln.dp3 = 0                      // dp3
	if ln.dp4.isNull() set ln.dp4 = 0                      // dp4
	if ln.dp5.isNull() set ln.dp5 = 0                      // dp5
	if ln.dp6.isNull() set ln.dp6 = 0                      // dp6
	if ln.dp7.isNull() set ln.dp7 = 0                      // dp7
	if ln.drf.isNull() set ln.drf = 0                      // drf
	if ln.dschpr.isNull() set ln.dschpr = 0                // dschpr
	if ln.dxsi.isNull() set ln.dxsi = 0                    // dxsi
	if ln.dy1.isNull() set ln.dy1 = 0                      // dy1
	if ln.dy2.isNull() set ln.dy2 = 0                      // dy2
	if ln.dy3.isNull() set ln.dy3 = 0                      // dy3
	if ln.dy4.isNull() set ln.dy4 = 0                      // dy4
	if ln.dy5.isNull() set ln.dy5 = 0                      // dy5
	if ln.dy6.isNull() set ln.dy6 = 0                      // dy6
	if ln.dy7.isNull() set ln.dy7 = 0                      // dy7
	if ln.eacip.isNull() set ln.eacip = 0                  // eacip
	if ln.eftdd.isNull() set ln.eftdd = 0                  // eftdd
	if ln.eftdeb.isNull() set ln.eftdeb = 0                // eftdeb
	if ln.eftreq.isNull() set ln.eftreq = 0                // eftreq
	if ln.ellpls.isNull() set ln.ellpls = 0                // ellpls
	if ln.emplben.isNull() set ln.emplben = 0              // emplben
	if ln.entf.isNull() set ln.entf = 0                    // entf
	if ln.epa.isNull() set ln.epa = 0                      // epa
	if ln.flat.isNull() set ln.flat = 0                    // flat
	if ln.fpaf.isNull() set ln.fpaf = 0                    // fpaf
	if ln.fpind.isNull() set ln.fpind = 0                  // fpind
	if ln.fsovrdue.isNull() set ln.fsovrdue = 0            // fsovrdue
	if ln.genprjrep.isNull() set ln.genprjrep = 0          // genprjrep
	if ln.genprn.isNull() set ln.genprn = 0                // genprn
	if ln.highvol.isNull() set ln.highvol = 0              // highvol
	if ln.hip.isNull() set ln.hip = 0                      // hip
	if ln.icap.isNull() set ln.icap = 0                    // icap
	if ln.intcap.isNull() set ln.intcap = 0                // intcap
	if ln.ipd.isNull() set ln.ipd = 0                      // ipd
	if ln.iplcf.isNull() set ln.iplcf = 0                  // iplcf
	if ln.ircb.isNull() set ln.ircb = 0                    // ircb
	if ln.irp.isNull() set ln.irp = 0                      // irp
	if ln.lchgnoto.isNull() set ln.lchgnoto = 0            // lchgnoto
	if ln.lip.isNull() set ln.lip = 0                      // lip
	if ln.mdf.isNull() set ln.mdf = 0                      // mdf
	if ln.mscp.isNull() set ln.mscp = 0                    // mscp
	if ln.mt900.isNull() set ln.mt900 = 0                  // mt900
	if ln.mt910.isNull() set ln.mt910 = 0                  // mt910
	if ln.nai.isNull() set ln.nai = 0                      // nai
	if ln.negacrpo.isNull() set ln.negacrpo = 0            // negacrpo
	if ln.ocaf.isNull() set ln.ocaf = 0                    // ocaf
	type public String TJD
	if ln.odt.isNull() set ln.odt = TJD                    // odt
	if ln.ooc.isNull() set ln.ooc = 0                      // ooc
	if ln.osgncrdc.isNull() set ln.osgncrdc = 0            // osgncrdc
	if ln.paf.isNull() set ln.paf = 0                      // paf
	if ln.paoi.isNull() set ln.paoi = 0                    // paoi
	if ln.payeft.isNull() set ln.payeft = 0                // payeft
	if ln.pbi.isNull() set ln.pbi = 0                      // pbi
	if ln.peba.isNull() set ln.peba = 0                    // peba
	if ln.pflg.isNull() set ln.pflg = 0                    // pflg
	if ln.phld.isNull() set ln.phld = 0                    // phld
	if ln.piacm.isNull() set ln.piacm = 0                  // piacm
	if ln.pldf.isNull() set ln.pldf = 0                    // pldf
	if ln.ppflg.isNull() set ln.ppflg = 0                  // ppflg
	if ln.ptf.isNull() set ln.ptf = 0                      // ptf
	if ln.ptsp.isNull() set ln.ptsp = 0                    // ptsp
	if ln.raclc.isNull() set ln.raclc = 0                  // raclc
	if ln.raclf.isNull() set ln.raclf = 0                  // raclf
	if ln.rcbind.isNull() set ln.rcbind = 0                // rcbind
	if ln.reccd.isNull() set ln.reccd = 0                  // reccd
	if ln.refflg.isNull() set ln.refflg = 0                // refflg
	if ln.regcc.isNull() set ln.regcc = 0                  // regcc
	if ln.revf.isNull() set ln.revf = 0                    // revf
	if ln.rflg.isNull() set ln.rflg = 0                    // rflg
	if ln.rfmo.isNull() set ln.rfmo = 0                    // rfmo
	if ln.rnflg.isNull() set ln.rnflg = 0                  // rnflg
	if ln.rpidc.isNull() set ln.rpidc = 0                  // rpidc
	if ln.rpmo.isNull() set ln.rpmo = 0                    // rpmo
	if ln.secmtg.isNull() set ln.secmtg = 0                // secmtg
	if ln.sibf.isNull() set ln.sibf = 0                    // sibf
	if ln.smet.isNull() set ln.smet = 0                    // smet
	if ln.srcbind.isNull() set ln.srcbind = 0              // srcbind
	if ln.swpel.isNull() set ln.swpel = 0                  // swpel
	if ln.trunc.isNull() set ln.trunc = 0                  // trunc
	if ln.wdlmtp.isNull() set ln.wdlmtp = 0                // wdlmtp
	if ln.woff.isNull() set ln.woff = 0                    // woff
	if ln.wspousfl.isNull() set ln.wspousfl = 0            // wspousfl
	quit


vreqn // Validate required data items

	type public RecordLN ln

	if ln.acn.isNull() do vreqerr("ACN") quit
	if ln.acnrelc.isNull() do vreqerr("ACNRELC") quit
	if ln.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	if ln.addlchg.isNull() do vreqerr("ADDLCHG") quit
	if ln.adf.isNull() do vreqerr("ADF") quit
	if ln.adjcol.isNull() do vreqerr("ADJCOL") quit
	if ln.adjcrlmt.isNull() do vreqerr("ADJCRLMT") quit
	if ln.affln.isNull() do vreqerr("AFFLN") quit
	if ln.aflg.isNull() do vreqerr("AFLG") quit
	if ln.aipr.isNull() do vreqerr("AIPR") quit
	if ln.air.isNull() do vreqerr("AIR") quit
	if ln.alprty.isNull() do vreqerr("ALPRTY") quit
	if ln.amtreq.isNull() do vreqerr("AMTREQ") quit
	if ln.anlsys.isNull() do vreqerr("ANLSYS") quit
	if ln.aruf.isNull() do vreqerr("ARUF") quit
	if ln.assumf.isNull() do vreqerr("ASSUMF") quit
	if ln.auo.isNull() do vreqerr("AUO") quit
	if ln.avcrlmt.isNull() do vreqerr("AVCRLMT") quit
	if ln.bcapint.isNull() do vreqerr("BCAPINT") quit
	if ln.bmet.isNull() do vreqerr("BMET") quit
	if ln.boo.isNull() do vreqerr("BOO") quit
	if ln.bpocl.isNull() do vreqerr("BPOCL") quit
	if ln.cbf.isNull() do vreqerr("CBF") quit
	if ln.cc.isNull() do vreqerr("CC") quit
	if ln.ccbind.isNull() do vreqerr("CCBIND") quit
	if ln.cdf.isNull() do vreqerr("CDF") quit
	if ln.chkeuro.isNull() do vreqerr("CHKEURO") quit
	if ln.chkiss.isNull() do vreqerr("CHKISS") quit
	if ln.cintbnp.isNull() do vreqerr("CINTBNP") quit
	if ln.cls.isNull() do vreqerr("CLS") quit
	if ln.cmsflg.isNull() do vreqerr("CMSFLG") quit
	if ln.cof.isNull() do vreqerr("COF") quit
	if ln.collimpr.isNull() do vreqerr("COLLIMPR") quit
	if ln.collque.isNull() do vreqerr("COLLQUE") quit
	if ln.comm.isNull() do vreqerr("COMM") quit
	if ln.concal.isNull() do vreqerr("CONCAL") quit
	if ln.cpf.isNull() do vreqerr("CPF") quit
	if ln.crcd.isNull() do vreqerr("CRCD") quit
	if ln.custom1.isNull() do vreqerr("CUSTOM1") quit
	if ln.custom2.isNull() do vreqerr("CUSTOM2") quit
	if ln.custom3.isNull() do vreqerr("CUSTOM3") quit
	if ln.dip.isNull() do vreqerr("DIP") quit
	if ln.dirdef.isNull() do vreqerr("DIRDEF") quit
	if ln.dlcaf.isNull() do vreqerr("DLCAF") quit
	if ln.dlrp.isNull() do vreqerr("DLRP") quit
	if ln.dmndln.isNull() do vreqerr("DMNDLN") quit
	if ln.drf.isNull() do vreqerr("DRF") quit
	if ln.dschpr.isNull() do vreqerr("DSCHPR") quit
	if ln.dxsi.isNull() do vreqerr("DXSI") quit
	if ln.eacip.isNull() do vreqerr("EACIP") quit
	if ln.eftdd.isNull() do vreqerr("EFTDD") quit
	if ln.eftdeb.isNull() do vreqerr("EFTDEB") quit
	if ln.eftreq.isNull() do vreqerr("EFTREQ") quit
	if ln.ellpls.isNull() do vreqerr("ELLPLS") quit
	if ln.emplben.isNull() do vreqerr("EMPLBEN") quit
	if ln.entf.isNull() do vreqerr("ENTF") quit
	if ln.epa.isNull() do vreqerr("EPA") quit
	if ln.flat.isNull() do vreqerr("FLAT") quit
	if ln.fpaf.isNull() do vreqerr("FPAF") quit
	if ln.fpind.isNull() do vreqerr("FPIND") quit
	if ln.fsovrdue.isNull() do vreqerr("FSOVRDUE") quit
	if ln.genprjrep.isNull() do vreqerr("GENPRJREP") quit
	if ln.genprn.isNull() do vreqerr("GENPRN") quit
	if ln.glsc.isNull() do vreqerr("GLSC") quit
	if ln.grp.isNull() do vreqerr("GRP") quit
	if ln.highvol.isNull() do vreqerr("HIGHVOL") quit
	if ln.hip.isNull() do vreqerr("HIP") quit
	if ln.icap.isNull() do vreqerr("ICAP") quit
	if ln.icpa.isNull() do vreqerr("ICPA") quit
	if ln.intcap.isNull() do vreqerr("INTCAP") quit
	if ln.ipd.isNull() do vreqerr("IPD") quit
	if ln.iplcf.isNull() do vreqerr("IPLCF") quit
	if ln.ircb.isNull() do vreqerr("IRCB") quit
	if ln.irp.isNull() do vreqerr("IRP") quit
	if ln.lchgnoto.isNull() do vreqerr("LCHGNOTO") quit
	if ln.lip.isNull() do vreqerr("LIP") quit
	if ln.mdf.isNull() do vreqerr("MDF") quit
	if ln.minopt.isNull() do vreqerr("MINOPT") quit
	if ln.mscp.isNull() do vreqerr("MSCP") quit
	if ln.mt900.isNull() do vreqerr("MT900") quit
	if ln.mt910.isNull() do vreqerr("MT910") quit
	if ln.nai.isNull() do vreqerr("NAI") quit
	if ln.negacrpo.isNull() do vreqerr("NEGACRPO") quit
	if ln.ocaf.isNull() do vreqerr("OCAF") quit
	if ln.odt.isNull() do vreqerr("ODT") quit
	if ln.ooc.isNull() do vreqerr("OOC") quit
	if ln.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
	if ln.paf.isNull() do vreqerr("PAF") quit
	if ln.paoi.isNull() do vreqerr("PAOI") quit
	if ln.pap.isNull() do vreqerr("PAP") quit
	if ln.pas.isNull() do vreqerr("PAS") quit
	if ln.payeft.isNull() do vreqerr("PAYEFT") quit
	if ln.pbi.isNull() do vreqerr("PBI") quit
	if ln.peba.isNull() do vreqerr("PEBA") quit
	if ln.pflg.isNull() do vreqerr("PFLG") quit
	if ln.phld.isNull() do vreqerr("PHLD") quit
	if ln.piacm.isNull() do vreqerr("PIACM") quit
	if ln.pldf.isNull() do vreqerr("PLDF") quit
	if ln.ppflg.isNull() do vreqerr("PPFLG") quit
	if ln.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
	if ln.ptf.isNull() do vreqerr("PTF") quit
	if ln.ptsp.isNull() do vreqerr("PTSP") quit
	if ln.raclc.isNull() do vreqerr("RACLC") quit
	if ln.raclf.isNull() do vreqerr("RACLF") quit
	if ln.rcbind.isNull() do vreqerr("RCBIND") quit
	if ln.reccd.isNull() do vreqerr("RECCD") quit
	if ln.refflg.isNull() do vreqerr("REFFLG") quit
	if ln.regcc.isNull() do vreqerr("REGCC") quit
	if ln.revf.isNull() do vreqerr("REVF") quit
	if ln.rflg.isNull() do vreqerr("RFLG") quit
	if ln.rfmo.isNull() do vreqerr("RFMO") quit
	if ln.rnflg.isNull() do vreqerr("RNFLG") quit
	if ln.rpidc.isNull() do vreqerr("RPIDC") quit
	if ln.rpmo.isNull() do vreqerr("RPMO") quit
	if ln.secmtg.isNull() do vreqerr("SECMTG") quit
	if ln.sgncrd.isNull() do vreqerr("SGNCRD") quit
	if ln.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	if ln.sibf.isNull() do vreqerr("SIBF") quit
	if ln.smet.isNull() do vreqerr("SMET") quit
	if ln.srcbind.isNull() do vreqerr("SRCBIND") quit
	if ln.stat.isNull() do vreqerr("STAT") quit
	if ln.swpel.isNull() do vreqerr("SWPEL") quit
	if ln.trb.isNull() do vreqerr("TRB") quit
	if ln.trunc.isNull() do vreqerr("TRUNC") quit
	if ln.type.isNull() do vreqerr("TYPE") quit
	if ln.wdlmtp.isNull() do vreqerr("WDLMTP") quit
	if ln.woff.isNull() do vreqerr("WOFF") quit
	if ln.wspousfl.isNull() do vreqerr("WSPOUSFL") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLN ln

	if ln.cid.isNull() do vreqerr("CID") quit

	if 'vobj(ln,-100,49,"").order().isNull() do {
		if vx("MINOPT").exists(),ln.minopt.isNull() do vreqerr("MINOPT") quit
		if vx("ARUF").exists(),ln.aruf.isNull() do vreqerr("ARUF") quit
		if vx("PAP").exists(),ln.pap.isNull() do vreqerr("PAP") quit
		if vx("IRCB").exists(),ln.ircb.isNull() do vreqerr("IRCB") quit
		if vx("CPF").exists(),ln.cpf.isNull() do vreqerr("CPF") quit
		if vx("TRB").exists(),ln.trb.isNull() do vreqerr("TRB") quit
		if vx("PAS").exists(),ln.pas.isNull() do vreqerr("PAS") quit
		if vx("SIBF").exists(),ln.sibf.isNull() do vreqerr("SIBF") quit
		if vx("NEGACRPO").exists(),ln.negacrpo.isNull() do vreqerr("NEGACRPO") quit
	}
	if 'vobj(ln,-100,50,"").order().isNull() do {
		if vx("TYPE").exists(),ln.type.isNull() do vreqerr("TYPE") quit
		if vx("CLS").exists(),ln.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),ln.grp.isNull() do vreqerr("GRP") quit
		if vx("CC").exists(),ln.cc.isNull() do vreqerr("CC") quit
		if vx("CRCD").exists(),ln.crcd.isNull() do vreqerr("CRCD") quit
		if vx("ANLSYS").exists(),ln.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("COMM").exists(),ln.comm.isNull() do vreqerr("COMM") quit
		if vx("REGCC").exists(),ln.regcc.isNull() do vreqerr("REGCC") quit
		if vx("GLSC").exists(),ln.glsc.isNull() do vreqerr("GLSC") quit
		if vx("CUSTOM1").exists(),ln.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),ln.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),ln.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("HIGHVOL").exists(),ln.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("EMPLBEN").exists(),ln.emplben.isNull() do vreqerr("EMPLBEN") quit
	}
	if 'vobj(ln,-100,51,"").order().isNull() do {
		if vx("RFLG").exists(),ln.rflg.isNull() do vreqerr("RFLG") quit
		if vx("PHLD").exists(),ln.phld.isNull() do vreqerr("PHLD") quit
		if vx("REVF").exists(),ln.revf.isNull() do vreqerr("REVF") quit
		if vx("PBI").exists(),ln.pbi.isNull() do vreqerr("PBI") quit
		if vx("ICPA").exists(),ln.icpa.isNull() do vreqerr("ICPA") quit
		if vx("STAT").exists(),ln.stat.isNull() do vreqerr("STAT") quit
		if vx("ADF").exists(),ln.adf.isNull() do vreqerr("ADF") quit
		if vx("ENTF").exists(),ln.entf.isNull() do vreqerr("ENTF") quit
	}
	if 'vobj(ln,-100,52,"").order().isNull() do {
		if vx("BOO").exists(),ln.boo.isNull() do vreqerr("BOO") quit
		if vx("ODT").exists(),ln.odt.isNull() do vreqerr("ODT") quit
		if vx("TRUNC").exists(),ln.trunc.isNull() do vreqerr("TRUNC") quit
	}
	if 'vobj(ln,-100,53,"").order().isNull() do {
		if vx("AMTREQ").exists(),ln.amtreq.isNull() do vreqerr("AMTREQ") quit
		if vx("SWPEL").exists(),ln.swpel.isNull() do vreqerr("SWPEL") quit
		if vx("AIPR").exists(),ln.aipr.isNull() do vreqerr("AIPR") quit
		if vx("IPD").exists(),ln.ipd.isNull() do vreqerr("IPD") quit
	}
	if 'vobj(ln,-100,54,"").order().isNull() do {
		if vx("IPLCF").exists(),ln.iplcf.isNull() do vreqerr("IPLCF") quit
		if vx("NAI").exists(),ln.nai.isNull() do vreqerr("NAI") quit
	}
	if 'vobj(ln,-100,55,"").order().isNull() do {
		if vx("DLCAF").exists(),ln.dlcaf.isNull() do vreqerr("DLCAF") quit
		if vx("WOFF").exists(),ln.woff.isNull() do vreqerr("WOFF") quit
	}
	if 'vobj(ln,-100,56,"").order().isNull() do {
		if vx("RFMO").exists(),ln.rfmo.isNull() do vreqerr("RFMO") quit
		if vx("RPMO").exists(),ln.rpmo.isNull() do vreqerr("RPMO") quit
		if vx("ALPRTY").exists(),ln.alprty.isNull() do vreqerr("ALPRTY") quit
		if vx("CCBIND").exists(),ln.ccbind.isNull() do vreqerr("CCBIND") quit
		if vx("SRCBIND").exists(),ln.srcbind.isNull() do vreqerr("SRCBIND") quit
		if vx("RNFLG").exists(),ln.rnflg.isNull() do vreqerr("RNFLG") quit
		if vx("RCBIND").exists(),ln.rcbind.isNull() do vreqerr("RCBIND") quit
		if vx("FPIND").exists(),ln.fpind.isNull() do vreqerr("FPIND") quit
	}
	if 'vobj(ln,-100,57,"").order().isNull() do {
		if vx("RPIDC").exists(),ln.rpidc.isNull() do vreqerr("RPIDC") quit
		if vx("AIR").exists(),ln.air.isNull() do vreqerr("AIR") quit
		if vx("FLAT").exists(),ln.flat.isNull() do vreqerr("FLAT") quit
	}
	if 'vobj(ln,-100,58,"").order().isNull() do {
		if vx("DRF").exists(),ln.drf.isNull() do vreqerr("DRF") quit
		if vx("PFLG").exists(),ln.pflg.isNull() do vreqerr("PFLG") quit
		if vx("FPAF").exists(),ln.fpaf.isNull() do vreqerr("FPAF") quit
		if vx("EACIP").exists(),ln.eacip.isNull() do vreqerr("EACIP") quit
		if vx("AUO").exists(),ln.auo.isNull() do vreqerr("AUO") quit
		if vx("PPFLG").exists(),ln.ppflg.isNull() do vreqerr("PPFLG") quit
		if vx("INTCAP").exists(),ln.intcap.isNull() do vreqerr("INTCAP") quit
	}
	if 'vobj(ln,-100,60,"").order().isNull() do {
		if vx("PIACM").exists(),ln.piacm.isNull() do vreqerr("PIACM") quit
	}
	if 'vobj(ln,-100,61,"").order().isNull() do {
		if vx("CHKISS").exists(),ln.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CHKEURO").exists(),ln.chkeuro.isNull() do vreqerr("CHKEURO") quit
	}
	if 'vobj(ln,-100,62,"").order().isNull() do {
		if vx("EFTDEB").exists(),ln.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),ln.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("DSCHPR").exists(),ln.dschpr.isNull() do vreqerr("DSCHPR") quit
		if vx("EFTDD").exists(),ln.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("SMET").exists(),ln.smet.isNull() do vreqerr("SMET") quit
		if vx("ACTIBPAY").exists(),ln.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	}
	if 'vobj(ln,-100,64,"").order().isNull() do {
		if vx("PAF").exists(),ln.paf.isNull() do vreqerr("PAF") quit
		if vx("MDF").exists(),ln.mdf.isNull() do vreqerr("MDF") quit
		if vx("EPA").exists(),ln.epa.isNull() do vreqerr("EPA") quit
		if vx("LCHGNOTO").exists(),ln.lchgnoto.isNull() do vreqerr("LCHGNOTO") quit
	}
	if 'vobj(ln,-100,70,"").order().isNull() do {
		if vx("DIP").exists(),ln.dip.isNull() do vreqerr("DIP") quit
		if vx("LIP").exists(),ln.lip.isNull() do vreqerr("LIP") quit
		if vx("HIP").exists(),ln.hip.isNull() do vreqerr("HIP") quit
		if vx("DLRP").exists(),ln.dlrp.isNull() do vreqerr("DLRP") quit
		if vx("PTSP").exists(),ln.ptsp.isNull() do vreqerr("PTSP") quit
		if vx("MSCP").exists(),ln.mscp.isNull() do vreqerr("MSCP") quit
		if vx("CMSFLG").exists(),ln.cmsflg.isNull() do vreqerr("CMSFLG") quit
	}
	if 'vobj(ln,-100,71,"").order().isNull() do {
		if vx("PLDF").exists(),ln.pldf.isNull() do vreqerr("PLDF") quit
	}
	if 'vobj(ln,-100,80,"").order().isNull() do {
		if vx("ADJCRLMT").exists(),ln.adjcrlmt.isNull() do vreqerr("ADJCRLMT") quit
	}
	if 'vobj(ln,-100,85,"").order().isNull() do {
		if vx("AFLG").exists(),ln.aflg.isNull() do vreqerr("AFLG") quit
		if vx("OCAF").exists(),ln.ocaf.isNull() do vreqerr("OCAF") quit
		if vx("CONCAL").exists(),ln.concal.isNull() do vreqerr("CONCAL") quit
	}
	if 'vobj(ln,-100,99,"").order().isNull() do {
		if vx("ACN").exists(),ln.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),ln.acnrelc.isNull() do vreqerr("ACNRELC") quit
	}
	if 'vobj(ln,-100,101,"").order().isNull() do {
		if vx("DXSI").exists(),ln.dxsi.isNull() do vreqerr("DXSI") quit
		if vx("BMET").exists(),ln.bmet.isNull() do vreqerr("BMET") quit
		if vx("PEBA").exists(),ln.peba.isNull() do vreqerr("PEBA") quit
		if vx("BPOCL").exists(),ln.bpocl.isNull() do vreqerr("BPOCL") quit
		if vx("PTF").exists(),ln.ptf.isNull() do vreqerr("PTF") quit
	}
	if 'vobj(ln,-100,102,"").order().isNull() do {
		if vx("DIRDEF").exists(),ln.dirdef.isNull() do vreqerr("DIRDEF") quit
	}
	if 'vobj(ln,-100,111,"").order().isNull() do {
		if vx("RECCD").exists(),ln.reccd.isNull() do vreqerr("RECCD") quit
		if vx("ASSUMF").exists(),ln.assumf.isNull() do vreqerr("ASSUMF") quit
	}
	if 'vobj(ln,-100,431,"").order().isNull() do {
		if vx("PAYEFT").exists(),ln.payeft.isNull() do vreqerr("PAYEFT") quit
	}
	if 'vobj(ln,-100,432,"").order().isNull() do {
		if vx("COLLQUE").exists(),ln.collque.isNull() do vreqerr("COLLQUE") quit
	}
	if 'vobj(ln,-100,433,"").order().isNull() do {
		if vx("WDLMTP").exists(),ln.wdlmtp.isNull() do vreqerr("WDLMTP") quit
		if vx("CINTBNP").exists(),ln.cintbnp.isNull() do vreqerr("CINTBNP") quit
		if vx("AVCRLMT").exists(),ln.avcrlmt.isNull() do vreqerr("AVCRLMT") quit
		if vx("ICAP").exists(),ln.icap.isNull() do vreqerr("ICAP") quit
	}
	if 'vobj(ln,-100,435,"").order().isNull() do {
		if vx("ADDLCHG").exists(),ln.addlchg.isNull() do vreqerr("ADDLCHG") quit
		if vx("GENPRN").exists(),ln.genprn.isNull() do vreqerr("GENPRN") quit
		if vx("ELLPLS").exists(),ln.ellpls.isNull() do vreqerr("ELLPLS") quit
	}
	if 'vobj(ln,-100,438,"").order().isNull() do {
		if vx("MT900").exists(),ln.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),ln.mt910.isNull() do vreqerr("MT910") quit
	}
	if 'vobj(ln,-100,440,"").order().isNull() do {
		if vx("COF").exists(),ln.cof.isNull() do vreqerr("COF") quit
	}
	if 'vobj(ln,-100,445,"").order().isNull() do {
		if vx("WSPOUSFL").exists(),ln.wspousfl.isNull() do vreqerr("WSPOUSFL") quit
		if vx("REFFLG").exists(),ln.refflg.isNull() do vreqerr("REFFLG") quit
	}
	if 'vobj(ln,-100,447,"").order().isNull() do {
		if vx("PAOI").exists(),ln.paoi.isNull() do vreqerr("PAOI") quit
	}
	if 'vobj(ln,-100,448,"").order().isNull() do {
		if vx("SGNCRD").exists(),ln.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("PSGNCRDR").exists(),ln.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("OSGNCRDC").exists(),ln.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("SGNCRDCHGDT").exists(),ln.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	}
	if 'vobj(ln,-100,449,"").order().isNull() do {
		if vx("CBF").exists(),ln.cbf.isNull() do vreqerr("CBF") quit
		if vx("CDF").exists(),ln.cdf.isNull() do vreqerr("CDF") quit
		if vx("IRP").exists(),ln.irp.isNull() do vreqerr("IRP") quit
	}
	if 'vobj(ln,-100,453,"").order().isNull() do {
		if vx("BCAPINT").exists(),ln.bcapint.isNull() do vreqerr("BCAPINT") quit
		if vx("AFFLN").exists(),ln.affln.isNull() do vreqerr("AFFLN") quit
	}
	if 'vobj(ln,-100,461,"").order().isNull() do {
		if vx("GENPRJREP").exists(),ln.genprjrep.isNull() do vreqerr("GENPRJREP") quit
	}
	if 'vobj(ln,-100,465,"").order().isNull() do {
		if vx("ADJCOL").exists(),ln.adjcol.isNull() do vreqerr("ADJCOL") quit
		if vx("COLLIMPR").exists(),ln.collimpr.isNull() do vreqerr("COLLIMPR") quit
		if vx("RACLF").exists(),ln.raclf.isNull() do vreqerr("RACLF") quit
		if vx("RACLC").exists(),ln.raclc.isNull() do vreqerr("RACLC") quit
		if vx("FSOVRDUE").exists(),ln.fsovrdue.isNull() do vreqerr("FSOVRDUE") quit
		if vx("OOC").exists(),ln.ooc.isNull() do vreqerr("OOC") quit
		if vx("SECMTG").exists(),ln.secmtg.isNull() do vreqerr("SECMTG") quit
	}
	if 'vobj(ln,-100,469,"").order().isNull() do {
		if vx("DMNDLN").exists(),ln.dmndln.isNull() do vreqerr("DMNDLN") quit
	}
		if vx("ACN").exists(),ln.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),ln.acnrelc.isNull() do vreqerr("ACNRELC") quit
		if vx("ACTIBPAY").exists(),ln.actibpay.isNull() do vreqerr("ACTIBPAY") quit
		if vx("ADDLCHG").exists(),ln.addlchg.isNull() do vreqerr("ADDLCHG") quit
		if vx("ADF").exists(),ln.adf.isNull() do vreqerr("ADF") quit
		if vx("ADJCOL").exists(),ln.adjcol.isNull() do vreqerr("ADJCOL") quit
		if vx("ADJCRLMT").exists(),ln.adjcrlmt.isNull() do vreqerr("ADJCRLMT") quit
		if vx("AFFLN").exists(),ln.affln.isNull() do vreqerr("AFFLN") quit
		if vx("AFLG").exists(),ln.aflg.isNull() do vreqerr("AFLG") quit
		if vx("AIPR").exists(),ln.aipr.isNull() do vreqerr("AIPR") quit
		if vx("AIR").exists(),ln.air.isNull() do vreqerr("AIR") quit
		if vx("ALPRTY").exists(),ln.alprty.isNull() do vreqerr("ALPRTY") quit
		if vx("AMTREQ").exists(),ln.amtreq.isNull() do vreqerr("AMTREQ") quit
		if vx("ANLSYS").exists(),ln.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("ARUF").exists(),ln.aruf.isNull() do vreqerr("ARUF") quit
		if vx("ASSUMF").exists(),ln.assumf.isNull() do vreqerr("ASSUMF") quit
		if vx("AUO").exists(),ln.auo.isNull() do vreqerr("AUO") quit
		if vx("AVCRLMT").exists(),ln.avcrlmt.isNull() do vreqerr("AVCRLMT") quit
		if vx("BCAPINT").exists(),ln.bcapint.isNull() do vreqerr("BCAPINT") quit
		if vx("BMET").exists(),ln.bmet.isNull() do vreqerr("BMET") quit
		if vx("BOO").exists(),ln.boo.isNull() do vreqerr("BOO") quit
		if vx("BPOCL").exists(),ln.bpocl.isNull() do vreqerr("BPOCL") quit
		if vx("CBF").exists(),ln.cbf.isNull() do vreqerr("CBF") quit
		if vx("CC").exists(),ln.cc.isNull() do vreqerr("CC") quit
		if vx("CCBIND").exists(),ln.ccbind.isNull() do vreqerr("CCBIND") quit
		if vx("CDF").exists(),ln.cdf.isNull() do vreqerr("CDF") quit
		if vx("CHKEURO").exists(),ln.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKISS").exists(),ln.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CINTBNP").exists(),ln.cintbnp.isNull() do vreqerr("CINTBNP") quit
		if vx("CLS").exists(),ln.cls.isNull() do vreqerr("CLS") quit
		if vx("CMSFLG").exists(),ln.cmsflg.isNull() do vreqerr("CMSFLG") quit
		if vx("COF").exists(),ln.cof.isNull() do vreqerr("COF") quit
		if vx("COLLIMPR").exists(),ln.collimpr.isNull() do vreqerr("COLLIMPR") quit
		if vx("COLLQUE").exists(),ln.collque.isNull() do vreqerr("COLLQUE") quit
		if vx("COMM").exists(),ln.comm.isNull() do vreqerr("COMM") quit
		if vx("CONCAL").exists(),ln.concal.isNull() do vreqerr("CONCAL") quit
		if vx("CPF").exists(),ln.cpf.isNull() do vreqerr("CPF") quit
		if vx("CRCD").exists(),ln.crcd.isNull() do vreqerr("CRCD") quit
		if vx("CUSTOM1").exists(),ln.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),ln.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),ln.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("DIP").exists(),ln.dip.isNull() do vreqerr("DIP") quit
		if vx("DIRDEF").exists(),ln.dirdef.isNull() do vreqerr("DIRDEF") quit
		if vx("DLCAF").exists(),ln.dlcaf.isNull() do vreqerr("DLCAF") quit
		if vx("DLRP").exists(),ln.dlrp.isNull() do vreqerr("DLRP") quit
		if vx("DMNDLN").exists(),ln.dmndln.isNull() do vreqerr("DMNDLN") quit
		if vx("DRF").exists(),ln.drf.isNull() do vreqerr("DRF") quit
		if vx("DSCHPR").exists(),ln.dschpr.isNull() do vreqerr("DSCHPR") quit
		if vx("DXSI").exists(),ln.dxsi.isNull() do vreqerr("DXSI") quit
		if vx("EACIP").exists(),ln.eacip.isNull() do vreqerr("EACIP") quit
		if vx("EFTDD").exists(),ln.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("EFTDEB").exists(),ln.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),ln.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("ELLPLS").exists(),ln.ellpls.isNull() do vreqerr("ELLPLS") quit
		if vx("EMPLBEN").exists(),ln.emplben.isNull() do vreqerr("EMPLBEN") quit
		if vx("ENTF").exists(),ln.entf.isNull() do vreqerr("ENTF") quit
		if vx("EPA").exists(),ln.epa.isNull() do vreqerr("EPA") quit
		if vx("FLAT").exists(),ln.flat.isNull() do vreqerr("FLAT") quit
		if vx("FPAF").exists(),ln.fpaf.isNull() do vreqerr("FPAF") quit
		if vx("FPIND").exists(),ln.fpind.isNull() do vreqerr("FPIND") quit
		if vx("FSOVRDUE").exists(),ln.fsovrdue.isNull() do vreqerr("FSOVRDUE") quit
		if vx("GENPRJREP").exists(),ln.genprjrep.isNull() do vreqerr("GENPRJREP") quit
		if vx("GENPRN").exists(),ln.genprn.isNull() do vreqerr("GENPRN") quit
		if vx("GLSC").exists(),ln.glsc.isNull() do vreqerr("GLSC") quit
		if vx("GRP").exists(),ln.grp.isNull() do vreqerr("GRP") quit
		if vx("HIGHVOL").exists(),ln.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("HIP").exists(),ln.hip.isNull() do vreqerr("HIP") quit
		if vx("ICAP").exists(),ln.icap.isNull() do vreqerr("ICAP") quit
		if vx("ICPA").exists(),ln.icpa.isNull() do vreqerr("ICPA") quit
		if vx("INTCAP").exists(),ln.intcap.isNull() do vreqerr("INTCAP") quit
		if vx("IPD").exists(),ln.ipd.isNull() do vreqerr("IPD") quit
		if vx("IPLCF").exists(),ln.iplcf.isNull() do vreqerr("IPLCF") quit
		if vx("IRCB").exists(),ln.ircb.isNull() do vreqerr("IRCB") quit
		if vx("IRP").exists(),ln.irp.isNull() do vreqerr("IRP") quit
		if vx("LCHGNOTO").exists(),ln.lchgnoto.isNull() do vreqerr("LCHGNOTO") quit
		if vx("LIP").exists(),ln.lip.isNull() do vreqerr("LIP") quit
		if vx("MDF").exists(),ln.mdf.isNull() do vreqerr("MDF") quit
		if vx("MINOPT").exists(),ln.minopt.isNull() do vreqerr("MINOPT") quit
		if vx("MSCP").exists(),ln.mscp.isNull() do vreqerr("MSCP") quit
		if vx("MT900").exists(),ln.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),ln.mt910.isNull() do vreqerr("MT910") quit
		if vx("NAI").exists(),ln.nai.isNull() do vreqerr("NAI") quit
		if vx("NEGACRPO").exists(),ln.negacrpo.isNull() do vreqerr("NEGACRPO") quit
		if vx("OCAF").exists(),ln.ocaf.isNull() do vreqerr("OCAF") quit
		if vx("ODT").exists(),ln.odt.isNull() do vreqerr("ODT") quit
		if vx("OOC").exists(),ln.ooc.isNull() do vreqerr("OOC") quit
		if vx("OSGNCRDC").exists(),ln.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("PAF").exists(),ln.paf.isNull() do vreqerr("PAF") quit
		if vx("PAOI").exists(),ln.paoi.isNull() do vreqerr("PAOI") quit
		if vx("PAP").exists(),ln.pap.isNull() do vreqerr("PAP") quit
		if vx("PAS").exists(),ln.pas.isNull() do vreqerr("PAS") quit
		if vx("PAYEFT").exists(),ln.payeft.isNull() do vreqerr("PAYEFT") quit
		if vx("PBI").exists(),ln.pbi.isNull() do vreqerr("PBI") quit
		if vx("PEBA").exists(),ln.peba.isNull() do vreqerr("PEBA") quit
		if vx("PFLG").exists(),ln.pflg.isNull() do vreqerr("PFLG") quit
		if vx("PHLD").exists(),ln.phld.isNull() do vreqerr("PHLD") quit
		if vx("PIACM").exists(),ln.piacm.isNull() do vreqerr("PIACM") quit
		if vx("PLDF").exists(),ln.pldf.isNull() do vreqerr("PLDF") quit
		if vx("PPFLG").exists(),ln.ppflg.isNull() do vreqerr("PPFLG") quit
		if vx("PSGNCRDR").exists(),ln.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("PTF").exists(),ln.ptf.isNull() do vreqerr("PTF") quit
		if vx("PTSP").exists(),ln.ptsp.isNull() do vreqerr("PTSP") quit
		if vx("RACLC").exists(),ln.raclc.isNull() do vreqerr("RACLC") quit
		if vx("RACLF").exists(),ln.raclf.isNull() do vreqerr("RACLF") quit
		if vx("RCBIND").exists(),ln.rcbind.isNull() do vreqerr("RCBIND") quit
		if vx("RECCD").exists(),ln.reccd.isNull() do vreqerr("RECCD") quit
		if vx("REFFLG").exists(),ln.refflg.isNull() do vreqerr("REFFLG") quit
		if vx("REGCC").exists(),ln.regcc.isNull() do vreqerr("REGCC") quit
		if vx("REVF").exists(),ln.revf.isNull() do vreqerr("REVF") quit
		if vx("RFLG").exists(),ln.rflg.isNull() do vreqerr("RFLG") quit
		if vx("RFMO").exists(),ln.rfmo.isNull() do vreqerr("RFMO") quit
		if vx("RNFLG").exists(),ln.rnflg.isNull() do vreqerr("RNFLG") quit
		if vx("RPIDC").exists(),ln.rpidc.isNull() do vreqerr("RPIDC") quit
		if vx("RPMO").exists(),ln.rpmo.isNull() do vreqerr("RPMO") quit
		if vx("SECMTG").exists(),ln.secmtg.isNull() do vreqerr("SECMTG") quit
		if vx("SGNCRD").exists(),ln.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("SGNCRDCHGDT").exists(),ln.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
		if vx("SIBF").exists(),ln.sibf.isNull() do vreqerr("SIBF") quit
		if vx("SMET").exists(),ln.smet.isNull() do vreqerr("SMET") quit
		if vx("SRCBIND").exists(),ln.srcbind.isNull() do vreqerr("SRCBIND") quit
		if vx("STAT").exists(),ln.stat.isNull() do vreqerr("STAT") quit
		if vx("SWPEL").exists(),ln.swpel.isNull() do vreqerr("SWPEL") quit
		if vx("TRB").exists(),ln.trb.isNull() do vreqerr("TRB") quit
		if vx("TRUNC").exists(),ln.trunc.isNull() do vreqerr("TRUNC") quit
		if vx("TYPE").exists(),ln.type.isNull() do vreqerr("TYPE") quit
		if vx("WDLMTP").exists(),ln.wdlmtp.isNull() do vreqerr("WDLMTP") quit
		if vx("WOFF").exists(),ln.woff.isNull() do vreqerr("WOFF") quit
		if vx("WSPOUSFL").exists(),ln.wspousfl.isNull() do vreqerr("WSPOUSFL") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LN","MSG",1767,"LN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLN ln
	if 'ln.acn.isNull() set vfkey("^CIF("_""""_ln.acn_""""_","_1_")")="LN(ACN) -> CIF"
	if 'ln.type.isNull() set vfkey("^UTBLDFTL("_""""_ln.type_""""_","_50_")")="LN(TYPE) -> PRODDFTL"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLN ln
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":ln.acn") set vERRMSG = $$^MSG(8563,"LN(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("PRODDFTL",":ln.type") set vERRMSG = $$^MSG(8563,"LN(TYPE) -> PRODDFTL") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit






vkchged // Access key changed

	type public RecordLN ln

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(ln,-3) = voldkey   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do { quit:ER
		do VBU^LNFIL0
		if vx("CID").exists() do vbu11^LNFIL0 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}
	if vpar["/VALDD/" do vddver^LNFIL1
	do vexec

	set vnewkey = vux.piece("|",2),vobj(ln,-3) = vnewkey   // Copy new keys into object
	type RecordLN vnewrec = ln.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do {
		do VAU^LNFIL0
		if vx("CID").exists() do vau17^LNFIL0 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}

	set vobj(ln,-3) = vux.piece("|",1)                     // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordLN ln
	type public String vpar

	type String vERRMSG

	type ResultSet rs1=Db.select("CID","DAYENDLNNOT","CID=:ln.cid") // Restriction on delete
	if 'rs1.isEmpty() set vERRMSG = $$^MSG(8563,"DAYENDLNNOT(CID) -> LN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("LNAMOAO","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNAPCHG","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNBIL0","CID=:ln.cid",vpar)              // Cascade delete

	do Db.delete("LNBIL1","CID=:ln.cid",vpar)              // Cascade delete

	do Db.delete("LNCOL","CID=:ln.cid",vpar)               // Cascade delete

	type ResultSet rs7=Db.select("CID","LNCONVEST","CID=:ln.cid") // Restriction on delete
	if 'rs7.isEmpty() set vERRMSG = $$^MSG(8563,"LNCONVEST(CID) -> LN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("LNCPN","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNCYCDLD","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNCYCINS","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNCYCMSC","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNCYCPTS","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNDS1","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNFEE","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNFEED","CID=:ln.cid",vpar)              // Cascade delete

	do Db.delete("LNLCNOT","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNLS4","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNLS4B","CID=:ln.cid",vpar)              // Cascade delete

	type ResultSet rs19=Db.select("CID","LNLS4C","CID=:ln.cid") // Restriction on delete
	if 'rs19.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS4C(CID) -> LN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("LNLS6","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNPL3","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNPP6","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNPTCHG","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNRACHG","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNVRCHG","CID=:ln.cid",vpar)             // Cascade delete

	type ResultSet rs26=Db.select("CID","DAYENDLNNOT","CID=:ln.cid") // Restriction on delete
	if 'rs26.isEmpty() set vERRMSG = $$^MSG(8563,"DAYENDLNNOT(CID) -> LN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("LNAMOAO","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNAPCHG","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNBIL0","CID=:ln.cid",vpar)              // Cascade delete

	do Db.delete("LNBIL1","CID=:ln.cid",vpar)              // Cascade delete

	do Db.delete("LNCOL","CID=:ln.cid",vpar)               // Cascade delete

	type ResultSet rs32=Db.select("CID","LNCONVEST","CID=:ln.cid") // Restriction on delete
	if 'rs32.isEmpty() set vERRMSG = $$^MSG(8563,"LNCONVEST(CID) -> LN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("LNCPN","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNCYCDLD","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNCYCINS","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNCYCMSC","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNCYCPTS","CID=:ln.cid",vpar)            // Cascade delete

	do Db.delete("LNDS1","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNFEE","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNFEED","CID=:ln.cid",vpar)              // Cascade delete

	do Db.delete("LNLCNOT","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNLS4","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNLS4B","CID=:ln.cid",vpar)              // Cascade delete

	type ResultSet rs44=Db.select("CID","LNLS4C","CID=:ln.cid") // Restriction on delete
	if 'rs44.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS4C(CID) -> LN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("LNLS6","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNPL3","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNPP6","CID=:ln.cid",vpar)               // Cascade delete

	do Db.delete("LNPTCHG","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNRACHG","CID=:ln.cid",vpar)             // Cascade delete

	do Db.delete("LNVRCHG","CID=:ln.cid",vpar)             // Cascade delete

	quit

VIDXBLD(vlist)	do VIDXBLD^LNFIL3(vlist.get())	// Remapped

	quit


VIDXPGM()	quit "LNFIL3"	// Location of index program

