CRTQRY( String QRYNAM, Number SUB)	//;IBS - CRT - V4.1 - CRT Misc Field Query Routine
	/*

	       ORIG:  MATTSON - 13 DEC 1989
	
	       DESC:  ^CRTQRY is an extrinsic function designed to return the
	              results of a DATA-QWIK query (^DBTBL(%LIBS,4,qrynam)),
	              returning the value of $T (i.e., 0=fail, 1=pass) after
	              the query has been executed.
	
	              If an error is encountered and the results of the query
	              cannot be determined, the function will return a value
	              of 2_"|"_error.  In this case, it is the responsibility
	              of the application to determine the course of action.
	
	              This function requires the DATA-QWIK variable keys to
	              be resolved (i.e., CID should be defined if the primary
	              file associated with the query is DEP or LN).
	
	              Sample call S X=$$^CRTQRY(query_name,sub)
	
	              ** The routine also contains various entry points for
	              direct misc. field queries without dependence upon DQ
	
	      INPUT:
	       . %LIBS Library name (req'd)
	
	   ARGUMENTS:
	       . QRYNAM DATA-QWIK Query name (req'd)
	
	       . SUB Substitute data flag (optional)
	
	    0 = Do not substitute (default)
	
	    1 = Substitute the data contained in the DEP
	        or LN array for the data contained in
	        %A(CID,node).  This is required in the
	        event the data has been updated locally
	        (via transaction processing, for example).


	
	  ------ Revision History -----------------------------------------------

	   10/18/06 - PUTTASWH - CR 23606
	   	      Modified DEFFEE section to piece the data enclosed in 
	   	      parantheses in the posting action control field to set
	   	      for CTL variable.  Also modified LNFEE section to declare
	   	      LN record to fix the compilation errors.
	   
	   05/04/06 - DHANALAKSHMI R - 21006
	   	      Modified the section AOI by replacing "]" with "[" in the 
	   	      "Posting Action Control" check to correct the error while
	   	      creating PAT.

	   03/31/06 - KELLYP - CR 20527
	   	      Modified PE section to reference PCFL's instead of PCFD's.
	   	      This function is used to determine when Teller should 
	   	      prompt for the loan payment element that the loan payment
	   	      funds should be applied towards.

	   12/01/05 - RussellDS - CR18400
		      Eliminate top section.  No longer supported, and all calls
		      to it have been eliminated.
		      
		      Replace .data() with .exists() to fix deprecated feature
		      warnings 
	  
	   08/04/05 - SatyanaS - CR#16676
	   	      Modified PRATE section to solve undefined error due to 
	   	      type casting inline.
	   	      
	   06/28/05 - Carol Scott - 16462
	  	      Added .get() to if 'LNFEETBL(FEETYP).get() in LNFEE section 
	  	      to get rid of undefined.

	   07/28/04 - Clayton Schwartz - 11373
	   	      Modified the IRAINFO tag to retrieve variable IRA from
	   	      dep and not cif.  This was causing transactions on any account
	   	      from a customer with an IRA to generate the IRAC transaction
	   	      support data field.  Only retirement accounts should generate
	   	      the TSD.
	   	      
	   	      Cleaned up compiler warnings.
	   	      
	   	      Removed references to IRASUP.  This variable was set in dead
	   	      code in PREIW^DEPBW that was removed as part of the PSL 
	   	      conversion.

	   12/04/03 - CARROLLJ - CR7239
		      Added #ACCEPT prior to xecute commands to correct compile
		      errors.

	   06/04/03 - ZWITKOWITSM - 51349
	   	      Change most public line tags to not take parameters.  Many
	   	      were called using indirection and it was not certain if all
	   	      instances would have the objects defined to pass. 
		      Removed isDefined method.

	   09/22/01 - SCOTTC - 43583
		      Convert to PSL.  
	
	   01/08/01 - HALPINJ - 43312
	              In section IRAD and IRAC, removed the check for IRA.  %NET
	        was previously removed but the whole line should have been
	        removed. IRA is not defined when using PFW.

	  -----------------------------------------------------------------------
	
	*/


	quit			// No calls to top
	

public AOI()

	/* Add on item

	RETURNS:
 
	. Add on item boolean				/TYP=L
 
	*/
	
	Type Public String ETC

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")
	
	// Posting Action Control
	if trn.pac["RB^LNPTS4" quit 1

	quit 0

	
public	CK()

	/*
	   Returns 1 if transaction code (deposit only) indicates check number
	   should be prompted for

	RETURNS:
 
	. check number check				/TYP=L
	
	*/
	
	Type Public String ETC
	Type Public Number req

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	if trn.pcfd7,'trn.itc.curVal.extract(1) set req=(trn.pcfd7)#2 quit 1

	quit 0

	
public	CKL()
	/*
	   Returns 1 if transaction code (loan only) indicates check number
	   should be prompted for

	RETURNS:
 
	. Check number prompt				/TYP=L

	*/

	Type Public String ETC
	Type Public Number req

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	if trn.pcfd8,'trn.itc.curVal.extract(1) set req=(trn.pcfd8)#2 quit 1

	quit 0

	
public	DTYP1()
	/*
	document types - don't prompt on credit

	RETURNS:
 
	. Eurocheck					/TYP=L

	*/

	Type Public Number CID
	Type Public String ETC

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	if trn.itc.curVal.extract(1)=1 quit 0

	type ResultSet rs=Db.select("CHKEURO","DEP","CID=:CID")

	if rs.isEmpty() quit 0

	if rs.next()
	if rs.getCol(1) quit 1

	quit 0

	
public	DID1()
	/*
	document types - don't prompt on credit

	ARGUMENTS:

	RETURNS:
 
	. Eurocheck					/TYP=L

	*/
	
	quit $$DTYP1()


public	ESC()
	/*
	RETURN:

	. Escrow Account Boolean			/TYP=L
	
	*/
	
	Type Public String ETC

	Type String ESCT(), ESCTBL()
	Type Number TSOESC

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	do ESCA^LNES2(.ESCTBL,.ESCT) 
	do TSOESC^LNCO(trn.etc)

	if TSOESC.get()>1 quit 1
	quit 0
	

public	ESCT()
	/*
	RETURN:

	. Escrow Account				/TYP=L
	
	*/

	Type Public String ETC
	Type Number TSOESCT
		
	do TSOESCT^LNCO(ETC)
	quit TSOESCT.get()

	
public	IRABEN()
	/* 
	RETURNS:
 
	. IRAcheck					/TYP=L

	*/
	
	Type Public String ETC
	Type Public Number CID, IRA

	Type Number RPASEQ
	Type Date DOD

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	if IRA.exists(),'IRA quit 0

	do IRAINFO(CID,.IRA,.DOD,.RPASEQ)

	if IRA,trn.pcf.curVal.extract(4),DOD quit 1
	if IRA,'trn.itc.curVal.extract(1),DOD quit 1

	quit 0

	
public	IRAC()
	/* 
	RETURNS:
 
	. IRAcheck					/TYP=L

	*/	

	Type Public String ETC, IRA
	Type Public Number CID

	Type Number RPASEQ
	Type Date DOD

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	if IRA.exists(),'IRA quit 0
	if trn.pgm["^DEPACR1" quit 0

	if 'IRA.exists() do IRAINFO(CID,.IRA,.DOD,.RPASEQ)

	// W/H Adj (Interest and Distributions)
	if IRA,trn.itc.curVal.extract(1),'trn.pcf.curVal.extract(4) quit 1

	quit 0

	
public	IRAD()
	/* 
	RETURNS:
 
	. IRAcheck					/TYP=L

	*/	

	Type Public String ETC, TSO
	Type Public Number CID, IRA

	Type Number RPASEQ
	Type Date DOD

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	if IRA.exists(),'IRA quit 0
	if trn.pgm["^DEPACR1" quit 0

	do IRAINFO(CID,.IRA,.DOD,.RPASEQ)

	if 'IRA quit 0
	if TSO("IRAD").get()'="" quit 0

	// IRA Withholding Adjustments (Interest and Distributions)
	if trn.pcf.curVal.extract(4) quit 1
	if 'trn.itc.curVal.extract(1) quit 1

	quit 0


IRAINFO( Number CID,     // Private - get info for all of the IRA sections
	 Number IRA,
	 Date DOD,
	 Number RPASEQ)	

	type RecordDEP dep=Db.getRecord("DEP","CID",1)

	if dep.getMode()=0 do { quit
		set IRA=""
		set DOD=""
		set RPASEQ=""
		}

	type RecordCIF cif=Db.getRecord("CIF","dep.acn")

	set IRA=dep.ira
	set DOD=cif.dod
	set RPASEQ=dep.rpaseq
	
	quit

	
public	IRCID()
	/* 
	Interest Reserve Account Number

	RETURNS:
 
	. Interest Reserve check			/TYP=L

	*/

	Type Public Number CID
	Type Number CNTR = 0
	
	type ResultSet rs=Db.select("LNCID","RELIR","IRCID=:CID")

	if rs.isEmpty() quit 0
	while rs.next() set CNTR=CNTR+1
	
	if CNTR>1 quit 1

	quit 0

	
public LBUD0()	// Loan Budgeting (Debit Transactions)

	Type Public String ETC

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	// Can not be a credit transaction
	if trn.itc.curVal.extract(1) quit 0
	// Shared loan budgeting code
	if '$$LBUD(.trn) quit 0

	quit 1

	
public LBUD1()	// Loan Budgeting (Credit Transactions)

	Type Public String ETC

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	// Can not be a debit transaction
	if 'trn.itc.curVal.extract(1) quit 0
	// Shared loan budgeting code
	if '$$LBUD(.trn) quit 0

	quit 1


LBUD(RecordTRN trn)
	
	/* 
	ARGUMENTS:

	. Tran code object				/TYP=RecordTRN/REQ

	RETURNS:
 
	. loan budget processing flag			/TYP=L

	*/ 
		
	// Value Date to Next Accrual Calc Date
	if 'trn.pcfd21 quit 0

	Type Public String CID, ENTF

	if ENTF.exists(),'ENTF quit 0

	type RecordLN ln=Db.getRecord("LN","CID",1)
	if ln.getMode()=0 quit 0

	set ENTF=ln.entf

	quit ENTF

	
public	LNFEE()
	/* 
	RETURNS:
 
	. loan fee flag					/TYP=L

	*/ 

	Type Public String ETC, LNFEETBL()
	Type Public Number AMT, CID, req, REQ
	
	Type String FEEREM,FEETYP
	Type Number TF = 0
	
	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	kill LNFEETBL

	// Posting Action Control
	if trn.pac["LNPTS8" do { quit 1

		set req = 1

		type ResultSet rs=Db.select("FEETYP,DESC","LNFEEP")

		if rs.isEmpty() quit 0

		while rs.next() set LNFEETBL(rs.getCol(1))=rs.getCol(2)

		if LNFEETBL("*").data() quit

		set LNFEETBL("*")=""
		}

	// Posting Action Control
	if trn.pac'["LNPTS13" quit 0

	// unapplied funds
	if trn.pcfd18 quit 0

	set REQ=0

	type ResultSet rs=Db.select("FEETYP,FEEREM","LNFEE","CID=:CID")

	if rs.isEmpty() quit 0

	while rs.next() do {

		set FEETYP=rs.getCol(1)
		set FEEREM=rs.getCol(2)

		if 'FEEREM quit

		set TF=TF+1

		if 'LNFEETBL(FEETYP).get() do {

			type ResultSet rs1=Db.select("DESC","LNFEEP","FEETYP=:FEETYP")

			if rs1.isEmpty() quit

			if rs1.next() set LNFEETBL(FEETYP)=rs1.getCol(1)
			}
		}	

	/* 
	If transaction amount equals total outstanding fee amount,
	don't prompt for fee type.
	*/
	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	
	if AMT.get(),AMT-$$MCNB^LNCO3(.ln,CID)=0 quit 0
	if TF>1 quit 1

	quit 0

	
public	DEFFEE()
	/* 
	RETURNS:
 
	. loan deferred fee				/TYP=L

	*/ 
	
	Type Public String ETC, LNDEFFEE()
	Type Public Number CID
	
	Type Number CTL
	
	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	kill LNDEFFEE
	
	if trn.pac'["LNPTS41" quit 0  

	// Posting Action Control	
	set CTL=trn.pac.curVal.piece("""",2)

	if CTL.extract(1)=0 do {

		Type String FEETYP

		type ResultSet rs=Db.select("FEETYP","LNFEED","CID=:CID") 
		if rs.isEmpty() quit

		while rs.next() do {

			set FEETYP=rs.getCol(1)

			type ResultSet rs1=Db.select("DESC","LNFEEP","FEETYP=:FEETYP")
			if rs1.isEmpty() quit

			if rs1.next() set LNDEFFEE(FEETYP)=rs1.getCol(1)
			}
		}
	
	else  if CTL.extract(1)=1 do {

		Type String FEETYP

		type ResultSet rs=Db.select("FEETYP","LNFEE","CID=:CID") 
		if rs.isEmpty() quit

		while rs.next() do {

			set FEETYP=rs.getCol(1)

			type ResultSet rs1=Db.select("DESC","LNFEEP","FEETYP=:FEETYP")
			if rs1.isEmpty() set LNDEFFEE(FEETYP)="" quit

			if rs1.next() set LNDEFFEE(FEETYP)=rs1.getCol(1)
			}
		}

	quit 1	


public	LNFEESEQ()
		/* 
	RETURNS:
 
	. posting Action Control flag			/TYP=L

	*/ 

	Type Public String ETC

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	// Posting Action Control
	if trn.pac["LNPTS41",'trn.pac.curVal.piece("(""",2).extract(1) quit 1

	quit 0


public	PBK()	// Passbook Balance
	
	Type Public String NBK(), PBI, PBKBAL
	Type Public Number CID, SEQ

	kill PBKBAL

	if PBI.exists(),'PBI quit 0
	if 'PBI.exists() do {
		type RecordDEP dep=Db.getRecord("DEP","CID")
		set PBI=dep.pbi
		}
	if PBI,'NBK(SEQ).exists() quit 1

	quit 0

	
public	PE()
	
	/*
	RETURNS:
 
	1 if TRN.PCFL14 = 1 ("Apply to Single Payment Element")
	0 otherwise

	*/
	
	type public Cache %CACHE()
	type public String ETC
	
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:ETC")

	// Commercial Participation Processing
	if trn.pcfl30>0 quit 0

	// Apply to Single Payment Element
	if trn.pcfl14 quit 1

	quit 0

	
public REC()	// Recovery Amount/Source
	/* 
	RETURNS:
 
	. /TYP=L

	*/	

	Type Public String ETC
	Type Public Number CID
	
	Type Number TSOREC

	do TSOREC^LNCO(ETC,CID)

	if TSOREC.get() quit 1

	quit 0


public	CKREG()	// Collect information for the check register

	quit 0


public	EXTFEE( Number CID,
	        String ETC,
	        Number AMT)	// External entry point for loan fee transactions

	/*
	Loan fee transaction

	RETURNS:
 
	. Add on item boolean				/TYP=L
 
	*/	

	quit $$LNFEE()


public	EXTDFFEE( Number CID, String ETC)	// External entry for loan deferred fee transactions
	/* 
	RETURNS:
 
	. deferred fee flag				/TYP=L

	*/	

	quit $$DEFFEE()


public	AEUO()
	/* 
	RETURNS:
 
	.  Auto Escrow Update - Processing Option	/TYP=L

	*/	
	
	Type Public String AUO, ETC
	Type Public Number CID
	
	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	// If flag is 2, prompt!
	if trn.pcfd22<2 quit 0
	
	if AUO.exists(),'AUO quit 0

	type RecordLN ln=Db.getRecord("LN","CID",1)
	if ln.getMode()=0 quit 0

	set AUO=ln.auo

	if AUO quit 1

	quit 0


public	PRATE()
	/*
	RETURNS:
 
	. Penalty Rate					/TYP=L

	*/	

	Type Public String ETC, POPT
	Type Public Number CID

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	// Debit transactions only
	if trn.itc.curVal.extract(1) quit 0

	if 'CID.exists() quit 0

	type RecordACN acn=Db.getRecord("ACN","CID",1)

	if trn.cls="D" do { 
                type RecordDEP dep={RecordDEP}acn 
                set POPT=dep.popt 
                } 
        else  do { 
                type RecordLN ln={RecordLN}acn 
                set POPT=ln.popt 
                } 

	if (POPT=12)!(POPT=11) quit 1

	quit 0


public	MXLIF()

	/*
	   Life Income Funds maintain a maximum annual distribution amount to
	   indicate the maximum amount of funds that can be withdrawn and still
	   assure that there will be enough funds at age 80 to purchase a life
	   annuity.  This MAXLIF amount can be updated when certain credit
	   transactions are posted to the accounts tied to a LIF plan.  If this
	   transaction will update the MAXLIF, then the user will enter a 1 (yes)
	   for this field on the teller screen.

	RETURNS:
 
	. Update Maxlife amount				/TYP=L
	
	*/

	Type Public String ETC
	Type Public Number CID

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	type RecordDEP dep=Db.getRecord("DEP","CID",1)
	if dep.getMode()=0 quit 0

	if dep.ira'=7 quit 0

	// W/H Adj (Interest and Distributions)
	if trn.itc.curVal.extract(1),'trn.pcfd4 quit 1

	quit 0


public	SEGMENT()
	/*
	   Returns 1 if transaction code indicates Segment number should be
	   prompted for

	RETURNS:
 
	. Segment number Prompt				/TYP=L
	
	*/

	Type Public String ETC
	Type Public Number CID

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")
	
	// Segment Number Prompt
	if 'trn.pcfd16 quit 0  
	
	type RecordDEP dep=Db.getRecord("DEP","CID",1)
	if dep.getMode()=0 quit 0 
	
	if (trn.pcfd16=2),dep.segflg quit 1   // Prompt for Segment Number

	/* 
	If we got this far, and account is segmented, then
	processing control flag must be 1, so check SEGACR.
	*/

	if dep.segflg,'(dep.segacr) quit 1

	quit 0


public	TX1042()

	Type Public String ETC
	Type Public Number CID

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")
	
	// update nonresident fields
	if (trn.pgm["DEPINT"),(trn.pcfd32=2) quit 1

	type RecordDEP dep=Db.getRecord("DEP","CID",1)
	if dep.getMode()=0 quit 0

	if '(trn.pcfd32),(dep.nr) quit 1

	quit 0


public	BGT()
	/*
	   Returns 1 if transaction code indicates budget info.
	   should be prompted for

	RETURNS:
 
	. budget code prompt				/TYP=L
	
	*/

	Type Public String ETC
	Type Public Number CID

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	type RecordDEP dep=Db.getRecord("DEP","CID",1)
	if dep.getMode()=0 quit 0

	// Check to see if there is budget processing on the account
	if '(dep.bgtpro) quit 0

	// Check transaction code flag to see if budget info s.b prompted
	// Budget Payment
	if trn.pcfd33,'trn.itc.curVal.extract(1) quit 1
	// Budget Contributions
	if trn.pcfd34,trn.itc.curVal.extract(1) quit 1

	quit 0


public	BGTBILL()
	/*
	   Returns 1 if transaction code indicates budget info.
	   should be prompted for
	
	RETURNS:
 
	. budget code prompt				/TYP=L
	
	*/

	Type Public String ETC
	TYpe Public Number CID

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")

	type RecordDEP dep=Db.getRecord("DEP","CID",1)	
	if dep.getMode()=0 quit 0

	// Check to see if there is budget processing on the account
	if '(dep.bgtpro) quit 0
	
	// Check transaction code flag to see if budget info s.b prompted
	// Budget Payment
	if trn.pcfd33,'$E(trn.itc) quit 1

	quit 0


public	BL()	//       Problem Loan Bank Level
	/*

	RETURNS:
 
	. Problem Loan flag				/TYP=L
	
	INPUTS:

	. seq						/TYP=N
	*/

	Type Public String ETC, RM
	Type Public Number CID, ER, seq
	
	Type String DATA = ""
	TYpe Number CHGCID, CURRCID, NONCID, NUM = 0

	type Public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC")
	
	if trn.pcfd40'=1 quit 0

	type ResultSet rs=Db.select("CID","LN","CVCID=:CID AND STAT=0")
	if rs.isEmpty() quit 0

	while rs.next() do {
		if 'DATA set DATA=rs.getCol(1)
		else  set DATA=DATA_"|"_rs.getCol(1)
		}

	if 'DATA quit 0

	set CURRCID=DATA.piece("|",1)
	set NONCID=DATA.piece("|",2)
	set CHGCID=DATA.piece("|",3)

	if trn.itc.curVal.extract(1)=0 quit 1

	type RecordLN ln=Db.getRecord("LN","CID",1)
	if ln.getMode()=0 quit 0

	if %SystemDate=%EffectiveDate do { quit NUM
		if seq=64,ln.crntbal set NUM=1 quit
		if seq=65,ln.crntint set NUM=1 quit
		if seq=66,ln.crntfee set NUM=1 quit
		if seq=67,ln.crntlc set NUM=1 quit
		if seq=68,ln.naprbal set NUM=1 quit
		if seq=69,ln.naint set NUM=1 quit
		if seq=70,ln.nafee set NUM=1 quit
		if seq=71,ln.nalc set NUM=1 quit
		if seq=72,ln.cobal set NUM=1 quit
		if seq=73,ln.coint set NUM=1 quit
		if seq=74,ln.colc set NUM=1 quit
		if seq=75,ln.cofee set NUM=1 quit
		}
		
	if %EffectiveDate<%SystemDate do { quit NUM

		Type String FEETYP
		
		type RecordCUVAR cuvar=Db.getRecord("CUVAR")
		if cuvar.plfee="" do Runtime.setErrMSG("LN", 1988) quit
 
		set FEETYP=cuvar.plfee

		type RecordLN ln1=Db.getRecord("LN","CURRCID")

		do EXEC^LNUEFD(.ln1,,,%EffectiveDate) quit:ER

		//principal
		if seq=64,ln1.bal set NUM=1 quit
		if seq=65,ln1.acr set NUM=1 quit
		if seq=67,ln1.lchg set NUM=1 quit

		type RecordLNFEE lnfee=Db.getRecord("LNFEE","CURRCID,FEETYP")

		if seq=66,lnfee.feerem set NUM=1 quit

		type RecordLN ln2=Db.getRecord("LN","NONCID")
		
		do EXEC^LNUEFD(.ln2,,,%EffectiveDate) quit:ER
		
		//principal
		if seq=68,ln2.bal set NUM=1 quit
		if seq=69,ln2.acr set NUM=1 quit
		if seq=71,ln2.lchg set NUM=1 quit

		type RecordLNFEE lnfee2=Db.getRecord("LNFEE","NONCID,FEETYP")

		if seq=70,lnfee.feerem set NUM=1 quit

		// charge-off sub account
		type RecordLN ln3=Db.getRecord("LN","CHGCID")
		
		do EXEC^LNUEFD(.ln3,,,%EffectiveDate) quit:ER
		
		//principal
		if seq=72,ln3.bal set NUM=1 quit
		if seq=73,ln3.acr set NUM=1 quit
		if seq=75,ln3.lchg set NUM=1 quit

		type RecordLNFEE lnfee3=Db.getRecord("LNFEE","CHGCID,FEETYP")

		if seq=74,lnfee.feerem set NUM=1 quit
		}

	quit 0

vSIG()	quit "60556^21708^Hema Puttaswamy^18999"	// Signature - LTD^TIME^USER^SIZE
