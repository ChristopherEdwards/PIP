STOP2AFL(RecordSTOP2A stop2a, String vpar, Boolean vparNorm) // STOP2A - Account Stops - Territory Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop2a.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(stop2a,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop2a,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = stop2a.cid
	type String SEQ = stop2a.seq
	type String TER = stop2a.ter

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists()!vx("TER").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP2A",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP2A","CID = :stop2a.cid and SEQ = :stop2a.seq and TER = :stop2a.ter") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ
	type public String TER

	type RecordSTOP2A stop2a = Db.getRecord("STOP2A","CID=:CID,SEQ=:SEQ,TER=:TER")
	if (%ProcessMode = 2) do {
		do stop2a.setMode(2)

		do STOP2AFL(stop2a,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP2A stop2a

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP2A","CID = :stop2a.cid and SEQ = :stop2a.seq and TER = :stop2a.ter") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop2a))  S ^STOP(2,vobj(stop2a,-3),vobj(stop2a,-4),vobj(stop2a,-5))=vobj(stop2a)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP2A stop2a


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^STOP(2,vobj(stop2a,-3),vobj(stop2a,-4),vobj(stop2a,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordSTOP2A stop2a

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP2A stop2a

	if stop2a.cid.isNull() do vreqerr("CID") quit
	if stop2a.seq.isNull() do vreqerr("SEQ") quit
	if stop2a.ter.isNull() do vreqerr("TER") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP2A","MSG",1767,"STOP2A."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER - After Trigger

	do vad1

	quit

vau1 // Trigger AFTER - After Trigger

	do vad1

	quit

vad1 // Trigger AFTER - After Trigger

	type public RecordSTOP2A stop2a
	/*	
	---- Revision History ------------------------------------------------
	01/13/00 - CHOK - 31126
		   Fix PSL code.

	09/20/99 - CARROLLJ - 31126
		   Convert to PSL

	*/
	
	// Verify mode
	if %ProcessMode=2 quit
	
	new boo,msg,seq,sql,z,STPCID

	// Stop payment - type - seq
	set msg=$S('%ProcessMode:$$^MSG(6701),%ProcessMode=1:$$^MSG(6702),%ProcessMode=3:$$^MSG(6700))

	// seq , territory
	set msg=msg_"2 - "_$$^MSG(6742,stop2a.seq_","_stop2a.ter) 
	set STPCID=stop2a.cid
	set boo=Db.getOneRow("BOO","ACN","STPCID")

	// History
	do HISTBLD^ACNFUNCS(msg,boo)          
	quit 

vbi1 // Trigger BEFORE_ACTION - Before Insert/Delete

	do vbd1

	quit

vbd1 // Trigger BEFORE_ACTION - Before Insert/Delete

	type public RecordSTOP2A stop2a
	/*
	---------- Revision History ------------------------------------------
	01/06/00 - CHOK - 31126
		   Fix PSL code.

	09/20/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/


	// Create STOPLOGT entry
	
	new val,vlist,x,LSEQ,ZKEY1,ZPM,ZSEQ,ZTER,ZTJD
	set ZTJD=%SystemDate 
	set ZKEY1=stop2a.cid 
	set ZPM=%ProcessMode
	set ZSEQ=stop2a.seq
	
	// Get last log sequence number
	
	new rs 
	type ResultSet rs=Db.select("LSEQ","STOPLOGA","TJD=:ZTJD AND STPTYP=2 AND KEY1=:ZKEY1 AND KEY2=' ' AND SEQ=:ZSEQ","LSEQ DESC") 
	if rs.isEmpty() set LSEQ=1
	else  set LSEQ=rs.next(),LSEQ=rs.getCol(1)+1
	
	// Insert new STOPLOGT entry
	
	set ZTER=stop2a.ter
	do Db.insert("STOPLOGT","TJD,STPTYP,KEY1,KEY2,SEQ,LSEQ,ACTFLG,TER",":ZTJD,2,:ZKEY1,' ',:ZSEQ,:LSEQ,:ZPM,:ZTER")
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP2A stop2a

	set X = stop2a.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = stop2a.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop2a.ter if 'X.isNull(),'Db.isDefined("UTBLTER","X") set vRM = $$^MSG(1485,X) do vdderr("TER", vRM) quit
	set X = stop2a.dtsend if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTSEND", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP2A","MSG",979,"STOP2A."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSTOP2A stop2a

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	if vx("TER").exists() set vux("TER") = vx("TER")
	do vkey(1) set voldkey = stop2a.cid_","_stop2a.seq_","_stop2a.ter // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop2a.cid_","_stop2a.seq_","_stop2a.ter // Copy new keys into object
	type RecordSTOP2A vnewrec = stop2a.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP2A",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP2A stop2a

	if vux("CID").exists() set stop2a.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set stop2a.seq = vux("SEQ").piece("|",i)
	if vux("TER").exists() set stop2a.ter = vux("TER").piece("|",i)
	quit
