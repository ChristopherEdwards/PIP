STOP3FL(RecordSTOP3 stop3, String vpar, Boolean vparNorm) // STOP3 - Check Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (17)             03/02/2005
	// Trigger Definition (5)                      03/10/2006
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop3.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stop3,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop3,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = stop3.cid
	type String CHKHI = stop3.chkhi
	type String SEQ = stop3.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("CHKHI").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP3",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP3","CID = :stop3.cid and CHKHI = :stop3.chkhi and SEQ = :stop3.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String CHKHI
	type public String SEQ

	type RecordSTOP3 stop3 = Db.getRecord("STOP3","CID=:CID,CHKHI=:CHKHI,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do stop3.setMode(2)

		do STOP3FL(stop3,vpar)
	}
	else  do VINDEX(stop3)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP3 stop3

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP3","CID = :stop3.cid and CHKHI = :stop3.chkhi and SEQ = :stop3.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop3.DP = %SystemDate
		if %O = 0  set stop3.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop3)) S ^STOP(3,vobj(stop3,-3),vobj(stop3,-4),vobj(stop3,-5))=vobj(stop3)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.stop3)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.stop3) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP3 stop3

	if vpar["/INDEX/" do VINDEX(.stop3)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.stop3)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^STOP(3,vobj(stop3,-3),vobj(stop3,-4),vobj(stop3,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSTOP3 stop3

	// Type local variables for access keys for defaults
	type public String CID
	type public String CHKHI
	type public String SEQ

	type public String TJD
	if stop3.dp.isNull() set stop3.dp = TJD                // dp
	if stop3.stcon.isNull() set stop3.stcon = 0            // stcon
	if stop3.time.isNull() set stop3.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP3 stop3

	if stop3.act.isNull() do vreqerr("ACT") quit
	if stop3.dp.isNull() do vreqerr("DP") quit
	if stop3.stcon.isNull() do vreqerr("STCON") quit
	if stop3.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP3 stop3

	if stop3.cid.isNull() do vreqerr("CID") quit
	if stop3.chkhi.isNull() do vreqerr("CHKHI") quit
	if stop3.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACT").exists(),stop3.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop3.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop3.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop3.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP3","MSG",1767,"STOP3."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSTOP3 stop3
	if 'stop3.cid.isNull() set vfkey("^ACN("_""""_stop3.cid_""""_","_50_")")="STOP3(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSTOP3 stop3
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":stop3.cid") set vERRMSG = $$^MSG(8563,"STOP3(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSTOP3 stop3
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(stop3,.vx(),1,"|") quit
	if vx("EXP").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(stop3,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT_UPD - After Insert or update trigger

	do vau1

	quit

vau1 // Trigger AFTER_INSERT_UPD - After Insert or update trigger

	type public RecordSTOP3 stop3
	/*	
	---- Revision History ------------------------------------------------
	
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up
		   
		   Removed old revision history.
	*/
	
	// Verify mode
	quit:(%ProcessMode = 2)
	
	type public Number CHGMODE, ER
	
	type Number FEECID3, STPCID
	type String CHKTYP, msg, STP                   
	
	// Stop payment - type - seq
	if (%ProcessMode = 0) set msg = $$^MSG(6701)
	else  if (%ProcessMode = 1) set msg = $$^MSG(6702)
	else  if (%ProcessMode = 3) set msg = $$^MSG(6700) 
	 
	if CHGMODE.get().isNull() set CHGMODE = %ProcessMode
	
	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='STOP3',DI='CHKHI'", 1)
	
	//Sequence ~p1
	set msg = msg_"3 - "_dbtbl1d.des_" "_stop3.chkhi_" "_$$^MSG(6742,stop3.seq)   
	set STPCID = stop3.cid

	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// History
	do HISTBLD^ACNFUNCS(msg,acn.boo)       

	// Modify mode
	quit:(%ProcessMode = 1)  

	// Check for stop payment fees
	set FEECID3 = stop3.feecid
	if 'FEECID3.isNull() do { quit:ER
	
		type RecordDEP dep = Db.getRecord("DEP", "CID=:FEECID3", 1)
		
		// Service charge fee account must be a deposit account
		if (dep.getMode() = 0) do Runtime.setErrMSG("STOP3",803) quit:ER

		// Service charge fee account ~p1 is closed.
		if (dep.stat = 4) do Runtime.setErrMSG("STOP3",457,"FEECID3") quit:ER
		
		do ^SRVSTP(FEECID3, 3, 2, "STP")	// Assess stop type 2 fee
	}
	
	// Update account sequence
	if (acn.cls = "D") do {
			
		type RecordDEP dep = {RecordDEP}acn
			
		set dep.stp3 = dep.stp3 + 1
		
		do dep.save("/NOJOURNAL")
	}
		
	if (acn.cls = "L") do {
			
		type RecordLN ln = {RecordLN}acn
			
		set ln.stp3 = ln.stp3 + 1
			
		do ln.save("/NOJOURNAL")
	}
	
	// Process Check Register updates
	
	if $$EUROCHK^CHKPROC(STPCID) do {
		
		type Date NEWEXP, OLDEXP
		type Number CHKLO, OLDSTART

		// The stop is expired we don't need to change the status
		if (%ProcessMode = 0), 'stop3.exp.isNull(), (stop3.exp '> %SystemDate) quit 
		set CHKLO = stop3.chklo

		// Low check number not defined
		quit:CHKLO.isNull() 

		// Low check is greater than high check
		quit:(CHKLO > stop3.chkhi)

		set CHKTYP = acn.chks
	
		if (%ProcessMode = 1) do {
			/*
			The expiration date is changed to before or equal to
			today. the stop is not active and we must delete
			status (return to outstanding) only for the old range.
			*/

			set OLDEXP = stop3.exp.oldVal
			set OLDSTART = stop3.chklo.oldVal
			if ('stop3.exp.isNull()), (stop3.exp '> %SystemDate), (OLDEXP.isNull() ! (OLDEXP > %SystemDate)) do {
				
				set CHGMODE = 3
				if 'OLDSTART.isNull() set CHKLO = OLDSTART
			}
			
			/*
			The old expiration date is <=today, the stop now is
			active and we must set check status to stopped.
			*/
			if 'OLDEXP.isNull(), (OLDEXP '> %SystemDate),(stop3.exp.isNull() ! (stop3.exp > %SystemDate)) set CHGMODE = 0
		}
		
		/*
		The expiration date doesn't change and is <=today. The stop
		is expired and we don't need to change the status
		*/

		if ((%ProcessMode = 1) & 'stop3.exp.isNull() & (stop3.exp '> %SystemDate)) quit
	
		do STPFIL^CHKPROC(STPCID, CHKTYP, CHKLO, stop3.chkhi, CHGMODE, OLDSTART.get())
	}

	quit

vau2 // Trigger AFTER_UPDATE_FEECID - Modify Fee Charge Account

	type public RecordSTOP3 stop3
	if %ProcessMode'=1 quit     // 1 = Update
	set FEECID3=stop3.feecid
	if (stop3.feecid.oldVal'=stop3.feecid) do Runtime.setErrMSG("STOP3",412,"FEECID3") quit:ER
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete trigger

	type public RecordSTOP3 stop3
	/*	
	---- Revision History ------------------------------------------------
	
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up.
		   
		   Remove old revision history..	
	*/
	
	type Date EXP
	type Number LSEQ, STPCID, STPCHK, STPSEQ
	type String CHKTYP, msg

	// Stop payment - type - seq
	//Delete stop pmt -
	set msg = $$^MSG(6700)

	// Sequence ~p1
	set msg = msg_"3 - "_$$^MSG(6742, stop3.seq)
	set STPCID = stop3.cid
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// History
	do HISTBLD^ACNFUNCS(msg, acn.boo)   
	
	set STPCHK = stop3.chkhi
	set STPSEQ = stop3.seq
	
	// Create STOPLOGA entry.  Find last log sequence number
	type ResultSet rs=Db.select("LSEQ", "STOPLOGA", "TJD=:%SystemDate AND STPTYP=3 AND KEY1=:STPCID AND KEY2=:STPCHK AND SEQ=:STPSEQ", "LSEQ DESC") 
	
	if rs.next() set LSEQ = rs.getCol("LSEQ") + 1
	else  set LSEQ = 1
	
	type RecordSTOPLOGA stoploga = Class.new("RecordSTOPLOGA", "TJD=:%SystemDate,STPTYP=3,KEY1=:STPCID,KEY2=:STPCHK,SEQ=:STPSEQ,LSEQ=:LSEQ")
	
	set stoploga.actflg = 3
	set stoploga.dp = stop3.dp
	
	do stoploga.save()
	
	// Remove Territories before deleting the stop
	
	do Db.delete("STOP3A","CID=:STPCID AND CHKHI=:STPCHK AND SEQ=:STPSEQ")
	
	if (stop3.exp.isNull() ! (stop3.exp > %SystemDate)) do {
		
		if (acn.cls = "D") do {
			
			type RecordDEP dep = {RecordDEP}acn
			
			set dep.stp3 = dep.stp3 - 1
			
			do dep.save("/NOJOURNAL")
		}
		
		if (acn.cls = "L") do {
			
			type RecordLN ln = {RecordLN}acn
			
			set ln.stp3 = ln.stp3 - 1
			
			do ln.save("/NOJOURNAL")
		}
	}
	
	// If a stop is deleted change the status of the check register for european checks
	if $$EUROCHK^CHKPROC(STPCID) do {

		// The stop is expired we don't need to change the status
		if (%ProcessMode = 3), 'stop3.exp.isNull(), (stop3.exp '> %SystemDate) quit 

		set CHKTYP = acn.chks
	
		do STPFIL^CHKPROC(stop3.cid, CHKTYP, stop3.chklo, stop3.chkhi, 3, "")
		}
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert or Update Trigger

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before Insert or Update Trigger

	type public RecordSTOP3 stop3
	do stop3.setAuditFlag(1)
								/*
								---- Revision History ------------------------------------------------
	08/08/01 - SKLYUTD - 46861
		   Modified 01/24/01 - LAMY - 43780 fix to check for the 
		   existence of the CHKLO.  If it is not a range of checks
		   one should be able to place a stop on a lower check number.
		   Change the error message returned from "Record Already
		   Exist" to more descriptive "Check number(s) exists either by
		   itself or within a range".

	07/30/01 - SKLYUTD - 46690
		   Fixed getOneRow method call.  Incorrect syntax used.
	
	04/03/01 - SKLYUTD - 43257
		   Pop a value into stop3.exp in case it is not defined (like
		   coming in from a web client)

								01/24/01 - LAMY - 43780
		   Added this section to make sure that stop payments were
		   not being duplicated.
								*/

	if %ProcessMode=0,stop3.exp="" do {
		new STPOF
		set STPOF=Db.getOneRow("STPOF","UTBLCHKSTP","3")
		if STPOF="" set STPOF=Db.getOneRow("STPOF","CUVAR")
		set stop3.exp=%SystemDate+STPOF
	}
	set STPCID=stop3.cid
	
	if $$EUROCHK^CHKPROC(STPCID) quit

	new rs,XSEQ,XCHKHI,XCHKLO,STOPLO,STOPHI

	type ResultSet rs=Db.select("SEQ,CHKHI,CHKLO","STOP3","CID=:STPCID")

	if rs.isEmpty() quit

	set STOPLO=stop3.chklo
	set STOPHI=stop3.chkhi
	if STOPLO="" set STOPLO=STOPHI
	while rs.next() do {
		set XSEQ=rs.getCol(1)
		set XCHKHI=rs.getCol(2)
		if XCHKHI=STOPHI quit
		set XCHKLO=rs.getCol(3)
		if XCHKLO="" set XCHKLO=XCHKHI

		// The check number already exists either by itself or within 
		// a range.
		if STOPLO<XCHKHI,STOPHI>XCHKLO do Runtime.setErrMSG("STOP3",5025)
 		if STOPHI<(XCHKHI+1),STOPLO>(XCHKLO-1) do Runtime.setErrMSG("STOP3",5025)
	}
	quit

vbu2 // Trigger BU_EXP - Before Update of Expiration Date

	type public RecordSTOP3 stop3
	do stop3.setAuditFlag(1)
	/* ---- Revision History ------------------------------------------------
	
	03/12/02 - BECKERJ - 49316
		   Add trigger to flag an error message when trying to change
		   the expiration date of a stop that has already expired.
	
				----------------------------------------------------------------------
	*/
	// Cannot modify expiration date. Stop has already expired.
	if (stop3.exp.oldVal'>%SystemDate) do Runtime.setErrMSG("STOP3",5148)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP3 stop3

	set X = stop3.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if stop3.chkhi.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CHKHI", vRM) quit
	set X = stop3.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop3.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	set X = stop3.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STOP3.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if stop3.chklo.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CHKLO", vRM) quit
	if stop3.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop3.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop3.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop3.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	set X = stop3.iss if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISS", vRM) quit
	if stop3.ncki.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NCKI", vRM) quit
	if stop3.payee.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAYEE", vRM) quit
	if '("01"[stop3.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop3.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop3.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop3.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP3","MSG",979,"STOP3."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSTOP3 stop3)	//STOP3 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.stop3)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=ACTION
			}
		else  if TSRC="O" do {
			do vj1(.stop3)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=ACTION
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.stop3)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=ACTION
			}
		else  if TSRC="O" do {
			do vj1(.stop3)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=ACTION
			}
		}

	quit


vj1(RecordSTOP3 stop3)	// ACTION  Table STOPLOGA  Action file

	type Public String %O,TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=3
	set v3=stop3.cid
	set v4=stop3.chkhi
	set v5=stop3.seq
	set vlastkey=Db.nextVal("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5")
	type RecordSTOPLOGA stoploga=Db.getRecord("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5,LSEQ=:vlastkey",1)
	set stoploga.actflg=%O
	set stoploga.dp=stop3.dp

	do stoploga.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordSTOP3 stop3) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EXP").exists() do vi1(.stop3)
	}
	do vi1(.stop3)

	quit
	

vi1(RecordSTOP3 stop3) // Maintain DAYEND index entries (Dayend Expiration Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = stop3.exp
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v4 = stop3.cid
	type String v5 = stop3.chkhi
	type String v6 = stop3.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^STOP(3,vobj(stop3,-3),vobj(stop3,-4),vobj(stop3,-5)))#2,'$D(^DAYEND(v1,"STPEXP",3,v4,v5,v6)) do vidxerr("DAYEND")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"STPEXP",3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXP").exists() set v1=vx("EXP").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"STPEXP",3,v4,v5,v6)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("STOP3")

	while ds.next() do {
		type RecordSTOP3 stop3=ds.getRecord("STOP3")
		if vlist.contains("VINDEX") do VINDEX(.stop3) quit
		if vlist.contains("DAYEND") do vi1(.stop3)
	}

	quit


public VIDXBLD1(RecordSTOP3 stop3, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.stop3) quit
	if vlist.contains("DAYEND") do vi1(.stop3)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("STOP3","MSG",1225,"STOP3."_di)

	quit


vkchged // Access key changed

	type public RecordSTOP3 stop3

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CHKHI").exists() set vux("CHKHI") = vx("CHKHI")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = stop3.cid_","_stop3.chkhi_","_stop3.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop3.cid_","_stop3.chkhi_","_stop3.seq // Copy new keys into object
	type RecordSTOP3 vnewrec = stop3.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP3",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP3 stop3

	if vux("CID").exists() set stop3.cid = vux("CID").piece("|",i)
	if vux("CHKHI").exists() set stop3.chkhi = vux("CHKHI").piece("|",i)
	if vux("SEQ").exists() set stop3.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "STOP3FL"	// Location of index program

