BCHNDFAM //Batch BCHLNNFAM - Net Deferred Fees Amortization
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNNFAM Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHLNNFAM",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID,TYP) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNNFAM","*","",CID.get()_","_TYP.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID,TYP)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNNFAM","*","",CID.get()_","_TYP.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID,TYP) //
	type public Boolean ER = 0
	type public String PLAN

	type Boolean BES, NAI, NEG, RDTL, SPP
	type Date AOND, AOLD, NXADT
	type Number %AMT, AO, AOB, AOC, AOT, AOTD, AYTD, BAL, BBAL, BINT, CC, CGL
	type Number DGL, FMET, IRN, IRR, NBAL, NINT, NPDA, NSIP, PP, PSEQ, SDE, TYPE
	type String CRCD, CITC, CTC, DES, DITC, DTC, FRE, TES
	
	set NXADT = %SystemDate
	set PLAN = CID.piece("~", 2)
	set CID = CID.piece("~", 1)
	
	type RecordAOAMO aoamo = Db.getRecord("AOAMO", "TYP = 'PTS', PAYEE = '1', PLAN = :PLAN")

	set DTC = aoamo.dtran
	
	// Posting Tran Code Not Defined - Posting Halted for Plan ~p1
	if DTC.isNull() do Runtime.setErrMSG("AOAMO", 3825) do LOGERR quit
	
	set CTC = aoamo.ctran
	
	// Posting Tran Code Not Defined - Posting Halted for Plan ~p1
	if CTC.isNull() do Runtime.setErrMSG("AOAMO", 3825) do LOGERR quit
	
	type RecordTRN dtrn = Db.getRecord("TRN", "ETC = :DTC")
	
	set DITC = dtrn.itc
	set DGL = aoamo.dgl
	
	// Posting Offset Account Not Defined - Posting Halted for Plan ~p1
	if DGL.isNull() do Runtime.setErrMSG("AOAMO", 3824) do LOGERR quit
	
	type RecordTRN ctrn = Db.getRecord("TRN", "ETC = :CTC")
	
	set CITC = ctrn.itc
	set CGL = aoamo.cgl
	
	// Posting Offset Account Not Defined - Posting Halted for Plan ~p1
	if CGL.isNull() do Runtime.setErrMSG("AOAMO", 3824) do LOGERR quit
	
	set FMET = aoamo.fmet
	set TES = aoamo.tes
	set SPP = aoamo.spp
	set RDTL = aoamo.rdtl
	set BES = aoamo.bes

	// ~p1 Net Fee Plan ~p2
	set DES = $$^MSG(4156, %EffectiveDate.toString(), PLAN)
	
	set (%AMT,BINT,IRR,NINT) = 0
	set SDE = 1
	
	type RecordLNCYCPTS si = Db.getRecord("LNCYCPTS", "CID = :CID, TYP = 'PTS'")
	type RecordLNCYCPTS so = Db.getRecord("LNCYCPTS", "CID = :CID, TYP = 'PTS'")
	
	if (si.nxadt '= %EffectiveDate) quit  // Account already cycled - no restart logic needed 
	
	type RecordLN ln = Db.getRecord("LN", "CID = :CID")
	
	if (ln.stat = 4) quit
	
	set TYPE = ln.type
	set CC = ln.cc
	set CRCD = ln.crcd
	
	set (NBAL,BBAL,BAL) = ln.bal
	set NAI = ln.nai
	set IRN = ln.irn
	
	if (ln.trexd > %EffectiveDate) set IRN = ln.trate
	
	set AYTD = ln.aytd			// Amortized year-to-date	
	set AOTD = si.caltd			// Amortized to date 
	set AOLD = si.lsadt			// Last date cycled
	set AOC = si.cntr			// Number of times calculated
	set AOT = si.term			// Number of am periods 
	set FRE = si.freq 
	if FRE.isNull() set FRE = ln.dist1fre
	set AO = si.amt				// Net Fee Original Amount
	set IRR = si.rate			// Net Investment Yield 
	set NPDA = si.npda			// Non performing deferred
	set AOB = AO - AOTD - NPDA		// Amort balance (what is left)
	set NSIP = si.nsip			// How do we handle %AMT?
	set NEG = (AO < 0)
	if NEG set AO = -AO			// Amortizing a negative amount
	
	type RecordLNNFAMD lnnfamd = Class.new("RecordLNNFAMD")

	// Save data for the detail report
	if RDTL do {
		
		set lnnfamd.ndd = ln.dist1nd
		set lnnfamd.npda = NPDA
		set lnnfamd.dtf = AOLD
		set lnnfamd.nfee = AOB
		}
	
	// No amortization term specified, not processed
	if 'AOT, FMET do Runtime.setErrMSG("AOAMO", 4154) do A3(.ln, .lnnfamd, .so) quit
	
	// Zero investment rate, not processed
	if 'IRR, 'FMET do Runtime.setErrMSG("AOAMO", 4155) do A3(.ln, .lnnfamd, .so) quit
	
	set AOND = si.nxadt		// Next date to cycle 

	// Reset AOND if net deferred fee plan will calculate first
	// amortization in advance on date of origination
	if BES, (AOND = AOLD), ((%SystemDate = ln.odd) ! (ln.cntdr > 0)) set AOND = AOND + 1

	if (ln.stat = 1) do NX1(.si, .so) quit	// Inactive account
	
	if RDTL do {
	
		type RecordLNNFAMHDR famhdr = Db.getRecord("LNNFAMHDR", "EFD = :%SystemDate, PLAN = :PLAN", 1)

		if famhdr.getMode() quit

		set famhdr.dtt = si.nxadt
		set famhdr.btyp = SPP

		do famhdr.bypassSave()
		}
	
	set so.lsadt = si.nxadt
	
	// Amortization frequency undefined. Account not processed.
	if FRE.isNull() do Runtime.setErrMSG("LNCYCPTS", 3817) do LOGERR quit
	
	set so.nxadt = si.nxadt.nextFreqDate(FRE) quit:ER

	// If the loan was in non-accrual, but has since recovered, file detail
	// debit and credit entries
	if 'NAI, NPDA do {
	
		set %AMT = NPDA
		
		// Create and post transactions
		do TT
		
		set AOTD = AOTD + NPDA
		
		set NPDA = 0
		}
	
	// Is the loan sold?
	set PP = 100
	
	if 'ln.pflg do C(.ln, .lnnfamd, .si, .so, FMET) quit
	
	// Accumulate the portion sold
	type ResultSet rs = Db.select("PSEQ", "LNLS6", "CID = :CID")
	
	while rs.next() do {

		set PSEQ = rs.getCol("PSEQ")
		
		type RecordLNLS6 lnls6 = Db.getRecord("LNLS6", "CID = :CID, PSEQ = :PSEQ")
		
		type RecordLNLS2 lnls2 = Db.getRecord("LNLS2", "INCD = :lnls6.incd, PL = :lnls6.pl")

		// Do not change amounts if pool was swapped
		if lnls2.swap quit
		
		type RecordLNLS6B lnls6b = Db.getRecord("LNLS6B", "CID = :CID, PSEQ = :PSEQ")
		
		set PP = PP - $select(lnls2.picm=6:lnls6b.ops,1:lnls2.pp)
		}
		
	if (PP < 0) set PP = 0
	
	// Loan is 100% sold, stop amortization
	if 'PP quit
	
	do C(.ln, .lnnfamd, .si, .so, FMET)
	
	quit
	
	
C(RecordLN ln,
  RecordLNNFAMD lnnfamd,
  RecordLNCYCPTS si,
  RecordLNCYCPTS so,
  Number FMET)

	if 'FMET do INT(.ln, .lnnfamd, .si, .so) quit
	
	do SL(.ln, .lnnfamd, .si, .so)
	
	quit
	
	 
SL(RecordLN ln,
   RecordLNNFAMD lnnfamd,
   RecordLNCYCPTS si,
   RecordLNCYCPTS so)
  
	// Straight line calculation method
	
	type public Boolean NAI, NEG, RDTL
	type public Number %AMT, AO, AOB, AOC, AOT, NBAL, PP, SDE

	if RDTL set NBAL = NBAL - AOB
	
	set %AMT = (AO / AOT * PP / 100).roundCur(ln.crcd)
	
	if NEG set %AMT = -%AMT
	
	if AOT = (AOC + 1) set %AMT = AOB
	
	if (AOT < (AOC + 1)) set (SDE,%AMT) = 0 if NAI set SDE = 1 do A2(.ln, .lnnfamd, .si, .so) quit
	
	do A1(.ln, .lnnfamd, .si, .so)
	
	quit
	
	
INT(RecordLN ln,
    RecordLNNFAMD lnnfamd,
    RecordLNCYCPTS si,
    RecordLNCYCPTS so)
    
	// Interest calculation method
	
	type public Boolean NEG
	type public Number %AMT, AO, AOC, AOB, AOT, BINT, IRN
	
	type Number AOI = IRN
	type String SV

	// Find interest at the nominal rate on the appropriate balance
	if 'ln.iam do I1(.ln, .lnnfamd, .si, .so) quit
	
	type RecordSTBLIAM stbliam = Db.getRecord("STBLIAM", "KEY = :ln.iam")

	// Amortization method undefined. Account not processed.
	if stbliam.method.isNull() do Runtime.setErrMSG("STBLIAM", 3818) do LOGERR quit

	// Save data which may be overlayed in ^LNAMOAO1
	set SV = AO_"|"_AOB_"|"_AOT_"|"_AOC_"|"_NEG
	
	set AO = ln.iun
	set AOB = (ln.iun - (ln.ipl - ln.extamt))
	set AOT = ln.onp
	set AOC = ln.schnum
	set NEG = 0
	
	set AOC = $select('AOC:$select(stbliam.bes:1,1:0),1:AOC)
	
	// Actuarial calculation method
	if (stbliam.method = 1) do 1^LNAMOAO1(.ln)
	
	// Declining Balance Method
	if (stbliam.method = 2) do 2^LNAMOAO1(.ln)
	
	// Rule of 78ths calculation method
	if (stbliam.method = 3) do 3^LNAMOAO1(.ln)
	
	// Straight line calculation method
	if (stbliam.method = 4) do 4^LNAMOAO1(.ln, 1) 
	
	set BINT = %AMT.roundDec(5)
	
	// Recover saved data 
	set AO =  +SV
	set AOB = SV.piece("|", 2)
	set AOT = SV.piece("|", 3)
	set AOC = SV.piece("|", 4)
	set NEG = SV.piece("|", 5)
	
	do I2(.ln, .lnnfamd, .si, .so)
	
	quit
	
	
I1(RecordLN ln,
   RecordLNNFAMD lnnfamd,
   RecordLNCYCPTS si,
   RecordLNCYCPTS so)
	
	type public Boolean ER, SPP
	type public Date AOND, AOLD
	type public Number %AMT, %INT, BBAL, BINT, IRN, PP

	set BBAL = ((ln.schbal * PP) / 100)
	
	if SPP set BBAL = ((ln.bal * PP) / 100)
	
	if (BBAL = 0) set %AMT = 0 do A1(.ln, .lnnfamd, .si, .so) quit
	
	set %INT = $$^UIC(BBAL, AOLD, AOND - 1, ln.iacm, IRN, 0, ln.dist1af, ln.dist1fre, ln.icpf, ln.schnd, ln.schld)
	
	if ER do A3(.ln, .lnnfamd, .so) quit
	
	set BINT = %INT.roundDec(5)
	
	do I2(.ln, .lnnfamd, .si, .so)
	
	quit
	
	
I2(RecordLN ln,
   RecordLNNFAMD lnnfamd,
   RecordLNCYCPTS si,
   RecordLNCYCPTS so)
   
	// Find interest at the internal rate of return on the net investment
	
	type public Boolean ER, NAI, SPP
	type public Date AOND, AOLD
	type public Number %AMT, %INT, AOB, AOC, AOT, BAL, BINT, IRN, IRR
	type public Number NBAL, NINT, PP, SDE

	set IRN = IRR
	set BAL = ln.schbal
	
	if SPP set BAL = ln.bal
	
	if ln.iam, (ln.iam.extract() = 1) set BAL = ln.bal - (ln.iun - ln.ipl)
	
	set NBAL = ((BAL * PP) / 100) - AOB
	
	if SPP set NBAL = (($select(ln.aruf:ln.bal-ln.udbal,1:ln.bal) * PP) / 100) - AOB
	
	set %INT = $$^UIC(NBAL, AOLD, AOND - 1, ln.iacm, IRN, 0, ln.dist1af, ln.dist1fre, ln.icpf, ln.schnd, ln.schld)
	
	if ER do A3(.ln, .lnnfamd, .so) quit
	
	set NINT = %INT.roundDec(5)
	
	set %AMT = (NINT - BINT).roundCur(ln.crcd)
	
	if (AOT '> (AOC + 1)) set:'NAI %AMT = AOB,SDE = 0 do A2(.ln, .lnnfamd, .si, .so) quit
	
	do A1(.ln, .lnnfamd, .si, .so)
	
	quit
	
	
A1(RecordLN ln,
   RecordLNNFAMD lnnfamd,
   RecordLNCYCPTS si,
   RecordLNCYCPTS so)
	
	type public Boolean ER, SPP
	type public Number %AMT, AO, AOB, NSIP, SDE
	type public String ET
	
	type Number EPPEN

	// Amount Processed Equal to Zero
	if '%AMT do Runtime.setErrMSG("LNCYCPTS", 3819) do A3(.ln, .lnnfamd, .so) quit
	
	// Error in account, not processed
	if ER set:ET.isNull() ET = $$^MSG(3511) do A3(.ln, .lnnfamd, .so) quit
	
	// Check the loan's amortization to see if it is allowable
	set SDE = 1
	
	/* 
	If original amount has been set to zero no amortization should have
	ever occurred.  Next line of code will reset back to zero what was
	amortized previously.  Value of AOB will equal the "negative" of
	the "amortized-to-date" amount. 
	*/
	
	if (AO = 0) set %AMT = AOB,SDE = 0 do A2(.ln, .lnnfamd, .si, .so) quit
	
	if (NSIP '= 2) do A2(.ln, .lnnfamd, .si, .so) quit
	
	/* 
	Check to see if the net investment exceeds the amount the borrower
	may satisfy the obligation for prior to penalty calculation.	
	(NSIP MUST be = 2).
	*/
	if (ln.acr '< (-(AOB - %AMT))) do A2(.ln, .lnnfamd, .si, .so) quit
	
	// Calculate early payoff penalty amount
	do EPPEN^LNPO2A(.ln)
	
	// If the prepayment penalty increases the settlement to be
	// greater than the new net fee balance, we can amortize
	if ((EPPEN + ln.acr) '< (-(AOB - %AMT))) do A2(.ln, .lnnfamd, .si, .so) quit
	
	// Amount Calculated Exceeds Loan Settlement Amount
	do Runtime.setErrMSG("LNCYCPTS", 4151) do A3(.ln, .lnnfamd, .so)
	 
	quit
	
	
A2(RecordLN ln,
   RecordLNNFAMD lnnfamd,
   RecordLNCYCPTS si,
   RecordLNCYCPTS so)
   
	// File updates

	type public Boolean NAI, NEG, SPP
	type public Number %AMT, AOB, AOTD, NPDA, SDE
	
	// Turn on audit flag to track changes to object "so". This method creates the
	// vobj(obj,-100) entries required for call to update changes to LNCYCPTS file
	do so.setAuditFlag(1)
	
	// Since we can only amortize to zero, check amount against balance,
	// and do not set up DAYEND for next period			
	set NEG = -NEG if 'NEG set NEG = 1
	
	if ((AOB * NEG) '> (%AMT * NEG)) set %AMT = AOB if 'NAI set SDE = 0
	
	// Check to see if the loan is still in non-accrual status
	if NAI set NPDA = NPDA + %AMT,%AMT = 0
	
	set so.caltd = AOTD + %AMT
	set so.cntr = si.cntr + 1
	set so.oipl = si.cipl
	set so.cipl = ln.ipl
	set so.cacr = ln.acr
	set so.cbal = ln.bal
	set so.cseq = Db.nextVal("HIST","ln.cid")
	set so.ramt = %AMT
	set so.npda = NPDA
	
	do A3(.ln, .lnnfamd, .so)
	
	quit
	
	
A3(RecordLN ln,
   RecordLNNFAMD lnnfamd,
   RecordLNCYCPTS so)	

	type public Boolean ER, RDTL
	type public Number %AMT, AYTD, BBAL, BINT, CC, IRR, NBAL, NINT, TYPE
	type public String CRCD, PLAN

	type Boolean DRCR = 0
	type Number RATE

	set ln.aytd = AYTD + %AMT
	
        do ln.bypassSave()
	
	do so.setAuditFlag(1)
	
	do so.save("/NOJOURNAL")
	
	// Save remainder of data for report
	set RATE = ln.irn
	
	if (ln.trexd > %EffectiveDate) set RATE = ln.trate
	
	if RDTL do {
		
		set lnnfamd.efd = %SystemDate
		set lnnfamd.plan = PLAN
		set lnnfamd.cid = ln.cid
		set lnnfamd.amt = +%AMT
		set lnnfamd.ninv = +NBAL
		set lnnfamd.irr = +IRR
		set lnnfamd.nint = +NINT
		set lnnfamd.bal = +BBAL
		set lnnfamd.birn = RATE
		set lnnfamd.bint = +BINT
		
		do lnnfamd.save("/NOJOURNAL")        
		}
	
	if ER do LOGERR quit
	
	do TOTINI
	
	if (%AMT < 0) set DRCR = 'DRCR,%AMT = -%AMT
	
	do UPOFFSET^BCHSOURC("BCHLNNFAM", "TOTD", CRCD, TYPE, PLAN, CC, DRCR, %AMT)
	
	set DRCR = 'DRCR
	
	do UPOFFSET^BCHSOURC("BCHLNNFAM", "TOTC", CRCD, TYPE, PLAN, CC, DRCR, %AMT)
	
	quit
	
	
TT	// File separate entries if non-performing deferred only
	
	type public Number %AMT, BRCD, CID, CGL, DGL
	type public String CITC, CRCD, CTC, DES, DITC, DTC
	
	type Number par(), x

	type RecordTTX ttx = Class.new("RecordTTX")
	type TranSet ts = Class.new("TranSet")
	
	set ttx.cid = DGL
	set ttx.efd = %EffectiveDate
	set ttx.tlo = %UserStation
	
	// Net Fee ~p1
	set ttx.tcmt = $$^MSG(5601, CID)
	
	if (%AMT < 0) do {
		
		set ttx.itc = CITC
		set ttx.etc = CTC
		set ttx.tamt = -%AMT
		}
	else  do {
		
		set ttx.itc = DITC
		set ttx.etc = DTC
		set ttx.tamt = +%AMT
		}
		
	#if CUVAR.%MCP set ttx.crcd = CRCD
	
	set x = ts.copyTran(ttx)
	
	set ttx.cid = CGL
	set ttx.efd = %EffectiveDate
	set ttx.tcmt = DES
	
	if (%AMT < 0) do {
		
		set ttx.itc = DITC
		set ttx.etc = DTC
		set ttx.tamt = -%AMT
		}
	else  do {
		
		set ttx.itc = CITC
		set ttx.etc = CTC
		set ttx.tamt = +%AMT
		}
		
	#if CUVAR.%MCP set ttx.crcd = CRCD
	
	set x = ts.copyTran(ttx)
	
	set par("IPMODE") = 3
	set par("OPTION") = 1
	
	do ts.postTSet(%SystemDate, BRCD, .par)
	
	quit
	
	
NX1(RecordLNCYCPTS si,
    RecordLNCYCPTS so)

	// Complete processing for inactive account
	
	type public Boolean ER
	type public String FRE

	do so.setAuditFlag(1)
	
	set so.lsadt = si.nxadt
	
	// Amortization frequency undefined. Account not processed.
	if FRE.isNull() do Runtime.setErrMSG("LNCYCPTS", 3817) do LOGERR quit
	
	set so.nxadt = si.nxadt.nextFreqDate(FRE) quit:ER
	
	do so.save("/NOJOURNAL")
	
	quit
	

TOTINI	// Initialize Offsets

	type public Number CC, CGL, DGL, TYPE
	type public String CRCD, CTC, DES, DTC, PLAN

	if 'Db.isDefined("TMPBCHOFF","TJD,'BCHLNNFAM',%ProcessID,'TOTD',CRCD,TYPE,PLAN,CC") do {

		do BDOFFSET^BCHSOURC("BCHLNNFAM", "TOTD", CRCD, TYPE, PLAN, CC, DGL, DGL, DTC, CTC, DES)
		}

	if 'Db.isDefined("TMPBCHOFF","TJD,'BCHLNNFAM',%ProcessID,'TOTC',CRCD,TYPE,PLAN,CC") do {

		do BDOFFSET^BCHSOURC("BCHLNNFAM", "TOTC", CRCD, TYPE, PLAN, CC, CGL, CGL, DTC, CTC, DES)
		}

	quit
	

LOGERR	// Log error in exception file
	
	type public Number BAL, CID
	type public String %ZTSEQ, ET, RM

	if ET.get().isNull() set ET = RM.get()
	
	// Net Deferred Fee Item Posting
	do LOG^UTLEXC(%RoutineName, "*", $$^MSG(7071)_"|1", CID.get(), %ZTSEQ.get(), ET, $select(CID.get():BAL.get(),1:""))
	
	kill ET,%ZTSEQ
	
	quit
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	type public String vRECORD

	for  set vRECORD = vINPUT.piece("|",1),vINPUT = vINPUT.extract(vRECORD.length() + 2, 99999) quit:vRECORD.isNull()  do {
		
		do vPROC(vRECORD.piece($char(9), 1), vRECORD.piece($char(9), 2))
		}
		

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	
	type public Boolean DONE, EXIT = 0
	type public Number CID, OLDCID, PLAN
	type public ResultSet rspts
	
	type Number RECLEN = 0		// Initialize vINPUT Record Length
	type String REC
	
	set vINPUT = ""
	
	if (DONE = 1) quit
	
	while 'EXIT,'DONE do {
		
		if rspts.next() set CID = rspts.getCol("CID")
		else  set CID = "",DONE = 1 quit
		
		if (CID = OLDCID) quit	// Only allow a distinct CID
		
		set OLDCID = CID
		
		set REC = CID_"~"_rspts.getCol("PLAN")_$char(9)_rspts.getCol("TYP")_"|"
		
		set RECLEN = RECLEN + REC.length()
		
		set vINPUT = vINPUT_REC
		
		// Maximum record size reached
		if (RECLEN > (PSL.maxStringLength \ 4)) set EXIT = 1 quit	
		}
	
	set vINPUT = vINPUT.extract(1, vINPUT.length() - 1)
			

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	
	type public Boolean ER = 0
	type public Number BRCD
	type public String ET

	do SOURCE^BCHSOURC("PTS", "ALL", .%UserID, .BRCD, .%UserClass)
	
	if ER set %BatchExit = 1 do LOGERR quit

	do ^TTXLOK
	
	if ER set ET = "TTXLOK",%BatchExit = 1 do LOGERR quit
	
	type public ResultSet rspts = Db.select("CID,PLAN,TYP", "LNCYCPTS", "NXADT=:%SystemDate AND PLAN IS NOT NULL AND (AMT-CALTD)<>0")
	
	// No records to process
	if rspts.isEmpty() set %BatchExit = 1 quit
	
	quit


 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID,TYP","LNCYCPTS","NXADT=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Boolean ER = 0
	type public Number BRCD
	type public String ET = ""
	
	set %EffectiveDate = %SystemDate
	
	do SOURCE^BCHSOURC("PTS", "ALL", .%UserID, .BRCD, .%UserClass)
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type public Boolean DONE = 0, ER = 0
	type public Number BRCD, CID, OLDCID

	set %EffectiveDate = %SystemDate
	
	do SOURCE^BCHSOURC("PTS", "ALL", .%UserID, .BRCD, .%UserClass)
	
	set (CID,OLDCID) = ""
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public Number BRCD

	// Post offsets
	do OFFSET^TTXBLD(%SystemDate, BRCD, %UserID, "BCHLNNFAM")
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
