BCHDESTM //Batch BCHDESTM1 - Next Statement Date Advancement
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHDESTM1 Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHDESTM1",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(ACN,STMGRP) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHDESTM1","*","",ACN.get()_","_STMGRP.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,ACN,STMGRP)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHDESTM1","*","",ACN.get()_","_STMGRP.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,ACN,STMGRP) //
 	type ResultSet rs
 	set rs=Db.select("CID","CMBSTM","ACN=:ACN AND STMGRP=:STMGRP")

	/*
	If there are no accounts linked to the statement group, there is no
	need to calculate/advance the next statement date; quit.
	*/

	if rs.isEmpty() quit

	new ER,FRE,JD,NJD,UPDFLG

	type RecordCMBGRP cmbgrp
	set cmbgrp=Db.getRecord("CMBGRP","ACN=:ACN,STMGRP=:STMGRP")

	type Date EFD=%SystemDate-1
	
	/*
	If the next statement date is greater than EFD, this indicates the
	process has already been run for this statement group and further
	processing is not necessary; quit.  [Note that this replaces the
	restart logic that is optionally inserted into the compiled code
	if the 'insert restart logic' flag is turned on.]
	*/

	set JD=cmbgrp.sndt if JD>EFD quit
	set FRE=cmbgrp.sfre if FRE="" quit		
	set ER=0,NJD=$$NJD^UFRE(JD,FRE) if ER set ET="INVLDFRE1" quit

	/*
	Initialize the update flag to zero.  It will be set to '1' below if
	there are any open accounts linked to this statement group.
	*/

	set UPDFLG=0

	/*
	Update table CMBSTM to reflect last/next statement dates for each
	open account linked to the statement group; insert HIST0 record,
	if applicable.
	*/

	while rs.next() do {
		set CID=rs.getCol(1)

		type RecordACN acn=Db.getRecord("ACN","CID=:CID")

		if acn.smet do {	
			type RecordCMBSTM cmbstm
			set cmbstm=Db.getRecord("CMBSTM","ACN=:ACN,STMGRP=:STMGRP,CID=:CID")

			set cmbstm.stpr=cmbstm.sltd	// Move last date to prior date
			set cmbstm.sltd=JD		// Reset last date
			do cmbstm.bypassSave()
			}

		/*
		Quit if the account is closed.  Otherwise, set the update
		flag = 1 which indicates the statement group is linked to
		at least one open account.
		*/

		if acn.stat=4 quit
		set UPDFLG=1

		/*
		If this is not the primary CIF or if the HIST0 record already
		exists, no need to process any further.
		*/

		if acn.acn'=ACN quit
		if Db.isDefined("HIST0","CID=:CID,JD=:EFD") quit

	 	type RecordHIST0 hist0
	 	set hist0=Class.new("RecordHIST0")

		set hist0.cid=CID
		set hist0.jd=EFD
		set hist0.seqzero=Db.currVal("HIST","CID") 

		if acn.cls="D" do DEP(.acn,.hist0)
		if acn.cls="L" do LN(.acn,.hist0)
		do hist0.bypassSave()
		}

	/*
	If there are no open accounts linked to the statement group (i.e.,
	UPDFLG=0), there is no need to advance the next statement date;
	quit.
	*/

	if 'UPDFLG quit

	set cmbgrp.sndt=NJD
	do cmbgrp.bypassSave()

	quit


DEP(RecordDEP dep,RecordHIST0 hist0)	//Private;Deposit record
	/*
	ARGUMENTS:
	     . dep	Deposit record		/TYP=RecordDEP/REQ/MECH=REF:R
	     . hist0	HIST0 record		/TYP=RecordHIST0/REQ/MECH=REF:W
	*/

	set hist0.bal=dep.bal
	set hist0.acrcf=dep.posacr	// Amount Accrued and Carried Forward
	quit


LN(RecordLN ln,RecordHIST0 hist0)	//Private;Loan record
	/*
	ARGUMENTS:
	     . ln	Loan record		/TYP=RecordLN/REQ/MECH=REF:R
	     . hist0	HIST0 record		/TYP=RecordHIST0/REQ/MECH=REF:W
	*/

	set hist0.bal=ln.bal 
	set hist0.baola=ln.baola	// Balance as of Last Advance
	set hist0.ladt=ln.ladt		// Date of Last Loan Advance
	set hist0.habl1=ln.habl1	// Highest Balance - Life
	set hist0.habl2=ln.habl2	// Highest Balance - From Last Zero Bal
	set hist0.teb=ln.teb		// Total Escrow Balance
	set hist0.acrcf=ln.acr		// Amount Accrued and Carried Forward

	if ln.aruf set hist0.udbal=ln.udbal	// Undisbursed Balance
	else  if ln.iam set hist0.iunt=ln.iun	// Uncollected Interest Balance
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,ACN,STMGRP
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set ACN=vRECORD.piece($C(9),1)
 set STMGRP=vRECORD.piece($C(9),2)
 do vPROC(ACN,STMGRP)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,ACN,STMGRP
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+17>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("ACN,STMGRP","CMBGRP","SNDT=(:TJD-1)")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
