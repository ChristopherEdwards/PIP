DUPCIFFL(RecordUTBLDUPCIF utbldupcif, String vpar, Boolean vparNorm) // UTBLDUPCIF - Duplicate Customer Search Criteria Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (2)                      05/12/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbldupcif.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utbldupcif,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbldupcif,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SEQ = utbldupcif.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SEQ").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLDUPCIF",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLDUPCIF","SEQ = :utbldupcif.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SEQ

	type RecordUTBLDUPCIF utbldupcif = Db.getRecord("UTBLDUPCIF","SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do utbldupcif.setMode(2)

		do DUPCIFFL(utbldupcif,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLDUPCIF utbldupcif

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLDUPCIF","SEQ = :utbldupcif.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbldupcif,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbldupcif,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbldupcif)) S ^UTBL("DUPCIF",vobj(utbldupcif,-3))=vobj(utbldupcif)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLDUPCIF utbldupcif

	if vpar'["/NOLOG/" do ^DBSLOGIT(utbldupcif,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("DUPCIF",vobj(utbldupcif,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLDUPCIF utbldupcif

	// Type local variables for access keys for defaults
	type public String SEQ

	if utbldupcif.seq.isNull() set utbldupcif.seq = 1      // seq
	quit


vreqn // Validate required data items

	type public RecordUTBLDUPCIF utbldupcif

	if utbldupcif.query.isNull() do vreqerr("QUERY") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLDUPCIF utbldupcif

	if utbldupcif.seq.isNull() do vreqerr("SEQ") quit

		if vx("QUERY").exists(),utbldupcif.query.isNull() do vreqerr("QUERY") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLDUPCIF","MSG",1767,"UTBLDUPCIF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordUTBLDUPCIF utbldupcif
	/*
	----Revision History---------------------------------------------------
	
	01/23/05 - RussellDS - CR14643
		   Cleaned up PSL code.
		   
		   Remove old revision history.
	*/

	type public Boolean ER

	type String QID

	set QID = utbldupcif.query
	
	type RecordDBTBL4 dbtbl4 = Db.getRecord("DBTBL4", "LIBS=""SYSDEV"",QID=:QID", 1)
	
	if (dbtbl4.pfid '= "CIF") do Runtime.setErrMSG("UTBLDUPCIF",1334) quit:ER
	
	do COMPILE^DUPLCIF

	quit

vau1 // Trigger AFTER_UPDATE - After Update Trigger

	type public RecordUTBLDUPCIF utbldupcif
								/*
								----Revision History---------------------------------------------------
							 
								01/23/05 - RussellDS - CR14643
		   Cleaned up PSL code.
		   
		   Remove old revision history.
								*/

	type public Boolean ER

	type String QID

	set QID = utbldupcif.query
	
	type RecordDBTBL4 dbtbl4 = Db.getRecord("DBTBL4", "LIBS=""SYSDEV"",QID=:QID", 1)
	
	if (dbtbl4.pfid '= "CIF") do Runtime.setErrMSG("UTBLDUPCIF",1334) quit:ER
	
	do COMPILE^DUPLCIF

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLDUPCIF utbldupcif

	set X = utbldupcif.seq if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if utbldupcif.query.length()>40 set vRM = $$^MSG(1076,40) do vdderr("QUERY", vRM) quit
	if utbldupcif.winpfw.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WINPFW", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLDUPCIF","MSG",979,"UTBLDUPCIF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLDUPCIF utbldupcif

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("SEQ")
	set voldkey = vux.piece("|",1),vobj(utbldupcif,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utbldupcif,-3) = vnewkey // Copy new keys into object
	type RecordUTBLDUPCIF vnewrec = utbldupcif.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLDUPCIF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utbldupcif,-3) = vux.piece("|",1)             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
