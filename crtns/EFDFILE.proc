EFDFILE(RecordEFD efd, String vpar, Boolean vparNorm) // EFD - Effective-Dated History File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             09/28/2005
	// Trigger Definition (3)                      10/04/2005
	// Journal File Definition (2)                 06/22/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = efd.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(efd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(efd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String EFDATE = efd.efdate
	type String BUFF = efd.buff
	type String SEQ = efd.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EFDATE").exists()!vx("BUFF").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EFD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EFD","EFDATE = :efd.efdate and BUFF = :efd.buff and SEQ = :efd.seq") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EFDATE
	type public String BUFF
	type public String SEQ

	type RecordEFD efd = Db.getRecord("EFD","EFDATE=:EFDATE,BUFF=:BUFF,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do efd.setMode(2)

		do EFDFILE(efd,vpar)
	}
	else  do VINDEX(efd)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEFD efd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EFD","EFDATE = :efd.efdate and BUFF = :efd.buff and SEQ = :efd.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set efd.TJD = %SystemDate
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(efd))  K:$D(vobj(efd,1,1)) ^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5)) S ^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5))=vobj(efd)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(efd,1,1))  N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(efd,1,1)) S vS1=vS1+1,^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5),vS1)=$E(vobj(efd,1,1),vS2,vS2+449)
			#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.efd)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.efd) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEFD efd

	if vpar["/INDEX/" do VINDEX(.efd)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.efd)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5))      // Delete Record
	quit


vinit // Initialize default values

	type public RecordEFD efd

	// Type local variables for access keys for defaults
	type public String EFDATE
	type public String BUFF
	type public String SEQ

	if efd.curdate.isNull() set efd.curdate = +$H          // curdate
	if efd.curtime.isNull() set efd.curtime = $P($H,",",2) // curtime
	type public String TLO
	if efd.tlo.isNull() set efd.tlo = TLO                  // tlo
	type public String %UID
	if efd.uid.isNull() set efd.uid = %UID                 // uid
	quit


vreqn // Validate required data items

	type public RecordEFD efd

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEFD efd

	if efd.efdate.isNull() do vreqerr("EFDATE") quit
	if efd.buff.isNull() do vreqerr("BUFF") quit
	if efd.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFD","MSG",1767,"EFD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Effective Dated maintenance

	type public RecordEFD efd
	/* --------------- Revision History -----------------------------	

	
	07/05/01 - ANTONOVS - 46279:003
		   New keys BUFF and SEQ added to the table SADDREFD

	05/25/01 - ANTONOVS - 43026
		   Trigger created.	            
	*/


	new EFD,TABLE,XKEY,DATA,XBUFF,XSEQ
	
	set DATA=efd.sql
	set TABLE=efd.table
	set XKEY=efd.akey
	set EFD=efd.efdate
	set XBUFF=efd.buff
	set XSEQ=efd.seq

	if Db.isDefined("SADDREFD","TABLE,XKEY,EFD,BUFF,SEQ") do { quit:ER
		do Db.delete("SADDREFD","FID=:TABLE AND AKEY=:XKEY AND EFDATE=:EFD AND BUFF=:XBUFF AND SEQ=:XSEQ") quit:ER	
	}
	quit

vai1 // Trigger AFTER_INSERT - After insert of EFD trigger

	type public RecordEFD efd
	/*
	---------- Revision History ------------------------------------------
	
	10/04/05 - SkariahV - 16673
		  Corrected the use of SystemDate.
	
	09/13/99 - CARROLLJ- 31126
		   Convert to PSL.

	*/
	

	type Boolean ER
	type String TABLE,XKEY

	set TABLE=efd.table
	set XKEY=efd.akey

	if TABLE="CIF" set ER=0 do Db.update("CIF","FMLD=:%SystemDate","ACN=:XKEY","/NOJOURNAL") quit
	if TABLE="DEP" set ER=0 do Db.update("DEP","FMLD=:%SystemDate","CID=:XKEY","/NOJOURNAL") quit
	if TABLE="LN" set ER=0 do Db.update("LN","FMLD=:%SystemDate","CID=:XKEY","/NOJOURNAL")

	quit 

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordEFD efd
	// Mailing address columns check

	type public Boolean ER

	do ADDR^EFDSADDR(efd.sql, efd.table, efd.akey, efd.efdate, efd.buff, efd.seq) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEFD efd

	set X = efd.efdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFDATE", vRM) quit
	set X = efd.buff if 'X.isNull(),X'?1.16N,X'?1"-"1.15N set vRM=$$^MSG(742,"N") do vdderr("BUFF", vRM) quit
	set X = efd.seq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if efd.akey.length()>20 set vRM = $$^MSG(1076,20) do vdderr("AKEY", vRM) quit
	set X = efd.curdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CURDATE", vRM) quit
	set X = efd.curtime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("CURTIME", vRM) quit
	if efd.table.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TABLE", vRM) quit
	set X = efd.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	if efd.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if efd.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFD","MSG",979,"EFD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordEFD efd)	//EFD Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if TSRC="B" do {
		do vj1(.efd)	// Mode=I,U,D Tran=B EFD=N,E Seq=1 JRNID=CIFH_I
		do vj2(.efd)	// Mode=I,U,D Tran=B EFD=N,E Seq=1 JRNID=HISTFM_U
		}
	else  if TSRC="O" do {
		do vj1(.efd)	// Mode=I,U,D Tran=O EFD=N,E Seq=1 JRNID=CIFH_I
		do vj2(.efd)	// Mode=I,U,D Tran=O EFD=N,E Seq=1 JRNID=HISTFM_U
		}

	quit


vj1(RecordEFD efd)	// CIFH_I  Table CIFH  History file

	if efd.table="CIF"!(efd.table="IRATYPE")
	else  quit

	type Public String EFD,%IDENT,%O,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=efd.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=efd.efdate
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$EFDCMT^ACNFUNCS(%O,efd.table_"."_efd.column,$G(EFD))
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordEFD efd)	// HISTFM_U  Table HIST  History for File Maintenance

	type RecordACN acn=Db.getRecord("ACN","CID=:efd.cid",1)

	if efd.table="DEP"!(efd.table="LN")!(efd.table="ACNADDR")
	else  quit

	type Public String EFD,%IDENT,%O,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=efd.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=acn.boo
	set hist.cdt=+$H
	set hist.efd=efd.efdate
	set hist.ident=%IDENT
	set hist.tcmt=$$EFDCMT^ACNFUNCS(%O,efd.table_"."_efd.column_" "_$$^MSG(5951,$$DAT^%ZM(efd.efdate)),$G(EFD))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordEFD efd) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("TABLE").exists()!vx("AKEY").exists() do vi1(.efd)
	}
	do vi1(.efd)

	quit
	

vi1(RecordEFD efd) // Maintain XEFD index entries (EFD Index file)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = efd.table
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = efd.akey
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = efd.efdate
	type String v5 = efd.buff
	type String v6 = efd.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5)))#2,'$D(^XREF("EFD",v2,v3,v4,v5,v6)) do vidxerr("XEFD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("EFD",v2,v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TABLE").exists() set v2=vx("TABLE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("AKEY").exists() set v3=vx("AKEY").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("EFD",v2,v3,v4,v5,v6)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("EFD")

	while ds.next() do {
		type RecordEFD efd=ds.getRecord("EFD")
		if vlist.contains("VINDEX") do VINDEX(.efd) quit
		if vlist.contains("XEFD") do vi1(.efd)
	}

	quit


public VIDXBLD1(RecordEFD efd, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.efd) quit
	if vlist.contains("XEFD") do vi1(.efd)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("EFD","MSG",1225,"EFD."_di)

	quit


vkchged // Access key changed

	type public RecordEFD efd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("EFDATE").exists() set vux("EFDATE") = vx("EFDATE")
	if vx("BUFF").exists() set vux("BUFF") = vx("BUFF")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = efd.efdate_","_efd.buff_","_efd.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = efd.efdate_","_efd.buff_","_efd.seq // Copy new keys into object
	type RecordEFD vnewrec = efd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EFD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordEFD efd

	if vux("EFDATE").exists() set efd.efdate = vux("EFDATE").piece("|",i)
	if vux("BUFF").exists() set efd.buff = vux("BUFF").piece("|",i)
	if vux("SEQ").exists() set efd.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "EFDFILE"	// Location of index program

