public FORMI18N(Number topy,String phrtyp,String fldval1,String fldval2,String mldfv2) // FORMI18N
  /*
	ORIG: kumarb - 11/15/2005
	DESC: FORMI18N

	CALLED BY:  ^I18NMLD
	    CALLS:  ^%ZM,^DBSCRT8,^DBSFUN,^DBSFVER,^DBSMENU,^DBSPNT,^FORM,
	    ^FORMDIPP,^FORMFUN,^FORMREAD,^FORMSTAT,^FORMVAR,^FORMVAR1
	
	     DESC: This program is responsible for the popup window manager
		    for program ^I18NMLD.
		    First it inits some global variables who needs to be there
		    because of the ^FORMxxx functions called. If this program is
		    called from I18NOOE they are already initiated, and not
		    reinit. VO and %TAB buffers are built special due to the 
		    windowing.
		    When a translation is put in fldval2 some special handling
		    based on phrasetype is done in field post-proc VP2^FORMI18N.
		    If the translation is accepted after being tested by the 
		    postproc, the program hands control back to I18NMLD again
	
	 GLOBALS - 
	     READ:
	      SET:
	
	    INPUT:	
			topy 	- the linenumber on wich the window will start
			phrtyp	- the type of the phrase in fldval1 
			fldval1	- incoming phrase 
			mldfv2	-  
	
	   OUTPUT:
			fldval2	- outgoing phrase
	
	 I18N=QUIT: Excleded from I18N standards. 
	
	
	---- Revision History ------------------------------------------------
	
	07/14/06 - RussellDS - CR22121
		   Replace uses of $C with number.byte() for Unicode.
	
	11/15/05 - KUMARB - CR 16921
        	Converted to PSL.
	
	----------------------------------------------------------------------
	*/
	
	do START
	
	quit
	
START //

	type public Number DELETE,LFTMAR,RHTMAR,STATUS,topy
	type public String I18NOOE
	
	type Number savDEL,status
	type String EXTANT,ORIGIN,vtblrtn
	
	// Have to save it and use later
	set savDEL=DELETE.get()
		
	// Don't init again if called by OOE  
	if (I18NOOE.get()).isNull() do FRMINIT
	
	set vtblrtn="N X D VW^FORMI18N",status=STATUS.get()
	
	set topy=topy.get()
	if topy="" set topy=1
	set ORIGIN=topy_";"_LFTMAR,EXTANT=5_";"_(RHTMAR-LFTMAR-1)
	
	do MAIN
	
	quit
	
MAIN	// Run main part of program
	
	do VRUN
	do FINISH
	
	quit
	
FINISH //
	
	type public Number DELETE,savDEL
	type public String %i18nmtra,I18NOOE
	
	// Restore DELETE again
	set DELETE=savDEL
	
	// Clean up the frame
	if ((I18NOOE.get()).isNull()),('%i18nmtra) do VREPRNT^@PGM
	
	quit
	
VRUN	// Main part control
	
	type public Number status
	
	type Number px,py,%MAX,%PG,%PAGE
	type String DATA,VO(),%fkey,%TAB(),zbterm
	
	// Clear Region for OBJECT definition
	do CLRRGN^FORMFUN
	
	// Remove status line
	if status do OFF^FORMSTAT
	
	do SCRNPRE
	
	do VBX,VPR,VDA,^DBSPNT(),VTAB
	
	quit
	
VPR	// Build the prompts

	type public Number topy,vWID
	type public String VO()
	
	set VO="1||13"
	set VO(0)="0;0|"_vWID
	set VO(1)=topy.byte()_17.byte()_46.byte()_2.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_"01T  Master Language Dictionary Translation Utility  "
	
	quit
	
VDA	// Build screen data
	type public Number topy,vINP,vSTART
	type public String flddes1,flddes2,fldval1,fldval2,VO()
	
	set fldval2=fldval2.get()
	
	set VO="5|2|13"    
	set VO(2)=(topy+1).byte()_5.byte()_20.byte()_2.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_"01T"_(flddes1.get()).extract(1,20)
	set VO(3)=(topy+2).byte()_vSTART.byte()_vINP.byte()_2.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_"01T"_(fldval1.get()).extract(1,vINP)
	set VO(4)=(topy+3).byte()_5.byte()_20.byte()_2.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_"01T"_(flddes2.get()).extract(1,20)
	set VO(5)=(topy+4).byte()_vSTART.byte()_vINP.byte()_2.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_0.byte()_"00T"_(fldval2.get()).extract(1,vINP)
	
	quit
	
VTAB	// Build the %TAB(array)

	type public Number %MAX
	
	type Number OLNTB,REQ,VPB,VPT
	type String DFID,DLIB,PGM
	
	set %MAX=4,VPT=1,VPB=7,PGM=$T(+0),DLIB="SYSDEV",DFID="I18NMLD",REQ=1
	set OLNTB=24001
	
	do VTAB1
	
	quit
	
VTAB1	//

	type public Number status,ZB
	type public String I18NOOE
	
	do VTBL
	
	do ^DBSCRT8
	if (status),('(I18NOOE.get()).isNull()) do ON^FORMSTAT
	set ZB=13
	
	quit
	
VTBL	// Create %TAB(array) 

	type public Number vINP,vSTART
	type public String topy,%TAB()
	
	// 1 2 3  4 5   6   7-9 10-11
	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC
	
	set %TAB(1)=(topy+0).byte()_4.byte()_20.byte()_"20T|*flddes1|[*]@flddes1"
	set %TAB(2)=(topy+1).byte()_vSTART.byte()_vINP.byte()_"20T|*fldval1|[*]@fldval1"
	set %TAB(3)=(topy+2).byte()_4.byte()_20.byte()_"20T|*flddes2|[*]@flddes2"
	set %TAB(4)=(topy+3).byte()_(vSTART-1).byte()_vINP.byte()_"00T|*fldval2|[*]@fldval2|||D VP2^FORMI18N|D VP1^FORMI18N"
	
	quit
	
SCRNPRE // Screen Pre-Processor

	type public Number vINP,vSTART,vWID
	type public String fldval1,fldval2,phrtyp
	
	if (phrtyp=11),(fldval2="") set fldval2=fldval1
	set vWID=1,vINP=132,vSTART=1
	if fldval1.length()<80 set vINP=80
	if fldval1.length()<70 set vINP=70,vWID=0,vSTART=7
	
	quit
	
VSPP	// Screen Post-Processor 

	type public String fldval2,phrtab()
	
	if phrtab(fldval2).exists() set %ProcessMode=2
	
	quit
	
VDEPRE // Data Entry Pre-proc
	
	do VPOS
	
	quit
	
VPOS	// User defined post processor's 
	
	do VP1
	
	quit
	
VP1	// Preproc for fldval2 

	type public Number maxphr
	
	if 'maxphr do CHANGE^DBSMACRO("TBL","")
	else  do CHANGE^DBSMACRO("TBL","phrtab(")
	
	quit
	
VP2	// Postproc for fldval2 

	type public Boolean ER,uclflgMLD
	type public Number srcphr
	type public String fldval1,mldfv2,phrtyp,RM,X
	
	type Number i
	
	if 'srcphr quit
	
	// Locking if admin set the flag  
	if uclflgMLD.get() do { quit
		set RM=$$^MSG(5914)
		}
	else  do CHANGE^DBSMACRO("TBL","")
	
	set mldfv2=X
	
	/* Phrase type 2 Report headers with @ 
	   If translator did not put in "@" for the column break,
	   replace the " " closest to the center of the description
	   with "@" (prior version was replacing every space!)
	*/

	if phrtyp=2 do {
		type Number bwd,done,fwd
		
		// translator did the work (or no space)
		if mldfv2["@"!(mldfv2'[" ") quit
		// start at middle of message
		set (fwd,bwd)=mldfv2.length()\2
		set done=0
		for  quit:done  do {
			// found space going fwd
			if mldfv2.extract(fwd)=" " set done=fwd
			// move pointers
			set fwd=fwd+1,bwd=bwd-1
			// found space going backwd
			if bwd>0,mldfv2.extract(bwd)=" " set done=bwd
			if done set mldfv2=mldfv2.extract(1,done-1)_"@"_mldfv2.extract(done+1,999)
			}
		}

	// Phrase type 3 Screen or Report prompts with :
	if phrtyp=3 do { quit:ER
		if (X.extract(X.length())'=":") do Runtime.setErrMSG("I18NMLD",5915) quit
		set mldfv2=X.translate(":","")
		}
	
	// Special Handeling for Phrase type 6 = ^STBLPROMPT
	if phrtyp=6 do {
		type String e()
		
		// Must have the same number of variables as original phrase
		if fldval1.length("~")'=X.length("~") do Runtime.setErrMSG("I18NMLD",5916) quit
		for i=2:1:X.length("~") do {
			if (X.piece("~",i)).extract(1,2)'?1A1N do Runtime.setErrMSG("I18NMLD",5916) quit
			set e(i-1)="~"_(X.piece("~",i)).extract(1,2)
			}
		for i=1:1:9 do {
			if 'e(i).exists() quit
			if $$UPPER^%ZFUNC(fldval1)'[$$UPPER^%ZFUNC(e(i)) set i=10 do Runtime.setErrMSG("I18NMLD",5916) quit
			}
		}
	
	// Phrase type 11 - Mixed text and <<functions>>
	if phrtyp=11 do {
		type Number edit
		set edit=$$CHECK(fldval1,X)
		if edit=0 do Runtime.setErrMSG("I18NMLD",5917)
		}

	quit
	
CHECK(String src,String trg) // Routine called by post processor to edit ptype 11
	//	making sure that source <<>> appears in target
	
	type Number same
	type String nte

	do getnte(src,1)
	do getnte(trg,2)
	set same=1,nte=""
	
	type ResultSet rs=Db.select("KEY2","TMPRPT2","PID=:$J AND KEY1=1")
	while rs.next() do {
		if same=0 quit
		set nte=rs.getCol("KEY2")
		type RecordTMPRPT2 tmprpt2=Db.getRecord("TMPRPT2","PID=:$J,KEY1=2,KEY2=:nte",1)
		if 'tmprpt2.getMode() set same=0
		do Db.delete("TMPRPT2","PID=:$J AND KEY1=2 AND KEY2=:nte")
		}
	
	type ResultSet rs1=Db.select("KEY2","TMPRPT2","PID=:$J AND KEY1=2")
	if (same),('rs1.isEmpty()) set same=0
	
	quit same
	
getnte(String p,String x) //

	type Number i
	type String nte
	
	do Db.delete("TMPRPT2","PID=:$j AND KEY1=:x")

	for i=2:1:p.length("<<") do {
		set nte=(p.piece("<<",i)).piece(">>")
		type RecordTMPRPT2 tmprpt2=Db.getRecord("TMPRPT2","PID=:$J,KEY1=:x,KEY2=:nte",1)
		set tmprpt2.data=""
		do tmprpt2.bypassSave()
		}

	quit
	
FRMINIT // Initialise global var's used by ^FORMxxx procedures

	type public Number BOTMAR,DELETE,LFTMAR,RHTMAR,TIMEOUT,TOPMAR,XLIMIT,YLIMIT
	type public String DBTBL2(),ST8
	
	type Number KBI
	type String BEL,fileflag,GLDKEY,JRNL,N,NUL,TAB,zbtxt
	
	if ST8.get()="" set ST8="||2||||||32|1;0;2||1"
	else  set ST8.piece("|",12)=0
	
	do {  
		if %UserID.get()="" set %UserID=1,%UserClass="SCA" 
		
		if 'YLIMIT.exists() set YLIMIT=255 
		if 'XLIMIT.exists() set XLIMIT=255 
		
		set LFTMAR=1,TOPMAR=1 
		set BOTMAR=23,RHTMAR=80 
		
		set zbtxt="x" 
		
		set N="",fileflag="",GLDKEY="",JRNL="" 
		set NUL=$C(0),BEL=$C(7),TAB=$C(9),KBI=0 
		 
		set DELETE=127 
		set TIMEOUT=60 
		 
		do VIDINIT^FORMINIT 
		do TRMSET^FORMINIT 
		}

	do REST8^FORMINIT,ST8^FORMINIT 
	
	// Save screen attributes
	set DBTBL2(-5)=ST8
	
	quit
	
VBX	//

	type public String EXTANT,ORIGIN

	do BOX^%TRMVT(ORIGIN,EXTANT)

	quit
	
VW	//

	type public String EXTANT,ORIGIN

	do PUTRGN^FORMFUN(ORIGIN,EXTANT)
	do VREPRNT

	quit
	
VREPRNT

	do VBX,VPR,VDA,^DBSPNT()
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60472^36846^Dan Russell^8878"	// Signature - LTD^TIME^USER^SIZE
