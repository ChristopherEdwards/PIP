BCHMPSEX //Batch BCHMPSEX - Create MPS card extract file
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/01/2007 08:53 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHMPSEX Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHMPSEX")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHMPSEX") quit
 do JOBMGR^BCHUTL(%FN,"BCHMPSEX",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHMPSEX")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(PROCDATE,CRDTYP,CO,CRDNUM,FID,MODE) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHMPSEX","*","",PROCDATE.get()_","_CRDTYP.get()_","_CO.get()_","_CRDNUM.get()_","_FID.get()_","_MODE.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHMPSEX",PROCDATE.get()_","_CRDTYP.get()_","_CO.get()_","_CRDNUM.get()_","_FID.get()_","_MODE.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHMPSEX",PROCDATE.get()_","_CRDTYP.get()_","_CO.get()_","_CRDNUM.get()_","_FID.get()_","_MODE.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,PROCDATE,CRDTYP,CO,CRDNUM,FID,MODE)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHMPSEX","*","",PROCDATE.get()_","_CRDTYP.get()_","_CO.get()_","_CRDNUM.get()_","_FID.get()_","_MODE.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHMPSEX",PROCDATE.get()_","_CRDTYP.get()_","_CO.get()_","_CRDNUM.get()_","_FID.get()_","_MODE.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,PROCDATE,CRDTYP,CO,CRDNUM,FID,MODE) //
	type public String RM
	type String BPH,GRP,HPH,ONAM,NAM,MAD1,MAD2,MCITY,MSTATE,MZIP,FNAME,MNAME,LNM,SUFFIX
	type Number AMODE,ASTAT,CID,PINGEN,PRIMCRD,RPLCRD,RSTAT,STAT,TAXID

	
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
	if 'crd.getMode() set RM=$$^MSG(3063) do EXC quit

	set RPLCRD=0
	
	quit

NEWCRD	// Create card section
	
	type public Boolean RPLCRD
	type public Date XTJD
	type public IO io
	type public Number ACN,FID,MODE,MPSCERT
	type public String CO,CRDNUM,CRDTYP,MCRDTYP,NAM,RM
	type Number AMODE,ASTAT,CID,CRSTAT,CSTAT,PRIMCRD,REFNUM,REPLACE,RSTAT
	type String CLS,GRP
		
	if FID="CRD" do {
		type RecordMPSREC mpsrec=Db.getRecord("MPSREC","PROCDATE=:XTJD,CRDTYP=:CRDTYP,CO=:CO,CRDNUM=:CRDNUM,FID=:FID,MODE=:MODE")
		set CID=mpsrec.refnum
		}
	if MODE=0,((MPSCERT=0)!(MPSCERT=2)) do {
		if FID="CRD" do {
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
			set CSTAT=crd.stat
			/* 
			Any new card records with a status of '3'-Ordered have
			been created manually by the client and MPS has already
			received the new card order via MVision.  Reset the
			status to '0'-Active, but don't include in the
			extract file as a new card record.
			*/
			if CSTAT=3 do { quit
				type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
				
				/*
				The card's status will be modified based on the
				value of the card type's creation status,
				unless the card creation status is '14'-PIN
				Activated.  A card creation status of 14 will
				still result in the card record being created 
				with a status of '0'-Active.  A creation status
				of 14 is only used in the extract file 
				reporting itself.
				SPG 12/03/01
				*/
				
				type RecordCRDTYP crdtyp=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP")
				set CRSTAT=+crdtyp.crtnstat
				if CRSTAT'=14 set crd.stat=CRSTAT
				else  set crd.stat=0
				do crd.bypassSave()
				}
			// Don't send closed (cancelled) card information  SPG 09/17/01
			if CSTAT=5 quit
	
			do GETADDR
	
			// SPG 11/09/01
			if RPLCRD.get() do {
				type RecordCRD rplcrd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
				set rplcrd.crdhld=NAM
				set rplcrd.co=CO
				do rplcrd.bypassSave()
				}
	
			do BREC21(.io)
			do BREC31(.io)
			do BREC32(.io)
			do BREC33(.io)
			do BREC41(.io)
			do BREC42(.io)

			type ResultSet rs=Db.select("CID,GRP,MODE,PRIMCRD","MPSREC1","CRDTYP=:CRDTYP AND CRDNUM=:CRDNUM AND CO=:CO AND PROCDATE=:XTJD")
			if rs.isEmpty() set RM=$$^MSG(3055) do EXC quit
			set AMODE=MODE
			if MCRDTYP'="JCD" do {
				do BREC51F(.io)
				do BREC53(.io)
				}
			while rs.next() do {
				set CID=rs.getCol(1)
				set GRP=rs.getCol(2)
				set AMODE=rs.getCol(3)
				set PRIMCRD=rs.getCol(4)
				// Don't include accounts funded/closed on same day
				type RecordACN acn=Db.getRecord("ACN","CID=:CID")
				if acn.stat=4 quit
				set CLS=acn.cls
				do BREC51(.io)
				// Update CMSFLG
				if RSTAT>1,RSTAT<5 do UPDATE
				}
			}
		}
	
	if RPLCRD.get() quit
	
	// Modify section
	if MODE=1,MPSCERT>0 do {
		if FID="CRD" do {
			//Quit if create and edit on same day
			type RecordMPSREC mpsrec=Db.getRecord("MPSREC","PROCDATE=:XTJD,CRDTYP=:CRDTYP,CO=:CO,CRDNUM=:CRDNUM,FID=:FID,MODE=0")
			if mpsrec.getMode() quit

			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
			set CSTAT=crd.stat
	
			// Don't send closed (cancelled) card information  SPG 09/17/01
			if CSTAT=5 quit

			do GETADDR
			do BREC21(.io)
			do BREC31(.io)
			do BREC32(.io)
			do BREC33(.io)
			do BREC41(.io)

			type ResultSet rs=Db.select("CID,GRP,MODE,PRIMCRD","MPSREC1","CRDTYP=:CRDTYP AND CRDNUM=:CRDNUM AND CO=:CO AND PROCDATE=:XTJD")
			set AMODE=MODE
			if MCRDTYP'="JCD" do {
				do BREC51F(.io)
				do BREC53(.io)
				}
			while rs.next() do {
				new CLS
				set CID=rs.getCol("CID")
				set GRP=rs.getCol("GRP")
				set AMODE=rs.getCol("MODE")
				set PRIMCRD=rs.getCol("PRIMCRD")
				// Don't include accounts funded/closed on same day
				type RecordACN acn=Db.getRecord("ACN","CID=:CID")
				if acn.stat=4 quit
				do BREC51(.io)
				}
			}
		if FID="ACN" do {
			//Quit if modify card record exist
			type RecordMPSREC mpsrec=Db.getRecord("MPSREC","PROCDATE=:XTJD,CRDTYP=:CRDTYP,CO=:CO,CRDNUM=:CRDNUM,FID=:FID,MODE=1")
			if mpsrec.getMode() quit
			do GETADDR
			do BREC21(.io)
			do BREC31(.io)
			do BREC32(.io)
			do BREC33(.io)
			}
		if FID="CID" do {
			//Quit if modify card and cid records exist
			type RecordMPSREC mpsrec=Db.getRecord("MPSREC","PROCDATE=:XTJD,CRDTYP=:CRDTYP,CO=:CO,CRDNUM=:CRDNUM,FID='CRD',MODE=1")
			type RecordMPSREC mpsrec1=Db.getRecord("MPSREC","PROCDATE=:XTJD,CRDTYP=:CRDTYP,CO=:CO,CRDNUM=:CRDNUM,FID='ACN',MODE=1")
			if mpsrec.getMode(),mpsrec1.getMode() quit
			do BREC21(.io)	
	
			set CID=REFNUM
			type RecordACN acn=Db.getRecord("ACN","CID=:CID")
			set CLS=acn.cls
			set GRP=acn.grp
			set ASTAT=acn.stat
			// Remove account if account status is not active
			if ASTAT'=0 set AMODE=3	
			// Add it if account set to active
			else  set AMODE=0	
	
			if MCRDTYP'="JCD" do {
				do BREC51F(.io)
				do BREC53(.io)
				}
			do BREC51(.io)

			}
		}
	if REPLACE.get() do REPLACE^MPSRECU(.CRDTYP,.CRDNUM,ACN,XTJD,.RPLCRD)
	if RPLCRD.get() set MODE=0 do NEWCRD 
	
	quit
	

GETADDR	//

	type public String CRDNUM,CRDTYP,X
	type Number ACN,STAT,REPLACE,RSTAT
	type String BPH,CRDHLD,FNAME,HPH,LNM,MAD1,MAD2,MCITY,MNAME,MSTATE,MZIP,MCNTRY,NAM,ONAM,SUFFIX,TAXID
	
	set ONAM=""
	
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set ACN=crd.acn
	set NAM=crd.crdhld
	set MAD1=crd.mad1
	set MAD2=crd.mad2
	set MCITY=crd.mcity
	set MSTATE=crd.mstate
	set MZIP=crd.mzip
	set RSTAT=crd.stat
	set MCNTRY=crd.mcntry
	
	// If no address exists on the card level, load address from CIF/ACNADDR
 
        if ((MAD1="")&(MAD2="")&(MCITY="")&(MSTATE="")&(MZIP="")&(MCNTRY="")) do LOADADDR
	if MCNTRY="" set MCNTRY="US"
	
	if MAD1.length()>26 set MAD1=$$TRUNCADD($$UPPER^%ZFUNC(MAD1))
	if MAD2.length()>26 set MAD2=$$TRUNCADD($$UPPER^%ZFUNC(MAD2))
	
	type RecordUTBLCRDSTAT crdstat=Db.getRecord("UTBLCRDSTAT","CRDST=:RSTAT")
	set REPLACE=crdstat.replace
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
	
	// If cardholder name is empty, use name from CIF
	
	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID='CIF',DI='CRDNAM'")
        if dbtbl1d.getMode() do {
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")        	
	        set ONAM=cif.crdnam
        	}
         
        if ONAM'="" set NAM=ONAM.extract(1,30)
	if NAM="" set NAM=cif.nam
	
	set TAXID=cif.taxid
	set HPH=cif.hph
	set BPH=cif.bph
	set FNAME=cif.fname
	set MNAME=cif.mname
	set LNM=cif.lnm
	set SUFFIX=cif.suffix
	
	// Will only truncate CIF.NAM using FNAME,MNAME,LNM,SUFFIX
	if NAM.length()>30 set NAM=$$TRUNCNAM(FNAME,MNAME,LNM,SUFFIX)
	
	quit


LOADADDR        // Load Address if not in Card File
 	
 	type public Number ACN
 	type public String CO,CRDNUM,CRDTYP,MAD1,MAD2,MCITY,MSTATE,MZIP,MCNTRY
 	type Number PCID,TYPE
        type String ADDR
        set (ADDR,PCID)=0
 
        // If using account level address, use primary account on the card.
        type ResultSet rs=Db.select("CID","CRDGRP","CRDTYP=:CRDTYP AND CRDNUM=:CRDNUM AND PRIMCRD=1")
 
	while rs.next() do {
                set PCID=rs.getCol("CID")
                type RecordACN acn=Db.getRecord("ACN","CID=:PCID")
                set TYPE=acn.type
                
		/*
		If an account level address does not exist for the primary
		account, don't set ADDR regardless of the option being used.
		*/
		type RecordACNADDR acnaddr=Db.getRecord("ACNADDR","CID=:PCID")
		if 'acnaddr.getMode() quit
		type RecordUTBLMPSPROD mpsprod=Db.getRecord("UTBLMPSPROD","CO=:CO,CARDTYP=:CRDTYP,TYP=:TYPE")
                set ADDR=mpsprod.acnaddr
                }
 
        /*
        Use CIF address if no primary account is defined, or by option, the
        CIF level address is supposed to be used.
        */
        if 'ADDR do { quit
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
                set MAD1=cif.mad1
                set MAD2=cif.mad2
                set MCITY=cif.mcity
                set MSTATE=cif.mstate
                set MZIP=cif.mzip
                set MCNTRY=cif.mcntry
                }
 
        /*
        Use Account Level Address if primary account is defined.  Option
        would be set to indicate the account level address is supposed to
        be used and one exists for the primary account (ADDR=1).
        */
        if PCID do {

                type RecordACNADDR acnaddr=Db.getRecord("ACNADDR","CID=:PCID")
		
                set MAD1=acnaddr.ad1
                set MAD2=acnaddr.ad2
                set MCITY=acnaddr.city
                set MSTATE=acnaddr.state
                set MZIP=acnaddr.mzip
                set MCNTRY=acnaddr.cntry
                }
	
        quit
	
	
UPDATE	//
	
	type public Number ACN,CID,CRSTAT
	type public String CRDNUM,CRDTYP

	// Update CRD.STAT to active
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	
	/*
	The card's status will be modified based on the
	value of the card type's creation status,
	unless the card creation status is '14'-PIN
	Activated.  A card creation status of 14 will 
	still result in the card record being created 
	with a status of '0'-Active.  A creation status 
	of 14 is only used in the extract file reporting 
	itself.
	SPG 12/03/01
	*/
	
	type RecordCRDTYP crdtyp=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP")
	set CRSTAT=+crdtyp.crtnstat
	if CRSTAT'=14 set crd.stat=CRSTAT
	else  set crd.stat=0
	do crd.bypassSave()

	// Update ACN.CMSFLG
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	set acn.cmsflg=1
	do acn.bypassSave()

	// Update CIF.CMSFLG
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
	set cif.cmsflg=1
	do cif.bypassSave()

	quit

EXC	// Log error to DAYEND
	
	type public String CRDNUM,ET,%FN,RM
	type public Number %ZTSEQ
	type String DESC
	
	type RecordSCATBL scatbl=Db.getRecord("SCATBL","FN=:%FN")
	set DESC=scatbl.desc
	do LOG^UTLEXC($T(+0),"*",DESC,CRDNUM.get(),%ZTSEQ.get(),RM.get())
	kill RM,%ZTSEQ
	
	quit


FILLAST(N)	// Fill with Asterisks
	
	quit N.justify("").translate(" ","*") 
	

FILLBLK(N)	// Fill with Blanks

	quit N.justify("")

SPACE(VAL,N)	// Pad on right with spaces
	
	quit $$LJ^%ZTEXT(VAL,N,,1)

ZEROS(VAL,N)	// Pad on left with zeroes
	
	quit $$RJ^%ZTEXT(VAL,N,0,1)

REMDSH(FLD)	// Remove dashes and other characters

	/*
	Remove dashes from numeric fields (e.g. Tax ID, Phone Number, etc.)
	Also remove "/" or "\" or " " or etc.
	*/
	
	quit FLD.translate("!@#$%^&*()-_=+/\ ","")
	
CHKDIG(PAN)	// Check digit

	type Number I,PANLEN,REM,TOTAL
	type String CHAR,CHKDIG,TOP,WS,X
	
	set PANLEN=PAN.length()+1
	set TOP="",TOTAL=0
        
        if PANLEN#2=0 set WS=2
	else  set WS=1
	
        for I=1:1:PANLEN-2 do {
		if WS.extract(I)=1 set WS=WS_"2"
		if WS.extract(I)=2 set WS=WS_"1"
		}

        for I=1:1:PANLEN-1 do {
		set X=PAN.extract(I)*$E(WS,I)
		set TOP=TOP_X
		}

        for I=1:1:TOP.length() do {
		set CHAR=TOP.extract(I)
		set TOTAL=TOTAL+CHAR
		}
		
	set REM=TOTAL#10
	set CHKDIG=10-REM
	if CHKDIG>9 set CHKDIG=CHKDIG.extract(CHKDIG.length())
	
	quit CHKDIG


TRUNCNAM(FNM,MNM,LNM,SFX)	// Shorten Name to 30 Characters or less

	/*
	  This code will generate the Customer Full Name based on the
	  structured name fields First, Middle, Last, and Suffix.
	  If structured name logic is not used Customer Full Name will be
	  truncated to 30.
	  The middle name will be replaced with an initial and if the
	  length still exceeds 30, the first name will be truncated.
	*/
	
	type public String NAM
	type String MI,P1
	new FL,ML,LL,SL,LEN,SPACE

	// Structured Name logic not used
	if FNM="" do { quit NAM
		new FP,L2,MP,N1,N2
		set LL=$L(LNM)
		set N1=$E(NAM,1,$F(NAM,LNM)-LL-1)	// Isolate LNM
		set N2=$E(NAM,$F(NAM,LNM)-LL,$L(NAM)),L2=$L(N2)

		// Check for no first name
		set MP=$L(N1," ")-1 if MP<1 set NAM=$E(NAM,1,30) quit

		// Trying with just middle initial
		set $P(N1," ",MP)=$E($P(N1," ",MP))
		if ($L(N1)+L2)'>30 set NAM=N1_N2 quit

		// Check if middle initial was first name
		set FP=$L(N1," ")-2 if FP<1 set NAM=$E(N1_N2,1,30) quit

		// Length still exceeds 30, truncate first name
		set P1=$E($P(N1," ",1,FP),1,30-L2-3)
		if P1="" set P1=$E(N1)
		set N1=P1_" "_$P(N1," ",MP)_" "
		set NAM=$E(N1_N2,1,30)
		}
	set FL=$L(FNM),ML=$L(MNM),LL=$L(LNM),SL=$L(SFX)
	set SPACE=$S(FL>0:1,1:0)+$S(ML>0:1,1:0)+$S(SL>0:1,1:0)
	set MI=$E(MNM),LEN=$L(MI)+LL+SL+SPACE

	// Trying with just middle initial
	if (FL+LEN)'>30 Q $S(FNM'="":FNM_" ",1:"")_$S(MNM'="":MI_" ",1:"")_LNM_$S(SFX="":"",1:" "_SFX)

	// Length still exceeds 30, truncate first name
	quit $E(FNM,1,(30-LEN))_" "_$S(MNM'="":MI_" ",1:"")_LNM_$S(SL>0:" "_SFX,1:"")


TRUNCADD(ADDR)	// Shorten Address to 26 or fewer characters
	
	type public String TRANA()
	type String FIELD
	type Number I
	
	for I=1:1:$L(ADDR," ") set FIELD=ADDR.piece(" ",I) if TRANA(FIELD).exists() set ADDR.piece(" ",I)=TRANA(FIELD)
	
        quit ADDR.extract(1,26)
	
	
BREC21(IO io)	// Build Record 2-1	Card Record Identifier

	/*
	  Card Status 			MPS Reason Code
	  0 - Active			" " - Normal Status
	  1 - Hot			"J" - Warm Card, Reject All Transactions
	  2 - Order Pending		
	  3 - Ordered
	  4 - Issued, Not Active	" " - Normal
	  5 - Cancelled			" " - Normal, CLOSE card
	  6 - Expiration Pending	" " - Normal
	  7 - Renewal			" " - Normal
	  8 - Lost			"J" - Warm Card, Reject All Transactions
	  9 - Stolen			"S" - Stolen
         10 - Damaged			"R" - Return of Plastics Requested
	 11 - Blocked			"V" - Permanent Restraint
	 12 - Expired			"V" - Permanent Restraint
	 13 - Declined			"W" - Bad Debt
	*/
	
	type public Number CRDCNT,RECCNT
	type public String CRDNUM,CRDTYP,MAD1,MAD2,MCITY,MCNTRY,MSTATE,MZIP,TAXID
	type Number MODE
	type String NAM
	
	new FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8,FLD9,FLD10,REC21,CRTNSTAT,HOT,STAT
	set FLD1="02"				//Record Type
	set FLD2="01"				//Record Sub Type
	set FLD3=$G(CRDNUM)			//Card Number - Length 20
	set FLD3=$$SPACE(FLD3,20)
	
	type RecordCRD xcrd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set STAT=xcrd.stat
	if MODE=0 set FLD4="1"			//Activity Type 1 - open card
	if MODE=1 set FLD4="2"			//		2 - update card
						//		3 - close card

	// if MODE=3,$G(FID)="CRD" set FLD4="3"	
	// if MODE=3,$G(FID)="CID" set FLD4="2"	

	/* 
	Commented out the above two lines.  We never get in this section if
	MODE=3 indicating that a card is being deleted.    SPG 09/17/01
	*/
	
	set FLD5=" "				//Reason Code
	if $G(STAT)=0 set FLD5=" "
	if $G(STAT)=1 set FLD5="J"		//Warm Card, Reject All Transactions
	if $G(STAT)=4 set FLD5=" "
	if $G(STAT)=5 set FLD4="3"		//CRD.STAT=5=Cancelled CLOSE CARD
	if $G(STAT)=5 set FLD5=" "		
	if $G(STAT)=6 set FLD5=" "
	if $G(STAT)=7 set FLD5=" "
	if $G(STAT)=8 set FLD5="F"		//Lost in mail
	if $G(STAT)=9 set FLD5="S"		//Stolen
	if $G(STAT)=10 set FLD5="R"		//Return of Plastics Requested
	if $G(STAT)=11 set FLD5="V"		//Permanent Restraint
	if $G(STAT)=12 set FLD5="V"		//Permanent Restraint
	if $G(STAT)=13 set FLD5="W"		//Bad Debt
	if MODE=0 do {
		type RecordCRDTYP crdtyp=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP")
		set CRTNSTAT=crdtyp.crtnstat
		}
	if $G(CRTNSTAT)=14 set FLD5="O"		//Pin Activated
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set HOT=crd.hot
	if HOT set FLD5="J"

	// Replace dash with space
	if $G(NAM)["-" set NAM=$TR(NAM,"-"," ")
	set FLD6=$G(NAM)			//Customer Name
	set FLD6=$$SPACE(FLD6,30)
	if MODE=0 set FLD7="1"			//Activity Type	0 - update or no change
	else  set FLD7="0"			//		1 - open customer, 2 - change customer name
	set FLD8="1"				//Customer Type

	new ACN1
	if $G(TAXID)="" do {
		type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
		set ACN1=crd.acn
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN1")
		set TAXID=cif.taxid
		}
	set FLD9=$G(TAXID)			//Customer Social Security No.
	set FLD9=$$REMDSH(FLD9)
	if $L(FLD9)<9 set FLD9=$$ZEROS(FLD9,9)
	set FLD10=$$FILLAST(13)			//Unused
	set REC21=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7_FLD8_FLD9_FLD10
	do io.write(.REC21)
	set CRDCNT=$G(CRDCNT)+1
	set RECCNT=$G(RECCNT)+1
	quit

BREC31(IO io)	// Build Record 3-1	Customer Information
	
	type public Number RECCNT
	type public String MAD1,MAD2,MCITY,MCNTRY,MSTATE,MZIP
	
	new FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD41,FLD42,REC31
	set FLD1="03"				//Record Type
	set FLD2="01"				//Record Sub Type
	set FLD3=$G(MAD1)			//Street Address
	set FLD3=$$SPACE(FLD3,30)
	// Foreign address
	if $G(MCNTRY)'="US" do {
		set MAD2=$G(MCITY)_"  "_$G(MSTATE)
		type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:MCNTRY.get()")
		set FLD41=cntry.desc
		set FLD41=$TR(FLD41," ","")
		if $L($G(MZIP))=0 set FLD41=$E(FLD41,1,25)
		else  set FLD41=$E(FLD41,1,24-$L($G(MZIP)))
		set FLD42=$G(MZIP)
		set FLD5="99999"
		}
	else  do {
		set FLD41=$G(MCITY)		//City/State
		set FLD42=$G(MSTATE)
		set FLD5=$E($G(MZIP),1,5)	//Zip Code
		}
	set FLD4=FLD41_" "_FLD42
	set FLD4=$$SPACE(FLD4,25)
	set FLD5=$$REMDSH(FLD5)			//Remove "-"s
	set FLD5=$$SPACE(FLD5,5)
	set FLD6=$$FILLAST(16)			//Unused
	set REC31=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6
	do io.write(.REC31)
	set RECCNT=$G(RECCNT)+1
	quit


BREC32(IO io)	// Build Record 3-2	Customer Information

	/*
	Commented out the following line.  Need to send 0302 record
	regardless of whether or not the information is null.   SPG 09/17/01
	*/
	// quit:$G(MAD2)=""		//No 3-2 record necessary if no address supp.
	
	type public Number RECCNT
	type public String MAD2
		
	new FLD1,FLD2,FLD3,FLD4,FLD5,REC32
	set FLD1="03"			//Record Type
	set FLD2="02"			//Record Sub Type
	set FLD3=$$FILLBLK(30)		//Customer Name Extension
	set FLD4=$G(MAD2)		//Address Supplement
	set FLD4=$$SPACE(FLD4,30)
	set FLD5=$$FILLBLK(16)		//Unused
	set REC32=FLD1_FLD2_FLD3_FLD4_FLD5
	do io.write(.REC32)
	set RECCNT=$G(RECCNT)+1
	quit

BREC33(IO io)	// Build Record 3-3	Customer Information

	type public Number RECCNT
	type public String BPH,CO,HPH,CRDNUM,CRDTYP
	type Date INCPDT,UINCPDT
		
	new ACN1,FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,REC33
	
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set ACN1=crd.acn	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN1")
	set INCPDT=cif.incpdt
	type RecordUTBLMPS utblmps=Db.getRecord("UTBLMPS","CO=:CO,CARDTYP=:CRDTYP")
	set UINCPDT=utblmps.incpdt
	// No 3-3 record needed
	quit:($G(HPH)="")&($G(BPH)="")&($G(UINCPDT)'=1)
	set FLD1="03"			// Record Type
	set FLD2="03"			// Record Sub Type
	set FLD3=$G(HPH)		// Home Phone
	set FLD3=$$REMDSH(FLD3)		// Remove "-"s or "/" or "()" around phone #s
	set FLD3=$$ZEROS(FLD3,10)	// Pad on left with zeros
	set FLD4=$G(BPH)		// Business Phone
	set FLD4=$$REMDSH(FLD4)
	set FLD4=$$ZEROS(FLD4,10)
	set FLD5=$$FILLAST(16)		// Customer ID
	if UINCPDT set FLD6=INCPDT.toString("YEARMMDD")
	else  set FLD6=$$FILLAST(8)	// Member Since Date (YYYYMMDD)
	set FLD6=$$SPACE(FLD6,8)
	set FLD7=$$FILLAST(32)		// Unused
	set REC33=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7
	do io.write(.REC33)
	set RECCNT=$G(RECCNT)+1
	quit

BREC41(IO io)	// Build Record 4-1	Card Information
	//quit			//at first implementation, all defaults will be used
				//so no 4-1 record is necessary.
	
	type public Number RECCNT			
	type public String CO,CRDNUM,CRDTYP				

	new DATA,FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8,FLD9,FLD10,FLD11,REC41
	new CRDLMT,DATA,OFFLIMCRD,ONATMLMT,OFFATMLMT,ONPOSLMT,OFFPOSLMT
	set FLD1="04"					//Record Type
	set FLD2="01"					//Record Sub Type
	
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set CRDLMT=crd.lmt
	if CRDLMT="" set FLD3=$$FILLBLK(9)
	else  set FLD3=$$ZEROS($P(CRDLMT,".",1),9)	//Card Limit
	type RecordUTBLMPS utblmps=Db.getRecord("UTBLMPS","CO=:CO,CARDTYP=:CRDTYP")
	set OFFLIMCRD=utblmps.offlimcrd
	set ONATMLMT=utblmps.onatmlmt
	set OFFATMLMT=utblmps.offatmlmt
	set ONPOSLMT=utblmps.onposlmt
	set OFFPOSLMT=utblmps.offposlmt

	if ONATMLMT="" set FLD4=$$FILLBLK(9)		//Cash W/d Limit
	else  set FLD4=$$ZEROS($P(ONATMLMT,".",1),9)	//Cash W/d Limit 9/19/00 CHOK

	if ONPOSLMT="" set FLD5=$$FILLBLK(9)		//POS W/d Limit
	else  set FLD5=$$ZEROS($P(ONPOSLMT,".",1),9)	//POS W/d Limit

	set FLD6=$$FILLBLK(9)				//Bill Pmt Limit

	if OFFLIMCRD="" set FLD7=$$FILLBLK(9)		//Secondary Card Limit
	else  set FLD7=$$ZEROS($P(OFFLIMCRD,".",1),9)	//Secondary Card Limit

	if OFFATMLMT="" set FLD8=$$FILLBLK(9)		//Secondary Cash W/d Limit
	else  set FLD8=$$ZEROS($P(OFFATMLMT,".",1),9)	//Secondary Cash W/d Limit

	if OFFPOSLMT="" set FLD9=$$FILLBLK(9)		//Secondary POS W/d Limit
	else  set FLD9=$$ZEROS($P(OFFPOSLMT,".",1),9)	//Secondary POS W/d Limit

	set FLD10=$$FILLBLK(9)				//Scondary Bill Pmt Limit
	set FLD11=$$FILLAST(4)				//Unused
	set REC41=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7_FLD8_FLD9_FLD10_FLD11
	do io.write(.REC41)
	set RECCNT=$G(RECCNT)+1
	quit

BREC42(IO io)	// Build Record 4-2	Card Information
	
	type public Date EXPDT
	type public Number RECCNT
	type public String CRDNUM,CRDTYP,MCRDTYP
	type String CRDPL

	new FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8,FLD9,FLD10,FLD11,FLD12,FLD13,FLD14,REC42
	new PINGEN,ENCPIN,PININD
	set FLD1="04"						//Record Type
	set FLD2="02"						//Record Sub Type
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set EXPDT=crd.expdt
	if EXPDT'="" set FLD3=EXPDT.toString("YYMM")		//Expiration Date
	else  set FLD3=$$FILLBLK(4)
	set FLD4=$$FILLBLK(1)					//Privilege Date
	set FLD5=$$FILLBLK(1)					//Fee Assessment Code
	set FLD6=$$FILLBLK(3)					//Default Account Type
	type RecordCRD xcrd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set PINGEN=xcrd.pingen
	set ENCPIN=xcrd.encpin
	set PININD=xcrd.pinind
	
	/* 
	Initialize all the following fields to spaces if PINGEN is not defined.
	SPG 09/17/01
	*/
	set FLD7=$$FILLBLK(1)			//ATM PIN Offset Indicator
	set FLD8=$$FILLBLK(16)			//ATM PIN/Offset
	set FLD11=$$FILLBLK(1)			//Card/PIN Creation Code
        set FLD12=$$FILLBLK(1)			//Number of Cards	
	
	/*
	   PINGEN 1=Customer defined PIN
	   PINGEN 2=System generated PIN
	*/
	if $G(PINGEN)=1 do {
		/*
			PININD 
			1 = PIN (Clear)
			2 = DES Offset (Clear)
			3 = PIN Encrypted (Hex representation)
			4 = PIN Encrypted (Character representation of hex)
			5 = Offset Encrypted (Hex representation)
			6 = Offset Encrypted (Character representation of hex)
		*/

		// If PININD is null, we assume a PIN was set up as clear text
		if PININD="" set FLD7="1"			//ATM PIN Offset Indicator
		else  set FLD7=PININD
		set FLD8=$$SPACE(ENCPIN,16)			//ATM PIN/Offset
		//5=Card Only
		set FLD11="5"					//Card/PIN Creation Code
		if MCRDTYP="JCD" set FLD12="1"		//Number of Cards
		else  set FLD12=$$FILLBLK(1)
		}
	if $G(PINGEN)=2 do {
		if MCRDTYP="JCD" do {				//ATM ATM/Offset Indicator
			set FLD7=$$FILLBLK(1)
			set FLD8=$$FILLBLK(16)			//ATM PIN/Offset
			//2=PIN & Card
			set FLD11="2"				//Card/PIN Creation Code
			set FLD12="1"				//Number of Cards
			}
		else  do {
			set FLD7="7"				//MPS Generated PIN/OFFSET	
			set FLD8=$$FILLBLK(16)			//ATM PIN/Offset
			set FLD11=$$FILLBLK(1)			//Card/PIN Creation Code
                        set FLD12=$$FILLBLK(1)			//Number of Cards
			}
		}
	set FLD9=$$FILLBLK(1)					//Audio PIN/Offset Indicator
	set FLD10=$$FILLBLK(16)					//Audio PIN/Offset
	set FLD13=$$FILLBLK(26)					//Secondary Name
	type RecordCRD crd1=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	set CRDPL=crd1.crdpl
	if CRDPL="" set FLD14=$$FILLAST(5)			//Card Plastic type
	else  set FLD14=$$SPACE($E(CRDPL,1,3),3)_$$FILLAST(2)
	set REC42=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7_FLD8_FLD9_FLD10_FLD11_FLD12_FLD13_FLD14
	do io.write(.REC42)
	set RECCNT=$G(RECCNT)+1
	quit


BREC51F(IO io)	// Build Record 5-1	Cross Reference

	type public Number AMODE,RECCNT
	type public String CO,CRDNUM,CRDTYP,MCRDTYP,PRIMCRD
	
	new FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8,FLD9,FLD10,FLD11,FLD12,FLD13,FLD14,REC51F
	new DATA,FA,IA,TA,DA,RA
	set FLD1="05"			//Record Type
	set FLD2="01"			//Record Sub Type
	if AMODE=0 set FLD3=2		//Connection Status
	if AMODE=1 set FLD3=1		//1=Upate,2=Add,3=Remove
	if AMODE=3 set FLD3=3

	//Account File ID (BAC,MCC,RCA)
	if MCRDTYP="FTS" set FLD4="BAC"
	if MCRDTYP="MCD" set FLD4="MCC"
	if MCRDTYP="RCD" set FLD4="RCA"
	set FLD5=$G(CRDNUM)		//Account Number - Card Number
	set FLD5=$$SPACE(FLD5,20)
	type RecordUTBLMPS utblmps=Db.getRecord("UTBLMPS","CO=:CO,CARDTYP=:CRDTYP")
	set FA=utblmps.fa
	set IA=utblmps.ia
	set TA=utblmps.ta
	set DA=$G(PRIMCRD)
	set FLD6=" "			//FROM Authority
	set FLD7=$S(IA=1:"Q",1:" ")	//INQUIRY Authority
	set FLD8=" "			//TRANSFER Authority
	set FLD9="D"
	//if DA set FLD9="D"		//DEFAULT Authority   SPG 9/14/00
	//else  set FLD9=" "		// CHOK 9/19/00
	set FLD10=$$FILLBLK(1)		//READY RESERVE Authority
	set FLD11=$$FILLAST(3)		//Unused
	set FLD12=$$FILLBLK(1)		//Account Index
	set FLD13=""			//Account Name
	set FLD13=$$SPACE(FLD13,20)
	set FLD14=$$FILLAST(23)		//Unused
	set REC51F=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7_FLD8_FLD9_FLD10_FLD11_FLD12_FLD13_FLD14
	do io.write(.REC51F)
	set RECCNT=$G(RECCNT)+1
	quit

BREC51(IO io)	// Build Record 5-1	Cross Reference
	
	type public Number AMODE,CID,RECCNT
	type public String CLS,CO,CRDTYP,GRP,MCRDTY,PRIMCRD,MCRDTYP

	new FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8,FLD9,FLD10,FLD11,FLD12,FLD13,FLD14,REC51
	new DATA,FA,IA,TA,DA
	set FLD1="05"			//Record Type
	set FLD2="01"			//Record Sub Type
	if AMODE=0 set FLD3=2		//Connection Status
	if AMODE=1 set FLD3=1		//1=Upate,2=Add,3=Remove
        if AMODE=3 set FLD3=3
	if CLS="L" do {					// SPG 3/29/01
		if MCRDTYP="FTS" set FLD4="BAC"
		if MCRDTYP="MCD" set FLD4="MCC"
		if MCRDTYP="RCD" set FLD4="RCA"
		}
	if CLS="D" set FLD4=GRP			// Account File ID (DDA,SAV)
	set FLD5=$G(CID)		//Account Number
	set FLD5=$$SPACE(FLD5,20)
	type RecordUTBLMPS utblmps=Db.getRecord("UTBLMPS","CO=:CO,CARDTYP=:CRDTYP")
	set FA=utblmps.fa
	set IA=utblmps.ia
	set TA=utblmps.ta
	set DA=$G(PRIMCRD)
	set FLD6=$S(FA=1:"F",1:" ")     //FROM Authority
	set FLD7=$S(IA=1:"Q",1:" ")     //INQUIRY Authority
	set FLD8=$S(TA=1:"T",1:" ")     //TRANSFER Authority	
	set FLD9=$S(DA=1:"D",1:" ")	//DEFAULT Authority
	//if DA set FLD9="D"		//DEFAULT Authority  SPG 9/14/00
	//else  set FLD9=" "		// CHOK 9/19/00
	set FLD10=$$FILLBLK(1)		//READY RESERVE Authority
	set FLD11=$$FILLAST(3)		//Unused
	set FLD12=$$FILLBLK(1)		//Account Index
        set FLD13=""			//Account Name
	set FLD13=$$SPACE(FLD13,20)
	set FLD14=$$FILLAST(23)		//Unused
	set REC51=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7_FLD8_FLD9_FLD10_FLD11_FLD12_FLD13_FLD14
	do io.write(.REC51)
	set RECCNT=$G(RECCNT)+1
	quit



BREC53(IO io)	// Build Record 5-3	Credit Account Information

	type public Number RECCNT
	type public String CO,CRDNUM,CRDTYP,MCRDTYP

	new FLD1,FLD2,FLD3,FLD4,FLD5,FLD6,FLD7,FLD8,FLD9
	new FLD10,FLD11,FLD12,FLD13,FLD14,FLD15,REC53
	new CRLMT,TYPE
	set FLD1="05"			//Record Type
	set FLD2="03"			//Record Sub Type
	//Account File ID
	if MCRDTYP="FTS" set FLD3="BAC"	//Visa
	if MCRDTYP="MCD" set FLD3="MCC"	//Mastercard
	if MCRDTYP="RCD" set FLD3="RCA"	//Revolving credit
	set FLD4=$G(CRDNUM)		//Account Number
	set FLD4=$$SPACE(FLD4,20)
	set FLD5=$$FILLBLK(1)		//Status Code
	//set CRLMT=Db.getOneRow("CRLMT","LN","CID")
	set FLD6=$$FILLAST(5)		//Credit Line
	set FLD7=$$FILLBLK(2)		//Number of Plastics
	type RecordUTBLMPS utblmps=Db.getRecord("UTBLMPS","CO=:CO,CARDTYP=:CRDTYP")
	set FLD8=utblmps.ccrnc
	if FLD8="" set FLD8=4		//Renewal Code
	set FLD9=$$FILLBLK(2)		//Rate Option
	set FLD10=$$FILLBLK(1)		//Type of Plastic
	set FLD11=$$FILLBLK(26)		//Secondary Customer Name
	set FLD12=$$FILLBLK(9)		//Secondary Social Sec. Number
	set FLD13=$$FILLBLK(1)		//Forced Embossing Code
	set FLD14=$$FILLBLK(2)		//Number of Cards to Create
	set FLD15=$$FILLAST(3)		//Unused
	set REC53=FLD1_FLD2_FLD3_FLD4_FLD5_FLD6_FLD7_FLD8_FLD9
	set REC53=REC53_FLD10_FLD11_FLD12_FLD13_FLD14_FLD15
	do io.write(.REC53)
	set RECCNT=$G(RECCNT)+1
	quit

ZEROREC(XCO,MCRDTYP)	// Create zero record file

	type public Date XTJD
	type public IO io
	new CRDCNT,RECCNT,TODAY
	set %UserID="BATCH"
	set CRDCNT=0,RECCNT=0
	set TODAY=XTJD.toString("MMDDYY")
	do BREC1(.io)                   // Build file header
	do BREC99(.io)                  // Build file trailer
	quit

	
RECSORT	// Build sort file from MPSREC (called from OPEN section)
	
	type public Number MODE, REFNUM, SCHPID
	type public String CO, CRDNUM, CRDTYP, FID
	
	type String MCRDTYP, MCRDTYP1, XCO
	
	type RecordUTBLMPS utblmps = Db.getRecord("UTBLMPS", "CO = :CO, CARDTYP = :CRDTYP")
	
	set MCRDTYP = utblmps.mpscrd
	
	set XCO = $$XCO(CO)
	
	if (MCRDTYP.length() > 3) do {
		
		set MCRDTYP1 = MCRDTYP.extract(4,6)
		set MCRDTYP = MCRDTYP.extract(1,3)
	
		type RecordTMPRPT7 tmprpt7 = Db.getRecord("TMPRPT7", "PID=:SCHPID,KEY1=:XCO,KEY2=:MCRDTYP1,KEY3=:CO,KEY4=:CRDTYP,KEY5=:CRDNUM,KEY6=:FID,KEY7=:MODE", 1)
		
		if tmprpt7.getMode() quit
		
		set tmprpt7.data = REFNUM
		
		do tmprpt7.bypassSave()

		// Delete this MPS cardtype, so it won't generate zero record file
		do Db.delete("TMPRPT2", "PID=:SCHPID AND KEY1=:XCO AND KEY2=:MCRDTYP1")
		}

	quit:MCRDTYP.isNull()	
	
	// Build file sorted by Card Type to be used by the scheduler
	type RecordTMPRPT7 tmprpt7 = Db.getRecord("TMPRPT7", "PID=:SCHPID,KEY1=:XCO,KEY2=:MCRDTYP,KEY3=:CO,KEY4=:CRDTYP,KEY5=:CRDNUM,KEY6=:FID,KEY7=:MODE", 1)
	
	if tmprpt7.getMode() quit

	set tmprpt7.data = REFNUM
	
	do tmprpt7.bypassSave()

	// Delete this MPS cardtype, so it won't generate zero record file
	do Db.delete("TMPRPT2", "PID=:SCHPID AND KEY1=:XCO AND KEY2=:MCRDTYP")
	
	quit

	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	
	type public Boolean ER
	type public Number SCHPID
	type public String MCRDTYP,XCO
	type Number CRDCNT,RECCNT
	
	type public IO io=Class.new("IO")
	do IOFILE(.io) quit:ER.get()

	set XCO=vINPUT
	type ResultSet rs=Db.select("DISTINCT KEY1,KEY2","TMPRPT7","PID=:SCHPID AND KEY1=:XCO")
	while rs.next() do {
		set MCRDTYP=rs.getCol("KEY2")
		set CRDCNT=0,RECCNT=0

		do BREC1(.io)			
		// Build file header
		do DETAIL
		// Build file trailer
		do BREC99(.io)			
		}
		
	quit


DETAIL

	type public Date XTJD
	type public Number MODE,REFNUM,SCHPID
	type public String CO,CRDNUM,CRDTYP,FID,MCRDTYP,XCO
	
	type ResultSet rs=Db.select("KEY3,KEY4,KEY5,KEY6,KEY7,DATA","TMPRPT7","PID=:SCHPID AND KEY1=:XCO AND KEY2=:MCRDTYP")
	while rs.next() do {
		set CO=rs.getCol("KEY3")
		set CRDTYP=rs.getCol("KEY4")
		set CRDNUM=rs.getCol("KEY5")
		set FID=rs.getCol("KEY6")
		set MODE=rs.getCol("KEY7")
		set REFNUM=rs.getCol("DATA")
		do vPROC(XTJD,CRDTYP,CO,CRDNUM,FID,MODE)
		}

	quit
	

BREC1(IO io)	// Build Record 1	Header Information
	
	type public Date XTJD
	type public String MCRDTYP,TODAY,XCO	
	
	type Date FLD4
	type String FLD1,FLD2,FLD3,FLD5,REC1
	
	new FLD1,FLD2,FLD3,FLD4,FLD5,REC1,rs
	set TODAY=XTJD.toString("MM/DD/YY")
	//Record Type
	set FLD1="01"
	//MPS Institution ID					
	set FLD2=XCO				
	//MPS Institution ID
	set FLD2=$$SPACE(FLD2,4)		
	//File ID (JCD,FTS,MCD,RCD)
	set FLD3=MCRDTYP			
	//Posting Date
	set FLD4=TODAY				
	set FLD5=$$FILLAST(63)
	set REC1=FLD1_FLD2_FLD3_FLD4_FLD5
	do io.write(.REC1)
	
        quit


BREC99(IO io)	// Build Record 99	Trailer Information
	
	type public Number CRDCNT,RECCNT
	type public String XCO
	type Number FLD3,FLD4
	type String FLD1,FLD2,FLD5,REC99
	
	//Record Type
	set FLD1="99"			
	set FLD2=XCO
	//MPS Institution ID
	set FLD2=$$SPACE(FLD2,4)	
	//Number of Card Records Sent
	set FLD3=CRDCNT.get()		
	set FLD3=$$ZEROS(FLD3,8)
	//Number of Records Sent
	set FLD4=RECCNT.get()		
	set FLD4=$$ZEROS(FLD4,8)
	set FLD5=$$FILLAST(58)
	set REC99=FLD1_FLD2_FLD3_FLD4_FLD5
	do io.write(.REC99)
	
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	
	type public Number SCHPID
	type public String XCO
	
	
	type ResultSet rs=Db.select("KEY1","TMPRPT7","PID=:SCHPID AND KEY1>:XCO")
	if rs.next() set XCO=rs.getCol("KEY1")
	
	set vINPUT=XCO
	
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	
	type public Date ZEXDT
	type Date XTJD
	type Number CREATE,CREATE1,MODE,REFNUM,SCHPID
	type String CO,CRDNUM,CRDTYP,FID,MCRDTYP,MCRDTYP1,X,XCO
	
	set (CREATE,CREATE1,MODE,REFNUM,SCHPID)=0
	set (CO,CRDNUM,CRDTYP,FID,MCRDTYP,MCRDTYP1,X,XCO,XTJD)=""
	
	if CUVAR.MPSCERT.isNull() set %BatchExit=1 quit	

	if $$INTRACT^%ZFUNC do {	
		
		// In interactive mode
		set %TAB("ZEXDT")=$$DI^SCATAB("","Date",10,"","","","D")
		set %READ=",,ZEXDT#1",ZEXDT=%SystemDate-1
		do ^UTLREAD if VFMQ="Q" set %BatchExit=1 quit
		}

	if %BatchExit quit
	set XTJD=%SystemDate-1
	if ZEXDT.exists() set XTJD=ZEXDT
	else  set ZEXDT=XTJD
	set SCHPID=%ProcessID

	do Db.fastDelete("TMPRPT2","PID=:SCHPID")
	do Db.fastDelete("TMPRPT7","PID=:SCHPID")

	/*
	   Define all the MPSCRD stored in UTBLMPS.  Use for determining what
	   MPS card types need to be created in the file.
	*/

	type ResultSet rs=Db.select("DISTINCT CO,MPSCRD","UTBLMPS")
	if rs.isEmpty() set RM=$$^MSG(1660,"UTBLMPS"),%BatchExit=1 do EXC quit
	while rs.next() do {
		set CO=rs.getCol("CO")
		set MCRDTYP=rs.getCol("MPSCRD")
		if MCRDTYP.length()>3 do {
			set MCRDTYP1=MCRDTYP.extract(4,6)
			set MCRDTYP=MCRDTYP.extract(1,3)
	
                        type RecordTMPRPT2 tmprpt2=Class.new("RecordTMPRPT2")
			set XCO=$$XCO(CO)
			set tmprpt2.pid=SCHPID
                        set tmprpt2.key1=XCO
                        set tmprpt2.key2=MCRDTYP1
                        do tmprpt2.bypassSave()
			}
	
                type RecordTMPRPT2 tmprpt2=Class.new("RecordTMPRPT2")
		set XCO=$$XCO(CO)
		set tmprpt2.pid=SCHPID
                set tmprpt2.key1=XCO
                set tmprpt2.key2=MCRDTYP
                do tmprpt2.bypassSave()
 
		}
	
	type ResultSet rs=Db.select("CRDTYP,CO,CRDNUM,FID,MODE,REFNUM","MPSREC","PROCDATE=:XTJD")
	if rs.isEmpty() set CREATE=1
	while rs.next() do {
		set CRDTYP=rs.getCol("CRDTYP")
		set CO=rs.getCol("CO")
		set CRDNUM=rs.getCol("CRDNUM")
		set FID=rs.getCol("FID")
		set MODE=rs.getCol("MODE")
		set REFNUM=rs.getCol("REFNUM")

		do RECSORT
		
		if MODE=1,FID="ACN" do {

			type ResultSet rs=Db.select("CRDTYP,CRDNUM","CRD","ACN=:REFNUM")
			if rs.isEmpty() quit
			while rs.next() do {

				set CRDTYP=rs.getCol("CRDTYP")
				set CRDNUM=rs.getCol("CRDNUM")
				type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
				set CO=crd.co
				if CO="" set CO=$$GETCO1^MPSRECU(REFNUM,CO)
				do RECSORT
				}
			}
	
		if MODE=1,FID="CID" do {

			type ResultSet rs=Db.select("CARDTYPE,CARDNUM","ACNCRD","CID=:REFNUM")
			if rs.isEmpty() quit
			while rs.next() do {

				set CRDTYP=rs.getCol("CARDTYPE")
				set CRDNUM=rs.getCol("CARDNUM")
				type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
				set CO=crd.co
				if CO="" set CO=$$GETCO^MPSRECU(REFNUM)
				do RECSORT
				}
			}
		
		}

	// Set scheduler from MPSREC1
	type ResultSet rs=Db.select("CRDTYP,CO,CRDNUM,CID","MPSREC1","PROCDATE=:XTJD")
	if rs.isEmpty() set CREATE1=1
	while rs.next() do {
		set CRDTYP=rs.getCol("CRDTYP")
		set CO=rs.getCol("CO")
		set CRDNUM=rs.getCol("CRDNUM")
		set FID="CRD"
		set MODE=1
		set REFNUM=rs.getCol("CID")

		do RECSORT	
		}	

	if CREATE.get(),CREATE1.get() do CREATE

	quit


CREATE	// Call create zero file
	
	type public Boolean ER
	type public Date XTJD
	type public Number SCHPID
	type public String MCRDTYP,RM,XCO
	
	type public IO io=Class.new("IO")
	do IOFILE(.io) quit:$G(ER)
	
	type ResultSet rs=Db.select("KEY1,KEY2","TMPRPT2")
	while rs.next() do {
		
		set XCO=rs.getCol("KEY1")
		set MCRDTYP=rs.getCol("KEY2")
		do ZEROREC(XCO,MCRDTYP)
		}
	do io.close()
	set RM=$$^MSG(4309,XTJD.toString()),%BatchExit=1 do EXC
	do Db.fastDelete("TMPRPT2","PID=:SCHPID")

	quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("PROCDATE,CRDTYP,CO,CRDNUM,FID,MODE","MPSREC","TJD=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type Number MPSCERT
	type String TRANA()
	
	type public IO io=Class.new("IO")

	set %UserID="BATCH"
	set MPSCERT=CUVAR.mpscert
	
	type ResultSet rs=Db.select("KEY,RESPCDE1","UTBLEXTRSP1","INTRFACE='MPS'")

	while rs.next() set TRANA(rs.getCol("KEY"))=rs.getCol("RESPCDE1")
	
	quit


IOFILE(IO io)	// Open outgoing file
	/*
	  Open file for card extract, where the file name will be MPS_TODAY.TXT
	  For example: MPS_090100.TXT
	*/
	
	type public Date XTJD
	type public String ER,RM
	type Date TODAY
	type String DIR,FILE,IO,SPOOL
	
	set SPOOL=CUVAR.SPLDIR
	set TODAY=XTJD.toString("MMDDYY")
	set io.fileName="MPS_"_TODAY_".TXT"
	set io.fileName=$$FILE^%TRNLNM(io.fileName,SPOOL)
	set io.recordSize=1000
	set io.openParams="WRITE/NEWV"

	do io.open()
	if ER.get() do {
		set DIR=io.directory
		set FILE=io.fileName
		set IO=FILE
		set RM=$$^MSG(7878,IO) do EXC
		}

	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	type public IO io
	
	type ResultSet rs=Db.select("KEY1,KEY2","TMPRPT2","PID=:SCHPID")
	
	while rs.next() do ZEROREC(rs.getCol("KEY1"), rs.getCol("KEY2"))
 
	do io.close()
	
	quit


XCO(CO)	// Return Company Identification ID for Interface File
	
	type String IINUM
		
	type RecordUTBLCO utblco = Db.getRecord("UTBLCO", "CO = :CO")
	
	// MPS Institution ID
	set IINUM = utblco.eiid
	
	if IINUM.isNull() do {
		
		type RecordUTBLEXTINT utblextint = Db.getRecord("UTBLEXTINT", "INTRFACE = 'MPS'")
		
		// Institution Number
		set IINUM = utblextint.iin
		}
		
	if IINUM.isNull() set IINUM = CO
	
	quit IINUM
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 
 
	type public Number SCHPID = %ProcessID
	type public String XCO = ""
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	
	type public Number SCHPID
	
	do Db.fastDelete("TMPRPT2","PID=:SCHPID")
	do Db.fastDelete("TMPRPT7","PID=:SCHPID")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
