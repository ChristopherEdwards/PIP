CRDNUMGN(String CRDTYP,Number ACN,String OCRDNUM,Boolean REISSUE)	// Card Number Generation Routine

	/*
	   ORIG: BAILDONC - 10/27/97
	   DESC: Card Number Generation Routine

	   ARGUMENTS:
	   	. CRDTYP 	Card Type  		/TYP=T/REQ/MECH=VAL

	   	. ACN  		Customer Number  	/TYP=T/NOREQ

	   	. OCRDNUM 	Old Card Number  	/TYP=T/NOREQ

	   	. REISSUE 	Reissue Flag  		/TYP=L/NOREQ

	   RETURNS:

	   	. CRDNUM 	Card Number  		/TYP=T


	----- Revision History ------------------------------------------------
	
	01/20/05 - SPR - CR18555
		   Card Management - General DBI3 System Area Clean up.
	
	11/17/05 - Sreeram Panyaram - CR18105
		   Removed BCOID^CRDNUMGN. 	
	
        07/27/05 - SkariahV- CR16679
	           Removed #WARN and #OPTIMIZE directives.
	
	01/02/04 - CARROLLJ - CR7658
		   Corrected precedence error.

	02/23/03 - GRAY - 51351
		   Converted to PSL.
	

	*/


	type Public Boolean VALIDATE
	type Public Number ER
	type Public String ET,RM
	type String CRDNUM
	
	set ER=0

	// Invalid line tag
	if VALIDATE.get() set ER=1 set RM=$$^MSG(1390) quit ""

	catch vERROR {
		do ZTSEQ
		}
	
	set CRDNUM=$$START(CRDTYP,ACN.get(),OCRDNUM.get(),REISSUE.get())

	quit CRDNUM	


START(String CRDTYP,	// Get Card Number Generator Parameters and Return Card Number
	Number ACN,
	String OCRDNUM,
	Boolean REISSUE)	

	type Public Boolean VALIDATE
	type Public Number ER
	type Public String CRDNUM,ET,RM
	type String %LOCK,BIN,CMSGEN,SUBR

	// Invalid line tag
	if VALIDATE.get() set ER=1 set RM=$$^MSG(1390) quit ""

	type RecordCRDTYP crdtyp=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP",1)
	
	//BIN
	set BIN=crdtyp.bin

	//CMSGEN - subroutine used to generate card number
	set CMSGEN=crdtyp.cmsgen

	//Default Bank Identification Number
	if BIN="" set BIN=111111

	if CMSGEN'="" do { if ER quit ""
		//Lock the sequence number
		if '$$LOCK(CMSGEN,.%LOCK) set ET="RECLOC" do EXC quit

		set SUBR=CMSGEN_"(BIN,.CRDNUM)"
		do @SUBR
		do UNLOCK(CMSGEN,.%LOCK)
		}

	if CMSGEN="" set CRDNUM=""

	quit CRDNUM


CITIH(String BIN,String CRDNUM)

	type Public Boolean REISSUE,VALIDATE
	type Public Number ACN,CTL,ER,I,MATCH
	type Public String OCRDNUM
	type Number CRDISS,CRDSEQ,ER,LSTCRD=""
	type String CTYP,RM

	//Quit if this subroutine is called for validation
	if VALIDATE.get() quit

	if REISSUE.get() do {
		set CRDSEQ=OCRDNUM.extract(14)
		set CRDISS=OCRDNUM.extract(15)+1
		if CRDISS>9 set CRDISS=1
		}

	else  do {
		if OCRDNUM.get() set CRDSEQ=OCRDNUM.extract(14)+1
		else  do {
			set CRDSEQ=""
			type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN AND CRDTYP=:CRDTYP","CRDNUM DESC")
			if rs.next() set LSTCRD=rs.getCol("CRDNUM")
			set CRDSEQ=LSTCRD.extract(14)+1
			}

		if CRDSEQ=""!(CRDSEQ>9) set CRDSEQ=1
		set CRDISS=1
		}

	// Use exactly 7 digits
	set ACN="0000000".extract(1,7-ACN.length())_ACN
 	set ACN=ACN.extract(1,7)

	set BIN="000000".extract(1,6-BIN.get().length())_BIN.get()

	set CRDNUM=BIN_ACN_CRDSEQ_CRDISS

	for I=1:1:CRDNUM.length() set CTL=(CTL.get()+CRDNUM.extract(I))#10

	set CRDNUM=CRDNUM_CTL

	type ResultSet rs=Db.select("CRDTYP","CRD","CRDNUM=:CRDNUM")
	if rs.isEmpty() kill MATCH quit

	if rs.next() do {
		set CTYP=rs.getCol(1)
		set MATCH=MATCH.get()+1
		}

	if MATCH.get()>0 do { quit:ER.get()
		if MATCH>9 do { quit
			set ER=1 
			// Card number already exists
			set RM=$$^MSG(500) 
			set CRDNUM="" 
			kill MATCH
			}

		if REISSUE.get() set CRDNUM=$$START(CTYP,ACN,.CRDNUM,1)

		else  set CRDNUM=$$START(CTYP,ACN,.CRDNUM)
		}

	else  kill MATCH

	quit


STNDRD(String BIN,	//  Test Subroutine
	String CRDNUM)	


	type Public Boolean VALIDATE
	type Public Number ACN,I
	type Public String CMSGEN
	type Number CRDSEQ,CSEQ,CTL,FILL,MATCH
	type String CTYP

	//Quit if this subroutine is called for validation
	if VALIDATE.get() quit

	//Flag for existing number
	set MATCH=0
	
	type RecordCRDSEQ crdseq=Db.getRecord("CRDSEQ","CMSGEN=:CMSGEN",1)

	set (CRDSEQ,CSEQ)=crdseq.crdseq

	set FILL=9-ACN.length()-CRDSEQ.length()

	set CRDSEQ=CRDSEQ+1
	set crdseq.crdseq=CRDSEQ
	do crdseq.bypassSave()
	
	for I=1:1:FILL set CSEQ="0"_CSEQ

	set CTL=(((BIN#10)*CRDSEQ)+CRDSEQ)#10

	set CRDNUM=BIN_ACN_CSEQ_CTL

	type ResultSet rs=Db.select("CRDTYP","CRD","CRDNUM=:CRDNUM")
	if rs.next() do {
		set CTYP=rs.getCol(1)
		set MATCH=1
		}
	
	if MATCH do STNDRD(BIN,.CRDNUM) quit

	quit


STANDARD(String BIN,String CRDNUM)	// Standard Card Number Generator Algorithm

	/*
	This is an example of a card number generation subroutine.
	Instituitions may wish to develop their own custom card number
	generators.  Custom subroutines added to this routine should be
	modeled after this subroutine.

	The card number generator to be used will be specified on the card
	type user table.  This way institutions may use different algorithms
	to generate the card number according to the card type.  However, one
	or more card types may use the same card number generation subroutine.
	*/

	type Public Boolean VALIDATE
	type Number I
	type Public String CMSGEN
	type Number CRDSEQ,CSEQ,CTL,FILL,I,MATCH
	type String CTYP

	if VALIDATE.get() quit

	set MATCH=0

	type RecordCRDSEQ crdseq=Db.getRecord("CRDSEQ","CMSGEN=:CMSGEN",1)
	if crdseq.crdseq.curVal.length()>9 set CRDNUM="" quit CRDNUM
	
	set (CRDSEQ,CSEQ)=crdseq.crdseq

	set FILL=9-crdseq.crdseq.curVal.length()

	set CRDSEQ=CRDSEQ+1	
	set crdseq.crdseq=CRDSEQ
	do crdseq.bypassSave()

	for I=1:1:FILL set CSEQ="0"_CSEQ
	
	set CTL=(((BIN#10)*CRDSEQ)+CRDSEQ)#10

	set CRDNUM=BIN_CSEQ_CTL

	/* 
	The following code checks for the existence of the same card number
	for any card type.  Institutions that have a code unique to the
	card type within the card number do not need this section of code.
	In addition, institutions that do not mind the same card number
	being generated as long as the card types are different may omit
	this code.
	*/

	type ResultSet rs=Db.select("CRDTYP","CRD","CRDNUM=:CRDNUM")

	if rs.next() do {
		set CTYP=rs.getCol(1)
		set MATCH=1
		}

	if MATCH do STANDARD(BIN,.CRDNUM)

	quit


MPS(String BIN,String CRDNUM)	// Calculate card numbers for MPS

	/*
	BIN will be passed in as 111111, but is newed in MPSCARDU when
	calculating the MPS card number.
	*/

	type Public Boolean VALIDATE
	type Public String CO,CRDTYP

	// validation sub-routine is being used
	if VALIDATE.get() quit

	if CO.get()="" set CO=%CompanyName

	set CRDNUM=$$CRDNUM^MPSCARDU(CO,CRDTYP)

	/* 
	The following code checks for the existence of the same card number
	for any card type.  Institutions that have a code unique to the
	card type within the card number do not need this section of code.
	In addition, institutions that do not mind the same card number
	being generated as long as the card types are different may omit
	this code.
	*/

	if CRDNUM="" quit

	type ResultSet rs=Db.select("CRDTYP","CRD","CRDNUM=:CRDNUM")
	if rs.isEmpty() quit

	do MPS(BIN,.CRDNUM)

	quit




LOCK(String CMSGEN,String %LOCK)	//

	/*

	   This sub-routine will incrementally LOCK the card sequence file
	   for the subroutine specified if it is not already contained in %LOCK.
	   If the lock is successful, %LOCK is updated to include the subroutine.

	   ARGUMENTS:
	       . CMSGEN    Subroutine where card sequence        /TYP=T/REQ
	      is located    /MECH=VAL


	       . %LOCK  Record lock string                       /TYP=T/NOREQ
	                                                         /MECH=REFNAM

	   EXAMPLE:
	       I '$$LOCK("DEBIT",123456,.%LOCK) S ER=1,ET="RECLOC" Q


	*/
	
	type Public Boolean VALIDATE
	type Public Number ER
	type Public String CRDSEQ(),RM

	// Invalid line tag
	if VALIDATE.get() set ER=1 set RM=$$^MSG(1390) quit

	set %LOCK=%LOCK.get() if ","_%LOCK_","[(","_CMSGEN_",") quit 1
	lock +CRDSEQ(CMSGEN):2 else  quit 0

	if %LOCK="" set %LOCK=CMSGEN quit 1

	set %LOCK=%LOCK_","_CMSGEN

	quit 1


UNLOCK(String STR,String %LOCK)	//

	/*

	   This sub-routine will decrement the LOCK for the card sequence(s)
	   specified by the character string 'STR' and remove it from
	   %LOCK (if it is contained in %LOCK).

	   ARGUMENTS:
	       . STR    Sequence(s) to unlock, comma separated    /TYP=T/REQ
	                                                          /MECH=VAL

	   INPUTS:
	       . %LOCK  Record lock string                       /TYP=T/NOREQ
	                                                         /MECH=REFNAM

	   EXAMPLE:
	       D UNLOCK(%LOCK,.%LOCK)


	*/

	type Number I,J
	type String CMSGEN
	type Public Boolean VALIDATE
	type Public Number ER,I
	type Public String CRDSEQ(),RM

	// Invalid line tag
	if VALIDATE.get() set ER=1 set RM=$$^MSG(1390) quit
	set %LOCK=%LOCK.get()

	for I=1:1:STR.length(",") do {
		set CMSGEN=STR.piece(",",I) quit:CMSGEN=""
		lock -CRDSEQ(CMSGEN)
		for J=1:1:%LOCK.length(",") if %LOCK.piece(",",J)=CMSGEN do { quit
			set %LOCK=%LOCK.piece(",",1,J-1)_","_%LOCK.piece(",",J+1,999)

			}
		}

	if %LOCK.extract(%LOCK.length())="," set %LOCK=%LOCK.extract(1,%LOCK.length()-1)

	quit



SUBRCHK	// This is called by the CMSGEN post processor.  

	/*
	This is needed to determine whether or not the value entered for 
	CMSGEN, the card number generator subroutine, is valid.  The VALIDATE 
	flag will be set to one to indicate that this is just a validation of 
	the subroutine name.  Every subroutine must have a check for the 
	VALIDATE flag so it does not execute during the validation process.

	            if VALIDATE.get() quit

	This subroutine will attempt to execute the line tag entered by the
	user.  If it exists, the line tag will be called successfully.  Since
	this is just a validation test, the subroutine will quit, and the
	value entered by the user will be accepted.

	If the subroutine does not exist, the error trap, ZTSEQ, will be
	called, and the value entered will not be accepted.  The user will
	have to enter another value.

	All subroutines in this routine which are not card number generators
	must start with the following line.

	           if VALIDATE.get() set ER=1,RM=$$^MSG(1390) quit

	This will prevent the post processor from accepting a line tag that
	does not generate a card number.
	*/

	type Public Boolean VALIDATE
	type Public Number ER
	type Public String RM,X

	// Invalid line tag
	if VALIDATE.get() set ER=1 set RM=$$^MSG(1390) quit
	
	catch vERROR {
		do ZT
		}

	type Boolean VALIDATE
	type String SUBR

	set VALIDATE=1
	set SUBR=X_"(111111)"

	//EXECUTE label SUBR
	do @SUBR

	quit


ZTSEQ	// Error trap at sequence level

	type Public Boolean VALIDATE
	type Public Number ER
	type Public String RM

	// Invalid line tag
	if VALIDATE.get() set ER=1 set RM=$$^MSG(1390) quit

	do ZE^UTLERR
	do EXC

	quit


ZT	// Error trap for subroutine validation

	type Public Number ER
	type Public String RM

	// Invalid line tag
	set ER=1 set RM=$$^MSG(1390)

	quit


EXC	// Log error to DAYEND

	type Public Number %ZTSEQ
	type Public String CMSGEN,ET,RM
 
	do LOG^UTLEXC(%RoutineName,"*",RM.get(),CMSGEN.get(),%ZTSEQ.get(),ET.get())

	kill ET,%ZTSEQ

	quit

vSIG()	quit "60285^22794^Renga SP^10368"	// Signature - LTD^TIME^USER^SIZE
