private FORMDQ2(String SID)	// Screen ID	
		 
	/*
	Forms system (OOE) DQ screen driver

	---- Revision History -------------------------------------------------
	07/14/06 - RussellDS - CR22121
		   Modified .ascii and .char methods to use new byte-oriented
		   methods for Unicode compliance.
	
	05/12/06 - RussellDS - CR20967
		   Converted to PSL.
	-----------------------------------------------------------------------
	*/
	
	type Boolean EDITED, fileflag
	type Number %TO, gt, THTMAR, TIMEOUT,TOPMAR, XLIMIT, YLIMIT, ZB
	type String %LIBS, DBTBL(,), H, LIBS, MAINPGM, PAGE(), RCP, SCP, TAB
	type String VA(), VIDBF, VIDHL, VIFOF, video, VIDRV, X, zbtxt
	
	quit:SID.get().isNull()
	
	lock
	
	// Define form system specific commands

	do INIT^%ZM()
	do ^FORMINIT
	do ^FORMDQ2B(2)

	set MAINPGM = %RoutineName

	set PAGE(1) = "FORMVAR1|6;35"
	set PAGE(2) = "FORMVAR2|6;35"
	
	set (%LIBS, LIBS) = "SYSDEV"

	set EDITED = 0
	set %TO = $$TO^FORMVAR

	set H = $$HEADER^FORMINIT(2)

	// Avoid warning on lock
	set DBTBL(2, SID) = ""
	// Screen in use ?
	lock +DBTBL(2, SID):5
	else  write $$MSG^FORM("Screen in use", 1) quit

	// Set up OOE internal structure
	do LOAD(.SID) quit:SID.isNull()
	
	set X = $$HOME^%TRNLNM("FORM_SCR.SCRIPT")
	if $$FILE^%ZOPEN(X, "READ") do SCRIPT^FORMCMD(X)

	//Define OOE window  ( 99 rows by 132 columns )
	do ^FORM(99, 132)
	
	lock -DBTBL(2, SID)

	quit


private LOAD(String SID)	// Screen ID

	/*
	Load a screen name from DBTBL2
	
	Modify SID to use zSID
	*/
	
	type public Boolean EDITED, OOEFLG, PROTECT
	type public Number M(,), ZB
	type public String A, D, dl, DQP, FILES, P, PP(,), ST8, VA()
	
	type Boolean quit
	
	set quit = 0
	// File the current screen
	if (M("").order() <> 0) do { quit:quit
	
		do QUIT^FORMINIT()
		
		if (ZB <> 0) set quit = 1
		else  set ZB = 13
	}
		
	kill A, D, M, P

	if SID.isNull() set SID = $$GETSID quit:SID.isNull()
	
	if Db.isDefined("DBTBL2", "LIBS='SYSDEV' AND SID=:SID") do SAVECOPY(SID)

	set SID = "z"_SID
	
	type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID", 1)
	
	set ST8 = dbtbl2.yorigin_"|"_dbtbl2.xorigin_"|"_dbtbl2.ruler
	set ST8 = ST8_"|"_dbtbl2.video_"|"_dbtbl2.buffers_"|||"_dbtbl2.py
	set ST8 = ST8_"|"_dbtbl2.px_"|"_dbtbl2.formhdg_"|"_dbtbl2.lastfid
	set ST8 = ST8_"|"_dbtbl2.status_"|"_dbtbl2.rhtmar
	
	if ST8.replace("|", "").isNull() set ST8 = "||2||||||32|1;0;2||1"
	else  set ST8.piece("|", 12) = 0		// Turn off status option
	
	// Restore states display ----------
	do REST8^FORMINIT
	
	// ***** Load form ****************************************************
	set FILES = dbtbl2.pfid
	set OOEFLG = dbtbl2.ooe
	set dl = 0.byte()
	
	type DbSet ds = Db.selectDbSet("DBTBL2D", "LIBS='SYSDEV' AND SID=:SID", "SEQ ASC")
	
	while ds.next() do {
		
		type Number L, ox, px, py, ZZVAR
		type String H, X
		
		type RecordDBTBL2D dbtbl2d = ds.getRecord("DBTBL2D")
		
		// ***** Build the screen array ***************************************
		set P(1) = dbtbl2d.status
		set P(2) = dbtbl2d.dtype
		set P(3) = dbtbl2d.size
		set P(4) = ""
		set P(5) = dbtbl2d.name
		set P(6) = dbtbl2d.ltbl
		set P(7) = dbtbl2d.pattern
		set P(8) = dbtbl2d.pp
		set P(9) = dbtbl2d.pre
		set P(10) = dbtbl2d.type
		set P(11) = dbtbl2d.prompt
		set P(12) = dbtbl2d.req
		set P(13) = dbtbl2d.minimum
		set P(14) = dbtbl2d.maximum
		set P(15) = dbtbl2d.decpre
		set P(16) = ""
		set P(17) = ""
		set P(18) = dbtbl2d.pedit
		set P(19) = ""
		set P(20) = ""
		set P(21) = dbtbl2d.del
		set P(22) = dbtbl2d.pos
	
		if P(5).beginsWith("@") set DQP.piece(dl, 2) = P(5)	// Orig Name
	
		if P(1).isLike("%*%") set PROTECT = 1			// Protect flag
		else  set PROTECT = 0
	
		// Compare file definition attributes (integrity check)
		do {
	
			type Boolean isKey, modified
			type String COLUMN, TABLE
	
			quit:P(5) '? 1"["1E.E1"]"1E.E
		
			set TABLE = P(5).piece("]", 1).piece(",", 2) quit:TABLE.isNull()
			set COLUMN = P(5).piece("]", 2) quit:COLUMN.isNull()
		
			type SchemaTable tblrec = Db.getSchemaTable(TABLE)
			type SchemaColumn colrec = Db.getSchemaColumn(TABLE, COLUMN)
		
			if colrec.node.isLike("%*%") set isKey = 1
			else  set isKey = 0
		
			set modified = 0
			set P(6) = $$AttrMod(P(6), colrec.lookupTable, .isKey, .modified)
			set P(7) = $$AttrMod(P(7), colrec.pattern, .isKey, .modified)
			set P(10) = $$AttrMod(P(10), colrec.dataType, .isKey, .modified)
			set P(13) = $$AttrMod(P(13), colrec.minimum, .isKey, .modified)
			set P(14) = $$AttrMod(P(14), colrec.maximum, .isKey, .modified)
			set P(15) = $$AttrMod(P(15), colrec.precision, .isKey, .modified)
			if colrec.computation.isNull() set P(21) = $$AttrMod(P(21), tblrec.columnDelimiter, .isKey, .modified)
			// We don't care about position for PSL screens
			if 'dbtbl2.cscmp set P(22) = $$AttrMod(P(22), colrec.position, .isKey, .modified)
		
			if modified write $$MSG^FORM("["_P(5).piece(",", 2)_" Field attributes modified", 1)
		}
	
		// Convert old <<var,pmt,...>> syntax
		if P(11).beginsWith("<<"), P(11).endsWith(">>"), 'P(11).isLike("%""%") do {
	
			type String X
	
			quit:(P(11).isLike("%$$%") & P(11).isLike("%UTLDOC%"))
	
			if (P(3) > 0) do { quit		// Already converted
			
				set P(5) = P(11)
				set P(11) = ""
			}
		
			if ((P(11) ? .E1"$"1A.E) ! P(11).isLike("%$$%")) do { quit
			
				set P(5) = P(11)
				set P(11) = ""
			}
		
			set ZZVAR = 1
		
			set X = P(11).extract(1, P(11).length() - 2)
			set P(3) = +X.piece(",", 4)			// Size
			set P(10) = X.piece(",", 3)			// Format
			if P(10).isNull() set P(10) = "T"
		
			set P(2) = P(10)
			set P(5) = X.piece(",", 1)_">>"
			set P(6) = X.piece(",", 9, 99)
			set P(7) = ""
			set P(11) = X.piece(",", 2)
			set P(13) = X.piece(",", 5)
			set P(14) = X.piece(",",6)
			set P(15) = X.piece(",", 7)
			set P(21) = ""
			set P(22) = X.piece(",", 8)
			if P(22) set P(21) = 124
		}
		
		set py = P(1) \ 1000
		set px = P(1) # 1000
		set L = P(11).length()
		set ox = px + L
		quit:(py < 1)

		set X = P(1).piece("#", 2, 999)
		if 'OOEFLG do {		// Convert old.X video attributes to new
	
			type Number A
	
			set A = 0
	
			if X.find(2) set A = A + 1	// Reverse video
			if X.find(1) set A = A + 2	// Highlight
			if X.find(3) set A = A + 4	// Underscore
			if X.find(4) set A = A + 8	// Blinking
	
			set X = A
		}
	
		set H = $$HEADER^FORMINIT(X.piece(",", 1), X.piece(",", 2), X.piece(",", 3), X.piece(",", 4), X.piece(",", 5), X.piece(",", 6))

		if 'VA(H).exists() do VIDSP^FORMINIT(H)		// Add video option

		if (P(11).extract(L - 1, L) = ": ") set P(11) = P(11).extract(1, L - 1)
	
		if P(5).beginsWith("@"), P(5).isLike("%@ooe%") set P(5) = ""
	
		if (P(11) ]] "") set M(py, px) = H_P(11) quit:P(5).isNull()
	
		if P(5).beginsWith("@") do {
		
			set ox = px
			set DQP.piece(dl, 1) = P(5)
		}
		else  do {
			
			type String m

			// Strip library
			if P(5).beginsWith("[SYSDEV,") set P(5) = "["_P(5).extract(9, P(5).length())

			set DQP.piece(dl, 1) = P(5)	// Data item

			if P(18).isNull() set P(18) = P(10).translate("FU", "TT")

			set DQP.piece(dl, 3) = +P(3)	// Field length
			set DQP.piece(dl, 4) = P(15)	// Decimal precision
			set DQP.piece(dl, 5) = P(10)	// Data type
			set DQP.piece(dl, 6) = P(6)	// Table lookup
			set DQP.piece(dl, 7) = P(12)	// Required
			set DQP.piece(dl, 8) = PROTECT
			set DQP.piece(dl, 9) = P(7)	// Pattern match
			set DQP.piece(dl, 10) = P(13)	// Minimum value
			set DQP.piece(dl, 11) = P(14)	// Maximum value
			set DQP.piece(dl, 12) = P(4)	// Default value
			set DQP.piece(dl, 15) = P(17)	// Computed operation (not used)
			set DQP.piece(dl, 16) = P(21)	// Delimeter
			set DQP.piece(dl, 17) = P(22)	// Position
			set DQP.piece(dl, 18) = P(18)	// Print edit

			do OBJ(DQP)			// Return m
		
			if ((ox '= px) ! ZZVAR.get() ! 'OOEFLG) do {
			
				set H = $$HEADER^FORMINIT(2)		//  Highlight
				kill ZZVAR
			}
		
			if 'VA(H).exists() do VIDSP^FORMINIT(H)
		
			set M(py, ox) = H_m
		}

		// Load pre processors & Post processors if necessary
		type DbSet ds2 = Db.selectDbSet("DBTBL2PP", "LIBS='SYSDEV' AND SID=:SID AND SEQ=:dbtbl2d.seq", "PSEQ ASC")
		
		if 'ds2.isEmpty() do {
		
			type Number PO, POSEQ, PR, PRSEQ
		
			set PR = PP("").order(-1) + 1	// Pre-processor key
			set PO = PR + 1			// Post-processor key
			set (POSEQ, PRSEQ) = 1
			
			while ds2.next() do {
				
				type RecordDBTBL2PP dbtbl2pp = ds2.getRecord("DBTBL2PP")
				
				// Pre-processor
				if (dbtbl2pp.pseq '> 20) do {
				
					set PP(PR, PRSEQ) = dbtbl2pp.code
					set PRSEQ = PRSEQ + 1
				}
				// Post-processor
				else  do {
					
					set PP(PO, POSEQ) = dbtbl2pp.code
					set POSEQ = POSEQ + 1
				}
			}
			
			if (PRSEQ = 1) set PR = ""
			if (POSEQ = 1) set PO = ""

			set DQP.piece(dl, 13) = PR
			set DQP.piece(dl, 14) = PO
		}

		set D(py, ox) = DQP
		set DQP = ""
	}
	
	set EDITED = 0

	// ***** Display ******************************************************
	do PUTRGN^FORMFUN()
	
	quit
	
	
AttrMod(String SCRATTR,		// Screen field attribute
	String TBLATTR,		// Table attribute
	Boolean isKey,		// Is this a key?
	Boolean modified)	// Modified the field flag
	
	/*
	Check the attributes from the screen against those in the data
	dictionary, and change, if appropriate.  Update modified flag if
	not a key column.
	
	RETURNS:
		. $$	Original or modified value
	*/
	
	if (SCRATTR '= TBLATTR) do {
	
		set SCRATTR = TBLATTR
		if 'isKey set modified = 1
	}
	
	quit SCRATTR
	
	
private FILE(String ORIGSID,	// Original screen name (may be zSID)
	     String NEWSID)	// New screen name (may be the same as ORIGSID)
	     
	/*
	Save the screen
	*/
	
	type public Boolean RULER
	type public Number BUFFERS, PX, PY, RHTMAR, STATUS, XORIGIN, YORIGIN
	type public String D(,), dl, FILES, FORMHDG, LASTFID, M(,), PP(,), VIDEO
	
	type Number N, REC, XPX, XPY
	type String DBTBL20(), F(), PGM
	
	do Runtime.start("CS")
	
	do {
		type RecordDBTBL2 newscr = Db.getRecord("DBTBL2", "LIBS='SYSDEV', SID=:NEWSID", 1)
	
		set PGM = newscr.vpgm
	}
	
	// Load the original screen
	type RecordDBTBL2 origscr = Db.getRecord("DBTBL2", "LIBS='SYSDEV', SID=:ORIGSID", 1)
	
	// Load screen-level processor code
	type DbSet ds = Db.selectDbSet("DBTBL2PP", "LIBS='SYSDEV' AND SID=:ORIGSID AND SEQ = 0")
	
	while ds.next() do {
		
		type RecordDBTBL2PP dbtbl2pp = ds.getRecord("DBTBL2PP")
		
		set DBTBL20(dbtbl2pp.pseq) = dbtbl2pp.code
	}
	
	type RecordDBTBL2 newscr = origscr.copy()

	do DELSID^DBSDS(NEWSID)
	
	do newscr.setMode(0)
	set newscr.sid = NEWSID
		
	// Save screen attributes
	set newscr.yorigin = YORIGIN
	set newscr.xorigin = XORIGIN
	set newscr.ruler = +RULER
	set newscr.video = VIDEO.toByteString().ascii(1)_","_VIDEO.toByteString().ascii(2)_","_VIDEO.toByteString().ascii(3)_","_VIDEO.toByteString().ascii(4)_","_VIDEO.toByteString().ascii(5)_","_VIDEO.toByteString().ascii(6)
	set newscr.buffers = BUFFERS
	set newscr.py = PY
	set newscr.px = PX
	set newscr.formhdg = FORMHDG
	set newscr.lastfid = LASTFID
	set newscr.status = STATUS
	set newscr.rhtmar = RHTMAR
	
	set newscr.pfid = FILES
	set newscr.vpgm = PGM
	set newscr.ooe = 1
	set newscr.date = %CurrentDate
	
	if newscr.scrclr.isNull() set newscr.scrclr = 1
	if newscr.desc.isNull() set newscr.desc = "???"
	set newscr.desc2 = newscr.desc			// For backward compatibility
	
	do newscr.save()
	
	if (newscr.desc = "???") do CTL^FORMDQ2C(NEWSID)
	
	// Save screen-level processor code
	set N = ""
	for  set N = DBTBL20(N).order() quit:N.isNull()  do {
		
		type RecordDBTBL2PP dbtbl2pp = Class.new("RecordDBTBL2PP", "LIBS='SYSDEV',SID=:NEWSID,SEQ=0,PSEQ=:N")
		
		set dbtbl2pp.code = DBTBL20(N)
		
		do dbtbl2pp.save()
	}
	
	// Save screen fields
	set (F, REC) = 0
	set (XPX, XPY) = ""
	for  set XPY = M(XPY).order() quit:XPY.isNull()  do {
		
		for  set XPX = M(XPY, XPX).order() quit:XPX.isNull()  do {
			
			type Number I
			type String H, X
			
			set REC = REC + 1
			type RecordDBTBL2D dbtbl2d = Class.new("RecordDBTBL2D", "LIBS='SYSDEV',SID=:NEWSID, SEQ=:REC")
			
			set D = D(XPY, XPX).get().translate(124.byte(), 128.byte())
			set M = M(XPY, XPX)
			
			// Header
			set H = ""
			for I = 1:1:6 set H.piece(",", I) = M.toByteString().ascii(I)
			set H.piece(",", 7) = 0
			
			set M = M.extract(7, M.length()).translate(124.byte(), 128.byte())
			
			if 'D.isNull() do {
			
				if 'D.beginsWith("@") set M = ""
				
				for I = 1:1:20 set F(I) = D.piece(dl, I)
			}
			
			// X = XPY*1000+XPX_PROTECT_"{"_Video
			set X = (XPY * 1000) + XPX
			if (D.piece(dl, 8) > 0) set X = X_"*"
			set X = X_"#"_H
			
			set dbtbl2d.status = X
			
			// Text data  format= T  item name = @  size = field length
			if D.isNull() ! D.beginsWith("@") do {
				
				// Create literal tag for V3.x compiler
				if D.isNull() set dbtbl2d.name = "@ooe"_REC
				// Keep original data item name @xxx
				else  set dbtbl2d.name = D.piece(dl, 1)
				
				set dbtbl2d.type = "T"
				set dbtbl2d.prompt = M
				set dbtbl2d.dtype = "*"
				
				if dbtbl2d.status.isLike("%#%") set dbtbl2d.status = dbtbl2d.status.piece("#", 1)_"*#"_dbtbl2d.status.piece("#", 2, 99)
				else  set dbtbl2d.status = dbtbl2d.status.piece("{", 1)_"*{"_dbtbl2d.status.piece("{", 2, 99)
			}
			else  do {

				// Post processor
				if D.piece(dl, 14) do {
					
					set dbtbl2d.pp = 1
					
					do FILEPP(NEWSID, REC, 20, D.piece(dl, 14))
				}
				// Pre processor
				if D.piece(dl, 13) do {
					
					set dbtbl2d.pre = 1
					
					do FILEPP(NEWSID, REC, 0, D.piece(dl, 13))
				}
				
				if F(1).beginsWith("<<"), F(1).endsWith(">>") do {
					
					// Data item entry syntax <<var,pmt,type,len,min,max,dec,pos,tbl>>
					set M = F(1)

					if F(2).isNull(), (F(1) ? 1"<<"1A.AN1">>") do {
						
						set F(1) = "@"_F(1).piece(">>",1).extract(3,99)
						set F(2) = "*"
					}
					// Keep orig Name
					else  if F(2).beginsWith("@") do {
						
						set F(1) = F(2)
						set F(2) = "*"
					}
					else  do {
						
						set F(1) = "@ooe"_(REC + 1)
						set F(2) = "*"
					}
				}
				
				set dbtbl2d.dtype = F(2)	//  Node number
				set dbtbl2d.size = F(3)

				if F(1).beginsWith("["), 'F(1).isLike("%,%") set F(1) = "[SYSDEV,"_F(1).piece("]", 1).extract(2, 99)_"]"_F(1).piece("]", 2)

				set dbtbl2d.name = F(1)		// Data item
				set dbtbl2d.ltbl = F(6)		// Table lookup
				set dbtbl2d.pattern = F(9)	// Pattern match
				set dbtbl2d.type = F(5)		// Data type
				set dbtbl2d.prompt = M		// Prompt
				set dbtbl2d.req = F(7)		// Required
				set dbtbl2d.minimum = F(10)	// Minimum value
				set dbtbl2d.maximum = F(11)	// Maximum value
				set dbtbl2d.decpre = F(4)	// Decimal precision
				
				// Print format (v4.0)
				if (F(18) '= F(5)) set dbtbl2d.pedit = F(18)

				set dbtbl2d.del = F(16)		// Delimiter
				set dbtbl2d.pos = F(17)		// Position
			}
			
			do dbtbl2d.save()
		}
	}
	
	do Runtime.commit()

	quit
	

FILEPP(String SID,	// Screen name
       Number SEQ,	// Screen item sequence number
       Number OPT,	// 0 = pre-processor, 20 = post-processor
       Number KEY)	// Pointer to PP array
       
	/*
	File pre & post processors
	*/

	type public String PP(,)
	
	type Number N, Y, Z
	
	set (Y, Z) = 1
	
	if (PP(KEY, "").order(-1) > 20) set Z = .001
	
	set N = ""
	for  set N = PP(KEY, N).order() quit:N.isNull()  do {
		
		type Number PSEQ
		
		set PSEQ = OPT + Y
		
		type RecordDBTBL2PP dbtbl2pp = Class.new("RecordDBTBL2PP", "LIBS='SYSDEV',SID=:SID,SEQ=:SEQ,PSEQ=:PSEQ")
		
		set dbtbl2pp.code = PP(KEY, N)
		
		do dbtbl2pp.save()
		
		set Y = Y + Z
	}
	
	quit


private SAVE(String ZMSG)

	/*
	Prompt to file Yes or No
	*/
	
	type public Boolean EDITED
	type public String ANCHOR, M(,), P(,), SID
	
	type Number MENUID
	type String NEWSID, OPTION(), ORIGSID
	
	if (M.data() = 0) quit 1		// Nothing to save

	if (P.data() > 0) do SELOFF^FORMSEL(1)

	if (+ANCHOR.get() > 0) do ANCHOF^FORMSEL

	set OPTION(1) = SID.extract(2, SID.length())

	// menu # 105 = Save as ~,Save as other
	//        106 = Save as ~,Save as other|Exit from editor

	set MENUID = 105
	if 'ZMSG.get().isNull() set MENUID = 106
	
	set OPTION = $$^DBSMBAR(MENUID, "", "", "", .OPTION)
	if (OPTION '> 0) quit 0

	//set ORIGSID = SID
	set ORIGSID = SID.extract(2, SID.length())	// Point back to the original name
	set NEWSID = ORIGSID

	if (OPTION = 2) do { quit:NEWSID.isNull() 0
		
		type Boolean isDone
		
		set isDone = 0
		for  do { quit:isDone
			
			set NEWSID = $$^FORMREAD(NEWSID, 12, "Name: ", "U")
			
			if NEWSID.isNull() set isDone = 1
			else  if NEWSID = ORIGSID set isDone = 1
			else  if Db.isDefined("DBTBL2", "LIBS='SYSDEV' AND SID=:NEWSID") do {
				
				write $$MSG^FORM("Screen already exists", 1)
				hang 1
			}
			else  set isDone = 1
		}
	}

	// Remove old DATA ITEM index information
	if Db.isDefined("DBTBL2", "LIBS='SYSDEV' AND SID=:NEWSID") do INDEX(NEWSID, "D")

	do FILE(SID, NEWSID)

	write $$MSG^FORM(NEWSID_" Saved")

	// Create new DATA ITEM x-ref file ^DBSINDX
	do INDEX(NEWSID,"A")

	set EDITED = 0
	
	quit 1


INDEX(String ID,
      Number DQFUN)

	/*
	ADD/DELETE index information
	*/
	
	type Number DBOPT
	
	set DBOPT = 2

	do ^DBSUTL3
	
	quit
	
	
private OBJ(String X)

	/*
	Build the display string for a variable
	*/
	
	type public String dl, m
	
	type Number DEC, I, LEN
	type String DSP, T, TY, VAR, XE

	set (TY, XE) = ""
	set VAR = X.piece(dl, 1)
	set DSP = X.piece(dl, 18)
	set LEN = X.piece(dl, 3)
	set DEC = X.piece(dl, 4)
	
	for I = 1:1 set T = DSP.piece(",", I) quit:T.isNull()  do {
	
		if (T = "$") do {
			
			set TY = "N"
			set DEC = 2
		}
		else  if (T = "E") do {
			
			set TY = "N"
			set DEC = 2
			
			if 'XE.isNull() set XE = XE_" "
			set XE = XE_"S m=$FN(m,"","")"
		}
		else  do {
			
			if T.beginsWith("R") do {
				
				set TY = "N"
				if (T.extract(2) = "D") set DEC = +(T.extract(3,9))
			}
			if ("NDLFUTC" [ T) set TY = T	// Type is defined in layout
			if (T = "ZS") set TY = "N"
			if T.beginsWith("J") set TY = "T"
		}
	}

	if ((TY = "$") ! (TY = "N")) set m = 9
	else  if (TY = "D") set m = "mm/dd/yyyy"
	else  if (TY = "C") set m = "hh:mm AM"
	else  set m = "x"

	set m.piece(m, LEN + 1) = ""

	if (DEC > 0), (TY = "N") set m = m.extract(1, LEN - DEC - 1)_"."_m.extract(1, DEC)

	#ACCEPT Date=05/23/06; Pgm=RussellDS; CR=20967
	if 'XE.isNull() xecute XE

	if (LEN > 0) do {
		
		if (TY = "N") set m = m.extract(m.length() - LEN + 1, m.length())
		else  set m = m.extract(1, LEN)
	}
	
	quit


GETSID()

	/*
	Prompt for a screen
	
	RETURNS:
		. $$	Screen ID
	*/
	
	type String %NOPRMT, %READ, %TAB(), SID, VFMQ

	set SID = ""
	set %TAB("SID") = ".SID1/TBL=[DBTBL]/XPP=D GETSID1^FORMDQ2"
	
	set %READ="SID"
	
	do ^UTLREAD if (VFMQ = "Q") set SID = ""
	
	quit SID.upperCase()


private GETSID1

	type public Boolean ER
	type public String I(), RM, X
	
	quit:X.isNull()
	
	// Check to see if linked screen
	type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:X")
	
	if 'dbtbl2.lnk1.isNull() do { quit
	
		set ER = 1
		set RM = "Linked screen"
	}

	if (X '? 1U.UN) do { quit
	
		set ER = 1
		set RM="Alphanumeric format only"
	}
	
	set I(3) = ""

	quit
	

SAVECOPY(String SID)	// Screen ID

	/*
	Copy the current screen to zSID, or use an existing copy in zSID.
	
	If choose to use existing copy, don't do anything, otherwise, copy
	current SID into zSID, which is what we'll work with.
	*/


	type String ZSID
	
	set ZSID = SID
	if 'ZSID.beginsWith("z") set ZSID = "z"_SID
	
	if Db.isDefined("DBTBL2", "LIBS='SYSDEV' AND SID=:ZSID") do { quit:ZSID.isNull()
		
		 if $$YN^DBSMBAR("","Use backup copy of "_SID_"?") set ZSID = ""
		 
		 else  do DELSID^DBSDS(ZSID)
	}
	
	do COPYSID^DBSDS(SID, ZSID, 0)
	
	quit

vSIG()	quit "60466^46952^Dan Russell^18651"	// Signature - LTD^TIME^USER^SIZE
