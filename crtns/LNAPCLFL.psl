LNAPCLFL(RecordLNAP1COL lnap1col, String vpar, Boolean vparNorm) // LNAP1COL - Loan Application Collateral File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:17 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (49)             11/22/2003
	// Trigger Definition (5)                      09/21/2006
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnap1col.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnap1col,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnap1col,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = lnap1col.acn
	type String APPS = lnap1col.apps
	type String APPNUM = lnap1col.appnum
	type String COLL = lnap1col.coll

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("APPS").exists()!vx("APPNUM").exists()!vx("COLL").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNAP1COL",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNAP1COL","ACN = :lnap1col.acn and APPS = :lnap1col.apps and APPNUM = :lnap1col.appnum and COLL = :lnap1col.coll") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String APPS
	type public String APPNUM
	type public String COLL

	type RecordLNAP1COL lnap1col = Db.getRecord("LNAP1COL","ACN=:ACN,APPS=:APPS,APPNUM=:APPNUM,COLL=:COLL")
	if (%ProcessMode = 2) do {
		do lnap1col.setMode(2)

		do LNAPCLFL(lnap1col,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNAP1COL lnap1col

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNAP1COL","ACN = :lnap1col.acn and APPS = :lnap1col.apps and APPNUM = :lnap1col.appnum and COLL = :lnap1col.coll") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnap1col)) S ^LNAP1COL(vobj(lnap1col,-3),vobj(lnap1col,-4),vobj(lnap1col,-5),vobj(lnap1col,-6))=vobj(lnap1col)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnap1col)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNAP1COL lnap1col

	if vpar["/JOURNAL/" do VJOURNAL(.lnap1col)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNAP1COL(vobj(lnap1col,-3),vobj(lnap1col,-4),vobj(lnap1col,-5),vobj(lnap1col,-6))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNAP1COL lnap1col

	// Type local variables for access keys for defaults
	type public String ACN
	type public String APPS
	type public String APPNUM
	type public String COLL

	if lnap1col.aof.isNull() set lnap1col.aof = 0          // aof
	if lnap1col.avrsl.isNull() set lnap1col.avrsl = 0      // avrsl
	if lnap1col.omdt.isNull() set lnap1col.omdt = 0        // omdt
	if lnap1col.pof.isNull() set lnap1col.pof = 0          // pof
	if lnap1col.title.isNull() set lnap1col.title = 0      // title
	quit


vreqn // Validate required data items

	type public RecordLNAP1COL lnap1col

	if lnap1col.aof.isNull() do vreqerr("AOF") quit
	if lnap1col.avrsl.isNull() do vreqerr("AVRSL") quit
	if lnap1col.colcd.isNull() do vreqerr("COLCD") quit
	if lnap1col.omdt.isNull() do vreqerr("OMDT") quit
	if lnap1col.pof.isNull() do vreqerr("POF") quit
	if lnap1col.scolcd.isNull() do vreqerr("SCOLCD") quit
	if lnap1col.title.isNull() do vreqerr("TITLE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNAP1COL lnap1col

	if lnap1col.acn.isNull() do vreqerr("ACN") quit
	if lnap1col.apps.isNull() do vreqerr("APPS") quit
	if lnap1col.appnum.isNull() do vreqerr("APPNUM") quit
	if lnap1col.coll.isNull() do vreqerr("COLL") quit

		if vx("AOF").exists(),lnap1col.aof.isNull() do vreqerr("AOF") quit
		if vx("AVRSL").exists(),lnap1col.avrsl.isNull() do vreqerr("AVRSL") quit
		if vx("COLCD").exists(),lnap1col.colcd.isNull() do vreqerr("COLCD") quit
		if vx("OMDT").exists(),lnap1col.omdt.isNull() do vreqerr("OMDT") quit
		if vx("POF").exists(),lnap1col.pof.isNull() do vreqerr("POF") quit
		if vx("SCOLCD").exists(),lnap1col.scolcd.isNull() do vreqerr("SCOLCD") quit
		if vx("TITLE").exists(),lnap1col.title.isNull() do vreqerr("TITLE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAP1COL","MSG",1767,"LNAP1COL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNAP1COL lnap1col
	if 'lnap1col.acn.isNull() set vfkey("^CIF("_""""_lnap1col.acn_""""_","_1_")")="LNAP1COL(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNAP1COL lnap1col
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":lnap1col.acn") set vERRMSG = $$^MSG(8563,"LNAP1COL(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("MZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("REVFRE").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNAP1COL lnap1col
	if vx("").order().isNull() do AUDIT^UCUTILN(lnap1col,.vx(),1,"|") quit
	if vx("CUSIP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnap1col,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordLNAP1COL lnap1col
	/*
	---- Revision History--------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Added code to validate ZIP code column.

	12/30/03 - CARROLLJ - CR7658
		   Removed dead code from bottom of procedure.

	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code
	do ZIP^PROCZIP(lnap1col.cntry, lnap1col.state, lnap1col.mzip)
	if ER.get() do Runtime.setErrMSG("LNAP1COL", 3333, RM) quit:ER

								if lnap1col.revfre'="" do { quit:ER
																new NJD,XREVFRE
																set XREVFRE=lnap1col.revfre
																set NJD=$$NJD^UFRE(%SystemDate,XREVFRE) quit:ER
																}
								new BAL
								if lnap1col.pldgamt="" set BAL=0
								quit
	

vau1 // Trigger AU_MZIP - After Update of Postal Code

	type public RecordLNAP1COL lnap1col

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code
	do ZIP^PROCZIP(lnap1col.cntry, lnap1col.state, lnap1col.mzip)
	if ER.get() do Runtime.setErrMSG("LNAP1COL", 3333, RM)

	quit

vau2 // Trigger AU_REVFRE - After update REVFRE,FPLDG,PCTPLDG

	type public RecordLNAP1COL lnap1col
								//---- Revision History--------------------------------------------------------
								//
	// 01/06/04 - CARROLLJ - CR7658
	//	Removed dead code from bottom of trigger.
	//
								// 04/18/00 - KESTELMANN - 38082
								//       Rolled forward from v6.2
								// 
								// 03/16/99 - KESTELMAN - 37391
								//-----------------------------------------------------------------------------
								if lnap1col.revfre'="" do { quit:ER
																new NJD,XREVFRE
																set XREVFRE=lnap1col.revfre
																set NJD=$$NJD^UFRE(%SystemDate,XREVFRE) quit:ER
																}
								new BAL
								if lnap1col.pldgamt="" set BAL=0

								quit

vbi1 // Trigger BEFORE_INSERT - Before insert LNAP1COL

	type public RecordLNAP1COL lnap1col
								//------------------------------------------------------------------------ 
								//
	// 01/06/04 - CARROLLJ - CR7658
	//	 Removed dead code from bottom of trigger.
	//
								// 04/18/00 - KESTELMANN - 38082
								//       Rolled forward from v6.2
								//
								// 03/13/00 - KESTELMANN - 37391
								//------------------------------------------------------------------------
								new LEN
								set LEN=$L(lnap1col.cusip)
								if LEN'=0,(LEN<8!(LEN>9)) do Runtime.setErrMSG("LNAP1COL",691) quit:ER
								if lnap1col.crcd="" set lnap1col.crcd=%SystemCurrency
	
								if lnap1col.colacn,lnap1col.acty="" do { quit:ER
																new XACTY,XCOLACN
																set XCOLACN=lnap1col.colacn
																set XACTY=Db.getOneRow("TYPE","ACN","XCOLACN") quit:ER
																set lnap1col.acty=XACTY
																}
								quit

vbu1 // Trigger BU_CUSIP - Before Update of Cusip

	type public RecordLNAP1COL lnap1col
	do lnap1col.setAuditFlag(1)
								//------------------------------------------------------------------------ 
								//
								// 04/18/00 - KESTELMANN - 38082
								//       Rolled forward from v6.2

								// 03/13/00 - KESTELMANN - 37391
								//------------------------------------------------------------------------
								new LEN
								set LEN=$L(lnap1col.cusip)
								if LEN'=0,(LEN<8!(LEN>9)) do Runtime.setErrMSG("LNAP1COL",691) quit:ER
								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNAP1COL lnap1col

	set X = lnap1col.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = lnap1col.apps if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("APPS", vRM) quit
	set X = lnap1col.appnum if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("APPNUM", vRM) quit
	set X = lnap1col.coll if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("COLL", vRM) quit
	if lnap1col.acty.length()>10 set vRM = $$^MSG(1076,10) do vdderr("ACTY", vRM) quit
	if lnap1col.ad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD1", vRM) quit
	if lnap1col.ad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD2", vRM) quit
	if '("01"[lnap1col.AOF) set vRM=$$^MSG(742,"L") do vdderr("AOF", vRM) quit
	set X = lnap1col.arod if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("AROD", vRM) quit
	if '("01"[lnap1col.AVRSL) set vRM=$$^MSG(742,"L") do vdderr("AVRSL", vRM) quit
	if lnap1col.centr.length()>7 set vRM = $$^MSG(1076,7) do vdderr("CENTR", vRM) quit
	if lnap1col.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	if lnap1col.cltyp.length()>10 set vRM = $$^MSG(1076,10) do vdderr("CLTYP", vRM) quit
	set X = lnap1col.clyr if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CLYR", vRM) quit
	if lnap1col.cnam.length()>25 set vRM = $$^MSG(1076,25) do vdderr("CNAM", vRM) quit
	set X = lnap1col.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	if lnap1col.cnum.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CNUM", vRM) quit
	set X = lnap1col.colacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COLACN", vRM) quit
	if lnap1col.colcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("COLCD", vRM) quit
	if lnap1col.coldes.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLDES", vRM) quit
	if lnap1col.coldes2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLDES2", vRM) quit
	set X = lnap1col.colpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1COL.COLPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1col.colval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1COL.COLVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnap1col.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	if lnap1col.cusip.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CUSIP", vRM) quit
	set X = lnap1col.fpldg if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1COL.FPLDG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1col.hins if 'X.isNull(),'Db.isDefined("UTBLINS","X") set vRM = $$^MSG(1485,X) do vdderr("HINS", vRM) quit
	if lnap1col.id.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ID", vRM) quit
	if lnap1col.lot.length()>10 set vRM = $$^MSG(1076,10) do vdderr("LOT", vRM) quit
	if lnap1col.make.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MAKE", vRM) quit
	if lnap1col.model.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MODEL", vRM) quit
	if lnap1col.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	set X = lnap1col.nsh if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("NSH", vRM) quit
	if '("01"[lnap1col.OMDT) set vRM=$$^MSG(742,"L") do vdderr("OMDT", vRM) quit
	if lnap1col.owner.length()>25 set vRM = $$^MSG(1076,25) do vdderr("OWNER", vRM) quit
	if lnap1col.parc.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PARC", vRM) quit
	set X = lnap1col.pctpldg if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1COL.PCTPLDG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1col.pldgcb if 'X.isNull(),'Db.isDefined("STBLBBO","X") set vRM = $$^MSG(1485,X) do vdderr("PLDGCB", vRM) quit
	if '("01"[lnap1col.POF) set vRM=$$^MSG(742,"L") do vdderr("POF", vRM) quit
	set X = lnap1col.price if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1COL.PRICE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1col.propcd if 'X.isNull(),'Db.isDefined("UTBLPROPCD","X") set vRM = $$^MSG(1485,X) do vdderr("PROPCD", vRM) quit
	set X = lnap1col.pval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1COL.PVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnap1col.revfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNAP1COL]REVFRE",0) if 'vRM.get().isNull() do vdderr("REVFRE", vRM) quit
	if lnap1col.scolcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("SCOLCD", vRM) quit
	set X = lnap1col.smsa if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("SMSA", vRM) quit
	if lnap1col.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	if '("01"[lnap1col.TITLE) set vRM=$$^MSG(742,"L") do vdderr("TITLE", vRM) quit
	if lnap1col.tnum.length()>25 set vRM = $$^MSG(1076,25) do vdderr("TNUM", vRM) quit
	set X = lnap1col.ward if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("WARD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAP1COL","MSG",979,"LNAP1COL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNAP1COL lnap1col)	//LNAP1COL Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.lnap1col)	// Mode=I Tran=B EFD=N Seq=1 JRNID=LNAP1COL_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.lnap1col)	// Mode=I Tran=O EFD=N Seq=1 JRNID=LNAP1COL_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.lnap1col)	// Mode=U Tran=B EFD=N Seq=1 JRNID=LNAP1COL_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.lnap1col)	// Mode=U Tran=O EFD=N Seq=1 JRNID=LNAP1COL_U
				}
			}
		}

	quit


vj1(RecordLNAP1COL lnap1col)	// LNAP1COL_I  Table LNAP1HIST  Loan Appl Collateral (New)

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,vlastkey
	set v1=lnap1col.acn
	set v2=lnap1col.apps
	set v3=lnap1col.appnum
	set vlastkey=Db.nextVal("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3")
	type RecordLNAP1HIST lnap1hist=Db.getRecord("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3,TSEQ=:vlastkey",1)
	set lnap1hist.cdt=+$H
	set lnap1hist.ctime=$P($H,",",2)
	set lnap1hist.spd=TJD
	set lnap1hist.tcmt=$$^MSG(301,"LNAP1COL")
	set lnap1hist.tlo=TLO
	set lnap1hist.uid=%UID

	do lnap1hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNAP1COL lnap1col)	// LNAP1COL_U  Table LNAP1HIST  Loan Appl Collateral (Modify)

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%UID,TJD,TLO
		type String v1,v2,v3,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=lnap1col.acn
		set v2=lnap1col.apps
		set v3=lnap1col.appnum
		set vlastkey=Db.nextVal("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3")
		type RecordLNAP1HIST lnap1hist=Db.getRecord("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3,TSEQ=:vlastkey",1)
		set lnap1hist.cdt=+$H
		set lnap1hist.ctime=$P($H,",",2)
		set lnap1hist.spd=TJD
		set lnap1hist.tcmt=$$TCMT^CIFFUNCS("","LNAP1COL",vdi,vold,vnew)
		set lnap1hist.tlo=TLO
		set lnap1hist.uid=%UID

		do lnap1hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNAP1COL lnap1col

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("APPS").exists() set vux("APPS") = vx("APPS")
	if vx("APPNUM").exists() set vux("APPNUM") = vx("APPNUM")
	if vx("COLL").exists() set vux("COLL") = vx("COLL")
	do vkey(1) set voldkey = lnap1col.acn_","_lnap1col.apps_","_lnap1col.appnum_","_lnap1col.coll // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnap1col.acn_","_lnap1col.apps_","_lnap1col.appnum_","_lnap1col.coll // Copy new keys into object
	type RecordLNAP1COL vnewrec = lnap1col.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNAP1COL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNAP1COL lnap1col

	if vux("ACN").exists() set lnap1col.acn = vux("ACN").piece("|",i)
	if vux("APPS").exists() set lnap1col.apps = vux("APPS").piece("|",i)
	if vux("APPNUM").exists() set lnap1col.appnum = vux("APPNUM").piece("|",i)
	if vux("COLL").exists() set lnap1col.coll = vux("COLL").piece("|",i)
	quit
