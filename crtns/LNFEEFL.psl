LNFEEFL(RecordLNFEE lnfee, String vpar, Boolean vparNorm) // LNFEE - Loan Record - Fee Types Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (19)             02/26/2006
	// Trigger Definition (6)                      04/10/2007
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnfee.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnfee,.vxins(),10,"|")
	if %O = 1 quit:'lnfee.isChanged()  do AUDIT^UCUTILN(lnfee,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnfee.cid
	type String FEETYP = lnfee.feetyp

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("FEETYP").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNFEE",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNFEE","CID = :lnfee.cid and FEETYP = :lnfee.feetyp") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String FEETYP

	type RecordLNFEE lnfee = Db.getRecord("LNFEE","CID=:CID,FEETYP=:FEETYP")
	if (%ProcessMode = 2) do {
		do lnfee.setMode(2)

		do LNFEEFL(lnfee,vpar)
	}
	else  do VINDEX(lnfee)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNFEE lnfee

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNFEE","CID = :lnfee.cid and FEETYP = :lnfee.feetyp") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(lnfee,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(lnfee,-3),75,vobj(lnfee,-4),n)=vobj(lnfee,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(lnfee,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(lnfee,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(lnfee,-3),75,vobj(lnfee,-4),n)=vobj(lnfee,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.lnfee)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lnfee) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordLNFEE lnfee
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^ACN(vobj(lnfee,-3),75,vobj(lnfee,-4),n)) quit:n=""  if '$D(vobj(lnfee,n)),$D(^ACN(vobj(lnfee,-3),75,vobj(lnfee,-4),n))#2 set vobj(lnfee,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNFEE lnfee

	if 'vkeychg.get(),lnfee.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.lnfee)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lnfee)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^ACN(vobj(lnfee,-3),75,vobj(lnfee,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNFEE lnfee

	// Type local variables for access keys for defaults
	type public String CID
	type public String FEETYP

	if lnfee.lnkfee.isNull() set lnfee.lnkfee = 0          // lnkfee
	quit


vreqn // Validate required data items

	type public RecordLNFEE lnfee

	if lnfee.lnkfee.isNull() do vreqerr("LNKFEE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNFEE lnfee

	if lnfee.cid.isNull() do vreqerr("CID") quit
	if lnfee.feetyp.isNull() do vreqerr("FEETYP") quit

	if 'vobj(lnfee,-100,1,"").order().isNull() do {
		if vx("LNKFEE").exists(),lnfee.lnkfee.isNull() do vreqerr("LNKFEE") quit
	}
		if vx("LNKFEE").exists(),lnfee.lnkfee.isNull() do vreqerr("LNKFEE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNFEE","MSG",1767,"LNFEE."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNFEE lnfee
	if 'lnfee.cid.isNull() set vfkey("^ACN("_""""_lnfee.cid_""""_","_50_")")="LNFEE(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNFEE lnfee
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnfee.cid") set vERRMSG = $$^MSG(8563,"LNFEE(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ASND").exists()!vx("AMTHI").exists()!vx("FEETYP").exists()!vx("LNKFEE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNFEE lnfee
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnfee,.vx(),10,"|")
	quit


vad1 // Trigger AFTER_DELETE - LNFEE after delete

	type public RecordLNFEE lnfee
	/*
	---------- Revision History ------------------------------------------
	
	02/02/04 - Erik Scheetz - CR7798
		   Modified trigger to remove DAYENDLNFEEC record.

	09/15/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	new data,XASND,XCID,XFEETYP
	
	set XASND=lnfee.asnd
	set XCID=lnfee.cid 
	set XFEETYP=lnfee.feetyp

	// Delete DAYENDLNFEEC record
	if lnfee.amthi<2,lnfee.lnkfee'=1 do Db.delete("DAYENDLNFEEC","ASND=:XASND and CID=:XCID and FEETYP=:XFEETYP")
	
	// Delete LNBIL5 records associated with this fee
	do Db.delete("LNBIL5","CID=:XCID AND FEETYP=:XFEETYP")
	
	set data=Db.getOneRow("LFEE,BASIS","LNFEEP","XFEETYP") quit:ER 
	// LNFEEP.LFEE
	if '$P(data,$C(9),1) quit
	// LNFEEP.BASIS
	if $P(data,$C(9),2)'=lnfee.feetyp quit  
	if 'Db.isDefined("LNFEE","lnfee.cid,lnfee.feetyp") quit
	do Db.delete("LNFEE","CID=:XCID AND FEETYP=:XFEETYP")
	
	quit
	

vai1 // Trigger AFTER_INSERT - LNFEE after insert

	type public RecordLNFEE lnfee
	/*
	---------- Revision History ------------------------------------------

	04/10/07 - DHANALAKSHMI R - CR 26481
		   Modified to set LNFEEP.LFEE to LNFEE.LNKFEE instead of 1
		   to correct the host error. 

	04/07/06 - SmithCD - CR 20510
		   Modified to create a dayendlnfeec record only if lnfee.asnd 
		   is defined to prevent DBSFILER error.

	03/06/06 - TITOVE - CR 19949
		   Modified by restoring Profile01 logic regarding linked
		   fee plans (weren't taken into account before). Removed
		   old revision history.

	02/25/06 - chhabris - CR19307
		   Set reversed=0 while creating DAYENDLNFEEC record. This 
		   change is done for logical fields which should have a 
		   default value as 0.

	06/14/05 - KinI - 16252
		   Modified to save DAYENDLNFEEC file only when %ProcessMode=0
		   (insert) to avoid unique constraint violation Oracle error
		   when triggering on account verification and if there is no 
		   "*" fee type.		   		   
		   
	*/
	
	type public Boolean ER

	// Create DAYENDLNFEEC entry
	if (%ProcessMode = 0) , (lnfee.feetyp '= "*") , (lnfee.amthi < 2) , (lnfee.lnkfee '= 1) do {

		if lnfee.asnd.isNull() quit

		type RecordDAYENDLNFEEC dayend = Class.new("RecordDAYENDLNFEEC")

		set dayend.asnd = lnfee.asnd
		set dayend.cid = lnfee.cid
		set dayend.feetyp = lnfee.feetyp
		set dayend.reversed = 0

		do dayend.bypassSave()
		}
	
	type RecordLN ln = Db.getRecord("LN", "CID=:lnfee.cid")

	// Assessment Method Must be Frequency
	if lnfee.asnd.isNull() , (lnfee.amth = 1) , ('lnfee.lfee) do Runtime.setErrXBAD("LNFEE",513) quit:ER

	// Next Fee Assessment Date is Before System Date
	if 'lnfee.asnd.isNull() , (lnfee.asnd '= ln.dtnt) , (lnfee.asnd < %SystemDate) do Runtime.setErrXBAD("LNFEE",511) quit:ER
	
	// Set up any linked fees.
	// If the fee is in the string, check linked fee handling first in LNPAS2.
	if (%ProcessMode '= 2) do { quit:ER
	
		type Boolean DOLNK = 1
		type String pmtdist, LNKELEM, LNKFEE()

		set pmtdist="-"_ln.pmtdist_"-"
		
		if pmtdist[("-"_lnfee.feetyp_"-") do {
					
			type RecordLNPAS2 lnpas2 = Db.getRecord("LNPAS2", "TABLE = :ln.pas", 1)
			
			set DOLNK = lnpas2.ilff
			}
		
		if DOLNK do {

			do LNKBAS^LNFEEU(lnfee.feetyp)

			set LNKELEM = ""
			
			for  set LNKELEM = LNKFEE(LNKELEM).order() quit:LNKELEM.isNull()  do {
				
				type RecordLNFEE lnfee1 = Db.getRecord("LNFEE","CID=:lnfee.cid,FEETYP=:LNKELEM",1)
																																if (lnfee1.getMode() = 1) quit
																															 
																																set lnfee1.lnkfee = $$LFEE^LNFEECDI(LNKELEM)
																																set lnfee1.amthi = $$AMTH^LNFEECDI(LNKELEM)
				set lnfee1.feerem = 0
				
				do lnfee1.bypassSave()
				}
			}
		}	
	
	// DEFTOT - Check deferred fee total to supporting file
	if (%ProcessMode = 2) do { quit:ER
		
		type Number deftot = 0
	
		type ResultSet rs = Db.select("DEFORG,AMOFA","LNFEED","CID=:lnfee.cid  AND FEETYP=:lnfee.feetyp") quit:ER 

		while rs.next() set deftot = deftot + rs.getCol("DEFORG") - rs.getCol("AMOFA")
	
		// Total Def Fees Not Equal to Sum of Individual Fees
		if (+lnfee.deftot '= +deftot) do Runtime.setErrXBAD("LNFEE",161) quit 
		}
	
	quit

vau1 // Trigger AFTER_UPDATE - After Update Assessment Next Date

	type public RecordLNFEE lnfee
	/*
	---- Revision History ------------------------------------------------
	
	04/07/06 - SmithCD - CR 20510
		   Modified to create a dayendlnfeec record only if lnfee.asnd 
		   is defined to prevent DBSFILER error. Performed some 
		   cleanup.

	01/20/04 - Erik Scheetz - CR7798
		   Created after_update trigger to update the DAYENDLNFEEC
		   table and removing the index.  Included au_asnd trigger 
		   into after_update trigger.

	----------------------------------------------------------------------
	*/
	type public Boolean ER

	// Remove old DAYENDLNFEEC entry
	if lnfee.amthi.oldVal < 2, lnfee.lnkfee.oldVal '= 1 do { quit:ER
		type Date OVASND = lnfee.asnd.oldVal
		type Number OVCID = lnfee.cid.oldVal, OVFEETYP = lnfee.feetyp.oldVal
		
		if (OVASND.isNull()) ! (OVFEETYP.isNull()) quit
		
		do Db.delete("DAYENDLNFEEC", "ASND=:OVASND and CID=:OVCID and FEETYP=:OVFEETYP")
		}

	// Create DAYEND entry only for assesment methods <2 and not linked to fee
	if lnfee.amthi < 2, lnfee.lnkfee '= 1 do { quit:ER
	
		if lnfee.asnd.isNull() quit
	
		type RecordDAYENDLNFEEC dayend=Class.new("RecordDAYENDLNFEEC")
		
		set dayend.asnd = lnfee.asnd
		set dayend.cid = lnfee.cid
		set dayend.feetyp = lnfee.feetyp
		set dayend.reversed = 0

		do dayend.bypassSave()
		}
	
	//  ***  Changes to lnfee.asnd only ***	
	if 'lnfee.isChanged("ASND") quit

	// Assessment Method must be frequency and a base fee
	if lnfee.asnd.isNull(), lnfee.amth = 1, 'lnfee.lfee do Runtime.setErrXBAD("LNFEE",513) quit:ER

	if 'lnfee.asnd.isNull() do { quit:ER 
		// Next Fee Assessment Date is Before System Date
		type RecordLN ln = Db.getRecord("LN","CID=:lnfee.cid")
		if lnfee.asnd '= ln.dtnt, lnfee.asnd < %SystemDate do Runtime.setErrXBAD("LNFEE",511) quit:ER
		}
	
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete LNFEE

	type public RecordLNFEE lnfee
	// Remaining fee amount exists for fee ~p1
	if lnfee.feerem do Runtime.setErrMSG("LNFEE",8497,"lnfee.feetyp") quit 
	
	// Check to see if fee is in string.  Can't delete if it is
	new pmtdist,XCID
	set XCID=lnfee.cid
	set pmtdist=Db.getOneRow("PMTDIST","LN","XCID") quit:ER 
	if ("-"_pmtdist_"-")[("-"_lnfee.feetyp_"-") do {
		// Cannot delete fee if in payment string
		do Runtime.setErrMSG("LNFEE",783) quit:ER 
		}

	quit
	

vbi1 // Trigger BEFORE_INSERT - LNFEE before insert trigger

	type public RecordLNFEE lnfee
	/*
	--- Revision History -------------------------------------------------
	
	02/27/06 - TITOVE - CR 19733
		   Added quit for special fee type "*" and also a new
		   error message 7106.

	06/14/05 - KinI - 16252
		   Modified to bump lnfee.asnd date for the frequency based
		   fee when creating backdated loan so that it is not less
		   then the System Date.
	
	03/06/02 - ALBINK - 48171
		   Added code to quit if a fee is a linked fee.  Assessment
		   dates should not be generated for linked fees since they
		   are tied to a basis.
	
	04/30/01 - EDWARDSM - 44466
		   Set data items, LNKFEE and AMTHI to use in index query
		   for dayend entry of loan fees. LNKFEE and AMTHI are
		   calculated data items, replacing the use of LFEE and
		   AMTH, computed data items which should not be used in
		   an index query.

	09/12/00 - ALBINK - 41691	
		   Modified (if amth=0) do structure

	09/15/99 - CARROLLJ - 31126
		   Convert to PSL.

	*/
	
	// Default remaining fee amount
	if lnfee.feerem.isNull() set lnfee.feerem = 0

	// No need to set up data for or validate special fee type
	if (lnfee.feetyp = "*") quit
	
	// Set up calculated data items for index query 
	set lnfee.lnkfee = $$LFEE^LNFEECDI(lnfee.feetyp)
	set lnfee.amthi = $$AMTH^LNFEECDI(lnfee.feetyp)

	if (lnfee.lnkfee) quit	
	
	type public Boolean ER			

	// Set next amortization date, if necessary
	if lnfee.asnd.isNull() do { quit:ER 
		
		type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP = :lnfee.feetyp", 1)
		
		// Invalid fee plan ~p1
		if 'lnfeep.getMode() do Runtime.setErrMSG("LNFEEP",7106,lnfee.feetyp) quit
		
		if (lnfeep.amth = 0) ! (lnfeep.amth = 1) do { quit:ER 
			
			type RecordLN ln = Db.getRecord("LN","CID=:lnfee.cid") 
			
			if (lnfeep.amth = 0) set lnfee.asnd = ln.dtnt

			if (lnfeep.amth = 1) do { quit:ER 
				type Date ASND = ln.dtnt-1
				for  set ASND = ASND.nextFreqDate(lnfeep.cfre) quit:ER!(ASND'<%SystemDate)
				set lnfee.asnd = ASND
				}
			}
		}
	quit
	
	

vbu1 // Trigger BU_LNFEE - Before update of loan fee

	type public RecordLNFEE lnfee
	do lnfee.setAuditFlag(1)
	/*
								Revision History:
							 
								03/06/06 - TITOVE - CR 19949
		   Added plus symbols around the edit checks for the linked fee
																			flags (retrofit from Profile01).
																		 
	*/

	// Invalid.  Fee plans in use by at least one account may not be deleted.
	if +lnfee.lnkfee '= +($$LFEE^LNFEECDI(lnfee.feetyp)) do Runtime.setErrMSG("LNFEE",1520) quit

	// Invalid.  Fee plans in use by at least one account may not be deleted.
	if +lnfee.amthi '= +($$AMTH^LNFEECDI(lnfee.feetyp)) do Runtime.setErrMSG("LNFEE",1520) quit
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNFEE lnfee

	if (%O = 2) do vload

	if vobj(lnfee,1).exists() do {

		set X = lnfee.amthi if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("AMTHI", vRM) quit
		set X = lnfee.asld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ASLD", vRM) quit
		set X = lnfee.aslf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.ASLF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.asnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ASND", vRM) quit
		set X = lnfee.aspty if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ASPTY", vRM) quit
		set X = lnfee.aspy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.ASPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.astytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.ASTYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.asytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.ASYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.cmpamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.CMPAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.deftot if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.DEFTOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.feelf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.FEELF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.feepty if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.FEEPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.feepy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.FEEPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.feerem if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.FEEREM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.feetytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.FEETYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnfee.feeytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEE.FEEYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[lnfee.LNKFEE) set vRM=$$^MSG(742,"L") do vdderr("LNKFEE", vRM) quit
	}
	set X = lnfee.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if lnfee.feetyp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FEETYP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNFEE","MSG",979,"LNFEE."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNFEE lnfee)	//LNFEE Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnfee)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lnfee)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lnfee)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lnfee)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.lnfee)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.lnfee)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordLNFEE lnfee)	// HIST_DELETE  Table HIST  History for record deletion

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnfee.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(4098,lnfee.feetyp)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNFEE lnfee)	// HIST_INSERT  Table HIST  History for new record in LNFEE

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnfee.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(4097,lnfee.feetyp)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNFEE lnfee)	// HIST_UPDATE  Table HIST  History on update of LNFEE

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnfee.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnfee.cid_","_lnfee.feetyp,"LNFEE",vdi,vold,vnew,$G(EFD),$$^MSG(1639,lnfee.feetyp),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordLNFEE lnfee) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.lnfee)

	quit
	

vi1(RecordLNFEE lnfee) // Maintain LNFEEX index entries (Loan Fee Cross-Reference)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lnfee.feetyp
	type String v3 = lnfee.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("LNFEE",v2,v3)) do vidxerr("LNFEEX")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("LNFEE",v2,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("LNFEE",v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNFEE")

	while ds.next() do {
		type RecordLNFEE lnfee=ds.getRecord("LNFEE")
		if vlist.contains("VINDEX") do VINDEX(.lnfee) quit
		if vlist.contains("LNFEEX") do vi1(.lnfee)
	}

	quit


public VIDXBLD1(RecordLNFEE lnfee, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lnfee) quit
	if vlist.contains("LNFEEX") do vi1(.lnfee)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNFEE","MSG",1225,"LNFEE."_di)

	quit


vkchged // Access key changed

	type public RecordLNFEE lnfee

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("FEETYP").exists() set vux("FEETYP") = vx("FEETYP")
	do vkey(1) set voldkey = lnfee.cid_","_lnfee.feetyp    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnfee.cid_","_lnfee.feetyp    // Copy new keys into object
	type RecordLNFEE vnewrec = lnfee.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNFEE",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNFEE lnfee

	if vux("CID").exists() set lnfee.cid = vux("CID").piece("|",i)
	if vux("FEETYP").exists() set lnfee.feetyp = vux("FEETYP").piece("|",i)
	quit

VIDXPGM()	quit "LNFEEFL"	// Location of index program

