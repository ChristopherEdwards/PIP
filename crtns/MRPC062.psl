MRPC062(String return,Number versn,String msg)	//Public;On Line Limit Check
	/*
	   ORIG: KLINEB - 08/19/97
	   DESC: On Line Limit Check

	   This MRPC is used to call the on line limit check procedure LIMCHK if
	   limit processing is in use.

	   ARGUMENTS:

	    . return 	value passed to NON IBS system 	/TYP=S


	    . versn  	^MRPC062 version number  	/TYP=N/REQ
	     		Current version=1  		/MECH=VAL

	    . msg  	Message from NON-IBS system 	/TYP=T/REQ

	    return  	0 	No over-exposure  	/TYPE=N
	         	1 	Committed Amount Exceeds Customer Limit
	     		2 	Commited Amount Exceeds Legal Lending Limit
	     		3 	Commited Amount Exceeds Customer Limit and Legal
	     			Lending Limit
	     		4 	Outstanding Amount Exceeds Customer Limit
	     		5 	Outstanding Amount Exceeds Legal Lending Limit
	     		6 	Outstanding Amount exceeds Customer Limit and 
				Legal Lending Limit

	   EXAMPLE:
	  	S X=$$^MRPC062(.return,1,msg)

	---- Revision History ------------------------------------------------

	03/14/07 - KumarSS - CR 25177
		   Replaced the usage of zdate function with $$DAT^%ZM,
		   to calculate Maturity Date in MRPC062 section.

        07/26/05 - SkariahV- CR16679
	           Removed #WARN directive.
	
	01/13/03 - GRAY - 51351
		   Converted to PSL.


	*/

	// INITIALIZE VARIABLES

	type Boolean LIMPRO,UPD
	type Date MDT
	type Number %ProcessMode,COMEXP,EXPREP,INTPROD,ITSPROD,TFSPROD
	type String CRCD,CUSID,RECID,RTNSTR,SYSTEM

	type Public Number ER
	type Public String ET,RM


	catch vERROR {
		type Public String ET,RM
		set ET=vERROR.type
		if ET["%GTM-" do ZE^UTLERR
		}

	// Version number of client message is not compatible with server
	if versn.get()'=1 set RM=$$^MSG(2951) quit

	set %ProcessMode=0

	// CUSTOMER SHORT NAME
	set CUSID=msg.piece(",",1)

	// RECORD ID
	set RECID=msg.piece(",",3)

	// COMMITTED EXPOSURE
	set COMEXP=msg.piece(",",4)

	// MATURITY DATE
	set MDT=$$DAT^%ZM(msg.piece(",",5),"YEAR/MM/DD")

	// CURRENCY CODE
	set CRCD=msg.piece(",",6)

	// NON IBS SYSTEM
	set SYSTEM=msg.piece(",",7)
	
	set INTPROD=""

	if SYSTEM="ITS" do ITSPROD(.UPD,SYSTEM,.INTPROD,ITSPROD,msg)

	if SYSTEM="TFS" do TFSPROD(.UPD,.CUSID,SYSTEM,.INTPROD,RECID,msg) do DEC(.COMEXP)


	// On line limit check

	set LIMPRO=CUVAR.LIMPRO
	set EXPREP=CUVAR.EXPREP

	if LIMPRO=1 do {
		set RTNSTR=$$NONIBS^PROCLIM(CUSID,INTPROD,RECID,COMEXP,MDT,CRCD,SYSTEM,UPD)
		do RTNSTR(EXPREP,RTNSTR,.return)
		}

	quit ""


RTNSTR(Number EXPREP,String RTNSTR,String return)	// Determine exposures from string.

	type Public Number RTN

	// NOT OVEREXPOSED
	if RTNSTR.get()="" set return=0 quit

	// REPORTING EXPOSURE
	if EXPREP="" set return=""

	// COMMITED EXPOSURE REPORTING
	if EXPREP=0 do {
		if RTNSTR'["COM" set return=0 quit
		if RTNSTR["PRD"!(RTNSTR["GRP")!(RTNSTR["CUS") set return=1
		if RTNSTR["LEG" set return=$S(RTN.get()=1:3,1:2)
		}

	// OUTSTANDING EXPOSURE REPORTING
	if EXPREP=1 do {
		if RTNSTR'["OUT" set return=0 quit
		if RTNSTR["PRD"!(RTNSTR["GRP")!(RTNSTR["CUS") set return=4
		if RTNSTR["LEG" set return=$S(RTN.get()=1:5,1:6)
		}
	quit


ITSPROD(Boolean UPD,	// DETERMINE ITS PRODUCT TYPE
	String SYSTEM,
	Number INTPROD,
	Number ITSPROD,
	String msg)	


	// ITS PRODUCT TYPE
	set ITSPROD=msg.piece(",",2)
	
	type DbSet ds=Db.selectDbSet("UTBLINTPROD","SYS=:SYSTEM")
	while ds.next() do { quit:INTPROD'=""
		type RecordUTBLINTPROD intprod=ds.getRecord("UTBLINTPROD")
		if intprod.itsprod=ITSPROD set INTPROD=intprod.type
		}

	if INTPROD="" set INTPROD=ITSPROD

	set UPD=1

	quit


TFSPROD(Boolean UPD,	// DETERMINE TFS PRODUCT TYPE
	String CUSID,
	String SYSTEM,
	Number INTPROD,
	String RECID,
	String msg)	


	type Number FIRST,SECOND

	// IMPORT/EXPORT
	set FIRST=RECID.extract(4)

	// DEAL TYPE
	set SECOND=RECID.extract(5)

	type DbSet ds=Db.selectDbSet("UTBLINTPROD","SYS=:SYSTEM")
	while ds.next() do { quit:INTPROD'=""
		type RecordUTBLINTPROD intprod=ds.getRecord("UTBLINTPROD")
		if intprod.impexp'=FIRST quit
		if intprod.dealtype=SECOND set INTPROD=intprod.type
		}

	set UPD=msg.get().piece(",",8)
	set UPD=UPD.extract(10)

	// Extract out the first 13 characters if the deal is an import
	if 'FIRST set CUSID=CUSID.extract(1,13)

	quit


DEC(Number COMEXP)	//Add decimal precision to TFS committed amount.


	type Number AFTDEC,BEFDEC,DEC,LEN

	set LEN=COMEXP.length()
	set DEC=LEN-2

	set BEFDEC=COMEXP.extract(1,DEC)
	set AFTDEC=COMEXP.extract(DEC+1,LEN)

	set COMEXP=BEFDEC_"."_AFTDEC

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60703^23233^Sudanthiran S. Kumar^4184"	// Signature - LTD^TIME^USER^SIZE
