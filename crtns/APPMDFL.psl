APPMDFL(RecordAPPMGMTDATA appmgmtdata, String vpar, Boolean vparNorm) // APPMGMTDATA - Application Management Data Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              08/19/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = appmgmtdata.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(appmgmtdata,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(appmgmtdata,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("APPID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("APPMGMTDATA",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("APPMGMTDATA","APPID = :appmgmtdata.appid and SEQ = :appmgmtdata.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String APPID
	type public String SEQ

	type RecordAPPMGMTDATA appmgmtdata = Db.getRecord("APPMGMTDATA","APPID=:APPID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do appmgmtdata.setMode(2)

		do APPMDFL(appmgmtdata,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordAPPMGMTDATA appmgmtdata

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("APPMGMTDATA","APPID = :appmgmtdata.appid and SEQ = :appmgmtdata.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(appmgmtdata)) K:$D(vobj(appmgmtdata,1,1)) ^APPMGMT(vobj(appmgmtdata,-3),vobj(appmgmtdata,-4)) S ^APPMGMT(vobj(appmgmtdata,-3),vobj(appmgmtdata,-4))=vobj(appmgmtdata)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(appmgmtdata,1,1)) N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(appmgmtdata,1,1)) S vS1=vS1+1,^APPMGMT(vobj(appmgmtdata,-3),vobj(appmgmtdata,-4),vS1)=$E(vobj(appmgmtdata,1,1),vS2,vS2+449)
			#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordAPPMGMTDATA appmgmtdata


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^APPMGMT(vobj(appmgmtdata,-3),vobj(appmgmtdata,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordAPPMGMTDATA appmgmtdata

	// Type local variables for access keys for defaults
	type public String APPID
	type public String SEQ

	if appmgmtdata.crdate.isNull() set appmgmtdata.crdate = +$H // crdate
	if appmgmtdata.crtime.isNull() set appmgmtdata.crtime = $P($H,",",2) // crtime
	type public String %UID
	if appmgmtdata.cruser.isNull() set appmgmtdata.cruser = %UID // cruser
	quit


vreqn // Validate required data items

	type public RecordAPPMGMTDATA appmgmtdata

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordAPPMGMTDATA appmgmtdata

	if appmgmtdata.appid.isNull() do vreqerr("APPID") quit
	if appmgmtdata.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("APPMGMTDATA","MSG",1767,"APPMGMTDATA."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordAPPMGMTDATA appmgmtdata
	if 'appmgmtdata.appid.isNull() set vfkey("^APPMGMT("_""""_appmgmtdata.appid_""""_")")="APPMGMTDATA(APPID) -> APPMGMT"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordAPPMGMTDATA appmgmtdata
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("APPMGMT",":appmgmtdata.appid") set vERRMSG = $$^MSG(8563,"APPMGMTDATA(APPID) -> APPMGMT") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordAPPMGMTDATA appmgmtdata

	set X = appmgmtdata.appid if 'X.isNull(),'Db.isDefined("APPMGMT","X") set vRM = $$^MSG(1485,X) do vdderr("APPID", vRM) quit
	set X = appmgmtdata.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = appmgmtdata.crdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CRDATE", vRM) quit
	set X = appmgmtdata.crtime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("CRTIME", vRM) quit
	set X = appmgmtdata.cruser if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("CRUSER", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("APPMGMTDATA","MSG",979,"APPMGMTDATA."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordAPPMGMTDATA appmgmtdata

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("APPID").exists() set vux("APPID") = vx("APPID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = appmgmtdata.appid_","_appmgmtdata.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = appmgmtdata.appid_","_appmgmtdata.seq // Copy new keys into object
	type RecordAPPMGMTDATA vnewrec = appmgmtdata.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("APPMGMTDATA",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordAPPMGMTDATA appmgmtdata

	if vux("APPID").exists() set appmgmtdata.appid = vux("APPID").piece("|",i)
	if vux("SEQ").exists() set appmgmtdata.seq = vux("SEQ").piece("|",i)
	quit
