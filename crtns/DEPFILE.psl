DEPFILE(RecordDEP dep, String vpar, Boolean vparNorm) // DEP - Deposit File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (1124)           07/13/2007
	// Trigger Definition (134)                    07/10/2007
	// Journal File Definition (16)                07/17/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dep.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dep,.vxins(),10,"|")
	if %O = 1 quit:'dep.isChanged()  do AUDIT^UCUTILN(dep,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = dep.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACN","CID = :dep.cid")            // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordDEP dep = Db.getRecord("DEP","CID=:CID")
	if (%ProcessMode = 2) do {
		do dep.setMode(2)

		do DEPFILE(dep,vpar)
	}
	else  do VINDEX(dep)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEP dep

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACN","CID = :dep.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set dep.FMLD = %SystemDate
		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(dep,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(dep,-3),n)=vobj(dep,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(dep,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(dep,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(dep,-3),n)=vobj(dep,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.dep)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.dep) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDEP dep
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^ACN(vobj(dep,-3),n)) quit:n=""  if '$D(vobj(dep,n)),$D(^ACN(vobj(dep,-3),n))#2 set vobj(dep,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEP dep

	if 'vkeychg.get(),dep.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.dep)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.dep)                  // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^ACN(vobj(dep,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDEP dep

	// Type local variables for access keys for defaults
	type public String CID

	if dep.actibpay.isNull() set dep.actibpay = 0          // actibpay
	if dep.adf.isNull() set dep.adf = 0                    // adf
	if dep.aiacrf.isNull() set dep.aiacrf = 0              // aiacrf
	if dep.anflg.isNull() set dep.anflg = 0                // anflg
	if dep.anlfpr.isNull() set dep.anlfpr = 0              // anlfpr
	if dep.anlsys.isNull() set dep.anlsys = 0              // anlsys
	if dep.aomcode.isNull() set dep.aomcode = 0            // aomcode
	if dep.ars.isNull() set dep.ars = 0                    // ars
	if dep.aubbf.isNull() set dep.aubbf = 0                // aubbf
	if dep.awtp.isNull() set dep.awtp = 0                  // awtp
	if dep.bgtpro.isNull() set dep.bgtpro = 0              // bgtpro
	if dep.blproc.isNull() set dep.blproc = 0              // blproc
	if dep.bwf.isNull() set dep.bwf = 0                    // bwf
	if dep.chkactf.isNull() set dep.chkactf = 0            // chkactf
	if dep.chkeuro.isNull() set dep.chkeuro = 0            // chkeuro
	if dep.chkiss.isNull() set dep.chkiss = 0              // chkiss
	if dep.cmsflg.isNull() set dep.cmsflg = 0              // cmsflg
	if dep.cof.isNull() set dep.cof = 0                    // cof
	if dep.colelg.isNull() set dep.colelg = 0              // colelg
	if dep.collque.isNull() set dep.collque = 0            // collque
	if dep.comm.isNull() set dep.comm = 0                  // comm
	if dep.cumdep.isNull() set dep.cumdep = 0              // cumdep
	if dep.custom1.isNull() set dep.custom1 = 0            // custom1
	if dep.custom2.isNull() set dep.custom2 = 0            // custom2
	if dep.custom3.isNull() set dep.custom3 = 0            // custom3
	if dep.daparwd.isNull() set dep.daparwd = 0            // daparwd
	if dep.dedintpd.isNull() set dep.dedintpd = 0          // dedintpd
	if dep.definadj.isNull() set dep.definadj = 0          // definadj
	if dep.dlkflg.isNull() set dep.dlkflg = 0              // dlkflg
	if dep.eftdd.isNull() set dep.eftdd = 0                // eftdd
	if dep.eftdeb.isNull() set dep.eftdeb = 0              // eftdeb
	if dep.eftreq.isNull() set dep.eftreq = 0              // eftreq
	if dep.eligbpay.isNull() set dep.eligbpay = 0          // eligbpay
	if dep.emplben.isNull() set dep.emplben = 0            // emplben
	if dep.errflg.isNull() set dep.errflg = 0              // errflg
	if dep.fnbodp.isNull() set dep.fnbodp = 0              // fnbodp
	if dep.gcrdod.isNull() set dep.gcrdod = 0              // gcrdod
	if dep.gis.isNull() set dep.gis = 0                    // gis
	if dep.highvol.isNull() set dep.highvol = 0            // highvol
	if dep.iraexc.isNull() set dep.iraexc = 0              // iraexc
	if dep.irfl.isNull() set dep.irfl = 0                  // irfl
	if dep.iwcp.isNull() set dep.iwcp = 0                  // iwcp
	if dep.lpdue.isNull() set dep.lpdue = 0                // lpdue
	if dep.lpswp.isNull() set dep.lpswp = 0                // lpswp
	if dep.lsp.isNull() set dep.lsp = 0                    // lsp
	if dep.mdtext.isNull() set dep.mdtext = 0              // mdtext
	if dep.minbalfl.isNull() set dep.minbalfl = 0          // minbalfl
	if dep.mmdacnv.isNull() set dep.mmdacnv = 0            // mmdacnv
	if dep.mt320.isNull() set dep.mt320 = 0                // mt320
	if dep.mt900.isNull() set dep.mt900 = 0                // mt900
	if dep.mt910.isNull() set dep.mt910 = 0                // mt910
	if dep.mt940.isNull() set dep.mt940 = 0                // mt940
	if dep.mt942.isNull() set dep.mt942 = 0                // mt942
	if dep.mt950.isNull() set dep.mt950 = 0                // mt950
	if dep.nr.isNull() set dep.nr = 0                      // nr
	if dep.nrnegipty.isNull() set dep.nrnegipty = 0        // nrnegipty
	if dep.nrposipty.isNull() set dep.nrposipty = 0        // nrposipty
	if dep.nrppty.isNull() set dep.nrppty = 0              // nrppty
	if dep.nrwhpty.isNull() set dep.nrwhpty = 0            // nrwhpty
	if dep.odflg.isNull() set dep.odflg = 0                // odflg
	if dep.odsf.isNull() set dep.odsf = 0                  // odsf
	if dep.odsi.isNull() set dep.odsi = 0                  // odsi
	type public String TJD
	if dep.odt.isNull() set dep.odt = TJD                  // odt
	if dep.offproc.isNull() set dep.offproc = 0            // offproc
	if dep.oid.isNull() set dep.oid = 0                    // oid
	if dep.osgncrdc.isNull() set dep.osgncrdc = 0          // osgncrdc
	if dep.payeft.isNull() set dep.payeft = 0              // payeft
	if dep.pbi.isNull() set dep.pbi = 0                    // pbi
	if dep.pdiv.isNull() set dep.pdiv = 0                  // pdiv
	if dep.phld.isNull() set dep.phld = 0                  // phld
	if dep.pipw.isNull() set dep.pipw = 0                  // pipw
	if dep.pis.isNull() set dep.pis = 0                    // pis
	if dep.pldg.isNull() set dep.pldg = 0                  // pldg
	if dep.regcc.isNull() set dep.regcc = 0                // regcc
	if dep.regdd.isNull() set dep.regdd = 0                // regdd
	if dep.rflg.isNull() set dep.rflg = 0                  // rflg
	if dep.schproc.isNull() set dep.schproc = 0            // schproc
	if dep.segflg.isNull() set dep.segflg = 0              // segflg
	if dep.shareacct.isNull() set dep.shareacct = 0        // shareacct
	if dep.smet.isNull() set dep.smet = 0                  // smet
	if dep.spf.isNull() set dep.spf = 0                    // spf
	if dep.swpdelip.isNull() set dep.swpdelip = 0          // swpdelip
	if dep.swpni.isNull() set dep.swpni = 0                // swpni
	if dep.trunc.isNull() set dep.trunc = 0                // trunc
	if dep.voselec.isNull() set dep.voselec = 0            // voselec
	if dep.vosstmt.isNull() set dep.vosstmt = 0            // vosstmt
	if dep.vostro.isNull() set dep.vostro = 0              // vostro
	quit


vreqn // Validate required data items

	type public RecordDEP dep

	if dep.acn.isNull() do vreqerr("ACN") quit
	if dep.acnrelc.isNull() do vreqerr("ACNRELC") quit
	if dep.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	if dep.adf.isNull() do vreqerr("ADF") quit
	if dep.aiacrf.isNull() do vreqerr("AIACRF") quit
	if dep.anflg.isNull() do vreqerr("ANFLG") quit
	if dep.anlfpr.isNull() do vreqerr("ANLFPR") quit
	if dep.anlsys.isNull() do vreqerr("ANLSYS") quit
	if dep.ars.isNull() do vreqerr("ARS") quit
	if dep.aubbf.isNull() do vreqerr("AUBBF") quit
	if dep.awtp.isNull() do vreqerr("AWTP") quit
	if dep.balavlcode.isNull() do vreqerr("BALAVLCODE") quit
	if dep.bgtpro.isNull() do vreqerr("BGTPRO") quit
	if dep.blproc.isNull() do vreqerr("BLPROC") quit
	if dep.boo.isNull() do vreqerr("BOO") quit
	if dep.bwf.isNull() do vreqerr("BWF") quit
	if dep.cc.isNull() do vreqerr("CC") quit
	if dep.chkactf.isNull() do vreqerr("CHKACTF") quit
	if dep.chkeuro.isNull() do vreqerr("CHKEURO") quit
	if dep.chkiss.isNull() do vreqerr("CHKISS") quit
	if dep.cls.isNull() do vreqerr("CLS") quit
	if dep.cmsflg.isNull() do vreqerr("CMSFLG") quit
	if dep.cof.isNull() do vreqerr("COF") quit
	if dep.colelg.isNull() do vreqerr("COLELG") quit
	if dep.collque.isNull() do vreqerr("COLLQUE") quit
	if dep.comm.isNull() do vreqerr("COMM") quit
	if dep.crcd.isNull() do vreqerr("CRCD") quit
	if dep.cumdep.isNull() do vreqerr("CUMDEP") quit
	if dep.custom1.isNull() do vreqerr("CUSTOM1") quit
	if dep.custom2.isNull() do vreqerr("CUSTOM2") quit
	if dep.custom3.isNull() do vreqerr("CUSTOM3") quit
	if dep.daparwd.isNull() do vreqerr("DAPARWD") quit
	if dep.dedintpd.isNull() do vreqerr("DEDINTPD") quit
	if dep.definadj.isNull() do vreqerr("DEFINADJ") quit
	if dep.dlkflg.isNull() do vreqerr("DLKFLG") quit
	if dep.eftdd.isNull() do vreqerr("EFTDD") quit
	if dep.eftdeb.isNull() do vreqerr("EFTDEB") quit
	if dep.eftreq.isNull() do vreqerr("EFTREQ") quit
	if dep.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
	if dep.emplben.isNull() do vreqerr("EMPLBEN") quit
	if dep.errflg.isNull() do vreqerr("ERRFLG") quit
	if dep.fnbodp.isNull() do vreqerr("FNBODP") quit
	if dep.gcrdod.isNull() do vreqerr("GCRDOD") quit
	if dep.gis.isNull() do vreqerr("GIS") quit
	if dep.glsc.isNull() do vreqerr("GLSC") quit
	if dep.grp.isNull() do vreqerr("GRP") quit
	if dep.highvol.isNull() do vreqerr("HIGHVOL") quit
	if dep.iraexc.isNull() do vreqerr("IRAEXC") quit
	if dep.irfl.isNull() do vreqerr("IRFL") quit
	if dep.iwcp.isNull() do vreqerr("IWCP") quit
	if dep.lpdue.isNull() do vreqerr("LPDUE") quit
	if dep.lpswp.isNull() do vreqerr("LPSWP") quit
	if dep.lsp.isNull() do vreqerr("LSP") quit
	if dep.mdtext.isNull() do vreqerr("MDTEXT") quit
	if dep.minbalfl.isNull() do vreqerr("MINBALFL") quit
	if dep.mmdacnv.isNull() do vreqerr("MMDACNV") quit
	if dep.mt320.isNull() do vreqerr("MT320") quit
	if dep.mt900.isNull() do vreqerr("MT900") quit
	if dep.mt910.isNull() do vreqerr("MT910") quit
	if dep.mt940.isNull() do vreqerr("MT940") quit
	if dep.mt942.isNull() do vreqerr("MT942") quit
	if dep.mt950.isNull() do vreqerr("MT950") quit
	if dep.nr.isNull() do vreqerr("NR") quit
	if dep.nrnegipty.isNull() do vreqerr("NRNEGIPTY") quit
	if dep.nrposipty.isNull() do vreqerr("NRPOSIPTY") quit
	if dep.nrppty.isNull() do vreqerr("NRPPTY") quit
	if dep.nrwhpty.isNull() do vreqerr("NRWHPTY") quit
	if dep.odflg.isNull() do vreqerr("ODFLG") quit
	if dep.odo.isNull() do vreqerr("ODO") quit
	if dep.odsf.isNull() do vreqerr("ODSF") quit
	if dep.odsi.isNull() do vreqerr("ODSI") quit
	if dep.odt.isNull() do vreqerr("ODT") quit
	if dep.offproc.isNull() do vreqerr("OFFPROC") quit
	if dep.oid.isNull() do vreqerr("OID") quit
	if dep.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
	if dep.payeft.isNull() do vreqerr("PAYEFT") quit
	if dep.pbi.isNull() do vreqerr("PBI") quit
	if dep.pdiv.isNull() do vreqerr("PDIV") quit
	if dep.phld.isNull() do vreqerr("PHLD") quit
	if dep.pipw.isNull() do vreqerr("PIPW") quit
	if dep.pis.isNull() do vreqerr("PIS") quit
	if dep.pldg.isNull() do vreqerr("PLDG") quit
	if dep.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
	if dep.regcc.isNull() do vreqerr("REGCC") quit
	if dep.regdd.isNull() do vreqerr("REGDD") quit
	if dep.rflg.isNull() do vreqerr("RFLG") quit
	if dep.schproc.isNull() do vreqerr("SCHPROC") quit
	if dep.segflg.isNull() do vreqerr("SEGFLG") quit
	if dep.sgncrd.isNull() do vreqerr("SGNCRD") quit
	if dep.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	if dep.shareacct.isNull() do vreqerr("SHAREACCT") quit
	if dep.smet.isNull() do vreqerr("SMET") quit
	if dep.spf.isNull() do vreqerr("SPF") quit
	if dep.stat.isNull() do vreqerr("STAT") quit
	if dep.swpdelip.isNull() do vreqerr("SWPDELIP") quit
	if dep.swpni.isNull() do vreqerr("SWPNI") quit
	if dep.trb.isNull() do vreqerr("TRB") quit
	if dep.trunc.isNull() do vreqerr("TRUNC") quit
	if dep.type.isNull() do vreqerr("TYPE") quit
	if dep.voselec.isNull() do vreqerr("VOSELEC") quit
	if dep.vosstmt.isNull() do vreqerr("VOSSTMT") quit
	if dep.vostro.isNull() do vreqerr("VOSTRO") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEP dep

	if dep.cid.isNull() do vreqerr("CID") quit

	if 'vobj(dep,-100,49,"").order().isNull() do {
		if vx("ODSF").exists(),dep.odsf.isNull() do vreqerr("ODSF") quit
		if vx("ODO").exists(),dep.odo.isNull() do vreqerr("ODO") quit
		if vx("TRB").exists(),dep.trb.isNull() do vreqerr("TRB") quit
		if vx("FNBODP").exists(),dep.fnbodp.isNull() do vreqerr("FNBODP") quit
	}
	if 'vobj(dep,-100,50,"").order().isNull() do {
		if vx("TYPE").exists(),dep.type.isNull() do vreqerr("TYPE") quit
		if vx("CLS").exists(),dep.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),dep.grp.isNull() do vreqerr("GRP") quit
		if vx("CC").exists(),dep.cc.isNull() do vreqerr("CC") quit
		if vx("OID").exists(),dep.oid.isNull() do vreqerr("OID") quit
		if vx("CRCD").exists(),dep.crcd.isNull() do vreqerr("CRCD") quit
		if vx("ANLSYS").exists(),dep.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("COMM").exists(),dep.comm.isNull() do vreqerr("COMM") quit
		if vx("REGCC").exists(),dep.regcc.isNull() do vreqerr("REGCC") quit
		if vx("GLSC").exists(),dep.glsc.isNull() do vreqerr("GLSC") quit
		if vx("CUSTOM1").exists(),dep.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),dep.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),dep.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("HIGHVOL").exists(),dep.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("EMPLBEN").exists(),dep.emplben.isNull() do vreqerr("EMPLBEN") quit
	}
	if 'vobj(dep,-100,51,"").order().isNull() do {
		if vx("RFLG").exists(),dep.rflg.isNull() do vreqerr("RFLG") quit
		if vx("PHLD").exists(),dep.phld.isNull() do vreqerr("PHLD") quit
		if vx("ODSI").exists(),dep.odsi.isNull() do vreqerr("ODSI") quit
		if vx("PBI").exists(),dep.pbi.isNull() do vreqerr("PBI") quit
		if vx("STAT").exists(),dep.stat.isNull() do vreqerr("STAT") quit
		if vx("ARS").exists(),dep.ars.isNull() do vreqerr("ARS") quit
		if vx("ADF").exists(),dep.adf.isNull() do vreqerr("ADF") quit
		if vx("LPDUE").exists(),dep.lpdue.isNull() do vreqerr("LPDUE") quit
		if vx("LPSWP").exists(),dep.lpswp.isNull() do vreqerr("LPSWP") quit
		if vx("COLELG").exists(),dep.colelg.isNull() do vreqerr("COLELG") quit
		if vx("PLDG").exists(),dep.pldg.isNull() do vreqerr("PLDG") quit
		if vx("BALAVLCODE").exists(),dep.balavlcode.isNull() do vreqerr("BALAVLCODE") quit
	}
	if 'vobj(dep,-100,52,"").order().isNull() do {
		if vx("BOO").exists(),dep.boo.isNull() do vreqerr("BOO") quit
		if vx("ODT").exists(),dep.odt.isNull() do vreqerr("ODT") quit
		if vx("IRAEXC").exists(),dep.iraexc.isNull() do vreqerr("IRAEXC") quit
		if vx("TRUNC").exists(),dep.trunc.isNull() do vreqerr("TRUNC") quit
	}
	if 'vobj(dep,-100,53,"").order().isNull() do {
		if vx("MDTEXT").exists(),dep.mdtext.isNull() do vreqerr("MDTEXT") quit
	}
	if 'vobj(dep,-100,54,"").order().isNull() do {
		if vx("BWF").exists(),dep.bwf.isNull() do vreqerr("BWF") quit
		if vx("IWCP").exists(),dep.iwcp.isNull() do vreqerr("IWCP") quit
		if vx("NR").exists(),dep.nr.isNull() do vreqerr("NR") quit
	}
	if 'vobj(dep,-100,55,"").order().isNull() do {
		if vx("PIPW").exists(),dep.pipw.isNull() do vreqerr("PIPW") quit
	}
	if 'vobj(dep,-100,57,"").order().isNull() do {
		if vx("SEGFLG").exists(),dep.segflg.isNull() do vreqerr("SEGFLG") quit
	}
	if 'vobj(dep,-100,61,"").order().isNull() do {
		if vx("CHKISS").exists(),dep.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CHKEURO").exists(),dep.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKACTF").exists(),dep.chkactf.isNull() do vreqerr("CHKACTF") quit
	}
	if 'vobj(dep,-100,62,"").order().isNull() do {
		if vx("EFTDEB").exists(),dep.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),dep.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("EFTDD").exists(),dep.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("SMET").exists(),dep.smet.isNull() do vreqerr("SMET") quit
		if vx("SWPNI").exists(),dep.swpni.isNull() do vreqerr("SWPNI") quit
		if vx("ELIGBPAY").exists(),dep.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
		if vx("ACTIBPAY").exists(),dep.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	}
	if 'vobj(dep,-100,66,"").order().isNull() do {
		if vx("VOSTRO").exists(),dep.vostro.isNull() do vreqerr("VOSTRO") quit
		if vx("VOSELEC").exists(),dep.voselec.isNull() do vreqerr("VOSELEC") quit
		if vx("VOSSTMT").exists(),dep.vosstmt.isNull() do vreqerr("VOSSTMT") quit
	}
	if 'vobj(dep,-100,70,"").order().isNull() do {
		if vx("CMSFLG").exists(),dep.cmsflg.isNull() do vreqerr("CMSFLG") quit
	}
	if 'vobj(dep,-100,99,"").order().isNull() do {
		if vx("ACN").exists(),dep.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),dep.acnrelc.isNull() do vreqerr("ACNRELC") quit
	}
	if 'vobj(dep,-100,100,"").order().isNull() do {
		if vx("ODFLG").exists(),dep.odflg.isNull() do vreqerr("ODFLG") quit
		if vx("MMDACNV").exists(),dep.mmdacnv.isNull() do vreqerr("MMDACNV") quit
	}
	if 'vobj(dep,-100,107,"").order().isNull() do {
		if vx("BGTPRO").exists(),dep.bgtpro.isNull() do vreqerr("BGTPRO") quit
	}
	if 'vobj(dep,-100,115,"").order().isNull() do {
		if vx("SHAREACCT").exists(),dep.shareacct.isNull() do vreqerr("SHAREACCT") quit
	}
	if 'vobj(dep,-100,210,"").order().isNull() do {
		if vx("ANFLG").exists(),dep.anflg.isNull() do vreqerr("ANFLG") quit
		if vx("SPF").exists(),dep.spf.isNull() do vreqerr("SPF") quit
		if vx("AUBBF").exists(),dep.aubbf.isNull() do vreqerr("AUBBF") quit
	}
	if 'vobj(dep,-100,426,"").order().isNull() do {
		if vx("GCRDOD").exists(),dep.gcrdod.isNull() do vreqerr("GCRDOD") quit
	}
	if 'vobj(dep,-100,428,"").order().isNull() do {
		if vx("AIACRF").exists(),dep.aiacrf.isNull() do vreqerr("AIACRF") quit
		if vx("OFFPROC").exists(),dep.offproc.isNull() do vreqerr("OFFPROC") quit
	}
	if 'vobj(dep,-100,431,"").order().isNull() do {
		if vx("PAYEFT").exists(),dep.payeft.isNull() do vreqerr("PAYEFT") quit
	}
	if 'vobj(dep,-100,432,"").order().isNull() do {
		if vx("DEFINADJ").exists(),dep.definadj.isNull() do vreqerr("DEFINADJ") quit
		if vx("DLKFLG").exists(),dep.dlkflg.isNull() do vreqerr("DLKFLG") quit
		if vx("COLLQUE").exists(),dep.collque.isNull() do vreqerr("COLLQUE") quit
	}
	if 'vobj(dep,-100,434,"").order().isNull() do {
		if vx("SWPDELIP").exists(),dep.swpdelip.isNull() do vreqerr("SWPDELIP") quit
		if vx("GIS").exists(),dep.gis.isNull() do vreqerr("GIS") quit
		if vx("PIS").exists(),dep.pis.isNull() do vreqerr("PIS") quit
	}
	if 'vobj(dep,-100,435,"").order().isNull() do {
		if vx("MINBALFL").exists(),dep.minbalfl.isNull() do vreqerr("MINBALFL") quit
	}
	if 'vobj(dep,-100,436,"").order().isNull() do {
		if vx("PDIV").exists(),dep.pdiv.isNull() do vreqerr("PDIV") quit
	}
	if 'vobj(dep,-100,437,"").order().isNull() do {
		if vx("LSP").exists(),dep.lsp.isNull() do vreqerr("LSP") quit
	}
	if 'vobj(dep,-100,438,"").order().isNull() do {
		if vx("MT900").exists(),dep.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),dep.mt910.isNull() do vreqerr("MT910") quit
		if vx("MT320").exists(),dep.mt320.isNull() do vreqerr("MT320") quit
		if vx("MT940").exists(),dep.mt940.isNull() do vreqerr("MT940") quit
		if vx("MT942").exists(),dep.mt942.isNull() do vreqerr("MT942") quit
		if vx("MT950").exists(),dep.mt950.isNull() do vreqerr("MT950") quit
	}
	if 'vobj(dep,-100,440,"").order().isNull() do {
		if vx("COF").exists(),dep.cof.isNull() do vreqerr("COF") quit
	}
	if 'vobj(dep,-100,442,"").order().isNull() do {
		if vx("NRPOSIPTY").exists(),dep.nrposipty.isNull() do vreqerr("NRPOSIPTY") quit
		if vx("NRWHPTY").exists(),dep.nrwhpty.isNull() do vreqerr("NRWHPTY") quit
		if vx("NRNEGIPTY").exists(),dep.nrnegipty.isNull() do vreqerr("NRNEGIPTY") quit
		if vx("NRPPTY").exists(),dep.nrppty.isNull() do vreqerr("NRPPTY") quit
	}
	if 'vobj(dep,-100,444,"").order().isNull() do {
		if vx("ANLFPR").exists(),dep.anlfpr.isNull() do vreqerr("ANLFPR") quit
		if vx("DEDINTPD").exists(),dep.dedintpd.isNull() do vreqerr("DEDINTPD") quit
	}
	if 'vobj(dep,-100,446,"").order().isNull() do {
		if vx("REGDD").exists(),dep.regdd.isNull() do vreqerr("REGDD") quit
		if vx("IRFL").exists(),dep.irfl.isNull() do vreqerr("IRFL") quit
	}
	if 'vobj(dep,-100,448,"").order().isNull() do {
		if vx("SGNCRD").exists(),dep.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("PSGNCRDR").exists(),dep.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("OSGNCRDC").exists(),dep.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("SGNCRDCHGDT").exists(),dep.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	}
	if 'vobj(dep,-100,450,"").order().isNull() do {
		if vx("ERRFLG").exists(),dep.errflg.isNull() do vreqerr("ERRFLG") quit
		if vx("AWTP").exists(),dep.awtp.isNull() do vreqerr("AWTP") quit
	}
	if 'vobj(dep,-100,456,"").order().isNull() do {
		if vx("BLPROC").exists(),dep.blproc.isNull() do vreqerr("BLPROC") quit
	}
	if 'vobj(dep,-100,464,"").order().isNull() do {
		if vx("SCHPROC").exists(),dep.schproc.isNull() do vreqerr("SCHPROC") quit
		if vx("CUMDEP").exists(),dep.cumdep.isNull() do vreqerr("CUMDEP") quit
		if vx("DAPARWD").exists(),dep.daparwd.isNull() do vreqerr("DAPARWD") quit
	}
		if vx("ACN").exists(),dep.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),dep.acnrelc.isNull() do vreqerr("ACNRELC") quit
		if vx("ACTIBPAY").exists(),dep.actibpay.isNull() do vreqerr("ACTIBPAY") quit
		if vx("ADF").exists(),dep.adf.isNull() do vreqerr("ADF") quit
		if vx("AIACRF").exists(),dep.aiacrf.isNull() do vreqerr("AIACRF") quit
		if vx("ANFLG").exists(),dep.anflg.isNull() do vreqerr("ANFLG") quit
		if vx("ANLFPR").exists(),dep.anlfpr.isNull() do vreqerr("ANLFPR") quit
		if vx("ANLSYS").exists(),dep.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("ARS").exists(),dep.ars.isNull() do vreqerr("ARS") quit
		if vx("AUBBF").exists(),dep.aubbf.isNull() do vreqerr("AUBBF") quit
		if vx("AWTP").exists(),dep.awtp.isNull() do vreqerr("AWTP") quit
		if vx("BALAVLCODE").exists(),dep.balavlcode.isNull() do vreqerr("BALAVLCODE") quit
		if vx("BGTPRO").exists(),dep.bgtpro.isNull() do vreqerr("BGTPRO") quit
		if vx("BLPROC").exists(),dep.blproc.isNull() do vreqerr("BLPROC") quit
		if vx("BOO").exists(),dep.boo.isNull() do vreqerr("BOO") quit
		if vx("BWF").exists(),dep.bwf.isNull() do vreqerr("BWF") quit
		if vx("CC").exists(),dep.cc.isNull() do vreqerr("CC") quit
		if vx("CHKACTF").exists(),dep.chkactf.isNull() do vreqerr("CHKACTF") quit
		if vx("CHKEURO").exists(),dep.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKISS").exists(),dep.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CLS").exists(),dep.cls.isNull() do vreqerr("CLS") quit
		if vx("CMSFLG").exists(),dep.cmsflg.isNull() do vreqerr("CMSFLG") quit
		if vx("COF").exists(),dep.cof.isNull() do vreqerr("COF") quit
		if vx("COLELG").exists(),dep.colelg.isNull() do vreqerr("COLELG") quit
		if vx("COLLQUE").exists(),dep.collque.isNull() do vreqerr("COLLQUE") quit
		if vx("COMM").exists(),dep.comm.isNull() do vreqerr("COMM") quit
		if vx("CRCD").exists(),dep.crcd.isNull() do vreqerr("CRCD") quit
		if vx("CUMDEP").exists(),dep.cumdep.isNull() do vreqerr("CUMDEP") quit
		if vx("CUSTOM1").exists(),dep.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),dep.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),dep.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("DAPARWD").exists(),dep.daparwd.isNull() do vreqerr("DAPARWD") quit
		if vx("DEDINTPD").exists(),dep.dedintpd.isNull() do vreqerr("DEDINTPD") quit
		if vx("DEFINADJ").exists(),dep.definadj.isNull() do vreqerr("DEFINADJ") quit
		if vx("DLKFLG").exists(),dep.dlkflg.isNull() do vreqerr("DLKFLG") quit
		if vx("EFTDD").exists(),dep.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("EFTDEB").exists(),dep.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),dep.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("ELIGBPAY").exists(),dep.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
		if vx("EMPLBEN").exists(),dep.emplben.isNull() do vreqerr("EMPLBEN") quit
		if vx("ERRFLG").exists(),dep.errflg.isNull() do vreqerr("ERRFLG") quit
		if vx("FNBODP").exists(),dep.fnbodp.isNull() do vreqerr("FNBODP") quit
		if vx("GCRDOD").exists(),dep.gcrdod.isNull() do vreqerr("GCRDOD") quit
		if vx("GIS").exists(),dep.gis.isNull() do vreqerr("GIS") quit
		if vx("GLSC").exists(),dep.glsc.isNull() do vreqerr("GLSC") quit
		if vx("GRP").exists(),dep.grp.isNull() do vreqerr("GRP") quit
		if vx("HIGHVOL").exists(),dep.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("IRAEXC").exists(),dep.iraexc.isNull() do vreqerr("IRAEXC") quit
		if vx("IRFL").exists(),dep.irfl.isNull() do vreqerr("IRFL") quit
		if vx("IWCP").exists(),dep.iwcp.isNull() do vreqerr("IWCP") quit
		if vx("LPDUE").exists(),dep.lpdue.isNull() do vreqerr("LPDUE") quit
		if vx("LPSWP").exists(),dep.lpswp.isNull() do vreqerr("LPSWP") quit
		if vx("LSP").exists(),dep.lsp.isNull() do vreqerr("LSP") quit
		if vx("MDTEXT").exists(),dep.mdtext.isNull() do vreqerr("MDTEXT") quit
		if vx("MINBALFL").exists(),dep.minbalfl.isNull() do vreqerr("MINBALFL") quit
		if vx("MMDACNV").exists(),dep.mmdacnv.isNull() do vreqerr("MMDACNV") quit
		if vx("MT320").exists(),dep.mt320.isNull() do vreqerr("MT320") quit
		if vx("MT900").exists(),dep.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),dep.mt910.isNull() do vreqerr("MT910") quit
		if vx("MT940").exists(),dep.mt940.isNull() do vreqerr("MT940") quit
		if vx("MT942").exists(),dep.mt942.isNull() do vreqerr("MT942") quit
		if vx("MT950").exists(),dep.mt950.isNull() do vreqerr("MT950") quit
		if vx("NR").exists(),dep.nr.isNull() do vreqerr("NR") quit
		if vx("NRNEGIPTY").exists(),dep.nrnegipty.isNull() do vreqerr("NRNEGIPTY") quit
		if vx("NRPOSIPTY").exists(),dep.nrposipty.isNull() do vreqerr("NRPOSIPTY") quit
		if vx("NRPPTY").exists(),dep.nrppty.isNull() do vreqerr("NRPPTY") quit
		if vx("NRWHPTY").exists(),dep.nrwhpty.isNull() do vreqerr("NRWHPTY") quit
		if vx("ODFLG").exists(),dep.odflg.isNull() do vreqerr("ODFLG") quit
		if vx("ODO").exists(),dep.odo.isNull() do vreqerr("ODO") quit
		if vx("ODSF").exists(),dep.odsf.isNull() do vreqerr("ODSF") quit
		if vx("ODSI").exists(),dep.odsi.isNull() do vreqerr("ODSI") quit
		if vx("ODT").exists(),dep.odt.isNull() do vreqerr("ODT") quit
		if vx("OFFPROC").exists(),dep.offproc.isNull() do vreqerr("OFFPROC") quit
		if vx("OID").exists(),dep.oid.isNull() do vreqerr("OID") quit
		if vx("OSGNCRDC").exists(),dep.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("PAYEFT").exists(),dep.payeft.isNull() do vreqerr("PAYEFT") quit
		if vx("PBI").exists(),dep.pbi.isNull() do vreqerr("PBI") quit
		if vx("PDIV").exists(),dep.pdiv.isNull() do vreqerr("PDIV") quit
		if vx("PHLD").exists(),dep.phld.isNull() do vreqerr("PHLD") quit
		if vx("PIPW").exists(),dep.pipw.isNull() do vreqerr("PIPW") quit
		if vx("PIS").exists(),dep.pis.isNull() do vreqerr("PIS") quit
		if vx("PLDG").exists(),dep.pldg.isNull() do vreqerr("PLDG") quit
		if vx("PSGNCRDR").exists(),dep.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("REGCC").exists(),dep.regcc.isNull() do vreqerr("REGCC") quit
		if vx("REGDD").exists(),dep.regdd.isNull() do vreqerr("REGDD") quit
		if vx("RFLG").exists(),dep.rflg.isNull() do vreqerr("RFLG") quit
		if vx("SCHPROC").exists(),dep.schproc.isNull() do vreqerr("SCHPROC") quit
		if vx("SEGFLG").exists(),dep.segflg.isNull() do vreqerr("SEGFLG") quit
		if vx("SGNCRD").exists(),dep.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("SGNCRDCHGDT").exists(),dep.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
		if vx("SHAREACCT").exists(),dep.shareacct.isNull() do vreqerr("SHAREACCT") quit
		if vx("SMET").exists(),dep.smet.isNull() do vreqerr("SMET") quit
		if vx("SPF").exists(),dep.spf.isNull() do vreqerr("SPF") quit
		if vx("STAT").exists(),dep.stat.isNull() do vreqerr("STAT") quit
		if vx("SWPDELIP").exists(),dep.swpdelip.isNull() do vreqerr("SWPDELIP") quit
		if vx("SWPNI").exists(),dep.swpni.isNull() do vreqerr("SWPNI") quit
		if vx("TRB").exists(),dep.trb.isNull() do vreqerr("TRB") quit
		if vx("TRUNC").exists(),dep.trunc.isNull() do vreqerr("TRUNC") quit
		if vx("TYPE").exists(),dep.type.isNull() do vreqerr("TYPE") quit
		if vx("VOSELEC").exists(),dep.voselec.isNull() do vreqerr("VOSELEC") quit
		if vx("VOSSTMT").exists(),dep.vosstmt.isNull() do vreqerr("VOSSTMT") quit
		if vx("VOSTRO").exists(),dep.vostro.isNull() do vreqerr("VOSTRO") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEP","MSG",1767,"DEP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDEP dep
	if 'dep.acn.isNull() set vfkey("^CIF("_""""_dep.acn_""""_","_1_")")="DEP(ACN) -> CIF"
	if 'dep.rpaseq.isNull() set vfkey("^IRA("_""""_dep.acn_""""_","_""""_dep.rpaseq_""""_")")="DEP(ACN,RPASEQ) -> IRATYPE"
	if 'dep.type.isNull() set vfkey("^UTBLDFTD("_""""_dep.type_""""_","_50_")")="DEP(TYPE) -> PRODDFTD"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDEP dep
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":dep.acn") set vERRMSG = $$^MSG(8563,"DEP(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'dep.rpaseq.isNull() if 'Db.isDefined("IRATYPE",":dep.acn,:dep.rpaseq") set vERRMSG = $$^MSG(8563,"DEP(ACN,RPASEQ) -> IRATYPE") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("PRODDFTD",":dep.type") set vERRMSG = $$^MSG(8563,"DEP(TYPE) -> PRODDFTD") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do vau25 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do vau39 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("ACN").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ACNRELC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIACRF").exists()!vx("IAF").exists()!vx("INTAVLR").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIINDEX").exists()!vx("AIINTFRE").exists()!vx("AIICHLD").exists()!vx("AIICHND").exists()!vx("AIRDET").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIIOPT").exists()!vx("AIINTTRF").exists()!vx("AIEXTSEQ").exists()!vx("AIEXTACN").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIIPF").exists()!vx("AIIPLD").exists()!vx("AIINP").exists() do vau7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIIRN").exists() do vau8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ANLCID").exists() do vau9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ANLTYP").exists() do vau10 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AWT").exists()!vx("AWTI").exists()!vx("AWTP").exists()!vx("AWTR").exists()!vx("BWF").exists() do vau15 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BGTOFFST").exists() do vau11 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BGTPRO").exists() do vau12 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BOO").exists() do vau13 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CC").exists() do vau16 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CCODE").exists() do vau17 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CHKS").exists() do vau18 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("COD").exists() do vau19 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("COLELG").exists() do vau20 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CONVACN").exists() do vau21 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CTFGRP").exists() do vau22 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CURRAMT").exists() do vau23 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DARCOVR").exists() do vau24 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ELIGBPAY").exists()!vx("ACTIBPAY").exists() do vau14 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("EXTACN").exists()!vx("EXTSEQ").exists()!vx("INTDISETC").exists()!vx("INTMATETC").exists()!vx("PRIMATETC").exists() do vau26 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FEEPLN").exists() do vau27 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FLTP1").exists()!vx("FLTP2").exists()!vx("FLTP3").exists()!vx("FLTP4").exists()!vx("FLTP5").exists()!vx("FLTD1").exists()!vx("FLTD2").exists()!vx("FLTD3").exists()!vx("FLTD4").exists()!vx("FLTD5").exists()!vx("FLTTBL").exists() do vau28 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRS").exists()!vx("GCRCD").exists()!vx("MSCRTBL").exists()!vx("DSCRTBL").exists()!vx("SCRFREQ").exists()!vx("NSDATE").exists() do vau29 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRTFCID").exists() do vau30 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GLSC").exists() do vau31 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GRP").exists() do vau32 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("HLDP1").exists()!vx("HLDP2").exists()!vx("HLDP3").exists()!vx("HLDP4").exists()!vx("HLDP5").exists()!vx("HLDD1").exists()!vx("HLDD2").exists()!vx("HLDD3").exists()!vx("HLDD4").exists()!vx("HLDD5").exists()!vx("HLDTBL").exists() do vau33 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ICHND").exists()!vx("INTFRE").exists() do vau34 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INC").exists()!vx("ICF").exists() do vau35 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INCDR").exists() do vau36 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INDEX").exists()!vx("ODLIM").exists()!vx("ODTERM").exists()!vx("INTMAT").exists()!vx("INTSPR").exists()!vx("RNDMTD").exists()!vx("INTRAMT1").exists()!vx("INTRAMT2").exists()!vx("INTRAMT3").exists()!vx("INTRRAT1").exists()!vx("INTRRAT2").exists()!vx("INTRRAT3").exists()!vx("INTREXP1").exists()!vx("INTREXP2").exists()!vx("INTREXP3").exists()!vx("INTSPRP").exists()!vx("INTSPRA").exists()!vx("INTSPRU").exists() do vau37 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INP").exists()!vx("INTCHKFRE").exists()!vx("INTCHKND").exists()!vx("IPF").exists()!vx("LBCP").exists()!vx("LBCM").exists() do vau38 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INTWCALC").exists()!vx("PIPW").exists() do vau40 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IOPT").exists()!vx("ITRF").exists()!vx("NEGITRF").exists() do vau41 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRA").exists()!vx("RPASEQ").exists() do vau42 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRCB").exists()!vx("ANLINFLCALIN").exists() do vau43 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRN").exists() do vau44 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("LNM").exists() do vau45 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MDT").exists()!vx("TRM").exists() do vau46 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MINDR").exists() do vau47 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MMDACNV").exists()!vx("MMDAPTC").exists()!vx("MMDACNVTYP").exists() do vau48 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT900").exists()!vx("MT900THR").exists() do vau49 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT910").exists()!vx("MT910THR").exists() do vau50 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NEGACRPO").exists() do vau51 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NEGBALOP").exists() do vau52 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NEGINP").exists()!vx("NEGIPF").exists()!vx("NEGIPO").exists() do vau53 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NIAO").exists()!vx("UFINDEX").exists() do vau54 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NOTICE").exists()!vx("NOTMIN").exists()!vx("NOTMAX").exists() do vau55 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NR").exists() do vau56 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NSCN").exists() do vau57 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ODO").exists()!vx("LPSWP").exists() do vau71 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PERS").exists() do vau58 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PLDG").exists() do vau59 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("POPT").exists()!vx("SEGPOPT").exists()!vx("WDPRIO").exists() do vau60 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RENCD").exists()!vx("RACN").exists()!vx("PRENA").exists()!vx("IMO").exists()!vx("RRO").exists()!vx("INTMATITA").exists() do vau61 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RSINTSPR").exists()!vx("RSRNDMTD").exists() do vau62 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SCFRE").exists() do vau63 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SCND").exists() do vau64 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEGPER").exists() do vau65 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SFRE").exists() do vau66 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SGNCRD").exists()!vx("OSGNCRDC").exists()!vx("PSGNCRDR").exists() do vau67 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SMET").exists() do vau68 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STAT").exists() do vau69 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SVCFEECID").exists() do vau70 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SWPF").exists() do vau72 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SWPT").exists()!vx("SWPTR").exists()!vx("SWPI").exists()!vx("SWRI").exists()!vx("SWPROPT").exists() do vau73 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TITLE1").exists()!vx("TITLE2").exists()!vx("TITLE3").exists()!vx("TITLE4").exists() do vau74 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TYPE").exists() do vau75 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("UPFRE").exists() do vau76 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("UPNDT").exists() do vau77 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("USPL").exists() do vau78 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("WRKDTE").exists() do vau79 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDEP dep
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(dep,.vx(),10,"|") quit
	if vx("ACS").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIIPF").exists()!vx("AIINP").exists()!vx("AIIPLD").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AIIRN").exists()!vx("AIRDET").exists()!vx("AIINTFRE").exists()!vx("AIICHND").exists()!vx("AIICHLD").exists()!vx("AIINDEX").exists()!vx("AIINTMAT").exists()!vx("AIINTSPR").exists()!vx("AIRNDMTD").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ANLLSD").exists() do vbu5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ANLSNL").exists() do vbu6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ANLSYS").exists()!vx("ANLTYP").exists() do vbu7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AWTI").exists()!vx("IRN").exists()!vx("INTFRE").exists()!vx("ICHND").exists()!vx("ICHLD").exists()!vx("INDEX").exists()!vx("INTMAT").exists()!vx("INTSPR").exists()!vx("RNDMTD").exists() do vbu29 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("AWTP").exists()!vx("BWF").exists() do vbu11 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BGTCONTR").exists()!vx("BGTYRSD").exists() do vbu8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BGTPRO").exists() do vbu9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BGTYRND").exists()!vx("BGTOFFST").exists() do vbu10 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CLS").exists() do vbu14 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("COLLST").exists()!vx("PCOLLST").exists()!vx("COLCDTE").exists() do vbu15 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CUMDEP").exists()!vx("NSCDEPDD").exists()!vx("NSCHDEPS").exists()!vx("SCHDEPA").exists()!vx("SCHDEPF").exists()!vx("SCHDEPLD").exists()!vx("SCHDEPN").exists()!vx("SCHDEPND").exists()!vx("SCHPROC").exists()!vx("TOTNOSDP").exists() do vbu44 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DARCOVR").exists() do vbu16 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DEFINADJ").exists() do vbu17 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("EMPLBEN").exists()!vx("EMPLNO").exists() do vbu18 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRCV").exists() do vbu20 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRDOD").exists() do vbu21 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRLMNT").exists() do vbu22 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRPMNT").exists() do vbu23 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRS").exists()!vx("GCRCD").exists() do vbu19 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GCRTFCID").exists() do vbu24 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INTCHKFRE").exists()!vx("INTCHKND").exists()!vx("INTCHKLD").exists() do vbu25 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IOPT").exists()!vx("ITRF").exists() do vbu26 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IPF").exists()!vx("INP").exists()!vx("IPLD").exists()!vx("INTAF").exists() do vbu27 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRA").exists()!vx("DLKFLG").exists() do vbu28 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("LSP").exists()!vx("LAFM").exists()!vx("OBORIRP").exists()!vx("IEP").exists()!vx("LAFTFR").exists() do vbu30 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MMDA4").exists()!vx("MMDA3").exists()!vx("REGD").exists() do vbu32 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT320").exists() do vbu33 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT900").exists() do vbu34 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT910").exists() do vbu35 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT940").exists() do vbu36 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT942G1").exists()!vx("MT942G2").exists()!vx("MT942").exists() do vbu37 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT950").exists() do vbu38 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NEGIPF").exists()!vx("NEGINP").exists()!vx("NEGIPLD").exists() do vbu39 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ODT").exists() do vbu40 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ODTERM").exists() do vbu41 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PBI").exists() do vbu42 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PBKSEQ").exists() do vbu13 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PROVOAMT").exists()!vx("PROVOPCT").exists()!vx("RACOVR").exists() do vbu43 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SCLD").exists()!vx("ANLOFFDY").exists() do vbu45 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEGACR").exists() do vbu46 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEGFLG").exists() do vbu47 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SGNCRD").exists()!vx("PSGNCRDR").exists()!vx("OSGNCRDC").exists() do vbu48 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STAT").exists() do vbu49 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TITLE1").exists()!vx("TITLE2").exists()!vx("TITLE3").exists() do vbu12 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TREXD").exists()!vx("TRATE").exists() do vbu50 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TRM").exists()!vx("MDT").exists() do vbu31 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TYPE").exists() do vbu51 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("USRESTAT").exists() do vbu52 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(dep,.vx(),10,"|")
	quit


vau1 // Trigger ACNRELC - After Update Account Relationship Code

	type public RecordDEP dep
	/*
	   Revision History

	   10/12/99 - CHOK - 31126
		      Converted to PSL.
	*/

	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
		new ACNRELC,ICID,ITYPE,SWPNI
	
		set ACNRELC=dep.acnrelc
		new rs
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		if rs.isEmpty() quit				// No linked investment accounts
		while rs.next() do { quit:ER  
			set ICID=rs.getCol(1)			// Investment Account Number
			set ITYPE=rs.getCol(2)			// Investment Product Type
			set SWPNI=Db.getOneRow("SWPNI","PRODDFTD","ITYPE")
			if SWPNI do Db.update("DEP","ACNRELC=:ACNRELC","CID=:ICID")
			}
		}
	quit

vai1 // Trigger AFTER_INSERT - Deposit After Insert Trigger

	type public RecordDEP dep

	/*
	---- Revision History---------------------------------------------------
	
	09/18/01 - MYERSK 47550
		   Removed AU_SGNCRD trigger since XSGNCRD is now an Index.
		   Needed to put Revision History somewhere.
	
 	06/26/00 - Terrie Dougherty - 40629
		   Moved all code and revision history comments from this
		   trigger into a new procedure, DEPAI, to prevent compilation
		   errors caused by the DEP filer being too large. Changes to
		   the AFTER_INSERT trigger should now be made to the DEPAI
		   procedure.
	*/ 

	do PROC^DEPAI(.dep)
	quit

vau2 // Trigger AU - After Update trigger for all columns

	type public RecordDEP dep

	/*
								---- Revision History ------------------------------------------------
	
								05/15/01 - VETSENM - 43026
																			Set error message for Non-PROFILE account if Conversion
																			Account (DEP.CONVACN) is not defined.

																			Set XBAD message if user attempts to perform file
																			maintenance on a Non-PROFILE account (PRODCTL.NONPA=1)
	
	07/29/01 - VETSENM - 46279
		   Code for DEP.CONVACN has been removed to AU_CONVACN.

	*/


	new NONPA,TYPE
	
								set TYPE=dep.type
								set NONPA=Db.getOneRow("NONPA","PRODCTL","TYPE")

								// File Maintenance Require Approval
								if NONPA=1 do Runtime.setErrXBAD("DEP",3005) quit:ER

								quit

vau3 // Trigger AU_ACN - After Update Customer Number

	type public RecordDEP dep
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
		new ACN,ICID,IDATA,ITYPE,LINKCNT,SWPNI
	
		set ACN=dep.acn
		new rs 
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		if rs.isEmpty() quit				// No linked investment accounts	
		while rs.next() do { quit:ER  
			set ICID=rs.getCol(1)			// Investment Account Number
			set ITYPE=rs.getCol(2)			// Investment Product Type
			set SWPNI=Db.getOneRow("SWPNI","PRODDFTD","ITYPE")
			if SWPNI do Db.update("DEP","ACN=:ACN","CID=:ICID")
			}
		}
	
	quit:'Db.getOneRow("LIMPRO","CUVAR")
	do START^LIMUPD(dep.cid,"DEPOSIT",dep.acn,dep.acn.oldVal)
	
	quit

vau4 // Trigger AU_AIACRF - After Update Avail Int Accrual Flag

	type public RecordDEP dep
	// trigger AU_AIACRF

	/*
	   ---- Revision History ------------------------------------------------

	   10/13/99 - CHOK - 31126
		      Converted to PSL.
	
	   05/26/99 - SWEENEYT - 32933
	              Added check for invalid combination IAF=2 and IOTP=2.	
	*/

	do TRIGCHK^AIACRF(CID,.dep)
	
	// IOPT - Interest Disbursement Option Verification.
	
	// Invalid field values ([DEP]IAF and [DEP]IOPT).
	if dep.iopt>0,dep.iaf=2 do Runtime.setErrMSG("DEP",8619) quit:ER 
	

	
								//Checking the Interest Available Option(IAF) with Reset Interest
								//Available on Renewal Flag(INTAVLR)
	
	
   	if dep.intavlr=3,dep.iaf'=2 do Runtime.setErrXBAD("DEP","INTAVLR") quit:ER
	if ((dep.intavlr=1)!(dep.intavlr=2)),dep.iaf'=1 do Runtime.setErrXBAD("DEP","INTAVLR")
	
	
								// Error if Renewal Code(RENCD) is not equal to 3 when Reset Interest
								//Available on Renewal Flag(INTAVLR) is other than Zero.
								if dep.intavlr,dep.rencd'=3 do Runtime.setErrMSG("DEP",4299) quit:ER
	
								//
	
								quit
	
	//
	
	quit

vau5 // Trigger AU_AIINDEX - After Update Available Interest Index

	type public RecordDEP dep
	// trigger AU_AIINDEX
	
	/*
	   ---- Revision History ----------------------------------------------
		
	   06/11/02 - VERTLIBA - 50561
		      Removed restriction for AIICHND (ARQ32998) which was
		      creating an integrity error when running the function
		      @UOPEN for the segmented accounts at the segment level.
	
	   10/27/00 - SMITHC - 42068:1
		      Moved "Do not use Values Relating to Change in Available 
		      Interest if DEP.AIRDET=0" error check from BU_AIINDEX.
	
	   10/14/99 - CHOK - 31126
		      Converted to PSL.
	
	   09/02/99 - MAGERAM - 32998
		      Added restriction "~p1 must be null when accruing at segment
	              level" for AIICHND.
	
	   4/19/99 -  DADAP - 32555
		      Made changes to check for AIINDEX or AIIRN for AIRDET=1.
	*/
	
	do TRIGCHK^AIACRF(CID,.dep) quit:ER 
	
	/*
	   If dep.airdet is zero (use principal interest rate), then we
	   shouldn't have values for information relating to available
	   interest changes, because the interest on available interest should
	   never change.

	   Do not use Values Relating to Change in Available Interest if 
	   DEP.AIRDET=0
	*/
	if ('dep.airdet)&((dep.aiichld'="")!(dep.aiichnd'="")!(dep.aiintfre'="")) do Runtime.setErrMSG("DEP",3987) if ER quit

	// Avail Int - Int Change Freq is required with Avail Int Index
	if dep.aiindex'="",dep.aiintfre="" do Runtime.setErrXBAD("DEP",186) quit:ER 

	// Avail Int - Int Rate required if Avail Int Rate Deter is 1
	if dep.airdet=1,dep.aiirn="",dep.aiindex="" do Runtime.setErrXBAD("DEP",235) quit:ER 

	// Avail Int Next Change Date cannot be earlier than sys date
	if dep.aiichnd,dep.aiichnd<%SystemDate do Runtime.setErrXBAD("DEP",191) quit:ER 

	quit 

vau6 // Trigger AU_AIIOPT - After Update of Available Interest

	type public RecordDEP dep
	// trigger AU_AIIOPT

	/*
	   ---- Revision History ------------------------------------------------
	   
	   09/26/05 - RADHIKA - 16891 
																						Eliminated PSL deprecated features and Warnings.
																						Removed revision history prior to 2004.
	*/
	
	type public Boolean ER
	type public Number CID
	
	do TRIGCHK^AIACRF(CID,.dep) quit:ER 
	
	if (dep.aiiopt=4) do { quit:ER 
		// Avail Int Ext Acct Seq required if Avail Int Disbmt Opt is 4
		if (dep.aiextseq="") do Runtime.setErrXBAD("DEP",188) quit:ER 

		// Avail Int Ext Tfr Cust ID required if Avail Int Disbmt Opt is 4
		if (dep.aiextacn="") do Runtime.setErrXBAD("DEP",189) quit:ER 
		}
	
	if (dep.aiiopt=2) do { quit:ER 
		// Avail Int Disbmt Opt 2 requires valid Avail Int Internal Tft
																if dep.aiinttrf.isNull()!'Db.isDefined("DEP","CID=:dep.aiinttrf") do Runtime.setErrXBAD("DEP",190) quit:ER
		}
	quit 

vau7 // Trigger AU_AIIPF - Available Interest Posting

	type public RecordDEP dep
	/*
	   ---- Revision History ------------------------------------------------
	    
	   05/11/07 - SANTHUMS - CR 27044               
	              Modified to insert a record into DAYENDINP, since
		      interest was not getting posted on the next interest 
	     	      posting date whenever segmented deposit accounts were 
	     	      created.
	     	      
	   09/26/05 - RADHIKA - 16891 
																						Eliminated PSL deprecated features and Warnings.
																					 
	   12/12/00 - SCHWARTZC - 43194
		      Roll Forward of the following change.
 		      07/12/00 - REEDD - 40953
             	       Added check to AIACRF.  This will avoid unecessary checks
		       and invalid overrides from being returned. Also removed 
		       extra check to AIINP.

	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   09/02/99 - MAGERAM - 32998
		      Added restriction "~p1 must be null when accruing at segment
	              level" for AIINP.
	
	   07/14/99 - SMITHC - 33309
		      Modified 6/10/99 change to set up DAYEND entries only if
		      not in verify mode.
	
	   06/10/99 - SMITHC - 32048
		      Maintain DAYEND entry of next interest posting dates
		      (int on available int) manually.  This coding replaces
		      the traditional filer index definitions for next interest
		      posting dates.	
	*/
	
	type public Number CID
	type public Boolean ER 
		
	do TRIGCHK^AIACRF(CID,.dep) quit:ER 
	
	// If the accrual flag has been turned off then the above check will verify
	// that all fields that must be NULL are indeed NULL and no further checks
	// are needed.
	if 'dep.aiacrf quit	//cds 12/12/00

	// ~p1 must be null when accruing at segment level
	if dep.segflg,'dep.segacr do { quit:ER 
		if dep.aiinp do Runtime.setErrXBAD("DEP",532,"DEP.AIINP") quit:ER 
		}
	// Avail Int Next Posting Date cannot be earlier than sys date
	if dep.aiinp<%SystemDate do Runtime.setErrXBAD("DEP",192) quit:ER 
	
	/*
	   Maintain DAYEND entry for next interest posting date manually
	   This coding replaces the traditional filer index definitions for
	   next interest posting dates.
	*/
	if '(%ProcessMode=2),dep.aiinp'=dep.aiinp.oldVal,dep.segflg,dep.segacr do { quit:ER 
		new TJD
		set TJD=dep.aiinp
	
		// Segmented interest on principal, accruing/posting at
		// account level
		new X
		set X=dep.aiinp.oldVal		
		if dep.aiinp.oldVal'="" do {
			
			do Db.delete("DAYENDSEGIP","CID=:CID AND TJD=:X AND POSTING=3 AND SEG=-1")
			do Db.delete("DAYENDINP","CID=:CID AND TJD=:X AND POSTING=3")
			}
		if dep.aiinp'="" do {
			type RecordDAYENDSEGIP dayend=Class.new("RecordDAYENDSEGIP")
			set dayend.tjd=TJD
			set dayend.cid=CID
			set dayend.posting=3
			set dayend.seg=-1
			do dayend.save()
			
			type RecordDAYENDINP dayendinp=Class.new("RecordDAYENDINP")
			set dayendinp.tjd=TJD  
			set dayendinp.cid=CID  
			set dayendinp.posting=3  
 			do dayendinp.save()
			}
		}
	quit

vau8 // Trigger AU_AIIRN - After Update Available Interest Rate

	type public RecordDEP dep
	/*
	   --- Revision History -----------------------------------------------
											10/10/05 - RADHIKA - 16891        
																						.Removed revision history prior to 2004.
																						.Removed unused variables %A,A,DEP.
	   
	*/
	
	if dep.aiirn'="" do { quit:ER

		// Segments in Use Flag must be on
		if 'dep.segflg do Runtime.setErrMSG("DEP",7893) if ER quit 
	
		// Available Interest Option must be 2
		if dep.iaf'=2 do Runtime.setErrMSG("DEP",7891) if ER quit 
	
		// Available Interest Accrual Flag must be on
		if 'dep.airdet do Runtime.setErrMSG("DEP",7892) if ER quit 
		}

	if $G(%EffectiveDate),%EffectiveDate<%SystemDate do { quit:ER
	
		// Cannot effective-date prior to opening date
		if dep.odt>%EffectiveDate do Runtime.setErrMSG("DEP",450) if ER quit 
	
		// Cannot effective-date prior to date last renewed
		if dep.dlr>%EffectiveDate do Runtime.setErrMSG("DEP",449) if ER quit 
	
		if %EffectiveDate'>dep.hisctf do { quit:ER 
			type Date x 
			set x = dep.hisctf.toString()		
			// Must be after the history purge date of ~p1
			do Runtime.setErrMSG("DEP",1801,x) if ER quit
			}

		do EFDIRN^DEPIRN(dep.cid,.dep,1,dep.irn.oldVal)

		/*
		   Allow an accrual adjustment error to occur.  The messages 
		   displayed will tell the user about the problem. A manual 
		   adjustment will be required.
		*/
		if ER,$D(RM)>1 set ER="W" set RM=$G(RM(1))_" "_$G(RM(2))
		}
	quit

vau9 // Trigger AU_ANLCID - After Update of Analysis CID

	type public RecordDEP dep
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
 	    Eliminate PSL deprecated features
 	    
 	    Remove old revision history.
	----------------------------------------------------------------------
	
	If this is a sub account for combined account analysis, make sure
	that the lead CID is valid, and that it is a lead account.
	*/
	
	if (dep.anltyp=2)!(dep.anltyp=3) do { quit:ER
	new leadcid,tmp
	set leadcid=dep.anlcid

	//Valid lead account must be defined for earnings analysis
	set tmp=Db.isDefined("DEP","leadcid")
								if 'tmp do Runtime.setErrXBAD("DEP","ANLVAL") quit:ER

	type RecordDEP lead = Db.getRecord("DEP", "CID=:leadcid", 1)

   	if (lead.anltyp '= 1) do Runtime.setErrXBAD("DEP","ANLVAL") quit:ER
	}
	quit

vau10 // Trigger AU_ANLTYP - After Update Anltyp

	type public RecordDEP dep
	/* If the value of analysis type changes from a 1 to any other value, the
				filer will check the XREF file ANLLINK to make sure that there aren't any
				linked accounts before allowing the change.
	*/
	
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
 	    Eliminate PSL deprecated features
	----------------------------------------------------------------------
	*/
	
	if (dep.anltyp.oldVal=1) do { quit:ER
								set XCID=CID
								type ResultSet rs=Db.select("ANLTYP","DEP","ANLCID=:XCID")
								if rs.isEmpty() quit
								do Runtime.setErrXBAD("DEP","ANLXLK") quit:ER
	}
	
	//Valid lead account must be defined for earnings analysis

	if (dep.anltyp=2)!(dep.anltyp=3) do { quit:ER
								if 'dep.anlcid do Runtime.setErrXBAD("DEP","ANLVAL") quit:ER
	}

	//If analysis is 1, check if there are sub accounts.
	
	if dep.anltyp=1 do { quit:ER
								set ANLCID=dep.cid,NEWSCND=dep.scnd
								set XCID=dep.cid
								type ResultSet rs=Db.select("SCND,CID","DEP","ANLCID=:XCID")
								while rs.next() do {
																set data=rs.getRow()
																set SUBSCND=$P(data,$C(9),1)
																set SUBCID=$P(data,$C(9),2)
	
																		//If SCND of sub account is not same as lead, change sub acct.
	
  		if SUBSCND'=NEWSCND do {
  		
  			type RecordDEP subdep = Db.getRecord("DEP", "CID=:SUBCID")
  			
  			set subdep.scnd = NEWSCND
  			
  			do subdep.save()
        	}
	}
	}
	
								//if changing SCND on sub account (Acct. analysis) check that sub's
								//SCND = the lead account.  If the change is coming from Service Fee
								//processing, quit out of this check.
	
	if (dep.anltyp=2)!(dep.anltyp=3) do { quit:ER
								if dep.isChanged("SCND","SYSTEM") quit // SyStem changes allowed
								new LEADCID,NEWSCND
								set LEADCID=dep.anlcid
								set tmp=Db.isDefined("DEP","LEADCID")
								if 'tmp do Runtime.setErrXBAD("DEP","ANLVAL") quit:ER
							 
								type RecordDEP lead = Db.getRecord("DEP", "CID=:LEADCID", 1)
							 
								//"Accts next svc fee date must equal lead acct svc fee date"
								if (lead.scnd '= dep.scnd) do Runtime.setErrXBAD("DEP","ANLSVF") quit:ER
	}
	quit

vau11 // Trigger AU_BGTOFFST - Budget Offset Days

	type public RecordDEP dep
	// Verify Budget Offset Days - 41065 CPS 07/14/00
	if (dep.bgtpro) if (dep.bgtyrnd-dep.bgtyrsd)<dep.bgtoffst do Runtime.setErrXBAD("DEP","BGT") quit:ER 
	quit

vau12 // Trigger AU_BGTPRO - After update Budget Processing

	type public RecordDEP dep
								/*
								---- Revision History---------------------------------------------------
	
								05/04/06 - KELLYP - CR 21117
        	   Removed Db.getRecord on DEP which was causing a PSL compiler
        	   error.  Also cleaned up rest of trigger.
								*/
							 
								type public Boolean ER
							 
	// If Budget Account create first Budget Record 
	if dep.bgtpro do {
	        type Boolean FOUND = 0
	        
	        // Check to see if budget records exist for today
	        type ResultSet rst = Db.select("BGTSEQ","BUDGET","CID=:dep.cid AND BGTYRSD=:dep.bgtyrsd")
	        if 'rst.isEmpty() quit
	        
	        // Check to see if any budget records exist
	        type ResultSet rsa = Db.select("BGTSEQ","BUDGET","CID=:XCID")
	        if 'rsa.isEmpty() set FOUND=1	
	        
	        type RecordBUDGET budget = Db.getRecord("BUDGET","CID=:dep.cid,BGTYRSD=:dep.bgtyrsd,BGTSEQ=1",1)
	        do budget.save()

		// Turning budget processing on will create a new budget year
		if FOUND do Runtime.setErrXBAD("DEP","BGTREC") quit:ER
		}

 	// If Budget Processing Flag has been turn off
	if 'dep.bgtpro do {
		/*
		 Save DEBAUT and DEBAUT2 files - set BGTCID,BGTSEQ,BILLNBR with 
		 empty string.
		*/ 
		type DbSet ds=Db.selectDbSet("DEBAUT","BGTCID=:dep.cid AND ACN=:dep.acn")
		while ds.next() do {
			type RecordDEBAUT debaut=ds.getRecord("DEBAUT")
		
			set debaut.bgtcid = ""
			set debaut.bgtseq = ""
			set debaut.billnbr = ""
	
			do debaut.save()
			}
		
		type DbSet ds2=Db.selectDbSet("DEBAUT2","BGTCID=:dep.cid AND ACN=:dep.acn")
		while ds2.next() do {
 		
			type RecordDEBAUT2 debaut2=ds2.getRecord("DEBAUT2")
							 
		        set debaut2.bgtcid = ""
			set debaut2.bgtseq = ""
			set debaut2.billnbr = ""
	
		        do debaut2.save()
			}
		}
	quit

vau13 // Trigger AU_BOO - After Update - Branch of Ownership

	type public RecordDEP dep
	/*
	   ---------- Revision History ------------------------------------------
	   
	   07/05/07 - VanithaK - CR28007
		      Modified the changes made for CR 27879 to include a test
		      case when Region code starts with zero.
		   
	   06/28/07 - VanithaK - CR27879
	   	      Added validation for Branch of Ownership when bankid is 
	   	      defined.
	   
	   03/30/06 - RussellDS - CR16892
	   	      Remove references to obsolete membership info.

	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   03/11/98 - Terrie Dougherty - 26685
		      Replaced DTYPE with PRODDFTD as part of single
		      database project.
	*/

	type Public Boolean ER
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
		new ICID,ITYPE,SWPNI,TBOO
	
		set TBOO=dep.boo
		new rs 
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		if rs.isEmpty() quit				// No linked investment accounts
	
		while rs.next() do { quit:ER  
			set ICID=rs.getCol(1)			// Investment Account Number
			set ITYPE=rs.getCol(2)			// Investment Product Type
			set SWPNI=Db.getOneRow("SWPNI","PRODDFTD","ITYPE")
			if SWPNI do Db.update("DEP","BOO=:TBOO","CID=:ICID")
			}
		}
		
	// Region Code must be three numbers	
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:dep.type")
	if prodctl.iftanpro = "IFTAN" do { quit:ER
		
		type RecordUTBLBRCD utblbrcd = Db.getRecord("UTBLBRCD","BRCD=:dep.boo",1)
		type Number I
		type String CH, REGION
		
		if utblbrcd.region.length()'=3 do Runtime.setErrMSG("UTBLBRCD",6198) quit
		
		set REGION=""
		
		for I=1:1:utblbrcd.region.length() do { quit:ER
			set CH = utblbrcd.region.extract(I)
			if CH'="0" set REGION=REGION_CH
		}
		
		if 'REGION.isNumber() do Runtime.setErrMSG("UTBLBRCD",6198) quit
	}
		
	quit

vau14 // Trigger AU_BPAYOPTS - After Update ACTIBPAY,ELIGBPAY Options

	type public RecordDEP dep
	;---- Revision History--------------------------------------------------------
	; 01/02/02 - PREMKUMARM - 48651
	;            Added check for account level bill pay option.
	;-----------------------------------------------------------------------------
	if dep.actibpay=1,dep.eligbpay'=1 do Runtime.setErrMSG("DEP",5093) quit:ER
	quit

vau15 // Trigger AU_BWF - After Update Backup Withholding

	type public RecordDEP dep
	// trigger AU_BWF
	 
	/*
	   ---- Revision History----------------------------------------------
	12/08/05 - ALAGARSS - CR 18006
 		   Modified the code to remove deprecated feature warnings.
 		   And removed the old history.
	
	*/

	type public Boolean ER
	type public Number BWF
	/*
	Select Backup Withholding Option to use Accrued Withholding 
	Tax Processing
	*/
	if 'dep.bwf,dep.awtp do Runtime.setErrMSG("DEP",5071) quit:ER

	/*
	Accrued Withholding Tax Processing not valid with interest 
	Withholding Calculation Method
	*/
	if dep.awtp,dep.intwcalc'="" do Runtime.setErrMSG("DEP",5072) quit:ER

	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
		
		set BWF=dep.bwf

		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		// No linked investment accounts
		if rs.isEmpty() quit				
	
		while rs.next() do { quit:ER
		
			type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:rs.getCol(""ITYPE"")")
			if proddftd.swpni do {
				type RecordDEP dep1=Db.getRecord("DEP","CID=:rs.getCol(""ICID"")")
				do dep1.setAuditFlag()
				set dep1.bwf=BWF
				do dep1.save()
				
			}
			}
		}

	quit

vau16 // Trigger AU_CC - After Update Cost Center

	type public RecordDEP dep
	/*
	   ---------- Revision History ------------------------------------------
	  12/08/05 - ALAGARSS - CR 18006
 		     Modified the code to remove deprecated feature warnings.
 		   
	   10/14/99 - CHOK - 31126
		      Converted to PSL.
	*/
	type public Boolean ER
	type public Number CC
	
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/

		set CC=dep.cc
		
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		if rs.isEmpty() quit				// No linked investment accounts
	
		while rs.next() do { quit:ER  

			type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:rs.getCol(""ITYPE"")")
			if proddftd.swpni do {
				type RecordDEP dep1=Db.getRecord("DEP","CID=:rs.getCol(""ICID"")")
				do dep1.setAuditFlag()
				set dep1.cc=CC
				do dep1.save()
				}
			}
		}
	quit

vau17 // Trigger AU_CCODE - After Update Customer Code

	type public RecordDEP dep
	/*
	   ---------- Revision History ------------------------------------------
	   12/08/05 - ALAGARSS - CR 18006
 		   Modified the code to remove deprecated feature warnings.
 		   
	   10/14/99 - CHOK - 31126
		      Converted to PSL.
	*/
	type public Boolean ER
	type public String CCODE
	
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
			
		set CCODE=dep.ccode
		
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		// No linked investment accounts
		if rs.isEmpty() quit				
	
		while rs.next() do { quit:ER  
			type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:rs.getCol(""ITYPE"")")
			if proddftd.swpni do {
				type RecordDEP dep1=Db.getRecord("DEP","CID=:rs.getCol(""ICID"")")
				do dep1.setAuditFlag()								
				set dep1.ccode=CCODE
				do dep1.save()
			}
			}
		}
	quit

vau18 // Trigger AU_CHKS - After Update of CHKS field

	type public RecordDEP dep
	/*

	---- Revision History---------------------------------------------------
	
	02/13/07 - VARGAJ - 24940
		Enforced the validation to ensure that a starting check number
		exists when the check type demands it.

	*/

	if 'dep.chkeuro quit
	
	type RecordUTBLCHKS utblchks = Db.getRecord("UTBLCHKS","CHKS=:dep.chks",1)
	if utblchks.getMode()=0 quit
		
	if (dep.nscn'=""),(utblchks.accntnum = 0) do { quit:ER		
			// Check type prohibits a starting check number.
			do Runtime.setErrXBAD("DEP","CHECKNUMPROH","NSCN")	
	}
	
	if (dep.nscn=""),(utblchks.accntnum = 1) do { quit:ER		
			// Check type requires a starting check number.		
			do Runtime.setErrXBAD("DEP","CHECKNUMREQ","NSCN")
	}
	quit

vau19 // Trigger AU_COD - Check order date trigger

	type public RecordDEP dep
	/*
	-----Revision History--------------------------------------------------
	07/06/07 - VARGAJ - 27887
		   As the check activation functionality is using the check
		   order date, ensure that it cannot be set to the past.

	*/

	// Date must not be in the past
	if dep.cod < %SystemDate do Runtime.setErrMSG("DEP",755) quit:ER
	quit

vau20 // Trigger AU_COLELG - After Update Collateral Eligibility 

	type public RecordDEP dep
	/*
	---- Revision History---------------------------------------------------
	02/08/06 - TELIV - CR 19311
		Replaced reference to XREFDEPSC with LNCOL

	*/

	// Account is pledged as collateral

	if dep.colelg quit

	new rs 
	type ResultSet rs=Db.select("PLDGACN","LNCOL","CID=:CID") 	
	if 'rs.isEmpty() do Runtime.setErrMSG("DEP",3517) quit:ER 
	quit

vau21 // Trigger AU_CONVACN - After Update trigger for CONVACN column.

	type public RecordDEP dep
	/*
	---- Revision History ------------------------------------------------
	
	07/29/01 - VETSENM - 46279
																			Set error message for Non-PROFILE account if Conversion
																			Account (DEP.CONVACN) is not defined.
	
	*/



	new CONV,NONPA,TYPE

	//Conversion Account Required for Non-PROFILE Institution Account.
	set TYPE=dep.type
	set NONPA=Db.getOneRow("NONPA","PRODCTL","TYPE")
	set CONV=dep.convacn
	if NONPA=1,CONV="" do Runtime.setErrMSG("DEP",4896) quit:ER
	quit

vau22 // Trigger AU_CTFGRP - Inserts plans onto CTFPLNCID

	type public RecordDEP dep
	/*
					---- Revision History---------------------------------------------------
	06/27/01 - KESTELMANN - 46116
																			Added code to check plans of the updated CTFGRP. The code
																			will check if there are any plans within that group that
																			can be deleted from the account's CTFPLNCID table. If all
																			the  dollar fields on the CTFPLNCID table are 0 or null,
																			then that plan can be removed from the CTFPLNCID table.
	
								03/19/01 - STATTOND - 43390
								updates CTF plans on the account level, CTFPLNCID. (^ACN Node 123)
								when dep.ctfgrp (Group Name) is modified.  
	*/

	
	 
	new CTFPLN,GRPNAME,data

	set GRPNAME=dep.ctfgrp.oldVal    // get updated CTFGRP
	
	I GRPNAME'="" do { quit:ER
								type ResultSet rs=Db.select("CTFPLN","UTBLCTFGRP1","GRPNAME=:GRPNAME")
									while rs.next() do { quit:ER
																set CTFPLN=rs.getCol(1)
																if Db.isDefined("CTFPLNCID","CID,CTFPLN") do { quit:ER
																								set data=Db.getOneRow("DAYCALC,DAYCALCF,PYTD,PLIF,PPYR","CTFPLNCID","CID,CTFPLN")
																								if '$P(data,$C(9),1),'$P(data,$C(9),2),'$P(data,$C(9),3),'$P(data,$C(9),4),'$P(data,$C(9),5) do Db.delete("CTFPLNCID","CID=:CID AND CTFPLN=:CTFPLN") quit:ER
																								}
																}
	}

	set GRPNAME=dep.ctfgrp
	set CID=dep.cid

	if dep.ctfgrp'="" do {
 	type ResultSet rs=Db.select("CTFPLN","UTBLCTFGRP1","GRPNAME=:GRPNAME")
 	if rs.isEmpty() quit
	while rs.next() do {
		set CTFPLN=rs.getCol(1)
		if Db.isDefined("CTFPLNCID","CID,CTFPLN") quit
		
		//check initial query
		new query
		set query=Db.getOneRow("INTQUERY","UTBLCTFPLN","CTFPLN")
		if '$$CHECKCID^COMCALC() quit
		
		//check to see if end date on plan has past
																new ENDDATE
		set ENDDATE=Db.getOneRow("ENDDATE","UTBLCTFPLN","CTFPLN")
																if (ENDDATE'="")&(TJD>ENDDATE) quit

		do Db.insert("CTFPLNCID","CID,CTFPLN,ACTIVE",":CID,:CTFPLN,:1")

		}
	}


	quit
	

vau23 // Trigger AU_CURRAMT - After Update of Current Amount

	type public RecordDEP dep

	/* Revision history

	02/17/06 - SmithCD - CR 19637
		   Replaced UPDATE^PROCESC call, which no longer exists.

	*/

	if dep.aref.isNull() quit

	// Update Payment Escrow Amount on loan account related to escrow
	type RecordLN ln = Db.getRecord("LN", "CID=:dep.aref")
	set ln.pmttrs = ln.pmttrs + (dep.curramt - dep.curramt.oldVal)
	do ln.save()

	quit

vau24 // Trigger AU_DARCOVR - After Update Deposit Asset Class Overrid

	type public RecordDEP dep
	/*
	----Revision History---------------------------------------------------
 	08/10/05 - TITOVE - CR 16844
		   Cleaned up as part of DBI3 project. 
	
	*/

	// Asset Class Override has to have a valid value
	if 'dep.darcovr quit
	
	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE = :dep.type")
	
	// Deposit reclassification processing not valid for product type ~p1
	if 'prodctl.darcpo do Runtime.setErrMSG("DEP",3245,dep.type) quit 

	
	// Verify the value exist in UTBLACC: "Invalid table value ~p1"
	if 'Db.isDefined("UTBLACC","dep.cls,dep.darcovr") do Runtime.setErrMSG("DEP",1485,"UTBLACC.AC") quit 

	quit
	

vau25 // Trigger AU_DOD_INTEG - Date of Death/Disability Integrity Check

	type public RecordDEP dep
	/*
	---- Revision History -------------------------------------------------
	07/19/05 - RussellDS - CR16614
		   Remove reference to vpar("VALRI" and replaced with
		   just vpar reference.
		   
		   Cleaned up PSL
		   
		   Remove old revision history.
	-----------------------------------------------------------------------

	This trigger should never have a column name associated with it.  It should
	be called for any and all DEP maintenance.
	
	*/
	
	type public Boolean ER
	type public String verrors(,)
	
	type Boolean DISBRST, DODRST
	type String VERR1, VERR2

	quit:vpar.get().isLike("%/NOVALRI/%")
	
	type RecordCIF cif = Db.getRecord("CIF", "ACN=:dep.acn")
	
	// Verify that the CIFDOD and CIFDODSABL restrictions have not
	// been set.  Do not set the restrictions a second time.
	
	set (DODRST,DISBRST) = 0
	set (VERR1,VERR2) = ""
	for  set VERR1 = verrors(VERR1).order() quit:VERR1.isNull()  do {
		for  set VERR2 = verrors(VERR1,VERR2).order() quit:VERR2.isNull()  do {
			if verrors(VERR1,VERR2).piece("|", 3) = "CIFDOD" set DODRST=1
			if verrors(VERR1,VERR2).piece("|", 3) = "CIFDODSABL" set DISBRST=1
		}
	}
	
	if (cif.dod > 0), 'DODRST do Runtime.setErrXBAD("DEP","CIFDOD") quit:ER 
	if (cif.dodsabl > 0), 'DISBRST do Runtime.setErrXBAD("DEP","CIFDODSABL") quit:ER 

	quit

vau26 // Trigger AU_EXTACN - External Transfer Customer ID

	type public RecordDEP dep
	/*
	  ---- Revision History -----------------------------------------------
		08/06/01 - MAYLATHR - 45171
		Changed logic so that the principal maturity option is not
		dependent on the interest maturity option.

		09/07/00 - KINI - 41328
 	      	Roll forward changes by DADAP (ARQ 32293) to replace EXTACN & 
 	        EXTSEQ columns with INTDISETC & INTDISETS.
 	        Presence of the previous columns caused unwanted validation 
 	        message appearance during account update that has int/div 
 	        transferred to an external account when DEP.IOPT=4.           	

	  ---------------------------------------------------------------------
	*/ 

	// External Acct Sequence is required
	if dep.extacn'="",dep.extseq="" do Runtime.setErrXBAD("DEP",199) quit:ER 

	// External Acct Sequence is required
	if dep.intdisetc'="",dep.intdisets="" do Runtime.setErrXBAD("DEP",199) quit:ER

	// External Tfr  Cust ID required for external tfr
	if dep.intdisetc="",((dep.imo=4)!(dep.iopt=4)) do Runtime.setErrXBAD("DEP",202) quit:ER 

								// External Tfr  Cust ID required if Prin Mat Opt is 4
								if dep.primatetc="",dep.rencd=4 do Runtime.setErrXBAD("DEP",201) quit:ER 
	
	quit
	

vau27 // Trigger AU_FEEPLN - After update of Fee Plan

	type public RecordDEP dep
	if dep.grp="DBD",dep.feepln'="" do Runtime.setErrXBAD("DEP","XDBDFEE") quit:ER 
	quit 
	

vau28 // Trigger AU_FLT_INFO - After Update Float Hold Info

	type public RecordDEP dep
	/*
	   ---- Revision History ------------------------------------------------

	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   04/03/01 - TITOVE - 41199:001
		      Corrected setting of the error message 2852.

	   11/29/00 - TITOVE - 41199
	              Added check to make sure the percentage allocation for
        	      hold factors adds up to 100%, unless it is zero.

	   05/25/00 - LUS - 40263
																						Retrofitted change below:
		      04/03/00 - LUS -37723
																						Removed the check to verify the requied of Float Hold and
                      Check Hold.	
	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   08/06/99 - KONGJ - 34255
	              Added a check to ensure that either Float Hold or Factor
	              field contains value.
	*/

	// FLTP*/FLTD* - Float Hold verification
	type Public Boolean ER
	if dep.grp="DBD" quit 
	
	type Number D,P,J,K
	type String DESC
			
	// Float Hold
	set DESC=$$^MSG(6053)                  //float hold
	set P(1)=dep.fltp1
	set P(2)=dep.fltp2
	set P(3)=dep.fltp3
	set P(4)=dep.fltp4
	set P(5)=dep.fltp5
	set D(1)=dep.fltd1
	set D(2)=dep.fltd2
	set D(3)=dep.fltd3
	set D(4)=dep.fltd4
	set D(5)=dep.fltd5
	
	set P=0 for J=1:1:5 set P=P+P(J)
	// Total %HELD ~p1 exceeds 100%
	if P>100 do Runtime.setErrMSG("DEP",2668,DESC) quit:ER 
	// Sum of percentage allocations must be 0% or 100%  - TITOVE - 41199
	if P'=0,P'=100 do Runtime.setErrMSG("DEP",2852) quit:ER
	// Percent held ~p1 # ~p2 cannot be greater than # ~p3
	for J=5,4,3,2 if P(J),P(J)'<P(J-1) set K=J-1 do Runtime.setErrMSG("DEP",24,"DESC~J~K") quit:ER 
	// Days held ~p1 for factor #~p2 must be greater than #~p3
	for J=1,2,3,4 if P(J),P(J+1),D(J+1)'>D(J) set K=J+1 do Runtime.setErrMSG("DEP",762,"DESC~K~J") quit:ER 
	quit

vau29 // Trigger AU_GCR - After Update Good Customer Information

	type public RecordDEP dep
	/*
	   After Update verification for GCRS - Good Customer Status - If GCR status contains a
	   value, GCR processing is invoked.  Scoring tables, etc are required even
	   when the status is fixed or revoked.  When the status if fixed or revoked,
	   the account will not be automatically be scored in the monthly or
	   daily scoring processes.

	   Revision History
	
	   12/11/06 - SWARNALP - 22716
	   	      Replaced the incorrect condition check which checks GCR code's 
	   	      old value to be 1 while creating record in DTJFMMS table 
	   	      with the condition to check Next Scoring Date's(DEP.NSDATE) old 
	   	      value to be TJD-1 (the same condition check is used in the Batch 
	   	      BCHGCRMS) so that the record will be created in DTJFMMS table 
	   	      only on the date the batch BCHGCRMS (GCR Monthly Scoring) is 
	   	      executed.
	   	      
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   03/21/00 - CHOK - 31126
		      Update DTJFMMS table

	*/
	type Public Boolean ER
	if dep.gcrs do { quit:ER 
		// GCR status is Revoked, GCR code not applicable"
		if dep.gcrs=3,(dep.gcrcd'="") do Runtime.setErrMSG("DEP",3283) quit:ER 
		// Monthly scoring table, GCR code, and Scoring Frequency
		// are required if GCR status is Dynamic or Fixed
		if dep.gcrs'=3 do { quit:ER 
			if dep.mscrtbl="" do Runtime.setErrMSG("DEP",7531,"DEP.MSCRTBL") quit:ER     // Data required in Data Item ~p1
			if dep.gcrcd="" do Runtime.setErrMSG("DEP",7531,"DEP.GCRCD") quit:ER         // Data required in Data Item ~p1
			if dep.scrfreq="" do Runtime.setErrMSG("DEP",7531,"DEP.SCRFREQ") quit:ER     // Data required in Data Item ~p1
			if 'Db.isDefined("UTBLGCRBAL","dep.mscrtbl,dep.gcrcd") do Runtime.setErrMSG("DEP",3284,"GCRCD~MSCRTBL") quit:ER 
			}
		if dep.gcrs=1 do { quit:ER 
			if (dep.gcrs.oldVal=1),dep.isChanged("GCRCD"),'dep.isChanged("GCRCD","SYSTEM") do Runtime.setErrMSG("DEP",3287) quit:ER

			// Update Monthly Scoring File Maintenance Journal
			if dep.isChanged("GCRCD","SYSTEM"),(dep.nsdate.oldVal=(%SystemDate-1)) do {
				new dtjfmms,zcid
				type RecordDTJFMMS dtjfmms=Class.new("RecordDTJFMMS")
				set dtjfmms.tjd=%SystemDate
				set zcid=dep.cid
				set dtjfmms.cid=dep.cid
				set dtjfmms.mseq=Db.nextVal("DTJFMMS","TJD,zcid")
				set dtjfmms.bal=dep.bal
				set dtjfmms.boo=dep.boo
				set dtjfmms.dtop=dep.odt
				set dtjfmms.dtpmnt=dep.gcrpmnt.oldVal
				set dtjfmms.gcrlbal=dep.gcrlbal
				set dtjfmms.newgcr=dep.gcrcd
				set dtjfmms.ngcrcov=dep.gcrcv
				set dtjfmms.ogcrcov=dep.gcrcv.oldVal
				set dtjfmms.oldgcr=dep.gcrcd.oldVal
				set dtjfmms.origopd=dep.origopd
				set dtjfmms.todcnt=dep.todcnt
				set dtjfmms.type=dep.type
				do dtjfmms.bypassSave()
				}

			// Daily scoring table and daily scoring option are required if GCR status is Dynamic
			if dep.dscrtbl="" do Runtime.setErrMSG("DEP",7531,"DEP.DSCRTBL") quit:ER     // Data required in Data Item ~p1
			if 'dep.dsopt do Runtime.setErrMSG("DEP",7531,"DEP.DSOPT") quit:ER	     // Data required in Data Item ~p1
			if dep.nsdate<%SystemDate do Runtime.setErrMSG("DEP",3285) quit:ER 
			}
		}
	
	if dep.scrfreq'="" do { quit:ER 
		type Date DATE
		set DATE=$$NJD^UFRE(Db.getOneRow("TJD","CUVAR"),dep.scrfreq,.AF) quit:ER 
		if AF'=12 do Runtime.setErrMSG("DEP",3286) quit:ER 
		}
	quit

vau30 // Trigger AU_GCRTFCID - After Update GCR Transfer Account

	type public RecordDEP dep
	if dep.gcrtfcid="" quit 
	/*
	   GCR transfer account holds the account from which GCR information is
	   transferred.  Move GCR Liability Package Balances from GCR transfer
	   account.
	   
	   Revision History
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	*/
	type Number GCID,LCID,XCID
	type Date SDATE
	set GCID=dep.gcrtfcid
	set XCID=dep.cid
	type ResultSet rs=Db.select("LCID,SDATE","GCRPKG","CID=:GCID")
	if rs.isEmpty() quit
	while rs.next() do { 
		set LCID=rs.getCol(1)
		set SDATE=rs.getCol(2)
		do Db.update("GCRPKG","CID=:XCID","CID=:GCID AND LCID=:LCID AND SDATE=:SDATE")
		}
	quit

vau31 // Trigger AU_GLSC - After update valid G/L set code.

	type public RecordDEP dep
	/*
	---- Revision History ------------------------------------------------

	06/01/05 - Kini - 16153
		   Added GLSC verification via GLCHK^ACNFUNCS to ensure that
		   the class and group of GLSC match the class and group of the
		   deposit. Removed 'Db.isDefined check on UTBLGLSC table as 
		   GLCHK^ACNFUNCS returns the same error if the set code isn't 
		   defined.

	02/17/05 - Kini - 13991	
		   Modified to replace UTBLGLSCX index table with UTBLGLSC
		   since UTBLGLSCX has been obsoleted.
	*/
	
	type public Boolean ER
	
	// Validate G/L Set Code
	do GLCHK^ACNFUNCS(dep.cls,dep.grp,dep.glsc) quit:ER
		
	quit
	

vau32 // Trigger AU_GRP - After Update Group

	type public RecordDEP dep
	new grp,XTYPE
	set XTYPE=dep.type
	set grp=Db.getOneRow("GRP","PRODCTL","XTYPE")

	// Product class or group does not match product type
	if dep.grp'=grp do Runtime.setErrMSG("DEP",8472) quit:ER
	quit
	

vau33 // Trigger AU_HLD_INFO - After Update Check Hold Info

	type public RecordDEP dep
	/*
	   ---- Revision History ------------------------------------------------
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   04/03/01 - TITOVE - 41199:001
		      Corrected setting of the error message 2852.

											11/29/00 - TITOVE - 41199
																						Added check to make sure the percentage allocation for
																						hold factors adds up to 100%, unless it is zero.

	   05/25/00 - LUS - 40263
																						Retrofitted change below:
																						04/03/00 - LUS -37723
																						Removed the check to verify the requied of Float Hold and
																						Check Hold.
         	
	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   08/06/99 - KONGJ - 34255
	              Added a check to ensure that either Check Hold or Factor
	              field contains value.
	*/

	// HLDP*/HLDD* - Check Hold verification
	type Public Boolean ER
	if dep.grp="DBD" quit 
	
	type Number D,P,J,K
	type String DESC
					
	// Check hold
	set DESC=$$^MSG(6704)                  //Check hold ~p1
	set P(1)=dep.hldp1
	set P(2)=dep.hldp2
	set P(3)=dep.hldp3
	set P(4)=dep.hldp4
	set P(5)=dep.hldp5
	set D(1)=dep.hldd1
	set D(2)=dep.hldd2
	set D(3)=dep.hldd3
	set D(4)=dep.hldd4
	set D(5)=dep.hldd5
	
	set P=0 for J=1:1:5 set P=P+P(J)
	// Total %HELD ~p1 exceeds 100%
	if P>100 do Runtime.setErrMSG("DEP",2668,DESC) quit:ER 
	if P'=0,P'=100 do Runtime.setErrMSG("DEP",2852) quit:ER
	// Percent held ~p1 # ~p2 cannot be greater than # ~p3
	for J=5,4,3,2 if P(J),P(J)'<P(J-1) set K=J-1 do Runtime.setErrMSG("DEP",24,"DESC~J~K") quit:ER 
	// Days held ~p1 for factor #~p2 must be greater than #~p3
	for J=1,2,3,4 if P(J),P(J+1),D(J+1)'>D(J) set K=J+1 do Runtime.setErrMSG("DEP",762,"DESC~K~J") quit:ER 
	quit

vau34 // Trigger AU_ICHND - After Update Interest Change Next Date

	type public RecordDEP dep
	// ICHND - Interest Change - Next Date  and  INTFRE - Interest Change Frequency
	
	/*
	    Revision History

	    07/09/02 - BECKERJ - 50876
		       Added code to return an error if an account has no index
		       but has an interest change frequency.

												09/08/00 - ANTONOVS - 41669
																							Display an error message &&SetErrXBAD("INTFRE") when
																							there is ICHND and INTFRE is missing regardless of 
																							INDEX value.

	    10/14/99 - CHOK - 31126
		       Converted to PSL.

	    03/10/99 - NGUYENP - 28271
	              Display the Interest Change Frequency message
	              &&SetErrXBAD("INTFRE") only when the Interest Index exists
	              and the Interest Frequency is missing.
	*/

	if dep.ichnd'="" do { quit:ER 
		if dep.ichnd<%SystemDate do Runtime.setErrXBAD("DEP","ICHND") quit:ER 
		if dep.intfre="" do Runtime.setErrXBAD("DEP","INTFRE") quit:ER 
		}
	else  if dep.intfre'="" do Runtime.setErrXBAD("DEP","ICHND") quit:ER 

	if dep.intfre'="",dep.index="" do Runtime.setErrXBAD("DEP","INDEX16") quit:ER	// JMB - 50876

	quit
	

vau35 // Trigger AU_INC - After Update Interest Next Compounded

	type public RecordDEP dep
	/* 
	---- Revision History ------------------------------------------------

	01/15/01 - AHMEDS - 43469
		 Added check for the invalid combination of cumulative
		 deposit option set to 1 with interest compounding
		 frequency set to null.
	----------------------------------------------------------------- 
	*/
	// trigger AU_INC
	
	// Cumulative Deposits Require an Interest Compounding Frequency.
	if dep.cumdep,dep.icf="" do Runtime.setErrMSG("DEP",4694) quit:ER

	//
	if dep.inc'="" do { quit:ER 
		if dep.inc<%SystemDate do Runtime.setErrXBAD("DEP","INC") quit:ER 
		if dep.icf="" do Runtime.setErrXBAD("DEP","ICF") quit:ER 
		}
	else  if dep.icf'="" do Runtime.setErrXBAD("DEP","INC") quit:ER 

	// Int Compounding is not supported for segmented accts
	if dep.segflg=1,dep.icf'="" do Runtime.setErrXBAD("DEP",210) quit:ER 
	
	quit 

vau36 // Trigger AU_INCDR - After Update Incremental Debit Amount

	type public RecordDEP dep
	/*
	   INCDR - Incremental Debit Amount Verification
	   Overdraft Source Incremental Transfer Amount must be evenly
	   divisible by Incremental Debit Amount.

	   ---------- Revision History ------------------------------------------

	   09/23/05 - NATRAJAH - 17245
		      General DBI3 cleanup.

	*/
	if dep.incdr do { quit:ER 
		type Number ODSITR,TYPE
		set TYPE=dep.type
		type ResultSet rsodsitr=Db.select("ODSITR","PRODCTL","TYPE=:TYPE")
		set ODSITR=rsodsitr.getCol("ODSITR")
		if ODSITR,ODSITR#dep.incdr do Runtime.setErrXBAD("DEP","ODSITR") quit:ER 
		}
	quit
	

vau37 // Trigger AU_INDEX_ODLIM - After Update INDEX or ODLIM,ODTERM

	type public RecordDEP dep
	/*
	 ---- Revision History ------------------------------------------------
	
	08/14/02 - ANTONOVV - 43583
		   Modified parameters in LOADIX^UINDX call.
	
	07/09/02 - BECKERJ - 50876
		   Added code to return an error if an account has no index
		   but has an interest change frequency.

	09/19/01 - ARPAV - 47504
		   Added code before call into DICHECK^DEPAI to prevent 
		   undefined error in UINDX.  In ACN section of UINDX, CTL is 
		   supposed to be set.  From the DEP filer, the proper setting
		   is "001".
	
	05/02/01 - SHVACHKINAD - 44678
		   Removed check of expiration date that was called by
		   DICHECK^DEPAI.	

	01/29/01 - SHVACHKINAD - 42748
		   Added a loop through IX array that will call
		   DICHECK^DEPAI, which will match the data items specified
		   on the index with data items specified on the account,
		   for indexes with data item authorization set to YES.
	
	10/16/00 - ANTONOVV - 40364
	           Added code to check integrity and to validate Positive,
		   Auth/Unauth Negative Interest spreads.

	06/27/00 - Terrie Dougherty - 40629
		   Modified calls to $$TIERDI to use new DEP procedure
		   $$ITERDI^PROCDEP

	12/23/99 - OYEGUNZ - 36038
		   Return error message if ODLIM'="" and NEGIPO'=2.

	12/20/99 - SIVCHUKA - 36070
		   Modified to properly check ODLIM defined, ODTERM not defined.
		   Return error message if ODLIM'="" and NEGIPO'=2.
	
	10/14/99 - CHOK - 31126
		   Converted to PSL.

	09/24/99 - SIVCHUKA - 34902
		   Added 2 integrity errors:
		   1.  If there is an overdraft limit (DEP.ODLIM) and not term
		   (DEP.ODTERM), return fatal error "4001"
		   2.  If there is an overdraft term (DEP.ODTERM) and not limit
		   (DEP.ODLIM), return fatal error "4002"
	
	09/17/99 - MAGERAM - 34062
		   Modified to set &&SetErrSTBLER(ET) if ER.
	
	02/26/99 - KLINEB - 32058
		   Roll forward:
		   Added code to return error message if INTMAT, INTSPR, or
		   RNDMTD is defined and INDEX is not (roll forward from v60).
	
		   Added logic to not do index section if INDEX is null.
	*/
	
	if dep.index'=dep.index.oldVal&(dep.index'="") do { quit:ER 
		//INDEX has been modified
		new CTL,X
		set CTL="001"
		set X=dep.index
		if dep.ichld="" do Runtime.setErrXBAD("DEP","INDEX11") quit:ER 
		if dep.ichnd="" do Runtime.setErrXBAD("DEP","INDEX12") quit:ER 
		if dep.intfre="" do Runtime.setErrXBAD("DEP","INDEX13") quit:ER 
	
		/*
		   EDT^UINDX validates the following:
		   INDEX1 - Invalid index name
		   INDEX2 - Invalid index offset syntax
		   INDEX3 - Invalid rounding instruction
		   INDEX4 - Invalid index rounding percentage
		   INDEX5 - Extraneous index plan information entered
		*/
		set ZX=X
		do EDT^UINDX if ER do Runtime.setErrSTBLER("DEP",ET) quit:ER 
		set X=dep.intspr
		do SPRPP^UINDX if ER do Runtime.setErrSTBLER("DEP",ET) quit:ER 
		set X=dep.rndmtd
		do RNDPP^UINDX if ER do Runtime.setErrSTBLER("DEP",ET) quit:ER 
		set X=ZX
		}
	
	if dep.index'="" do { quit:ER 
		// Account has an index

		new BASE,DIAUTH,EFD,EFDATE,EXP,IRN,PAR,TIERDI,TIER
		set (BASE,EFD,TIER)=""
		set TIERDI=$$TIERDI^PROCDEP(.dep)
		if dep.odlim'="",TIERDI do Runtime.setErrXBAD("DEP","ODLIM") quit:ER 
	
		set IX=dep.index
		if '$D(IX(IX)) if '$$LOADIX^UINDX(.dep,dep.index,"",.EFDATE,.PAR) do Runtime.setErrSTBLER("DEP",ET) quit:ER 

		// Data Item Authorization Flag
		set DIAUTH=$P(IX(IX),"|",14)
		
		for  set EFD=$O(IX(IX,EFD)) quit:(EFD="")  do { quit:ER 
			for  set TIER=$O(IX(IX,EFD,TIER)) quit:(TIER="")  do { quit:ER 
				// Set CTL for processing within UINDX	VCA 9/19/01
				new CTL
				set CTL="001"
 				// Check tier
				do DICHECK^DEPAI(TIER,.dep,BASE,DIAUTH) quit:ER
				// Check interest rate
				set IRN=$P(IX(IX,EFD,TIER),"|",1)
				do DICHECK^DEPAI(IRN,.dep,BASE,DIAUTH) quit:ER
			}
		}
		if dep.odterm'="",dep.odlim="" do Runtime.setErrMSG("DEP",4002) quit:ER
		
		/*
																			Auth/Uauth Negative / Positive Int Spreads integrity check
																			//AV - ARQ 40364 - 10/3/00
																*/
																if (dep.intspra'="")!(dep.intspru'="") do { quit:ER
	
																								new INDEFD,TIER,VALID
																								set INDEFD=0
																								set VALID=0
																								set TIER=""
	
																								// If Index is not Incremental - error
																								if $P(IX(IX),"|",2)'="I" do Runtime.setErrMSG("DEP",4522) quit:ER
	
																								// Overdraft limit must be defined.
																								if dep.odlim="" do Runtime.setErrMSG("DEP",4522) quit:ER
	
																								// If DEP.ODLIM and DEP.ODEXP are not defined as an Ind tier.
																								set INDEFD=$O(IX(IX,INDEFD))
																								for  set TIER=$O(IX(IX,INDEFD,TIER)) quit:(TIER=""!VALID)  do { quit:ER
																																if TIER["DEP.ODLIM",$P(IX(IX,INDEFD,TIER),"|",4)="DEP.ODEXP" set VALID=1 quit
																								}
																								if 'VALID do Runtime.setErrMSG("DEP",4522) quit:ER
																}
	
																// If Index is not Incr or Cumul and Positive Int Spread is used - error
																if (dep.intsprp'=""),$P(IX(IX),"|",2)'="I",$P(IX(IX),"|",2)'="C" do Runtime.setErrMSG("DEP",4521) quit:ER
	
																// Check spread syntax. (+-*/ can only be used)&(/0 - error)
																if dep.intspra'=""  do { quit:ER
																								set X=dep.intspra
																								do SPRPP^UINDX
																								if ER do Runtime.setErrMSG("DEP",4523,"DEP.INTSPRA") quit:ER
			if dep.intspra["/0" do Runtime.setErrMSG("DEP",4538) quit:ER
																								}
																if dep.intspru'=""  do { quit:ER
																								set X=dep.intspru
																								do SPRPP^UINDX
																								if ER do Runtime.setErrMSG("DEP",4523,"DEP.INTSPRU") quit:ER
			if dep.intspru["/0" do Runtime.setErrMSG("DEP",4538) quit:ER
																								}
																if dep.intsprp'=""  do { quit:ER
																								set X=dep.intsprp
																								do SPRPP^UINDX
																								if ER do Runtime.setErrMSG("DEP",4523,"DEP.INTSPRP") quit:ER
			if dep.intsprp["/0" do Runtime.setErrMSG("DEP",4538) quit:ER 
																								}
																	/* End of Int Spreads integrity check */
		}
	// Auth/Uauth Neg Int Spreads can be used with C/I Index only. //AV - 40364
								if ((dep.intspra'="")!(dep.intspru'="")),dep.index="" do Runtime.setErrMSG("DEP",4521) quit:ER
	
								// Positive Int Spreads can be used with Incr Index only.  //AV - 40364
								if (dep.intsprp'=""),(dep.index="") do Runtime.setErrMSG("DEP",4522) quit:ER


	// If there is a limit, but no term.......
	if dep.odlim'="",dep.odterm="" do Runtime.setErrMSG("DEP",4001) quit:ER
		
		
	// Account does not have an index
	if dep.index="",(dep.odlim'=""!($$TIERDI^PROCDEP(.dep))) do Runtime.setErrXBAD("DEP","ODLIM2") quit:ER 
	if dep.index="",dep.intfre'="" do Runtime.setErrXBAD("DEP","INDEX16") quit:ER	// JMB - 50876
	
	//With O/D Limit, post +ve and -ve int/div interest accruals seperately;36038
	if dep.odlim'="",dep.negipo'=2 do Runtime.setErrMSG("DEP",4178) quit:ER

	// Update Consolidated Limits
	if dep.odlim'=dep.odlim.oldVal do {
		quit:'Db.getOneRow("LIMPRO","CUVAR") 
		new AMT,DEPDATA,BAL,BALCOL,TOTCOM,GRP,CRCD
		set BAL=dep.bal
		set BALCOL=dep.balcol
		set CRCD=dep.crcd
		set GRP=dep.grp
		set AMT=$S(BALCOL="":BAL,1:BALCOL)
		if AMT>0 quit 
		if GRP="DBD" quit 
		set TOTCOM=-AMT if -AMT<dep.odlim.oldVal set TOTCOM=dep.odlim.oldVal
		if dep.odlim'>-AMT,dep.odlim>dep.odlim.oldVal quit 
		if dep.odlim.oldVal'>-AMT,dep.odlim<dep.odlim.oldVal quit 

		new ACN,ACNDATA,ADJ,CNTRY,GOVT,SIC,TOTEXPC,X,NEW,OLD
		set NEW=dep.odlim
		set OLD=dep.odlim.oldVal
		if CRCD=%SystemCurrency do {
			set NEW=$$CONV^CRCDUTL(NEW,CRCD,%SystemCurrency,1)
			set OLD=$$CONV^CRCDUTL(OLD,CRCD,%SystemCurrency,1)
			set TOTCOM=$$CONV^CRCDUTL(TOTCOM,CRCD,%SystemCurrency,1)
			set AMT=$$CONV^CRCDUTL(AMT,CRCD,%SystemCurrency,1)
			}
		set ACN=dep.acn
		set ACNDATA=Db.getOneRow("PCNTRY,GOVT,SIC","CIF","ACN")
		set CNTRY=$P(ACNDATA,$C(9),1)
		set GOVT=$P(ACNDATA,$C(9),2)
		set SIC=$P(ACNDATA,$C(9),3)

		set TOTEXPC=Db.getOneRow("TOTCOMEXP","EXPCNTRY","CNTRY")
		if $E($G(SIC)) new TOTEXPI set TOTXPI=Db.getOneRow("TOTCOMEXP","EXPIND","SIC")
		if $G(GOVT) new TOTEXPS set TOTEXPS=Db.getOneRow("TOTCOMEXP","EXPCNSOV","CNTRY")

		if OLD'<TOTCOM do {
			if NEW>-AMT set ADJ=NEW-OLD
			else  set ADJ=-AMT-OLD
			}
		else  set ADJ=NEW-TOTCOM
		set TOTEXPC=$$^SCARND(TOTEXPC+ADJ,0,"",%SystemCurrency)

		do Db.update("EXPCNTRY","TOTCOMEXP=:TOTEXPC","CNTRY=:CNTRY")
		if $G(TOTEXPI) set TOTEXPI=TOTEXPI+ADJ do Db.update("EXPIND","TOTCOMEXP=:TOTEXPI","IND=:SIC")
		if $G(TOTEXPS) set TOTEXPS=TOTEXPS+ADJ do Db.update("EXPCNSOV","TOTCOMEXP=:TOTEXPC","CNTRY=:CNTRY")
		}
	
	// Updating Interest Matrix, Interest Spread, and Interest Rounding Method
	
	if (dep.intmat'="")!(dep.intspr'="")!(dep.rndmtd'="") do {
		if dep.index="" do Runtime.setErrMSG("DEP",8745) quit:ER 
		}
	quit

vau38 // Trigger AU_INTEREST - After Update Interest Fields

	type public RecordDEP dep
	/*
	   ---------- Revision History -----------------------------------------

	   05/11/07 - SANTHUMS - CR 27044               
	              Modified to insert a record into DAYENDINP, since
		      interest was not getting posted on the next interest 
	     	      posting date whenever segmented deposit accounts were 
	     	      created.
	     	      
	   10/15/02 - AHMEDS - 49754:01
		      Clean up of Interest Statements project (ARQ 34285). 
		      Removed code for integrity checks on Generate Int/Div
		      Statement (dep.gis).

	   05/03/02 - KELLYP - 49129
		      Removed previous change under this ARQ.  ACNDSD
		      functionality is now required in V6.4 up.

	   04/08/02 - KELLYP - 49129
		      Added code to check if INP or IPF has been file 
		      maintained.  If so, and if no ACNDSD record exists where
		      FRECOL="IPF" and SCHDT=0, then XBAD message CNVIDT1 or
		      CNVIDT2 will be returned.

	   02/26/01 - HALPINJ - 43406
		      Added code to check to make sure DAYENDINP does not exist
		      before trying to do the SQL insert.

	   08/29/00 - LUS - 41547
		      Retrofit of change below:
		      03/15/00 - AHMEDS - 35866
		      Put LBCM,LBCP in the Column names of the Control Page.
	
	   07/17/00 - SCOTTC - 41065
		      Old DAYEND "INP" entry not getting deleted when modifying
		      a non-segmented account.  Move code which sets X up so	
		      that both segmented and non-segmented have a value for X.

	   03/17/00 - CHOK - 31126
		      Converted isChanged method

	   01/06/99 - HAYMANP - 35866
		      Retrofit of change below:

		      12/18/99 - SMITHC - 35866
		      Added code to handle low balance verification.
		
	   12/30/99 - MAGERAM - 36270
		      Added integrity checks for Generate Interest Statement.
		      Roll forward for ARQ#34285	
			
	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   09/02/99 - MAGERAM - 32998
		      Added restriction "~p1 must be null when accruing at segment
	              level" for INP.
	
	   07/14/99 - SMITHC - 33309
		      Modified 6/10/99 change to set up DAYEND entries only if
		      not in verify mode.
	
	   06/10/99 - SMITHC - 32048
		      Maintain DAYEND entry of next interest posting dates
		      (regular, segment) manually.  This coding replaces the
		      traditional filer index definitions for next interest
		      posting dates.
	
	*/

	// ~p1 must be null when accruing at segment level
	if dep.segflg,'dep.segacr,dep.inp do Runtime.setErrXBAD("DEP",532,"DEP.INP") quit:ER 
	
	if dep.inp do { quit:ER 
		if dep.inp<%SystemDate do Runtime.setErrXBAD("DEP","INP") quit:ER 
		if dep.mdt'=dep.inp,dep.inp>%SystemDate,dep.ipf="" do Runtime.setErrXBAD("DEP","INPF") quit:ER 
		}
	else  if dep.ipf'="",('dep.segflg!(dep.segacr)) do Runtime.setErrXBAD("DEP","INP") quit:ER 
	
	if dep.intchknd,dep.intchknd<%SystemDate do Runtime.setErrXBAD("DEP","INTCHKND") quit:ER 
	else  if dep.intchkfre'="",dep.intchknd="" do Runtime.setErrXBAD("DEP","INTCHKND") quit:ER 
	
	// Verify Interest Posting and Check Data are Compatible
	if dep.inp,dep.ipf'="",dep.intchkfre'="",dep.intchknd'="" do { quit:ER 
		do VER^LNUSFV(dep.inp,dep.ipf,$$^MSG(3787),dep.intchknd,dep.intchkfre,$$^MSG(6796))   //Interest Posting
		if ER do Runtime.setErrXBAD("DEP","INTCHKINV") quit:ER 
		}

	// Call procedure DEPLBB if any critical low balance fields change
	if ((dep.isChanged("IPF"))!(dep.isChanged("LBCP"))!(dep.isChanged("LBCM"))) do {
		if dep.ircb'=5,dep.ircb'=6 quit
		do ALL^PROCLBB(dep.ircb,dep.ipf,dep.lbcp,dep.lbcm)
		}

	// Int Check Frequency is not supported for segmented accts
	if (dep.segflg=1)&(dep.intchkfre'="") do Runtime.setErrXBAD("DEP",209) quit:ER 

	/*
	   Maintain DAYEND entry for next interest posting date manually
	   This coding replaces the traditional filer index definitions for
	   next interest posting dates.
	*/
	if '(%ProcessMode=2),dep.inp'=dep.inp.oldVal do { quit:ER 
		new TJD	

		set TJD=dep.inp
		new X
		set X=dep.inp.oldVal

		if dep.segflg,dep.segacr do { quit:ER 
			// Segmented interest on principal, accruing/posting at
			// account level
			if dep.inp.oldVal'="" do Db.delete("DAYENDSEGIP","CID=:CID AND TJD=:X AND POSTING=2 AND SEG=-1")
			if dep.inp'="" do Db.insert("DAYENDSEGIP","TJD,CID,POSTING,SEG",":TJD,:CID,2,-1")
			if dep.inp.oldVal'="" do Db.delete("DAYENDINP","CID=:CID AND TJD=:X AND POSTING=2")
			if dep.inp'="" do Db.insert("DAYENDINP","TJD,CID,POSTING",":TJD,:CID,2")
			}
		if 'dep.segflg do { quit:ER 
			// Regular interest
			if dep.inp.oldVal'="" do Db.delete("DAYENDINP","CID=:CID AND TJD=:X AND POSTING=0")
			if dep.inp'="",'Db.isDefined("DAYENDINP","TJD,CID,0") do Db.insert("DAYENDINP","TJD,CID,POSTING",":TJD,:CID,0")	// JMH - 02/26/01
			}
		}
	quit

vau39 // Trigger AU_INTMAT - After Update of Interest Matrix

	type public RecordDEP dep
	// trigger AU_INTMAT - Interest Matrix

	// Matrix must reference non segment data items when accruing at account level
	if dep.intmat'="" do { quit:ER 
		// Do not perform check if segmented account accruing at segment level
		if dep.segflg,'dep.segacr quit 
	
		new data,INTMAT,ROW,MATCOL
		set INTMAT=dep.intmat
	
		set data=Db.getOneRow("ROW,MATCOL","UTBLMATATT","INTMAT")
		set ROW=$P(data,$C(9),1)
		set MATCOL=$P(data,$C(9),2)
	
		new DEPITEM,ERFLAG,ITEM
		new rs 
		type ResultSet rs=Db.select("ITEM,DEP","STBLMATATT","DEP NOT LIKE 'DEPSEG%'")		
		set ERFLAG=1
		if 'rs.isEmpty() while rs.next() do { quit:'ERFLAG  
			set ITEM=rs.getCol(1)
			set DEPITEM=rs.getCol(2)
			// Checks if ROW or MATCOL have non segment data items
			if (ROW=ITEM)!(MATCOL=ITEM) set ERFLAG=0 quit 
			}
	
		if ERFLAG do Runtime.setErrMSG("DEP",3999) quit:ER 
		}
	
	quit

vau40 // Trigger AU_INTWCALC - After Update Int Withholding Calc Method

	type public RecordDEP dep
	//AU_INTWCALC

	/*

	------- Revision History --------------------------------------------

	03/13/07 - NATRAJAH - CR 24946
		Modified the code to generate the error message, when pay 
		interest on partial withdrawal flag is enabled and withholding
		tax calc base is greater than "0"

	12/08/05 - ALAGARSS - CR 18006
 		Modified the code to remove deprecated feature warnings.
 		Also removed old revision history.

	*/

	/*
	Accrued Withholding Tax Processing not valid with interest
	Withholding Calculation Method
	*/
	type public Boolean ER
	type public Number LINKCNT
	type public String IDATA,INTWCALC
	
	if dep.awtp,dep.intwcalc'="" do Runtime.setErrMSG("DEP",5072) quit:ER

	if 'dep.intwcalc.isNull(),dep.pipw do { quit:ER
		type RecordUTBLWCALC utblwcalc=Db.getRecord("UTBLWCALC","KEY=:dep.intwcalc")
		
		//Cannot pay interest on partial withdrawal if withholding tax calc base is ~p1
		if utblwcalc.whcalcb>0 do Runtime.setErrMSG("DEP",6184,utblwcalc.whcalcb) quit:ER
		}
		
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
		
	
		set INTWCALC=dep.intwcalc
		
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		if rs.isEmpty() quit				// No linked investment accounts
	
		while rs.next() do { quit:ER  			
			
			type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:rs.getCol(""ITYPE"")")
			
			if proddftd.swpni do {
				type RecordDEP dep1=Db.getRecord("DEP","CID=:rs.getCol(""ICID"")")
				do dep1.setAuditFlag()	
				set dep1.intwcalc=INTWCALC
				do dep1.save()
			}
			}
		}
	quit

vau41 // Trigger AU_IOPT - After Update Interest Disb Option

	type public RecordDEP dep
	/*
	---- Revision History ------------------------------------------------
	
	06/27/00 - Terrie Dougherty - 40629
		   Moved TFRCID code to new DEP procedure. Modified calls to 
		   TFRCID to use new procedure TFRCID^PROCDEP.

	05/31/00 - MURRAY - 40250
		   Remove multi-currency exchange restriction.

	10/14/99 - CHOK - 31126
		   Converted to PSL.

	08/18/99 - SMITHC - 33996
		   Added additional restriction for segmented account with 
		   Transfer of Interest Adjustments (30444) processing.
	
	05/26/99 - SWEENEYT - 32933
		   Added check for invalid combination IAF=2 and IOPT=2.
	
	05/06/99 - SCOTTC - 30444
		   Modified to handle new interest disbursement options 5, 6
		   and 7.
	
	04/16/99 - HAYMANP - 30444
		   Added NEGBALOP check to IOPT verification.
	
	*/
	
	/*
		IOPT - Interest Disbursement Option (Verification)
		0)=Remain On Deposit
		1)=Pay By Check
		2)=Transfer to Another Account
		3)=Pay By Check (Consolidated)
		5)=Transfer Int Paid and Int Paid Adjmts
		6)=Transfer Int Charged and Charged Adjmts
		7)=Transfer All Int and All Int Adjmts
	*/

	new IOPT
	set IOPT=dep.iopt
	
	// Interest Disbursement/Transfer Account Error
	if (IOPT=2!(IOPT=5)!(IOPT=7)),dep.itrf="" do Runtime.setErrXBAD("DEP","IOPT") quit:ER 
	
	// Neg Acct Bal Opt cannot be 1, 2, or 3 with Neg Int Transfer
	if (dep.iopt=6!(dep.iopt=7)),dep.negbalop do Runtime.setErrXBAD("DEP","NABO") quit:ER 
	
	// Interest Disbursement/Transfer Account Error
	if IOPT=6,dep.negitrf="" do Runtime.setErrXBAD("DEP","IOPT") quit:ER 
	
	// Invalid field values ([DEP]IAF and [DEP]IOPT).
	if dep.iopt>0,dep.iaf=2 do Runtime.setErrMSG("DEP",8619) quit:ER 
	
	// Interest disbursement option ~p1 not supported for segmented accounts
	if dep.segflg,dep.iopt>4 do Runtime.setErrMSG("DEP",3990,dep.iopt) quit:ER 
	
	do TFRCID^PROCDEP(dep.itrf,.dep)
	do TFRCID^PROCDEP(dep.negitrf,.dep)
	quit

vau42 // Trigger AU_IRA - After Update IRA Flag Indicator

	type public RecordDEP dep
	/*
	   ---- Revision History -------------------------------------------------------

	   05/31/07 - DHANALAKSHMI R - CR 25413
		      Modified to validate the plan owner's age against the 
		      maximum age limit.

	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   05/27/99 - TITOVE - 32325
	              Logic added to allow updates to DEP.IRA if the Plan Type already
	              changed in IRATYPE and also to prevent changes to DEP.RPASEQ.
	
	   05/10/99 - TITOVE - 31637
	              Display appropriate error messages as part of De-link Retirement
	              Account processing.
	*/

	type public Boolean ER

	type RecordUTBLRSPDEF rspdef = Db.getRecord("UTBLRSPDEF","KEY = :dep.ira",1)

	type RecordCIF cif = Db.getRecord("CIF","ACN=:dep.acn",1)

	// Plan owner's age exceeds maximum limit of ~p1
	if rspdef.maxpar,(cif.age>rspdef.maxpar) do Runtime.setErrXBAD("IRATYPE","RPAMAXAGE",rspdef.maxpar) quit:ER 

	// Cannot add account to an IRA plan if not already an IRA
	if 'dep.ira.oldVal,dep.ira do Runtime.setErrMSG("DEP",8278) quit:ER 
	
	// Cannot set DEP.RPASEQ equal to 0 or null without setting DEP.IRA equal to 0
	if (dep.rpaseq.oldVal'=dep.rpaseq),'dep.rpaseq,'(dep.ira.oldVal'=dep.ira)!dep.ira do Runtime.setErrMSG("DEP",412,"DEP.RPASEQ") quit:ER 

	
	if dep.rpaseq do { quit:ER 
		// Change to column DEP.RPASEQ is not allowed
		if dep.rpaseq'=dep.rpaseq.oldVal do Runtime.setErrMSG("DEP",412,"DEP.RPASEQ") quit:ER 

		// Not a retirement account
		if 'dep.ira do Runtime.setErrMSG("DEP",2030) quit:ER 
		}
	
	// Account must remain in an IRA plan
	if 'dep.ira do { quit:ER 

		// Cannot de-link IRA account if not in a closed status
		if dep.stat'=4 do Runtime.setErrMSG("DEP",3865) quit:ER 

		// De-linking an IRA account may cause discrepancies in IRS reporting
		do Runtime.setErrXBAD("DEP","IRAREPDS") quit:ER 
		}
	
	// Cannot change DEP.IRA unless the Plan Type already changed in IRATYPE
	new MACN,MIRATYP,MRPASEQ
	set MACN=dep.acn
	if dep.ira,(dep.ira'=dep.ira.oldVal) do { quit:ER 
		set MRPASEQ=dep.rpaseq.oldVal
		if MRPASEQ do { quit:ER 
			set MIRATYP=Db.getOneRow("IRATYP","IRATYPE","MACN,MRPASEQ") quit:ER 
			// Change to column DEP.IRA is not allowed
			if MIRATYP,MIRATYP'=dep.ira do Runtime.setErrMSG("DEP",412,"DEP.IRA") quit:ER 
			}
		}	
	quit
	

vau43 // Trigger AU_IRCB - After Update Interest Rate Calc Base

	type public RecordDEP dep
	/*
	---- Revision History ------------------------------------------------

	02/17/07 - KinI - CR 24944
		Modified to generate the error if DEP.ANLINFLCALIN is defined 
		and DEP.IRCB is not 1 or 3. Added DEP.ANLINFLCALIN to the list
		of columns associated with the UPDATE action.
		Deleted old revision history.
	
	*/

	type public Boolean ER
	
	if (dep.ircb = 4) do { quit:ER
		// Renewal code should be 5 for discount CD
		if (dep.rencd '= 5) do Runtime.setErrXBAD("DEP","RENCD11") quit:ER 
		
		// No int/div posting frequency for discount CD
		if ('dep.ipf.isNull()) do Runtime.setErrXBAD("DEP","IPF") quit:ER 
		
		// Int/Div Disbursement/Transfer Account Error
		if ('dep.iopt.isNull()) do Runtime.setErrXBAD("DEP","IOPT") quit:ER 
		
		// No int/div index for discount CD
		if ('dep.index.isNull()) do Runtime.setErrXBAD("DEP","INDEX14") quit:ER 
		}
	
	// Account accruing int/div must have int/div rate
	if (dep.irn.isNull()) , (dep.ircb > 0) do Runtime.setErrXBAD("DEP","IRN") quit:ER 
	
	// Low bal proc n/a w/o inst including int/div posting day
	if ((dep.ircb = 5) ! (dep.ircb = 6)) , ('CUVAR.IPD) do Runtime.setErrXBAD("DEP","LBBIPD") quit:ER 
	
	if (dep.segflg = 1) do { quit:ER 
		// 206 Int Accr Flag must be 0 or 1 when accruing at segment level
		if (dep.segacr = 0) , (dep.ircb '= 0) , (dep.ircb '= 1) do Runtime.setErrXBAD("DEP",206) quit:ER 

		// Int Accr Flag must be 0, 1, or 3 when accruing at the acct level
		if (dep.segacr = 1) , (dep.ircb '= 0) , (dep.ircb '= 1) , (dep.ircb '= 3) do Runtime.setErrXBAD("DEP",207) quit:ER 
		}
		
	// Invalid Int/Div Rate Calc Base if Annual Inflation Rate Calc Index defined
	if ('dep.anlinflcalin.isNull()) , (dep.ircb'=1) , (dep.ircb'=3) do Runtime.setErrMSG("DEP",6233) quit:ER
		
	quit	

vau44 // Trigger AU_IRN - After Update IRN, process accrual

	type public RecordDEP dep
	/*
	   ---- Revision History ----------------------------------------------

	   11/15/02 - Erik Scheetz - 43583
		      Wrapped %EffectiveDate with $G[et] where needed
		      due to compile changes in this version.

	   11/07/01 - ANTONOVV - 47535
		      Modified error handling after EFDIRN^DEPIRN call to 
		      display overridable message and log error to the dayend 
		      exception log.  

	   10/24/00 - SMITHC - 42068:1
		      Incorporated parts of BU_IRN into this trigger.

	   05/19/00 - LUS - 37758
																						Retrofitted change below:
																						03/10/00 - LUS - 37084
																						Added code to validate IRN against Minimun and Maximum
																						Rates.
									 
	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   02/16/99 - HAYMANP - 31263
	              Added OLD.IRN as fourth parameter in call to 
		      EFDIRN^DEPIRN.
	
	   02/03/99 - ROYTENBERGG - 28224
	              Added validation check for Nominal Interest Rate DEP.IRN
	*/
	
	// Validate IRN against the Min and Max Rates
	// Too low
								if dep.intmn'="",dep.irn<dep.intmn do Runtime.setErrXBAD("DEP","INVINTRTL") quit:ER
	// Too high
								if dep.intmx'="",dep.irn>dep.intmx do Runtime.setErrXBAD("DEP","INVINTRTH") quit:ER   

	if $G(%EffectiveDate),%EffectiveDate<%SystemDate do { quit:ER 
		new %A,A,CID,DEP

		// Cannot effective-date prior to opening date
		if dep.odt>%EffectiveDate do Runtime.setErrMSG("DEP",450) if ER quit 
	
		// Cannot effective-date prior to date last renewed
		if dep.dlr>%EffectiveDate do Runtime.setErrMSG("DEP",449) if ER quit 
	
		if %EffectiveDate'>dep.hisctf do { quit:ER 
			new x
			set x=$$DAT^%ZM(dep.hisctf)

			// Must be after the history purge date of ~p1
			do Runtime.setErrMSG("DEP",1801,x) if ER quit
			}

		do EFDIRN^DEPIRN(dep.cid,.dep,,dep.irn.oldVal)

		/*
		   Allow a accrual adjustment error to occur.  The messages 
		   displayed will tell the user about the problem. A manual 
		   adjustment will be required.
		*/
		if ER,$D(RM)>1 do { quit:ER
			new CID,DESCR
			set CID=dep.cid
			set DESCR=$G(RM(1))_" "_$G(RM(2))
			// "Accrual adjustment error|||0"
			do Runtime.setErrXBAD("DEP","ACRER")
			do LOG^UTLEXC($T(+0),"*",RM,CID,$G(%ZTSEQ),DESCR)
			}
		}
	
	if dep.irn="",dep.ircb>0 do Runtime.setErrXBAD("DEP","IRN") quit:ER 
	
	// Minimum Rate Differential Check
	if dep.pldg do { quit:ER 
		new DCID,LIRN,LCID,LMINR,XMSG
		set DCID=dep.cid
		new rs 
		type ResultSet rs=Db.select("CID","LNCOL","LNCOL.PLDGACN=:DCID")
		if rs.isEmpty() quit
		while rs.next() do { 
			set LCID=rs.getCol(1)
			set LNARY=Db.getOneRow("INDEX,IRN,MINRATE","LN","LCID")
			if $P(LNARY,$C(9),1)'="" quit 
			set LIRN=$P(LNARY,$C(9),2)
			set LMINR=$P(LNARY,$C(9),3)
			quit:'LMINR 
			if LIRN'<(dep.irn+LMINR) quit 
			set LIRN=dep.irn+LMINR
			do Db.update("LN","IRN=:LIRN","CID=:LCID") quit:ER 

			/* Loan Rate adjusted due to Minimum Rate Differential 
			   requirement */
			set XMSG=$$^MSG(2979)
			do Db.insert("DAYENDEXC","TJD,RTN,SORT,SEQ,RECID,ET,TIME,ROU","%SystemDate,%RoutineName,'*',DAYENDEXC.NEXTVAL,:LCID,:XMSG,%CurrentTime,%RoutineName") quit:ER 
			}
		}
	quit

vau45 // Trigger AU_LNM - After Update Report Short Name

	type public RecordDEP dep
	/*
	   ---------- Revision History ------------------------------------------

	   10/14/99 - CHOK - 31126
		      Converted to PSL.
	*/

	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
		new ICID,ITYPE,LNM,SWPNI
	
		set LNM=dep.lnm
		new rs 
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		if rs.isEmpty() quit				// No linked investment accounts
	
		while rs.next() do { quit:ER  
			set ICID=rs.getCol(1)			// Investment Account Number
			set ITYPE=rs.getCol(2)			// Investment Product Type
			set SWPNI=Db.getOneRow("SWPNI","PRODDFTD","ITYPE")
			if SWPNI do Db.update("DEP","LNM=:LNM","CID=:ICID")
			}
		}
	quit

vau46 // Trigger AU_MDT_TRM - After Update Maturity Date or Term

	type public RecordDEP dep
	/*
	   ------------REVISION HISTORY------------------------------------------------
	
	   10/14/99 - CHOK - 31126	
		      Converted to PSL.

	   03/24/99 - MOHAMEDE - 31429
	              A restriction will occur if the maturity date or the override
	              maturity date change during collateral update and if colateral
	              matuures before loan account or the loan maturity date is equal
	              to that of the deposit account and if the action at renewal is
	              not set for option 3( automatic renew).
	
	   12/15/98 - JERUCHIMC - 28593
	              Check 'DEP.SEGFLG before checking DEP.MDT
	*/

	// MDT - Account Maturity Date Verification
	if dep.trm="",dep.mdt do Runtime.setErrXBAD("DEP","MDT1") quit:ER 
	if dep.trm'="" do { quit:ER 
	
		if 'dep.segflg,'dep.mdt do Runtime.setErrXBAD("DEP","MDT1") quit:ER 
		if 'dep.segflg,dep.mdt<%SystemDate do Runtime.setErrXBAD("DEP","MDT") quit:ER 
	
		// TRM - Deposit Term Verification
		// First character of term may not be '0'
		if $E(dep.trm)=0 do Runtime.setErrMSG("DEP",1113) quit:ER 

		// First character of term must be numeric
		if +dep.trm=0 do Runtime.setErrMSG("DEP",1114) quit:ER 

		// Term must contain character D, W, M, or Y
		if dep.trm=+dep.trm do Runtime.setErrMSG("DEP",2629) quit:ER 

		// Lowercase characters not allowed
		if dep.trm?.E1L.E do Runtime.setErrMSG("DEP",1662) quit:ER 

		// Term may only contain characters D, W, M, or Y
		for I=1:1:$L(dep.trm) if '("DWMY"[$E(dep.trm,I)!($E(dep.trm,I)?1N)) do Runtime.setErrMSG("DEP",2628) quit:ER 
	
		}
	/*
	   If maturity date of the deposit pledged account is the earliest
	   maturity date of all the pledged accounts securing the loan of which
	   this deposit account is securing, the update the deposit secured loan
	   with the matuirty date of the deposit pledged accout.
	*/
	if 'dep.segflg,dep.mdt,dep.pldg do { quit:ER 
		new DMDT,LMDT,LCID,OMDT,RECND
		set DMDT=dep.mdt
		new rs 
		type ResultSet rs=Db.select("MDT,CID,COLL","LNCOL,ACN","LNCOL.PLDGACN=:CID AND ACN.CID=LNCOL.CID")
		if rs.isEmpty() quit
		while rs.next() do { quit:ER  
			set LMDT=rs.getCol(1) quit:'LMDT 
			set LCID=rs.getCol(2)
			set COLL=rs.getCol(3)
			set OMDT=Db.getOneRow("OMDT","COL","COLL")
			set DMDT=$$PLDGMDT^LNCDI(LCID)
			if LMDT,'OMDT,DMDT'=LMDT do Db.update("LN","MDT=:DMDT","CID=:LCID") quit:ER 
			/*
			   If Override Maturity date flag so that the deposit maturity date ;ME
			   does not default to the loan maturity date, display override if the
			   pledged account's maturity date is less than the loan maturity date
			   if the pledged deposit maturity code is not set to automatically
			   renew.
			*/
			if OMDT,RENCD'=3,DMDT<LMDT do Runtime.setErrXBAD("DEP","CMBLTE") quit:ER
			}
		}
	quit

vau47 // Trigger AU_MINDR - After Update Minimum Debit Amount

	type public RecordDEP dep
	/*
	   MINDR - Minimum Debit Amount Verification
	   Overdraft Source Minimum Transfer Amount must be equal to or greater
	   than the Minimum Debit Amount.

	   ---------- Revision History ------------------------------------------

	   09/23/05 - NATRAJAH - 17245
		      General DBI3 cleanup.
	*/
	
	if dep.mindr do { quit:ER 
		type Number ODSMTR,TYPE
		set TYPE=dep.type
		type ResultSet rs=Db.select("ODSMTR","PRODCTL","TYPE=:TYPE")
		set ODSMTR=rs.getCol("ODSMTR")
		if ODSMTR,ODSMTR<dep.mindr do Runtime.setErrXBAD("DEP","ODSMTR") quit:ER 
		}
	quit
	

vau48 // Trigger AU_MMDACNV - After Update of MMDACNV

	type public RecordDEP dep
	/*
	---- Revision History---------------------------------------------------
	
	05/04/07 - VANITHAK - CR 26845
		   Replicated the CR 22462 from Profile04 for MMDA
		   Automatic Conversion.
	
		   08/08/06 - PUTTASWH - 22462
		   Created the trigger to validate the data in MMDAPTC and 
		   MMDACNVTYP columns if the flag MMDACNV is set to 'Y'
		   during account updation.
	*/
	
	type public Boolean ER
	
	// A Value is required for MMDA automatic conversion
	if (dep.mmdacnv)&(dep.mmdaptc.isNull()!dep.mmdacnvtyp.isNull()) do Runtime.setErrMSG("DEP",5725) quit:ER	
		
	quit

vau49 // Trigger AU_MT900THR - After Update MT900 Debit Threshold Trgr

	type public RecordDEP dep
	// Check to ensure that MT900 Debit Threshold is defined if Generate MT900='Y'
	
	if dep.mt900=1 do {
 	if dep.mt900thr="" do {
		new cif900thr,XACN
		set XACN=dep.acn
		set cif900thr=Db.getOneRow("MT900THR","CIF","XACN")
		if cif900thr="" do Runtime.setErrMSG("DEP",4077) quit:ER
	}
	}
	quit

vau50 // Trigger AU_MT910THR - After Update MT910 Credit Threshold Trgr

	type public RecordDEP dep
	// Check to ensure that MT900 Debit Threshold is defined if Generate MT900='Y'
	
	if dep.mt910=1 do {
								if dep.mt910thr="" do {
																new cif910thr,XACN
																set XACN=dep.acn
																set cif910thr=Db.getOneRow("MT910THR","CIF","XACN")
																if cif910thr="" do Runtime.setErrMSG("DEP",4078) quit:ER
								}
	}
	quit

vau51 // Trigger AU_NEGACRPO - After Update Negative Accrued Proc Opt

	type public RecordDEP dep
	// trigger AU_NEGACRPO
	/*
											---------- Revision History-----------------------------------------

	   08/17/00 - HALPINJ - 41378
		      Added an integrity check so that a user can not changed 
		      NEGACRPOto 1 when any of the accrual fields (POSACR, 
		      NEGACR & NEGACRUN) have a value less than 0.

											1/05/2000 - Anna Maltepes 35820
																						Added an integrety error "Neg Int Posting Option cannot
																						be 2 if Neg Accrual Option is 0"
	*/

	// Negative accrued value with net accrued processing
	if dep.negacrpo=0,dep.negacr>0 do Runtime.setErrXBAD("DEP","NEGACRPO") quit:ER 

	// 219 Positive and negative int must accrue net for segmented acct
	if dep.segflg=1,dep.negacrpo'=0 do Runtime.setErrXBAD("DEP",219) quit:ER 
	
	//Neg Int Posting Option cannot be 2 if Neg Accrual Option is 0
	if dep.negipo=2,'dep.negacrpo do Runtime.setErrMSG("DEP",249) quit:ER	

 	if dep.negacrpo=1 do {				// JMH - 08/17/00
		// Posting options does not allow negative amount to post.
		if dep.posacr<0 do Runtime.setErrMSG("DEP",7499) quit:ER
		// Posting option does not allow negative amount to post for neg. accrual
		if (dep.negacr<0)!(dep.negacrun<0)!(dep.uncacr<0) do Runtime.setErrMSG("DEP",7500) quit:ER
		}

	quit 
	

vau52 // Trigger AU_NEGBALOP - Negative Account Balance

	type public RecordDEP dep
	/*
	   ------ Revision History------------------------------------------------------
	
	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   04/16/99 - HAYMANP - 30444
	              Added IOPT/NEGBALOP check.
	
	*/
	
	// Neg Acct Bal Opt cannot be 1, 2, or 3 with Neg Int Transfer
	if (dep.iopt=6!(dep.iopt=7)),dep.negbalop do Runtime.setErrXBAD("DEP","NABO") quit:ER 
	
	// Residual Int Processing is not supported for segmented accts
	if dep.segflg=1,dep.negbalop=2 do Runtime.setErrXBAD("DEP",222) quit:ER 
	
	quit

vau53 // Trigger AU_NEGINP - After Update Negative Int Next Post Date

	type public RecordDEP dep
	
	/*
	   ---------- Revision History ------------------------------------------

	   05/03/02 - KELLYP - 49129
		      Removed previous change under this ARQ.  ACNDSD
		      functionality is now required in V6.4 up.

	   04/08/02 - KELLYP - 49129
		      Added code to check if NEGINP or NEGIPF has been file
		      maintained.  If so, and if no ACNDSD record exists where
		      FRECOL="NEGIPF" and SCHDT=0, then XBAD message CNVIDT3
		      or CNVIDT4 will be returned.

	   02/26/01 - HALPINJ - 43406
		      Added code to check to make sure DAYENDINP does not exist
		      before trying to do the SQL insert.
	
	   12/27/99 - OYEGUNZ - 36038
		      Return error if NEGIPO'=2 and ODLIM'=""	

	   10/14/99 - CHOK - 31126
		      Converted to PSL.

	   06/10/99 - SMITHC - 32048
		      Maintain DAYEND entry of next interest posting dates
		      (negative) manually.  This coding replaces the traditional
		      filer index definitions for next interest posting dates.
	
	*/
	
	if dep.negipf'="" do { quit:ER 
		// Next Neg Int post date missing or prior to sys date
		if dep.neginp="",('dep.segflg!(dep.segacr)) do Runtime.setErrXBAD("DEP","NEGINP") quit:ER 

		// Next Neg Int post date missing or prior to sys date
		if dep.stat'=4,dep.neginp<%SystemDate do Runtime.setErrXBAD("DEP","NEGINP") quit:ER 

		// Negative interest posting frequency not allowed
		if dep.negipo'=2 do Runtime.setErrXBAD("DEP","NEGIPFNAL") quit:ER 
		}

	// Neg interest posting frequency missing
	else  if dep.negipo=2 do Runtime.setErrXBAD("DEP","NEGIPFREQ") quit:ER 
	
	//Overdraft limit and Negative Interest Posting Option         ;36038
 	//With O/D limit, post +ve and -ve int/div interest accruals seperately
	if (dep.negipo'=2)&(dep.odlim'="") do Runtime.setErrMSG("DEP",4178) quit:ER

	/*
	   Maintain DAYEND entry for next negative interest posting date
	   manually.  This coding replaces the traditional filer index
	   definitions for next negative interest posting dates.
	*/
	if '(%ProcessMode=2),dep.neginp'=dep.neginp.oldVal do { quit:ER 
		new X

		set X=dep.neginp.oldVal
		if dep.neginp.oldVal'="" do Db.delete("DAYENDINP","CID=:CID AND TJD=:X AND POSTING=1")
		if dep.neginp'="" do {
			new TJD
			set TJD=dep.neginp
		        if Db.isDefined("DAYENDINP","TJD,CID,1") quit	// JMH - 02/26/01
			do Db.insert("DAYENDINP","TJD,CID,POSTING",":TJD,:CID,1")
			}
		}
	quit 

vau54 // Trigger AU_NIAO_UFINDEX - After update NIAO and/or UFINDEX

	type public RecordDEP dep
	/*
	------ Revision History ------------------------------------------------
	03/22/00 - ANTONOVV - 35503
		Added check on NIAO and UFINDEX. Neg Int Application Option
		has to have a value if Uncoll Funds Int Index has. And vice 
		versa.
	------------------------------------------------------------------------
								*/
	
								// NIAO (Neg Int Appl Opt) has to have value if UFINDEX (Uncoll Funds Int Index) does. And vise versa.
								if dep.niao'="",dep.ufindex="" do Runtime.setErrMSG("DEP",4257)
								if dep.niao="",dep.ufindex'="" do Runtime.setErrMSG("DEP",4258)
	
								quit

vau55 // Trigger AU_NOTICE - After Update Notice Information

	type public RecordDEP dep
	// Notice Account Flag
	quit:'dep.notice 

	// Notice Account Flag
	if dep.notice,'dep.notmax do Runtime.setErrMSG("DEP",1685) quit:ER 
	if dep.notice,'dep.notmin do Runtime.setErrMSG("DEP",1738) quit:ER 
	quit
	

vau56 // Trigger AU_NR - After Update Nonresident Indicator

	type public RecordDEP dep
	/*
	   ---------- Revision History ------------------------------------------
	   12/08/05 - ALAGARSS - CR 18006
 		      Modified the code to remove deprecated feature warnings.
 		      Also removed the old revision history.
	
	*/
	
	type public Boolean ER
	type public Number LINKCNT,NR
	type public String IDATA
		
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		/*
		   This is a transaction (core) account set up for percentage based
		   investment sweep - make identical change on corresponding non-
		   institutional investment accounts.
		*/
	
		set NR=dep.nr
		
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")
		// No linked investment accounts
		if rs.isEmpty() quit				
	
		while rs.next() do { quit:ER  
			
			type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:rs.getCol(""ITYPE"")")
			if proddftd.swpni do {
				type RecordDEP dep1=Db.getRecord("DEP","CID=:rs.getCol(""ICID"")")
				do dep1.setAuditFlag()
				set dep1.nr=NR
				do dep1.save()
			}
			}
		}
	quit

vau57 // Trigger AU_NSCN - Validate New Starting Check Number

	type public RecordDEP dep
	/*
	-----Revision History--------------------------------------------------
	07/06/07 - VARGAJ - 27942
		   Make sure that the new starting check number is greater than
		   the last ending check number. Move the validation from the
		   before update trigger to the after update trigger.
	*/
	// New start CHK must be greater than last ending CHK.	
	if dep.nscn '> dep.lecn do Runtime.setErrXBAD("DEP","INVCHECKNUM","NSCN") quit:ER
	quit

vau58 // Trigger AU_PERS - After Update Personal/Non-Personal Code

	type public RecordDEP dep
	/*
 	   ------------------------------------ Revision History ------------------------------------------
 	   12/08/05 - ALAGARSS - CR 18006
 		      Modified the code to remove deprecated feature warnings.
 		   
	   10/14/99 - CHOK - 31126
		      Converted to PSL.
	*/
	type public Boolean ER
	type public Number PERS
	
	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 

	/*
	  This is a transaction (core) account set up for percentage based
	  investment sweep - make identical change on corresponding non-
	  institutional investment accounts.
	*/
	
		
		set PERS=dep.pers
		
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:CID")            // No linked investment accounts
		if rs.isEmpty() quit
		while rs.next() do {  quit:ER 
			
			
			type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:rs.getCol(""ITYPE"")")
			
			if proddftd.swpni do {
				type RecordDEP dep1=Db.getRecord("DEP","CID=:rs.getCol(""ICID"")")
				do dep1.setAuditFlag()
				set dep1.pers=PERS
				do dep1.save()
			}
			}
		}
	quit 

vau59 // Trigger AU_PLEDGE - After Update Pledge

	type public RecordDEP dep
	/*
	  --------------------- Revision History ------------------------------------------------
	   03/11/99 - FINCHG - 27393
		If RENCD is 6, return an error message if we try to make
		this a non-pledged account.
	
	*/
	
	if 'dep.pldg,dep.rencd=6 do Runtime.setErrMSG("DEP",3847) if ER quit 
	
	quit 
	

vau60 // Trigger AU_POPT - After Update of Penalty Calc Method 

	type public RecordDEP dep
	/*
	  ------------------------- Revision History -------------------------------------------------------
	   05/29/01 - ITIGIB - 44340 - Withdrawal from Segmented Savings
																Modified trigger to display an error message when
																Withdrawal Priority (DEP.WDPRIO) Option 2 (Least Penalty)
																is not used in conjunction with Segment Penalty Calculation
																(DEP.SEGPOPT) Method 3 (Accrued interest on withdrawal amount
																since last segment interest interest posting date) and also
																vise versa.

	   11/17/98 - MAGERAM - 28591 - Segmented Account Creation
		Modified to replace DEP.SEGFLG=0 with 'DEP.SEGFLG

	*/
	
	// Penalty Method must be null for segmented accounts
	if dep.segflg=1,dep.popt'="" do Runtime.setErrXBAD("DEP",218) quit:ER
	
	// Segment Penalty Method may only be used for segmented accts
	if 'dep.segflg,dep.segpopt'="" do Runtime.setErrXBAD("DEP",228) quit:ER

	// Withdrawal Priority Option 2 must be used with Segment Penalty Calculation Method 3
	if dep.segpopt=3,dep.wdprio'=2 do Runtime.setErrMSG("DEP",4953) quit:ER
 	if dep.wdprio=2,dep.segpopt'=3 do Runtime.setErrMSG("DEP",4953) quit:ER

	quit

vau61 // Trigger AU_RENCD - After Update Renewal Code

	type public RecordDEP dep
	
	/*
	  ------------------------- Revision History ------------------------------------------------
	08/06/01 - MAYLATHR - 45171
		Replaced dep.extacn with dep.primatetc where principal maturity
		option is 4.
	
	09/01/99 - MAGERAM - 32998
		Removed restriction 'Int Maturity Opt can only be defined
		if Aval Int Opt is 2'.
	
	07/20/99 - MURRAY - 34103
		Modified to remove the check on whether the Maturity transfer
		account (dep.racn) is of a different currency.
	
	06/15/99 - MAGERAM - 31056
		Added a check for Interest Maturity Option=5.
	
	06/03/99 - DADAP - 32913
		Added a check for Interest Maturity Option=2.
	
	03/11/99 - FINCHG - 27393
		If RENCD is changed to 6, and this is not a pledged account,  return an error.
	
	*/
	
	// RENCD - Renewal Code Verification
	if dep.rencd=6,'dep.pldg do Runtime.setErrMSG("DEP",3847) if ER quit     // FINCHG 3/11/99
	if dep.rencd=2,dep.racn="" do Runtime.setErrXBAD("DEP","RENCD") quit:ER 
	if dep.racn'="" do { quit:ER 
		new values,XCID
		if dep.rencd'=2 do Runtime.setErrXBAD("DEP","RENCD") quit:ER 
		if 'Db.isDefined("DEP","dep.racn") do Runtime.setErrXBAD("DEP",530) quit:ER 
		if dep.racn=dep.cid do Runtime.setErrMSG("DEP",813) if ER quit 
		set XCID=dep.racn
		set values=Db.getOneRow("STAT,CLS,CRCD","DEP","XCID") quit:ER
	
		// Error if rollover account is closed or not a deposit account.
		if $P(values,$C(9),1)=4 do Runtime.setErrMSG("DEP",834,dep.racn) quit:ER 
		if $P(values,$C(9),2)'="D" do Runtime.setErrMSG("DEP",833) quit:ER 
		}

	// IMO - Interest Maturity Option
	if dep.imo=2,dep.intmatita="" do Runtime.setErrXBAD("DEP","RENCD") quit:ER 
	if dep.intmatita'="" do { quit:ER 
		new values,XCID
		if dep.imo'=2 do Runtime.setErrXBAD("DEP","RENCD") quit:ER 
		if 'Db.isDefined("DEP","dep.intmatita") do Runtime.setErrXBAD("DEP",531) quit:ER 
		if dep.intmatita=dep.cid do Runtime.setErrMSG("DEP",813) if ER quit 
		set XCID=dep.intmatita
		set values=Db.getOneRow("STAT,CLS,CRCD","DEP","XCID") quit:ER 
		}
	
	// Partial Renewal Amt must be null if Prin Mat Opt equals 0, 3, or 5
	if ((dep.rencd=0)!(dep.rencd=3)!(dep.rencd=5))&(dep.prena'="") do Runtime.setErrXBAD("DEP",216) quit:ER
	
	// For Int Maturity Option 5, Renewal Code must be 1, 2, or 4
	if ((dep.rencd=0)!(dep.rencd=3)!(dep.rencd=5))&(dep.imo=5) do Runtime.setErrMSG("DEP",3910) if ER quit
	
	// External Tfr Cust ID is required if  Prin Mat Opt is 4
	if (dep.rencd=4)&(dep.primatetc="") do Runtime.setErrXBAD("DEP",201) quit:ER
	
	// Rate Renewal Option cannot be 3 for segmented accounts
	if (dep.segflg=1)&(dep.rro=3) do Runtime.setErrXBAD("DEP",221) quit:ER 
	
	/*
	Error if Renewal Code(RENCD) is not equal to 3 when Reset Interest
	Available on Renewal Flag(INTAVLR) is other than Zero.
	*/

								if dep.intavlr,dep.rencd'=3 do Runtime.setErrMSG("DEP",4299) quit:ER
	
								quit
	

vau62 // Trigger AU_RSINTSPR_RSRNDMT - After Update RSINTSPR or RSRNDMTD

	type public RecordDEP dep
	/*  Revision History
		08/29/00 - LUS - ARQ41547
		Retrofitted change below:
								ORIG:LUS - ARQ38013 08/15/00
									Rate Schedule Int/Div Spread and Rounding Method Verification
	*/
	
	if dep.sch'="" do { quit:ER
								new X
								// INDEX2 - Invalid  offset syntax
								set X=dep.rsintspr
								do SPRPP^UINDX if ER do Runtime.setErrSTBLER("DEP",ET) quit:ER
								// INDEX3 - Invalid rounding instruction
								set X=dep.rsrndmtd
								do RNDPP^UINDX if ER do Runtime.setErrSTBLER("DEP",ET) quit:ER
								}
	quit

vau63 // Trigger AU_SCFRE - After Update Service Charge Frequency

	type public RecordDEP dep
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
 	    Eliminate PSL deprecated features
	----------------------------------------------------------------------
	*/

	if dep.feepln'="",dep.scfre="" do Runtime.setErrXBAD("DEP","SCFRE") quit:ER 

	new data,data1,LEADSCFRE,NEWSCFRE,NEXTDT,SPREAD,SUBCID,SUBSCFRE
	
	//verify that the value for offset days is not greater than the
	//intervals
	 
	if dep.anloffdy do {
	set NEXTDT=$$NJD^UFRE(dep.scnd,dep.scfre,.AF) quit:ER
	set SPREAD=NEXTDT-dep.scnd
	if SPREAD<dep.anloffdy do Runtime.setErrXBAD("DEP","ANLOFF") quit:ER
	}

								//If analysis is 1, check if there are sub accounts.

	if dep.anltyp=1 do { quit:ER
								set XCID=dep.cid,ANLCID=dep.cid,NEWSCFRE=dep.scfre
								type ResultSet rs=Db.select("SCFRE,CID","DEP","ANLCID=:XCID")
								while rs.next() do {
          	set data=rs.getRow()
          	set SUBSCFRE=$P(data,$C(9),1)
          	set SUBCID=$P(data,$C(9),2)
	
	        //If SCFRE of sub account is not same as lead, change sub acct.
	        
	        if SUBSCFRE'=NEWSCFRE do {
  		
  			type RecordDEP subdep = Db.getRecord("DEP", "CID=:SUBCID")
  			
  			set subdep.scfre = NEWSCFRE
  			
  			do subdep.save()
        	}
	}
	}
	
								//if changing SCFRE on sub account (Acct. analysis) check that sub's
								//SCFRE = the lead account
	
	if (dep.anltyp=2)!(dep.anltyp=3) do { quit:ER
 	set LEADCID=dep.anlcid
	set tmp=Db.isDefined("DEP","LEADCID")
	if 'tmp do Runtime.setErrXBAD("DEP","ANLVAL") quit:ER
	
								type RecordDEP lead = Db.getRecord("DEP", "CID=:LEADCID", 1)
							 
								//"Acct service fee frequency must equal lead acct frequency"
 	if (lead.scfre '= dep.scfre) do Runtime.setErrXBAD("DEP","ANLFEE") quit:ER
	}
	
	quit
	

vau64 // Trigger AU_SCND - After Update Service Charge Next Date

	type public RecordDEP dep

	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
 	    Eliminate PSL deprecated features
	----------------------------------------------------------------------
	*/
	
	if dep.scnd="",dep.feepln'="" do Runtime.setErrXBAD("DEP","SCND2") quit:ER 
	else  if dep.scnd<%SystemDate,dep.scfre'="" do Runtime.setErrXBAD("DEP","SCND") quit:ER 
	new data,data1,LEADSCND,NEWSCND,SUBSCND
	
	//If analysis is 1, check if there are sub accounts.

	if dep.anltyp=1 do { quit:ER
	set ANLCID=dep.cid,NEWSCND=dep.scnd
	set XCID=dep.cid
	type ResultSet rs=Db.select("SCND,CID","DEP","ANLCID=:XCID")
								if 'rs.isEmpty() while rs.next() do {
		set data=rs.getRow()
	  	set SUBSCND=$P(data,$C(9),1)
	  	set SUBCID=$P(data,$C(9),2)

		  //If SCND of sub account is not same as lead, change sub acct.
		if SUBSCND'=NEWSCND do {
  		
  			type RecordDEP subdep = Db.getRecord("DEP", "CID=:SUBCID")
  			
  			set subdep.scnd = NEWSCND
  			
  			do subdep.save()
        	}
	}
	}

	//if changing SCND on sub account (Acct. analysis) check that sub's
	//SCND = the lead account.  If the change is coming from Service Fee
	//processing, quit out of this check.

	if (dep.anltyp=2)!(dep.anltyp=3) do { quit:ER
 	if dep.isChanged("SCND","SYSTEM") quit // SyStem changes allowed
 	new LEADCID
 	set LEADCID=dep.anlcid
 	set tmp=Db.isDefined("DEP","LEADCID")
 	if 'tmp do Runtime.setErrXBAD("DEP","ANLVAL") quit:ER
 	
 	type RecordDEP lead = Db.getRecord("DEP", "CID=:LEADCID", 1)
 	
	//"Accts next svc fee date must equal lead acct svc fee date"
	if (lead.scnd '= dep.scnd) do Runtime.setErrXBAD("DEP","ANLSVF") quit:ER
	}
	quit

vau65 // Trigger AU_SEGPER - Update Segment Period

	type public RecordDEP dep
	
	new SEGMENT
	
	new rs
	type ResultSet rs=Db.select("SEGMENT","DEPSEG","CID=:CID") 
	if 'rs.isEmpty() set SEGMENT=rs.next(),SEGMENT=rs.getRow()

	// Segment Period must contain a valid term
	if (dep.segper'="")&(SEGMENT'=0) do { quit:ER
	
		// First character of period may not be '0'
		if $E(dep.segper)=0 do Runtime.setErrXBAD("DEP",229) quit:ER
	
		// First character of period must be numeric
		if +dep.segper=0 do Runtime.setErrXBAD("DEP",229) quit:ER
	
		// Period must contain character D, W, M, or Y
		if dep.segper=+dep.segper do Runtime.setErrXBAD("DEP",229) quit:ER
	
		// Lowercase characters not allowed
		if dep.segper?.E1L.E do Runtime.setErrXBAD("DEP",229) quit:ER
 	
		for I=1:1:$L(dep.segper) if '("DWMY"[$E(dep.segper,I)!($E(dep.segper,I)?1N)) set ER=1 quit
	
		// Period may only contain characters D, W, M, or Y
		if ER do Runtime.setErrXBAD("DEP",229) quit:ER 
		}
	
	quit
	

vau66 // Trigger AU_SFRE - Maintain SFRE on account

	type public RecordDEP dep
	/*
	  ---------------------------- Revision History--------------------------------------------------------
	04/25/01 - SCOTTC - 44515
	      Modified order of update when frequency is changed on account.
	      Insert to CMBGRP is now being done first so that when the check
	      to see if frequency on account needs to be updated in CMBCID (it
	      gets the frequency from CMBGRP) it will quit out and not try to
	      update it.  Updating CMBSTM before CMBGRP was causing the system
	      to loop back into DEPFILE countless times with ambiguous results.
	      Removed delete of CMBCID as it was pointless.
	      *Added the call to UFRE to calculate the statement next date when
	      the statement frequency is modified on the account.  This
	      deviates from standard Profile practices due to the fact that
	      when default statement frequencies are being used, and a freq
	      changes and forces the creation of a new statement group, the
	      statement next date will change. Same action by the user,
	      different results.

	   08/21/00 - LAMY - 41370
		Added a check to make sure that sfre is not null if not smet.

	   09/23/99 - SCOTTC 34881
		Changed SQLSELECT statement to see if more than one account in
		statement group to search in CMBSTM instead of CMBCID
	*/
	
	if dep.smet&dep.sfre="" do Runtime.setErrMSG("DEP",2537) if ER quit 
	if 'dep.smet,dep.sfre="" quit 
	new CSTMGRP,FNDGRP,XACN,XDESC,XSFRE,XADDR,XREST,XSFRE
	set XCID=dep.cid 
	set XACN=dep.acn
	
	// find existing statement group
	set CSTMGRP=Db.getOneRow("STMGRP","CMBCID","XCID,XACN")
	if CSTMGRP="" quit

	// find out if more than one account in statement group
	
	new rs 
	type ResultSet rs=Db.select("ACN","CMBSTM","STMGRP=:CSTMGRP AND ACN=:XACN AND CID<>:XCID") 
	if rs.isEmpty() set FNDGRP=""
	else  set FNDGRP=rs.next(),FNDGRP=rs.getCol(1)

	// get information to pass to a new group
	if FNDGRP do {
		set XCMBGRP=Db.getOneRow("DESC,ADDR,REST,SFRE","CMBGRP","XACN,CSTMGRP")
		set XDESC=$P(XCMBGRP,$C(9),1) 
		set XADDR=$P(XCMBGRP,$C(9),2) 
		set XREST=$P(XCMBGRP,$C(9),3) 
		set XSFRE=$P(XCMBGRP,$C(9),4)
		if XSFRE'=dep.sfre do { quit:ER
	
			// find last statement group for CID
			new rs 
	    		type ResultSet rs=Db.select("STMGRP","CMBGRP","ACN=:XACN","STMGRP DESC") 
	    		if rs.isEmpty() set RETVAL=""
			else  set RETVAL=rs.next(),RETVAL=rs.getCol(1)
			// set new statement group number
			set NEWGRP=RETVAL+1
			set XSFRE=dep.sfre
			if XADDR="" set XADDR=XCID
			do Db.insert("CMBGRP","ACN,STMGRP,ADDR,SFRE",":XACN,:NEWGRP,:XADDR,:XSFRE")
			do Db.update("CMBSTM","STMGRP=:NEWGRP","ACN=:XACN AND CID=:XCID AND STMGRP=:CSTMGRP")
			}
		}

	if 'FNDGRP do {
		//Modify statement group's frequency
		new NJD
		set XSFRE=dep.sfre 
		set XACN=dep.acn
		set NJD=$$NJD^UFRE(%SystemDate,XSFRE,.AF)
		do Db.update("CMBGRP","SFRE=:XSFRE,SNDT=:NJD","STMGRP=:CSTMGRP AND ACN=:XACN")
		}
	quit 
	

vau67 // Trigger AU_SGNCRD - Signature Card Letter Processing

	type public RecordDEP dep
	/*
	
	 05/18/05 - KELLYP - CR 15268
		Re-introduced this trigger since the XSGNCRD table cannot be
		populated by an index in DBI.  XSGNCRD is now handled as a 
		"calculated" table and its records are created/modified by
		the filers.
	*/


	// Remove any records from XSGNCRD with old signature card values
	do Db.delete("XSGNCRD","CID=:dep.cid")
	
	// If SGNCRD>0 AND PSGNCRDR'=1 track this account in XSGNCRD
	if dep.sgncrd>0,dep.psgncrdr'=1 do {
		type RecordXSGNCRD xsgncrd=Class.new("RecordXSGNCRD")
		set xsgncrd.sjd=%SystemDate
		set xsgncrd.sgncrd=dep.sgncrd
		set xsgncrd.osgncrdc=+dep.osgncrdc
		set xsgncrd.psgncrdr=+dep.psgncrdr
		set xsgncrd.cid=dep.cid
		do xsgncrd.bypassSave()
		}	

	quit

vau68 // Trigger AU_SMET - After Update statement flag

	type public RecordDEP dep
	if dep.smet=0 do {
		new XACN,XCID,XSTMGRP
		set XCID=dep.cid
	
		new rs 
	    	type ResultSet rs=Db.select("STMGRP","CMBCID","CID=:XCID") 
	    	if rs.isEmpty() quit
		set XSTMGRP=rs.next(),XSTMGRP=rs.getRow()

		set XACN=dep.acn
	
		// Issue a delete to CMBSTM which will then delete CMBCID
		do Db.delete("CMBSTM","ACN=:XACN AND STMGRP=:XSTMGRP AND CID=:XCID")
		}
	quit
	

vau69 // Trigger AU_STAT - After Update Account Status

	type public RecordDEP dep
		/* Revision History
	
		06/26/02 - SCHWARTZA - 50421
													Priority sweeps do not enter status 5.  Modified the status 5
													check to ignore if DEP.SWPOPT'=1.
		*/
	if dep.stat=4 do { quit:ER 
		if dep.bal do Runtime.setErrXBAD("DEP","CLSDBAL") quit:ER 
		if dep.posacr do Runtime.setErrXBAD("DEP","CLSDACR") quit:ER 
		if dep.negacr do Runtime.setErrXBAD("DEP","CLSDACR") quit:ER 
		}
	// Status 5 is only for percentage sweep closeouts.
	if dep.stat=5,dep.swpf=1,dep.swpopt'=1 do { quit:ER 
		new COUNT,TICID,XCID
		set XCID=dep.cid set COUNT=""
		new rs 
		type ResultSet rs=Db.select("ICID","DEP101","CID=:XCID")
		if rs.isEmpty() quit
		while rs.next() do { 
			set XICID=rs.getCol(1)
			do Db.update("DEP","STAT=5","CID=:XICID") quit:ER 
			do Db.update("DEP101","PCT=0","CID=:XCID AND ICID=:XICID") quit:ER 
			}
		}
	quit
	

vau70 // Trigger AU_SVCFEECID - After Update Service Fee Account

	type public RecordDEP dep
	// SVCFEECID - Verify service fee charge account
	
	 /*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
		   
		   Update logic to avoid errors if selected account is not
		   deposit account.
		   
		   Clean up error message
	----------------------------------------------------------------------
	*/

	if dep.svcfeecid'="" do { quit:ER 
		new values,XCID
		// If charge account is same as account, SVCFEECID should be null.
		// Invalid service fee account
		if dep.cid=dep.svcfeecid do Runtime.setErrMSG("DEP",836,dep.svcfeecid) if ER quit
	
		// Error if SVCFEECID does not exist
		// Invalid service fee account
		if 'Db.isDefined("ACN","dep.svcfeecid") do Runtime.setErrMSG("DEP",836,dep.svcfeecid) if ER quit 
		
		set XCID=dep.svcfeecid
		
		type RecordDEP xdep = Db.getRecord("DEP", "CID=:XCID", 1)
		
		// Error if fee account is closed or not a deposit account.

		// Service charge fee account must be a deposit account
		if (xdep.getMode() = 0) do Runtime.setErrMSG("DEP",803) if ER quit
		// Service charge fee account ~p1 is closed
		if (xdep.stat = 4) do Runtime.setErrMSG("DEP",457,dep.svcfeecid) if ER quit 
	}
	
	quit

vau71 // Trigger AU_SWEEP - Overdraft, Sweep

	type public RecordDEP dep
	
	// Overdraft processing for segmented accounts is not supported

	if (dep.segflg=1)&(dep.odo'=0) do Runtime.setErrXBAD("DEP",215) quit:ER
	
	// Loan Pmt Sweep Processing not supported for segmented accts

	if (dep.segflg=1)&(dep.lpswp=1) do Runtime.setErrXBAD("DEP",212) quit:ER 
	
	quit 

vau72 // Trigger AU_SWPF - After update of Sweep Indicateor Code.

	type public RecordDEP dep
	/*
	---- Revision History -------------------------------------------------
	05/23/00 - LUS - 40207
		   Retrofitted change below:
		   04/28/00 - LUS - 39637
		   Added edit check to verify if account is not set up for sweep
																			processing(DEP.SWPF'=1),the sweep thresholds cannot be defined.
																			Added edit check to verify if account is set up for sweep
																			processing(DEP.SWPF=1), the sweep thresholds amount are required.

	*/
			 
 	// Cannot define sweep thresholds if account does not allow sweep processing.
								if dep.swpt'="",dep.swpf'=1 do Runtime.setErrMSG("DEP",4328) quit:ER

								// Sweep Threshold amount required.
								if dep.swpf=1,((dep.swpt<0)!(dep.swpt="")) do Runtime.setErrXBAD("DEP","SWPAMT") quit:ER
	quit

vau73 // Trigger AU_SWPT - After update of Sweep Threshold Amount.

	type public RecordDEP dep
	/*
	   ---------- Revision History-----------------------------------------
	 12/08/05 - ALAGARSS - CR 18006
 		   Modified the code to remove deprecated feature warnings.
 		   And removed old revision history. 		   
	*/
	
	 type public Number POS1,POS2,THRSAMT
	 type public Boolean ER
	 
									if dep.swpt'=dep.swpt.oldVal do {
	 
	 
	 type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:dep.type")
	 
	 // Sweep Threshold amt is less than the product default
	 if dep.swpt<proddftd.swpt do Runtime.setErrXBAD("DEP","SWPT") quit:ER
									}

	// Sweep Threshold Amount Verification  - ARQ40207
								// Purchase Threshold Amount is less than Redemption Threshold Amount
								if dep.swpt<dep.swptr do Runtime.setErrMSG("DEP",4280) quit:ER
	
								// Cannot define sweep thresholds if account does not allow sweep processing
								if dep.swpt'="",dep.swpf'=1 do Runtime.setErrMSG("DEP",4328) quit:ER

								// Sweep Threshold amount required
								if dep.swpf=1,((dep.swpt<0)!(dep.swpt="")) do Runtime.setErrXBAD("DEP","SWPAMT") quit:ER

	// Purchase Threshold Amount required for Purchase Increment
								if dep.swpi>0,((dep.swpt<0)!(dep.swpt="")) do Runtime.setErrMSG("DEP",4965) quit:ER

	// Redemption Threshold Amount required for Redemption Increment
								if dep.swri>0,((dep.swptr<0)!(dep.swptr="")) do Runtime.setErrMSG("DEP",4966) quit:ER
	
	//  Checking if DEP.SWPI or DEP.SWRI is a whole number
							 
								set POS1=$F(dep.swpi,".")
								set POS2=$F(dep.swri,".")
								/* Purchase Increment and Redemption Increment must be define in whole
											increment
								*/
								if (POS1'=0)!(POS2'=0) do Runtime.setErrMSG("DEP",4959) quit:ER

	// 48654 - Cannot define a redemption sweep option if account does not allow sweep processing
	if dep.swpf'=1,dep.swpropt'="" do Runtime.setErrMSG("DEP",5091) quit:ER

	quit

vau74 // Trigger AU_TITLE - After Update Title

	type public RecordDEP dep
	/*
	  --------------------------------- Revision History ------------------------------------------
	   01/06/04 - CARROLLJ - CR7658
		      XLCID variable undefined. 

	   11/03/99 - FINCHG - 27393
		      Put title match check on pledged account back in.

	   11/04/98 - HILLANBRAND - ARQ330562
		      Removed title match integrity check on pledged account.

	   03/11/98 - Terrie Dougherty - 26685
		      Replaced DTYPE with PRODDFTD as part of single
		      database project.


	   If title has changed and pledged account secures loan account, titles
	   between the pledged account and the loan account should be identical.
	*/

	if dep.pldg do { quit:ER 
		new count,data,XDEPO,XLCID,XLNO
		set XDEPO=dep.title1_$C(9)_dep.title2_$C(9)_dep.title3_$C(9)_dep.title4
		type ResultSet rs=Db.select("CID","LNCOL","LNCOL.PLDGACN=:CID")
		if rs.isEmpty() quit
		while rs.next() do { quit:ER 
			set XLCID=rs.getCol(1)
			set XLNO=Db.getOneRow("TITLE1,TITLE2,TITLE3,TITLE4","LN","XLCID")
			if XDEPO'=XLNO do Runtime.setErrXBAD("DEP","PCIF") quit:ER   // "Pledged account owners not owners of loan account"
			}
		}
	
	/*
	   This is a transaction (core) account set up for percentage based
	   investment sweep - make identical change on corresponding non-
	   institutional investment accounts.
	*/

	if dep.swpf=1,dep.swpopt=2,dep.crcd=%SystemCurrency do { quit:ER 
		new ICID,IDATA,ITYPE,LINKCNT,SWPNI,TITLE1,TITLE2,TITLE3,TITLE4,XCID	
		set TITLE1=dep.title1
		set TITLE2=dep.title2
		set TITLE3=dep.title3
		set TITLE4=dep.title4
		set XCID=dep.cid
		new rs 
		type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:XCID")	// No linked investment accounts
		if rs.isEmpty() quit
		while rs.next() do { quit:ER  
			set ICID=rs.getCol(1)           			// Investment Account Number
			set ITYPE=rs.getCol(2)          			// Investment Product Type
			set SWPNI=Db.getOneRow("SWPNI","PRODDFTD","ITYPE")
			if SWPNI do Db.update("DEP","TITLE1=:TITLE1,TITLE2=:TITLE2,TITLE3=:TITLE3,TITLE4=:TITLE4","CID=:ICID")
			}
		}
	quit 
	

vau75 // Trigger AU_TYPE - After Update Product Type

	type public RecordDEP dep
	/*
	  -------------------------- Revision History ------------------------------------------------
	  
	   07/05/07 - VanithaK - CR28007
	              Modified the changes made for CR 27879 to include a test
		      case when Region code starts with zero.
		   	
   	   06/28/07 - VanithaK - CR27879
	   	      Added validation for Branch of Ownership when bankid is 
	   	      defined.
	  
	   03/10/03 - Allan Mattson - 51351
																						Removed call to DELCF^CFMAIN (Cash Flow obsoleted
																						in V7.0).

	   02/11/99 - MAGERAM - 31831
		      Replaced PRODDFTC with PRODCTL
	
	   12/23/98 - KONGJ - 30071
		      Changed CIFTYP.INTYPRST to PRODDFTC.INTYPRST.
	*/
	
	// Check Institution Type Restriction at account maintenance
	
	new values,CIFTYPE,INTYPE,INTYPRST,XACN,XCRCD
	set XACN=dep.acn
	set values=Db.getOneRow("TYPE,INTYPE","CIF","XACN")
	set CIFTYPE=$P(values,$C(9),1)
	set INTYPE=$P(values,$C(9),2)
	
	// if INTYPE is null, do nothing; else check for Institution Type Restriction.
	
	if INTYPE'="" do { quit:ER 
		set XCRCD=%SystemCurrency
		set INTYPRST=Db.getOneRow("INTYPRST","PRODCTL","CIFTYPE")
	
		// If INTYPRST is set to Yes, check the user table UTBLTTBL for a valid combination.
	
		if INTYPRST do { quit:ER 
			if Db.isDefined("UTBLINTTBL","CIFTYPE,INTYPE,dep.type") quit 
			do Runtime.setErrXBAD("DEP","INTYPRST") quit:ER 
			}
		}
		
	// Region Code must be three numbers	
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:dep.type")
	if prodctl.iftanpro = "IFTAN" do { quit:ER
		
		type RecordUTBLBRCD utblbrcd = Db.getRecord("UTBLBRCD","BRCD=:dep.boo",1)
		type Number I
		type String CH, REGION
		
		if utblbrcd.region.length()'=3 do Runtime.setErrMSG("UTBLBRCD",6198) quit
		
		set REGION=""
		
		for I=1:1:utblbrcd.region.length() do { quit:ER
			set CH = utblbrcd.region.extract(I)
			if CH'="0" set REGION=REGION_CH
		}
		
		if 'REGION.isNumber() do Runtime.setErrMSG("UTBLBRCD",6198) quit
	}
		
	quit
	

vau76 // Trigger AU_UPFRE - After Update Usage Credit Plan Frequency

	type public RecordDEP dep
	if dep.uspl'="",dep.upfre="" do Runtime.setErrXBAD("DEP","UPFRE") quit:ER 
	quit
	

vau77 // Trigger AU_UPNDT - After Update Usage Credit Plan Next Date

	type public RecordDEP dep

	 /*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Correct logic of if/else code
	----------------------------------------------------------------------
	*/

	if dep.upndt="",dep.uspl'="" do { quit:ER
		do Runtime.setErrXBAD("DEP","UPNDT2") quit:ER
	}
	else  if dep.upndt<%SystemDate,dep.upfre'="" do Runtime.setErrXBAD("DEP","UPNDT") quit:ER 
	
	quit

vau78 // Trigger AU_USPL - After Update Usage Credit Plan

	type public RecordDEP dep
	if dep.grp="DBD",dep.uspl'="" do Runtime.setErrXBAD("DEP","XDBDUSPL") quit:ER 
	quit
	

vau79 // Trigger AU_WRKDTE - After Update Work Date

	type public RecordDEP dep
	/*
	  --------------------- Revision History ------------------------------------------------
	   
	   11/11/05 - SATYANAS - 18007
	   	      Modified the code to PSL Standards.	
	   
	   06/03/99 - HILLANBRAND - ARQ33064
		      Added new trigger AU_WRKDTE for Collection Queue
	*/

	type public Boolean ER	

	// Update worked in Collection Report File
	
	type ResultSet rs=Db.select("QUEUE,CLS,WRKED","QCOLLREP","CID=:dep.cid") 
	if 'rs.getCol(3),('rs.getCol(1).isNull()) do { quit:ER
				
		type RecordQCOLLREP qcollrep=Db.getRecord("QCOLLREP","CID=:dep.cid,CLS=:rs.getCol(2),QUEUE=:rs.getCol(1)",1)
		if qcollrep.getMode() do {
			set qcollrep.wrked=1
			do qcollrep.save()
			}
		} 
	
	quit
	

vbd1 // Trigger BEFORE_DELETE - Before delete (check bal,status)

	type public RecordDEP dep
	/*
								---- Revision History ------------------------------------------------
							 
								07/19/05 - RussellDS - CR16614
        	   Replaced /SYSTEM qualifier with /FRMFILER.
        	   
        	   Minor PSL clean up.
        	   
        	   Removed old revision history.
	*/

	// Verify that if this is the lead account for Combined Account
	// Analysis, there are no sub accounts linked to it.
	
	type public Boolean ER
	
	type Number XACN, XCID
	
	set XCID = dep.cid

	//Cannot close the lead account used in account analysis
	if dep.anltyp = 1 do { quit:ER

		type ResultSet rs = Db.select("CID","DEP","ANLCID=:XCID")
	        if rs.isEmpty() quit 
		do Runtime.setErrXBAD("DEP","ANLCLS") quit:ER
	}
				
	// Delete RELCIF entries for this account
	set XACN = dep.acn
	do Db.delete("RELCIF", "CID=:XCID AND ACN=:XACN") quit:ER
	do Db.delete("CMBSTM", "CID=:XCID AND ACN=:XACN", "/FRMFILER") quit:ER
	
	// Check account status,balance and ytd int
	if dep.stat = 4, 'dep.bal, 'dep.acr, 'dep.iytd, 'dep.ira quit 
	do Runtime.setErrMSG("DEP", 76) quit:ER 
	
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger Deposit

	type public RecordDEP dep
	/*
 	---- Revision History ------------------------------------------------
	06/26/00 - Terrie Dougherty - 40629
		   Moved all code and revision history comments from this
		   trigger into a new procedure, DEPBI, to prevent compilation
		   errors caused by the DEP filer being too large. Changes to
		   the BEFORE_INSERT trigger should now be made to the DEPBI
		   procedure.
	*/

	do PROC^DEPBI(.dep)
	quit

vbu1 // Trigger BU - Before Update

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	// Revision History
	//------------------------------------------------------------------------
	// Orig: 11/10/99 - JERUCHIMC - 34287
	// This trigger created for MT320 SWIFT messages.  We need to check certain
	// data items and possibly generate an MT320.
	//------------------------------------------------------------------------
	new PTYPE,P320,FOUND,COLMN
	set PTYPE=dep.type
	set P320=Db.getOneRow("MT320","PRODDFTD","PTYPE")
	// Account AND product type must be set up for MT320 processing
	// in order to generate an MT320.
	// Cannot generate SWIFT MT320 message when product type is not eligible."
	if ('(P320=1))&(dep.mt320=1) set ER=1,RM=$$^MSG(4173) quit
	if ('(P320=1))!('(dep.mt320=1)) quit
	set DI="",FOUND=0
	// Loop through ^UTBL("MT320DI" and use changed macro to determine
	// if any of these data items are changing.
	new rs
	type ResultSet rs=Db.select("COL","UTBLMT320DI")
	if rs.isEmpty() quit
	while rs.next() do { quit:(FOUND=1)
 	set COLMN=rs.getCol(1)
	if dep.isChanged(COLMN) set FOUND=1
	}

	// Generate the MT320 message for an ammended or cancelled account.
	if FOUND=1 do ^SW320GEN(CID,"AMEND",dep.mdt) Q
	quit

vbu2 // Trigger BU_ACS - Before Update Accrual Indicator

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   Revision History

	   03/17/00 - CHOK - 31126
		      Converted isChanged method.
	*/

	// Change to column ~p1 not allowed

	if 'dep.isChanged("ACS","SYSTEM") do Runtime.setErrMSG("DEP",412,"dep.acs") if ER quit 
	quit
	

vbu3 // Trigger BU_AIIPF - Before Update Avail Int Posting Freq

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   --------------------------------------------------------------------
	   Revision History

	   10/27/00 - SMITHC - 42068:1
		      Created trigger to handle maintenance of Available 
		      Interest Posting Frequency (consistent with other 
		      frequency triggers).
	*/

	// Available Interest Posting Frequency is defined
	if dep.aiipf'="" do { quit:ER
		new NJD

		/* Avail Interest Next Posted and Avail Interest Paid - Last 
		   Date not applicable if segmented account accruing at 
		   segment level */
		if dep.segflg,'dep.segacr do { quit
			set dep.aiinp=""
			set dep.aiipld=""
			}

		// Default next date if not defined or in the past
		if dep.aiinp'>%SystemDate do { quit:ER
			new INTPOS
			set INTPOS=$S(Db.getOneRow("INTPOS","CUVAR")=1:1,1:0)
			set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.aiipf,INTPOS) quit:ER
			set dep.aiinp=NJD
			}

		// Default last date if not defined
		if dep.aiipld'="" do { quit:ER
			set NJD=$$NJD^UFRE(dep.aiinp,dep.aiipf,,"1") quit:ER
			if NJD<dep.odt S NJD=dep.odt
			set dep.aiipld=NJD
			}
		}

	quit

vbu4 // Trigger BU_AIIRN - Before Update Available Interest Rate

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   ----------------- Revision History ---------------------------------

	   10/30/03 - CARROLLJ - -CR7658
		      Modified calls to CTL^UINDX.

	   10/27/00 - SMITHC - 42068:1
		      Cleaned up code to be more consistent with before insert
		      and added code to handle changes to AIINTFRE and AIINDEX.
		      Incorporated BU_AIRDET into this trigger, and moved some
		      error checks dealing with effective date to AU_AIIRN.
	 
	   03/01/99 - SCHWARTZC - 28966
		      Modify previous comment to include a paramater to prevent
		      Fatal error reported in TW.
	
	   02/03/99 - ROYTENBERGG - 28224
		      Substituted $ZD with $$DAT^%ZM(DEP.HISCTF).
	*/

 	// Accounts tied to an index cannot be changed
	if dep.aiirn.oldVal'=dep.aiirn,dep.aiindex'="" do Runtime.setErrMSG("DEP",192) if ER quit

	if dep.aiintfre'="",dep.airdet do { quit:ER
		new NJD

		// Default next date if not defined or in the past
		if dep.aiichnd'>%SystemDate do { quit:ER
			new INTPOS
			set INTPOS=$S(Db.getOneRow("INTPOS","CUVAR")=1:1,1:0)
			set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.aiintfre,INTPOS) quit:ER
			set dep.aiichnd=NJD
			}

		// Default last date if not defined
		if dep.aiichld="" do { quit:ER
			set NJD=$$NJD^UFRE(dep.aiichnd,dep.aiintfre,,"1") quit:ER
			if NJD<dep.odt S NJD=dep.odt
			set dep.aiichld=NJD
			}
		}

	// If Avail Interest Index not defined, clear appropriate related fields
	if dep.aiindex="" do {
		set dep.aiintmat=""
		set dep.aiintspr=""
		set dep.airndmtd=""
		set dep.aiichnd=""
		}

	// Default AIIRN not defined and AIINDEX exists and AIRDET is set
	if dep.aiindex'="",dep.aiirn="",dep.airdet do { quit:ER
		set PAR("INDEX")=dep.aiindex
		set PAR("IPMODE")=1
		set PAR("NOTSER")=1
		set PAR("MATRIX")=dep.aiintmat
		set PAR("ROUND")=dep.airndmtd
		set PAR("SPREAD")=dep.aiintspr
		do CTL^UINDX(.dep,dep.aiichld,dep.intavlncr,.PAR)
		if ER&($P($G(IX(dep.aiindex)),"|",14)) do {
			new ERDT
			set (ER,RM)=""
			set ERDT=""
			set ERDT=$O(IX(dep.aiindex,ERDT))
			quit:ERDT=""
			set RATE=$P(IX(dep.aiindex,ERDT,0),"|",1)
			if RATE'?.N.1".".N do {
				set PAR("INDEX")=dep.aiindex
				set PAR("IPMODE")=1
				set PAR("NOTSER")=1
				set PAR("MATRIX")=dep.aiintmat
				set PAR("ROUND")=dep.airndmtd
				set PAR("SPREAD")=dep.aiintspr
				do CTL^UINDX(.dep,ERDT,dep.intavlncr,.PAR)
				}
			}
		if 'ER set dep.aiirn=RATE
		}

	quit

vbu5 // Trigger BU_ANLLSD - Before Update Net Loss Start Date

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if 'dep.anllsd set dep.anlled="" quit

	//calculate Net Loss End Date 
	set dep.anlled=dep.anlsnl+dep.anllsd
	if dep.anlled<%SystemDate do Runtime.setErrMSG("DEP",4326,"DEP.ANLLED") quit:ER
	quit

vbu6 // Trigger BU_ANLSNL - Before Update Days to Settle Net Loss

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if 'dep.anllsd quit
	
	//calculate Next Loss End Date.
	set dep.anlled=dep.anlsnl+dep.anllsd
	if dep.anlled<%SystemDate do Runtime.setErrMSG("DEP",4326,"DEP.ANLLED") quit:ER
	quit

vbu7 // Trigger BU_ANLSYS_ANLTYP - Before Update - ANLSYS & ANLTYP

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if dep.isChanged("ANLSYS") do { quit:ER
	 if '(dep.anlsys) set dep.anltyp=0
	 if (dep.anlsys),'(dep.anltyp) set dep.anltyp=1
			  } 
	/* If the value of analysis type changes from a 2 or 3, to a 1, the
				following warning message will be displayed:
	
				Changing Analysis Type to Lead Account Will Remove the Lead Account Value.
	*/
	if (dep.anltyp=1)!(dep.anltyp=0) do { quit:ER
								if dep.anlcid do Runtime.setErrXBAD("DEP","ANLTYP") quit:ER
								set dep.anlcid=""
																					}
	quit

vbu8 // Trigger BU_BGTCONTR - Before Update Budget Contribution Freq

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/* 
		Revision History -------------------------------------------

			08/21/00 - SMITHC - 37960:1
  	      Modified the defaulting of DEP.BGTLCDT and 
  	      DEP.BGTLCDT from DEP.BGTCONTR to follow the 
  	      standard rules of initial frequency dates, and 
  	      to assume BOD instead of EOD.
	 
			01/14/00 - SWEENEYT - 34910
  	      Added trigger to compute next scheduled 
  	      contribution date.

		-------------------------------------------------------------
	*/

	// BGTNCDT - Next Scheduled Contribution Date
	if dep.BGTPRO,dep.BGTCONTR'="" do { quit:ER
 	new NJD

 	set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.bgtcontr,0) quit:ER
 	if dep.bgtncdt="" set dep.bgtncdt=NJD
	
 	if dep.bgtlcdt'="" quit
	
 	// Default BGTLCST - Last Scheduled Contribution Date
 	set NJD=$$NJD^UFRE(dep.bgtncdt,dep.bgtcontr,,"10001") quit:ER
 	if NJD<dep.odt set NJD=dep.odt
 	set dep.bgtlcdt=NJD
	}

	quit

vbu9 // Trigger BU_BGTPRO - Before Update Budget Processing

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if dep.bgtpro do {
	new AF
	set dep.bgtyrsd=%SystemDate
	// Find budget year next date
	set dep.bgtyrnd=$$NJD^UFRE(dep.bgtyrsd,dep.bgtfreq,.AF)
	set dep.bgtrvudt=dep.bgtyrnd-dep.bgtoffst

	set dep.bgtlcdt=%SystemDate
 	// Default Next Scheduled Contribution Date
	set dep.bgtncdt=$$NJD^UFRE(dep.bgtlcdt,dep.bgtcontr,.AF)
	}
	quit

vbu10 // Trigger BU_BGTRVUDT - Before Update Budget Review Date

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if dep.bgtpro set dep.bgtrvudt=dep.bgtyrnd-dep.bgtoffst

	quit

vbu11 // Trigger BU_BWF - Before Update Backup Withholding

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	 ----------- Revision History ---------------------------------------

	10/04/01 - AHMEDS - 46105
		 This is a new trigger. This trigger is added to nullify the
		 accrued withholding tax (DEP.AWT) and accrued withholding
		 tax rate (DEP.AWTR) when accrued withholding tax processing
		 (DEP.AWTP) changes from selected to not selected with
		 backup withholding (DEP.BWF) option selected.  

	11/20/01 - AHMEDS - 46105
		 Removed setting of DEP.AWTR (accrued withholding tax rate)
		 to null when DEP.AWTP (accrued withholding tax processing 
		 option) changes from selected to not selected with DEP.BWF 
		 (backup withholding option) selected.

	*/

	/* 
	When accrued withholding tax index (DEP.AWTI) is defined irrespective
	of what the accrued withholding tax processing (DEP.AWTP) option is
	,the system calculates an account's withholding tax daily during 
	interest accruals. The amount of interest withheld will equal the 
	total amount of withholding computed over the entire interest posting 
	period.  When DEP.AWTI is not defined, the system calculates an 
	account's total withholding tax over the entire interest posting period
	on the interest posting day.
	
	When DEP.AWTP changes from selected to not selected and the accrued 
	withholding tax index is still defined, the accrued withholding tax 
	must equal to null in order to exclude any previously calculated 
	daily accrued interest withholding. If DEP.AWTI is not defined, then
	the withholding amount for the entire interest/dividend posting period
	will be calculated at the next interest posting day.

	There is no G/L associated with accrued withholding tax (DEP.AWT).
	*/
	if dep.bwf,'dep.awtp set dep.awt=""

	quit

vbu12 // Trigger BU_CCLD - Before Update Last Contact Date - Title

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	---- Revision History---------------------------------------------------
	
	10/04/06 - KELLYP - CR 22341
		   Modified to remove the dep.ccld.oldVal check.  This prevented
		   the dep.ccld field from being updated when the dep.title*
		   fields were modified when dep.ccld already had a value.
	
	*/
	
	// CUVAR option for updating dep.ccld is disabled
	if 'CUVAR.LCCTIT quit
	
	// Already set to today
	if dep.ccld=%SystemDate quit
	
	set dep.ccld=%SystemDate
	
	quit
	

vbu13 // Trigger BU_CCLD_PBKSEQ - Before Update Contact Date on PBKSEQ

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	
	// Update Last Contact on Passbook Update

	type ResultSet rs
								set rs=Db.select("LCCPU","CUVAR")
	if rs.getCol("LCCPU"),dep.ccld'=%SystemDate set dep.ccld=%SystemDate
	quit
	

vbu14 // Trigger BU_CLS - Before update class

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	// Change to column ~p1 not allowed

	do Runtime.setErrMSG("DEP",412,"DEP.CLS") if ER quit 
	quit
	

vbu15 // Trigger BU_COLLST - Collection Queue Change

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	  ------------------- Revision History ------------------------------------------------
	   
	   11/15/05 - SATYANAS - 18007
	   	      Added the decaration for ER.
	   
	   06/10/99 - CARROLLJ  33064
		If [DEP]COLLST-Collsection Status is modified update the
		[DEP]PCOLLST-Previous Collection Status and [DEP]COLCDTE-
		Collection Status Change date.
		If collection status is changed update previous collection status and
		Collection Status Change Date
	*/
	
	type public Boolean ER
	
	if (dep.collst.oldVal'=dep.collst) do { quit:ER 
		if dep.colcdte'=%SystemDate set dep.colcdte=%SystemDate
		if dep.collst.oldVal'=dep.collst set dep.pcollst=dep.collst.oldVal
		}
	quit
	

vbu16 // Trigger BU_DARCOVR - Before Update Deposit Asset Class Overri

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   If Deposit Class Override is updated, update Suspect Indicator.
	   If DARCOVR > 0 set SUSPECT to 1.
	   If DARCOVR = Null and Expiration period exists set SUSPECT to 3, else set
	   SUSPECT to NULL
	*/

	set dep.suspect=$S(dep.darcovr>0:1,(dep.darcexpd&'dep.darcovr):3,1:"")
	quit
	

vbu17 // Trigger BU_DEFINADJ - Before Update Deferred Int Adjustments

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	// Defer Posting Interest Adjustments flag cannot be modified

	do Runtime.setErrMSG("DEP",3857) if ER quit
	
	quit
	

vbu18 // Trigger BU_EMPLBEN - Before Update of Employer Benefit Plan

	type public RecordDEP dep
	do dep.setAuditFlag(1)

	/*
	  --------------------- Revision History-----------------------------------------------------------
	
	  11/03/99 - MOTENJ - 31126
		Converted to PSL.
	           	  
	*/

	if (dep.emplben=1) do { quit:ER 
		// Employer Code is required when Employer Benefit Plan is Yes

		if dep.emplno="" do Runtime.setErrXBAD("DEP",198) quit:ER 

		new data,XACN,XEMPLNO,XTYPE
		set XACN=dep.acn 
		set XEMPLNO=dep.emplno 
		set XTYPE=dep.type
	
		new rs 
	    	type ResultSet rs=Db.select("CID","DEP","TYPE=:XTYPE AND EMPLNO=:XEMPLNO AND ACN=:XACN") 
	
		// Employer Benefit Plan already opened for this cust and prod

		if 'rs.isEmpty() do Runtime.setErrXBAD("DEP",197) quit:ER 
		}
	
	do { quit:ER 
		new data,emplben,TYPE
		set TYPE=dep.type
		set data=Db.getOneRow("EMPLBEN","PRODDFTD","TYPE")
		set emplben=$P(data,$C(9),1)

		//Employer Benefit flag must be consistent with the Product Type.

		if emplben=1,dep.emplben'=1 do Runtime.setErrMSG("DEP",3639) if ER quit 
		}
	quit 
	

vbu19 // Trigger BU_GCR - Before Update GCR

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   Revision History
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   03/17/00 - CHOK - 31126
		      Converted isChanged method.
	*/

	type Public Boolean ER
	// If GCRS or GCRCD is changed, update GCR date last and previous maintained

	set dep.gcrlmnt=%SystemDate
	set dep.gcrpmnt=dep.gcrlmnt.oldVal
	
	// IF GCRS status is changed to Revoked, set the GCR code, coverage to null

	if dep.gcrs=3 set dep.gcrcd="",dep.gcrcv="",dep.sddepcvr=""
	
	// If user changes GCRCD update daily comment field for report with user ID.

	if 'dep.isChanged("GCRCD","SYSTEM") set dep.cngrs=""
	
	// IF GCRCD is changed and GCR status is fixed or dynamic, update coverage.

	if dep.isChanged("GCRCD"),(dep.gcrcd'=""),(dep.gcrs=2)!(dep.gcrs=1) do { quit:ER 
		type String MTBL
		type Number DGCRCD,DIF,GCRCV,NSDCVR,OSDCVR
		set MTBL=dep.mscrtbl
		set DGCRCD=dep.gcrcd
		type ResultSet rs=Db.select("SDDEPCVR,GCRCV","UTBLGCRBAL","TBLNM=:MTBL AND GCRCD=:DGCRCD")
		if 'rs.isEmpty() if rs.next() set dep.sddepcvr=rs.getCol("SDDEPCVR")
		set GCRCV=rs.getCol("GCRCV")+dep.inicvopt
		set dep.gcrcv=GCRCV
	
		// Update GCRAVL with changed amount

		set NSDCVR=dep.sddepcvr
		set OSDCVR=dep.sddepcvr.oldVal
		if NSDCVR<OSDCVR set DIF=OSDCVR-NSDCVR,NSDAVL=dep.sdavl-DIF
		else  set DIF=NSDCVR-OSDCVR,NSDAVL=dep.sdavl+DIF
		set dep.sdavl=$S(NSDAVL<0:0,1:NSDAVL)
		}
	quit
	

vbu20 // Trigger BU_GCRCV - Before Update GCRCV

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   Revision History
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   03/17/00 - CHOK - 31126
		      Converted isChanged method.
	*/
	type Public Boolean ER
	// Change to column ~p1 not allowed

	if 'dep.isChanged("GCRCV","SYSTEM") do Runtime.setErrMSG("DEP",412,"DEP.GCRCV") if ER quit
	quit
	

vbu21 // Trigger BU_GCRDOD - Before Update GCR Daily Overdraft

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if dep.gcrdod=1 set dep.odcnt=dep.odcnt
	quit
	

vbu22 // Trigger BU_GCRLMNT - Before Update GCR Date Last Maintained

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   Revision History
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   03/17/00 - CHOK - 31126
		      Converted isChanged method.
	*/
	type Public Boolean ER

	// Change to column ~p1 not allowed

	if 'dep.isChanged("GCRLMNT","SYSTEM") do Runtime.setErrMSG("DEP",412,"DEP.GCRLNMT") if ER quit
	quit
	

vbu23 // Trigger BU_GCRPMNT - Before Update GCR Date Prev Maintained

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   Revision History
	
	   11/22/05 - NATRAJAH - 13734
		      General DBI3 cleanup.

	   03/17/00 - CHOK -31126
		      Converted isChanged method.
	*/
	type Public Boolean ER

	// Change to column ~p1 not allowed
	if 'dep.isChanged("GCRPMNT","SYSTEM") do Runtime.setErrMSG("DEP",412,"DEP.GCRPMNT") quit:ER 
	quit
	

vbu24 // Trigger BU_GCRTFCID - Before Update GCR Transfer Account

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	  -----------------------  Revision History -------------------------------------------------

   	   09/08/04 - KELLYP - CR 11982
		Replaced references to RELACN with RELCIF.  RELACN is an index
		and should not be directly referenced.  The RELACN table was 
		also obsoleted from the M database.

	   10/05/99 - HILLANBRAND 33754
		Removed setting of computed data items GCRLBAl and TODCNT
	*/

	if dep.gcrtfcid="" quit 
	
	/*
	   The GCR transfer account must be a closed account with status = 4, a valid
	   acount for a least one cif and currency the same.
	*/

	type Public String ER

	type Boolean ONECIF
	type Number GCID,RCIF
	
	if 'Db.isDefined("DEP","dep.gcrtfcid") do Runtime.setErrMSG("DEP",7774) if ER quit 
	set GCID=dep.gcrtfcid
	
	type RecordDEP depgcid=Db.getRecord("DEP","CID=:GCID")
	
	// Account ~p1 not closed
	if depgcid.stat'=4 do Runtime.setErrMSG("DEP",125,dep.gcrtfcid) if ER quit 

	// Must be a deposit account
	if depgcid.cls'="D" do Runtime.setErrMSG("DEP",1791) if ER quit 

	// Transfer account must be of the same currency
	if depgcid.crcd'=dep.crcd do Runtime.setErrMSG("DEP",2748) if ER quit 
	
	set ONECIF=0

	// CR 11982 - Replaced RELACN with RELCIF
	type ResultSet rs=Db.select("ACN","RELCIF","CID=:GCID")
	if 'rs.isEmpty() while rs.next() do { quit:ER
		set RCIF=rs.getCol(1)
		// CR 11982 - Replaced RELACN with RELCIF
		if Db.isDefined("RELCIF","RCIF,CID") set ONECIF=1
		}
	if 'ONECIF do Runtime.setErrXBAD("DEP","PCIF") quit:ER 
	
	/*
	   This coding is done in the before update so after update triggers on various data items will occur.
	   GCR transfer account holds the account from which GCR information is transferred. 
	   Move all GCR related fields and the GCR Liability Package Balances from GCR transfer account when
	   GCRTFCID is updated with a valid account number.
	   During GCR scoring, the system will read the Original Opening Date field on the account.  
	   If Original Opening Date contains a value, the system will use Original Opening Date to compute the 
	   account age.  Overdraft information will have been transferred to the new account, so normal processing
	   will apply. The system will compute the Six-Month Average GCR Liability Package Balance from the balances
	   transferred to the new account.
	*/
	 		
	// Update GCR colums
	set dep.odcnt1=depgcid.odcnt1
	set dep.odcnt2=depgcid.odcnt2
	set dep.odcnt3=depgcid.odcnt3
	set dep.odcnt4=depgcid.odcnt4
	set dep.odcnt5=depgcid.odcnt5
	set dep.odcnt6=depgcid.odcnt6
	set dep.odcnt7=depgcid.odcnt7
	set dep.odcnt8=depgcid.odcnt8
	set dep.odcnt9=depgcid.odcnt9
	set dep.odcnt10=depgcid.odcnt10
	set dep.odcnt11=depgcid.odcnt11
	set dep.odcnt12=depgcid.odcnt12
	set dep.odcnt13=depgcid.odcnt13
	set dep.odcnt14=depgcid.odcnt14
	set dep.odcnt15=depgcid.odcnt15
	set dep.odcnt16=depgcid.odcnt16
	set dep.odcnt17=depgcid.odcnt17
	set dep.odcnt18=depgcid.odcnt18
	set dep.odcnt19=depgcid.odcnt19
	set dep.odcnt20=depgcid.odcnt20
	set dep.odcnt21=depgcid.odcnt21
	set dep.odcnt22=depgcid.odcnt22
	set dep.odcnt23=depgcid.odcnt23
	set dep.odcnt24=depgcid.odcnt24
	set dep.odcnt25=depgcid.odcnt25
	set dep.odcnt26=depgcid.odcnt26
	set dep.odcnt27=depgcid.odcnt27
	set dep.odcnt28=depgcid.odcnt28
	set dep.odcnt29=depgcid.odcnt29
	set dep.odcnt30=depgcid.odcnt30
	set dep.odcnt31=depgcid.odcnt31
	set dep.odcnt32=depgcid.odcnt32
	set dep.odcnt33=depgcid.odcnt33
	set dep.odcnt34=depgcid.odcnt34
	set dep.odcnt35=depgcid.odcnt35
	set dep.odcnt36=depgcid.odcnt36	
	set dep.origopd=depgcid.odt
	set dep.gcrs=depgcid.gcrs
	set dep.gcrcd=depgcid.gcrcd
	set dep.gcrlmnt=depgcid.gcrlmnt
	set dep.gcrpmnt=depgcid.gcrpmnt
	set dep.mscrtbl=depgcid.mscrtbl
	set dep.dscrtbl=depgcid.dscrtbl
	set dep.inicvopt=depgcid.inicvopt
	set dep.scrfreq=depgcid.scrfreq
	set dep.odlimopt=depgcid.odlimopt
	set dep.lsovrdm=depgcid.lsovrdm
	set dep.hsovrdm=depgcid.hsovrdm
	set dep.dsopt=depgcid.dsopt
	set dep.gcrcv=depgcid.gcrcv
	set dep.sddepcvr=depgcid.sddepcvr
	set dep.nsdate=depgcid.nsdate
	set dep.lsdate=depgcid.lsdate
	set dep.gcrdod=depgcid.gcrdod
	set dep.rnamt=depgcid.rnamt
	set dep.odcnt=depgcid.odcnt
	set dep.convdt=%SystemDate

	quit

vbu25 // Trigger BU_INTCHKFRE - Before Update Interest Check Frequency

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   ---- Revision History ----------------------------------------------

	   10/27/00 - SMITHC - 42068:1
		      Cleaned up code to be more consistent with before insert
		      and other before update frequency triggers.
	*/

	if dep.intchkfre'="" do { quit:ER
		new NJD

		// Default next date if not defined or in the past
		if dep.intchknd'>%SystemDate do { quit:ER
			new INTPOS
			set INTPOS=$S(Db.getOneRow("INTPOS","CUVAR")=1:1,1:0)
			set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.intchkfre,INTPOS) quit:ER
			set dep.intchknd=NJD
			}

		// Default last date if not defined
		if dep.intchkld'="" do { quit:ER
			set NJD=$$NJD^UFRE(dep.intchknd,dep.intchkfre,,"1") quit:ER
			if NJD<dep.odt S NJD=dep.odt
			if dep.intchkld=NJD
			}
		}
	quit

vbu26 // Trigger BU_IOPT - Before Update Interest Disb. Option

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	
	/*
	  ------------------- Revision History ------------------------------------------------
	   05/20/99 - SCOTTC - 30444
		Modified to handle new interest disbursement options 5, 6 and 7.
	
	 	IOPT - Interest Disbursement Option
	      	0)=Remain On Deposit
	      	1)=Pay By Check
	      	2)=Transfer to Another Account
	      	3)=Pay By Check (Consolidated)
	      	5)=Transfer Int Paid and Int Paid Adjmts
	      	6)=Transfer Int Charged and Charged Adjmts
	      	7)=Transfer All Int and All Int Adjmts
	*/
	new IOPT
	set IOPT=dep.iopt
	
	// Interest disbursement option is not transfer to another account.

	if IOPT'=2,IOPT'=5,IOPT'=7,dep.itrf'="" set dep.itrf=""
	
	// Transfer to another account, transfer account required

	if dep.iopt=2,dep.itrf="" do Runtime.setErrXBAD("DEP","ITRF") quit:ER 
	
	// Interest disbursement option is not transfered negative interest to another account.

	if IOPT'=6,IOPT'=7,dep.negitrf'="" set dep.negitrf=""
	
	// Interest disbursement option is not pay by check.

	if dep.iopt'=3,dep.iopt'=1 do {
		if dep.intchkfre'="" set dep.intchkfre=""
		if dep.intchknd'="" set dep.intchknd=""
		if dep.intchkld'="" set dep.intchkld=""
		if dep.intchkmin'="" set dep.intchkmin=""
		}
	quit
	

vbu27 // Trigger BU_IPF - Before Update Int/Div Posting Frequency

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
 	   --------------------------------------------------------------------
	   Revision History
	   
	   08/02/06 - ratht - CR 19215
	   	      The value of NJD is kept in a loop till NJD not greater 
	   	      than current date where NJD is being set by procedure UFRE.
	   	      Added a condition by checking that the updation of columns 
	   	      IPLD and NEGIPLD is being done by SYSTEM ONLY
	   	      
	   04/03/02 - KELLYP - 49129
		      Modified the check that determines whether or not INP is
		      in the past when generating a new INP.  This check was
		      previously not considering CUVAR.INTPOS.

	   10/26/00 - SMITHC - 42068:1
		      Replaced BU_INTAF with this trigger.  Cleaned up code to
		      be more consistent with before insert.

	   09/22/00 - REEDD - 42068 (Roll forward 41188)
		      Modified code to calculate the next and last change date 
		      if the available interest frequency has changed.

	   01/13/99 - HAYMANP - 35866
		      Retrofit change below:

		      12/18/99 - SMITHC - 35866
		      removed code to handle low balance verification (moved
		      to AU_INTEREST trigger).
	 */

	 if dep.ipf'="" do { quit:ER 
	 	new AF,cuvar,INTPOS,NJD

		/*
		   Determine Int/Div - Annual Factor, regardless of whether
		   or not user specifies
		*/
		set NJD=$$NJD^UFRE(%SystemDate,dep.ipf,.AF,"00001") quit:ER 
		set dep.intaf=AF

		/*
		   Int/Div Next Posted and Int/Div Paid - Last Date not 
		   applicable if segmented account accruing at seg level
		*/
		if dep.segflg,'dep.segacr do { quit
			set dep.inp=""
			set dep.ipld=""
			}

		// 49129 - Get INTPOS (BOD/EOD Interest Posting Indicator)
		type RecordCUVAR cuvar=Db.getRecord("CUVAR","*")
		set INTPOS=cuvar.intpos

		// 49129 - Modified "if" below to consider INTPOS
		// Default next date if not defined or in the past
 		if dep.inp<(%SystemDate+INTPOS-1) do { quit:ER
			// 49129 - Reset INTPOS for CTL parameter of FRSTDATE
			set INTPOS=INTPOS#2
			set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.ipf,INTPOS) quit:ER
			set dep.inp=NJD
			}
		// Only change by system is allowed for this column
		if (dep.ipld.oldVal'=dep.ipld),('dep.isChanged("IPLD","SYSTEM")) do Runtime.setErrMSG("DEP",412,"DEP.IPLD") quit:ER

		// Default last date if not defined
		 if dep.ipld="" do { quit:ER
			set NJD=dep.inp
			for  set NJD=$$NJD^UFRE(NJD,dep.ipf,,"1") quit:ER  do { quit:NJD'>%SystemDate
				if NJD<dep.odt set NJD=dep.odt
				}
			set dep.ipld=NJD
			}
		}

	quit

vbu28 // Trigger BU_IRA - Before update IRA plan

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	  -------------------- Revision History -------------------------------------------------------
	   05/10/99 - TITOVE - 31637
		Update to IRA and RPASEQ fields allowed as a part of
		de-linking processing.
	*/
	
	// PFW De-link flag set IRA TYPE to zero

	if dep.dlkflg,dep.ira.oldVal set dep.ira=0
	
	/*
	   If IRA type is set to zero through de-link process or user change, set
	   the RPASEQ to null.  Integrity and error checking done in AU_IRA trigger.
	*/

	if 'dep.ira set dep.rpaseq=""

	quit
	

vbu29 // Trigger BU_IRN - Before update of IRN

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   ---- Revision History ----------------------------------------------
	   08/27/02 - ANTONOVV - 43583
		      Modified calls to UINDX to comly with new parameters.

	   11/20/01 - AHMEDS - 46105
		      The trigger has been modified to pass a 0 for the
		      interest amount in the call to ^DEPBW. Also removed
		      check for DEP.AWTP (accrued withholding tax processing)
		      option when DEP.AWTI (accrued withholding tax index) 
		      is defined in the call to ^DEPBW to calculate tax rate.

	   10/04/01 - AHMEDS - 46105
		      Modified to include a check to see if Accrued Withholding
		      Tax Processing option is on and Accrued Withholding Tax 
		      Index is defined. If the above is true then call into 
		      AWT^DEPBW to get the tax rate corresponding to the 
		      interest rate.		      

	   06/18/01 - SISONG - 45459
		      New(ed) DEP to be able to create accounts with ODLIM
		      Interest Index added.

	   10/27/00 - SMITHC - 42068:1
		      Cleaned up code to be more consistent with before insert.
		      Incorporated BU_INTFRE and BU_INDEX into this trigger,
		      and moved some error checks dealing with effective date
		      to AU_IRN.
	*/

	new DEP 
		
	// Accounts tied to an interest index cannot be changed
	if dep.irn.oldVal'=dep.irn,dep.index'="" do Runtime.setErrMSG("DEP",192) if ER quit 
	
	// Does not apply to segmented accounts accruing at the segment level
	if dep.intfre'="" do { quit:ER
 		new NJD

		if dep.segflg,'dep.segacr do { quit
			set dep.ichnd=""
			set dep.ichld=""
			}

		// Default next date if not defined or in the past
 		if dep.ichnd'>%SystemDate do { quit:ER
			set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.intfre,1) quit:ER
			set dep.ichnd=NJD
			}

		// Default last date if not defined
		if dep.ichld'="" do { quit:ER
			set NJD=$$NJD^UFRE(dep.ichnd,dep.intfre,,"1") quit:ER
			if NJD<dep.odt set NJD=dep.odt
			set dep.ichld=NJD
			}
		}

	// If Int/Div Index not defined, clear appropriate related fields
	if dep.index="" do {
		set dep.intmat=""
		set dep.intspr=""
		set dep.rndmtd=""
		set dep.ichnd=""
		}

 	/*
	   If Index is present;  find the Rate according to index, and place
	   it in IRN.  If error and DIAUTH is set, load rate from 0 balance
	   tier of the IX array.
	*/
	if dep.index'="",dep.irn="" do { quit:ER
		new BALINT,IRCB,MAXACR,PAR,RATE

		// Does not apply if accruing at segment level
		if dep.segflg,'dep.segacr quit

		set IRCB=dep.ircb
		set MAXACR=dep.maxacr
		do {
			if IRCB=1 set BALINT=dep.bal quit
			if IRCB=2 set BALINT=dep.bal-dep.intavl quit
			if IRCB=3 set BALINT=dep.balcol quit
			if IRCB=4,dep.bal S BALINT=dep.salesprc quit
			set BALINT=0
			}
		if MAXACR'="",BALINT>MAXACR set BALINT=MAXACR

		/* Define parameters for rate calculation:
		IX array not fully loaded; use teaser processing; coming in
		from BTTCORE; perform rounding; perform limit checks. */
		set PAR("IXLOAD")=0
		set PAR("NOTSER")=1	
		set PAR("IPMODE")=1	
		set PAR("ROUND")=0	
		set PAR("LIMIT")=1

		do CTL^UINDX(.dep,dep.ichld,BALINT,.PAR)

		if ER&($P($G(IX(dep.index)),"|",14)) do {
			new ERDT
			set (ER,RM)=""
			set ERDT=""
			set ERDT=$O(IX(dep.index,ERDT))
			quit:ERDT=""
			set RATE=$P(IX(dep.index,ERDT,0),"|",1)
			}
		if RATE'?.N.1".".N do CTL^UINDX(.dep,ERDT,BALINT,.PAR)
		if 'ER set dep.irn=RATE
		}

	/* 
	If Accrued Withholding Tax Index is defined call into AWT^DEPBW to 
	get the tax rate.
	*/
	if dep.awti'="" do { quit:ER

		// Not applied for segmented accounts
		if dep.segflg quit
	
		set dep.awtr=$$AWT^DEPBW(dep.awti,0,,dep.irn,%SystemDate) quit:ER 
		}
	quit

vbu30 // Trigger BU_LSP - Before Update for column Lease Sec.Proc.

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------
	
	  07/24/00 - VETSENM - 40799
	  Error message 4194 has been replaced by error message 1259.            	  
	 
	  06/30/00 - VETSENM - 40799
	  Add code to quit if LSP flag is 0 or null.          	  

										02/24/00 - VETSENM - 35995
																				This new trigger will be created to verify the following:
																				LAFM has been specified if LSP is Y.
																				OBORIRP has been specified if LAFM is 1, 2, 4 or 5. 
																				IEP has been specified if LAFM is 3, 4 or 5.
																				LAFTFR is a valid account (exists in ACN and 
																				the status is not closed) if LSP is Y
	                        		
	*/
								if 'dep.lsp quit 

	if (dep.lsp=1),(dep.lafm="") do Runtime.setErrMSG("DEP",4218) if ER quit
	if (dep.lafm=1)!(dep.lafm=2)!(dep.lafm=4)!(dep.lafm=5),(dep.oborirp="") do Runtime.setErrMSG("DEP",4198) if ER quit
	if (dep.lafm=3)!(dep.lafm=4)!(dep.lafm=5),(dep.iep="") do Runtime.setErrMSG("DEP",4195) if ER quit
	
								new XCID,xlsp,status,rcid
	set XCID=dep.laftfr
	set xlsp=dep.lsp
	
	;set rcid=Db.getOneRow("CID","DEP","XCID")
 	set status=Db.getOneRow("STAT","DEP","XCID")
 	if (status="")!(status=4),(xlsp=1) do Runtime.setErrMSG("DEP",1259,XCID) if ER quit
	
	quit

vbu31 // Trigger BU_MDT_TRM - Before Update Maturity Date or Term

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if dep.trm'="",dep.mdt="" do { quit:ER 		
		new begin,dlr,mdt,odt
		// Find beginning date which is equal to later of opening date and last renewal date.
		set odt=dep.odt 
		set dlr=dep.dlr
		set begin=$S(dlr'<$S(odt'="":odt,1:dlr):dlr,1:odt)
	
		// Compute maturity date

		set mdt=$$EXT^UMDT(dep.trm,begin,0,dep.busopt,dep.nbdc) quit:ER 
		set dep.mdt=mdt
		}
	quit
	

vbu32 // Trigger BU_MMDA4 - Before Update MMDA4 (Regulation D Freq)

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	;---- Revision History ------------------------------------------------
	; 10/18/00 - SCOTTC - 42039
	;            Modify check for DEP.REGD=5,DEP.MMDA4="". Changed it to test
	;            to see if it is null rather that I 'DEP.MMDA4.
	;
	; 07/11/00 - SCOTTC - 40823
	;            Add code to set next cycle date if null
	;----------------------------------------------------------------------
	;
	if dep.regd=5,(dep.mmda4="") do Runtime.setErrMSG("DEP",4295) if ER quit
	// Regulation D processing - Set next cycle date        CPS 7/6/00
	if (dep.regd=5),(dep.mmda4),'(dep.mmda3) do {
 	new NJD
 	set NJD=$$FRSTDATE^ACNFUNCS(TJD,dep.mmda4,1) quit:ER
 	set dep.mmda3=NJD
								}
	
	quit

vbu33 // Trigger BU_MT320 - Before Update MT320 Trigger

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	
								/*
								---------------Revision History---------------------------------------

	09/16/05 - KELLYP - CR 17050
		   Modified to fix several logic issues.  Also removed pre-
		   2003 revision history.
								*/

	type public Boolean ER

	if dep.mt320=1,dep.mt320a.isNull() do { quit:ER
		
		type RecordCIF cif=Db.getRecord("CIF","ACN=:dep.acn")

		// SWIFT Address must be defined		
		if cif.swiftadd.isNull(),cif.mt320a.isNull() do Runtime.setErrMSG("DEP","4029") quit:ER
		}

								quit

vbu34 // Trigger BU_MT900 - Before Update trigger for MT900 column.

	type public RecordDEP dep
	do dep.setAuditFlag(1)
								/*
								---------------Revision History---------------------------------------

	09/16/05 - KELLYP - CR 17050
		   Modified to fix several logic issues.  Also removed pre-
		   2003 revision history.
								*/

	type public Boolean ER

								if dep.mt900=1,dep.mt900a.isNull() do { quit:ER

		type RecordCIF cif=Db.getRecord("CIF","ACN=:dep.acn")
		
		// SWIFT Address must be defined
		if cif.swiftadd.isNull(),cif.mt900a.isNull() do Runtime.setErrMSG("DEP","4029") quit:ER
		}

	quit

vbu35 // Trigger BU_MT910 - Before Update trigger for MT910 column.

	type public RecordDEP dep
	do dep.setAuditFlag(1)

								/*
								---------------Revision History---------------------------------------
	09/16/05 - KELLYP - CR 17050
		   Modified to fix several logic issues.  Also removed pre-
		   2003 revision history.
								*/

	type public Boolean ER

								if dep.mt910=1,dep.mt910a.isNull() do { quit:ER

		type RecordCIF cif=Db.getRecord("CIF","ACN=:dep.acn")
		
		// SWIFT Address must be defined
		if cif.swiftadd.isNull(),cif.mt910a.isNull() do Runtime.setErrMSG("DEP","4029") quit:ER
		}

								quit

vbu36 // Trigger BU_MT940 - Before Update trigger for MT940 column.

	type public RecordDEP dep
	do dep.setAuditFlag(1)
								/*
								---------------Revision History---------------------------------------

	09/16/05 - KELLYP - CR 17050
		   Modified to fix several logic issues.  Also removed pre-
		   2003 revision history.
								*/

	type public Boolean ER
	
	if dep.mt940=1,dep.mt940a.isNull() do {

		type RecordCIF cif=Db.getRecord("CIF","ACN=:dep.acn")

		// SWIFT Address must be defined
		if cif.swiftadd.isNull(),cif.mt940a.isNull() do Runtime.setErrMSG("DEP","4029") quit:ER
		}

	quit

vbu37 // Trigger BU_MT942TIME - Before Update trigger for MT942 column

	type public RecordDEP dep
	do dep.setAuditFlag(1)
								/*
								---------------Revision History---------------------------------------
	09/19/05 - KELLYP - CR 17050
		   Modified to correct logic errors throughout trigger
		   and removed pre-2003 revision history.
								*/

	type Date TMPDT
	type Time GTIME1,GTIME2,TMPTM

	if 'dep.mt942 quit

	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")

	// SWIFT Address must be defined
	if dep.mt942a.isNull(),cif.mt942a.isNull(),cif.swiftadd.isNull() do Runtime.setErrMSG("DEP","4029") quit:ER

	// Use CIF level MT942 generation time if not defined at account level
	if dep.mt942g1.isNull() set GTIME1=cif.mt942g1
	else  set GTIME1=dep.mt942g1
	
	if dep.mt942g2.isNull() set GTIME2=cif.mt942g2
	else  set GTIME2=dep.mt942g2
		
	// GTIME1 has not passed
	if GTIME1>%CurrentTime do {
		set TMPDT=%SystemDate
		set TMPTM=GTIME1
		}
		
	// GTIME1 has passed but GTIME2 hasn't
	else  if GTIME1<%CurrentTime,GTIME2>%CurrentTime do {
		set TMPDT=%SystemDate
		set TMPTM=GTIME2
		}
		
	// GTIME1 and GTIME2 have both passed
	else  if GTIME1<%CurrentTime,GTIME2<%CurrentTime do {
		set TMPDT=%SystemDate+1
		set TMPTM=GTIME1
		}

	if 'TMPDT.isBusDate(dep.nbdc) do {
		set TMPDT=TMPDT.nextBusDate(1,dep.nbdc)
		set TMPTM=GTIME1
		}
			
	// Create the SW942 record
	type RecordSW942 sw942=Class.new("RecordSW942","SWDATE=:TMPDT,SWTIME=:TMPTM,CID=:dep.cid")
	set sw942.status=0
	do sw942.save()

	quit

vbu38 // Trigger BU_MT950 - Before Update trigger for column MT950.

	type public RecordDEP dep
	do dep.setAuditFlag(1)
								/*
								---------------Revision History---------------------------------------

	09/16/05 - KELLYP - CR 17050
		   Modified to fix several logic issues.  Also removed pre-
		   2003 revision history.
								*/

	type public Boolean ER

								if dep.mt950=1,dep.mt950a.isNull() do {
		
		type RecordCIF cif=Db.getRecord("CIF","ACN=:dep.acn")

		// SWIFT Address must be defined
		if cif.mt950a.isNull(),cif.swiftadd.isNull() do Runtime.setErrMSG("DEP","4029") quit:ER
		}
	
	quit

vbu39 // Trigger BU_NEGIPF - Before Update Neg Int Posting Freq

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
											--------------------------------------------------------------------
											Revision History
										 
	   08/02/06 - ratht - CR 19215
	   	      The value of NJD is kept in a loop till NJD not greater 
	   	      than current date where NJD is being set by procedure UFRE.
	   	      Added a condition by checking that the updation of columns 
	   	      IPLD and NEGIPLD is being done by SYSTEM ONLY
	   	      
	   04/03/02 - KELLYP - 49129
		      Modified the check that determines whether or not NEGINP
		      is in the past when generating a new NEGINP.  This check
		      was previously not considering CUVAR.INTPOS.

	   10/25/00 - SMITHC - 42068:1
		      Created trigger to handle maintenance of Negative 
		      Interest posting Frequency (consistent with other 
		      frequency triggers).
	*/

	/* Negative Interest Posting Frequency only applicable when Negative 
	   Interest Posting Option posts interest separately */
	if dep.negipf'="",dep.negipo=2 do { quit:ER
		new cuvar,INTPOS,NJD

		// 49129 - Get INTPOS (BOD/EOD Interest Posting Indicator)
		type RecordCUVAR cuvar=Db.getRecord("CUVAR","*")
		set INTPOS=cuvar.intpos

		// 49129 - Modified "if" below to consider INTPOS
		// Default next date if not defined or in the past
		if dep.neginp<(%SystemDate+INTPOS-1) do { quit:ER
			// 49129 - Reset INTPOS for CTL parameter of FRSTDATE
			set INTPOS=INTPOS#2	
			set NJD=$$FRSTDATE^ACNFUNCS(dep.odt,dep.negipf,INTPOS) quit:ER
			set dep.neginp=NJD
			}
		/* Only change by system is allowed for this column.
		  Message text: Change to column ~p1 not allowed  */
		  
		if (dep.negipld.oldVal'=dep.negipld),('dep.isChanged("NEGIPLD","SYSTEM")) do Runtime.setErrMSG("DEP",412,"DEP.NEGIPLD") quit:ER

		// Default last date if not defined
		if dep.negipld="" do { quit:ER
			set NJD=dep.neginp
			for  set NJD=$$NJD^UFRE(NJD,dep.negipf,,"1") quit:ER  do { quit:NJD'>%SystemDate
				if NJD<dep.odt set NJD=dep.odt
				}
			set dep.negipld=NJD
			}
		}

	quit

vbu40 // Trigger BU_ODT - Before Update Date Account Opened

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   ---- Revision History ----------------------------------------------
	
	   12/12/01 - PARRAS - 47926
	   Don't allow the change of the opening date to the future if the
	   account is funded. It will cause an out-of-balance.
	
	*/

	if dep.odt>%SystemDate,dep.bal>0 do Runtime.setErrMSG("DEP",8090) quit
	quit

vbu41 // Trigger BU_ODTERM - Before Update - Overdraft Term

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if (dep.odterm.oldVal'=dep.odterm),dep.odterm'="" do {
		if 'dep.odstart do {
			// No start date - only need to verify frequency
			new TRM
			set TRM=dep.odterm
			do ^UMDT
			}
		else  do {
			// Cannot change overdraft term if expiration date precedes system date

			if (dep.odexp<%SystemDate) do Runtime.setErrMSG("DEP",2431) if ER quit 
			new EXPDT
			set EXPDT=$$EXT^UMDT(dep.odterm,dep.odstart)-1       // Recalulate exp date
			// Cannot change od. term if new expiration date will precede system date

			if (EXPDT<%SystemDate) do Runtime.setErrMSG("DEP",2441) if ER quit 
			set dep.odexp=EXPDT
			}
		}
	
	quit
	

vbu42 // Trigger BU_PBKBAL - Before Update Passbook Balance

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	
	if 'dep.pbi quit 
	if dep.pbkbal="" do {
		if dep.pbkbal'=0 set dep.pbkbal=0
		if dep.pbkld'=%SystemDate set dep.pbkld=%SystemDate
		}
	quit
	

vbu43 // Trigger BU_PROV - Before update of Provision fields

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
 	---- Revision History ------------------------------------------------
	
	04/19/05 - TITOVE - CR 15089
		   Modified as part of DBI2 project.	   

	*/

	type public Number ER

	// Data required in Data Item ~p1
	if dep.racovr.isNull(),(dep.provoamt!(dep.provopct)) do Runtime.setErrMSG("DEP",7531,"DEP.RACOVR") if ER quit 

	// Ovr provision amount and ovr provision percentage not allowed
	if dep.provoamt,dep.provopct do Runtime.setErrMSG("DEP",2759) if ER quit 

	quit
	

vbu44 // Trigger BU_SCHDEP - Scheduled Deposits

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	---------- Revision History -----------------------------------------

	01/15/01 - AHMEDS - 43469
	Added checks for error message 2476.
	---------------------------------------------------------------------
	*/
	//
	// Cannot update the data items CUMDEP, SCHDEPA, SCHDEPF, SCHDEPLD,
	// SCHDEPND and SCHPROC,TOTNOSDP if they are not NULL.

	// The following data items will not be updated if already defined.
	// Cannot update field ~p1
	if dep.isChanged("CUMDEP"),dep.cumdep.oldVal'="" do Runtime.setErrMSG("DEP",2476,"CUMDEP") quit:ER 
	if dep.isChanged("SCHDEPA"),dep.schdepa.oldVal'="" do Runtime.setErrMSG("DEP",2476,"SCHDEPA") quit:ER
	if dep.isChanged("SCHDEPF"),dep.schdepf.oldVal'="" do Runtime.setErrMSG("DEP",2476,"SCHDEPF") quit:ER
	if dep.isChanged("SCHDEPLD"),dep.schdepld.oldVal'="" do Runtime.setErrMSG("DEP",2476,"SCHDEPLD") quit:ER
	if dep.isChanged("SCHDEPND"),dep.schdepnd.oldVal'="" do Runtime.setErrMSG("DEP",2476,"SCHDEPND") quit:ER
	if dep.isChanged("SCHPROC"),dep.schproc.oldVal'="" do Runtime.setErrMSG("DEP",2476,"SCHPROC") quit:ER
	if dep.isChanged("TOTNOSDP"),dep.totnosdp.oldVal'="" do Runtime.setErrMSG("DEP",2476,"TOTNOSDP") quit:ER

	//Can not update the data items NSCDEPDD, NSCHDEPS and SCHDEPN
	//Cannot update field ~p1
	if dep.isChanged("NSCDEPDD") do Runtime.setErrMSG("DEP",2476,"NSCDEPDD") quit:ER
	if dep.isChanged("NSCHDEPS") do Runtime.setErrMSG("DEP",2476,"NSCHDEPS") quit:ER
	if dep.isChanged("SCHDEPN") do Runtime.setErrMSG("DEP",2476,"SCHDEPN") quit:ER
	//
	quit

vbu45 // Trigger BU_SCLD - Before Update Service Charge Last Date

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	if dep.anltyp'=1 quit 

	/* If the system is updating SCLD and there are no offset days, then there
				is no need to define the analysis offset end date, because when the
				offset days is 0, then the necessary analysis offset end process was 
				done during the service fee analysis process.   */

	if dep.isChanged("SCLD","SYSTEM"),'dep.anloffdy quit

	//if service fee last date is not defined, use todays date

	if dep.scld set firstdt=dep.scld,date=dep.scnd
	else  set firstdt=%SystemDate,date=$$NJD^UFRE(firstdt,dep.scfre,.AF) quit:ER
	
	/* Find the end date for analysis adjustment period.
				Per the recommendation by utility UNBD, the start date variable firstdt 
				will have a 1 added to insure the next business date is returned.  When
				anloffdy is 0, the next date is the same as the date in firstdt.  */

	if dep.anloffdy>0 set NJD=$$NBD^UNBD(firstdt+1,dep.anloffdy,0,"IBS") quit:ER
	else  set NJD=firstdt

 if dep.isChanged("SCLD","SYSTEM") do	{     // System changes
	 
	/* allow that offset period based on business calender
	   may generate a date after the scheduled next service 
	   fee date. If it does, set the Analysis offset days to
	   the day before the service fee will be calculated  */

	if dep.scnd'>NJD set NJD=(dep.scnd-1)
	}

	// The anlaysis offset end date must be less than SCND
	if date'>NJD do Runtime.setErrXBAD("DEP","ANLOFF") quit:ER

	/* If within the analysis offset period, the analysis offset end date
				must be greater than or equal to today's system date. 

				Else we are not within the analysis offset period, and if SCLD is not 
				being changed by the system, then anloffdy is being changed by the user, 
				and we don't want to update anloffed outside of the offset period as it 
				may have already be processed, and resetting anloffed may cause it to be 
				reset to run again.  */

	if (%SystemDate'<firstdt),(%SystemDate'>dep.anloffed) do { quit:ER
	if (NJD<%SystemDate) do Runtime.setErrMSG("DEP",4326,"DEP.ANLOFFED")
	}
	else  if 'dep.isChanged("SCLD","SYSTEM") quit

	set dep.anloffed=NJD

	quit

vbu46 // Trigger BU_SEGACR - Before Update Segment Accrual Option

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	  --------------- Revision History ------------------------------------------------
	
	   11/09/98 - CANFIELDS - 28591
		Moved error from AU_SEGACR to BU_SEGACR
	*/
	
	//Segment Accrual Option cannot be modified

	do Runtime.setErrXBAD("DEP",233) quit:ER 
	quit
	

vbu47 // Trigger BU_SEGFLG - Before Update Segments in Use Flag

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	
	/*
	  Segments in Use Flag cannot be modified on the account level
	  Change to column ~p1 not allowed
	*/

	do Runtime.setErrMSG("DEP",412,"DEP.SEGFLG") if ER quit 
	 
	quit
	

vbu48 // Trigger BU_SGNCRD - Set SGNCRDCHGDT when Sign Card Values Ch

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	09/28/01 - myersk - 47550 QAR 1
		   Created this trigger to correctly populate DEP.SGNCRDCHGDT
	*/
	set dep.sgncrdchgdt=%SystemDate
	quit

vbu49 // Trigger BU_STAT - Before update of status

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	   ----------------- Revision History ----------------------------------

	   03/09/06 - KELLYP - CR 19958
		Modified to remove the third parameter from the call to 
		REMOVE^PROCEFT.  Also removed pre-2003 revision history.

	*/
	
	// Set GCR Code to zero when status is not active

	if dep.stat,dep.gcrs set dep.gcrcd=0
	
	new exe,vsqlz,I
	set ER=0
	if dep.stat=4 do { quit:ER 
		if $$^SCARND(dep.bal,0,"","",2) do Runtime.setErrMSG("DEP",2784,dep.bal) quit:ER 
		if $$^SCARND(dep.posacr,0,"","",2) do Runtime.setErrMSG("DEP",2783,dep.posacr) quit:ER 
		if $$^SCARND(dep.negacr,0,"","",2) do Runtime.setErrMSG("DEP",2783,dep.negacr) quit:ER 
	
		new XCID
		set XCID=CID

		// Check for linked ODP loans
		new XTYPE,data,ltydata,sum,DATA
		type ResultSet rs=Db.select("ODACN","DEPODP","CID=:XCID")
		if 'rs.isEmpty() while rs.next() do { 
			new exe,vsql,cls                    	
			set DATA=rs.getCol(1)				
			set cls=Db.getOneRow("CLS","ACN","DATA")    				
			if cls="L" set data=Db.getOneRow("BAL,STAT,TYPE","LN","DATA")
			else  set data=Db.getOneRow("BAL,STAT,TYPE","DEP","DATA")
			if $P(data,$C(9),1) do Runtime.setErrMSG("DEP",8244) if ER quit         // Force error
			if $P(data,$C(9),2)=4 quit          					// Closed
			set XTYPE=$P(data,$C(9),3)
			set ltydata=Db.getOneRow("SWPF","PRODDFTD","XTYPE")	
			if ltydata do Runtime.setErrMSG("DEP",8244) if ER quit 
			}
	
		if ER quit 
		if dep.grp="ESC" do {
			//Make sure escrow is not still being billed

			new I,bildata,data,SEL

			// AREF not defined
                        // ESC not defined	
			if dep.aref=""!(dep.esc="") quit      	     	

			type ResultSet rs=Db.select("SCHSEQ,PE01EA,PE01AD,PE02EA,PE02AD,PE03EA,PE03AD,PE04EA,PE04AD,PE05EA,PE05AD,PE06EA,PE06AD,PE07EA,PE07AD,PE08EA,PE08AD,PE09EA,PE09AD,PE10EA,PE10AD,PE11EA,PE11AD,PE12EA,PE12AD,PE13EA,PE13AD,PE14EA,PE14AD,PE15EA,PE15AD,PE16EA,PE16AD,PE17EA,PE17AD,PE18EA,PE18AD,PE19EA,PE19AD,PE20EA,PE20AD","LNBIL1","CID=:XCID","SCHSEQ DESC")
			while rs.next() do { quit:ER
				set bildata=rs.getRow()				
				for I=1:1:20 do { quit:ER
					if $P(bildata,$C(9),I*2)'=dep.aref quit 
					if $P(bildata,$C(9),I*2+1)>0 do Runtime.setErrMSG("DEP",8242) if ER quit 
					}
				}
			}

		if ER quit 
		if dep.dtc'=%SystemDate set dep.dtc=%SystemDate
		set dep.bal.journal=0
		set dep.bal=0
		set dep.posacr.journal=0
		set dep.posacr=0
		set dep.negacr.journal=0
		set dep.negacr=0
		do REMOVE^PROCEFT(XCID,%SystemDate)         // remove standing payment orders for EFT.
		}
	
	/*
	   If the account is being reopened reset next dates for fields that we may
	   have passed. Null date closed and set accrial processed flag to yesterday.
	*/

	if dep.stat.oldVal=4 do {
		//Date Closed
		new ARND,FRE,OV,XCID,XCLS,XGRP,XTYPE
		if dep.dtc'="" set dep.dtc=""

		//accrual processed field

		if dep.acs'=(%SystemDate-1) set dep.acs=%SystemDate-1
	
		//Interest Compounding next date

		set ER=0
		set FRE=dep.icf 
		if FRE'="" do {
			set OV=dep.inc if OV'<%SystemDate quit 
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
			if 'ER if dep.inc'=OV set dep.inc=OV
			}
	
		//  Int next posted
		// not applicable if segmented account accruing at seg level //abv-06/07/02

		if dep.segflg,'dep.segacr set dep.inp=""
		else  do {
			set ER=0
			set FRE=dep.ipf 
			if FRE'="" do {
				set OV=dep.inp if OV'<%SystemDate quit 
				for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
				if 'ER if dep.inp'=OV set dep.inp=OV
				}
			}
	
		//  Neg Int next posted

		set ER=0
		set FRE=dep.negipf 
		if FRE'="" do {
			set OV=dep.neginp if OV'<%SystemDate quit 
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
			if 'ER if dep.neginp'=OV set dep.neginp=OV
			}
	
		//  Avail Int Next Posting Date         //abv - 6/7/02
		//  not applicable if segmented account accruing at seg level

		if dep.segflg,'dep.segacr set dep.aiinp=""
		else  do {
			set ER=0
			set FRE=dep.aiipf 
			if FRE'="" do {
				set OV=dep.aiinp if OV'<%SystemDate quit
				for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER)
				if 'ER if dep.aiinp'=OV set dep.aiinp=OV
				}
			}
			
		//  Service change next date

		set ER=0
		set FRE=dep.scfre 
		if FRE'="" do {
			set OV=dep.scnd if OV'<%SystemDate quit 
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
			if 'ER if dep.scnd'=OV set dep.scnd=OV
			}
	
		//  Interest check next date

		set ER=0
		set FRE=dep.intchkfre 
		if FRE'="" do {
			set OV=dep.intchknd if OV'<%SystemDate quit 
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
			if 'ER if dep.intchknd'=OV set dep.intchknd=OV
			}
	
		//  Money Market cycle next date

		set ER=0
		set FRE=dep.mmda4 
		if FRE'="" do {
			set OV=dep.mmda3 if OV'<%SystemDate quit 
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
			if 'ER if dep.mmda3'=OV set dep.mmda3=OV
			}
	
		//Interest change next date and last date

		set ER=0
		set FRE=dep.intfre 
		if FRE'="" do {
			set OV=dep.ichnd if OV'<%SystemDate quit 
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER) 
			if 'ER if dep.ichnd'=OV set dep.ichnd=OV
			set OV=$$NJD^UFRE(OV,FRE,,1)
			if 'ER if dep.ichld'=OV set dep.ichld=OV
			}

		// Avail Int change next date and last date     //abv - 6/7/02

		set ER=0
		set FRE=dep.aiintfre 
		if FRE'="" do {
			set OV=dep.aiichnd if OV'<%SystemDate quit
			for  set OV=$$NJD^UFRE(OV,FRE) quit:OV'<%SystemDate!(ER)
			if 'ER if dep.aiichnd'=OV set dep.aiichnd=OV
			set OV=$$NJD^UFRE(OV,FRE,,1)
			if 'ER if dep.aiichld'=OV set dep.aiichld=OV
			}

		// Delete DTJNA if it already exists so that user is able to reopen account
		set XCLS=dep.cls 
		set XGRP=dep.grp 
		set XTYPE=dep.type 
		set XCID=dep.cid
		set XTJD=%SystemDate
		if Db.isDefined("DTJNA","XTJD,XCLS,XGRP,XTYPE,XCID") do Db.delete("DTJNA","TJD=:XTJD AND CLS=:XCLS AND GRP=:XGRP AND TYP=:XTYPE AND CID=:XCID") Q:ER
		do Db.insert("DTJNA","TJD,CLS,GRP,TYP,CID,REOPN","%SystemDate,:XCLS,:XGRP,:XTYPE,:XCID,1") quit:ER
	
		// Bring any tickler's with a frequency up to date
	 	type ResultSet rs=Db.select("TKS,ARND,ARF,EXPD","TIKLACN","CID=:XCID")
 		if rs.isEmpty() quit
		while rs.next() do {
		   
			set ARND=rs.getCol(2)
			if ARND>%SystemDate quit 
			if ARND>(rs.getCol(4)) quit 
			set FRE=rs.getCol(3)
			set XTKS=rs.getCol(1)
			for  set ARND=$$NJD^UFRE(ARND,FRE) quit:ER!(ARND>%SystemDate) 
			if ER quit 
			do Db.update("TIKLACN","ARND=:ARND","CID=:XCID AND TKS=:XTKS")
			}
			//error will be defined if there is a freq error, allow integs to display
		set ER=0
		}
	quit
	

vbu50 // Trigger BU_TREXD - Before Update Teaser Rate and Expiration

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	  ---------------------------  Revision History ----------------------------------------------------------------------------
	   09/27/99 - ROYTENBERGE - 34627
		Added code to return error message if Promotional Rate
		Expiration Date is not greater than system date.
	*/

	if dep.trate'="",dep.trexd="" do Runtime.setErrMSG("DEP",2614) if ER quit
	if dep.trate="",dep.trexd'="" do Runtime.setErrMSG("DEP",2612) if ER quit 
	if '(dep.trexd.oldVal'=dep.trexd) quit 

	/*
	  Expiration Date should not be changed to null. The teaser rate expiration
	  date is needed to expire teaser rates when the beginning of day teaser
	  rate process (QUE047 - DEPTSR.M) is executed.
	*/

	if dep.trexd'="" quit 

	quit
	

vbu51 // Trigger BU_TYPE - Before Update Type

	type public RecordDEP dep
	do dep.setAuditFlag(1)

	/*
	  ----------------------- Revision History ------------------------------------------------

	   06/01/05 - KinI - 16153
		Removed comments regarding obsoleted GL filter functionality.
		Modified to comply with DBI standards.
		
	   11/17/98 - MAGERAM - 28591 - Segmented Account Creation
		Added an error check on product type maintenance that can
		only go segment to segment or non-segment to non-segment
	
	*/

	type public Boolean ER
	type Number XTYPE

	type RecordPRODDFTD proddftd = Db.getRecord("PRODDFTD","TYPE=:dep.type")

	set XTYPE = dep.type.oldVal
	type RecordPRODDFTD proddftdold = Db.getRecord("PRODDFTD","TYPE=:XTYPE")
	
	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL","TYPE=:dep.type")

	// Cannot change segmented account to non-segmented product
	if (dep.segflg = 1) & (proddftd.segflg '= 1) do Runtime.setErrMSG("DEP",3661) if ER quit
	
	// Cannot change non-segmented account to segmented product
	if ('dep.segflg) & (proddftd.segflg = 1) do Runtime.setErrMSG("DEP",3662) if ER quit
	
	// Be sure new type is still deposit class

	// Product type is not defined for this currency
	if (prodctl.cls = "") do Runtime.setErrMSG("DEP",2250) if ER quit 

	// Product class does not match product type
	if (prodctl.cls '= "D") do Runtime.setErrMSG("DEP",8472) if ER quit 
	
	// If type changes, change group automatically, if appropriate

	// Invalid GRP resulting from invalid change to TYPE
	if (proddftdold.grp = "ESC") , (proddftd.trb '= "ESC") do Runtime.setErrXBAD("DEP",179) quit:ER 
	else  if (proddftdold.grp '= "ESC") , (proddftd.grp = "ESC") do Runtime.setErrXBAD("DEP",179) quit:ER 

	if (dep.grp '= proddftd.grp) set dep.grp = proddftd.grp
	
	// Old product TRB should match new product type TRB	
	if (proddftdold.trb-proddftd.trb) do Runtime.setErrXBAD("DEP",180) quit:ER 
		
	quit
	

vbu52 // Trigger BU_USRESTAT - Before Update U. S. Residency Status

	type public RecordDEP dep
	do dep.setAuditFlag(1)
	/*
	  ------------ Revision History--------------------------------------------------------
	
	   08/16/99 - HAYMANP - 33049
		Added code to set NR based on the value of USRESTAT.
	*/
	
	if dep.usrestat=1 set dep.nr=1
	else  set dep.nr=0
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEP dep

	if (%O = 2) do vload

	if vobj(dep,1).exists() do {

		if dep.acctname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ACCTNAME", vRM) quit
		if dep.title1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE1", vRM) quit
		if dep.title2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE2", vRM) quit
		if dep.title3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE3", vRM) quit
		if dep.title4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE4", vRM) quit
	}

	if vobj(dep,49).exists() do {

		set X = dep.flg if 'X.isNull(),'Db.isDefined("STBLFLG","X") set vRM = $$^MSG(1485,X) do vdderr("FLG", vRM) quit
		if '("01"[dep.FNBODP) set vRM=$$^MSG(742,"L") do vdderr("FNBODP", vRM) quit
		if dep.iacm.length()>2 set vRM = $$^MSG(1076,2) do vdderr("IACM", vRM) quit
		set X = dep.iaf if 'X.isNull(),'Db.isDefined("STBLIAF","X") set vRM = $$^MSG(1485,X) do vdderr("IAF", vRM) quit
		set X = dep.icf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]ICF",0) if 'vRM.get().isNull() do vdderr("ICF", vRM) quit
		set X = dep.inccr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INCCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.incdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INCDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intgrc if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("INTGRC", vRM) quit
		set X = dep.ircb if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("IRCB", vRM) quit
		set X = dep.maxacr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxcr if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxdrct if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXDRCT", vRM) quit
		set X = dep.minacr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MINACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.minbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MINBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mincr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MINCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mindr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MINDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.minopt if 'X.isNull(),'Db.isDefined("STBLMINOPT","X") set vRM = $$^MSG(1485,X) do vdderr("MINOPT", vRM) quit
		set X = dep.negacrpo if 'X.isNull(),'Db.isDefined("STBLNEGACRPO","X") set vRM = $$^MSG(1485,X) do vdderr("NEGACRPO", vRM) quit
		set X = dep.negbalop if 'X.isNull(),'Db.isDefined("STBLNEGBALOP","X") set vRM = $$^MSG(1485,X) do vdderr("NEGBALOP", vRM) quit
		set X = dep.negipo if 'X.isNull(),'Db.isDefined("STBLNIPO","X") set vRM = $$^MSG(1485,X) do vdderr("NEGIPO", vRM) quit
		set X = dep.negminint if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGMININT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negminop if 'X.isNull(),'Db.isDefined("STBLNIMIN","X") set vRM = $$^MSG(1485,X) do vdderr("NEGMINOP", vRM) quit
		set X = dep.notice if 'X.isNull(),'Db.isDefined("STBLNOTICE","X") set vRM = $$^MSG(1485,X) do vdderr("NOTICE", vRM) quit
		set X = dep.notmax if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NOTMAX", vRM) quit
		set X = dep.notmin if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NOTMIN", vRM) quit
		set X = dep.notnbc if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("NOTNBC", vRM) quit
		set X = dep.odo if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("ODO", vRM) quit
		if '("01"[dep.ODSF) set vRM=$$^MSG(742,"L") do vdderr("ODSF", vRM) quit
		set X = dep.odsm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ODSM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.pdag.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PDAG", vRM) quit
		set X = dep.pdys if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("PDYS", vRM) quit
		set X = dep.popt if 'X.isNull(),'Db.isDefined("STBLPOPT","X") set vRM = $$^MSG(1485,X) do vdderr("POPT", vRM) quit
		if dep.scc.length()>3 set vRM = $$^MSG(1076,3) do vdderr("SCC", vRM) quit
		set X = dep.trb if 'X.isNull(),'Db.isDefined("STBLDC","X") set vRM = $$^MSG(1485,X) do vdderr("TRB", vRM) quit
	}

	if vobj(dep,50).exists() do {

		set X = dep.acngrp if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACNGRP", vRM) quit
		if '("01"[dep.ANLSYS) set vRM=$$^MSG(742,"L") do vdderr("ANLSYS", vRM) quit
		set X = dep.aomcode if 'X.isNull(),'Db.isDefined("STBLCINTMET","X") set vRM = $$^MSG(1485,X) do vdderr("AOMCODE", vRM) quit
		if dep.atn.length()>50 set vRM = $$^MSG(1076,50) do vdderr("ATN", vRM) quit
		set X = dep.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
		set X = dep.ccode if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
		set X = dep.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
		set X = dep.co if 'X.isNull(),'Db.isDefined("UTBLCO","X") set vRM = $$^MSG(1485,X) do vdderr("CO", vRM) quit
		if '("01"[dep.COMM) set vRM=$$^MSG(742,"L") do vdderr("COMM", vRM) quit
		set X = dep.commfper if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.COMMFPER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		if '("01"[dep.CUSTOM1) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM1", vRM) quit
		if '("01"[dep.CUSTOM2) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM2", vRM) quit
		if '("01"[dep.CUSTOM3) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM3", vRM) quit
		if '("01"[dep.EMPLBEN) set vRM=$$^MSG(742,"L") do vdderr("EMPLBEN", vRM) quit
		set X = dep.emplno if 'X.isNull(),'Db.isDefined("UTBLEMPLOYER","X") set vRM = $$^MSG(1485,X) do vdderr("EMPLNO", vRM) quit
		if dep.feepln.length()>5 set vRM = $$^MSG(1076,5) do vdderr("FEEPLN", vRM) quit
		set X = dep.fldstaff if 'X.isNull(),'Db.isDefined("UTBLFLDSTAFF","X") set vRM = $$^MSG(1485,X) do vdderr("FLDSTAFF", vRM) quit
		set X = dep.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
		set X = dep.grp if 'X.isNull(),'Db.isDefined("STBLGRP","CLS=""D"",GRP=:X") set vRM = $$^MSG(1485,X) do vdderr("GRP", vRM) quit
		if '("01"[dep.HIGHVOL) set vRM=$$^MSG(742,"L") do vdderr("HIGHVOL", vRM) quit
		if dep.lnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNM", vRM) quit
		set X = dep.mf if 'X.isNull(),'Db.isDefined("UTBLMF","X") set vRM = $$^MSG(1485,X) do vdderr("MF", vRM) quit
		if '("01"[dep.OID) set vRM=$$^MSG(742,"L") do vdderr("OID", vRM) quit
		set X = dep.pers if 'X.isNull(),'Db.isDefined("STBLPERS","X") set vRM = $$^MSG(1485,X) do vdderr("PERS", vRM) quit
		if '("01"[dep.REGCC) set vRM=$$^MSG(742,"L") do vdderr("REGCC", vRM) quit
		set X = dep.regccexc if 'X.isNull(),'Db.isDefined("STBLREGCCX","X") set vRM = $$^MSG(1485,X) do vdderr("REGCCEXC", vRM) quit
		set X = dep.regccexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REGCCEXP", vRM) quit
		set X = dep.regd if 'X.isNull(),'Db.isDefined("STBLREGD1","X") set vRM = $$^MSG(1485,X) do vdderr("REGD", vRM) quit
		set X = dep.secgrp if 'X.isNull(),'Db.isDefined("UTBLSECGRP","X") set vRM = $$^MSG(1485,X) do vdderr("SECGRP", vRM) quit
		set X = dep.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	}

	if vobj(dep,51).exists() do {

		if '("01"[dep.ADF) set vRM=$$^MSG(742,"L") do vdderr("ADF", vRM) quit
		if '("01"[dep.ARS) set vRM=$$^MSG(742,"L") do vdderr("ARS", vRM) quit
		set X = dep.bal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.balavlcode if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("BALAVLCODE", vRM) quit
		set X = dep.balcol if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BALCOL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ccld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CCLD", vRM) quit
		set X = dep.chkhld if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CHKHLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cntcr if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CNTCR", vRM) quit
		set X = dep.cntdr if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CNTDR", vRM) quit
		if '("01"[dep.COLELG) set vRM=$$^MSG(742,"L") do vdderr("COLELG", vRM) quit
		set X = dep.dclrsk if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DCLRSK"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.donrsk if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DONRSK"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.flttbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("FLTTBL", vRM) quit
		set X = dep.fmld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FMLD", vRM) quit
		set X = dep.gcrrsk if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.GCRRSK"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.hldtbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("HLDTBL", vRM) quit
		set X = dep.intavl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTAVL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intavlncr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTAVLNCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intprior if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTPRIOR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ira if 'X.isNull(),'Db.isDefined("UTBLRSPDEF","X") set vRM = $$^MSG(1485,X) do vdderr("IRA", vRM) quit
		if '("01"[dep.LPDUE) set vRM=$$^MSG(742,"L") do vdderr("LPDUE", vRM) quit
		if '("01"[dep.LPSWP) set vRM=$$^MSG(742,"L") do vdderr("LPSWP", vRM) quit
		set X = dep.netdep if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NETDEP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.notdat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NOTDAT", vRM) quit
		if '("01"[dep.ODSI) set vRM=$$^MSG(742,"L") do vdderr("ODSI", vRM) quit
		if '("01"[dep.PBI) set vRM=$$^MSG(742,"L") do vdderr("PBI", vRM) quit
		if '("01"[dep.PHLD) set vRM=$$^MSG(742,"L") do vdderr("PHLD", vRM) quit
		if '("01"[dep.PLDG) set vRM=$$^MSG(742,"L") do vdderr("PLDG", vRM) quit
		if '("01"[dep.RFLG) set vRM=$$^MSG(742,"L") do vdderr("RFLG", vRM) quit
		set X = dep.rpaseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RPASEQ", vRM) quit
		set X = dep.rskopt if 'X.isNull(),'Db.isDefined("STBLRSKOPT","X") set vRM = $$^MSG(1485,X) do vdderr("RSKOPT", vRM) quit
		if dep.rskpln.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RSKPLN", vRM) quit
		set X = dep.sdavl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SDAVL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.secrsk if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SECRSK"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.secval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SECVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.stat if 'X.isNull(),'Db.isDefined("STBLSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
		set X = dep.stfnet if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.STFNET"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.stp.length()>40 set vRM = $$^MSG(1076,40) do vdderr("STP", vRM) quit
		set X = dep.stp1 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP1", vRM) quit
		set X = dep.stp2 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP2", vRM) quit
		set X = dep.stp3 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP3", vRM) quit
		set X = dep.stp4 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP4", vRM) quit
		set X = dep.stp5 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP5", vRM) quit
		set X = dep.stp6 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP6", vRM) quit
		set X = dep.stp7 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP7", vRM) quit
		set X = dep.stp8 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP8", vRM) quit
		set X = dep.stp9 if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STP9", vRM) quit
		set X = dep.tld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TLD", vRM) quit
	}

	if vobj(dep,52).exists() do {

		set X = dep.boo if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BOO", vRM) quit
		if dep.convacn.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CONVACN", vRM) quit
		set X = dep.convawt if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVAWT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.convbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.convcmp if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVCMP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.convdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CONVDT", vRM) quit
		set X = dep.convna if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVNA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.convnau if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVNAU"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.convpa if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVPA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.convua if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVUA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dtc if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTC", vRM) quit
		set X = dep.hisctf if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("HISCTF", vRM) quit
		if '("01"[dep.IRAEXC) set vRM=$$^MSG(742,"L") do vdderr("IRAEXC", vRM) quit
		set X = dep.iro if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IRO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxfta if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXFTA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxftd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXFTD", vRM) quit
		set X = dep.odt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODT", vRM) quit
		set X = dep.off if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("OFF", vRM) quit
		set X = dep.off2 if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("OFF2", vRM) quit
		set X = dep.onp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ONP", vRM) quit
		if dep.osf.length()>30 set vRM = $$^MSG(1076,30) do vdderr("OSF", vRM) quit
		if dep.pid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PID", vRM) quit
		if dep.refnum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("REFNUM", vRM) quit
		set X = dep.rescd if 'X.isNull(),'Db.isDefined("UTBLRESCD","X") set vRM = $$^MSG(1485,X) do vdderr("RESCD", vRM) quit
		if '("01"[dep.TRUNC) set vRM=$$^MSG(742,"L") do vdderr("TRUNC", vRM) quit
	}

	if vobj(dep,53).exists() do {

		set X = dep.busopt if 'X.isNull(),'Db.isDefined("STBLBUSOPT","X") set vRM = $$^MSG(1485,X) do vdderr("BUSOPT", vRM) quit
		set X = dep.dftmdt if 'X.isNull(),'Db.isDefined("UTBLDFT1","DFTTYP=""MDT"",DFTGRP=:X") set vRM = $$^MSG(1485,X) do vdderr("DFTMDT", vRM) quit
		set X = dep.dlr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLR", vRM) quit
		set X = dep.ero if 'X.isNull(),'Db.isDefined("STBLERO","X") set vRM = $$^MSG(1485,X) do vdderr("ERO", vRM) quit
		set X = dep.gopt if 'X.isNull(),'Db.isDefined("STBLGOPT","X") set vRM = $$^MSG(1485,X) do vdderr("GOPT", vRM) quit
		set X = dep.intavlr if 'X.isNull(),'Db.isDefined("STBLINTAVLR","X") set vRM = $$^MSG(1485,X) do vdderr("INTAVLR", vRM) quit
		set X = dep.irlm if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IRLM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDT", vRM) quit
		if '("01"[dep.MDTEXT) set vRM=$$^MSG(742,"L") do vdderr("MDTEXT", vRM) quit
		set X = dep.mld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MLD", vRM) quit
		set X = dep.nbdc if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("NBDC", vRM) quit
		set X = dep.ntr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NTR", vRM) quit
		set X = dep.org if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ORG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.orgdisc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ORGDISC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmedat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PMEDAT", vRM) quit
		set X = dep.pmo if 'X.isNull(),'Db.isDefined("STBLPMO","X") set vRM = $$^MSG(1485,X) do vdderr("PMO", vRM) quit
		set X = dep.racn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RACN", vRM) quit
		set X = dep.rencd if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("RENCD", vRM) quit
		set X = dep.rro if 'X.isNull(),'Db.isDefined("STBLRRO","X") set vRM = $$^MSG(1485,X) do vdderr("RRO", vRM) quit
		set X = dep.salesprc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SALESPRC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.trm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRM", vRM) quit
	}

	if vobj(dep,54).exists() do {

		set X = dep.acs if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACS", vRM) quit
		if dep.aecamt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AECAMT", vRM) quit
		set X = dep.bnot1dt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BNOT1DT", vRM) quit
		set X = dep.bnot2dt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BNOT2DT", vRM) quit
		if '("01"[dep.BWF) set vRM=$$^MSG(742,"L") do vdderr("BWF", vRM) quit
		set X = dep.bwp if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BWP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.bwy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BWY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cmp if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CMP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cmp1 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CMP1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cmp2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CMP2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cmp3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CMP3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cmp4 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CMP4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cnotdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CNOTDT", vRM) quit
		set X = dep.daa if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.daa1 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAA1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.daa2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAA2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.daa3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAA3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.daa4 if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAA4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dbi if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DBI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dbi1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DBI1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dbi2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DBI2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dbi3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DBI3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dbi4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DBI4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.fwp if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.FWP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.fwy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.FWY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.hirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.HIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intchk if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("INTCHK", vRM) quit
		set X = dep.intdef if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTDEF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intwcalc if 'X.isNull(),'Db.isDefined("UTBLWCALC","X") set vRM = $$^MSG(1485,X) do vdderr("INTWCALC", vRM) quit
		set X = dep.intwr if 'X.isNull(),'Db.isDefined("UTBLINTWR","X") set vRM = $$^MSG(1485,X) do vdderr("INTWR", vRM) quit
		set X = dep.iopt if 'X.isNull(),'Db.isDefined("STBLIOPT","X") set vRM = $$^MSG(1485,X) do vdderr("IOPT", vRM) quit
		set X = dep.ipda if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipdaadj if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPDAADJ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipdtrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPDTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipnd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPND"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipy if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.itrf if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ITRF", vRM) quit
		set X = dep.itro if 'X.isNull(),'Db.isDefined("STBLITROCAN","X") set vRM = $$^MSG(1485,X) do vdderr("ITRO", vRM) quit
		if '("01"[dep.IWCP) set vRM=$$^MSG(742,"L") do vdderr("IWCP", vRM) quit
		set X = dep.iytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbacrdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LBACRDT", vRM) quit
		if dep.lifjur.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LIFJUR", vRM) quit
		set X = dep.minavg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MINAVG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.minint if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MININT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negacrun if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGACRUN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negipy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGIPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negiytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGIYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.NR) set vRM=$$^MSG(742,"L") do vdderr("NR", vRM) quit
		set X = dep.nrnegicy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRNEGICY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrnegipy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRNEGIPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrpcy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPCY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrposicy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPOSICY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrposipy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPOSIPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwacy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWACY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwapy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWAPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwhcy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWHCY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwhpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWHPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.posacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.POSACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.probal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PROBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.proind if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("PROIND", vRM) quit
		if dep.promat.length()>7 set vRM = $$^MSG(1076,7) do vdderr("PROMAT", vRM) quit
		if dep.prornd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("PRORND", vRM) quit
		if dep.prospr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("PROSPR", vRM) quit
		set X = dep.resint if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RESINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.swp if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.swy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.trate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.trexd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TREXD", vRM) quit
	}

	if vobj(dep,55).exists() do {

		set X = dep.darcexpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DARCEXPD", vRM) quit
		set X = dep.darcls if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DARCLS", vRM) quit
		set X = dep.darcovr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DARCOVR", vRM) quit
		set X = dep.penpw if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PENPW"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pindex if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("PINDEX", vRM) quit
		set X = dep.pint if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.PIPW) set vRM=$$^MSG(742,"L") do vdderr("PIPW", vRM) quit
		set X = dep.ppl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.prate if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.prm if 'X.isNull(),'Db.isDefined("STBLPRM","X") set vRM = $$^MSG(1485,X) do vdderr("PRM", vRM) quit
		set X = dep.prs if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("PRS", vRM) quit
		set X = dep.pthresh if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PTHRESH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pxd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PXD", vRM) quit
		if dep.pxtrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PXTRM", vRM) quit
		set X = dep.pytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.suspect if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("SUSPECT", vRM) quit
	}

	if vobj(dep,57).exists() do {

		set X = dep.eod if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EOD", vRM) quit
		set X = dep.ichld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHLD", vRM) quit
		set X = dep.ichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHND", vRM) quit
		set X = dep.icpf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]ICPF",0) if 'vRM.get().isNull() do vdderr("ICPF", vRM) quit
		set X = dep.ilc if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ILC", vRM) quit
		set X = dep.inc if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INC", vRM) quit
		set X = dep.inp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INP", vRM) quit
		set X = dep.intaf if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTAF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intmn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTMN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intmx if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTMX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intramt1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTRAMT1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intramt2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTRAMT2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intramt3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTRAMT3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intrexp1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INTREXP1", vRM) quit
		set X = dep.intrexp2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INTREXP2", vRM) quit
		set X = dep.intrexp3 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INTREXP3", vRM) quit
		set X = dep.intrrat1 if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTRRAT1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intrrat2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTRRAT2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intrrat3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTRRAT3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("IPLD", vRM) quit
		set X = dep.irf if 'X.isNull(),'Db.isDefined("STBLIRF","X") set vRM = $$^MSG(1485,X) do vdderr("IRF", vRM) quit
		set X = dep.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.irsexm if 'X.isNull(),'Db.isDefined("STBLIRS1099","X") set vRM = $$^MSG(1485,X) do vdderr("IRSEXM", vRM) quit
		set X = dep.neginp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGINP", vRM) quit
		set X = dep.negipld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGIPLD", vRM) quit
		set X = dep.sch if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("SCH", vRM) quit
		if '("01"[dep.SEGFLG) set vRM=$$^MSG(742,"L") do vdderr("SEGFLG", vRM) quit
	}

	if vobj(dep,60).exists() do {

		if dep.compirn.length()>10 set vRM = $$^MSG(1076,10) do vdderr("COMPIRN", vRM) quit
		set X = dep.deldt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DELDT", vRM) quit
		set X = dep.index if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX", vRM) quit
		set X = dep.index1 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX1", vRM) quit
		set X = dep.index10 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX10", vRM) quit
		set X = dep.index2 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX2", vRM) quit
		set X = dep.index3 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX3", vRM) quit
		set X = dep.index4 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX4", vRM) quit
		set X = dep.index5 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX5", vRM) quit
		set X = dep.index6 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX6", vRM) quit
		set X = dep.index7 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX7", vRM) quit
		set X = dep.index8 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX8", vRM) quit
		set X = dep.index9 if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX9", vRM) quit
		set X = dep.intchkbkt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTCHKBKT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intchkfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]INTCHKFRE",0) if 'vRM.get().isNull() do vdderr("INTCHKFRE", vRM) quit
		set X = dep.intchkld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INTCHKLD", vRM) quit
		set X = dep.intchkmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTCHKMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intchknd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INTCHKND", vRM) quit
		set X = dep.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
		set X = dep.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
		set X = dep.intmxdc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTMXDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intmxdl if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTMXDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intmxic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTMXIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intmxil if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INTMXIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.intoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("INTOFF", vRM) quit
		if dep.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
		set X = dep.ipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]IPF",0) if 'vRM.get().isNull() do vdderr("IPF", vRM) quit
		set X = dep.negipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]NEGIPF",0) if 'vRM.get().isNull() do vdderr("NEGIPF", vRM) quit
		set X = dep.odexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODEXP", vRM) quit
		set X = dep.odlim if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,"0.00",,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ODLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.odstart if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODSTART", vRM) quit
		if dep.odterm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ODTERM", vRM) quit
		set X = dep.pmxddc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXDDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxddl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXDDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxdic if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXDIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxdil if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXDIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxpdc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXPDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxpdl if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXPDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxpic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXPIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pmxpil if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PMXPIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.prcb if 'X.isNull(),'Db.isDefined("STBLPRCB","X") set vRM = $$^MSG(1485,X) do vdderr("PRCB", vRM) quit
		if dep.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
		if dep.trmmx.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRMMX", vRM) quit
	}

	if vobj(dep,61).exists() do {

		if '("01"[dep.CHKACTF) set vRM=$$^MSG(742,"L") do vdderr("CHKACTF", vRM) quit
		set X = dep.chkcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CHKCNT", vRM) quit
		if '("01"[dep.CHKEURO) set vRM=$$^MSG(742,"L") do vdderr("CHKEURO", vRM) quit
		if '("01"[dep.CHKISS) set vRM=$$^MSG(742,"L") do vdderr("CHKISS", vRM) quit
		set X = dep.chkout if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CHKOUT", vRM) quit
		set X = dep.chks if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKS", vRM) quit
		set X = dep.fltd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD1", vRM) quit
		set X = dep.fltd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD2", vRM) quit
		set X = dep.fltd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD3", vRM) quit
		set X = dep.fltd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD4", vRM) quit
		set X = dep.fltd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD5", vRM) quit
		set X = dep.fltp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP1", vRM) quit
		set X = dep.fltp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP2", vRM) quit
		set X = dep.fltp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP3", vRM) quit
		set X = dep.fltp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP4", vRM) quit
		set X = dep.fltp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP5", vRM) quit
		set X = dep.hldd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD1", vRM) quit
		set X = dep.hldd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD2", vRM) quit
		set X = dep.hldd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD3", vRM) quit
		set X = dep.hldd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD4", vRM) quit
		set X = dep.hldd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD5", vRM) quit
		set X = dep.hldp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP1", vRM) quit
		set X = dep.hldp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP2", vRM) quit
		set X = dep.hldp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP3", vRM) quit
		set X = dep.hldp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP4", vRM) quit
		set X = dep.hldp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP5", vRM) quit
		set X = dep.lecn if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("LECN", vRM) quit
		set X = dep.lscn if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("LSCN", vRM) quit
		set X = dep.nscn if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("NSCN", vRM) quit
	}

	if vobj(dep,62).exists() do {

		if '("01"[dep.ACTIBPAY) set vRM=$$^MSG(742,"L") do vdderr("ACTIBPAY", vRM) quit
		set X = dep.cnfld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CNFLD", vRM) quit
		set X = dep.commefd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("COMMEFD", vRM) quit
		set X = dep.commfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.COMMFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.EFTDD) set vRM=$$^MSG(742,"L") do vdderr("EFTDD", vRM) quit
		if '("01"[dep.EFTDEB) set vRM=$$^MSG(742,"L") do vdderr("EFTDEB", vRM) quit
		if '("01"[dep.EFTREQ) set vRM=$$^MSG(742,"L") do vdderr("EFTREQ", vRM) quit
		if '("01"[dep.ELIGBPAY) set vRM=$$^MSG(742,"L") do vdderr("ELIGBPAY", vRM) quit
		set X = dep.feeopt if 'X.isNull(),'Db.isDefined("STBLFEEF","X") set vRM = $$^MSG(1485,X) do vdderr("FEEOPT", vRM) quit
		set X = dep.feewvd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FEEWVD", vRM) quit
		set X = dep.ftrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.FTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxtrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mintrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MINTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.otrtrf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.OTRTRF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.scfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]SCFRE",0) if 'vRM.get().isNull() do vdderr("SCFRE", vRM) quit
		set X = dep.scld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCLD", vRM) quit
		set X = dep.scnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCND", vRM) quit
		if '("01"[dep.SMET) set vRM=$$^MSG(742,"L") do vdderr("SMET", vRM) quit
		if dep.stmdscd.length()>30 set vRM = $$^MSG(1076,30) do vdderr("STMDSCD", vRM) quit
		set X = dep.svcfeecid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SVCFEECID", vRM) quit
		set X = dep.swpbo if 'X.isNull(),'Db.isDefined("STBLBBO","X") set vRM = $$^MSG(1485,X) do vdderr("SWPBO", vRM) quit
		set X = dep.swpf if 'X.isNull(),'Db.isDefined("STBLSWPF","X") set vRM = $$^MSG(1485,X) do vdderr("SWPF", vRM) quit
		set X = dep.swpile if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWPILE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.SWPNI) set vRM=$$^MSG(742,"L") do vdderr("SWPNI", vRM) quit
		set X = dep.swpopt if 'X.isNull(),'Db.isDefined("STBLSWPO","X") set vRM = $$^MSG(1485,X) do vdderr("SWPOPT", vRM) quit
		set X = dep.swppln if 'X.isNull(),'Db.isDefined("UTBLINVPLN","X") set vRM = $$^MSG(1485,X) do vdderr("SWPPLN", vRM) quit
		set X = dep.swpt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWPT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,63).exists() do {

		set X = dep.anlacm if 'X.isNull(),'Db.isDefined("STBLIACM","X") set vRM = $$^MSG(1485,X) do vdderr("ANLACM", vRM) quit
		set X = dep.anlchg if 'X.isNull(),'Db.isDefined("STBLANLC","X") set vRM = $$^MSG(1485,X) do vdderr("ANLCHG", vRM) quit
		set X = dep.anlicf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]ANLICF",0) if 'vRM.get().isNull() do vdderr("ANLICF", vRM) quit
		set X = dep.anlidx if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("ANLIDX", vRM) quit
		set X = dep.anlirf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]ANLIRF",0) if 'vRM.get().isNull() do vdderr("ANLIRF", vRM) quit
		set X = dep.anlirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ANLIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.anlmba if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ANLMBA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.anlmbo if 'X.isNull(),'Db.isDefined("STBLANLM","X") set vRM = $$^MSG(1485,X) do vdderr("ANLMBO", vRM) quit
		set X = dep.anlrcb if 'X.isNull(),'Db.isDefined("STBLANLI","X") set vRM = $$^MSG(1485,X) do vdderr("ANLRCB", vRM) quit
		set X = dep.upfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]UPFRE",0) if 'vRM.get().isNull() do vdderr("UPFRE", vRM) quit
		set X = dep.upldt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("UPLDT", vRM) quit
		set X = dep.upndt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("UPNDT", vRM) quit
		if dep.uspl.length()>5 set vRM = $$^MSG(1076,5) do vdderr("USPL", vRM) quit
	}

	if vobj(dep,65).exists() do {

		if dep.ckc.length()>10 set vRM = $$^MSG(1076,10) do vdderr("CKC", vRM) quit
		if dep.cktyp.length()>10 set vRM = $$^MSG(1076,10) do vdderr("CKTYP", vRM) quit
		set X = dep.cod if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("COD", vRM) quit
		set X = dep.nock if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("NOCK", vRM) quit
		set X = dep.scn if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SCN", vRM) quit
	}

	if vobj(dep,66).exists() do {

		set X = dep.vosdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VOSDATE", vRM) quit
		if '("01"[dep.VOSELEC) set vRM=$$^MSG(742,"L") do vdderr("VOSELEC", vRM) quit
		set X = dep.vosfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]VOSFREQ",0) if 'vRM.get().isNull() do vdderr("VOSFREQ", vRM) quit
		set X = dep.vosnsdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VOSNSDT", vRM) quit
		set X = dep.vosnum if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("VOSNUM", vRM) quit
		if '("01"[dep.VOSSTMT) set vRM=$$^MSG(742,"L") do vdderr("VOSSTMT", vRM) quit
		if '("01"[dep.VOSTRO) set vRM=$$^MSG(742,"L") do vdderr("VOSTRO", vRM) quit
	}

	if vobj(dep,67).exists() do {

		set X = dep.ddbal1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal10 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL10"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal11 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL11"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal12 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL12"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal6 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL6"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal7 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL7"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal8 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL8"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbal9 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBAL9"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ddbalcur if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DDBALCUR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,68).exists() do {

		set X = dep.mebal1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal10 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL10"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal11 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL11"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal12 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL12"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal6 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL6"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal7 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL7"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal8 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL8"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.mebal9 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MEBAL9"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef10 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF10"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef6 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF6"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef7 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF7"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef8 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF8"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.usrdef9 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.USRDEF9"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,70).exists() do {

		if '("01"[dep.CMSFLG) set vRM=$$^MSG(742,"L") do vdderr("CMSFLG", vRM) quit
	}

	if vobj(dep,90).exists() do {

		set X = dep.dci if 'X.isNull(),'Db.isDefined("STBLDCI","X") set vRM = $$^MSG(1485,X) do vdderr("DCI", vRM) quit
		if dep.treascid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TREASCID", vRM) quit
	}

	if vobj(dep,98).exists() do {

		set X = dep.corre if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("CORRE", vRM) quit
		if dep.correacn.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CORREACN", vRM) quit
	}

	if vobj(dep,99).exists() do {

		set X = dep.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
		if dep.acnrelc.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ACNRELC", vRM) quit
		if dep.aplid.length()>25 set vRM = $$^MSG(1076,25) do vdderr("APLID", vRM) quit
	}

	if vobj(dep,100).exists() do {

		set X = dep.mmda1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MMDA1", vRM) quit
		set X = dep.mmda2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MMDA2", vRM) quit
		set X = dep.mmda3 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MMDA3", vRM) quit
		set X = dep.mmda4 if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]MMDA4",0) if 'vRM.get().isNull() do vdderr("MMDA4", vRM) quit
		if '("01"[dep.MMDACNV) set vRM=$$^MSG(742,"L") do vdderr("MMDACNV", vRM) quit
		set X = dep.mmdacnvtyp if 'X.isNull(),'Db.isDefined("PRODDFTD","X") set vRM = $$^MSG(1485,X) do vdderr("MMDACNVTYP", vRM) quit
		set X = dep.mmdaptc if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MMDAPTC", vRM) quit
		set X = dep.nbodplm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NBODPLM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nsflim if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NSFLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nsfold if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NSFOLD", vRM) quit
		set X = dep.ntodplm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NTODPLM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.odbb if 'X.isNull(),'Db.isDefined("STBLODBB","X") set vRM = $$^MSG(1485,X) do vdderr("ODBB", vRM) quit
		if '("01"[dep.ODFLG) set vRM=$$^MSG(742,"L") do vdderr("ODFLG", vRM) quit
		set X = dep.odld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODLD", vRM) quit
		set X = dep.odsbb if 'X.isNull(),'Db.isDefined("STBLODBB","X") set vRM = $$^MSG(1485,X) do vdderr("ODSBB", vRM) quit
		set X = dep.rc if 'X.isNull(),'Db.isDefined("STBLRC","X") set vRM = $$^MSG(1485,X) do vdderr("RC", vRM) quit
		set X = dep.retold if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RETOLD", vRM) quit
		set X = dep.wcc if 'X.isNull(),'Db.isDefined("STBLWCC","X") set vRM = $$^MSG(1485,X) do vdderr("WCC", vRM) quit
	}

	if vobj(dep,103).exists() do {

		set X = dep.nsfi1 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI1", vRM) quit
		set X = dep.nsfi10 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI10", vRM) quit
		set X = dep.nsfi11 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI11", vRM) quit
		set X = dep.nsfi12 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI12", vRM) quit
		set X = dep.nsfi13 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI13", vRM) quit
		set X = dep.nsfi14 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI14", vRM) quit
		set X = dep.nsfi15 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI15", vRM) quit
		set X = dep.nsfi16 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI16", vRM) quit
		set X = dep.nsfi17 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI17", vRM) quit
		set X = dep.nsfi18 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI18", vRM) quit
		set X = dep.nsfi19 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI19", vRM) quit
		set X = dep.nsfi2 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI2", vRM) quit
		set X = dep.nsfi20 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI20", vRM) quit
		set X = dep.nsfi21 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI21", vRM) quit
		set X = dep.nsfi22 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI22", vRM) quit
		set X = dep.nsfi23 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI23", vRM) quit
		set X = dep.nsfi24 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI24", vRM) quit
		set X = dep.nsfi3 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI3", vRM) quit
		set X = dep.nsfi4 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI4", vRM) quit
		set X = dep.nsfi5 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI5", vRM) quit
		set X = dep.nsfi6 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI6", vRM) quit
		set X = dep.nsfi7 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI7", vRM) quit
		set X = dep.nsfi8 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI8", vRM) quit
		set X = dep.nsfi9 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NSFI9", vRM) quit
		set X = dep.nsfo1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO1", vRM) quit
		set X = dep.nsfo10 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO10", vRM) quit
		set X = dep.nsfo11 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO11", vRM) quit
		set X = dep.nsfo12 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO12", vRM) quit
		set X = dep.nsfo13 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO13", vRM) quit
		set X = dep.nsfo14 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO14", vRM) quit
		set X = dep.nsfo15 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO15", vRM) quit
		set X = dep.nsfo16 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO16", vRM) quit
		set X = dep.nsfo17 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO17", vRM) quit
		set X = dep.nsfo18 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO18", vRM) quit
		set X = dep.nsfo19 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO19", vRM) quit
		set X = dep.nsfo2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO2", vRM) quit
		set X = dep.nsfo20 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO20", vRM) quit
		set X = dep.nsfo21 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO21", vRM) quit
		set X = dep.nsfo22 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO22", vRM) quit
		set X = dep.nsfo23 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO23", vRM) quit
		set X = dep.nsfo24 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO24", vRM) quit
		set X = dep.nsfo3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO3", vRM) quit
		set X = dep.nsfo4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO4", vRM) quit
		set X = dep.nsfo5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO5", vRM) quit
		set X = dep.nsfo6 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO6", vRM) quit
		set X = dep.nsfo7 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO7", vRM) quit
		set X = dep.nsfo8 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO8", vRM) quit
		set X = dep.nsfo9 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSFO9", vRM) quit
	}

	if vobj(dep,104).exists() do {

		set X = dep.convnbt if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CONVNBT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negi1 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI1", vRM) quit
		set X = dep.negi10 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI10", vRM) quit
		set X = dep.negi11 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI11", vRM) quit
		set X = dep.negi12 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI12", vRM) quit
		set X = dep.negi13 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI13", vRM) quit
		set X = dep.negi14 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI14", vRM) quit
		set X = dep.negi15 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI15", vRM) quit
		set X = dep.negi16 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI16", vRM) quit
		set X = dep.negi17 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI17", vRM) quit
		set X = dep.negi18 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI18", vRM) quit
		set X = dep.negi19 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI19", vRM) quit
		set X = dep.negi2 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI2", vRM) quit
		set X = dep.negi20 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI20", vRM) quit
		set X = dep.negi21 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI21", vRM) quit
		set X = dep.negi22 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI22", vRM) quit
		set X = dep.negi23 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI23", vRM) quit
		set X = dep.negi24 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI24", vRM) quit
		set X = dep.negi3 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI3", vRM) quit
		set X = dep.negi4 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI4", vRM) quit
		set X = dep.negi5 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI5", vRM) quit
		set X = dep.negi6 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI6", vRM) quit
		set X = dep.negi7 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI7", vRM) quit
		set X = dep.negi8 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI8", vRM) quit
		set X = dep.negi9 if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NEGI9", vRM) quit
		set X = dep.nego1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO1", vRM) quit
		set X = dep.nego10 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO10", vRM) quit
		set X = dep.nego11 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO11", vRM) quit
		set X = dep.nego12 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO12", vRM) quit
		set X = dep.nego13 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO13", vRM) quit
		set X = dep.nego14 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO14", vRM) quit
		set X = dep.nego15 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO15", vRM) quit
		set X = dep.nego16 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO16", vRM) quit
		set X = dep.nego17 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO17", vRM) quit
		set X = dep.nego18 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO18", vRM) quit
		set X = dep.nego19 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO19", vRM) quit
		set X = dep.nego2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO2", vRM) quit
		set X = dep.nego20 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO20", vRM) quit
		set X = dep.nego21 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO21", vRM) quit
		set X = dep.nego22 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO22", vRM) quit
		set X = dep.nego23 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO23", vRM) quit
		set X = dep.nego24 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO24", vRM) quit
		set X = dep.nego3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO3", vRM) quit
		set X = dep.nego4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO4", vRM) quit
		set X = dep.nego5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO5", vRM) quit
		set X = dep.nego6 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO6", vRM) quit
		set X = dep.nego7 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO7", vRM) quit
		set X = dep.nego8 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO8", vRM) quit
		set X = dep.nego9 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NEGO9", vRM) quit
	}

	if vobj(dep,105).exists() do {

		set X = dep.reti1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI1", vRM) quit
		set X = dep.reti10 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI10", vRM) quit
		set X = dep.reti11 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI11", vRM) quit
		set X = dep.reti12 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI12", vRM) quit
		set X = dep.reti13 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI13", vRM) quit
		set X = dep.reti14 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI14", vRM) quit
		set X = dep.reti15 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI15", vRM) quit
		set X = dep.reti16 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI16", vRM) quit
		set X = dep.reti17 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI17", vRM) quit
		set X = dep.reti18 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI18", vRM) quit
		set X = dep.reti19 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI19", vRM) quit
		set X = dep.reti2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI2", vRM) quit
		set X = dep.reti20 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI20", vRM) quit
		set X = dep.reti21 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI21", vRM) quit
		set X = dep.reti22 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI22", vRM) quit
		set X = dep.reti23 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI23", vRM) quit
		set X = dep.reti24 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI24", vRM) quit
		set X = dep.reti3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI3", vRM) quit
		set X = dep.reti4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI4", vRM) quit
		set X = dep.reti5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI5", vRM) quit
		set X = dep.reti6 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI6", vRM) quit
		set X = dep.reti7 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI7", vRM) quit
		set X = dep.reti8 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI8", vRM) quit
		set X = dep.reti9 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETI9", vRM) quit
		set X = dep.reto1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO1", vRM) quit
		set X = dep.reto10 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO10", vRM) quit
		set X = dep.reto11 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO11", vRM) quit
		set X = dep.reto12 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO12", vRM) quit
		set X = dep.reto13 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO13", vRM) quit
		set X = dep.reto14 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO14", vRM) quit
		set X = dep.reto15 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO15", vRM) quit
		set X = dep.reto16 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO16", vRM) quit
		set X = dep.reto17 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO17", vRM) quit
		set X = dep.reto18 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO18", vRM) quit
		set X = dep.reto19 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO19", vRM) quit
		set X = dep.reto2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO2", vRM) quit
		set X = dep.reto20 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO20", vRM) quit
		set X = dep.reto21 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO21", vRM) quit
		set X = dep.reto22 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO22", vRM) quit
		set X = dep.reto23 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO23", vRM) quit
		set X = dep.reto24 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO24", vRM) quit
		set X = dep.reto3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO3", vRM) quit
		set X = dep.reto4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO4", vRM) quit
		set X = dep.reto5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO5", vRM) quit
		set X = dep.reto6 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO6", vRM) quit
		set X = dep.reto7 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO7", vRM) quit
		set X = dep.reto8 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO8", vRM) quit
		set X = dep.reto9 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RETO9", vRM) quit
	}

	if vobj(dep,106).exists() do {

		set X = dep.negbd1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD1", vRM) quit
		set X = dep.negbd10 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD10", vRM) quit
		set X = dep.negbd11 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD11", vRM) quit
		set X = dep.negbd12 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD12", vRM) quit
		set X = dep.negbd13 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD13", vRM) quit
		set X = dep.negbd14 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD14", vRM) quit
		set X = dep.negbd15 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD15", vRM) quit
		set X = dep.negbd2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD2", vRM) quit
		set X = dep.negbd3 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD3", vRM) quit
		set X = dep.negbd4 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD4", vRM) quit
		set X = dep.negbd5 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD5", vRM) quit
		set X = dep.negbd6 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD6", vRM) quit
		set X = dep.negbd7 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD7", vRM) quit
		set X = dep.negbd8 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD8", vRM) quit
		set X = dep.negbd9 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEGBD9", vRM) quit
	}

	if vobj(dep,107).exists() do {

		set X = dep.balfwd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BALFWD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.bgtcontr if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]BGTCONTR",0) if 'vRM.get().isNull() do vdderr("BGTCONTR", vRM) quit
		set X = dep.bgtfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]BGTFREQ",0) if 'vRM.get().isNull() do vdderr("BGTFREQ", vRM) quit
		set X = dep.bgtlcdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BGTLCDT", vRM) quit
		set X = dep.bgtncdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BGTNCDT", vRM) quit
		set X = dep.bgtoffst if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("BGTOFFST", vRM) quit
		if '("01"[dep.BGTPRO) set vRM=$$^MSG(742,"L") do vdderr("BGTPRO", vRM) quit
		set X = dep.bgtrvudt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BGTRVUDT", vRM) quit
		set X = dep.bgtyrnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BGTYRND", vRM) quit
		set X = dep.bgtyrsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BGTYRSD", vRM) quit
		set X = dep.colcdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("COLCDTE", vRM) quit
		set X = dep.nsfd1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NSFD1", vRM) quit
		set X = dep.nsfd2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NSFD2", vRM) quit
		set X = dep.pcollst if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PCOLLST", vRM) quit
		set X = dep.promamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PROMAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.prombrd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMBRD", vRM) quit
		set X = dep.prommd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMMD", vRM) quit
		set X = dep.promsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMSD", vRM) quit
	}

	if vobj(dep,108).exists() do {

		set X = dep.mmdac1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC1", vRM) quit
		set X = dep.mmdac10 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC10", vRM) quit
		set X = dep.mmdac11 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC11", vRM) quit
		set X = dep.mmdac12 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC12", vRM) quit
		set X = dep.mmdac2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC2", vRM) quit
		set X = dep.mmdac3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC3", vRM) quit
		set X = dep.mmdac4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC4", vRM) quit
		set X = dep.mmdac5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC5", vRM) quit
		set X = dep.mmdac6 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC6", vRM) quit
		set X = dep.mmdac7 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC7", vRM) quit
		set X = dep.mmdac8 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC8", vRM) quit
		set X = dep.mmdac9 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAC9", vRM) quit
		set X = dep.mmdat1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT1", vRM) quit
		set X = dep.mmdat10 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT10", vRM) quit
		set X = dep.mmdat11 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT11", vRM) quit
		set X = dep.mmdat12 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT12", vRM) quit
		set X = dep.mmdat2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT2", vRM) quit
		set X = dep.mmdat3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT3", vRM) quit
		set X = dep.mmdat4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT4", vRM) quit
		set X = dep.mmdat5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT5", vRM) quit
		set X = dep.mmdat6 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT6", vRM) quit
		set X = dep.mmdat7 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT7", vRM) quit
		set X = dep.mmdat8 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT8", vRM) quit
		set X = dep.mmdat9 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MMDAT9", vRM) quit
	}

	if vobj(dep,111).exists() do {

		set X = dep.calacls if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CALACLS", vRM) quit
		set X = dep.provbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PROVBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.provcat if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PROVCAT", vRM) quit
		set X = dep.provexpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROVEXPD", vRM) quit
		set X = dep.provoamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PROVOAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.provopct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PROVOPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.racovr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RACOVR", vRM) quit
		set X = dep.whexr if 'X.isNull(),'Db.isDefined("STBLEXR","X") set vRM = $$^MSG(1485,X) do vdderr("WHEXR", vRM) quit
	}

	if vobj(dep,114).exists() do {

		set X = dep.cusha if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CUSHA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cushf if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,9) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CUSHF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cusho if 'X.isNull(),'Db.isDefined("STBLCUSHO","X") set vRM = $$^MSG(1485,X) do vdderr("CUSHO", vRM) quit
		set X = dep.ddmg if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("DDMG", vRM) quit
		set X = dep.ddml if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("DDML", vRM) quit
		set X = dep.dfda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DFDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.oda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ODA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.odmg if 'X.isNull(),'Db.isDefined("STBLODM","X") set vRM = $$^MSG(1485,X) do vdderr("ODMG", vRM) quit
		set X = dep.odml if 'X.isNull(),'Db.isDefined("STBLODM","X") set vRM = $$^MSG(1485,X) do vdderr("ODML", vRM) quit
		set X = dep.sda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.sdmg if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("SDMG", vRM) quit
		set X = dep.sdml if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("SDML", vRM) quit
		set X = dep.sdo if 'X.isNull(),'Db.isDefined("STBLSDO","X") set vRM = $$^MSG(1485,X) do vdderr("SDO", vRM) quit
	}

	if vobj(dep,115).exists() do {

		if '("01"[dep.SHAREACCT) set vRM=$$^MSG(742,"L") do vdderr("SHAREACCT", vRM) quit
	}

	if vobj(dep,210).exists() do {

		set X = dep.abmc if 'X.isNull(),'Db.isDefined("STBLABMC","X") set vRM = $$^MSG(1485,X) do vdderr("ABMC", vRM) quit
		set X = dep.andt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ANDT", vRM) quit
		if '("01"[dep.ANFLG) set vRM=$$^MSG(742,"L") do vdderr("ANFLG", vRM) quit
		set X = dep.anpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ANPDT", vRM) quit
		set X = dep.aref if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("AREF", vRM) quit
		if '("01"[dep.AUBBF) set vRM=$$^MSG(742,"L") do vdderr("AUBBF", vRM) quit
		set X = dep.aubcu if 'X.isNull(),'Db.isDefined("UTBLECT","X") set vRM = $$^MSG(1485,X) do vdderr("AUBCU", vRM) quit
		set X = dep.autaf if 'X.isNull(),'Db.isDefined("STBLAUO","X") set vRM = $$^MSG(1485,X) do vdderr("AUTAF", vRM) quit
		set X = dep.clamo if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CLAMO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.curramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CURRAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.esc.length()>6 set vRM = $$^MSG(1076,6) do vdderr("ESC", vRM) quit
		set X = dep.odeao if 'X.isNull(),'Db.isDefined("STBLAUO","X") set vRM = $$^MSG(1485,X) do vdderr("ODEAO", vRM) quit
		set X = dep.recamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RECAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.remtot if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.REMTOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.SPF) set vRM=$$^MSG(742,"L") do vdderr("SPF", vRM) quit
	}

	if vobj(dep,300).exists() do {

		set X = dep.pbkbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PBKBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pbkld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PBKLD", vRM) quit
		set X = dep.pbklin if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PBKLIN", vRM) quit
		set X = dep.pbkseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("PBKSEQ", vRM) quit
		set X = dep.pbksn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PBKSN", vRM) quit
	}

	if vobj(dep,400).exists() do {

		set X = dep.lbbdo if 'X.isNull(),'Db.isDefined("STBLLBBDO","X") set vRM = $$^MSG(1485,X) do vdderr("LBBDO", vRM) quit
		set X = dep.lbcm if 'X.isNull(),'Db.isDefined("STBLLBCM","X") set vRM = $$^MSG(1485,X) do vdderr("LBCM", vRM) quit
		set X = dep.lbcp if 'X.isNull(),'Db.isDefined("STBLLBCP","X") set vRM = $$^MSG(1485,X) do vdderr("LBCP", vRM) quit
		set X = dep.lbgpna if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LBGPNA", vRM) quit
	}

	if vobj(dep,402).exists() do {

		set X = dep.lbb10mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB10MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb11mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB11MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb12mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB12MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb13mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB13MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb14mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB14MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb15mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB15MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb16mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB16MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb17mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB17MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb18mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB18MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb19mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB19MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb1mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB1MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb20mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB20MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb21mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB21MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb22mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB22MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb23mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB23MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb2mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB2MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb3mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB3MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb4mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB4MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb5mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB5MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb6mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB6MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb7mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB7MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb8mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB8MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbb9mp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBB9MP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lbbcm if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LBBCM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,404).exists() do {

		set X = dep.sswlim if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SSWLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,425).exists() do {

		set X = dep.ithlddays if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ITHLDDAYS", vRM) quit
	}

	if vobj(dep,426).exists() do {

		set X = dep.cngrs if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("CNGRS", vRM) quit
		set X = dep.dscrtbl if 'X.isNull(),'Db.isDefined("UTBLGCRDS","X") set vRM = $$^MSG(1485,X) do vdderr("DSCRTBL", vRM) quit
		set X = dep.dsopt if 'X.isNull(),'Db.isDefined("STBLDSOPT","X") set vRM = $$^MSG(1485,X) do vdderr("DSOPT", vRM) quit
		set X = dep.gcrcd if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("GCRCD", vRM) quit
		set X = dep.gcrcv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.GCRCV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.GCRDOD) set vRM=$$^MSG(742,"L") do vdderr("GCRDOD", vRM) quit
		set X = dep.gcrlmnt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("GCRLMNT", vRM) quit
		set X = dep.gcrpmnt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("GCRPMNT", vRM) quit
		set X = dep.gcrs if 'X.isNull(),'Db.isDefined("STBLGCROPT","X") set vRM = $$^MSG(1485,X) do vdderr("GCRS", vRM) quit
		set X = dep.gcrtfcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("GCRTFCID", vRM) quit
		set X = dep.hsovrdm if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HSOVRDM", vRM) quit
		set X = dep.inicvopt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.INICVOPT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lsdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSDATE", vRM) quit
		set X = dep.lsovrdm if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LSOVRDM", vRM) quit
		set X = dep.mscrtbl if 'X.isNull(),'Db.isDefined("UTBLGCRBALT","X") set vRM = $$^MSG(1485,X) do vdderr("MSCRTBL", vRM) quit
		set X = dep.nsdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NSDATE", vRM) quit
		set X = dep.odlimopt if 'X.isNull(),'Db.isDefined("UTBLODOPTT","X") set vRM = $$^MSG(1485,X) do vdderr("ODLIMOPT", vRM) quit
		set X = dep.origopd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ORIGOPD", vRM) quit
		set X = dep.retfcpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RETFCPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.retfcytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RETFCYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.retfwpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RETFWPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.retfwytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RETFWYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.retmxfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RETMXFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.rnamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RNAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.rnamtdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RNAMTDT", vRM) quit
		set X = dep.scrfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]SCRFREQ",0) if 'vRM.get().isNull() do vdderr("SCRFREQ", vRM) quit
		set X = dep.sddepcvr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SDDEPCVR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,427).exists() do {

		set X = dep.odcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT", vRM) quit
		set X = dep.odcnt1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT1", vRM) quit
		set X = dep.odcnt10 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT10", vRM) quit
		set X = dep.odcnt11 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT11", vRM) quit
		set X = dep.odcnt12 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT12", vRM) quit
		set X = dep.odcnt13 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT13", vRM) quit
		set X = dep.odcnt14 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT14", vRM) quit
		set X = dep.odcnt15 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT15", vRM) quit
		set X = dep.odcnt16 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT16", vRM) quit
		set X = dep.odcnt17 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT17", vRM) quit
		set X = dep.odcnt18 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT18", vRM) quit
		set X = dep.odcnt19 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT19", vRM) quit
		set X = dep.odcnt2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT2", vRM) quit
		set X = dep.odcnt20 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT20", vRM) quit
		set X = dep.odcnt21 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT21", vRM) quit
		set X = dep.odcnt22 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT22", vRM) quit
		set X = dep.odcnt23 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT23", vRM) quit
		set X = dep.odcnt24 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT24", vRM) quit
		set X = dep.odcnt25 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT25", vRM) quit
		set X = dep.odcnt26 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT26", vRM) quit
		set X = dep.odcnt27 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT27", vRM) quit
		set X = dep.odcnt28 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT28", vRM) quit
		set X = dep.odcnt29 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT29", vRM) quit
		set X = dep.odcnt3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT3", vRM) quit
		set X = dep.odcnt30 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT30", vRM) quit
		set X = dep.odcnt31 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT31", vRM) quit
		set X = dep.odcnt32 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT32", vRM) quit
		set X = dep.odcnt33 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT33", vRM) quit
		set X = dep.odcnt34 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT34", vRM) quit
		set X = dep.odcnt35 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT35", vRM) quit
		set X = dep.odcnt36 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT36", vRM) quit
		set X = dep.odcnt4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT4", vRM) quit
		set X = dep.odcnt5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT5", vRM) quit
		set X = dep.odcnt6 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT6", vRM) quit
		set X = dep.odcnt7 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT7", vRM) quit
		set X = dep.odcnt8 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT8", vRM) quit
		set X = dep.odcnt9 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ODCNT9", vRM) quit
	}

	if vobj(dep,428).exists() do {

		set X = dep.aiacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AIACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.AIACRF) set vRM=$$^MSG(742,"L") do vdderr("AIACRF", vRM) quit
		set X = dep.aiextacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("AIEXTACN", vRM) quit
		set X = dep.aiextseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("AIEXTSEQ", vRM) quit
		set X = dep.aiichld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AIICHLD", vRM) quit
		set X = dep.aiichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AIICHND", vRM) quit
		if dep.aiindex.length()>20 set vRM = $$^MSG(1076,20) do vdderr("AIINDEX", vRM) quit
		set X = dep.aiinp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AIINP", vRM) quit
		set X = dep.aiintfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]AIINTFRE",0) if 'vRM.get().isNull() do vdderr("AIINTFRE", vRM) quit
		set X = dep.aiintmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("AIINTMAT", vRM) quit
		if dep.aiintspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("AIINTSPR", vRM) quit
		set X = dep.aiinttrf if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("AIINTTRF", vRM) quit
		set X = dep.aiiopt if 'X.isNull(),'Db.isDefined("STBLIOPT","X") set vRM = $$^MSG(1485,X) do vdderr("AIIOPT", vRM) quit
		set X = dep.aiipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]AIIPF",0) if 'vRM.get().isNull() do vdderr("AIIPF", vRM) quit
		set X = dep.aiipld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AIIPLD", vRM) quit
		set X = dep.aiirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AIIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.airdet if 'X.isNull(),'Db.isDefined("STBLAIRD","X") set vRM = $$^MSG(1485,X) do vdderr("AIRDET", vRM) quit
		if dep.airndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("AIRNDMTD", vRM) quit
		set X = dep.emprytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EMPRYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.empytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EMPYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.extacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EXTACN", vRM) quit
		set X = dep.extseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("EXTSEQ", vRM) quit
		set X = dep.imo if 'X.isNull(),'Db.isDefined("STBLIMO","X") set vRM = $$^MSG(1485,X) do vdderr("IMO", vRM) quit
		set X = dep.ipimppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPIMPPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipimpytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPIMPYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipimrl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPIMRL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipinmpl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPINMPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipinmpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPINMPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipinmytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPINMYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipmpl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPMPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipmppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPMPPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipmpytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPMPYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipnmpl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPNMPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipnmppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPNMPPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipnmpytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPNMPYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxempc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXEMPC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxemprc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXEMPRC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxseg if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("MAXSEG", vRM) quit
		if '("01"[dep.OFFPROC) set vRM=$$^MSG(742,"L") do vdderr("OFFPROC", vRM) quit
		set X = dep.pengr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PENGR", vRM) quit
		set X = dep.pratio if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PRATIO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.prena if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PRENA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.segacr if 'X.isNull(),'Db.isDefined("STBLSAOP","X") set vRM = $$^MSG(1485,X) do vdderr("SEGACR", vRM) quit
		set X = dep.segmdd if 'X.isNull(),'Db.isDefined("STBLSMDO","X") set vRM = $$^MSG(1485,X) do vdderr("SEGMDD", vRM) quit
		if dep.segper.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SEGPER", vRM) quit
		set X = dep.segpopt if 'X.isNull(),'Db.isDefined("STBLSEGPOPT","X") set vRM = $$^MSG(1485,X) do vdderr("SEGPOPT", vRM) quit
		set X = dep.segzirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SEGZIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.swpi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWPI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.swri if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWRI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.taiams if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TAIAMS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.taianms if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TAIANMS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.taims if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TAIMS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.tainms if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TAINMS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.taspm if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TASPM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.taspnm if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TASPNM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.tnums if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("TNUMS", vRM) quit
		set X = dep.totwfr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TOTWFR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.tsmpb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TSMPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.tsnmpb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.TSNMPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.wdord if 'X.isNull(),'Db.isDefined("STBLWDORD","X") set vRM = $$^MSG(1485,X) do vdderr("WDORD", vRM) quit
		set X = dep.wdprio if 'X.isNull(),'Db.isDefined("STBLWDPRIOR","X") set vRM = $$^MSG(1485,X) do vdderr("WDPRIO", vRM) quit
	}

	if vobj(dep,429).exists() do {

		set X = dep.lmtatm if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LMTATM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lmtcjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LMTCJD", vRM) quit
		set X = dep.lmtpos if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LMTPOS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,430).exists() do {

		set X = dep.eurbatch if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("EURBATCH", vRM) quit
		set X = dep.eurcnvd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EURCNVD", vRM) quit
		set X = dep.eurcvinbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EURCVINBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eurefd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EUREFD", vRM) quit
		set X = dep.eureqdat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EUREQDAT", vRM) quit
		set X = dep.eurevdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EUREVDT", vRM) quit
		set X = dep.eurstat if 'X.isNull(),'Db.isDefined("STBLEURSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("EURSTAT", vRM) quit
		set X = dep.eurudrq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EURUDRQ", vRM) quit
		if dep.orgcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("ORGCRCD", vRM) quit
		if dep.orgindex.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ORGINDEX", vRM) quit
		set X = dep.orgsch if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("ORGSCH", vRM) quit
	}

	if vobj(dep,431).exists() do {

		if '("01"[dep.PAYEFT) set vRM=$$^MSG(742,"L") do vdderr("PAYEFT", vRM) quit
		set X = dep.sfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]SFRE",0) if 'vRM.get().isNull() do vdderr("SFRE", vRM) quit
	}

	if vobj(dep,432).exists() do {

		set X = dep.cnvtyp if 'X.isNull(),'Db.isDefined("STBLCNVTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CNVTYP", vRM) quit
		if '("01"[dep.COLLQUE) set vRM=$$^MSG(742,"L") do vdderr("COLLQUE", vRM) quit
		set X = dep.collst if 'X.isNull(),'Db.isDefined("UTBLCOLLST","X") set vRM = $$^MSG(1485,X) do vdderr("COLLST", vRM) quit
		set X = dep.comppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.COMPPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.compytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.COMPYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.DEFINADJ) set vRM=$$^MSG(742,"L") do vdderr("DEFINADJ", vRM) quit
		if '("01"[dep.DLKFLG) set vRM=$$^MSG(742,"L") do vdderr("DLKFLG", vRM) quit
		set X = dep.fisbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.FISBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.fisint if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.FISINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ipty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.itytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ITYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negitrf if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("NEGITRF", vRM) quit
		set X = dep.penpty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PENPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.pentytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PENTYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.restyp if 'X.isNull(),'Db.isDefined("STBLRESTYP","X") set vRM = $$^MSG(1485,X) do vdderr("RESTYP", vRM) quit
		set X = dep.wrkdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("WRKDTE", vRM) quit
	}

	if vobj(dep,434).exists() do {

		set X = dep.afdep if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AFDEP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dfdep if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DFDEP", vRM) quit
		set X = dep.dgrace if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DGRACE", vRM) quit
		if '("01"[dep.GIS) set vRM=$$^MSG(742,"L") do vdderr("GIS", vRM) quit
		set X = dep.intdisetc if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("INTDISETC", vRM) quit
		set X = dep.intdisets if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("INTDISETS", vRM) quit
		set X = dep.intmatetc if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("INTMATETC", vRM) quit
		set X = dep.intmatets if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("INTMATETS", vRM) quit
		set X = dep.intmatita if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("INTMATITA", vRM) quit
		set X = dep.isn if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("ISN", vRM) quit
		set X = dep.negundaa if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGUNDAA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.PIS) set vRM=$$^MSG(742,"L") do vdderr("PIS", vRM) quit
		set X = dep.primatetc if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PRIMATETC", vRM) quit
		set X = dep.primatets if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("PRIMATETS", vRM) quit
		if '("01"[dep.SWPDELIP) set vRM=$$^MSG(742,"L") do vdderr("SWPDELIP", vRM) quit
	}

	if vobj(dep,435).exists() do {

		if '("01"[dep.MINBALFL) set vRM=$$^MSG(742,"L") do vdderr("MINBALFL", vRM) quit
	}

	if vobj(dep,436).exists() do {

		set X = dep.convdd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CONVDD", vRM) quit
		set X = dep.convodex if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CONVODEX", vRM) quit
		set X = dep.convodst if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CONVODST", vRM) quit
		set X = dep.dumi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DUMI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.idomi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IDOMI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.niao if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("NIAO", vRM) quit
		if '("01"[dep.PDIV) set vRM=$$^MSG(742,"L") do vdderr("PDIV", vRM) quit
		set X = dep.sdomi if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SDOMI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.ufindex if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("UFINDEX", vRM) quit
		set X = dep.uncacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",18,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.UNCACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,437).exists() do {

		set X = dep.aepy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AEPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.aeytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AEYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.bldg.length()>15 set vRM = $$^MSG(1076,15) do vdderr("BLDG", vRM) quit
		set X = dep.iep if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.IEP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lafm if 'X.isNull(),'Db.isDefined("STBLLAFO","X") set vRM = $$^MSG(1485,X) do vdderr("LAFM", vRM) quit
		set X = dep.laftfr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("LAFTFR", vRM) quit
		if '("01"[dep.LSP) set vRM=$$^MSG(742,"L") do vdderr("LSP", vRM) quit
		set X = dep.oborirp if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.OBORIRP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if dep.prop.length()>15 set vRM = $$^MSG(1076,15) do vdderr("PROP", vRM) quit
		if dep.unit.length()>15 set vRM = $$^MSG(1076,15) do vdderr("UNIT", vRM) quit
		set X = dep.usrestat if 'X.isNull(),'Db.isDefined("STBLUSRESTAT","X") set vRM = $$^MSG(1485,X) do vdderr("USRESTAT", vRM) quit
	}

	if vobj(dep,438).exists() do {

		if '("01"[dep.MT320) set vRM=$$^MSG(742,"L") do vdderr("MT320", vRM) quit
		if dep.mt320a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT320A", vRM) quit
		if '("01"[dep.MT900) set vRM=$$^MSG(742,"L") do vdderr("MT900", vRM) quit
		set X = dep.mt900a if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("MT900A", vRM) quit
		set X = dep.mt900prd if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("MT900PRD", vRM) quit
		set X = dep.mt900thr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MT900THR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.MT910) set vRM=$$^MSG(742,"L") do vdderr("MT910", vRM) quit
		set X = dep.mt910a if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("MT910A", vRM) quit
		set X = dep.mt910prd if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("MT910PRD", vRM) quit
		set X = dep.mt910thr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MT910THR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.MT940) set vRM=$$^MSG(742,"L") do vdderr("MT940", vRM) quit
		if dep.mt940a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT940A", vRM) quit
		if '("01"[dep.MT942) set vRM=$$^MSG(742,"L") do vdderr("MT942", vRM) quit
		if dep.mt942a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT942A", vRM) quit
		set X = dep.mt942crth if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("MT942CRTH", vRM) quit
		set X = dep.mt942drth if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("MT942DRTH", vRM) quit
		set X = dep.mt942g1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("MT942G1", vRM) quit
		set X = dep.mt942g2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("MT942G2", vRM) quit
		set X = dep.mt942lrd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MT942LRD", vRM) quit
		set X = dep.mt942lrt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("MT942LRT", vRM) quit
		set X = dep.mt942prd if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("MT942PRD", vRM) quit
		set X = dep.mt942stmt if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("MT942STMT", vRM) quit
		if '("01"[dep.MT950) set vRM=$$^MSG(742,"L") do vdderr("MT950", vRM) quit
		if dep.mt950a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT950A", vRM) quit
		set X = dep.sw940freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]SW940FREQ",0) if 'vRM.get().isNull() do vdderr("SW940FREQ", vRM) quit
		set X = dep.sw940lsdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SW940LSDT", vRM) quit
		set X = dep.sw940lstm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("SW940LSTM", vRM) quit
		set X = dep.sw940nsdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SW940NSDT", vRM) quit
		set X = dep.sw940num if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("SW940NUM", vRM) quit
		set X = dep.sw940prd if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("SW940PRD", vRM) quit
		set X = dep.sw950lstm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("SW950LSTM", vRM) quit
	}

	if vobj(dep,439).exists() do {

		set X = dep.lcamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LCAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lcdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LCDT", vRM) quit
		set X = dep.ldamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LDAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.lddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDDT", vRM) quit
	}

	if vobj(dep,440).exists() do {

		set X = dep.anico if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ANICO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.anir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ANIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.codel if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CODEL", vRM) quit
		if '("01"[dep.COF) set vRM=$$^MSG(742,"L") do vdderr("COF", vRM) quit
		if dep.cogs.length()>4 set vRM = $$^MSG(1076,4) do vdderr("COGS", vRM) quit
		set X = dep.com if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COM", vRM) quit
		set X = dep.cot if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COT", vRM) quit
		set X = dep.dtco if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DTCO", vRM) quit
		set X = dep.rico if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RICO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.rir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.unico if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.UNICO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.unir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.UNIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.unpbc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.UNPBC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.unpbr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.UNPBR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,442).exists() do {

		set X = dep.bwpty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BWPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.bwtytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.BWTYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negipty if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGIPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.negitytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NEGITYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrnegipty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRNEGIPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrnegitytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRNEGITYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrposipty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPOSIPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrpositytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPOSITYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrppty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrptytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRPTYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwapty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWAPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwatytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWATYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwhpty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWHPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.nrwhtytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NRWHTYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,444).exists() do {

		set X = dep.anlbalrf if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("ANLBALRF", vRM) quit
		set X = dep.anlbalrm if 'X.isNull(),'Db.isDefined("STBLRNDMTH","X") set vRM = $$^MSG(1485,X) do vdderr("ANLBALRM", vRM) quit
		set X = dep.anlbefe if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ANLBEFE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.anlcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ANLCID", vRM) quit
		if '("01"[dep.ANLFPR) set vRM=$$^MSG(742,"L") do vdderr("ANLFPR", vRM) quit
		set X = dep.anlled if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ANLLED", vRM) quit
		set X = dep.anllsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ANLLSD", vRM) quit
		set X = dep.anloffdy if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ANLOFFDY", vRM) quit
		set X = dep.anloffed if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ANLOFFED", vRM) quit
		set X = dep.anlsnl if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ANLSNL", vRM) quit
		set X = dep.anlstchg if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.ANLSTCHG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.anltyp if 'X.isNull(),'Db.isDefined("STBLANLTYP","X") set vRM = $$^MSG(1485,X) do vdderr("ANLTYP", vRM) quit
		if '("01"[dep.DEDINTPD) set vRM=$$^MSG(742,"L") do vdderr("DEDINTPD", vRM) quit
	}

	if vobj(dep,446).exists() do {

		if '("01"[dep.IRFL) set vRM=$$^MSG(742,"L") do vdderr("IRFL", vRM) quit
		if '("01"[dep.REGDD) set vRM=$$^MSG(742,"L") do vdderr("REGDD", vRM) quit
		set X = dep.rmtbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RMTBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.rmtthr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.RMTTHR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.swpropt if 'X.isNull(),'Db.isDefined("STBLSWPROPT","X") set vRM = $$^MSG(1485,X) do vdderr("SWPROPT", vRM) quit
		set X = dep.swptr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SWPTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,447).exists() do {

		set X = dep.pcidstat if 'X.isNull(),'Db.isDefined("STBLPCIDDEP","X") set vRM = $$^MSG(1485,X) do vdderr("PCIDSTAT", vRM) quit
	}

	if vobj(dep,448).exists() do {

		set X = dep.npiaab if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.NPIAAB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[dep.OSGNCRDC) set vRM=$$^MSG(742,"L") do vdderr("OSGNCRDC", vRM) quit
		set X = dep.psgncrdr if 'X.isNull(),'Db.isDefined("STBLPSGNCRDR","X") set vRM = $$^MSG(1485,X) do vdderr("PSGNCRDR", vRM) quit
		set X = dep.sgncrd if 'X.isNull(),'Db.isDefined("STBLSGNCRD","X") set vRM = $$^MSG(1485,X) do vdderr("SGNCRD", vRM) quit
		set X = dep.sgncrdchgdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SGNCRDCHGDT", vRM) quit
	}

	if vobj(dep,450).exists() do {

		set X = dep.awt if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AWT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.awti if 'X.isNull(),'Db.isDefined("UTBLAWTI","X") set vRM = $$^MSG(1485,X) do vdderr("AWTI", vRM) quit
		if '("01"[dep.AWTP) set vRM=$$^MSG(742,"L") do vdderr("AWTP", vRM) quit
		set X = dep.awtr if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.AWTR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.bwsched if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("BWSCHED", vRM) quit
		set X = dep.dawa if 'X.isNull() set vRM = $$VAL^DBSVER("N",18,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAWA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dawa1 if 'X.isNull() set vRM = $$VAL^DBSVER("N",18,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAWA1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dawa2 if 'X.isNull() set vRM = $$VAL^DBSVER("N",18,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAWA2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dawa3 if 'X.isNull() set vRM = $$VAL^DBSVER("N",18,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAWA3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dawa4 if 'X.isNull() set vRM = $$VAL^DBSVER("N",18,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.DAWA4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.erracct if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ERRACCT", vRM) quit
		if '("01"[dep.ERRFLG) set vRM=$$^MSG(742,"L") do vdderr("ERRFLG", vRM) quit
	}

	if vobj(dep,452).exists() do {

		set X = dep.rce if 'X.isNull(),'Db.isDefined("STBLSRCE","X") set vRM = $$^MSG(1485,X) do vdderr("RCE", vRM) quit
		if dep.rsintspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("RSINTSPR", vRM) quit
		if dep.rsrndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RSRNDMTD", vRM) quit
	}

	if vobj(dep,454).exists() do {

		set X = dep.precard if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("PRECARD", vRM) quit
		if dep.prepin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PREPIN", vRM) quit
	}

	if vobj(dep,456).exists() do {

		if '("01"[dep.BLPROC) set vRM=$$^MSG(742,"L") do vdderr("BLPROC", vRM) quit
		set X = dep.colexthrsh if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.COLEXTHRSH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.colextrdys if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("COLEXTRDYS", vRM) quit
		set X = dep.regeamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.REGEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.stmtsrt if 'X.isNull(),'Db.isDefined("STBLSTMTSRT","X") set vRM = $$^MSG(1485,X) do vdderr("STMTSRT", vRM) quit
	}

	if vobj(dep,458).exists() do {

		set X = dep.clr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CLR", vRM) quit
		set X = dep.slc if 'X.isNull(),'Db.isDefined("STBLSBSLC","X") set vRM = $$^MSG(1485,X) do vdderr("SLC", vRM) quit
	}

	if vobj(dep,460).exists() do {

		set X = dep.eodbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbal2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBAL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbal3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBAL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbal4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBAL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbal5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBAL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalav if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALAV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalavl2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALAVL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalavl3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALAVL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalavl4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALAVL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalavl5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALAVL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalco if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALCO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalcol2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALCOL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalcol3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALCOL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalcol4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALCOL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodbalcol5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODBALCOL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodhldam if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODHLDAM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodhldam2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODHLDAM2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodhldam3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODHLDAM3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodhldam4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODHLDAM4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eodhldam5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EODHLDAM5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.fdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FDT", vRM) quit
	}

	if vobj(dep,462).exists() do {

		if dep.intspra.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPRA", vRM) quit
		if dep.intsprp.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPRP", vRM) quit
		if dep.intspru.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPRU", vRM) quit
		set X = dep.vatintopt if 'X.isNull(),'Db.isDefined("STBLVATINTD","X") set vRM = $$^MSG(1485,X) do vdderr("VATINTOPT", vRM) quit
		set X = dep.vatnegint if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.VATNEGINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,464).exists() do {

		if '("01"[dep.CUMDEP) set vRM=$$^MSG(742,"L") do vdderr("CUMDEP", vRM) quit
		if '("01"[dep.DAPARWD) set vRM=$$^MSG(742,"L") do vdderr("DAPARWD", vRM) quit
		set X = dep.lfeepr if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.LFEEPR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxsaadv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAXSAADV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.maxsnadv if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXSNADV", vRM) quit
		set X = dep.minnsreq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MINNSREQ", vRM) quit
		set X = dep.nscdepdd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NSCDEPDD", vRM) quit
		set X = dep.nschdeps if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NSCHDEPS", vRM) quit
		set X = dep.prclfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.PRCLFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.schdepa if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SCHDEPA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.schdepf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[DEP]SCHDEPF",0) if 'vRM.get().isNull() do vdderr("SCHDEPF", vRM) quit
		set X = dep.schdepld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCHDEPLD", vRM) quit
		set X = dep.schdepn if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SCHDEPN", vRM) quit
		set X = dep.schdepnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCHDEPND", vRM) quit
		if '("01"[dep.SCHPROC) set vRM=$$^MSG(742,"L") do vdderr("SCHPROC", vRM) quit
		set X = dep.totnosdp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("TOTNOSDP", vRM) quit
	}

	if vobj(dep,466).exists() do {

		if dep.ctfgrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("CTFGRP", vRM) quit
	}

	if vobj(dep,468).exists() do {

		set X = dep.fundact if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("FUNDACT", vRM) quit
		set X = dep.fundrsn if 'X.isNull(),'Db.isDefined("UTBLIRACON","X") set vRM = $$^MSG(1485,X) do vdderr("FUNDRSN", vRM) quit
	}

	if vobj(dep,470).exists() do {

		set X = dep.anlinflcalin if 'X.isNull(),'Db.isDefined("UTBLANLINFLT","X") set vRM = $$^MSG(1485,X) do vdderr("ANLINFLCALIN", vRM) quit
		set X = dep.reintanlamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.REINTANLAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(dep,472).exists() do {

		set X = dep.acctprps if 'X.isNull(),'Db.isDefined("UTBLACCTPRPS","X") set vRM = $$^MSG(1485,X) do vdderr("ACCTPRPS", vRM) quit
		set X = dep.crpmonth if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CRPMONTH", vRM) quit
		set X = dep.drpmonth if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DRPMONTH", vRM) quit
		set X = dep.eia if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EIA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.eoa if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.EOA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.initdsrc if 'X.isNull(),'Db.isDefined("UTBLINITDSRC","X") set vRM = $$^MSG(1485,X) do vdderr("INITDSRC", vRM) quit
		set X = dep.mavgbal if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.MAVGBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.srcofinc if 'X.isNull(),'Db.isDefined("UTBLSRCOFINC","X") set vRM = $$^MSG(1485,X) do vdderr("SRCOFINC", vRM) quit
	}

	if vobj(dep,500).exists() do {

		if dep.acycode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ACYCODE", vRM) quit
		if dep.agcode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("AGCODE", vRM) quit
		if dep.agtypec.length()>15 set vRM = $$^MSG(1076,15) do vdderr("AGTYPEC", vRM) quit
		if dep.busadv.length()>15 set vRM = $$^MSG(1076,15) do vdderr("BUSADV", vRM) quit
		set X = dep.cptag if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CPTAG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cptbadv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CPTBADV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cptiae if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CPTIAE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.cptrefr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.CPTREFR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.dcptag if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTAG", vRM) quit
		set X = dep.dcptbadv if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTBADV", vRM) quit
		set X = dep.dcptiae if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTIAE", vRM) quit
		set X = dep.dcptrefr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTREFR", vRM) quit
		if dep.ilcode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ILCODE", vRM) quit
		if dep.refrep.length()>15 set vRM = $$^MSG(1076,15) do vdderr("REFREP", vRM) quit
		if dep.sofcode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("SOFCODE", vRM) quit
		if dep.subscode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("SUBSCODE", vRM) quit
	}

	if vobj(dep,901).exists() do {

		set X = dep.roidindex if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("ROIDINDEX", vRM) quit
		set X = dep.roidrate if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("ROIDRATE", vRM) quit
		set X = dep.sfecy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SFECY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.sfelf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SFELF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = dep.sfepy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEP.SFEPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}
	set X = dep.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEP","MSG",979,"DEP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEP dep)	//DEP Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if EFD.get() do {
				do vj7(.dep)	// Mode=I Tran=B EFD=E Seq=1 JRNID=DTJCL_I
				}
			else  do {
				do vj7(.dep)	// Mode=I Tran=B EFD=N Seq=1 JRNID=DTJCL_I
				do vj8(.dep)	// Mode=I Tran=B EFD=N Seq=1 JRNID=DTJNAACN_I
				do vj9(.dep)	// Mode=I Tran=B EFD=N Seq=1 JRNID=DTJNA_I
				do vj13(.dep)	// Mode=I Tran=B EFD=N Seq=1 JRNID=HIST_I
				}
			}
		else  if TSRC="F" do {
			do vj7(.dep)	// Mode=I Tran=F EFD=N,E Seq=1 JRNID=DTJCL_I
			}
		else  if TSRC="O" do {
			if EFD.get() do {
				do vj2(.dep)	// Mode=I Tran=O EFD=E Seq=1 JRNID=ACTIBPAY2
				do vj7(.dep)	// Mode=I Tran=O EFD=E Seq=1 JRNID=DTJCL_I
				}
			else  do {
				do vj2(.dep)	// Mode=I Tran=O EFD=N Seq=1 JRNID=ACTIBPAY2
				do vj7(.dep)	// Mode=I Tran=O EFD=N Seq=1 JRNID=DTJCL_I
				do vj8(.dep)	// Mode=I Tran=O EFD=N Seq=1 JRNID=DTJNAACN_I
				do vj9(.dep)	// Mode=I Tran=O EFD=N Seq=1 JRNID=DTJNA_I
				do vj13(.dep)	// Mode=I Tran=O EFD=N Seq=1 JRNID=HIST_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if EFD.get() do {
				do vj7(.dep)	// Mode=U Tran=B EFD=E Seq=1 JRNID=DTJCL_I
				do vj14(.dep)	// Mode=U Tran=B EFD=E Seq=1 JRNID=HIST_U
				quit:'vx.data()
				if vx("GCRCD").exists() do vj10(.dep,"GCRCD")	// Mode=U Tran=B EFD=E Seq=1 JRNID=GCRCODE
				}
			else  do {
				do vj7(.dep)	// Mode=U Tran=B EFD=N Seq=1 JRNID=DTJCL_I
				do vj14(.dep)	// Mode=U Tran=B EFD=N Seq=1 JRNID=HIST_U
				quit:'vx.data()
				if vx("STAT").exists() do vj5(.dep,"STAT")	// Mode=U Tran=B EFD=N Seq=1 JRNID=CMSRECCID
				if vx("GCRCD").exists() do vj10(.dep,"GCRCD")	// Mode=U Tran=B EFD=N Seq=1 JRNID=GCRCODE
				if vx("CRCD").exists() do vj6(.dep,"CRCD")	// Mode=U Tran=B EFD=N Seq=2 JRNID=CRCD_TO_U
				if vx("TYPE").exists() do vj15(.dep,"TYPE")	// Mode=U Tran=B EFD=N Seq=2 JRNID=TYPE_FROM_U
				if vx("TYPE").exists() do vj16(.dep,"TYPE")	// Mode=U Tran=B EFD=N Seq=2 JRNID=TYPE_TO_U
				if vx("GLSC").exists() do vj11(.dep,"GLSC")	// Mode=U Tran=B EFD=N Seq=3 JRNID=GLSC_FROM_U
				if vx("GLSC").exists() do vj12(.dep,"GLSC")	// Mode=U Tran=B EFD=N Seq=3 JRNID=GLSC_TO_U
				if vx("CC").exists() do vj3(.dep,"CC")	// Mode=U Tran=B EFD=N Seq=4 JRNID=CC_FROM_U
				if vx("CC").exists() do vj4(.dep,"CC")	// Mode=U Tran=B EFD=N Seq=4 JRNID=CC_TO_U
				}
			}
		else  if TSRC="F" do {
			do vj7(.dep)	// Mode=U Tran=F EFD=N,E Seq=1 JRNID=DTJCL_I
			}
		else  if TSRC="O" do {
			if EFD.get() do {
				do vj7(.dep)	// Mode=U Tran=O EFD=E Seq=1 JRNID=DTJCL_I
				do vj14(.dep)	// Mode=U Tran=O EFD=E Seq=1 JRNID=HIST_U
				quit:'vx.data()
				if vx("ACTIBPAY").exists() do vj1(.dep,"ACTIBPAY")	// Mode=U Tran=O EFD=E Seq=1 JRNID=ACTIBPAY
				if vx("GCRCD").exists() do vj10(.dep,"GCRCD")	// Mode=U Tran=O EFD=E Seq=1 JRNID=GCRCODE
				}
			else  do {
				do vj7(.dep)	// Mode=U Tran=O EFD=N Seq=1 JRNID=DTJCL_I
				do vj14(.dep)	// Mode=U Tran=O EFD=N Seq=1 JRNID=HIST_U
				quit:'vx.data()
				if vx("ACTIBPAY").exists() do vj1(.dep,"ACTIBPAY")	// Mode=U Tran=O EFD=N Seq=1 JRNID=ACTIBPAY
				if vx("STAT").exists() do vj5(.dep,"STAT")	// Mode=U Tran=O EFD=N Seq=1 JRNID=CMSRECCID
				if vx("GCRCD").exists() do vj10(.dep,"GCRCD")	// Mode=U Tran=O EFD=N Seq=1 JRNID=GCRCODE
				if vx("CRCD").exists() do vj6(.dep,"CRCD")	// Mode=U Tran=O EFD=N Seq=2 JRNID=CRCD_TO_U
				if vx("TYPE").exists() do vj15(.dep,"TYPE")	// Mode=U Tran=O EFD=N Seq=2 JRNID=TYPE_FROM_U
				if vx("TYPE").exists() do vj16(.dep,"TYPE")	// Mode=U Tran=O EFD=N Seq=2 JRNID=TYPE_TO_U
				if vx("GLSC").exists() do vj11(.dep,"GLSC")	// Mode=U Tran=O EFD=N Seq=3 JRNID=GLSC_FROM_U
				if vx("GLSC").exists() do vj12(.dep,"GLSC")	// Mode=U Tran=O EFD=N Seq=3 JRNID=GLSC_TO_U
				if vx("CC").exists() do vj3(.dep,"CC")	// Mode=U Tran=O EFD=N Seq=4 JRNID=CC_FROM_U
				if vx("CC").exists() do vj4(.dep,"CC")	// Mode=U Tran=O EFD=N Seq=4 JRNID=CC_TO_U
				}
			}
		}

	quit


vj1(RecordDEP dep,String vdi)	// ACTIBPAY  Table ABPJNL  Activate for Bill Pay

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=dep.cid
	type RecordABPJNL abpjnl=Db.getRecord("ABPJNL","TJD=:v1,CID=:vlastkey",1)
	set abpjnl.actibpay=dep.actibpay

	do abpjnl.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEP dep)	// ACTIBPAY2  Table ABPJNL  Activate for Bill Pay on Insert

	if +dep.actibpay=1
	else  quit

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=dep.cid
	type RecordABPJNL abpjnl=Db.getRecord("ABPJNL","TJD=:v1,CID=:vlastkey",1)
	set abpjnl.actibpay=dep.actibpay

	do abpjnl.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordDEP dep,String vdi)	// CC_FROM_U  Table DAYENDXFR  Cost Center Change - From Account Info

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.aiacr=dep.aiacr
	set dayendxfr.cc=dep.cc.oldVal
	set dayendxfr.ccc=dep.cc.curVal
	set dayendxfr.ccrcd=dep.crcd
	set dayendxfr.cglsc=dep.glsc
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd
	set dayendxfr.ctype=dep.type
	set dayendxfr.glsc=dep.glsc
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.negacrun=dep.negacrun
	set dayendxfr.prn=dep.bal
	set dayendxfr.resint=dep.resint
	set dayendxfr.type=dep.type
	set dayendxfr.uncacr=dep.uncacr
	set dayendxfr.xflg=0

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordDEP dep,String vdi)	// CC_TO_U  Table DAYENDXFR  Product Type Change - To Account Info

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.aiacr=dep.aiacr
	set dayendxfr.cc=dep.cc.curVal
	set dayendxfr.ccc=dep.cc.oldVal
	set dayendxfr.ccrcd=dep.crcd
	set dayendxfr.cglsc=dep.glsc
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd
	set dayendxfr.ctype=dep.type
	set dayendxfr.glsc=dep.glsc
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.negacrun=dep.negacrun
	set dayendxfr.prn=dep.bal
	set dayendxfr.resint=dep.resint
	set dayendxfr.type=dep.type
	set dayendxfr.uncacr=dep.uncacr
	set dayendxfr.xflg=1

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj5(RecordDEP dep,String vdi)	// CMSRECCID  Table CMSRECCID  Adds CMSREC entry for mod. DEP records

	if +dep.carduf=1
	else  quit

							//// Save this line for Public datatyping, if needed
	type String vlastkey
	set vlastkey=Db.nextVal("CMSRECCID","")
	type RecordCMSRECCID cmsreccid=Db.getRecord("CMSRECCID","SEQ=:vlastkey",1)
	set cmsreccid.cid=dep.cid
	set cmsreccid.cmsflg=dep.cmsflg

	do cmsreccid.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj6(RecordDEP dep,String vdi)	// CRCD_TO_U  Table DAYENDXFR  Currency Code - To Account Info

	if dep.eurefd'=""
	else  quit

							//// Save this line for Public datatyping, if needed
	type String v1,vlastkey
	set v1=dep.eurefd
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.cc=dep.cc.oldVal
	set dayendxfr.ccc=dep.cc.oldVal
	set dayendxfr.ccrcd=dep.crcd.oldVal
	set dayendxfr.cglsc=dep.glsc.oldVal
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd.curVal
	set dayendxfr.ctype=dep.type.oldVal
	set dayendxfr.glsc=dep.glsc.oldVal
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.prn=dep.bal
	set dayendxfr.type=dep.type.oldVal
	set dayendxfr.xflg=1

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj7(RecordDEP dep)	// DTJCL_I  Table DTJCL  Daily Closed Account Journal

	if +dep.stat=4
	else  quit

	type Public String TJD
	type String v1,v2,v3,v4,vlastkey
	set v1=TJD
	set v2=dep.cls
	set v3=dep.grp
	set v4=dep.type
	set vlastkey=dep.cid
	type RecordDTJCL dtjcl=Db.getRecord("DTJCL","TJD=:v1,CLS=:v2,GRP=:v3,TYP=:v4,CID=:vlastkey",1)

	do dtjcl.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj8(RecordDEP dep)	// DTJNAACN_I  Table DTJNAACN  New Account Insert Journal

	type Public String TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=dep.acn
	set v3=dep.cls
	set v4=dep.grp
	set v5=dep.type
	set vlastkey=dep.cid
	type RecordDTJNAACN dtjnaacn=Db.getRecord("DTJNAACN","SJD=:v1,ACN=:v2,CLS=:v3,GRP=:v4,TYPE=:v5,CID=:vlastkey",1)

	do dtjnaacn.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj9(RecordDEP dep)	// DTJNA_I  Table DTJNA  Daily New Account Journal

	type Public String %IDENT,TJD
	type String v1,v2,v3,v4,vlastkey
	set v1=TJD
	set v2=dep.cls
	set v3=dep.grp
	set v4=dep.type
	set vlastkey=dep.cid
	type RecordDTJNA dtjna=Db.getRecord("DTJNA","TJD=:v1,CLS=:v2,GRP=:v3,TYP=:v4,CID=:vlastkey",1)
	set dtjna.ident=%IDENT

	do dtjna.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj10(RecordDEP dep,String vdi)	// GCRCODE  Table DTJFMDS  Daily Scoring File Maintenance Journal

	type Public String %UID,TJD
	type String v1,v2,vlastkey
	set v1=TJD
	set v2=dep.cid
	set vlastkey=Db.nextVal("DTJFMDS","TJD=:v1,CID=:v2")
	type RecordDTJFMDS dtjfmds=Db.getRecord("DTJFMDS","TJD=:v1,CID=:v2,MSEQ=:vlastkey",1)
	set dtjfmds.bal=dep.bal
	set dtjfmds.boo=dep.boo
	set dtjfmds.cngrs=dep.cngrs
	set dtjfmds.dtop=dep.odt
	set dtjfmds.dtpmnt=dep.gcrpmnt.oldVal
	set dtjfmds.gcrlbal=dep.gcrlbal
	set dtjfmds.gcrldbal=dep.gcrldbal
	set dtjfmds.newgcr=dep.gcrcd
	set dtjfmds.ngcrcov=dep.gcrcv
	set dtjfmds.ogcrcov=dep.gcrcv.oldVal
	set dtjfmds.oldgcr=dep.gcrcd.oldVal
	set dtjfmds.origopd=dep.origopd
	set dtjfmds.rnamt=dep.rnamt.oldVal
	set dtjfmds.todcnt=dep.todcnt
	set dtjfmds.type=dep.type
	set dtjfmds.uid=%UID

	do dtjfmds.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj11(RecordDEP dep,String vdi)	// GLSC_FROM_U  Table DAYENDXFR  GL Set Code Change - From Account Info

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.aiacr=dep.aiacr
	set dayendxfr.cc=dep.cc.oldVal
	set dayendxfr.ccc=dep.cc.oldVal
	set dayendxfr.ccrcd=dep.crcd
	set dayendxfr.cglsc=dep.glsc.curVal
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd
	set dayendxfr.ctype=dep.type
	set dayendxfr.glsc=dep.glsc.oldVal
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.negacrun=dep.negacrun
	set dayendxfr.prn=dep.bal
	set dayendxfr.resint=dep.resint
	set dayendxfr.type=dep.type
	set dayendxfr.uncacr=dep.uncacr
	set dayendxfr.xflg=0

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj12(RecordDEP dep,String vdi)	// GLSC_TO_U  Table DAYENDXFR  GL Set Code Change - To Account Info

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.aiacr=dep.aiacr
	set dayendxfr.cc=dep.cc.oldVal
	set dayendxfr.ccc=dep.cc.oldVal
	set dayendxfr.ccrcd=dep.crcd
	set dayendxfr.cglsc=dep.glsc.oldVal
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd
	set dayendxfr.ctype=dep.type
	set dayendxfr.glsc=dep.glsc.curVal
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.negacrun=dep.negacrun
	set dayendxfr.prn=dep.bal
	set dayendxfr.resint=dep.resint
	set dayendxfr.type=dep.type
	set dayendxfr.uncacr=dep.uncacr
	set dayendxfr.xflg=1

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj13(RecordDEP dep)	// HIST_I  Table HIST  History Entry for New Account

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=dep.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=dep.boo
	set hist.cdt=+$H
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(6795)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj14(RecordDEP dep)	// HIST_U  Table HIST  History for File Maintenance

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if vdi'="TLD" do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=dep.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=dep.boo
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS("","DEP",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj15(RecordDEP dep,String vdi)	// TYPE_FROM_U  Table DAYENDXFR  Product Type Change - From Account Info

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.aiacr=dep.aiacr
	set dayendxfr.cc=dep.cc.oldVal
	set dayendxfr.ccc=dep.cc.oldVal
	set dayendxfr.ccrcd=dep.crcd
	set dayendxfr.cglsc=dep.glsc.oldVal
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd
	set dayendxfr.ctype=dep.type.curVal
	set dayendxfr.glsc=dep.glsc.oldVal
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.negacrun=dep.negacrun
	set dayendxfr.prn=dep.bal
	set dayendxfr.resint=dep.resint
	set dayendxfr.type=dep.type.oldVal
	set dayendxfr.uncacr=dep.uncacr
	set dayendxfr.xflg=0

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj16(RecordDEP dep,String vdi)	// TYPE_TO_U  Table DAYENDXFR  Product Type Change - To Account Info

	type Public String TJD
	type String v1,vlastkey
	set v1=TJD
	set vlastkey=Db.nextVal("DAYENDXFR","TJD=:v1")
	type RecordDAYENDXFR dayendxfr=Db.getRecord("DAYENDXFR","TJD=:v1,SEQ=:vlastkey",1)
	set dayendxfr.acr=dep.acr
	set dayendxfr.aiacr=dep.aiacr
	set dayendxfr.cc=dep.cc.oldVal
	set dayendxfr.ccc=dep.cc.oldVal
	set dayendxfr.ccrcd=dep.crcd
	set dayendxfr.cglsc=dep.glsc.oldVal
	set dayendxfr.cid=dep.cid
	set dayendxfr.crcd=dep.crcd
	set dayendxfr.ctype=dep.type.oldVal
	set dayendxfr.glsc=dep.glsc.oldVal
	set dayendxfr.intavlncr=dep.intavlncr
	set dayendxfr.negacr=dep.negacr
	set dayendxfr.negacrun=dep.negacrun
	set dayendxfr.prn=dep.bal
	set dayendxfr.resint=dep.resint
	set dayendxfr.type=dep.type.curVal
	set dayendxfr.uncacr=dep.uncacr
	set dayendxfr.xflg=1

	do dayendxfr.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordDEP dep) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		type String vf,vi,viMap,vxn
		set viMap=",CONVACN,~1~|,ANLLED,~2~|,ANLCID,~3~|,ANLOFFED,~4~|,AREF,~5~|,AWTI,~6~|,BGTRVUDT,~7~|,BGTYRND,~8~|,COLEXTRDYS,~9~|,CTFGRP,~10~|,LAFTFR,~11~|,SCHDEPND,~12~|,FEEPLN,~13~|,EMPLNO,ACN,TYPE,~14~|,TYPE,EMPLNO,ACN,~15~|,,~16~|,NSDATE,~17~|,AIINDEX,~18~|,INDEX,~19~|,ITRF,~20~|,INTMAT,~21~|,AIINTMAT,~22~|,MDT,~23~|,MLD,~24~|,OID,~25~|,RACN,~26~|,BGTNCDT,~27~|,SCND,~28~|,SVCFEECID,~29~|,MT940,~30~|,TREXD,~3"
		set viMap=viMap_"1~|,UPNDT,~32~|,CLS,ACN,~33~|,BOO,~34~|,CC,CLS,GRP,TYPE,~35~|,CLS,GRP,TYPE,~36~|,CLS,~37~|,CLS,GRP,TYPE,CRCD,~38~|,IRA,~39~|,CORRE,CRCD,~40~|,COMMFPER,~41~|,ACN,RPASEQ,~42~|,CLS,BOO,PROVCAT,TYPE,~43~|,ACN,RPASEQ,~44~|,PBKSN,~45~|,VOSTRO,MT950,~46~|"
		set vf=0
		set vxn=""
		for  set vxn=vx(vxn).order() quit:vxn=""  do {
			for  set vf=$F(viMap,(","_vxn_","),vf) quit:vf=0  do {
				set vi=viMap.extract(vf,999).piece("~",2)
				set viMap.piece("|",vi)=""
				do @("vi"_vi_"(.dep)")
			}
		}
	}
	do vi1(.dep)
	do vi2(.dep)
	do vi3(.dep)
	do vi4(.dep)
	do vi5(.dep)
	do vi6(.dep)
	do vi7(.dep)
	do vi8(.dep)
	do vi9(.dep)
	do vi10(.dep)
	do vi11(.dep)
	do vi12(.dep)
	do vi13(.dep)
	do vi14(.dep)
	do vi15(.dep)
	do vi16(.dep)
	do vi17(.dep)
	do vi18(.dep)
	do vi19(.dep)
	do vi20(.dep)
	do vi21(.dep)
	do vi22(.dep)
	do vi23(.dep)
	do vi24(.dep)
	do vi25(.dep)
	do vi26(.dep)
	do vi27(.dep)
	do vi28(.dep)
	do vi29(.dep)
	do vi30(.dep)
	do vi31(.dep)
	do vi32(.dep)
	do vi33(.dep)
	do vi34(.dep)
	do vi35(.dep)
	do vi36(.dep)
	do vi37(.dep)
	do vi38(.dep)
	do vi39(.dep)
	do vi40(.dep)
	do vi41(.dep)
	do vi42(.dep)
	do vi43(.dep)
	do vi44(.dep)
	do vi45(.dep)
	do vi46(.dep)

	quit
	

vi1(RecordDEP dep) // Maintain ACONVACN index entries (Converted Account/Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.convacn
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XCONVACN(v1,v2)) do vidxerr("ACONVACN")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XCONVACN(v1,v2)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CONVACN").exists() set v1=vx("CONVACN").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XCONVACN(v1,v2)
	#ENDBYPASS
	quit

vi2(RecordDEP dep) // Maintain ANLLED index entries (Net Loss End Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.anlled
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"NETLOSS",v3)) do vidxerr("ANLLED")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"NETLOSS",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ANLLED").exists() set v1=vx("ANLLED").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"NETLOSS",v3)
	#ENDBYPASS
	quit

vi3(RecordDEP dep) // Maintain ANLLINK index entries (Linked Accounts)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.anlcid
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("ANLLINK",v2,v3)) do vidxerr("ANLLINK")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("ANLLINK",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ANLCID").exists() set v2=vx("ANLCID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("ANLLINK",v2,v3)
	#ENDBYPASS
	quit

vi4(RecordDEP dep) // Maintain ANLOFFED index entries (Analysis Offset End Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.anloffed
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"ANLOFF",v3)) do vidxerr("ANLOFFED")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"ANLOFF",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ANLOFFED").exists() set v1=vx("ANLOFFED").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"ANLOFF",v3)
	#ENDBYPASS
	quit

vi5(RecordDEP dep) // Maintain AREF index entries (Loan Account Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.aref
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("AREF",v2,v3)) do vidxerr("AREF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("AREF",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AREF").exists() set v2=vx("AREF").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("AREF",v2,v3)
	#ENDBYPASS
	quit

vi6(RecordDEP dep) // Maintain AWTI index entries (Accrued Withholding Tax Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.awti
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("AWTI",v2,v3)) do vidxerr("AWTI")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("AWTI",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AWTI").exists() set v2=vx("AWTI").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("AWTI",v2,v3)
	#ENDBYPASS
	quit

vi7(RecordDEP dep) // Maintain BGTRVUDT index entries (Budget Review Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.bgtrvudt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XACN(v1,"BGTRVUDT",v3)) do vidxerr("BGTRVUDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XACN(v1,"BGTRVUDT",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("BGTRVUDT").exists() set v1=vx("BGTRVUDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XACN(v1,"BGTRVUDT",v3)
	#ENDBYPASS
	quit

vi8(RecordDEP dep) // Maintain BGTYRND index entries (Budget Year Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.bgtyrnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XACN(v1,"BGTYRND",v3)) do vidxerr("BGTYRND")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XACN(v1,"BGTYRND",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("BGTYRND").exists() set v1=vx("BGTYRND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XACN(v1,"BGTYRND",v3)
	#ENDBYPASS
	quit

vi9(RecordDEP dep) // Maintain COLEXTRDYS index entries (Collection Extract Days)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.colextrdys
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("COLEXTRDYS",v2,v3)) do vidxerr("COLEXTRDYS")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("COLEXTRDYS",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("COLEXTRDYS").exists() set v2=vx("COLEXTRDYS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("COLEXTRDYS",v2,v3)
	#ENDBYPASS
	quit

vi10(RecordDEP dep) // Maintain CTFGRP index entries (Commission/Tax/Fee Plan Group)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.ctfgrp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("CTFGRP",v2,v3)) do vidxerr("CTFGRP")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("CTFGRP",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CTFGRP").exists() set v2=vx("CTFGRP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("CTFGRP",v2,v3)
	#ENDBYPASS
	quit

vi11(RecordDEP dep) // Maintain DEPLSP index entries (Tenant Account Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.laftfr
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DEPLSP("LSP",v2,v3)) do vidxerr("DEPLSP")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DEPLSP("LSP",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("LAFTFR").exists() set v2=vx("LAFTFR").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DEPLSP("LSP",v2,v3)
	#ENDBYPASS
	quit

vi12(RecordDEP dep) // Maintain DEPSCH index entries (Scheduled Deposits Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.schdepnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"DEPSCH",v3)) do vidxerr("DEPSCH")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"DEPSCH",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SCHDEPND").exists() set v1=vx("SCHDEPND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"DEPSCH",v3)
	#ENDBYPASS
	quit

vi13(RecordDEP dep) // Maintain DLYFEE index entries (Daily Fee)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.feepln
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("DLYFEE",v2,v3)) do vidxerr("DLYFEE")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("DLYFEE",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("FEEPLN").exists() set v2=vx("FEEPLN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("DLYFEE",v2,v3)
	#ENDBYPASS
	quit

vi14(RecordDEP dep) // Maintain EMPLCTA index entries (Employer/Customer/Type/Accoun)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.emplno
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.acn
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.type
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("EMPLCTA",v2,v3,v4,v5)) do vidxerr("EMPLCTA")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("EMPLCTA",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EMPLNO").exists() set v2=vx("EMPLNO").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("ACN").exists() set v3=vx("ACN").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v4=vx("TYPE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("EMPLCTA",v2,v3,v4,v5)
	#ENDBYPASS
	quit

vi15(RecordDEP dep) // Maintain EMPLNO index entries (Employer Code)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.type
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.emplno
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.acn
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("EMPLNO",v2,v3,v4,v5)) do vidxerr("EMPLNO")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("EMPLNO",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TYPE").exists() set v2=vx("TYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("EMPLNO").exists() set v3=vx("EMPLNO").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("ACN").exists() set v4=vx("ACN").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("EMPLNO",v2,v3,v4,v5)
	#ENDBYPASS
	quit

vi16(RecordDEP dep) // Maintain GCRCID index entries (GCR Accounts)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("GCR",v2)) do vidxerr("GCRCID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("GCR",v2)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("GCR",v2)
	#ENDBYPASS
	quit

vi17(RecordDEP dep) // Maintain GCRNXDAT index entries (Next Scoring Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.nsdate
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"GCRMS",v3)) do vidxerr("GCRNXDAT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"GCRMS",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NSDATE").exists() set v1=vx("NSDATE").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"GCRMS",v3)
	#ENDBYPASS
	quit

vi18(RecordDEP dep) // Maintain INDEXAI index entries (Available Interest Plan)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.aiindex
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("INDEXAI",v2,v3)) do vidxerr("INDEXAI")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("INDEXAI",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AIINDEX").exists() set v2=vx("AIINDEX").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("INDEXAI",v2,v3)
	#ENDBYPASS
	quit

vi19(RecordDEP dep) // Maintain INTINDEX index entries (Interest Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.index
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("INDEX",v2,v3)) do vidxerr("INTINDEX")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("INDEX",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INDEX").exists() set v2=vx("INDEX").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("INDEX",v2,v3)
	#ENDBYPASS
	quit

vi20(RecordDEP dep) // Maintain ITRF index entries (Interest Transfer Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.itrf
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("ITRF",v2,v3)) do vidxerr("ITRF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("ITRF",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ITRF").exists() set v2=vx("ITRF").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("ITRF",v2,v3)
	#ENDBYPASS
	quit

vi21(RecordDEP dep) // Maintain MATRIX index entries (Interest Matrix Processing)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.intmat
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("MATATT",v2,v3)) do vidxerr("MATRIX")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("MATATT",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INTMAT").exists() set v2=vx("INTMAT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("MATATT",v2,v3)
	#ENDBYPASS
	quit

vi22(RecordDEP dep) // Maintain MATRIXAI index entries (Available Interest Matrix)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.aiintmat
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("MATATTAI",v2,v3)) do vidxerr("MATRIXAI")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("MATATTAI",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AIINTMAT").exists() set v2=vx("AIINTMAT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("MATATTAI",v2,v3)
	#ENDBYPASS
	quit

vi23(RecordDEP dep) // Maintain MDT index entries (Account Maturity Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.mdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"MDT",v3)) do vidxerr("MDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"MDT",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("MDT").exists() set v1=vx("MDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"MDT",v3)
	#ENDBYPASS
	quit

vi24(RecordDEP dep) // Maintain MLD index entries (Maturity - Last Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.mld
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("MLD",v2,v3)) do vidxerr("MLD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("MLD",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("MLD").exists() set v2=vx("MLD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("MLD",v2,v3)
	#ENDBYPASS
	quit

vi25(RecordDEP dep) // Maintain OID index entries (Oid Account Flag)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = +dep.oid
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("OID",v2,v3)) do vidxerr("OID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("OID",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("OID").exists() set v2=vx("OID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("OID",v2,v3)
	#ENDBYPASS
	quit

vi26(RecordDEP dep) // Maintain RACN index entries (Rollover Transfer Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.racn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("RACN",v2,v3)) do vidxerr("RACN")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("RACN",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("RACN").exists() set v2=vx("RACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("RACN",v2,v3)
	#ENDBYPASS
	quit

vi27(RecordDEP dep) // Maintain SCHCON index entries (Budget Contribution)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.bgtncdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"SCHCON",v3)) do vidxerr("SCHCON")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"SCHCON",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("BGTNCDT").exists() set v1=vx("BGTNCDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"SCHCON",v3)
	#ENDBYPASS
	quit

vi28(RecordDEP dep) // Maintain SCND index entries (Service Charge)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.scnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"SCND",v3)) do vidxerr("SCND")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"SCND",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SCND").exists() set v1=vx("SCND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"SCND",v3)
	#ENDBYPASS
	quit

vi29(RecordDEP dep) // Maintain SVCFEEUF index entries (Service fee Use Flag)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.svcfeecid
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("SVCFEECID",v2,v3)) do vidxerr("SVCFEEUF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("SVCFEECID",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SVCFEECID").exists() set v2=vx("SVCFEECID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("SVCFEECID",v2,v3)
	#ENDBYPASS
	quit

vi30(RecordDEP dep) // Maintain SW940 index entries (Generate MT940)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = +dep.mt940
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^SW940(v1,v2)) do vidxerr("SW940")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^SW940(v1,v2)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("MT940").exists() set v1=vx("MT940").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SW940(v1,v2)
	#ENDBYPASS
	quit

vi31(RecordDEP dep) // Maintain TREXD index entries (Teaser Rate - Expira)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.trexd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"TSR",v3)) do vidxerr("TREXD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"TSR",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TREXD").exists() set v1=vx("TREXD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"TSR",v3)
	#ENDBYPASS
	quit

vi32(RecordDEP dep) // Maintain UPNDT index entries (Usage Credit Plan Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.upndt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^DAYEND(v1,"UPNDT",v3)) do vidxerr("UPNDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"UPNDT",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("UPNDT").exists() set v1=vx("UPNDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"UPNDT",v3)
	#ENDBYPASS
	quit

vi33(RecordDEP dep) // Maintain XACN index entries (Primary CIF/Account Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.acn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XACN(v1,v2,v3)) do vidxerr("XACN")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XACN(v1,v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("ACN").exists() set v2=vx("ACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XACN(v1,v2,v3)
	#ENDBYPASS
	quit

vi34(RecordDEP dep) // Maintain XBRCD index entries (Branch of Ownership/Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = +dep.boo
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("XBRCD",v2,v3)) do vidxerr("XBRCD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("XBRCD",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("BOO").exists() set v2=vx("BOO").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("XBRCD",v2,v3)
	#ENDBYPASS
	quit

vi35(RecordDEP dep) // Maintain XCC index entries (Cost Center Cross-Reference)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.cc
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.cls
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.grp
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.type
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XCC(v1,v2,v3,v4,v5)) do vidxerr("XCC")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XCC(v1,v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CC").exists() set v1=vx("CC").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("CLS").exists() set v2=vx("CLS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v3=vx("GRP").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v4=vx("TYPE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XCC(v1,v2,v3,v4,v5)
	#ENDBYPASS
	quit

vi36(RecordDEP dep) // Maintain XCLS index entries (Class/Group/Type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.grp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.type
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XCLS(v1,v2,v3,v4)) do vidxerr("XCLS")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XCLS(v1,v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v2=vx("GRP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v3=vx("TYPE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XCLS(v1,v2,v3,v4)
	#ENDBYPASS
	quit

vi37(RecordDEP dep) // Maintain XCLSACN index entries (Class/Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XCLSACN(v1,v2)) do vidxerr("XCLSACN")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XCLSACN(v1,v2)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XCLSACN(v1,v2)
	#ENDBYPASS
	quit

vi38(RecordDEP dep) // Maintain XCRCD index entries (Currency Code)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.grp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.type
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.crcd
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XCRCD(v1,v2,v3,v4,v5)) do vidxerr("XCRCD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XCRCD(v1,v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v2=vx("GRP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v3=vx("TYPE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("CRCD").exists() set v4=vx("CRCD").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XCRCD(v1,v2,v3,v4,v5)
	#ENDBYPASS
	quit

vi39(RecordDEP dep) // Maintain XIRA index entries (IRA Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.ira
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XIRA(v1,v2)) do vidxerr("XIRA")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XIRA(v1,v2)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("IRA").exists() set v1=vx("IRA").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XIRA(v1,v2)
	#ENDBYPASS
	quit

vi40(RecordDEP dep) // Maintain XNOS index entries (Nostro Account X-REF File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.corre
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = dep.crcd
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XNOS(v1,v2,v3)) do vidxerr("XNOS")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XNOS(v1,v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CORRE").exists() set v1=vx("CORRE").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("CRCD").exists() set v2=vx("CRCD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XNOS(v1,v2,v3)
	#ENDBYPASS
	quit

vi41(RecordDEP dep) // Maintain XODLIM index entries ( Authorized Overdraft Limit)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dep.cid
	type String v2 = dep.commfper
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XODLIM(v1,v2)) do vidxerr("XODLIM")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XODLIM(v1,v2)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("COMMFPER").exists() set v2=vx("COMMFPER").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XODLIM(v1,v2)
	#ENDBYPASS
	quit

vi42(RecordDEP dep) // Maintain XREFRPASEQ index entries (RPASEQ X-REF)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.acn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.rpaseq
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("XRPASEQ",v2,v3,v4)) do vidxerr("XREFRPASEQ")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("XRPASEQ",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ACN").exists() set v2=vx("ACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("RPASEQ").exists() set v3=vx("RPASEQ").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("XRPASEQ",v2,v3,v4)
	#ENDBYPASS
	quit

vi43(RecordDEP dep) // Maintain XREFXLNR index entries (Provision Accounts)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.cls
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = +dep.boo
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.provcat
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = dep.type
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("PROVPOST",v2,v3,v4,v5,v6)) do vidxerr("XREFXLNR")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("PROVPOST",v2,v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v2=vx("CLS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("BOO").exists() set v3=vx("BOO").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PROVCAT").exists() set v4=vx("PROVCAT").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v5=vx("TYPE").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("PROVPOST",v2,v3,v4,v5,v6)
	#ENDBYPASS
	quit

vi44(RecordDEP dep) // Maintain XRSPPLID index entries (RPA index file)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.acn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.rpaseq
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("XPLID",v2,v3,v4)) do vidxerr("XRSPPLID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("XPLID",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ACN").exists() set v2=vx("ACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("RPASEQ").exists() set v3=vx("RPASEQ").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("XPLID",v2,v3,v4)
	#ENDBYPASS
	quit

vi45(RecordDEP dep) // Maintain XSERNUM index entries (Serial Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dep.pbksn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("XSER",v2,v3)) do vidxerr("XSERNUM")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("XSER",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PBKSN").exists() set v2=vx("PBKSN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("XSER",v2,v3)
	#ENDBYPASS
	quit

vi46(RecordDEP dep) // Maintain XVOSTRO index entries (Generate Vostro/MT950)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = +dep.vostro
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = +dep.mt950
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dep.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XVOSTRO(v1,v2,v3)) do vidxerr("XVOSTRO")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XVOSTRO(v1,v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("VOSTRO").exists() set v1=vx("VOSTRO").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("MT950").exists() set v2=vx("MT950").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XVOSTRO(v1,v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DEP")

	while ds.next() do {
		type RecordDEP dep=ds.getRecord("DEP")
		if vlist.contains("VINDEX") do VINDEX(.dep) quit
		if vlist.contains("ACONVACN") do vi1(.dep)
		if vlist.contains("ANLLED") do vi2(.dep)
		if vlist.contains("ANLLINK") do vi3(.dep)
		if vlist.contains("ANLOFFED") do vi4(.dep)
		if vlist.contains("AREF") do vi5(.dep)
		if vlist.contains("AWTI") do vi6(.dep)
		if vlist.contains("BGTRVUDT") do vi7(.dep)
		if vlist.contains("BGTYRND") do vi8(.dep)
		if vlist.contains("COLEXTRDYS") do vi9(.dep)
		if vlist.contains("CTFGRP") do vi10(.dep)
		if vlist.contains("DEPLSP") do vi11(.dep)
		if vlist.contains("DEPSCH") do vi12(.dep)
		if vlist.contains("DLYFEE") do vi13(.dep)
		if vlist.contains("EMPLCTA") do vi14(.dep)
		if vlist.contains("EMPLNO") do vi15(.dep)
		if vlist.contains("GCRCID") do vi16(.dep)
		if vlist.contains("GCRNXDAT") do vi17(.dep)
		if vlist.contains("INDEXAI") do vi18(.dep)
		if vlist.contains("INTINDEX") do vi19(.dep)
		if vlist.contains("ITRF") do vi20(.dep)
		if vlist.contains("MATRIX") do vi21(.dep)
		if vlist.contains("MATRIXAI") do vi22(.dep)
		if vlist.contains("MDT") do vi23(.dep)
		if vlist.contains("MLD") do vi24(.dep)
		if vlist.contains("OID") do vi25(.dep)
		if vlist.contains("RACN") do vi26(.dep)
		if vlist.contains("SCHCON") do vi27(.dep)
		if vlist.contains("SCND") do vi28(.dep)
		if vlist.contains("SVCFEEUF") do vi29(.dep)
		if vlist.contains("SW940") do vi30(.dep)
		if vlist.contains("TREXD") do vi31(.dep)
		if vlist.contains("UPNDT") do vi32(.dep)
		if vlist.contains("XACN") do vi33(.dep)
		if vlist.contains("XBRCD") do vi34(.dep)
		if vlist.contains("XCC") do vi35(.dep)
		if vlist.contains("XCLS") do vi36(.dep)
		if vlist.contains("XCLSACN") do vi37(.dep)
		if vlist.contains("XCRCD") do vi38(.dep)
		if vlist.contains("XIRA") do vi39(.dep)
		if vlist.contains("XNOS") do vi40(.dep)
		if vlist.contains("XODLIM") do vi41(.dep)
		if vlist.contains("XREFRPASEQ") do vi42(.dep)
		if vlist.contains("XREFXLNR") do vi43(.dep)
		if vlist.contains("XRSPPLID") do vi44(.dep)
		if vlist.contains("XSERNUM") do vi45(.dep)
		if vlist.contains("XVOSTRO") do vi46(.dep)
	}

	quit


public VIDXBLD1(RecordDEP dep, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.dep) quit
	if vlist.contains("ACONVACN") do vi1(.dep)
	if vlist.contains("ANLLED") do vi2(.dep)
	if vlist.contains("ANLLINK") do vi3(.dep)
	if vlist.contains("ANLOFFED") do vi4(.dep)
	if vlist.contains("AREF") do vi5(.dep)
	if vlist.contains("AWTI") do vi6(.dep)
	if vlist.contains("BGTRVUDT") do vi7(.dep)
	if vlist.contains("BGTYRND") do vi8(.dep)
	if vlist.contains("COLEXTRDYS") do vi9(.dep)
	if vlist.contains("CTFGRP") do vi10(.dep)
	if vlist.contains("DEPLSP") do vi11(.dep)
	if vlist.contains("DEPSCH") do vi12(.dep)
	if vlist.contains("DLYFEE") do vi13(.dep)
	if vlist.contains("EMPLCTA") do vi14(.dep)
	if vlist.contains("EMPLNO") do vi15(.dep)
	if vlist.contains("GCRCID") do vi16(.dep)
	if vlist.contains("GCRNXDAT") do vi17(.dep)
	if vlist.contains("INDEXAI") do vi18(.dep)
	if vlist.contains("INTINDEX") do vi19(.dep)
	if vlist.contains("ITRF") do vi20(.dep)
	if vlist.contains("MATRIX") do vi21(.dep)
	if vlist.contains("MATRIXAI") do vi22(.dep)
	if vlist.contains("MDT") do vi23(.dep)
	if vlist.contains("MLD") do vi24(.dep)
	if vlist.contains("OID") do vi25(.dep)
	if vlist.contains("RACN") do vi26(.dep)
	if vlist.contains("SCHCON") do vi27(.dep)
	if vlist.contains("SCND") do vi28(.dep)
	if vlist.contains("SVCFEEUF") do vi29(.dep)
	if vlist.contains("SW940") do vi30(.dep)
	if vlist.contains("TREXD") do vi31(.dep)
	if vlist.contains("UPNDT") do vi32(.dep)
	if vlist.contains("XACN") do vi33(.dep)
	if vlist.contains("XBRCD") do vi34(.dep)
	if vlist.contains("XCC") do vi35(.dep)
	if vlist.contains("XCLS") do vi36(.dep)
	if vlist.contains("XCLSACN") do vi37(.dep)
	if vlist.contains("XCRCD") do vi38(.dep)
	if vlist.contains("XIRA") do vi39(.dep)
	if vlist.contains("XNOS") do vi40(.dep)
	if vlist.contains("XODLIM") do vi41(.dep)
	if vlist.contains("XREFRPASEQ") do vi42(.dep)
	if vlist.contains("XREFXLNR") do vi43(.dep)
	if vlist.contains("XRSPPLID") do vi44(.dep)
	if vlist.contains("XSERNUM") do vi45(.dep)
	if vlist.contains("XVOSTRO") do vi46(.dep)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DEP","MSG",1225,"DEP."_di)

	quit


vkchged // Access key changed

	type public RecordDEP dep

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(dep,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(dep,-3) = vnewkey  // Copy new keys into object
	type RecordDEP vnewrec = dep.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(dep,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordDEP dep
	type public String vpar

	type String vERRMSG

	do Db.delete("DAYENDINP","CID=:dep.cid",vpar)          // Cascade delete

	do Db.delete("DEPSCH","CID=:dep.cid",vpar)             // Cascade delete

	do Db.delete("DEPSEG","CID=:dep.cid",vpar)             // Cascade delete

	if Db.isDefined("DEPSWIFT","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"DEPSWIFT(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	if Db.isDefined("EFUNDS","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"EFUNDS(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("LNLS1","ESCWASH=:dep.cid",vpar)          // Cascade delete

	do Db.delete("LNLS1","PIWASH=:dep.cid",vpar)           // Cascade delete

	type ResultSet rs8=Db.select("ESCWASH","LNLS2","ESCWASH=:dep.cid") // Restriction on delete
	if 'rs8.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(ESCWASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs9=Db.select("WASH","LNLS2","WASH=:dep.cid") // Restriction on delete
	if 'rs9.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(WASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("RAMT","CID=:dep.cid",vpar)               // Cascade delete

	do Db.delete("DAYENDINP","CID=:dep.cid",vpar)          // Cascade delete

	do Db.delete("DEPSCH","CID=:dep.cid",vpar)             // Cascade delete

	do Db.delete("DEPSEG","CID=:dep.cid",vpar)             // Cascade delete

	if Db.isDefined("DEPSWIFT","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"DEPSWIFT(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	if Db.isDefined("EFUNDS","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"EFUNDS(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("LNLS1","ESCWASH=:dep.cid",vpar)          // Cascade delete

	do Db.delete("LNLS1","PIWASH=:dep.cid",vpar)           // Cascade delete

	type ResultSet rs18=Db.select("ESCWASH","LNLS2","ESCWASH=:dep.cid") // Restriction on delete
	if 'rs18.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(ESCWASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs19=Db.select("WASH","LNLS2","WASH=:dep.cid") // Restriction on delete
	if 'rs19.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(WASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("RAMT","CID=:dep.cid",vpar)               // Cascade delete

	quit

VIDXPGM()	quit "DEPFILE"	// Location of index program

