SRCFILE(RecordUTBLSRC utblsrc, String vpar, Boolean vparNorm) // UTBLSRC - Posting Source Data Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (13)             11/22/2003
	// Trigger Definition (1)                      08/23/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblsrc.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblsrc,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblsrc,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SRCTYP = utblsrc.srctyp
	type String KEY = utblsrc.key

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SRCTYP").exists()!vx("KEY").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLSRC",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLSRC","SRCTYP = :utblsrc.srctyp and KEY = :utblsrc.key") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SRCTYP
	type public String KEY

	type RecordUTBLSRC utblsrc = Db.getRecord("UTBLSRC","SRCTYP=:SRCTYP,KEY=:KEY")
	if (%ProcessMode = 2) do {
		do utblsrc.setMode(2)

		do SRCFILE(utblsrc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLSRC utblsrc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLSRC","SRCTYP = :utblsrc.srctyp and KEY = :utblsrc.key") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblsrc,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblsrc,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblsrc))  S ^UTBL("SRC",vobj(utblsrc,-3),vobj(utblsrc,-4))=vobj(utblsrc)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLSRC utblsrc

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblsrc,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("SRC",vobj(utblsrc,-3),vobj(utblsrc,-4))     // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLSRC utblsrc

	// Type local variables for access keys for defaults
	type public String SRCTYP
	type public String KEY

	if utblsrc.brcd.isNull() set utblsrc.brcd = 0          // brcd
	if utblsrc.eodp.isNull() set utblsrc.eodp = 0          // eodp
	if utblsrc.newtlr.isNull() set utblsrc.newtlr = 0      // newtlr
	if utblsrc.odp.isNull() set utblsrc.odp = 0            // odp
	if utblsrc.patfee.isNull() set utblsrc.patfee = 0      // patfee
	if utblsrc.paydis.isNull() set utblsrc.paydis = 0      // paydis
	quit


vreqn // Validate required data items

	type public RecordUTBLSRC utblsrc

	if utblsrc.desc.isNull() do vreqerr("DESC") quit
	if utblsrc.eodp.isNull() do vreqerr("EODP") quit
	if utblsrc.newtlr.isNull() do vreqerr("NEWTLR") quit
	if utblsrc.odp.isNull() do vreqerr("ODP") quit
	if utblsrc.patfee.isNull() do vreqerr("PATFEE") quit
	if utblsrc.paydis.isNull() do vreqerr("PAYDIS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLSRC utblsrc

	if utblsrc.srctyp.isNull() do vreqerr("SRCTYP") quit
	if utblsrc.key.isNull() do vreqerr("KEY") quit

		if vx("DESC").exists(),utblsrc.desc.isNull() do vreqerr("DESC") quit
		if vx("EODP").exists(),utblsrc.eodp.isNull() do vreqerr("EODP") quit
		if vx("NEWTLR").exists(),utblsrc.newtlr.isNull() do vreqerr("NEWTLR") quit
		if vx("ODP").exists(),utblsrc.odp.isNull() do vreqerr("ODP") quit
		if vx("PATFEE").exists(),utblsrc.patfee.isNull() do vreqerr("PATFEE") quit
		if vx("PAYDIS").exists(),utblsrc.paydis.isNull() do vreqerr("PAYDIS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLSRC","MSG",1767,"UTBLSRC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vbd1 // Trigger BEFORE_DELETE - BEFORE DELETE TRIGGER

	type public RecordUTBLSRC utblsrc

	/*
	----Revision History---------------------------------------------------
		
	05/08/06 - Chaithra - CR 22004
		   Inserted BEFORE_DELETE Trigger in order to prevent PAT source 
		   from being deleted if it is linked to a Preauthorised Transfer. 
		   
	*/
					 
	if utblsrc.srctyp'="PAT" quit
							 
								type ResultSet rs1=Db.select("ACN","PAT1","SRC=:utblsrc.key")
							 
								// Cannot delete ... Associated with preauthorized transfer.
								if rs1.next() do Runtime.setErrMSG("UTBLSRC",430) quit

								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLSRC utblsrc

	set X = utblsrc.srctyp if 'X.isNull(),'Db.isDefined("STBLVSRC","X") set vRM = $$^MSG(1485,X) do vdderr("SRCTYP", vRM) quit
	if utblsrc.key.length()>12 set vRM = $$^MSG(1076,12) do vdderr("KEY", vRM) quit
	set X = utblsrc.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	if utblsrc.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	if '("01"[utblsrc.EODP) set vRM=$$^MSG(742,"L") do vdderr("EODP", vRM) quit
	set X = utblsrc.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[UTBLSRC]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	set X = utblsrc.lpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LPD", vRM) quit
	if '("01"[utblsrc.NEWTLR) set vRM=$$^MSG(742,"L") do vdderr("NEWTLR", vRM) quit
	set X = utblsrc.npd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NPD", vRM) quit
	if '("01"[utblsrc.ODP) set vRM=$$^MSG(742,"L") do vdderr("ODP", vRM) quit
	if '("01"[utblsrc.PATFEE) set vRM=$$^MSG(742,"L") do vdderr("PATFEE", vRM) quit
	if '("01"[utblsrc.PAYDIS) set vRM=$$^MSG(742,"L") do vdderr("PAYDIS", vRM) quit
	set X = utblsrc.uid if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLSRC","MSG",979,"UTBLSRC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLSRC utblsrc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SRCTYP").exists() set vux("SRCTYP") = vx("SRCTYP")
	if vx("KEY").exists() set vux("KEY") = vx("KEY")
	do vkey(1) set voldkey = utblsrc.srctyp_","_utblsrc.key // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblsrc.srctyp_","_utblsrc.key // Copy new keys into object
	type RecordUTBLSRC vnewrec = utblsrc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLSRC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLSRC utblsrc

	if vux("SRCTYP").exists() set utblsrc.srctyp = vux("SRCTYP").piece("|",i)
	if vux("KEY").exists() set utblsrc.key = vux("KEY").piece("|",i)
	quit
