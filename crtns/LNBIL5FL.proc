LNBIL5FL(RecordLNBIL5 lnbil5, String vpar, Boolean vparNorm) // LNBIL5 - Internal Bill for Loan Fees Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Trigger Definition (4)                      12/17/2004
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnbil5.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnbil5,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnbil5,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnbil5.cid
	type String SCHSEQ = lnbil5.schseq
	type String DUEAMT = lnbil5.dueamt
	type String FEETYP = lnbil5.feetyp

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SCHSEQ").exists()!vx("DUEAMT").exists()!vx("FEETYP").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNBIL5",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNBIL5","CID = :lnbil5.cid and SCHSEQ = :lnbil5.schseq and DUEAMT = :lnbil5.dueamt and FEETYP = :lnbil5.feetyp") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SCHSEQ
	type public String DUEAMT
	type public String FEETYP

	type RecordLNBIL5 lnbil5 = Db.getRecord("LNBIL5","CID=:CID,SCHSEQ=:SCHSEQ,DUEAMT=:DUEAMT,FEETYP=:FEETYP")
	if (%ProcessMode = 2) do {
		do lnbil5.setMode(2)

		do LNBIL5FL(lnbil5,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNBIL5 lnbil5

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNBIL5","CID = :lnbil5.cid and SCHSEQ = :lnbil5.schseq and DUEAMT = :lnbil5.dueamt and FEETYP = :lnbil5.feetyp") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnbil5))  S ^BIL(vobj(lnbil5,-3),vobj(lnbil5,-4),"FEE",vobj(lnbil5,-5),vobj(lnbil5,-6))=vobj(lnbil5)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnbil5)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNBIL5 lnbil5

	if vpar["/JOURNAL/" do VJOURNAL(.lnbil5)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^BIL(vobj(lnbil5,-3),vobj(lnbil5,-4),"FEE",vobj(lnbil5,-5),vobj(lnbil5,-6)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNBIL5 lnbil5

	// Type local variables for access keys for defaults
	type public String CID
	type public String SCHSEQ
	type public String DUEAMT
	type public String FEETYP

	if lnbil5.dueamt.isNull() set lnbil5.dueamt = 0        // dueamt
	quit


vreqn // Validate required data items

	type public RecordLNBIL5 lnbil5

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNBIL5 lnbil5

	if lnbil5.cid.isNull() do vreqerr("CID") quit
	if lnbil5.schseq.isNull() do vreqerr("SCHSEQ") quit
	if lnbil5.dueamt.isNull() do vreqerr("DUEAMT") quit
	if lnbil5.feetyp.isNull() do vreqerr("FEETYP") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNBIL5","MSG",1767,"LNBIL5."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNBIL5 lnbil5
	if 'lnbil5.schseq.isNull() set vfkey("^BIL("_""""_lnbil5.cid_""""_","_""""_lnbil5.schseq_""""_")")="LNBIL5(CID,SCHSEQ) -> LNBIL1"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNBIL5 lnbil5
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LNBIL1",":lnbil5.cid,:lnbil5.schseq") set vERRMSG = $$^MSG(8563,"LNBIL5(CID,SCHSEQ) -> LNBIL1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNBIL5 lnbil5
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnbil5,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - LNBIL5 After Insert Trigger

	type public RecordLNBIL5 lnbil5
	/*
	-----Revision History--------------------------------------------------
	
	12/20/99 - CARROLLJ - 31126
		   PSL conversion cleanup.

	10/19/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/


	// Processing only necessary if payment record top level exists
	if 'Db.isDefined("LNBIL1","lnbil5.cid,lnbil5.schseq") quit
	type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SCHSEQ")
	
	// Processing only appropriate if amount is included in payment file
	if lnbil5.dueamt'=1 quit 
	
	do EXEC^PROCLNB1("LNBIL5","insert","after",lnbil5.cid,lnbil5.schseq,.lnbil1,.lnbil5)
	
	quit 

vau1 // Trigger AFTER_UPDATE - LNBIL5 After Update Trigger

	type public RecordLNBIL5 lnbil5
	type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SCHSEQ")	
	do EXEC^PROCLNB1("LNBIL5","update","after",lnbil5.cid,lnbil5.schseq,.lnbil1,.lnbil5)
	
	quit 

vbi1 // Trigger BEFORE_INSERT - LNBIL5 Before Insert Trigger

	type public RecordLNBIL5 lnbil5
	// Processing only necessary if payment record top level exists
	if 'Db.isDefined("LNBIL1","lnbil5.cid,lnbil5.schseq") quit
	
	// Processing only appropriate if amount is included in payment file
	if lnbil5.dueamt'=1 quit 
	
	// Establish value of "billed" amount
	if lnbil5.brfamt'="" set lnbil5.bfamt=lnbil5.brfamt

	//type RecordLNBIL1 lnbil1=Class.new("RecordLNBIL1")
	type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SCHSEQ")
	
	do EXEC^PROCLNB1("LNBIL5","insert","before",lnbil5.cid,lnbil5.schseq,.lnbil1,.lnbil5)
	
	quit 

vbu1 // Trigger BEFORE_UPDATE - LNBIL5 Before Update Trigger

	type public RecordLNBIL5 lnbil5
	do lnbil5.setAuditFlag(1)
	/*
	Revision History
	11/29/01 - SKLYUTD - 47955:02
		   Removed the isChanged("","SYSTEM") logic.
		   It was missused in this case.  We would never
		   fall into the if with it in place.

	02/11/00 - CHOK - 31126
		   Converted isChanged method.
	*/

	type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SCHSEQ")
	
	// In maintenance mode, change total by same amount as due
	if (lnbil5.isChanged("BRFAMT")) do {
		new change
		set change=lnbil5.brfamt-lnbil5.brfamt.oldVal
		set lnbil5.bfamt=lnbil5.bfamt+change
		quit 
		}
	
	do EXEC^PROCLNB1("LNBIL5","update","before",lnbil5.cid,lnbil5.schseq,.lnbil1,.lnbil5)
	
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNBIL5 lnbil5

	set X = lnbil5.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = lnbil5.schseq if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,1,,,,,8) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL5.SCHSEQ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnbil5.DUEAMT) set vRM=$$^MSG(742,"L") do vdderr("DUEAMT", vRM) quit
	if lnbil5.feetyp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FEETYP", vRM) quit
	set X = lnbil5.bfamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL5.BFAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil5.brfamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL5.BRFAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNBIL5","MSG",979,"LNBIL5."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNBIL5 lnbil5)	//LNBIL5 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.lnbil5)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I
			}
		else  if TSRC="O" do {
			do vj1(.lnbil5)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			quit:'vx.data()
			if vx("BRFAMT").data() do vj2(.lnbil5,"BRFAMT")	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			quit:'vx.data()
			if vx("BRFAMT").data() do vj2(.lnbil5,"BRFAMT")	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNBIL5 lnbil5)	// HIST_I  Table HIST  Update History for LNBIL5 Insert

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnbil5.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL5^PROCLNBL("insert",lnbil5.cid,lnbil5.schseq,"LNBIL5",,0,lnbil5.brfamt,lnbil5.feetyp)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNBIL5 lnbil5,String vdi)	// HIST_U  Table HIST  Update History for LNBIL5 Update

	type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey

	type String vold

	set vold=vx(vdi).piece("|",1)

	set v1=lnbil5.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL5^PROCLNBL("update",lnbil5.cid,lnbil5.schseq,"LNBIL5",,vold,lnbil5.brfamt,lnbil5.feetyp)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNBIL5 lnbil5

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SCHSEQ").exists() set vux("SCHSEQ") = vx("SCHSEQ")
	if vx("DUEAMT").exists() set vux("DUEAMT") = vx("DUEAMT")
	if vx("FEETYP").exists() set vux("FEETYP") = vx("FEETYP")
	do vkey(1) set voldkey = lnbil5.cid_","_lnbil5.schseq_","_lnbil5.dueamt_","_lnbil5.feetyp // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnbil5.cid_","_lnbil5.schseq_","_lnbil5.dueamt_","_lnbil5.feetyp // Copy new keys into object
	type RecordLNBIL5 vnewrec = lnbil5.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNBIL5",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNBIL5 lnbil5

	if vux("CID").exists() set lnbil5.cid = vux("CID").piece("|",i)
	if vux("SCHSEQ").exists() set lnbil5.schseq = vux("SCHSEQ").piece("|",i)
	if vux("DUEAMT").exists() set lnbil5.dueamt = vux("DUEAMT").piece("|",i)
	if vux("FEETYP").exists() set lnbil5.feetyp = vux("FEETYP").piece("|",i)
	quit
