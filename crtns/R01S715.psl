R01S715	// YER448 - NR4 Earnings Magnetic Tape Reporting
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:04 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String PROTVAL
	type String TAPETBL()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number TAPETYPE

	set RID="YER448"
	set RN="NR4 Earnings Magnetic Tape Reporting"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("TAPETYPE")="|1|||TAPETBL(||||N|Tape Type|||||"

	set %READ="IO/REQ,TAPETYPE#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String PROTVAL
	type public String TAPETBL()
	type public Number TAPETYPE
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ACN,ACNRELC,BOO,BRAD1,BRAD2,BRCITY,BRCNTRY,BRNAME,BRSTATE,BRTOT(),BRZIP,CAC,CCODE,CID,CNAME,CONAM,CONTACT,CTELE,DATA(),DIST1,DIST2,EXCODE,EXCODE2,IAD1,IAD2,ICITY,INAME,INAME2,INCD1,INCD2,ISTATE,IZIP,LNM2,NAM2,NCODE,NR4REC,NRTRN,RCODE,RID,RN,SBI,SIN,SUMCNT,TCC,TCRCD,VL,VLOF,VRF(),VSTATS(),WHLD1,WHLD2,YEAR,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="YER448",RN="NR4 Earnings Magnetic Tape Reporting"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YER448","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=353")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[CIF]LNM#4#20,[CIF]NAM#24#12,[CIF]NAM#70#30,[CIF]MAD1#130#30,[CIF]MAD2#160#30,[CIF]MCITY#190#28,[CIF]MSTATE#218#2,[CIF]MZIP#223#10,[NR4EINF]ACN#272#12"

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:3 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("NR4EINF.BOO,NR4EINF.ACN,NR4EINF.CID,CIF.LNM,CIF.NAM,CIF.MAD1,CIF.MAD2,CIF.MCITY,CIF.MSTATE,CIF.MZIP,CIF.PERS,CIF.MCNTRY,CIF.NRCNTRY,CIF.TAXID","NR4EINF,CIF","","NR4EINF.ACN,NR4EINF.BOO,NR4EINF.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc2,vovc1,vovc3
	set vovc2="",vovc1="",vovc3=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc2,vc2,vovc1,vc1,vovc3,vc3
	set vovc2=vc2,vovc1=vc1,vovc3=vc3
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14
	set vc1=V.piece($C(9),1)			// NR4EINF.BOO
	set vc2=V.piece($C(9),2)			// NR4EINF.ACN
	set vc3=V.piece($C(9),3)			// NR4EINF.CID
	set vc4=V.piece($C(9),4)			// CIF.LNM
	set vc5=V.piece($C(9),5)			// CIF.NAM
	set vc6=V.piece($C(9),6)			// CIF.MAD1
	set vc7=V.piece($C(9),7)			// CIF.MAD2
	set vc8=V.piece($C(9),8)			// CIF.MCITY
	set vc9=V.piece($C(9),9)			// CIF.MSTATE
	set vc10=V.piece($C(9),10)			// CIF.MZIP
	set vc11=V.piece($C(9),11)			// CIF.PERS
	set vc12=V.piece($C(9),12)			// CIF.MCNTRY
	set vc13=V.piece($C(9),13)			// CIF.NRCNTRY
	set vc14=V.piece($C(9),14)			// CIF.TAXID
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1
 type Number BOO
 type public String NRTRN

 set BOO=vc1
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")
 set NRTRN=utblbrcd.nrtrn
 set NRTRN=NRTRN.extract(1,15)
	quit

VPREAQ	// Pre-processor (after query)

 type public Number YEAR
 
 set YEAR=$$YEAR^SCADAT(%SystemDate)-1

 quit
                          
ZDATABLD // Build DATA array
                          
 type public Number ACN,BOO,BRTOT(),CID
 type public String ACNRELC,DATA()

 type Number GI,INCD
 type ResultSet rs=Db.select("CID,ACNRELC","DEP","ACN=:ACN","CID")
 if rs.next() do {
	set ACNRELC=rs.getCol("ACNRELC")
	set CID=rs.getCol("CID")
	}
 
 type RecordNR4EINF nr4einf=Db.getRecord("NR4EINF","ACN=:ACN,BOO=:BOO,CID=:CID",1)
 if nr4einf.nri do { quit
 	set GI=nr4einf.gi if GI<0 set GI=0
 	set BRTOT(5)=BRTOT(5)+((GI.roundDec(2)*100)\1)
 	set BRTOT(6)=BRTOT(6)+(((nr4einf.ntw).roundDec(2)*100)\1)
 	}
 set INCD=nr4einf.inccd
 set DATA(INCD).piece("|",1)=INCD
 set DATA(INCD).piece("|",2)="CAD"
 set DATA(INCD).piece("|",3)=(DATA(INCD).get()).piece("|",3)+nr4einf.gic
 set DATA(INCD).piece("|",4)=(DATA(INCD).get()).piece("|",4)+nr4einf.cfwa
 set DATA(INCD).piece("|",5)=(DATA(INCD).get()).piece("|",5)+nr4einf.cntw
 set DATA(INCD).piece("|",5)=(DATA(INCD).get()).piece("|",5)+nr4einf.cntw
	quit

VPREBQ	// Pre-processor (before query)

        /*
        ---- Revision History -----------------------------------------------
        30/05/07 - Lan - CR 24982
                   Added logic for the Tax ID masking.
        */

        //Incoming=PROTVAL

        type public String TAPETBL()
        type public Number PROTVAL

        set TAPETBL(1)="Original Run"
        set TAPETBL(2)="Test Run"
        set TAPETBL(3)="Replacement Run"

        /*
        Check if the data item protection scheme is set up on the
        CIF.TAXID column corresponding to report's SIN variable field.
        After the protection value on the column is determined, and appears
        that a user class has no access to the column's value, the SIN field
        will be masked in its pre-processor.
        */
        type ResultSet rs = Db.select("TAXID","CIF",,,,"/PROTECTION=2")
        if rs.next() set PROTVAL = rs.getColProt("TAXID")
        else  set PROTVAL = ""
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(1).get() do VDTL1 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(3)
	type Public String vc2,vovc2,vc1,vovc1,vc3,vovc3
	type Number vb1,vb2,vb3
	set (vb1,vb2,vb3)=0
	if vb1!(+vovc2'=+vc2) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,VH0=1
	if vb2!(+vovc1'=+vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(3) set vs(3)=1 do VSUM3 quit:VFMQ  do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(3)=VT(3)+1
	quit

VDTL1	// Detail
	type public String ACN,ACNRELC,BOO,BRAD1,BRAD2,BRCITY,BRCNTRY,BRNAME,BRSTATE,BRTOT(),BRZIP,CAC,CCODE,CID,CNAME,CONTACT,CTELE,DATA(),DIST1,DIST2,EXCODE,EXCODE2,IAD1,IAD2,ICITY,INAME,INAME2,INCD1,INCD2,IOSL,ISTATE,IZIP,LNM2,NAM2,NCODE,NR4REC,NRTRN,PROTVAL,RCODE,SBI,SIN,SUMCNT,TAPETBL(),TAPETYPE,TCC,TCRCD,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),WHLD1,WHLD2,YEAR,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3

	quit:VD(1)  set VD(1)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="220"
	set V=vc4,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(V,1,20)
	set VL=VL_$J("",3-VL.length())_V		// [SYSDEV,CIF]LNM
	set V=vc5,VO=V do VP2 quit:VFMQ!verror.get()  set V=$E(V,1,12)
	set VL=VL_$J("",23-VL.length())_V		// [SYSDEV,CIF]NAM
	do VP3 quit:VFMQ!verror.get()  set V=$E(LNM2,1,20)
	set VL=VL_$J("",36-VL.length())_V
	set VL=VL_$J("",56-VL.length())_$E(NAM2,1,12)
	set V=vc5,VO=V do VP4 quit:VFMQ!verror.get()  set V=$E(V,1,30)
	set VL=VL_$J("",69-VL.length())_V		// [SYSDEV,CIF]NAM
	set VL=VL_$J("",129-VL.length())_$E(vc6,1,30)
	set VL=VL_$J("",159-VL.length())_$E(vc7,1,30)
	set VL=VL_$J("",189-VL.length())_$E(vc8,1,28)
	set V=vc9,VO=V do VP5 quit:VFMQ!verror.get()  set V=$E(V,1,2)
	set VL=VL_$J("",217-VL.length())_V		// [SYSDEV,CIF]MSTATE
	do VP6 quit:VFMQ!verror.get()  set V=$E(RCODE,1,3)
	set VL=VL_$J("",219-VL.length())_V
	set VL=VL_$J("",222-VL.length())_$E(vc10,1,10)
	do VP7 quit:VFMQ!verror.get()  set V=$E(NCODE,1,3)
	set VL=VL_$J("",232-VL.length())_V
	do VP8 quit:VFMQ!verror.get()  set V=$E(SIN,1,20)
	set VL=VL_$J("",235-VL.length())_V
	do VP9 quit:VFMQ!verror.get()  set V=$E(NRTRN,1,15)
	set VL=VL_$J("",255-VL.length())_V
	do VP10 quit:VFMQ!verror.get()  set V=$J(NR4REC,1)
	set VL=VL_$J("",270-VL.length())_V
	set VL=VL_$J("",271-VL.length())_$J(vc2,12)
	do VP11 quit:VFMQ!verror.get()  set V=$E(10E30_INCD1,31+$L(INCD1),99)
	set VL=VL_$J("",291-VL.length())_V
	do VP12 quit:VFMQ!verror.get()  set V=$E(TCRCD,1,3)
	set VL=VL_$J("",293-VL.length())_V
	set VL=VL_$J("",296-VL.length())_$E(10E30_DIST1,22+$L(DIST1),99)
	set VL=VL_$J("",307-VL.length())_$E(10E30_WHLD1,22+$L(WHLD1),99)
	do VP13 quit:VFMQ!verror.get()  set V=$E(EXCODE,1,1)
	set VL=VL_$J("",318-VL.length())_V
	set VL=VL_$J("",319-VL.length())_$E(10E30_INCD2,31+$L(INCD2),99)
	do VP14 quit:VFMQ!verror.get()  set V=$E(TCRCD,1,3)
	set VL=VL_$J("",321-VL.length())_V
	set VL=VL_$J("",324-VL.length())_$E(10E30_DIST2,22+$L(DIST2),99)
	set VL=VL_$J("",335-VL.length())_$E(10E30_WHLD2,22+$L(WHLD2),99)
	do VP15 quit:VFMQ!verror.get()  set V=$E(EXCODE2,1,1)
	set VL=VL_$J("",346-VL.length())_V
	do VOM
	quit

VSUM3	// Summary
	type public String ACN,ACNRELC,BOO,BRAD1,BRAD2,BRCITY,BRCNTRY,BRNAME,BRSTATE,BRTOT(),BRZIP,CAC,CCODE,CID,CNAME,CONTACT,CTELE,DATA(),DIST1,DIST2,EXCODE,EXCODE2,I,IAD1,IAD2,ICITY,INAME,INAME2,INCD1,INCD2,IOSL,ISTATE,IZIP,LNM2,NAM2,NCODE,NR4REC,NRTRN,PROTVAL,RCODE,SBI,SIN,SUMCNT,TAPETBL(),TAPETYPE,TCC,TCRCD,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),WHLD1,WHLD2,YEAR,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3

	if 'VT(3) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ

	set VL="421"
	do VP16 quit:VFMQ!verror.get()  set V=$E(NRTRN,1,15)
	set VL=VL_$J("",3-VL.length())_V
	do VP17 quit:VFMQ!verror.get()  set V=$E(CNAME,1,30)
	set VL=VL_$J("",18-VL.length())_V
	do VP18 quit:VFMQ!verror.get()  set V=$E(BRNAME,1,30)
	set VL=VL_$J("",48-VL.length())_V
	set VL=VL_$J("",108-VL.length())_$E(BRAD1,1,30)
	set VL=VL_$J("",138-VL.length())_$E(BRAD2,1,30)
	set VL=VL_$J("",168-VL.length())_$E(BRCITY,1,28)
	set VL=VL_$J("",196-VL.length())_$E(BRSTATE,1,2)
	set VL=VL_$J("",198-VL.length())_$E(BRCNTRY,1,3)
	set VL=VL_$J("",201-VL.length())_$E(BRZIP,1,10)
	do VP19 quit:VFMQ!verror.get()  set V=$E(CONTACT,1,22)
	set VL=VL_$J("",211-VL.length())_V
	do VP20 quit:VFMQ!verror.get()  set V=$J(CAC,3)
	set VL=VL_$J("",233-VL.length())_V
	do VP21 quit:VFMQ!verror.get()  set V=$J(CTELE,7)
	set VL=VL_$J("",236-VL.length())_V
	set VL=VL_$J("",243-VL.length())_$E(10E30_YEAR,29+$L(YEAR),99)
	set VL=VL_$J("",247-VL.length())_$E(10E30_BRTOT(0),26+$L(BRTOT(0)),99)
	set VL=VL_$J("",254-VL.length())_$E("1",1,1)
	set VL=VL_$J("",255-VL.length())_$E(10E30_BRTOT(1),20+$L(BRTOT(1)),99)
	set VL=VL_$J("",268-VL.length())_$E(10E30_BRTOT(2),20+$L(BRTOT(2)),99)
	set VL=VL_$J("",281-VL.length())_$E(10E30_BRTOT(3),20+$L(BRTOT(3)),99)
	set VL=VL_$J("",294-VL.length())_$E(10E30_BRTOT(4),20+$L(BRTOT(4)),99)
	set VL=VL_$J("",307-VL.length())_$E(10E30_BRTOT(5),20+$L(BRTOT(5)),99)
	set VL=VL_$J("",320-VL.length())_$E(10E30_BRTOT(6),20+$L(BRTOT(6)),99)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ACN,ACNRELC,BOO,BRAD1,BRAD2,BRCITY,BRCNTRY,BRNAME,BRSTATE,BRTOT(),BRZIP,CAC,CCODE,CID,CNAME,CONAM,CONTACT,CTELE,DATA(),DIST1,DIST2,EXCODE,EXCODE2,IAD1,IAD2,ICITY,INAME,INAME2,INCD1,INCD2,ISTATE,IZIP,LNM2,NAM2,NCODE,NR4REC,NRTRN,PROTVAL,RCODE,RID,RN,SBI,SIN,SUMCNT,TAPETBL(),TAPETYPE,TCC,TCRCD,VL,WHLD1,WHLD2,YEAR,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+1,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL="916"
	set VL=VL_$J("",3-VL.length())_$E(10E30_TAPETYPE,32+$L(TAPETYPE),99)
	do VP22 quit:VFMQ!verror.get()  set V=$E(TCC,1,8)
	set VL=VL_$J("",4-VL.length())_V
	do VP23 quit:VFMQ!verror.get()  set V=$E(10E30_SBI,32+$L(SBI),99)
	set VL=VL_$J("",12-VL.length())_V
	do VP24 quit:VFMQ!verror.get()  set V=$E(10E30_SUMCNT,27+$L(SUMCNT),99)
	set VL=VL_$J("",13-VL.length())_V
	do VP25 quit:VFMQ!verror.get()  set V=$E(INAME,1,30)
	set VL=VL_$J("",19-VL.length())_V
	do VP26 quit:VFMQ!verror.get()  set V=$E(INAME2,1,30)
	set VL=VL_$J("",49-VL.length())_V
	do VP27 quit:VFMQ!verror.get()  set V=$E(IAD1,1,30)
	set VL=VL_$J("",79-VL.length())_V
	do VP28 quit:VFMQ!verror.get()  set V=$E(IAD2,1,30)
	set VL=VL_$J("",109-VL.length())_V
	do VP29 quit:VFMQ!verror.get()  set V=$E(ICITY,1,28)
	set VL=VL_$J("",139-VL.length())_V
	do VP30 quit:VFMQ!verror.get()  set V=$E(ISTATE,1,2)
	set VL=VL_$J("",167-VL.length())_V
	do VP31 quit:VFMQ!verror.get()  set V=$E(CCODE,1,3)
	set VL=VL_$J("",169-VL.length())_V
	do VP32 quit:VFMQ!verror.get()  set V=$E(IZIP,1,10)
	set VL=VL_$J("",172-VL.length())_V
	do VP33 quit:VFMQ!verror.get()  set V=$E(CONTACT,1,22)
	set VL=VL_$J("",182-VL.length())_V
	do VP34 quit:VFMQ!verror.get()  set V=$E(10E30_CAC,30+$L(CAC),99)
	set VL=VL_$J("",204-VL.length())_V
	do VP35 quit:VFMQ!verror.get()  set V=$E(10E30_CTELE,26+$L(CTELE),99)
	set VL=VL_$J("",207-VL.length())_V
	set VL=VL_$J("",214-VL.length())_$E("E",1,1)
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number VLC
	type Public String IO,VL

	use IO
	write VL_$J("",352-VL.length()),!
	set VL="",VLC=VLC+1
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,CIF]LNM

	type public String vc11
 type public String V

 if vc11=1 set V=""
	quit

VP2	// Column pre-processor - [SYSDEV,CIF]NAM

	type public String vc11
 type public String V
 
 type Number B,E
 type String X 
 
 if vc11=1 set V="" quit
 // Set V to first name only. Find 1st non blank character then find 1st blank
 // character. set V to everything from 1st non-blank to 1st blank after - 1.
 set X=V,V=""
 for B=1:1:X.length() quit:X.extract(B)'=" "
 for E=B:1:X.length() quit:X.extract(E)=" "
 set V=X.extract(B,E-1)

	quit

VP3	// Column pre-processor - Variable: LNM2

	type public String vc11
 type public String LNM2,NAM2

 type Number B,E
 type String X

 set (LNM2,NAM2)=""

 if vc11=1 quit
                          
 type ResultSet rs=Db.select("NAM,LNM","CIF",,"ACN DESC")
 if rs.next() do {
 	set NAM2=rs.getCol("NAM")
 	set LNM2=rs.getCol("LNM")
 	}

 // Set NAM2 to first name only. Find 1st non blank character then find 1st blank
 // character. set NAM2 to everything from 1st non-blank to 1st blank after - 1.

 set X=NAM2,NAM2=""
 for B=1:1:X.length() quit:X.extract(B)'=" "
 for E=B:1:X.length() quit:X.extract(E)=" "
 set NAM2=X.extract(B,E-1)

	quit

VP4	// Column pre-processor - [SYSDEV,CIF]NAM

	type public String vc11
 type public String V
 
 if vc11'=1 set V=""

	quit

VP5	// Column pre-processor - [SYSDEV,CIF]MSTATE

	type public String vc12
 type public String V
 
 if (vc12="US")!(vc12="CA") quit
 set V="ZZ"

	quit

VP6	// Column pre-processor - Variable: RCODE

	type public String vc12
 type public String RCODE
 
 type String CNTRY
 
 set RCODE="   "
 set CNTRY=vc12
 if 'CNTRY.isNull() do {
 	type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY",1)
 	set RCODE=cntry.isoc
 	}

	quit

VP7	// Column pre-processor - Variable: NCODE

	type public String vc13
 type public String NCODE
 
 type String CNTRY
 
 set NCODE="   "
 set CNTRY=vc13
 if 'CNTRY.isNull() do {
 	type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY",1)
 	set NCODE=cntry.isoc
 	}

	quit

VP8	// Column pre-processor - Variable: SIN

	type public String vc14
        type public String SIN = ""
        type public Number PROTVAL

        set SIN=vc14
        if SIN="" set SIN="00000000000000000000" quit

        // Field should be masked
        if PROTVAL = 3 set SIN = "********************"
	quit

VP9	// Column pre-processor - Variable: NRTRN

	type public String vc2,vc1
 type public Number ACN,BOO,DIST1,DIST2,INCD1,INCD2,RPASEQ,WHLD1,WHLD2
 type public String BRNAME,BRCITY,BRSTATE,BRZIP,BRAD1,BRAD2,BRCNTRY,BRCONT
 type public String ACNRELC,BRCODE,BRTEL,BRTOT(),CRCD,DATA(),RTOT(),NRTRN
 type Number I
 type String brcode

 set ACN=vc2
 set BOO=vc1
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")
 set BRNAME=utblbrcd.desc.extract(1,30)
 set BRCITY=utblbrcd.brcity.extract(1,28)
 set BRSTATE=utblbrcd.brstate.extract(1,2)
 set BRZIP=utblbrcd.brzip.extract(1,10)
 set BRAD1=utblbrcd.brad1.extract(1,30)
 set BRAD2=utblbrcd.brad2.extract(1,30)
 set BRCNTRY=utblbrcd.brcntry.extract(1,3)
 set BRCONT=utblbrcd.brcont.extract(1,22)
 set BRTEL=utblbrcd.brtel
 set NRTRN=utblbrcd.nrtrn
 set NRTRN=NRTRN.extract(1,15)
 set brcode=utblbrcd.brcntry

 type RecordSTBLCNTRY stblctry=Db.getRecord("STBLCNTRY","CNTRY=:brcode")
 set BRCODE=stblctry.isoc

 kill BRTOT
 for I=0:1:6 set BRTOT(I)=0
 set ACNRELC=""
 kill DATA
 set (INCD1,CRCD,DIST1,WHLD1,INCD2,DIST2,WHLD2)=""

 do ZDATABLD
	quit

VP10	// Column pre-processor - Variable: NR4REC

 // Retrieve the recipient type from the latest account since each customer's 
 // account should have the same recipient code.

 type public String ACNRELC,NR4REC

 if 'ACNRELC.get() quit

 type RecordRELCODE1 relcode1=Db.getRecord("RELCODE1","REL=:ACNRELC",1)
 set NR4REC=relcode1.nr4rec

	quit

VP11	// Column pre-processor - Variable: INCD1

 //There should only ever be 2 entries in the TDATA array
 type public Number BRTOT(),DIST1,DIST2,INCD1,INCD2,WHLD1,WHLD2
 type public String CRCD,DATA()
 
 type Number X,CNT,GI,WH
 
 set X="",CNT=0
 for  set X=DATA(X).order() quit:((X="")!(X=99))  do {
 	set GI=(DATA(X).piece("|",3))
	set GI=GI.roundDec(2)*100
 	set WH=(DATA(X).piece("|",5))
	set WH=WH.roundDec(2)*100
 	set CNT=CNT+1
 	if CNT=1 set INCD1=X,CRCD=DATA(X).piece("|",2),DIST1=GI,WHLD1=WH
 	if CNT=2 set INCD2=X,CRCD=DATA(X).piece("|",2),DIST2=GI,WHLD2=WH
 	}
 set BRTOT(0)=BRTOT(0)+1
 set BRTOT(1)=BRTOT(1)+DIST1
 set BRTOT(2)=BRTOT(2)+WHLD1
 set BRTOT(3)=BRTOT(3)+DIST2
 set BRTOT(4)=BRTOT(4)+WHLD2
 kill DATA

	quit

VP12	// Column pre-processor - Variable: TCRCD

 type public Number DIST1,WHLD1
 type public String CRCD,TCRCD
 
 set TCRCD=""
 if DIST1+WHLD1 set TCRCD=CRCD

	quit

VP13	// Column pre-processor - Variable: EXCODE

 // gfm 7/9/98 Place a 'B' in this field if the Income Code is '18' and NR
 type public Number INCD1,WHLD1
 type public String EXCODE
 
 // Tax Withheld is zero
 set EXCODE=""
 if (INCD1.get()=18),('WHLD1.get()) set EXCODE="B"

	quit

VP14	// Column pre-processor - Variable: TCRCD

 type public Number DIST2,WHLD2
 type public String CRCD,TCRCD
 
 set TCRCD=""
 if DIST2+WHLD2 set TCRCD=CRCD

	quit

VP15	// Column pre-processor - Variable: EXCODE2

 type public Number INCD2,WHLD2
 type public String EXCODE2
 
 // Tax Withheld is zero
 set EXCODE2=""
 if (INCD2.get()=18),('WHLD2.get()) set EXCODE2="B"

	quit

VP16	// Column pre-processor - Variable: NRTRN

	type public String vc2,vc1
 type public Number ACN,BOO,DIST1,DIST2,INCD1,INCD2,RPASEQ,WHLD1,WHLD2
 type public String BRNAME,BRCITY,BRSTATE,BRZIP,BRAD1,BRAD2,BRCNTRY,BRCONT
 type public String ACNRELC,BRCODE,BRTEL,BRTOT(),CRCD,DATA(),RTOT(),NRTRN
 type Number I
 type String brcode
 
 set ACN=vc2
 set BOO=vc1
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")

 set BRNAME=utblbrcd.desc.extract(1,30)
 set BRCITY=utblbrcd.brcity.extract(1,28)
 set BRSTATE=utblbrcd.brstate.extract(1,2)
 set BRZIP=utblbrcd.brzip.extract(1,10)
 set BRAD1=utblbrcd.brad1.extract(1,30)
 set BRAD2=utblbrcd.brad2.extract(1,30)
 set BRCNTRY=utblbrcd.brcntry.extract(1,3)
 set BRCONT=utblbrcd.brcont.extract(1,22)
 set BRTEL=utblbrcd.brtel
 set NRTRN=utblbrcd.nrtrn
 set NRTRN=NRTRN.extract(1,15)
 set brcode=utblbrcd.brcntry

 type RecordSTBLCNTRY stblctry=Db.getRecord("STBLCNTRY","CNTRY=:brcode")
 set BRCODE=stblctry.isoc

 kill BRTOT
 for I=0:1:6 set BRTOT(I)=0
 set ACNRELC=""
 kill DATA
 set (INCD1,CRCD,DIST1,WHLD1,INCD2,DIST2,WHLD2)=""

 do ZDATABLD
	quit

VP17	// Column pre-processor - Variable: CNAME

 type public String CNAME

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CNAME=cuvar.cname
	quit

VP18	// Column pre-processor - Variable: BRNAME

	type public String vc1
 type public String BRCD(),BRAD1,BRAD2,BRCITY,BRCNTRY,BRNAME,BRCONT,BRSTATE,BRTEL,BRTOT(),BRZIP,NRTRN
 type public Number BOO

 type Number I

 if 'BRCD(BOO).exists() do {
 	set BOO=vc1
 	type RecordUTBLBRCD brcd=Db.getRecord("UTBLBRCD","BRCD=:BOO",1)
 	set BRNAME=(brcd.desc).extract(1,30)
 	set BRCITY=brcd.brcity
 	set BRSTATE=brcd.brstate
 	set BRZIP=brcd.brzip
 	set BRAD1=(brcd.brad1).extract(1,30)
 	set BRAD2=(brcd.brad2).extract(1,30)
 	set BRCNTRY=brcd.brcntry
 	set BRCONT=(brcd.brcont).extract(1,22)
 	set BRTEL=brcd.brtel
 	set NRTRN=brcd.nrtrn
 	}

 kill BRTOT
 for I=0:1:6 set BRTOT(I)=0
	quit

VP19	// Column pre-processor - Variable: CONTACT

 type public String CONTACT

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CONTACT=cuvar.contact
	quit

VP20	// Column pre-processor - Variable: CAC

 type public Number CAC

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CAC=cuvar.cac
	quit

VP21	// Column pre-processor - Variable: CTELE

 type public Number CTELE

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CTELE=cuvar.ctele
	quit

VP22	// Column pre-processor - Variable: TCC

 type public String TCC,V

 type Number G
 type String X1,X2
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set TCC=cuvar.tcc
 // TCC must pattern to 2A4N the A may be blank.
 if 'V.get() quit 
 if V.length()>7 quit

 set (X1,X2)=""
 for G=1:1:V.length() quit:V.extract(G)=""  quit:V.extract(G)?1N  set X1=X1_V.extract(G)
 set X2=V.extract(G,99)
 set X1="  ".extract(1,2-X1.length())_X1
 if X1.length()>2 set X1=X1.extract(X1.length()-1,X1.length())
 set X2="000000".extract(1,6-X2.length())_X2
 if X2.length()>6 set X2=X2.extract(X2.length()-5,X2.length())
 set V=X1_X2
	quit

VP23	// Column pre-processor - Variable: SBI

 type public Number SBI

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set SBI=cuvar.sbi
	quit

VP24	// Column pre-processor - Variable: SUMCNT

	type public String vc2
 type public Number SUMCNT
 
 type Number ACN
 
 set SUMCNT=0
 set ACN=vc2
 type ResultSet rs=Db.select("BOO","NR4EINF","ACN=:ACN","BOO")
 while rs.next() do {
 	set SUMCNT=SUMCNT+1
 	}

	quit

VP25	// Column pre-processor - Variable: INAME

 type public String INAME

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set INAME=cuvar.iname
	quit

VP26	// Column pre-processor - Variable: INAME2

 type public String INAME2

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set INAME2=cuvar.iname2
	quit

VP27	// Column pre-processor - Variable: IAD1

 type public String IAD1

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set IAD1=cuvar.iad1
	quit

VP28	// Column pre-processor - Variable: IAD2

 type public String IAD2

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set IAD2=cuvar.iad2
	quit

VP29	// Column pre-processor - Variable: ICITY

 type public String ICITY

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set ICITY=cuvar.icity
	quit

VP30	// Column pre-processor - Variable: ISTATE

 type public String ISTATE

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set ISTATE=cuvar.istate
	quit

VP31	// Column pre-processor - Variable: CCODE

 type public String CCODE
 
 type String CNTRY
 
 set CCODE="   "
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CNTRY=cuvar.icntry
 if 'CNTRY.isNull() do {
 	type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY",1)
 	set CCODE=cntry.isoc
 	}

	quit

VP32	// Column pre-processor - Variable: IZIP

 type public String IZIP

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set IZIP=cuvar.izip
	quit

VP33	// Column pre-processor - Variable: CONTACT

 type public String CONTACT

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CONTACT=cuvar.contact
	quit

VP34	// Column pre-processor - Variable: CAC

 type public Number CAC
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CAC=cuvar.cac
	quit

VP35	// Column pre-processor - Variable: CTELE

 type public Number CTELE
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CTELE=cuvar.ctele
	quit
