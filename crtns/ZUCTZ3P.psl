ZUCTZ3P()	// PSL Test Set, test function signatures for method with 3 parameters
	/*
	ORIG: Frans S.C. Witte - 2006-08-23
	DESC: PSL Test Set, test function signatures for method with 3 parameters

	---- Comment -----------------------------------------------------------
	See ZUC2P for a descrition of the general structure of the subroutines,
	and suggestions about changing the pattern text by real test values.

	---- Revision History --------------------------------------------------
	2006-08-23, Frans S.C. Witte - CR 22843
		Initial implementation
	*/
	quit

	// #####################################################################
	// Test function signatures, method with 3 parameters
	// #####################################################################

	// =====================================================================
public mtd3p()	// Validate TestClass.method3p(P1Class,P2Class,P3Class)
	/* ---------------------------------------------------------------------
	Procedure that validates code relating to TestClass.method3p().
	Validation values (see ZUCT for meaning of Cn and Rn):
	C0/R0: "", "P0value"
	C1/R1: absent, "", "P1value"
	C2/R2: absent, "", "P2value"
	C3/R3: absent, "", "P3value"
	calls:
	* public mtd3p00()		// validate C0.method3p(C1,C2,C3)
	* public mtd3p01(R0)		// validate R0.method3p(C1,C2,C3)
	* public mtd3p02(R1)		// validate C0.method3p(R1,C2,C3)
	* public mtd3p03(R2)		// validate C0.method3p(C1,R2,C3)
	* public mtd3p04(R3)		// validate C0.method3p(C1,C2,R3)
	* public mtd3p05(R0,R1)		// validate R0.method3p(R1,C2,C3)
	* public mtd3p06(R0,R2)		// validate R0.method3p(C1,R2,C3)
	* public mtd3p07(R0,R3)		// validate R0.method3p(C1,C2,R3)
	* public mtd3p08(R1,R2)		// validate C0.method3p(R1,R2,C3)
	* public mtd3p09(R1,R3)		// validate C0.method3p(R1,C2,R3)
	* public mtd3p10(R2,R3)		// validate C0.method3p(C1,R2,R3)
	* public mtd3p11(R0,R1,R2)	// validate R0.method3p(R1,R2,C3)
	* public mtd3p12(R0,R1,R3)	// validate R0.method3p(R1,C2,R3)
	* public mtd3p13(R0,R2,R3)	// validate R0.method3p(C1,R2,R3)
	* public mtd3p14(R1,R2,R3)	// validate C0.method3p(R1,R2,R3)
	* public mtd3p15(R0,R1,R2,R3)	// validate R0.method3p(R1,R2,R3)
	*/
	type Primitive R0
	type Primitive R1
	type Primitive R2
	type Primitive R3

	do mtd3p00()
	for R0 = "", "P0value" do {
		do mtd3p01( R0)
		for R1 = "", "P1value" do {
			if R0.isNull() do mtd3p02(R1)
			do mtd3p05(R0,R1)
			for R2 = "", "P2value" do {
				if R0.isNull(),R1.isNull() do mtd3p03(R2)
				if R1.isNull() do mtd3p06(R0,R2)
				if R0.isNull() do mtd3p08(R1,R2)
				do mtd3p11(R0,R1,R2)
				for R3 = "", "P3value" do {
					if R0.isNull(),R1.isNull(),R2.isNull() do mtd3p04(R3)
					if R1.isNull(),R2.isNull() do mtd3p07(R0,R3)
					if R0.isNull(),R2.isNull() do mtd3p09(R1,R3)
					if R0.isNull(),R1.isNull() do mtd3p10(R2,R3)
					if R2.isNull() do mtd3p12(R0,R1,R3)
					if R1.isNull() do mtd3p13(R0,R2,R3)
					if R0.isNull() do mtd3p14(R1,R2,R3)
					do mtd3p15(R0,R1,R2,R3)
				}
			}
		}
	}
	quit

	// =====================================================================
public mtd3p00()
	// =====================================================================
	// validate ({TestClass}C0).method3p(C1,C2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p()	// C0="", C1 absent, C2 absent, C3 absent
	write "mtd3p00().EAAA:""P0value"".method3p(""P1value"",""P2value"",""P3value"")="_rRes,!

	set rRes = ({TestClass}"").method3p( "", "", "")	// C0="", C1="", C2="", C3=""
	write "mtd3p00().EEEE:"""".method3p("""","""","""")="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( "P1value", "P2value", "P3value")	// C0="P0value", C1="P1value", C2="P2value", C3="P3value"
	write "mtd3p00().VVVV:""P0value"".method3p(""P1value"",""P2value"",""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p01( Primitive R0)
	// validate R0.method3p(C1,C2,C3)
	//
	type Primitive rRes
  
	/* ================ begin commented out ================
	set rRes = R0.method3p()		// C1 absent, C2 absent", C3 absent
	write "mtd3p01(R0).AAA:<"_R0_">.method3p()="_rRes,!

	set rRes = R0.method3p("","","")	// C1="", C2="", C3=""
	write "mtd3p01(R0).EEE:<"_R0_">.method3p("""","""","""")="_rRes,!

	set rRes = R0.method3p("P1value","P2value","P3value")	// C1="P1value", C2="P2value", C3="P3value"
	write "mtd3p01(R0).VVV:<"_R0_">.method3p(""P1value"",""P2value"",""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p02( Primitive R1)
	// =====================================================================
	// validate C0.method3p(R1,C2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( R1)		// C0="", C2 absent, C3 absent
	write "mtd3p02().EAA:"""".method3p(<"_R1_">)="_rRes,!

	set rRes = ({TestClass}"").method3p( R1, "", "")	// C0="", C2="", C3=""
	write "mtd3p02().EEE:"""".method3p(<"_R1_">,"""","""")="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( R1, "P2value", "P3value")	// C0="P0value", C2="P2value", C3="P3value"
	write "mtd3p02().VVV:""P0value"".method3p(<"_R1_">,""P2value"",""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p03( Primitive R2)
	// =====================================================================
	// validate C0.method3p(C1,R2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( , R2)	// C0="", C1 absent, C3 absent
	write "mtd3p03().EAA:"""".method3p(,<"_R2_">,)="_rRes,!

	set rRes = ({TestClass}"").method3p( "", R2, "")	// C0="", C1="", C3=""
	write "mtd3p03().EEE:"""".method3p("""",<"_R2_">,"""")="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( "P1value", R2, "P3value")	// C0="P0value", C1="P1value", C3="P3value"
	write "mtd3p03().VVV:""P0value"".method3p(""P1value"",<"_R2_">,""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p04( Primitive R3)
	// =====================================================================
	// validate C0.method3p(C1,C2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( , , R3)	// C0="", C1 absent, C2 absent
	write "mtd3p04().EAA:"""".method3p(,,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"").method3p( "", "", R3)	// C0="", C1="", C2=""
	write "mtd3p04().EEE:"""".method3p("""","""",<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( "P1value", "P2value", R3)	// C0="P0value", C1="P1value", C2="P2value"
	write "mtd3p04().VVV:""P0value"".method3p(""P1value"",""P2value"",<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// ====================================================================
public mtd3p05( Primitive R0, Primitive R1)
	// ====================================================================
	// validate R0.method3p(R1,C2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( R1)		// C2 absent, C3 absent
	write "mtd3p05().AA:<"_R0_">.method3p(<"_R1_">)="_rRes,!

	set rRes = R0.method3p( R1, "", "")	// C2="", C3=""
	write "mtd3p05().EE:<"_R0_">.method3p(<"_R1_">,"""","""")="_rRes,!

	set rRes = R0.method3p( R1, "P2value", "P3value")	// C2="P2value", C3="P3value"
	write "mtd3p05().VV:<"_R0_">.method3p(<"_R1_">,""P2value"",""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p06( Primitive R0, Primitive R2)
	// =====================================================================
	// validate R0.method3p(C1,R2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( , R2)		// C1 absent, C3 absent
	write "mtd3p06().AA:<"_R0_">.method3p(,<"_R2_">)="_rRes,!

	set rRes = R0.method3p( "", R2, "")	// C1="", C3=""
	write "mtd3p06().EE:<"_R0_">.method3p("""",<"_R2_">,"""")="_rRes,!

	set rRes = R0.method3p( "P1value", R2, "P3value")	// C1="P1value", C3="P3value"
	write "mtd3p06().VV:<"_R0_">.method3p(""P1value"",<"_R2_">,""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p07( Primitive R0, Primitive R3)
	// =====================================================================
	// validate R0.method3p(C1,C2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( , , R3)		// C1 absent, C2 absent
	write "mtd3p07().AA:<"_R0_">.method3p(,,<"_R3_">)="_rRes,!

	set rRes = R0.method3p( "", "", R3)	// C1="", C2=""
	write "mtd3p07().EE:<"_R0_">.method3p("""","""",<"_R3_">)="_rRes,!

	set rRes = R0.method3p( "P1value", "P2value", R3)	// C1="P1value", C2="P2value"
	write "mtd3p07().VV:<"_R0_">.method3p(""P1value"",""P2value"",<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p08( Primitive R1, Primitive R2)
	// =====================================================================
	// validate C0.method3p(R1,R2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( R1, R2)		// C0="", C3 absent
	write "mtd3p08().EA:"""".method3p(<"_R1_">,<"_R2_">)="_rRes,!

	set rRes = ({TestClass}"").method3p( R1, R2, "")	// C0="", C3=""
	write "mtd3p08().EE:"""".method3p(<"_R1_">,<"_R2_">,"""")="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( R1, R2, "P3value")	// C0="P0value", C3="P3value"
	write "mtd3p08().VV:""P0value"".method3p(<"_R1_">,<"_R2_">,""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p09( Primitive R1, Primitive R3)
	// =====================================================================
	// validate C0.method3p(R1,C2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( R1, , R3)		// C0="", C2 absent
	write "mtd3p09(R1,R3).EA:"""".method3p(<"_R1_">,,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"").method3p( R1, "", R3)	// C0="", C2=""
	write "mtd3p09(R1,R3).EE:"""".method3p(<"_R1_">,"""",<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( R1, "P2value", R3)	// C0="P0value", C2="P2value"
	write "mtd3p09(R1,R3).VV:""P0value"".method3p(<"_R1_">,""P2value"",<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p10( Primitive R2, Primitive R3)
	// =====================================================================
	// validate C0.method3p(C1,R2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( ,R2, R3)	// C0="", C1 absent
	write "mtd3p10(R2,R3).EA:"""".method3p(,<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"").method3p( "",R2, R3)	// C0="", C1=""
	write "mtd3p10(R2,R3).EE:""P0value"".method3p(""P1value"",<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( "P1value",R2, R3)	// C0="P0value", C1="P1value"
	write "mtd3p10(R2,R3).VV:""P0value"".method3p(""P1value"",<"_R2_">,<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p11( Primitive R0, Primitive R1, Primitive R2)
	// =====================================================================
	// validate R0.method3p(R1,R2,C3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( R1, R2)			// C3 absent
	write "mtd3p11(R0,R1,R2).A:<"_R0_">.method3p(<"_R1_">,<"_R2_">)="_rRes,!

	set rRes = R0.method3p( R1, R2, "")		// C3=""
	write "mtd3p11(R0,R1,R2).E:<"_R0_">.method3p(<"_R1_">,<"_R2_">,"""")="_rRes,!

	set rRes = R0.method3p( R1, R2, "P3value")	// C3="P3value"
	write "mtd3p11(R0,R1,R2).V:<"_R0_">.method3p(<"_R1_">,<"_R2_">,""P3value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p12( Primitive R0, Primitive R1, Primitive R3)
	// =====================================================================
	// validate R0.method3p(R1,C2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( R1,  , R3)		// C2 absent
	write "mtd3p12(R0,R1,R3).A:<"_R0_">.method3p(<"_R1_">,,<"_R3_">)="_rRes,!

	set rRes = R0.method3p( R1, "", R3)		// C2=""
	write "mtd3p11(R0,R1,R2).E:<"_R0_">.method3p(<"_R1_">,"""",<"_R3_">)="_rRes,!

	set rRes = R0.method3p( R1, "P2value", R3)	// C2="P2value"
	write "mtd3p11(R0,R1,R2).V:<"_R0_">.method3p(<"_R1_">,""P2value"",<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p13( Primitive R0, Primitive R2, Primitive R3)
	// =====================================================================
	// validate R0.method3p(C1,R2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( , R1, R2)		// C1 absent
	write "mtd3p13(R0,R2,R3).A:<"_R0_">.method3p(,<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = R0.method3p( "", R1, R2)		// C1=""
	write "mtd3p13(R0,R2,R3).E:<"_R0_">.method3p(""P1Valid"",<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = R0.method3p( "P1value", R1, R2)	// C1="P1value"
	write "mtd3p13(R0,R2,R3).V:<"_R0_">.method3p(""P1Valid"",<"_R2_">,<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p14( Primitive R1, Primitive R2, Primitive R3)
	// =====================================================================
	// validate C0.method3p(R1,R2,R3)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method3p( R1, R2, R3)	// C0=""
	write "mtd3p14(R1,R2,R3).E:""P0value"".method3p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method3p( R1, R2, R3)	// C0="P0value"
	write "mtd3p14(R1,R2,R3).V:""P0value"".method3p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd3p15( Primitive R0, Primitive R1, Primitive R2, Primitive R3)
	// =====================================================================
	// validate R0.method3p(R1,R2,R3) -- 1 "combination"
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method3p( R1, R2, R3)
	write "mtd3p15(R0,R1,R2,R3):<"_R0_">.method3p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!
	================ end commented out ================ */
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60507^25766^Frans S.C. Witte^15088"	// Signature - LTD^TIME^USER^SIZE
