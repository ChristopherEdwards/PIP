RULEDTFL(RecordUTBLPRODRLDT utblprodrldt, String vpar, Boolean vparNorm) // UTBLPRODRLDT - Product Attribute Rule Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Trigger Definition (2)                      01/05/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblprodrldt.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblprodrldt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblprodrldt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String RULEID = utblprodrldt.ruleid
	type String DECISION = utblprodrldt.decision

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("RULEID").exists()!vx("DECISION").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPRODRLDT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPRODRLDT","RULEID = :utblprodrldt.ruleid and DECISION = :utblprodrldt.decision") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String RULEID
	type public String DECISION

	type RecordUTBLPRODRLDT utblprodrldt = Db.getRecord("UTBLPRODRLDT","RULEID=:RULEID,DECISION=:DECISION")
	if (%ProcessMode = 2) do {
		do utblprodrldt.setMode(2)

		do RULEDTFL(utblprodrldt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPRODRLDT utblprodrldt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPRODRLDT","RULEID = :utblprodrldt.ruleid and DECISION = :utblprodrldt.decision") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set utblprodrldt.LDATE = %SystemDate
		set utblprodrldt.LTIME = %CurrentTime
		set utblprodrldt.LUSER = %UserID
		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrldt,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrldt,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblprodrldt))  S ^UTBL("PRODRL",vobj(utblprodrldt,-3),vobj(utblprodrldt,-4))=vobj(utblprodrldt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPRODRLDT utblprodrldt

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrldt,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("PRODRL",vobj(utblprodrldt,-3),vobj(utblprodrldt,-4)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLPRODRLDT utblprodrldt

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPRODRLDT utblprodrldt

	if utblprodrldt.ruleid.isNull() do vreqerr("RULEID") quit
	if utblprodrldt.decision.isNull() do vreqerr("DECISION") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRLDT","MSG",1767,"UTBLPRODRLDT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordUTBLPRODRLDT utblprodrldt
	if 'utblprodrldt.ruleid.isNull() set vfkey("^UTBL("_"""PRODRL"""_","_""""_utblprodrldt.ruleid_""""_")")="UTBLPRODRLDT(RULEID) -> UTBLPRODRL"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordUTBLPRODRLDT utblprodrldt
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("UTBLPRODRL",":utblprodrldt.ruleid") set vERRMSG = $$^MSG(8563,"UTBLPRODRLDT(RULEID) -> UTBLPRODRL") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLPRODRLDT utblprodrldt
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblprodrldt,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After insert/update

	do vau1

	quit

vau1 // Trigger AFTER_INSERT - After insert/update

	type public RecordUTBLPRODRLDT utblprodrldt
	/*
	----Revision History----------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.	

	01/05/2000 - DOUGANM - 31126
	  	   Variable X was undefined due to missing "set X=rs.getRow()"
		   statement left out during conversion. 

	09/22/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	// Get table names and then update FILES in UTBLPRODRL table

	type public Boolean ER

	type Number zcif,zdep,zln,ZRULEID
	type String di,dinam,ptr,tab,X,FILES,ZCOLNAME,ZCOLNAME(),ZDINAM

	set (zcif,zdep,zln)=0 
	set ZCOLNAME=""

	set ZRULEID=utblprodrldt.ruleid

	type ResultSet rs=Db.select("TEST","UTBLPRODRLDT","RULEID=:ZRULEID")

	while rs.next()  set X=rs.getCol("TEST")  do { if ER quit

		set ptr=0 for  set dinam=$$FINDINAM^SQLDD(X,.ptr) quit:dinam=""  do { if ER quit 

			if 'ZCOLNAME(dinam).exists() do { if ER quit 

				set tab=dinam.piece(".",1)
				set di=dinam.piece(".",2)
			
				type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID=:tab,DI=:di",1)
			
				// Computed data items not allowed - ~p1
				if dinam.piece(".",1)'="CIF",dbtbl1d.cmp'="" do Runtime.setErrMSG("UTBLPRODRLDT",597,dinam) quit:ER

				set ZDINAM=dinam

				type RecordUTBLPRODAVCO prodavco=Db.getRecord("UTBLPRODAVCO","COLNAME=:ZDINAM")

				// Invalid data item ~p1
				if 'prodavco.getMode() do Runtime.setErrMSG("UTBLPRODRLDT",1298,dinam) quit:ER

				set ZCOLNAME(dinam)=""
				set ZCOLNAME=ZCOLNAME_","_dinam
				}
			if dinam.piece(".",1)="CIF" set zcif=1 quit 
			if dinam.piece(".",1)="DEP" set zdep=1 quit 
			if dinam.piece(".",1)="LN" set zln=1 quit 
			}
		}

	if ER quit 

	// Inconsistent match criteria
	if zdep,zln do Runtime.setErrMSG("UTBLPRODRLDT",4159) quit:ER

	set FILES="" do {

		if zcif,'zdep,'zln set FILES="CIF" quit
		if zdep,zcif set FILES="DEP,CIF" quit
		if zln,zcif set FILES="LN,CIF" quit
		if zdep set FILES="DEP" quit
		if zln set FILES="LN" quit
		}

	if FILES="" quit
	set ZCOLNAME=ZCOLNAME.extract(2,999)

	type RecordUTBLPRODRL prodrl=Db.getRecord("UTBLPRODRL","RULEID=:ZRULEID")

	set prodrl.files=FILES
	set prodrl.colnames=ZCOLNAME

	do prodrl.save()

	quit 

vbi1 // Trigger BEFORE_INSERT - Before insert/update

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before insert/update

	type public RecordUTBLPRODRLDT utblprodrldt
	do utblprodrldt.setAuditFlag(1)
	/*
								----Revision History----------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.

								01/05/2000 - DOUGANM - 31126
		   set z="" if rs.isEmpty() instead of quitting, so as to not
		   skip over Runtime error message statements, and to keep the
		   logic of the code same as the original.
		   Since the exclusive new line, after linetag zqry, is not 
		   allowed in PSL, in place of it newed all necessary
		   variables.	
	
								09/22/99 - CARROLLJ - 31126
																			Convert to PSL.
								*/

	// Check header record

	type public Boolean ER

	type Number z,ZRULE,ZSEQ
	type String X

	set X=utblprodrldt.test
	if X'="" do zqry if ER quit 

	if %ProcessMode=1 quit

	set ZRULE=utblprodrldt.ruleid
	set ZSEQ=utblprodrldt.decision
	
	type ResultSet rs=Db.select("DECISION","UTBLPRODRLDT","RULEID=:ZRULE","DECISION DESC") 

	if rs.isEmpty() set z=0
	else  set z=rs.next(),z=rs.getCol("DECISION")

	// Next DECISION number should be ~p1
	if z+1'=ZSEQ do Runtime.setErrMSG("UTBLPRODRLDT",3666,z+1) quit:ER  

	type RecordUTBLPRODRL prodrl=Db.getRecord("UTBLPRODRL","RULEID=:ZRULE",1)

	// Invalid Rule ID
	if 'prodrl.getMode() do Runtime.setErrMSG("UTBLPRODRLDT",3683) quit:ER

	quit


zqry // Check query logic

	type public Boolean ER

	// Invalid query syntax
	do ^DBSQRY if ER do Runtime.setErrMSG("UTBLPRODRLDT",1434) quit:ER
	do ^DBSQRYA

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPRODRLDT utblprodrldt

	set X = utblprodrldt.ruleid if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("RULEID", vRM) quit
	set X = utblprodrldt.decision if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DECISION", vRM) quit
	set X = utblprodrldt.ldate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDATE", vRM) quit
	set X = utblprodrldt.ltime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LTIME", vRM) quit
	if utblprodrldt.luser.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LUSER", vRM) quit
	if utblprodrldt.test.length()>250 set vRM = $$^MSG(1076,250) do vdderr("TEST", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRLDT","MSG",979,"UTBLPRODRLDT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLPRODRLDT utblprodrldt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("RULEID").exists() set vux("RULEID") = vx("RULEID")
	if vx("DECISION").exists() set vux("DECISION") = vx("DECISION")
	do vkey(1) set voldkey = utblprodrldt.ruleid_","_utblprodrldt.decision // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblprodrldt.ruleid_","_utblprodrldt.decision // Copy new keys into object
	type RecordUTBLPRODRLDT vnewrec = utblprodrldt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPRODRLDT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLPRODRLDT utblprodrldt

	if vux("RULEID").exists() set utblprodrldt.ruleid = vux("RULEID").piece("|",i)
	if vux("DECISION").exists() set utblprodrldt.decision = vux("DECISION").piece("|",i)
	quit
