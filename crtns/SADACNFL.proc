SADACNFL(RecordSADDRACN saddracn, String vpar, Boolean vparNorm) // SADDRACN - Account Seasonal Address Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (21)             05/23/2006
	// Trigger Definition (2)                      12/17/2004
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = saddracn.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(saddracn,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(saddracn,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = saddracn.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SADDRACN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SADDRACN","CID = :saddracn.cid")  // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordSADDRACN saddracn = Db.getRecord("SADDRACN","CID=:CID")
	if (%ProcessMode = 2) do {
		do saddracn.setMode(2)

		do SADACNFL(saddracn,vpar)
	}
	else  do VINDEX(saddracn)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSADDRACN saddracn

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SADDRACN","CID = :saddracn.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(saddracn))  S ^SADDR("ACN",vobj(saddracn,-3))=vobj(saddracn)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.saddracn)            // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.saddracn) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSADDRACN saddracn

	if vpar["/INDEX/" do VINDEX(.saddracn)                 // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.saddracn)             // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^SADDR("ACN",vobj(saddracn,-3))                    // Delete Record
	quit


vreqn // Validate required data items

	type public RecordSADDRACN saddracn

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSADDRACN saddracn

	if saddracn.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SADDRACN","MSG",1767,"SADDRACN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSADDRACN saddracn
	if 'saddracn.cid.isNull() set vfkey("^ACN("_""""_saddracn.cid_""""_","_50_")")="SADDRACN(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSADDRACN saddracn
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":saddracn.cid") set vERRMSG = $$^MSG(8563,"SADDRACN(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("SADSD").exists()!vx("SADED").exists()!vx("SAD1").exists()!vx("SAD2").exists()!vx("SAD3").exists()!vx("SAD4").exists()!vx("SCITY").exists()!vx("SSTATE").exists()!vx("SCNTRY").exists()!vx("SZIP").exists()!vx("NSAD1").exists()!vx("NSAD2").exists()!vx("NSAD3").exists()!vx("NSAD4").exists()!vx("NSCITY").exists()!vx("NSCNTRY").exists()!vx("NSSTATE").exists()!vx("NSZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Seasonal Address

	type public RecordSADDRACN saddracn
	/*
	--------------------- Revision History ---------------------------
	
	08/29/01 - ANTONOVS - 46279:016
		   Trigger BEFORE_INSERT was deleted.
	------------------------------------------------------------------
	*/

	/* - Validate Zip code and State code - */

	new CID
	set CID=saddracn.cid
	
	if saddracn.nszip'="" do { quit:ER
		do ZIP^PROCZIP(saddracn.nscntry,saddracn.nsstate,saddracn.nszip)
		if $G(ER) do Runtime.setErrMSG("SADDRACN",3333,RM) quit:ER
	}
	
	if saddracn.szip'="" do { quit:ER
		do ZIP^PROCZIP(saddracn.scntry,saddracn.sstate,saddracn.szip)
		if $G(ER) do Runtime.setErrMSG("SADDRACN",3333,RM) quit:ER
	}
	
	if saddracn.nsstate'="",$$CHKSTATE^ADDRUTL("SADDRACN",saddracn.nscntry,saddracn.nsstate) quit:ER
	if saddracn.sstate'="",$$CHKSTATE^ADDRUTL("SADDRACN",saddracn.scntry,saddracn.sstate) quit:ER
	
	/* Start and End Date Validation */
	
	if ((saddracn.sad1'="")!(saddracn.scity'="")!(saddracn.scntry'="")!(saddracn.sstate'="")!(saddracn.szip'="")!(saddracn.saded'="")),(saddracn.sadsd="") do Runtime.setErrMSG("SADDRACN",4906) quit:ER
	if ((saddracn.sad1'="")!(saddracn.scity'="")!(saddracn.scntry'="")!(saddracn.sstate'="")!(saddracn.szip'="")!(saddracn.sadsd'="")),(saddracn.saded="") do Runtime.setErrMSG("SADDRACN",4907) quit:ER
	
	if saddracn.sadsd'="",saddracn.saded'="" do { quit:ER
		if saddracn.sadsd'>%SystemDate do Runtime.setErrMSG("SADDRACN",4910) quit:ER
		if saddracn.saded'>%SystemDate do Runtime.setErrMSG("SADDRACN",4919) quit:ER
		if saddracn.saded'>saddracn.sadsd do Runtime.setErrMSG("SADDRACN",4923) quit:ER
	}
	
	/* Seasonal Address period cannot exceed one year*/
	
	new period
	if saddracn.sadsd'="",saddracn.saded'="" do { quit:ER
		set period=$$NOY^SCADAT(saddracn.saded,saddracn.sadsd,1,0)
		if period>1 do Runtime.setErrMSG("SADDRACN",4920) quit:ER
	}

	/* Seasonal address dates conflict with temporary address dates */
	
	new rs
	new TABLE
	
	set TABLE="ACNADDR"
	type ResultSet rs=Db.select("EFDATE","SADDREFD","FID=:TABLE AND AKEY=:CID")
	if 'rs.isEmpty() do { quit:ER
		while rs.next() do { quit:ER
			set EFDATE=rs.getCol(1)
			if ((EFDATE'<(saddracn.sadsd))&(EFDATE'>(saddracn.saded))) do Runtime.setErrMSG("SADDRACN",4905) quit:ER
		}
	}
	quit

vau1 // Trigger AFTER_UPDATE - After Update Seasonal Address

	type public RecordSADDRACN saddracn
	 /* Start and End Date Validation */
	
	new oldstart,oldend
	new CID

	set CID=saddracn.cid

	set oldstart=saddracn.sadsd.oldVal
	set oldend=saddracn.saded.oldVal

	if ((saddracn.sad1'="")!(saddracn.scity'="")!(saddracn.scntry'="")!(saddracn.sstate'="")!(saddracn.szip'="")!(saddracn.saded'="")),(saddracn.sadsd="") do Runtime.setErrMSG("SADDRACN",4906) quit:ER
	if ((saddracn.sad1'="")!(saddracn.scity'="")!(saddracn.scntry'="")!(saddracn.sstate'="")!(saddracn.szip'="")!(saddracn.sadsd'="")),(saddracn.saded="") do Runtime.setErrMSG("SADDRACN",4907) quit:ER
	
	/* Start date cannot be modified while Seasonal address is in effect */
	
	if (saddracn.sadsd'="")&(oldstart'="") do { quit:ER
		if (saddracn.isChanged("SADSD")),(%SystemDate'<oldstart),(%SystemDate'>(saddracn.saded)) do Runtime.setErrMSG("SADDRACN",4921) quit:ER
	}
	
	/* If seasonal address is not in effect - check the valid values for start and end date */
	
	if (saddracn.sadsd'="")&(saddracn.saded'="") do { quit:ER
		if '((%SystemDate'<oldstart)&(%SystemDate'>oldend)) do { quit:ER
			if (saddracn.sadsd)'>(%SystemDate) do Runtime.setErrMSG("SADDRACN",4910) quit:ER
			if (saddracn.saded)'>(%SystemDate) do Runtime.setErrMSG("SADDRACN",4919) quit:ER
			if (saddracn.saded)'>(saddracn.sadsd) do Runtime.setErrMSG("SADDRACN",4923) quit:ER
		}
		else  do { quit:ER
			if (saddracn.saded)'>(%SystemDate) do Runtime.setErrMSG("SADDRACN",4919) quit:ER
			if (saddracn.saded)'>(saddracn.sadsd) do Runtime.setErrMSG("SADDRACN",4923) quit:ER
		}
 	}
	
	/* Seasonal Address period cannot exceed one year*/
	
	new period
	if saddracn.sadsd'="",saddracn.saded'="" do { quit:ER
		set period=$$NOY^SCADAT(saddracn.saded,saddracn.sadsd,1,0)
		if period>1 do Runtime.setErrMSG("SADDRACN",4920) quit:ER
	}
	

	/* Seasonal address dates conflict with temporary address dates */
	
	new rs
	new TABLE
	
	set TABLE="ACNADDR"

	type ResultSet rs=Db.select("EFDATE","SADDREFD","FID=:TABLE AND AKEY=:CID")
	if 'rs.isEmpty() do { quit:ER
		while rs.next() do { quit:ER
			set EFDATE=rs.getCol(1)
			if ((EFDATE'<(saddracn.sadsd))&(EFDATE'>(saddracn.saded))) do Runtime.setErrMSG("SADDRACN",4905) quit:ER
		}
	}

						/*  Validate Zip code and State code  */
	
	if saddracn.nszip'="" do { quit:ER
		do ZIP^PROCZIP(saddracn.nscntry,saddracn.nsstate,saddracn.nszip)
		if $G(ER) do Runtime.setErrMSG("SADDRACN",3333,RM) quit:ER
	}
	
	if saddracn.szip'="" do { quit:ER 
		do ZIP^PROCZIP(saddracn.scntry,saddracn.sstate,saddracn.szip)
		if $G(ER) do Runtime.setErrMSG("SADDRACN",3333,RM) quit:ER
	}
	
	if saddracn.nsstate'="",$$CHKSTATE^ADDRUTL("SADDRACN",saddracn.nscntry,saddracn.nsstate) quit:ER
	if saddracn.sstate'="",$$CHKSTATE^ADDRUTL("SADDRACN",saddracn.scntry,saddracn.sstate) quit:ER
	
	/* If seasonal address is in effect - default changes to mailing addr */
	
	if ((%SystemDate'<(saddracn.sadsd))&(%SystemDate'>(saddracn.saded))) do { quit:ER
		new SAD1,SAD2,SAD3,SAD4,SCITY,SCNTRY,SSTATE,SZIP
		set SAD1=saddracn.sad1
		set SAD2=saddracn.sad2
		set SAD3=saddracn.sad3
		set SAD4=saddracn.sad4
		set SCITY=saddracn.scity
		set SCNTRY=saddracn.scntry
		set SSTATE=saddracn.sstate
		set SZIP=saddracn.szip
		do Db.update("ACNADDR","AD1=:SAD1,AD2=:SAD2,AD3=:SAD3,AD4=:SAD4,CITY=:SCITY,CNTRY=:SCNTRY,STATE=:SSTATE,MZIP=:SZIP","CID=:CID")
	}
	
	/* If seasonal address is not in effect, non-seasonal address cannot be modified */
	
	if (saddracn.sadsd'="")&(saddracn.saded'="")&'((%SystemDate'<(saddracn.sadsd))&(%SystemDate'>(saddracn.saded))) do { quit:ER
		if (saddracn.isChanged("NSAD1"))!(saddracn.isChanged("NSAD2"))!(saddracn.isChanged("NSAD3"))!(saddracn.isChanged("NSAD4")) do Runtime.setErrMSG("SADDRACN",4922) quit:ER
		if (saddracn.isChanged("NSCITY"))!(saddracn.isChanged("NSCNTRY"))!(saddracn.isChanged("NSSTATE"))!(saddracn.isChanged("NSZIP")) do Runtime.setErrMSG("SADDRACN",4922) quit:ER
	}
	
	/* If seasonal address deleted and in effect - reset mailing address

	!!! This section should always be the last one.

		(please place all modifications above) */ 
	
	if (saddracn.sadsd=""),(saddracn.saded=""),(saddracn.sad1=""),(saddracn.sad2=""),(saddracn.sad3=""),(saddracn.sad4)="" do { quit:ER
	if (saddracn.scity=""),(saddracn.scntry=""),(saddracn.sstate=""),(saddracn.szip="") do { quit:ER
		if ((%SystemDate'<(saddracn.sadsd.oldVal))&(%SystemDate'>(saddracn.saded.oldVal))) do { quit:ER
			new NSAD1,NSAD2,NSAD3,NSAD4,NSCITY,NSCNTRY,NSSTATE,NSZIP
			set NSAD1=saddracn.nsad1
			set NSAD2=saddracn.nsad2     
			set NSAD3=saddracn.nsad3
			set NSAD4=saddracn.nsad4
			set NSCITY=saddracn.nscity
			set NSCNTRY=saddracn.nscntry
			set NSSTATE=saddracn.nsstate
			set NSZIP=saddracn.nszip
			do Db.update("ACNADDR","AD1=:NSAD1,AD2=:NSAD2,AD3=:NSAD3,AD4=:NSAD4,CITY=:NSCITY,CNTRY=:NSCNTRY,STATE=:NSSTATE,MZIP=:NSZIP","CID=:CID")
			set saddracn.nsad1=""
			set saddracn.nsad2=""
			set saddracn.nsad3=""
			set saddracn.nsad4=""
			set saddracn.nscity=""
			set saddracn.nscntry=""
			set saddracn.nsstate=""
			set saddracn.nszip=""
	
			do saddracn.bypassSave()
		}
	}
	}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSADDRACN saddracn

	set X = saddracn.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if saddracn.nsad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD1", vRM) quit
	if saddracn.nsad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD2", vRM) quit
	if saddracn.nsad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD3", vRM) quit
	if saddracn.nsad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSAD4", vRM) quit
	if saddracn.nscity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSCITY", vRM) quit
	set X = saddracn.nscntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("NSCNTRY", vRM) quit
	if saddracn.nscounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NSCOUNTY", vRM) quit
	if saddracn.nsstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("NSSTATE", vRM) quit
	if saddracn.nszip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("NSZIP", vRM) quit
	if saddracn.sad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD1", vRM) quit
	if saddracn.sad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD2", vRM) quit
	if saddracn.sad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD3", vRM) quit
	if saddracn.sad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SAD4", vRM) quit
	set X = saddracn.saded if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SADED", vRM) quit
	set X = saddracn.sadsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SADSD", vRM) quit
	if saddracn.scity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SCITY", vRM) quit
	set X = saddracn.scntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("SCNTRY", vRM) quit
	if saddracn.scounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SCOUNTY", vRM) quit
	if saddracn.sstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("SSTATE", vRM) quit
	if saddracn.szip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("SZIP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SADDRACN","MSG",979,"SADDRACN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSADDRACN saddracn)	//SADDRACN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.saddracn)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=SADDR_D
			}
		else  if TSRC="O" do {
			do vj1(.saddracn)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=SADDR_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.saddracn)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=SADDR_I
			}
		else  if TSRC="O" do {
			do vj2(.saddracn)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=SADDR_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.saddracn)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=SADDR_U
			}
		else  if TSRC="O" do {
			do vj3(.saddracn)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=SADDR_U
			}
		}

	quit


vj1(RecordSADDRACN saddracn)	// SADDR_D  Table HIST  History for Seasonal Address

	type Public String EFD,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=saddracn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.tcmt=$$^MSG(4933)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordSADDRACN saddracn)	// SADDR_I  Table HIST  History for new Seasonal Address

	type Public String EFD,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=saddracn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.tcmt=$$^MSG(4932)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordSADDRACN saddracn)	// SADDR_U  Table HIST  History for Seasonal Address

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=saddracn.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.tcmt=$$TCMTFM^CIFFUNCS(saddracn.cid,"SADDRACN",vdi,vold,vnew,$G(EFD),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordSADDRACN saddracn) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("SADED").exists() do vi1(.saddracn)
		if vx("SADSD").exists() do vi2(.saddracn)
	}
	do vi1(.saddracn)
	do vi2(.saddracn)

	quit
	

vi1(RecordSADDRACN saddracn) // Maintain ADDREDACN index entries (Account Season.Address End)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = saddracn.saded
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = saddracn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^SADDR("ACN",vobj(saddracn,-3)))#2,'$D(^DAYEND(v1,"ADDREDACN",v3)) do vidxerr("ADDREDACN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"ADDREDACN",v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SADED").exists() set v1=vx("SADED").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"ADDREDACN",v3)
	quit

vi2(RecordSADDRACN saddracn) // Maintain ADDRSDACN index entries (Account Season.Address Start)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = saddracn.sadsd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = saddracn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^SADDR("ACN",vobj(saddracn,-3)))#2,'$D(^DAYEND(v1,"ADDRSDACN",v3)) do vidxerr("ADDRSDACN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"ADDRSDACN",v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SADSD").exists() set v1=vx("SADSD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"ADDRSDACN",v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("SADDRACN")

	while ds.next() do {
		type RecordSADDRACN saddracn=ds.getRecord("SADDRACN")
		if vlist.contains("VINDEX") do VINDEX(.saddracn) quit
		if vlist.contains("ADDREDACN") do vi1(.saddracn)
		if vlist.contains("ADDRSDACN") do vi2(.saddracn)
	}

	quit


public VIDXBLD1(RecordSADDRACN saddracn, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.saddracn) quit
	if vlist.contains("ADDREDACN") do vi1(.saddracn)
	if vlist.contains("ADDRSDACN") do vi2(.saddracn)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("SADDRACN","MSG",1225,"SADDRACN."_di)

	quit


vkchged // Access key changed

	type public RecordSADDRACN saddracn

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(saddracn,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(saddracn,-3) = vnewkey // Copy new keys into object
	type RecordSADDRACN vnewrec = saddracn.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SADDRACN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(saddracn,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "SADACNFL"	// Location of index program

