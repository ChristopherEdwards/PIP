MRPC096(return,versn,more,reqopt,PARS,intrface)	

	/* Copyright(c)2000 Sanchez Computer Associates, Inc.  All Rights Reserved
	   Procedure ID: 096
	   ORIG: Jim Moten

	   DESC: Consolidated Account Summary

	   This RPC upon validation as a PROFILE/Anyware customer will permit
	   access to all client account related information as requested. This
	   " returned " information will be displayed in XML format, which is
	   Web interfaced compatable and have the current version, to be
	   hereafter referenced as "versn". Additionally,entry into MRPC096 will be primarily
	   based on a system recognized userid and password,taxid or some other
	   uniquely identifying customer account characteristic that is further
	   defined in detail below.

	   With the sensitivity of the account related information, the XML formatting of returned  	   
	   data will return an error message if all required input parameters of the requested 
	   data are not valid.

	   The "more" parameter acknowledges the request for the account
	   information and that it has reached the 31K byte limit per return of the data
	   block requested. MRPC096 has the capability to continue to return
	   the remainder of the account information in return blocks of 31K
	   until all records related to the input parameters have been returned.
	   
	
	   KEYWORDS: RPC
	
	   ARGUMENTS:

		. return  Description of data    	/TYP=T/REQ/MECH=REFNAM:W
	
		. versn   version number    		/TYP=N/REQ/MECH=VAL
	     		  current version=1
	
		. more    Indicator of request		/TYP=N/REQ/MECH=VAL
			  for more information beyond the 31000 bytes allowed per 
			  return of data.		
	
		. reqopt  bitmap of requested options	/TYP=T/REQ/MECH=VAL
			 
			byte 1	- Code indicating build of DTD,data or both
				Definition:Document Type Definition
				0 - Return indicator of DTD only
				1 - Return indicator of data only
				2 - Return indicator of DTD and data  
			byte 2  - table CIF return data indicator
			byte 3  - table CIFAUTH return data indicator
			byte 4  - table  DEP return data indicator
			byte 5  - table  LN return data indicator
			byte 6  - table  CIFEXT return data indicator
			byte 7  - table  CIFSERV return data indicator
			byte 8  - table  MEMOBILLPAY return data indicator
			byte 9  - table  MEMOBROKER return data indicator
			byte 10 - table  MEMOCC return data indicator
			byte 11 - table  MEMOECOM return data indicator
			byte 12 - table  MEMOPYMTS return data indicator

		. PARS	Customer identification			/TYP=N/REQ/MECH=VAL
			CIF.ACN 		- Customer Number
			CIF.TAXID 		- Tax Identification
			CIF.CO 			- Company Code
			   Used with TAXID when using Affinity groups
			CIFAUTH.ACN 		- Customer Number
                        CIFAUTH.USERID1		- User ID
			
		. intrface   Indicator of different type of	/TYP=T/REQ/MECH=VAL
			     application
  
	   RETURNS:

		. return  requested information /TYP=N
	
	   RELATED:
		 . $$^PBSMRPC - MRPC Service Class Driver
	
	   EXAMPLE:
		.  Top entry PARS:
		 	S RM=$$^MRPC096(.return,1,0,"21","CIF.ACN=1000000019",.intrface or "")
		.  SPODBC entry:
			S RM=$$SPODBC^MRPC096(1,0,"21","CIFAUTH.TAXID=123-45-6789",.intrface or "")
		. error reply:

			<MRPC096>
	<ERROR>
        	<CODE>MSG_1259</CODE>
        	<DESCRIPTION>Invalid account </DESCRIPTION>
	</ERROR>
	</MRPC096>
   	------------------------  Revision History  -------------------------
   	
   	07/10/06 - RussellDS - CR22121
		   Modified length checking against 31000 to consider bytes,
		   not characters to be Unicode compliant.
		   
		   Removed old revision history.

	09/22/05  - SREERAM - 16682
		   Initialized Unscoped Variables and Cleanup for DBI3.
		   
	*/

	type Public Number ACN,DTD,MORE
	type Public String input
		
	set return=""
	set DTD=reqopt.extract(1)
	if DTD.get(),PARS.get()="" set return=$$ERRXML^ECOMMERC(1768,$E(reqopt,1),"MRPC096") quit ""
	if DTD.get(),'MORE.get() do {
		do STR2ARR^UTLMRPC(PARS,.input)
		set ACN=$$GETACN^ECOMMERC(.input)
		if ACN'="" quit 
		set return=""
		set return=$$ERRXML^ECOMMERC(1259,$E(reqopt,1),"MRPC096")
		}
	if 'return.get()="" quit ""

	#if $$VALID^%ZRTNS("ZMRPC096")
	do getdata^ZMRPC096(0,"MRPC096")	//Logical taking a return value back 
	#else
	do getdata(0,"MRPC096")
	#endif
	set return=$$V2LV^MSG(return)
	quit ""


SPODBC(versn,more,reqopt,PARS,intrface)	// Stored Procedure/ODBC entry point

	/*
	  This function is intended to provide a capability to invoke a
	  true MRPC from the EXECUTE procedure facility within the PROFILE
	  ODBC driver.  This is needed in order to get the normal response
	  argument that is part of the MRPC structure returned to the calling
	  ODBC client.

	  The parameters passed to this label are the same as those passed through
	  the top of the routine. 
	*/
	
	type Public Number ACN,DTD
	type Public String input,return
	
	set return=""	
	set DTD=reqopt.extract(1)
	if DTD.get(),PARS.get()="" set return=$$ERRXML^ECOMMERC(1768,$E(reqopt,1),"MRPC096")  
	if DTD.get(),'more.get() do { quit:'return.get()="" 
		do STR2ARR^UTLMRPC(PARS,.input)
		set ACN=$$GETACN^ECOMMERC(.input)
		if ACN'="" quit 
		set return=""
		set return=$$ERRXML^ECOMMERC(1259,$E(reqopt,1),"MRPC096")
		}

	#if $$VALID^%ZRTNS("ZMRPC096")
	do getdata^ZMRPC096(0,"MRPC096")
	#else
	do getdata(0,"MRPC096")
	#endif
	
	quit return


getdata(EXTERNAL,TITLE)
	
	type Public Boolean ER
	type Public String reqopt,return
	type public Number MORE,more,versn
	
	/*
	  if more indicator, then retrieve data stored in temporary
	  location.  Since the data will be stored in the same location
	  by both the generic and custom programs, we do not need to go
	  to the custom program if it exists.
	*/

	if more.get() do getmore quit
	
	/*
	 Version number of client message is not compatible with server
	 The test must be applied after the call to the custom program
	 since it may have its own version number.
	*/ 

	if 'versn.get()=1 set return=$$ERRXML^ECOMMERC(2951,reqopt.extract(1),TITLE) quit      	
	set return=""
	set ER=0 

	type HTML xx=Class.new("HTML")	

	//Create DTD for the XML 
	if reqopt.extract(1)=0!(reqopt.extract(1)=2) do DTD(TITLE)

	// DTD only
	if reqopt.extract(1)=0 quit 

	set return=xx.addString(TITLE,0)
	do CIF
	do CIFAUTH		
	do DEP
	do LN
	do CIFEXT
	do CIFSERV
	do MEMOBILLPAY
	do MEMOBROKER
	do MEMOCC
	do MEMOECOM
	do MEMOPYMTS
	if 'MORE.get(),'EXTERNAL set return=xx.addString(TITLE,1)
	
	quit

CIF
	/*
	 Get PROFILE CIF information as following:
	 Customer Status,Customer Number,Customer Name,Mailing Address,
	 Home Phone,Business Phone,Email,Fax Number,Tax ID,
	*/

	type Public Number ACN,more,MORE
	type Public String reqopt,return
	type Public ResultSet rs1
		
	if MORE.get() quit	//another product took us >31000
	if 'reqopt.extract(2)=1 quit
	if more.get() set ACN=rs1.getCol("FLD2")
	

	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("ACN,BPH,BPHEXT,EMAIL,FAXNUM,HPH,FNAME,PAD1,PAD2,PCITY,MNAME,PSTATE,PZIP,TAXID,PREF,NAM,LNM,SUFFIX,APH,CCODE","CIF","ACN=:ACN")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("CIF",.rs)
		if return.toByteString().length()<31000 quit
		set ACN=rs.getCol(1)
		do SETMORE("CIF",ACN)
		}
	quit


CIFAUTH
	/*
	 Get PROFILE CIFAUTH information as following:
	 Customer Status,Customer Name
 
	*/

	type Public Number ACN,more,MORE
	type Public String reqopt,return
	type String STATUS
	type Public ResultSet rs1
	
	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(3)=1 quit
	if more.get() set ACN=rs1.getCol("FLD2")

	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("STATUS","CIFAUTH","ACN=:ACN")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("CIFAUTH",.rs)
		if return.toByteString().length()<31000 quit
		set STATUS=rs.getCol(1)
		do SETMORE("CIFAUTH",ACN)
		} 
	quit

DEP
	/*
	 Get PROFILE Deposit information as following:
	 Product Group,Account Number,Ledger Balance,Available Balance,
	 Account Name.
	 Retrieve information for all open deposit accounts linked to the
	 to the customer.
	*/

	type Public Number ACN,more,MORE
	type Public String reqopt,return
	type Number CID
	type Public ResultSet rs1
		
	if MORE.get() quit		// another product took us >31000
	if 'reqopt.extract(4)=1 quit
	if more.get() set ACN=rs1.getCol("FLD2"),CID=rs1.getCol("FLD3")
	else  set CID=""
	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("GRP,CID,BAL,BALAVL,ACCTNAME,CLS,BOO,CRCD,ODT,ACNRELC,IRN,IYTD,MDT,STAT,INTYLD,DLR,ORG,TRM,TYPE,IPY","RELCIF,DEP","ACN=:ACN AND DEP.CID=RELCIF.CID AND RELCIF.DOI='Y' AND DEP.STAT<4 AND CID>:CID")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("DEP",.rs)
 		if return.toByteString().length()<31000 quit
		set CID=rs.getCol(2)
		do SETMORE("DEP",ACN,CID)
		}
	quit

LN
	/*
	 Get PROFILE Loan information as following:
	 Product Group,Account Number,Ledger Balance,
	 Available Balance,Net Payoff Amount.
	 Retrieve all information for all open loans associated with
	 the customer.
	*/

	type Public Number ACN,more,MORE
	type Public String reqopt,return
	type Number CID
	type Public ResultSet rs1
		
	if MORE.get() quit		// another product took us >31000
	if 'reqopt.extract(5)=1 quit
	if more.get() set ACN=rs1.getCol("FLD2"),CID=rs1.getCol("FLD3")
	else  set CID=""
	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("GRP,CID,BAL,AVLBAL,ACCTNAME,POAM,CLS,BOO,CRCD,ODT,ACNRELC,IRN,IYTD,MDT,STAT,GTDUE,LCHG,MCHG,DUPR,DUIN,TYPE,IPY,SCHND,DIST1ND","RELCIF,LN","ACN=:ACN AND RELCIF.LDI='Y' AND LN.STAT<4 AND LN.CID=RELCIF.CID")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get() 
		set return=xx.addRow("LN",.rs)
		if return.toByteString().length()<31000 quit
		set CID=rs.getCol(2)
		do SETMORE("LN",ACN,CID)
		}
 
	quit
	
CIFEXT
	/*
	  Get CIF external institution accounts information as following:
	  Sequence,Transit Number,External Institution,External Account Number,
	  Account Type,Branch Address,Beneficiary City,Province,Postal Code,
	  Time Stamp,Description/Comment,Beneficiary Name
	*/
	
	type Public Number ACN,more,MORE
	type Public String reqopt,return
	type Number SEQ
	type Public ResultSet rs1
	
	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(6)=1 quit
	
	if more.get() set ACN=rs1.getCol("FLD2"),SEQ=rs1.getCol("FLD3")
	else  set SEQ=""
	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("SEQ,TRANSIT,EXTINST,EXTACCT,TYPE,ADDR,BENCITY,PROV,PC,TIME,DESC,BENNAME","CIFEXT","ACN=:ACN")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("CIFEXT",.rs)
 		if return.toByteString().length()<31000 quit
		set SEQ=rs.getCol(1)
		do SETMORE("CIFEXT",ACN,SEQ)
		}

	quit

CIFSERV
	/*
	 Get PROFILE Credit information as following:
	 Password, Status
	 Retrieve information about all credit cards associated with the
	 customer.
	*/

	type Public Number ACN,more,MORE
	type Public String reqopt,return
	type String SRVCAT,SERVICE
	type Public ResultSet rs1
	
	
	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(7)=1 quit
	if more.get() set ACN=rs1.getCol("FLD2"),SRVCAT=rs1.getCol("FLD3"),SERVICE=rs1.getCol("FLD4")
	else  set (SRVCAT,SERVICE)=""

	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("SRVCAT,SERVICE,PASSWORD,STATUS","CIFSERV","ACN=:ACN")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get() 
		set return=xx.addRow("CIFSERV",.rs)
 		if return.toByteString().length()<31000 quit
		do SETMORE("CIFSERV",ACN,SRVCAT,SERVICE)
		}

	quit

MEMOBILLPAY
	/*
	  Get Billpay  information as following:
	  Account Relationship Code,Account Identifier,Account Nickname,
	  Account Status,Route and
	  Transit Number,Service
	*/
	
	type Public String reqopt,return
	type public Number more,MORE
	type String SERVICE
	type Number ACCKEY
	type Public ResultSet rs1

	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(8)=1 quit
	if more.get() do { quit:MORE.get()
		set SERVICE=rs1.getCol("FLD2"),ACCKEY=rs1.getCol("FLD3")
		type HTML xx=Class.new("HTML")

		type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,RTN,SERVICE,ACCKEY","CIFACCTS,MEMOBILLPAY","ACN=:ACN AND CIFACCTS.SRVCAT='BILLPAY' AND MEMOBILLPAY.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOBILLPAY.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE=:SERVICE AND MEMOBILLPAY.ACCKEY>:ACCKEY")
		if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
			set return=xx.addRow("CIFACCTS,MEMOBILLPAY",.rs)
			if return.toByteString().length()<31000 quit
			set SERVICE=rs.getCol(6)
			set ACCKEY=rs.getCol(7)
			do SETMORE("MEMOBILLPAY",SERVICE,ACCKEY)
			}
		}
	else  set SERVICE=""	
		
		
	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,RTN,SERVICE,ACCKEY","CIFACCTS,MEMOBILLPAY","ACN=:ACN AND CIFACCTS.SRVCAT='BILLPAY' AND MEMOBILLPAY.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOBILLPAY.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE>:SERVICE")
	if 'rs.isEmpty() while rs.next() do { quit:$G(MORE)
		set return=xx.addRow("CIFACCTS,MEMOBILLPAY",.rs)
		if return.toByteString().length()<31000 quit
		set SERVICE=rs.getCol(6)
		set ACCKEY=rs.getCol(7)
		do SETMORE("MEMOBILLPAY",SERVICE,ACCKEY)
		}
	quit

	
MEMOBROKER
 
	/*
	 Get Brokerage information as following:
	 Account Relationship Code,Account Identifier, Account Nickname,
	 Account Status,Service Name.
	*/
	
	type Public String reqopt,return
	type public Number more,MORE
	type String SERVICE
	type Number ACCKEY
	type Public ResultSet rs1

	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(9)=1 quit
	if more.get() do { quit:MORE.get()
		set SERVICE=rs1.getCol("FLD2"),ACCKEY=rs1.getCol("FLD3")
		type HTML xx=Class.new("HTML")

		type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE,ACCKEY","CIFACCTS,MEMOBROKER","ACN=:ACN AND CIFACCTS.SRVCAT='BROKER' AND MEMOBROKER.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOBROKER.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE=:SERVICE AND MEMOBROKER.ACCKEY=:ACCKEY")
		if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
			set return=xx.addRow("CIFACCTS,MEMOBROKER",.rs)
			if return.toByteString().length()<31000 quit
			set SERVICE=rs.getCol(5)
			set ACCKEY=rs.getCol(6)
			do SETMORE("MEMOBROKER",SERVICE,ACCKEY)
			}
		}

	else  set SERVICE=""

	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE,ACCKEY","CIFACCTS,MEMOBROKER","ACN=:ACN AND CIFACCTS.SRVCAT='BROKER' AND MEMOBROKER.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOBROKER.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE>:SERVICE")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("CIFACCTS,MEMOBROKER",.rs)
 		if return.toByteString().length()<31000 quit
		set SERVICE=rs.getCol(5)
		set ACCKEY=rs.getCol(6)
		do SETMORE("MEMOBROKER",SERVICE,ACCKEY)
		}

	quit

MEMOCC
	/*
 
	Get PROFILE Account number or some other identifier for the product or service.  For
	internal PROFILE products, the identifier would be an account number.
	*/
 	
 	type Public String reqopt,return
 	type public Number more,MORE
 	type String SERVICE
 	type Number ACCKEY
 	type Public ResultSet rs1

	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(10)=1 quit
	if more.get() do { quit:MORE.get()
		set SERVICE=rs1.getCol("FLD2"),ACCKEY=rs1.getCol("FLD3")
		type HTML xx=Class.new("HTML")

		type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE,ACCKEY","CIFACCTS,MEMOCC","ACN=:ACN AND CIFACCTS.SRVCAT='CREDIT' AND MEMOCC.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOCC.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE=:SERVICE AND MEMOCC.ACCKEY>:ACCKEY")
		if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
			set return=xx.addRow("CIFACCTS,MEMOCC",.rs)
			if return.toByteString().length()<31000 quit
			set SERVICE=rs.getCol(3)
			set ACCKEY=rs.getCol(4)
			do SETMORE("MEMOCC",SERVICE,ACCKEY)
			}
		}

	else  set SERVICE=""

	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME","CIFACCTS,MEMOCC","ACN=:ACN AND CIFACCTS.SRVCAT='CREDIT' AND MEMOCC.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOCC.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE>:SERVICE")
	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("CIFACCTS,MEMOCC",.rs)
 		if return.toByteString().length()<31000 quit
		do SETMORE("MEMOCC",SERVICE,ACCKEY)
		}
		
	quit

MEMOECOM
	
	/*
	 Get e-Commerce information as following:
	 Account Relationship Code,Account Identifier, Account Nickname,
	 Account Status,Service Name.
	*/
	
	type Public String reqopt,return
	type public Number more,MORE
	type String SERVICE
	type Number ACCKEY
	type Public ResultSet rs1
	
	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(11)=1 quit
	if more.get() do { quit:MORE.get() 
		set SERVICE=rs1.getCol("FLD2"),ACCKEY=rs1.getCol("FLD3")
		type HTML xx=Class.new("HTML")
		
		type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE,ACCKEY","CIFACCTS,MEMOECOM","ACN=:ACN AND CIFACCTS.SRVCAT='ECOMMERCE' AND MEMOECOM.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOECOM.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE=:SERVICE AND MEMOECOM.ACCKEY>:ACCKEY") 
		if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
			set return=xx.addRow("CIFACCTS,MEMOECOM",.rs)
			if return.toByteString().length()<31000 quit
			set SERVICE=rs.getCol(5)
			set ACCKEY=rs.getCol(6)
			do SETMORE("MEMOECOM",SERVICE,ACCKEY)
			}
		}

	else  set SERVICE=""
 	
	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE,ACCKEY","CIFACCTS,MEMOECOM","ACN=:ACN AND CIFACCTS.SRVCAT='ECOMMERCE' AND MEMOECOM.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOECOM.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE>:SERVICE")
 	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("MEMOECOM",.rs)
		if return.toByteString().length()<31000 quit
		set SERVICE=rs.getCol(5)
		set ACCKEY=rs.getCol(6)
		do SETMORE("MEMOECOM",SERVICE,ACCKEY)
		}

	quit

MEMOPYMTS

	/*    
	  Get Payments information as following:
	  Account Relationship Code,Account Identifier, Account Nickname,
	  Account Status,Route and Transit Number,Service Name.	
	*/
	
	type Public String reqopt,return
	type public Number more,MORE
	type String SERVICE
	type Number ACCKEY
	type Public ResultSet rs1
	
	if MORE.get() quit	// another product took us >31000
	if 'reqopt.extract(12)=1 quit
	if more.get() do { quit:MORE.get()
		set SERVICE=rs1.getCol("FLD2"),ACCKEY=rs1.getCol("FLD3")
		type HTML xx=Class.new("HTML")

		type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,RTN,SERVICE,ACCKEY","CIFACCTS,MEMOPYMTS","ACN=:ACN AND CIFACCTS.SRVCAT='PAYMENTS' AND MEMOPYMTS.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOPYMTS.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE=:SERVICE AND MEMOPYMTS.ACCKEY>:ACCKEY")
		if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
			set return=xx.addRow("CIFACCTS,MEMOPYMTS",.rs)
			if return.toByteString().length()<31000 quit
			set SERVICE=rs.getCol(6)
			set ACCKEY=rs.getCol(7)
			do SETMORE("MEMOPYMTS",SERVICE,ACCKEY)
			}
		}

	else  set SERVICE=""
 
	type HTML xx=Class.new("HTML")
	type ResultSet rs=Db.select("IDENTIFIER,ACCTNAME,MEMORELC,STATUS,RTN,SERVICE,ACCKEY","CIFACCTS,MEMOPYMTS","ACN=:ACN AND CIFACCTS.SRVCAT='PAYMENTS' AND MEMOPYMTS.IDENTIFIER=CIFACCTS.IDENTIFIER AND MEMOPYMTS.SERVICE=CIFACCTS.SERVICE AND CIFACCTS.SERVICE>:SERVICE")
 	if 'rs.isEmpty() while rs.next() do { quit:MORE.get()
		set return=xx.addRow("MEMOPYMTS",.rs)
		if return.toByteString().length()<31000 quit
		set SERVICE=rs.getCol(6)
		set ACCKEY=rs.getCol(7)
		do SETMORE("MEMOPYMTS",SERVICE,ACCKEY)
		}

	quit



DTD(TITLE)
	
	type Public String return
	type HTML xx=Class.new("HTML")
	set return=xx.addTitle(TITLE)
	set return=xx.addElement(TITLE,"CIF?,CIFACCTS?,CIFEXT?,CIFSERV?,DEP?,LN?,MEMOBILLPAY?,MEMOBROKER?,MEMOCC?,MEMOECOM?,MEMOPYMTS?,MORETKN?,ERROR?,STATUS?")
	set return=xx.addElement("MORETKN","MORE")
	set return=xx.addElement("CIF","ACN,BPH,BPHEXT,EMAIL,FAXNUM,HPH,FNAME,PAD1,PAD2,PCITY,MNAME,PSTATE,PZIP,TAXID,PREF,NAM,LNM,SUFFIX,APH,CCODE")
	set return=xx.addElement("CIFAUTH","STATUS,ACN")
	set return=xx.addElement("DEP","GRP,CID,BAL,BALAVL,ACCTNAME,CLS,BOO,CRCD,ODT,ACNRELC,IRN,IYTD,MDT,STAT,INTYLD,DLR,ORG,TRM,TYPE,IPY")
	set return=xx.addElement("LN","GRP,CID,BAL,AVLBAL,ACCTNAME,POAM,CLS,BOO,CRCD,ODT,ACNRELC,IRN,IYTD,MDT,STAT,GTDUE,LCHG,MCHG,DUPR,DUIN,TYPE,IPY,SCHND,DIST1ND")
	set return=xx.addElement("CIFEXT","SEQ,TRANSIT,EXTINST,EXTACCT,TYPE,ADDR,BENCITY,PROV,PC,TIME,DESC,BENNAME")
	set return=xx.addElement("CIFSERV","SRVCAT,SERVICE,PASSWORD,STATUS")
	set return=xx.addElement("MEMOBILLPAY","ACCTNAME,IDENTIFIER,MEMORELC,RTN,SERVICE,STATUS")
	set return=xx.addElement("MEMOBROKER","IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE")
	set return=xx.addElement("MEMOCC","IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE")
	set return=xx.addElement("MEMOECOM","IDENTIFIER,ACCTNAME,MEMORELC,STATUS,SERVICE")
	set return=xx.addElement("MEMOPYMTS","IDENTIFIER,ACCTNAME,MEMORELC,STATUS,RTN,SERVICE")
	set return=xx.addElement("ERROR","CODE,ARGUMENT,DESCRIPTION")	
	set return=xx.addAttrib("CIF","CODE,ARGUMENT,DESCRIPTION")
	set return=xx.addAttrib("CIF","ACN,BPH,BPHEXT,EMAIL,FAXNUM,HPH,FNAME,PAD1,PAD2,PCITY,MNAME,PSTATE,PZIP,TAXID,PREF,NAM,LNM,SUFFIX,APH,CCODE")
	set return=xx.addAttrib("CIFAUTH","STATUS")
	set return=xx.addAttrib("DEP","GRP,CID,BAL=CURRENCY,BALAVL=CURRENCY,ACCTNAME,CLS,BOO,CRCD,ODT=DATE,ACNRELC,IRN,IYTD=CURRENCY,MDT=DATE,STAT,INTYLD,DLR=DATE,ORG=CURRENCY,TRM,TYPE,IPY=CURRENCY")
	set return=xx.addAttrib("LN","AVLBAL=CURRENCY,POAM=CURRENCY,GTDUE=CURRENCY,LCHG=CURRENCY,MCHG=CURRENCY,DUPR=CURRENCY,DUIN=CURRENCY,SCHND=DATE,DIST1ND=DATE")
	set return=xx.addAttrib("CIFSERV","SRVCAT,SERVICE,PASSWORD")
	set return=xx.addAttrib("CIFEXT","SEQ,TRANSIT,EXTINST,EXTACCT,TYPE,ADDR,BENCITY,PROV,PC,TIME,DESC,BENNAME")
	set return=xx.addAttrib("MEMOBILLPAY","IDENTIFIER,MEMORELC,RTN")

	quit


SETMORE(FLD1,FLD2,FLD3,FLD4,FLD5)

	type String reqopt,return
	type Number more,MORE
	
	set MORE=$$MORETKN^UTLMRPC($J) 
	//31000 limit to prevent other tables from expanding the return variable
	
	//instantiate MORE and  update it with these fields
	type RecordMORETKN moretkn=Class.new("RecordMORETKN")
	set moretkn.more=MORE
	set moretkn.fld1=FLD1.get()
	set moretkn.fld2=FLD2.get()
	set moretkn.fld3=FLD3.get()
	set moretkn.fld4=FLD4.get()
	set moretkn.fld5=FLD5.get()
	set moretkn.reqopt=reqopt.get()
	do moretkn.bypassSave()
	
	// Add more indicator to return
	
	type HTML xx=Class.new("HTML")
	set return=xx.addString("MORETKN",0)
	set return=xx.addProp("MORE",MORE)
	set return=xx.addString("MORETKN",1)
	quit
	
getmore
	type Public String MORETKN,reqopt,return
	type public Number more
	type String TITLE
	type Number MORE2
	
	set MORE2=more
	type Public ResultSet rs1=Db.select("FLD1,FLD2,FLD3,FLD4,FLD5,REQOPT","MORETKN","MORE=:MORE2")
	if rs1.next() do {
	
		do Db.fastDelete("MORETKN","MORE2")
		set reqopt=rs1.getCol("REQOPT")
		if rs1.getCol("FLD1")="CIF"!(more=0) set more=0 do CIF
		if rs1.getCol("FLD1")="CIFAUTH"!(more=0) set more=0 do CIFAUTH		
		if rs1.getCol("FLD1")="DEP"!(more=0) set more=0 do DEP
		if rs1.getCol("FLD1")="LN"!(more=0) set more=0 do LN
		if rs1.getCol("FLD1")="CIFEXT"!(more=0) set more=0 do CIFEXT
		if rs1.getCol("FLD1")="CIFSERV"!(more=0) set more=0 do CIFSERV
		if rs1.getCol("FLD1")="MEMOBILLPAY"!(more=0) set more=0 do MEMOBILLPAY
		if rs1.getCol("FLD1")="MEMOBROKER"!(more=0) set more=0 do MEMOBROKER
		if rs1.getCol("FLD1")="MEMOCC"!(more=0) set more=0 do MEMOCC
		if rs1.getCol("FLD1")="MEMOECOM"!(more=0) set more=0 do MEMOECOM
		if rs1.getCol("FLD1")="MEMOPYMTS"!(more=0) set more=0 do MEMOPYMTS
		type HTML xx=Class.new("HTML")
		if more=0 set return=xx.addString(TITLE,1)
		}
 	quit

vSIG()	quit "60461^55005^Dan Russell^23065"	// Signature - LTD^TIME^USER^SIZE
