EXTTRF	
  /*
ORIG: OFALTR - 04/09/2002
DESC: Teller System External Transfer Posting Routine

---- Comments --------------------------------------------------------

	External Accounts/Transfers Input Program

	From the top, this routine is used as the client program
	for transaction codes EXTCR, EXTDR.

	Also, section POST is used as the posting program
	for transaction codes EXTCR, EXTDR.

---- Revision History ------------------------------------------------

	03/28/06 - KumarSS - CR 19986
		   Modified PFWPOST section to display the message 
		   "External transfer information incomplete. 
		   Transactions not posted" if any of the 
		   required TSO fields is not entered.

	09/07/05 - KELLYP - CR 17118
		   Replaced all references to MSG100DT with MSG103DT. The
		   MT100 has been obsoleted by SWIFT and all references to
		   it have been removed from the system.  Also removed
		   pre-2003 revision history.

	06/25/03 - CARROLLJ - 51349
		   o Remove use of the TR array.
 */

	quit

PFWFILE(RecordTTX ttx)
	/*
	File EFTPAY record

	We ONLY want to execute from this point if we intend to build
	the EFTPAY record.

	*/

	new EFTCID,EFTSEQ,SEQ,XTSO

	catch error {
		new ER,FROM
		set ER=1,RM=error.type_", "_error.description
		if error.type["%GTM-" do ZE^UTLERR
		set FROM=error.thrownAt
	}

	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")

	do OUT^UTSO(.XTSO,ttx.tso)
	
	set EFTCID=$G(XTSO("FCID"))

	set eftpay.cid=EFTCID
	set EFTSEQ=Db.nextVal("EFTPAY","EFTCID")
	set eftpay.seq=EFTSEQ 

	if $G(XTSO("OCC"))'="" set eftpay.cc=XTSO("OCC")
	else  do {
		type RecordACN acn=Db.getRecord("ACN","EFTCID")
		set eftpay.cc=acn.cc
	}

	set eftpay.recacct=$G(XTSO("RCID"))
	set eftpay.recinst=$G(XTSO("RINS"))
	set eftpay.hldauto=$G(XTSO("HLDAUTO"))
	set eftpay.amttyp=$G(XTSO("AMTTYP"))
	
	set eftpay.frequency=$G(XTSO("EFTFREQ"))
	set eftpay.amount=ttx.tamt
	if ttx.crcd'="" set eftpay.crcd=ttx.crcd
	else  set eftpay.crcd=%CRCD

	set eftpay.efd=ttx.efd
	if eftpay.efd<%SystemDate set eftpay.efd=%SystemDate

	if ttx.itc=1 set eftpay.efttype="PO"
	else  set eftpay.efttype="CO"

	// Teller external transfer
	set eftpay.exttrf=1
	set eftpay.ttype=1

	// If there is a frequency, make CO a COF, and make PO a POF.
	if eftpay.frequency'="" set eftpay.efttype=eftpay.efttype_"F"

	do Runtime.start("CS",,"SAVPTR")
	do eftpay.save("/VALDD/VALRI/VALREQ")

	if ER do Runtime.rollback("SAVPTR")
	quit:ER

	do public^BCHEFT(EFTCID,EFTSEQ)

	if ER do Runtime.rollback("SAVPTR")

	do Runtime.commit()

	quit

FILE(RecordTTX ttx)
 	/*
	File EFTPAY record

	We ONLY want to execute from this point forward if we intend

	to build the EFTPAY record.
	
	*/

	new EFTCID,EFTSEQ,EXTTRF,SEQ,SOURCE,XTSO

	catch error {
		new ER,FROM
		set ER=1,RM=error.type_", "_error.description
		if error.type["%GTM-" do ZE^UTLERR
		set FROM=error.thrownAt
	}

	do OUT^UTSO(.XTSO,ttx.tso)
	set EXTTRF=XTSO("EXTTRF").get()

	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")
	
	set EFTCID=$P(EXTTRF,"^",24)

	set eftpay.cid=EFTCID
	set EFTSEQ=Db.nextVal("EFTPAY","EFTCID")
	set eftpay.seq=EFTSEQ

	set eftpay.recacct=$P(EXTTRF,"^",1)
	set eftpay.recinst=$P(EXTTRF,"^",2)
	set eftpay.amount=$P(EXTTRF,"^",3)

	/*
	 If we did an exchange, then the amount in "eft" is not
	 the amount to send to EFTOUT; the EXTCR/EXTDR amount is
	 the exchanged amount.
	*/

	/*
	  Set eftpay.amount to ttx.tamt.  The original code looped through TR
	  to get the TAMT from the previous sequence.  The code below may
	  need to change if eftpay.amount is incorrect.
	*/
	if eftpay.amount="" set eftpay.amount=ttx.tamt

	if $P(EXTTRF,"^",4)'="" set eftpay.crcd=$P(EXTTRF,"^",4)
	else  set eftpay.crcd=%CRCD

	set eftpay.constant=$P(EXTTRF,"^",6)
	set eftpay.efd=$P(EXTTRF,"^",8)
	set eftpay.frequency=$P(EXTTRF,"^",9)

	set eftpay.cc=$P(EXTTRF,"^",11)

	set eftpay.status=$P(EXTTRF,"^",12)
	set eftpay.met=$P(EXTTRF,"^",13)
	set eftpay.procdt=$P(EXTTRF,"^",17)
	set eftpay.amttyp=$P(EXTTRF,"^",18)
	set eftpay.efttype=$P(EXTTRF,"^",19)
	set eftpay.expdt=$P(EXTTRF,"^",22)

	set eftpay.msg103dt=$P(EXTTRF,"^",32)

	set eftpay.hldauto=$P(EXTTRF,"^",33)
	
	// Store TSO, without EXTTRF info, into EFTPAY record to be included
	// on all subsequent transactions
	kill XTSO("EXTTRF")
	do IN^UTSO(.XTSO,.SOURCE)

	set eftpay.uniqtso=SOURCE
	
	// Teller external transfer
	set eftpay.exttrf=1
	set eftpay.ttype=1

	do Runtime.start("CS",,"SAVPTR")

	do eftpay.save("/VALDD/VALRI/VALREQ")
	
	if ER do Runtime.rollback("SAVPTR")
	quit:ER
	
	do public^BCHEFT(EFTCID,EFTSEQ)

	if ER do Runtime.rollback("SAVPTR")
	do Runtime.commit()
	quit
	
EC	/*
	 Error Correct Entry Point
	*/

	quit

	
PFWPOST(RecordACN acn,RecordTTX ttx,RecordTRN trn)

        type String XTSO()

        do OUT^UTSO(.XTSO,ttx.tso)

        // Check for required TSO fields
        if XTSO("FCID").get()'="",XTSO("RCID").get()'="",XTSO("RINS").get()'="" do PFWFILE^EXTTRF(.ttx)

        // External transfer information incomplete. Transactions not posted.
        if (XTSO("FCID").get()="")!(XTSO("RCID").get()="")!(XTSO("RINS").get()="") do Runtime.setErrMSG("TTX",2049)

        quit


POST(RecordACN acn,RecordTTX ttx,RecordTRN trn)

	new EFTSEQ

	/*
	 Check TR array for TSO("EXTTRF") to prevent the filing of
	 external transfer transactions without transfer information.
	
	Also:
	 Check the effective date on the payment order.  If it is prior
	 to today, return error and do not set up FSN.	

	*/

	//External transfer information incomplete. Transactions not posted.
	if ttx.tso'["EXTTRF#" set ER=1,RM=$$^MSG(2049)

	// Date must not be in the past
	set TS0=ttx.tso
	if $P(TSO,"^",8)<%SystemDate set ER=1,RM=$$^MSG(755)


	do FILE(.ttx)

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60351^40804^Sudanthiran S. Kumar^5438"	// Signature - LTD^TIME^USER^SIZE
