LNBOD	
	/*
	Calls BOD routines for testing
	
	   ORIG:  Kathie Jalbuena (7070) - 09/02/87

	---- Revision History ------------------------------------------------
	12/04/07 - Mugilvannan - 23163
		   Added a new section MLVRCHG,VPG1,VPG001,EFDVER to facilitate 
		   INTEREST CHANGE OFFSET processing based on the EFD and INDEX 
		   for multiple accounts.
		   
	02/16/06 - Carrie Baildon - 16889
		   Replaced call from top of PABOD to SING^PABOD to ensure
		   only one account is processed. The public function SING
		   has been restored in PABOD as well as part of this CR.
	
	01/30/06 - SmithCD - CR 19343 (16890)
		   Removed CTL parameter from call to EXTERN^BCHLNSCH.

	04/05/05 - KinI - 14835
		   Modified to simplify, comply with DBI standards and clean 
		   undefined errors.
		   Eliminated VER,INIT,PRE and ERR sections.
		   Replaced %EffectiveDate with EFD.
		   
	01/28/04 - CARROLLJ - CR7997
		   Corrected call to BCHLNLD to pass correct. parameters.

	*/
	
	quit
	
	
LNREAMO	// called by @LNK004, Single Loan Update - Re-Amortization Processing

	do VPG("LNREAMO")

	quit


LNIPCHG	// called by @LNK005, Single Loan Update - Capitalization Teller Posting

	do VPG("LNIPCHG")

	quit


LNEAB	// called by @LNK018, Single Loan Update - Escrow Analysis Processing

	do VPG("LNEAB")

	quit


LNNFDE	// called by @LNK012, New Account Net Fees Deferral

	do VPG("LNNFDE")

	quit


LNNFAM	// called by @LNK011, Net Fees Amortization

	do VPG("LNNFAM")

	quit


LNCPBOD	// called by @LNK009, Coupon Production Date Roll

	do VPG("LNCPBOD")

	quit
	

MLVRCHG	// called by @LNK024, Multi Loan Update - Interest Change Offset

	do VPG1("MLVRCHG")

	quit

VPG1(String DO)	// Function type

	type Number %PG, CID, SING
	type String INDEX,VFMQ
	type Date EFD=%SystemDate
	type Date EJD=%SystemDate
	
	set %ProcessMode=1
	set %PG=1
	
	do VPG001(.INDEX,.EFD)
		
	if "DFQ"[VFMQ do {
		if (%ProcessMode=2) ! (%ProcessMode=4) ! (VFMQ="Q") do END quit

		type ResultSet rs=Db.select("INDEX,CID","LN","INTOFFDT=:EFD")

		if rs.isEmpty() quit 
		while rs.next() do {
			set CID=rs.getCol("CID")
			if rs.getCol("INDEX")'=INDEX quit
			if DO="MLVRCHG" set %SystemDate=EFD set SING=1 do PROCESS^BCHVRCHG quit
			}
		do END
		}
		
	quit

VPG001(String INDEX,	// INDEX
       Date EFD)	// Effective Date
        
        type String %READ, %TAB
        
	set %TAB("EFD")=".EFD1/XPP=D EFDVER^LNBOD(X)"
	set %TAB("INDEX")=".INDEX1/HLP=[INDEX]INDEX/TBL=[INDEX]"
	
	set %READ="@@%FN,,,EFD/REQ,INDEX/REQ"
	do ^UTLREAD
	quit

EFDVER(Date EFD)  // Effective date must be less than current system date

	type public String ER
		
	if EFD > %SystemDate do Runtime.setErrMSG("LN",3210) quit:ER
	quit

VPG(String DO)	// Function type

	type Number %PG, CID
	type String VFMQ
	type Date EFD=%SystemDate
	
	set %ProcessMode=1
	set %PG=1 
	
	do VPG00(.CID,.EFD,.VFMQ,DO)		
		
	if "DFQ"[VFMQ do {
		if (%ProcessMode=2) ! (%ProcessMode=4) ! (VFMQ="Q") do END quit	

		// CID is not needed when DO="LNNFAM"
		if CID.get().isNull() set CID=0
		
		do FILE(DO,CID,EFD) 			
		}
		
	quit


VPG00(Number CID,	// Account Number
      Date EFD,		// Effective Date
      String VFMQ,	// Mode	
      String DO)	// Function Type
             
	type String %READ, %TAB
	
	set %TAB("CID")=".CID1/XPP=D POST^LNBOD(X,DO,.EFD)"
	set %TAB("EFD")=".EFD1/XPP=D EFD^LNBOD(X,DO,CID,.VFMQ)"

	set %READ="@@%FN,,,CID/REQ,EFD/REQ"

	// No need for CID and EFD post-processor since VALEFD validation is not 
	// necessary in the case of "LNNFAM"
	if DO="LNNFAM" set %TAB("EFD")=".EFD1" set %READ="@@%FN,,,EFD/REQ"

	do ^UTLREAD

	quit


public FILE(String DO,		// Function type
	    Number CID,		// Account Number
	    Date EFD)		// Effective Date
	    
	// Also called by MRPC030 to file data

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)

	// Payment Change Offset Process, "DO" is set by MRPC030, Single loan 
	// update functions procedure
	if DO="LNPTCHG" do { quit
		type Date EJD=%SystemDate 
		type String %RAOFF=""
		
		#ACCEPT DATE=12/09/03;PGM=John Carroll
		set %SystemDate=EFD
		do ^PRCPMTCG
		}

	// Scheduled Payment Date Roll, "DO" is set by MRPC030
	#ACCEPT DATE=12/09/03;PGM=John Carroll
	if DO="LNSCH" set %SystemDate=EFD do EXTERN^BCHLNSCH(.ln) quit


	// Payment Billing Process, "DO" is set by MRPC030
	if DO="LNBLDB" do { quit

		type String MFCOFF()
		type Number BRCD

		#ACCEPT DATE=12/09/03;PGM=John Carroll
		set %SystemDate=EFD

		do TTX(.BRCD)
		
		// Back-office billing driver (BCHLNBLDB)
		do EXEC^BCHLNLD(.ln,1)  

		if MFCOFF.data() do {
			// File accumulated min finance chg offsets
			set MFCOFF="MFCOFF"

			do OFFSET^UMSC(%SystemDate,0,%UserID,.MFCOFF,1,1)
			}
		}

	// Dayend payment change utility
	if DO="LNREAMO" do { quit
		type String %RAOFF=""
		type Date EJD=%SystemDate 
		
		do ^PRCPMTCG
		}

	// Deferred Interest capitalization
	if DO="LNIPCHG" do {
		type Number BRCD
		type Date TPD=%SystemDate 

		do TTX(.BRCD)

		do EXEC^BCHLNDIC(EFD,.ln) quit
		}


	// Interest Change Offset (BCHLNVRCHG), "DO" is set by MRPC030
	#ACCEPT DATE=12/09/03;PGM=John Carroll
	if DO="LNVRCHG" set %SystemDate=EFD do PROCESS^BCHVRCHG quit

	// Escrow Analysis
	#ACCEPT DATE=12/09/03;PGM=John Carroll
	if DO="LNEAB" set %SystemDate=EFD do EXTERN^BCHLNEAB(.ln) quit


	// Payment Change Date Process (BCHLNPMTC), "DO" is set by MRPC030
	if DO="LNPMTC" do PROCESS^BCHPMTCG(.ln) quit


	// Interest Change Date Process (BCHLNINTC), "DO" is set by MRPC030
	if DO="LNINTC" do EXTERN^BCHICHAN(.ln,EFD,0) quit


	// Back-office Loan Fee Assessments (BCHLNFEEDE)
	#ACCEPT DATE=12/09/03;PGM=John Carroll
	if DO="LNNFDE" set %SystemDate=EFD set SING=1 do EXTERN^BCHLNFEE(.ln,1) quit


	// Net Deferred Fees Amortization (BCHLNNFAM)- collates through all CIDs 
	// in LNCYCPTS table
	#ACCEPT DATE=12/09/03;PGM=John Carroll			
	if DO="LNNFAM" set %SystemDate=EFD do ^BCHNDFAM quit


	// Coupon Book Reorder Date Advancement (BCHLNCPBOD)
	#ACCEPT DATE=12/09/03;PGM=John Carroll
	if DO="LNCPBOD" set %SystemDate=EFD do exec^BCHLNCPB quit

	// Earnings Analysis, "DO" is set by MRPC030
	if DO="PABOD" do { quit
		type Date CPE=EFD
		do SING^PABOD
		}
	quit


POST(Number X,	// Account Number
     String DO,	// Function Type
     Date EFD)	// Effective Date
     
	// Verify CID, general post processor

	type public String ER
	type Number %EXT=1	
	type String ZCLS="L" // expected in ^UACN for class validation

	do ^UACN quit:ER
	
	if X="" quit
	
	do VALCID(X,DO,.EFD)

	quit


public	VALCID(Number X,	// Account Number
               String DO,	// Function Type	
       	       Date EFD)	// Effective Date
       	       
	// Also called by MRPC030 to validate account and set up EFD variable

	type public String ER
	
	type RecordLN ln=Db.getRecord("LN","CID=:X",1)

	if DO="LNPTCHG" do { quit
		
		set EFD=ln.pchnd
		// Invalid. Adjustable payment processing not enabled for this account.
		if EFD="" do Runtime.setErrMSG("LN",1333) quit:ER

		// Apply payment change offset
		set EFD=EFD-ln.pcoff
		
		// Function inappropriate for this account. Next processing date is in the future.
		if EFD > %SystemDate do Runtime.setErrMSG("LN",411) quit:ER
		}

	if DO="LNSCH" do { quit
		
		set EFD=ln.schnd
		// Invalid. Payment processing not enabled for this account.
		if EFD="" do Runtime.setErrMSG("LN",1336) quit:ER

		// Function inappropriate for this account. Next processing date is in the future.
		if EFD > %SystemDate do Runtime.setErrMSG("LN",411) quit:ER

		// Set uncapitalized deferred int/div to zero via transaction posting
		if ln.diu do Runtime.setErrMSG("LN",2505) quit:ER
		}

	if DO="LNBLDB" do { quit
		
		set EFD=ln.bndt
		// Invalid. Payment processing not enabled for this account.
		if EFD="" do Runtime.setErrMSG("LN",1336) quit:ER

		// Function inappropriate for this account. Next processing date is in the future.
		if EFD '< %SystemDate do Runtime.setErrMSG("LN",411) quit:ER
		}

	if DO="LNEAB" do {
		set EFD=ln.apcnd-ln.anoff
		
		// Function inappropriate for this account. Next processing date is in the future.
		if EFD > %SystemDate do Runtime.setErrMSG("LN",411) quit:ER
		}

	if DO="LNPMTC" do { quit
		
		set EFD=ln.pchnd
		// Invalid. Adjustable payment processing not enabled for this account.
		if EFD="" do Runtime.setErrMSG("LN",1333) quit:ER

		// Function inappropriate for this account. Next processing date is in the future.
		if EFD > %SystemDate do Runtime.setErrMSG("LN",411) quit:ER
		}

	if DO="LNINTC" do { quit
		// Processing is only enabled if offset is other than null

		// Invalid. Adjustable rate processing not enabled for this account.
		if ln.intoff="" do Runtime.setErrMSG("LN",1329) quit:ER

		set EFD=ln.ichnd
		
		// Function inappropriate for this account. Next processing date is in the future.
		if EFD > %SystemDate do Runtime.setErrMSG("LN",411) quit:ER
		}

	if DO="LNVRCHG" do { quit
		// Processing is only enabled if offset is other than null

		// Invalid. Adjustable rate processing not enabled for this account.
		if ln.intoff="" do Runtime.setErrMSG("LN",1329) quit:ER

		set EFD=ln.ichnd
		set EFD=$$INTOFFDT^LNCDI(EFD,ln.intoff,ln.intoffcl)

		// Function inappropriate for this account. Next processing date is in the future.
		if EFD > %SystemDate do Runtime.setErrMSG("LN",411) quit:ER
		}

	// Profitability analysis not set up for this account
	if (DO="PABOD") , (X'="") , ('Db.isDefined("PAA","EFD=:%EffectiveDate,CID=:X")) do Runtime.setErrMSG("LN",2270) quit:ER

	quit


EFD(Date X,		// Effective Date	
    String DO,		// Function Type
    Number CID,		// Account Number
    String VFMQ)	// Mode
    
	// Post Processor to EFD

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
		
	do VALEFD(.ln,X,DO,.VFMQ)

	quit


public	VALEFD(RecordLN ln,	// LN record
               Date X,		// Effective Date
               String DO,	// Function Type        	
	       String VFMQ)	// Mode
	       			
	// Also called by MRPC030 to validate EFD

	type public String ER, ET, RM
	
	if DO="LNPTCHG" do { quit
		// Invalid date
		if (X '= (ln.pchnd-ln.pcoff)) ! (X > %SystemDate) do Runtime.setErrSTBLER("LN","INVLDDT") if ER set VFMQ="Q" quit
		}

	if DO="LNVRCHG" do { quit
		// Invalid date
		if (X '= $$INTOFFDT^LNCDI(ln.ichnd,ln.intoff,ln.intoffcl)) ! (X > %SystemDate) do Runtime.setErrSTBLER("LN","INVLDDT") if ER set VFMQ="Q" quit
		}

	if DO="LNPMTC" do { quit
		// Invalid date
		if (X '= ln.pchnd) ! (X > %SystemDate) do Runtime.setErrSTBLER("LN","INVLDDT") if ER set VFMQ="Q" quit
		}
		
	if DO="LNINTC" do { quit
		// Invalid date
		if (X '= ln.ichnd) ! (X > %SystemDate) do Runtime.setErrSTBLER("LN","INVLDDT") if ER set VFMQ="Q" quit
		}
		
	// Invalid date	
	if (DO="PABOD") , (X '= "") , ('Db.isDefined("PAD","EFD=:X")) do Runtime.setErrSTBLER("LN","INVLDDT") if ER set VFMQ="Q" quit

	// Cannot advance into the future
	// Function inappropriate for this account. Next processing date is in the future.
	if (DO="LNBLDB") , (X > (%SystemDate-1)) do Runtime.setErrMSG("LN",411) if ER set VFMQ="Q" quit

	// Cannot advance into the future
	// Function inappropriate for this account. Next processing date is in the future.
	if (DO="LNSCH") , (X > %SystemDate) do Runtime.setErrMSG("LN",411) if ER set VFMQ="Q" quit

	if DO="LNNFDE" do { quit
		
		type RecordDTJNA dtjna=Db.getRecord("DTJNA","TJD=:X,CLS='L',GRP=:ln.grp,TYP=:ln.type,CID=:ln.cid",1)
		// Account ~p1 not opened on ~p2
		if dtjna.getMode()=0  set ER=1 set RM=$$^MSG(8467,ln.cid,$$DAT^%ZM(X)) quit

		// Account ~p1 re-opened - cannot process
		if dtjna.reopn do Runtime.setErrMSG("LN",8468,ln.cid) if ER set VFMQ="Q" quit
		}

	quit


TTX(String BRCD)	// Branch Code	
	
	if %UserID.get() do {
		type RecordSCAU scau=Db.getRecord("SCAU","UID=:%UserID")
	 	set BRCD=scau.brcd
		}

	if BRCD.get().isNull()	set BRCD=CUVAR.bobr

	quit
	

END	

	type public String ER, ET, RM

	set ER="W" quit:RM.data()
	set RM=ET.get()
	
	quit	
	
	
	

vSIG()	quit "60635^5417^Saravanamuthu Mugilvannan^11380"	// Signature - LTD^TIME^USER^SIZE
