DATACNFL(RecordMDATAACN mdataacn, String vpar, Boolean vparNorm) // MDATAACN - Account Miscellaneous Data Tracking  Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = mdataacn.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(mdataacn,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(mdataacn,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("MDATAACN",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("MDATAACN","CID = :mdataacn.cid and SEQ = :mdataacn.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ

	type RecordMDATAACN mdataacn = Db.getRecord("MDATAACN","CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do mdataacn.setMode(2)

		do DATACNFL(mdataacn,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordMDATAACN mdataacn

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("MDATAACN","CID = :mdataacn.cid and SEQ = :mdataacn.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(mdataacn)) S ^MISCDATA("ACN",vobj(mdataacn,-3),vobj(mdataacn,-4))=vobj(mdataacn)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.mdataacn)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordMDATAACN mdataacn

	if vpar["/JOURNAL/" do VJOURNAL(.mdataacn)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^MISCDATA("ACN",vobj(mdataacn,-3),vobj(mdataacn,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordMDATAACN mdataacn

	if mdataacn.code.isNull() do vreqerr("CODE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordMDATAACN mdataacn

	if mdataacn.cid.isNull() do vreqerr("CID") quit
	if mdataacn.seq.isNull() do vreqerr("SEQ") quit

		if vx("CODE").exists(),mdataacn.code.isNull() do vreqerr("CODE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MDATAACN","MSG",1767,"MDATAACN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordMDATAACN mdataacn
	if 'mdataacn.cid.isNull() set vfkey("^ACN("_""""_mdataacn.cid_""""_","_50_")")="MDATAACN(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordMDATAACN mdataacn
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":mdataacn.cid") set vERRMSG = $$^MSG(8563,"MDATAACN(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordMDATAACN mdataacn

	set X = mdataacn.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = mdataacn.seq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = mdataacn.code if 'X.isNull(),'Db.isDefined("UTBLMISCDATA","X") set vRM = $$^MSG(1485,X) do vdderr("CODE", vRM) quit
	set X = mdataacn.uld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ULD", vRM) quit
	if mdataacn.ulid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ULID", vRM) quit
	if mdataacn.val.length()>20 set vRM = $$^MSG(1076,20) do vdderr("VAL", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MDATAACN","MSG",979,"MDATAACN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordMDATAACN mdataacn)	//MDATAACN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.mdataacn)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=DATA_D
			}
		else  if TSRC="O" do {
			do vj1(.mdataacn)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=DATA_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.mdataacn)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=DATA_I
			}
		else  if TSRC="O" do {
			do vj2(.mdataacn)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=DATA_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.mdataacn)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=DATA_U
			}
		else  if TSRC="O" do {
			do vj3(.mdataacn)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=DATA_U
			}
		}

	quit


vj1(RecordMDATAACN mdataacn)	// DATA_D  Table HIST  History for Misc. Data

	type Public String EFD,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=mdataacn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.tcmt=$$^MSG(4931,mdataacn.code)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordMDATAACN mdataacn)	// DATA_I  Table HIST  History for new Misc. Data

	type Public String EFD,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=mdataacn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.tcmt=$$^MSG(4930,mdataacn.code)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordMDATAACN mdataacn)	// DATA_U  Table HIST  History for Misc. Data

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=mdataacn.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.tcmt=$$TCMTFM^CIFFUNCS(mdataacn.cid,"MDATAACN",vdi,vold,vnew,$G(EFD),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordMDATAACN mdataacn

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = mdataacn.cid_","_mdataacn.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = mdataacn.cid_","_mdataacn.seq // Copy new keys into object
	type RecordMDATAACN vnewrec = mdataacn.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("MDATAACN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordMDATAACN mdataacn

	if vux("CID").exists() set mdataacn.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set mdataacn.seq = vux("SEQ").piece("|",i)
	quit
