YEXP3FL(RecordYFEEEXP3 yfeeexp3, String vpar, Boolean vparNorm) // YFEEEXP3 - Exemption Plan Cat 3 Items Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	// Trigger Definition (2)                      09/12/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = yfeeexp3.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(yfeeexp3,.vxins(),11,"|")
	if %O = 1 quit:'yfeeexp3.isChanged()  do AUDIT^UCUTILN(yfeeexp3,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String PLAN = yfeeexp3.plan
	type String EFD = yfeeexp3.efd
	type String FTYPE = yfeeexp3.ftype

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PLAN").exists()!vx("EFD").exists()!vx("FTYPE").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("YFEEEXP3",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("YFEEEXP3","PLAN = :yfeeexp3.plan and EFD = :yfeeexp3.efd and FTYPE = :yfeeexp3.ftype") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PLAN
	type public String EFD
	type public String FTYPE

	type RecordYFEEEXP3 yfeeexp3 = Db.getRecord("YFEEEXP3","PLAN=:PLAN,EFD=:EFD,FTYPE=:FTYPE")
	if (%ProcessMode = 2) do {
		do yfeeexp3.setMode(2)

		do YEXP3FL(yfeeexp3,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordYFEEEXP3 yfeeexp3

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("YFEEEXP3","PLAN = :yfeeexp3.plan and EFD = :yfeeexp3.efd and FTYPE = :yfeeexp3.ftype") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp3,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp3,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(yfeeexp3,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBL("YFEEEXP",vobj(yfeeexp3,-3),vobj(yfeeexp3,-4),3,vobj(yfeeexp3,-5),n)=vobj(yfeeexp3,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(yfeeexp3,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(yfeeexp3,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBL("YFEEEXP",vobj(yfeeexp3,-3),vobj(yfeeexp3,-4),3,vobj(yfeeexp3,-5),n)=vobj(yfeeexp3,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(yfeeexp3)) S ^UTBL("YFEEEXP",vobj(yfeeexp3,-3),vobj(yfeeexp3,-4),3,vobj(yfeeexp3,-5))=vobj(yfeeexp3)
		#ENDBYPASS
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordYFEEEXP3 yfeeexp3
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^UTBL("YFEEEXP",vobj(yfeeexp3,-3),vobj(yfeeexp3,-4),3,vobj(yfeeexp3,-5),n)) quit:n=""  if '$D(vobj(yfeeexp3,n)),$D(^UTBL("YFEEEXP",vobj(yfeeexp3,-3),vobj(yfeeexp3,-4),3,vobj(yfeeexp3,-5),n))#2 set vobj(yfeeexp3,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordYFEEEXP3 yfeeexp3

	if 'vkeychg.get(),yfeeexp3.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp3,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^UTBL("YFEEEXP",vobj(yfeeexp3,-3),vobj(yfeeexp3,-4),3,vobj(yfeeexp3,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordYFEEEXP3 yfeeexp3

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordYFEEEXP3 yfeeexp3

	if yfeeexp3.plan.isNull() do vreqerr("PLAN") quit
	if yfeeexp3.efd.isNull() do vreqerr("EFD") quit
	if yfeeexp3.ftype.isNull() do vreqerr("FTYPE") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("YFEEEXP3","MSG",1767,"YFEEEXP3."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordYFEEEXP3 yfeeexp3
	if 'yfeeexp3.efd.isNull() set vfkey("^UTBL("_"""YFEEEXP"""_","_""""_yfeeexp3.plan_""""_","_""""_yfeeexp3.efd_""""_")")="YFEEEXP3(PLAN,EFD) -> YFEEEXP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordYFEEEXP3 yfeeexp3
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("YFEEEXP",":yfeeexp3.plan,:yfeeexp3.efd") set vERRMSG = $$^MSG(8563,"YFEEEXP3(PLAN,EFD) -> YFEEEXP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Exemption Category 3

	type public RecordYFEEEXP3 yfeeexp3
	/*
	   Revision History

	   10/07/99 - CHOK - 31126
		      Converted to PSL


	   If an exemption plan contains a transaction code that was deleted, then
	   delete the transaction codes in the exemption plan trangroup.
	*/

	new XTRNCD
	new rs 
	type ResultSet rs=Db.select("TRNCD","UTBLTRNGRP","TRNGRP=:PLAN AND TRNGRPDT=:EFD")
	if rs.isEmpty() quit
	while rs.next() do {
		set XTRNCD=rs.getCol(1)
		do Db.delete("UTBLTRNGRP","TRNGRP=:PLAN AND TRNGRPDT=:EFD AND TRNCD=:XTRNCD")
		}
	quit

vai1 // Trigger AFTER_INSERT - After Insert Exemption Category 3

	type public RecordYFEEEXP3 yfeeexp3
	/*
	---- Revision History ------------------------------------------------
	09/12/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features.  Clean up code.
	----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	
	type Date EFD
	type String FTYPE, PLAN
	
	set EFD = yfeeexp3.efd
	set FTYPE = yfeeexp3.ftype
	set PLAN = yfeeexp3.plan
	
	type RecordYFEEEXP yfeeexp = Db.getRecord("YFEEEXP","PLAN=:PLAN,EFD=:EFD")

	if (%ProcessMode '= 2) do { quit:ER
	
		type Date XEFD

		// Effective date must be the same as or after the system date for modification
		if (EFD < %SystemDate) do Runtime.setErrMSG("YFEEEXP3",879) quit:ER 

		// Create top level of fee transaction group if it does not exist
		if 'Db.isDefined("UTBLTRNGRPT","TRNGRP=:PLAN,TRNGRPDT=:EFD") do { quit:ER
		
			type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='YFEEEXP',DI='PLAN'")
			
			type RecordUTBLTRNGRPT trngrpt = Class.new("RecordUTBLTRNGRPT", "TRNGRP=:PLAN,TRNGRPDT=:EFD")
			
			set trngrpt.desc = dbtbl1d.des_" "_yfeeexp.plan
			
			do trngrpt.save()
		}

		if Db.isDefined("TRN","ETC=:FTYPE") do { quit
			
			type RecordUTBLTRNGRP trngrp = Db.getRecord("UTBLTRNGRP", "TRNGRP=:PLAN,TRNGRPDT=:EFD,TRNCD=:FTYPE", 1)
			
			set trngrp.feeamt = yfeeexp3.famt
			
			do trngrp.save()
		}

		/*
		   If an exemption plan contains a transaction group, then update the
		   transaction codes in the exemption plan trangroup with the values in
		   the transaction group. Find transaction group where EFD equals or is
		   less than the exemption plan effective date
		*/
		
		type ResultSet rs1 = Db.select("MAX(TRNGRPDT)", "UTBLTRNGRP", "TRNGRP=:FTYPE AND TRNGRPDT<=:EFD") 
	    	quit:rs1.isEmpty()
	    	
	    	if rs1.next() set XEFD = rs1.getCol(1)
	
		type ResultSet rs2 = Db.select("FEEAMT,TRNCD", "UTBLTRNGRP", "TRNGRP=:FTYPE AND TRNGRPDT=:XEFD")
		
		while rs2.next() do {
			
			type String XTRNCD
			
			set XTRNCD = rs2.getCol("TRNCD")
			
			type RecordUTBLTRNGRP trngrp = Db.getRecord("UTBLTRNGRP", "TRNGRP=:PLAN,TRNGRPDT=:EFD,TRNCD=:XTRNCD", 1)
			
			set trngrp.feeamt = rs2.getCol("FEEAMT")
		}
	}
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordYFEEEXP3 yfeeexp3

	if (%O = 2) do vload
	if yfeeexp3.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = yfeeexp3.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	if yfeeexp3.ftype.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FTYPE", vRM) quit

	if vobj(yfeeexp3).exists() ! 'vobj(yfeeexp3,"").order().isNull() do {

		set X = yfeeexp3.famt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"YFEEEXP3.FAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("YFEEEXP3","MSG",979,"YFEEEXP3."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordYFEEEXP3 yfeeexp3

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("PLAN").exists() set vux("PLAN") = vx("PLAN")
	if vx("EFD").exists() set vux("EFD") = vx("EFD")
	if vx("FTYPE").exists() set vux("FTYPE") = vx("FTYPE")
	do vkey(1) set voldkey = yfeeexp3.plan_","_yfeeexp3.efd_","_yfeeexp3.ftype // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = yfeeexp3.plan_","_yfeeexp3.efd_","_yfeeexp3.ftype // Copy new keys into object
	type RecordYFEEEXP3 vnewrec = yfeeexp3.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("YFEEEXP3",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordYFEEEXP3 yfeeexp3

	if vux("PLAN").exists() set yfeeexp3.plan = vux("PLAN").piece("|",i)
	if vux("EFD").exists() set yfeeexp3.efd = vux("EFD").piece("|",i)
	if vux("FTYPE").exists() set yfeeexp3.ftype = vux("FTYPE").piece("|",i)
	quit
