RAMTFILE(RecordRAMT ramt, String vpar, Boolean vparNorm) // RAMT - Transfer Remittance File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ramt.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ramt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ramt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = ramt.cid
	type String TYP = ramt.typ
	type String REMDT = ramt.remdt

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists()!vx("REMDT").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RAMT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RAMT","CID = :ramt.cid and TYP = :ramt.typ and REMDT = :ramt.remdt") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP
	type public String REMDT

	type RecordRAMT ramt = Db.getRecord("RAMT","CID=:CID,TYP=:TYP,REMDT=:REMDT")
	if (%ProcessMode = 2) do {
		do ramt.setMode(2)

		do RAMTFILE(ramt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRAMT ramt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RAMT","CID = :ramt.cid and TYP = :ramt.typ and REMDT = :ramt.remdt") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ramt))  S ^RAMT(vobj(ramt,-3),vobj(ramt,-4),vobj(ramt,-5))=vobj(ramt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRAMT ramt


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^RAMT(vobj(ramt,-3),vobj(ramt,-4),vobj(ramt,-5))   // Delete Record
	quit


vreqn // Validate required data items

	type public RecordRAMT ramt

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRAMT ramt

	if ramt.cid.isNull() do vreqerr("CID") quit
	if ramt.typ.isNull() do vreqerr("TYP") quit
	if ramt.remdt.isNull() do vreqerr("REMDT") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RAMT","MSG",1767,"RAMT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordRAMT ramt
	if 'ramt.cid.isNull() set vfkey("^ACN("_""""_ramt.cid_""""_","_50_")")="RAMT(CID) -> DEP"
	if 'ramt.typ.isNull() set vfkey("^ACN("_""""_ramt.cid_""""_","_210_","_""""_ramt.typ_""""_")")="RAMT(CID,TYP) -> TRTYPE"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordRAMT ramt
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DEP",":ramt.cid") set vERRMSG = $$^MSG(8563,"RAMT(CID) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("TRTYPE",":ramt.cid,:ramt.typ") set vERRMSG = $$^MSG(8563,"RAMT(CID,TYP) -> TRTYPE") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Trigger for RAMT

	type public RecordRAMT ramt
	/*
	-----Revision History-------------------------------------------------

	   11/15/02 - Erik Scheetz - 43583
		Wrapped %EffectiveDate with $G[et] where needed
		due to compile changes in this version.
	
	   09/16/99 - CHOK - 31126
		      Converted to PSL
	*/

	new XCID,XTYP,XREMDT,LCID,TCMT
	set XCID=ramt.cid
	set XTYP=ramt.typ
	set XREMDT=ramt.remdt
	set LCID=Db.getOneRow("AREF","DEP","XCID")
	set TCMT=$$^MSG("4228",$$DAT^%ZM(XREMDT,$G(%MSKD)),XTYP)
	set XCDT=%CurrentDate
	set %EffectiveDate=$G(%EffectiveDate)
	set TIME=%CurrentTime
	set TJD=%SystemDate
	set TLO=%UserStation
	set UID=%UserID
	do Db.insert("HIST","CID,CDT,EFD,TCMT,TIME,TJD,TLO,TSEQ,UID",":LCID,:XCDT,:EFD,:TCMT,:TIME,:TJD,:TLO,HIST.NEXTVAL,:UID")
	quit

vai1 // Trigger BU_RAMT - After Update or After Insert of RAMT

	do vau1

	quit

vau1 // Trigger BU_RAMT - After Update or After Insert of RAMT

	type public RecordRAMT ramt
	/*
	-----Revision History-------------------------------------------------
	
	   11/15/02 - Erik Scheetz - 43583
		Wrapped %EffectiveDate with $G[et] where needed
		due to compile changes in this version.
	
	*/

	new XCID,XTYP,XREMDT,LCID,TCMT
	set XCID=ramt.cid
	set XTYP=ramt.typ
	set XREMDT=ramt.remdt
	set LCID=Db.getOneRow("AREF","DEP","XCID")
	set TCMT=$$^MSG("5610",$$DAT^%ZM(XREMDT,$G(%MSKD)),XTYP,$$^SCARND(ramt.remamt,0,LCID),ramt.estflg)
	set TCMT1=$$^MSG("4228",$$DAT^%ZM(XREMDT,$G(%MSKD)),XTYP)
	set XCDT=%CurrentDate
	set %EffectiveDate=$G(%EffectiveDate)
	set TIME=%CurrentTime
	set TJD=%SystemDate
	set TLO=%UserStation
	set UID=%UserID
	if 'ramt.remamt,ramt.estflg="" do { quit 
		do Db.insert("HIST","CID,CDT,EFD,TCMT,TIME,TJD,TLO,TSEQ,UID",":LCID,:XCDT,:EFD,:TCMT1,:TIME,:TJD,:TLO,HIST.NEXTVAL,:UID")
		}
	do Db.insert("HIST","CID,CDT,EFD,TCMT,TIME,TJD,TLO,TSEQ,UID",":LCID,:XCDT,:EFD,:TCMT,:TIME,:TJD,:TLO,HIST.NEXTVAL,:UID")
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRAMT ramt

	set X = ramt.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if ramt.typ.length()>6 set vRM = $$^MSG(1076,6) do vdderr("TYP", vRM) quit
	set X = ramt.remdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REMDT", vRM) quit
	set X = ramt.estflg if 'X.isNull(),'Db.isDefined("STBLEA","X") set vRM = $$^MSG(1485,X) do vdderr("ESTFLG", vRM) quit
	set X = ramt.remamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RAMT.REMAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RAMT","MSG",979,"RAMT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordRAMT ramt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	if vx("REMDT").exists() set vux("REMDT") = vx("REMDT")
	do vkey(1) set voldkey = ramt.cid_","_ramt.typ_","_ramt.remdt // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ramt.cid_","_ramt.typ_","_ramt.remdt // Copy new keys into object
	type RecordRAMT vnewrec = ramt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RAMT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRAMT ramt

	if vux("CID").exists() set ramt.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set ramt.typ = vux("TYP").piece("|",i)
	if vux("REMDT").exists() set ramt.remdt = vux("REMDT").piece("|",i)
	quit
