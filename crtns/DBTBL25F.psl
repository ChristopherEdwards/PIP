DBTBL25F(RecordDBTBL25 dbtbl25, String vpar, Boolean vparNorm) // DBTBL25 - Procedure Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             02/14/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl25.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dbtbl25,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dbtbl25,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("%LIBS").exists()!vx("PROCID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL25",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL25","%LIBS = :dbtbl25.%libs and PROCID = :dbtbl25.procid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String %LIBS
	type public String PROCID

	type RecordDBTBL25 dbtbl25 = Db.getRecord("DBTBL25","%LIBS=:%LIBS,PROCID=:PROCID")
	if (%ProcessMode = 2) do {
		do dbtbl25.setMode(2)

		do DBTBL25F(dbtbl25,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL25 dbtbl25

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL25","%LIBS = :dbtbl25.%libs and PROCID = :dbtbl25.procid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		set dbtbl25.LTD = %CurrentDate
		set dbtbl25.TIME = %CurrentTime
		if 'dbtbl25.isChanged("USER", "USER") set dbtbl25.USER = %UserName
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl25)) S ^DBTBL(vobj(dbtbl25,-3),25,vobj(dbtbl25,-4))=vobj(dbtbl25)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL25 dbtbl25


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DBTBL(vobj(dbtbl25,-3),25,vobj(dbtbl25,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDBTBL25 dbtbl25

	// Type local variables for access keys for defaults
	type public String %LIBS
	type public String PROCID

	if dbtbl25.ltd.isNull() set dbtbl25.ltd = +$H          // ltd
	if dbtbl25.mplus.isNull() set dbtbl25.mplus = 1        // mplus
	type public String %UID
	if dbtbl25.user.isNull() set dbtbl25.user = %UID       // user
	quit


vreqn // Validate required data items

	type public RecordDBTBL25 dbtbl25

	if dbtbl25.des.isNull() do vreqerr("DES") quit
	if dbtbl25.mplus.isNull() do vreqerr("MPLUS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL25 dbtbl25

	if dbtbl25.%libs.isNull() do vreqerr("%LIBS") quit
	if dbtbl25.procid.isNull() do vreqerr("PROCID") quit

		if vx("DES").exists(),dbtbl25.des.isNull() do vreqerr("DES") quit
		if vx("MPLUS").exists(),dbtbl25.mplus.isNull() do vreqerr("MPLUS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL25","MSG",1767,"DBTBL25."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL25 dbtbl25

	if dbtbl25.%libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("%LIBS", vRM) quit
	if dbtbl25.procid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PROCID", vRM) quit
	if dbtbl25.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	set X = dbtbl25.ltd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LTD", vRM) quit
	if '("01"[dbtbl25.MPLUS) set vRM=$$^MSG(742,"L") do vdderr("MPLUS", vRM) quit
	if dbtbl25.pfid.length()>50 set vRM = $$^MSG(1076,50) do vdderr("PFID", vRM) quit
	if dbtbl25.pgm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PGM", vRM) quit
	if dbtbl25.rpcvar.length()>250 set vRM = $$^MSG(1076,250) do vdderr("RPCVAR", vRM) quit
	if dbtbl25.rpcvar1.length()>250 set vRM = $$^MSG(1076,250) do vdderr("RPCVAR1", vRM) quit
	set X = dbtbl25.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if dbtbl25.user.length()>20 set vRM = $$^MSG(1076,20) do vdderr("USER", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL25","MSG",979,"DBTBL25."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL25 dbtbl25

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("%LIBS").exists() set vux("%LIBS") = vx("%LIBS")
	if vx("PROCID").exists() set vux("PROCID") = vx("PROCID")
	do vkey(1) set voldkey = dbtbl25.%libs_","_dbtbl25.procid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl25.%libs_","_dbtbl25.procid // Copy new keys into object
	type RecordDBTBL25 vnewrec = dbtbl25.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL25",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL25 dbtbl25

	if vux("%LIBS").exists() set dbtbl25.%libs = vux("%LIBS").piece("|",i)
	if vux("PROCID").exists() set dbtbl25.procid = vux("PROCID").piece("|",i)
	quit
