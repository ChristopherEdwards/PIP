MPSTST
	/*
	 Procedure ID: MPSTST
	 DESC: Testing Routine for MPS Messages
	 ORIG: RICKARDSC - 06/20/2000

	 ---- Comments --------------------------------------------------------

	 LIBRARY:
		SINGLE Individual Messages to Simulate ATM Machine Activity
		RANDOM Random Messages to Simulate ATM Machine Activity
 
	 This routine simulates MPS activity without actually going through
	 the MPS network. There are two main line tags: SINGLE, which sends
	 selected individual messages, and RANDOM, which sends multiple
	 random messages.

	 Balances are not returned for reversals (0400) and advices
	 (0120 and 0220).

	 Possible RSPCD values:
	 	500 	Transaction Approved - with Balances
	 	501 	Transaction Approved - without Balances
		504	Transaction Approved - Approved for Partial Amount
	 	555 	Transaction Denied - Generic
				Invalid ETC
		556 	Transaction Denied - Account Problem
				Invalid account number
				Could not find original HIST entry
				Error corrected already
		557 	Transaction Denied - Invalid Transaction from Switch
				Invalid message id
				Invalid MPS transaction code
		558 	Transaction Denied - Insufficient Funds (negative balance)
		559 	Transaction Denied - Insufficient Funds (positive balance)
	 ----------------------------------------------------------------------
	 ---- Revision History ------------------------------------------------

	 12/12/05 - SPR - 18555
		   Card Management - General DBI3 System Area Clean up.	 
	 
	 ----------------------------------------------------------------------
	*/
	
	do RANDOM
	quit
	

RANDOM	//Random Messages to Simulate ATM Machine Activity
	
	type public Boolean ONUS
	type public String %A,ACCT(),ACCTS(),VFMQ
	type Number CNT,DELAY,DUR,END,RAND,WAIT
	type String IM,mysav,NUM,%READ(),sysav,%TAB(),%TO

	set %TAB("DUR")="/DES=Minutes of Testing/TYP=N/LEN=2"
	set %TAB("DELAY")="/DES=Seconds Between Messages/TYP=N/LEN=2"
	set %TAB("ACCT")="/DES=Account to Use/TYP=N/LEN=12/XPP=S %EXT=1 D ^UACN"
	set %TAB("ACCT(0)")=%TAB("ACCT")

	set %READ="@@%FN/CEN/REV,,,DUR/REQ,DELAY/REQ,ACCT(0)/REQ,ACCT/REP=9/NOREQ"
	
	// Call input screen
	do ^UTLREAD quit:VFMQ="Q"		

	// Kill %A, causes problem with Available Balance
	kill %A

	set NUM="",CNT=0
	for  set NUM=ACCT(NUM).order() quit:NUM.isNull()  if 'ACCT(NUM).isNull() set CNT=CNT+1,ACCTS(CNT)=ACCT(NUM)

	// Convert to seconds
	set DUR=DUR*60				
	
	// Note ending time
	set END=%CurrentTime+DUR		

	// Store variables
	set mysav=$$VSAV^PBSUTL("%TO,ACCTS,DELAY,DUR,END")
	set sysav=$$INIT^PBSUTL

	for  quit:END'>%CurrentTime  do {
		// Initialize variables
		do INIT(sysav,mysav)

		// Random message body
		set IM=$$RANDSTUB(.ACCTS)

		// Off-us transaction as default
		set ONUS=0

		// Pick random scenario
		set RAND=10.random()
		if RAND<4 do TST100(IM)
		if RAND=4 do TST100P(IM)
		if RAND>4 do TST200(IM)

		write "------------------------------------------------------------------------",!
		if END<(%CurrentTime+DELAY) set DELAY=(END-%CurrentTime)
		
		// Wait for DELAY seconds
		set WAIT=$$WAIT^%ZFUNC(DELAY)	
		}
	do XKILL^PBSUTL
	quit


TST100(MSG)	// Generate random test(s) of POS pre-authorizations (no PIN)

	type public Boolean ER
	type Number CID,RAND
	type String DESC

	set CID=$$ACCT("CID1",MSG)
	set DESC="Testing POS Pre-Authorization for Account: "_CID
	write DESC,!

	set RAND=100.random()
	if RAND<51 do {  if 1
		do DISPRSP($$PRE(.MSG,100)) quit:ER
		if RAND<10 do DISPRSP($$REV(.MSG)) quit
		if RAND<18 do {
			do DISPRSP($$PRE(.MSG,120)) quit:ER
			do DISPRSP($$REV(.MSG)) quit:ER
			if 10.random()<5 do DISPRSP($$REV(.MSG))
			}
		}
	else  do {
		do DISPRSP($$PRE(.MSG,120)) quit:ER
		if RAND<54 do DISPRSP($$REV(.MSG)) quit
		if RAND<61 do {  quit:ER
			do DISPRSP($$PRE(.MSG,120)) quit:ER
			do DISPRSP($$REV(.MSG))
			}
		if RAND<63 do {
			do DISPRSP($$REV(.MSG)) quit:ER
			do DISPRSP($$PRE(.MSG,120))
			}
		}
	quit


TST100P(MSG)	// Generate random test(s) of POS pre-auths with follow-up transations

	type public Boolean ER
	type public Number CID
	type public String mysav,sysav
	type String DESC,mgsav,OM

	set CID=$$ACCT("CID1",MSG)
	set DESC="Testing POS Pre-Auth with Follow-Up Transaction for Account: "_CID
	write DESC,!

	set OM=$$PRE(.MSG,"0700",74)
	do DISPRSP(OM) quit:ER

	// if partially approved, set amount 1 to be the partial amount
	if OM.extract(138,140)=504 set MSG=$$CHG("A1",+(OM.extract(62,69)/100),MSG)

	set mgsav=$$VSAV^PBSUTL("MSG,MID,REVERSE")
	do INIT(sysav,mysav,mgsav)

	do DISPRSP($$FINPRE(.MSG))

	quit


TST200(MSG)	// ATM financial transactions

	type public Boolean ER
	type public Number CID,RAND
	type public String DESC
	type Number ONUS
 
	set CID=$$ACCT("CID1",MSG)
	set DESC="Testing Financial Transaction for Account: "_CID
	write DESC,!

	if 10.random()<3 set ONUS=1

	set RAND=100.random()
	
	// Inquiry
	if RAND>94 do DISPRSP($$INQ(.MSG)) quit		
	if RAND<60 do {  if 1
		if RAND<10 do DISPRSP($$WFIN(.MSG,220)) quit
		do DISPRSP($$WFIN(.MSG,200)) quit:ER
		if RAND<14 do DISPRSP($$REV(.MSG)) quit
		if RAND<17 do {  quit
			do DISPRSP($$WFIN(.MSG,220)) quit:ER
			do DISPRSP($$REV(.MSG))
			}
		if RAND<22 do {
			do DISPRSP($$REV(.MSG)) quit:ER
			do DISPRSP($$WFIN(.MSG,220))
			}
		}
	else  do {
		set MSG=$$CHG("CID1","",.MSG)
		set MSG=$$CHG("CID2",CID,.MSG)
		if RAND<75 do DISPRSP($$DFIN(.MSG,220)) quit
		do DISPRSP($$DFIN(.MSG,200)) quit:ER
		if RAND<78 do DISPRSP($$REV(.MSG)) quit
		if RAND<80 do {  quit
			do DISPRSP($$DFIN(.MSG,220)) quit:ER
			do DISPRSP($$REV(.MSG))
			}
		if RAND<83 do {
			do DISPRSP($$REV(.MSG)) quit:ER
			do DISPRSP($$DFIN(.MSG,220))
			}
		}
	quit


RANDSTUB(ACCTS)	// Create random ANSIX92 message stub

	type String MSG,REGE()
	type Number TOT
	

	set REGE(1)="VONS     Store #2353     SPRING VALLEYCA"
	set REGE(2)="312 WEST MAIN STREET     EL CAJON     CA"
	set REGE(3)="3785 S. COOPER           ARLINGTON    TX"
	set REGE(4)="PARIS PORT ROYA           PARIS         "

	set TOT=ACCTS("").order(-1)
	
	// Random CID from ACCTS
	set MSG=$$CHG("CID1",ACCTS(TOT.random()+1))	   
	set TOT=REGE("").order(-1)
	
	// Random REGE from list
	set MSG=$$CHG("REGE",REGE(TOT.random()+1),MSG)  
	
	// Random AMT under $200
	set MSG=$$CHG("A1",200.random(),MSG)		   
	
	// SPR = current time
	set MSG=$$CHG("SPR",%CurrentTime,MSG)	   

	quit MSG


SINGLE	// Individual Messages to Simulate ATM Machine Activity

	type public Boolean ER,ONUS
	type public Number %PAGE,%PG
	type public String %A,FCID,mgsav,MID,MSG,mysav,sysav,%NOPRMT,OLNTB,%READ,%TAB,TCID,TRN(),TYP,VFMQ
	type Number REVERSE,TAMT
	type String MTYP


	set mysav=$$VSAV^PBSUTL("%FN")
	set sysav=$$INIT^PBSUTL
	do INIT(sysav,mysav)			// Initialize variables

	// Possible message types
	set TRN(100)="POS Check Card Authorization"
	set TRN(120)="POS Authorization Advice"
	set TRN("100P")="POS Authorization followed by Debit"
	set TRN("200W")="ATM Withdrawal"
	set TRN("200D")="ATM Deposit"
	set TRN("200T")="ATM Transfer Between Accounts"
	set TRN("220W")="ATM Withdrawal Advice"
	set TRN("220D")="ATM Deposit Advice"
	set TRN(700)="Balance Inquiry"

	set %TAB("MID")="/DES=Transaction Type/LEN=5/TYP=T/TBL=TRN("

	set %PAGE=2,%PG=1
	set %NOPRMT="N"
	set %READ="@@%FN/CEN/REV,,MID/REQ"

	// Call input screen
	do ^UTLREAD quit:VFMQ="Q"		

	set %TAB("FCID")="/DES=From Account/LEN=12/TYP=N/XPP=S %EXT=1 D ^UACN"
	set %TAB("TCID")="/DES=To Account/LEN=12/TYP=N/XPP=S %EXT=1 D ^UACN"
	set %TAB("TAMT")="/DES=Transaction Amount/LEN=9/DEC=2/TYP=$/SIZ=10"
	set %TAB("ONUS")="/DES=On-Us Transaction/TYP=L"
	set %TAB("REVERSE")="/DES=Follow-Up Reversal?/TYP=L"
	set %PAGE=1,%PG=1
	set %NOPRMT="N"
	set OLNTB=3000

	set TYP=MID.extract(4)
	set (REVERSE,TAMT,ONUS)=0
	set %READ=$S(TYP="D":"TCID/REQ",TYP="T":"FCID/REQ,TCID/REQ",1:"FCID/REQ")
	if MID'="700" set %READ=%READ_",TAMT/REQ"_$S(MID.extract()=2:",ONUS/NOREQ",1:"")_",REVERSE/NOREQ"

	// Call input screen
	do ^UTLREAD quit:VFMQ="Q"		

	// Kill %A, causes problem with Available Balance
	kill %A

	set MSG=$$CHG("SPR",%CurrentTime)
	if 'FCID.get().isNull() set MSG=$$CHG("CID1",FCID,MSG)
	if 'TCID.get().isNull() set MSG=$$CHG("CID2",TCID,MSG)
	set MSG=$$CHG("A1",TAMT,MSG)

	// Clear screen
	write $$CLEAR^%TRMVT,!			

	set MTYP=MID.extract(1,3)
	if (MID=100)!(MID=120) do DISPRSP($$PRE(.MSG,MTYP))
	if MID="100P" do TST100P(.MSG)
	if (MID="200W")!(MID="220W") do DISPRSP($$WFIN(.MSG,MTYP))
	if (MID="200D")!(MID="220D") do DISPRSP($$DFIN(.MSG,MTYP))
	if MID="200T" do DISPRSP($$T200(.MSG))
	if MID=700 do DISPRSP($$INQ(.MSG))

	// Follow-up reversal
	if REVERSE do DISPRSP($$REV(.MSG))		

	// Continue?
	if $$YN^DBSMBAR("",$$^MSG(603),0) do SINGLE	

	do XKILL^PBSUTL
	quit


INIT(sysav,mysav,mgsav)	// Clean up and initialize variables
	
	type public Boolean ER
	type public String RM,%STFHOST
	type String INTRFACE,NETID,UID,vzsav

	set mgsav=mgsav.get()
	
	if %SystemDate'=CUVAR.tjd set sysav=$$INIT^PBSUTL
	
	set vzsav=$$VSAV^PBSUTL("sysav,mysav,mgsav")
	do XKILL^PBSUTL,VLOD^PBSUTL(vzsav)
	do VLOD^PBSUTL($G(sysav)),VLOD^PBSUTL($G(mysav)),VLOD^PBSUTL($G(mgsav))

	set ER=0,RM=""

	set %STFHOST=$$%STFHOST^PBSUTL
	set INTRFACE="MPS"
	
	type RecordUTBLEXTINT extint=Db.getRecord("UTBLEXTINT","INTRFACE=:INTRFACE",1)
	if extint.getMode() do {
		set %UserID=extint.uid
		set NETID=extint.IIN
		}	
	
	set UID=%UserID

	type RecordSCAU scau=Db.getRecord("SCAU","UID=:UID",1)
	if scau.getMode() set %UserClass=scau.%ucls

	quit


PRE(MSG,MID,PC1)	// Pre-authorization and pre-authorization advices

	type public Number CID
	type public String GRP
	type String PRCD

	if PC1.get().isNull() set PC1=75
	set MSG=$$CHG("MID",MID,MSG.get())
	set CID=$$ACCT("CID1",MSG)

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if acn.getMode() set GRP=acn.grp
	
	set PRCD=PC1_$S(GRP.get()="SAV":1100,1:"0100")
	set MSG=$$CHG("PRCD",PRCD,MSG)

	// Process message
	quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


WFIN(MSG,MID)	// Financial transaction - withdrawal and withdrawal advices

	type public Boolean ONUS
	type public Number CID
	type public String GRP,NETID,PRCD

	set MSG=$$CHG("MID",MID,$G(MSG))
	set CID=$$ACCT("CID1",MSG)
	if ONUS set MSG=$$CHG("OWNID",NETID_NETID,MSG)

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if acn.getMode() set GRP=acn.grp
	
	set PRCD=$S(GRP.get()="SAV":101100,1:100100)
	
	// Hard coded withdrawal
	set MSG=$$CHG("PRCD",PRCD,MSG)			

	// Process message
	quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


DFIN(MSG,MID)	// Financial transaction - deposit and deposit advices

	type public Boolean ONUS
	type public Number CID
	type public String GRP,NETID,PRCD

	set MSG=$$CHG("MID",MID,MSG.get())
	set CID=$$ACCT("CID2",MSG)
	if ONUS set MSG=$$CHG("OWNID",NETID_NETID,MSG)

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if acn.getMode() set GRP=acn.grp
	
	set PRCD=$S(GRP.get()="SAV":201100,1:200100)
	
	// Hard coded deposit
	set MSG=$$CHG("PRCD",PRCD,MSG)			

	// Process message
	quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


T200(MSG)	// Financial transaction - transfer between accounts
	
	type public Boolean ONUS
	type public String MID,NETID,PRCD
	type String CID1,CID2,GRP1,GRP2

	set MSG=$$CHG("MID",200,$G(MSG))
	if ONUS set MSG=$$CHG("OWNID",NETID_NETID,MSG)
	set CID1=$$ACCT("CID1",MSG)
	set CID2=$$ACCT("CID2",MSG)

	type RecordACN acn=Db.getRecord("ACN","CID=:CID1",1)
	if acn.getMode() set GRP1=acn.grp
	
	type RecordACN acn1=Db.getRecord("ACN","CID=:CID2",1)
	if acn1.getMode() set GRP2=acn.grp
	
	set PRCD="40"_$S($G(GRP1)="SAV":11,1:"01")_$S($G(GRP2)="SAV":11,1:"01")
	
	// Hard coded transfer
	set MSG=$$CHG("PRCD",PRCD,MSG)			
 
 	// Process message
	quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


REV(MSG)	// Reversal

	set MSG=$$CHG("MID",400,MSG.get())
	
	// Original amount incorrect
	set MSG=$$CHG("RRC","09",MSG)			
 
 	// Process message
        quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


INQ(MSG)	// Balance

	type public Number CID
	type public String GRP,PRCD

	set MSG=$$CHG("MID",700,$G(MSG))
	set CID=$$ACCT("CID1",MSG)

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if acn.getMode() set GRP=acn.grp
	
	set PRCD=$S(GRP.get()="SAV":301100,1:300100)
	set MSG=$$CHG("PRCD",PRCD,MSG)
	set MSG=$$CHG("A1",0,MSG)

	// Process message
	quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


FINPRE(MSG)	// Financial Transaction after Pre-Authorization

	type public Number CID
	type public String GRP,PRCD

	set MSG=$$CHG("MID",200,MSG.get())
	set CID=$$ACCT("CID1",MSG)

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if acn.getMode() set GRP=acn.grp
	
	set PRCD=$S($G(GRP)="SAV":731100,1:730100)
	
	// Hard coded FINPRE
	set MSG=$$CHG("PRCD",PRCD,MSG)	
			
	if +MSG.extract(62,69)=0 set MSG=$$CHG("A2",+(MSG.extract(54,61)/100)`,MSG)

	// Process message
	quit $$PROC^PBSSRV(MSG,"","","","ANSIX92")	


DISPRSP(MSG)	// Display response message

	type public Boolean ER
	type public String DESC,MID,RM,SPV
	type Number AMT,BALAVL
	type String PR1,RET,RSP,SPR

	set ER=0
	
	// Message is null
	if MSG.get().isNull() quit			

	// Strip off header
	set MSG=MSG.extract(7,999)		
	
	// Response code	
	set RSP=+MSG.extract(132,134)		

	// If message was unsuccessful, display error/SPV information.
	if (RSP'=500),(RSP'=501) do {
		set DESC="RM: "_RM.get()
		if 'RM.get().isNull() write !,DESC,!
		if SPV.exists() do DISPSPV(.SPV)
		if RSP'=504 set ER=1
		}

	// Message id
	set MID=(+MSG.extract(1,4))-10		
	set PR1=+MSG.extract(42)
	
	// Transaction amount
	set AMT=(+MSG.extract(48,55))/100		
	
	// Available balance
	set BALAVL=(+MSG.extract(64,71))/100		
	
	// Spray number
	set SPR=MSG.extract(264,269)			

	set RET="Message: 0"_MID
	if (MID.extract()=2) set RET=RET_$S(PR1=1:"W",PR1=2:"D",PR1=4:"T",1:"")
	set RET=RET_"  Amount: $"_AMT_"  BALAVL: $"_BALAVL
	set RET=RET_"  Response Code: "_RSP_"  SPR: "_SPR_$C(13,10)
	write RET,!

	quit


DISPSPV(SPV)	// Display information in SPV array

	//***??? There has to be a better way!!! ***???

	type public Number CID
	type String GRP,ID,OVR,RSN,STAT,TCID,TYP
	type Number SEQ

	write "Supervisor override authorizations:",!

	set SEQ=""
	for  set SEQ=SPV(SEQ).order() quit:SEQ.isNull()  do {
		set CID=""
		for  set CID=SPV(SEQ,CID).order() quit:CID.isNull()  do {
			set TYP=""
			for  set TYP=SPV(SEQ,CID,TYP).order() quit:TYP.isNull()  do {
				set OVR=""
				for  set OVR=SPV(SEQ,CID,TYP,OVR).order() quit:OVR.isNull()  do {
					set ID=SPV(SEQ,CID,TYP,OVR).piece("|",1)
					set RSN=SPV(SEQ,CID,TYP,OVR).piece("|",2)
					set TCID=SPV(SEQ,CID,TYP,OVR).piece("|",3)
					set GRP=SPV(SEQ,CID,TYP,OVR).piece("|",4)
					set STAT=SPV(SEQ,CID,TYP,OVR).piece("|",5)
					write "* Sequence: "_SEQ,?19,"Account: "_CID
					write ?41,"Type: "_TYP,?56,"Restriction: "_OVR,!
					write ?4,"User: "_ID,?17,"Reason: "_RSN
					write ?33,"Account: "_TCID,?55,"Group: "_GRP
					write ?69,"Status: "_STAT,!
					}
				}
			}
		}
	write !

	quit


ACCT(VAL,MSG)	// Extract Account Number

	type public String ACCT

	set ACCT=$S(VAL="CID1":MSG.extract(197,217),1:MSG.extract(218,238))

	quit ACCT.extract(3,+ACCT.extract(1,2)+2)


CHG(BIT,VAL,MSG)	// Change bit in message

	type public String NETID

	if MSG.get().isNull() do {
		set MSG="H0395D0100FFCE1802E2007FE6164491840000206190   750100000099000000000000000000009592"
		set MSG=MSG_%CurrentDate.toString("MMDD")
		set MSG=MSG_"1124112402555790004445001031101046840000000041    000312 WEST MAIN STREET     E"
		set MSG=MSG_"L CAJON     CA                00                   00                   11124112"
		set MSG=MSG_"4M     "_$$LJ^%ZTEXT(NETID,4)_"SWTH        009591                        000             34061332330"
		set MSG=MSG_"0000000000    00                                     0000000449184000020619"
		}

	if BIT="A1" quit MSG.extract(1,53)_$$BALFMT^ANSIX92(VAL)_MSG.extract(62,999)
	if BIT="A2" quit MSG.extract(1,61)_$$BALFMT^ANSIX92(VAL)_MSG.extract(70,999)
	if BIT="CID1" quit MSG.extract(1,196)_$$RJ^%ZTEXT($L(VAL),2,0)_$$LJ^%ZTEXT(VAL,19)_MSG.extract(218,999)
	if BIT="CID2" quit MSG.extract(1,217)_$$RJ^%ZTEXT($L(VAL),2,0)_$$LJ^%ZTEXT(VAL,19)_MSG.extract(239,999)
	if BIT="MID" quit MSG.extract(1,6)_$$RJ^%ZTEXT(VAL,4,0)_MSG.extract(11,999)
	if BIT="OWNID" quit MSG.extract(1,253)_$$LJ^%ZTEXT(VAL,8)_MSG.extract(262,999)
	if BIT="PRCD" quit MSG.extract(1,47)_$$RJ^%ZTEXT(VAL,6,0)_MSG.extract(54,999)
	if BIT="REGE" quit MSG.extract(1,140)_$$LJ^%ZTEXT(VAL,40)_MSG.extract(181,999)
	if BIT="RRC" quit MSG.extract(1,124)_$$RJ^%ZTEXT(VAL,2,0)_MSG.extract(127,999)
	if BIT="SPR" quit MSG.extract(1,269)_$$RJ^%ZTEXT(VAL,6,0)_MSG.extract(276,999)

	quit


DISPLAY	// Parse a MPS request message and the corresponding reply message in ^NSMLOG

	
	type public Number %PAGE,%PG,SEQ
	type public String FSEQ,IO,MSGID,%NOPRMT,OLNTB,OPT(),%READ,%TAB,TBL,TSEQ,VFMQ
	type String ANSI,LKUP

	set OPT(1)="Selected Message Ids"
	set OPT(2)="Message Id Range"

	set IO=$I
	set %TAB("IO")="/DES=Output/TYP=T/LEN=60/XPP=do IOPP^MPSTST"
	set %TAB("OPT")="/TYP=N/LEN=1/TBL=OPT(/DES=Message Id(s) Option"

	set %PAGE=2,%PG=1
	set %READ="@@%FN,,,IO/REQ,OPT/REQ",%NOPRMT="N"

	do ^UTLREAD quit:VFMQ="Q"

	set %PAGE=1,%PG=1
	set %NOPRMT="N"
	set OLNTB=7000

	// Define TBL array
	do INIT^ANSIX92			
	set ANSI="ANSIX92"

	set LKUP="[NSMLOG]MSGTYP=ANSIX92"
	set %TAB("MSGID")="TYP=T/LEN=40/DES=Message Id/TBL=[NSMLOG]MSGID:DISTINCT:QU LKUP"
	set %TAB("MSGID(0)")=%TAB("MSGID")
	set %TAB("FSEQ")="/TYP=T/LEN=40/DES=From Message Id/TBL=[NSMLOG]MSGID:DISTINCT:QU LKUP"
	set %TAB("TSEQ")="/TYP=T/LEN=40/XPP=do TSEQPP^MPSTST/DES=To Message Id/TBL=[NSMLOG]MSGID:DISTINCT:QU LKUP"

	// Selected message ids
	if OPT=1 do {			
		set %READ="MSGID(0)/REQ,MSGID/REP=10/NOREQ"

		do ^UTLREAD quit:VFMQ="Q"

		set SEQ=""
		for  set SEQ=MSGID(SEQ).order() quit:SEQ.isNull()  do SHOW(MSGID(SEQ),ANSI,IO,.TBL)
		}

	// Range of message ids
	if OPT=2 do {			
		set %READ="FSEQ/REQ,TSEQ/REQ"

		do ^UTLREAD quit:VFMQ="Q"

		type ResultSet rs=Db.select("MSGID","NSMLOG","MSGTYP=:ANSI AND MSGID BETWEEN :FSEQ AND :TSEQ")
		if rs.isEmpty() quit
		while rs.next() do SHOW(rs.getCol("MSGID"),ANSI,IO,.TBL)
		}

	do CLOSE^SCAIO

	quit


SHOW(MSGID,ANSI,IO,TBL)	// Display messages for a message id

	type public String BIT,MID,MSG,%TO,TYP
	type Number SEQ
	type String DESC1,DESC2,DESC3,NUM
	

	if MSGID="" quit
	set DESC1="Message Id: "_MSGID_" ******************************************"
	use IO write !!,DESC1
	set DESC1="No messages for message id "_MSGID
	
	type RecordNSMLOG nsm=Db.getRecord("NSMLOG","MSGTYP=:ANSI,MSGID=:MSGID",1)
	if 'nsm.getMode() use IO write !!,DESC1 quit
	
	set DESC1="Date: "_nsm.cdat.toString("MM-DD-YEAR")
	set DESC2="Time: "_nsm.ctim.toString("HH:MM:SS")
	set DESC3="System Date: "_nsm.tpd.toString("MM-DD-YEAR")
	use IO write !,DESC1,?18,DESC2,?36,DESC3

	set MSG=""
	type ResultSet rs=Db.select("TYP,SEQ","NSMLOGD","MSGTYP=:ANSI AND MSGID=:MSGID")
	if rs.isEmpty() quit
	while rs.next() do {
		set TYP=rs.getCol("TYP")
		set SEQ=rs.getCol("SEQ")
	
		type RecordNSMLOGD nsmlogd=Db.getRecord("NSMLOGD","MSGTYP=:ANSI,MSGID=:MSGID,TYP=:TYP,SEQ=:SEQ",1)
		if nsmlogd.getMode() set MSG=MSG_nsmlogd.DTL
	

                type ResultSet rslog=Db.select("SEQ","NSMLOGD","MSGTYP=:ANSI AND MSGID=:MSGID AND TYP=:TYP AND SEQ>:SEQ")	
                if rslog.next() quit
		
		// Strip header from message
		set MSG=MSG.extract(7,MSG.length())	
		set MID=$$BITMAP^ANSIX92(MSG,.TBL,.BIT)
		set DESC1="*** Message Type: "_TYP
		set DESC2="Message ID: "_MID
		use IO write !!,?5,DESC1,!,?5,DESC2

		set NUM=""
		for  set NUM=BIT(NUM).order() quit:NUM.isNull()  use IO write !,?5,"Bit "_NUM_"="_""""_BIT(NUM).get()_""""
		set MSG=""
		}
	write !,$$MSG^%TRMVT("",0,1,1,24,%TO,1)
	quit


IOPP	// IO Post Processor

	type public Boolean ER
	type public String IO,RM,X,Z

	set IO=X
	if IO=$I quit

	set Z=$$FILE^%ZOPEN(IO,"NEWV/WRITE",10,80)
	if 'Z set ER=1,RM=Z.piece("|",2)

	quit


TSEQPP	// TSEQ Post Processor
	
	type public Boolean ER
	type public String FSEQ,RM,X

	if X<FSEQ set ER=1,RM="To message id must be greater than from message id"
	quit
	
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60254^40198^Renga SP^19214"	// Signature - LTD^TIME^USER^SIZE
