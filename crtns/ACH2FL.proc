ACH2FL(RecordACH2 ach2, String vpar, Boolean vparNorm) // ACH2 - ACH Detail Information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:21 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (24)             10/05/2005
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ach2.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ach2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ach2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String COID = ach2.coid
	type String PTYPE = ach2.ptype
	type String SEQ = ach2.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("COID").exists()!vx("PTYPE").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ACH2",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACH2","COID = :ach2.coid and PTYPE = :ach2.ptype and SEQ = :ach2.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String COID
	type public String PTYPE
	type public String SEQ

	type RecordACH2 ach2 = Db.getRecord("ACH2","COID=:COID,PTYPE=:PTYPE,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do ach2.setMode(2)

		do ACH2FL(ach2,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordACH2 ach2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACH2","COID = :ach2.coid and PTYPE = :ach2.ptype and SEQ = :ach2.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ach2))  S ^ACH(vobj(ach2,-3),vobj(ach2,-4),vobj(ach2,-5))=vobj(ach2)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordACH2 ach2


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACH(vobj(ach2,-3),vobj(ach2,-4),vobj(ach2,-5))    // Delete Record
	quit


vinit // Initialize default values

	type public RecordACH2 ach2

	// Type local variables for access keys for defaults
	type public String COID
	type public String PTYPE
	type public String SEQ

	if ach2.cidglflg.isNull() set ach2.cidglflg = 0        // cidglflg
	if ach2.offglflg.isNull() set ach2.offglflg = 0        // offglflg
	quit


vreqn // Validate required data items

	type public RecordACH2 ach2

	if ach2.cidglflg.isNull() do vreqerr("CIDGLFLG") quit
	if ach2.offglflg.isNull() do vreqerr("OFFGLFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordACH2 ach2

	if ach2.coid.isNull() do vreqerr("COID") quit
	if ach2.ptype.isNull() do vreqerr("PTYPE") quit
	if ach2.seq.isNull() do vreqerr("SEQ") quit

		if vx("CIDGLFLG").exists(),ach2.cidglflg.isNull() do vreqerr("CIDGLFLG") quit
		if vx("OFFGLFLG").exists(),ach2.offglflg.isNull() do vreqerr("OFFGLFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACH2","MSG",1767,"ACH2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("OFFCID").exists()!vx("OFFGLFLG").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordACH2 ach2
	/* 
	______ Revision History________________________________________________
	 
	07/17/02 - STATTOND - 50507
		   Convert to PSL.

	06/24/02 - STATTOND - 50507
		   This after insert trigger will check the offset account
		   status (ACN.STAT) if the offset account GL flag
		   (ACH2.OFFGLFLG) is not selected. If the account status
		   is 4 (closed) an error message will be displayed.

	*/	


	if ach2.offglflg=1 quit 
	if ach2.offcid="" quit
	new XOFFCID
	set XOFFCID=ach2.offcid
	type RecordACN acn=Db.getRecord("ACN","CID=:XOFFCID")
	// Account ~p1 closed
	if acn.stat=4 do Runtime.setErrMSG("ACH2",55,XOFFCID) quit:ER

	quit

vau1 // Trigger AU_OFFCID - After Update Offset account

	type public RecordACH2 ach2
	/*
	________ Revision History_____________________________________ 
	
	07/17/02 - STATTOND - 50507
		   Convert to PSL.

	06/24/02 - STATTOND - 50507
		   This after update trigger will check the offset account 
		   status if the offset account GL flag (ACH2.OFFGLFLG) is 
		   not selected. If the account status is 4 (closed) an error 
		   message will be displayed.

	*/

	
	if ach2.offglflg=1 quit
	if ach2.offcid="" quit
	new XOFFCID
	set XOFFCID=ach2.offcid
	type RecordACN acn=Db.getRecord("ACN","CID=:XOFFCID")
	// Account ~p1 closed
	if acn.stat=4 do Runtime.setErrMSG("ACH2",55,XOFFCID) quit:ER

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordACH2 ach2

	set X = ach2.coid if 'X.isNull(),'Db.isDefined("ACH","X") set vRM = $$^MSG(1485,X) do vdderr("COID", vRM) quit
	if ach2.ptype.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PTYPE", vRM) quit
	set X = ach2.seq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = ach2.achtc if 'X.isNull(),'Db.isDefined("STBLACHTC","X") set vRM = $$^MSG(1485,X) do vdderr("ACHTC", vRM) quit
	if ach2.addrec.length()>80 set vRM = $$^MSG(1076,80) do vdderr("ADDREC", vRM) quit
	set X = ach2.amtlp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACH2.AMTLP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ach2.cid.length()>17 set vRM = $$^MSG(1076,17) do vdderr("CID", vRM) quit
	if '("01"[ach2.CIDGLFLG) set vRM=$$^MSG(742,"L") do vdderr("CIDGLFLG", vRM) quit
	set X = ach2.cidrpa if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CIDRPA", vRM) quit
	set X = ach2.datlp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DATLP", vRM) quit
	set X = ach2.datnp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DATNP", vRM) quit
	if ach2.disd.length()>2 set vRM = $$^MSG(1076,2) do vdderr("DISD", vRM) quit
	set X = ach2.edate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EDATE", vRM) quit
	set X = ach2.fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[ACH2]FRE",0) if 'vRM.get().isNull() do vdderr("FRE", vRM) quit
	set X = ach2.ibstc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("IBSTC", vRM) quit
	if ach2.indid.length()>15 set vRM = $$^MSG(1076,15) do vdderr("INDID", vRM) quit
	if ach2.indnam.length()>22 set vRM = $$^MSG(1076,22) do vdderr("INDNAM", vRM) quit
	set X = ach2.offcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("OFFCID", vRM) quit
	if '("01"[ach2.OFFGLFLG) set vRM=$$^MSG(742,"L") do vdderr("OFFGLFLG", vRM) quit
	set X = ach2.offrpa if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("OFFRPA", vRM) quit
	set X = ach2.offtc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("OFFTC", vRM) quit
	set X = ach2.pdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PDATE", vRM) quit
	set X = ach2.rtnum if 'X.isNull(),'Db.isDefined("UTBLACHRT","X") set vRM = $$^MSG(1485,X) do vdderr("RTNUM", vRM) quit
	if ach2.tamt.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TAMT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACH2","MSG",979,"ACH2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordACH2 ach2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("COID").exists() set vux("COID") = vx("COID")
	if vx("PTYPE").exists() set vux("PTYPE") = vx("PTYPE")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = ach2.coid_","_ach2.ptype_","_ach2.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ach2.coid_","_ach2.ptype_","_ach2.seq // Copy new keys into object
	type RecordACH2 vnewrec = ach2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ACH2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordACH2 ach2

	if vux("COID").exists() set ach2.coid = vux("COID").piece("|",i)
	if vux("PTYPE").exists() set ach2.ptype = vux("PTYPE").piece("|",i)
	if vux("SEQ").exists() set ach2.seq = vux("SEQ").piece("|",i)
	quit
