UTBLGLSC(RecordUTBLGLSC utblglsc, String vpar, Boolean vparNorm) // UTBLGLSC - G/L Set Codes Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (46)             03/17/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblglsc.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblglsc,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblglsc,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("GLSC").exists() do vkchged quit                // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLGLSC",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLGLSC","GLSC = :utblglsc.glsc") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String GLSC

	type RecordUTBLGLSC utblglsc = Db.getRecord("UTBLGLSC","GLSC=:GLSC")
	if (%ProcessMode = 2) do {
		do utblglsc.setMode(2)

		do UTBLGLSC(utblglsc,vpar)
	}
	else  do VINDEX(utblglsc)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLGLSC utblglsc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLGLSC","GLSC = :utblglsc.glsc") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblglsc,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblglsc,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblglsc))  S ^UTBL("GLSC",vobj(utblglsc,-3))=vobj(utblglsc)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.utblglsc) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLGLSC utblglsc

	if vpar["/INDEX/" do VINDEX(.utblglsc)                 // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblglsc,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("GLSC",vobj(utblglsc,-3))                    // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLGLSC utblglsc

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLGLSC utblglsc

	if utblglsc.glsc.isNull() do vreqerr("GLSC") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLGLSC","MSG",1767,"UTBLGLSC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLGLSC utblglsc

	if utblglsc.glsc.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GLSC", vRM) quit
	if utblglsc.cls.length()>1 set vRM = $$^MSG(1076,1) do vdderr("CLS", vRM) quit
	if utblglsc.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = utblglsc.dgl1 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGL1", vRM) quit
	set X = utblglsc.dgl2 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGL2", vRM) quit
	set X = utblglsc.dgl3 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGL3", vRM) quit
	set X = utblglsc.dgl4 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGL4", vRM) quit
	set X = utblglsc.dgl5 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGL5", vRM) quit
	set X = utblglsc.dglai if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLAI", vRM) quit
	set X = utblglsc.dgldi if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLDI", vRM) quit
	set X = utblglsc.dglf if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLF", vRM) quit
	set X = utblglsc.dgli if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLI", vRM) quit
	set X = utblglsc.dglianc if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLIANC", vRM) quit
	set X = utblglsc.dglii if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLII", vRM) quit
	set X = utblglsc.dglnb if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLNB", vRM) quit
	set X = utblglsc.dglni if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLNI", vRM) quit
	set X = utblglsc.dglntx if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLNTX", vRM) quit
	set X = utblglsc.dglri if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLRI", vRM) quit
	set X = utblglsc.dglstwh if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLSTWH", vRM) quit
	set X = utblglsc.dglu if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLU", vRM) quit
	set X = utblglsc.dglunanb if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLUNANB", vRM) quit
	set X = utblglsc.dglunani if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLUNANI", vRM) quit
	set X = utblglsc.dglunc if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGLUNC", vRM) quit
	if utblglsc.grp.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GRP", vRM) quit
	set X = utblglsc.lgl1 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL1", vRM) quit
	set X = utblglsc.lgl10 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL10", vRM) quit
	set X = utblglsc.lgl2 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL2", vRM) quit
	set X = utblglsc.lgl3 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL3", vRM) quit
	set X = utblglsc.lgl4 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL4", vRM) quit
	set X = utblglsc.lgl5 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL5", vRM) quit
	set X = utblglsc.lgl6 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL6", vRM) quit
	set X = utblglsc.lgl7 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL7", vRM) quit
	set X = utblglsc.lgl8 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL8", vRM) quit
	set X = utblglsc.lgl9 if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGL9", vRM) quit
	set X = utblglsc.lglf if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLF", vRM) quit
	set X = utblglsc.lglfee if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLFEE", vRM) quit
	set X = utblglsc.lgli if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLI", vRM) quit
	set X = utblglsc.lglio if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLIO", vRM) quit
	set X = utblglsc.lgll if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLL", vRM) quit
	set X = utblglsc.lgllc if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLLC", vRM) quit
	set X = utblglsc.lgllr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLLR", vRM) quit
	set X = utblglsc.lglnb if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLNB", vRM) quit
	set X = utblglsc.lglp if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLP", vRM) quit
	set X = utblglsc.lglpo if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGLPO", vRM) quit
	set X = utblglsc.lgplb if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGPLB", vRM) quit
	set X = utblglsc.lgpub if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("LGPUB", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLGLSC","MSG",979,"UTBLGLSC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordUTBLGLSC utblglsc) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("CLS").exists()!vx("GRP").exists() do vi1(.utblglsc)
	}
	do vi1(.utblglsc)

	quit
	

vi1(RecordUTBLGLSC utblglsc) // Maintain UTBLGLSCX index entries (General Ledger Set Code Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = utblglsc.cls
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = utblglsc.grp
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = utblglsc.glsc

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^UTBL("GLSC",vobj(utblglsc,-3)))#2,'$D(^UTBL("GLSCX",v2,v3,v4)) do vidxerr("UTBLGLSCX")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^UTBL("GLSCX",v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v2=vx("CLS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v3=vx("GRP").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^UTBL("GLSCX",v2,v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("UTBLGLSC")

	while ds.next() do {
		type RecordUTBLGLSC utblglsc=ds.getRecord("UTBLGLSC")
		if vlist.contains("VINDEX") do VINDEX(.utblglsc) quit
		if vlist.contains("UTBLGLSCX") do vi1(.utblglsc)
	}

	quit


public VIDXBLD1(RecordUTBLGLSC utblglsc, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.utblglsc) quit
	if vlist.contains("UTBLGLSCX") do vi1(.utblglsc)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("UTBLGLSC","MSG",1225,"UTBLGLSC."_di)

	quit


vkchged // Access key changed

	type public RecordUTBLGLSC utblglsc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("GLSC")
	set voldkey = vux.piece("|",1),vobj(utblglsc,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblglsc,-3) = vnewkey // Copy new keys into object
	type RecordUTBLGLSC vnewrec = utblglsc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLGLSC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utblglsc,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "UTBLGLSC"	// Location of index program

