LNRNWFIL(RecordLNRENEW lnrenew, String vpar, Boolean vparNorm) // LNRENEW - Loan Renewals Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:27 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (70)             02/01/2006
	// Trigger Definition (14)                     11/23/2005
	// Journal File Definition (1)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnrenew.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnrenew,.vxins(),11,"|")
	if %O = 1 quit:'lnrenew.isChanged()  do AUDIT^UCUTILN(lnrenew,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnrenew.cid
	type String ROSEQ = lnrenew.roseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ROSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNRENEW",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNRENEW","CID = :lnrenew.cid and ROSEQ = :lnrenew.roseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ROSEQ

	type RecordLNRENEW lnrenew = Db.getRecord("LNRENEW","CID=:CID,ROSEQ=:ROSEQ")
	if (%ProcessMode = 2) do {
		do lnrenew.setMode(2)

		do LNRNWFIL(lnrenew,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNRENEW lnrenew

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNRENEW","CID = :lnrenew.cid and ROSEQ = :lnrenew.roseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(lnrenew,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(lnrenew,-3),65,vobj(lnrenew,-4),n)=vobj(lnrenew,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(lnrenew,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(lnrenew,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(lnrenew,-3),65,vobj(lnrenew,-4),n)=vobj(lnrenew,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnrenew))  S ^ACN(vobj(lnrenew,-3),65,vobj(lnrenew,-4))=vobj(lnrenew)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL^LNRNWFI0(.lnrenew)             // Create journal files
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordLNRENEW lnrenew
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^ACN(vobj(lnrenew,-3),65,vobj(lnrenew,-4),n)) quit:n.isNull()  if 'vobj(lnrenew,n).data(),^ACN(vobj(lnrenew,-3),65,vobj(lnrenew,-4),n).data()#2 set vobj(lnrenew,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNRENEW lnrenew

	if 'vkeychg.get(),lnrenew.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/JOURNAL/" do VJOURNAL^LNRNWFI0(.lnrenew)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^ACN(vobj(lnrenew,-3),65,vobj(lnrenew,-4))        // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNRENEW lnrenew

	// Type local variables for access keys for defaults
	type public String CID
	type public String ROSEQ

	if lnrenew.cnvapp.isNull() set lnrenew.cnvapp = 0      // cnvapp
	if lnrenew.mropt.isNull() set lnrenew.mropt = 0        // mropt
	if lnrenew.rcbind.isNull() set lnrenew.rcbind = 0      // rcbind
	if lnrenew.rfmo.isNull() set lnrenew.rfmo = 0          // rfmo
	if lnrenew.rpmo.isNull() set lnrenew.rpmo = 0          // rpmo
	quit


vreqn // Validate required data items

	type public RecordLNRENEW lnrenew

	if lnrenew.cnvapp.isNull() do vreqerr("CNVAPP") quit
	if lnrenew.mropt.isNull() do vreqerr("MROPT") quit
	if lnrenew.rcbind.isNull() do vreqerr("RCBIND") quit
	if lnrenew.rfmo.isNull() do vreqerr("RFMO") quit
	if lnrenew.rpmo.isNull() do vreqerr("RPMO") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNRENEW lnrenew

	if lnrenew.cid.isNull() do vreqerr("CID") quit
	if lnrenew.roseq.isNull() do vreqerr("ROSEQ") quit

	if 'vobj(lnrenew,-100,56,"").order().isNull() do {
		if vx("RFMO").exists(),lnrenew.rfmo.isNull() do vreqerr("RFMO") quit
		if vx("RPMO").exists(),lnrenew.rpmo.isNull() do vreqerr("RPMO") quit
		if vx("RCBIND").exists(),lnrenew.rcbind.isNull() do vreqerr("RCBIND") quit
	}
	if 'vobj(lnrenew,-100,"0*","").order().isNull() do {
		if vx("CNVAPP").exists(),lnrenew.cnvapp.isNull() do vreqerr("CNVAPP") quit
		if vx("MROPT").exists(),lnrenew.mropt.isNull() do vreqerr("MROPT") quit
	}
		if vx("CNVAPP").exists(),lnrenew.cnvapp.isNull() do vreqerr("CNVAPP") quit
		if vx("MROPT").exists(),lnrenew.mropt.isNull() do vreqerr("MROPT") quit
		if vx("RCBIND").exists(),lnrenew.rcbind.isNull() do vreqerr("RCBIND") quit
		if vx("RFMO").exists(),lnrenew.rfmo.isNull() do vreqerr("RFMO") quit
		if vx("RPMO").exists(),lnrenew.rpmo.isNull() do vreqerr("RPMO") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNRENEW","MSG",1767,"LNRENEW."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("CNVAPP").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ICHND").exists()!vx("INTOFF").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INDEX").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INTFRE").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INTOFFCL").exists()!vx("ICHM").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRN").exists()!vx("EIRN").exists() do vau11 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MROPT").exists() do vau7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PCFRE").exists() do vau8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PCHND").exists()!vx("PCOFF").exists() do vau9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PTRM").exists()!vx("TRM").exists()!vx("MDT").exists() do vau10 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNRENEW lnrenew
	if vx("").order().isNull() do AUDIT^UCUTILN(lnrenew,.vx(),11,"|") quit
	if vx("CNVAPP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnrenew,.vx(),11,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordLNRENEW lnrenew

					/* -----Revision History---------------------------------------------------

	11/15/02 - Erik Scheetz - 43583
		Wrapped %EffectiveDate with $G[et] where needed
		due to compile changes in this version.
							 
	08/07/02 - EDWARDSM - 50697
		   Added three interest index variables for loan renewal,
		   INTMAT (Matrix), INTSPR (Interest Spread) and RNDMTD
		   (Rounding Method). If these items are defined on the renewal
		   screen and a fixed rate is also defined, an error will be
		   returned.

	11/11/00 - SCOTTC  - 40355
		  Create Renewal Loan Payment Term outside valid range 
		  integrity.                    

						*/

	// SETUP VARS
	new BLOFF,CNVAPP,CNVDT,DIST1FRE,DIST1ND,ICHND,INDEX
	new INTFRE,INTMAT,INTSPR,MROPT,PCFRE,PCHM,PCHND,PCM
	new PCMVAL,PCOFF,RNDMTD,RDT,RNOFF,SCHLD

 	set CNVAPP=lnrenew.cnvapp
	set MROPT=lnrenew.mropt
	set ZROSEQ=lnrenew.roseq

	type RecordLN ln=Db.getRecord("LN","CID")

	set RNOFF=ln.rnoff
	set CNVDT=ln.cnvdt
	set RDT=ln.rdt
	
	if lnrenew.bloff'="" set BLOFF=lnrenew.bloff
	else  set BLOFF=ln.bloff

	if lnrenew.dist1fre'="" set DIST1FRE=lnrenew.dist1fre
	else  set DIST1FRE=ln.dist1fre

	if lnrenew.dist1nd'="" set DIST1ND=lnrenew.dist1nd
	else  set DIST1ND=ln.dist1nd

	if lnrenew.ichnd'="" set ICHND=lnrenew.ichnd
	else  set ICHND=ln.ichnd

	if lnrenew.index'="" set INDEX=lnrenew.index
	else  set INDEX=ln.index

	if lnrenew.intfre'="" set INTFRE=lnrenew.intfre
	else  set INTFRE=ln.intfre

	if lnrenew.intfre'="" set INTFRE=lnrenew.intfre
	else  set INTFRE=ln.intfre

	if lnrenew.intmat'="" set INTMAT=lnrenew.intmat
	else  set INTMAT=ln.intmat

	if lnrenew.intoff'="" set INTOFF=lnrenew.intoff
	else  set INTOFF=ln.intoff

	if lnrenew.intspr'="" set INTSPR=lnrenew.intspr
	else  set INTSPR=ln.intspr

	if lnrenew.pcfre'="" set PCFRE=lnrenew.pcfre
	else  set PCFRE=ln.pcfre
	
	if lnrenew.pchm'="" set PCHM=lnrenew.pchm
	else  set PCHM=ln.pchm

	if lnrenew.pchnd'="" set PCHND=lnrenew.pchnd
	else  set PCHND=ln.pchnd

	if lnrenew.pcm'="" set PCM=lnrenew.pcm
	else  set PCM=ln.pcm

	if lnrenew.pcoff'="" set PCOFF=lnrenew.pcoff
	else  set PCOFF=ln.pcoff
	
	if lnrenew.rndmtd'="" set RNDMTD=lnrenew.rndmtd
	else  set RNDMTD=ln.rndmtd

	set SCHLD=ln.schld
	set PCMVAL=$$PCMVAL^LNCDI(PCM)
	
	// BLOFF - Billing Offset
	if lnrenew.bloff="1P" do { quit:ER 
		new FRE
		set %EffectiveDate=$G(%EffectiveDate)
		set FRE=DIST1FRE
		set JD=$$NJD^UFRE(%EffectiveDate,"-"_FRE) quit:ER
		if %EffectiveDate'=$$NJD^UFRE(JD,FRE) do Runtime.setErrSTBLER("LNRENEW","LNBLOFF3") quit:ER 
		}
	
	if lnrenew.irn'="",lnrenew.eirn'="" do Runtime.setErrMSG("LNRENEW",2444) quit 
	if (lnrenew.irn'="")!(lnrenew.eirn'="") do {
		if lnrenew.index'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.intoff'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.intoffcl'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.ichnd'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.intfre'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.ichm'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.intmat'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit
		if lnrenew.intspr'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit
		if lnrenew.rndmtd'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit	
		}
	
	quit:ER	

	// CNVAPP - Conversion Approved
	if CNVAPP=1 do {
		new AO
		//Conversion date must be defined before approval
		if CNVDT="" do Runtime.setErrMSG("LNRENEW",3213) quit:ER
	
		new rs 
		type ResultSet rs=Db.select("ROSEQ","LNRENEW","CID=:CID AND CNVAPP=1") 
		if rs.isEmpty()
		set AO=rs.next(),AO=rs.getCol(1)

		//Renewal option ~p1 is already approved	
		if AO'="",AO'=ZROSEQ do Runtime.setErrMSG("LNRENEW",3211,AO) quit:ER
		if (RNOFF="")!(RDT'="") quit
		do Db.update("LN","RDT=:CNVDT","CID=:CID")
		}
	
	quit:ER 
	
	// ICHND - Interest Change Next Date
	if lnrenew.ichnd'="" do {
		if ICHND<%SystemDate do Runtime.setErrXBAD("LNRENEW",76,"ICHND",ICHND) quit:ER 

		//Interest change offset required with interest change date
		if INTOFF="" do Runtime.setErrMSG("LNRENEW",3238) quit:ER

		//Interest change next date requires interest change frequency
		if INTFRE="" do Runtime.setErrMSG("LNRENEW",3215) quit       

		do ICHNDF^LNPPC3(ICHND,DIST1ND,PCMVAL,DIST1FRE,INTFRE)
		if $G(ER) do Runtime.setErrSTBLER("LNRENEW","INTCFR") quit:ER 
		}
	
	quit:ER 
	
	// INTFRE - Interest Change Frequency
	if lnrenew.intfre'="" do {
		do INTFREF^LNPPC3(INTFRE,DIST1ND,PCMVAL,DIST1FRE,SCHLD)
		if $G(ER) do Runtime.setErrSTBLER("LNRENEW","INTFRE") quit:ER 
		}
	
	quit:ER 
	
	// MROPT - Maturity Renewal Option Flag
	if MROPT=1 do {
		new AO
	
		new rs 
		type ResultSet rs=Db.select("ROSEQ","LNRENEW","CID=:CID AND MROPT=1") 
		if rs.isEmpty()
		set AO=rs.next(),AO=rs.getCol(1)
	
		//Renewal option ~p1 is already selected as the maturity default
		if AO'="",AO'=ZROSEQ do Runtime.setErrMSG("LNRENEW",3212,AO) quit     
		}
	
	quit:ER 
	
	// PCFRE - Payment Change Frequency
	if lnrenew.pcfre'="" do {
		if INTOFF="" do Runtime.setErrXBAD("LNRENEW","PCFRE") quit:ER 
		if $E(PCMVAL)=0 do Runtime.setErrSTBLER("LNRENEW","NPINAPF") quit:ER 
		if $E(PCMVAL,3)=2 do Runtime.setErrXBAD("LNRENEW",126) quit:ER 
		}
	
	quit:ER 
	
	// PCHND - Payment Change Next Date
	if lnrenew.pchnd'="" do {
		if PCHND'>%SystemDate do Runtime.setErrXBAD("LNRENEW",79) quit:ER 

		//Payment change offset required with payment change date	
		if PCOFF="" do Runtime.setErrMSG("LNRENEW",3237) quit:ER     

		//Payment change method required when payment change frequency contains a value	
		if PCHM="" do Runtime.setErrMSG("LNRENEW",2110) quit:ER      

		//Payment change next date requires payment change frequency
		if PCFRE="" do Runtime.setErrMSG("LNRENEW",3217) quit:ER     
		if $E(PCMVAL)=0 do Runtime.setErrSTBLER("LNRENEW","NPINAPD") quit:ER 
		}
	
	quit:ER 
	
	// RATES - IRN & EIRN
	if lnrenew.irn'="",lnrenew.eirn'="" do Runtime.setErrMSG("LNRENEW",2444) quit:ER 
	
	
	// INDEX
	if INTOFF'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","INDEX15") quit:ER 
	if INTFRE'="",INDEX="" do Runtime.setErrXBAD("LNRENEW",8) quit:ER 
	if INDEX'="",INTFRE="" do Runtime.setErrXBAD("LNRENEW","INDEX13") quit:ER 
	if INTMAT'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit:ER
	if INTSPR'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit:ER
	if RNDMTD'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit:ER

	// Renewal Loan Payment Term outside valid range.
	new busopt,crcd,cnvdt,data,dfp,dist1fre,dtnt,lpd,LPD,maxptrm,mdt,minptrm
	new nbdc,PCMVAL,XCID
	// get values need to calculate maturity date from LN
	set XCID=lnrenew.cid

	type RecordLN ln=Db.getRecord("LN","XCID")	

	set dtnt=ln.dtnt
	set minptrm=ln.minptrm
	set maxptrm=ln.maxptrm
	set nbdc=ln.nbdc
	set busopt=ln.busopt
	if lnrenew.dist1fre="" set dist1fre=ln.dist1fre
	else  set dist1fre=lnrenew.dist1fre
	set type=ln.type
	set crcd=ln.crcd
	set cnvdt=ln.cnvdt
	set odd=ln.odd
	set dfp=ln.dfp
	if lnrenew.ptrm="" set ptrm=ln.ptrm
	else  set ptrm=lnrenew.ptrm
	set lpd=""
	set LPD=$$AMODT^PROCLN(type,crcd,odd,dist1fre,dfp,lpd)
	set PCMVAL=$$PCMVAL^LNCDI(lnrenew.pcm)

	/* Find maturity date based on the conversion date in LN and LNRENEW
	   payment term		*/

	if lnrenew.mdt="" set mdt=$$MDT^PROCLN(dtnt,cnvdt,ptrm,,busopt,nbdc,LPD,PCMVAL,dist1fre) quit:ER
 	else  set mdt=lnrenew.mdt

	// Check the min and max payment term against maturity date
	if minptrm'="",mdt<$$MDT^PROCLN(dtnt,cnvdt,minptrm,,busopt,nbdc,LPD,PCMVAL,dist1fre) do Runtime.setErrXBAD("LN","RELNPTRM") quit:ER
	if maxptrm'="",mdt>$$MDT^PROCLN(dtnt,cnvdt,maxptrm,,busopt,nbdc,LPD,PCMVAL,dist1fre) do Runtime.setErrXBAD("LN","RELNPTRM") quit:ER

	quit

vau1 // Trigger AFTER_UPDATE - After Update trigger

	type public RecordLNRENEW lnrenew
	/*
	---------- Revision History ------------------------------------------
	
	11/24/05 - Sreeram Panyaram
		   Converted %SYSTEMDATE to %SystemDate.	
	
	09/17/99 - CARROLLJ - 31126		
		   Convert to PSL.

	
	
	Verify effective date (maturity date) against changes to LNRENEW.BLOFF.
	This is done in the general after-update trigger because it needs to
	be verified in all cases.  Example:
		DIST1FRE="1MA1"
		System Date = NOV 10
		Client runs LNM006 for Dec 1 and adds BLOFF of "1P"
		Client then runs LNM006 for Dec 2 and changes IRN.  This should
		return an error because BLOFF cannot be changed to "1P" except
		on a due date.
	*/

	type RecordLN ln=Db.getRecord("LN","CID")

	if ((lnrenew.bloff="1P")&(ln.bloff'=""))!(lnrenew.bloff="1P") do { quit:ER 
		new FRE
		set FRE=lnrenew.dist1fre
		if FRE="" set FRE=ln.dist1fre
		set JD=$$NJD^UFRE(%EffectiveDate,"-"_FRE) quit:ER
		if EFD'=$$NJD^UFRE(JD,FRE) do Runtime.setErrSTBLER("LNRENEW","LNBLOFF3") quit:ER 
		}
	
	new XCID
	set XCID=lnrenew.cid
	do Db.update("LN","FMLD=:%SystemDate","CID=:XCID","/NOJOURNAL")
	quit

vau2 // Trigger AU_CNVAPP - After Update Conversion Approved

	type public RecordLNRENEW lnrenew

	/*
	-----Revision History---------------------------------------------------
	
	05/19/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code.
	*/

	if lnrenew.cnvapp=0 quit
	
	type Number AO
	type Date CNVDT
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set CNVDT=ln.cnvdt
	
	//Conversion date must be defined before approval	
	if CNVDT="" do Runtime.setErrMSG("LNRENEW",3213) quit 
	
	type ResultSet rs=Db.select("ROSEQ","LNRENEW","CID=:CID AND CNVAPP=1") 
	if rs.isEmpty()
	set AO=rs.next(),AO=rs.getCol(1)
	
	//Renewal option ~p1 is already approved	
	if AO'="",AO'=lnrenew.roseq do Runtime.setErrMSG("LNRENEW",3211,AO) quit
	if (ln.rnoff="")!(ln.rdt'="") quit
	
	set ln.rdt=CNVDT
	
	do ln.save()
	
	quit

vau3 // Trigger AU_ICHND - After Update Interest Change Next Date

	type public RecordLNRENEW lnrenew

	/*
	-----Revision History---------------------------------------------------
	
	05/19/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code.
	*/

	if lnrenew.ichnd="" quit

	type String DIST1FRE, INTFRE, PCM, PCMVAL
	type Date DIST1ND
	type Number INTOFF
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set DIST1ND=ln.dist1nd if lnrenew.dist1nd'="" set DIST1ND=lnrenew.dist1nd
	set DIST1FRE=ln.dist1fre if lnrenew.dist1fre'="" set DIST1FRE=lnrenew.dist1fre
	set INTFRE=ln.intfre if lnrenew.intfre'="" set INTFRE=lnrenew.intfre
	set INTOFF=ln.intoff if lnrenew.intoff'="" set INTOFF=lnrenew.intoff
	set PCM=ln.pcm if lnrenew.pcm'="" set PCM=lnrenew.pcm
	set PCMVAL=$$PCMVAL^LNCDI(PCM)
	
	if (lnrenew.irn'="")!(lnrenew.eirn'="") do {
		// Cannot have fixed and variable rate parameters
		if lnrenew.intoff'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.ichnd'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		}
	
	if ER quit 
	
	// NEXT INTEREST CHANGE Date in the Past
	if lnrenew.ichnd<%SystemDate do Runtime.setErrXBAD("LNRENEW",76,"ICHND",ICHND) quit:ER 

	// Interest change offset required with interest change date
	if INTOFF="" do Runtime.setErrMSG("LNRENEW",3238) quit        

	// Interest change next date requires interest change frequency
	if INTFRE="" do Runtime.setErrMSG("LNRENEW",3215) quit 
	       
	do ICHNDF^LNPPC3(lnrenew.ichnd,DIST1ND,PCMVAL,DIST1FRE,INTFRE)
	
	// Int/Div change dates do not correspond to payment due dates
	if $G(ER) do Runtime.setErrSTBLER("LNRENEW","INTCFR") quit:ER 
	
	quit

vau4 // Trigger AU_INDEX - After Update Index

	type public RecordLNRENEW lnrenew
					/* -----Revision History------------------------------------------
							 
	08/07/02 - EDWARDSM - 50697
		   Added three interest index variables for loan renewal,
		   INTMAT (Matrix), INTSPR (Interest Spread) and RNDMTD
		   (Rounding Method). If these items are defined on the renewal
		   screen and a fixed rate is also defined, an error will be
		   returned.

	*/

	new ICHND,INDEX,INTFRE,INTMAT,INTOFF,INTSPR,PCFRE,RNDMTD

	type RecordLN ln=Db.getRecord("LN","CID")
	
	if lnrenew.index'="" set INDEX=lnrenew.index
	else  set INDEX=ln.index

	if lnrenew.intoff'="" set INTOFF=lnrenew.intoff
	else  set INTOFF=ln.intoff

	if lnrenew.pcfre'="" set PCFRE=lnrenew.pcfre
	else  set PCFRE=ln.pcfre

	if lnrenew.intfre'="" set INTFRE=lnrenew.intfre
	else  set INTFRE=ln.intfre

	if lnrenew.ichnd'="" set ICHND=lnrenew.ichnd
	else  set ICHND=ln.ichnd

	if lnrenew.intmat'="" set INTMAT=lnrenew.intmat
	else  set INTMAT=ln.intmat

	if lnrenew.intspr'="" set INTSPR=lnrenew.intspr
	else  set INTSPR=ln.intspr

	if lnrenew.rndmtd'="" set RNDMTD=lnrenew.rndmtd
	else  set RNDMTD=ln.rndmtd

	if (lnrenew.irn'="")!(lnrenew.eirn'="") do {
		if lnrenew.index'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.intmat'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.intspr'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.rndmtd'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit
		}
	
	if ER quit 
	
	if INTOFF="",PCFRE'="" do Runtime.setErrXBAD("LNRENEW","PCFRE") quit:ER 
	if INTOFF'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","INDEX15") quit:ER 
	if INTFRE'="",INDEX="" do Runtime.setErrXBAD("LNRENEW",8) quit:ER 
	if INDEX'="",INTFRE="" do Runtime.setErrXBAD("LNRENEW","INDEX13") quit:ER 
	if INTMAT'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit:ER
	if INTSPR'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit:ER
	if RNDMTD'="",INDEX="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit:ER
	if ICHND<%SystemDate do Runtime.setErrXBAD("LNRENEW",76,"ICHND",ICHND) quit:ER 
	quit
	

vau5 // Trigger AU_INTFRE - After Update Interest Change Frequency

	type public RecordLNRENEW lnrenew

	/*
	-----Revision History---------------------------------------------------
	
	05/19/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow 
		   and clean up some PSL code.
	*/
	type String DIST1FRE, PCM, PCMVAL
	type Date DIST1ND, SCHLD

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set DIST1ND=ln.dist1nd if lnrenew.dist1nd'="" set DIST1ND=lnrenew.dist1nd
	set DIST1FRE=ln.dist1fre if lnrenew.dist1fre'="" set DIST1FRE=lnrenew.dist1fre
	set PCM=ln.pcm if lnrenew.pcm'="" set PCM=lnrenew.pcm
	set SCHLD=ln.schld
	set PCMVAL=$$PCMVAL^LNCDI(PCM)
	
	if (lnrenew.irn'="")!(lnrenew.eirn'="") do {
		if lnrenew.intfre'="" set ER=1 set RM="NOT BOTH" quit 
		}
	
	if ER quit 
	
	do INTFREF^LNPPC3(lnrenew.intfre,DIST1ND,PCMVAL,DIST1FRE,SCHLD)
	
	// Invalid int/div change frequency
	if $G(ER) do Runtime.setErrSTBLER("LNRENEW","INTFRE") quit:ER 
	
	quit

vau6 // Trigger AU_INT_INFO - After update interest info

	type public RecordLNRENEW lnrenew
	if (lnrenew.irn'="")!(lnrenew.eirn'="") do {
		if lnrenew.intoffcl'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		if lnrenew.ichm'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
		}
	quit
	

vau7 // Trigger AU_MROPT - After Update Maturity Renewal Option

	type public RecordLNRENEW lnrenew
	new AO,MRO
	if lnrenew.mropt=0 quit
	set MRO=lnrenew.mropt
	
	new rs 
	type ResultSet rs=Db.select("ROSEQ","LNRENEW","CID=:CID AND MROPT=1") 
	if rs.isEmpty()
	set AO=rs.next(),AO=rs.getCol(1)
	
	//Renewal option ~p1 is already selected as the maturity default	
	if AO'="",AO'=lnrenew.roseq do Runtime.setErrMSG(3212,AO) quit   
	quit

vau8 // Trigger AU_PCFRE - After Update Payment Change Frequency

	type public RecordLNRENEW lnrenew

	/*
	-----Revision History---------------------------------------------------
	
	05/20/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code.
	*/
	
	if lnrenew.pcfre="" quit
	
	type String DIST1FRE, INTFRE, PCM, PCMVAL
	type Date DIST1ND, ICHND, SCHLD
	type Number INTOFF, PCHM
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set DIST1ND=ln.dist1nd if lnrenew.dist1nd'="" set DIST1ND=lnrenew.dist1nd
	set DIST1FRE=ln.dist1fre if lnrenew.dist1fre'="" set DIST1FRE=lnrenew.dist1fre
	set PCHM=lnrenew.pchm if lnrenew.pchm'="" set PCHM=lnrenew.pchm
	set INTFRE=lnrenew.intfre if lnrenew.intfre'="" set INTFRE=lnrenew.intfre
	set ICHND=lnrenew.ichnd if lnrenew.ichnd'="" set ICHND=lnrenew.ichnd
	set INTOFF=lnrenew.intoff if lnrenew.intoff'="" set INTOFF=lnrenew.intoff
	set PCM=lnrenew.pcm if lnrenew.pcm'="" set PCM=lnrenew.pcm
	set SCHLD=ln.schld
	set PCMVAL=$$PCMVAL^LNCDI(PCM)
	
	// Int/Div offset req when pmt change freq contains a value
	if INTOFF="" do Runtime.setErrXBAD("LNRENEW","PCFRE") quit:ER 
	
	// Only P&I loans may use payment change frequencies
	if $E(PCMVAL)=0 do Runtime.setErrSTBLER("LNRENEW","NPINAPF") quit:ER 
	
	// Pmt Calc Meth Indicates No Pmt Change Freq
	if $E(PCMVAL,3)=2 do Runtime.setErrXBAD("LNRENEW",126) quit:ER 
	quit

vau9 // Trigger AU_PCHND - After Update Payment Change Next Date

	type public RecordLNRENEW lnrenew

	/*
	-----Revision History---------------------------------------------------
	
	05/20/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code.
	*/
	
	if lnrenew.pchnd="" quit

	type String DIST1FRE, INTFRE, PCFRE, PCM
	type Date DIST1ND, ICHND
	type Number PCHM, PCOFF

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set DIST1ND=ln.dist1nd if lnrenew.dist1nd'="" set DIST1ND=lnrenew.dist1nd
	set INTFRE=ln.intfre if lnrenew.intfre'="" set INTFRE=lnrenew.intfre
	set PCFRE=ln.pcfre if lnrenew.pcfre'="" set PCFRE=lnrenew.pcfre
	set ICHND=ln.ichnd if lnrenew.ichnd'="" set ICHND=lnrenew.ichnd
	set DIST1FRE=ln.dist1fre if lnrenew.dist1fre'="" set DIST1FRE=lnrenew.dist1fre
	set PCHM=ln.pchm if lnrenew.pchm'="" set PCHM=lnrenew.pchm
	set PCOFF=ln.pcoff if lnrenew.pcoff'="" set PCOFF=lnrenew.pcoff
	set PCM=ln.pcm if lnrenew.pcm'="" set PCM=lnrenew.pcm
	
	// NEXT PAYMENT CHANGE DATE in the Past
	if lnrenew.pchnd'>%SystemDate do Runtime.setErrXBAD("LNRENEW",79) quit:ER 
	
	// Payment change method required when payment change frequency contains a value
	if PCHM="" do Runtime.setErrMSG("LNRENEW",2110) quit:ER

	// Payment change offset required with payment change date
	if PCOFF="" do Runtime.setErrMSG("LNRENEW",3237) quit:ER      

	// Payment change next date requires payment change frequency
	if PCFRE="" do Runtime.setErrMSG("LNRENEW",3217) quit:ER  
	
	// Only P&I loans may have payment change next dates   
	if $E($$PCMVAL^LNCDI(PCM))=0 do Runtime.setErrSTBLER("LNRENEW","NPINAPD") quit:ER 
	
	quit

vau10 // Trigger AU_PTRM - After update PTRM,TRM,MDT

	type public RecordLNRENEW lnrenew
 	/*
 	ORIG: SCOTTC - 40355
 	DESC: Renewal Loan Payment Term outside valid range integrity. 
	
 	-----Revision History---------------------------------------------------
	
	05/20/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code.           
 	*/
	
	type String PCMVAL
	type Number XCID
	type Date lpd, LPD
	
 	set XCID=lnrenew.cid
 	
 	type RecordLN ln=Db.getRecord("LN","CID=:XCID")
 	
 	set lpd=""
 	set LPD=$$AMODT^PROCLN(ln.type,ln.crcd,ln.odd,ln.dist1fre,ln.dfp,lpd)
	set PCMVAL=$$PCMVAL^LNCDI(lnrenew.pcm)
	
	// Renewal Loan Payment Term outside valid range.
 	if ln.minptrm'="",lnrenew.mdt<$$MDT^PROCLN(ln.dtnt,ln.cnvdt,ln.minptrm,,ln.busopt,ln.nbdc,LPD,PCMVAL,ln.dist1fre) do Runtime.setErrXBAD("LN","RELNPTRM") quit:ER
 	if ln.maxptrm'="",lnrenew.mdt>$$MDT^PROCLN(ln.dtnt,ln.cnvdt,ln.maxptrm,,ln.busopt,ln.nbdc,LPD,PCMVAL,ln.dist1fre) do Runtime.setErrXBAD("LN","RELNPTRM") quit:ER 
	
	quit

vau11 // Trigger AU_RATES - After update - rate verification

	type public RecordLNRENEW lnrenew
	if lnrenew.irn="",lnrenew.eirn="" quit 
	if lnrenew.irn'="",lnrenew.eirn'="" do Runtime.setErrMSG("LNRENEW",2444) quit 
	if lnrenew.index'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
	if lnrenew.intoff'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
	if lnrenew.intoffcl'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
	if lnrenew.ichnd'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
	if lnrenew.intfre'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
	if lnrenew.ichm'="" do Runtime.setErrXBAD("LNRENEW","FXDVAR") quit 
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordLNRENEW lnrenew
	/*
	-----Revision History---------------------------------------------------
	
	05/20/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code. 
	
	10/24/01 - MENYAJ - 47058
		   Check if parameters are defined.
		   	
	09/17/99 - CARROLJ - 31126
		   Convert to PSL.
	*/
	
	if 'Db.isDefined("LNRENEW","CID,ROSEQ") quit
	if lnrenew.cnvapp=0 quit
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	if ln.cnvdt="" quit
	if lnrenew.rnoff'="",lnrenew.rdt="" set lnrenew.rdt=ln.cnvdt
	
	quit
	

vbu1 // Trigger BU_CNVAPP - Before Update CNVAPP

	type public RecordLNRENEW lnrenew
	do lnrenew.setAuditFlag(1)
	/*
	-----Revision History---------------------------------------------------
	
	05/20/05 - MBUIM - CR15982
		   Modified to remove deprecated feature Db.getOneRow and clean
		   up some PSL code.
		   
	11/10/98 - HAYMANP - 30720
		   Added logic to set Return Date (on the option) to be equal
		   to the conversion date when an option is approved.
	*/
	
	if lnrenew.cnvapp=0 quit
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	if ln.cnvdt="" quit
	if lnrenew.rnoff'="",lnrenew.rdt="" set lnrenew.rdt=ln.cnvdt
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNRENEW lnrenew

	if (%O = 2) do vload

	if vobj(lnrenew,49).exists() do {

		if lnrenew.iacm.length()>2 set vRM = $$^MSG(1076,2) do vdderr("IACM", vRM) quit
		set X = lnrenew.idp if 'X.isNull(),'Db.isDefined("STBLIDP","X") set vRM = $$^MSG(1485,X) do vdderr("IDP", vRM) quit
		if lnrenew.pcm.length()>3 set vRM = $$^MSG(1076,3) do vdderr("PCM", vRM) quit
		set X = lnrenew.ppf if 'X.isNull(),'Db.isDefined("STBLPPF","X") set vRM = $$^MSG(1485,X) do vdderr("PPF", vRM) quit
	}

	if vobj(lnrenew,50).exists() do {

		set X = lnrenew.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
		set X = lnrenew.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
		set X = lnrenew.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	}

	if vobj(lnrenew,53).exists() do {

		set X = lnrenew.ambas if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("AMBAS", vRM) quit
		set X = lnrenew.mdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDT", vRM) quit
		if lnrenew.ptrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PTRM", vRM) quit
		if lnrenew.trm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRM", vRM) quit
	}

	if vobj(lnrenew,56).exists() do {

		set X = lnrenew.ppfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]PPFREQ",0) if 'vRM.get().isNull() do vdderr("PPFREQ", vRM) quit
		if '("01"[lnrenew.RCBIND) set vRM=$$^MSG(742,"L") do vdderr("RCBIND", vRM) quit
		set X = lnrenew.rdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RDT", vRM) quit
		if '("01"[lnrenew.RFMO) set vRM=$$^MSG(742,"L") do vdderr("RFMO", vRM) quit
		set X = lnrenew.rfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]RFREQ",0) if 'vRM.get().isNull() do vdderr("RFREQ", vRM) quit
		set X = lnrenew.rncal if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("RNCAL", vRM) quit
		set X = lnrenew.rnoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RNOFF", vRM) quit
		if '("01"[lnrenew.RPMO) set vRM=$$^MSG(742,"L") do vdderr("RPMO", vRM) quit
		set X = lnrenew.rrmo if 'X.isNull(),'Db.isDefined("UTBLRRMO","X") set vRM = $$^MSG(1485,X) do vdderr("RRMO", vRM) quit
		set X = lnrenew.uppen if 'X.isNull(),'Db.isDefined("UTBLLNPPN","X") set vRM = $$^MSG(1485,X) do vdderr("UPPEN", vRM) quit
	}

	if vobj(lnrenew,57).exists() do {

		set X = lnrenew.eirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.EIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.iacf if 'X.isNull(),'Db.isDefined("STBLIACF","X") set vRM = $$^MSG(1485,X) do vdderr("IACF", vRM) quit
		set X = lnrenew.ichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHND", vRM) quit
		set X = lnrenew.intmn if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMN", vRM) quit
		set X = lnrenew.intmx if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMX", vRM) quit
		set X = lnrenew.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.sch if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("SCH", vRM) quit
	}

	if vobj(lnrenew,58).exists() do {

		set X = lnrenew.pmtpi if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.PMTPI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(lnrenew,60).exists() do {

		set X = lnrenew.ichm if 'X.isNull(),'Db.isDefined("STBLICHM","X") set vRM = $$^MSG(1485,X) do vdderr("ICHM", vRM) quit
		if lnrenew.index.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX", vRM) quit
		set X = lnrenew.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
		set X = lnrenew.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
		set X = lnrenew.intmndc if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMNDC", vRM) quit
		set X = lnrenew.intmnic if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMNIC", vRM) quit
		set X = lnrenew.intmxdc if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMXDC", vRM) quit
		set X = lnrenew.intmxdy if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMXDY", vRM) quit
		set X = lnrenew.intmxic if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMXIC", vRM) quit
		set X = lnrenew.intmxiy if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("INTMXIY", vRM) quit
		set X = lnrenew.intoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("INTOFF", vRM) quit
		set X = lnrenew.intoffcl if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("INTOFFCL", vRM) quit
		if lnrenew.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
		set X = lnrenew.pcfre if 'X.isNull(),'Db.isDefined("USRFRE","X") set vRM = $$^MSG(1485,X) do vdderr("PCFRE", vRM) quit
		set X = lnrenew.pchm if 'X.isNull(),'Db.isDefined("STBLPCHM","X") set vRM = $$^MSG(1485,X) do vdderr("PCHM", vRM) quit
		set X = lnrenew.pchnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PCHND", vRM) quit
		set X = lnrenew.pcoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PCOFF", vRM) quit
		set X = lnrenew.pmnddc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.PMNDDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.pmndic if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.PMNDIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.pmxddc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.PMXDDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.pmxdic if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.PMXDIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.pmxpdc if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("PMXPDC", vRM) quit
		set X = lnrenew.pmxpic if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("PMXPIC", vRM) quit
		set X = lnrenew.prcb if 'X.isNull(),'Db.isDefined("STBLPRCB","X") set vRM = $$^MSG(1485,X) do vdderr("PRCB", vRM) quit
		set X = lnrenew.rafre if 'X.isNull(),'Db.isDefined("USRFRE","X") set vRM = $$^MSG(1485,X) do vdderr("RAFRE", vRM) quit
		if lnrenew.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
		if lnrenew.trmmx.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRMMX", vRM) quit
	}

	if vobj(lnrenew,64).exists() do {

		set X = lnrenew.dist1fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]DIST1FRE",0) if 'vRM.get().isNull() do vdderr("DIST1FRE", vRM) quit
		set X = lnrenew.dist1nd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DIST1ND", vRM) quit
		set X = lnrenew.dist2fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]DIST2FRE",0) if 'vRM.get().isNull() do vdderr("DIST2FRE", vRM) quit
		set X = lnrenew.dist3fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]DIST3FRE",0) if 'vRM.get().isNull() do vdderr("DIST3FRE", vRM) quit
		set X = lnrenew.dist4fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNRENEW]DIST4FRE",0) if 'vRM.get().isNull() do vdderr("DIST4FRE", vRM) quit
	}

	if vobj(lnrenew,71).exists() do {

		set X = lnrenew.eppenmet if 'X.isNull(),'Db.isDefined("UTBLLNPPN","X") set vRM = $$^MSG(1485,X) do vdderr("EPPENMET", vRM) quit
	}

	if vobj(lnrenew,101).exists() do {

		if lnrenew.bloff.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BLOFF", vRM) quit
		set X = lnrenew.fia if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.FIA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnrenew.fpa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNRENEW.FPA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}
	set X = lnrenew.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnrenew.roseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ROSEQ", vRM) quit

	if vobj(lnrenew).exists() ! 'vobj(lnrenew,"").order().isNull() do {

		if '("01"[lnrenew.CNVAPP) set vRM=$$^MSG(742,"L") do vdderr("CNVAPP", vRM) quit
		if '("01"[lnrenew.MROPT) set vRM=$$^MSG(742,"L") do vdderr("MROPT", vRM) quit
		set X = lnrenew.strqry if 'X.isNull(),'Db.isDefined("UTBLSTRQ","X") set vRM = $$^MSG(1485,X) do vdderr("STRQRY", vRM) quit
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNRENEW","MSG",979,"LNRENEW."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit



vkchged // Access key changed

	type public RecordLNRENEW lnrenew

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ROSEQ").exists() set vux("ROSEQ") = vx("ROSEQ")
	do vkey(1) set voldkey = lnrenew.cid_","_lnrenew.roseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnrenew.cid_","_lnrenew.roseq // Copy new keys into object
	type RecordLNRENEW vnewrec = lnrenew.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNRENEW",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNRENEW lnrenew

	if vux("CID").exists() set lnrenew.cid = vux("CID").piece("|",i)
	if vux("ROSEQ").exists() set lnrenew.roseq = vux("ROSEQ").piece("|",i)
	quit
