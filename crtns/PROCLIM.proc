PROCLIM	
	/*
	---- Revision History ------------------------------------------------
	
	08/11/06 - SmithCD - CR 22489 (20748)
		   Modified to use ORIGTM instead of %TRNMODE throughout. 
		   Improved to standards. Fixed possible undefined error on 
		   ACN variable by making it public in NONIBS section.
	
	06/15/06 - SPR - CR 21309
		   Reinstated CR 19502 change that got removed by CR 16667.
	
	02/09/06 - KELLYP - CR 19425
		   Modified NONIBS section to remove references to TFSCIFID
		   and TREASNAM, both of which have been obsoleted.
	
	09/01/05 - KumarSS - CR 16667
		   Changed the usage of deprecated methods and modified 
		   according to the standards.
	
	05/31/05 - SmithCD - CR 15902
		   Modified ACCUM section to protect the scope of %ProcessMode 
		   before setting it conditionally. W/o this change, %O gets 
		   reset when this procedure is called externally, causing 
		   ER to not get set in SETERR^DBSEXECU when an application 
		   error condition occurs, and processing continues as if no 
		   error occurred. Labeled sections called externally as 
		   public.
	
	This program handles the on line limit check during transaction
	processing and loan account creates/modifications if limit processing
	is being used.  In addition there are four extrinsic functions
	which will return total committed amount(exposure) and total
	outstanding balance (exposure).  These functions are ACCUM(ACN),
	LOAN(RELCID), DEPOSIT(RELCID), EXPOS(ACN).
	
	The following arrays are built in this program
	
	LIMTYPE(SYS,TYPE)=Committed Exposure|Outstanding Exposure
	LIMTYPE(SYS,TYPE,ACCOUNT)=Committed Exposure|Outstanding Exposure|TOTAL 
				  COLLATERAL|MULTIPLE LOAN INDICATOR
	LIMGRP(GRP)=Committed Exposure|Outstanding Exposure
	CUS=Committed Exposure|Outstanding Exposure
	
	The keys represent the following
	
	SYS:  System from which the product type has been generated
	TYPE:  IBS or Non IBS product type
	ACCOUNT: IBS Account or Non IBS Record ID
	*/
	
	quit


public	INIT	// Initialize

	type public Number NONIBS

	// Non IBS transaction
	if NONIBS.get()'="" quit
	
	do IBS
	
	quit


IBS	// IBS Transaction
	
	type public Number CID,COMAMT,ORIGTM,OUTBAL
	type public String TMP,TMP1
	
	type Number ACN,RELCID
	type String SYS

	// Customer Number
	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	set ACN=acn.acn

	// New loan account
	if ORIGTM.get(),%ProcessMode.get()=0 do {

		// This is the related account
		set RELCID=CID
		set TMP=$$LOAN(RELCID,0)		
		set SYS="IBS"

		if COMAMT!(OUTBAL) do ARRAY
		}
	
	set TMP1=$$ACCUM(ACN)

	do CHECK
 	do LEGAL

	quit 


public	NONIBS(String CUSID,		// Treasury Customer Unique Name
	       String INTPROD,		// Integrated Product Type
	       Number RECID,		// Related Account Number
	       Number COMEXP,		// Committed Exposure
	       Date MDT,		// Maturity Date
	       String CRCD,		// Currency Code
	       String SYSTEM,		// System Name
	       Number UPD)		// Updatable/Non-Updatable TFS transaction

	/*
	NON IBS Transactions
	
	This subprocedure is called via a remote procedure call (^MRPC062)
	for processing the on line limit check for non IBS transactions
	*/

	type public Number ACN,COMAMT,NONIBS,ORIGTM,OUTBAL,OUTEXP
	type public String RTNSTR,TMP,TYPE
	
	type Number EXPOWGT
	type String SYS
	
	// Non IBS transaction
	set NONIBS=1

	// Integrated product type not defined
	if INTPROD.get()="" quit RTNSTR.get()

	// No CIF number in index file
	if ACN.get()="" quit RTNSTR.get()

	do INIT

	if UPD=1 do UPDATE(COMEXP,OUTEXP,)
	set TMP=$$ACCUM(ACN)
	
	/*
	If we have no exposure records for the customer and this is a
	non-updatable TFS transaction check for exposure against this deal.
	*/

	if UPD=0,TMP.piece("|",1)=0 do {

		set OUTBAL=OUTEXP
		set COMAMT=COMEXP
		set SYS=SYSTEM

		type RecordUTBLINTPROD utblintprod=Db.getRecord("UTBLINTPROD","SYS=:SYS,TYPE=:TYPE",1)

		set EXPOWGT=utblintprod.expoweight
		
		// Exposure weighting calculation
		if 'EXPOWGT.isNull() do {

			set EXPOWGT=EXPOWGT/100
			set OUTBAL=$$^SCARND(OUTBAL*EXPOWGT,,,CRCD)
			set COMAMT=$$^SCARND(COMAMT*EXPOWGT,,,CRCD)
			}
	
		/*
		Convert outstanding balance and commitment amount to system 
		base currency code.
		*/

		if 'CRCD.isNull(),CRCD'=%SystemCurrency do CRCDEXC
		if (COMEXP!(OUTEXP))&(ORIGTM.get()!(%ProcessMode'=2)) do ARRAY
		}
	
	do CHECK
	do LEGAL

	// Return string to MRPC062
	quit RTNSTR.get()


public	ACCUM(Number ACN)	// Customer Number

	/*
	Get exposure records based on customer
	
	This extrinsic accumulates committed and oustanding exposures by limit
	product type, limit product group, and customer.  It will also return
	total committed and outstanding exposure.
	*/

	type public Number COMAMT,ORIGTM,OUTBAL,RELCID,TYPE
	type public String TMP
	
	type String CLS,SYS,TOT

	/*
        Ignore warning in this case b/c the "right" way to fix it is to accept
        %ProcessMode as a parameter to this section, but since it is called
        from several different places all those elements would also have to
        be modified to pass it.
        */
        
        #ACCEPT Date=06/15/06; Pgm=SmithCD; CR=21309
        if '%ProcessMode.data() new %ProcessMode set %ProcessMode=2

	
	set SYS=""
	set TOT="0|0"
	set TYPE=0

	// Related account number
	type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
	
	if rs.isEmpty() quit TOT
	
	while rs.next() do {

		set RELCID=rs.getCol("CID") 
		
		type RecordACN acn=Db.getRecord("ACN","CID=:RELCID",1)

		set CLS=acn.cls
		
		if CLS="L" set TMP=$$LOAN(RELCID,0)		
		if CLS="D" set TMP=$$DEPOSIT(RELCID,0)
		if CLS'="D",CLS'="L" set TMP="0|0"

		set TOT.piece("|",1)=TOT.piece("|",1)+TMP.piece("|",1)
		set TOT.piece("|",2)=TOT.piece("|",2)+TMP.piece("|",2)

		if (COMAMT!(OUTBAL))&(ORIGTM.get()!(%ProcessMode'=2)) do ARRAY
		}

	set TMP=$$EXPOS(ACN)

	set TOT.piece("|",1)=TOT.piece("|",1)+TMP.piece("|",1)
	set TOT.piece("|",2)=TOT.piece("|",2)+TMP.piece("|",2)

	quit TOT


public	LOAN(Number RELCID,		// Related account number
	     Number CTL)		// Loan account status

	// Loan account data

	type public Boolean MLN
	type public Number COMAMT,OUTBAL,TYPE
	type public String SYS
	type Boolean CPF
	type Date MDT
	type Number ACN,CCL,COLL,EXPOWGT,PRIME,STAT,TOTCOL
	type String CRCD,GRP
	
	set (ACN,CCL,COLL,COMAMT,EXPOWGT,OUTBAL,PRIME,STAT,TOTCOL,TYPE)=0
		
	// Loan account status
	if CTL=1 do {

		type RecordLN ln=Db.getRecord("LN","CID=:RELCID",1)

		set ACN=ln.acn
		}
	
	type RecordLN ln=Db.getRecord("LN","CID=:RELCID",1)
	
	set PRIME=ln.acn		// PRIMARY CIF
	
	if ACN=0 set ACN=PRIME
	if PRIME'=ACN quit COMAMT_"|"_OUTBAL

	// System is always IBS for IBS loan accounts
	set SYS="IBS"
		
	set STAT=ln.stat

	// Loan closed
	if STAT=4 quit "0|0"

	// Commercial commitment link
	set CCL=ln.ccl

	// Commitment processing flag
	set CPF=ln.cpf

	// Currency code
	set CRCD=ln.crcd

	// Collateral record
	set COLL=ln.coll

	// Product Group
	set GRP=ln.grp
	if GRP="CBL" quit "0|0"
	
	// Multiple loan indicator for collateral
	if COLL'="" do {
		
		type RecordCOL col=Db.getRecord("COL","COLL=:COLL",1)

		set MLN=col.mln
		}

	// Maturity date
	set MDT=ln.mdt

	// Total collateral
	set TOTCOL=ln.totcol

	// Product Type
	set TYPE=ln.type

	// Expired commitment
	if CPF,MDT'="",MDT<%SystemDate quit "0|0"
	
	set OUTBAL=ln.balcmp

	// Negative loan balances are not accumulated
	if OUTBAL<0 set OUTBAL=0

	// Commitment amount defined on commitment account
	if CCL'="" set COMAMT=""
	else  set COMAMT=ln.crlmt

	// Outstanding balance can't be > than committed amount
	if COMAMT'="",OUTBAL>COMAMT set COMAMT=OUTBAL
	
	// Exposure weighting calculation
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE",1)

	set EXPOWGT=prodctl.expoweight
	
	if 'EXPOWGT.isNull() do {

		set EXPOWGT=EXPOWGT/100
		set OUTBAL=$$^SCARND(OUTBAL*EXPOWGT,,,CRCD)
		set COMAMT=$$^SCARND(COMAMT*EXPOWGT,,,CRCD)
		}
	
	/*
	Convert outstanding balance and commitment amounts to system base
	currency code.
	*/

	if 'CRCD.isNull(),CRCD'=%SystemCurrency do CRCDEXC

	quit COMAMT_"|"_OUTBAL


public	DEPOSIT(Number RELCID,		// Related account number
		Number CTL)		// Deposit account status
	
	// Deposit account data
	
	type public Number COL,COMAMT,OUTBAL,TYPE
	type public String SYS
	type Number ACN,BAL,EXPOWGT,PRIME
	type String CRCD,GRP

	set (ACN,COMAMT,OUTBAL)=0
	
	if CTL=1 do {
		
		type RecordDEP dep=Db.getRecord("DEP","CID=:RELCID",1)
		
		set ACN=dep.acn
		}
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:RELCID",1)

	// Primary CIF
	set PRIME=dep.acn

	if ACN=0 set ACN=PRIME
	if PRIME'=ACN quit COMAMT_"|"_OUTBAL
	
	// System is always IBS for IBS deposit accounts
	set SYS="IBS"
	
	// Balance (COL is collected balance; may be defined in DEPPO)
	if COL.get()="" set BAL=dep.bal
	else  set BAL=COL

	// Balance must be less than zero
	if BAL'<0 quit "0|0"

	// Product Group
	set GRP=dep.grp
	if GRP="DBD" quit "0|0"

	// Currency code
	set CRCD=dep.crcd
	if CRCD="" set CRCD=%SystemCurrency

	// Product Type
	set TYPE=dep.type

	// Commitment amount (authorized overdraft limit)
	set COMAMT=dep.odlim

	// Outstanding balance (absolute value of negative balance)
	set OUTBAL=-BAL

	// Outstanding balance can't be > than committed amount
	if OUTBAL>COMAMT set COMAMT=OUTBAL
	
	// Exposure weighting calculation - percentage
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE",1)

	set EXPOWGT=prodctl.expoweight
	
	if 'EXPOWGT.isNull() do {

		set EXPOWGT=EXPOWGT/100
		set OUTBAL=$$^SCARND(OUTBAL*EXPOWGT,,,CRCD)
		set COMAMT=$$^SCARND(COMAMT*EXPOWGT,,,CRCD)
		}
	
	/*
	Convert outstanding balance and commitment amount to system base
	currency code.
	*/

	if 'CRCD.isNull(),CRCD'=%SystemCurrency do CRCDEXC

	quit COMAMT_"|"_OUTBAL


EXPOS(Number ACN)		// Customer number

	// ITS/TFS Exposure data
	
	type public Number ORIGTM,TYPE
	
	type Number COMAMT,EXPOWGT,RECID,OUTBAL
	type String CRCD,SYS,TOTAL
	
	set (COMAMT,OUTBAL)=0
	set TOTAL="0|0"

	type ResultSet rs=Db.select("INTPROD,RECID,SYS,COMEXP,CRCD,OUTEXP","EXPOS","ACN=:ACN")

	if rs.isEmpty() quit TOTAL

	while rs.next() do {
		
		// Non IBS Product Type
		set TYPE=rs.getCol("INTPROD")

		// Record ID
		set RECID=rs.getCol("RECID")

		set SYS=rs.getCol("SYS")

		// Committed amount
		set COMAMT=rs.getCol("COMEXP")

		// Currrency Code
		set CRCD=rs.getCol("CRCD")

		// Outstanding Balance
		set OUTBAL=rs.getCol("OUTEXP")
	
		type RecordUTBLINTPROD utblintprod=Db.getRecord("UTBLINTPROD","SYS=:SYS,TYPE=:TYPE",1)

		set EXPOWGT=utblintprod.expoweight
	
		// Exposure weighting calculation
		if 'EXPOWGT.isNull() do {

			set EXPOWGT=EXPOWGT/100
			set OUTBAL=$$^SCARND(OUTBAL*EXPOWGT,,,CRCD)
			set COMAMT=$$^SCARND(COMAMT*EXPOWGT,,,CRCD)
			}
	
		/*
		Convert outstanding balance and commitment amount to system base
		currency code.
		*/
	
		if 'CRCD.isNull(),CRCD'=%SystemCurrency do CRCDEXC

		set TOTAL.piece("|",1)=TOTAL.piece("|",1)+COMAMT
		set TOTAL.piece("|",2)=TOTAL.piece("|",2)+OUTBAL

		if (COMAMT!(OUTBAL))&(ORIGTM.get()!(%ProcessMode'=2)) do ARRAY
		}

	quit TOTAL


ARRAY	//

	/*
	Store commitment amount and outstanding balance in LIMTYPE, LIMGRP
	and CUS arrays.  This allows storing by account, limit product type
	limit product group, and customer.
	*/
	
	type public Boolean MLN
	type public Date MDT
	type public Number ACCOUNT,COMAMT,LEGAL,OUTBAL,RECID,RELCID,TOTCOL,TYPE
	type public String CUS,LIMGRP(),LIMTYPE(),SYS

	// Legal lending limit
	if LEGAL.get()'="" do LEGARY quit

	// Defined for on line reporting
	if 'RELCID.get().isNull() set ACCOUNT=RELCID
	else  set ACCOUNT=RECID
	
	set LIMTYPE(SYS,TYPE,ACCOUNT).piece("|",3)=TOTCOL.get()
	set LIMTYPE(SYS,TYPE,ACCOUNT).piece("|",4)=MLN.get()
	set LIMTYPE(SYS,TYPE,ACCOUNT).piece("|",5)=MDT.get()

	if COMAMT>0 do {

		set LIMTYPE(SYS,TYPE,ACCOUNT).piece("|",1)=COMAMT
		set LIMTYPE(SYS,TYPE).piece("|",1)=LIMTYPE(SYS,TYPE).get().piece("|",1)+COMAMT

		type ResultSet rs=Db.select("GRPLIM","UTBLPLANTLIM","TYPELIM=:TYPE AND SYS=:SYS")

		if rs.isEmpty() quit

		while rs.next() set LIMGRP(rs.getCol("GRPLIM")).piece("|",1)=LIMGRP(rs.getCol("GRPLIM")).get().piece("|",1)+COMAMT

		set CUS.piece("|",1)=CUS.get().piece("|",1)+COMAMT
		}

	if OUTBAL>0 do {

		set LIMTYPE(SYS,TYPE,ACCOUNT).piece("|",2)=OUTBAL
		set LIMTYPE(SYS,TYPE).piece("|",2)=LIMTYPE(SYS,TYPE).get().piece("|",2)+OUTBAL

		type ResultSet rs=Db.select("GRPLIM","UTBLPLANTLIM","TYPELIM=:TYPE AND SYS=:SYS")

		if rs.isEmpty() quit

		while rs.next() set LIMGRP(rs.getCol("GRPLIM")).piece("|",2)=LIMGRP(rs.getCol("GRPLIM")).get().piece("|",2)+OUTBAL

		set CUS.piece("|",2)=CUS.get().piece("|",2)+OUTBAL
		}

	quit 


LEGARY	//
	
	/*
	Store commitment amount and outstanding balance in CUS array for
	legal lending check.  Legal lending is reported against cutomer
	limits only.
	*/
	
	type public Number COMAMT,OUTBAL
	type public String CUS
	
	if COMAMT>0 set CUS.piece("|",1)=CUS.get().piece("|",1)+COMAMT
	if OUTBAL>0 set CUS.piece("|",2)=CUS.get().piece("|",2)+OUTBAL

	quit 


CHECK	//
	
	/*
	This subprocedure checks product type, product group, and customer
	limits. This subprocedure is called from IBS and NONIBS.
	
	Please note the product type limit amounts do not have to equal group
	limit amounts when summed, and group limit amounts do not have to equal
	customer limit amount when summed!
	
	TYPELIM: Product type limit for the customer
	TYPEAMT: Limit amount for the product type limit
	GRPLIM: Product group limit for the customer
	GRPAMT: Limit amount for the product group limit
	CUSAMT: Overall customer limit amount for the customer
	*/
	
	type public Number ACN,COMCUS,COMGRP,COMPRD,CUSAMT,GRPAMT,OUTCUS,OUTGRP,OUTPRD
	type public String CUS,LIMGRP(),LIMTYPE()
	type String GRPLIM,SYS,TYPELIM
	type Number TYPEAMT
	
	type ResultSet rscifgrplim=Db.select("GRPLIM,GRPAMT","CIFGRPLIM","ACN=:ACN")

	if rscifgrplim.isEmpty() quit

	while rscifgrplim.next() do {

		set GRPLIM=rscifgrplim.getCol("GRPLIM")

		type ResultSet rsciftypelim=Db.select("SYS,TYPELIM,TYPEAMT","CIFTYPELIM","ACN=:ACN AND GRPLIM=:GRPLIM")

		if rsciftypelim.isEmpty() quit

		while rsciftypelim.next() do {

			set SYS=rsciftypelim.getCol("SYS")
			set TYPELIM=rsciftypelim.getCol("TYPELIM")
			set TYPEAMT=rsciftypelim.getCol("TYPEAMT")

			// Defined for override purposes
			set COMPRD=TYPEAMT
			set OUTPRD=TYPEAMT

			if 'COMPRD.isNull(),COMPRD<LIMTYPE(SYS,TYPELIM).get().piece("|",1) do MSG("COMPRD",COMPRD,TYPELIM)
			if 'OUTPRD.isNull(),OUTPRD<LIMTYPE(SYS,TYPELIM).get().piece("|",2) do MSG("OUTPRD",OUTPRD,TYPELIM)
			}

		set GRPAMT=rscifgrplim.getCol("GRPAMT")

		set COMGRP=GRPAMT
		set OUTGRP=GRPAMT   // DEFINED FOR OVERRIDE PURPOSES

		if 'COMGRP.isNull(),GRPAMT<LIMGRP(GRPLIM).get().piece("|",1) do MSG("COMGRP",COMGRP,GRPLIM)
		if 'OUTGRP.isNull(),GRPAMT<LIMGRP(GRPLIM).get().piece("|",2) do MSG("OUTGRP",OUTGRP,GRPLIM)
		}

	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN",1)

	set CUSAMT=cif.cusamt
	
	set COMCUS=CUSAMT
	set OUTCUS=CUSAMT    // DEFINED FOR OVERRIDE PURPOSES

	if 'COMCUS.isNull(),COMCUS<CUS.get().piece("|",1) do MSG("COMCUS",COMCUS,ACN)
	if 'OUTCUS.isNull(),OUTCUS<CUS.get().piece("|",2) do MSG("OUTCUS",OUTCUS,ACN)

	do LEGCHK

	quit 


LEGCHK	// Legal lending limit check for customer
	
	type public Number ACN,COMLEG,LEGAMT,OUTLEG,PCTCAP,TOTCAP
	type public String CUS
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	
	set TOTCAP=cuvar.totcap         // TOTAL CAPITAL
	set PCTCAP=cuvar.pctcap/100     // % OF TOTAL CAPITAL

	// Legal lending limit
	if TOTCAP.isNull()!(PCTCAP.isNull()) set LEGAMT=0
	else  set LEGAMT=$$^SCARND(TOTCAP*PCTCAP,,,%SystemCurrency)

	// Defined for override purposes
	set COMLEG=LEGAMT
	set OUTLEG=LEGAMT
	
	if 'COMLEG.isNull(),COMLEG<CUS.get().piece("|",1) do MSG("COMLEG",COMLEG,ACN)
	if 'OUTLEG.isNull(),OUTLEG<CUS.get().piece("|",2) do MSG("OUTLEG",OUTLEG,ACN)

	quit 


LEGAL	//
	
	/*
	This subprocedure determines the head and members of a customer's 
	household base.  This is done for legal lending limits checking.
	*/
	
	type public Boolean HHST
	type public Number ACN,HEADACN,LEGAL
	type public String HHTYP
	
	set LEGAL=1

	type ResultSet rscifhh=Db.select("HHTYP,HEADACN,HHST","CIFHH","ACN=:ACN")
	while rscifhh.next() do {
		
		set HHTYP=rscifhh.getCol("HHTYP")
		set HEADACN=rscifhh.getCol("HEADACN")
		set HHST=rscifhh.getCol("HHST")
		
		if HHST do HEAD
		if 'HHST!(HHST.isNull()) do MEMBER
		}

	quit 


HEAD	// Head of household for household type
	
	type public Number ACN
	type public String HHTYP,TMP()
	type Number MACN

	type ResultSet rs=Db.select("MACN","CIFHH0","ACN=:ACN AND HHTYP=:HHTYP")
	
	while rs.next() do {

		set MACN=rs.getCol("MACN")
		set TMP=$$ACCUM(MACN)

		do LEGCHK
		}

	quit 


MEMBER	// Member of household

	type public Number HEADACN
	type public String TMP()

	set TMP=$$ACCUM(HEADACN)
	do LEGCHK

	quit 


public UPDATE(Number COMEXP,	// Committed Exposure
	      Number OUTEXP,	// OUtstanding Exposure
	      Boolean CTL)	// Flag that indicates that EXPOS record does not need to be updated here	
	
	// This subprocedure updates exposure tables for non-ibs transactions

	
	type public Date MDT
	type public Number ACN,COMAMT,CRCD,OUTBAL,RECID
	type public String INTPROD,SYSTEM
	type Boolean GOVT
	type Number TOTCOM,TOTOUT
	type String PCNTRY,SIC

	if CTL.get().isNull() do {
		type RecordEXPOS expos=Db.getRecord("EXPOS","ACN=:ACN,SYS=:SYSTEM,INTPROD=:INTPROD,RECID=:RECID",1)
	
		if expos.getMode() do {

			set expos.comexp=(expos.comexp+COMEXP.get()).roundDec()
			set expos.outexp=(expos.outexp+OUTEXP.get()).roundDec()
			}
		else  do {
		
			set expos.acn=ACN
			set expos.sys=SYSTEM
			set expos.intprod=INTPROD
			set expos.recid=RECID
			set expos.comexp=COMEXP.get().roundDec()
			set expos.outexp=OUTEXP.get().roundDec()
			set expos.crcd=%SystemCurrency
			set expos.mdt=MDT
			}

		do expos.save()			
		}	
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")

	set PCNTRY=cif.pcntry
	set SIC=cif.sic
	set GOVT=cif.govt
	
	if CRCD.isNull() set CRCD=%SystemCurrency
	if CRCD'=%SystemCurrency do {

		set COMAMT=COMEXP
		set OUTBAL=OUTEXP
		
		do CRCDEXC
		
		set COMEXP=COMAMT
		set OUTEXP=OUTBAL
		}
	
	// Country exposure update
	if 'PCNTRY.isNull() do {
		
		type RecordEXPCNTRY expcntry=Db.getRecord("EXPCNTRY","CNTRY=:PCNTRY",1)

		if expcntry.getMode() do {

			set expcntry.totcomexp=(expcntry.totcomexp+COMEXP.get()).roundDec()
			set expcntry.totoutexp=(expcntry.totoutexp+OUTEXP.get()).roundDec()
			}
		else  do {
			
			set expcntry.cntry=PCNTRY
			set expcntry.totcomexp=COMEXP.get().roundDec()
			set expcntry.totoutexp=OUTEXP.get().roundDec()
			}

		do expcntry.save()
		}


	// Industry exposure update
	if 'SIC.isNull() do {
		
		type RecordEXPIND expind=Db.getRecord("EXPIND","IND=:SIC",1)

		if expind.getMode() do {
		
			set expind.totcomexp=(expind.totcomexp+COMEXP.get()).roundDec()
			set expind.totoutexp=(expind.totoutexp+OUTEXP.get()).roundDec()
			}
		else  do {
			
			set expind.ind=SIC
			set expind.totcomexp=COMEXP.get().roundDec()
			set expind.totoutexp=OUTEXP.get().roundDec()
			}

		do expind.save()
		}
	
	// Sovereign government exposure update
	if 'GOVT.isNull() do {
	
		type RecordEXPCNSOV expcnsov=Db.getRecord("EXPCNSOV","CNTRY=:GOVT",1)

		if expcnsov.getMode() do {
			
			set expcnsov.totcomexp=(expcnsov.totcomexp+COMEXP.get()).roundDec()
			set expcnsov.totoutexp=(expcnsov.totoutexp+OUTEXP.get()).roundDec()
			}
		else  do {
			
			set expcnsov.cntry=GOVT
			set expcnsov.totcomexp=COMEXP.get().roundDec()
			set expcnsov.totoutexp=OUTEXP.get().roundDec()
			}

		do expcnsov.save()
		}

	quit 


TYPES	//
	
	/*
	Stores the product types from IBS,ITS,& TFS into an array.
	This array allows the user to view all product types in UTBLPLANGLIM.
	*/

	type public String DESC,SYS,TMP(),TYPE,X

	set TYPE=""
	set SYS=X                              // Variable passed from UTBL screen

	kill TMP

	if SYS="IBS" do {

		type ResultSet rs=Db.select("TYPE,DES","PRODCTL")

		while rs.next() do {

			set TYPE=rs.getCol("TYPE")
			set DESC=rs.getCol("DES")

			set TMP(TYPE)=DESC
			}
		}
	
	if SYS="TFS" do {

		type ResultSet rs=Db.select("TYPE,DESC","UTBLINTPROD","SYS=:SYS")

		while rs.next() do {

			set TYPE=rs.getCol("TYPE")
			set DESC=rs.getCol("DESC")
			set TMP(TYPE)=DESC
			}
		}
	
	if SYS="ITS" do {

		type ResultSet rs=Db.select("TYPE,DESC","UTBLINTPROD","SYS=:SYS")

		while rs.next() do {

			set TYPE=rs.getCol("TYPE")
			set DESC=rs.getCol("DESC")
			set TMP(TYPE)=DESC
			}
		}

	quit 


MSG(String STR,			// Integrity Override
    Number AMT,			// Amount
    Number CID)			// Account Number

	/*
	Determines override to be returned via the teller posting screen,
	and what message will be returned to the non ibs system.
	*/
	
	type public Number NONIBS,ORIGTM,OVR()
	type public String RTNSTR

	// Integrity override
	if 'ORIGTM.get(),(NONIBS.get()="") do INTEG(STR) quit
	
	// IBS Posting Transaction
	if NONIBS.get().isNull() set OVR(CID,"OVR",STR)=AMT quit

	// Non-IBS Transactions
	if RTNSTR.get()="" set RTNSTR=STR quit
	else  set RTNSTR=RTNSTR_","_STR

	quit 


INTEG(String STR)		// Integrity Override
	
	//  Determine integrity override to be returned
	
	type public Boolean ER
	
	// Committed Amount > Product Type Limit
	if STR="COMPRD" do Runtime.setErrXBAD("CIF","COMPRD") quit:ER

	// Committed Amount > Product Group Limit
	if STR="COMGRP" do Runtime.setErrXBAD("CIF","COMGRP") quit:ER

	// Committed Amount > Customer Limit
	if STR="COMCUS" do Runtime.setErrXBAD("CIF","COMCUS") quit:ER

	// Committed Amount > Legal Lending Limit
	if STR="COMLEG" do Runtime.setErrXBAD("CIF","COMLEG") quit:ER

	quit 


CRCDEXC	// Currency Code Exchange Utility
	
	type public Number COMAMT,EXCAMT,OUTBAL
	type public String CRCD

	if OUTBAL'=0,'OUTBAL.isNull() do EXC^CRCDUTL(%SystemCurrency,CRCD,OUTBAL,0,2,11,,,1)
	set OUTBAL=EXCAMT.get()
	if COMAMT'=0,'COMAMT.isNull() do EXC^CRCDUTL(%SystemCurrency,CRCD,COMAMT,0,2,11,,,1)
	set COMAMT=EXCAMT.get()

	quit 


public EXPREC(Number ACN,	// Customer Number
	      String SYS,	// System Name
	      String INTPROD,	// Integrated Product type
	      Number RECID)	// Recoord ID

	/*
	Record Exposure amounts by Record Id for non IBS Accounts. Specifically
	used for Legal Lending limit detail and summary report.
	*/
	
	type public Number COMAMT,OUTBAL
	type public String CRCD
	type Number EXPOWGT
	type String TOT
	
	type RecordEXPOS expos=Db.getRecord("EXPOS","ACN=:ACN,SYS=:SYS,INTPROD=:INTPROD,RECID=:RECID",1)
	
	set COMAMT=expos.comexp
	set CRCD=expos.crcd
	set OUTBAL=expos.outexp
	
	type RecordUTBLINTPROD utblintprod=Db.getRecord("UTBLINTPROD","SYS=:SYS,TYPE=:INTPROD",1)
	
	set EXPOWGT=utblintprod.expoweight
	
	// Exposure weighting calculation
  	if 'EXPOWGT.isNull() do {
  	
		set EXPOWGT=EXPOWGT/100
		set OUTBAL=$$^SCARND(OUTBAL*EXPOWGT,,,CRCD)
		set COMAMT=$$^SCARND(COMAMT*EXPOWGT,,,CRCD)
		}

	if 'CRCD.isNull(),CRCD'=%SystemCurrency do CRCDEXC
	
	set TOT.piece("|",1)=COMAMT
	set TOT.piece("|",2)=OUTBAL

	quit TOT

vSIG()	quit "60488^52448^Chad Smith^21993"	// Signature - LTD^TIME^USER^SIZE
