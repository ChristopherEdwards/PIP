V01S042(Number %ProcessMode,RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())   //PBS - LN - SID= <LNEPPM> Early Payoff Penalty Methods 
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:29 - joynerd
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fUTBLLNP.exists() set fUTBLLNP = Class.new("RecordUTBLLNPPN")
  if 'fLNPPN(1).exists() set fLNPPN(1) = Class.new("RecordLNEPPMS")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="LNEPPM",VPGM=$T(+0),VSNAME="Early Payoff Penalty Methods "
 set VFSN("LNEPPMS")="zfLNPPN",VFSN("UTBLLNPPN")="zfUTBLLNP"
 set vPSL=1
 set KEYS(1)=fUTBLLNP.METHOD
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=11 do VPR(.fUTBLLNP,.fLNPPN()),VDA1(.fUTBLLNP,.fLNPPN()),V5^DBSPNT quit

 if '%ProcessMode do VNEW(.fUTBLLNP,.fLNPPN()),VPR(.fUTBLLNP,.fLNPPN()),VDA1(.fUTBLLNP,.fLNPPN())
 if %ProcessMode do VLOD(.fUTBLLNP,.fLNPPN()) quit:$G(ER)  do VPR(.fUTBLLNP,.fLNPPN()),VDA1(.fUTBLLNP,.fLNPPN())

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLLNP,.fLNPPN())
 type Number ptr
 set ptr=""
 for  set ptr = fLNPPN(ptr).order() quit:ptr.isNull()  do {
     if fLNPPN(ptr).PAYMENTS="" kill fLNPPN(ptr)
     }
	quit


VNEW(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) // Initialize arrays if %O=0
 
 do VDEF(.fUTBLLNP,.fLNPPN())
 do VLOD(.fUTBLLNP,.fLNPPN())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) // Load data from disc - %O = (1-5)
 if '$D(%REPEAT) set %REPEAT=11
 if '$D(%MODS) set %MODS=1
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) // Display screen prompts
 set VO="20||13|"
 set VO(0)="|0"
 set VO(1)=$C(1,6,8,0,0,0,0,0,0,0)_"01T Method:"
 set VO(2)=$C(1,56,12,1,0,0,0,0,0,0)_"01T Start Date:"
 set VO(3)=$C(2,1,13,1,0,0,0,0,0,0)_"01T Description:"
 set VO(4)=$C(2,56,12,0,0,0,0,0,0,0)_"01TEnding Date:"
 set VO(5)=$C(4,20,40,1,0,0,0,0,0,0)_"01T Early Payoff Penalty Method Definition "
 set VO(6)=$C(5,6,13,0,0,0,0,0,0,0)_"01TPenalty Days:"
 set VO(7)=$C(5,44,11,1,0,0,0,0,0,0)_"01T Tier Type:"
 set VO(8)=$C(6,6,13,0,0,0,0,0,0,0)_"01TNet of Trans:"
 set VO(9)=$C(6,41,14,0,0,0,0,0,0,0)_"01TLoan Fee Type:"
 set VO(10)=$C(9,3,7,2,0,0,0,0,0,0)_"01TPayment"
 set VO(11)=$C(9,11,2,1,0,0,0,0,0,0)_"01Tor"
 set VO(12)=$C(9,18,6,2,0,0,0,0,0,0)_"01TDollar"
 set VO(13)=$C(9,30,4,1,0,0,0,0,0,0)_"01T Or "
 set VO(14)=$C(9,37,13,2,0,0,0,0,0,0)_"01TPercentage & "
 set VO(15)=$C(9,50,5,2,0,0,0,0,0,0)_"01TBase "
 set VO(16)=$C(9,56,4,1,0,0,0,0,0,0)_"01T Or "
 set VO(17)=$C(9,62,6,2,0,0,0,0,0,0)_"01TCustom"
 set VO(18)=$C(10,3,11,2,0,0,0,0,0,0)_"01TTerm % Tier"
 set VO(19)=$C(10,18,7,2,0,0,0,0,0,0)_"01TAmount "
 set VO(20)=$C(10,62,7,2,0,0,0,0,0,0)_"01TRoutine"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())  // Display screen data
 new V
 //
 set VO="28|21|13|"
 set VO(21)=$C(1,15,12,2,0,0,0,0,0,0)_"01T"_$E(fUTBLLNP.METHOD,1,12)
 set VO(22)=$C(1,69,10,2,0,0,0,0,0,0)_"00D"_$$DAT^%ZM(fUTBLLNP.START)
 set VO(23)=$C(2,15,40,2,0,0,0,0,0,0)_"00T"_$E(fUTBLLNP.DESC,1,40)
 set VO(24)=$C(2,69,10,2,0,0,0,0,0,0)_"00D"_$$DAT^%ZM(fUTBLLNP.STOP)
 set VO(25)=$C(5,20,4,2,0,0,0,0,0,0)_"00N"_fUTBLLNP.PD
 set VO(26)=$C(5,56,1,2,0,0,0,0,0,0)_"00T"_$E(fUTBLLNP.TIERTYPE,1,1)
 set VO(27)=$C(6,20,1,2,0,0,0,0,0,0)_"00L"_$S(fUTBLLNP.NET:"Y",1:"N")
 set VO(28)=$C(6,56,12,2,0,0,0,0,0,0)_"00T"_$E(fUTBLLNP.FEETYP,1,12)
  
 set:'%MODS.exists() %MODS=1 set VX=VO.piece("|",2)+7,DY=12 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLLNP,.fLNPPN())
 set VO.piece("|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())  // Display data %REPEAT times
 //instantiate new object if necessary
  #ACCEPT;DATE=08/08/06; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEPRECATED
  if 'fLNPPN(I).getPointer() do {
     set fLNPPN(I)=Class.new("RecordLNEPPMS","$G(KEYS(1))")
     }
 set VO(VX+1)=$C(DY,3,9,2,0,0,0,0,0,0)_"00N"_$S(fLNPPN(I).PAYMENTS="":"",1:$J(fLNPPN(I).PAYMENTS,0,5))
 set V=$S(fLNPPN(I).AMOUNT="":"",1:$J(fLNPPN(I).AMOUNT,0,2)) set VO(VX+2)=$C(DY,18,12,2,0,0,0,0,0,0)_"00$"_$S(fLNPPN(I).AMOUNT="":"",1:$J(fLNPPN(I).AMOUNT,0,2))
 set V=$S(fLNPPN(I).PERCENT="":"",1:$J(fLNPPN(I).PERCENT,0,5)) set VO(VX+3)=$C(DY,37,9,2,0,0,0,0,0,0)_"00N"_$S(fLNPPN(I).PERCENT="":"",1:$J(fLNPPN(I).PERCENT,0,5))
 set VO(VX+4)=$C(DY,51,1,2,0,0,0,0,0,0)_"00N"_fLNPPN(I).BASE
 set VO(VX+5)=$C(DY,62,17,2,0,0,0,0,0,0)_"00T"_$E(fLNPPN(I).PGM,1,17)
 set DY=DY+1,VX=VX+5
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=1
 set %MODOFF=8,%MOD=5,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=1,VPB=11+%REPEAT,BLKSIZ=(48*%REPEAT)+90,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLLNPPN,LNEPPMS"
 set OLNTB=VPB*1000
 
 set VFSN("LNEPPMS")="zfLNPPN",VFSN("UTBLLNPPN")="zfUTBLLNP"
 //
 for I=14:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(0,14,12)_"21T12401|1|[UTBLLNPPN]METHOD"
 set %TAB(2)=$C(0,68,10)_"01D12402||[UTBLLNPPN]START|||do VP1^V01S042(.fUTBLLNP,.fLNPPN)"
 set %TAB(3)=$C(1,14,40)_"01T12401||[UTBLLNPPN]DESC"
 set %TAB(4)=$C(1,68,10)_"00D12403||[UTBLLNPPN]STOP|||do VP2^V01S042(.fUTBLLNP,.fLNPPN)"
 set %TAB(5)=$C(4,19,4)_"00N12408||[UTBLLNPPN]PD"
 set %TAB(6)=$C(4,55,1)_"01T12405||[UTBLLNPPN]TIERTYPE|[STBLLNPPNTIE]||do VP3^V01S042(.fUTBLLNP,.fLNPPN)"
 set %TAB(7)=$C(5,19,1)_"00L12407||[UTBLLNPPN]NET"
 set %TAB(8)=$C(5,55,12)_"00T12406||[UTBLLNPPN]FEETYP|[LNFEEP]:QU ""[LNFEEP]EPPFEE=1"""
 set %TAB(9)=$C(11,2,9)_"00N12402|1|[LNEPPMS]PAYMENTS|||do VP4^V01S042(.fUTBLLNP,.fLNPPN)|do VP5^V01S042(.fUTBLLNP,.fLNPPN)|||5"
 set %TAB(10)=$C(11,17,12)_"00$12401|1|[LNEPPMS]AMOUNT|||do VP6^V01S042(.fUTBLLNP,.fLNPPN)||||2"
 set %TAB(11)=$C(11,36,9)_"00N12402|1|[LNEPPMS]PERCENT|||do VP7^V01S042(.fUTBLLNP,.fLNPPN)||||5"
 set %TAB(12)=$C(11,50,1)_"00N12403|1|[LNEPPMS]BASE|[STBLLNPBAS]||do VP8^V01S042(.fUTBLLNP,.fLNPPN)"
 set %TAB(13)=$C(11,61,17)_"00T12404|1|[LNEPPMS]PGM|||do VP9^V01S042(.fUTBLLNP,.fLNPPN)"
 do VTBL(.fUTBLLNP,.fLNPPN())
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Date %JD, START
 type public String X

 set %JD = $$^SCAJD(X)
 
 // Invalid date ~p1
 if (%JD < 0) do Runtime.setErrMSG("LNEPPMS",1308,%JD) quit
 
 if (%JD > 0) set START = %JD  
 
 quit
VP2(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Date %JD, START
 type public String X
 
 if X.isNull() quit

 set %JD = $$^SCAJD(X)
 
 // Invalid date ~p1
 if (%JD < 0)!(%JD < START) do Runtime.setErrMSG("LNEPPMS",1308,%JD) quit
 
 quit

VP3(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public String X, ZTIERTYPE

 set ZTIERTYPE = X

 quit
VP4(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
	06/25/06 - TITOVE - CR 21981
		   Added code to prevent message 870 from coming
		   up when it should not.

	03/31/06 - TITOVE - CR 20427
		   Added error message 870.

        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Number OLDPMTS, X
 type public String PMTS(), ZTIERTYPE 

 if X.isNull() do { quit
	// Deleted tier, remove it from running list
	if 'OLDPMTS.isNull(), PMTS(OLDPMTS).exists() kill PMTS(OLDPMTS)
	kill OLDPMTS
 	do GOTO^DBSMACRO("NEXT")
	}

 // Payment tier must be zero or a positive whole number
 if (ZTIERTYPE = "0"),X'?.N do Runtime.setErrMSG("LNEPPMS",3757) quit

 // Percentage tier must be between 0 and 100
 if (ZTIERTYPE = "1"),((X < 0)!(X > 100)) do Runtime.setErrMSG("LNEPPMS",3758) quit

 // Duplicate key name ~p1
 if PMTS(X).exists(), (X '= OLDPMTS) do Runtime.setErrMSG("LNEPPMS",870,X) quit

 // Modified tier value, remove old one from running list
 if 'OLDPMTS.isNull(), (OLDPMTS '= X) kill PMTS(OLDPMTS)

 // Create a new running list value
 set PMTS(X) = ""
 kill OLDPMTS

 quit
VP5(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
 
  ---- Revision History ------------------------------------------------

 	06/25/06 - TITOVE - CR 21981
        	   Added code to prevent message 870 from coming
		   up when it should not.
 */
 type public Number OLDPMTS, V

 set OLDPMTS = V

 quit
VP6(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Number X
 type public String ZTIERTYPE

 if X.isNull() quit

 // Verify that all values have an associated tier
 if (ZTIERTYPE = "0"),fLNPPN(I(1)).payments.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit

 // Verify that all values have an associated tier
 if (ZTIERTYPE = "1"),fLNPPN(I(1)).payments.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit

 // Enter amount, or percentage and base, or routine
 if 'fLNPPN(I(1)).percent.isNull()!'fLNPPN(I(1)).base.isNull()!'fLNPPN(I(1)).pgm.isNull() do Runtime.setErrMSG("LNEPPMS",930) quit
 
 quit
VP7(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Number X
 type public String ZTIERTYPE
 
 if X.isNull() quit
 
 // Verify that all values have an associated tier
 if (ZTIERTYPE = "0"),fLNPPN(I(1)).payments.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit
 
 // Verify that all values have an associated tier
 if (ZTIERTYPE = "1"),fLNPPN(I(1)).payments.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit
 
 // Enter amount, or percentage and base, or routine
 if 'fLNPPN(I(1)).amount.isNull()!'fLNPPN(I(1)).pgm.isNull() do Runtime.setErrMSG("LNEPPMS",930) quit

 quit
VP8(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Number X
 type public String ZTIERTYPE

 if 'fLNPPN(I(1)).percent.isNull() do CHANGE^DBSMACRO("REQ","")
 
 if X.isNull() quit
 
 // Verify that all values have an associated tier
 if (ZTIERTYPE = "0"),fLNPPN(I(1)).payments.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit
 
 // Verify that all values have an associated tier
 if (ZTIERTYPE = "1"),fLNPPN(I(1)).payments.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit

 // Enter percentage and then base
 if fLNPPN(I(1)).percent.isNull() do Runtime.setErrMSG("LNEPPMS",949) quit

 quit
VP9(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN()) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/13/06 - TITOVE - CR 18965
                   Converted into PSL.
 */
 type public Number ER
 type public String X
 type Boolean A,B,C,D

 if 'X.isNull() do { quit:ER

 	// Enter amount, or percentage and base, or routine
 	if 'fLNPPN(I(1)).amount.isNull()!'fLNPPN(I(1)).percent.isNull()!'fLNPPN(I(1)).base.isNull() do Runtime.setErrMSG("LNEPPMS",930) quit

 	// Invalid program name - ~p1
 	if '$$VALID^%ZRTNS(X) do Runtime.setErrMSG("LNEPPMS",1429,X) quit
 	}

 set A = (fLNPPN(I(1)).payments="")
 set B = (fLNPPN(I(1)).amount="")
 set C = (fLNPPN(I(1)).percent="")
 set D = (fLNPPN(I(1)).base="")

 // Verify that all tiers have values associated with them
 if 'A,B,C,D,X.isNull() do Runtime.setErrMSG("LNEPPMS",2949) quit
 
 // Verify that all values have an associated tier
 if A,B,C,D,'X.isNull() do Runtime.setErrMSG("LNEPPMS",2950) quit
 
 // Verify that all percentages have an associated base
 if 'C,D do Runtime.setErrMSG("LNEPPMS",2948) quit

 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLLNPPN fUTBLLNP
 type Public RecordLNEPPMS fLNPPN()
 do VPR(.fUTBLLNP,.fLNPPN())
 do VDA1(.fUTBLLNP,.fLNPPN())
 do ^DBSPNT()
 quit

VW(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())
 do VDA1(.fUTBLLNP,.fLNPPN())
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLLNPPN fUTBLLNP,RecordLNEPPMS fLNPPN())
 do VDA1(.fUTBLLNP,.fLNPPN())
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLLNPPN fUTBLLNP
 type Public RecordLNEPPMS fLNPPN()
 do VDA1(.fUTBLLNP,.fLNPPN())
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLLNPPN fUTBLLNP
 if sn="UTBLLNPPN" do vSET1(.fUTBLLNP,di,X)
 type Public RecordLNEPPMS fLNPPN()
 if sn="LNEPPMS" do vSET2(fLNPPN(I(1)),di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordUTBLLNPPN fUTBLLNP,di,X)
 do fUTBLLNP.setAuditFlag(1)
 set fUTBLLNP.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET2(RecordLNEPPMS fLNPPN,di,X)
 do fLNPPN.setAuditFlag(1)
 set fLNPPN.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordUTBLLNPPN fUTBLLNP
 if fid="UTBLLNPPN" quit $$vREAD1(.fUTBLLNP,di)
 type Public RecordLNEPPMS fLNPPN()
 if fid="LNEPPMS" quit $$vREAD2(fLNPPN(I(1)),di)
 quit ""
vREAD1(RecordUTBLLNPPN fUTBLLNP,di)
 quit fUTBLLNP.@di
vREAD2(RecordLNEPPMS fLNPPN,di)
 quit fLNPPN.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
