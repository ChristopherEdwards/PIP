LNFEEPFL(RecordLNFEEP lnfeep, String vpar, Boolean vparNorm) // LNFEEP - Loan Fee Plan Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (58)             02/26/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnfeep.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnfeep,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnfeep,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("FEETYP").exists() do vkchged quit              // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNFEEP",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNFEEP","FEETYP = :lnfeep.feetyp") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String FEETYP

	type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP","FEETYP=:FEETYP")
	if (%ProcessMode = 2) do {
		do lnfeep.setMode(2)

		do LNFEEPFL(lnfeep,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNFEEP lnfeep

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNFEEP","FEETYP = :lnfeep.feetyp") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(lnfeep,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(lnfeep,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnfeep))  S ^UTBL("LNFEE",vobj(lnfeep,-3))=vobj(lnfeep)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNFEEP lnfeep

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(lnfeep,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("LNFEE",vobj(lnfeep,-3))                     // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNFEEP lnfeep

	// Type local variables for access keys for defaults
	type public String FEETYP

	if lnfeep.andf.isNull() set lnfeep.andf = 0            // andf
	if lnfeep.aprf.isNull() set lnfeep.aprf = 0            // aprf
	if lnfeep.cbmf.isNull() set lnfeep.cbmf = 0            // cbmf
	if lnfeep.cfwa.isNull() set lnfeep.cfwa = 0            // cfwa
	if lnfeep.darc.isNull() set lnfeep.darc = 0            // darc
	if lnfeep.ded.isNull() set lnfeep.ded = 0              // ded
	if lnfeep.definc.isNull() set lnfeep.definc = 0        // definc
	type public String TJD
	if lnfeep.dtst.isNull() set lnfeep.dtst = TJD          // dtst
	if lnfeep.eppfee.isNull() set lnfeep.eppfee = 0        // eppfee
	if lnfeep.fpoff.isNull() set lnfeep.fpoff = 0          // fpoff
	if lnfeep.gltrop.isNull() set lnfeep.gltrop = 0        // gltrop
	if lnfeep.late.isNull() set lnfeep.late = 0            // late
	if lnfeep.lfee.isNull() set lnfeep.lfee = 0            // lfee
	if lnfeep.ridd.isNull() set lnfeep.ridd = 0            // ridd
	if lnfeep.rinc.isNull() set lnfeep.rinc = 0            // rinc
	quit


vreqn // Validate required data items

	type public RecordLNFEEP lnfeep

	if lnfeep.andf.isNull() do vreqerr("ANDF") quit
	if lnfeep.aprf.isNull() do vreqerr("APRF") quit
	if lnfeep.cbmf.isNull() do vreqerr("CBMF") quit
	if lnfeep.cfwa.isNull() do vreqerr("CFWA") quit
	if lnfeep.darc.isNull() do vreqerr("DARC") quit
	if lnfeep.ded.isNull() do vreqerr("DED") quit
	if lnfeep.definc.isNull() do vreqerr("DEFINC") quit
	if lnfeep.eppfee.isNull() do vreqerr("EPPFEE") quit
	if lnfeep.fpoff.isNull() do vreqerr("FPOFF") quit
	if lnfeep.gltrop.isNull() do vreqerr("GLTROP") quit
	if lnfeep.late.isNull() do vreqerr("LATE") quit
	if lnfeep.lfee.isNull() do vreqerr("LFEE") quit
	if lnfeep.ridd.isNull() do vreqerr("RIDD") quit
	if lnfeep.rinc.isNull() do vreqerr("RINC") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNFEEP lnfeep

	if lnfeep.feetyp.isNull() do vreqerr("FEETYP") quit

		if vx("ANDF").exists(),lnfeep.andf.isNull() do vreqerr("ANDF") quit
		if vx("APRF").exists(),lnfeep.aprf.isNull() do vreqerr("APRF") quit
		if vx("CBMF").exists(),lnfeep.cbmf.isNull() do vreqerr("CBMF") quit
		if vx("CFWA").exists(),lnfeep.cfwa.isNull() do vreqerr("CFWA") quit
		if vx("DARC").exists(),lnfeep.darc.isNull() do vreqerr("DARC") quit
		if vx("DED").exists(),lnfeep.ded.isNull() do vreqerr("DED") quit
		if vx("DEFINC").exists(),lnfeep.definc.isNull() do vreqerr("DEFINC") quit
		if vx("EPPFEE").exists(),lnfeep.eppfee.isNull() do vreqerr("EPPFEE") quit
		if vx("FPOFF").exists(),lnfeep.fpoff.isNull() do vreqerr("FPOFF") quit
		if vx("GLTROP").exists(),lnfeep.gltrop.isNull() do vreqerr("GLTROP") quit
		if vx("LATE").exists(),lnfeep.late.isNull() do vreqerr("LATE") quit
		if vx("LFEE").exists(),lnfeep.lfee.isNull() do vreqerr("LFEE") quit
		if vx("RIDD").exists(),lnfeep.ridd.isNull() do vreqerr("RIDD") quit
		if vx("RINC").exists(),lnfeep.rinc.isNull() do vreqerr("RINC") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNFEEP","MSG",1767,"LNFEEP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNFEEP lnfeep

	if lnfeep.feetyp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FEETYP", vRM) quit
	set X = lnfeep.amofre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNFEEP]AMOFRE",0) if 'vRM.get().isNull() do vdderr("AMOFRE", vRM) quit
	set X = lnfeep.amold if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AMOLD", vRM) quit
	set X = lnfeep.amomet if 'X.isNull(),'{List}"0".contains(X) set vRM = $$^MSG(1485,X) do vdderr("AMOMET", vRM) quit
	set X = lnfeep.amond if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AMOND", vRM) quit
	set X = lnfeep.amonum if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("AMONUM", vRM) quit
	set X = lnfeep.amth if 'X.isNull(),'Db.isDefined("STBLAMTH","X") set vRM = $$^MSG(1485,X) do vdderr("AMTH", vRM) quit
	if '("01"[lnfeep.ANDF) set vRM=$$^MSG(742,"L") do vdderr("ANDF", vRM) quit
	if '("01"[lnfeep.APRF) set vRM=$$^MSG(742,"L") do vdderr("APRF", vRM) quit
	if lnfeep.basis.length()>8 set vRM = $$^MSG(1076,8) do vdderr("BASIS", vRM) quit
	set X = lnfeep.cblfct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CBLFCT", vRM) quit
	set X = lnfeep.cblfdt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CBLFDT", vRM) quit
	set X = lnfeep.cblfiat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CBLFIAT", vRM) quit
	if '("01"[lnfeep.CBMF) set vRM=$$^MSG(742,"L") do vdderr("CBMF", vRM) quit
	set X = lnfeep.cfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNFEEP]CFRE",0) if 'vRM.get().isNull() do vdderr("CFRE", vRM) quit
	if lnfeep.cfunc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CFUNC", vRM) quit
	if '("01"[lnfeep.CFWA) set vRM=$$^MSG(742,"L") do vdderr("CFWA", vRM) quit
	set X = lnfeep.comfct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("COMFCT", vRM) quit
	set X = lnfeep.comfdt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("COMFDT", vRM) quit
	set X = lnfeep.comfiat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("COMFIAT", vRM) quit
	if '("01"[lnfeep.DARC) set vRM=$$^MSG(742,"L") do vdderr("DARC", vRM) quit
	if '("01"[lnfeep.DED) set vRM=$$^MSG(742,"L") do vdderr("DED", vRM) quit
	if '("01"[lnfeep.DEFINC) set vRM=$$^MSG(742,"L") do vdderr("DEFINC", vRM) quit
	if lnfeep.desc.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DESC", vRM) quit
	if lnfeep.dfeepl.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DFEEPL", vRM) quit
	set X = lnfeep.dmfct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DMFCT", vRM) quit
	set X = lnfeep.dmfdt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DMFDT", vRM) quit
	set X = lnfeep.dmfiat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DMFIAT", vRM) quit
	set X = lnfeep.dtst if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTST", vRM) quit
	if '("01"[lnfeep.EPPFEE) set vRM=$$^MSG(742,"L") do vdderr("EPPFEE", vRM) quit
	set X = lnfeep.famt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEEP.FAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeep.feeicrtc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("FEEICRTC", vRM) quit
	set X = lnfeep.feeidrtc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("FEEIDRTC", vRM) quit
	set X = lnfeep.feemax if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEEP.FEEMAX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeep.feemin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNFEEP.FEEMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnfeep.fmaxop if 'X.isNull(),'{List}"0,1".contains(X) set vRM = $$^MSG(1485,X) do vdderr("FMAXOP", vRM) quit
	set X = lnfeep.fminop if 'X.isNull(),'{List}"0,1".contains(X) set vRM = $$^MSG(1485,X) do vdderr("FMINOP", vRM) quit
	if '("01"[lnfeep.FPOFF) set vRM=$$^MSG(742,"L") do vdderr("FPOFF", vRM) quit
	set X = lnfeep.glfdi if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLFDI", vRM) quit
	set X = lnfeep.glfi if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLFI", vRM) quit
	set X = lnfeep.glfr if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLFR", vRM) quit
	if '("01"[lnfeep.GLTROP) set vRM=$$^MSG(742,"L") do vdderr("GLTROP", vRM) quit
	if lnfeep.hdesc.length()>30 set vRM = $$^MSG(1076,30) do vdderr("HDESC", vRM) quit
	if '("01"[lnfeep.LATE) set vRM=$$^MSG(742,"L") do vdderr("LATE", vRM) quit
	if '("01"[lnfeep.LFEE) set vRM=$$^MSG(742,"L") do vdderr("LFEE", vRM) quit
	set X = lnfeep.lnfct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("LNFCT", vRM) quit
	set X = lnfeep.lnfdt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("LNFDT", vRM) quit
	set X = lnfeep.lnfiat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("LNFIAT", vRM) quit
	set X = lnfeep.mtgfct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("MTGFCT", vRM) quit
	set X = lnfeep.mtgfdt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("MTGFDT", vRM) quit
	set X = lnfeep.mtgfiat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("MTGFIAT", vRM) quit
	set X = lnfeep.rcfct if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("RCFCT", vRM) quit
	set X = lnfeep.rcfdt if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("RCFDT", vRM) quit
	set X = lnfeep.rcfiat if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("RCFIAT", vRM) quit
	if '("01"[lnfeep.RIDD) set vRM=$$^MSG(742,"L") do vdderr("RIDD", vRM) quit
	if '("01"[lnfeep.RINC) set vRM=$$^MSG(742,"L") do vdderr("RINC", vRM) quit
	if lnfeep.rnd.length()>2 set vRM = $$^MSG(1076,2) do vdderr("RND", vRM) quit
	set X = lnfeep.trgrp if 'X.isNull(),'Db.isDefined("UTBLTRNGRPLT","X") set vRM = $$^MSG(1485,X) do vdderr("TRGRP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNFEEP","MSG",979,"LNFEEP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordLNFEEP lnfeep

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("FEETYP")
	set voldkey = vux.piece("|",1),vobj(lnfeep,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(lnfeep,-3) = vnewkey // Copy new keys into object
	type RecordLNFEEP vnewrec = lnfeep.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNFEEP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(lnfeep,-3) = vux.piece("|",1)                 // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordLNFEEP lnfeep
	type public String vpar

	do Db.delete("LNFEEPS","FEETYP=:lnfeep.feetyp",vpar)   // Cascade delete

	quit
