public NOSTPURG
	/*
	 ORIG: KELLYP 09/15/05
	 DESC: Nostro Transfers Purge/Restore Utility
	    This routine contains the purge and restore utilities for
	    nostro transfers.

	---- Comments --------------------------------------------------------

        Inputs:
               . System        %FN,%LIBS,%UID
        
        Returns:
               . ER    Error indicator         /TYPE=T
                       Returns ER=1 if an error, otherwise ER="W"
        
               . RM    Return message          /TYPE=T
                       Returns error message if ER=1, otherwise
                       completion message	

	---- Revision History ------------------------------------------------

	   07/31/06 - KELLYP - CR 22048
	   	Modified WRITE section to eliminate DYNAMIC warning.

	   09/15/05 - KELLYP - CR 17050
	   	Converted to PSL

	*/
	
	do FINDREC
	
	quit
	

FINDREC	
	/*
	 Find records which are candidates to purge based upon date created
	 and current status.  If the record has not been "completed", "reversed" 
	 or "deleted" it cannot be purged, regardless of creation date.
	 
	 If the record wasn't created prior to the purge date (defined as:
	 system date - [CUVAR]NOSTPURG days) it cannot be purged,
	 regardless of status.
	
	 If the SWIFT messages were created and have not yet been sent, it
	 cannot be purged.
	*/
	
	type Date PRGDATE
	type Number MAXDATE,STATUS
	type String NOSCOLS
	
	// Set up list of NOSSTRF columns (for later use)
	do INITCOLS(.NOSCOLS)

	type IO io=Class.new("IO")
	
	set io.directory=$$SCAU^%TRNLNM("SPOOL")
	set io.fileName="NOSSTRF_"_%SystemDate.toString("YYMMDD")_".LIS"
	set io.openParams="WRITE/NEWV"

	do io.open()

	set MAXDATE=CUVAR.nostpurg
	if MAXDATE.isNull() set MAXDATE=365			
	
	set PRGDATE=%SystemDate-MAXDATE

	do LOOP(.io)
	
	quit


LOOP(IO io)	
	/*
	 Loop through Nostro Transfer Index (NOSTINDX) searching for purge
	 candidates.  When one is found, write out to file and kill.
	*/

	type public Date PRGDATE
	type public String ER,RM

	type Boolean FRSTLINE=1
	type Number COUNT=0

	type DbSet ds=Db.selectDbSet("NOSTTRF","EDT<=:PRGDATE","EDT,STATUS,TRREFNO")
	while ds.next() do {
		
		type RecordNOSTTRF nosttrf=ds.getRecord("NOSTTRF")
		
		if nosttrf.status.isNull() quit
		if (nosttrf.status'=6)&(nosttrf.status'=7)&(nosttrf.status'=8) quit
		
		if $$CKSWIFT(nosttrf.trrefno) do {
			set COUNT=COUNT+1
			do WRITE(.io,nosttrf.trrefno)
			}
		}

	do io.close()
	
	set ER="W"

	// ~p1 records have been purged
	set RM=$$^MSG(7601,COUNT)
	
	quit


CKSWIFT(String REFNO)	// Check status of SWIFT messages (200,210)

	type Boolean FLAG=1	// Default to true

	type RecordSWIFTSEQ swift200=Db.getRecord("SWIFTSEQ","SWDIRECT='OUT',TRREFNO=:REFNO,MSG=200,SEQ=0",1)
	if swift200.getMode() do {
		if (swift200.message.piece("|",2)=3) quit
		if (swift200.message.piece("|",2)=5) quit
		set FLAG=0
		}

	type RecordSWIFTSEQ swift210=Db.getRecord("SWIFTSEQ","SWDIRECT='OUT',TRREFNO=:REFNO,MSG=210,SEQ=0",1)
	if swift210.getMode() do {
		if (swift210.message.piece("|",2)=3) quit
		if (swift210.message.piece("|",2)=5) quit
		set FLAG=0
		}
	
	quit FLAG


WRITE(IO io,String REFNO) // Archive records into text file.

	type public Boolean FRSTLINE
	type public String NOSCOLS

	type String DATA

	#ACCEPT DATE=9/15/05;PGM=Pat Kelly;CR=17050
	type ResultSet rs=Db.select(NOSCOLS,"NOSTTRF","TRREFNO=:REFNO")
	if rs.next() set DATA=rs.getRow($C(9))
	
	// Add the column header to the output file (first time through only)
	if FRSTLINE do {
		type String TMPCOLS
		set TMPCOLS=NOSCOLS.translate(",",$C(9))
		do io.write(TMPCOLS)
		set FRSTLINE=0
		}

	// Write the NOSTTRF record to the output file
	do io.write(DATA)
	
	// Kill the NOSTTRF record
	do Db.delete("NOSTTRF","TRREFNO=:REFNO")
	
	quit


public RESTORE	// Restore purged nostro transfers

	type public String ER,RM

	type Date DATE
	type Number COUNT,I
	type String %READ,%TAB(),COL,NOSCOLS,REC,VFMQ

	set %TAB("DATE")=".DATE1"
	set %READ="@@%FN,,,,DATE#1"

	do ^UTLREAD
	
	if "Q"[VFMQ quit

	set DATE=DATE.toString("YYMMDD")
	set COUNT=0
	
	type IO io=Class.new("IO")
	
	set io.directory=$$SCAU^%TRNLNM("SPOOL")
	set io.fileName="NOSSTRF_"_DATE_".LIS"
	set io.openParams="READ"

	catch ioxcpt {
		// If not an IO exception, it's not for us
		if ioxcpt'["%PSL-E-IO" throw ioxcpt

		do Runtime.setErrMSG("NOSTTRG","7598",io.device) quit:ER
		}

	do io.open()
	
	// Get the list of columns from the file
	set NOSCOLS=io.read()
	
	// Loop through each line of the file, re-creating the NOSTTRF records
	for  set REC=io.read()  do {
		
		type RecordNOSTTRF nosttrf=Class.new("RecordNOSTTRF")
		
		for I=1:1:NOSCOLS.length($C(9)) do {
			set COL=NOSCOLS.piece($C(9),I)
			set nosttrf.@COL=REC.piece($C(9),I)
			}
		do nosttrf.save()
		set COUNT=COUNT+1
		}
	
	do io.close()

	set ER="W"

	// ~p1 purged records have been restored
	set RM=$$^MSG(7600,COUNT)
	
	quit

	
INITCOLS(String NOSCOLS)

	set NOSCOLS="AMT,CONSTANT,CRCD,DS1,DS2,EDT,EFDKEY,FNOSTRO,INTER,INTER1,INTER2,INTER3,INTER4,"
	set NOSCOLS=NOSCOLS_"MDT,MT200ACK,MT200FLG,MT200PRI,MT210ACK,MT210FLG,MT210PRI,PAIDBY,PAIDBY1,"
	set NOSCOLS=NOSCOLS_"PAIDBY2,PAIDBY3,PAIDBY4,PAYTO,PAYTO1,PAYTO2,PAYTO3,PAYTO4,RELREF,"
	set NOSCOLS=NOSCOLS_"SENDREC1,SENDREC2,SENDREC3,SENDREC4,SENDREC5,SENDREC6,SEQ,STATUS,"
	set NOSCOLS=NOSCOLS_"SWACK,TNOSTRO,TRREFNO,UID,VDT"
	
	quit
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60477^65456^Pat Kelly^5109"	// Signature - LTD^TIME^USER^SIZE
