LNCYCMET	
	/*
	ORIG: CARROLLJ - 08/17/2001
	DESC: Interest Rebate Methods

	---- Comments --------------------------------------------------------
	

	---- Revision History ------------------------------------------------

	11/06/06 - KELLYP - CR 23889
		   Modified section 4 not to rebate more than the unamortized
		   amount during payoff.  This was possible due to rounding
		   differences that would normally be caught at the end of
		   the cycled item's amortization period.

	09/26/06 - SANTHUMS - CR 23160
		   Modified the code to equate AOT to AOC+1 instead of 
		   AOT=AOC,  since amortized to date amount is not getting 
		   calculated properly.
	
	09/26/05 - Satyanas - CR 16994
		   Modified the code to PSL Standards and 
		   removed the unscoped warnings.	
	
	12/09/03 - CARROLLJ - CR7239
		   Added #ACCEPT prior to xecute command to correct compile
		   errors.

	06/13/02 - CARROLLJ - 43583
		   Create from batch BCHLNAMOAO for the PSL conversion.

	*/

	quit

public START(RecordLN ln,MET)

	/*
	ARGUMENT:
	. ln    Loan Object                     /TYP=RecordLN/REQ/REF:R
	
	. MET	Amortization Method		/TYP=N/NOREQ

	*/
	
	if MET=1 do 1 quit
	if MET=2 do 2 quit
	if MET=3 do 3 quit
	if MET=4 do 4 quit
	if MET=5 do 5,PRECALC(.ln) quit
	if MET=6 do 6,PRECALC(.ln) quit
	if MET=7 do 7,PRECALC(.ln) quit
	if MET=8 do 8(.ln),PRECALC(.ln) quit
	if MET=9 do 9(.ln),PRECALC(.ln) quit
	
	// Amortization method undefined. Account not processed.
 	if 'MET do Runtime.setErrMSG("LN",3818)
 	
 	quit

1	// Actuarial calculation method
 	
 	type public Number AF,%AMT,AO,AOB,AOC,AOI,AOT,CID,DF,EXP,NEG,NF,NR,%ORG,%REM
 	type public String CALC,K
 	type Number AONF,AOBAO,IR,X
 	
 	set K="K %REM,DF,NF,%ORG,EXP,IR,NR"
 
	set NR=AOT-AOC,IR=AOI/(AF*100)
	
	if NR<0 set %AMT=0 kill %REM,DF,NF,%ORG,EXP,IR,NR quit
 
	if 'CALC.exists() set NR=NR-1
	
	set X=$$LNX^%ZFUNC(1+IR)*NR,%REM=$$EXP^%ZFUNC(X)
	set X=$$LNX^%ZFUNC(1+IR)*AOT,%ORG=$$EXP^%ZFUNC(X)
 
	if '%ORG set %AMT=0 kill %REM,DF,NF,%ORG,EXP,IR,NR quit
	
	set NF=((1/%REM)+(IR*NR))-1,DF=((1/%ORG)+(IR*AOT))-1
		
	if 'DF set %AMT=0 kill %REM,DF,NF,%ORG,EXP,IR,NR quit
	
	set AONF=AO*(NF/DF)
	
	if CALC.exists() set %AMT=AONF.roundDec() set:NEG %AMT=-%AMT kill %REM,DF,NF,%ORG,EXP,IR,NR quit
 	
 	set AOBAO=AOB-(AO*(NF/DF))
	set %AMT=AOBAO.roundDec() if NEG set %AMT=-%AMT
	
	if %AMT>AOB set %AMT=AOB
	if AOT=(AOC+1) set %AMT=AOB,AOB=0
	if AOB set AOB=AOB-%AMT
		
	kill %REM,DF,NF,%ORG,EXP,IR,NR

	quit


2	// Declining Balance Method
	
	type public Number %AMT,AOB,AOC,AOT,AO,CID,NEG,NR
	type public String CALC,DBF
	type Number AOBDBF,I
		
	if 'CALC.exists() do DB1 quit
	
	if 'DBF.get() set DBF=100
	
	set NR=AOT-AOC if NR<0 set %AMT=0 quit
	set AOB=AO if 'AOT quit
 	
 	set AOBDBF=(AOB*(DBF/100))/AOT
	
	for I=1:1:NR set AOB=AOB-AOBDBF.roundDec()
	
	set %AMT=AOB set:NEG %AMT=-%AMT kill DBF,NR quit

DB1	//-----------------------
	
	type public Number %AMT,AOB,AOC,AOT,CID,DBF,NEG
	type Number AOBDBF
	
	set AOBDBF=(AOB*(DBF/100))/AOT
	set %AMT=AOBDBF.roundDec() if NEG set %AMT=-%AMT
	
	if %AMT>AOB set %AMT=AOB
	
	if AOT=(AOC+1) set %AMT=AOB,AOB=0
	
	if AOB set AOB=AOB-%AMT
	
	quit


3	// Rule of 78ths calculation method

	type public Number %AMT,AO,AOB,AOC,AOT,CID,NEG,NR
	type public String CALC
	type Number AONR,BOT,NRBOT

	set NR=AOT-AOC if NR<0 set %AMT=0 quit
	set BOT=(AOT/2)*(AOT+1) if 'BOT quit
 
  	set AONR=AO*(NR/2*(NR+1))/BOT

	if CALC.exists() set %AMT=AONR.roundDec() kill NR,BOT quit
	
	set NRBOT=AO*(NR/BOT)
	
	set %AMT=NRBOT.roundDec() if NEG set %AMT=-%AMT
	
	if %AMT>AOB set %AMT=AOB
	
	if AOT=(AOC+1) set %AMT=AOB,AOB=0
	
	if AOB set AOB=AOB-%AMT
	
	kill NR,BOT
 
	quit


4	// Straight line calculation method

	type public Number %AMT,AO,AOB,AOC,AOT,CID,NEG,NR
	type public String CALC
	type Number AOAOT,AOTNR
	
	if 'AOT quit
 
	// Rebate/Amortization being calculated due to payoff
	if CALC.exists() do {  quit
		
		type Number NR
	
		set NR=AOT-AOC
		
		// If amort counter (AOC) > amort term (AOT), set add-on amt = 0
		if NR<0 set %AMT=0 kill NR quit
		
		set AOTNR=AO/AOT*NR

		// Can't rebate more than what's left to amortize
		if %AMT>AOB set %AMT=AOB,AOB=0
		else  set %AMT=AOTNR.roundDec()
		}
 
 	set AOAOT=AO/AOT
	set %AMT=AOAOT.roundDec() if NEG set %AMT=-%AMT

	if %AMT>AOB set %AMT=AOB

	if AOT=(AOC+1) set %AMT=AOB,AOB=0

	if AOB set AOB=AOB-%AMT

	quit



5	// Rule of Anticipation - Massachusetts Credit Life
 
 	type public Number AF,%AMT,AO,AOB,AOC,AOI,AOT,CID,NEG,NR,SKIP
 	type public String CALC
 	type Number DF,MIR,NF,NFDF,R1,R2,R3,R4,X
	
	// monthly interest rate
	set MIR=(AOI/100)/AF

	// If Payoff or section called from outside
	if 'SKIP.get() set SKIP=0

        // If Payoff or Current Months Rebate
        if SKIP<2 set NR=AOT-AOC if NR<0 set %AMT=0 quit

	// if not payoff do Current Month's Rebate
	if 'CALC.exists() set NR=NR-1
 
	set R1=(NR*MIR)-1
	set R4=(AOT*MIR)-1
 
	set X=$$LNX^%ZFUNC(1+MIR)*NR
	set R2=$$EXP^%ZFUNC(X)
	set X=$$LNX^%ZFUNC(1+MIR)*AOT
	set R3=$$EXP^%ZFUNC(X)
 
	set NF=((R1*R2)+1)*R3
	set DF=((R4*R3)+1)*R2
	if 'DF set %AMT=0 quit
 
 	set NFDF=(NF/DF)*AO
	set %AMT=NFDF.roundDec()
	if NEG set %AMT=-%AMT quit
 
	// Verify for Over-Amortization
	if SKIP=0 do {  quit
		if %AMT>AOB set %AMT=AOB
		if AOT=(AOC+1) set %AMT=0,AOB=0
		if AOB set AOB=AOB-%AMT
		}
 
	quit


6	// Rule of Anticipation - North Carolina Credit Life
 	type public Number AF,%AMT,AO,AOB,AOC,AOI,AOT,CID,NEG,NR,SKIP
 	type public String CALC
	type Number DF,MIR,NF,R1,R2,R3,R4,R5,R6,X 
	 
	// monthly interest rate
	set MIR=(AOI/100)/AF

	// If Payoff or section called from outside
	if 'SKIP.get() set SKIP=0
 
	// If Payoff or Current Months Rebate
	if SKIP<2 set NR=AOT-AOC if NR<0 set %AMT=0 quit
 
	// if not payoff do Current Month's Rebate
	if 'CALC.exists() set NR=NR-1
 
	set R1=(NR*MIR)-1
	set X=$$LNX^%ZFUNC(1+MIR)*NR
	set R2=$$EXP^%ZFUNC(X)
	set X=$$LNX^%ZFUNC(1+MIR)*AOT
	set R3=$$EXP^%ZFUNC(X)

	set R4=(AOT*MIR)-1
	set R5=NR*(AOT+1)
	set R6=AOT*(NR+1)
	set NF=((R1*R2)+1)*R3
	set DF=((R4*R3)+1)*R2
	if 'DF set %AMT=0 quit
	
	type Number NFDFR
	set NFDFR=(NF/DF)*(R5/R6)*AO
	set %AMT=NFDFR.roundDec()
	if NEG set %AMT=-%AMT
 
	// Verify for Over-Amortization
	if SKIP=0 do {  quit
		if %AMT>AOB set %AMT=AOB
		if AOT=(AOC+1) set %AMT=0,AOB=0
		if AOB set AOB=AOB-%AMT
		}		
 
	quit


7	// Rule of Anticipation - A & H
 	type public Number %AMT,AO,AOB,AOC,AOT,CID,MET,NEG,NR,SKIP
 	type public String CALC
 	type Number METHOD,NRAOT,OPMONTHS,OPRATE,RPRATE,RPMONTHS
 
	set METHOD=MET
	
	// If Payoff or section called from outside
	if 'SKIP.get() set SKIP=0
 
	// If Payoff or Current Months Rebate
	if SKIP<2 set NR=AOT-AOC if NR<0 set %AMT=0 quit
 
	// if not payoff do Current Month's Rebate
	if 'CALC.exists() set NR=NR-1
 	
	type RecordRAAH raahrprate=Db.getRecord("RAAH","METHOD=:METHOD,MONTHS=:NR",1)
	if 'raahrprate.getMode() do {
	
		// To get the Previous Value
		type ResultSet rsraah=Db.select("MONTHS","RAAH","METHOD=:METHOD AND MONTHS<:NR","MONTHS DESC")
		if rsraah.next() set RPMONTHS=rsraah.getCol("MONTHS")
			
		type RecordRAAH raah=Db.getRecord("RAAH","METHOD=:METHOD,MONTHS=:RPMONTHS",1)
		set RPRATE=raah.rate
		}
	else  set RPRATE=raahrprate.rate		
 		
	type RecordRAAH raahoprate=Db.getRecord("RAAH","METHOD=:MET,MONTHS=:RPMONTHS",1)
	if 'raahoprate.getMode() do {
	
		// To get the Previous Value
		type ResultSet rsraah=Db.select("MONTHS","RAAH","METHOD=:MET AND MONTHS<:NR","MONTHS DESC")
		if rsraah.next() set OPMONTHS=rsraah.getCol("MONTHS")
		
		type RecordRAAH raah=Db.getRecord("RAAH","METHOD=:MET,MONTHS=:OPMONTHS",1)
		set OPRATE=raah.rate
		}
		
	else  set OPRATE=raahoprate.rate

 	set NRAOT=(NR*RPRATE)/(AOT*OPRATE)*AO
 	
	set %AMT=NRAOT.roundDec()
	if NEG set %AMT=-%AMT

	// Verify for Over-Amortization
	if SKIP=0 do {  quit
		if %AMT>AOB set %AMT=AOB
		if AOT=(AOC+1) set %AMT=0,AOB=0
		if AOB set AOB=AOB-%AMT
		}
	quit



8(RecordLN ln)	// Rule of Anticipation - Connecticut
 
 	type public Number %AMT,AOB,AOC,AOT,CID,MET,NEG,NR,SKIP
 	type public String CALC
	type Number MPA,NRRATE,RATE,XMONTHS,XRATE

	// monthly payment amount=principal and interest payment
	set MPA=ln.pmtpi
 
	// If Payoff or section called from outside
	if 'SKIP.get() set SKIP=0
 
	// If Payoff or Current Months Rebate
	if SKIP<2 set NR=AOT-AOC if NR<0 set %AMT=0 quit
 
	// if not payoff do Current Month's Rebate
	if 'CALC.exists() set NR=NR-1
 
	type RecordRAAH raahrate=Db.getRecord("RAAH","METHOD=:MET,MONTHS=:NR",1)
	if 'raahrate.getMode() do {
	
		// To get the Previous Value
		type ResultSet rsraah=Db.select("MONTHS","RAAH","METHOD=:MET AND MONTHS<:NR","MONTHS DESC")
		if rsraah.next() set XMONTHS=rsraah.getCol("MONTHS")
				
		type RecordRAAH raah=Db.getRecord("RAAH","METHOD=:MET,MONTHS=:XMONTHS",1)
		set XRATE=raah.rate
		type Number NRXRATE
		set NRXRATE=NR*(XRATE/100)*MPA
		set %AMT=NRXRATE.roundDec()
		}
		
	else  do {
		set RATE=raahrate.rate
		set NRRATE=NR*(RATE/100)*MPA
		set %AMT=NRRATE.roundDec()
		}
	 
	if NEG set %AMT=-%AMT
 
	// Verify for Over-Amortization
	if SKIP=0 do {  quit
		if %AMT>AOB set %AMT=AOB
		if AOT=(AOC+1) set %AMT=0,AOB=0
		if AOB set AOB=AOB-%AMT
		}
	quit


9(RecordLN ln)	// Rule of Anticipation - Virginia
 
 	type public Number %AMT,AO,AOB,AOC,AOT,CID,NEG,NR,SKIP,VFR
 	type public String CALC
	type Number a2,b2,NFDF,R1,R2,R3,R4,RATE,X
 
	// loan interest rate
	set RATE=ln.iro/100
 
	// If Payoff or section called from outside
	if 'SKIP.get() set SKIP=0
 
	// If Payoff or Current Months Rebate
	if SKIP<2 set NR=AOT-AOC if NR<0 set %AMT=0 quit
 
	// if not payoff do Current Month's Rebate
	if 'CALC.exists() set NR=NR-1
 
	set X=$$LNX^%ZFUNC(1+(RATE/12))*AOT
	set a2=$$EXP^%ZFUNC(X)
	set X=$$LNX^%ZFUNC(1+(RATE/12))*NR
	set b2=$$EXP^%ZFUNC(X)
	 
	set R1=NR-((1-(1/b2))/(RATE/12))
	set R2=(AOT*VFR)+1
	set R3=AOT-((1-(1/a2))/(RATE/12))
	set R4=(NR*VFR)+1
	
	if '(R3*R4) set %AMT=0 quit
 	
 	set NFDF=((R1*(R2*AO))/(R3*R4))
	set %AMT=NFDF.roundDec()
	if NEG set %AMT=-%AMT quit
 
	// Verify for Over-Amortization
	if SKIP=0 do {  quit
		if %AMT>AOB set %AMT=AOB
		if AOT=(AOC+1) set %AMT=0,AOB=0
		if AOB set AOB=AOB-%AMT
		}
 
	quit


PRECALC(RecordLN ln) // If met is 5,6,7,8 do previous month's rebate

	type public Number %AMT,AOB,AOC,AOT,%CAMT,MET,NR,SKIP
 	type public String CALC

	if CALC.exists() quit        // If payoff ^LNPO2 quit

	set %CAMT=%AMT

	// Previous Months Rebate
	set NR=NR+1
	set SKIP=2
	
	// Not Payoff
	set CALC=""

	if MET=5 do 5
	if MET=6 do 6
	if MET=7 do 7
	if MET=8 do 8(.ln)
	if MET=9 do 9(.ln)

	// Amount Amortized = Current Months Rebate - Previous Months Rebate
	set %AMT=%AMT-%CAMT
 
	// Verify for Over-Amortization
	if %AMT>AOB set %AMT=AOB
	if AOT=(AOC+1) set %AMT=0,AOB=0
	if AOB set AOB=AOB-%AMT

	quit

vSIG()	quit "60575^50258^Pat Kelly^10282"	// Signature - LTD^TIME^USER^SIZE
