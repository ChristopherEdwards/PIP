AVCOFILE(RecordUTBLPRODAVCO utblprodavco, String vpar, Boolean vparNorm) // UTBLPRODAVCO - Product Rules Available Columns Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (2)                      01/05/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblprodavco.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblprodavco,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblprodavco,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String COLNAME = utblprodavco.colname

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("COLNAME").exists() do vkchged quit             // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPRODAVCO",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPRODAVCO","COLNAME = :utblprodavco.colname") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String COLNAME

	type RecordUTBLPRODAVCO utblprodavco = Db.getRecord("UTBLPRODAVCO","COLNAME=:COLNAME")
	if (%ProcessMode = 2) do {
		do utblprodavco.setMode(2)

		do AVCOFILE(utblprodavco,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPRODAVCO utblprodavco

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPRODAVCO","COLNAME = :utblprodavco.colname") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodavco,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodavco,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblprodavco))  S ^UTBL("PRODAVCO",vobj(utblprodavco,-3))=vobj(utblprodavco)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPRODAVCO utblprodavco

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblprodavco,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("PRODAVCO",vobj(utblprodavco,-3))            // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLPRODAVCO utblprodavco

	if utblprodavco.datatype.isNull() do vreqerr("DATATYPE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPRODAVCO utblprodavco

	if utblprodavco.colname.isNull() do vreqerr("COLNAME") quit

		if vx("DATATYPE").exists(),utblprodavco.datatype.isNull() do vreqerr("DATATYPE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODAVCO","MSG",1767,"UTBLPRODAVCO."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLPRODAVCO utblprodavco
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblprodavco,.vx(),1,"|")
	quit


vbd1 // Trigger BEFORE_DELETE - Before Delete trigger

	type public RecordUTBLPRODAVCO utblprodavco
	/*
	----Revision History----------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.

	12/22/99 - DOUGANM _ 31126
		   Removed "if rs.isEmpty() quit" statements, and added "if 
		   'rs.isEmpty() condition before the Runtime error message 
		   statements instead.  Removed variable: XDATA, because it is 
		   no longer needed.

	09/22/99 - CARROLLJ - 31126
		   Convert to PSL.

	05/11/99 - SKLYUTD - 32956
		   Do not allow delete of columns from UTBLPRODAVCO if those columns
		   are used in either Rules/Results or Low Level Defaults
	*/

	type public Boolean ER

	type String XCOLUMN

	set XCOLUMN=utblprodavco.colname

	type ResultSet rs=Db.select("RELATION","UTBLLLD","RELATION=:XCOLUMN")

	// Delete prohibited. Column ~p1 used in product rule definitions or in low level defaults.
	if 'rs.isEmpty() do Runtime.setErrMSG("UTBLPRODAVCO",3923,XCOLUMN) quit:ER
	
	type ResultSet rs=Db.select("COLNAME","UTBLPRODLNK","COLNAME=:XCOLUMN")

	// Delete prohibited. Column ~p1 used in product rule definitions or in low level defaults.
	if 'rs.isEmpty() do Runtime.setErrMSG("UTBLPRODAVCO",3923,XCOLUMN) quit:ER
	
	type ResultSet rs=Db.select("COLNAME","UTBLPRODRT","COLNAME=:XCOLUMN")

	// Delete prohibited. Column ~p1 used in product rule definitions or in low level defaults.
	if 'rs.isEmpty() do Runtime.setErrMSG("UTBLPRODAVCO",3923,XCOLUMN) quit:ER

	quit
	

vbi1 // Trigger BEFORE_INSERT - Before_insert

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before_insert

	type public RecordUTBLPRODAVCO utblprodavco
	do utblprodavco.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.

								12/22/99 - DOUGANM _ 31126
		   Removed "if rs.isEmpty() quit" statements, and added "if
		   'rs.isEmpty()" condition before the Runtime error message
		   statements instead.  Removed variable: data, because it is 
	           no longer needed.  Corrected typo: colname was newed, but
		   ColName was being used, so newed ColName instead.
	
								09/22/99 - CARROLLJ - 31126
																			Convert to PSL.

	11/09/98 - SKLYUTD - 27872
		   Modified to allow for the tables other than DEP, LN and CIF
		   to be entered into the PRODAVCO.  The entries are still limited to
		   the file definitions mapped to the global ^ACN with the first
		   key of "CID"
	*/

	type public Boolean ER

	type String di,tab,ColName,FILE

	set ColName=utblprodavco.colname
	set FILE=ColName.piece(".",1)

	if FILE'="CIF" do { quit:ER 

		type ResultSet rs=Db.select("FID","DBTBL1","GLOBAL='ACN' AND FID=:FILE AND ACCKEYS LIKE 'CID%'")

		// Invalid table name - ~p1
		if rs.isEmpty() do Runtime.setErrMSG("UTBLPRODAVCO",1484,FILE) quit:ER
		}

	set tab=ColName.piece(".",1)
	set di=ColName.piece(".",2)

	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID=:tab,DI=:di",1)

	// Invalid column name
	if 'dbtbl1d.getMode() quit

	// Computed data items not allowed - ~p1
	if FILE'="CIF",dbtbl1d.cmp'="" do Runtime.setErrMSG("UTBLPRODAVCO",597,ColName) quit:ER

	set utblprodavco.datatype=dbtbl1d.typ
	set utblprodavco.coldesc=dbtbl1d.des

	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPRODAVCO utblprodavco

	if utblprodavco.colname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLNAME", vRM) quit
	if utblprodavco.coldesc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLDESC", vRM) quit
	set X = utblprodavco.datatype if 'X.isNull(),'Db.isDefined("DBCTLDVFM","X") set vRM = $$^MSG(1485,X) do vdderr("DATATYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODAVCO","MSG",979,"UTBLPRODAVCO."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLPRODAVCO utblprodavco

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("COLNAME")
	set voldkey = vux.piece("|",1),vobj(utblprodavco,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblprodavco,-3) = vnewkey // Copy new keys into object
	type RecordUTBLPRODAVCO vnewrec = utblprodavco.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPRODAVCO",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utblprodavco,-3) = vux.piece("|",1)           // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordUTBLPRODAVCO utblprodavco
	type public String vpar

	do Db.delete("UTBLLLD","RELATION=:utblprodavco.colname",vpar) // Cascade delete

	quit
