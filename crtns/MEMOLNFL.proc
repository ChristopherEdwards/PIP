MEMOLNFL(RecordMEMOLN memoln, String vpar, Boolean vparNorm) // MEMOLN - Memo Table for Loan Accounts Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = memoln.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(memoln,.vxins(),10,"|")
	if %O = 1 quit:'memoln.isChanged()  do AUDIT^UCUTILN(memoln,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SERVICE").exists()!vx("ACCKEY").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("MEMOLN",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("MEMOLN","SERVICE = :memoln.service and ACCKEY = :memoln.acckey") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SERVICE
	type public String ACCKEY

	type RecordMEMOLN memoln = Db.getRecord("MEMOLN","SERVICE=:SERVICE,ACCKEY=:ACCKEY")
	if (%ProcessMode = 2) do {
		do memoln.setMode(2)

		do MEMOLNFL(memoln,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordMEMOLN memoln

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("MEMOLN","SERVICE = :memoln.service and ACCKEY = :memoln.acckey") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(memoln,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^MEMO("LOAN",vobj(memoln,-3),vobj(memoln,-4),n)=vobj(memoln,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(memoln,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(memoln,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^MEMO("LOAN",vobj(memoln,-3),vobj(memoln,-4),n)=vobj(memoln,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordMEMOLN memoln
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^MEMO("LOAN",vobj(memoln,-3),vobj(memoln,-4),n)) quit:n.isNull()  if 'vobj(memoln,n).data(),^MEMO("LOAN",vobj(memoln,-3),vobj(memoln,-4),n).data()#2 set vobj(memoln,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordMEMOLN memoln

	if 'vkeychg.get(),memoln.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^MEMO("LOAN",vobj(memoln,-3),vobj(memoln,-4))     // Delete Record
	quit


vinit // Initialize default values

	type public RecordMEMOLN memoln

	// Type local variables for access keys for defaults
	type public String SERVICE
	type public String ACCKEY

	type public String TJD
	if memoln.odt.isNull() set memoln.odt = TJD            // odt
	quit


vreqn // Validate required data items

	type public RecordMEMOLN memoln

	if memoln.acn.isNull() do vreqerr("ACN") quit
	if memoln.identifier.isNull() do vreqerr("IDENTIFIER") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordMEMOLN memoln

	if memoln.service.isNull() do vreqerr("SERVICE") quit
	if memoln.acckey.isNull() do vreqerr("ACCKEY") quit

	if 'vobj(memoln,-100,1,"").order().isNull() do {
		if vx("ACN").exists(),memoln.acn.isNull() do vreqerr("ACN") quit
		if vx("IDENTIFIER").exists(),memoln.identifier.isNull() do vreqerr("IDENTIFIER") quit
	}
		if vx("ACN").exists(),memoln.acn.isNull() do vreqerr("ACN") quit
		if vx("IDENTIFIER").exists(),memoln.identifier.isNull() do vreqerr("IDENTIFIER") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MEMOLN","MSG",1767,"MEMOLN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordMEMOLN memoln

	if (%O = 2) do vload

	if vobj(memoln,1).exists() do {

		if memoln.acctname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ACCTNAME", vRM) quit
		set X = memoln.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
		if memoln.identifier.length()>25 set vRM = $$^MSG(1076,25) do vdderr("IDENTIFIER", vRM) quit
		set X = memoln.memorelc if 'X.isNull(),'Db.isDefined("UTBLRELSRV","X") set vRM = $$^MSG(1485,X) do vdderr("MEMORELC", vRM) quit
		set X = memoln.odt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODT", vRM) quit
		set X = memoln.status if 'X.isNull(),'Db.isDefined("STBLESTATUS","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
	}
	if memoln.service.length()>20 set vRM = $$^MSG(1076,20) do vdderr("SERVICE", vRM) quit
	if memoln.acckey.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ACCKEY", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MEMOLN","MSG",979,"MEMOLN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordMEMOLN memoln

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SERVICE").exists() set vux("SERVICE") = vx("SERVICE")
	if vx("ACCKEY").exists() set vux("ACCKEY") = vx("ACCKEY")
	do vkey(1) set voldkey = memoln.service_","_memoln.acckey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = memoln.service_","_memoln.acckey // Copy new keys into object
	type RecordMEMOLN vnewrec = memoln.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("MEMOLN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordMEMOLN memoln

	if vux("SERVICE").exists() set memoln.service = vux("SERVICE").piece("|",i)
	if vux("ACCKEY").exists() set memoln.acckey = vux("ACCKEY").piece("|",i)
	quit
