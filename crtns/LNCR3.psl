public LNCR3
	/*
	PBS - LN - V3.0 - CREATE FILE FOR CREDIT BUREAU UPDATE TAPE

	---- Revision History ------------------------------------------------

	07/31/06 - KELLYP - CR 22048
		   Modified REG section to eliminate PRECEDENCE warnings.

	07/18/06 - RussellDS - CR22121
  		   Modified to allow call to FILE^%ZOPEN to consider character
  		   set exceptions for Unicode
	  
	01/30/06 - Radhika - CR 17423
		   .Eliminated PSL deprecated features and warnings.
		   .Removed revision history prior to 2004.
	*/
	
	do START quit

START	//
	
	type Date CRLRD
	type Number COUNT,PGBK,QUIT,TOTBAL,TOTPAST
	type Number TRWTBL,TERR,TREC,TEXE
	type String CRCTRL,CRSHRT,%MSKD,PARAMS,PROD,REPORT,TRWASC,TAPEID,X,YN 
	type String CRID,CRSTUD,IO,PIO,V,ZERO
		
	// CREATE FILE FOR CREDIT BUREAU UPDATE TAPE.
	use 0 set PIO=$I write !,$$^MSG("3973"),!
	//   CONTINUE? (Y/N)  N=>
	set YN=$$YN^DBSMBAR("",$$^MSG(603),0)  //Continue?
	if 'YN do QUIT
	use 0 write !! do ^%T write !	
	set ZERO="00000000000000000000"
	set CRSHRT=CUVAR.crshrt 
	set CRSHRT=ZERO.extract(1,2-CRSHRT.length())_CRSHRT
	set CRCTRL=CUVAR.crctrl
	set CRCTRL=ZERO.extract(1,4-CRCTRL.length())_CRCTRL
	set CRSTUD=CUVAR.crstud
	set CRSTUD=ZERO.extract(1,4-CRSTUD.length())_CRSTUD
	set CRID=CUVAR.crid 
	set CRID=ZERO.extract(1,7-CRID.length())_CRID
	set CRLRD=CUVAR.crlrd
	set (TERR,COUNT,TREC,TEXE,QUIT,PGBK,TOTBAL,TOTPAST)=0
	kill TRWASC,TRWTBL
	set IO=CUVAR.spldir_"CRTRW.FIL"
	close IO 
	set PARAMS = "WRITE/NEWV"
	if $$VALID^%ZRTNS("UCIOENCD") do {
		
		// Accept warning if ^UCIOENCD does not exist
		#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
		type String CHARSET = $$^UCIOENCD("Routine", "LNCR3", "*", "*")
		
		if 'CHARSET.isNull() set PARAMS = PARAMS_"/OCHSET="_CHARSET
	}
	set X=$$FILE^%ZOPEN(IO,PARAMS,2) if 'X do EXIT
	set V=%MSKD.get("MM/DD/YEAR") set (PROD,REPORT)=V.translate("/","")
	set TAPEID=CRSHRT_REPORT
	do HDR
	quit
	
REG	

	type public Number ACN
	type Date DIST1LD,DTC,FCLD,ODT
	type String ACNRELC,BAL,CBC,CRCD,CNTDR,CLS,GRP,list
	type Number CBCLIST(),DIST1AF,data,ONP,PMT,TYPE,STAT,TDUE,QUIT
	
	set CLS="L"
	type ResultSet rst=Db.select("TYPE","PRODDFTL","CBC NOT = '99'")
	if rst.isEmpty() quit ""
	while rst.next() do {
		set data=rst.getCol("TYPE")  
		set CBCLIST(data)="" 
		}

	set list="CRCD,TYPE,CID,BAL,STAT,DTC"
	set list=list_",GRP,CNTDR,DIST1AF,ODT,CBC,ONP,FCLD,DIST1LD,HABL1,TDUE,PMT,ACNRELC,CRLMT,SCHSEQ,DSEQ,ACN"
	type ResultSet rs=Db.select(list,"LN","")
	if rs.isEmpty() quit ""
	while rs.next()  do { quit:QUIT  
		set ACN=rs.getCol("ACN")
		set CRCD=rs.getCol("CRCD")
		set TYPE=rs.getCol("TYPE")
		set BAL=rs.getCol("BAL")
		set STAT=rs.getCol("STAT")
		set DTC=rs.getCol("DTC")
		set GRP=rs.getCol("GRP")
		set CNTDR=rs.getCol("CNTDR")
		set DIST1AF=rs.getCol("DIST1AF")
		set ODT=rs.getCol("ODT")
		set CBC=rs.getCol("CBC")
		set ONP=rs.getCol("ONP")
		set FCLD=rs.getCol("FCLD")
		set DIST1LD=rs.getCol("DIST1LD")
		set TDUE=rs.getCol("TDUE")
		set PMT=rs.getCol("PMT")
		set ACNRELC=rs.getCol("ACNRELC")
		if (CBCLIST(TYPE).order()).isNull() quit 
		if 'BAL.length() quit 
		if STAT=4&(DTC<(%SystemDate-360)) quit 
		if GRP="RC",'CNTDR quit 
		do EXEC
		}
	if QUIT do TRLR
	quit 


	
EXEC	

	type public Number TERR
	type public String ACN,ET,data
	type public Number QUIT,%ZTHALT
	
	// set error trap
	catch vERROR {
		set TERR=TERR+1
		if $$ETLOC^%ZT["INTERRUPT" set QUIT=1 quit
		set %ZTHALT=0 do ZE^UTLERR      // Log Mumps error
 		// Error in account, not processed
		set ET=$$^MSG("3511")
		do LOGERR
		}
	do RUN
	quit 

	
RUN	//

	type public Number TEXE
	set TEXE=TEXE+1
	do PROC
	quit
		
PROC	//

	type public Number ACN,CID,COUNT,ONP,TREC
	type public Number BAL,data,TOTPAST,TRWTBL(),TOTBAL,TDUE
	type public String ACNRELC,CRID,CBC,dat,DIST1AF,FCLD,GRP,IO,%MSKD,PIO,ZERO,V
	type public Date CRLRD,ODT
	type Number A,NAM,PMT,STATUS,TRANS
	type String APPEND,CRLMT,DATA,DATA1,N
	
	if 'DIST1AF.length() set DIST1AF=12
	set N="" 
	set NAM=1

	type RecordCIF cifdata=Db.getRecord("CIF","ACN=:ACN") 
	
	type ResultSet rs=Db.select("NAM","RELCIF,CIF","CID=:CID")
	if rs.isEmpty() quit ""
	while rs.next() do {
		set NAM=NAM+1
		set NAM(2)=rs.getRow()
		}
	
	set COUNT=COUNT+1
	if IO'=PIO if COUNT#10=1 use 0 write $C(46) if $X>70 write !
	set DATA="" 
	set DATA1=""
	set A=4
	if ODT>CRLRD set A=1	//Account hasn't been reported before

	// Length of record + appendages
	set V="0320"			
	set DATA=DATA_V	
	
	// TRW subscriber code
	set V=CRID	
	set DATA=DATA_V

	set V=CID				//Post-conversion

	//CID
	set V=V.extract(1,17)
	set V=ZERO.extract(1,17-V.length())_V	
	set DATA=DATA_V

	// 4-ACTTYP	
	set V=CBC
	set:'V.length() V="31" 
	set V=ZERO.extract(1,2-V.length())_V 
	set DATA=DATA_V

	// Field 5 - Status
	do STATUS set V=ZERO.extract(1,2-V.length())_V 
	set DATA=DATA_V set STATUS=V

	// 6-Current pay method - not used
	set V="00000000000" 
	set DATA=DATA_V			

	//Term
	set V=ONP do TERM 
	set V=ZERO.extract(1,3-V.length())_V 
	set DATA=DATA_V

	// // Field 8 - Tran type
	set V=4 set:ODT>CRLRD V=1 
	set TRANS=V		

	set DATA=DATA_TRANS
	if '(TRWTBL(STATUS,1).order()).isNull() set TRWTBL(STATUS,1)=0 
	set TRWTBL(STATUS,4)=0 
	set TRWTBL(STATUS,7)=0
	set TRWTBL(STATUS,1)=TRWTBL(STATUS,1)+1

	// 9
	set V=ODT.toString(%MSKD.get()) do DATEB 
	set V=ZERO.extract(1,6-V.length())_V 
	set DATA=DATA_V

	set V="000000" 

	// 10
	if FCLD.length() set V=FCLD.toDate().toString(%MSKD.get()) do DATEB
	set DATA=DATA_V	
	set V=data.toString().piece($C(9),14) 
	set V=$S(V?5N:V.toDate().toString(%MSKD.get()),1:"") if V.length() do DATEB

	// 11
	set V=ZERO.extract(1,6-V.length())_V 
	set DATA=DATA_V

	// 12-HIGH
	set V=data.toString().piece($C(9),154)
	set V=V.toNumber().roundDec(0)
	set V=ZERO.extract(1,7-V.length())_V 
	set DATA=DATA_V 
	
	// 13-BAL
	set V=BAL.roundDec(0) 
	set V=ZERO.extract(1,7-V.length())_V 
	set DATA=DATA_V

	set TOTBAL=TOTBAL+V
	if STATUS=11!(STATUS=13) set V=0
	else  set V=TDUE.roundDec(0)
	set:V<0 V=0

	// 14-Past due
	set V=ZERO.piece(1,7-V.length())_V
	set DATA=DATA_V
	set TOTPAST=TOTPAST+V

	// PMT
	set V=(PMT*DIST1AF)/12
	set V=V.toNumber().roundDec(0)
	set V=ZERO.extract(1,7-V.length())_V
	set DATA=DATA_V	

	//TAXID
	set V=cifdata.taxid
	set V=V.extract(1,3)_V.extract(5,6)_V.extract(8,11)
	set DATA=DATA_V	

	//MAR
	set V=$J("",2) 
	set DATA=DATA_V
	set V=cifdata.mar
	set V=V.extract(1,1) 
	set V=V_$J("",1-V.length()) 
	set DATA=DATA_V

	// ZIP
	set V=cifdata.pzip
	set V=V.extract(1,6) 
	set V=ZERO.extract(1,6-V.length())_V 
	set DATA=DATA_V

	//ACNRELC
	set V=ACNRELC 
	set V=$S(V=1:1,1:2) 
	set DATA=DATA_V

	//Cycle code N/A
	set V=$J("",2) 
	set DATA=DATA_V


	// 22-NAME
	set V=NAM(1).extract(1,32) 
	set V=V_$J("",32-V.length()) 
	set DATA=DATA_V 

	// Code Jr,Sr,etc.
	set V=$J("",1) 
	set DATA=DATA_V

	// PCNTRY
	set V=cifdata.pcntry
	set V=V.extract(1,32) 
	set V=V_$J("",32-V.length()) 
	set DATA=DATA_V


	// CITY
	set V=cifdata.pcity
	set V=V.extract(1,30) 
	set V=V_$J("",30-V.length()) 
	set DATA=DATA_V

	// STATE
	set V=cifdata.pstate
	set V=V.extract(1,2) 
	set V=V_$J("",2-V.length()) 
	set DATA=DATA_V

	// ZIP
	set V=cifdata.pzip
	set V=V.extract(1,32) 
	set V=V_$J("",32-V.length()) 
	set DATA=DATA_V

	// OWN
	set V=cifdata.own
	set V=V.extract(1,1) 
	set V=V_$J("",1-V.length()) 
	set DATA=DATA_V

	// CRLMT
	set dat=data.toString().piece($C(9),19)
	set CRLMT=dat.toNumber().roundDec(0)
	set CRLMT=ZERO.extract(1,7-CRLMT.length())_CRLMT
	set DATA=DATA_CRLMT

	// 29-Type of account
	set V=$S(GRP="RC":"R",1:"I") 
	set DATA=DATA_V

	// Name sequence code
	set V="U" set DATA=DATA_V              //Name sequence code

	// Date closed - not used
	set V="000000" set DATA=DATA_V

	// Reserved - not used
	set V=$J("",13) set DATA=DATA_V
	set APPEND=""
	if '(NAM(2).get()).isNull() do {
      		set V=NAM(2).extract(1,32) 
 		set V=V_$J("",32-V.length()) 
		set APPEND=APPEND_"A12"_V_$J("",11)_TRANS_" "
        	}        	
	else  set APPEND="A11"_$J("",43)_TRANS_" "    // Dummy appendage
	set DATA=DATA_APPEND
	set TREC=TREC+2
	
	use IO write DATA if IO=$I!($I.piece("]",2)=IO.piece(":",2)) write !
	quit 


	
HDR	// 

	type public String CRSTUD,CRCTRL,DATA,IO,PROD,REPORT,TAPEID
	
	set DATA="0320HEADERD"_CRCTRL_TAPEID_REPORT_"00"_CRSTUD_8105_CRSTUD_$J("",16)_PROD_$J("",255)
	
	use IO write DATA if IO=$I!($I.piece("]",2)=IO.piece(":",2)) write !
	quit 


	
STATUS	//

	type public String V
	type public Number STAT,SCHSEQ,DSEQ,DIST1AF
	if STAT=4 set V=13 quit    // Closed account, not rated
	set V=SCHSEQ-DSEQ 
	set V=12*V/DIST1AF
	set V=$S(V<2:11,V<3:71,V<4:78,V<5:80,V<6:82,1:84)
	quit 
	


TERM	//

	type public Number CBC,DSEQ,SCHSEQ
	type public String DIST1AF,V
	type Number num
	type String A,B
	if 'V.length()!('DIST1AF.length()) set V="010" quit 
	set V=V*12/DIST1AF
	set A=0 
	set B=CBC 
	if B="08"!(B=19)!(B=25)!(B=26) set A=1
	set num=V/12
	set V=$S(A:num.roundDec(0),1:V.toNumber().roundDec(0))
	quit 
	
DATEB	//

	type public String V 
	if V["1841" set V="01/01/01"
	set V=V.translate("/","")
	quit 
	
TRLR	//

	type public String DATA,IO,PROD,TOTPAST,TOTBAL,TREC,ZERO
	
	set TOTBAL=ZERO.extract(1,11-TOTBAL.length())_TOTBAL
	set TOTPAST=ZERO.extract(1,11-TOTPAST.length())_TOTPAST
	set TREC=ZERO.extract(1,9-TREC.length())_TREC
	set DATA="0320TRAILER"_TOTBAL_TOTPAST_TREC_$J("",9)_PROD_$J("",263)
	use IO write DATA if IO=$I write !
	quit

EXIT	//

	type public Number TREC,TEXE,TERR
	type public String IO
	type Number A
	close IO
	set A=0 

	// Save last report date
	type RecordCUVAR cuvar= Class.new("RecordCUVAR")
	set cuvar.crlrd=%SystemDate
	do cuvar.save()

	use 0 write !!,$$^MSG("3976"),+TREC    // Total records on file =
	use 0 write !!,$$^MSG("3977"),TEXE     // Total records processed =
	use 0 write !!,$$^MSG("3975"),TERR     // Total account errors =
	if TERR use 0 write $$^MSG("3971")     //   (See daily exception report for detail)
	quit 

	
QUIT	//

	// Function exited
	use 0 write !!,$$^MSG("1130") do ^%T
	quit 
	
LOGERR	// Log error in exception file

	type public Number CID,data,%ZTSEQ
	type public String ET,RM
	// Credit Bureau File Extract
	do LOG^UTLEXC($T(+0),"*",$$^MSG(7066)_")|1",CID.get(),%ZTSEQ.get(),RM.get(),$S(CID.get():+$P(data.get(),$C(9),4),1:""))   //Credit Bureau File Extract
	kill ET,%ZTSEQ
	quit 
 #OPTION ResultClass ON
Public String vSIG()	quit "60477^65450^Pat Kelly^9817"	// Signature - LTD^TIME^USER^SIZE
