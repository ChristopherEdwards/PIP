R01S482	// SCA538 - Default Avg Int Payment Change Notice
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:50 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1=(%SystemDate-1).toString("MM/DD/YEAR")
	type String VIN2="ALL"

	set RID="SCA538"
	set RN="Default Avg Int Payment Change Notice"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[LN]BNDT|||D EXT^DBSQRY||T|Billing Last Date|||||"
	set %TAB("VIN2")="|255||[LN]CID|[LN]CID:DISTINCT:NOVAL||set CID=X D EXT^DBSQRY||T|Account Number|||||"

	set %READ="IO/REQ,VIN1#0,VIN2#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String VIN1,VIN2
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ADDR2,ADDR3,ADDR4,ADDR5,ADDR6,BALCUT,CAD1,CAD2,CAD3,CCITY,CNAM,CONAM,CSTATE,CZIP,NEWIRN,NEWPMT,PRIRN,PRPMT,RID,RN,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA538",RN="Default Avg Int Payment Change Notice"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA538","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[LN]BNDT "_VIN1,SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[LN]CID "_VIN2,SEQ=SEQ+1
		set DQQRY(SEQ)="[LN]LAIRDT=[LN]BNDT+1",SEQ=SEQ+1
		set DQQRY(SEQ)="([LN]PCIDSTAT=0)!([LN]PCIDSTAT="""")",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("LN,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC2|"_"Billing Last Date"_"|VIN1|"_VIN1.get()
		set VBNRINFO("PROMPTS",2)="WC2|"_"Account Number"_"|VIN2|"_VIN2.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Default Avg Int Payment Change Notice"
		set VBNRINFO("PGM")="R01S482"
		set VBNRINFO("RID")="SCA538"
		set VBNRINFO("TABLES")="LN,CIF"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,LN]BNDT"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,LN]CID"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:2 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	set (VR,VRG)=""
	for vI=1:1:24 set VRF(vI)=""			// Initialize print buffers
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"LN.BNDT,LN.CID,LN.LAIRDT,CIF.NAM,LN.ONP,LN.BSEQ,LN"
	set VSELECT=VSELECT_".PMT,LN.IRN,LN.PMTORG,LN.IRO"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"LN,CIF",VWHERE,"LN.BNDT,LN.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2
	set vovc1="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2
	set vovc1=vc1,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10
	set vc1=V.piece($C(9),1)			// LN.BNDT
	set vc2=V.piece($C(9),2)			// LN.CID
	set vc3=V.piece($C(9),3)			// LN.LAIRDT
	set vc4=V.piece($C(9),4)			// CIF.NAM
	set vc5=V.piece($C(9),5)			// LN.ONP
	set vc6=V.piece($C(9),6)			// LN.BSEQ
	set vc7=V.piece($C(9),7)			// LN.PMT
	set vc8=V.piece($C(9),8)			// LN.IRN
	set vc9=V.piece($C(9),9)			// LN.PMTORG
	set vc10=V.piece($C(9),10)			// LN.IRO
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	if 'VFMQ do VOM2
	set vs(1)=0,vs(2)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	set VR=VR+1,(VRG,VSEQ)=1			// Repeat field
	if 'vskp(2).get() do VDTL2 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(2)
	type Public String vc1,vovc1,vc2,vovc2
	type Number vb1,vb2
	set (vb1,vb2)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,VH0=1
	if VH0.get() do VOM2				// Flush print buffer at page break
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(2)=VT(2)+1
	quit

VDTL2	// Detail
	type public String ADDR2,ADDR3,ADDR4,ADDR5,ADDR6,BALCUT,CAD1,CAD2,CAD3,CCITY,CNAM,CSTATE,CZIP,IOSL,NEWIRN,NEWPMT,PRIRN,PRPMT,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc10,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2

	if VLC+24>IOSL do VHDG0 quit:VFMQ
	set VRG=1

	do VP1 quit:VFMQ!verror.get()  set V=$E(CNAM,1,20) set VL=V
	set VL=VL_$J("",53-VL.length())_"Loan Number:"
	set VL=VL_$J("",66-VL.length())_$J(vc2,12)
	do VOM
	do VP2 quit:VFMQ!verror.get()  set V=$E(CAD1,1,40) set VL=V
	set VL=VL_$J("",43-VL.length())_"Effective Change Date:"
	set VL=VL_$J("",68-VL.length())_$J($$DAT^%ZM(vc3),10)
	do VOM
	do VP3 quit:VFMQ!verror.get()  set V=$E(CAD2,1,40) set VL=V
	if 'VL.translate(" ").isNull() do VOM
	do VP4 quit:VFMQ!verror.get()  set V=$E(CAD3,1,40) set VL=V
	if 'VL.translate(" ").isNull() do VOM
	do VP5 quit:VFMQ!verror.get()  set V=$E(CCITY,1,20) set VL=V
	do VP6 quit:VFMQ!verror.get()  set V=$E(CSTATE,1,2)
	set VL=VL_$J("",21-VL.length())_V
	do VP7 quit:VFMQ!verror.get()  set V=$E(CZIP,1,10)
	set VL=VL_$J("",25-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="               "_"INTEREST RATE AND PAYMENT ADJUSTMENT NOTICE"
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                                     "_"CURRENT           NEW"
	do VOM
	set VL="                                "_"--------------------------"
	do VOM
	set VL="                  "_"INTEREST"
	set VL=VL_$J("",27-VL.length())_"RATE"
	do VP8 quit:VFMQ!verror.get()  set V=$J(PRIRN,8,5)
	set VL=VL_$J("",36-VL.length())_V
	set VL=VL_$J("",50-VL.length())_$J(NEWIRN,8,5)
	do VOM
	set VL="                        "_"PAYMENT"
	set VL=VL_$J("",32-VL.length())_$J($FN(PRPMT,",",2),12)
	set VL=VL_$J("",46-VL.length())_$J($FN(NEWPMT,",",2),12)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set V=vc4,VO=V set V=$E(V,1,40) do VP9 quit:VFMQ!verror.get()  set VL=V
	set VL=VL_$J("",45-VL.length())_"The new payment was calculated "
	do VOM
	do VP10 quit:VFMQ!verror.get()  set V=$E(ADDR2,1,40) set VL=V
	set VL=VL_$J("",45-VL.length())_"using a balance of "
	set VL=VL_$J("",64-VL.length())_$J($FN(BALCUT,",",2),4)
	do VOM
	do VP11 quit:VFMQ!verror.get()  set V=$E(ADDR3,1,40) set VL=V
	set VL=VL_$J("",45-VL.length())_"and "
	set VL=VL_$J("",49-VL.length())_$J(vc5-vc6,3)
	set VL=VL_$J("",53-VL.length())_"payments remaining."
	do VOM
	do VP12 quit:VFMQ!verror.get()  set V=$E(ADDR4,1,40) set VL=V
	do VOM
	do VP13 quit:VFMQ!verror.get()  set V=$E(ADDR5,1,40) set VL=V
	set VL=VL_$J("",50-VL.length())_"NEW PAYMENT = "
	set VL=VL_$J("",64-VL.length())_$J($FN(NEWPMT,",",2),4)
	do VOM
	do VP14 quit:VFMQ!verror.get()  set V=$E(ADDR6,1,40) set VL=V
	do VOM
	set VL="" do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ADDR2,ADDR3,ADDR4,ADDR5,ADDR6,BALCUT,CAD1,CAD2,CAD3,CCITY,CNAM,CONAM,CSTATE,CZIP,NEWIRN,NEWPMT,PRIRN,PRPMT,RID,RN,VL,vc1,vc10,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	if VRG do VOM1 quit				// Store line image in print buffer

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit


VOM1	//
	type Public Number vcrt,vlc,VLC,VR,VRF(),VRG,VSEQ
	type Public String VL
	type Number DONE,I
	set DONE=0
	for  do { quit:DONE
		if VR<2 do { quit
			if VR>1 set VRF(VSEQ)=VRF(VSEQ)_$J("",((VR-1)*80)-VRF(VSEQ).length())
			set VRF(VSEQ)=VRF(VSEQ)_VL,VL="",VSEQ=VSEQ+1
			set DONE=1
			}
		for I=1:1:24 do {
			if vcrt<2 write VRF(I),!
			if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VRF(I))
			set VRF(I)=""
			}
		set VLC=VLC+24
		if VR=999 set VR=0,VRG=0,DONE=1		// End of report
		set VR=1				// Reset repeat field buffer
		}

	quit


VOM2	// Flush print buffer
	type Public Number VR,VRG
	type Public String VL
	if VL="",'VR quit
	if VR set VRG=1,VR=999
	do VOM
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: CNAM

 type public String CNAM,CONAM

 set CNAM=CONAM
	quit

VP2	// Column pre-processor - Variable: CAD1

 type public String CAD1
 set CAD1=CUVAR.cad1
	quit

VP3	// Column pre-processor - Variable: CAD2

 type public String CAD2
 set CAD2=CUVAR.cad2
	quit

VP4	// Column pre-processor - Variable: CAD3

 type public String CAD3
 set CAD3=CUVAR.cad3
	quit

VP5	// Column pre-processor - Variable: CCITY

 type public String CCITY
 set CCITY=CUVAR.ccity
	quit

VP6	// Column pre-processor - Variable: CSTATE

 type public String CSTATE
 set CSTATE=CUVAR.cstate
	quit

VP7	// Column pre-processor - Variable: CZIP

 type public String CZIP
 set CZIP=CUVAR.czip
	quit

VP8	// Column pre-processor - Variable: PRIRN

	type public String vc6,vc7,vc8,vc9,vc10
 type public Number CID,NEWIRN,PRIRN
 type public String BALCUT,NEWPMT,PRPMT

 type Number PSEQ,SEQ

 // Prior bill sequence
 set PSEQ=""

 set SEQ=vc6
 type ResultSet rslnbil1=Db.select("SCHSEQ","LNBIL1","CID=:CID AND SCHSEQ<:SEQ","SCHSEQ DESC")

 if rslnbil1.next() set PSEQ=rslnbil1.getCol("SCHSEQ")

 if PSEQ>0 do {

	type RecordLNBIL1 plnbil1=Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:PSEQ")
	// Total amount due per payment (prior)
	set PRPMT=plnbil1.casd
	if 'PRPMT.get() set PRPMT=vc7

	// Billing rate (prior)
	set PRIRN=plnbil1.cirn
	if 'PRIRN.get() set PRIRN=vc8
	}
 else  do {

	// Within first period
	set PRPMT=vc9	// Original payment amount
	set PRIRN=vc10		// Original interest rate
	}

 type RecordLNBIL1 nlnbil1=Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:SEQ")

 // Total amount due per payment (new)
 set NEWPMT=nlnbil1.casd

 // Billing rate (new)
 set NEWIRN=nlnbil1.cirn
 if 'NEWIRN.get() set NEWIRN=vc8

 // Bal for accr on billing cutoff date
 set BALCUT=nlnbil1.copb
	quit

VP9	// Column post-processor - [SYSDEV,CIF]NAM

 type public Number CID
 type Number ACN

 type RecordLN ln=Db.getRecord("LN","CID=:CID")

 set ACN=ln.ACN
 do ^UTLADDR(,,6,0,"CIF",ACN)
	quit

VP10	// Column pre-processor - Variable: ADDR2

 type public String ADDR(),ADDR2

 set ADDR2=ADDR(2)
	quit

VP11	// Column pre-processor - Variable: ADDR3

 type public String ADDR(),ADDR3

 set ADDR3=ADDR(3)
	quit

VP12	// Column pre-processor - Variable: ADDR4

 type public String ADDR(),ADDR4

 set ADDR4=ADDR(4)
	quit

VP13	// Column pre-processor - Variable: ADDR5

 type public String ADDR(),ADDR5

 set ADDR5=ADDR(5)
	quit

VP14	// Column pre-processor - Variable: ADDR6

 type public String ADDR(),ADDR6

 set ADDR6=ADDR(6)
	quit
