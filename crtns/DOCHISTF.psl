DOCHISTF(RecordDOCHIST dochist, String vpar, Boolean vparNorm) // DOCHIST - Document History Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              04/03/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dochist.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dochist,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dochist,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("HISTID").exists() do vkchged quit              // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DOCHIST",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DOCHIST","HISTID = :dochist.histid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String HISTID

	type RecordDOCHIST dochist = Db.getRecord("DOCHIST","HISTID=:HISTID")
	if (%ProcessMode = 2) do {
		do dochist.setMode(2)

		do DOCHISTF(dochist,vpar)
	}
	else  do VINDEX(dochist)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDOCHIST dochist

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DOCHIST","HISTID = :dochist.histid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dochist)) K:$D(vobj(dochist,1,1)) ^DOCHIST(vobj(dochist,-3)) S ^DOCHIST(vobj(dochist,-3))=vobj(dochist)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(dochist,1,1)) N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(dochist,1,1)) S vS1=vS1+1,^DOCHIST(vobj(dochist,-3),vS1)=$E(vobj(dochist,1,1),vS2,vS2+449)
			#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.dochist) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDOCHIST dochist

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.dochist)                  // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DOCHIST(vobj(dochist,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordDOCHIST dochist

	if dochist.chanid.isNull() do vreqerr("CHANID") quit
	if dochist.creation.isNull() do vreqerr("CREATION") quit
	if dochist.generator.isNull() do vreqerr("GENERATOR") quit
	if dochist.hdata.isNull() do vreqerr("HDATA") quit
	if dochist.mimetype.isNull() do vreqerr("MIMETYPE") quit
	if dochist.tmpltid.isNull() do vreqerr("TMPLTID") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDOCHIST dochist

	if dochist.histid.isNull() do vreqerr("HISTID") quit

		if vx("CHANID").exists(),dochist.chanid.isNull() do vreqerr("CHANID") quit
		if vx("CREATION").exists(),dochist.creation.isNull() do vreqerr("CREATION") quit
		if vx("GENERATOR").exists(),dochist.generator.isNull() do vreqerr("GENERATOR") quit
		if vx("HDATA").exists(),dochist.hdata.isNull() do vreqerr("HDATA") quit
		if vx("MIMETYPE").exists(),dochist.mimetype.isNull() do vreqerr("MIMETYPE") quit
		if vx("TMPLTID").exists(),dochist.tmpltid.isNull() do vreqerr("TMPLTID") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DOCHIST","MSG",1767,"DOCHIST."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDOCHIST dochist
	if 'dochist.tmpltid.isNull() set vfkey("^DOCTMPLT("_""""_dochist.tmpltid_""""_")")="DOCHIST(TMPLTID) -> DOCTMPLT"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDOCHIST dochist
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DOCTMPLT",":dochist.tmpltid") set vERRMSG = $$^MSG(8563,"DOCHIST(TMPLTID) -> DOCTMPLT") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDOCHIST dochist

	if dochist.histid.length()>36 set vRM = $$^MSG(1076,36) do vdderr("HISTID", vRM) quit
	set X = dochist.chanid if 'X.isNull(),'Db.isDefined("UTBLCHANNEL","X") set vRM = $$^MSG(1485,X) do vdderr("CHANID", vRM) quit
	set X = dochist.creation if 'X.isNull(),X'?1.14N,X'?1"-"1.13N set vRM=$$^MSG(742,"N") do vdderr("CREATION", vRM) quit
	if dochist.generator.length()>255 set vRM = $$^MSG(1076,255) do vdderr("GENERATOR", vRM) quit
	if dochist.mimetype.length()>64 set vRM = $$^MSG(1076,64) do vdderr("MIMETYPE", vRM) quit
	set X = dochist.tmpltid if 'X.isNull(),'Db.isDefined("DOCTMPLT","X") set vRM = $$^MSG(1485,X) do vdderr("TMPLTID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DOCHIST","MSG",979,"DOCHIST."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordDOCHIST dochist) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("CREATION").exists() do vi1(.dochist)
	}
	do vi1(.dochist)

	quit
	

vi1(RecordDOCHIST dochist) // Maintain CREATION index entries (Creation Time Stamp)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dochist.creation
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = dochist.histid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^DOCHIST(vobj(dochist,-3)))#2,'$D(^XDOC("CREATION",v2,v3)) do vidxerr("CREATION")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XDOC("CREATION",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CREATION").exists() set v2=vx("CREATION").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XDOC("CREATION",v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DOCHIST")

	while ds.next() do {
		type RecordDOCHIST dochist=ds.getRecord("DOCHIST")
		if vlist.contains("VINDEX") do VINDEX(.dochist) quit
		if vlist.contains("CREATION") do vi1(.dochist)
	}

	quit


public VIDXBLD1(RecordDOCHIST dochist, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.dochist) quit
	if vlist.contains("CREATION") do vi1(.dochist)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DOCHIST","MSG",1225,"DOCHIST."_di)

	quit


vkchged // Access key changed

	type public RecordDOCHIST dochist

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("HISTID")
	set voldkey = vux.piece("|",1),vobj(dochist,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(dochist,-3) = vnewkey // Copy new keys into object
	type RecordDOCHIST vnewrec = dochist.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DOCHIST",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(dochist,-3) = vux.piece("|",1)                // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordDOCHIST dochist
	type public String vpar

	do Db.delete("DOCHISTIDLINK","HISTID=:dochist.histid",vpar) // Cascade delete

	quit

VIDXPGM()	quit "DOCHISTF"	// Location of index program

