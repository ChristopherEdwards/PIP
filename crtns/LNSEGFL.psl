LNSEGFL(RecordLNSEG lnseg, String vpar, Boolean vparNorm) // LNSEG - Loan Account Segment Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (27)             02/12/2007
	// Trigger Definition (6)                      06/25/2007
	// Journal File Definition (3)                 02/09/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnseg.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnseg,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnseg,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnseg.cid
	type String SEGMENT = lnseg.segment

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEGMENT").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNSEG",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACNSEG","CID = :lnseg.cid and SEGMENT = :lnseg.segment") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEGMENT

	type RecordLNSEG lnseg = Db.getRecord("LNSEG","CID=:CID,SEGMENT=:SEGMENT")
	if (%ProcessMode = 2) do {
		do lnseg.setMode(2)

		do LNSEGFL(lnseg,vpar)
	}
	else  do VINDEX(lnseg)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNSEG lnseg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACNSEG","CID = :lnseg.cid and SEGMENT = :lnseg.segment") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnseg)) S ^ACN(vobj(lnseg,-3),200,vobj(lnseg,-4))=vobj(lnseg)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnseg)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lnseg) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNSEG lnseg

	if vpar["/INDEX/" do VINDEX(.lnseg)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lnseg)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(lnseg,-3),200,vobj(lnseg,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNSEG lnseg

	if lnseg.cls.isNull() do vreqerr("CLS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNSEG lnseg

	if lnseg.cid.isNull() do vreqerr("CID") quit
	if lnseg.segment.isNull() do vreqerr("SEGMENT") quit

		if vx("CLS").exists(),lnseg.cls.isNull() do vreqerr("CLS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNSEG","MSG",1767,"LNSEG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNSEG lnseg
	if 'lnseg.cid.isNull() set vfkey("^ACN("_""""_lnseg.cid_""""_","_50_")")="LNSEG(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNSEG lnseg
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnseg.cid") set vERRMSG = $$^MSG(8563,"LNSEG(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("INDEX").exists()!vx("INTFRE").exists()!vx("ICHLD").exists()!vx("ICHND").exists()!vx("INTMAT").exists()!vx("INTSPR").exists()!vx("RNDMTD").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEGTERM").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNSEG lnseg
	if vx("").order().isNull() do AUDIT^UCUTILN(lnseg,.vx(),1,"|") quit
	if vx("INDEX").exists()!vx("IRN").exists()!vx("INTSPR").exists()!vx("RNDMTD").exists()!vx("INTMAT").exists()!vx("INTFRE").exists()!vx("ICHND").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEGTERM").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnseg,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert of Loan Segment

	type public RecordLNSEG lnseg
	/*
	---- Revision History--------------------------------------------------------
	
	01/05/07 - KUMARB - CR24680
		Created new trigger
	*/

	type public Boolean ER

	if 'lnseg.index.isNull() do { quit:ER 
		// Interest Change Frequency is required with Interest Index
		if lnseg.intfre.isNull() do Runtime.setErrXBAD("LNSEG",208) quit:ER 

		// Int Next Change Date cannot be earlier than the system date
		if lnseg.ichnd<%SystemDate do Runtime.setErrXBAD("LNSEG",204) quit:ER 

		// Seg Int Last Change Date is required with Segment Int Index
		if lnseg.ichld.isNull() do Runtime.setErrXBAD("LNSEG",224) quit:ER 
		}
	
	quit

vau1 // Trigger AU_INDEX - After Update of Interest Index

	type public RecordLNSEG lnseg
	/*
	---- Revision History--------------------------------------------------------
	
	01/05/07 - KUMARB - CR24680
		Created new trigger
	*/
	
	type public Boolean ER
	
	/*
	When the Interest Index, LNSEG.INDEX, contains a value,
	Interest Change Frequency, LNSEG.INTFRE and LNSEG.ICHLD
	must also contain a value.
	*/
	
	if 'lnseg.index.isNull() do { quit:ER
		// Interest Change Frequency is required with Interest Index
		if lnseg.intfre.isNull() do Runtime.setErrXBAD("LNSEG",208) quit:ER 

		// Seg Int Last Change Date is required with Segment Int Index
		if lnseg.ichld.isNull() do Runtime.setErrXBAD("LNSEG",224) quit:ER 

		// Int Next Change Date cannot be less than the system date
		if lnseg.ichnd<%SystemDate do Runtime.setErrXBAD("LNSEG",204) quit:ER 
		}
	quit 

vau2 // Trigger AU_SEGTERM - After Update of Segment Term

	type public RecordLNSEG lnseg
	/*
	---- Revision History--------------------------------------------------------
	
	01/05/07 - KUMARB - CR24680
		Created new trigger
	*/
	
	type public Boolean ER
	
	type Number I
	
	// Segment Term must contain a valid term
	if 'lnseg.segterm.isNull() do { quit:ER
		set lnseg.segmdt = $$EXT^UMDT(lnseg.segterm, lnseg.segstart)
		}
	quit 
	

vbi1 // Trigger BEFORE_INSERT - Before Insert of Loan Segment

	type public RecordLNSEG lnseg
	/*
	---- Revision History--------------------------------------------------------
	
	06/25/07 - KUMARB - 27764
		Modified the line calculates the Index Change Last Date
		to pass the third parameter as "1" in method nextFreDate
		instead of "00001", so CTL indicates position 1 to use reverse
		(backwards) calculation instead of position 5  which 
		Automatically bump by at least one FULL cycle. This prevents
		lnseg.ichld from being intialized to a date in the future.
	
	01/05/07 - KUMARB - CR24680
		Created new trigger
	*/
	
	type public Boolean ER
	type public Number CID, RATE
	type public String ET
	
	type String PAR()
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	// Segments in use flag must be on
	if 'ln.segments do Runtime.setErrMSG("LNSEG",7893) quit:ER
	
	if lnseg.segstart.isNull() set lnseg.segstart=%SystemDate
	
	// Segment Term must contain a valid term
	if 'lnseg.segterm.isNull() set lnseg.segmdt = $$EXT^UMDT(lnseg.segterm, lnseg.segstart) quit:ER
	
	if 'lnseg.intfre.isNull() do { quit:ER
		type Date NJD
		
		set NJD = $$FRSTDATE^ACNFUNCS(lnseg.segstart,lnseg.intfre,1) quit:ER
		set lnseg.ichnd = NJD
		
		set NJD = (lnseg.ichnd).nextFreqDate(lnseg.intfre,,1) quit:ER
		if NJD<lnseg.segstart set NJD = lnseg.segstart
		set lnseg.ichld = NJD
		}

	// Default interest rate if INDEX is defined and IRN is null
	if ('lnseg.index.isNull()),(lnseg.irn.isNull()) do { quit:ER
		set ER=0
		set PAR("INDEX")=lnseg.index
		set PAR("SPREAD")=lnseg.intspr
		set PAR("ROUND")=lnseg.rndmtd
		set PAR("LIMIT")=1
		set PAR("MATRIX")=lnseg.intmat
		set PAR("SEGMENT")=lnseg.segment
		do CTL^UINDX(.ln,lnseg.ichld,lnseg.bal,.PAR())
		
		// Use ET error message
																if ER,'ET.get().isNull() do Runtime.setErrSTBLER("LN",ET) quit:ER
 		
		if 'ER set lnseg.irn=RATE
		}
		
	quit

vbu1 // Trigger BU_INTINFO - Before Update Interest Info

	type public RecordLNSEG lnseg
	do lnseg.setAuditFlag(1)
	/*
	---- Revision History--------------------------------------------------
	
	04/23/07 - SmithCD - CR 26550
		   Added more possible interest-related maintenance under the 
		   umbrella of effectived dated rate maintenance.
	
	01/05/07 - KUMARB - CR24680
		Created new trigger
	*/
	
	if ('(%EffectiveDate.get()).isNull()), (%EffectiveDate < %SystemDate) do {
		type String PAR()	
		type RecordLN ln = Db.getRecord("LN", "CID=:lnseg.cid")

		// Effective dated rate maintenance
		set PAR("PRCTYP") = 3
		set PAR("SEGMENT") = lnseg.segment
			
		if lnseg.isChanged("INDEX") set PAR("INDNAM") = lnseg.index
		if lnseg.isChanged("INTMAT") set PAR("MATNAM") = lnseg.intmat
		if lnseg.isChanged("IRN") set PAR("RATE") = lnseg.irn
		if lnseg.isChanged("INTSPR") set PAR("INTSPR") = lnseg.intspr
		if lnseg.isChanged("INTFRE") set PAR("INTFRE") = lnseg.intfre
		if lnseg.isChanged("RNDMTD") set PAR("RNDMTD") = lnseg.rndmtd
		if lnseg.isChanged("ICHND") set PAR("ICHND") = lnseg.ichnd
	
		do EXTERN^LNPTSRV(.ln, .PAR())
		}
	
	quit
	

vbu2 // Trigger BU_SEGTERM - Before Update of Segment Term

	type public RecordLNSEG lnseg
	do lnseg.setAuditFlag(1)

	/*
	---- Revision History--------------------------------------------------------
	
	05/31/07 - KUMARB - CR 27163
		Created new trigger.
	*/
	
	// Segment Term must contain a valid term
	if 'lnseg.segterm.isNull() set lnseg.segmdt = $$EXT^UMDT(lnseg.segterm, lnseg.segstart) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNSEG lnseg

	set X = lnseg.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnseg.segment if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEGMENT", vRM) quit
	set X = lnseg.acr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.ACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.bal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.BAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
	set X = lnseg.cpacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.CPACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.cpbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.CPBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.fcwo if 'X.isNull(),'Db.isDefined("STBLFCWO","X") set vRM = $$^MSG(1485,X) do vdderr("FCWO", vRM) quit
	if lnseg.fmdesc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FMDESC", vRM) quit
	set X = lnseg.ichld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHLD", vRM) quit
	set X = lnseg.ichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHND", vRM) quit
	if lnseg.index.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX", vRM) quit
	set X = lnseg.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNSEG]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
	set X = lnseg.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
	if lnseg.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
	set X = lnseg.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.oneagoacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.ONEAGOACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.oneagobal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.ONEAGOBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnseg.pcm.length()>3 set vRM = $$^MSG(1076,3) do vdderr("PCM", vRM) quit
	set X = lnseg.pmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.PMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnseg.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
	set X = lnseg.rpp if 'X.isNull(),'Db.isDefined("UTBLRPP","X") set vRM = $$^MSG(1485,X) do vdderr("RPP", vRM) quit
	set X = lnseg.segmdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGMDT", vRM) quit
	set X = lnseg.segstart if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGSTART", vRM) quit
	if lnseg.segterm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SEGTERM", vRM) quit
	set X = lnseg.twoagoacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.TWOAGOACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnseg.twoagobal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNSEG.TWOAGOBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNSEG","MSG",979,"LNSEG."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNSEG lnseg)	//LNSEG Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnseg)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lnseg)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lnseg)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lnseg)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.lnseg)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.lnseg)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordLNSEG lnseg)	// HIST_DELETE  Table HIST  History of Record Deletion for LNSEG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnseg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3477,lnseg.segment)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNSEG lnseg)	// HIST_INSERT  Table HIST  History for New Record in LNSEG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnseg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3475,lnseg.segment)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNSEG lnseg)	// HIST_UPDATE  Table HIST  History on Update of LNSEG

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnseg.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnseg.cid_","_lnseg.segment,"ACNSEG",vdi,vold,vnew,$G(EFD),$$^MSG(3476,lnseg.segment),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordLNSEG lnseg) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("INDEX").exists() do vi1(.lnseg)
		if vx("INTMAT").exists() do vi2(.lnseg)
	}
	do vi1(.lnseg)
	do vi2(.lnseg)

	quit
	

vi1(RecordLNSEG lnseg) // Maintain INDEXSEG index entries (Segment Interest Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lnseg.index
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = lnseg.cid
	type String v4 = lnseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(lnseg,-3),200,vobj(lnseg,-4)))#2,'$D(^XREF("INDEXSEG",v2,v3,v4)) do vidxerr("INDEXSEG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("INDEXSEG",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INDEX").exists() set v2=vx("INDEX").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("INDEXSEG",v2,v3,v4)
	#ENDBYPASS
	quit

vi2(RecordLNSEG lnseg) // Maintain MATRIXSG index entries (Segment Interest Matrix)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lnseg.intmat
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = lnseg.cid
	type String v4 = lnseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(lnseg,-3),200,vobj(lnseg,-4)))#2,'$D(^XREF("MATATSEG",v2,v3,v4)) do vidxerr("MATRIXSG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("MATATSEG",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INTMAT").exists() set v2=vx("INTMAT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("MATATSEG",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNSEG")

	while ds.next() do {
		type RecordLNSEG lnseg=ds.getRecord("LNSEG")
		if vlist.contains("VINDEX") do VINDEX(.lnseg) quit
		if vlist.contains("INDEXSEG") do vi1(.lnseg)
		if vlist.contains("MATRIXSG") do vi2(.lnseg)
	}

	quit


public VIDXBLD1(RecordLNSEG lnseg, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lnseg) quit
	if vlist.contains("INDEXSEG") do vi1(.lnseg)
	if vlist.contains("MATRIXSG") do vi2(.lnseg)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNSEG","MSG",1225,"LNSEG."_di)

	quit


vkchged // Access key changed

	type public RecordLNSEG lnseg

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEGMENT").exists() set vux("SEGMENT") = vx("SEGMENT")
	do vkey(1) set voldkey = lnseg.cid_","_lnseg.segment   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnseg.cid_","_lnseg.segment   // Copy new keys into object
	type RecordLNSEG vnewrec = lnseg.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNSEG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNSEG lnseg

	if vux("CID").exists() set lnseg.cid = vux("CID").piece("|",i)
	if vux("SEGMENT").exists() set lnseg.segment = vux("SEGMENT").piece("|",i)
	quit

VIDXPGM()	quit "LNSEGFL"	// Location of index program

