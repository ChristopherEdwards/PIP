V00S217(%ProcessMode,RecordEFTPAY fEFTPAY)   // -  - SID= <INTPAYINSTCD> NDPO Instruction Codes
 ;;Copyright(c)2006 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/24/2006 11:22 - kini
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,INSCD1,INSAD1,INSCD2,INSAD2,INSCD3,INSAD3,INSCD4,INSAD4,INSCD5,INSAD5",VSID="INTPAYINSTCD",VPGM=$T(+0),VSNAME="NDPO Instruction Codes"
 set vPSL=1
 set KEYS(1)=fEFTPAY.CID
 set KEYS(2)=fEFTPAY.SEQ
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fEFTPAY),VDA1(.fEFTPAY),^DBSPNT()

 // Display Pre-Processor
 //
 if '%ProcessMode do VNEW(.fEFTPAY),VDSPPRE(.fEFTPAY) quit:$G(ER)  do VPR(.fEFTPAY),VDA1(.fEFTPAY)
 if %ProcessMode do VLOD(.fEFTPAY) quit:$G(ER)  do VDSPPRE(.fEFTPAY) quit:$G(ER)  do VPR(.fEFTPAY),VDA1(.fEFTPAY)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fEFTPAY)
	quit


VNEW(RecordEFTPAY fEFTPAY) // Initialize arrays if %O=0
 
 do VDEF(.fEFTPAY)
 do VLOD(.fEFTPAY)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordEFTPAY fEFTPAY)
 if fEFTPAY.DATECRE="" set fEFTPAY.DATECRE=TJD
 if fEFTPAY.TIMECRE="" set fEFTPAY.TIMECRE=$P($H,",",2)
 if fEFTPAY.UID="" set fEFTPAY.UID=%UID
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordEFTPAY fEFTPAY) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordEFTPAY fEFTPAY) // Display screen prompts
 set VO="39||13|"
 set VO(0)="6|0"
 set VO(1)=$C(6,17,1,0,0,0,0,0,0,0)_"11Tl"
 set VO(2)=$C(6,18,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(3)=$C(6,19,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(4)=$C(6,20,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(5)=$C(6,21,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(6)=$C(6,22,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(7)=$C(6,23,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(8)=$C(6,24,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(9)=$C(6,25,38,0,0,0,0,0,0,0)_"11Tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
 set VO(10)=$C(7,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(11)=$C(7,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(12)=$C(8,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(13)=$C(8,30,19,1,0,0,0,0,0,0)_"01T Instruction Codes "
 set VO(14)=$C(8,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(15)=$C(9,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(16)=$C(9,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(17)=$C(10,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(18)=$C(10,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(19)=$C(11,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(20)=$C(11,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(21)=$C(12,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(22)=$C(12,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(23)=$C(13,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(24)=$C(13,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(25)=$C(14,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(26)=$C(14,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(27)=$C(15,17,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(28)=$C(15,62,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(29)=$C(16,17,1,0,0,0,0,0,0,0)_"11Tm"
 set VO(30)=$C(16,18,36,0,0,0,0,0,0,0)_"11Tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"
 set VO(31)=$C(16,54,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(32)=$C(16,55,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(33)=$C(16,56,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(34)=$C(16,57,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(35)=$C(16,58,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(36)=$C(16,59,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(37)=$C(16,60,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(38)=$C(16,61,1,0,0,0,0,0,0,0)_"11Tq"
 set VO(39)=$C(16,62,1,0,0,0,0,0,0,0)_"11Tj"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordEFTPAY fEFTPAY)  // Display screen data
 new V
 s INSAD1=$G(INSAD1)
 s INSAD2=$G(INSAD2)
 s INSAD3=$G(INSAD3)
 s INSAD4=$G(INSAD4)
 s INSAD5=$G(INSAD5)
 s INSCD1=$G(INSCD1)
 s INSCD2=$G(INSCD2)
 s INSCD3=$G(INSCD3)
 s INSCD4=$G(INSCD4)
 s INSCD5=$G(INSCD5)
 //
 set VO="49|40|13|"
 set VO(40)=$C(10,22,4,2,0,0,0,0,0,0)_"00T"_$G(INSCD1)
 set VO(41)=$C(10,28,30,2,0,0,0,0,0,0)_"00T"_$G(INSAD1)
 set VO(42)=$C(11,22,4,2,0,0,0,0,0,0)_"00T"_$G(INSCD2)
 set VO(43)=$C(11,28,30,2,0,0,0,0,0,0)_"00T"_$G(INSAD2)
 set VO(44)=$C(12,22,4,2,0,0,0,0,0,0)_"00T"_$G(INSCD3)
 set VO(45)=$C(12,28,30,2,0,0,0,0,0,0)_"00T"_$G(INSAD3)
 set VO(46)=$C(13,22,4,2,0,0,0,0,0,0)_"00T"_$G(INSCD4)
 set VO(47)=$C(13,28,30,2,0,0,0,0,0,0)_"00T"_$G(INSAD4)
 set VO(48)=$C(14,22,4,2,0,0,0,0,0,0)_"00T"_$G(INSCD5)
 set VO(49)=$C(14,28,30,2,0,0,0,0,0,0)_"00T"_$G(INSAD5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordEFTPAY fEFTPAY)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=10,VPT=6,VPB=16,PGM=$T(+0),DLIB="SYSDEV",DFID="EFTPAY",VSCRPP=1,VSCRPP=1
 set OLNTB=16062
 
 // 
	
	
 set %TAB(1)=$C(9,21,4)_"00T|*INSCD1|[*]@INSCD1|[STBLSWINSTR]INSTRCD,[STBLSWINSTR]DES:QU||do VP1^V00S217(.fEFTPAY)"
 set %TAB(2)=$C(9,27,30)_"00T|*INSAD1|[*]@INSAD1|||do VP2^V00S217(.fEFTPAY)"
 set %TAB(3)=$C(10,21,4)_"00T|*INSCD2|[*]@INSCD2|[STBLSWINSTR]INSTRCD,[STBLSWINSTR]DES:QU||do VP3^V00S217(.fEFTPAY)"
 set %TAB(4)=$C(10,27,30)_"00T|*INSAD2|[*]@INSAD2|||do VP4^V00S217(.fEFTPAY)"
 set %TAB(5)=$C(11,21,4)_"00T|*INSCD3|[*]@INSCD3|[STBLSWINSTR]INSTRCD,[STBLSWINSTR]DES:QU||do VP5^V00S217(.fEFTPAY)"
 set %TAB(6)=$C(11,27,30)_"00T|*INSAD3|[*]@INSAD3|||do VP6^V00S217(.fEFTPAY)"
 set %TAB(7)=$C(12,21,4)_"00T|*INSCD4|[*]@INSCD4|[STBLSWINSTR]INSTRCD,[STBLSWINSTR]DES:QU||do VP7^V00S217(.fEFTPAY)"
 set %TAB(8)=$C(12,27,30)_"00T|*INSAD4|[*]@INSAD4|||do VP8^V00S217(.fEFTPAY)"
 set %TAB(9)=$C(13,21,4)_"00T|*INSCD5|[*]@INSCD5|[STBLSWINSTR]INSTRCD,[STBLSWINSTR]DES:QU||do VP9^V00S217(.fEFTPAY)"
 set %TAB(10)=$C(13,27,30)_"00T|*INSAD5|[*]@INSAD5|||do VP10^V00S217(.fEFTPAY)"
 do VTBL(.fEFTPAY)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordEFTPAY fEFTPAY) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VSPP   // screen post proc
 type Public RecordEFTPAY fEFTPAY
 do VSPP1(.fEFTPAY)
 #ACCEPT Date=11/05/03; pgm=Screen Compilerxxx
 quit
VSPP1(RecordEFTPAY fEFTPAY)
 type public String EFT23E,INSAD1,INSAD2,INSAD3,INSAD4,INSAD5,INSCD1,INSCD2,INSCD3,INSCD4,INSCD5
 
 // Redefine instruction codes
 set EFT23E=""
 
 if INSCD1'="" set EFT23E=EFT23E_$$LJ^%ZTEXT(INSCD1,4)_INSAD1_$C(13,10)
 if INSCD2'="" set EFT23E=EFT23E_$$LJ^%ZTEXT(INSCD2,4)_INSAD2_$C(13,10)
 if INSCD3'="" set EFT23E=EFT23E_$$LJ^%ZTEXT(INSCD3,4)_INSAD3_$C(13,10)
 if INSCD4'="" set EFT23E=EFT23E_$$LJ^%ZTEXT(INSCD4,4)_INSAD4_$C(13,10)
 if INSCD5'="" set EFT23E=EFT23E_$$LJ^%ZTEXT(INSCD5,4)_INSAD5_$C(13,10)
 
 quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordEFTPAY fEFTPAY) //
 type Number I
 type String C,CODES,D,DISALLOW
 
 type public Boolean ER
 type public String INSCD2,INSCD3,INSCD4,INSCD5,X
 
 if X="" quit
 
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:X",1)
 if 'swinstr.getMode() do Runtime.setErrMSG("STBLSWINSTR",1485,X) quit
 
 if (fEFTPAY.BANKOP="SPRI") do {
 	if '((X="SDVA")!(X="TELB")!(X="PHOB")!(X="INTC")) do {
 		set X="" do DISPLAY^DBSMACRO("@INSCD1",INSCD1)
 		// Only Instruction Codes SDVA,TELB,PHOB, or INTC may be used
 		do Runtime.setErrMSG("EFTPAY",4615)
 		}
 	}
 
 if ((X="TELI")!(X="PHOI")),(fEFTPAY.INTER="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD1",INSCD1)
 	do Runtime.setErrMSG("EFTPAY",5081,"56A~23E~TELI~PHOI")
 	}
 
 if ((X="TELE")!(X="PHON")),(fEFTPAY.BENINST="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD1",INSCD1)
 	do Runtime.setErrMSG("EFTPAY",5081,"57A~23E~TELE~PHON")
 	}
 
 set C=","
 set CODES=INSCD2_C_INSCD3_C_INSCD4_C_INSCD5
 // Instruction codes must not be repeated
 if CODES.find(X) do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD1",INSCD1)
 	do Runtime.setErrMSG("EFTPAY",5080)
 	}
 
 // Illegal combination of Instruction codes: ~p1 and ~p2
 set DISALLOW=swinstr.disallow
 for I=1:1:4 set D=CODES.piece(C,I) quit:D=""  if DISALLOW.find(D) do { quit
 	type String Y
 	set Y=X,X="" do DISPLAY^DBSMACRO("@INSCD1",INSCD1)
 	do Runtime.setErrMSG("EFTPAY",5079,D_"~"_Y)
 	}
 
 quit
VP2(RecordEFTPAY fEFTPAY) //
 type String INSCD
 
 type public String INSCD1,X
 
 if X="" quit
 
 set INSCD=INSCD1.get()
 if INSCD="" quit
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:INSCD",1)
 if swinstr.addinfo'=1 do {
 	set X=""
 	do DISPLAY^DBSMACRO("@INSAD1",INSAD1)
 	do Runtime.setErrMSG("EFTPAY",4614)
 	}
 
 quit
VP3(RecordEFTPAY fEFTPAY) //
 type Number I
 type String C,CODES,D,DISALLOW
 
 type public Boolean ER
 type public String INSCD1,INSCD3,INSCD4,INSCD5,X
 
 if X="" quit
 
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:X",1)
 if 'swinstr.getMode() do Runtime.setErrMSG("STBLSWINSTR",1485,X) quit
 
 if (fEFTPAY.BANKOP="SPRI") do {
 	if '((X="SDVA")!(X="TELB")!(X="PHOB")!(X="INTC")) do {
 		set X="" do DISPLAY^DBSMACRO("@INSCD2",INSCD2)
 		// Only Instruction Codes SDVA,TELB,PHOB, or INTC may be used
 		do Runtime.setErrMSG("EFTPAY",4615)
 		}
 	}
 
 if ((X="TELI")!(X="PHOI")),(fEFTPAY.INTER="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD2",INSCD2)
 	do Runtime.setErrMSG("EFTPAY",5081,"56A~23E~TELI~PHOI")
 	}
 
 if ((X="TELE")!(X="PHON")),(fEFTPAY.BENINST="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD2",INSCD2)
 	do Runtime.setErrMSG("EFTPAY",5081,"57A~23E~TELE~PHON")
 	}
 
 set C=","
 set CODES=INSCD1_C_INSCD3_C_INSCD4_C_INSCD5
 // Instruction codes must not be repeated
 if CODES.find(X) do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD2",INSCD2)
 	do Runtime.setErrMSG("EFTPAY",5080)
 	}
 
 // Illegal combination of Instruction codes: ~p1 and ~p2
 set DISALLOW=swinstr.disallow
 for I=1:1:4 set D=CODES.piece(C,I) quit:D=""  if DISALLOW.find(D) do { quit
 	type String Y
 	set Y=X,X="" do DISPLAY^DBSMACRO("@INSCD2",INSCD2)
 	do Runtime.setErrMSG("EFTPAY",5079,D_"~"_Y)
 	}
 
 quit
VP4(RecordEFTPAY fEFTPAY) //
 type String INSCD
 
 type public String INSCD2,X
 
 if X="" quit
 
 set INSCD=INSCD2.get()
 if INSCD="" quit
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:INSCD",1)
 if swinstr.addinfo'=1 do {
 	set X=""
 	do DISPLAY^DBSMACRO("@INSAD2",INSAD2)
 	do Runtime.setErrMSG("EFTPAY",4614)
 	}
 
 quit
VP5(RecordEFTPAY fEFTPAY) //
 type Number I
 type String C,CODES,D,DISALLOW
 
 type public Boolean ER
 type public String INSCD1,INSCD2,INSCD4,INSCD5,X
 
 if X="" quit
 
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:X",1)
 if 'swinstr.getMode() do Runtime.setErrMSG("STBLSWINSTR",1485,X) quit
 
 if (fEFTPAY.BANKOP="SPRI") do {
 	if '((X="SDVA")!(X="TELB")!(X="PHOB")!(X="INTC")) do {
 		set X="" do DISPLAY^DBSMACRO("@INSCD3",INSCD3)
 		// Only Instruction Codes SDVA,TELB,PHOB, or INTC may be used
 		do Runtime.setErrMSG("EFTPAY",4615)
 		}
 	}
 
 if ((X="TELI")!(X="PHOI")),(fEFTPAY.INTER="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD3",INSCD3)
 	do Runtime.setErrMSG("EFTPAY",5081,"56A~23E~TELI~PHOI")
 	}
 
 if ((X="TELE")!(X="PHON")),(fEFTPAY.BENINST="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD3",INSCD3)
 	do Runtime.setErrMSG("EFTPAY",5081,"57A~23E~TELE~PHON")
 	}
 
 set C=","
 set CODES=INSCD1_C_INSCD2_C_INSCD4_C_INSCD5
 // Instruction codes must not be repeated
 if CODES.find(X) do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD3",INSCD3)
 	do Runtime.setErrMSG("EFTPAY",5080)
 	}
 
 // Illegal combination of Instruction codes: ~p1 and ~p2
 set DISALLOW=swinstr.disallow
 for I=1:1:4 set D=CODES.piece(C,I) quit:D=""  if DISALLOW.find(D) do { quit
 	type String Y
 	set Y=X,X="" do DISPLAY^DBSMACRO("@INSCD3",INSCD3)
 	do Runtime.setErrMSG("EFTPAY",5079,D_"~"_Y)
 	}
 
 quit
VP6(RecordEFTPAY fEFTPAY) //
 type String INSCD
 
 type public String INSCD3,X
 
 if X="" quit
 
 set INSCD=INSCD3.get()
 if INSCD="" quit
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:INSCD",1)
 if swinstr.addinfo'=1 do {
 	set X=""
 	do DISPLAY^DBSMACRO("@INSAD3",INSAD3)
 	do Runtime.setErrMSG("EFTPAY",4614)
 	}
 
 quit
VP7(RecordEFTPAY fEFTPAY) //
 type Number I
 type String C,CODES,D,DISALLOW
 
 type public Boolean ER
 type public String INSCD1,INSCD2,INSCD3,INSCD4,X
 
 if X="" quit
 
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:X",1)
 if 'swinstr.getMode() do Runtime.setErrMSG("STBLSWINSTR",1485,X) quit
 
 if (fEFTPAY.BANKOP="SPRI") do {
 	if '((X="SDVA")!(X="TELB")!(X="PHOB")!(X="INTC")) do {
 		set X="" do DISPLAY^DBSMACRO("@INSCD4",INSCD4)
 		// Only Instruction Codes SDVA,TELB,PHOB, or INTC may be used
 		do Runtime.setErrMSG("EFTPAY",4615)
 		}
 	}
 
 if ((X="TELI")!(X="PHOI")),(fEFTPAY.INTER="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD4",INSCD4)
 	do Runtime.setErrMSG("EFTPAY",5081,"56A~23E~TELI~PHOI")
 	}
 
 if ((X="TELE")!(X="PHON")),(fEFTPAY.BENINST="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD4",INSCD4)
 	do Runtime.setErrMSG("EFTPAY",5081,"57A~23E~TELE~PHON")
 	}
 
 set C=","
 set CODES=INSCD1_C_INSCD2_C_INSCD3_C_INSCD5
 // Instruction codes must not be repeated
 if CODES.find(X) do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD4",INSCD4)
 	do Runtime.setErrMSG("EFTPAY",5080)
 	}
 
 // Illegal combination of Instruction codes: ~p1 and ~p2
 set DISALLOW=swinstr.disallow
 for I=1:1:4 set D=CODES.piece(C,I) quit:D=""  if DISALLOW.find(D) do { quit
 	type String Y
 	set Y=X,X="" do DISPLAY^DBSMACRO("@INSCD4",INSCD4)
	do Runtime.setErrMSG("EFTPAY",5079,D_"~"_Y)
 	}
 
 quit
VP8(RecordEFTPAY fEFTPAY) //
 type String INSCD
 
 type public String INSCD4,X
 
 if X="" quit
 
 set INSCD=INSCD4.get()
 if INSCD="" quit
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:INSCD",1)
 if swinstr.addinfo'=1 do {
 	set X=""
 	do DISPLAY^DBSMACRO("@INSAD4",INSAD4)
 	do Runtime.setErrMSG("EFTPAY",4614)
 	}
 
 quit
VP9(RecordEFTPAY fEFTPAY) //
 type Number I
 type String C,CODES,D,DISALLOW
 
 type public Boolean ER
 type public String INSCD1,INSCD2,INSCD3,INSCD4,X
 
 if X="" quit
 
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:X",1)
 if 'swinstr.getMode() do Runtime.setErrMSG("STBLSWINSTR",1485,X) quit
 
 if (fEFTPAY.BANKOP="SPRI") do {
 	if '((X="SDVA")!(X="TELB")!(X="PHOB")!(X="INTC")) do {
 		set X="" do DISPLAY^DBSMACRO("@INSCD5",INSCD5)
 		// Only Instruction Codes SDVA,TELB,PHOB, or INTC may be used
 		do Runtime.setErrMSG("EFTPAY",4615)
 		}
 	}
 
 if ((X="TELI")!(X="PHOI")),(fEFTPAY.INTER="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD5",INSCD5)
 	do Runtime.setErrMSG("EFTPAY",5081,"56A~23E~TELI~PHOI")
 	}
 
 if ((X="TELE")!(X="PHON")),(fEFTPAY.BENINST="") do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD5",INSCD5)
 	do Runtime.setErrMSG("EFTPAY",5081,"57A~23E~TELE~PHON")
 	}
 
 set C=","
 set CODES=INSCD1_C_INSCD2_C_INSCD3_C_INSCD4
 // Instruction codes must not be repeated
 if CODES.find(X) do { quit
 	set X="" do DISPLAY^DBSMACRO("@INSCD5",INSCD5)
 	do Runtime.setErrMSG("EFTPAY",5080)
 	}
 
 // Illegal combination of Instruction codes: ~p1 and ~p2
 set DISALLOW=swinstr.disallow
 for I=1:1:4 set D=CODES.piece(C,I) quit:D=""  if DISALLOW.find(D) do { quit
 	type String Y
 	set Y=X,X="" do DISPLAY^DBSMACRO("@INSCD5",INSCD5)
 	do Runtime.setErrMSG("EFTPAY",5079,D_"~"_Y)
 	}
 
 quit
VP10(RecordEFTPAY fEFTPAY) //
 type String INSCD
 
 type public String INSCD5,X
 
 if X="" quit
 
 set INSCD=INSCD5.get()
 if INSCD="" quit
 type RecordSTBLSWINSTR swinstr=Db.getRecord("STBLSWINSTR","INSTRCD=:INSCD",1)
 if swinstr.addinfo'=1 do {
 	set X=""
 	do DISPLAY^DBSMACRO("@INSAD5",INSAD5)
 	do Runtime.setErrMSG("EFTPAY",4614)
 	}
 
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordEFTPAY fEFTPAY
 do VPR(.fEFTPAY)
 do VDA1(.fEFTPAY)
 do ^DBSPNT()
 quit

VW(RecordEFTPAY fEFTPAY)
 do VDA1(.fEFTPAY)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordEFTPAY fEFTPAY)
 do VDA1(.fEFTPAY)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordEFTPAY fEFTPAY
 do VDA1(.fEFTPAY)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordEFTPAY fEFTPAY
 if sn="EFTPAY" do vSET1(.fEFTPAY,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordEFTPAY fEFTPAY,di,X)
 do fEFTPAY.setAuditFlag(1)
 set fEFTPAY.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordEFTPAY fEFTPAY
 if fid="EFTPAY" quit $$vREAD1(.fEFTPAY,di)
 quit ""
vREAD1(RecordEFTPAY fEFTPAY,di)
 quit fEFTPAY.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 //
VDSPPRE(RecordEFTPAY fEFTPAY)  // Display Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
 type Number I
 type String DESFLD,INSTR,ZINSAD,ZINSCD
 
 type public String EFT23E
 
 // EFT23E is defined by calling process
 set EFT23E=EFT23E.get()
 
 // Load instruction codes into local variables on the screen
 for I=1:1 set INSTR=EFT23E.piece($C(13,10),I)  quit:INSTR=""  do {
	set ZINSAD="INSAD"_I
	set ZINSCD="INSCD"_I
 	set @ZINSCD=INSTR.extract(1,4)
 	set DESFLD=INSTR.extract(5,INSTR.length())
 	if DESFLD.extract(1)="/" set DESFLD=DESFLD.extract(2,DESFLD.length())
 	set @ZINSAD=DESFLD
 	}
 
 quit
 #ACCEPT date=11/05/03;PGM=Screen Compiler
 quit
