public	EFTBUILD(CID,SEQ,RCID,RINS,TAMT,CRCD,XEFD,FREQ,TYPE,POST,TSO,ETC,EXPDT,CONSTANT,AMTTYP,TTYPE,GLCC,EXTHLD,EXTTRF) //
	/*
	 ORIG: SIGDAE - 05/07/2002
	 DESC: Generic EFTPAY Record Creation

	 ---- Comments --------------------------------------------------------

	 Based upon the arguments passed in, this utility will build
	 EFTPAY records.

	 ARGUMENTS:
		. CID		Profile account; primary key to [EFTPAY]
		. SEQ		EFTPAY Sequence
		. RCID		Recipient Account
		. RINS		Recipient Institution
		. TAMT		Amount
		. CRCD		Currency
		. XEFD		Effective Date
		. FREQ		Frequency
		. TYPE		Payment Type
		. POST		Posting Option
				0 - post in batch
				1 - post now
		. TSO		Unique TSO
		. ETC		Debit Transaction Code
		. EXPDT		Expiration Date
		. CONSTANT	External Account Type
		. AMTTYP	Amount Type
		. TTYPE		Transaction type
		. GLCC		G/L Cost Center
		. EXTHLD	Hold Auto Indicator
		. EXTTRF	Teller External Transfer

	---- Revision History ------------------------------------------------

	03/28/07 - KELLYP - CR 26292
		   Modified CIFEXT to add new "PCODE" parameter for defining
		   which process code an EFT is being created for.  Also 
		   modified CIFEXT to override the EFT type passed in if a
		   record exists in CTBLEFTMETPD for the PCODE passed in and
		   default payment method.

	09/07/05 - KELLYP - CR 17118
		   Replaced references to MSG100DT with MSG103DT.  The MT100
		   has been obsoleted by SWIFT and all references to it have
		   been removed from the system.  Also remove pre-2003
		   revision history.
	
	08/05/05 - SmithCD - CR 16724
		   Made top of procedure public.

	-----------------------------------------------------------------------
 */

TOP
	/*
	 Build EFTPAY record record and post the transaction is POST=1

	 This function should no longer be used for processes that use
	 information from the CIFEXT table.  A new function, CIFEXT, has
	 been added to build EFTPAY records based on information contained
	 in the CIFEXT record.
	*/
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")

	set eftpay.cid=CID
	set eftpay.seq=Db.nextVal("EFTPAY","CID")
	set eftpay.status="A"

	// Define currency
	if $G(CRCD)="" set CRCD=%SystemCurrency

	set eftpay.recinst=RINS
	set eftpay.recacct=RCID
	set eftpay.amount=TAMT
	set eftpay.crcd=CRCD
	if $G(CONSTANT)'="" set eftpay.constant=CONSTANT
	set eftpay.efd=XEFD
	if $G(FREQ)'="" set eftpay.frequency=FREQ
	if $G(SOURCE)'="" set eftpay.source=SOURCE
	if $G(GLCC)'="" set eftpay.cc=GLCC
	if $G(MET)'="" set eftpay.met=MET

	// Determine Amount Type
	if $G(AMTTYP)'="" set eftpay.amttyp=AMTTYP
	else  set eftpay.amttyp=1

	if $G(TYPE)'="" set eftpay.efttype=TYPE
	if $G(EXPDT)'="" set eftpay.expdt=EXPDT
	if $G(CPA)'="" set eftpay.msg103dt=CPA
	if $G(TSO)'="" set eftpay.uniqtso=TSO
	if $G(ETC)'="" set eftpay.etc=ETC
	if $G(EXTHLD)'="" set eftpay.hldauto=EXTHLD
	if $G(EXTTRF)'="" set eftpay.exttrf=EXTTRF
	if $G(TTYPE)'="" set eftpay.ttype=TTYPE

	// Create EFTPAY record
	do eftpay.save("/VALDD/VALRI/VALREQ")

	if ER do EXC quit 

	/*
	 Determine based upon POST whether or not we want to post this
	 on-line like an external transfer; if not, then @QUE068 will post
	 the order in batch.
	*/

	quit:'POST

	set %NET=1
	do public^BCHEFT(eftpay.cid,eftpay.seq)

	quit 


public CIFEXT(	Number CID,	// Profile account (EFTPAY key)		/REF=R/REQ
		Number EXTACN,	// External CIF Account Number		/REF=R/REQ
		Number EXTSEQ,	// External CIF Account Sequence	/REF=R/REQ
		Number TAMT,	// Amount				/REF=R/REQ
		String CRCD,	// Currency				/REF=R/REQ
		String TYPE,	// EFT Payment Type			/REF=R/REQ
		Date XEFD,	// Effective Date			/REF=R/REQ
		String TSO,	// Unique TSO				/REF=RW/NOREQ
		String ETC,	// Transaction Code			/REF=R/NOREQ
		String FREQ,	// Frequency				/REF=R/NOREQ
		Date EXPDT,	// Expiration Date			/REF=R/NOREQ
		Number TTYPE,	// Transaction type			/REF=R/NOREQ
		Number GLCC,	// G/L Cost Center			/REF=R/NOREQ
		Number PCODE)	// Process Code				/REF=R/NOREQ
	
	// Build domestic payment system order based on information that is passed and 
	// stored in CIFEXT.

	type public Boolean ER

	type String PAYMET,UTSO

	type RecordCIFEXT cifext = Db.getRecord("CIFEXT","EXTACN,EXTSEQ",1)
	
	// Record Not Defined
	if 'cifext.getMode() do Runtime.setErrMSG("CIFEXT","7932") quit:ER

	type RecordEFTPAY eftpay = Class.new("RecordEFTPAY")

	set eftpay.cid = CID
	set eftpay.seq = Db.nextVal("EFTPAY","CID")
	set eftpay.status = "A"

	// Load passed information
	set eftpay.amount = TAMT
	set eftpay.crcd = CRCD
	set eftpay.pcode = PCODE.get()
	
	if 'eftpay.pcode.isNull() do {
		// Get default payment method
		set PAYMET = $$PAYMET^PROCEFT(.eftpay)
	
		// Redefine the EFT type if a CTBLEFTMETPD record exists for the
		// payment method and process code specified
		type RecordCTBLEFTMETPD ceftmet = Db.getRecord("CTBLEFTMETPD","MET=:PAYMET,PCODE=:eftpay.pcode",1)
		if ceftmet.getMode(),('ceftmet.efttype.isNull()) set TYPE = ceftmet.efttype
		}
	
	set eftpay.efttype = TYPE
	set eftpay.efd = XEFD

	set eftpay.etc = ETC.get()
	set eftpay.frequency = FREQ.get()
	set eftpay.expdt = EXPDT.get()
	set eftpay.ttype = TTYPE.get()
	set eftpay.cc = GLCC.get()

	set eftpay.recinst = cifext.extinst
	set eftpay.recacct = cifext.extacct
	set eftpay.constant = cifext.constant
	set eftpay.rectype = cifext.extacctp

	// Build UNIQTSO
	if 'cifext.benname.isNull() set UTSO("EXTNAME") = cifext.benname
	if 'cifext.bencity.isNull() set UTSO("EXTCITY") = cifext.bencity
	
	if UTSO.data() do IN^UTSO(.UTSO,.TSO)
	if 'TSO.get().isNull() set eftpay.UNIQTSO = TSO

	// Create EFTPAY record
	do eftpay.save("/VALDD/VALRI/VALREQ")

	if ER do EXC quit 

	quit


EXC
	/*
	 Log error to DAYEND
	*/

	do LOG^UTLEXC($T(+0),"*",$G(RM),$G(CID),$G(%ZTSEQ),$G(ET))
	kill ET,%ZTSEQ

	quit 
 #OPTION ResultClass ON
Public String vSIG()	quit "60717^55602^Pat Kelly^5439"	// Signature - LTD^TIME^USER^SIZE
