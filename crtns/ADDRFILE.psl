ADDRFILE(RecordACNADDR acnaddr, String vpar, Boolean vparNorm) // ACNADDR - Account Mailing Address Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             05/23/2006
	// Trigger Definition (3)                      03/14/2006
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = acnaddr.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(acnaddr,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(acnaddr,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = acnaddr.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ACNADDR",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACNADDR","CID = :acnaddr.cid")    // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordACNADDR acnaddr = Db.getRecord("ACNADDR","CID=:CID")
	if (%ProcessMode = 2) do {
		do acnaddr.setMode(2)

		do ADDRFILE(acnaddr,vpar)
	}
	else  do VINDEX(acnaddr)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordACNADDR acnaddr

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACNADDR","CID = :acnaddr.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(acnaddr)) S ^ACNADDR(vobj(acnaddr,-3))=vobj(acnaddr)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.acnaddr)             // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.acnaddr) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordACNADDR acnaddr

	if vpar["/INDEX/" do VINDEX(.acnaddr)                  // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.acnaddr)              // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACNADDR(vobj(acnaddr,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordACNADDR acnaddr

	if acnaddr.ad1.isNull() do vreqerr("AD1") quit
	if acnaddr.city.isNull() do vreqerr("CITY") quit
	if acnaddr.cntry.isNull() do vreqerr("CNTRY") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordACNADDR acnaddr

	if acnaddr.cid.isNull() do vreqerr("CID") quit

		if vx("AD1").exists(),acnaddr.ad1.isNull() do vreqerr("AD1") quit
		if vx("CITY").exists(),acnaddr.city.isNull() do vreqerr("CITY") quit
		if vx("CNTRY").exists(),acnaddr.cntry.isNull() do vreqerr("CNTRY") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACNADDR","MSG",1767,"ACNADDR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordACNADDR acnaddr
	if 'acnaddr.cid.isNull() set vfkey("^ACN("_""""_acnaddr.cid_""""_","_50_")")="ACNADDR(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordACNADDR acnaddr
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":acnaddr.cid") set vERRMSG = $$^MSG(8563,"ACNADDR(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordACNADDR acnaddr
	/* 
		Revision History
		----------------
	12/6/2000 Spier 43105
		removed sace after if which caused compile error

	11/3/2000 Spier 42606
		Added check for state field

	*/
	// Validate Postal/zip code
	
	do ZIP^PROCZIP(acnaddr.cntry,acnaddr.state,acnaddr.mzip)
	if $G(ER) do Runtime.setErrMSG("ACNADDR",3333,RM) quit:ER 

	// Validate State is in lookup table
	if acnaddr.state'="",$$CHKSTATE^ADDRUTL("ACNADDR",acnaddr.cntry,acnaddr.state) Q:ER
	quit
	

vau1 // Trigger AFTER_UPDATE - After Update trigger

	type public RecordACNADDR acnaddr
	/*
	---- Revision History ------------------------------------------------

	03/13/06 - Srinivar - 19975
		   Added the code for updating the adress changes
		   in escrow account automaticaly while changes are 
		   made in the associated loan account. 
	
	05/15/01 - ANTONOVS - 43026
		   Add logic to update SADDRCIF - seasonal address table if
		   seasonal address is in effect (currently is mailing address)	

	11/03/00 - Spier -42606
		   Added check of the STATE field, it needs to be validated 
		   against table STBLCNTRY1 with CNTRY field as part of the test.

	09/03/99 - CARROLLJ - 33890
		   Convert to PSL.
	

	*/	


	// Validate Postal/zip code
	
	do ZIP^PROCZIP(acnaddr.cntry,acnaddr.state,acnaddr.mzip)
	if $G(ER) do Runtime.setErrMSG("ACNADDR",3333,RM) quit:ER 
	
	// Check that state entered exists in STBLCNTRY1 table

	if acnaddr.isChanged("STATE"),acnaddr.state'="",$$CHKSTATE^ADDRUTL("ACNADDR",acnaddr.cntry,acnaddr.state) Q:ER

	// Update customer contact date
	
	new LCCADR,XCID
	set LCCADR=Db.getOneRow("LCCADR","CUVAR")
	set XCID=acnaddr.cid
	
	if LCCADR do Db.update("ACN","CCLD=:TJD","CID=:XCID","/NOJOURNAL")
	
	new CRCD,SWPDATA,SWPF,SWPOPT
	
	
	if Db.isDefined("DEP","XCID") do {
		set SWPDATA=Db.getOneRow("SWPF,SWPOPT,CRCD","DEP","XCID")
		// Investment Sweep Code
		set SWPF=$P(SWPDATA,$C(9),1)   
		// Investment Sweep Proc Option
		set SWPOPT=$P(SWPDATA,$C(9),2) 
		// Currency Code
		set CRCD=$P(SWPDATA,$C(9),3)

		if SWPF=1,SWPOPT=2,CRCD=%SystemCurrency do { quit:ER 
			/*
			This is a transaction (core) account set up for percentage based
			investment sweep - make identical change on corresponding non-
			institutional investment accounts.
			*/
			new ICID,IDATA,ITYPE,LINKCNT,SWPNI,rs
	
			type ResultSet rs=Db.select("ICID,ITYPE","DEP101","CID=:XCID")
			// No linked investment accounts
			if rs.isEmpty() quit
			while rs.next() do { quit:ER  
				// Investment Account Number
				set ICID=rs.getCol(1)
				// Investment Product Type
				set ITYPE=rs.getCol(2)
				set SWPNI=Db.getOneRow("SWPNI","PRODDFTD","ITYPE")
				if SWPNI do ECHO(ICID,.acnaddr)
				}
			}
		}
	/* Update SADDRACN with seasonal address if seasonal address is in effect */
	
	new defaddr
	set defaddr=Db.isDefined("SADDRACN","CID")
	if defaddr do { quit:ER
	
		type RecordSADDRACN saddracn=Db.getRecord("SADDRACN","CID")
	
		new start
		new end
 		set start=saddracn.sadsd
		set end=saddracn.saded
 		if start="",end="" quit
	
		if ((%SystemDate'<start)&(%SystemDate'>end)) do { quit:ER
			set saddracn.sad1=acnaddr.ad1
			set saddracn.sad2=acnaddr.ad2
			set saddracn.sad3=acnaddr.ad3
			set saddracn.sad4=acnaddr.ad4
			set saddracn.scity=acnaddr.city
			set saddracn.scntry=acnaddr.cntry
			set saddracn.sstate=acnaddr.state
			set saddracn.szip=acnaddr.mzip
	
			do saddracn.bypassSave()
		}
 	}
 	
 	//Updates the address changes made in the loan account 
 	//automatically into Escrow account.
 	
 	type Number ECID
	
	set ECID=$$ECID^LNU(acnaddr.cid,"ESC1")
	if ECID="" quit
	
	type RecordACNADDR escacnaddr=Db.getRecord("ACNADDR","CID=ECID",1)
	set escacnaddr.AD1=acnaddr.ad1
	set escacnaddr.AD2=acnaddr.ad2
	set escacnaddr.AD3=acnaddr.ad3
	set escacnaddr.AD4=acnaddr.ad4
	set escacnaddr.city=acnaddr.city
	set escacnaddr.cntry=acnaddr.cntry
	set escacnaddr.state=acnaddr.state
	set escacnaddr.mzip=acnaddr.mzip
	
	do escacnaddr.bypassSave()

	quit
	
ECHO(ICID,RecordACNADDR acnaddr)

	/*
	Any fields that are added to this file definition must be added here
	as well.
	*/
	new AD1,AD2,AD3,AD4,CITY,CNTRY,LOC,MZIP,STATE
	
	set AD1=acnaddr.ad1		    // Address Line 1
	set AD2=acnaddr.ad2		    // Address Line 2
	set AD3=acnaddr.ad3		    // Address Line 3
	set AD4=acnaddr.ad4		    // Address Line 4
	set CITY=acnaddr.city		    // City
	set CNTRY=acnaddr.cntry		    // Country Code
	set LOC=acnaddr.loc		    // Locale
	set MZIP=acnaddr.mzip		    // ZIP Code
	set STATE=acnaddr.state		    // State/Province
	
	do Db.update("ACNADDR","AD1=:AD1,AD2=:AD2,AD3=:AD3,AD4=:AD4,CITY=:CITY,CNTRY=:CNTRY,LOC=:LOC,MZIP=:MZIP,STATE=:STATE","CID=:ICID")

	quit	

vbi1 // Trigger BEFORE_INSERT - Country code default logic 

	type public RecordACNADDR acnaddr
	// Country code default if not defined
	if acnaddr.cntry="" set acnaddr.cntry=Db.getOneRow("CNTRY","CUVAR")
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordACNADDR acnaddr

	set X = acnaddr.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if acnaddr.ad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD1", vRM) quit
	if acnaddr.ad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD2", vRM) quit
	if acnaddr.ad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD3", vRM) quit
	if acnaddr.ad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD4", vRM) quit
	if acnaddr.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	set X = acnaddr.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	if acnaddr.loc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LOC", vRM) quit
	if acnaddr.mcounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MCOUNTY", vRM) quit
	if acnaddr.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	if acnaddr.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACNADDR","MSG",979,"ACNADDR."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordACNADDR acnaddr)	//ACNADDR Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			if EFD.get() do {
				do vj3(.acnaddr)	// Mode=U Tran=B EFD=E Seq=1 JRNID=HISTFM_U
				}
			else  do {
				do vj2(.acnaddr)	// Mode=U Tran=B EFD=N Seq=1 JRNID=CMSRECACN
				do vj3(.acnaddr)	// Mode=U Tran=B EFD=N Seq=1 JRNID=HISTFM_U
				quit:'vx.data()
				for vdi="AD1","AD2","AD3","AD4" if vx(vdi).exists() do vj1(.acnaddr,vdi) quit	// Mode=U Tran=B EFD=N Seq=1 JRNID=ADDR_UP
				}
			}
		else  if TSRC="O" do {
			if EFD.get() do {
				do vj3(.acnaddr)	// Mode=U Tran=O EFD=E Seq=1 JRNID=HISTFM_U
				}
			else  do {
				do vj2(.acnaddr)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CMSRECACN
				do vj3(.acnaddr)	// Mode=U Tran=O EFD=N Seq=1 JRNID=HISTFM_U
				quit:'vx.data()
				for vdi="AD1","AD2","AD3","AD4" if vx(vdi).exists() do vj1(.acnaddr,vdi) quit	// Mode=U Tran=O EFD=N Seq=1 JRNID=ADDR_UP
				}
			}
		}

	quit


vj1(RecordACNADDR acnaddr,String vdi)	// ADDR_UP  Table DTJADDRCHG  Account Address Update Journal

	if +acnaddr.addrflg'=1
	else  quit

	type Public String TJD
	type String v1,v2,vlastkey
	set v1=TJD
	set v2=acnaddr.acn
	set vlastkey=acnaddr.cid
	type RecordDTJADDRCHG dtjaddrchg=Db.getRecord("DTJADDRCHG","SJD=:v1,ACN=:v2,AKEY=:vlastkey",1)
	set dtjaddrchg.oad1=acnaddr.ad1.oldVal
	set dtjaddrchg.oad2=acnaddr.ad2.oldVal
	set dtjaddrchg.oad3=acnaddr.ad3.oldVal
	set dtjaddrchg.oad4=acnaddr.ad4.oldVal
	set dtjaddrchg.ocity=acnaddr.city.oldVal
	set dtjaddrchg.ocntry=acnaddr.cntry.oldVal
	set dtjaddrchg.ostate=acnaddr.state.oldVal
	set dtjaddrchg.ozip=acnaddr.mzip.oldVal

	do dtjaddrchg.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordACNADDR acnaddr)	// CMSRECACN  Table CMSRECACN  Adds CMSREC entry for mod. ACNADDR recs.

	if +acnaddr.carduf=1
	else  quit
	if acnaddr.mpsjrnl'=""
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
							//// Save this line for Public datatyping, if needed
		type String vlastkey
		set vlastkey=Db.nextVal("CMSRECACN","")
		type RecordCMSRECACN cmsrecacn=Db.getRecord("CMSRECACN","SEQ=:vlastkey",1)
		set cmsrecacn.acn=acnaddr.acn
		set cmsrecacn.cmsflg=$$CARDUF^CIFCDI(acnaddr.acn)

		do cmsrecacn.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj3(RecordACNADDR acnaddr)	// HISTFM_U  Table HIST  History for File Maintenance

	type RecordACN acn=Db.getRecord("ACN","CID=:acnaddr.cid",1)


	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if vdi'="CID" do {
		type Public String vx(),EFD,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=acn.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=acn.boo
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.tcmt=$$TCMT^CIFFUNCS(acnaddr.cid,"ACNADDR",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordACNADDR acnaddr) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("CNTRY").exists()!vx("STATE").exists()!vx("MZIP").exists()!vx("CITY").exists()!vx("AD1").exists()!vx("AD2").exists() do vi1(.acnaddr)
	}
	do vi1(.acnaddr)

	quit
	

vi1(RecordACNADDR acnaddr) // Maintain XADDR index entries (Address Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acnaddr.cntry.upperCase()
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acnaddr.state.upperCase()
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = acnaddr.mzip.upperCase()
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = acnaddr.city.upperCase()
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = acnaddr.ad1.upperCase()
	if v6.isNull() set v6=(PSL.maxCharValue-1).char()
	type String v7 = acnaddr.ad2.upperCase()
	if v7.isNull() set v7=(PSL.maxCharValue-1).char()
	type String v8 = acnaddr.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACNADDR(vobj(acnaddr,-3)))#2,'$D(^XADDR("ACN",v2,v3,v4,v5,v6,v7,v8)) do vidxerr("XADDR")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XADDR("ACN",v2,v3,v4,v5,v6,v7,v8)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CNTRY").exists() set v2=vx("CNTRY").piece("|",1).upperCase()  set:v2.isNull() v2=(PSL.maxCharValue-1).char() set:v2'=vx("CNTRY").piece("|",2).upperCase() vdelete=1
	if vx("STATE").exists() set v3=vx("STATE").piece("|",1).upperCase()  set:v3.isNull() v3=(PSL.maxCharValue-1).char() set:v3'=vx("STATE").piece("|",2).upperCase() vdelete=1
	if vx("MZIP").exists() set v4=vx("MZIP").piece("|",1).upperCase()  set:v4.isNull() v4=(PSL.maxCharValue-1).char() set:v4'=vx("MZIP").piece("|",2).upperCase() vdelete=1
	if vx("CITY").exists() set v5=vx("CITY").piece("|",1).upperCase()  set:v5.isNull() v5=(PSL.maxCharValue-1).char() set:v5'=vx("CITY").piece("|",2).upperCase() vdelete=1
	if vx("AD1").exists() set v6=vx("AD1").piece("|",1).upperCase()  set:v6.isNull() v6=(PSL.maxCharValue-1).char() set:v6'=vx("AD1").piece("|",2).upperCase() vdelete=1
	if vx("AD2").exists() set v7=vx("AD2").piece("|",1).upperCase()  set:v7.isNull() v7=(PSL.maxCharValue-1).char() set:v7'=vx("AD2").piece("|",2).upperCase() vdelete=1
	quit:'vdelete                                          // Only case has changed

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XADDR("ACN",v2,v3,v4,v5,v6,v7,v8)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("ACNADDR")

	while ds.next() do {
		type RecordACNADDR acnaddr=ds.getRecord("ACNADDR")
		if vlist.contains("VINDEX") do VINDEX(.acnaddr) quit
		if vlist.contains("XADDR") do vi1(.acnaddr)
	}

	quit


public VIDXBLD1(RecordACNADDR acnaddr, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.acnaddr) quit
	if vlist.contains("XADDR") do vi1(.acnaddr)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("ACNADDR","MSG",1225,"ACNADDR."_di)

	quit


vkchged // Access key changed

	type public RecordACNADDR acnaddr

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(acnaddr,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(acnaddr,-3) = vnewkey // Copy new keys into object
	type RecordACNADDR vnewrec = acnaddr.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ACNADDR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(acnaddr,-3) = vux.piece("|",1)                // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "ADDRFILE"	// Location of index program

