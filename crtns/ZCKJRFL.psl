ZCKJRFL(RecordZCKJRNL zckjrnl, String vpar, Boolean vparNorm) // ZCKJRNL - Non-Walmart Check Journal Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:22 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             06/25/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = zckjrnl.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(zckjrnl,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(zckjrnl,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PTJD").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ZCKJRNL",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ZCKJRNL","PTJD = :zckjrnl.ptjd and SEQ = :zckjrnl.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PTJD
	type public String SEQ

	type RecordZCKJRNL zckjrnl = Db.getRecord("ZCKJRNL","PTJD=:PTJD,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do zckjrnl.setMode(2)

		do ZCKJRFL(zckjrnl,vpar)
	}
	else  do VINDEX(zckjrnl)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordZCKJRNL zckjrnl

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ZCKJRNL","PTJD = :zckjrnl.ptjd and SEQ = :zckjrnl.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(zckjrnl)) S ^ZCKJRNL(vobj(zckjrnl,-3),vobj(zckjrnl,-4))=vobj(zckjrnl)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.zckjrnl) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordZCKJRNL zckjrnl

	if vpar["/INDEX/" do VINDEX(.zckjrnl)                  // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ZCKJRNL(vobj(zckjrnl,-3),vobj(zckjrnl,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordZCKJRNL zckjrnl

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordZCKJRNL zckjrnl

	if zckjrnl.ptjd.isNull() do vreqerr("PTJD") quit
	if zckjrnl.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ZCKJRNL","MSG",1767,"ZCKJRNL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordZCKJRNL zckjrnl

	set X = zckjrnl.ptjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PTJD", vRM) quit
	set X = zckjrnl.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = zckjrnl.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ZCKJRNL.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if zckjrnl.auth.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AUTH", vRM) quit
	set X = zckjrnl.brcd if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("BRCD", vRM) quit
	if zckjrnl.chknum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CHKNUM", vRM) quit
	if zckjrnl.ecid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ECID", vRM) quit
	set X = zckjrnl.pcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PCID", vRM) quit
	if zckjrnl.routing.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ROUTING", vRM) quit
	set X = zckjrnl.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if zckjrnl.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ZCKJRNL","MSG",979,"ZCKJRNL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordZCKJRNL zckjrnl) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("ECID").exists()!vx("AUTH").exists()!vx("ROUTING").exists()!vx("CHKNUM").exists() do vi1(.zckjrnl)
	}
	do vi1(.zckjrnl)

	quit
	

vi1(RecordZCKJRNL zckjrnl) // Maintain ECID index entries (External Account Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = zckjrnl.ecid
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = zckjrnl.ptjd
	type String v4 = zckjrnl.auth
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = zckjrnl.routing
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = zckjrnl.chknum
	if v6.isNull() set v6=(PSL.maxCharValue-1).char()
	type String v7 = zckjrnl.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ZCKJRNL(vobj(zckjrnl,-3),vobj(zckjrnl,-4)))#2,'$D(^XZCKJRNL("ECID",v2,v3,v4,v5,v6,v7)) do vidxerr("ECID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XZCKJRNL("ECID",v2,v3,v4,v5,v6,v7)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ECID").exists() set v2=vx("ECID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("AUTH").exists() set v4=vx("AUTH").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("ROUTING").exists() set v5=vx("ROUTING").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()
	if vx("CHKNUM").exists() set v6=vx("CHKNUM").piece("|",1) set:v6.isNull() v6=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XZCKJRNL("ECID",v2,v3,v4,v5,v6,v7)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("ZCKJRNL")

	while ds.next() do {
		type RecordZCKJRNL zckjrnl=ds.getRecord("ZCKJRNL")
		if vlist.contains("VINDEX") do VINDEX(.zckjrnl) quit
		if vlist.contains("ECID") do vi1(.zckjrnl)
	}

	quit


public VIDXBLD1(RecordZCKJRNL zckjrnl, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.zckjrnl) quit
	if vlist.contains("ECID") do vi1(.zckjrnl)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("ZCKJRNL","MSG",1225,"ZCKJRNL."_di)

	quit


vkchged // Access key changed

	type public RecordZCKJRNL zckjrnl

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("PTJD").exists() set vux("PTJD") = vx("PTJD")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = zckjrnl.ptjd_","_zckjrnl.seq  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = zckjrnl.ptjd_","_zckjrnl.seq  // Copy new keys into object
	type RecordZCKJRNL vnewrec = zckjrnl.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ZCKJRNL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordZCKJRNL zckjrnl

	if vux("PTJD").exists() set zckjrnl.ptjd = vux("PTJD").piece("|",i)
	if vux("SEQ").exists() set zckjrnl.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "ZCKJRFL"	// Location of index program

