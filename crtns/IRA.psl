public IRA(RecordDEP dep,RecordTTX ttx)	// IRA Initialization
	/*
	------ Revision History -----------------------------------------------

	05/30/07 - DHANALAKSHMI R - CR 25413
	           Modified the section MAX to include c1 from prior year 
	           bucket instead of the current year bucket and updated the 
	           condition to include BKT=17 for setting MCL.
	           Modified the section BENREST to check the condition 
	           involving utblbenrel.spi against 1 since the type is changed
	           from logical to number.
	           Modified the sections DR and CR to move the call to UPDIRA
	           at the end of the section. Also added logic to validate 
	           contribution and distribution codes.

	04/27/07 - DHANALAKSHMI R - 26442
		   Modified the section NOTICE to use %UserID instead of UID 
		   while fetching HIST records to correct null subscript error.
		   Modified the section EC by replacing all the occurrences of
		   BKT by RSN, to correct the undefined variable BKT error.

	03/15/07 - KumarSS - CR 25177
		   Removed Invalid Unicode Characters.

	03/06/07 - DHANALAKSHMI R - 25738
	           Modified the section DOD to call the section BEN for all 
	           valid death distribution.

	08/18/06 - NATRAJAH - CR 22517
		   Modified sections UPDIRA0,UPDIRA2 and UPDIRA4, to set the
		   ira.d49, ira.w49 and ira.sw49 fields correctly.

	07/31/06 - KELLYP - CR 22048
		   Modified NONRWH section to eliminate PRECEDENCE warning.

	06/30/06 - DHANALAKSHMI R - 21980
	           Modified the section UPDIRA0 by by moving the setting of 
	           IRA.MADCY one line down after the IRA.D45 settings, 
	           in the block of BKT=45, so that the updated value of 
	           IRA.D45 will be set to IRA.MADCY.

	           o 05/25/06 - DESHPANDE S K - CR 20748
		      Replaced public variable %TRNMODE with call to 
		      ttx.getStoredValue("TranMode").

	02/14/06 - DHANALAKSHMI R - 19509
	           Modified the section MILCHK by adding a closing braces at 
	           the end of the section.
	           Modified the section DWA by moving the pre-condition 
	           "quit:'DWA.isNull()" to post-condition of the if statement
	           "if (%TRNMODE.get()),(%TRNMODE'=4)", so that block will be 
	           executed at least once and hence the table IRA udpated with
	           correct with-holding amount.
	           
	12/29/05 - DHANALAKSHMI R - 18871
	           Modified the section MILCHK by modify the STBL MSG ID.
	           Corrected few warings.
	           Modified the sections TSO, PYR, ADJINT, ADJPEN and ADJPRN 
	           by updating the cuvar reference.

	12/12/05 - DHANALAKSHMI R - 16851
	           Modified the section PMADAMT by removing the usage of the
	           variable MADPSAT as this logic is used only for Multi 
	           transactions.
	           Modified the sections ADJINT,ADJPEN,ADJWTH,ADJPRN by 
	           replacing column name CID with ACN.

	11/15/05 - DHANALAKSHMI R - 16851
	           Modified the routine to include the projects
	           "Multiple Distribution Codes for IRS Form 1099-R (CR 1869)" 
	           and "State (Provincial) Withholding on Retirement Accounts".
	           Corrected few runtime error.

	11/12/05 - DHANALAKSHMI R - 16851
	           Modified the section PYR by removing the temporary settings
	           of CYR and setting to SUM.
	           Modified the section MAX by correcting the calculation of 
	           the variable SUM.
	           Modified the section 1 by moving the call to RPAMCZC before
	           calling PYR as the array RPAMCZC is used by the section MAX.

        10/17/05 - DHANALAKSHMI R - 16851
	           Modified the sections PYR, MAX, IRABKT, AMT, PMADAMT, 
	           MAXLIF by adding 1 as the third parameter in the 
	           Db.getRecord of IRA table. 
	           Modified the section BENREST by initializing the variable 
	           BENREL.
	           Moved the definition of cuvar in the begining of the 
	           procedure.

        09/09/05 - DHANALAKSHMI R - 16851
	           Implemented "Supporting Military Combat Zone Codes for 
	           Military Contributions" project. Refer CR# 11986 for more
	           Details.

        07/27/05 - SkariahV- CR16679
	           Removed #WARN and #OPTIMIZE directives.
	
	07/22/04 - Clayton Schwartz - 11239
		   Replaced references to CID in CYR and PYR with dep.cid.
		   This prevents undefined errors in CYR and removes unnecessary
		   public variable references in both sections.

	07/07/04 - Erik Scheetz - 10782
		   
		   Modified the top section to retrieve IRATYPE by ACN 
		   instead of CID.
		   
		   Added #WARN and #OPTIMIZE and cleaned up compiler warnings
		   (SCHWARTZC)
		   
		   Changed references from local variable to object column such
		   as TAMT to ttx.tamt, ITC to ttx.itc, etc. (SCHWARTZC)
		   		   
	12/13/02 - ZWITKOWITSM - 51349
		   Change references to cuvar for efficiency.  Replace
		   references to %ttxmode with %TRNMODE.

	11/14/02 - ZWITKOWITSM - 43583
		   PSL clean-up.

	06/13/02 - ZWITKOWITSM - 43583
		   Converted to PSL.

	10/12/01 - ANTONOVS - 46100
		   Section MAX was modified to set maximumum contribution
		   limit (mcl) for Reportable Current Year Contribution or
		   Reportable Prior Year Contribution based on a posted
		   transaction.

	05/14/01 - HALPINJ - 44256
		   Typo of operator caused the withholding to be doubled in
		   the IRABEN global in section EC.

	-----------------------------------------------------------------------

	*/
	

	type public String ER
	type public Number AMT
	
	type Number ACN,BEGYR,CYR,IRA,RPASEQ,TYR
	type String TSO,UTSO
	type Boolean ECREV
	
	if %EffectiveDate.isNull() set %EffectiveDate=%SystemDate

	// EFD tax yr
	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(%EffectiveDate,1),1)
	// TJD tax yr
	set TYR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)
	// beg of prev tax yr
	set BEGYR=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)

	// Effective date may not be prior to the beginning of previous tax year
	if %EffectiveDate<BEGYR do Runtime.setErrMSG("DEP",878,$$DAT^%ZM(BEGYR)) quit

	do INIT(.dep,.ttx)
	if ER quit

	set ACN=dep.acn
	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN=:ACN,RPASEQ=:RPASEQ")
	type RecordUTBLRSPDEF urspdef=Db.getRecord("UTBLRSPDEF","KEY=:IRA")

	set AMT=+ttx.tamt

	if ttx.itc.extract() do CR(.dep,.ttx,.iratype,.urspdef)
	if 'ttx.itc.extract() do DR(.dep,.ttx,.iratype,.urspdef)

	quit 

DR(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype,RecordUTBLRSPDEF urspdef)

	// Debit Transactions

	type Public Number BKT,ER
	type Public String CMPLEX,UTSO,WHCALC
	type Number SWHCALC

	do TSO(.ttx,.urspdef,.iratype,0)
	do TBL(0)

	type ResultSet rs = Db.select("DIS","UTBLDISTYP","IRATYP=:iratype.iratyp")

	if 'rs.isEmpty() do { quit:ER

		type Number CODE
		set CODE = UTSO("IRAD")

		// Distribution Code invalid for plan 
		if '(Db.isDefined("UTBLDISTYP","IRATYP=:iratype.iratyp,DIS=:CODE")) do Runtime.setErrMSG("UTBLDISTYP",5476)
		}
	set SWHCALC=WHCALC

	// Minimum age distribution
	do MAD(.dep,.ttx,.urspdef)

	// Calculate distribution w/h if not from COMPLX
	if 'CMPLEX.exists() do DWA(.dep,.ttx,.iratype)

	// Calculate minimum annual dist. amt
	do MADAMT(.iratype)

	// non-resident - nodes 13 and 15
	do NONRWH(.dep,.ttx,.iratype)

	if BKT=38 do MAXFHW

	// Update "0" buckets
	do UPDIRA(.dep,.ttx,.iratype,0)

	quit


CR(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype,RecordUTBLRSPDEF urspdef)

	// Credit Transactions

	type Public Number BKT,ER,SEQ
	type Public String AMT,UTSO
	type Number DEPNOT

	do TSO(.ttx,.urspdef,.iratype,1)
	do TBL(1)

	type ResultSet rs = Db.select("CON","UTBLCONTYP","IRATYP=:iratype.iratyp")

	if 'rs.isEmpty() do { quit:ER
	
		type Number CODE
		set CODE = UTSO("IRAC")

		// Contribution Code invalid for plan 
		if '(Db.isDefined("UTBLCONTYP","IRATYP=:iratype.iratyp,CON=:CODE")) do Runtime.setErrMSG("UTBLCONTYP",5475)
		}

	if DEPNOT,$G(SEQ) do NOTICE(.ttx)

	// Update MAXLIF
	if $G(UTSO("MXLIF")) do MAXLIF(.ttx,.iratype) quit:ER

	// Military Contributions verification
	do MILCHK(.UTSO) quit:ER

	// Current year cont.
	if BKT=1 do {
		do CYR(.dep,.ttx,.iratype)
		do DOB(.dep,.ttx,.urspdef)
		}

	// Prior year cont.
	if (BKT=2)!(BKT=17) do {

		// RPA Military Contributions
		if (BKT=17) do RPAMCZC(AMT)
		do PYR(.dep,.ttx,.iratype,.urspdef)
		do DOB(.dep,.ttx,.urspdef)
		}

	do UPDIRA(.dep,.ttx,.iratype,1)

	quit


TSO(RecordTTX ttx,RecordUTBLRSPDEF urspdef,RecordIRATYPE iratype,LVL)
	// Retrieve values for IRA codes from TSO

	type public String TSO
	type public String X
	type String UTSO = ""

	set UTSO=""
	do OUT^UTSO(.UTSO,TSO)

	if LVL=0,('(UTSO("IRAD").get()).isNull()) quit
	if LVL=1,('(UTSO("IRAC").get()).isNull()) quit

	kill UTSO

	if ttx.itc1 do {
		set X=iratype.iracon
		if X.isNull() set X=urspdef.iracon
		if X.isNull() set X=CUVAR.IRACON
		}

	else  do {
		set X=iratype.iradis
		if X.isNull() set X=urspdef.iradis
		if X.isNull() set X=CUVAR.IRADIS
		}

	if LVL=0 set UTSO("IRAD")=X
	if LVL=1 set UTSO("IRAC")=X

	do IN^UTSO(.UTSO,.TSO)
	set ttx.tso=TSO

	quit


TBL(LVL)	// IRA reason code table

	type Public Number AGE,BKT,DEPNOT,ER,WHCALC
	type Public String UTSO = ""
	type Public String TSO
	type String KEY

	do OUT^UTSO(.UTSO,TSO)
	if ER quit

	if LVL=0 do {

		set KEY=UTSO("IRAD")

		type RecordUTBLIRADIS uiradis=Db.getRecord("UTBLIRADIS","KEY")

		set BKT=uiradis.rsn
		set WHCALC=uiradis.wh
		set AGE=uiradis.age
		}

	if LVL=1 do {

		set KEY=UTSO("IRAC")

		type RecordUTBLIRACON uiracon=Db.getRecord("UTBLIRACON","KEY")

		set BKT=uiracon.rsn
		set DEPNOT=uiracon.depnot
		set AGE=uiracon.age
		}

	quit


CYR(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype)	// Current year contribution limit

	type Public String OVR()
	type Number MAX,SUM

	if ttx.itc6+ttx.itc12 quit

	do MAX(.ttx,.dep,.iratype)

	// Contribution is greater than maximum of $<IRAOVR>
	if SUM>MAX set OVR(dep.cid,"OVR","IRAOVR")=MAX

	quit


PYR(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype,RecordUTBLRSPDEF urspdef)
	// Prior year contribution limit

	if ttx.itc6+ttx.itc12 quit

	type public Number ACN,BKT,CYR,RPASEQ
	type public String %MSKD,OVR(),UTSO()
	type Number EFY,MAX,MYR,SEFD,SUM,TAXYR

	if (BKT'=17) do {
		set SEFD=$S(%EffectiveDate:%EffectiveDate,1:%SystemDate)
		set MYR=urspdef.pryrdte
		set EFY=$$YEAR^SCADAT(SEFD,1)

		if '(MYR.isNull()) do {
			if urspdef.pryropt set MYR=$$NBD^UNBD(MYR)

			// Prior-year contribution past deadline of <IRALATE> 
			if SEFD>MYR set OVR(dep.cid,"OVR","IRALATE")=$$DAT^%ZM(MYR,$G(%MSKD))
			}

		// Prior-year backdate deadline expired as of <PRYRBKD>
		if CUVAR.PRYRBKD,(%SystemDate>CUVAR.PRYRBKD),EFY=$$YEAR^SCADAT(%SystemDate,1)-1 set OVR(dep.cid,"OVR","PRYRBKD")=CUVAR.PRYRBKD
	}
	
	do MAX(.ttx,.dep,.iratype)

	// Contribution is greater than maximum of $<IRAOVR> 
	if SUM>MAX set OVR(dep.cid,"OVR","IRAOVR")=MAX

	quit


DOB(RecordDEP dep,RecordTTX ttx,RecordUTBLRSPDEF urspdef)
	// Max age deposit restrictions

	type Public Number ACN,AGE
	type Public String UTSO(),OVR()
	type Number IRAC,LIMIT,MAXAGE,SEFD

	set SEFD=$S(%EffectiveDate:%EffectiveDate,1:%SystemDate)

	// Quit if KEOGH or rev.
	if dep.ira=3!(ttx.itc6+ttx.itc12) quit

	set IRAC=+$G(UTSO("IRAC"))
	if 'IRAC set IRAC=$P($G(UTSO("IRAC")),"#",2)

	if 'IRAC quit

	// Age limit analysis
	if 'AGE quit
	// No max age
	if 'urspdef.maxage quit

	type RecordCIF cif=Db.getRecord("CIF","ACN")

	// Invalid birthdate. Unable to verify age limitations.
	if 'cif.dob set OVR(dep.cid,"OVR","RPANODOB")="" quit

	set MAXAGE=cif.dob+$$^SCARND((urspdef.maxage*365.25),0,,,0)
	set LIMIT=$$EOTY^SCADAT(MAXAGE,1)

	if SEFD'>LIMIT quit

	// Plan owner's age exceeds maximum limit of <RPAMXAGE> 
	set OVR(dep.cid,"OVR","RPAMXAGE")=urspdef.maxage

	quit


Public DOD(RecordTTX ttx,RecordIRATYPE iratype)	// Death Benefits

	if ttx.itc6+ttx.itc12 quit

	type Public Number ACN,BKT,CID
	type Public String OVR()
	
	// Death benefit
	if ((BKT=6)!(BKT=59)!(BKT=60)!(BKT=68)!(BKT=75)!(BKT=85)!(BKT=87)) do BEN(.ttx,.iratype)

	type RecordCIF cif=Db.getRecord("CIF","ACN")

	// Plan owner deceased - death benefits apply 
	if cif.dod,(BKT'=6),(BKT'=26),(BKT'=27),(BKT'=59),(BKT'=60),(BKT'=68),(BKT'=75),(BKT'=85),(BKT'=87) set OVR(CID,"OVR","IRADTH1")="" quit

	// Plan owner not deceased - death benefits do not apply 
	if 'cif.dod,((BKT=6)!(BKT=26)!(BKT=27)!(BKT=59)!(BKT=60)!(BKT=68)!(BKT=75)!(BKT=85)!(BKT=87)) set OVR(CID,"OVR","IRADTH0")="" quit

	quit


Public BENREST(RecordDEP dep)	// Additional Death Distribution Restrictions requiring beneficiary.

	type Public Number ACN,BKT,RPASEQ
	type Public String UTSO(),OVR()

	type Number BENSEQ
	type String BENREL

	set BENREL=""
	set BENSEQ=$G(UTSO("BEN"))

	if BENSEQ do {

		type RecordIRABEN iraben=Db.getRecord("IRABEN","ACN,RPASEQ,BENSEQ",1)

		if iraben.getMode() set BENREL=iraben.benrel
		}

	// Any death distribution code
	if BENREL.isNull() do { quit

		// Death distribution - beneficiary not defined 
		if ((BKT=6)!(BKT=59)!(BKT=60)!(BKT=68)!(BKT=75)!(BKT=85)!(BKT=87)) set OVR(dep.cid,"OVR","IRANOBEN")=""

		// Death withdrawal. Non-spouse beneficiary not defined. 
		if BKT=27 set OVR(dep.cid,"OVR","RPANP")=""

		// Transfer to spouse. Spouse beneficiary not defined. 
		if BKT=26 set OVR(dep.cid,"OVR","RPASP")=""
		}

	type RecordUTBLBENREL ubenrel=Db.getRecord("UTBLBENREL","BENREL")

	// Death withdrawal. Non-spouse beneficiary not defined. 
	if BKT=27,(ubenrel.spi = 1)) set OVR(dep.cid,"OVR","RPANP")=""

	// Transfer to spouse. Spouse beneficiary not defined. 
	if BKT = 26,(ubenrel.spi '= 1)) set OVR(dep.cid,"OVR","RPASP")=""

	quit


MAD(RecordDEP dep,RecordTTX ttx,RecordUTBLRSPDEF urspdef)	// Check minimum age for distribution

	if ttx.itc6+ttx.itc12 quit

	type Public Number AGE,BKT
	type Public String OVR()
	// age limit analysis - from TBL
	if 'AGE quit

	// no minimum age
	if 'urspdef.minadis quit

	type Number SEFD

	set SEFD=$S(%EffectiveDate:%EffectiveDate,1:%SystemDate)

	type RecordCIF cif=Db.getRecord("CIF","ACN=:dep.acn")

	// Invalid birthdate. Unable to verify age limitations.
	if 'cif.dob set OVR(dep.cid,"OVR","RPANODOB")="" quit

	/*
	 Check if distribution type (Mandatory - Prior Year) is valid during
	 year following the year in which the plan owner attains the
	 mandatory distribution age UTBLRSPDEF.DISAGE
	*/

	if BKT=45,cif.age'>urspdef.disage do { quit

		if urspdef.disdead.isNull() quit

		// Dist valid only year after mandatory age 
		if SEFD>urspdef.disdead set OVR(dep.cid,"OVR","DISTAGE")=""
		}

	// Customer has not attained the minimum age <RPAMNDIS>
	if (SEFD-cif.dob)/365.25<urspdef.minadis set OVR(dep.cid,"OVR","RPAMNDIS")=urspdef.minadis

	quit


BEN(RecordTTX ttx,RecordIRATYPE iratype)	// Beneficiary Information

	type Public Number ACN,BKT,CYR,DSWA,DWA,RPASEQ
	type Public String TAMT,UTSO()

	if '$G(UTSO("BEN")) do DFLTBEN(.ttx,.iratype)
	if '$G(UTSO("BEN")) quit

	type Number BENSEQ = UTSO("BEN")

	type RecordIRABEN1 iraben1=Db.getRecord("IRABEN1","ACN,RPASEQ,BENSEQ,CYR",1)

	if BKT=6 do {
		set iraben1.tamt=iraben1.tamt+TAMT
		set iraben1.wth=iraben1.wth+DWA
		set iraben1.totstwh=iraben1.totstwh+DSWA
		}

	if BKT=59 do {
		set iraben1.tamt59=iraben1.tamt59+TAMT
		set iraben1.wth59=iraben1.wth59+DWA
		set iraben1.totswh59=iraben1.totswh59+DSWA
		}

	if BKT=60 do {
		set iraben1.tamt60=iraben1.tamt60+TAMT
		set iraben1.wth60=iraben1.wth60+DWA
		set iraben1.totswh60=iraben1.totswh60+DSWA
		}

	if BKT=68 do {
		set iraben1.tamt68=iraben1.tamt68+TAMT
		set iraben1.wth68=iraben1.wth68+DWA
		set iraben1.totswh68=iraben1.totswh68+DSWA
		}

	if BKT=75 do {
		set iraben1.tamt75=iraben1.tamt75+TAMT
		set iraben1.wth75=iraben1.wth75+DWA
		set iraben1.totswh75=iraben1.totswh75+DSWA
		}

	if BKT=85 do {
		set iraben1.tamt85=iraben1.tamt85+TAMT
		set iraben1.wth85=iraben1.wth85+DWA
		set iraben1.totswh85=iraben1.totswh85+DSWA
		}

	if BKT=87 do {
		set iraben1.tamt87=iraben1.tamt87+TAMT
		set iraben1.wth87=iraben1.wth87+DWA
		set iraben1.totswh87=iraben1.totswh87+DSWA
		}

	do iraben1.bypassSave()

	quit


DFLTBEN(RecordTTX ttx,RecordIRATYPE iratype) // Default beneficiary
	/*
	   When calling this subroutine,  the intention is to identify a
	   beneficiary for IRA funds distributed from an account because it
	   was not included in the transaction.  For instance, an off-line
	   transaction would not have been able to include a beneficiary
	   account in the transaction.  When this occurs, a transaction violation
	   will be generated, indicating that the default beneficiary has been
	   used, which may not have been the intended beneficiary.  Also, if
	   there are multiple beneficiaries tied to an account, another violation
	   is generated, indicating that multiple beneficiaries exist.  If there
	   are no beneficiaries for an account, a violation will be generated
	   in order to prevent the transaction from being posted.
	*/
	
	type Public Number ACN,CID,RPASEQ
	type Public String OVR(),UTSO()
	
	type Number IRABEN
	type String TSO

	set TSO=ttx.tso

	// Default beneficiary invoked
	set OVR(CID,"OVR","IRADFTBN")=""

	set IRABEN=iratype.iraben
	
	if 'IRABEN do {
		type ResultSet iraben1=Db.select("BENSEQ","IRABEN","ACN=:ACN AND RPASEQ=:RPASEQ","BENSEQ ASC")
		if iraben1.next() set IRABEN=iraben1.getCol("BENSEQ")
		}

	// Death distribution - beneficiary not defined
	if 'IRABEN set OVR(CID,"OVR","IRANOBEN")="" quit

	type ResultSet rs=Db.select("BENSEQ","IRABEN","ACN=:ACN AND RPASEQ=:RPASEQ AND BENSEQ NOT =:IRABEN")

	if rs.next() do { quit

		// Multiple benficiaries exist 
		set OVR(CID,"OVR","IRAMLTBN")=""
		}

	// Default needs to be assigned.
	set UTSO("BEN")=IRABEN
	set ttx.tso=$$FIELDIN^UTSO(TSO,"BEN",IRABEN)

	quit


MAX(RecordTTX ttx,RecordDEP dep,RecordIRATYPE iratype)	// Calculate maximum contribution limits
	/*
	NOTE - MAX is only ever called from CYR or PYR which are only called from CR.
	BKT will only ever have the value of 1 or 2.
	*/

	type public Number ACN,BKT,CYR,MAX,RPASEQ,SUM
	type public String UTSO()

	type Number IRA
	type String MCL

	set MCL=""
	set IRA=dep.ira
	if BKT=1 set MCL=iratype.limit
	if (BKT=2)!(BKT=17) set MCL=iratype.limitpy

	// Set contributions to max from user table if ^IRA value is null.
	if MCL.isNull() do {

		type RecordUTBLRSPDEF urspdef=Db.getRecord("UTBLRSPDEF","KEY=:IRA")

		if BKT=1 set MAX=+urspdef.limit
		if (BKT=2)!(BKT=17) set MAX=+urspdef.limitpy
		}
	else  set MAX=MCL

	if 'MAX set SUM=0 quit

	set SUM=+ttx.tamt

	type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:CYR",1)

	if ira.getMode() do {

		if (BKT=1) set SUM=SUM+ira.c1
		if BKT=2 do {
			
			// sum of current year contribution (101) from prior year bucket and 
			// prior year contibution (102) from current year bucket and tamt
			type Number PYR 
			set PYR = CYR - 1
			type RecordIRA ira1=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:PYR",1)
			set SUM = SUM + ira1.c1 + ira.c2
			}

		if BKT=17 do {
			type Number MCZYR
			set MCZYR=UTSO("MCZYR")

			// Contribution made in Military year using code 101
			type RecordIRA ira1=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:MCZYR",1)
			if ira1.getMode() set SUM=SUM+ira1.c1

			// Contribution made in Military year + 1 using code 102
			set ira1=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:MCZYR+1",1)
			if ira1.getMode() set SUM=SUM+ira1.c2

			// Contribution made using 117 for the Military year
			type ResultSet rs=Db.select("MCZCAMT","RPAMCZC","ACN=:ACN AND RPASEQ=:RPASEQ AND MCZYR=:MCZYR")
			while rs.next() set SUM=SUM+rs.getCol("MCZCAMT")
			}
		}
	quit


MAXFHW	// Maximum distribution for first home withdrawl

	type Public Number ACN,CID
	type Public String AMT,OVR()

	type Number TOTFHW = AMT

	type ResultSet rs=Db.select("D38","IRA","ACN=:ACN")

	while rs.next() set TOTFHW=TOTFHW+rs.getCol(1)

	// Total First Home Purchase distribution exceeds $10,000
	if TOTFHW>10000 set OVR(CID,"OVR","MAXFHW")=""

	quit 


NOTICE(RecordTTX ttx)	// Set entry for contribution notice

	type public Number ACN,CID,EXCLUDE,RPASEQ,TSEQ

	if '(ttx.itc6+ttx.itc12) do { quit

		type Date TEFD
		type Number HSEQ,TAMT

		set HSEQ=Db.nextVal("HIST","CID")
		set TEFD=$S(%EffectiveDate:%EffectiveDate,1:%SystemDate)
		set TAMT=+ttx.tamt

		type RecordRSPDNOT rspdnot=Class.new("RecordRSPDNOT")

		set rspdnot.acn=ACN
		set rspdnot.rpaseq=RPASEQ
		set rspdnot.cid=CID
		set rspdnot.tseq=HSEQ
		set rspdnot.efd=TEFD
		set rspdnot.tamt=TAMT

		do rspdnot.bypassSave()
		}

	// Find history sequence for EC's and REV's
	if ttx.itc12 do {
		set TSEQ=$$FIELD^UTSO(ttx.tso,"REV")
		set EXCLUDE=1
		}
	else  do {
		type Boolean HIT
		type Date JD
		type String TS,TSO

		set HIT=""
		set TS=$$FIELD^UTSO(ttx.tso,"EC")
		set JD=%SystemDate
		set TSEQ=""

		type ResultSet rs=Db.select("TSEQ,TSO","HIST","CID=:CID AND UID=:%UserID AND BRCD=:BRCD AND TJD=:JD AND TRC=:TS","TSEQ DESC")

		if rs.isEmpty() quit

		while rs.next() do { quit:HIT

			set TSEQ=rs.getCol(1)
			set TSO=rs.getCol(2)

			if TSO["IRAC#" set HIT=1
			}

		set EXCLUDE=2
		}

	type RecordRSPDNOT rspdnot=Db.getRecord("RSPDNOT","ACN,RPASEQ,CID,TSEQ",1)
	if rspdnot.getMode()=0 quit

	/*
	  Check to see if history sequence generated a notice in RSPDNOT.
	  If notice is generated, flag the sequence, do not delete it.
	*/
	if 'rspdnot.ndate.isNull() do { quit

		set rspdnot.exclude=EXCLUDE

		do rspdnot.bypassSave()
		}

	// If the notice is not generated yet, delete sequence entry.
	do Db.fastDelete("RSPDNOT","ACN,RPASEQ,CID,TSEQ")

	quit


Public CYRINT(RecordDEP dep,RecordTTX ttx,UPDTSO)	// Current year interest adjusment

	type Number CYR

	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)

	do ADJINT(.dep,.ttx,UPDTSO)

	quit


Public PYRINT(RecordDEP dep,RecordTTX ttx,UPDTSO)	// Prior year interest adjustment

	type Number BOTY,CYR

	// beg of prev tax yr
	set BOTY=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)
	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(BOTY,1),1)

	do ADJINT(.dep,.ttx,UPDTSO)

	quit


ADJINT(RecordDEP dep,RecordTTX ttx,UPDTSO)	// Interest adjustment

	type public Number ACN,AMT,CID,ER
	type public String TAMT
	type Number ECREV,IRA,RPASEQ
	type String TSO

	do INIT(.dep,.ttx)
	if ER quit

	set AMT=+$S(ttx.itc1:TAMT,1:-TAMT)
	set IRA=dep.ira

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN,RPASEQ")
	type RecordUTBLRSPDEF urspdef=Db.getRecord("UTBLRSPDEF","IRA")

	if UPDTSO do {
		type String UTSO()

		set UTSO("IRAC")=CUVAR.IRAINT
		set TSO=ttx.tso

		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}

	do CR(.dep,.ttx,.iratype,.urspdef)

	quit


Public CYRPEN(RecordDEP dep,RecordTTX ttx,UPDTSO)	// Current year penalty

	type Number CYR

	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)

	do ADJPEN(.dep,.ttx,UPDTSO)

	quit


Public PYRPEN(RecordDEP dep,RecordTTX ttx,UPDTSO)	// Prior year penalty

	type Number BOTY,CYR

	// beg of prev tax yr
	set BOTY=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)
	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(BOTY,1),1)

	do ADJPEN(.dep,.ttx,UPDTSO)

	quit


ADJPEN(RecordDEP dep,RecordTTX ttx,UPDTSO)	// Penalty adjustment

	type public Number ACN,CID,ER,IRAEXM
	type public String AMT,TAMT
	type Number ECREV,IRA,RPASEQ,TSO

	do INIT(.dep,.ttx)
	if ER quit

	set IRA=dep.ira

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN,RPASEQ")
	type RecordUTBLRSPDEF urspdef=Db.getRecord("UTBLRSPDEF","IRA")

	set AMT=TAMT
	set TAMT=+$S(ttx.itc1:-TAMT,1:TAMT)
	set IRAEXM=0

	if UPDTSO do {
		type String UTSO

		set TSO=ttx.tso
		set UTSO("IRAD")=CUVAR.IRAPEN

		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}

	do DR(.dep,.ttx,.iratype,.urspdef)

	set TAMT=AMT

	quit


Public CYRWTH(RecordDEP dep,RecordTTX ttx)	// Current year adjustment

	type Number CYR

	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)

	do ADJWTH(.dep,.ttx)

	quit


Public PYRWTH(RecordDEP dep,RecordTTX ttx)	// Prior year adjustment

	type Number BOTY,CYR

	// beg of prev tax yr
	set BOTY=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)
	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(BOTY,1),1)

	do ADJWTH(.dep,.ttx)

	quit


ADJWTH(RecordDEP dep,RecordTTX ttx) // Distribution withholding adjustment

	type Public Number ACN,ADJSTATE,BKT,CID,CYR,ER,IRA,IRAEXM,TFRCID
	type public String AMT,TAMT
	
	type Number ECREV,RPASEQ
	type String TSO,X

	do INIT(.dep,.ttx)
	if ER quit

	set IRA=dep.ira

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN,RPASEQ")
	type RecordUTBLRSPDEF urspdef=Db.getRecord("UTBLRSPDEF","IRA")

	set AMT=TAMT
	if 'ttx.itc1,ttx.itc6+ttx.itc12 set AMT=-AMT
	if ('ttx.getStoredValue("TranMode")) do TSO(.ttx,.urspdef,.iratype,0)

	do TBL(0)

	set X=$$IRABKT(CID,ACN,RPASEQ,CYR,BKT)

	// Adjustment exceeds withholding
	if X+AMT<0,'(ttx.itc6+ttx.itc12) do Runtime.setErrMSG("DEP",233) quit:ER

	if TAMT>0 set ttx.tso=TSO

	if '(ADJSTATE.get()) do UPDIRA(.dep,.ttx,.iratype,2) quit:ER
	do UPDIRA(.dep,.ttx,.iratype,4) quit:ER

	if dep.nr,iratype.rspwind do UPDIRA(.dep,.ttx,.iratype,14) quit:ER
	if $G(TFRCID), ('ttx.getStoredValue("TranMode")), ((BKT=6)!(BKT=59)!(BKT=60)!(BKT=68)!(BKT=75)!(BKT=85)!(BKT=87))) do BENSEQ(.iratype) quit:ER

	if IRAEXM do DOD(.ttx,.iratype)

	quit


Public CYRPRN(RecordDEP dep,RecordTTX ttx)	// Current year adjustment

	type Number CYR

	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)

	do ADJPRN(.dep,.ttx)

	quit


Public PYRPRN(RecordDEP dep,RecordTTX ttx)	// Prior year adjustment

	type Number BOTY,CYR

	// beg of prev tax yr
	set BOTY=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)
	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(BOTY,1),1)

	do ADJPRN(.dep,.ttx)

	quit


ADJPRN(RecordDEP dep,RecordTTX ttx)	// Principal adjustments (excludes distribution withholding)

	type public Number ACN,CID,ER
	type public String AMT,TAMT

	type Number ECREV,RPASEQ
	type String TSO

	do INIT(.dep,.ttx)
	if ER quit

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN,RPASEQ")

	set AMT=+$S(ttx.itc1:-TAMT,1:TAMT)
	if TSO.isNull(), ('ttx.getStoredValue("TranMode")) do {
		set TSO=iratype.iradis
		if TSO.isNull() set TSO=CUVAR.IRADIS
		}

	do TBL(0)

	if ER quit

	do UPDIRA(.dep,.ttx,.iratype,0)

	quit


INIT(RecordDEP dep,RecordTTX ttx)

	type Public Number ACN,ECREV,IRA,IRAEXM,RPASEQ
	type Public String TSO

	type String X,XTSO

	set TSO=ttx.tso
	set ECREV=ttx.itc6+ttx.itc12
	set RPASEQ=dep.rpaseq
	set ACN=dep.acn
	set IRA=dep.ira
	set IRAEXM=1
	set XTSO=""

	do OUT^UTSO(.XTSO,TSO)

	// Error correct
	set X=$G(XTSO("EC"))
	if X,ttx.itc6 do EC(.ttx)

	// Reversal
	set X=$G(XTSO("REV"))
	if X,ttx.itc12 do REV(.ttx,X)

	quit


EC(RecordTTX ttx)	// Error Correct

	type Public Number ACN,CYR,RPASEQ
	type Public String TAMT,TSO

	type Number BENSEQ,DIST,DSWA,DWA,FWTH,RSN,SWTH
	type String ETC,KEY,UTSO

	set UTSO=""
	do OUT^UTSO(.UTSO,TSO)

	if 'UTSO("BEN").exists() quit

	set KEY=UTSO("IRAD")

	type RecordUTBLIRADIS uiradis=Db.getRecord("UTBLIRADIS","KEY")

	set RSN=uiradis.rsn
	if (RSN'=6),(RSN'=59),(RSN'=60),(RSN'=68),(RSN'=75),(RSN'=85),(RSN'=87) quit
        
	set BENSEQ=UTSO("BEN")
	set DWA=ttx.whld
	set DSWA=(ttx.tamt).piece("#",15)
	set ETC=ttx.etc

	type RecordTRN trn=Db.getRecord("TRN","ETC")
	type RecordIRABEN1 iraben1=Db.getRecord("IRABEN1","ACN,RPASEQ,BENSEQ,CYR")

	// W/H Adj (Interest and Distributions)
	if trn.pcfd4 do {
		if ttx.itc1 set iraben1.wth=iraben1.wth+TAMT
		else  set iraben1.wth=iraben1.wth-TAMT
		}

	else  do {

		if ttx.itc1 set TAMT=-TAMT,DWA=-DWA
		
		if RSN=6 do {
			set iraben1.tamt=iraben1.tamt+TAMT
			set iraben1.wth=iraben1.wth+DWA
			set iraben1.totstwh=iraben1.totstwh+DSWA
			}
	
		if RSN=59 do {
			set iraben1.tamt59=iraben1.tamt59+TAMT
			set iraben1.wth59=iraben1.wth59+DWA
			set iraben1.totswh59=iraben1.totswh59+DSWA
			}
	
		if RSN=60 do {
			set iraben1.tamt60=iraben1.tamt60+TAMT
			set iraben1.wth60=iraben1.wth60+DWA
			set iraben1.totswh60=iraben1.totswh60+DSWA
			}
	
		if RSN=68 do {
			set iraben1.tamt68=iraben1.tamt68+TAMT
			set iraben1.wth68=iraben1.wth68+DWA
			set iraben1.totswh68=iraben1.totswh68+DSWA
			}
	
		if RSN=75 do {
			set iraben1.tamt75=iraben1.tamt75+TAMT
			set iraben1.wth75=iraben1.wth75+DWA
			set iraben1.totswh75=iraben1.totswh75+DSWA
			}
	
		if RSN=85 do {
			set iraben1.tamt85=iraben1.tamt85+TAMT
			set iraben1.wth85=iraben1.wth85+DWA
			set iraben1.totswh85=iraben1.totswh85+DSWA
			}
	
		if RSN=87 do {
			set iraben1.tamt87=iraben1.tamt87+TAMT
			set iraben1.wth87=iraben1.wth87+DWA
			set iraben1.totswh87=iraben1.totswh87+DSWA
			}

		if ttx.itc1 set TAMT=-TAMT,DWA=-DWA
		}

	do iraben1.bypassSave()

	quit


REV(RecordTTX ttx,TSEQ)		// Transaction reversal

	type Public Number CID
	type Public String TSO
	
	type RecordHIST hist=Db.getRecord("HIST","CID,TSEQ")

	set TSO=hist.tso

	do EC(.ttx)

	quit 


Public UPDIRA(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype,LVL) // Update IRA bucket

	type Public Number ACN,AMTWA,BKT,CYR,DSWA,DWA,RPASEQ
	type public String AMT,TAMT
	type Number BKTAMT,FSNAMT,TAXYR

	set DSWA=DSWA.get()
	if (LVL=4),('DSWA) quit

	set FSNAMT=$$AMT(AMTWA.get(),TAMT.get(),AMT.get(),DWA.get(),LVL,BKT,DSWA)
	set TAXYR=CYR

	type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,TAXYR",1)

	if LVL=0 set BKTAMT=$$UPDIRA0(.dep,.ttx,.ira,BKT,FSNAMT)
	if LVL=1 set BKTAMT=$$UPDIRA1(.ttx,.ira,BKT,FSNAMT)
	if LVL=2 set BKTAMT=$$UPDIRA2(.ttx,.ira,BKT,FSNAMT)
	if LVL=4 set BKTAMT=$$UPDIRA4(.ttx,.ira,BKT,DSWA)
	if LVL=13 set BKTAMT=$$UPDIRA13(.ttx,.ira,BKT,FSNAMT)
	if LVL=14 set BKTAMT=$$UPDIRA14(.ttx,.ira,BKT,FSNAMT)
	if LVL=15 set BKTAMT=$$UPDIRA15(.ttx,.ira,BKT,FSNAMT)

	do ira.bypassSave()

	if BKTAMT'<0 quit

	// Adjustment exceeds distribution
	if LVL=0 do Runtime.setErrMSG("DEP",7012) quit

	// Adjustment exceeds contribution
	if LVL=1 do Runtime.setErrMSG("DEP",7011) quit

	// Adjustment exceeds withholding
	do Runtime.setErrMSG("DEP",233)

	quit


public UPDIRA0(RecordDEP dep,RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	type Public Number MADAMT
	type Public String TSO,UTSO()

	if BKT=1 set ira.d1=ira.d1+FSNAMT quit ira.d1
	if BKT=2 set ira.d2=ira.d2+FSNAMT quit ira.d2
	if BKT=3 set ira.d3=ira.d3+FSNAMT quit ira.d3
	if BKT=4 set ira.d4=ira.d4+FSNAMT quit ira.d4
	if BKT=5 set ira.d5=ira.d5+FSNAMT quit ira.d5
	if BKT=6 set ira.d6=ira.d6+FSNAMT quit ira.d6
	if BKT=7 set ira.d7=ira.d7+FSNAMT quit ira.d7
	if BKT=8 set ira.d8=ira.d8+FSNAMT quit ira.d8
	if BKT=10 do { quit ira.d10

		type String UTSO

		set ira.d10=ira.d10+FSNAMT
		set ira.madcy=ira.madcy+MADAMT

		if dep.nr set ira.nrd45=ira.nrd45+MADAMT

		set UTSO("MAD")=MADAMT

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}
	if BKT=11 set ira.d11=ira.d11+FSNAMT quit ira.d11
	if BKT=12 set ira.d12=ira.d12+FSNAMT quit ira.d12
	if BKT=13 set ira.d13=ira.d13+FSNAMT quit ira.d13
	if BKT=14 set ira.d14=ira.d14+FSNAMT quit ira.d14
	if BKT=15 set ira.d15=ira.d15+FSNAMT quit ira.d15
	if BKT=16 set ira.d16=ira.d16+FSNAMT quit ira.d16
	if BKT=17 set ira.d17=ira.d17+FSNAMT quit ira.d17
	if BKT=18 set ira.d18=ira.d18+FSNAMT quit ira.d18
	if BKT=19 set ira.d19=ira.d19+FSNAMT quit ira.d19
	if BKT=20 set ira.d20=ira.d20+FSNAMT quit ira.d20
	if BKT=21 set ira.d21=ira.d21+FSNAMT quit ira.d21
	if BKT=22 set ira.d22=ira.d22+FSNAMT quit ira.d22
	if BKT=23 set ira.d23=ira.d23+FSNAMT quit ira.d23
	if BKT=24 set ira.d24=ira.d24+FSNAMT quit ira.d24
	if BKT=25 set ira.d25=ira.d25+FSNAMT quit ira.d25
	if BKT=26 set ira.d26=ira.d26+FSNAMT quit ira.d26
	if BKT=27 set ira.d27=ira.d27+FSNAMT quit ira.d27
	if BKT=28 set ira.d28=ira.d28+FSNAMT quit ira.d28
	if BKT=29 set ira.d29=ira.d29+FSNAMT quit ira.d29
	if BKT=30 set ira.pvmad=ira.pvmad+FSNAMT quit ira.pvmad
	if BKT=31 set ira.maxlif=ira.maxlif+FSNAMT quit ira.maxlif
	if BKT=32 set ira.madamt=ira.madamt+FSNAMT quit ira.madamt
	if BKT=33 set ira.madcy=ira.madcy+FSNAMT quit ira.madcy
	if BKT=34 set ira.d34=ira.d34+FSNAMT quit ira.d34
	if BKT=35 set ira.d35=ira.d35+FSNAMT quit ira.d35
	if BKT=36 set ira.d36=ira.d36+FSNAMT quit ira.d36
	if BKT=37 set ira.d37=ira.d37+FSNAMT quit ira.d37
	if BKT=38 set ira.d38=ira.d38+FSNAMT quit ira.d38
	if BKT=39 set ira.d39=ira.d39+FSNAMT quit ira.d39
	if BKT=40 set ira.neildte=ira.neildte+FSNAMT quit ira.neildte
	if BKT=41 set ira.rnei=ira.rnei+FSNAMT quit ira.rnei
	if BKT=42 set ira.unei=ira.unei+FSNAMT quit ira.unei
	if BKT=43 set ira.d43=ira.d43+FSNAMT quit ira.d43
	if BKT=44 set ira.d44=ira.d44+FSNAMT quit ira.d44
	if BKT=45 do { quit ira.d45

		type String UTSO

		set ira.d45=ira.d45+FSNAMT
		set ira.madcy=ira.d45
		set UTSO("MAD")=ira.d45

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}
	if BKT=46 set ira.d46=ira.d46+FSNAMT quit ira.d46
	if BKT=47 set ira.d47=ira.d47+FSNAMT quit ira.d47
	if BKT=48 set ira.d48=ira.d48+FSNAMT quit ira.d48
	if BKT=49 set ira.d49=ira.d49+FSNAMT quit ira.d49

	if BKT=50 set ira.d50=ira.d50+FSNAMT quit ira.d50
	if BKT=51 set ira.d51=ira.d51+FSNAMT quit ira.d51
	if BKT=52 set ira.d52=ira.d52+FSNAMT quit ira.d52
	if BKT=53 set ira.d53=ira.d53+FSNAMT quit ira.d53
	if BKT=54 set ira.d54=ira.d54+FSNAMT quit ira.d54
	if BKT=55 set ira.d55=ira.d55+FSNAMT quit ira.d55
	if BKT=56 set ira.d56=ira.d56+FSNAMT quit ira.d56
	if BKT=57 set ira.d57=ira.d57+FSNAMT quit ira.d57
	if BKT=58 set ira.d58=ira.d58+FSNAMT quit ira.d58
	if BKT=59 set ira.d59=ira.d59+FSNAMT quit ira.d59

	if BKT=60 set ira.d60=ira.d60+FSNAMT quit ira.d60
	if BKT=61 set ira.d61=ira.d61+FSNAMT quit ira.d61
	if BKT=62 set ira.d62=ira.d62+FSNAMT quit ira.d62
	if BKT=63 set ira.d63=ira.d63+FSNAMT quit ira.d63
	if BKT=64 set ira.d64=ira.d64+FSNAMT quit ira.d64
	if BKT=65 set ira.d65=ira.d65+FSNAMT quit ira.d65
	if BKT=66 set ira.d66=ira.d66+FSNAMT quit ira.d66
	if BKT=67 set ira.d67=ira.d67+FSNAMT quit ira.d67
	if BKT=68 set ira.d68=ira.d68+FSNAMT quit ira.d68
	if BKT=69 set ira.d69=ira.d69+FSNAMT quit ira.d69

	if BKT=70 set ira.d70=ira.d70+FSNAMT quit ira.d70
	if BKT=71 set ira.d71=ira.d71+FSNAMT quit ira.d71
	if BKT=72 set ira.d72=ira.d72+FSNAMT quit ira.d72
	if BKT=73 set ira.d73=ira.d73+FSNAMT quit ira.d73
	if BKT=74 set ira.d74=ira.d74+FSNAMT quit ira.d74
	if BKT=75 set ira.d75=ira.d75+FSNAMT quit ira.d75
	if BKT=76 set ira.d76=ira.d76+FSNAMT quit ira.d76
	if BKT=77 set ira.d77=ira.d77+FSNAMT quit ira.d77
	if BKT=78 set ira.d78=ira.d78+FSNAMT quit ira.d78
	if BKT=79 set ira.d79=ira.d79+FSNAMT quit ira.d79

	if BKT=80 set ira.d80=ira.d80+FSNAMT quit ira.d80
	if BKT=81 set ira.d81=ira.d81+FSNAMT quit ira.d81
	if BKT=82 set ira.d82=ira.d82+FSNAMT quit ira.d82
	if BKT=83 set ira.d83=ira.d83+FSNAMT quit ira.d83
	if BKT=84 set ira.d84=ira.d84+FSNAMT quit ira.d84
	if BKT=85 set ira.d85=ira.d85+FSNAMT quit ira.d85
	if BKT=86 set ira.d86=ira.d86+FSNAMT quit ira.d86
	if BKT=87 set ira.d87=ira.d87+FSNAMT quit ira.d87
	if BKT=88 set ira.d88=ira.d88+FSNAMT quit ira.d88
	if BKT=89 set ira.d89=ira.d89+FSNAMT quit ira.d89

	if BKT=94 set ira.d94=ira.d94+FSNAMT quit ira.d94
	if BKT=95 set ira.d95=ira.d95+FSNAMT quit ira.d95
	if BKT=96 set ira.d96=ira.d96+FSNAMT quit ira.d96
	if BKT=97 set ira.d97=ira.d97+FSNAMT quit ira.d97
	if BKT=98 set ira.d98=ira.d98+FSNAMT quit ira.d98
	if BKT=99 set ira.d99=ira.d99+FSNAMT quit ira.d99

	quit 0


public UPDIRA1(RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	if BKT=1 set ira.c1=ira.c1+FSNAMT quit ira.c1
	if BKT=2 set ira.c2=ira.c2+FSNAMT quit ira.c2
	if BKT=3 set ira.c3=ira.c3+FSNAMT quit ira.c3
	if BKT=4 set ira.c4=ira.c4+FSNAMT quit ira.c4
	if BKT=5 set ira.c5=ira.c5+FSNAMT quit ira.c5
	if BKT=6 set ira.c6=ira.c6+FSNAMT quit ira.c6
	if BKT=7 set ira.c7=ira.c7+FSNAMT quit ira.c7
	if BKT=8 set ira.c8=ira.c8+FSNAMT quit ira.c8
	if BKT=9 set ira.c9=ira.c9+FSNAMT quit ira.c9
	if BKT=10 set ira.c10=ira.c10+FSNAMT quit ira.c10
	if BKT=11 set ira.c11=ira.c11+FSNAMT quit ira.c11
	if BKT=12 set ira.c12=ira.c12+FSNAMT quit ira.c12
	if BKT=13 set ira.c13=ira.c13+FSNAMT quit ira.c13
	if BKT=14 set ira.c14=ira.c14+FSNAMT quit ira.c14
	if BKT=15 set ira.c15=ira.c15+FSNAMT quit ira.c15
	if BKT=16 set ira.c16=ira.c16+FSNAMT quit ira.c16
	if BKT=17 set ira.c17=ira.c17+FSNAMT quit ira.c17

	quit 0


public UPDIRA2(RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	type Public String TSO,UTSO()
	
	if BKT=1 set ira.w1=ira.w1+FSNAMT quit ira.w1
	if BKT=2 set ira.w2=ira.w2+FSNAMT quit ira.w2
	if BKT=3 set ira.w3=ira.w3+FSNAMT quit ira.w3
	if BKT=4 set ira.w4=ira.w4+FSNAMT quit ira.w4
	if BKT=5 set ira.w5=ira.w5+FSNAMT quit ira.w5
	if BKT=6 set ira.w6=ira.w6+FSNAMT quit ira.w6
	if BKT=7 set ira.w7=ira.w7+FSNAMT quit ira.w7
	if BKT=8 set ira.w8=ira.w8+FSNAMT quit ira.w8
	if BKT=9 set ira.w9=ira.w9+FSNAMT quit ira.w9
	if BKT=10 set ira.w10=ira.w10+FSNAMT quit ira.w10
	if BKT=11 set ira.w11=ira.w11+FSNAMT quit ira.w11
	if BKT=12 set ira.w12=ira.w12+FSNAMT quit ira.w12
	if BKT=13 set ira.w13=ira.w13+FSNAMT quit ira.w13
	if BKT=14 set ira.w14=ira.w14+FSNAMT quit ira.w14
	if BKT=15 set ira.w15=ira.w15+FSNAMT quit ira.w15
	if BKT=16 set ira.w16=ira.w16+FSNAMT quit ira.w16
	if BKT=17 set ira.w17=ira.w17+FSNAMT quit ira.w17
	if BKT=18 set ira.w18=ira.w18+FSNAMT quit ira.w18
	if BKT=19 set ira.w19=ira.w19+FSNAMT quit ira.w19
	if BKT=20 set ira.w20=ira.w20+FSNAMT quit ira.w20
	if BKT=21 set ira.w21=ira.w21+FSNAMT quit ira.w21
	if BKT=22 set ira.w22=ira.w22+FSNAMT quit ira.w22
	if BKT=23 set ira.w23=ira.w23+FSNAMT quit ira.w23
	if BKT=24 set ira.w24=ira.w24+FSNAMT quit ira.w24
	if BKT=25 set ira.w25=ira.w25+FSNAMT quit ira.w25
	if BKT=26 set ira.w26=ira.w26+FSNAMT quit ira.w26
	if BKT=27 set ira.w27=ira.w27+FSNAMT quit ira.w27
	if BKT=28 set ira.w28=ira.w28+FSNAMT quit ira.w28
	if BKT=29 set ira.w29=ira.w29+FSNAMT quit ira.w29
	if BKT=34 set ira.w34=ira.w34+FSNAMT quit ira.w34
	if BKT=35 set ira.w35=ira.w35+FSNAMT quit ira.w35
	if BKT=36 set ira.w36=ira.w36+FSNAMT quit ira.w36
	if BKT=37 set ira.w37=ira.w37+FSNAMT quit ira.w37
	if BKT=38 set ira.w38=ira.w38+FSNAMT quit ira.w38
	if BKT=39 set ira.w39=ira.w39+FSNAMT quit ira.w39
	if BKT=43 set ira.w43=ira.w43+FSNAMT quit ira.w43
	if BKT=44 set ira.w44=ira.w44+FSNAMT quit ira.w44
	if BKT=45 do { quit ira.w45

		type String UTSO

		set ira.madcy=ira.d45
		set ira.w45=ira.w45+FSNAMT
		set UTSO("MAD")=ira.w45

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}
	if BKT=47 set ira.w47=ira.w47+FSNAMT quit ira.w47
	if BKT=48 set ira.w48=ira.w48+FSNAMT quit ira.w48
	if BKT=49 set ira.w49=ira.w49+FSNAMT quit ira.w49

	if BKT=50 set ira.w50=ira.w50+FSNAMT quit ira.w50
	if BKT=51 set ira.w51=ira.w51+FSNAMT quit ira.w51
	if BKT=52 set ira.w52=ira.w52+FSNAMT quit ira.w52
	if BKT=53 set ira.w53=ira.w53+FSNAMT quit ira.w53
	if BKT=54 set ira.w54=ira.w54+FSNAMT quit ira.w54
	if BKT=55 set ira.w55=ira.w55+FSNAMT quit ira.w55
	if BKT=56 set ira.w56=ira.w56+FSNAMT quit ira.w56
	if BKT=57 set ira.w57=ira.w57+FSNAMT quit ira.w57
	if BKT=58 set ira.w58=ira.w58+FSNAMT quit ira.w58
	if BKT=59 set ira.w59=ira.w59+FSNAMT quit ira.w59

	if BKT=60 set ira.w60=ira.w60+FSNAMT quit ira.w60
	if BKT=61 set ira.w61=ira.w61+FSNAMT quit ira.w61
	if BKT=62 set ira.w62=ira.w62+FSNAMT quit ira.w62
	if BKT=63 set ira.w63=ira.w63+FSNAMT quit ira.w63
	if BKT=64 set ira.w64=ira.w64+FSNAMT quit ira.w64
	if BKT=65 set ira.w65=ira.w65+FSNAMT quit ira.w65
	if BKT=66 set ira.w66=ira.w66+FSNAMT quit ira.w66
	if BKT=67 set ira.w67=ira.w67+FSNAMT quit ira.w67
	if BKT=68 set ira.w68=ira.w68+FSNAMT quit ira.w68
	if BKT=69 set ira.w69=ira.w69+FSNAMT quit ira.w69

	if BKT=70 set ira.w70=ira.w70+FSNAMT quit ira.w70
	if BKT=71 set ira.w71=ira.w71+FSNAMT quit ira.w71
	if BKT=72 set ira.w72=ira.w72+FSNAMT quit ira.w72
	if BKT=73 set ira.w73=ira.w73+FSNAMT quit ira.w73
	if BKT=74 set ira.w74=ira.w74+FSNAMT quit ira.w74
	if BKT=75 set ira.w75=ira.w75+FSNAMT quit ira.w75
	if BKT=76 set ira.w76=ira.w76+FSNAMT quit ira.w76
	if BKT=77 set ira.w77=ira.w77+FSNAMT quit ira.w77
	if BKT=78 set ira.w78=ira.w78+FSNAMT quit ira.w78
	if BKT=79 set ira.w79=ira.w79+FSNAMT quit ira.w79

	if BKT=80 set ira.w80=ira.w80+FSNAMT quit ira.w80
	if BKT=81 set ira.w81=ira.w81+FSNAMT quit ira.w81
	if BKT=82 set ira.w82=ira.w82+FSNAMT quit ira.w82
	if BKT=83 set ira.w83=ira.w83+FSNAMT quit ira.w83
	if BKT=84 set ira.w84=ira.w84+FSNAMT quit ira.w84
	if BKT=85 set ira.w85=ira.w85+FSNAMT quit ira.w85
	if BKT=86 set ira.w86=ira.w86+FSNAMT quit ira.w86
	if BKT=87 set ira.w87=ira.w87+FSNAMT quit ira.w87
	if BKT=88 set ira.w88=ira.w88+FSNAMT quit ira.w88
	if BKT=89 set ira.w89=ira.w89+FSNAMT quit ira.w89

	if BKT=94 set ira.w94=ira.w94+FSNAMT quit ira.w94
	if BKT=95 set ira.w95=ira.w95+FSNAMT quit ira.w95
	if BKT=96 set ira.w96=ira.w96+FSNAMT quit ira.w96
	if BKT=97 set ira.w97=ira.w97+FSNAMT quit ira.w97
	if BKT=98 set ira.w98=ira.w98+FSNAMT quit ira.w98
	if BKT=99 set ira.w99=ira.w99+FSNAMT quit ira.w99

	quit 0


public UPDIRA4(RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	type Public String TSO,UTSO()
	
	if BKT=1 set ira.sw1=ira.sw1+FSNAMT quit ira.sw1
	if BKT=2 set ira.sw2=ira.sw2+FSNAMT quit ira.sw2
	if BKT=3 set ira.sw3=ira.sw3+FSNAMT quit ira.sw3
	if BKT=4 set ira.sw4=ira.sw4+FSNAMT quit ira.sw4
	if BKT=5 set ira.sw5=ira.sw5+FSNAMT quit ira.sw5
	if BKT=6 set ira.sw6=ira.sw6+FSNAMT quit ira.sw6
	if BKT=7 set ira.sw7=ira.sw7+FSNAMT quit ira.sw7
	if BKT=8 set ira.sw8=ira.sw8+FSNAMT quit ira.sw8
	if BKT=10 set ira.sw10=ira.sw10+FSNAMT quit ira.sw10
	if BKT=11 set ira.sw11=ira.sw11+FSNAMT quit ira.sw11
	if BKT=12 set ira.sw12=ira.sw12+FSNAMT quit ira.sw12
	if BKT=13 set ira.sw13=ira.sw13+FSNAMT quit ira.sw13
	if BKT=14 set ira.sw14=ira.sw14+FSNAMT quit ira.sw14
	if BKT=15 set ira.sw15=ira.sw15+FSNAMT quit ira.sw15
	if BKT=16 set ira.sw16=ira.sw16+FSNAMT quit ira.sw16
	if BKT=17 set ira.sw17=ira.sw17+FSNAMT quit ira.sw17
	if BKT=18 set ira.sw18=ira.sw18+FSNAMT quit ira.sw18
	if BKT=19 set ira.sw19=ira.sw19+FSNAMT quit ira.sw19
	if BKT=20 set ira.sw20=ira.sw20+FSNAMT quit ira.sw20
	if BKT=21 set ira.sw21=ira.sw21+FSNAMT quit ira.sw21
	if BKT=22 set ira.sw22=ira.sw22+FSNAMT quit ira.sw22
	if BKT=23 set ira.sw23=ira.sw23+FSNAMT quit ira.sw23
	if BKT=24 set ira.sw24=ira.sw24+FSNAMT quit ira.sw24
	if BKT=25 set ira.sw25=ira.sw25+FSNAMT quit ira.sw25
	if BKT=26 set ira.sw26=ira.sw26+FSNAMT quit ira.sw26
	if BKT=27 set ira.sw27=ira.sw27+FSNAMT quit ira.sw27
	if BKT=28 set ira.sw28=ira.sw28+FSNAMT quit ira.sw28
	if BKT=29 set ira.sw29=ira.sw29+FSNAMT quit ira.sw29
	if BKT=34 set ira.sw34=ira.sw34+FSNAMT quit ira.sw34
	if BKT=35 set ira.sw35=ira.sw35+FSNAMT quit ira.sw35
	if BKT=36 set ira.sw36=ira.sw36+FSNAMT quit ira.sw36
	if BKT=37 set ira.sw37=ira.sw37+FSNAMT quit ira.sw37
	if BKT=38 set ira.sw38=ira.sw38+FSNAMT quit ira.sw38
	if BKT=39 set ira.sw39=ira.sw39+FSNAMT quit ira.sw39
	if BKT=43 set ira.sw43=ira.sw43+FSNAMT quit ira.sw43
	if BKT=44 set ira.sw44=ira.sw44+FSNAMT quit ira.sw44
	if BKT=45 do { quit ira.sw45

		type String UTSO

		set ira.madcy=ira.d45
		set ira.sw45=ira.sw45+FSNAMT
		set UTSO("MAD")=ira.sw45

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}
	if BKT=47 set ira.sw47=ira.sw47+FSNAMT quit ira.sw47
	if BKT=48 set ira.sw48=ira.sw48+FSNAMT quit ira.sw48
	if BKT=49 set ira.sw49=ira.sw49+FSNAMT quit ira.sw49

	if BKT=50 set ira.sw50=ira.sw50+FSNAMT quit ira.sw50
	if BKT=51 set ira.sw51=ira.sw51+FSNAMT quit ira.sw51
	if BKT=52 set ira.sw52=ira.sw52+FSNAMT quit ira.sw52
	if BKT=53 set ira.sw53=ira.sw53+FSNAMT quit ira.sw53
	if BKT=54 set ira.sw54=ira.sw54+FSNAMT quit ira.sw54
	if BKT=55 set ira.sw55=ira.sw55+FSNAMT quit ira.sw55
	if BKT=56 set ira.sw56=ira.sw56+FSNAMT quit ira.sw56
	if BKT=57 set ira.sw57=ira.sw57+FSNAMT quit ira.sw57
	if BKT=58 set ira.sw58=ira.sw58+FSNAMT quit ira.sw58
	if BKT=59 set ira.sw59=ira.sw59+FSNAMT quit ira.sw59

	if BKT=60 set ira.sw60=ira.sw60+FSNAMT quit ira.sw60
	if BKT=61 set ira.sw61=ira.sw61+FSNAMT quit ira.sw61
	if BKT=62 set ira.sw62=ira.sw62+FSNAMT quit ira.sw62
	if BKT=63 set ira.sw63=ira.sw63+FSNAMT quit ira.sw63
	if BKT=64 set ira.sw64=ira.sw64+FSNAMT quit ira.sw64
	if BKT=65 set ira.sw65=ira.sw65+FSNAMT quit ira.sw65
	if BKT=66 set ira.sw66=ira.sw66+FSNAMT quit ira.sw66
	if BKT=67 set ira.sw67=ira.sw67+FSNAMT quit ira.sw67
	if BKT=68 set ira.sw68=ira.sw68+FSNAMT quit ira.sw68
	if BKT=69 set ira.sw69=ira.sw69+FSNAMT quit ira.sw69

	if BKT=70 set ira.sw70=ira.sw70+FSNAMT quit ira.sw70
	if BKT=71 set ira.sw71=ira.sw71+FSNAMT quit ira.sw71
	if BKT=72 set ira.sw72=ira.sw72+FSNAMT quit ira.sw72
	if BKT=73 set ira.sw73=ira.sw73+FSNAMT quit ira.sw73
	if BKT=74 set ira.sw74=ira.sw74+FSNAMT quit ira.sw74
	if BKT=75 set ira.sw75=ira.sw75+FSNAMT quit ira.sw75
	if BKT=76 set ira.sw76=ira.sw76+FSNAMT quit ira.sw76
	if BKT=77 set ira.sw77=ira.sw77+FSNAMT quit ira.sw77
	if BKT=78 set ira.sw78=ira.sw78+FSNAMT quit ira.sw78
	if BKT=79 set ira.sw79=ira.sw79+FSNAMT quit ira.sw79

	if BKT=80 set ira.sw80=ira.sw80+FSNAMT quit ira.sw80
	if BKT=81 set ira.sw81=ira.sw81+FSNAMT quit ira.sw81
	if BKT=82 set ira.sw82=ira.sw82+FSNAMT quit ira.sw82
	if BKT=83 set ira.sw83=ira.sw83+FSNAMT quit ira.sw83
	if BKT=84 set ira.sw84=ira.sw84+FSNAMT quit ira.sw84
	if BKT=85 set ira.sw85=ira.sw85+FSNAMT quit ira.sw85
	if BKT=86 set ira.sw86=ira.sw86+FSNAMT quit ira.sw86
	if BKT=87 set ira.sw87=ira.sw87+FSNAMT quit ira.sw87
	if BKT=88 set ira.sw88=ira.sw88+FSNAMT quit ira.sw88
	if BKT=89 set ira.sw89=ira.sw89+FSNAMT quit ira.sw89

	if BKT=94 set ira.sw94=ira.sw94+FSNAMT quit ira.sw94
	if BKT=95 set ira.sw95=ira.sw95+FSNAMT quit ira.sw95
	if BKT=96 set ira.sw96=ira.sw96+FSNAMT quit ira.sw96
	if BKT=97 set ira.sw97=ira.sw97+FSNAMT quit ira.sw97
	if BKT=98 set ira.sw98=ira.sw98+FSNAMT quit ira.sw98
	if BKT=99 set ira.sw99=ira.sw99+FSNAMT quit ira.sw99

	quit 0


UPDIRA13(RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	type Public String TSO,UTSO()
	
	if BKT=1 set ira.nrd1=ira.nrd1+FSNAMT quit ira.nrd1
	if BKT=2 set ira.nrd2=ira.nrd2+FSNAMT quit ira.nrd2
	if BKT=3 set ira.nrd3=ira.nrd3+FSNAMT quit ira.nrd3
	if BKT=4 set ira.nrd4=ira.nrd4+FSNAMT quit ira.nrd4
	if BKT=5 set ira.nrd5=ira.nrd5+FSNAMT quit ira.nrd5
	if BKT=6 set ira.nrd6=ira.nrd6+FSNAMT quit ira.nrd6
	if BKT=7 set ira.nrd7=ira.nrd7+FSNAMT quit ira.nrd7
	if BKT=8 set ira.nrd8=ira.nrd8+FSNAMT quit ira.nrd8
	if BKT=10 set ira.nrd10=ira.nrd10+FSNAMT quit ira.nrd10
	if BKT=12 set ira.nrd12=ira.nrd12+FSNAMT quit ira.nrd12
	if BKT=13 set ira.nrd13=ira.nrd13+FSNAMT quit ira.nrd13
	if BKT=14 set ira.nrd14=ira.nrd14+FSNAMT quit ira.nrd14
	if BKT=15 set ira.nrd15=ira.nrd15+FSNAMT quit ira.nrd15
	if BKT=16 set ira.nrd16=ira.nrd16+FSNAMT quit ira.nrd16
	if BKT=17 set ira.nrd17=ira.nrd17+FSNAMT quit ira.nrd17
	if BKT=18 set ira.nrd18=ira.nrd18+FSNAMT quit ira.nrd18
	if BKT=19 set ira.nrd19=ira.nrd19+FSNAMT quit ira.nrd19
	if BKT=20 set ira.nrd20=ira.nrd20+FSNAMT quit ira.nrd20
	if BKT=21 set ira.nrd21=ira.nrd21+FSNAMT quit ira.nrd21
	if BKT=22 set ira.nrd22=ira.nrd22+FSNAMT quit ira.nrd22
	if BKT=23 set ira.nrd23=ira.nrd23+FSNAMT quit ira.nrd23
	if BKT=24 set ira.nrd24=ira.nrd24+FSNAMT quit ira.nrd24
	if BKT=25 set ira.nrd25=ira.nrd25+FSNAMT quit ira.nrd25
	if BKT=26 set ira.nrd26=ira.nrd26+FSNAMT quit ira.nrd26
	if BKT=27 set ira.nrd27=ira.nrd27+FSNAMT quit ira.nrd27
	if BKT=29 set ira.nrmadcy=ira.nrmadcy+FSNAMT quit ira.nrmadcy
	if BKT=45 do { quit ira.nrd45

		type String UTSO

		set ira.madcy=ira.d45
		set ira.nrd45=ira.nrd45+FSNAMT
		set UTSO("MAD")=ira.nrd45

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}

	quit 0


UPDIRA14(RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	type Public String TSO,UTSO()
	
	if BKT=1 set ira.nrw1=ira.nrw1+FSNAMT quit ira.nrw1
	if BKT=2 set ira.nrw2=ira.nrw2+FSNAMT quit ira.nrw2
	if BKT=3 set ira.nrw3=ira.nrw3+FSNAMT quit ira.nrw3
	if BKT=4 set ira.nrw4=ira.nrw4+FSNAMT quit ira.nrw4
	if BKT=5 set ira.nrw5=ira.nrw5+FSNAMT quit ira.nrw5
	if BKT=6 set ira.nrw6=ira.nrw6+FSNAMT quit ira.nrw6
	if BKT=8 set ira.nrw8=ira.nrw8+FSNAMT quit ira.nrw8
	if BKT=9 set ira.nrw9=ira.nrw9+FSNAMT quit ira.nrw9
	if BKT=10 set ira.nrw10=ira.nrw10+FSNAMT quit ira.nrw10
	if BKT=12 set ira.nrw12=ira.nrw12+FSNAMT quit ira.nrw12
	if BKT=13 set ira.nrw13=ira.nrw13+FSNAMT quit ira.nrw13
	if BKT=14 set ira.nrw14=ira.nrw14+FSNAMT quit ira.nrw14
	if BKT=15 set ira.nrw15=ira.nrw15+FSNAMT quit ira.nrw15
	if BKT=16 set ira.nrw16=ira.nrw16+FSNAMT quit ira.nrw16
	if BKT=17 set ira.nrw17=ira.nrw17+FSNAMT quit ira.nrw17
	if BKT=18 set ira.nrw18=ira.nrw18+FSNAMT quit ira.nrw18
	if BKT=19 set ira.nrw19=ira.nrw19+FSNAMT quit ira.nrw19
	if BKT=20 set ira.nrw20=ira.nrw20+FSNAMT quit ira.nrw20
	if BKT=21 set ira.nrw21=ira.nrw21+FSNAMT quit ira.nrw21
	if BKT=22 set ira.nrw22=ira.nrw22+FSNAMT quit ira.nrw22
	if BKT=23 set ira.nrw23=ira.nrw23+FSNAMT quit ira.nrw23
	if BKT=24 set ira.nrw24=ira.nrw24+FSNAMT quit ira.nrw24
	if BKT=25 set ira.nrw25=ira.nrw25+FSNAMT quit ira.nrw25
	if BKT=26 set ira.nrw26=ira.nrw26+FSNAMT quit ira.nrw26
	if BKT=27 set ira.nrw27=ira.nrw27+FSNAMT quit ira.nrw27
	if BKT=45 do { quit ira.nrw45

		type String UTSO

		set ira.madcy=ira.d45
		set ira.nrw45=ira.nrw45+FSNAMT
		set UTSO("MAD")=ira.nrw45

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}

	quit 0


UPDIRA15(RecordTTX ttx,RecordIRA ira,BKT,FSNAMT)

	type Public String TSO,UTSO()
	
	if BKT=1 set ira.nrwa1=ira.nrwa1+FSNAMT quit ira.nrwa1
	if BKT=2 set ira.nrwa2=ira.nrwa2+FSNAMT quit ira.nrwa2
	if BKT=3 set ira.nrwa3=ira.nrwa3+FSNAMT quit ira.nrwa3
	if BKT=4 set ira.nrwa4=ira.nrwa4+FSNAMT quit ira.nrwa4
	if BKT=5 set ira.nrwa5=ira.nrwa5+FSNAMT quit ira.nrwa5
	if BKT=6 set ira.nrwa6=ira.nrwa6+FSNAMT quit ira.nrwa6
	if BKT=8 set ira.nrwa8=ira.nrwa8+FSNAMT quit ira.nrwa8
	if BKT=9 set ira.nrwa9=ira.nrwa9+FSNAMT quit ira.nrwa9
	if BKT=10 set ira.nrwa10=ira.nrwa10+FSNAMT quit ira.nrwa10
	if BKT=12 set ira.nrwa12=ira.nrwa12+FSNAMT quit ira.nrwa12
	if BKT=13 set ira.nrwa13=ira.nrwa13+FSNAMT quit ira.nrwa13
	if BKT=14 set ira.nrwa14=ira.nrwa14+FSNAMT quit ira.nrwa14
	if BKT=15 set ira.nrwa15=ira.nrwa15+FSNAMT quit ira.nrwa15
	if BKT=16 set ira.nrwa16=ira.nrwa16+FSNAMT quit ira.nrwa16
	if BKT=17 set ira.nrwa17=ira.nrwa17+FSNAMT quit ira.nrwa17
	if BKT=18 set ira.nrwa18=ira.nrwa18+FSNAMT quit ira.nrwa18
	if BKT=19 set ira.nrwa19=ira.nrwa19+FSNAMT quit ira.nrwa19
	if BKT=20 set ira.nrwa20=ira.nrwa20+FSNAMT quit ira.nrwa20
	if BKT=21 set ira.nrwa21=ira.nrwa21+FSNAMT quit ira.nrwa21
	if BKT=22 set ira.nrwa22=ira.nrwa22+FSNAMT quit ira.nrwa22
	if BKT=23 set ira.nrwa23=ira.nrwa23+FSNAMT quit ira.nrwa23
	if BKT=24 set ira.nrwa24=ira.nrwa24+FSNAMT quit ira.nrwa24
	if BKT=25 set ira.nrwa25=ira.nrwa25+FSNAMT quit ira.nrwa25
	if BKT=26 set ira.nrwa26=ira.nrwa26+FSNAMT quit ira.nrwa26
	if BKT=27 set ira.nrwa27=ira.nrwa27+FSNAMT quit ira.nrwa27
	if BKT=45 do { quit ira.nrwa45

		type String UTSO

		set ira.madcy=ira.d45
		set ira.nrwa45=ira.nrwa45+FSNAMT
		set UTSO("MAD")=ira.nrwa45

		do OUT^UTSO(.UTSO,TSO)
		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}

	quit 0


IRABKT(CID,ACN,RPASEQ,CYR,BKT)	// Return bucket amount

	type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,CYR",1)

	if BKT=1 quit (ira.w1+ira.sw1)
	if BKT=2 quit (ira.w2+ira.sw2)
	if BKT=3 quit (ira.w3+ira.sw3)
	if BKT=4 quit (ira.w4+ira.sw4)
	if BKT=5 quit (ira.w5+ira.sw5)
	if BKT=6 quit (ira.w6+ira.sw6)
	if BKT=7 quit (ira.w7+ira.sw7)
	if BKT=8 quit (ira.w8+ira.sw8)
	if BKT=9 quit (ira.w9+ira.sw9)
	if BKT=10 quit (ira.w10+ira.sw10)
	if BKT=11 quit (ira.w11+ira.sw11)
	if BKT=12 quit (ira.w12+ira.sw12)
	if BKT=13 quit (ira.w13+ira.sw13)
	if BKT=14 quit (ira.w14+ira.sw14)
	if BKT=15 quit (ira.w15+ira.sw15)
	if BKT=16 quit (ira.w16+ira.sw16)
	if BKT=17 quit (ira.w17+ira.sw17)
	if BKT=18 quit (ira.w18+ira.sw18)
	if BKT=19 quit (ira.w19+ira.sw19)
	if BKT=20 quit (ira.w20+ira.sw20)
	if BKT=21 quit (ira.w21+ira.sw21)
	if BKT=22 quit (ira.w22+ira.sw22)
	if BKT=23 quit (ira.w23+ira.sw23)
	if BKT=24 quit (ira.w24+ira.sw24)
	if BKT=25 quit (ira.w25+ira.sw25)
	if BKT=26 quit (ira.w26+ira.sw26)
	if BKT=27 quit (ira.w27+ira.sw27)
	if BKT=28 quit (ira.w28+ira.sw28)
	if BKT=29 quit (ira.w29+ira.sw29)
	if BKT=34 quit (ira.w34+ira.sw34)
	if BKT=35 quit (ira.w35+ira.sw35)
	if BKT=36 quit (ira.w36+ira.sw36)
	if BKT=37 quit (ira.w37+ira.sw37)
	if BKT=38 quit (ira.w38+ira.sw38)
	if BKT=39 quit (ira.w39+ira.sw39)
	if BKT=43 quit (ira.w43+ira.sw43)
	if BKT=44 quit (ira.w44+ira.sw44)
	if BKT=45 quit (ira.w45+ira.sw45)
	if BKT=47 quit (ira.w47+ira.sw47)
	if BKT=48 quit (ira.w48+ira.sw48)
	if BKT=49 quit (ira.w49+ira.sw49)

	if BKT=50 quit (ira.w50+ira.sw50)
	if BKT=51 quit (ira.w51+ira.sw51)
	if BKT=52 quit (ira.w52+ira.sw52)
	if BKT=53 quit (ira.w53+ira.sw53)
	if BKT=54 quit (ira.w54+ira.sw54)
	if BKT=55 quit (ira.w55+ira.sw55)
	if BKT=56 quit (ira.w56+ira.sw56)
	if BKT=57 quit (ira.w57+ira.sw57)
	if BKT=58 quit (ira.w58+ira.sw58)
	if BKT=59 quit (ira.w59+ira.sw59)

	if BKT=60 quit (ira.w60+ira.sw60)
	if BKT=61 quit (ira.w61+ira.sw61)
	if BKT=62 quit (ira.w62+ira.sw62)
	if BKT=63 quit (ira.w63+ira.sw63)
	if BKT=64 quit (ira.w64+ira.sw64)
	if BKT=65 quit (ira.w65+ira.sw65)
	if BKT=66 quit (ira.w66+ira.sw66)
	if BKT=67 quit (ira.w67+ira.sw67)
	if BKT=68 quit (ira.w68+ira.sw68)
	if BKT=69 quit (ira.w69+ira.sw69)

	if BKT=70 quit (ira.w70+ira.sw70)
	if BKT=71 quit (ira.w71+ira.sw71)
	if BKT=72 quit (ira.w72+ira.sw72)
	if BKT=73 quit (ira.w73+ira.sw73)
	if BKT=74 quit (ira.w74+ira.sw74)
	if BKT=75 quit (ira.w75+ira.sw75)
	if BKT=76 quit (ira.w76+ira.sw76)
	if BKT=77 quit (ira.w77+ira.sw77)
	if BKT=78 quit (ira.w78+ira.sw78)
	if BKT=79 quit (ira.w79+ira.sw79)

	if BKT=80 quit (ira.w80+ira.sw80)
	if BKT=81 quit (ira.w81+ira.sw81)
	if BKT=82 quit (ira.w82+ira.sw82)
	if BKT=83 quit (ira.w83+ira.sw83)
	if BKT=84 quit (ira.w84+ira.sw84)
	if BKT=85 quit (ira.w85+ira.sw85)
	if BKT=86 quit (ira.w86+ira.sw86)
	if BKT=87 quit (ira.w87+ira.sw87)
	if BKT=88 quit (ira.w88+ira.sw88)
	if BKT=89 quit (ira.w89+ira.sw89)

	if BKT=94 quit (ira.w94+ira.sw94)
	if BKT=95 quit (ira.w95+ira.sw95)
	if BKT=96 quit (ira.w96+ira.sw96)
	if BKT=97 quit (ira.w97+ira.sw97)
	if BKT=98 quit (ira.w98+ira.sw98)
	if BKT=99 quit (ira.w99+ira.sw99)

	quit 0


AMT(WAMT,TAMT,NAMT,DWA,NODE,BKT,DSWA)
	/*
	     WAMT = Amount used for Witholding calc
	     NAMT = Net transaction amount
	     TAMT = Complete TAMT field
	     DWA = dist wth amount
	     BKT = IRA bucket
	*/

	type Public Number ACN,CYR,RPASEQ
	type Public String TSO
	
	type Number EC

	type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,CYR",1)

	set EC=$S((TAMT<0):1,1:0)

	if ((NODE=0)&(BKT=33))!((NODE=13)&(BKT=29)) do { quit $$^SCARND(NAMT,0,2)

		type Number T

		if EC set NAMT=$$MADTSO(TSO,NAMT) quit

		// Distribution from IRADIS2
		if ira.madcy>ira.madamt set NAMT=0 quit
		if ira.madcy-ira.madamt=0 set NAMT=0 quit

		set NAMT=$$PMADAMT(ACN,RPASEQ,CYR,TSO,NAMT)
		if (ira.madamt-ira.madcy)<NAMT set NAMT=ira.madamt-ira.madcy

		/*
		  If the net transaction is less than the MAD amount, set the
		  MAD amount to be satisfied equal to the transaction amount.
		*/
		if TAMT["#" set T=TAMT.piece("#",2)+TAMT.piece("#",3)+TAMT.piece("#",5)+TAMT.piece("#",15)
		else  set T=TAMT+$$FIELD^UTSO(TSO,"RPAWH")+$$FIELD^UTSO(TSO,"RPASWH")

		if NAMT>T set NAMT=T
		}
	/*
	  Get defference between Minimum Annual Distribution Amount(MAD) and Min Annual Dist Paid
	  Current Year(MADCYR)+Minimum Annual Distribution Inclusion(D46) if one exists.
	*/
	if ((NODE=0)&(BKT=45)) do { quit $$^SCARND(NAMT,0,2)
		if EC set NAMT=$$MADTSO(TSO,NAMT) quit
		if (ira.madcy+ira.d46+TAMT)<ira.madamt set NAMT=TAMT
		}

	if NODE=2,BKT=1 quit $$^SCARND(DWA,0,2)
	if NODE=14,BKT=1 quit $$^SCARND(DWA,0,2)
	if NODE=2,BKT=10 quit $$^SCARND(DWA,0,2)
	if NODE=14,BKT=10 quit $$^SCARND(DWA,0,2)
	if (NODE=13)!(NODE=0) quit $$^SCARND(TAMT+DWA+DSWA,0,2)
	if NODE=15 quit $$^SCARND(TAMT+DWA+DSWA-ira.madcy,0,2)

	quit $$^SCARND(NAMT,0,2)


MADTSO(TSO,AMT)	// Find MADAMT from TSO

	type String UTSO()

	set TSO=$G(TSO)
	if TSO.isNull() quit AMT

	do OUT^UTSO(.UTSO,.TSO)

	if $L($G(UTSO("MAD"))) set AMT=-UTSO("MAD")

	quit AMT


Public MADSAT(TSO)

	type Public Number ACN,ER,NAMT,RPASEQ
	type Public String UTSO()

	type Date NJD
	type Number CYR,IRADIS,NYR

	if '$L(TSO) quit 0

	do OUT^UTSO(.UTSO,.TSO)

	if 'UTSO("IRAD").exists() quit NAMT

	set IRADIS=+UTSO("IRAD")
	if 'IRADIS quit 0

	type RecordUTBLIRADIS uiradis=Db.getRecord("UTBLIRADIS","IRADIS")

	if 'uiradis.period quit 0

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN,RPASEQ")

	set NJD=$$NJD^UFRE(%SystemDate,iratype.autfre)
	if ER quit 0

	// NJD tax yr end
	set NYR=$$YEAR^SCADAT($$EOTY^SCADAT(NJD,1),1)
	// TJD tax yr end
	set CYR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)

	if CYR=NYR quit 0

	if iratype.madsat quit 0

	quit 1


Public PMADAMT(ACN,RPASEQ,CYR,TSO,NAMT)
	/*
	   Return Periodic MADAMT. Calculations are made to determine if
	   computed periodic should be adjusted for last distribution
	   of the year. If DIST code not periodic return NAMT

	   ARGUMENTS:
	   . ACN	/TYP=N/REQ/MECH=VAL
	   . RPASEQ	/TYP=N/REQ/MECH=VAL
	   . CYR	/TYP=N/REQ/MECH=VAL
	   . TSO	/TYP=T/REQ/MECH=VAL
	   . NAMT	/TYP=N/REQ/MECH=VAL
	     The distribution amount.


	   RETURNS:
	   . $$ Periodic MADAMT /TYP=N

	   EXAMPLE:
	   PERIODIC=$$PMADAMT(ACN,RPASEQ,$$YEAR^SCADAT(%TJD,1),TSO,NAMT)
	*/

	type Number AF,ER,IRADIS,MADAVL,NJD,PERIODIC
	type String RM,UTSO

	if '$L(TSO) quit NAMT

	do OUT^UTSO(.UTSO,.TSO)

	if 'UTSO("IRAD").exists() quit NAMT
	if UTSO("MAD").exists() quit UTSO("MAD")

	set IRADIS=+UTSO("IRAD")
	if 'IRADIS quit NAMT

	type RecordUTBLIRADIS uiradis=Db.getRecord("UTBLIRADIS","IRADIS")

	if 'uiradis.period quit NAMT

	set ER=0
	set AF=""
	set PERIODIC=0

	type RecordIRATYPE iratype=Db.getRecord("IRATYPE","ACN,RPASEQ")
	type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,CYR",1)

	set MADAVL=ira.madamt-ira.madcy

	if iratype.autfre.isNull() quit MADAVL

	set NJD=$$NJD^UFRE(%SystemDate,iratype.autfre,.AF)
	if ER!(NJD=-1) quit NAMT
	if $L(AF) set PERIODIC=$$^SCARND((ira.madamt/AF),"","","",2,"-")

	// If last distribution for year, set periodic to remaining MADAMT
	if CYR'=$$YEAR^SCADAT(($$EOTY^SCADAT(NJD,1)),1) set PERIODIC=MADAVL
	if PERIODIC>MADAVL set PERIODIC=MADAVL
	if PERIODIC<0 set PERIODIC=0

	quit PERIODIC


Public IRABAL(ACN,RPASEQ)

	type Public Number IRABAL
	
	type Number CID

	set RPASEQ=$G(RPASEQ)
	set IRABAL=0

	if 'ACN.exists() quit IRABAL

	type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")

	while rs.next() do {

		set CID=rs.getCol(1)

		type RecordACN acn=Db.getRecord("ACN","CID")

		if acn.cls'="D" quit

		type RecordDEP dep=Db.getRecord("DEP","CID")

		if 'dep.ira quit

		if ('RPASEQ.isNull()),(RPASEQ'=dep.rpaseq) quit

		set IRABAL=IRABAL+dep.bal
		}

	quit IRABAL


BENSEQ(RecordIRATYPE iratype,CID) // Check transfer ACN'S TAXID against valid beneficiary TAXID:
	/*
	   With the introduction of Ben Percentage designations in ARQ34101,
	   the use of beneficiary ACNs was removed.  This code was modified to
	   compare the transfer account's tax ID with the beneficiary's tax ID.
	*/

	type Public Number ACN,RPASEQ
	
	type Number BENSEQ,BENTAXID,TFRACN,TFRTAXID

	type RecordACN acn=Db.getRecord("ACN","CID")

	set TFRACN=acn.acn

	type RecordCIF cif=Db.getRecord("CIF","TFRACN")

	set TFRTAXID=cif.taxid
	set BENSEQ=iratype.iraben

	type RecordIRABEN iraben=Db.getRecord("IRABEN","ACN,RPASEQ,BENSEQ",1)

	set BENTAXID=iraben.bentaxid

	// Default beneficiary
	if BENTAXID=TFRTAXID do BENTSO(BENSEQ) quit

	type ResultSet rs=Db.select("BENSEQ","IRABEN","ACN=:ACN AND RPASEQ=:RPASEQ AND BENTAXID=:TFRTAXID")

	if rs.next() do BENTSO(rs.getCol(1)) quit

	// Customer ~p1 of transfer account is not an IRA beneficiary of ~p2
	do Runtime.setErrMSG("DEP",181,"TFRACN~ACN")

	quit


BENTSO(BENSEQ)	// Set up TSO for IRA beneficiary

	type Public String TSO,UTSO()

	set UTSO("BEN")=BENSEQ
	set TSO=$$FIELDIN^UTSO(TSO,"BEN",BENSEQ)

	quit


NONRWH(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype)
	/*
	   If not an E/C or REV and AMTWA is not defined but DWA is, then
	   create AMTWA from TAMT. This might happen when processing a
	   auto distribution.
	     OR
	   If E/C or REV then AMTWA is not defined, so if DWA is
	   defined then create AMTWA.
	*/

	if 'dep.nr quit
	
	type Public Number DSWA,DWA,ECREV,PEN
	type Public String AMT,TAMT,TSO

	type Number AMTWA,BOY,XAMT
	type String UTSO()

	set AMTWA=0

	if DWA do {

		set AMT=TAMT

		if AMT'["#" set AMT=AMT_"#"_AMT
		set XAMT=$P(AMT,"#",2)+$P(AMT,"#",3)-$P(AMT,"#",4)-$P(AMT,"#",6)

		// closeouts
		if (AMT.piece("#",4).isNull()),(PEN.get()) set XAMT=XAMT-PEN

		do OUT^UTSO(.UTSO,TSO)
		set BOY=$$BOTY^SCADAT(%SystemDate,1)

		if (dep.ira=5)!(((dep.ira=6)!(dep.ira=7))&(iratype.pldte<BOY)) set XAMT=XAMT-$S(ECREV=0:$G(UTSO("MAD")),1:-$G(UTSO("MAD")))

		set AMTWA=XAMT
		}
	if (AMTWA.get())&('DWA)&('DSWA) set AMTWA=0

	do UPDIRA(.dep,.ttx,.iratype,13)

	if iratype.rspwind quit

	if $G(AMTWA) do {
		set AMT=AMTWA+DWA+DSWA
		set AMTWA=AMT
		do UPDIRA(.dep,.ttx,.iratype,15)
		}

	quit


MAXLIF(RecordTTX ttx,RecordIRATYPE iratype)
	/*
	   If Plan is in its' first year, update MAXLIF with the principal
	   transaction amount otherwise update MAXLIF with calculation of
	   MAXLIF based on the principal transaction amount.  Update the tso
	   field MXLIF with the amount added to IRA.MAXLIF, this is needed
	   for error corrects and reversals.

	   Effective dated transactions will update the MAXLIF bucket for the
	   posting date year not the effective date year.
	*/

	type Public Date ZTJD
	type Public Number ACN,CYR,ER,RPASEQ
	type Public String TAMT,TSO,UTSO()
	
	type Number MAX,PAMT,PLYR,YR

	set YR=$$YEAR^SCADAT($$EOTY^SCADAT(%SystemDate,1),1)
	set PAMT=$S(TAMT["#":+$P(TAMT,"#",2),1:+TAMT)

	if PAMT=0 do { quit

		set UTSO("MXLIF")=0

		do IN^UTSO(.UTSO,.TSO)

		set ttx.tso=TSO
		}

	// Error correct/reversal, subtract MAXLIF amt from transaction and quit
	if PAMT<0 do { quit

		type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,YR",1)

		// Update if original posting date is this year
		if CYR=YR!ttx.itc6 do { quit

			set ira.maxlif=ira.maxlif-UTSO("MXLIF")

			do ira.bypassSave()
			}

		if 'ZTJD.exists() set ZTJD=0
		if +$G(UTSO("REV"))>0 do {
			type Number TSEQ

			set TSEQ=UTSO("REV")

			type ResultSet rs=Db.select("TJD","HIST","CID=:CID AND TSEQ=:TSEQ")

			if rs.next() set ZTJD=rs.getCol(1)
			}

		type Number ZBEGYR,ZENDYR

		// beg of tax yr as of ZTJD
		set ZBEGYR=$$BOTY^SCADAT(ZTJD,1)
		// end of tax yr as of ZTJD
		set ZENDYR=$$EOTY^SCADAT(ZTJD,1)

		// Update if reversal date is in current tax year
		if ZTJD'<ZBEGYR!(ZTJD'>ZENDYR) set ira.maxlif=ira.maxlif-UTSO("MXLIF")

		else  do {
			set UTSO("MXLIF")=0

			do IN^UTSO(.UTSO,.TSO)

			set ttx.tso=TSO
			}

		do ira.bypassSave()
		}

	type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,YR",1)

	// end of tax year as of plan date
	set PLYR=$$YEAR^SCADAT($$EOTY^SCADAT(iratype.pldte,1),1)

	if YR=PLYR do {

		set MAX=PAMT
		set ira.maxlif=ira.maxlif+PAMT
		}

	else  do {
		set MAX=$$MAXLIF^RSPMADA(.iratype,PAMT)

		if $G(ER) quit

		if MAX>0 set ira.maxlif=ira.maxlif+MAX
		}

	set UTSO("MXLIF")=MAX

	do IN^UTSO(.UTSO,.TSO)

	set ttx.tso=TSO

	do ira.bypassSave()

	quit


DWA(RecordDEP dep,RecordTTX ttx,RecordIRATYPE iratype)	// Calculate distribution withholding
	//  OUTPUTS:	DWA  - Distribution Withholding
	//  OUTPUTS:	DSWA Distribution State Withholding

	type Public Number DSWA,DWA,ECREV,ER,IRAEXM,SWHCALC,WHCALC
	type public String TAMT
	
	type Number AMT, AMTWA, TRNMD = ttx.getStoredValue("TranMode")

	if (('TRNMD) ! (TRNMD = 4)) , TAMT["#",('(TAMT.piece("#",5).isNull())) set DWA=$P(TAMT,"#",5) set WHCALC=""

	// AS, State Withholding amount is already calculated
	if ('(TRNMD.get()) ! (TRNMD = 4)) , TAMT["#",('(TAMT.piece("#",15).isNull())) set DSWA=$P(TAMT,"#",15) set SWHCALC=""

	if 'DWA.get() set DWA=0
	if 'DSWA.get() set DSWA=0

	if ECREV do {
		set DWA=TAMT.piece("#",5)
		set DSWA=TAMT.piece("#",15)
		}
	else  do {
		if ((TRNMD) & (TRNMD '= 4)) do { quit:'DWA.isNull()
			set DWA=$$FIELD^UTSO(ttx.tso,"RPAWH")
			set DSWA=$$FIELD^UTSO(ttx.tso,"RPASWH")
			}

		// Piece 7 - allow withholding
		if ('WHCALC.isNull()),iratype.rspwind do {
			type Number STTAX

			// Calculate Fed and State W/H
			for STTAX=0:1:1 do ^IRAWH(.dep,.ttx)
			}

		else  do ANT(.dep,.iratype)
		}

	if ER quit

	if IRAEXM do DOD(.ttx,.iratype)
	do BENREST(.dep)

	// If non-resident and withholding indicator process non-resident withholding
	if 'DWA quit

	set AMT=DWA

	do UPDIRA(.dep,.ttx,.iratype,2)
	do UPDIRA(.dep,.ttx,.iratype,4)

	if dep.nr,iratype.rspwind do UPDIRA(.dep,.ttx,.iratype,14)

	quit


ANT(RecordDEP dep,RecordIRATYPE iratype)	// Check for an existing anticipated check

	type Public Number DSWA,DWA
	type public String TAMT
	
	type Boolean QUIT = 0
	type Number ANTCHK,ANTCHK2,XCID,ZAMT,ZCID

	if 'iratype.antchk quit

	set ANTCHK=iratype.antchk
	set ANTCHK2=ANTCHK
	set ZAMT=dep.bal-TAMT-DWA-DSWA

	//if 'ANTCHK quit
	if ZAMT'<ANTCHK quit

	set ZAMT=ZAMT+dep.posacr
	set ZCID=dep.cid

	type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN AND CID NOT =:ZCID")

	while rs.next() do { quit:QUIT

		set XCID=rs.getCol(1)

		type RecordDEP depira=Db.getRecord("DEP","XCID")

		if depira.ira'=dep.ira quit
		if depira.rpaseq'=dep.rpaseq quit

		set ZAMT=$$^SCARND(depira.bal+depira.posacr,0,dep.cid)
		set ANTCHK=ANTCHK-ZAMT

		if ANTCHK>0 quit

		set QUIT=1
		}

	// Outstanding retirement plan account check for ~p1
	if 'QUIT do Runtime.setErrMSG("DEP",2120,ANTCHK2) quit

	if QUIT do MADAMT(.iratype)

	quit


MADAMT(RecordIRATYPE iratype)	// Calculate MAD amount

	type Public Number MADAMT = 0
	type Public Number AMTWA,BKT,DSWA,DWA
	type public String AMT,TAMT
	
	if BKT=10 set MADAMT=$$AMT(AMTWA.get(),TAMT.get(),AMT.get(),DWA.get(),0,33,DSWA.get())

	quit


public RPAMCZC(TAMT)	// RPA Military Contributions

	// TAMT - The transaction amount /TYP=$/REQ/MECH=REFARR:R

	type public String ACN,RPASEQ,CYR,UTSO
	type Number MCZYR
	type String MCZC

	set MCZC=UTSO("MCZC"),MCZYR=UTSO("MCZYR")

	type RecordRPAMCZC rpamczc=Db.getRecord("RPAMCZC","ACN=:ACN , RPASEQ=:RPASEQ , TAXYR=:CYR , MCZC=:MCZC , MCZYR=:MCZYR",1)
	set rpamczc.mczcamt=rpamczc.mczcamt+TAMT

	do rpamczc.bypassSave()
	quit


public MILCHK(UTSO)	// Military Contributions verification

	// UTSO - Array of Transaction Source of Funds Information 
	// /TYP=T/REQ/MECH=REFARR:R

	type public Number ER
	type Number IRAC,MCZYR,REASON
	type String MCZC

	set (IRAC,MCZC,MCZYR,REASON)=""

	if UTSO("IRAC").exists() set IRAC=UTSO("IRAC")
	if UTSO("MCZC").exists() set MCZC=UTSO("MCZC")
	if UTSO("MCZYR").exists() set MCZYR=UTSO("MCZYR")

	if Db.isDefined("UTBLIRACON","KEY=:IRAC") do {

		type RecordUTBLIRACON iracon=Db.getRecord("UTBLIRACON","KEY=:IRAC")
		set REASON=iracon.rsn

		// Invalid Military Combat Zone Code
		if ((REASON'=17)&('MCZC.isNull()))!((REASON=17)&(MCZC.isNull())) do Runtime.setErrMSG("RPAMCZC",5408) quit

		// Invalid Military Year-of-Service
		if ((REASON'=17)&('MCZYR.isNull()))!((REASON=17)&(MCZYR.isNull())) do Runtime.setErrMSG("RPAMCZC",5409) quit
		}

	if 'ER,(REASON=17) do {

		// Invalid Military Combat Zone Code
		if '(Db.isDefined("UTBLMCZC","MCZC=:MCZC")) do Runtime.setErrMSG("RPAMCZC",5408) quit

		// Invalid Military Year-of-Service
		if MCZYR>$$YEAR^SCADAT(%SystemDate,1) do Runtime.setErrMSG("RPAMCZC",5409) quit
		}

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60787^32989^Dhanalakshmi R^64786"	// Signature - LTD^TIME^USER^SIZE
