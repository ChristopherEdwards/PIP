V00S206(%ProcessMode,RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)   // -  - SID= <INTPAYBR30A> Outgoing Foreign Pmt-Branch Pg 3 (MT103)
 ;;Copyright(c)2006 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/24/2006 11:20 - kini
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,SNDRCHG",VSID="INTPAYBR30A",VPGM=$T(+0),VSNAME="Outgoing Foreign Pmt-Branch Pg 3 (MT103)"
 set VFSN("DEP")="zDEP",VFSN("EFTHLD")="zfEFTHLD",VFSN("EFTPAY")="zfEFTPAY"
 set vPSL=1
 set KEYS(1)=DEP.CID
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fEFTHLD,.fEFTPAY,.DEP),VDA1(.fEFTHLD,.fEFTPAY,.DEP),^DBSPNT()

 set ER=0 do VSCRPRE(.fEFTHLD,.fEFTPAY,.DEP) if ER quit  // Screen Pre-Processor
 
 // Display Pre-Processor
 //
 if '%ProcessMode do VNEW(.fEFTHLD,.fEFTPAY,.DEP),VDSPPRE(.fEFTHLD,.fEFTPAY,.DEP) quit:$G(ER)  do VPR(.fEFTHLD,.fEFTPAY,.DEP),VDA1(.fEFTHLD,.fEFTPAY,.DEP)
 if %ProcessMode do VLOD(.fEFTHLD,.fEFTPAY,.DEP) quit:$G(ER)  do VDSPPRE(.fEFTHLD,.fEFTPAY,.DEP) quit:$G(ER)  do VPR(.fEFTHLD,.fEFTPAY,.DEP),VDA1(.fEFTHLD,.fEFTPAY,.DEP)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fEFTHLD,.fEFTPAY,.DEP)
	quit


VNEW(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) // Initialize arrays if %O=0
 
 do VDEF(.fEFTHLD,.fEFTPAY,.DEP)
 do VLOD(.fEFTHLD,.fEFTPAY,.DEP)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) // Display screen prompts
 set VO="34||13|0"
 set VO(0)="|0"
 set VO(1)=$C(3,8,16,0,0,0,0,0,0,0)_"01T Account Number:"
 set VO(2)=$C(3,51,10,0,0,0,0,0,0,0)_"01T Sequence:"
 set VO(3)=$C(4,4,20,0,0,0,0,0,0,0)_"01T Tran Reference Nbr:"
 set VO(4)=$C(4,53,8,0,0,0,0,0,0,0)_"01T Status:"
 set VO(5)=$C(6,4,20,1,0,0,0,0,0,0)_"01T Customer Reference:"
 set VO(6)=$C(6,45,16,1,0,0,0,0,0,0)_"01T Conversion Fee:"
 set VO(7)=$C(7,2,22,1,0,0,0,0,0,0)_"01T Fee Calc Method/Plan:"
 set VO(8)=$C(7,43,18,1,0,0,0,0,0,0)_"01T Payment Priority:"
 set VO(9)=$C(8,6,18,1,0,0,0,0,0,0)_"01T Margin/Rate Code:"
 set VO(10)=$C(8,40,21,0,0,0,0,0,0,0)_"01TOriginal Pmt. Amount:"
 set VO(11)=$C(9,8,16,1,0,0,0,0,0,0)_"01T Payment Method:"
 set VO(12)=$C(9,42,19,1,0,0,0,0,0,0)_"01T Charge Detail(71):"
 set VO(13)=$C(10,2,22,0,0,0,0,0,0,0)_"01TModify Sender Charges:"
 set VO(14)=$C(10,43,18,0,0,0,0,0,0,0)_"01TReceiver's Charge:"
 set VO(15)=$C(11,6,18,1,0,0,0,0,0,0)_"01T Payment Currency:"
 set VO(16)=$C(11,45,16,1,0,0,0,0,0,0)_"01T Payment Amount:"
 set VO(17)=$C(12,12,12,1,0,0,0,0,0,0)_"01T DS1 Symbol:"
 set VO(18)=$C(12,50,11,0,0,0,0,0,0,0)_"01TFee Amount:"
 set VO(19)=$C(13,12,12,1,0,0,0,0,0,0)_"01T DS2 Symbol:"
 set VO(20)=$C(13,45,16,0,0,0,0,0,0,0)_"01TConv Fee Amount:"
 set VO(21)=$C(14,7,17,1,0,0,0,0,0,0)_"01T Constant Symbol:"
 set VO(22)=$C(14,40,21,0,0,0,0,0,0,0)_"01T Settlement Currency:"
 set VO(23)=$C(15,3,21,0,0,0,0,0,0,0)_"01TBranch to HQ Message:"
 set VO(24)=$C(18,14,51,2,0,0,0,0,0,0)_"01T-- Anticipated Debit Amount (Account's Currency) --"
 set VO(25)=$C(19,6,18,0,0,0,0,0,0,0)_"01T Account Currency:"
 set VO(26)=$C(19,46,15,0,0,0,0,0,0,0)_"01TPayment Amount:"
 set VO(27)=$C(20,4,20,0,0,0,0,0,0,0)_"01TTotal Available Bal:"
 set VO(28)=$C(20,50,11,0,0,0,0,0,0,0)_"01TFee Amount:"
 set VO(29)=$C(21,9,15,0,0,0,0,0,0,0)_"01T Hold Sequence:"
 set VO(30)=$C(21,39,22,0,0,0,0,0,0,0)_"01TConversion Fee Amount:"
 set VO(31)=$C(22,3,21,0,0,0,0,0,0,0)_"01TApprox Exchange Rate:"
 set VO(32)=$C(22,43,18,0,0,0,0,0,0,0)_"01TTotal Hold Amount:"
 set VO(33)=$C(23,3,21,0,0,0,0,0,0,0)_"01TActual Exchange Rate:"
 set VO(34)=$C(23,41,20,0,0,0,0,0,0,0)_"01T Actual Amount/Fees:"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)  // Display screen data
 new V
 s SNDRCHG=$G(SNDRCHG)
 s TOTAVL=$G(TOTAVL)
 //
 set VO="74|35|13|0"
 set VO(35)=$C(1,1,80,1,0,0,0,0,0,0)_"01T"_$S(%ProcessMode=5:"",1:$$BANNER^DBSGETID(%FN))
 set VO(36)=$C(3,25,12,2,0,0,0,0,0,0)_"01N"_fEFTPAY.CID
 set VO(37)=$C(3,62,12,2,0,0,0,0,0,0)_"01N"_fEFTPAY.SEQ
 set VO(38)=$C(4,25,14,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.REFNO,1,14)
 set VO(39)=$C(4,62,3,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.STATUS,1,3)
 set VO(40)=$C(4,66,12,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.STATDSC,1,12)
 set VO(41)=$C(6,25,16,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.RELREFNO,1,16)
 set VO(42)=$C(6,62,1,2,0,0,0,0,0,0)_"00L"_$S(fEFTPAY.FEECONV:"Y",1:"N")
 set VO(43)=$C(7,25,12,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.FEETYPE,1,12)
 set VO(44)=$C(7,62,3,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.PRI2,1,3)
 set VO(45)=$C(8,25,12,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.CCODE,1,12)
 set V=$S(fEFTPAY.SWORGAMT="":"",1:$J(fEFTPAY.SWORGAMT,0,2)) set VO(46)=$C(8,62,15,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.SWORGAMT="":"",1:$J(fEFTPAY.SWORGAMT,0,2))
 set VO(47)=$C(8,78,3,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.ORIGCRCD,1,3)
 set VO(48)=$C(9,25,10,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.MET,1,10)
 set VO(49)=$C(9,62,3,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.FEEPAYOR,1,3)
 set VO(50)=$C(10,25,1,2,0,0,0,0,0,0)_"00L"_$S($G(SNDRCHG):"Y",1:"N")
 set V=$S(fEFTPAY.RCVRCHG="":"",1:$J(fEFTPAY.RCVRCHG,0,2)) set VO(51)=$C(10,62,15,2,0,0,0,0,0,0)_"00$"_$S(fEFTPAY.RCVRCHG="":"",1:$J(fEFTPAY.RCVRCHG,0,2))
 set VO(52)=$C(10,78,3,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.RCVRCHGC,1,3)
 set VO(53)=$C(11,25,3,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.CRCD,1,3)
 set V=$S(fEFTPAY.AMOUNT="":"",1:$J(fEFTPAY.AMOUNT,0,2)) set VO(54)=$C(11,62,15,2,0,0,0,0,0,0)_"00$"_$S(fEFTPAY.AMOUNT="":"",1:$J(fEFTPAY.AMOUNT,0,2))
 set VO(55)=$C(12,25,10,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.CONSNDPO,1,10)
 set V=$S(fEFTPAY.FEEAMT="":"",1:$J(fEFTPAY.FEEAMT,0,2)) set VO(56)=$C(12,65,12,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.FEEAMT="":"",1:$J(fEFTPAY.FEEAMT,0,2))
 set VO(57)=$C(12,78,3,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.FEECRCD,1,3)
 set VO(58)=$C(13,25,10,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.VARNDPO,1,10)
 set V=$S(fEFTPAY.FEEAMT2="":"",1:$J(fEFTPAY.FEEAMT2,0,2)) set VO(59)=$C(13,65,12,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.FEEAMT2="":"",1:$J(fEFTPAY.FEEAMT2,0,2))
 set VO(60)=$C(13,78,3,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.FEECRCD2,1,3)
 set VO(61)=$C(14,25,10,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.CONSTANT,1,10)
 set VO(62)=$C(14,62,1,2,0,0,0,0,0,0)_"01T"_$E(fEFTPAY.SETCRCD,1,1)
 set VO(63)=$C(15,25,35,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.BRHQMSG1,1,35)
 set VO(64)=$C(16,25,35,2,0,0,0,0,0,0)_"00T"_$E(fEFTPAY.BRHQMSG2,1,35)
 set VO(65)=$C(19,25,3,2,0,0,0,0,0,0)_"01T"_$E(DEP.CRCD,1,3)
 set V=$S(fEFTPAY.ANTAMT="":"",1:$J(fEFTPAY.ANTAMT,0,2)) set VO(66)=$C(19,62,15,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.ANTAMT="":"",1:$J(fEFTPAY.ANTAMT,0,2))
 set VO(67)=$C(20,25,15,2,0,0,0,0,0,0)_"01$"_$S($G(TOTAVL)="":"",1:$J($G(TOTAVL),0,2))
 set V=$S(fEFTPAY.ANTFEE1="":"",1:$J(fEFTPAY.ANTFEE1,0,2)) set VO(68)=$C(20,65,12,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.ANTFEE1="":"",1:$J(fEFTPAY.ANTFEE1,0,2))
 set VO(69)=$C(21,25,5,2,0,0,0,0,0,0)_"01N"_fEFTHLD.HSEQ
 set V=$S(fEFTPAY.ANTFEE2="":"",1:$J(fEFTPAY.ANTFEE2,0,2)) set VO(70)=$C(21,65,12,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.ANTFEE2="":"",1:$J(fEFTPAY.ANTFEE2,0,2))
 set V=$S(fEFTPAY.ANTRATE="":"",1:$J(fEFTPAY.ANTRATE,0,6)) set VO(71)=$C(22,25,12,2,0,0,0,0,0,0)_"00N"_$S(fEFTPAY.ANTRATE="":"",1:$J(fEFTPAY.ANTRATE,0,6))
 set V=$S(fEFTPAY.ANTTOTAL="":"",1:$J(fEFTPAY.ANTTOTAL,0,2)) set VO(72)=$C(22,62,15,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.ANTTOTAL="":"",1:$J(fEFTPAY.ANTTOTAL,0,2))
 set V=$S(fEFTPAY.RATE="":"",1:$J(fEFTPAY.RATE,0,6)) set VO(73)=$C(23,25,12,2,0,0,0,0,0,0)_"01N"_$S(fEFTPAY.RATE="":"",1:$J(fEFTPAY.RATE,0,6))
 set V=$S(fEFTPAY.ACTAMTFEE="":"",1:$J(fEFTPAY.ACTAMTFEE,0,2)) set VO(74)=$C(23,62,15,2,0,0,0,0,0,0)_"01$"_$S(fEFTPAY.ACTAMTFEE="":"",1:$J(fEFTPAY.ACTAMTFEE,0,2))
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=39,VPT=1,VPB=23,PGM=$T(+0),DLIB="SYSDEV",DFID="EFTHLD"
 set OLNTB=23062
 
 set VFSN("DEP")="zDEP",VFSN("EFTHLD")="zfEFTHLD",VFSN("EFTPAY")="zfEFTPAY"
 //
 // 
	
	
 set %TAB(1)=$C(2,24,12)_"21N12401|1|[EFTPAY]CID"
 set %TAB(2)=$C(2,61,12)_"21N12402|1|[EFTPAY]SEQ|[EFTPAY]"
 set %TAB(3)=$C(3,24,14)_"21T12404|1|[EFTPAY]REFNO|||||||||20"
 set %TAB(4)=$C(3,61,3)_"21T12412|1|[EFTPAY]STATUS|[STBLESTAT]"
 set %TAB(5)=$C(3,65,12)_"21T12400|*STATDSC|[EFTPAY]STATDSC|||||||||15"
 set %TAB(6)=$C(5,24,16)_"01T12403|1|[EFTPAY]RELREFNO"
 set %TAB(7)=$C(5,61,1)_"00L12429|1|[EFTPAY]FEECONV"
 set %TAB(8)=$C(6,24,12)_"01T12402|1|[EFTPAY]FEETYPE|[EFTFEE]"
 set %TAB(9)=$C(6,61,3)_"01T12449|1|[EFTPAY]PRI2|[STBLPRIORITY]"
 set %TAB(10)=$C(7,24,12)_"01T12448|1|[EFTPAY]CCODE|[UTBLCC]"
 set %TAB(11)=$C(7,61,15)_"20$12403|1|[EFTPAY]SWORGAMT|||||||2"
 set %TAB(12)=$C(7,77,3)_"20T12404|1|[EFTPAY]ORIGCRCD"
 set %TAB(13)=$C(8,24,10)_"01T12413|1|[EFTPAY]MET|[STBLPAYMET]"
 set %TAB(14)=$C(8,61,3)_"01T12416|1|[EFTPAY]FEEPAYOR|[STBLFEEPAYOR]||do VP1^V00S206(.fEFTHLD,.fEFTPAY,.DEP)"
 set %TAB(15)=$C(9,24,1)_"00L|*SNDRCHG|[*]@SNDRCHG|||do VP2^V00S206(.fEFTHLD,.fEFTPAY,.DEP)"
 set %TAB(16)=$C(9,61,15)_"00$12412|1|[EFTPAY]RCVRCHG|||do VP3^V00S206(.fEFTHLD,.fEFTPAY,.DEP)||||2"
 set %TAB(17)=$C(9,77,3)_"20T12413|1|[EFTPAY]RCVRCHGC"
 set %TAB(18)=$C(10,24,3)_"01T12404|1|[EFTPAY]CRCD|[CRCD]:QU ""[CRCD]CO=<<%CO>>""||do VP4^V00S206(.fEFTHLD,.fEFTPAY,.DEP)"
 set %TAB(19)=$C(10,61,15)_"01$12403|1|[EFTPAY]AMOUNT|||do VP5^V00S206(.fEFTHLD,.fEFTPAY,.DEP)||||2"
 set %TAB(20)=$C(11,24,10)_"01T12446|1|[EFTPAY]CONSNDPO|[UTBLFOREX]"
 set %TAB(21)=$C(11,64,12)_"20$12428|1|[EFTPAY]FEEAMT|||||||2"
 set %TAB(22)=$C(11,77,3)_"20T12427|1|[EFTPAY]FEECRCD"
 set %TAB(23)=$C(12,24,10)_"01T12447|1|[EFTPAY]VARNDPO|[STBLCNTRY]||do VP6^V00S206(.fEFTHLD,.fEFTPAY,.DEP)"
 set %TAB(24)=$C(12,64,12)_"20$12431|1|[EFTPAY]FEEAMT2|||||||2"
 set %TAB(25)=$C(12,77,3)_"20T12430|1|[EFTPAY]FEECRCD2"
 set %TAB(26)=$C(13,24,10)_"00T12406|1|[EFTPAY]CONSTANT|[UTBLECOACT]||do VP7^V00S206(.fEFTHLD,.fEFTPAY,.DEP)"
 set %TAB(27)=$C(13,61,1)_"20T12401|1|[EFTPAY]SETCRCD|[STBLEURSC]"
 set %TAB(28)=$C(14,24,35)_"00T12401|1|[EFTPAY]BRHQMSG1"
 set %TAB(29)=$C(15,24,35)_"00T12402|1|[EFTPAY]BRHQMSG2|||do VP8^V00S206(.fEFTHLD,.fEFTPAY,.DEP)"
 set %TAB(30)=$C(18,24,3)_"20T12412|1|[DEP]CRCD|[CRCD]"
 set %TAB(31)=$C(18,61,15)_"20$12410|1|[EFTPAY]ANTAMT|||||||2"
 set %TAB(32)=$C(19,24,15)_"20$|*TOTAVL|[*]@TOTAVL|||||||2"
 set %TAB(33)=$C(19,64,12)_"20$12422|1|[EFTPAY]ANTFEE1|||||||2"
 set %TAB(34)=$C(20,24,5)_"20N12404|1|[EFTHLD]HSEQ|||||||||12"
 set %TAB(35)=$C(20,64,12)_"20$12423|1|[EFTPAY]ANTFEE2|||||||2"
 set %TAB(36)=$C(21,24,12)_"00N12401|1|[EFTPAY]ANTRATE|||do VP9^V00S206(.fEFTHLD,.fEFTPAY,.DEP)||||6"
 set %TAB(37)=$C(21,61,15)_"20$12432|1|[EFTPAY]ANTTOTAL|||||||2"
 set %TAB(38)=$C(22,24,12)_"20N12434|1|[EFTPAY]RATE|||||||6"
 set %TAB(39)=$C(22,61,15)_"20$12435|1|[EFTPAY]ACTAMTFEE|||||||2"
 do VTBL(.fEFTHLD,.fEFTPAY,.DEP),VDEPRE(.fEFTHLD,.fEFTPAY,.DEP) if $G(ER) quit
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDEPRE(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)  // Data Entry Pre-processor
 
 // VFYFLG (verify flag) is defined outside of the INTPAYBR30A screen.
 // Payments cannot be modified during verification, so protect all
 // input fields.
 
 type public Boolean VFYFLG
 
 if VFYFLG.get() do PROTECT^DBSMACRO("ALL")
 
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type public Boolean VFYFLG
 type public String EFT71F,X
 
 // Branch verification
 if VFYFLG.get() quit
 
 if X="OUR" do { quit
 	// Sender's charges are not allowed
 	do PROTECT^DBSMACRO("@SNDRCHG")
 	set EFT71F=""
 	
 	// Receiver's charge is optional
 	do UNPROT^DBSMACRO("EFTPAY.RCVRCHG")
 	do DEFAULT^DBSMACRO("EFTPAY.RCVRCHGC",fEFTPAY.CRCD)
 	}
 
 if (X="BEN")!(X="SHA") do {
 	// Receiver's charge is not allowed
 	do PROTECT^DBSMACRO("EFTPAY.RCVRCHG")
 	do DEFAULT^DBSMACRO("EFTPAY.RCVRCHG","")
 	do DEFAULT^DBSMACRO("EFTPAY.RCVRCHGC","")
 	
 	// Sender's charges is optional (SHA) or mandatory (BEN)
 	do UNPROT^DBSMACRO("@SNDRCHG")
 	}
 
 quit
VP2(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type public Boolean ER
 type public Number X
 
 if X do {
 	// Display sender's charges screen
	do SND(.fEFTPAY)
 	set X=0
 	// Define INTPAYBR30A screen data
 	do VDA
 	// Repaint the INTPAYBR30A screen
 	do ^DBSPNT()
 	}
 
 if ER quit
 
 // At least one sender's charge is required for "BEN" payments
 if fEFTPAY.FEEPAYOR="BEN",EFT71F.get()="" do Runtime.setErrMSG("EFTPAY",5068) quit
 
 quit
 
SND(RecordEFTPAY fEFTPAY) // Modify sender's charges via INTPAYSNDCHG screen
 type String SID
 
 // Define system variables
 do SYSVAR^SCADRV0()
 
 // Modify mode
 set %ProcessMode=1
 set SID="INTPAYSNDCHG"
 do DRV^USID(%ProcessMode,SID,.fEFTPAY)
 
 quit
VP3(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type public Number X
 
 if (X="")!(X=0) do DEFAULT^DBSMACRO("EFTPAY.RCVRCHGC","")
VP4(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type Boolean EMUMEM
 type Number PROCDT,VALDT
 type Number EXCAMT,SENDNOS
 type String VARNDPO,SCDFT,SENDCORR
 
 type public Boolean ER
 type public String X
 
 // If invalid currency, then quit
 type RecordCRCD crcd=Db.getRecord("CRCD","CO=:%CO,CRCD=:X",1)
 if 'crcd.getMode() quit
 set EMUMEM=crcd.emu
 
 // Validate currency and default/reset payment currency related fields
 set VARNDPO=fEFTPAY.VARNDPO
 do CRCDIP^PROCEFT(X,.fEFTPAY)
 if ER quit
 
 if fEFTPAY.VARNDPO'=VARNDPO do DEFAULT^DBSMACRO("EFTPAY.VARNDPO",VARNDPO)
 
 // Default settlement currency flag
 // Settlement currency must equal 0 for a non-In currency.
 if EMUMEM=1 do {
 	set SCDFT=CUVAR.scdft
 	if fEFTPAY.SETCRCD="" do DEFAULT^DBSMACRO("EFTPAY.SETCRCD",+SCDFT)
 	}
 else  do DEFAULT^DBSMACRO("EFTPAY.SETCRCD",0)
 
 // Reset SENDNOS & SENDCORR. These values are reset because SENDNOS
 // and SENDCORR do not appear on INTPAYBR30A
 set (SENDCORR,SENDNOS)=""
 do NOSIP^PROCEFT(.fEFTPAY)
 if ER quit
 
 if fEFTPAY.SENDNOS'=SENDNOS do DEFAULT^DBSMACRO("EFTPAY.SENDNOS",SENDNOS)
 if fEFTPAY.SENDCORR'=SENDCORR do DEFAULT^DBSMACRO("EFTPAY.SENDCORR",SENDCORR)
 
 // Reset PROCDT & EFD. These values are reset because PROCDT and
 // EFD do not appear on INTPAYBR20
 set (PROCDT,VALDT)=""
 do DATIP^PROCEFT(X,fEFTPAY.EFTTYPE,fEFTPAY.SENDCORR,.PROCDT,.VALDT)
 if ER quit
 
 if fEFTPAY.PROCDT'=PROCDT do DEFAULT^DBSMACRO("EFTPAY.PROCDT",PROCDT)
 if fEFTPAY.EFD'=VALDT do DEFAULT^DBSMACRO("EFTPAY.EFD",VALDT)
 
 // Convert receiver charges to payment currency (no margins, non-cash, mid-rate)
 if (fEFTPAY.RCVRCHG>0),(fEFTPAY.RCVRCHGC="") do DEFAULT^DBSMACRO("EFTPAY.RCVRCHGC",X)
 if (fEFTPAY.RCVRCHG>0),(fEFTPAY.RCVRCHGC'=X) do {
 	do EXC^CRCDUTL(fEFTPAY.RCVRCHGC,X,fEFTPAY.RCVRCHG,1,2,"00",fEFTPAY.CCODE,"",1)
 	do DEFAULT^DBSMACRO("EFTPAY.RCVRCHG",$$^SCARND(EXCAMT,0,"",X))
 	do DEFAULT^DBSMACRO("EFTPAY.RCVRCHGC",X)
 	}
 
 quit
VP5(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type Number AAMT,ACNF,AFEE,AHLD,ARTE,BALAVL,CNVAMT,FEEAMT,HCID,HSEQ,TOTAVL
 type String CNVCRCD,CO,CRCD,FEECRCD,UDRC
 
 type public Boolean ER
 type public Number X
 
 if X<0 do Runtime.setErrMSG("EFTPAY",415) quit
 if X#($$MOD^SCARND("",fEFTPAY.CRCD)) do Runtime.setErrMSG("EFTPAY",775) quit
 
 // Calculate fees and anticipated amounts associated with the outgoing
 // foreign payment (XEFTFCALC uses EFTPAY short name array)
 set fEFTPAY.AMOUNT=X
 do XEFTFCALC^EFTFCALC(.fEFTPAY,.FEEAMT,.FEECRCD,.CNVAMT,.CNVCRCD,.AAMT,.ARTE,.AFEE,.ACNF,.AHLD)
 if ER quit
 
 do DEFAULT^DBSMACRO("EFTPAY.FEECRCD",FEECRCD)
 do DEFAULT^DBSMACRO("EFTPAY.FEEAMT",$$^SCARND(FEEAMT,0,"",FEECRCD))
 do DEFAULT^DBSMACRO("EFTPAY.FEECRCD2",CNVCRCD)
 do DEFAULT^DBSMACRO("EFTPAY.FEEAMT2",$$^SCARND(CNVAMT,0,"",CNVCRCD))
 do DEFAULT^DBSMACRO("EFTPAY.ANTFEE1",AFEE)
 do DEFAULT^DBSMACRO("EFTPAY.ANTFEE2",ACNF)
 do DEFAULT^DBSMACRO("EFTPAY.ADDHLD",AHLD)
 do DEFAULT^DBSMACRO("EFTPAY.ANTAMT",AAMT)
 do DEFAULT^DBSMACRO("EFTPAY.ANTRATE",ARTE)
 
 // Qutgoing payments have fees added to the hold total
 do DEFAULT^DBSMACRO("EFTPAY.ANTTOTAL",fEFTPAY.ANTFEE1+fEFTPAY.ANTFEE2+fEFTPAY.ADDHLD)
 
 // Don't calculate payment account's available balance for GLs
 if fEFTPAY.TTYPE'<2 quit
 
 // Calculate payment account's available balance.
 set BALAVL=$$TOTBALAVL^EFTFUNCS(fEFTPAY.CID)
 if ER quit
 
 // Add holds placed for the payment to the available bal for existing payments.
 if %ProcessMode do {
 	type ResultSet rs=Db.select("HCID,HSEQ","EFTHLD","CID=:fEFTPAY.CID AND SEQ=:fEFTPAY.CID")
 	while rs.next() do {
 		set HCID=rs.getCol("HCID")
 		set HSEQ=rs.getCol("HSEQ")
 		type RecordPHLD phld=Db.getRecord("PHLD","CID=:HCID,SEQ=:HSEQ",1)
 		set BALAVL=BALAVL+phld.amt
 		}
 	}
 
 // Amount exceeds total available balance of ~p1 by ~p2
 set UDRC=CUVAR.udrc
 if (BALAVL-fEFTPAY.ANTTOTAL)<0 do {
 	if fEFTPAY.CCODE'=UDRC do Runtime.setErrMSG("EFTPAY",3704,BALAVL_"~"_(fEFTPAY.ANTTOTAL-BALAVL))
 	}
 if ER quit
 
 set TOTAVL=BALAVL-fEFTPAY.ANTTOTAL
 do DEFAULT^DBSMACRO("@TOTAVL",TOTAVL)
 
 quit
VP6(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type String CCYCID
 
 type public Boolean ogl
 
 if ogl set CCYCID=fEFTPAY.CRCD
 else  do {
 	type RecordDEP dep=Db.getRecord("DEP","CID=:fEFTPAY.CID",1)
 	set CCYCID=dep.crcd
 	}
 
 if CCYCID'=%CRCD do GOTO^DBSMACRO("EFTPAY.BRHQMSG1")
 
 quit
VP7(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type String CCYCID
 
 type public Boolean ogl
 
 if ogl set CCYCID=fEFTPAY.CRCD
 else  do {
 	type RecordDEP dep=Db.getRecord("DEP","CID=:fEFTPAY.CID",1)
 	set CCYCID=dep.crcd
 	}
 
 if X="" if CCYCID=%CRCD do Runtime.setErrMSG("EFTPAY",741) quit
 
 quit
VP8(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type String UDRC
 
 set UDRC=CUVAR.udrc
 if (fEFTPAY.CCODE'=UDRC)!(fEFTPAY.TTYPE'<2) do GOTO^DBSMACRO("END")
 
 quit
VP9(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP) //
 type Number AAMT,ACNF,AFEE,AHLD,ARTE,BALAVL,CNVAMT,FEEAMT,HCID,HSEQ,TOTAVL
 type String CNVCRCD,CO,CRCD,FEECRCD
 
 type public Boolean ER
 type public Number X
 
 if X="" quit
 
 if fEFTPAY.CCODE'=CUVAR.udrc quit
 
 // Check minimum and maximum rates for the payment currency
 set CO=CUVAR.co
 set CRCD=fEFTPAY.CRCD
 if (DEP.CRCD=CRCD),(X'=1) do Runtime.setErrMSG("EFTPAY",8306) quit
 
 type RecordCRCD crcd=Db.getRecord("CRCD","CO=:CO,CRCD=:CRCD")
 if (X<crcd.minrate)!(X>crcd.maxrate) do Runtime.setErrMSG("CRCD",7641,crcd.minrate_"~"_crcd.maxrate) quit
 
 // Calculate fees and anticipated amounts associated with the outgoing
 // foreign payment (XEFTFCALC uses EFTPAY short name array)
 set fEFTPAY.ANTRATE=X
 do XEFTFCALC^EFTFCALC(.fEFTPAY,.FEEAMT,.FEECRCD,.CNVAMT,.CNVCRCD,.AAMT,.ARTE,.AFEE,.ACNF,.AHLD)
 if ER quit
 
 do DEFAULT^DBSMACRO("EFTPAY.FEECRCD",FEECRCD)
 do DEFAULT^DBSMACRO("EFTPAY.FEEAMT",$$^SCARND(FEEAMT,0,"",FEECRCD))
 do DEFAULT^DBSMACRO("EFTPAY.FEECRCD2",CNVCRCD)
 do DEFAULT^DBSMACRO("EFTPAY.FEEAMT2",$$^SCARND(CNVAMT,0,"",CNVCRCD))
 do DEFAULT^DBSMACRO("EFTPAY.ANTFEE1",AFEE)
 do DEFAULT^DBSMACRO("EFTPAY.ANTFEE2",ACNF)
 do DEFAULT^DBSMACRO("EFTPAY.ADDHLD",AHLD)
 do DEFAULT^DBSMACRO("EFTPAY.ANTAMT",AAMT)
 do DEFAULT^DBSMACRO("EFTPAY.ANTRATE",ARTE)
 
 // Qutgoing payments have fees added to the hold total
 do DEFAULT^DBSMACRO("EFTPAY.ANTTOTAL",fEFTPAY.ANTFEE1+fEFTPAY.ANTFEE2+fEFTPAY.ADDHLD)
 
 // Don't calculate payment account's available balance for GLs
 if fEFTPAY.TTYPE'<2 quit
 
 // Calculate payment account's available balance.
 set BALAVL=$$TOTBALAVL^EFTFUNCS(fEFTPAY.CID)
 if ER quit
 
 // Add holds placed for the payment to the available bal for existing payments.
 if %ProcessMode do {
 	type ResultSet rs=Db.select("HCID,HSEQ","EFTHLD","CID=:fEFTPAY.CID AND SEQ=:fEFTPAY.CID")
 	while rs.next() do {
 		set HCID=rs.getCol("HCID")
 		set HSEQ=rs.getCol("HSEQ")
 		type RecordPHLD phld=Db.getRecord("PHLD","CID=:HCID,SEQ=:HSEQ",1)
 		set BALAVL=BALAVL+phld.amt
 		}
 	}
 
 // Amount exceeds total available balance of ~p1 by ~p2
 if (BALAVL-fEFTPAY.ANTTOTAL)<0 do Runtime.setErrMSG("EFTPAY",3704,BALAVL_"~"_(fEFTPAY.ANTTOTAL-BALAVL)) quit
 
 set TOTAVL=BALAVL-fEFTPAY.ANTTOTAL
 do DEFAULT^DBSMACRO("@TOTAVL",TOTAVL)
 
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordEFTHLD fEFTHLD
 type Public RecordEFTPAY fEFTPAY
 type Public RecordDEP DEP
 do VPR(.fEFTHLD,.fEFTPAY,.DEP)
 do VDA1(.fEFTHLD,.fEFTPAY,.DEP)
 do ^DBSPNT()
 quit

VW(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)
 do VDA1(.fEFTHLD,.fEFTPAY,.DEP)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)
 do VDA1(.fEFTHLD,.fEFTPAY,.DEP)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordEFTHLD fEFTHLD
 type Public RecordEFTPAY fEFTPAY
 type Public RecordDEP DEP
 do VDA1(.fEFTHLD,.fEFTPAY,.DEP)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordEFTHLD fEFTHLD
 if sn="EFTHLD" do vSET1(.fEFTHLD,di,X)
 type Public RecordEFTPAY fEFTPAY
 if sn="EFTPAY" do vSET2(.fEFTPAY,di,X)
 type Public RecordDEP DEP
 if sn="DEP" do vSET3(.DEP,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordEFTHLD fEFTHLD,di,X)
 do fEFTHLD.setAuditFlag(1)
 set fEFTHLD.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET2(RecordEFTPAY fEFTPAY,di,X)
 do fEFTPAY.setAuditFlag(1)
 set fEFTPAY.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET3(RecordDEP DEP,di,X)
 do DEP.setAuditFlag(1)
 set DEP.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordEFTHLD fEFTHLD
 if fid="EFTHLD" quit $$vREAD1(.fEFTHLD,di)
 type Public RecordEFTPAY fEFTPAY
 if fid="EFTPAY" quit $$vREAD2(.fEFTPAY,di)
 type Public RecordDEP DEP
 if fid="DEP" quit $$vREAD3(.DEP,di)
 quit ""
vREAD1(RecordEFTHLD fEFTHLD,di)
 quit fEFTHLD.@di
vREAD2(RecordEFTPAY fEFTPAY,di)
 quit fEFTPAY.@di
vREAD3(RecordDEP DEP,di)
 quit DEP.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 //
VSCRPRE(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)  // Screen Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
 type Number AVL
 
 set AVL=$$TOTBALAVL^EFTFUNCS(CID)
 do DISPLAY^DBSMACRO("@AVL",AVL)
 #ACCEPT date=11/05/03;PGM=Screen Compiler
 quit
 //
VDSPPRE(RecordEFTHLD fEFTHLD,RecordEFTPAY fEFTPAY,RecordDEP DEP)  // Display Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
 type public Number TOTAVL
 
 if (TOTAVL.get()=""),(fEFTPAY.TTYPE<2) set TOTAVL=$$TOTBALAVL^EFTFUNCS(fEFTPAY.CID)
 #ACCEPT date=11/05/03;PGM=Screen Compiler
 quit
