LNICFE  //PBS - LN - V3.1 - Convert Interim Loan To Permanent/Perm to Defer        
	/*	Copyright(c)2001 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/16/01 09:27:55 - DOUGHERTYT        
	     ORIG:  Chuck Hardy (6721) - 04/20/87        
	     DESC:        
	    INPUT: Requires PTY = Product group description be set by function        
	   OUTPUT:        
	        
	 ---- Revision History ------------------------------------------------        
	   
	  11/21/06 - MBUIM - CR 23262
		     Modified INIT,VER and ERR sections to scope variables 
		     correctly to eliminate undefined errors.

	  05/25/06 - DESHPANDE S K - CR 20748
		     Replaced logic that calls in EXEC^TRNDRV() with the logic 
		     that calls TRNSET^TRNDRV(). Removed references to TRNSEQ 
		     and TRNMODE variables.
	        
	  03/20/06 - KinI - CR 10108
	  	     Modified T1 section to to restore UTBLCRCDX processing.
	  	     Removed old revision history.
	        
 	  10/05/05  - BHOLT - 17068
 	  	     Modified the Depricated method. 	  		
         
        ------------------------------------------------------------------------
        */
  

IDP1   // Convert from interim to permanent status

	type public Number %REPEAT

	type Number IDPF, %PG
        type String SID        

        set SID = "LNICNV1" 
        set %PG = 0
        set IDPF = 1 
        set %REPEAT = 5
        do INIT(0)
	quit
 
 
IDP2   // Convert from Permanent to deferred status

	type public Number %REPEAT

	type Number IDPF, %PG
        type String SID
        
        set SID = "LNICNV2" 
        set %PG = 1
        set IDPF = 2 
        set %REPEAT = 5
        do INIT(1) 
        quit
 
 
IDP3   // Convert from deferred to permanent status

	type public Number %REPEAT

	type Number IDPF, %PG
        type String SID
        
        set SID = "LNICNV3" 
        set %PG = 1
        set IDPF = 3 
        set %REPEAT = 5
        do INIT(1)
        quit

  
INIT(%ProcessMode) // Obtain valid BRCD and posting day
 
       	type public String PTY

	type public Number CNTRX

	type Date TPD
	type Number BRCD, OLNTB, %PAGE
	type String CLS, ZCLS        
           
        //initialize to back-office teller
        set BRCD = CUVAR.bobr
 
        type RecordTPCTRL tpctrl = Db.getRecord("TPCTRL", "BRCD = :BRCD, UID = :%UserID, TPD = :%SystemDate", 1)
        set TPD = tpctrl.pmdate
        if TPD = "" set TPD = %SystemDate
 
        set %EffectiveDate = %SystemDate
        set CNTRX = 0 
        set %PAGE = 1 
        set OLNTB = 40
        set (CLS, ZCLS) = "L"
 
        if 'PTY.get() set PTY = ""
 
        type RecordLNICNV LNICNV()
        type RecordLNICNV LNICNVE()
        type RecordLN LN
 
        do VPG(.LNICNVE(), .LNICNV(), .LN)
 
        quit
 
 
VPG(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV(), RecordLN LN) // Page control
        
        type public Boolean ER   
	type public Number %PG, %REPEAT	
	type public String VFMQ

	type Number FINISH, I
	
        set FINISH = 0
 
        for  do { quit:FINISH
                 if %PG = 0 do VPG00(.LNICNVE(), .LNICNV(), .LN) if ER set FINISH = 1 quit
 
                 if %PG > 0 do VPG01(.LNICNVE(), .LNICNV(), .LN)
 
                 if "DFQ"[VFMQ do VER(.LNICNVE(), .LNICNV()) set FINISH = 1 quit
                 set %PG = %PG + 1
                 }
         quit
 
 
VPG00(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV(), RecordLN LN)        // Set up
 
	type public Boolean ER
	type public String VFMQ

	type String %READ, %TAB()

	set %TAB("EFD") = ".EFD6/XPP=D EFD^LNICFE"
        set %TAB("CTYPE") = ".CTYPE1/HLP=[LN]TYPE/TBL=TY(/XPR=D T^LNICFE"
        set %TAB("CRCD") = ".CRCD1/HLP=[LN]CRCD/TBL=TCRCD(CTYPE,"
        set %READ = "@@%FN,,,EFD/REQ,CTYPE/REQ,CRCD/REQ"
 
        do ^UTLREAD 
        
        if VFMQ = "Q" set ER = 1 do END quit
        
        do PP00(.LNICNVE(), .LNICNV(), .LN)
 
        quit


PP00(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV(), RecordLN LN) //
 
        type public Number CTYPE, IDPF
	type public String TY()

	type Number IRN, TYPE
	type String DIST1FRE, GRP, INDEX, TRM, UCID
	
	if IDPF > 1 quit 
 
        type RecordPRODDFTL proddftl = Db.getRecord("PRODDFTL", "TYPE = :CTYPE", 1)

        set IRN = proddftl.irn
        set INDEX = proddftl.index
        set DIST1FRE = proddftl.dist1fre
        set TRM = proddftl.trm
 
        set TYPE = CTYPE
        set GRP = TY(TYPE).piece("|", 2)
        set UCID = CUVAR.ucid
        set UCID = "^UCIDSCA" if UCID = ""
         
        quit
 
 
VPG01(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV(), RecordLN LN) //
 
	type public Number IDPF
	type public String PTY, RM, SID

	type Number I, OLNTB
	type String CLS, DESC, TY, TY(), ZCLS
               
	kill RM
 
        set (CLS, ZCLS) = "L"
        if LNICNVE(1).exists() do {
                if IDPF = 1 set SID = "LNICNVE1" 
                if IDPF > 1 set SID = "LNICNVE2"
                }
 
        /* CONVERT ~p1 LOANS FROM INTERIM TO PERMANENT STATUS
           Interim      
        */
        if IDPF = 1 do {
                set DESC = $$^MSG(5597, PTY) 
                set TY = $$^MSG(4104)
                }
 
        /* CONVERT ~p1 LOANS FROM PERMANENT TO DEFERRED STATUS
           Permanent
        */
        if IDPF = 2 do {
                set DESC = $$^MSG(5598, PTY) 
                set TY = $$^MSG(4105) 
                set OLNTB = 0
                }
 
        /* CONVERT ~p1 LOANS FROM DEFERRED TO PERMANENT STATUS
           Deferred
        */
 
        if IDPF = 3 do {
                set DESC = $$^MSG(5596, PTY) 
                set TY = $$^MSG(4103)
                }
 
        if IDPF > 1 for I = 1:1:5 set TY(I) = TY
 
        set DESC = $J("", 75-(DESC.length()/2))_DESC
        
        do DRV^USID(%ProcessMode, SID, .LNICNV(), .LN)
        
        if LNICNV(1).exists() do VER(.LNICNVE(), .LNICNV())
 
        quit
 
 
VER(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV()) //
 
	type public String VFMQ        
	
	type public Number CNTRX

	if VFMQ = "Q" set CNTRX = "" do END quit
        do FILE(.LNICNVE(), .LNICNV())
 
        do END 
 
        quit
 
 
FILE(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV()) // File data

	type public Date EFD
	type public Boolean ER
        
	type Number SEQ, ESEQ, XSEQ

 	type Date %EFD
	type Number CNT, FOUND, i, ICID 
      
        for i = 1:1 quit:'LNICNVE(i).exists()  kill LNICNVE(i)
        
        // %EFD will be used for the effective date of the transactions
        set %EFD = EFD
 
        // %EffectiveDate
        if %EFD - %SystemDate = 0 set %EFD = ""
        set ESEQ = 0 
        set SEQ = ""
 
        // CID    
        set FOUND = 0
        for  set SEQ = LNICNV(SEQ).order() do { quit:FOUND 
                if SEQ = "" do ECK(.LNICNVE(), .LNICNV()) set FOUND = 1 quit
                        for CNT = 1,21:1:25 do {
                                set ICID = LNICNV(SEQ).cid
                                if ICID = "" quit
                                set XSEQ = SEQ 
                                do C(.LNICNVE(), .LNICNV())
                                if ER quit
                                set SEQ = XSEQ
                                }
                if ER set FOUND = 1 quit
                kill LNICNV(SEQ)
                }
 
         quit
 
C(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV())        // Create Posting File Based on Account Balances
 	
 	type public Boolean ER
 	type public Date %EFD, TPD
	type public Number %AMT, BRCD, CID, CNTRX, CTYPE, ICID, IDPF, OVR(), PTRC, RJ(), SEQ, SPV(), TYPE     
	type public String OM(), RM 

	type String CRCD, CRDES, CRETC, CRTC, DRDES, DRETC, DRTC

	set CNTRX = CNTRX + 1
        do ^LNICNV 
        
        if ER do ERR(.LNICNVE(), .LNICNV()) quit
 
        // Zero balance account
        if '%AMT set RM = $$^MSG(2988) do ERR(.LNICNVE(), .LNICNV()) quit
        if IDPF = 2 do DEF set %EffectiveDate = LNICNV(SEQ).sldfd
 
        type RecordLN ln = Db.getRecord("LN", "CID = :ICID", 1)

        set CRCD = ln.crcd 
 
        if CRCD = "" set CRCD = %SystemCurrency
 
        type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE = :TYPE", 1)
        type RecordPRODCTL prodctl1 = Db.getRecord("PRODCTL", "TYPE = :CTYPE", 1)
 
        if IDPF = 1 do {
                set DRTC = prodctl.drtrcp
                set CRTC = prodctl1.crtrcp
                }
        else  do {
                set DRTC = prodctl.drtrcf
                set CRTC = prodctl1.crtrcf
                }
        
         /* Convert to permanent loan ~p1
         Convert from interim loan ~p1
        */
 
        if IDPF = 1 do {
                set CRDES = $$^MSG(4111, CID)
                set DRDES = $$^MSG(4109, ICID)
                }
 
        /* Convert to def status, loan ~p1
         Conv fr perm status, loan ~p1
        */
        if IDPF = 2 do {
                set CRDES = $$^MSG(4110, CID)
                set DRDES = $$^MSG(4106, ICID)
                }
 
        /* Conv to perm status, loan ~p1
         Convert fr def status, loan ~p1
        */
 
        if IDPF = 3 do {
                set CRDES = $$^MSG(4107, CID)
                set DRDES = $$^MSG(4108, ICID)
                }
 
        type RecordTRN trndrtc = Db.getRecord("TRN", "ETC = :DRTC", 1)
        set DRETC = trndrtc.itc
 
        // Build TTX file for posting           
	
        type RecordTTX ttx()
	set ttx(1) = Class.new("RecordTTX")
	set ttx(1).tjd = %SystemDate
	set ttx(1).brcd = BRCD
	set ttx(1).uid = %UserID
	
        set ttx(1).cid = CID
        set ttx(1).itc = DRETC
        set ttx(1).etc = DRTC
        set ttx(1).tamt = %AMT
        set ttx(1).efd = %EFD
        set ttx(1).tlo = %UserStation
        set ttx(1).tcmt = DRDES
 
        type RecordLN LN = Db.getRecord("LN", "CID = :CID", 1)
        set CRCD = ln.crcd
        if CRCD '= "" set ttx(1).crcd = CRCD
        
        type RecordACN acn
        
        type RecordTRN trncrtc = Db.getRecord("TRN", "ETC = :CRTC", 1)
        set CRETC = trncrtc.itc
 
	set ttx(2) = Class.new("RecordTTX")
	set ttx(2).tjd = %SystemDate
	set ttx(2).brcd = BRCD
	set ttx(2).uid = %UserID
	
        set ttx(2).cid = ICID
        set ttx(2).itc = CRETC
        set ttx(2).etc = CRTC
        set ttx(2).tamt = %AMT
        set ttx(2).efd = %EFD
        set ttx(2).tlo = %UserStation
        set ttx(2).tcmt = CRDES
 
        type RecordLN ln2 = Db.getRecord("LN", "CID = :ICID", 1)
        set CRCD = ln2.crcd
        if CRCD '= "" set ttx(2).crcd = CRCD   

 	//Post a transaction in system generated mode. 
 	do TRNSET^TRNDRV(.ttx(), TPD, BRCD, 4, PTRC, .RJ(), .SPV(), .OVR(,,), .OM())
        quit
 
 
ECK(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV())      // Check for errors
 
	type public Number I

	type Number N, %PAGE, %PG, %REPEAT
	type String VFMQ

	if '(LNICNVE(1).exists()) quit
 
        set N = ""
        for  set N = LNICNVE(N).order() quit:(N = "")!('LNICNVE(N).exists())  do {
                set LNICNV(N) = Class.new("RecordLNICNV")
                set LNICNV(N).CID = LNICNVE(N).CID
                set LNICNV(N).dist1fre = LNICNVE(N).dist1fre
                set LNICNV(N).trm = LNICNVE(N).trm
                set LNICNV(N).IRN = LNICNVE(N).IRN
                set LNICNV(N).INDEX = LNICNVE(N).INDEX
                set LNICNV(N).PCID = LNICNVE(N).PCID
                set LNICNV(N).DIST1ND = LNICNVE(N).DIST1ND
                set LNICNV(N).PMTPI = LNICNVE(N).PMTPI
                set LNICNV(N).SLDTRM = LNICNVE(N).SLDTRM
                set LNICNV(N).SLDRSN = LNICNVE(N).SLDRSN
                set LNICNV(N).SLDFD = LNICNVE(N).SLDFD
                set LNICNV(N).SLDTD = LNICNVE(N).SLDTD
                set LNICNV(N).ARDRSN = LNICNVE(N).ARDRSN
                set LNICNV(N).ARND = LNICNVE(N).ARND
                set LNICNV(N).ARFRE = LNICNVE(N).ARFRE
                set LNICNV(N).DIRDEF = LNICNVE(N).DIRDEF
                set LNICNV(N).CID2 = LNICNVE(N).CID2
                set LNICNV(N).CID3 = LNICNVE(N).CID3
                set LNICNV(N).CID4 = LNICNVE(N).CID4
                set LNICNV(N).CID5 = LNICNVE(N).CID5
                set LNICNV(N).CID6 = LNICNVE(N).CID6
                set LNICNV(N).ERR = LNICNVE(N).ERR
                }
 
        set %PAGE = (I-1)\6 if (I-1)#6 set %PAGE = %PAGE + 1
        set %REPEAT = (I-1)
 
        for I = 1:1:%REPEAT do {
                if '(LNICNV(I).exists()) do {
                        set LNICNV(I) = Class.new("RecordLNICNV") 
                        }
                }
        set (VFMQ, %PG) = 1
 
        quit
 
 
END    //
 	
 	type public Boolean ER
	type public Number IDPF
	type public String RM, %TAB, VFMQ       

	kill %TAB
        if ER quit
        set IDPF = IDPF.exists()
 
        if VFMQ = "Q" do {
                
                // Account(s) not created
                if IDPF = 1 set RM = $$^MSG(185) quit
        
                // Account(s) not converted
                set RM = $$^MSG(184)
                }
        else  do {
                
                // Account(s) created
                if IDPF = 1 set RM = $$^MSG(183) quit
                
                // Account(s) converted
                set RM = $$^MSG(182)
                }
        set ER = "W"
        quit
 
 
ERR(RecordLNICNV LNICNVE(), RecordLNICNV LNICNV())      //
 
	type public Number ESEQ
        type public String ET, RM        

	if 'ET.get() set ET = ""
        set ESEQ = ESEQ + 1 
        set LNICNVE(ESEQ) = Class.new("RecordLNICNV")
	if (LNICNV(ESEQ).exists()) do {
        	set LNICNVE(ESEQ).CID = LNICNV(ESEQ).cid
        	set LNICNVE(ESEQ).DIST1FRE = LNICNV(ESEQ).DIST1FRE
        	set LNICNVE(ESEQ).TRM = LNICNV(ESEQ).TRM
        	set LNICNVE(ESEQ).IRN = LNICNV(ESEQ).IRN
        	set LNICNVE(ESEQ).INDEX = LNICNV(ESEQ).INDEX
        	set LNICNVE(ESEQ).PCID = LNICNV(ESEQ).PCID
        	set LNICNVE(ESEQ).DIST1ND = LNICNV(ESEQ).DIST1ND
        	set LNICNVE(ESEQ).PMTPI = LNICNV(ESEQ).PMTPI
        	set LNICNVE(ESEQ).SLDTRM = LNICNV(ESEQ).SLDTRM
        	set LNICNVE(ESEQ).SLDRSN = LNICNV(ESEQ).SLDRSN
        	set LNICNVE(ESEQ).SLDFD = LNICNV(ESEQ).SLDFD
        	set LNICNVE(ESEQ).SLDTD = LNICNV(ESEQ).SLDTD
        	set LNICNVE(ESEQ).ARDRSN = LNICNV(ESEQ).ARDRSN
        	set LNICNVE(ESEQ).ARND = LNICNV(ESEQ).ARND
        	set LNICNVE(ESEQ).ARFRE = LNICNV(ESEQ).ARFRE
        	set LNICNVE(ESEQ).DIRDEF = LNICNV(ESEQ).DIRDEF
        	set LNICNVE(ESEQ).CID2 = LNICNV(ESEQ).CID2
        	set LNICNVE(ESEQ).CID3 = LNICNV(ESEQ).CID3
        	set LNICNVE(ESEQ).CID4 = LNICNV(ESEQ).CID4
        	set LNICNVE(ESEQ).CID5 = LNICNV(ESEQ).CID5
        	set LNICNVE(ESEQ).CID6 = LNICNV(ESEQ).CID6
        	set LNICNVE(ESEQ).ERR = LNICNV(ESEQ).ERR
 
        	set LNICNVE(ESEQ).err = RM
 
	}
        quit
 
 
T      // Build local array for type prompt
 
	type public Number TY
	
        type String G, I()        

	set I(3) = "TY("
        if TY.get() quit
        set G = ""
 
        do T1

        quit
 
  
T1     //
	
	type public String CO, TCRCD()
	
	type Number TY()
	
	type DbSet rs = Db.selectDbSet("PRODDFTL")
	while rs.next() do {
		type RecordPRODDFTL proddftl = rs.getRecord("PRODDFTL")

		if proddftl.idpf '= 2 quit
                
		set TY(proddftl.type) = proddftl.type
		
		type RecordUTBLCRCDX utblcrcdx=Db.getRecord("UTBLCRCDX","CRCD=:proddftl.crcd",1)			
		set TCRCD(proddftl.type,proddftl.crcd) = utblcrcdx.desc
		}
 
	quit

        
DEF    // File deferred data into LN, loan HIST

	type public Number CID
 
        type RecordLN LN = Db.getRecord("LN", "CID = :CID", 1)
 
        // SL # Times Deferred
        set LN.sldnum =LN.sldnum + 1
 
        do LN.save()
 
        quit
 
 
 
EFD    // check that effective date is not before assigned teller EFD
        
        type public Boolean ER
	type public Number X
        type public String ET, %UCLS        
        	
	if X'?5N set X = $$^SCAJD(X) quit:X < 0
        type RecordSCAU0 scau0 = Db.getRecord("SCAU0", "UCLS = :%UCLS", 1)
        if X < (%SystemDate - scau0.maxefd) do {
                set ER = 1 
                set ET = "LSTEFD"                 
                do ^UTLERR
 
                }
        quit
 
 
 
 #OPTION ResultClass ON
Public String vSIG()	quit "60612^41340^Marie Mbui^15457"	// Signature - LTD^TIME^USER^SIZE
