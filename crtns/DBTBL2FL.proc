DBTBL2FL(RecordDBTBL2 dbtbl2, String vpar, Boolean vparNorm) // DBTBL2 - Screen Header Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (61)             07/07/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl2.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(dbtbl2,.vxins(),11,"|")
	if %O = 1 quit:'dbtbl2.isChanged()  do AUDIT^UCUTILN(dbtbl2,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("LIBS").exists()!vx("SID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL2",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL2","LIBS = :dbtbl2.libs and SID = :dbtbl2.sid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String LIBS
	type public String SID

	type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2","LIBS=:LIBS,SID=:SID")
	if (%ProcessMode = 2) do {
		do dbtbl2.setMode(2)

		do DBTBL2FL(dbtbl2,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL2 dbtbl2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL2","LIBS = :dbtbl2.libs and SID = :dbtbl2.sid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		set dbtbl2.DATE = %CurrentDate
		set dbtbl2.UID = %UserName
		type String n = -1
		type String x
		type String vn

		if %O = 0 for  set n = vobj(dbtbl2,n).order() quit:n.isNull()  do {
			if n = "v5" do { quit
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
					S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),-5)=vobj(dbtbl2,"v5")
			#ENDBYPASS
			}
			if n = "v1" do { quit
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
					S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),-1)=vobj(dbtbl2,"v1")
			#ENDBYPASS
			}
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),n)=vobj(dbtbl2,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(dbtbl2,-100,n).order() quit:n.isNull()  do {
			if n = "v5" do { quit
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
					S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),-5)=vobj(dbtbl2,"v5")
			#ENDBYPASS
			}
			if n = "v1" do { quit
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
					S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),-1)=vobj(dbtbl2,"v1")
			#ENDBYPASS
			}
			quit:'$D(vobj(dbtbl2,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),n)=vobj(dbtbl2,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl2))  S ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4))=vobj(dbtbl2)
		#ENDBYPASS
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDBTBL2 dbtbl2
	type String n = ""
	type String vn

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),n)) quit:n.isNull()  s vn=$S(n<0:"v"_-n,1:n) if 'vobj(dbtbl2,vn).data(),^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4),n).data()#2 set vobj(dbtbl2,vn) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL2 dbtbl2

	if 'vkeychg.get(),dbtbl2.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DBTBL(vobj(dbtbl2,-3),2,vobj(dbtbl2,-4))         // Delete Record
	quit


vinit // Initialize default values

	type public RecordDBTBL2 dbtbl2

	// Type local variables for access keys for defaults
	type public String LIBS
	type public String SID

	if dbtbl2.cscmp.isNull() set dbtbl2.cscmp = 0          // cscmp
	if dbtbl2.curdsp.isNull() set dbtbl2.curdsp = 0        // curdsp
	if dbtbl2.date.isNull() set dbtbl2.date = +$H          // date
	if dbtbl2.norpc.isNull() set dbtbl2.norpc = 0          // norpc
	if dbtbl2.ooe.isNull() set dbtbl2.ooe = 1              // ooe
	if dbtbl2.outfmt.isNull() set dbtbl2.outfmt = "VT220"  // outfmt
	if dbtbl2.repeat.isNull() set dbtbl2.repeat = 0        // repeat
	if dbtbl2.repreq.isNull() set dbtbl2.repreq = 0        // repreq
	if dbtbl2.resflg.isNull() set dbtbl2.resflg = 0        // resflg
	if dbtbl2.scrclr.isNull() set dbtbl2.scrclr = 1        // scrclr
	if dbtbl2.scrmod.isNull() set dbtbl2.scrmod = 0        // scrmod
	if dbtbl2.uid.isNull() set dbtbl2.uid = $$USERNAM^%ZFUNC // uid
	quit


vreqn // Validate required data items

	type public RecordDBTBL2 dbtbl2

	if dbtbl2.cscmp.isNull() do vreqerr("CSCMP") quit
	if dbtbl2.curdsp.isNull() do vreqerr("CURDSP") quit
	if dbtbl2.norpc.isNull() do vreqerr("NORPC") quit
	if dbtbl2.ooe.isNull() do vreqerr("OOE") quit
	if dbtbl2.scrmod.isNull() do vreqerr("SCRMOD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL2 dbtbl2

	if dbtbl2.libs.isNull() do vreqerr("LIBS") quit
	if dbtbl2.sid.isNull() do vreqerr("SID") quit

	if 'vobj(dbtbl2,-100,0,"").order().isNull() do {
		if vx("NORPC").exists(),dbtbl2.norpc.isNull() do vreqerr("NORPC") quit
		if vx("SCRMOD").exists(),dbtbl2.scrmod.isNull() do vreqerr("SCRMOD") quit
		if vx("OOE").exists(),dbtbl2.ooe.isNull() do vreqerr("OOE") quit
		if vx("CURDSP").exists(),dbtbl2.curdsp.isNull() do vreqerr("CURDSP") quit
		if vx("CSCMP").exists(),dbtbl2.cscmp.isNull() do vreqerr("CSCMP") quit
	}
		if vx("CSCMP").exists(),dbtbl2.cscmp.isNull() do vreqerr("CSCMP") quit
		if vx("CURDSP").exists(),dbtbl2.curdsp.isNull() do vreqerr("CURDSP") quit
		if vx("NORPC").exists(),dbtbl2.norpc.isNull() do vreqerr("NORPC") quit
		if vx("OOE").exists(),dbtbl2.ooe.isNull() do vreqerr("OOE") quit
		if vx("SCRMOD").exists(),dbtbl2.scrmod.isNull() do vreqerr("SCRMOD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL2","MSG",1767,"DBTBL2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL2 dbtbl2

	if (%O = 2) do vload

	if vobj(dbtbl2,-5).exists() do {

		set X = dbtbl2.buffers if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("BUFFERS", vRM) quit
		if dbtbl2.formhdg.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FORMHDG", vRM) quit
		if dbtbl2.lastfid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LASTFID", vRM) quit
		set X = dbtbl2.px if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PX", vRM) quit
		set X = dbtbl2.py if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PY", vRM) quit
		set X = dbtbl2.rhtmar if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RHTMAR", vRM) quit
		if dbtbl2.ruler.length()>1 set vRM = $$^MSG(1076,1) do vdderr("RULER", vRM) quit
		set X = dbtbl2.status if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("STATUS", vRM) quit
		if dbtbl2.video.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VIDEO", vRM) quit
		set X = dbtbl2.xorigin if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("XORIGIN", vRM) quit
		set X = dbtbl2.yorigin if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("YORIGIN", vRM) quit
	}

	if vobj(dbtbl2,-1).exists() do {

		if dbtbl2.lnk1.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK1", vRM) quit
		if dbtbl2.lnk10.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK10", vRM) quit
		if dbtbl2.lnk11.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK11", vRM) quit
		if dbtbl2.lnk12.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK12", vRM) quit
		if dbtbl2.lnk13.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK13", vRM) quit
		if dbtbl2.lnk14.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK14", vRM) quit
		if dbtbl2.lnk15.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK15", vRM) quit
		if dbtbl2.lnk16.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK16", vRM) quit
		if dbtbl2.lnk17.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK17", vRM) quit
		if dbtbl2.lnk18.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK18", vRM) quit
		if dbtbl2.lnk19.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK19", vRM) quit
		if dbtbl2.lnk2.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK2", vRM) quit
		if dbtbl2.lnk20.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK20", vRM) quit
		if dbtbl2.lnk21.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK21", vRM) quit
		if dbtbl2.lnk22.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK22", vRM) quit
		if dbtbl2.lnk23.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK23", vRM) quit
		if dbtbl2.lnk24.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK24", vRM) quit
		if dbtbl2.lnk25.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK25", vRM) quit
		if dbtbl2.lnk26.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK26", vRM) quit
		if dbtbl2.lnk27.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK27", vRM) quit
		if dbtbl2.lnk28.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK28", vRM) quit
		if dbtbl2.lnk3.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK3", vRM) quit
		if dbtbl2.lnk4.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK4", vRM) quit
		if dbtbl2.lnk5.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK5", vRM) quit
		if dbtbl2.lnk6.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK6", vRM) quit
		if dbtbl2.lnk7.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK7", vRM) quit
		if dbtbl2.lnk8.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK8", vRM) quit
		if dbtbl2.lnk9.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNK9", vRM) quit
	}

	if vobj(dbtbl2,0).exists() do {

		set X = dbtbl2.apl if 'X.isNull(),'Db.isDefined("STBLSCASYS","X") set vRM = $$^MSG(1485,X) do vdderr("APL", vRM) quit
		if '("01"[dbtbl2.CSCMP) set vRM=$$^MSG(742,"L") do vdderr("CSCMP", vRM) quit
		if '("01"[dbtbl2.CURDSP) set vRM=$$^MSG(742,"L") do vdderr("CURDSP", vRM) quit
		set X = dbtbl2.date if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DATE", vRM) quit
		if dbtbl2.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
		if '("01"[dbtbl2.NORPC) set vRM=$$^MSG(742,"L") do vdderr("NORPC", vRM) quit
		if '("01"[dbtbl2.OOE) set vRM=$$^MSG(742,"L") do vdderr("OOE", vRM) quit
		if dbtbl2.outfmt.length()>20 set vRM = $$^MSG(1076,20) do vdderr("OUTFMT", vRM) quit
		if dbtbl2.pfid.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PFID", vRM) quit
		set X = dbtbl2.proj if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("PROJ", vRM) quit
		set X = dbtbl2.repeat if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("REPEAT", vRM) quit
		if dbtbl2.repreq.length()>2 set vRM = $$^MSG(1076,2) do vdderr("REPREQ", vRM) quit
		set X = dbtbl2.resflg if 'X.isNull(),'Db.isDefined("DBCTL","NAME=""RESFLG"",CODE=:X") set vRM = $$^MSG(1485,X) do vdderr("RESFLG", vRM) quit
		set X = dbtbl2.scrclr if 'X.isNull(),'{List}"0,1".contains(X) set vRM = $$^MSG(1485,X) do vdderr("SCRCLR", vRM) quit
		if '("01"[dbtbl2.SCRMOD) set vRM=$$^MSG(742,"L") do vdderr("SCRMOD", vRM) quit
		set X = dbtbl2.sys if 'X.isNull(),'Db.isDefined("STBLSCASYS","X") set vRM = $$^MSG(1485,X) do vdderr("SYS", vRM) quit
		if dbtbl2.uid.length()>16 set vRM = $$^MSG(1076,16) do vdderr("UID", vRM) quit
		if dbtbl2.ver.length()>6 set vRM = $$^MSG(1076,6) do vdderr("VER", vRM) quit
		if dbtbl2.vpgm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("VPGM", vRM) quit
	}
	if dbtbl2.libs.length()>10 set vRM = $$^MSG(1076,10) do vdderr("LIBS", vRM) quit
	if dbtbl2.sid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SID", vRM) quit

	if vobj(dbtbl2).exists() ! 'vobj(dbtbl2,"").order().isNull() do {

		if dbtbl2.desc2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC2", vRM) quit
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL2","MSG",979,"DBTBL2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL2 dbtbl2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("LIBS").exists() set vux("LIBS") = vx("LIBS")
	if vx("SID").exists() set vux("SID") = vx("SID")
	do vkey(1) set voldkey = dbtbl2.libs_","_dbtbl2.sid    // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl2.libs_","_dbtbl2.sid    // Copy new keys into object
	type RecordDBTBL2 vnewrec = dbtbl2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL2 dbtbl2

	if vux("LIBS").exists() set dbtbl2.libs = vux("LIBS").piece("|",i)
	if vux("SID").exists() set dbtbl2.sid = vux("SID").piece("|",i)
	quit
