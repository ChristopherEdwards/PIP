LNEASTS	//;Escrow Analysis Support Status (BPS)
	/*
	   ORIG:  Kathie Jalbuena (7070) - 08/03/87

	  ---- Revision History ------------------------------------------------
	   
	   07/02/06 - Srinivar - 19137
	              Modified ADJUST section to load the data 
	              into the temporary table LNEAM whenever LNEAM 
	              array gets updated. This will make the data 
	              available to reports and screens which uses 
	              the temporary table LNEAM.
	              
	              Cleaned up the warnings.
	              Modified the code to confirm PSL standards.
	   
	   11/30/05 - Srinivar - 16890
	   	      	
	   	      Declared the function ADJUST as public	
	              Modified the section VPG01 to pass .fEABE
	              object to EXEC^LNEA inorder to 
	              set  lnapchge.ereq(Escrow requirment) to 
	              ESCPMT variable in EXEC^LNEA procedure.
	   	      Modified the section VPG01 to pass the 
	   	      correct object fEABL to the ADJUST 
	   	      section instead of fEABEL.
	   	      
	   	      Modified the section CUSH to pass ECID to dep 
	   	      object and LCID to laon object
	   
	   10/10/02 - SRIVASTAVAN - 49451
		      Converted to PSL

	  ----------------------------------------------------------------------
	*/
	do UPD quit

UPD	//

	do INIT(1)
	quit


INQ	//

	do INIT(2)
	quit


INIT(%ProcessMode)	//

	type public Number %PG,%PAGE,MOD
	type public String RM
	new VFMQ

	kill RM

	set (%PG,MOD)=0 
	set %PAGE=1

	type RecordLNAPCHGE fEABE
	type RecordLN LN
	type RecordLNAPCHG fEABL

	do VPG(.fEABE,.LN,.fEABL)
	quit


VPG(RecordLNAPCHGE fEABE,RecordLN LN,RecordLNAPCHG fEABL)	// Page control
	
	type public Number %PG
	type public Boolean ER,RP
	type public String VFMQ
	type Boolean FINISH
	
	set FINISH=0
	set RP=0
	
	for  do { quit:FINISH
		
		if %PG=0 do VPG00(.fEABE,.LN,.fEABL) if ER!(VFMQ="Q") set FINISH=1 quit 
		if %PG=1 do VPG01(.fEABE,.LN,.fEABL) if ER!(VFMQ="Q") set FINISH=1 quit 
		if %PG=2 do VPG02 if ER!(VFMQ="Q") set FINISH=1 quit 
		if RP=1 set FINISH=1 quit
		if "DFQ"[VFMQ do VER(.LN) set FINISH=1 quit 
		set %PG=%PG+1
		}
	quit


VPG00(RecordLNAPCHGE fEABE,RecordLN LN,RecordLNAPCHG fEABL)	// Set up

	type public Date APCND
	type public Number ANOFF,BR,LCID,%PG,TYPE
	type public String ESC,ET,fEABP,IO,P,%READ,RM,%TAB,VFMQ,X,ACN(),ESCEA
	type public Boolean ER
	
	
	type Boolean REJFLG
	type Date ESDATE
	
	
	set ESC="ESC1"
	set %TAB("LCID")=".CID3/HLP=[LN]CID/XPP=D PP^LNEASTS"
	set %TAB("ESC")=".ESC/TBL=ESCTBL("
	set %TAB("APCND")=".APCND2/HLP=[LN]APCND"
	if %ProcessMode=2 set %TAB("IO")=$$IO^SCATAB($I)

	set %READ="@@%FN,,,LCID/REQ,ESC/REQ,APCND/REQ"
	if %ProcessMode=2 set %READ=%READ_",IO/REQ"

	do ^UTLREAD 
	
	if VFMQ="Q" set ER=1 quit

	set ESDATE=APCND 
	set REJFLG=0

	lock +ACN(LCID):2 else  set ET="RECLOC" do ERR quit

	if %ProcessMode=2,IO'=$I do OPEN^SCAIO

	set LN=Db.getRecord("LN","CID=:LCID")

	// Product Type
	set TYPE=LN.type

	// Branch of Ownership
	set BR=LN.boo

	// Payment Change Analysis Date Offset
	set ANOFF=LN.anoff

	// Analysis Frequency
	if LN.anfre="" do { quit
		set ER=1 
		set ET="ANFRE" 
		do ERR 
		}
	
	if 'Db.isDefined("LNAPCHG","APCND=:APCND,CID=:LCID") do { quit
		set ER=1
		set RM=$$^MSG(8503,APCND.toString())
		set VFMQ="Q"
		}


	//Build list of escrow accounts to consider

	type RecordLNBIL0 BIL=Db.getRecord("LNBIL0","CID=:LCID")

	set X=BIL.pe01 
	if X="" quit  
	set P=$P(X,"#",1) 

	if $$ESC^LNU(P)  do BIL(.fEABL)

	set X=BIL.pe02 
	if X="" quit 
	set P=$P(X,"#",1) 

	if $$ESC^LNU(P)  do BIL(.fEABL)

	set fEABP="0|0"
	quit


BIL(RecordLNAPCHG fEABL)	//

		type public String P,X
		type public Number %PAGE,LCID
		type public Date APCND
		
		type String ECID(),T,TR
		type Number CID,E,PST
		set E=$P(X,"#",2)

		// Verify that escrows are not closed or self-pay
		type RecordDEP DEP=Db.getRecord("DEP","CID=:E")
	
		if DEP.stat=4 quit
	
		if DEP.spf quit
		
		// Check for non-escrow processing
		set TR=DEP.esc
		set T=$TR(TR,"0123456789")

		if '$$ESC^LNU(T) quit

		type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE=:T")
		if lntrs.nepf quit

		set ECID(E)=P
		set %PAGE=%PAGE+1
		set fEABL=Db.getRecord("LNAPCHG","APCND=:APCND,CID=:LCID",1) 
		set PST=+fEABL.epost
		set CID=LCID
		quit


VPG01(RecordLNAPCHGE fEABE,RecordLN LN,RecordLNAPCHG fEABL)	// Screen

	
	type public String DATA,ESC,fEABP,LNEAM,VPG(),VFMQ
	type public Number BEGBAL,ECID,LCID,%PG,TYPE
	type public Date APCND,AEDT,ASDT,AED
	type public Boolean ER
	
	
	type Number CID,ANOFF
	type String ESCFRE,ANFRE
	
	set VPG(1)="Display Escrow Analysis|LNANE1"

	if fEABL.apcnd="" set fEABL=Db.getRecord("LNAPCHG","APCND=:APCND,CID=:LCID",1)
	if 'fEABP.get().isNull() set fEABP="0|0"

	set LN=Db.getRecord("LN","CID=:LCID")
	
	// Get information for this particular escrow account
	set ECID=$$ECID^LNU(LCID,ESC)

	set fEABE=Db.getRecord("LNAPCHGE","APCND=:APCND,CID=:LCID,ECID=:ECID",1)

	type RecordDEP DEP=Db.getRecord("DEP","CID=:ECID")
	
	set ESC=$$ESCA^LNU(LCID,ECID)

	set ESCFRE=$P($$ELEFRE^LNU(LCID,ESC),"|",1)

	// Calculate AED (analysis end date)
	set ANFRE=LN.anfre

	// Payment Change Analysis Date Offset
	set ANOFF=LN.anoff

	if APCND=LN.apcnd do { quit:ER
		set AED=$$NJD^UFRE(APCND,ANFRE) 
		if ER do ERR 
		}

	// Escrow Analysis Pmt Change Next Date
	if APCND'=LN.apcnd set AED=LN.apcnd

	// Analyze for at least 1 year
	if $$NJD^UFRE(APCND,"1YA")>AED set AED=$$NJD^UFRE(APCND,"1YA") if ER do ERR quit

	set AED=AED-1

	// get cushion data items
	do CUSH(.fEABE) 
	if ER set VFMQ="Q" quit

	set CID=LCID 
	set ASDT=APCND 
	set AEDT=AED

	do EXEC^LNEA(.LN,.fEABE,CID,.LNEAM,ESC,APCND,AED,"02",.DATA)

	set TYPE=LN.type
	set BEGBAL=$P(DATA,"|",3)	

	do INIDEP(.fEABE)
	
	do ADJUST(.fEABE,.fEABL)

	do DRV^USID(%ProcessMode,"LNANE1",.fEABE,.DEP,.LN,.fEABL)	
	if VFMQ="Q" quit
	if VFMQ'="F" set CID=-1
	quit


VPG02	//
	
	type public Number LCID,%PG
	type public Date APCND,AED
	type public String VFMQ
	type public Boolean RP
		
	type String RID
	type Date AEDT,ASDT
	type Number CID,TMP
		
	set CID=LCID 
	set ASDT=APCND 
	set AEDT=AED
	
	set TMP=%PG
	set RID="SCA042" 

	do DRV^URID
	set RP=1
		
	set %PG=TMP	
		
	quit


ERR	//
	
	type public Boolean ER
	type public String VFMQ
	
	set ER=1 

	do ^UTLERR

	set VFMQ="Q"

	quit


VER(RecordLN LN)	//
	
	type public Number ACN,LCID,TSEQ
	type public String ET,VFMQ
	
	type Number NXTSEQ
	
	
	if %ProcessMode=2!(%ProcessMode=4)!(VFMQ="Q") do END quit

	lock +ACN(LCID):2 else  set ET="RECLOC" do ERR do END quit

	// This section was previously handed by UHFETCH
	type ResultSet rs=Db.select("TSEQ","HIST","CID=:LCID","TSEQ DESC")			
	if rs.next() set NXTSEQ=rs.getCol(1)+1

	if (NXTSEQ-TSEQ) do {
		set ET="UPDERR"

		do ERR

		}

	do END 

	quit


END	//
	
	
	type public String RM(),%TAB,VFMQ
	type public Boolean ER,REJFLG
	type public Number LCID
	
	kill %TAB lock
 
	if %ProcessMode=2 do CLOSE^SCAIO

	if RM(4).get().isNull() do END1

	if REJFLG.get() do END1

	if ER!(%ProcessMode=2)!(%ProcessMode=4) quit

	if VFMQ="Q" do {

		// LCID account ~p1 not created
		if %ProcessMode=0 set RM=$$^MSG(129,LCID) quit

		// LCID account ~p1 not modified
		if %ProcessMode=1 set RM=$$^MSG(135,LCID) quit

		// LCID account ~p1 not deleted
		set RM=$$^MSG(130,LCID) quit
		}
	else  do {

		// LCID account~p1  created
		if %ProcessMode=0 set RM=$$^MSG(107,LCID) quit

		// LCID account ~p1 modified
		if %ProcessMode=1 set RM=$$^MSG(122,LCID) quit

		// LCID account ~p1 deleted
		set RM=$$^MSG(109,LCID) quit
		}

	set ER="W"
	quit


END1	// handles new error arrays

	type public Boolean ER
	type public String RM()
	type public Number LCID
	
	
	if ER set RM(2)=$$^MSG(5959,LCID)
	else  set RM(2)=$$^MSG(290,LCID)

	set RM(2)=$J("",40-($L(RM(2))/2))_RM(2) 
	set RM(2)=RM(2)_$J("",80-$L(RM(2)))
	set (RM(1),RM(3))=$J("",80)
	set ER="W"

	quit


PP	// Post processor to CID prompt

	
	type public Boolean ER
	type public Number CID,ELENUM
	type public Date APCND
	type public String ACN(),ESCTBL,ET,RM
	
	type String CLS,ZCLS
	type Number %EXT,TSEQ,ECID
	
	set (CLS,ZCLS)="L"
	set %EXT=1

	do ^UACN 

	if ER quit
	if '{String}CID.get().length() quit

	lock +ACN(CID):2 else  set ET="RECLOC" do ERR quit

	// This section was previously handed by UHFETCH
        type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID","TSEQ DESC")
        if rs.next() set TSEQ=rs.getCol("TSEQ")+1

	type RecordLN LN=Db.getRecord("LN","CID=:CID")

	set APCND=LN.apcnd

	if 'APCND do { quit
		set ER=1 
		set ET="INVLDADT" 

		do ^UTLERR 

		}

	set RM=$$DAT^%ZM(APCND,"MM/DD/YEAR")_"|3"

	do ESCA^LNES2(.ESCTBL)
	
	
	quit
	

CUSH(RecordLNAPCHGE fEABE)	//

	
	type public Number CUSHF,CUSHO,CUSHA ,ECID,LCID 
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:ECID")
	
	type RecordLN ln=Db.getRecord("LN","CID=:LCID")

	set CUSHO=$$VAL^LNEA(dep.cusho,ln.cusho)

	set CUSHF=$$VAL^LNEA(dep.cushf,ln.cushf)

	set CUSHA=fEABE.cush

	quit


public ADJUST(RecordLNAPCHGE fEABE,RecordLNAPCHG fEABL)	//
	
	type public Number BEGBAL,OVER,CHKAMT,ENDBAL
	type public String LNEAM
	type Number BAL,ESCPMT
	type Date JD
	
	type public RecordLNEAM lneam()

 
	set ESCPMT=fEABE.epmt
	set OVER=fEABE.ovg
	set CHKAMT=fEABE.amtc

	set JD=""
	for  set JD=$O(LNEAM(JD)) quit:JD.isNull()  do {  
		if LNEAM(JD) do {
			 set LNEAM(JD).piece("|",1)=ESCPMT
			 set lneam(JD)=Db.getRecord("LNEAM","JD=:JD",1)
                         set lneam(JD).pmt=ESCPMT
			 do lneam(JD).save()
			 }
	          }
		
	set BEGBAL=BEGBAL+fEABE.amtd	
	set BEGBAL=BEGBAL+fEABE.amtb
	set BEGBAL=BEGBAL+fEABE.amtl

	// Don't minus out overage if analysis has already been posted.
	if 'fEABL.epost do {
		set BEGBAL=BEGBAL-fEABE.amtc
		set OVER=OVER-fEABE.amtc
		set CHKAMT=CHKAMT-fEABE.amtc
		}

	set BAL=BEGBAL
	set JD=""
	for  set JD=$O(LNEAM(JD)) quit:JD=""  do {
		set BAL=BAL+LNEAM(JD)-$P(LNEAM(JD),"|",2)
		set $P(LNEAM(JD),"|",3)=BAL
		set lneam(JD)=Db.getRecord("LNEAM","JD=:JD",1)
		set lneam(JD).bal=BAL
		do lneam(JD).save()

            }
	
		
	set ENDBAL=BAL
	quit


INIDEP(RecordLNAPCHGE fEABE)	// Calculate INIDEP - Target balance (calculated beginning balance)

	type public Number INIDEP
	type Number ABAL,CUSH,LOWBAL,LOWBALA
	

	// projected actual bal.
	set ABAL=fEABE.abal

	// cushion amount
	set CUSH=fEABE.cush

	// actual low balance
	set LOWBALA=fEABE.lowbala

	// calc. target low bal
	set LOWBAL=LOWBALA-ABAL

	// calc. target balance
	set INIDEP=CUSH-LOWBAL

	quit

vSIG()	quit "60320^23864^Srinivasan, Rajesh^9862"	// Signature - LTD^TIME^USER^SIZE
