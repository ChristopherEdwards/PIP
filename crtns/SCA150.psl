SCA150	  /*
	ORIG: VARGAJ - 03/14/2007
	DESC: Coupon Book Tape Production

	---- Comments --------------------------------------------------------
		Called by @LNCB08, New Coupon Book Order File Tape Production 
		function (SCA150) to calculate variables not set in the LNCPN
		record when PMET is type 2

	---- Revision History ------------------------------------------------

		03/14/07 - VARGAJ - CR25725
		   Brought back from P01 SCARPTS routine and converted 
		   R150 and dependent sections that serve to SCA150, New Coupon
		   Book Order File report.
		   
		 04/11/07 - VARGAJ - CR18011
		   Made NCP and LCHG public.
 */

	quit
	
	
public	R150(RecordLN ln,	// Loan Record			/REF:RW
     	     RecordLNCPN lncpn, // Coupon Production Record	/REF:RW
     	     Date PND,          // Production Date		/REF:R
     	     Number PMET,       // Production Type Method	/REF:R	
     	     Number PMTS,	// Number of Payments		/REF:W
     	     Number LCHG,       // Late Charges			/REF:W
     	     Date DUE, 		// Next Coupon Due Date		/REF:W
     	     Number TPTAMT,	// Payment Amount on coupons	/REF:W
     	     Number EPMT,	// Total Escrow Payment		/REF:W	
     	     Number PRPMT)	// Total P&I Payment		/REF:W

	
	type public Boolean ER
	type Date NDD, SAVNDD
 	
	do LCHG(.ln,.LCHG)           // Late charge processing

	if PMET '= 2 quit

	// For payment method=2 (create coupon book on payment change or
	// escrow analysis) CBPND table contains no data, construct tape values
 
	set (PRPMT,DUE,TPTAMT) = ""
	set PMTS = 0
	
	// Get next coupon production date from dayend
	set (NDD,SAVNDD) = lncpn.ndd

	// Get record from analysis change global
	type RecordLNAPCHG lnapchg = Db.getRecord("LNAPCHG","APCND=:NDD,CID=:ln.cid",1)

	// Define escrow pmt portion
	do EPMT(.lnapchg,ln.apcnd,NDD,ln.cid,.EPMT)
	
	// Calculate next coupon due date
	do DUE(.ln, NDD, .DUE) quit:ER
 
	// Compute total number of payments
	set PMTS = $$NCP(.ln,NDD) quit:ER

	// Establish P&I and total payment amounts
	do TPT(.ln, .lnapchg, NDD, EPMT, .PRPMT, .TPTAMT)

	quit


public LCHG(RecordLN ln,       	   // Loan Record	/REF:RW
     		Number LCHG)       // Late Charges	/REF:RW
 
	// Late charge processing

	type public Boolean ER
	type Number BASE(), I, L, LATECHG(), N, PCT

	if ln.popt.isNull() set LCHG = 0 quit 

	type RecordLNPOPT lnpopt = Db.getRecord("LNPOPT","GRP=:ln.grp,POPT=:ln.popt",1)
	set PCT = lnpopt.pct / 100

	// Penalty method ~p1 currently unsupported
	if lnpopt.base1.isNull() do Runtime.setErrMSG("LNPOPT",2181,lnpopt.base1) quit:ER

	set BASE(1) = $$CMP(.ln, lnpopt.base1)
 

	if lnpopt.met = 1 do {  quit
		
		set LCHG = ln.flca 
		
		do LIM(.LCHG,.ln,.lnpopt)
	}
	
	if lnpopt.met = 2 do {  quit
	
		set LCHG = PCT*BASE(1)
		set LCHG = LCHG.roundCur(ln.crcd)
	
		do LIM(.LCHG,.ln,.lnpopt)
	}
		

	// lnpopt.met=3
	set BASE(2)=$$CMP(.ln, lnpopt.base2)
	set BASE(3)=$$CMP(.ln, lnpopt.base3)
	set BASE(4)=$$CMP(.ln, lnpopt.base4)
	set BASE(5)=$$CMP(.ln, lnpopt.base5)
	set BASE(6)=$$CMP(.ln, lnpopt.base6)

	for I=1:1:6 if 'BASE(I).isNull() set LATECHG(I) = BASE(I) * PCT
	set N = ""
	set L = 0

	if lnpopt.comp = "L" for  set N = LATECHG(N).order() quit:(N.isNull())  if L > LATECHG(N) set L = LATECHG(N)
	if lnpopt.comp '= "L" for  set N = LATECHG(N).order() quit:(N.isNull())  if L < LATECHG(N) set L = LATECHG(N)

	set LCHG = L

	quit            
        
        
LIM(Number LCHG,                // Late charge limits
    RecordLN ln,                // Loan Record
    RecordLNPOPT lnpopt)        // Lending Penalty Options Record
 
	if lnpopt.maxlc , (LCHG > lnpopt.maxlc) set LCHG = lnpopt.maxlc
	if lnpopt.minlc , (LCHG < lnpopt.minlc) set LCHG = lnpopt.minlc

	if (LCHG < .01) set LCHG = 0

	if ln.lcadl , (LCHG > ln.lcadl) set LCHG = ln.lcadl  // Annual limit
	if ln.lcldl , (LCHG > ln.lcldl) set LCHG = ln.lcldl  // Life limit

	quit


CMP( RecordLN ln,
	Number BASENUM)	// Base Number     
	
	type Number BAL = ""

	if BASENUM = "" quit ""
	if BASENUM = 0 quit ln.flca
 	if BASENUM = 1 quit ln.pmtpi
 	if BASENUM = 2 quit ln.pmt
 	if BASENUM = 3 do {  quit BAL
 		set BAL = ln.bal
 		if BAL.isNull() set BAL = ln.crlmt - ln.iun
		if ln.aruf set BAL = BAL - ln.udbal
 	}
 	if BASENUM = 4 quit ln.balint
 	if BASENUM = 5 quit 0
 	if BASENUM = 6 quit ln.cupr
 	if BASENUM = 7 quit ln.cuin
 	
 	quit ""

EPMT(RecordLNAPCHG lnapchg,     // Analysis Payment Change Batch Record 
     Date APCND,                // Escrow Analysis Pmt Change Next Date
     Date NDD,                  // Next Coupon Production Date
     Number CID,                // Account Number
     Number EPMT)               // Total Escrow Payment
 		
	type Number ELENUM
	type String EA
	
	// If NDD=APCND then this entry was made during escrow analysis, use
	// escrow values, otherwise, use loan parameters.
	if NDD = APCND set EPMT = lnapchg.ntrs quit
	set EPMT = 0
	
	type RecordLNBIL0 lnbil0 = Db.getRecord("LNBIL0","CID=:CID")
	
	// Get all the escrow accounts
	set ELENUM=0
	for  set EA=$$ESCACT^BILFUNCS(.lnbil0,.ELENUM) quit:EA=""  do {
		type String ETYP,PEA
		type Number ECID
		
		set PEA=EA.piece($C(9),2)
		set ETYP=PEA.translate("0123456789")
		if '$$ESC^LNU(ETYP) quit

		type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE=:ETYP")
		// non-escrow processing
		if lntrs.nepf quit
		set ECID=EA.piece($C(9),1)

		type RecordDEP dep=Db.getRecord("DEP","CID=:ECID")
		if dep.stat=4 quit
		
		set EPMT = EPMT + dep.curramt
	}
	
	quit

 
DUE(RecordLN ln,	// Find first due date for coupon book
	Date NDD,	// Next Due Date
	Date DUE)       // Due Date to calculate
 
 	type public Boolean ER
 	
 	set DUE = ln.dist1nd
 	
	/*
        If the account's next due date is greater than the date in PCB
        (dayend), then user DIST1ND.  If NDD=DIST1ND this means that the
        date needs to be bumped a Frequency to be on the date the change takes
        effect.
	*/

	if DUE > NDD quit

	// Otherwise, bump DIST1ND until the date equals or exceeds NDD.
	for  set DUE = DUE.nextFreqDate(ln.dist1fre) quit:(DUE > NDD)

	/*
        If the account is due for a payment change, and PCHND is equal to
        the calculated due date, advance DUE by one DIST1FRE, because PCHND
        is always one payment before the date the new payment takes effect
        for interest in arrears loans.
	*/
	if ('ln.pchnd)!(ln.icm) quit

        if ln.pchnd '= DUE quit
	if ln.apcnd , (NDD = ln.apcnd) quit
	set DUE = DUE.nextFreqDate(ln.dist1fre)

	quit

 
TPT(RecordLN ln,        
	RecordLNAPCHG lnapchg, 
	Date SAVNDD,
	Number EPMT,
	Number PRPMT,
	Number TPTAMT)
	
	
	set PRPMT = lnapchg.cpi
	if 'PRPMT set PRPMT = ln.pmtpi

	if 'ln.pchnd set TPTAMT = PRPMT + EPMT quit

	/*
        If Next Coupon Due Date is greater or equal to the Payment Change
        Next Date, get the new payment amount from the Payment Change Data
        table LNPTCHG.
	*/

	if ('ln.icm) , (SAVNDD '< ln.pchnd) do {
		type RecordLNPTCHG lnptchg = Db.getRecord("LNPTCHG","PCHND=:ln.pchnd,CID=:ln.cid",1)
		
		set PRPMT = lnptchg.npmt
	}

	if PRPMT.isNull() set PRPMT = ln.pmtpi
	set TPTAMT = PRPMT + EPMT

	quit


public NCP(	RecordLN ln,        // Loan Record		/REF:RW
    		Date PCBDT)         // Next Coupon Due Date	/REF:R
 
 	type public Boolean ER
 	
	// Define number of payments required

	if PCBDT.isNull() quit 0

	type Date DT, JD, NDD, NJD
	type Number NCP

	set DT(PCBDT) = ""
	set NCP = 0

	if ln.pchnd do { if ER quit 0
		set DT(ln.pchnd) = ""
		set DT(ln.pchnd.nextFreqDate(ln.pcfre)) = "" 
		}

	if ln.apcnd do { if ER quit 0
		set DT(ln.apcnd) = ""
		set DT(ln.apcnd.nextFreqDate(ln.anfre)) = "" quit:ER
		}
		
	set JD=PCBDT

	for  set NJD=JD.nextFreqDate(ln.dist1fre) quit:(NJD>DT(PCBDT).order())!(ER)  do { 
		
		if NJD '> DT(PCBDT).order() do {
			set NCP=NCP+1
			set JD=NJD 
			set:NCP=1 NDD=NJD
		}
	}
	if ER quit 0
	
	if PCBDT=ln.pchnd,ln.icm=0 set NDD=ln.pchnd.nextFreqDate(ln.dist1fre) if ER quit 0

	quit NCP
 #OPTION ResultClass ON
Public String vSIG()	quit "60747^39759^John Varga^7590"	// Signature - LTD^TIME^USER^SIZE
