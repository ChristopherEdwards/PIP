MRPC136( String RETURN, Number VERSN, Number EXTACN, Number EXTSEQ, String AMOUNTS)

	/*
	 Procedure Id: MRPC136
	 DESC: CIFEXT Registration Authorization RPC
	 ORIG: Kevin Hailey
	 DATE: 08/31/2005

	 ARGUMENTS:
		. RETURN	Return value		/TYP=T/REQ/MECH=REFNAM:W
		. VERSN		Version number		/TYP=N/REQ/MECH=VAL
		. EXTACN	Customer Number		/TYP=T/REQ/MECH=VAL
		. EXTSEQ	External Sequence	/TYP=T/REQ/MECH=VAL
		. AMOUNTS	List of Amounts		/TYP=T/REQ/MECH=VAL
		
	 RETURNS:

		. $$		Status			/TYP=L/REQ/MECH=VAL		
				0=No Error, otherwise error message or code
 
		. RETURN  	requested information	/TYP=N	

			        Status
				STATUS=0  - Success
				STATUS=1  - Validation Failed
				STATUS=2  - Maximum number of failures exceeded
				STATUS=3  - Verification period is expired

	 EXAMPLE:
		set AMOUNTS="'6.49','9.13',"4.82'"
		set X=$$^MRPC579(.RETURN,1,123,1,AMOUNTS)

	 ---- Comments --------------------------------------------------------

	 ---- Revision History ------------------------------------------------

	 10/05/06 - NATRAJAH - 22505
	 	Retrofited new procedure from P01DEV1 view as per the below
	 	mentioned CR.	
	 	03/27/06 Ed Sigda - CR 20275
	 	Create in Profile01 view.
	 	
	 09/20/05 Kevin Hailey - CR 17279
		Added check on CIFEXTREG.EXPDATE to return status of 3
		if the expiration date is in the past.

	 09/19/05 Kevin Hailey - CR 17234
		Removed code in section PROC that was throwing an error
		when not all amounts had been authenticated.  This was 
		preventing RETURN from getting returned.

	 08/23/05 Kevin Hailey - CR 17117
		Create procedure.
		 	
	*/

	type String ERRMSG
	type Boolean ERV
	type public Boolean ER
	type public String RM
	
	set (ER,ERV)=0
	set ERRMSG=""
	set RETURN=0

	// Process list of amounts
	do PROC(VERSN.get(),EXTACN.get(),EXTSEQ.get(),AMOUNTS.get(),.RETURN)
	if ERV set ER=1,RM=ERRMSG

	quit:ER $$ERRMSG^PBSUTL(RM.get())

	// Build return value
	set RETURN=$$V2LV^MSG(.RETURN) 
	
	quit ""


public PROC( Number VERSN, Number EXTACN, Number EXTSEQ, String AMOUNTS, String RETURN)

	/*
	 Process Appplication Origination

	 ARGUMENTS:
		. VERSN		Version number		/TYP=N/REQ/MECH=VAL
		. EXTACN	Application Id		/TYP=T/REQ/MECH=VAL
		. EXTSEQ	Input String		/TYP=T/REQ/MECH=VAL
		. AMOUNTS	List of Amounts		/TYP=T/REQ/MECH=VAL

	 RETURNS
		. RETURN	Return value		/TYP=T/REQ/MECH=REFNAM:W
	*/

	type public Boolean ERV
	type public String ERRMSG,ET,FROM,RM
		
	catch error {
		set ET=error.type
		set RM=error.description
		set FROM=error.thrownAt
		if error.type["%GTM-" do ZE^UTLERR

		do Runtime.rollback()
		
		// Set error flag
		set ERV=1
		set ERRMSG=RM
	}

	type Number AMT,DATA,I,REGAMT

	type ResultSet rs
	type RecordCIFEXTREG extreg
	type RecordCUVAR cuvar

	// Version number of client message is not compatible with server
	if VERSN'=1 set RM=$$^MSG(2951) throw Class.new("Error",","_RM)

	// Verify Customer Number is valid
	if EXTACN.isNull()!('Db.isDefined("CIF","ACN=:EXTACN")) throw Class.new("Error",","_$$^MSG(1295))

	// Verify External Sequence is valid
	if EXTSEQ.isNull()!('Db.isDefined("CIFEXTREG","ACN=:EXTACN,SEQ=:EXTSEQ")) throw Class.new("Error",","_$$^MSG(5671))

	set cuvar=Db.getRecord("CUVAR")
	set extreg=Db.getRecord("CIFEXTREG","ACN=:EXTACN,SEQ=:EXTSEQ")
	
	// Already exceeded maximum number of allowed failures
	if extreg.failcnt>cuvar.extvalfail set RETURN=2	quit
	
	// Verification period is expired
	if 'extreg.expdate.isNull(),(%SystemDate>extreg.expdate) set RETURN=3 quit

	// Parse AMOUNTS data into an array
	for I=1:1:AMOUNTS.length(",") set DATA(+AMOUNTS.piece(",",I).translate("'",""))=""

	// Get amounts from CIFEXTREGAMT
	set rs=Db.select("AMT","CIFEXTREGAMT","ACN=:EXTACN AND SEQ=:EXTSEQ")
	while rs.next() set REGAMT(rs.getCol(1))=""

	/*
	Check if all amounts have been verified and count number of payment
	orders
	*/
	set AMT=""
	for  set AMT=DATA(AMT).order() quit:AMT.isNull()  do {
		kill REGAMT(AMT)
		kill DATA(AMT)
	}

	do extreg.setAuditFlag(1)
	
	/*
	Not all amounts have been authenticated or number of amounts passed
	in doesn't match number of payment orders
	*/
	if REGAMT.data()!(DATA.data()) do {

		set RETURN=1

		// Increase failure count
		set extreg.failcnt=extreg.failcnt+1

		// Exceeded maximum number of failures
		if extreg.failcnt>cuvar.extvalfail do {
			set extreg.status=3		
			set RETURN=2
		}
	}

	// Validation successful, change status to Registered
	else  set extreg.status=2

	do extreg.save()

	quit


TEST

	type Number AMOUNTS,EXTACN,EXTSEQ
	type String FLD,PTR,RETURN,TLO,X
	type public Boolean ER
	type public Number %UID,%IPMODE
	type public String %LOGID,%UCLS,RM

	// Initialization
	set TLO="_ELWOOD$NTA209:"
	do SYSVAR^SCADRV0()
	set %UID=3939,%UCLS="SCA"
	set %LOGID=$$LOGID^SCADRV
	set %IPMODE="NOINT"

	set ER=0
	set RM=""

	// Read input
	read !,"Customer Number: ",EXTACN
	read !,"External Sequence: ",EXTSEQ
	read !,"List of Amounts: ",AMOUNTS

	// Execute RPC
	set X=$$^MRPC136(.RETURN,1,EXTACN,EXTSEQ,AMOUNTS)
	if X'="" do {
		set PTR=$$LV2V^MSG(X,.FLD)
		set ER=1
		if RM="" set RM=FLD(5)
	}

	// Display return values
	write !!,"Error Flag: ",ER.get(),"   ",RM.get()
	write !,"Return: ",RETURN.get()

	quit

vSIG()	quit "60543^19969^Hari Natrajan^4880"	// Signature - LTD^TIME^USER^SIZE
