IRSTPMTR	 	/*
	ORIG: titove - 09/09/2005
	DESC: IRS Tape Processing Master Template

	---- Comments --------------------------------------------------------

	Special Notes:
		FRECWRT, QRECWRT, T42RECWRT, TRECWRT and WRECWRT contain 
		special comments. These comments have to begin with characters
		"//;" that will be compiled into ISM standard ";;". These 
		comments are used by the routine IRSDUMP to provide field 
		descriptions and positions for tape dumps. You must follow 
		the following convention when modifying the sections:

		//; description|starting position|ending position or null

	I18N=QUIT: Excluded from I18N standards.

	---- Revision History ------------------------------------------------
	
	09/20/06 - SWARNALP - CR 23178 
		   Modified section TRECWRT to include the following changes 
		   for the project "2006 US Specifications for filing forms 
	     	   1098,1099 & 5498 Magnetically".
	     	   .	Modified the section to display blanks in field 
	     	   	positions 21-22 and 705-739 instead of displaying the 
	     	   	fields Replacement Alpha Character and Vendor Contact 
	     	   	Email Address respectively.
	     	   .	Modified the section to delete the field Electronic 
	     	   	File Name from field positions 396-410 to accomodate 
	     	   	this position with the increased length of the 
	     	   	Technical Contact Email Address from 35 text 
	     	   	characters to 50 characters and to shift the field 
	     	   	Magnetic Tape File Indicator from field position 
	     	   	394-395 to 409-410.

	05/15/06 - DESHPANDE S K - CR 21167
	     	   Modified for project 2005 US Specifications for filing forms 
	     	   1098,1099 & 5498 Magnetically. Modified section TRECWRT to 
	     	   set Foreign Entity Indicator field (position 29). Modified 
	     	   section ARECWRT to set Combined Federal/State Filer field.
		   Modified section BRECWRT to set Foreign Country Indicator 
		   field. Added section KRECWRT to build K record.     		

	05/15/06 - TITOVE - CR 21132
		   Modified STORETOT to populate six new columns added to
		   IRSCTTR1 table. Cleaned up some compiler warnings.

	
	04/13/06 - DHANALAKSHMI R - CR 20718
		   Modified section BRECWRT by replacing CID.roundDec(0,,20)
		   with CID.justify(20) to get complete TIN and M1099.seq in 
		   the position 21 - 40 of Payer B record.

	04/07/06 - TITOVE - CR 20641
		   Modified to use %SystemDate instead of %CurrentDate when
		   setting values in IRSTPFRM and IRSCTTR tables.

	04/01/06 - TITOVE - CR 20507
		   Modified STORETOT section to prevent insertion of fields
		   into IRSCTTR1 with length longer than database allows.

	09/11/05 - TITOVE - CR 16942
		   Converted into PSL. Removed setting of SUF from NAMCNTRL
		   section, it is not used anywhere. Replaced the multiple
		   directories/institutions logic with direct table.column
		   references. Modified WRECWRT section to use correct
		   delimiter when extracting piece from INSTADDR variable.
		   Modified QRECWRT to use ADDR data, instead of FULLADDR.
		   Removed Institution Directory logic and pre-2005 revision
		   history.

	07/05/05 - DHANALAKSHMI R - 14064
		   Modified the section INIT to initialize the variable 
		   FAMT("MIL").
		   Modified the section STORETOT to include the value of 
		   FAMT("MIL") into the variable Z, which is used to update 
		   the table IRSFTR1.
	
	03/10/05 - NATRAJAH - 14636
		   Sections T42RECWRT,WRECWRT,QRECWRT,C42RECWRT,F42RECWRT 
		   were modified based on 2004 changes on record layout. The 
		   changes include addition of a new field "Record Sequence 
		   Number" in the positions 771-778 for respective records.
		   Modification of section T42RECWRT  to add new field "P" 
	    	   (Prior Year Data Indicator) in position 199. 
		   Modification of section WRECWRT to include new option  
		   NQI-EIN for Withholding Agent's EIN Indicator at field
		   position 13.
		   Missing sections and the following ARQ47224 Changes have 
		   been retrofitted from TrackWare version 34 of routine IRSTPMTR.
		   
		   11/09/01 - ANTONOVS - 47224:003
		              Sections QRECWRT and WRECWRT were modified to 
        	              fill zip codes with zeros.
	           10/25/01 - ANTONOVS - 47224:1
	            	      Section T42RECWRT modified to set Country 
		     	      code and province code from CUVAR.ICNTRY and 
		     	      CUVAR.ISTATE.
	           09/27/01 - ANTONOVS - 47224
	            	      Sections T42RECWRT, QRECWRT, WRECWRT were 
		     	      modified to reflect 2001 changes to record 
		     	      layout. New section CRECWRT was added to  
		     	      print Q record totals and section YRECWRT  
		     	      was changed to F42RECWRT.	

	*/
	
	// Initialize Variables
	
	type public Boolean STATFLG = 0, TPRINT 
	type public Number ER, FGRP, STATTOT(,)
	type public String %INST, FORM, FORMS(), INST()
	
	type Number AMT(), BAMT(), BDTINCNT, BRECCNT, CUTOFF, FAMT(),FCNT, I, QIPYD
	type Number QNBWA, QRECCNT, TRECCNT
	type String INST1099, INSTADDR, INSTDIR, INSTEIN, INSTNAM, INSTVNDR
	type String PAYERNAM, TAMT(), TINSTEIN, TIPYD, TNBWA
	
        catch vERROR {
        	
		type String ET, RM

		set ET = vERROR.type
                
		if ET'["%GTM-" do {
                
			set ET = ET_"-"_vERROR.thrownAt
                
			set RM = vERROR.description
        		}
        	
		do ERR^IRSTAPE
        	}
	
	set FCNT = 0
	set INSTNAM = ""

	// Initialize FAMT to zeroes, to prevent possible undefined errors in STORETOT
	for I = 1:1:9,13,"A","B","C","D","E","MIL" set FAMT(I) = 0
	
	// Institution collator
	for  set INSTNAM = INST(INSTNAM).order() quit:INSTNAM.isNull()  do { quit:ER
		
		set INSTDIR = INST(INSTNAM)
		set INSTEIN = CUVAR.ein				// Employer ID Number
		set TINSTEIN = CUVAR.iein			// Transmitter ID Number
		set PAYERNAM = CUVAR.payernam.upperCase()
		
		set INSTADDR = CUVAR.ccity_"|"_CUVAR.cstate_"|"_CUVAR.czip_"|"_CUVAR.cad1_"|"_CUVAR.cad2_"|"_CUVAR.cad3_"|"
		set INSTADDR = INSTADDR_CUVAR.cname_"|"_CUVAR.ccntry_"|"_CUVAR.telephone
		set INSTADDR = INSTADDR.upperCase()
		
		set INST1099 = CUVAR.icity_"|"_CUVAR.istate_"|"_CUVAR.izip_"|"_CUVAR.iad1_"|"_CUVAR.iad2_"|"_CUVAR.iad3_"|"
		set INST1099 = INST1099_CUVAR.iname_"|"_CUVAR.ctof1098_"|"_CUVAR.ctof1099_"|"_CUVAR.sbi_"|"_CUVAR.iname2_"|"
		set INST1099 = INST1099_CUVAR.icntry_"|"_CUVAR.contact_"|"_CUVAR.cac_"|"_CUVAR.ctele_"|"_CUVAR.corpid_"|"_CUVAR.cemail
		set INST1099 = INST1099.upperCase()
		
		set INSTVNDR = ""
	
		#IF CUVAR.vname'=""
		set INSTVNDR = CUVAR.vname_"|"_CUVAR.vaddr_"|"_CUVAR.vcity_"|"_CUVAR.vstate_"|"_CUVAR.vzip_"|"
		set INSTVNDR = INSTVNDR_CUVAR.vcname_"|"_CUVAR.vccode_"|"_CUVAR.vphone_"|"_CUVAR.vemail
		set INSTVNDR = INSTVNDR.upperCase()
		#ENDIF
		
		set (BRECCNT,TRECCNT,BDTINCNT,QRECCNT) = 0
		
		for I = 1:1:9,"A","B","C","D","E" set AMT(I) = 0
		
		for I = 1:1:9,"A","B","C","D","E" set BAMT(I) = 0
		
		// Initialize "total amount" array
		for I = 1:1:9,"A","B","C","D","E" set TAMT(I) = 0_"|N/A" 
		
		set (QIPYD,QNBWA) = 0
		
		// Initialize 1042s "total amount" 1042s array
        	set (TIPYD,TNBWA) = 0_"|N/A"
        	
		type RecordUTBLIRS utblirs = Db.getRecord("UTBLIRS", "KEY = :FORM", 1)
  
		// IRS Year-End Reporting Tape Cutoff amount
		set CUTOFF = utblirs.tctoff
	
		// Get correction date if all institutions
		type RecordIRSTPFRM tpfrm = Db.getRecord("IRSTPFRM", "TPLIT = 'TAPE', IRSTPE = :FORM", 1)
		// Last date the form was run
		if %INST = "ALL" set FORMS(FORM) = tpfrm.lstrundt

		if FGRP '= 4,TPRINT do TRECWRT quit:ER

        	if FGRP = 4,TPRINT do T42RECWRT quit:ER
        	
        	// Call the master control section of the compiled IRS procedure code
		do MTRCNTRL quit:ER
		}
		
	quit
	
	
CODE	// COMPILED FORM CODE STARTS HERE

        // Accept "Dead code" warning during runtime of @IRSTAPE
        #ACCEPT Date=10/16/2005;PGM=Eugene Titov;CR=16942
	quit
	
TRECWRT	// "T" record writer

	type public Number ER, RECSEQ, TESTTAPE, YEAR
	type public String INST1099, INSTVNDR, RAC, TINSTEIN
	
	type String REC, X

	//; Literal "T"|1
	set REC = "T"
	//; Payment year|2|5
	set REC = REC_YEAR
	//; Prior Year Data Indicator|6
	set REC = REC_" "
	//; Transmitter's TIN|7|15
	set X = TINSTEIN.translate(" -")
	set REC = REC_"000000000".extract(1,9-X.length())_X
	//; Transmitter Control Code(TCC)|16|20
	set X = CUVAR.tcc
	set REC = REC_(X_"     ").extract(1,5)
	//; Blank|21|22
	set REC = REC_"  "
	//; Blank|23|27
	set REC = REC_"     "
	//; Test File Indicator|28
	if TESTTAPE.get() set REC = REC_"T"
	else  set REC = REC_" "
	//; Foreign Entity Indicator|29
	if (INST1099.piece("|",12) '= "US") set REC = REC_"1"
	else  set REC = REC_" "
	//; Transmitter Name|30|69
	set X = INST1099
	set REC = REC_(X.piece("|",7)_"".justify(40)).extract(1,40)
	//; Transmitter Name(Continuation)|70|109
	set REC = REC_"".justify(40)
	//; Company Name|110|149
	set X = INST1099
	set REC = REC_(X.piece("|",7)_"".justify(40)).extract(1,40)
	//; Company Name(Continuation)|150|189
	set REC = REC_"".justify(40)
	//; Company Mailing Address|190|229
	set X = INST1099
	set REC = REC_(X.piece("|",4)_"".justify(40)).extract(1,40)
	//; Company City|230|269
	set X = INST1099
	set REC = REC_(X.piece("|",1)_"".justify(40)).extract(1,40)
	//; Company State|270|271
	set X = INST1099
	set REC = REC_(X.piece("|",2)_"".justify(2)).extract(1,2)
	//; Company Zip Code|272|280
	set X = INST1099
	set REC = REC_(X.piece("|",3).translate(" -")_"".justify(9)).extract(1,9)
	//; Blank|281|295
	set REC = REC_"               "
	//; Total Number of Payees|296|303
	set REC = REC_"00000000"
	//; Contact Name|304|343
	set X = INST1099
	set REC = REC_(X.piece("|",13)_"".justify(40)).extract(1,40)
	//; Contact's Phone Number&Extension|344|358
	set X = INST1099
	set REC = REC_(X.piece("|",14)_X.piece("|",15)_"".justify(15)).extract(1,15)
	//; Contact E-mail Address|359|408
	set X = INST1099
	set REC = REC_(X.piece("|",17)_"".justify(50)).extract(1,50)
	//; Magnetic Tape File Indicator|409|410
	set REC = REC_"LS"
	//; Transmitter's Media Number|411|416
	set REC = REC_"      "	 
	//; Blank|417|499
	set REC = REC_"".justify(83)
	//; Record Sequence Number|500|507
	set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|508|517
	set REC = REC_"".justify(10)
	//; Vendor Indicator|518
	set REC = REC_"V"	
	//; Vendor Name|519|558
	set X = INSTVNDR
	set REC = REC_(X.piece("|",1)_"".justify(40)).extract(1,40)
	//; Vendor Mailing Address|559|598
	set REC = REC_(X.piece("|",2)_"".justify(40)).extract(1,40)
	//; Vendor City|599|638
	set REC = REC_(X.piece("|",3)_"".justify(40)).extract(1,40)
	//; Vendor State|639|640
	set REC = REC_(X.piece("|",4)_"".justify(2)).extract(1,2)
	//; Vendor ZIP Code|641|649
	set REC = REC_(X.piece("|",5)_"".justify(9)).extract(1,9)
	//; Vendor Contact Name|650|689
	set REC = REC_(X.piece("|",6)_"".justify(40)).extract(1,40)
	//; Vendor Contact Phone Number and Extension|690|704
	set REC = REC_(X.piece("|",7)_X.piece("|",8)_"".justify(15)).extract(1,15)
	//; Blank|705|739
	set REC = REC_"".justify(35)
	//; Blank|740|748
	set REC = REC_"".justify(9)
	//; Blank|749|750
        set REC = REC_"  "
	
	do WRITEREC quit:ER  // Write the "T" record to tape
	
	quit
	
 	
ARECWRT	// "A" record writer

	type public Number AMTIND, ARECCNT, ER, FORMCODE, RECSEQ, YEAR
	type public Boolean STATFLG
	type public String INSTADDR, INSTEIN, LFILIND, TAPEOPT

	type String REC, X

	//; Literal "A"|1
	set REC = "A"
	//; Payment year|2|5
	set REC = REC_YEAR 
	//; Blank|6|11
	set REC = REC_"      "
	//; Payer's federal EIN|12|20
	set X = INSTEIN.translate(" -")
	set REC = REC_"000000000".extract(1,9-X.length())_X
	//; Payer name control|21|24
	set X = CUVAR.payernam.upperCase()
	set REC = REC_(X.piece("|",1)_"".justify(4)).extract(1,4)
	//; Last Filing Indicator|25
	set REC = REC_LFILIND.get().extract(1)
	//; Combined federal/state filer|26
	if STATFLG = 1 set REC = REC_"1"
	else  set REC = REC_" "
	//; Type of return code|27
	set REC = REC_{String}FORMCODE.extract(1)
	//; Amount Codes|28|41
	set REC = REC_(AMTIND_"              ").extract(1,14)
	//; Blank|42|47
	set REC = REC_"      "
	//; Original File Indicator|48
	if TAPEOPT = "O" set REC = REC_1
	else  set REC = REC_" "      
	//; Replacement File Indicator|49
	if TAPEOPT = "R" set REC = REC_1
	else  set REC = REC_" "      
	//; Correction File Indicator|50
	if TAPEOPT = "C" set REC = REC_1
	else  set REC = REC_" "
	//; Blank|51
	set REC = REC_" "
	//; Foreign Entity Indicator|52
	set REC = REC_" "
	//; First payer name|53|92
	set X = INSTADDR
	set REC = REC_(X.piece("|",7)_"".justify(40)).extract(1,40)
	//; Second payer name|93|132
	set REC = REC_"".justify(40)
	//; Transfer agent indicator|133
	set REC = REC_"0"
	//; Payer shipping address|134|173
	set REC = REC_(X.piece("|",4)_" "_X.piece("|",5)_" "_X.piece("|",6)_"".justify(40)).extract(1,40)
	//; Payer City|174|213
	set REC = REC_(X.piece("|",1).extract(1,20)_"".justify(40)).extract(1,40)
	//; Payer State|214|215
	set REC = REC_(X.piece("|",2)_"".justify(2)).extract(1,2)
	//; Payer Zip Code|216|224
	set REC = REC_(X.piece("|",3).translate(" -")_"".justify(9)).extract(1,9)
	//; Institution telephone number|225|239 
	set X = INSTADDR
	set REC = REC_(X.piece("|",9)_"".justify(15)).extract(1,15)
	//; Blank|240|499
	set REC = REC_"".justify(260)
	//; Record Sequence Number|500|507
	set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|508|748
	set REC = REC_"".justify(241)
	//; Blank|749|750
	set REC = REC_"  "

	do WRITEREC quit:ER		// Write the "A" record to tape
	
	set ARECCNT = ARECCNT + 1	// Count the number of "A" records
	
	quit


BRECWRT	// "B" record writer

	type public Number AMT(), BAMT(), BDTINCNT, BRECCNT, CID, ER, RECSEQ, TOTBCNT
	type public Number TRECCNT, YEAR
	type public String ADDR, CITY, CORRTN, LNAME, NAME, SPECIAL, STATE, TAMT(), TIN, FORCNTY
	type public String TINTYPE, ZIP
	
	type String I, REC, X

	//; Literal "B"|1
	set REC = "B"
	//; Payment year|2|5
	set REC = REC_YEAR
	//; Corrected return indicator|6
	set REC = REC_(CORRTN_" ").extract(1)
	//; Name Control|7|10
	if (+TINTYPE > 1) set X = LNAME
	else  set X = NAME
	
	do NAMCNTRL
	
	set REC = REC_(X_"    ").extract(1,4)
	//; Type of TIN|11
	set REC = REC_TINTYPE.extract()
	//; Taxpayer identification number|12|20
	set X = TIN.translate(" -")
	
	do TINCLEAN
	
	if X.isNull() set BDTINCNT = BDTINCNT + 1	// Count the number of bad TINs
	set REC = REC_(X_"         ").extract(1,9)
	//; Payer's account number|21|40
	set REC = REC_{String}CID.justify(20)
	//; Payer's Office Code|41|44
	set REC = REC_"    "
	//; Blank|45|54
	set REC = REC_"          "
	//; Payment amount #1|55|66
	set REC = REC_$select(AMT(1)<0:"-"_(-AMT(1) + 100000000000).extract(2,12),1:(AMT(1) + 1000000000000).extract(2,13))
	//; Payment amount #2|67|78
	set REC = REC_$select(AMT(2)<0:"-"_(-AMT(2) + 100000000000).extract(2,12),1:(AMT(2) + 1000000000000).extract(2,13))
	//; Payment amount #3|79|90
	set REC = REC_$select(AMT(3)<0:"-"_(-AMT(3) + 100000000000).extract(2,12),1:(AMT(3) + 1000000000000).extract(2,13))
	//; Payment amount #4|91|102
	set REC = REC_$select(AMT(4)<0:"-"_(-AMT(4) + 100000000000).extract(2,12),1:(AMT(4) + 1000000000000).extract(2,13))
	//; Payment amount #5|103|114
	set REC = REC_$select(AMT(5)<0:"-"_(-AMT(5) + 100000000000).extract(2,12),1:(AMT(5) + 1000000000000).extract(2,13))
	//; Payment amount #6|115|126
	set REC = REC_$select(AMT(6)<0:"-"_(-AMT(6) + 100000000000).extract(2,12),1:(AMT(6) + 1000000000000).extract(2,13))
	//; Payment amount #7|127|138
	set REC = REC_$select(AMT(7)<0:"-"_(-AMT(7) + 100000000000).extract(2,12),1:(AMT(7) + 1000000000000).extract(2,13))
	//; Payment amount #8|139|150
	set REC = REC_$select(AMT(8)<0:"-"_(-AMT(8) + 100000000000).extract(2,12),1:(AMT(8) + 1000000000000).extract(2,13))
	//; Payment amount #9|151|162
	set REC = REC_$select(AMT(9)<0:"-"_(-AMT(9) + 100000000000).extract(2,12),1:(AMT(9) + 1000000000000).extract(2,13))
	//; Payment amount A|163|174
	set REC = REC_$select(AMT("A")<0:"-"_(-AMT("A") + 100000000000).extract(2,12),1:(AMT("A") + 1000000000000).extract(2,13))
	//; Payment amount B|175|186
	set REC = REC_$select(AMT("B")<0:"-"_(-AMT("B") + 100000000000).extract(2,12),1:(AMT("B") + 1000000000000).extract(2,13))
	//; Payment amount C|187|198
	set REC = REC_$select(AMT("C")<0:"-"_(-AMT("C") + 100000000000).extract(2,12),1:(AMT("C") + 1000000000000).extract(2,13))
	//; Payment amount D|199|210
	set REC = REC_$select(AMT("D")<0:"-"_(-AMT("D") + 100000000000).extract(2,12),1:(AMT("D") + 1000000000000).extract(2,13))
	//; Payment amount E|211|222
	set REC = REC_$select(AMT("E")<0:"-"_(-AMT("E") + 100000000000).extract(2,12),1:(AMT("E") + 1000000000000).extract(2,13))
	//; Reserved|223|246
	set REC = REC_"".justify(24)
	//; Foreign country indicator|247
	set REC = REC_FORCNTY
	//; First Payee name|248|287
	set REC = REC_($$NAMCLEAN(NAME)_"".justify(40)).extract(1,40)
	//; Second Payee name|288|327
	set REC = REC_"".justify(40)
	//; Blank|328|367
	set REC = REC_"".justify(40)
	//; Payee mailing address|368|407
	set ADDR = ADDR.upperCase()
	set REC = REC_(ADDR_"".justify(40)).extract(1,40)
	//; Blank|408|447
	set REC = REC_"".justify(40)
	//; Payee City|448|487
	set CITY = CITY.upperCase()
	set REC = REC_(CITY_"".justify(40)).extract(1,40)
	//; Payee State|488|489
	set REC = REC_(STATE_"".justify(2)).extract(1,2)
	//; Payee Zip Code|490|498
	set REC = REC_(ZIP.translate(" -")_"".justify(9)).extract(1,9)
	//; Blank|499|
	set REC = REC_" "
	//; Record Sequence Number|500|507 
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|508|543
	set REC = REC_"".justify(36)
	//; Special data entries|544|750
	set SPECIAL = SPECIAL.upperCase()
	set REC = REC_(SPECIAL_"".justify(207)).extract(1,207)

	do WRITEREC quit:ER		// Write the "B" record to tape

	set BRECCNT = BRECCNT + 1	// Count the number of "B" records for "C" record
	set TRECCNT = TRECCNT + 1	// Count the number of "B" records for reports
	set TOTBCNT = TOTBCNT + 1	// Total number of Payee "B" records
	
	// Store the control totals
	for I = 1:1:9,"A","B","C","D","E" set BAMT(I) = BAMT(I) + AMT(I)
	for I = 1:1:9,"A","B","C","D","E" set TAMT(I).piece("|",1) = TAMT(I).piece("|",1) + AMT(I)

	quit


CRECWRT	// "C" record writer

	type public Number BAMT(), BRECCNT, ER, RECSEQ
	
	type String I, REC

	//; Literal "C"|1
	set REC = "C"
	//; Number of Payees|2|9
	set REC = REC_(BRECCNT + 100000000).extract(2,9)
	//; Blank|10|15
	set REC = REC_"      "
	//; Control total #1|16|33
	set REC = REC_0_(BAMT(1) + 100000000000000000).extract(2,18)
	//; Control total #2|34|51
	set REC = REC_0_(BAMT(2) + 100000000000000000).extract(2,18)
	//; Control total #3|52|69
	set REC = REC_0_(BAMT(3) + 100000000000000000).extract(2,18)
	//; Control total #4|70|87
	set REC = REC_0_(BAMT(4) + 100000000000000000).extract(2,18)
	//; Control total #5|88|105
	set REC = REC_0_(BAMT(5) + 100000000000000000).extract(2,18)
	//; Control total #6|106|123
	set REC = REC_0_(BAMT(6) + 100000000000000000).extract(2,18)
	//; Control total #7|124|141
	set REC = REC_0_(BAMT(7) + 100000000000000000).extract(2,18)
	//; Control total #8|142|159
	set REC = REC_0_(BAMT(8) + 100000000000000000).extract(2,18)
	//; Control total #9|160|177
	set REC = REC_0_(BAMT(9) + 100000000000000000).extract(2,18)
	//; Control total A|178|195
	set REC = REC_0_(BAMT("A") + 100000000000000000).extract(2,18)
	//; Control total B|196|213
	set REC = REC_0_(BAMT("B") + 100000000000000000).extract(2,18)
	//; Control total C|214|231
	set REC = REC_0_(BAMT("C") + 100000000000000000).extract(2,18)
	//; Control total D|232|249
        set REC = REC_0_(BAMT("D") + 100000000000000000).extract(2,18)
	//; Control total E|250|267
        set REC = REC_0_(BAMT("E") + 100000000000000000).extract(2,18)
	//; Blank|268|499
        set REC = REC_"".justify(232)
	//; Record Sequence Number|500|507
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ 
	//; Blank|508|748
	set REC = REC_"".justify(241) 
	//; Blank|749|750
	set REC = REC_"  "

	do WRITEREC quit:ER		// Write the "C" record to tape
	
	set BRECCNT = 0
	
	for I = 1:1:9,"A","B","C","D","E" set BAMT(I) = 0	// Re- initialize
	
	quit
	
	
KRECWRT	// "K" record writer

	type public Number ER, STID, RECSEQ, STATTOT(,)
	type Number X	
	type String I, REC

	//; Literal "K"|1
	set REC = "K"
	//; Number of Payees|2|9
	set X = (STATTOT(STID) + 100000000)
	set REC = REC_{String}X.extract(2,9)
	//; Blank|10|15
	set REC = REC_"      "
	//; Control total #1|16|33
	set X = (STATTOT(STID,1) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #2|34|51
	set X = (STATTOT(STID,2) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #3|52|69
	set X = (STATTOT(STID,3) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #4|70|87
	set X = (STATTOT(STID,4) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #5|88|105
	set X = (STATTOT(STID,5) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #6|106|123
	set X = (STATTOT(STID,6) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #7|124|141
	set X = (STATTOT(STID,7) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #8|142|159
	set X = (STATTOT(STID,8) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total #9|160|177
	set X = (STATTOT(STID,9) + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total A|178|195
	set X = (STATTOT(STID,"A") + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total B|196|213
	set X = (STATTOT(STID,"B") + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total C|214|231
	set X = (STATTOT(STID,"C") + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total D|232|249
        set X = (STATTOT(STID,"D") + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Control total E|250|267
        set X = (STATTOT(STID,"E") + 100000000000000000)
	set REC = REC_0_{String}X.extract(2,18)
	//; Blank|268|499
        set REC = REC_"".justify(232)
	//; Record Sequence Number|500|507
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ 
	//; Blank|508|706
	set REC = REC_"".justify(199) 
	//; Blank|707|724
	if STATTOT(STID,13) '= 0 do {
		set X = (STATTOT(STID,"E") + 100000000000000000)
		set REC = REC_0_{String}X.extract(2,18)
	}
	else  set REC = REC_"".justify(18)
	//; Local Income Tax Withheld Total|725|742
	set REC = REC_"".justify(18)
	//; Blank|743|746
	set REC = REC_"".justify(4)
	//; Combined Federal/State Code|747|748
	set REC = REC_"00".extract(1,2-{String}STID.length())_STID
	//; Blank|749|750
	set REC = REC_"  "	
	
	do WRITEREC quit:ER		// Write the "K" record to tape
	
	quit


FRECWRT	// "F" record writer

	type public Number ARECCNT, ER, RECSEQ, TOTBCNT
	
	type String REC

	//; Literal "F"|1
	set REC = "F"
	//; Number of "A" records|2|9
	set REC = REC_(ARECCNT + 100000000).extract(2,9)
	//; Zero|10|30
	set REC = REC_"000000000000000000000"
	//; Blank|31|49
	set REC = REC_"".justify(19)
	//; Total Number of Payees "B"|50|57
        set REC = REC_"00000000".extract(1,8-{String}TOTBCNT.length())_TOTBCNT	
	//; Blank|58|499
	set REC = REC_"".justify(442)
	//; Record Sequence Number|500|507
	set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|508|748
	set REC = REC_"".justify(241)
	//; Blank|749|750
	set REC = REC_"  "

	do WRITEREC quit:ER		// Write the "F" record
	
	quit
	

T42RECWRT	// "T" record writer

	type public Number ER, RECSEQ, TESTTAPE, YEAR
	type public String INST1099, TCC, TINSTEIN
	
	type String REC, X

	//; Literal "T"|1
        set REC = "T"
	//; Payment year|2|5
        set REC = REC_YEAR
	//; Transmitter's TIN|6|14
        set X = TINSTEIN.translate(" -")
        set REC = REC_"000000000".extract(1,9-X.length())_X
	//; Transmitter Name|15|54
        set X = INST1099
        set REC = REC_(X.piece("|",7)_"".justify(40)).extract(1,40)
	//; Transmitter Address|55|94
        set X = INST1099
        set REC = REC_(X.piece("|",4)_"".justify(40)).extract(1,40)
	//; City|95|114
        set X = INST1099
        set REC = REC_(X.piece("|",1)_"".justify(20)).extract(1,20)
	//; State Code|115|116
        set X = INST1099
        set REC = REC_(X.piece("|",2)_"".justify(2)).extract(1,2)
	//; Province Code (required if country is "CA")|117|118
        set X = INST1099
        if X.piece("|",12) = "CA" set REC = REC_(X.piece("|",2)_"".justify(2)).extract(1,2)
        else  set REC = REC_"".justify(2)
	//; Country Code (foreign)|119|120
        set X = INST1099
        if X.piece("|",12) = "US" set REC = REC_"  "
        else  set REC = REC_(X.piece("|",12)_"".justify(2)).extract(1,2)
	//; Zip Code|121|129
        set X = INST1099
        set REC = REC_((X.piece("|",3).translate(" -")_"0000")_"".justify(9)).extract(1,9)
	//; Contact name|130|169
        set X = INST1099
        set REC = REC_(X.piece("|",13)_"".justify(40)).extract(1,40)
	//; Contact Telephone Number|170|189
        set X = INST1099
        set REC = REC_(X.piece("|",14)_X.piece("|",15)_"".justify(20)).extract(1,20)
	//; Transmitter Control Code(TCC)|190|194
        set X = TCC.get()
        set REC = REC_(X_"     ").extract(1,5)
	//; Test File Indicator|195|198
        if TESTTAPE.get() set REC = REC_"TEST"
        else  set REC = REC_"".justify(4)
	//; Prior Year Indicator (not currently supported) |199|199
        set REC = REC_"".justify(1)
	//; Reserved|200|770
        set REC = REC_"".justify(571)
	//; Record Sequence Number |771|778
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|799|780

        do WRIT1042 quit:ER		// Write the "T42" record to tape
        
        quit
        

QRECWRT	// "Q" record writer

	type public Number BDTINCNT, BWPCT, CID, ER, IPYD, NBWA, QIPYD, QNBWA, QRECCNT
	type public Number RECSEQ, TRECCNT
	type public String ADDR, CITY, CNTRY, CNTRYC, CNTRYN, CORRTN, INC, NAME, RCODE
	type public String STATE, TIN, TINTYPE, TIPYD, TNBWA, WHEXR, X, ZIP
	
	type String REC

	//; Literal "Q"|1
        set REC = "Q"
	//; Return type Indicator|2
        set REC = REC_CORRTN
	//; Pro Rata Basis Reporting|3
        set REC = REC_"0"
	//; Income Code|4|5
        set REC = REC_(INC_"".justify(2)).extract(1,2)
	//; Gross Income|6|17
        set REC = REC_$select(IPYD<0:"-"_(IPYD + 100000000000).extract(2,12),1:(IPYD + 1000000000000).extract(2,13))
	//; Foreign Student Withholding Allowance Amount|18|29
        set REC = REC_"".justify(12)
	//; Net Income Amount|30|41
        set REC = REC_"".justify(12)
	//; Tax Rate|42|45
        set REC = REC_((BWPCT*100) + 10000).extract(2,5)
	//; Exemption Code|46|47
        if BWPCT = 0 set REC = REC_"0"_(WHEXR_"".justify(1)).extract(1,1)
        else  if (BWPCT>0),(BWPCT'>30) set REC = REC_"00"
        else  if BWPCT>30 set REC = REC_"  "
	//; U.S. Federal Tax Withheld|48|59
        set REC = REC_$select(NBWA<0:"-"_(-NBWA + 100000000000).extract(2,12),1:(NBWA + 1000000000000).extract(2,13))
	//; Amount Repaid|60|71
        set REC = REC_"".justify(12)
	//; Account number|72|91
        set REC = REC_(CID_"".justify(20)).extract(1,20)
	//; Recipient Code|92|93
        set REC = REC_(RCODE_"".justify(2)).extract(1,2)
	//; Recipient's Name Line One|94|133
        set REC = REC_($$NAMCLEAN(NAME)_"".justify(40)).extract(1,40)
	//; Recipient's Name Line Two|134|173
        set REC = REC_"".justify(40)
	//; Recipient's Name Line Three|174|213
        set REC = REC_"".justify(40)
	//; Recipient Street Line One|214|253
        set ADDR = ADDR.upperCase()
        set REC = REC_(ADDR.piece("|",5)_"".justify(40)).extract(1,40)
	//; Recipient Street Line Two|254|293
        set REC = REC_(ADDR.piece("|",6)_" "_ADDR.piece("|",7)_"".justify(40)).extract(1,40)
	//; Recipient's City|294|333
        set CITY = CITY.upperCase()
        set REC = REC_(CITY_"".justify(40)).extract(1,40)
	//; Recipient's State|334|335
        if CNTRY = "US" set REC = REC_(STATE_"".justify(2)).extract(1,2)
        else  set REC = REC_"".justify(2)
	//; Recipient's Province Code|336|337
        if CNTRY = "CA" set REC = REC_(STATE_"".justify(2)).extract(1,2)
        else  set REC = REC_"  "
	//; Country Code|338|339
        if CNTRYC = "US" set REC = REC_"".justify(2)
        else  set REC = REC_(CNTRYC_"".justify(2)).extract(1,2)
	//; Postal Code|340|348
        set REC = REC_(ZIP.translate(" -")_"000000000").extract(1,9)
	//; Recipient identification number|349|357
        set X = TIN.translate(" -")
        
        do TINCLEAN
        
        if X.isNull() set BDTINCNT = BDTINCNT + 1	// Count the number of bad TINs
        
        set REC = REC_(X_"         ").extract(1,9)
	//; Type of TIN|358
        set REC = REC_TINTYPE.extract()
	//; Recipient's Country of Residence for tax purposes|359|398
        set REC = REC_(CNTRYN_"".justify(40)).extract(1,40)
	//; Country Code|399|400
        set REC = REC_(CNTRYC_"".justify(2)).extract(1,2)
	//; NQI/FLW-THR Name - Line One|401|440
        set REC = REC_"".justify(40)
	//; NQI/FLW-THR Name - Line Two|441|480
        set REC = REC_"".justify(40)
	//; NQI/FLW-THR Name - Line Three|481|520
        set REC = REC_"".justify(40)
	//; Reserved|521|522
        set REC = REC_"".justify(2)
	//; NQI/FLW-THR Street - Line One|523|562
        set REC = REC_"".justify(40)
	//; NQI/FLW-THR Street - Line Two|563|602
        set REC = REC_"".justify(40)
	//; NQI/FLW-THR City|603|642
        set REC = REC_"".justify(40)
	//; Reserved|643|644
        set REC = REC_"".justify(2)
	//; NQI/FLW-THR Province Code|645|646
        set REC = REC_"".justify(2)
	//; NQI/FLW-THR Country Code|647|648
        set REC = REC_"".justify(2)
	//; NQI/FLW-THR Postal Code|649|657
        set REC = REC_"".justify(9)
	//; NQI/FLW-THR U.S. TIN|658|666
        set REC = REC_"".justify(9)
	//; Payer's Name |667|706
        set REC = REC_"".justify(40)
	//; Payer's U.S. TIN|707|715
        set REC = REC_"".justify(9)
	//; State Income Tax Withheld|716|727
        set REC = REC_"".justify(12)
	//; Payer's State Tax Number|728|737
        set REC = REC_"".justify(10)
	//; State Code |738|739
        set REC = REC_"".justify(2)
	//; Special Data Entries|740|760|
        set REC = REC_"".justify(21)
	//; Reserved |761|770
        set REC = REC_"".justify(10)
	//; Record Sequence Number |771|778
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blanks|779|800

        do WRIT1042 quit:ER		// Write the "Q" record to tape
        
        set QRECCNT = QRECCNT + 1	// Count the number of "Q" records for "C" record

        set TRECCNT = TRECCNT + 1	// Count the number of "Q" records for reports

        set QIPYD = QIPYD + IPYD	// Store the control totals

        set QNBWA = QNBWA + NBWA	// Store the control totals

        set TIPYD.piece("|",1) = TIPYD.piece("|",1) + QIPYD 	// Store the control totals

        set TNBWA.piece("|",1) = TNBWA.piece("|",1) + QNBWA 	// Store the control totals

        quit


WRECWRT	// "W" record writer

	type public Number ER, RECSEQ, WRECCNT, YEAR
	type public String CORRTN, INST1099, INSTADDR, INSTEIN, LFILIND
	
	type Number IND, WEIN
	type String REC, X

	//; Literal "W"|1
        set REC = "W"
	//; Return type Indicator|2
        set REC = REC_CORRTN
	//; Pro Rata Basis Reporting|3
        set REC = REC_"0"
	//; Withholding Agent's EIN|4|12
        set X = INSTADDR
        set WEIN = INSTEIN.translate(" -")
        set REC = REC_"000000000".extract(1,9-{String}WEIN.length())_WEIN
	//; Withholding Agent's EIN Indicator|13
        // Non US is NQI-EIN  report 2
        if (X.piece("|",8) '= "US") set IND = 2
	// US, and EIN falls between 98-0234988 and 98-0334987 (US format is numeric 
	// and dashes only) US QI-EIN  report 1
	else  if (WEIN.extract(1,2) = 98)&(WEIN.extract(3,99)>234988)&(WEIN.extract(3,99)<334988) set IND = 1
        // US EIN  report 0
        else  set IND = 0
        set REC = REC_IND
	//; Agent's Name Line One|14|53
        set REC = REC_(X.piece("|",7)_"".justify(40)).extract(1,40)
	//; Agent's Name Line Two|54|93
        set REC = REC_"".justify(40)
	//; Agent's Name Line Three|94|133
        set REC = REC_"".justify(40)
	//; Agent's Street Line One|134|173
        set REC = REC_(X.piece("|",4)_"".justify(40)).extract(1,40)
	//; Agent's Street Line Two|174|213
        set REC = REC_(X.piece("|",5)_" "_X.piece("|",6)_"".justify(40)).extract(1,40)
	//; Agent's City|214|253
        set REC = REC_(X.piece("|",1)_"".justify(40)).extract(1,40)
	//; Agent's State|254|255
        set REC = REC_(X.piece("|",2)_"".justify(2)).extract(1,2)
	//; Province Code (required if country is "CA")|256|257
        if X.piece("|",8) = "CA" set REC = REC_(X.piece("|",2)_"".justify(2)).extract(1,2)
        else  set REC = REC_"  "
	//; Country Code (foreign)|258|259
        if X.piece("|",8) = "US" set REC = REC_"  "
        else  set REC = REC_(X.piece("|",8)_"".justify(2)).extract(1,2)
	//; Agent's Zip Code|260|268
        set REC = REC_(X.piece("|",3).translate(" -")_"000000000").extract(1,9)
	//; Tax Year|269|272
        set REC = REC_YEAR
	//; Withholding Agent's Phone Number and Extension|273|292
        set X = INST1099
        set REC = REC_(X.piece("|",14)_X.piece("|",15)_"".justify(20)).extract(1,20)
	//; Final Return Indicator|293
        set REC = REC_LFILIND.get().extract(1)
	//; Reserved|294|770
        set REC = REC_"".justify(477)
	//; Record Sequence Number |771|778
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|779|780

        do WRIT1042 quit:ER		// Write the "W" record
        
        set WRECCNT = WRECCNT + 1	// Count the number of "W" records for "F" record

        quit


C42RECWRT	// "C" record writer, 1042

	type public Number ER, QIPYD, QNBWA, QRECCNT, RECSEQ
	
	type String REC

	//; Literal "C"|1
        set REC = "C"
	//; Total "Q" Records|2|9
        set REC = REC_(QRECCNT + 100000000).extract(2,9)
	//; Reserved |10|15
        set REC = REC_"".justify(6)
	//; Total Gross Amount Paid|16|30
        set REC = REC_0_(QIPYD + 100000000000000).extract(2,15)
	//; Total U.S. Tax Withheld|31|45
        set REC = REC_0_(QNBWA + 100000000000000).extract(2,15)
	//; Reserved|46|770
        set REC = REC_"".justify(725)
	//; Record Sequence Number |771|778
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|779|780

        do WRIT1042 quit:ER		// Write the "C" record to tape

        set (QIPYD,QNBWA,QRECCNT) = 0	// Re-initialize 1042s
        
        quit
        
        
F42RECWRT	// "Y" record writer

	type public Number ER, RECSEQ, REEL, WRECCNT
	
	type String REC

	//; Literal "F"|1
        set REC = "F"
	//; Withholding Agent Count|2|4
        set REC = REC_(WRECCNT + 1000).extract(2,4)
	//; Reel Count|5|7
        set REC = REC_(REEL + 1000).extract(2,4)
	//; Reserved|8|770
        set REC = REC_"".justify(763)
	//; Record Sequence Number |771|778
        set REC = REC_"00000000".extract(1,8-{String}RECSEQ.length())_RECSEQ
	//; Blank|779|780

        do WRIT1042 quit:ER		// Write the "F" record, form 1042
        
        quit
        
        
STORETOT	// Store the totals section

	type public Number BDTINCNT, FAMT(), FCNT, OPT, SRT, TAPESEQ, TRECCNT
	type public String BRREG, FORM, FORMLIST, INSTNAM, TAMT(), TAPEOPT, TIPYD, TNBWA
	
	type Number PC, FSEQ
	type String CNT, VAR, Z

	// Store tax form reports totals to the IRS Form Totals tables (IRSFTR, IRSFTR1)
	if (TAPEOPT '= "C") do {
	
		set FSEQ = Db.nextVal("IRSFTR")
		
		type RecordIRSFTR irsftr = Class.new("RecordIRSFTR")		
		set irsftr.fseq = FSEQ
		set irsftr.dater = %SystemDate
			
		do irsftr.save()
		
		type RecordIRSFTR1 irsftr1 = Class.new("RecordIRSFTR1")		
		set irsftr1.fseq = FSEQ
		set irsftr1.inst = CUVAR.sbinstno
		set irsftr1.form = FORM		
		set irsftr1.cnt = FCNT
			
		for CNT = 1:1:9,"A","B","C",13,"D","E","MIL" set VAR = "AMT"_CNT,irsftr1.@VAR = FAMT(CNT)
			
		do irsftr1.save()
		}

	// Record the last run date in IRSTPFRM table
	if (OPT = 1)!(OPT = 4) do {
		
		type RecordIRSTPFRM irstpfrm = Db.getRecord("IRSTPFRM", "TPLIT = 'TAPE', IRSTPE = :FORM", 1)
		set irstpfrm.lstrundt = %SystemDate
		
		do irstpfrm.save()
		}

	// Store totals to IRS Tape Transmittal tables (IRSCTTR, IRSCTTR1)
	
	type RecordIRSCTTR ttr = Db.getRecord("IRSCTTR", "TSEQ = :TAPESEQ", 1)

	if 'ttr.getMode() do {
	
		set ttr.dater = %SystemDate
		set ttr.opt = OPT
		set ttr.forms = FORMLIST
		
		do ttr.save()
		}

	type RecordIRSCTTR1 ttr1 = Class.new("RecordIRSCTTR1")
	set ttr1.tseq = TAPESEQ
	set ttr1.inst = $select(SRT:INSTNAM_"_"_BRREG.get(),1:INSTNAM)
	set ttr1.form = FORM
	set ttr1.totrec = TRECCNT
	set ttr1.badtin = BDTINCNT

	set Z = ""
	
	for CNT = 1:1:9,"A","B","C","D","E" if TAMT(CNT).piece("|",2)'["N/A" do {
	
		if Z.isNull() set Z = CNT_"|"_$$^SCARND(TAMT(CNT).piece("|",1)/100,0,"","",2)_"|"_TAMT(CNT).piece("|",2)
		
		else  set Z = Z_"|"_CNT_"|"_$$^SCARND(TAMT(CNT).piece("|",1)/100,0,"","",2)_"|"_TAMT(CNT).piece("|",2)
		}

	set:TIPYD.piece("|",2)'["N/A" Z = "1|"_$$^SCARND(TIPYD.piece("|",1)/100,0,"","",2)_"|"_TIPYD.piece("|",2)
        set:TNBWA.piece("|",2)'["N/A" Z = Z_"|2|"_$$^SCARND(TNBWA.piece("|",1)/100,0,"","",2)_"|"_TNBWA.piece("|",2)	

	set PC = 1
	for CNT = 1:1:11 quit:Z.piece("|",PC).isNull()  do {
		
		set VAR = "FLDNUM"_CNT
		set ttr1.@VAR = Z.piece("|",PC)
		
		set VAR = "FLDAMT"_CNT
		set ttr1.@VAR = Z.piece("|",PC+1)
		
		set VAR = "FLDDSC"_CNT
		set ttr1.@VAR = Z.piece("|",PC+2).extract(1,35)
		
		set PC = PC + 3
		}

	do ttr1.save()

	set (TRECCNT,BDTINCNT) = 0
	
	for CNT = 1:1:9,"A","B","C","D","E" set TAMT(CNT) = 0_"|N/A"
	
	set TIPYD = 0_"|N/A"
        set TNBWA = 0_"|N/A"
        
	quit
	

public	NAMCNTRL	// Name control generator

	type public String TINTYPE, X
	
	type Boolean FIRST = 0
	type Number I
	type String LN, P, PLCNAM, SECLNAM, V

	if 'X.exists() quit
	
	set X = X.upperCase()
	
	if TINTYPE = 2 set LN = X do TRIM quit
	
	set LN = ""
	
	do FIND
	
	if FIRST do TRIM quit
	
	set V = LN
	
	for I = 2:1 set P = V.piece(" ",I) if P.isNull() quit
	
	if (V.piece(",",1) '= V) set V = V.piece(",",1) for I = 2:1 set P = V.piece(" ",I) if P.isNull() quit  

	if (V.piece(" AND ",1) '= V) set V = V.piece(" AND ",1),LN = "" for I = 2:1 set P = V.piece(" ",I) if P.isNull() quit  

	if (V.piece(" THE ",1) '= V) set V = V.piece(" THE ",1),LN = "" for I = 2:1 set P = V.piece(" ",I) if P.isNull() quit  

	set LN = ""
	
	// Make sure the name isn't only first and last name
	set PLCNAM = V.piece(" ",I-3)
	
	// Get second name from the end
	set SECLNAM = V.piece(" ",I-2)
	
	// If there is a middle name, check to see if it's a two-word last name
	if 'PLCNAM.isNull() do {
	
		if (SECLNAM = "DALLA")!(SECLNAM = "DE")!(SECLNAM = "DELLA")!(SECLNAM = "DEN") set LN = V.piece(" ",I-2)
		if (SECLNAM = "HEERMANN")!(SECLNAM = "HEIDEMANN")!(SECLNAM = "JESSOP")!(SECLNAM = "KIMBALL") set LN = V.piece(" ",I-2)
		if (SECLNAM = "O")!(SECLNAM = "REINHARDT")!(SECLNAM = "ROBINETTE")!(SECLNAM = "ROBINSON") set LN = V.piece(" ",I-2)
		if (SECLNAM = "SCHAPER")!(SECLNAM = "ST")!(SECLNAM = "STRONG")!(SECLNAM = "STUPPY")!(SECLNAM = "TEN") set LN = V.piece(" ",I-2)
		if (SECLNAM = "VAN")!(SECLNAM = "VER")!(SECLNAM = "VON") set LN = V.piece(" ",I-2)
		if SECLNAM = "DYN" set LN = "VAN DYN"
		
		if SECLNAM = "LA" do {
		
			if V.piece(" ",I-1) = "DASSOR" set LN = "DASSOR"
			else  set LN = V.piece(" ",I-2)
			}
		}
	
	set LN = LN_V.piece(" ",I-1)
	
	if LN.isNull() set LN = V
	
	do TRIM
	
	quit
	
	
TRIM	

	type public String LN, X
	
	type Number I

	set X = "" 
	
	for I = 1:1 set:LN.extract(I)'?1P!(LN.extract(I) = "&")!(LN.extract(I) = "-") X = X_LN.extract(I) quit:(X.length() = 4)!(LN.extract(I).isNull())
	
	quit
	

FIND	

	type public Boolean FIRST
	type public String LN, TINTYPE, X
	
	type Number I

	// Only remove THE if more than two words
	if X.piece(" ",1) = "THE",(X.piece(" ",3).isNull()) set LN = X,FIRST = 1 quit
	
	if TINTYPE.get() = 1,(X.piece(",",1) = X),(X.piece(" AND ",1) = X),(X'["ESTATE") set FIRST = 1

	set LN = "" for I = 1:1 quit:X.piece(" ",I).isNull()  do {
		 
		if (I '= 1),(X'["TRUST"),("/THE/"[("/"_X.piece(" ",I)_"/")) set LN = LN_" "_X.piece(" ",I) quit

		if "/THE/&/INC./TRUST/FUND/UNION/UNION,/"[("/"_X.piece(" ",I)_"/") set FIRST = 1

		if "/DBA/INC./THE/TRUST/FUND/UNION/FBO/ESTATE/TR./TR. FOR/JR./SR./3RD./TRS/SR/FOR/TR/CUST/TR FOR/CUSTODIAN FOR/ITF/111/3RD/TRUST/TRUST FOR/SENIOR/JUNIOR/OR/JR/PHD/ESQ/II/III/IV/MD/DDM/DMD/"'[("/"_X.piece(" ",I)_"/") set LN = LN_" "_X.piece(" ",I)
		}

	quit
	

TINCLEAN	// TIN cleaner

	type public String X
	
	type Number I
	type String T, Z

	if 'X.exists()!X.isNull() quit
	
	set T = "" 
	for I = 1:1 set Z = X.piece("-",I) quit:Z.isNull()  set T = T_Z
	
	if +T = 0 set X = "" quit
	
	if T'?9N set X = "" quit
	
	set X = T
	
	quit
	

NAMCLEAN(A)	// NAME cleaner

	type Number CNT
	type String CLNAM = ""

	if A.get().isNull() quit ""	
	
	set A = A.upperCase()
	
	if (A.piece(" ",1)="MR")!(A.piece(" ",1)="MRS")!(A.piece(" ",1)="DR")!(A.piece(" ",1)="DR.")!(A.piece(" ",1)="MRS.")!(A.piece(" ",1)="MR.")!(A.piece(" ",1)="TR.")!(A.piece(" ",1)="TR")!(A.piece(" ",1)="JR.")!(A.piece(" ",1)="JR")!(A.piece(" ",1)="SR")!(A.piece(" ",1)="SENIOR")!(A.piece(" ",1)="JUNIOR")!(A.piece(" ",1)="SR.") set A.piece(" ",1)=""

	if A.extract(1) = " " set A.extract(1) = ""

	for CNT = 1:1:A.length() if (A.extract(CNT)?1A)!("&, ,-"[A.extract(CNT)) set CLNAM = CLNAM_A.extract(CNT)

	quit CLNAM
	

WRIT1042	// Write 1042 records to tape

	type public Number RECSEQ, ER
	type public String ET, MODE, REC, TDRV

        if (REC.length() '= 778) set ET = "Invalid record length",ER = 1 do ERR^IRSTAPE quit

        if MODE = "T" do {
        	
        	use TDRV write REC,"  "

        	if '$$EOT^%ZUSE(TDRV) quit	// Check for end-of-tape
        	
        	do DISMOUNT^IRSTAPE	// Dismount the tape drive
        	
        	do MOUNT^IRSTAPE	// Initialize, mount and open the output device
        	}

        if MODE = "R" use TDRV write REC,$C(13),!

        set RECSEQ = RECSEQ + 1

        quit
        

WRITEREC	// Write a record to tape

	type public Number RECSEQ, ER
	type public String ET, MODE, REC, TDRV

	if (REC.length() '= 750) set ET = "Invalid record length",ER = 1 do ERR^IRSTAPE quit

	if MODE = "T" do {
		
		use TDRV write REC

		if '$$EOT^%ZUSE(TDRV) quit	// Check for end-of-tape
		
		do DISMOUNT^IRSTAPE	// Dismount the tape drive
		
		do MOUNT^IRSTAPE	// Initialize, mount and open the output device
		}

	if MODE = "R" use TDRV write REC,!

	set RECSEQ = RECSEQ + 1		// Increment Record Sequence Number

	quit
	
	
%STOPLOD	// Stop %ZRTNLOD from this point on down
	quit
MTRCNTRL	// Dummy line reference for GT.M
	quit

vSIG()	quit "60528^28552^P.R. Swarnalatha^41680"	// Signature - LTD^TIME^USER^SIZE
