YEXPFL(RecordYFEEEXP yfeeexp, String vpar, Boolean vparNorm) // YFEEEXP - Service Fee Exemption Plan Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	// Trigger Definition (4)                      08/27/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = yfeeexp.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(yfeeexp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(yfeeexp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String PLAN = yfeeexp.plan
	type String EFD = yfeeexp.efd

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PLAN").exists()!vx("EFD").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("YFEEEXP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("YFEEEXP","PLAN = :yfeeexp.plan and EFD = :yfeeexp.efd") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PLAN
	type public String EFD

	type RecordYFEEEXP yfeeexp = Db.getRecord("YFEEEXP","PLAN=:PLAN,EFD=:EFD")
	if (%ProcessMode = 2) do {
		do yfeeexp.setMode(2)

		do YEXPFL(yfeeexp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordYFEEEXP yfeeexp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("YFEEEXP","PLAN = :yfeeexp.plan and EFD = :yfeeexp.efd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(yfeeexp)) S ^UTBL("YFEEEXP",vobj(yfeeexp,-3),vobj(yfeeexp,-4))=vobj(yfeeexp)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordYFEEEXP yfeeexp

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("YFEEEXP",vobj(yfeeexp,-3),vobj(yfeeexp,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordYFEEEXP yfeeexp

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordYFEEEXP yfeeexp

	if yfeeexp.plan.isNull() do vreqerr("PLAN") quit
	if yfeeexp.efd.isNull() do vreqerr("EFD") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("YFEEEXP","MSG",1767,"YFEEEXP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("FRITSB").exists()!vx("FEBAL").exists()!vx("MOC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RCTG").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Exemption Plan

	type public RecordYFEEEXP yfeeexp
	// Delete Exemption Plan fee Schedule
	do Db.delete("UTBLFEESCH","FEESCH=:PLAN AND FEESCHDT=:EFD")
	
	// Delete Exemption Plan Fee Schedule Data
	do Db.delete("UTBLFEESCH1","FEESCH=:PLAN AND FEESCHDT=:EFD AND TL=1")
	quit
	

vai1 // Trigger AFTER_INSERT - After Insert Exemption Plan

	type public RecordYFEEEXP yfeeexp
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
	----------------------------------------------------------------------
	*/

	if '(%ProcessMode=2) do { quit:ER 
		// Create Fee Schedule
		new XPGM,XDESC,XFEESCH,XFEESCHDT
		set XFEESCHDT=yfeeexp.efd
		set XFEESCH=yfeeexp.plan
		set XPGM=$C(94)_"YFEEEXP1("""_yfeeexp.plan_""")"
		
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='YFEEEXP',DI='PLAN'", 1)
		
		set XDESC=dbtbl1d.des_" "_yfeeexp.plan
		
		type RecordUTBLFEESCH feesch = Class.new("RecordUTBLFEESCH", "FEESCH=:XFEESCH,FEESCHDT=:XFEESCHDT")
		set feesch.pgmlnk = XPGM
		set feesch.desc = XDESC
		set feesch.schtyp = 0
		set feesch.tier = 1
		
		do feesch.save()
		
		// Create Fee Schedule Data
		type RecordUTBLFEESCH1 feesch1 = Class.new("RecordUTBLFEESCH1", "FEESCH=:XFEESCH,FEESCHDT=:XFEESCHDT,TL=1")
		set feesch1.fa = 0
		set feesch1.baseamt = 0
		
		do feesch1.save()
	}
	
	// Free Item Basis should be $ amount or "PERIOD"
	if yfeeexp.fritsb'="" do { quit:ER 
		if yfeeexp.fritsb?.N quit 
		if yfeeexp.fritsb="PERIOD" quit
		
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='YFEEEXP',DI='FRITSB'", 1)
		
		do Runtime.setErrMSG("YFEEEXP",8316,dbtbl1d.des) quit:ER 
	}
	
	// Invalid Balance Base.
	if +yfeeexp.balb=0,(yfeeexp.febal+yfeeexp.fritsb'=0) do { quit:ER
	
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='YFEEEXP',DI='BALB'", 1)
	
		do Runtime.setErrMSG("YFEEEXP",8316, dbtbl1d.des) quit:ER 
	}
	
	/*
	   Method of Calculation
	   Calculation method of 1 (item count) and free item basis (period)
	   can not be used together
	*/

	if yfeeexp.moc=1,yfeeexp.fritsb="PERIOD" do Runtime.setErrMSG("YFEEEXP",2742) quit:ER 
	
	// Reduced Transaction Group
	if yfeeexp.rctg'="" do { quit:ER 
		new XRCTG
		set XRCTG=yfeeexp.rctg
		// Transaction group cannnot be the exemption plan name
		if yfeeexp.rctg=yfeeexp.plan do Runtime.setErrMSG("YFEEEXP",2738) quit:ER 
		// Transaction group not defined
		new rs 
		type ResultSet rs=Db.select("TRNGRPDT","UTBLTRNGRPT","TRNGRP=:XRCTG AND TRNGRPDT<=:EFD")
		if rs.isEmpty() do Runtime.setErrMSG("YFEEEXP",2719,yfeeexp.rctg) quit:ER 
		}
	quit

vau1 // Trigger AU_FRITSB - After Update Free Item Basis

	type public RecordYFEEEXP yfeeexp
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
		   
		   Removed old revision history.
	----------------------------------------------------------------------
	*/

	// Free Item Basis should be $ amount or "PERIOD"
	if yfeeexp.fritsb'="" do { quit:ER 
		if yfeeexp.fritsb?.N quit 
		if yfeeexp.fritsb="PERIOD" quit
		
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='YFEEEXP',DI='FRITSB'", 1)
		
		do Runtime.setErrMSG("YFEEEXP",8316,dbtbl1d.des) quit:ER 
	}
	
	// Invalid Balance Base.
	if +yfeeexp.balb=0,(yfeeexp.febal+yfeeexp.fritsb'=0) do {
	
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID='YFEEEXP',DI='BALB'", 1)
	
		do Runtime.setErrMSG("YFEEEXP",8316, dbtbl1d.des) quit:ER 
	}
	
	/*
	   Method of Calculation
	   Calculation method of 1 (item count) and free item basis (period)
	   can not be used together
	*/

	if yfeeexp.moc=1,yfeeexp.fritsb="PERIOD" do Runtime.setErrMSG("YFEEEXP",2742) quit:ER 
	quit

vau2 // Trigger AU_RCTG - After Update Reduced Tran Group

	type public RecordYFEEEXP yfeeexp
	// Reduced Transaction Group
	if yfeeexp.rctg'="" do { quit:ER 
		new XRCTG
		set XRCTG=yfeeexp.rctg

		// Transaction group cannot be the exemption plan name
		if yfeeexp.rctg=yfeeexp.plan do Runtime.setErrMSG("YFEEEXP",2738) quit:ER 

		// Transaction group not defined
		new rs
		type ResultSet rs=Db.select("TRNGRPDT","UTBLTRNGRPT","TRNGRP=:XRCTG AND TRNGRPDT<=:EFD")
		if rs.isEmpty() do Runtime.setErrMSG("YFEEEXP",2719,yfeeexp.rctg) quit:ER 
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordYFEEEXP yfeeexp

	if yfeeexp.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = yfeeexp.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = yfeeexp.balb if 'X.isNull(),'Db.isDefined("STBLFEEFB","X") set vRM = $$^MSG(1485,X) do vdderr("BALB", vRM) quit
	set X = yfeeexp.febal if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"YFEEEXP.FEBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = yfeeexp.frits if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FRITS", vRM) quit
	if yfeeexp.fritsb.length()>9 set vRM = $$^MSG(1076,9) do vdderr("FRITSB", vRM) quit
	set X = yfeeexp.moc if 'X.isNull(),'Db.isDefined("STBLEXPMOC","X") set vRM = $$^MSG(1485,X) do vdderr("MOC", vRM) quit
	if yfeeexp.rctg.length()>8 set vRM = $$^MSG(1076,8) do vdderr("RCTG", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("YFEEEXP","MSG",979,"YFEEEXP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordYFEEEXP yfeeexp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("PLAN").exists() set vux("PLAN") = vx("PLAN")
	if vx("EFD").exists() set vux("EFD") = vx("EFD")
	do vkey(1) set voldkey = yfeeexp.plan_","_yfeeexp.efd  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = yfeeexp.plan_","_yfeeexp.efd  // Copy new keys into object
	type RecordYFEEEXP vnewrec = yfeeexp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("YFEEEXP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordYFEEEXP yfeeexp

	if vux("PLAN").exists() set yfeeexp.plan = vux("PLAN").piece("|",i)
	if vux("EFD").exists() set yfeeexp.efd = vux("EFD").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordYFEEEXP yfeeexp
	type public String vpar

	do Db.delete("YFEEEXP1","PLAN=:yfeeexp.plan AND EFD=:yfeeexp.efd",vpar) // Cascade delete

	do Db.delete("YFEEEXP3","PLAN=:yfeeexp.plan AND EFD=:yfeeexp.efd",vpar) // Cascade delete

	do Db.delete("YFEEEXP4","PLAN=:yfeeexp.plan AND EFD=:yfeeexp.efd",vpar) // Cascade delete

	quit
