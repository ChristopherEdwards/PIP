RULEFILE(RecordUTBLPRODRL utblprodrl, String vpar, Boolean vparNorm) // UTBLPRODRL - Product Attribute Rule Set Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = utblprodrl.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblprodrl,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblprodrl,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("RULEID").exists() do vkchged quit              // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPRODRL",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPRODRL","RULEID = :utblprodrl.ruleid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String RULEID

	type RecordUTBLPRODRL utblprodrl = Db.getRecord("UTBLPRODRL","RULEID=:RULEID")
	if (%ProcessMode = 2) do {
		do utblprodrl.setMode(2)

		do RULEFILE(utblprodrl,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPRODRL utblprodrl

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPRODRL","RULEID = :utblprodrl.ruleid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrl,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrl,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblprodrl)) S ^UTBL("PRODRL",vobj(utblprodrl,-3))=vobj(utblprodrl)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPRODRL utblprodrl

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrl,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("PRODRL",vobj(utblprodrl,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLPRODRL utblprodrl

	if utblprodrl.marseg.isNull() do vreqerr("MARSEG") quit
	if utblprodrl.segid.isNull() do vreqerr("SEGID") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPRODRL utblprodrl

	if utblprodrl.ruleid.isNull() do vreqerr("RULEID") quit

		if vx("MARSEG").exists(),utblprodrl.marseg.isNull() do vreqerr("MARSEG") quit
		if vx("SEGID").exists(),utblprodrl.segid.isNull() do vreqerr("SEGID") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRL","MSG",1767,"UTBLPRODRL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPRODRL utblprodrl

	set X = utblprodrl.ruleid if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("RULEID", vRM) quit
	if utblprodrl.colnames.length()>200 set vRM = $$^MSG(1076,200) do vdderr("COLNAMES", vRM) quit
	if utblprodrl.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	if utblprodrl.files.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FILES", vRM) quit
	set X = utblprodrl.marseg if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("MARSEG", vRM) quit
	set X = utblprodrl.segid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEGID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRL","MSG",979,"UTBLPRODRL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLPRODRL utblprodrl

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("RULEID")
	set voldkey = vux.piece("|",1),vobj(utblprodrl,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblprodrl,-3) = vnewkey // Copy new keys into object
	type RecordUTBLPRODRL vnewrec = utblprodrl.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPRODRL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utblprodrl,-3) = vux.piece("|",1)             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
