EFTSFPQ //Batch BCHEFTSFPQ - Standing Foreign Payment EOD Processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHEFTSFPQ Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHEFTSFPQ",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID,SEQ) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHEFTSFPQ","*","",CID.get()_","_SEQ.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID,SEQ)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHEFTSFPQ","*","",CID.get()_","_SEQ.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID,SEQ) //
	
	type RecordEFTPAY eftpay = Db.getRecord("EFTPAY", "CID=:CID,SEQ=:SEQ")
					
	// Set up the next record, or expire the SFP
	do SETNXT(.eftpay)
       	
	// Build a single "NDPO" from the parent "NDPOST"
	do BUILD(.eftpay)		       	        		

	quit
		

SETNXT(RecordEFTPAY eftpay)	// EFTPAY record
       
	type public Boolean ER       
	type Date NEXT
	
	set NEXT = %SystemDate.nextFreqDate(eftpay.frequency) quit:ER
	set eftpay.lpdt = %SystemDate
	set eftpay.efttype = "NDPOST"
	
	// If an expiration date is defined, and this SFP has expired
	// then file w/the status "EXP"
	if ('eftpay.expdt.isNull()) , ((NEXT = eftpay.expdt) ! (NEXT > eftpay.expdt)) set eftpay.status ="EXP"
	// Set up the next record based upon the frequency	
	else  set eftpay.procdt = NEXT, eftpay.efd = NEXT
	
	do eftpay.save()
	
	quit
		

BUILD(RecordEFTPAY eftpay)	// EFTPAY record
       
	type public Boolean ER       
	type String REFNO, TEMP

	type RecordEFTPAY eftpaynew = eftpay.copy()		       

	// Set up Transaction Reference Number for this single payment
	set TEMP="EFTPAY|"_eftpaynew.cid_"|"_eftpaynew.seq	
	do ^TRREFNO(2,.REFNO,TEMP) quit:ER

	set eftpaynew.status = "AS"					
	set eftpaynew.efttype = "NDPO"
	
	// Default Payment Method
	type RecordCTBLEFTTYPE efttype = Db.getRecord("CTBLEFTTYPE","KEY='NDPOST'",1)					
	set eftpaynew.met = efttype.paymetdft
		
	set eftpaynew.procdt = %SystemDate					
	set eftpaynew.amttyp = 1
	set eftpaynew.sfpseq = eftpay.seq
	set eftpaynew.refno = REFNO
	
	// Convert account amount to payment amount
	if (eftpaynew.amount.isNull()) do CONVAMT(.eftpaynew) 
	
	// File new single outgoing foreign payment with status "AS"
	// to be "enhanced" via @SFP06.
	set eftpaynew.seq = Db.nextVal("EFTPAY","CID")     

	// Create a new record
	do eftpaynew.setMode(0)
	do eftpaynew.save()
	
	quit	

	
CONVAMT(RecordEFTPAY eftpay)	// EFTPAY record	

	// Convert amount in account's currency to payment currency for NDPO
	
	type public Boolean ER
	type String BSE = ""
	type Number EXCAMT
	
	if (eftpay.ttype = 0) do {
		type RecordACN acn = Db.getRecord("ACN","CID=:eftpay.cid",1)
		set BSE=acn.crcd
		}
		
	if (eftpay.ttype = 3) ! (BSE.isNull()) set BSE = eftpay.crcd
	
	if (BSE '= eftpay.crcd) do { 
		do EXC^CRCDUTL(BSE,eftpay.crcd,eftpay.antamt,1,0,"00",eftpay.ccode) quit:ER
	
		set eftpay.amount = EXCAMT.roundCur(eftpay.crcd)
		}
		
	quit
	
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID,SEQ
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 set SEQ=vRECORD.piece($C(9),2)
 do vPROC(CID,SEQ)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID,SEQ
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+26>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	
	type public Boolean ER
	type public String ET, RM
	
	do SOURCE^BCHSOURC("BOFF","SFP",.%UserID)

	if (ER.get()) set ET=RM.get() set %BatchExit=1 quit

	// Invalid teller ID
	if (%UserID.isNull()) set ER=1,ET=$$^MSG(3533) set %BatchExit=1 quit
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID,SEQ","EFTPAY","PROCDT=:TJD and EFTTYPE='NDPOST' and STATUS='V'")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Boolean ER
	type public String ET, RM

	do SOURCE^BCHSOURC("BOFF","SFP",.%UserID)

	if (ER.get()) set ET=RM.get() set %BatchExit=1 quit

	// Invalid teller ID
	if (%UserID.isNull()) set ER=1,ET=$$^MSG(3533) set %BatchExit=1 quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
