WCALCFL(RecordUTBLWCALC utblwcalc, String vpar, Boolean vparNorm) // UTBLWCALC - Withholding Calculation Method Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (23)             03/15/2007
	// Trigger Definition (2)                      05/10/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblwcalc.getMode()                   // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblwcalc,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblwcalc,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String KEY = utblwcalc.key

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("KEY").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLWCALC",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLWCALC","KEY = :utblwcalc.key") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String KEY

	type RecordUTBLWCALC utblwcalc = Db.getRecord("UTBLWCALC","KEY=:KEY")
	if (%ProcessMode = 2) do {
		do utblwcalc.setMode(2)

		do WCALCFL(utblwcalc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLWCALC utblwcalc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLWCALC","KEY = :utblwcalc.key") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblwcalc,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblwcalc,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblwcalc)) S ^UTBL("WCALC",vobj(utblwcalc,-3))=vobj(utblwcalc)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLWCALC utblwcalc

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblwcalc,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("WCALC",vobj(utblwcalc,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLWCALC utblwcalc

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLWCALC utblwcalc

	if utblwcalc.key.isNull() do vreqerr("KEY") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLWCALC","MSG",1767,"UTBLWCALC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("WHTHRAMT").exists()!vx("WHCALCB").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - W/H Tax Calc Method After Insert Trigger

	type public RecordUTBLWCALC utblwcalc
	/*

	------- Revision History --------------------------------------------

	05/09/07 - NATRAJAH - CR 26910
		Added the conditional check to validate the threshold
		amount when calculation base is 2.

	03/13/07 - NATRAJAH - CR 24946
		Added the code to validate the threshold amount and 
		withholding tax calc base.
	*/

	type public Boolean ER	

	//Threshold amount must be used with calculation base 2.	
	if 'utblwcalc.whthramt.isNull(),utblwcalc.whcalcb'=2 do Runtime.setErrMSG("UTBLWCALC",6183) quit:ER

	//Threshold amount must be used with calculation base 2
	if utblwcalc.whthramt.isNull(),utblwcalc.whcalcb=2 do Runtime.setErrMSG("UTBLWCALC",6183) quit:ER
	quit

vau1 // Trigger AFTER_UPDATE - Calculation Base After Update Trigger

	type public RecordUTBLWCALC utblwcalc
	/*

	------- Revision History --------------------------------------------

	05/09/07 - NATRAJAH - CR 26910
		Added the conditional check to validate the threshold
		amount when calculation base is 2.

	03/13/07 - NATRAJAH - CR 24946
		Added the code to validate the threshold amount and 
		withholding tax calc base.
	*/

	type public Boolean ER	

	//Threshold amount must be used with calculation base 2.	
	if 'utblwcalc.whthramt.isNull(),utblwcalc.whcalcb'=2 do Runtime.setErrMSG("UTBLWCALC",6183) quit:ER

	//Threshold amount must be used with calculation base 2
	if utblwcalc.whthramt.isNull(),utblwcalc.whcalcb=2 do Runtime.setErrMSG("UTBLWCALC",6183) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLWCALC utblwcalc

	if utblwcalc.key.length()>4 set vRM = $$^MSG(1076,4) do vdderr("KEY", vRM) quit
	if utblwcalc.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = utblwcalc.lsber if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,3) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.LSBER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblwcalc.lsdesc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LSDESC", vRM) quit
	set X = utblwcalc.lsfcb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.LSFCB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.lsmed if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.LSMED"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblwcalc.lssc.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LSSC", vRM) quit
	set X = utblwcalc.lswamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.LSWAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.lswpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.LSWPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.lswsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("LSWSCH", vRM) quit
	set X = utblwcalc.pber if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,3) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.PBER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblwcalc.pdesc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PDESC", vRM) quit
	set X = utblwcalc.pfcb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.PFCB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.pmed if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.PMED"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblwcalc.psc.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PSC", vRM) quit
	set X = utblwcalc.pwamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.PWAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.pwpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.PWPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.pwsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("PWSCH", vRM) quit
	set X = utblwcalc.wamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.WAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.whcalcb if 'X.isNull(),'Db.isDefined("STBLWHCALCB","X") set vRM = $$^MSG(1485,X) do vdderr("WHCALCB", vRM) quit
	set X = utblwcalc.whthramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.WHTHRAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.wpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLWCALC.WPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblwcalc.wsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("WSCH", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLWCALC","MSG",979,"UTBLWCALC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLWCALC utblwcalc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("KEY")
	set voldkey = vux.piece("|",1),vobj(utblwcalc,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblwcalc,-3) = vnewkey // Copy new keys into object
	type RecordUTBLWCALC vnewrec = utblwcalc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLWCALC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utblwcalc,-3) = vux.piece("|",1)              // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
