UCSMON		/*
	ORIG: CARROLLJ - 02/04/2001
	DESC: UCS Monitor

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------
	
	12/28/05 - PRAKASHJ - 17423
		   Removed depricated warnings and scoped variables. 
	
	05/22/05 - Erik Scheetz - 15677
		   Modified STRT section to register/unregister the monitor
		   process in the PROCESSID table.  
		   
		   Modified STOP section to issue a STOP interrupt when 
		   stopping the UCS monitor.
		   
        	   Modified UCSSTOP section to use interrupt mechanism when
        	   checking to stop rather than polling the UCSMON table.
        	   When monitor process is interrupted %INTRPT will be set with
        	   the neccessary action to be taken.

	12/01/04 - Frans S.C. Witte - CR 12564
		   Changed error.type="RECNOFL" to error.type="%PSL-E-RECNOFL"

	04/26/02 - CARROLLJ - 50504
		   Added code to find "&" and append amp; to conform to xml
		   standards.

	04/18/02 - CARROLLJ - 49948
		   Modified error logic to log errors but not stop the monitor.
		   Also deleted section PRMT and moved logic into START
		   and STOP sections.

	03/25/02 - CARROLLJ - 49706
		   Added logic to get cookie from sign on message.

	03/21/02 - CARROLLJ - 49634
		   Added code to MAIN and PUBLISH sections to return errors if
		   a connection cannot be established or a message cannot
		   be sent.

	11/15/01 - CARROLLJ - 48179
		   Retrofit to V6.1.

	05/03/01 - CARROLLJ - 42494
		   Modified MONITOR section to add quit after check on 
		   publish.message to not continue processing if error is 
		   returned from PUBLISH line tag.

	*/
	quit


STRT // Start Monitor

	type Number erlogcnt
	type public String UCSMON()
	
	set erlogcnt=0

	do SYSVAR^SCADRV0()

        lock UCSMON("PA"):2  else  quit

	do Db.fastDelete("UCSMON","PROCESSOR='PA'")

	type RecordUCSMON ucsmon
	set ucsmon=Class.new("RecordUCSMON")
	set ucsmon.pid=%ProcessID
	set ucsmon.pid=$$DECHEX^%ZHEX(%ProcessID)
	set ucsmon.sysdate=%CurrentDate
	set ucsmon.processor="PA"
	set ucsmon.stop=0
	set ucsmon.startime=%CurrentTime
	do ucsmon.bypassSave()

	// Register UCS Monitor Process
	do REGISTER^IPCMGR("MONITOR","UCSMON")

	for  quit:$$UCSSTOP()  do MAIN

	set ucsmon=Db.getRecord("UCSMON","""PA""")	
	set ucsmon.stoptime=%CurrentTime
	set ucsmon.stopdate=%CurrentDate
	do ucsmon.bypassSave()

	// Un-register Process
	do CLOSE^IPCMGR()

	lock -UCSMON("PA")

	quit


MAIN    // Main routine

	type Number cnct
	type public Number erlogcnt
	type String dscnct,id
	type public String ET,RM
	 
	catch error {
		set ET=error.type
		if ET["%GTM-" do {	
			do ZE^UTLERR
			}
		else  do {
			set RM=error.description
			do ^UTLERR
			}

		set erlogcnt=erlogcnt+1
		if erlogcnt=30 do { quit
			set ET="UCS_SHUTDOWN"
			do ^UTLERR
			type RecordUCSMON ucsmon=Db.getRecord("UCSMON","PROCESSOR=""PA""")
			set ucsmon.stop=1
			do ucsmon.bypassSave()
			}
		hang 2
		}
 
	set id=""
	set cnct=$$CLCNCT^%MTAPI(.id,"SCA_UCS","MQ")
	if 'cnct.isNull() throw Class.new("Error","UCS_CNCT,,"_$ZS) quit
	for  quit:$$UCSSTOP()  do MONITOR
	set dscnct=$$CLDSCNCT^%MTAPI(id)
	quit



MONITOR

	/* 
	This subroutine is responsible for creating XML messages for
	customers and accounts.
	*/

	type public Date expdate
	type public Number exptime
	type public String status,cookie,REPLY,DELIM,I,SESSION,STR,TAG,signmsg,id
	
	set signmsg=$$SIGNMSG()

	// Send signon message and recieve 'cookie' as reply
	set status=$$EXCHMSG^%MTAPI(signmsg,.REPLY,"",id,60)
	if 'status.isNull() throw Class.new("Error","UCS_SIGNON,,"_$ZS) quit
	
	set cookie=""
	if 'REPLY.isNull() do {
 
		// Strip off beginning and end tags
		set STR="<Cookie>"_REPLY.piece("<Cookie>",2,99)
		set DELIM=REPLY.length("<Cookie>")-1
		set STR=STR.piece("</Cookie>",1,DELIM)_"</Cookie>"
 
		// Parse cookie tags and create session tags
		for I=1:1:DELIM do {
			set TAG=STR.piece("</Cookie>",I)
			set TAG=TAG.piece("<Cookie>",2)
			set cookie=cookie_"<?session "_TAG_"?>"
			}
		}

	//Initialize cookie expiration date and time
	set expdate=%CurrentDate
	set exptime=%CurrentTime+(20*60)
	if exptime>86400 do {
		set exptime=exptime-86400
		set expdate=expdate+1
		}

	for  quit:($$EXPIRE(expdate,exptime)!($$UCSSTOP()))  do EXEC
	quit


EXEC	//Process Publishable Records

	type public Boolean ER
	type Number SEQ
	type public Number exptime,signmsg
	type public Date expdate
	type String ID,FID,mesg
	type public String RM,message,ET
	
	type ResultSet rs=Db.select("ID,FID,SEQ","PUBLISH")
	if rs.isEmpty() hang 2 quit

	while rs.next() do { quit:($$EXPIRE(expdate,exptime)!($$UCSSTOP()))
		set ID=rs.getCol("ID")
		set FID=rs.getCol("FID")
		set SEQ=rs.getCol("SEQ")
		if 'Db.isDefined("PUBLISH","ID,FID,SEQ") quit

		catch rserror {
			set ET=rserror.type
			if rserror.type="%PSL-E-RECNOFL" do { quit
				set RM=rserror.description
				do ^UTLERR
				do Db.delete("PUBLISH","ID=:ID AND FID=:FID AND SEQ=:SEQ") quit			
				}
			throw Class.new("Error","UCS_SEND,,"_$ZS)
			}

		type ResultSet rspblish=Db.select("MESSAGE","PUBLISH","ID=:ID and FID=:FID and SEQ=:SEQ")
		if rspblish.next() do {
			set mesg=rspblish.getCol("MESSAGE")
		}
		if 'mesg.isNull() do PUBLISH(mesg.piece("|",1),signmsg) quit

		set %ProcessMode=0
		if FID="CIF" do {
			type RecordCIF cif=Db.getRecord("CIF","ID")
			if cif.pers=0 do INDNEW^NEWINDV(.cif,.message) do PUBLISH(message,signmsg)
			if cif.pers=1 do NEWCORP^CORPCUS(.cif,.message) do PUBLISH(message,signmsg)
			}

		if FID="ACN" do {
			type RecordACN acn=Db.getRecord("ACN","ID")
			do NEWACT^ACCNT(.acn,.message)
			type ResultSet rs1=Db.select("SEQ","PUBLISH","ID=:ID AND FID='RELCIF'")
			if rs1.isEmpty() quit 
			while rs1.next() do {
				set SEQ=rs1.getCol(1)
				type RecordRELCIF relcif=Db.getRecord("RELCIF","SEQ,ID")
				do NEWREL^ACCNT(.relcif,.message)
				do Db.delete("PUBLISH","ID=:ID AND FID='RELCIF' AND SEQ=SEQ")
				}
			set message=message_"</XpressSync>"
			do PUBLISH(message,signmsg)
			}
		if FID="RELCIF" do {
			type RecordRELCIF relcif=Db.getRecord("RELCIF","SEQ,ID") 
			do NEWREL^ACCNT(.relcif,.message,1) 
			do PUBLISH(message,signmsg)
			}

	}
	quit

PUBLISH(String xml,String signmsg)

	type public Number erlogcnt
	type public String cookie,id,status,xmlmsg

	set xml=$$XMLCHG(xml,"&","&amp;")

	// Add cookie to xml message
	set xmlmsg=xml.piece("{cookie}",1)_cookie_xml.piece("{cookie}",2)

	// Send xml message
	set status=$$CLSEND^%MTAPI(xmlmsg,"",id)
	if 'status.isNull() throw Class.new("Error","UCS_SEND,,"_$ZS) quit
	set erlogcnt=0

	// Remove Publish record
	do Db.delete("PUBLISH","ID=:ID AND FID=:FID AND SEQ=:SEQ")
	quit

START   // Start Ucs Monitor
 
 	type public Boolean ER
 	type String pid
	type public String RM
	
	set pid=""
	type RecordUCSMON ucsmon=Db.getRecord("UCSMON","PROCESSOR='PA'",1)
	if ucsmon.getMode() do {
		set pid=$$HEXDEC^%ZHEX(ucsmon.pid)
		if '$$VALID^%ZPID(pid) set pid=""
		}
	// Monitor is already running
	if 'pid.isNull() do Runtime.setErrMSG("UCSMON","8364") quit
	do JOB
	quit

STOP    // Stop UCS monitor
 
	type String pid,sel()

	set pid=""
	if Db.isDefined("UCSMON","PROCESSOR='PA'") do {
		type RecordUCSMON ucs
		set ucs=Db.getRecord("UCSMON","'PA'")
		set ucs.stop=1
		do ucs.bypassSave()

		// Signal monitor to stop
	
		set sel("PRCTYP")="MONITOR"
		set sel("SUBTYP")="UCSMON"
		do ISSUE^IPCMGR("STOP",,.sel)		
		}
	quit

JOB     //Private/External entry point to spawn monitor

	type public Boolean ER
	type String pgmnam,prcnam,PTMDIR,x
	type public String RM
 
	set pgmnam="STRT^UCSMON"
	set PTMDIR=CUVAR.ptmdirid
	set prcnam="UCSMON_"_PTMDIR
 
	set x=$$^%ZJOB(pgmnam,"PRO="_prcnam,1)
 
	if x set RM(RM("").order(-1)+1)=$$^MSG(6800,prcnam)
	else  set RM(RM("").order(-1)+1)=$$^MSG(6799,prcnam)
	set ER="W"
	quit

UCSSTOP()      // Return ucs stop flag
 
	type Boolean STOP
	type public String %INTRPT
	
	set STOP=0
	if %INTRPT.get() > 1 do INTRPT^IPCMGR
	
	if '%INTRPT.get().isNull() do {
	
		if %INTRPT = "STOP" set STOP = 1
		else  if %INTRPT = "CTRL" do {
			type RecordUCSMON ucsmon = Db.getRecord("UCSMON","PROCESSOR='PA'",1)
			if (ucsmon.getMode() = 0) ! (ucsmon.stop = 1) set STOP = 1
			}
		set %INTRPT = ""
		}
	quit STOP

EXPIRE(Date date,Date time)

	// Cookie not expired
	if %CurrentDate<date quit 0
	if %CurrentTime<time quit 0
	
	// Cookie has expired
	quit 1

SIGNMSG()

	type String xml,SECPSW,SECUSR
 
	set SECUSR="SYSTEM_USER"
	set SECPSW="ccccc"
 
	set xml="<?xml version=""1.0""?>"
	set xml=xml_"<?DocHandler DocHandler=""PIA""?>"
	set xml=xml_"<?PIA Application=""batch""?>"
	set xml=xml_"<!DOCTYPE SignonRequestConsumer["
	set xml=xml_"<!ELEMENT SignonRequestConsumer (Username,Method,Proof) >"
	set xml=xml_"<!ATTLIST SignonRequestConsumer Index ID #IMPLIED >"
	set xml=xml_"<!ELEMENT Username (#PCDATA) >"
	set xml=xml_"<!ELEMENT Method (#PCDATA) >"
	set xml=xml_"<!ELEMENT Proof (#PCDATA) > ]>"
	set xml=xml_"<SignonRequestConsumer>"
        set xml=xml_"<Username>"_SECUSR_"</Username>"
        set xml=xml_"<Method>PWD</Method>"
        set xml=xml_"<Proof>"_SECPSW_"</Proof>"
        set xml=xml_"</SignonRequestConsumer>"
        quit xml

XMLCHG(String xml,String FROM,Number TO)

	type Number FROML,F,OF
	type String X

	set FROML=FROM.length()
	set X="",(F,OF)=0
	for  set F=$FIND(xml,FROM,F) Q:'F  set X=X_xml.extract(OF,F-FROML-1)_TO,OF=F
	set X=X_xml.extract(OF,xml.length())
	quit X

vSIG()	quit "60298^27202^Jaimano Prakash^9015"	// Signature - LTD^TIME^USER^SIZE
