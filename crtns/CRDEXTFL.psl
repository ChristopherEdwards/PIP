CRDEXTFL(RecordCRDEXT crdext, String vpar, Boolean vparNorm) // CRDEXT - MPS Extract File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crdext.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(crdext,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crdext,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ORDT").exists()!vx("ACN").exists()!vx("CID").exists()!vx("CRDNUM").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRDEXT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRDEXT","ORDT = :crdext.ordt and ACN = :crdext.acn and CID = :crdext.cid and CRDNUM = :crdext.crdnum") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ORDT
	type public String ACN
	type public String CID
	type public String CRDNUM

	type RecordCRDEXT crdext = Db.getRecord("CRDEXT","ORDT=:ORDT,ACN=:ACN,CID=:CID,CRDNUM=:CRDNUM")
	if (%ProcessMode = 2) do {
		do crdext.setMode(2)

		do CRDEXTFL(crdext,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRDEXT crdext

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRDEXT","ORDT = :crdext.ordt and ACN = :crdext.acn and CID = :crdext.cid and CRDNUM = :crdext.crdnum") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crdext)) S ^CRDEXT(vobj(crdext,-3),vobj(crdext,-4),vobj(crdext,-5),vobj(crdext,-6))=vobj(crdext)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRDEXT crdext


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CRDEXT(vobj(crdext,-3),vobj(crdext,-4),vobj(crdext,-5),vobj(crdext,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordCRDEXT crdext

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRDEXT crdext

	if crdext.ordt.isNull() do vreqerr("ORDT") quit
	if crdext.acn.isNull() do vreqerr("ACN") quit
	if crdext.cid.isNull() do vreqerr("CID") quit
	if crdext.crdnum.isNull() do vreqerr("CRDNUM") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDEXT","MSG",1767,"CRDEXT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCRDEXT crdext
	if 'crdext.acn.isNull() set vfkey("^CIF("_""""_crdext.acn_""""_","_1_")")="CRDEXT(ACN) -> CIF"
	if 'crdext.cid.isNull() set vfkey("^ACN("_""""_crdext.cid_""""_","_50_")")="CRDEXT(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCRDEXT crdext
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":crdext.acn") set vERRMSG = $$^MSG(8563,"CRDEXT(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("ACN",":crdext.cid") set vERRMSG = $$^MSG(8563,"CRDEXT(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRDEXT crdext

	set X = crdext.ordt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ORDT", vRM) quit
	set X = crdext.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = crdext.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = crdext.crdnum if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("CRDNUM", vRM) quit
	if crdext.crdtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CRDTYP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDEXT","MSG",979,"CRDEXT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCRDEXT crdext

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ORDT").exists() set vux("ORDT") = vx("ORDT")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CRDNUM").exists() set vux("CRDNUM") = vx("CRDNUM")
	do vkey(1) set voldkey = crdext.ordt_","_crdext.acn_","_crdext.cid_","_crdext.crdnum // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crdext.ordt_","_crdext.acn_","_crdext.cid_","_crdext.crdnum // Copy new keys into object
	type RecordCRDEXT vnewrec = crdext.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRDEXT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRDEXT crdext

	if vux("ORDT").exists() set crdext.ordt = vux("ORDT").piece("|",i)
	if vux("ACN").exists() set crdext.acn = vux("ACN").piece("|",i)
	if vux("CID").exists() set crdext.cid = vux("CID").piece("|",i)
	if vux("CRDNUM").exists() set crdext.crdnum = vux("CRDNUM").piece("|",i)
	quit
