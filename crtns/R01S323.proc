R01S323	// SCA333 - Service Fee Tran Code Count Rpt by Acct
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:48 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String PID,RANGE
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String CID
	type String DTRANGE
	type String TRNGRP

	set RID="SCA333"
	set RN="Service Fee Tran Code Count Rpt by Acct"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("CID")="|12|||[DEP]||S %EXT=1,ZCLS=""D"" D ^UACN||T|Account Number|||||"
	set %TAB("DTRANGE")="|3|||RANGE(||||T|Date Range|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("TRNGRP")="|10|||[UTBLTRNGRPT]TRNGRP:DISTINCT||||T|Tran Code Group|||||"

	set %READ="IO/REQ,TRNGRP#1,DTRANGE#1,CID#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String PID,RANGE
	type public String TRNGRP,DTRANGE,CID
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,CNT,CONAM,DESC,FROMDATE,NAM,RID,RN,RNGDESC,TODATE,TYPE,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vovc1,vovc2,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA333",RN="Service Fee Tran Code Count Rpt by Acct"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA333","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()

	set vCOL="[TMPRPT1]KEY1#1#12"

	// Initialize variables
	set (vc1,vc2,vc3)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:2 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("TMPRPT1.PID,TMPRPT1.KEY1,TMPRPT1.DATA","TMPRPT1","TMPRPT1.PID=:PID","TMPRPT1.PID,TMPRPT1.KEY1","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2
	set vovc1="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2
	set vovc1=vc1,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3
	set vc1=V.piece($C(9),1)			// TMPRPT1.PID
	set vc2=V.piece($C(9),2)			// TMPRPT1.KEY1
	set vc3=V.piece($C(9),3)			// TMPRPT1.DATA
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	type public Date FROMDATE, TODATE
	type public Number CID, TYPE
	type public String DTRANGE, NAM, RANGE, RNGDESC,  TRNGRP
		
	type String %TRN(), ETC, TG(), TRNCDS()
	
	do Db.delete("TMPRPT1", "PID=:%ProcessID")

	// Get all upper-case transaction codes first
	type ResultSet rs = Db.select("ETC,DES", "TRN")
	
	while rs.next() do {
		
		set ETC = rs.getCol("ETC")
		
		if (ETC'?1L.e) set TRNCDS(ETC) = rs.getCol("DES")
	}

	// Define tran codes in selected tran group
	type ResultSet rs1 = Db.select("DISTINCT TRNCD", "UTBLTRNGRP", "TRNGRP=:TRNGRP")
	
	while rs1.next() do {
		
		type String TRNCD = rs1.getCol("TRNCD")
		
		// Wild card
		if TRNCD.isLike("%*") do {
			
			type String MATCH
			
			set MATCH = TRNCD.extract(1, TRNCD.length() - 1)
			set ETC = MATCH
			if 'ETC.isNull(), TRNCDS(ETC).exists() set TG(ETC) = ""
			for  set ETC = TRNCDS(ETC).order() quit:ETC.isNull() ! 'ETC.isLike(MATCH_"%")  set TG(ETC) = ""
		}
		// Range
		else  if TRNCD.isLike("%-%") do {
			
			type String END
			
			set ETC = TRNCD.piece("-", 1)
			set END = TRNCD.piece("-", 2)
			
			if 'ETC.isNull(), TRNCDS(ETC).exists() set TG(ETC) = ""
			for  set ETC = TRNCDS(ETC).order() quit:ETC.isNull() ! (ETC ]] END)  set TG(ETC) = ""
		}
		// Single value
		else  set TG(TRNCD) = ""
	}
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:CID")
	type RecordCIF cif = Db.getRecord("CIF", "ACN=:acn.acn")

	set TYPE = acn.type
	set NAM = cif.nam
	set RNGDESC = "("_RANGE(DTRANGE)_")"

	// Define FROMDATE and TODATE for date range	
        if DTRANGE = "MTD" do { 		// month-to-date

		type String XDATE

		set TODATE = %SystemDate
		set XDATE = TODATE.toString("MM/DD/YY")
		set XDATE.piece("/", 2) = 1

		set FROMDATE = XDATE.toDate("MM/DD/YY")
	}
	else  if DTRANGE = "QTD" do {		// quarter-to-date
		
		type Number MONTH
		type String XDATE

		set TODATE = %SystemDate
		set XDATE = TODATE.toString("MM/DD/YY")
		set XDATE.piece("/", 2) = 1

		set MONTH = TODATE.monthOfYear()
		if (MONTH > 9) set MONTH = 10
		else  if (MONTH > 6) set MONTH = 7
		else  if (MONTH > 3) set MONTH = 4
		else  set MONTH = 1
		set XDATE.piece("/", 1) = MONTH
		
		set FROMDATE = XDATE.toDate("MM/DD/YY")
	}
	else  if DTRANGE = "YTD" do {		// year-to-date

		type String XDATE

		set TODATE = %SystemDate
		set XDATE = TODATE.toString("MM/DD/YY")
		set XDATE.piece("/", 1) = 1
		set XDATE.piece("/", 2) = 1

		set FROMDATE = XDATE.toDate("MM/DD/YY")
	}
	// current statement period or prior statement period
	else  do {
		
		type Date SLDT, STPR

		type RecordCMBCID cmbcid = Db.getRecord("CMBCID", "CID=:CID,ACN=:acn.acn", 1)

		if (cmbcid.getMode() = 0) set (SLDT, STPR) = ""
		else  do {

			type RecordCMBSTM cmbstm = Db.getRecord("CMBSTM", "ACN=:acn.acn, STMGRP=:cmbcid.stmgrp,CID=:CID", 1)

			if (cmbstm.getMode() = 0) set (SLDT, STPR) = ""
			else  do {

				set SLDT = cmbstm.sltd
				set STPR = cmbstm.stpr
			}
		}

		if (DTRANGE = "CSP") do {

			set TODATE = %SystemDate
			set FROMDATE = SLDT + 1
		}
		else  if (DTRANGE = "PSP") do {

			set TODATE = SLDT
			if TODATE.isNull() set TODATE = %SystemDate
			set FROMDATE = STPR + 1
		}

		if (FROMDATE = 1) set FROMDATE = acn.odt
	}

	// Dispatch to utility to count tran codes
	do INIT^UAVB(acn, CID, FROMDATE, TODATE, "000000001")

	// Accumulate totals to return as defined variable
	// Save data for tran group transaction codes
	set ETC = ""
	for  set ETC = TG(ETC).order() quit:ETC.isNull()  do {

		type RecordTMPRPT1 tmprpt1 = Class.new("RecordTMPRPT1", "PID=:%ProcessID,KEY1=:ETC")

		set tmprpt1.data = (+%TRN(ETC).get())_"|"_TRNCDS(ETC)

		do tmprpt1.save()
	}

	quit

VPREBQ	// Pre-processor (before query)

	//Incoming=PID,RANGE

	type public Number PID
	type public String RANGE

	set PID = %ProcessID

	set RANGE("MTD") = "Month-to-date"
	set RANGE("QTD") = "Quarter-to-date"
	set RANGE("YTD") = "Year-to-date"
	set RANGE("CSP") = $$^MSG(6478)	//Current statement period
	set RANGE("PSP") = $$^MSG(6479) //Prior statement period

	quit

VRPOST	// Report post-processor

	do Db.delete("TMPRPT1", "PID=:%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(2)=1		// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(2).get() do VDTL2 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(2)
	type Public String vc1,vovc1,vc2,vovc2
	type Number vb1,vb2
	set (vb1,vb2)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(2)=VT(2)+1
	quit

VDTL2	// Detail
	type public String CID,CNT,DESC,DTRANGE,FROMDATE,IOSL,NAM,PID,RANGE,RNGDESC,TODATE,TRNGRP,TYPE,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc2,vc3,verror,vh(),vovc1,vovc2

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc2,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(V,1,12) set VL=V
	set VL=VL_$J("",14-VL.length())_$E(DESC,1,20)
	set VL=VL_$J("",49-VL.length())_$J(CNT,10)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CID,CNT,CONAM,DESC,DTRANGE,FROMDATE,NAM,PID,RANGE,RID,RN,RNGDESC,TODATE,TRNGRP,TYPE,VL,vc1,vc2,vc3,vovc1,vovc2,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+10,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL="                       "_"Transaction Code Counter Inquiry"
	do VOM
	set VL="" do VOM
	set VL="   "_"Account Number: "
	set V=$E(CID,1,12) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",19-VL.length())_V
	set VL=VL_$J("",51-VL.length())_"Product Type: "
	set VL=VL_$J("",65-VL.length())_$E(TYPE,1,4)
	do VOM
	set VL="    "_"Customer Name: "
	set VL=VL_$J("",19-VL.length())_$E(NAM,1,40)
	do VOM
	set VL="" do VOM
	set VL="  "_"Tran Code Group: "
	set VL=VL_$J("",19-VL.length())_$E(TRNGRP,1,20)
	do VOM
	set VL="        "_"From Date: "
	set VL=VL_$J("",19-VL.length())_$J($$DAT^%ZM(FROMDATE),10)
	set VL=VL_$J("",31-VL.length())_"To Date: "
	set VL=VL_$J("",40-VL.length())_$J($$DAT^%ZM(TODATE),10)
	set VL=VL_$J("",54-VL.length())_$E(RNGDESC,1,26)
	do VOM
	set VL="" do VOM
	set VL="Tran Code     Description                Count Within Dates"
	do VOM
	set VL="================================================================================"
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,TMPRPT1]KEY1

	type public String vc3
	type public Number CNT
	type public String DESC

	set CNT = vc3.piece("|", 1)
	set DESC = vc3.piece("|", 2)
	quit

VP2	// Column post-processor - Variable: CID

	type public Number CID, TYPE
	type public String NAM

	type RecordACN acn = Db.getRecord("ACN", "CID=:CID")
	type RecordCIF cif = Db.getRecord("CIF", "ACN=:acn.acn")

	set TYPE = acn.type
	set NAM = cif.nam

	quit
