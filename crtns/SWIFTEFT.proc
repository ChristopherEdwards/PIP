public SWIFTEFT	//Private;Create EFTPAY Records from Incoming SWIFT Messages
	/*

	   DESC:  Create EFTPAY Records from Incoming SWIFT Messages

	    This routine will collate SWIFTQ("REC" for those SWIFT
	    messages with a status of "Incoming Received."  It will then
	    read the SWIFT data from SWIFT and map it into the fEFTPAY
	    local array.  It then writes the array into EFTREV2, which
	    is a copy of EFTPAY (the final destination).

	  ---- Revision History -------------------------------------------------

	   09/07/05 - KELLYP - CR 17118
		      Modified entire procedure to remove references to the
		      MT100 message which has been obsoleted by SWIFT.  Also
		      modified the LOOP section to use SWINTSRV.MT103STP
		      instead of SWINTSRV.MT100STP to determine when to stop
		      the server.  Also modified the LOOP section so that it is
		      called repetitively, instead of iteratively, to prevent
		      STACKCRIT errors from occuring since it looked like it 
		      would eventually use up all the stack space.

           07/26/05 - SkariahV- CR16679
	              Removed #WARN and #OPTIMIZE directives.
	              
	   06/12/03 - SRIVASTAVAN - 51351
	   	      Converted to PSL
	   	      Removed history before 2000
	   		
	  ----------------------------------------------------------------------
	*/
	
	do MAIN
	
	quit


MAIN	//var dec

	type Boolean STOP

	type String %ZTSEQ,%ZTHANG
	type String ET,RM	

	catch vERROR {
		
		set ET=vERROR.type
		
		if ET["%GTM-" do ZE^UTLERR quit
		
		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR

		}

	set STOP=0

	while 'STOP do LOOP
	
	quit
	
	
LOOP	//

	type Public Boolean STOP
	type Public Date DATE
	type Public String QSEQ
	type Public String REFNO,MSGTYP

	type RecordSWINTSRV swintsrv=Db.getRecord("SWINTSRV","KEY=1",1)			
	
	// STOP signal received
	if swintsrv.mt103stp="STOP" set STOP=1 quit

	set (DATE,QSEQ,REFNO,MSGTYP)=""
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")

	type ResultSet rs=Db.select("DT,SEQ,TRREFNO,TYPE","SWIFTQ1","QUE='REC'")
	while rs.next() do {
		set DATE=rs.getCol("DT")
		set QSEQ=rs.getCol("SEQ")
		set REFNO=rs.getCol("TRREFNO")
		set MSGTYP=rs.getCol("TYPE")
		do PROC(.eftpay)
		}
	
	hang 5

	quit


PROC(RecordEFTPAY eftpay)	//

	type Public String ER,MSGTYP,REFNO,SWIFT(,,),SWFREE(,,,)
	type RecordSWIFT fSWIFT
	type RecordSWFREE swfree
	
	if (MSGTYP="")!(MSGTYP'=103) quit 

	do LOADMSG(.fSWIFT,.swfree)

	do MAPEFT(.fSWIFT,.eftpay,.swfree)
	
	if ER.get() do ERR

	quit


LOADMSG(RecordSWIFT fSWIFT,RecordSWFREE swfree)	//
	
	type Public String MSGTYP,REFNO,SWIFT(,,)

	set fSWIFT=Db.getRecord("SWIFT","SWDIRECT='IN',TRREFNO=:REFNO,MSG=:MSGTYP",1)
	
	lock +SWIFT("IN",REFNO,MSGTYP)
	
	do LOADMULT(.fSWIFT,171,.swfree)

	quit


LOADMULT(RecordSWIFT fSWIFT,Number NODE,RecordSWFREE swfree)	//  Load sub-nodes of NODE from disk - SWIFT

	type Public String MSGTYP,REFNO
	type Number PTR
	type Public String SWARR171()
	type Number FLAG
	
	set FLAG=0
	set PTR=fSWIFT.freeptr

	for  do { quit:FLAG
		set swfree=Db.getRecord("SWFREE","SWDIRECT='IN',PTR=:PTR,FLD=:MSGTYP,SEQ=:NODE",1)
		if swfree.getMode()=0 set FLAG=1 quit
		set SWARR171(NODE)=swfree.fldtxt
		set NODE=NODE+.001
		}
	quit


MAPEFT(RecordSWIFT fSWIFT,RecordEFTPAY eftpay,RecordSWFREE swfree)	//

	/*
	   Map data from SWIFT nodes into EFTPAY local array and write into
	   EFTREV2 global.

	*/
	
	type Public String ET,EFTTYPE,EFTREV2(,),EMUCRCD,fEFTMSG,RM,SRC,SOURCE,VFMQ
	type Public Number MSGTYP,REFNO,REFNUM,TEMP,TRREFNO
	type String CID,ER,ERM,ERCODE,p23,paycur,SEQ
	type Number chgamt,chgcur,chgamt1,chgamt2,ogl,payamt,SENDNOS,XNOS	
	type String AMT,CCY,VAL,VALCCYAMT  
	type RecordDEP dep

	set (CID,SEQ,ER,ERM,ERCODE)=""

	// set keys into EFTREV2(CID,SEQ and lock record
	set p23=fSWIFT.bnfcry

	if p23.extract()="/" do { quit:ER
		set CID=p23.extract(2,35)
		set dep=Db.getRecord("DEP","CID=:CID",1)		
		
		if CID'="",('Db.isDefined("DEP","CID=:CID")),('Db.isDefined("GLAD","ACN=:CID")) do { quit
			set CID=""
			type RecordSTBLGLTSCODE stblglco=Db.getRecord("STBLGLTSCODE","KEY=2")
			set ERM=stblglco.desc
			set ERCODE=2 
			}
		if CID'=""&(Db.isDefined("DEP","CID=:CID")) do {
			
  			if dep.stat=4 do { quit
  				set CID=""
				type RecordSTBLGLTSCODE stblglco=Db.getRecord("STBLGLTSCODE","KEY=3")
				set ERM=stblglco.desc
				set ERCODE=3
				}
			}
		if 'CUVAR.RESPROC quit
		
		if dep.restyp=1&(dep.cnvtyp=0)&(dep.crcd=%SystemCurrency) do { quit
			type RecordSTBLGLTSCODE stblglco=Db.getRecord("STBLGLTSCODE","KEY=4")
			set ERM=stblglco.desc			
			set ERCODE=4
			}
		}

	// Parse field 32 for value date VAL, currency CCY, and amount AMT
	
	set VALCCYAMT=fSWIFT.vcas2
	set VAL=VALCCYAMT.extract(1,6)
	set CCY=VALCCYAMT.extract(7,9)
	set AMT=VALCCYAMT.extract(10,35)

	set AMT=AMT.translate(",",".")
	
	set eftpay.setcrcd=0

	if EMUCRCD.get()="" set EMUCRCD=CUVAR.EMUCRCD 

	// If field 72 contains "OCMT", process ERI.
	
	type String sw72
	
	set sw72=fSWIFT.by1_"|"_fSWIFT.by2_"|"_fSWIFT.by3_"|"_fSWIFT.by4_"|"_fSWIFT.by5_"|"_fSWIFT.by6
	
	if sw72["/OCMT/" do {

		type String LASTSLASH,CHGS,OCMT,CO

		/* Make sure key word /OCMT/ starts the line. If it does, it will
		   be immediately preceded by a "|" or a null.   MJZ - 36960
		*/
		set OCMT=$F(sw72,"/OCMT/")-7
		set OCMT=sw72.extract(OCMT)

		// Do no process
		if (OCMT'="|")&(OCMT'="") quit

		set CO=CUVAR.CO 

		// Sender to Receiver Line 1
		set OCMT=sw72.piece("/OCMT/",2)
		set OCMT="/OCMT/"_OCMT.piece("|",1)
		
		set paycur=OCMT.extract(7,9)

		if (paycur="")!('Db.isDefined("CRCD","CO=:CO,CRCD=:paycur")) quit

		set LASTSLASH=$F(OCMT,"/",9)
		set payamt=OCMT.extract(10,(LASTSLASH-2))

		// replace comma with period.
		set payamt=+payamt.translate(",",".")
		set (chgamt1,chgamt2)=0 
		set chgcur=""

		if sw72["/CHGS/" do {
			
			// Sender to Receiver Line 1
			set CHGS=sw72.piece("/CHGS/",2)
			set CHGS="/CHGS/"_CHGS.piece("|",1)
			
			set chgcur=CHGS.extract(7,9)
			set LASTSLASH=$F(CHGS,"/",9)
			set chgamt=CHGS.extract(10,(LASTSLASH-2))
			set chgamt=+chgamt.translate(",",".")
			if chgcur=paycur set chgamt1=chgamt
			else  set chgamt2=chgamt
			}

		// Foreign Payment Message 1
		set eftpay.msgfp1=OCMT

		// Foreign Payment Message 2
		if OCMT'["/CHGS/",CHGS.get()'="" set eftpay.msgfp2=CHGS

		type RecordCRCD crcd=Db.getRecord("CRCD","CO=:CO,CRCD=:paycur",1)
		if CCY=EMUCRCD,crcd.emu=1 do {

			// Check if amounts are consistent.
			if +$$^SCARND(((payamt-chgamt1)/crcd.fncrate)-chgamt2,2)'=+AMT do { quit
				set CID=CUVAR.GLTSFP
				set ogl=1 
				set ERCODE=5 
				type ResultSet rs=Db.select("DESC","STBLGLTSCODE","KEY=5")
				if rs.next() set ERM=rs.getCol("DESC")
				}

			// Ordering Customer Line 1
			
			set eftpay.erivalid=1
			}
			
		type RecordCRCD crcdccy=Db.getRecord("CRCD","CO=:CO,CRCD=:CCY",1)
		if crcdccy.emu=1,paycur=EMUCRCD do {

			// Check if amounts are consistent.
			if +$$^SCARND(((payamt-chgamt1)*crcdccy.fncrate)-chgamt2,2)'=+AMT do { quit
				set CID=CUVAR.GLTSFP	
				set ogl=1 
				set ERCODE=5 
				type ResultSet rs=Db.select("DESC","STBLGLTSCODE","KEY=5")
				if rs.next() set ERM=rs.getCol("DESC")
				}
	
			// Ordering Customer Line 1
			set eftpay.erivalid=1
			}
		}

	if CID="" do {
		set CID=CUVAR.GLTSFP
		set ogl=1 
	  	
		if ERM="" do {
			type ResultSet rs=Db.select("DESC","STBLGLTSCODE","KEY=1")
			if rs.next() set ERM=rs.getCol("DESC")
			set ERCODE=1
			}
		}

	if CID="" set CID=CUVAR.GLTSFP set ogl=1

	// Error processing REC queue, CID is null for MT~p1 REFNO ~p2
	if CID="" set VFMQ="Q",ER=1,ET=$$^MSG(7403,MSGTYP,REFNO) do ERR quit

	type ResultSet rs=Db.select("SEQ","EFTREV2","CID=:CID","SEQ DESC")

	set SEQ=rs.getCol("SEQ")	

	type RecordEFTREV2 eftrev2=Db.getRecord("EFTREV2","CID=:CID,SEQ=:SEQ",1)
		
	// Record locked
	lock +EFTREV2(CID,SEQ):5 else  set ER=1,RM=$$^MSG(7354,"EFTREV2") quit

	// default settings

	//source
	set (SRC,EFTTYPE)="NDPOIN"

	//status
	set eftpay.status="A"

	type RecordCTBLEFTTYPE ctbleft=Db.getRecord("CTBLEFTTYPE","KEY=:SRC",1)
	
	//payment sys
	set eftpay.met=ctbleft.paymetdft
	
	//amt type (fixd)
	set eftpay.amttyp=1
	
	//efttype
	set eftpay.efttype=SRC

	//date
	set eftpay.datecre=+%CurrentDate

	//time
	set eftpay.timecre=%CurrentTime

	if ERM'="" do {
		
		//error message
		set eftpay.brhqmsg1=ERM
		
		//error code
		set eftpay.gltscode=ERCODE
		}

	//auto create
	set eftpay.origin=0

	//fee calc method
	set eftpay.feetype=ctbleft.feemetdft

	// Transaction Reference Number ; 20 into Customer Reference field
	set eftpay.relrefno=fSWIFT.trnofmt

	// define for SWFILE
	set TRREFNO=REFNO

	// generate PROFILE/IBS transaction reference number
		
	set TEMP="EFTPAY|"_CID_"|"_SEQ
	
	set SOURCE="SWIFT"

	set REFNUM=""

	do ^TRREFNO(SOURCE,.REFNUM,TEMP) quit:ER

	// Transaction Reference Number
	set eftpay.refno=REFNUM

	// Sender ; 10
	set eftpay.sndr=fSWIFT.sndr

	// Ordering Customer ; 50
	set eftpay.ord1=fSWIFT.ord1

	// Ordering Customer - Line 2
	set eftpay.ord2=fSWIFT.ord2

	// Ordering Customer - Line 3
	set eftpay.ord3=fSWIFT.ord3

	// Ordering Customer - Line 4
	set eftpay.ord4=fSWIFT.ord4

	// Beneficiary ; 59
	
	//BENAD1
	if p23.extract()'="/",fSWIFT.benad1="" set eftpay.benad1=p23	
	else  set eftpay.benad1=fSWIFT.benad1

	//BENAD2
	set eftpay.benad2=fSWIFT.benad2

	//BENAD3
	set eftpay.benad3=fSWIFT.benad3
	
	//BENAD4
	set eftpay.benad4=fSWIFT.benad4

	//BENACN
	type String tempACN
	
	// Beneficiary Institution
	set tempACN=fSWIFT.bnfcry

	// Beneficiary's Account Number
	if tempACN.extract(1)="/" set eftpay.benacn=tempACN.extract(2,tempACN.length())

	// Beneficiary's Account Number
	else  set eftpay.benacn=tempACN

	//BENACNSW
	set eftpay.benacnsw=eftpay.benacn

	// Receiver ; header
	set eftpay.recv1=fSWIFT.rcvr1
	set eftpay.recv2=fSWIFT.rcvr2
	set eftpay.recv3=fSWIFT.rcvr3
	set eftpay.recv4=fSWIFT.rcvr4
	set eftpay.recv5=fSWIFT.rcvr5
	set eftpay.recv6=fSWIFT.rcvr6

	// Branch/Institution ;
	set eftpay.beninst1=fSWIFT.beninst1
	set eftpay.beninst2=fSWIFT.beninst2
	set eftpay.beninst3=fSWIFT.beninst3
	set eftpay.beninst4=fSWIFT.beninst4

	// Ordering Institution ;
	set eftpay.ordinst1=fSWIFT.ordinst1
	set eftpay.ordinst2=fSWIFT.ordinst2
	set eftpay.ordinst3=fSWIFT.ordinst3
	set eftpay.ordinst4=fSWIFT.ordinst4

	type String ORDINST

	// Ordering Institution
	set ORDINST=fSWIFT.ordinst
	if ORDINST="",(eftpay.ordinst1=""),(eftpay.ordinst2=""),(eftpay.ordinst3=""),(eftpay.ordinst4="") do {

		// Sender
		set ORDINST=fSWIFT.sndr
		}

	if ORDINST'="" do {
		type RecordUTBLCORRE utblcor=Db.getRecord("UTBLCORRE","KEY=:ORDINST",1)
		if (ORDINST["XXX"),(utblcor.acn="") set ORDINST=ORDINST.extract(1,8)
		if utblcor.acn="" set ORDINST=ORDINST.translate(",","")
		}

	// Ordering Institution
	set eftpay.ordinst=ORDINST

	// Details of Payment
	set fEFTMSG.piece("|",1)=fSWIFT.dtlpmt1
	set fEFTMSG.piece("|",2)=fSWIFT.dtlpmt2
	set fEFTMSG.piece("|",3)=fSWIFT.dtlpmt3
	set fEFTMSG.piece("|",4)=fSWIFT.dtlpmt4

	//I18N=OFF

	// Details of Charges
	type String DTLCHG

	// Details of Charges
	set DTLCHG=fSWIFT.dtlchgs

	if DTLCHG="",Db.isDefined("STBLFEEPAYOR","OPT='BEN'") set DTLCHG="BEN"

	// Fee Paid By
	set eftpay.feepayor=DTLCHG

	//I18N=ON

	// Receiver Corr - (actually SENDCORR)
	type String RECVCORR

	set RECVCORR=fSWIFT.rcvrcorr

	// If not 54A then 53A
	if RECVCORR="" set RECVCORR=fSWIFT.sndrcorr

	// If not 53A then Sender
	if RECVCORR="" set RECVCORR=fSWIFT.sndr
	if RECVCORR'="" do {
		type RecordUTBLCORRE utblcor=Db.getRecord("UTBLCORRE","KEY=:RECVCORR",1)
		if (RECVCORR["XXX"),(utblcor.acn="") set RECVCORR=RECVCORR.extract(1,8)
		if utblcor.acn="" set RECVCORR=RECVCORR.translate(",","")
		}

	// place in SENDCORR
	set eftpay.sendcorr=RECVCORR

	// Sender's Nostro
	if RECVCORR'="" do {

		set (SENDNOS,XNOS)=""
		
		type DbSet ds=Db.selectDbSet("DEP","CORRE=:RECVCORR AND CRCD=:CCY")
		while ds.next() do {
			
			type RecordDEP dep=ds.getRecord("DEP")
			
			set XNOS=dep.cid
		
			// No closed accts.
			if dep.stat=4 quit

			// First one found, save
			if SENDNOS="" set SENDNOS=dep.cid

			// Not unique, don't default
			else  set (SENDNOS,XNOS)=""
			}

		// Sender's Nostro/Covering Loro Account
		set eftpay.sendnos=SENDNOS
		}

	type Public Date SPT
	
	set VAL=$$DATECONV(VAL)

	set SPT=$$NBD^UNBD(VAL+1,2)

	set eftpay.procdt=VAL
	set eftpay.efd=SPT
	set eftpay.crcd=CCY
	set eftpay.amount=AMT

	if MSGTYP=103 do MAP103(.MSGTYP,.fSWIFT,.eftpay)
	
	do FILESW(.fEFTMSG,.fSWIFT,.eftpay,.eftrev2,.swfree)
	
	quit


FILESW(String fEFTMSG,RecordSWIFT fSWIFT,RecordEFTPAY eftpay,RecordEFTREV2 eftrev2,RecordSWFREE swfree)	// File SWIFT message into SWIFT, update SWIFTQ

	/*
	   Update status of SWIFT message and call SWIFT DQ Filer
	   SWFILE will then update the SWIFTX index STAT
	*/

	type Public String ER,MSG,MSGTYP,qtype1,qtype2,SWDIRECT,TRREFNO,RM,SWIFTQ()
	type Public Number nextseq
	type Public Date DATE
	
	//completed
	do fSWIFT.setAuditFlag(1) 

	set fSWIFT.status=3

	// Entry deleted from SWIFTQ("REC"
	set qtype1="REC"
	set qtype2="CMP"

	// ~p1 record locked by another user
	lock +SWIFTQ(qtype1,DATE):5 else  set ER=1,RM=$$^MSG(7354,qtype1) quit

	// ~p1 record locked by another user
	lock +SWIFTQ(qtype2,DATE):5 else  set ER=1,RM=$$^MSG(7354,qtype2) quit

	type RecordSWQCNTD swqcntd=Db.getRecord("SWQCNTD","QUE=:qtype1,DT=:DATE",1)
	set swqcntd.tot=swqcntd.tot-1
	
	do swqcntd.bypassSave()
	
	do Db.delete("SWIFTQ1","QUE='REC' AND DT=:DATE AND SEQ=:QSEQ AND TRREFNO=:REFNO AND TYPE=:MSGTYP")

	lock -SWIFTQ(qtype1,DATE)

	// Entry created in SWIFTQ("CMP"
	type RecordSWQCNTD swqcntd2=Db.getRecord("SWQCNTD","QUE=:qtype2,DT=:DATE",1)

	set nextseq=swqcntd2.nseq+1
	set swqcntd2.nseq=swqcntd2.nseq+1
	set swqcntd2.tot=swqcntd2.tot+1
	set swqcntd2.ptoday=swqcntd2.ptoday+1
	
	do swqcntd2.bypassSave()
	
	type RecordSWIFTQ1 swq1=Db.getRecord("SWIFTQ1","QUE=:qtype2,DT=:DATE,SEQ=:nextseq,TRREFNO=:TRREFNO,TYPE=:MSGTYP",1)
	do swq1.save()
		
	lock -SWIFTQ(qtype2,DATE)

	set MSG=MSGTYP 
	set SWDIRECT="IN"

	do fSWIFT.save()
	do swfree.save()
	
	do FILEPO(.fEFTMSG,.eftrev2,.eftpay)
	
	quit


FILEPO(String fEFTMSG,RecordEFTREV2 eftrev2,RecordEFTPAY eftpay)	// Write payment into EFTREV2 global

	type Public String EFTREV2(,)
	type Public Number CID,SEQ
	
	set eftrev2.antrate=eftpay.antrate
	set eftrev2.feetype=eftpay.feetype
	set eftrev2.relrefno=eftpay.relrefno
	set eftrev2.refno=eftpay.refno
	set eftrev2.acn=eftpay.acn
	set eftrev2.ord1=eftpay.ord1
	set eftrev2.ord2=eftpay.ord2
	set eftrev2.ord3=eftpay.ord3
	set eftrev2.ord4=eftpay.ord4
	set eftrev2.antamt=eftpay.antamt
	set eftrev2.benad1=eftpay.benad1
	set eftrev2.benad2=eftpay.benad2
	set eftrev2.benad3=eftpay.benad3
	set eftrev2.benad4=eftpay.benad4
	set eftrev2.benacn=eftpay.benacn
	set eftrev2.feepayor=eftpay.feepayor
	set eftrev2.cifinst=eftpay.cifinst
	set eftrev2.origin=eftpay.origin
	set eftrev2.reccorr=eftpay.reccorr
	set eftrev2.inter=eftpay.inter
	set eftrev2.recv=eftpay.recv
	set eftrev2.antfee1=eftpay.antfee1
	set eftrev2.antfee2=eftpay.antfee2
	set eftrev2.sendnos=eftpay.sendnos
	set eftrev2.beninst=eftpay.beninst
	set eftrev2.lchdt=eftpay.lchdt
	set eftrev2.feecrcd=eftpay.feecrcd
	set eftrev2.feeamt=eftpay.feeamt
	set eftrev2.feeconv=eftpay.feeconv
	set eftrev2.feecrcd2=eftpay.feecrcd2
	set eftrev2.feeamt2=eftpay.feeamt2
	set eftrev2.anttotal=eftpay.anttotal
	set eftrev2.rate=eftpay.rate
	set eftrev2.sendcorr=eftpay.sendcorr
	set eftrev2.recvcorr=eftpay.recvcorr
	set eftrev2.hldseq=eftpay.hldseq
	set eftrev2.inter1=eftpay.inter1
	set eftrev2.inter2=eftpay.inter2
	set eftrev2.inter3=eftpay.inter3
	set eftrev2.inter4=eftpay.inter4
	set eftrev2.beninst1=eftpay.beninst1
	set eftrev2.beninst2=eftpay.beninst2
	set eftrev2.beninst3=eftpay.beninst3
	set eftrev2.beninst4=eftpay.beninst4
	set eftrev2.consndpo=eftpay.consndpo
	set eftrev2.varndpo=eftpay.varndpo
	set eftrev2.ccode=eftpay.ccode
	set eftrev2.pri2=eftpay.pri2
	set eftrev2.recvopt=eftpay.recvopt
	set eftrev2.uidadd=eftpay.uidadd
	set eftrev2.uidver=eftpay.uidver
	set eftrev2.uidmod=eftpay.uidmod
	set eftrev2.uidapp=eftpay.uidapp
	set eftrev2.uidacc=eftpay.uidacc
	set eftrev2.beninstl=eftpay.beninstl
	set eftrev2.sndr=eftpay.sndr
	set eftrev2.inttrn=eftpay.inttrn
	set eftrev2.msg1=fEFTMSG.piece("|",1)
	set eftrev2.msg2=fEFTMSG.piece("|",2)
	set eftrev2.msg3=fEFTMSG.piece("|",3)
	set eftrev2.msg4=fEFTMSG.piece("|",4)
	set eftrev2.msgfp1=eftpay.msgfp1
	set eftrev2.ordinst=eftpay.ordinst
	set eftrev2.ordinst1=eftpay.ordinst1
	set eftrev2.ordinst2=eftpay.ordinst2
	set eftrev2.ordinst3=eftpay.ordinst3
	set eftrev2.ordinst4=eftpay.ordinst4
	set eftrev2.recv1=eftpay.recv1
	set eftrev2.recv2=eftpay.recv2
	set eftrev2.recv3=eftpay.recv3
	set eftrev2.recv4=eftpay.recv4
	set eftrev2.recv5=eftpay.recv5
	set eftrev2.recv6=eftpay.recv6
	set eftrev2.brhqmsg1=eftpay.brhqmsg1
	set eftrev2.brhqmsg2=eftpay.brhqmsg2
	set eftrev2.brhqmsg3=eftpay.brhqmsg3
	set eftrev2.brhqmsg4=eftpay.brhqmsg4
	set eftrev2.mt202flg=eftpay.mt202flg
	set eftrev2.rtrnflg=eftpay.rtrnflg
	set eftrev2.origseq=eftpay.origseq
	set eftrev2.benacnsw=eftpay.benacnsw
	set eftrev2.trip=eftpay.trip
	set eftrev2.sndrp=eftpay.sndrp
	set eftrev2.ordp=eftpay.ordp
	set eftrev2.sndrcorp=eftpay.sndrcorp
	set eftrev2.bankop=eftpay.bankop
	set eftrev2.trntypcd=eftpay.trntypcd
	set eftrev2.sworgamt=eftpay.sworgamt
	set eftrev2.origcrcd=eftpay.origcrcd
	set eftrev2.ordacc=eftpay.ordacc
	set eftrev2.sendinst=eftpay.sendinst
	set eftrev2.trib=eftpay.trib
	set eftrev2.triadd1=eftpay.triadd1
	set eftrev2.triadd2=eftpay.triadd2
	set eftrev2.triadd3=eftpay.triadd3
	set eftrev2.triadd4=eftpay.triadd4
	set eftrev2.rcvrchg=eftpay.rcvrchg
	set eftrev2.rcvrchgc=eftpay.rcvrchgc
	set eftrev2.regrep1=eftpay.regrep1
	set eftrev2.regrep2=eftpay.regrep2
	set eftrev2.regrep3=eftpay.regrep3
	set eftrev2.ben=eftpay.ben
	set eftrev2.swrate=eftpay.swrate
	set eftrev2.ord=eftpay.ord
	set eftrev2.freeptr=eftpay.freeptr
	set eftrev2.beninstp=eftpay.beninstp
	set eftrev2.interp=eftpay.interp
	set eftrev2.msgtyp=eftpay.msgtyp

	do eftrev2.bypassSave()
	
	lock -EFTREV2(CID,SEQ)

	quit


MAP103(Number MSGTYP,RecordSWIFT fSWIFT,RecordEFTPAY eftpay)	// Map data from SWIFT nodes into EFTPAY local array and write into ^EFTREV2 global for the MT103.

	type String SENDINST,TRINST
	type Number AMT
	
	// Incoming SWIFT Message Type
	set eftpay.msgtyp=MSGTYP

	// Free Format Text Pointer
	set eftpay.freeptr=fSWIFT.freeptr

	// Bank Operation Code
	set eftpay.bankop=fSWIFT.bankop

	// Transaction Type Code
	set eftpay.trntypcd=fSWIFT.trntypcd

	// Original Ordering Currency and Amount
	set AMT=(fSWIFT.origamt).extract(4,(fSWIFT.origamt).length())

	// Original Ordered Amount
	set eftpay.sworgamt=+AMT.translate(",",".")
	
	// Original Ordering Currency and Amount
	set eftpay.origcrcd=fSWIFT.origamt

	// Ordering Customer Account Number (50)
	if (fSWIFT.ordacc).extract(1,1)'="/" do {
		
		// Ordering Customer Type
		if fSWIFT.ordtyp="K" do {
		
			// Ordering Customer Account Number
			set eftpay.ord1=fSWIFT.ordacc
			set eftpay.ord2=fSWIFT.ord1
			set eftpay.ord3=fSWIFT.ord2
			set eftpay.ord4=fSWIFT.ord3
			}

		// Ordering Customer Account Number
		else  set eftpay.ord=fSWIFT.ordacc
		}
	else  do {
	
		// Ordering Customer Account Number
		set eftpay.ordacc=(fSWIFT.ordacc).extract(2,(fSWIFT.ordacc).length())
	
		// Ordering Customer Type
		if fSWIFT.ordtyp="K" do {
			
			// Ordering Customer - Line 1
			set eftpay.ord1=fSWIFT.ord1
			
			// Ordering Customer - Line 2
			set eftpay.ord2=fSWIFT.ord2
			
			// Ordering Customer - Line 3
			set eftpay.ord3=fSWIFT.ord3
			
			// Ordering Customer - Line 4
			set eftpay.ord4=fSWIFT.ord4
			}

		// Ordering Customer
		else  set eftpay.ord=fSWIFT.ord
		}

	// Sending Institution (51)

	set eftpay.sndrp=$$PID(fSWIFT.sndracc)

	// Sending Institution (BIC)
	set SENDINST=fSWIFT.sendinst
	if SENDINST'="" do {
		type RecordUTBLCORRE utblcor=Db.getRecord("UTBLCORRE","KEY=:SENDINST",1)
		if (SENDINST["XXX"),(utblcor.acn="") set SENDINST=SENDINST.extract(1,8)
		if utblcor.acn="" set SENDINST=SENDINST.translate(",","")
		}

	// Sending Institution
	set eftpay.sendinst=SENDINST

	// Third Reimbursement Institution (55)
	set eftpay.trip=$$PID(fSWIFT.tri)

	// Third Reimbursement Institution (BIC)
	set TRINST=fSWIFT.trib
	if TRINST'="" do {

		type RecordUTBLCORRE utblcor=Db.getRecord("UTBLCORRE","KEY=:TRINST",1)
		if (TRINST["XXX"),(utblcor.acn="") set TRINST=TRINST.extract(1,8)
		if (utblcor.acn="") set TRINST=TRINST.translate(",","")
		}

	// Third Reimbursement Institution
	set eftpay.trib=TRINST

	// Third Reimbursement Institution Address/Location
	set eftpay.triadd1=fSWIFT.triadd1
	set eftpay.triadd2=fSWIFT.triadd2
	set eftpay.triadd3=fSWIFT.triadd3
	set eftpay.triadd4=fSWIFT.triadd4

	// Receiver's Charges and Currency of Receiver's Charges
	set AMT=(fSWIFT.rcvrchg).extract(4,(fSWIFT.rcvrchg).length())

	// Receiver's Charge
	set eftpay.rcvrchg=+AMT.translate(",",".")
	
	// Currency and Amount of Receiver's Chgs
	set eftpay.rcvrchgc=fSWIFT.rcvrchg

	// Regulatory Reporting
	set eftpay.regrep1=fSWIFT.regrep1

	// Regulatory Reporting Line 2
	set eftpay.regrep2=fSWIFT.regrep2

	// Regulatory Reporting Line 3
	set eftpay.regrep3=fSWIFT.regrep3

	// Beneficiary Institution
	set eftpay.ben=fSWIFT.ben

	// SWIFT Exchange Rate
	// Exchange Rate
	set eftpay.swrate=+(fSWIFT.rate).translate(",",".")

	// Ordering Institution Party Identifier
	// Account of Ordering Institution
	set eftpay.ordp=$$PID(fSWIFT.ordinacc)

	// Sender's Correspondent Party Identifier
	set eftpay.sndrcorp=$$PID(fSWIFT.acctid)

	// Receiver's Correspondent Party Identifier
	// Account of Receiver's Correspondent
	set eftpay.rcvrcorp=$$PID(fSWIFT.rcvcracc)

	// Beneficiary Institution
	set eftpay.beninstp=$$PID(fSWIFT.bnfcry)

	// Intermediary Party Identifier
	set eftpay.interp=$$PID(fSWIFT.intsacc)

	quit


PID(Number PID)	//

	if PID.get()=""""
	if PID.extract(1,1)="/",PID.extract(3,3)="/" quit PID.extract(4,36)
	if PID.extract(1,1)="/" quit PID.extract(2,34)
	quit ""


DATECONV(String VAL)	//

	type String DD,MM,YY
	type Public String MASK,STRING
	
	//	Converts value date from SWIFT format to julian date
	set YY=VAL.extract(1,2)
	set MM=VAL.extract(3,4)
	set DD=VAL.extract(5,6)
	set STRING=MM_"/"_DD_"/"_YY
	set MASK="MM/DD/YY"

	set VAL=$$^SCAJD(STRING,MASK)
	
	quit VAL


ERR	//Log error in exception file

	type Public String %ZTSEQ,ET,RM
	
	if 'ET.data() set ET=RM.get()

	// EFT server Processing
	do LOG^UTLEXC("SWIFTEFT","*",$$^MSG(7402),"",%ZTSEQ.get(),ET,"")

	kill ET,%ZTSEQ
	quit

vSIG()	quit "60150^62058^Pat Kelly^21625"	// Signature - LTD^TIME^USER^SIZE
