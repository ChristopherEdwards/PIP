STFHCDI		/*
	  ---- Revision History ------------------------------------------------
	  11/24/05 - ALAGARSS - CR16677
		     Added the section EFTRATE,TTLAVGS from the Procedure SCARPTS.
	              
	  03/06/00 - JOYNER - 36638
		     Convert to PSL

	  02/08/00 - JOYNER - 36325 - QAR:6
		     Library correct version.
	
	  ----------------------------------------------------------------------

	   Computed operations for the 24x7 support files
	   Current files include STFHOST, STFHSEQ, STFHOST1, STFHOST2
	
	   LIBRARY FUNCTIONS
	
	   . EFDCMP Return STFEFD or STFHSEQ.TJD
	   . EXT  Return $E() of string
	   . NET  Return ACN.NET
	   . POS  Return $P() of string
	   . POSTED Return 1=yes 0=no
	   . STFPEND Return yes(1) if pending stf records
	     for a given account.
	   . STFHDI Return a dataitem from STFHSEQ
	   . TAMT  Return a piece of TAMT field
	   . TR  Return complete TR entry
	  ----------------------------------------------------------------------
	*/

	quit 

public EFDCMP(STFSEQ,STFEFD)	// Return Posting Date

	type public Date DATE,STFTJD
	type public String zSTFHSEQ()
	
	if STFEFD'="" quit STFEFD
	if '$D(zSTFHSEQ(STFSEQ)) do GETHSEQ
	set STFTJD=$P(zSTFHSEQ(STFSEQ),$C(9),1)
	quit STFTJD
	

public TAMT(TAMT,PC)	// Return a piece of TAMT

	if TAMT'["#" set TAMT=TAMT_"#"_TAMT
	quit $P(TAMT,"#",PC)
	

public EXT(STR,START,STOP)	// Return $E() of STR

	if $G(STOP)="" set STOP=START
	quit $E(STR,START,STOP)
	

public POS(STR,DELIM,POS)	// Return $P() of STR

	type Public String %
	
	if $G(POS)="" set POS=1
	if $G(DELIM)="" set DELIM=%
	quit $P(STR,DELIM,POS)
	

public NET(CID)	// Return ACN.STFNET

	type public Number STFNET
	
	type ResultSet rs=Db.select("STFNET","ACN","CID=:CID")
	if rs.next() set STFNET=rs.getCol("STFNET")
	quit STFNET
	

public TR(STFSEQ,TRSEQ)	// Return Complete TR array entry

	type Public String %,DATA,TR
			
	type ResultSet rs1=Db.select("CID,ITC,ETC,TAMT,STFEFD,TLO,TSO,TCMT,SPR","STFHOST","STFSEQ=:STFSEQ AND TRSEQ=:TRSEQ") 
	if rs1.next() do {
		set DATA=rs1.getCol("CID")_"|"_rs1.getCol("ITC")_"|"_rs1.getCol("ETC")
		set DATA=DATA_"|"_rs1.getCol("TAMT")_"|"_rs1.getCol("STFEFD")_"|"_rs1.getCol("TLO")
		set DATA=DATA_"|"_rs1.getCol("TSO")_"|"_rs1.getCol("TCMT")_"|"_rs1.getCol("SPR")
	}
	
	if DATA="" quit ""

	set TR=$P(DATA,%,1,8)_"||||||"_$P(DATA,%,9)
	quit TR
	

public POSTED(STFSEQ)	// Return POSTED status. 1=yes 0=no

	if Db.isDefined("STFHOST2","STFSEQ") quit 1
	quit 0
	

public PENDING(CID)	// Return STATUS of transactions pending in 
			// STFHOST file.

	/*
	   0=No Transactions Pending
	   1=Transactions are Pending in STFHOST file.
	  ----------------------------------------------------------------------
	*/
	new rs
	type ResultSet rs
	set rs=Db.select("TRSEQ","STFHOST","CID=:CID AND POSTED='N'") 
	if rs.isEmpty() quit 0
	quit 1
	

public STFHDI(STFSEQ,DI)	// Return specific DI from STFHSEQ record

	type public String zSTFHSEQ()
	
	if '$D(zSTFHSEQ(STFSEQ)) do GETHSEQ
	if zSTFHSEQ(STFSEQ)="" quit ""
	if DI="STFTJD" quit +zSTFHSEQ(STFSEQ)
	if DI="UID" quit $P(zSTFHSEQ(STFSEQ),$C(9),2)
	if DI="UCLS" quit $P(zSTFHSEQ(STFSEQ),$C(9),3)
	if DI="BRCD" quit $P(zSTFHSEQ(STFSEQ),$C(9),4)
	if DI="%TOKEN" quit $P(zSTFHSEQ(STFSEQ),$C(9),5)
	if DI="MSSGID" quit $P(zSTFHSEQ(STFSEQ),$C(9),6)
	if DI="TLO" quit $P(zSTFHSEQ(STFSEQ),$C(9),7)
	if DI="SRVCLS" quit $P(zSTFHSEQ(STFSEQ),$C(9),8)
	if DI="ACCTS" quit $P(zSTFHSEQ(STFSEQ),$C(9),9)
	quit ""
	

GETHSEQ	// Private; Get STFHSEQ record.
	type public String zSTFHSEQ()
	type public Number STFSEQ
	
	kill zSTFHSEQ

	type ResultSet rs3=Db.select("STFTJD,UID,UCLS,BRCD,%TOKEN,MSSGID,TLO,SRVCLS,ACCTS","STFHSEQ","STFSEQ=:STFSEQ")
	if rs3.next() do {
		set zSTFHSEQ(STFSEQ)=rs3.getCol("STFTJD")_"|"_rs3.getCol("UID")_"|"_rs3.getCol("UCLS")
		set zSTFHSEQ(STFSEQ)=zSTFHSEQ(STFSEQ)_"|"_rs3.getCol("BRCD")_"|"_rs3.getCol("%TOKEN")
		set zSTFHSEQ(STFSEQ)=zSTFHSEQ(STFSEQ)_"|"_rs3.getCol("MSSGID")_"|"_rs3.getCol("TLO")
		set zSTFHSEQ(STFSEQ)=zSTFHSEQ(STFSEQ)_"|"_rs3.getCol("SRVCLS")_"|"_rs3.getCol("ACCTS")
	}
	quit
	
public	EFFRATE(Date %SystemDate,
		String CRCD,
		String CLS,
		String GRP,
		Number TYPE,
		String GLSC,
		Number CC,
		Number BAL,
		Number BALADJ,
		Number ACR,
		Number BALRT00,
		Number BALRT01,
		Number ACR00,
		Number ACR01,
		Number ACRAACM)

	// Daily effective rate, computed for [TTL]EFFRATE, used by SCA034

	type Number BALCMP, EFFRATE, ACRADJ

	// Here, UDBAL has only been filed into piece 29 if ARUF=1 on the loan
	set BALCMP = BAL - BALADJ
	if BALCMP = 0 set EFFRATE = 0 quit EFFRATE
	
	// The sum of DAA for "00", "01", "03" loans
	set ACRADJ = ACR00 + ACR01
	
	/*
	The following formula computes the effective rate for a day. The
	calculation is obtaining the daily earnings dividing that number by
	the loan balance (BALCMP). This sounds easy until the effects of
	standard period interest calculations ("00", "01", "03") are
	considered. Because of periodic accrual adjustments to loan accounts
	([LN]AACM), the daily accrued amount (ACR in the formula; [DEP,LN]DAA
	in the account record), the ACR for these loans may not be valid.
	
	BALRT00 + (BALRT01 * 360 / 365)
	The formula takes the weighted rate/balance for "00"s (BALRT00) and
	adds to it the weighted rate/balance for "01"s (BALRT01), adjusted
	by the days per year. This considers the standard loans. Note that
	^BTTDRV computes these numbers by multiplying BALINT by IRN. This
	represents the annual earnings for those balances and rates,
	multiplied by 100.
	
	plus     (ACR - ACRADJ * 36500)
	Here ACRADJ is the sum of the daily accrued for "00", "01" and "03"
	loans.  This amount is subtracted from the total daily accrued to
	leave the actual-based accrual number. This remainder is multiplied
	by 36500 to represent the annual interest amount for these loans,
	multiplied by 100.
	
	divided by BALCMP
	The sum of the total annual earnings (multiplied by 100) is divided
	by the sum of the balances. This represents the effective rate for
	the product.
	*/
	
	set EFFRATE = (BALRT00 + ((BALRT01 * 360) / 365) + ((ACR - ACRADJ) * 36500)) / BALCMP
	
	set EFFRATE = EFFRATE.justify(0, 3)

	quit EFFRATE
	
public	TTLAVGS(Date %SystemDate,
		String CRCD,
		String CLS,
		String GRP,
		Number TYPE,
		String GLSC,
		Number CC)

	/*
	 Monthly effective rate and average ba$
	
	 Computed [TTL]XAVGS = EFFRATEM | AVGBALM | MTDAVGBL
	
	 ARGUMENTS:
		%SystemDate	Current date	/REQ/TYP=D/LEN=10
		CRCD		Currency Code	/REQ/TYP=T/LEN=3
		CLS		Account Class	/REQ/TYP=T/LEN=1
		GRP		Account Group	/REQ/TYP=T/LEN=4
		TYPE		Account Type	/REQ/TYP=N/LEN=12
		GLSC		GL Set Code	/REQ/TYP=T/LEN=6
		CC		Cost Center	/REQ/TYP=N/LEN=6
	*/

	type Number ACR, ACRST, AVGBALM, BALCMP, DIP, DIP1, EFFRATEM, MEACRADJ
	type Number MTDAVGBL, XAVGS
	type Date BOM, EOM, JD
	
	set (ACR, ACRST, BALCMP, MEACRADJ, MTDAVGBL) = 0
	
	set EOM = $$EOMJD^SCADAT(%SystemDate, 1)
	set BOM = $$BOMJD^SCADAT(%SystemDate, 1)

	type DbSet ds = Db.selectDbSet("TTL", "TJD NOT<:BOM AND TJD NOT>:EOM", "TJD ASC")
	
	while ds.next() do {

		type RecordTTL ttl = ds.getRecord()
		
		set BALCMP = BALCMP + (ttl.bal - ttl.baladj)	// Balance

		// Month-to-date bal... stop accumulating after the current date
		if ttl.tjd '> %SystemDate set MTDAVGBL = BALCMP

		/*
		ACRST = "Standard" accruals
		= Total for 00's, 01's, and AACM's
		= ACR00 + ACR01 + ACRAACM
		*/
	
		set ACRST = ACRST + ttl.acr00 + ttl.acr01 + ttl.acraacm
		set MEACRADJ = MEACRADJ + ttl.meacradj
		set ACR = ACR + ttl.acr
	}

	set DIP = EOM - BOM + 1
	set DIP1 = TJD - BOM + 1
	
	/*
	ACR - ACRST = "Actual" accruals
	= Total for 10's and 11's
	*/
	if 'BALCMP set EFFRATEM = 0
	else  do {
		set EFFRATEM = (((ACRST + MEACRADJ) * 1200 * DIP) + ((ACR - ACRST) * 36500)) / BALCMP
		set EFFRATEM = EFFRATEM.justify(0, 5)
	}

	set AVGBALM = BALCMP / DIP.justify(0)
	set MTDAVGBL = MTDAVGBL / DIP1.justify(0)	// mtd avg balance
	set XAVGS = EFFRATEM_"|"_AVGBALM_"|"_MTDAVGBL

	quit XAVGS
	

vSIG()	quit "60232^33311^Sivakumar Alagarsamy^7646"	// Signature - LTD^TIME^USER^SIZE
