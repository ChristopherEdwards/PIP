THR3652(vhtid)	// Compiled from JOBTHR template

	/*
	PROCEDURE:  JOBTHR
	ORIG: MATTSON - 06/05/95
	DESC: Job Thread Template

	---- Comments --------------------------------------------------------

	This procedure is never run independently.  It is used as a template
	by JOBMGR for the compilation of threads.

	Note:  Non-global scope variables used within the body of this
	procedure begin with the sentinal character 'v'.  This convention is
	used to avoid conflicts with application procedures that interface with
	this procedure.
		
	Note:  The arguments are used when the runtime routine is generated.

 	ARGUMENTS:

		. vhtid		Heavy thread ID		/TYP=T/REQ/MECH=VAL		
 	---- Revision History ------------------------------------------------
 	
 	05/22/05 - Erik Scheetz - 15677
 		   Modified code to register and unregister the thread process
 		   in the PROCESSID table.
 		   
 	12/23/04 - RussellDS - CR13642
 		   Correct multiple type declarations to avoid new PSL warnings.
 		   
 		   Incorporated Profile 01 changes - Removed the  calls to JOBMON;
 		   these are now handled by the batch compiler (DBSBCH).  Also 
 		   removed variables vjobmon, vreccnt, and vthrrcnt which are no
 		   longer used.
 		   
 	09/20/04 - GIRIDHARANB - CR10923
 		   Added code to do a final commit on Oracle before thread exit.
 		   
 	07/27/04 - RussellDS - CR11349
 		   Corrected scope issues to eliminate PSL warnings.
 		   
 		   Replaced new commands with type.

	04/26/02 - Dan Russell
		   Rewrote from M to PSL.

	11/08/01 - Dan Russell - 48301
		   Added code in beginning to support QA code coverage data
		   collection.

		   Removed change history older than 1999

	04/22/99 - Allan Mattson - 32066
		   Modified structure of ^JSCTRL to resolve REC-2-BIG
		   errors if the size of the string returned from
		   $$VSAV^PBSUTL exceeds 1024.
	*/

	type Public Number ER,vthrrcnt
	type Public String %FN,%LOGID
	
	// Catch GT.M errors
	catch error {
		do ZE^UTLERR
		set ER=1
		}

	type Boolean vexit
	type Number JOBNO,verrcnt
	type String HTHRID,vpar1,vpar2,vstatus

	set vstatus=$$THCNNCT^%HTAPI(vhtid)
	if vstatus'="" do err(vstatus) quit

	do batchck^TBXCDCV	// Turn on code coverage collection if requested

	type RecordJOBCONTROL jobctrl=Class.new("RecordJOBCONTROL")
	set jobctrl.hthrid=vhtid
	set jobctrl.infotype="threads"
	set jobctrl.infonum=%ProcessID
	set jobctrl.info=$$PRCNAM^%ZFUNC
	do jobctrl.bypassSave()

	do SYSVAR^SCADRV0() set %UserStation=$$TLO^UTLO
	set %LOGID=$$LOGID^SCADRV
	do thrlvar
	do thrinit
	
	// Register M process
	do REGISTER^IPCMGR("BATCH","THR")

	//Main process loop (Thread_Get_Msg and Thread_Reply)

	set vexit=0
	set verrcnt=0
	for  do { quit:vexit
		set vstatus=$$THGETMSG^%HTAPI(.vpar1)
		if vstatus="" do { quit
			set vpar2="" do threxec
			set vpar2=$G(vpar2)

			set vstatus=$$THREPLY^%HTAPI(.vpar2)
			if vstatus="" set verrcnt=0 quit
			do err(vstatus)
			set vexit=1
		}

		/* If the status is HT_NOMSGS0, exit if either the
		   scheduler process has been terminated or if the
		   number of successive HT_NOMSGS0 errors>10.  If
		   10 or less errors have been logged and the
		   scheduler process has not terminated, wait
		   2 seconds and retry the get message.

		   If the status is HT_NOMSGS1, a shutdown has been
		   indicated by the scheduler.  In this case, exit.

		   For all other errors, log the error and then exit.
		   These errors are unexpected and fatal.
		*/

		if vstatus="HT_NOMSGS0" do { quit
			set vexit=$$exit(vstatus,.verrcnt) if vexit quit
			if $$VALID^%ZPID(.vpar1) hang 2 quit
			do err(vstatus)
			set vexit=1
		}

		if vstatus="HT_NOMSGS1" set vexit=1 quit
		do err(vstatus) set vexit=1
	}

	// Disassociate from shared memory
	set vstatus=$$THCLOSE^%HTAPI
	if vstatus'="" do err(vstatus)

	// Execute thread exit
	do threxit

	// Delete thread job ID from JOBCONTROL
	set HTHRID=vhtid,JOBNO=%ProcessID
	do Db.delete("JOBCONTROL","HTHRID=:HTHRID AND INFOTYPE='threads' AND INFONUM=:JOBNO")
	
	// Un-register M process
	do CLOSE^IPCMGR()
		
	// Final commit on Oracle
	#IF $$rdb^UCDB()
	type String RM
	set ER = $$COMMIT^%DBAPI("", .RM)
	#ENDIF

	quit


exit(STATUS,ERRCNT)	//Private - Test if procedure should quit (verrcnt>10)
	/*
	ARGUMENTS:
		. STATIS	Status returned from	/TYP=T/REQ/MECH=VAL
				^%HTAPI
		. ERRCNT	Error count		/TYP=N/REQ/MECH=REF:RW

	RETURNS:
		. $$	Abort flag			/TYP=L/LEN=1
			0 = No  (Do not abort)
			1 = Yes (Abort)

		. verrcnt	Error count (incremented by one)
	*/

	set ERRCNT=ERRCNT+1
	if ERRCNT<11 quit 0
	do err(STATUS)
	quit 1


err(ET)	//Private - Log error

	do ^UTLERR
	quit


thrlvar	//Private - Load variables passed from scheduler

	type Public String vhtid

	type String HTHRID,STR

	set HTHRID=vhtid
	if 'Db.isDefined("JOBCONTROL","HTHRID=:HTHRID,INFOTYPE=""variables"",INFONUM=1") quit
	type RecordJOBCONTROL jobctrl=Db.getRecord("JOBCONTROL","HTHRID=:HTHRID,INFOTYPE=""variables"",INFONUM=1")
	do VLOD^PBSUTL(jobctrl.info)

	quit
	
thrinit	//Private - Thread initialization
	type Public String vpar1,vpar2
	type Number verrcnt,vexit
	do vTHRINIT^BCHQCOLL(.vpar1,.vpar2)
	quit
threxec	//Private - Thread execution
	type Public String vpar1,vpar2
	type Number verrcnt,vexit
	do Runtime.delayCommit("vTHREXEC^BCHQCOLL(.vpar1,.vpar2)")
	quit
threxit	//Private - Thread exit
	type Public String vpar1,vpar2
	type Number verrcnt,vexit
	do vTHREXIT^BCHQCOLL(.vpar1,.vpar2)
	quit
