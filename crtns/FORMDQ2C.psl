private FORMDQ2C(String SID)	
		 
	/*
	Screen OOE functions

	---- Revision History -------------------------------------------------
	07/26/06 - RussellDS - CR22121
		   Correct error in QL section - used : instead of ;.
		   
		   Add #ACCEPT for DRV^USID warning.
	
	05/10/06 - RussellDS - CR20967
		   Converted to PSL.

		   Eliminated run and execute screen options.

	-----------------------------------------------------------------------
	*/
	
	
	type String OP(), pgm
	
	set OP(1) = "CTL_Page|CTL^FORMDQ2C(SID)"
	set OP(2) = "Scr_Pre|SCRPRE^DBSDS(SID)"
	set OP(3) = "VLOD|SCRVLOD^DBSDS(SID)"
	set OP(4) = "DSP_Pre|MODDSP^DBSDS(SID)"
	set OP(5) = "Entry_Pre|MODPRE^DBSDS(SID)"
	set OP(6) = "Scr_Post|MODPP^DBSDS(SID)"
	set OP(7) = "Doc|MODDOC^DBSDS(SID)"
	set OP(8) = "Item_set|MODREQ^DBSDS(SID)"

	// CTL_Page,Scr_Pre,VLOD/Query,DSP_pre,Entry_Pre,Scr_Post,Doc,Item_Set
	set OP = $$^DBSMBAR(107) quit:(+OP = 0)
	
	set pgm = OP(OP).piece("|", 2)
	do @pgm
	
	do PUTRGN^FORMFUN()
	
	quit


private CTL(String SID)

	/*
	Control page
	*/
	
	type public Boolean STATUS
	type public String LASTFID
	
	type String VFMQ
	
	if STATUS write $$LOCK^%TRMVT		// Remove status line first
	
	type RecordDBTBL2 DBTBL2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID")
	
	// Accept for warning on parameter mismatch
	#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
	do DRV^USID(1, "DBTBL2", .DBTBL2) quit:(VFMQ = "Q")
	
	do DBTBL2.save()
	
	if (DBTBL2.pfid '[ LASTFID) set LASTFID = ""
	
	quit


private QL(String X)

	/*
	Quick Layout
	*/
	
	type public Boolean ER, RULER
	type public Number OLNTB, PX, PY
	type public String %TAB, FILES, FORMHDG, RM(), VIDRV, VO
	
	type Number Z, Z1
	type String FF(), FILE(), ITEMS, VIDEO, Y

	set ITEMS = X.get()
	
	if FILES.get().isNull() do { quit:FILES.isNull()
		
		type Boolean isDone = 0
		
		for  do { quit:isDone
			
			set FILES = $$^FORMREAD("", 60, "Access Files(s): ", 1)
			
			if FILES.isNull() set isDone = 1 quit
			
			if $$VALIDATE^DBSFVER(FILES) set isDone = 1
			else  write $$MSG^FORM("Invalid file relationships", 1)
		}
	}

	kill %TAB, ER, RM, VO
	
	set OLNTB = 22000 + FILES.length() + 2
	
	// Right justify
	if (+FORMHDG.get().piece(":", 2) = 0) set FORMHDG = "9;1;"_PY_";"_PX
	
	if RULER set FORMHDG = FORMHDG.piece(";", 1, 2)_";"_(PY + 1)_";"_(PX - 2)
	
	if ITEMS.isNull() do { quit:ITEMS.isNull()

		set ITEMS = $$^FORMREAD("", 60, FILES_":","U", 1)
	}

	for Z = 1:1 set X = FILES.piece(",", Z) quit:X.isNull()  set FILE(Z) = X_"|SYSDEV"

	set Z1 = 1
	for Z = 1:1 set Y = ITEMS.piece(",", Z) quit:Y.isNull()  do {
		
		type Boolean MATCH
		type Number I
		type String fid

		set fid = ""
		set MATCH=0
	
		if (Y ? 1"["1E.E1"]"1E.E) do {
		
			type String col
	
			set fid = Y.piece("]",1).extract(2, 99) quit:'FILES.isLike("%"_fid_"%")
		
			set col = Y.piece("]", 2)
		
			if Db.isSchemaColumn(fid, col) do {
			
				set MATCH = 1
				set Y = col
			}
		}
		
		else  do {
		
			for I = 1:1:FILES.length(",") do { quit:MATCH
			
				set fid = FILE(I).piece("|", 1)
			
				if Db.isSchemaColumn(fid, Y) set MATCH = 1
			}
		}

		if 'MATCH write $$MSG^FORM("Invalid data item - "_Y, 1)
		else  do {
		
			set X = "["_fid_"]"_Y
		
			set FF(Z1) = $$DIREFDFT(fid, Y)
			
			set Z1 = Z1 + 1
		}
	}

	set FF = FF("").order(-1)

	set VIDEO = VIDRV				// Reverse Image

	do PUT^FORMFILL
	
	quit
		
	
DIREFDFT(String fid,	// Table name
	 String di)	// Column name
	 
	/*
	Load attributes from the DD
	
	The M version of this code is in FORMVAR1.  Return this to that
	location when FORMVAR1 is moved to PSL.
	*/
	
	type public String dl, EDI(), PP(,), RM(), X
	
	type Boolean PROT, Z2
	type Number Z1, Z3
	type String Z
	
	type SchemaTable tblrec = Db.getSchemaTable(fid)
	type SchemaColumn colrec = Db.getSchemaColumn(fid, di)

	if ((colrec.node.isNull() & colrec.computation.isNull()) ! colrec.node.beginsWith("[")) set PROT = 1
	else  set PROT = 0

	set RM(1) = $$YN(PROT)_"|2"				// Protect flag
	if colrec.node.isLike("%*%") set RM(1) = $$YN(1)_"|2"	// Access key
	set RM(2) = $$YN(colrec.isRequired)_"|3"		// Required flag
	set RM(3) = colrec.dataType_"            |4"		// Display format
	if (colrec.displaySize > 0) set RM(4) = colrec.displaySize
	else  set RM(4) = colrec.length
	set RM(4) = RM(4)_"|5"					// Length

	if 'colrec.preProcExpr.isNull() do {			// Pre-proc
	
		set EDI(1) = 1
		set RM(5) = $$YN(1)_"|6"
		
		set Z3 = PP("").order(-1) + 1
		set PP(Z3, 1) = " "_colrec.preProcExpr
		
	}
	else  set RM(5) = $$YN(0)_"|6"
	
	if 'colrec.postProcExpr.isNull() do {			// Post proc
	
		set EDI(2) = 1
		set RM(6) = $$YN(1)_"|7"
		
		set Z1 = PP("").order(-1) + 1
		set PP(Z1, 1) = " "_colrec.postProcExpr
	}
	else  set RM(6) = $$YN(0)_"|7"

	set RM(7) = colrec.description

	set Z2 = PROT
	if colrec.node.isLike("%*%") set Z2 = 1			// Protect access keys
	
	set Z = X_dl_colrec.node_dl_colrec.length_dl_colrec.precision
	set Z = Z_dl_colrec.dataType_dl_colrec.lookupTable_dl_dl_Z2
	set Z = Z_dl_colrec.pattern_dl_colrec.minimum_dl_colrec.maximum
	
	set Z.piece(dl, 7) = colrec.isRequired
	set Z.piece(dl, 18) = colrec.dataType
	
	if 'colrec.postProcExpr.isNull() set Z.piece(dl, 14) = Z1
	if 'colrec.preProcExpr.isNull() set Z.piece(dl, 13) = Z3
	
	if 'colrec.position.isNull() do {
	
		set Z.piece(dl, 17) = colrec.position
		set Z.piece(dl, 16) = tblrec.columnDelimiter
	}
	
	set Z.piece(dl, 19) = colrec.displaySize
	
	quit Z



private FUNC(String SID)	// Screen ID

	/*
	Run Screen options
	*/
	
	type public String P(,)
	
	type String MASK(), OP, pgm

	set OP(1) = "Save|SAVE^FORMDQ2C(SID)"
	set OP(2) = "Compile|COMPILE^FORMDQ2C(SID),PUTRGN^FORMFUN()"
	set OP(3) = ""
	set OP(4) = ""
	set OP(5) = "Print|PRINT^FORMDQ2C(SID)"
	set OP(6) = "List|LIST^FORMDQ2C(SID)"
	set OP(7) = "OOE_Exit|EXIT^FORMDQ2C(SID)"
	set OP(8) = "Import|IMPORT^FORMEXCH()"
	set OP(9) = "Export|EXPORT^FORMEXCH()"
	
	// Suppress Run and Execute prompts (3 & 4 in MBAR 109)
	set MASK(3) = ""
	set MASK(4) = ""
	
	// "Save,Compile,Print,,,List,OOE_Exit,Import,Export"
	set OP = $$^DBSMBAR(109, "", .MASK()) quit:(+OP = 0)
	
	if (P.data() > 0) do SELOFF^FORMSEL(1)

	set pgm = OP(OP).piece("|", 2)
	do @pgm
	
	quit


private COMPILE(String SID)	// Screen ID

	/*
	Compile screen
	*/

	do FILE^FORMDQ2(SID, SID)
	
	write $$CLEAR^%TRMVT
	write $$CUP^%TRMVT(1, 1)

	do ^DBS2PSL(SID)
	
	write $$MSG^FORM("Done", 1)
	
	quit


private PRINT(String SID)	// Screen ID

	/*
	Print a screen 
	*/
	
	type Number COPIES
	type String IO

	set IO = $$IOSEL quit:IO.isNull()
	
	set COPIES = 1
	do IMAGE^FORMPNT
	
	quit


private LIST(String SID)	// Screen ID

	/*
	List a screen 
	*/
	
	type Number VRWOPT()
	type String CONAM, IO, RID, PGM, vudwhere

	do FILE^FORMDQ2(SID, SID)

	set IO = $$IOSEL quit:IO.isNull()
	
	set CONAM = CUVAR.CONAM

	set RID="DBSSCRLST"
	do ^URID quit:PGM.get().isNull()
	
	set vudwhere="LIBS='SYSDEV' AND SID=:SID"

	set VRWOPT("NOOPEN") = 1
	set VRWOPT("NOCLOSE") = 1
		
	do @("V0^"_PGM)

	do CLOSE^SCAIO
	
	do PUTRGN^FORMFUN()
	
	if (IO '= $I) write $$MSG^FORM(SID_" listing completed")
	
	quit
	
	
IOSEL()

	type Public String BTMPAG
	
	type Boolean ER, QUIT
	type String IO, POP
	
	use 0
	write BTMPAG
	
	set IO = $$^FORMREAD("", 60, "Device: ", "U")
	
	if IO.isNull() do {
		
		set IO = $I
		write $$REGION^FORMINIT
		write $$CLEAR^%TRMVT
	}

	set (ER, QUIT) = 0
	set POP = IO
	do ^SCAIO

	if ER do {
		
		write $$MSG^FORM("Cannot open "_IO)
		
		set IO = ""
	}
	
	quit IO
	
	
private BACKUP(String SID)	// Screen ID

	do FILE^FORMDQ2(SID, SID)
	
	quit
	
	
private SAVE(String SID)	// Screen ID

	type String X

	set X = $$SAVE^FORMDQ2()
	
	quit


EXIT(String SID)	// Screen ID

	/*
	Exit from the editor after saving
	*/
	
	type public String ZB

	if '$$SAVE^FORMDQ2(1) set ZB = 13
	else  do {
		
		type String OPGM, OSID, ZPGM
		
		type RecordDBTBL2 zdbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID")
		
		set ZPGM = zdbtbl2.vpgm
		
		set OSID = SID.extract(2, SID.length())
		
		type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:OSID")
		
		set OPGM = dbtbl2.vpgm
		
		// Delete the temporary copy
		do Db.delete("DBTBL2", "LIBS='SYSDEV' AND SID=:SID")
		
		// Delete the screen routine (V program name)
		if 'ZPGM.isNull(), (ZPGM '= OPGM) do DEL^%ZRTNDEL(ZPGM)
		
		set ZB = ""
	}

	lock
	
	quit
	
	
YN(Boolean X)

	if X quit "Y"
	
	quit "N"
 #OPTION ResultClass ON
Public String vSIG()	quit "60472^58614^Dan Russell^7875"	// Signature - LTD^TIME^USER^SIZE
