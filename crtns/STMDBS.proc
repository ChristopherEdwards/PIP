STMDBS	// Statement database access

	/*
	   ORIG:  LOCKE -  1 JUN 1990
	 
	---- Revision History ------------------------------------------------
	12/20/06 - GIRIDHAL - CR 24544
		    Retrofit from Profile01.
		    Listing and Maintenance of Pending Future-Dated 
		    Transactions via Sanchez WebCSR Development Specification CR971
		    Modified section STMDSC to display a message representing that a
		    future-dated maintenance is added to or removed from the account.
	
	08/03/06 - CHHABRIS - CR
		    Retrofit below mentioned CR's from p01dev1.
		    
		    04/24/06 - Ed Sigda - CR 20927
		    	Modified section ACH to fix issue with missing
		     	right parenthesis on $Select statement.
	
	 	    03/27/06 - Ed Sigda - CR 20273
	            	o Added section TRNDCSL to support HIST.TRNDCSL.
 	              	This new column will support a Transaction description
 	              	with a length of 120
	            	o In section TRNDSC pulled the call to OUT^UTSO out of
	              	the DO block, so that the TSO Array is built for all
	              	transactions. This will ensure that STMT information
	              	in TSO gets recognized.
	            	o Modified section TRNDSC to recognize ACH Statement 
	              	descriptions.  Added section ACH to translate TSO 
	              	field STMT#ACH into the ACH statement description.

	06/09/06 - KELLYP - CR 21711
		   Modified TRNDSC and STMDSC sections to prevent a GTM ZLINK
		   error when compiling this procedure.  The HISTSB selects in
		   these two sections were referencing "PE01 IS NOT NULL". 
		   Changed this to "PE01AMT IS NOT NULL" so that the subfield
		   is referenced instead of the masterfield which corrects
		   the ZLINK issue.  Also removed pre-2004 revision history.
	
	12/02/05 - RussellDS - CR18400
		   Removed QRYNAM section.  Not called by anything.  This
		   removes the call to obsoleted DBSVLOD.  If QRYNAM ends up
		   being needed in the future, the approach needs to be
		   redesigned for a PSL environment.
	
        08/24/05 - Mugilvannan - CR 16732
	           Added a section EFTDSC to return the transaction 
            	   description for EFT transaction done through domestic
	           payment and Null otherwise. The description will contain 
        	   the name of the recipient financial institution, account 
	           number, account type, and status of the transfer.
	           
        07/27/05 - SkariahV- CR16679
	           Removed #WARN and #OPTIMIZE directives.
	
	07/14/04 - KELLYP - CR 10916
		   Added procedure to StarTeam and fixed several conversion-
		   related problems.
	*/

	quit


Public SECTRDSC(Number CID,Number TSEQ)	// Security Transaction description for Statements

	type Boolean sectrdsc
	type String TRNDSC

	set sectrdsc=1

	do TRNDSC(1)

	quit TRNDSC


Public trndsc(Number CID,Number TSEQ)	// Assignment expression for data item TRNDSC in file HISt

	type String TRNDSC

	do TRNDSC(0)

	quit TRNDSC


public TRNDSC(Boolean NOTRNC)	// Transaction description

	/*
	  	   
	  NOTRNC - NOREC
	  	   Indicates if value should be truncated to 30 characters.
	  	   0 - will truncate, 1 - will not truncate
	*/

	type Number SAVTSEQ
	type String ARRAY,ETC,PR(),PRDSC(),TCMT,X
	type Public Number CID,TSEQ
	type Public Boolean sectrdsc
	type Public String TRNDSC

	set NOTRNC=NOTRNC.get()

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	if acn.type="" set TRNDSC="" quit

	type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ",1)

	set SAVTSEQ=TSEQ

	type DbSet dsdst=Db.selectDbSet("HISTDST","CID=:CID AND TSEQ=:TSEQ")
	type DbSet dslst=Db.selectDbSet("HISTLST","CID=:CID AND SLN=:TSEQ")
	type DbSet dssb=Db.selectDbSet("HISTSB","CID=:CID AND SLN=:TSEQ AND PE01AMT IS NOT NULL")

	// Transaction Source of Funds
	do OUT^UTSO(.ARRAY,hist.tso)

	if 'dsdst.next(),'dslst.next(),'dssb.next() do {
		if ARRAY("REV").data() set TSEQ=ARRAY("REV")
		}

	while dssb.next() do {
		type RecordHISTSB histsb=dssb.getRecord("HISTSB")
		do ESC(.histsb)
		}

	do ESC4

	set TSEQ=SAVTSEQ

	set ETC=hist.etc

	// set trndsc=tcmt if security transaction and quit
	if sectrdsc.data() set TRNDSC=hist.tcmt set TRNDSC=$select('NOTRNC:TRNDSC.extract(1,30),1:TRNDSC) quit

	if TRNDSC(ETC).data() set TRNDSC=TRNDSC(ETC) do TRNDSCX(.hist) set TRNDSC=$select('NOTRNC:TRNDSC.extract(1,30),1:TRNDSC) quit 

	// SELECT DDA from PRODCTL
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:acn.type")

	// Check Paid #~p1
	if 'hist.itc1,hist.itc3,prodctl.dda set X=hist.tso

	if X.get()["CK#" do {  quit
		set X=$$FIELD^UTSO(X,"CK")

		// Check Paid #~p1
		if X'="" set TRNDSC=$$^MSG(5481,X)
		// Check
		else  set TRNDSC=$$^MSG(7094)

		do TRNDSCX(.hist)

		if 'NOTRNC set TRNDSC=TRNDSC.extract(1,30)
		}

	if ETC.get()="" do {  quit 
		set TCMT=hist.tcmt

		/*
		 If the transaction does not contain both "[" and "]",
		 then return the transaction comment.  Otherwise return
		 "Account Maintenance".  Example: [DEP]ELIGBPAY::1
		*/

		if '((TCMT["[")&(TCMT["]")) set TRNDSC=TCMT
		// Account Maintenance
		else  set TRNDSC=$$^MSG(5106)

		if 'NOTRNC set TRNDSC=TRNDSC.extract(1,30)
		}

	if TRNDSC.get()'="" set TRNDSC=$select('NOTRNC:TRNDSC.extract(1,30),1:TRNDSC) quit 

	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
	
	if acn.cls="L",trn.pcfl9 do { quit
		// Payment for ~p1  ~p2
		set TRNDSC=$$^MSG(5482,$$DAT^%ZM(hist.ptd)) 
		set TRNDSC=$select('NOTRNC:TRNDSC.extract(1,30),1:TRNDSC)
		}

	set X=$ascii(hist.itc9) 
	if X'>0 set X=0
	
	set TRNDSC=""

	if 'X,ARRAY("ATM").data(),ARRAY("AD1").data() do { quit
		set TRNDSC=TRNDSC_ARRAY("AD1").get()_""_ARRAY("CITY").get() 
		do TRNDSCX(.hist) 
		set TRNDSC=$select('NOTRNC:TRNDSC.extract(1,30),1:TRNDSC)
		}

	if ARRAY("STMT").get().extract(1,4)="ACH^" set TRNDSC=$$ACH(ARRAY("STMT"),CID,ARRAY("FCID").get()) do TRNDSCX(.hist) set TRNDSC=$S('NOTRNC:TRNDSC.extract(1,30),1:TRNDSC) quit

	if (X\1)#2,hist.tlo'="" set TRNDSC=hist.tlo_","
	if (X\2)#2,hist.tso'="" set TRNDSC=TRNDSC_hist.tso_","
	if (X\4)#2,hist.tcmt'="" set TRNDSC=TRNDSC_hist.tcmt_","
	if (X\8)#2,hist.spr'="" set TRNDSC=TRNDSC_hist.spr_","

	if TRNDSC.extract(TRNDSC.length())="," set TRNDSC=TRNDSC.extract(1,TRNDSC.length()-1)

	if TRNDSC="" do { quit
		set TRNDSC=trn.prdes
		if TRNDSC="" set TRNDSC=trn.des
		set TRNDSC(ETC)=TRNDSC
		do TRNDSCX(.hist)
		if 'NOTRNC set TRNDSC=TRNDSC.extract(1,30)
		}

	if 'TRNDSC.length() set TRNDSC=TRNDSC(ETC)
	if 'NOTRNC set TRNDSC=TRNDSC.extract(1,30)

	quit


TRNDSCX(RecordHIST hist)	//

	type Public String TRNDSC

	// ~p1 (Reversal)
	if hist.tamt<0 set TRNDSC=$$^MSG(5483,TRNDSC.get())

	quit


Public STMLCC	//

	type Public Date EJD
	type Public Number CID

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Customer Contact - Last Date
	if acn.ccld<EJD do {
		set acn.ccld=EJD
		do acn.save()
		}

	quit


ESC(RecordHISTSB histsb)	//

	type Number I
	type String DATA,ESCVAR,ESCVARA,VAR,X
	type Public String PR(),PRDSC()

	for I=1:1:10 do {
		set ESCVAR="ESC"_I
		set ESCVARA="ESC"_I_"A"
		set @ESCVAR=""
		set @ESCVARA=""
		}

	for I=1:1:5 set VAR="pe0"_I do {
		set X=histsb.@VAR
		if X="" quit
		set PR=X.piece("#",2)
		if PR.length()=1 quit

		// Check to see if element is a loan fee.
		set DATA=$$FEEPLN^LNU(PR) if DATA'="" do {
			if 'PRDSC(PR).data() set PRDSC(PR)=DATA.piece("|",1)
			}

		// Check to see if element is an escrow element.
		if $$ESC^LNU(PR) do { 
			set PR=PR.translate("0123456789","")
		 	if 'PRDSC(PR).data() do {
				type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE=:PR",1)
				set PRDSC(PR)=lntrs.trdes
				}
			}
			
		set PR(PR)=PR(PR).get()+X.piece("#",3)
		}

	quit


ESC4	//

	type Number I
	type String N=""
	type Public String ESCVAR,ESCVARA,PR(),PRDSC()

	for I=1:1 set N=PR(N).order() quit:N=""  do { 
		if '$$ESC^LNU(N) quit
		set ESCVAR="ESC"_I
		set @ESCVAR=PRDSC(N)
		set ESCVARA="ESC"_I_"A"
		set @ESCVARA=PR(N)
		}

	quit


public stmdsc(Number CID,Number TSEQ)	// Assignment expression for data item STMDSC in [HIST]

	type String STMDSC

	do STMDSC

	quit STMDSC


STMDSC	// History transaction description for statements or history report

	type Number SAVTSEQ
	type String ETC,PR(),PRDSC(),TCMT,X
	type Public Number CID,TSEQ
	type Public String ARRAY(),STMDSC,STMDSC()

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Initialize transaction description
	set STMDSC=""

	if acn.type="" quit

	type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ",1)

	set SAVTSEQ=TSEQ

	// Find loan fee and escrow detail in transaction support level
	type DbSet dsdst=Db.selectDbSet("HISTDST","CID=:CID AND TSEQ=:TSEQ")
	type DbSet dslst=Db.selectDbSet("HISTLST","CID=:CID AND SLN=:TSEQ")
	type DbSet dssb=Db.selectDbSet("HISTSB","CID=:CID AND SLN=:TSEQ AND PE01AMT IS NOT NULL")

	if 'dsdst.next(),'dslst.next(),'dssb.next() do {
		// Transaction Source of Funds
		do OUT^UTSO(.ARRAY,hist.tso)
		if ARRAY("REV").data() set TSEQ=ARRAY("REV")
		}

	while dssb.next() do {
		type RecordHISTSB histsb=dssb.getRecord("HISTSB")
		do ESC(.histsb)
		do ESC4
		}

	set TSEQ=SAVTSEQ

	set ETC=hist.etc

	if ETC.get()="" do {  quit 
		// Future-dated maintenance
		if hist.efd > hist.tjd do {  quit
			set STMDSC=$$^MSG(5275)
			/*
			If this is a future dated file maintenance and it was marked
			( Removed ) - consider it as deletion and mark also.
			Add "( Removed )"
			*/
			if hist.tcmt[$$^MSG(3202) set STMDSC=$$^MSG(3202,STMDSC)
		}
		
		set TCMT=hist.tcmt
		/*
		If the transaction does not contain both "[" and "]",
		then return the transaction comment.  Otherwise return
		"Account Maintenance".  Example: [DEP]ELIGBPAY::1
		*/

		if '((TCMT["[")&(TCMT["]")) set STMDSC=TCMT
		// Account Maintenance
		else  set STMDSC=$$^MSG(5106)
		set STMDSC=STMDSC.extract(1,40)
		}

	if STMDSC(ETC).data() set STMDSC=STMDSC(ETC) do STMDSCX(.hist) quit 

	// If a DDA withdrawal transaction, return check number
	if STMDSC="" do {
		// SELECT DDA from PRODCTL
		type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:acn.type")

		if 'hist.itc1,hist.itc3,prodctl.dda do { 
			// Transaction Source of Funds
			set X=hist.tso
			if X'["CK#" quit
			set X=$$FIELD^UTSO(X,"CK")
			if X="" quit
			// Check Paid #~p1
			set STMDSC=$$^MSG(5481,X)
			}
		}

	// If an ATM transaction, return the ATM address
	if STMDSC="" do {
		if ARRAY("ATM").get()=""!(ARRAY("AD1").get()="") quit 
		set STMDSC=STMDSC_ARRAY("AD1").get()_""_ARRAY("CITY").get()
		}


	// If loan payment transaction, return payment date

	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
	
	if STMDSC="",acn.cls="L",trn.pcfl9 do { quit
		// Payment for ~p1  ~p2
		set STMDSC=$$^MSG(5482,$$DAT^%ZM(hist.ptd)) 
		}

	// Update description from instructions found at tran code level
	if STMDSC="" do {
		set X=$ascii(hist.itc9) if X'>0 set X=0
		if (X\1)#2,hist.tlo'="" set STMDSC=hist.tlo_","
		if (X\2)#2,hist.tso'="" set STMDSC=STMDSC_hist.tso_","
		if (X\4)#2,hist.tcmt'="" set STMDSC=STMDSC_hist.tcmt_","
		if (X\8)#2,hist.spr'="" set STMDSC=STMDSC_hist.spr_","
		if STMDSC.extract(STMDSC.length())="," set STMDSC=STMDSC.extract(1,STMDSC.length()-1)
		}

	if STMDSC="" do {
		set STMDSC=trn.prdes
		if STMDSC="" set STMDSC=trn.des
		set STMDSC(ETC)=STMDSC
		}

	// Add word "Reversal" to the description of this is a reversal
	do STMDSCX(.hist)

	// Truncate to data field length
	set STMDSC=STMDSC.extract(1,40)

	quit


STMDSCX(RecordHIST hist)	// Modify statement description if a reversal

	type Public String STMDSC

	// ~p1 (Reversal)
	if hist.tamt<0 set STMDSC=$$^MSG(5483,STMDSC)

	quit


EFTDSC(Number CID,Number TSEQ)  // Returns Transaction description for Electronic Transfer else NULL

	type String EFTDSC,EFTTYPE,P1,P2,P3,STATUS,TSO,TSOSEQ
	type Number ACCTYPE,FCID,P4

	set EFTDSC=""

	if 'Db.isDefined("HIST","CID,TSEQ") quit EFTDSC
	type RecordHIST fHIST=Db.getRecord("HIST","CID,TSEQ")

	set TSO=fHIST.tso
	set TSOSEQ=$$FIELD^UTSO(TSO,"SEQ")
	if TSOSEQ="" quit EFTDSC

	set FCID=$$FIELD^UTSO(TSO,"FCID")

	if 'Db.isDefined("EFTPAY","CID=:FCID,SEQ=:TSOSEQ") quit EFTDSC

	type RecordEFTPAY fEFTPAY=Db.getRecord("EFTPAY","CID=:FCID,SEQ=:TSOSEQ")

	set STATUS=fEFTPAY.status
	set EFTTYPE=fEFTPAY.efttype

	// Requested
	set P1=$$^MSG(5352)

	// The history for Cancel,Reject,Delete of EFTPAY does not have TSO-SEQ. Hence the function returns null. 
	// Only transfer completed EFT transaction entry has external transaction code in the HIST global.
	// Only processed and completed EFT transaction can be canceled.
	// Completed
	if ((STATUS="C")!(STATUS="CA"))&(fHIST.etc'="") S P1=$E($$^MSG(3267),1,9)
	
	// Recipient Institution
	set P2=$$XINSTNAM^PROCOMP(fEFTPAY.recinst)	;EFTPAY.INSTNAM
	set P3=""
	
	// Account number
	set P4=fEFTPAY.cid
	
	if FCID=CID do {

		// Account type
		set ACCTYPE=fEFTPAY.rectype
		if ACCTYPE'="" do {
			type RecordUTBLEXTYP rs=Db.getRecord("UTBLEXTYP","ACCTYPE")
			set P3=rs.des
			}

		// ~p1 transfer to ~p2 ~p3 account ~p4
		if (EFTTYPE="PO")!(EFTTYPE="SPO") set EFTDSC=$$^MSG(5169,P1,P2,P3,P4)

		// ~p1 transfer from ~p2 ~p3 account ~p4
		else  if (EFTTYPE="CO")!(EFTTYPE="SCO") set EFTDSC=$$^MSG(5170,P1,P2,P3,P4)
		}
	else  do {

		// Account type
		set ACCTYPE=fEFTPAY.rectype
		if ACCTYPE'="" do {
			type String CLS,GRP
			type RecordDEP dep=Db.getRecord("DEP","FCID")
			set GRP=dep.grp
			set CLS=dep.cls
			type RecordSTBLGRP rs=Db.getRecord("STBLGRP","GRP=:GRP,CLS=:CLS")
			set P3=rs.des
			}

		// ~p1 transfer from ~p2 ~p3 account ~p4
		if (EFTTYPE="PO")!(EFTTYPE="SPO") set EFTDSC=$$^MSG(5170,P1,P2,P3,FCID)
		
		// ~p1 transfer to ~p2 ~p3 account ~p4
		else  if (EFTTYPE="CO")!(EFTTYPE="SCO") set EFTDSC=$$^MSG(5169,P1,P2,P3,FCID)	
		}
	quit EFTDSC

	
ACH(STMT,CID,FCID)	// Generate ACH Statement Description 
	/*
	  ARGUMENTS:
		. STMT		Statement Description Data
		. CID		History Account Number (HIST.CID)
		. FCID		Originating Account Number (Payment System only)
	 
	----------------------------------------------------------------------
	The data fields and text translations have been hard-coded so that
	the project could be tested at 7 fields prior to making the changes
	in core.
	STMT#Section^MsgNum^SecCode^InstNum^RecType^AcctNum
	5169: ~p1 transfer to ~p2 ~p3 account ~p4
	5170: ~p1 transfer from ~p2 ~p3 account ~p4
	
	GTM>W $$ACH^STMDBS("STMT#ACH^5170^WEB^1226^1^123")
	Internet transfer from Sanchez Computer Associates checking account 123
	*/

	type String GRP,MSG,RECTYPE,SEC
	type Number MSGNUM,RECACCT,RECINST
	
	set MSGNUM=STMT.piece("^",2) quit:MSGNUM="" ""
	set SEC=STMT.piece("^",3)
	set RECINST=STMT.piece("^",4)
	set RECTYPE=STMT.piece("^",5)
	set RECACCT=STMT.piece("^",6)
	set GRP=""

	// Onus Recipient Account swap account info
	// Payment System stores same STMT info for both sides
	if RECACCT=CID,'FCID.get().isNull() do {
		set MSGNUM=$S(MSGNUM=5169:5170,1:5169)
		set RECACCT=FCID
		type RecordACN acn=Db.getRecord("ACN","CID=:FCID")
		set GRP=acn.grp
		}
	else  if 'RECTYPE.isNull() do {
		type RecordUTBLEXTYP extyp=Db.getRecord("UTBLEXTYP","ACCTYP=:RECTYPE",1)
		set GRP=extyp.grp
		}

	// Need to translate code to text for SEC, RECINST.
	if 'RECINST.isNull() do {
		type RecordUTBLEFTINST eftinst=Db.getRecord("UTBLEFTINST","KEY=:RECINST",1)
		set RECINST=eftinst.nam
		}

	// 5352 - Requested
	// 5875 - Internet
	// 5876 - Telephone
	set SEC=$S(SEC="PPD":$$^MSG(5352),SEC="WEB":$$^MSG(5875),SEC="TEL":$$^MSG(5876),1:SEC)
	
	set MSG=$$^MSG(MSGNUM,SEC,RECINST,GRP,RECACCT)
	
	quit MSG
	

	//----------------------------------------------------------------------
TRNDSCL(CID,TSEQ,TRNCL)	// Assignment expression for column HIST.TRNDSCL 
	/*
	Transaction Description - Long 
	
	Arguments: 
	. CID		Account number		/TYP=N/REQ/MECH=VAL
	
	. TSEQ		History transaction 	/TYP=N/REQ/MECH=VAL
	 		sequence
	 
	. TRNCL		Truncate length		/TYP=N/NOREQ/MECH=VAL
			Indicates the length that the value will
			be truncated.  Default equals 120 characters.
	----------------------------------------------------------------------
	*/
	
	type String TRNDSC
	
	do TRNDSC(1)
	
	// Default equals 120 characters
	if 'TRNCL.get() set TRNCL=120
	
	quit TRNDSC.extract(1,TRNCL)
	

vSIG()	quit "60625^58148^Lakshmi Giridharan^15486"	// Signature - LTD^TIME^USER^SIZE
