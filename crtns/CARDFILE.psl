CARDFILE(RecordCRD crd, String vpar, Boolean vparNorm) // CRD - ATM Card File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (55)             08/27/2007
	// Trigger Definition (12)                     09/21/2006
	// Journal File Definition (6)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crd.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(crd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CRDTYP = crd.crdtyp
	type String CRDNUM = crd.crdnum

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CRDTYP").exists()!vx("CRDNUM").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRD","CRDTYP = :crd.crdtyp and CRDNUM = :crd.crdnum") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CRDTYP
	type public String CRDNUM

	type RecordCRD crd = Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
	if (%ProcessMode = 2) do {
		do crd.setMode(2)

		do CARDFILE(crd,vpar)
	}
	else  do VINDEX(crd)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRD crd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRD","CRDTYP = :crd.crdtyp and CRDNUM = :crd.crdnum") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crd)) S ^CARD(vobj(crd,-3),vobj(crd,-4))=vobj(crd)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.crd)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.crd) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRD crd

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.crd)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.crd)                  // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CARD(vobj(crd,-3),vobj(crd,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordCRD crd

	// Type local variables for access keys for defaults
	type public String CRDTYP
	type public String CRDNUM

	if crd.addrflg.isNull() set crd.addrflg = 0            // addrflg
	type public String TJD
	if crd.ord.isNull() set crd.ord = TJD                  // ord
	if crd.pincntrt.isNull() set crd.pincntrt = 0          // pincntrt
	if crd.pindel.isNull() set crd.pindel = 0              // pindel
	if crd.pinstat.isNull() set crd.pinstat = 0            // pinstat
	if crd.replace.isNull() set crd.replace = 0            // replace
	quit


vreqn // Validate required data items

	type public RecordCRD crd

	if crd.acn.isNull() do vreqerr("ACN") quit
	if crd.addrflg.isNull() do vreqerr("ADDRFLG") quit
	if crd.pincntrt.isNull() do vreqerr("PINCNTRT") quit
	if crd.pindel.isNull() do vreqerr("PINDEL") quit
	if crd.replace.isNull() do vreqerr("REPLACE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRD crd

	if crd.crdtyp.isNull() do vreqerr("CRDTYP") quit
	if crd.crdnum.isNull() do vreqerr("CRDNUM") quit

		if vx("ACN").exists(),crd.acn.isNull() do vreqerr("ACN") quit
		if vx("ADDRFLG").exists(),crd.addrflg.isNull() do vreqerr("ADDRFLG") quit
		if vx("PINCNTRT").exists(),crd.pincntrt.isNull() do vreqerr("PINCNTRT") quit
		if vx("PINDEL").exists(),crd.pindel.isNull() do vreqerr("PINDEL") quit
		if vx("REPLACE").exists(),crd.replace.isNull() do vreqerr("REPLACE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRD","MSG",1767,"CRD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCRD crd
	if 'crd.acn.isNull() set vfkey("^CIF("_""""_crd.acn_""""_","_1_")")="CRD(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCRD crd
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":crd.acn") set vERRMSG = $$^MSG(8563,"CRD(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("EXPDT").exists() do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("EXPDT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MZIP").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("REPLACE").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STAT").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCRD crd
	do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(crd,.vx(),1,"|") quit
	if vx("PINCNTRT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PINDEL").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("REPLACE").exists()!vx("RPLCRD").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(crd,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordCRD crd

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with card holder
		   mailing address.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(crd.mcntry, crd.mstate, crd.mzip)
	if ER.get() do Runtime.setErrMSG("CRD", 3333, RM)

	quit

vau1 // Trigger AFTER_UPDATE - After Update Remove Old DAYENDCRDEXP 

	do vad1

	quit

vad1 // Trigger AFTER_UPDATE - After Update Remove Old DAYENDCRDEXP 

	type public RecordCRD crd
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	

	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC,SAVACN
	type public String CRDNUM,CRDTYP
	type Date EXPDT,OLDEXP,REXPDT,RCRDDT
	type Number AC
	type String CRDEXP,DATA,DTTIME

	if (crd.expdt.oldVal'=crd.expdt) do {
		set CRDEXP="CRDEXP"
		set OLDEXP=crd.expdt.oldVal
		if 'crd.expdt.isNull() do {
			type RecordCRDTYP crdtyp=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP",1)
			if crdtyp.getMode() do {
				set DATA=crdtyp.rnwroff_"|"_crdtyp.rnwoff
				}
			set EXPDT=crd.expdt
			set REXPDT=EXPDT-DATA.piece("|",1)
			set RCRDDT=EXPDT-DATA.piece("|",2)
			
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM")
			set crd.rexpdt=REXPDT
			set crd.rcrddt=RCRDDT
			do crd.bypassSave()
			}
		if OLDEXP="" quit 
		}
	
	quit:CUVAR.cmsacopt'=1	
	set DTTIME=%SystemDate_" "_%CurrentTime
	if SAVACN.get().isNull() quit 
	if NEXTSEQ.get().isNull() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	set AC=0 if AC'=SVAC.get() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	if AC=SVAC.get() quit
	set SVAC=AC
	
	type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
	if cmsact1.getMode() kill SAVACN quit	
	
	type RecordCMSACT cmsact=Class.new("RecordCMSACT")
	set cmsact.seq=NEXTSEQ
	set cmsact.crdtyp=CRDTYP
	set cmsact.crdnum=CRDNUM
	set cmsact.acn=SAVACN
	set cmsact.ac=AC
	set cmsact.dttime=DTTIME
	do cmsact.save()
	
	quit 

vau2 // Trigger AU_ALL - AFTER_UPDATE

	type public RecordCRD crd
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC
	type public String CRDNUM,CRDTYP
	type Number AC
	type String DTTIME
	
	quit:CUVAR.cmsacopt'=1	
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	if ACN.get().isNull() do { quit:ER
		//set ACN=Db.getOneRow("ACN","CRD","CRDTYP,CRDNUM") quit:ER 
		type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd.getMode() set ACN=crd.acn
		}
		
	if NEXTSEQ.get().isNull() do { quit:ER 
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
   		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	set AC=0 
	if AC'=SVAC.get() do { quit:ER 
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	if AC=SVAC.get() quit
	set SVAC=AC
	
	type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
	if cmsact1.getMode() quit
	
	type RecordCMSACT cmsact=Class.new("RecordCMSACT")
	set cmsact.seq=NEXTSEQ
	set cmsact.crdtyp=CRDTYP
	set cmsact.crdnum=CRDNUM
	set cmsact.acn=ACN
	set cmsact.ac=AC
	set cmsact.dttime=DTTIME
	do cmsact.save()
	
	quit 

vau3 // Trigger AU_MZIP - After Update of ZIP Code

	type public RecordCRD crd

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with card holder
		   mailing address.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(crd.mcntry, crd.mstate, crd.mzip)
	if ER.get() do Runtime.setErrMSG("CRD", 3333, RM)

	quit

vau4 // Trigger AU_REPLACE - AFTER_UPDATE Replace

	type public RecordCRD crd
	/*
	---- Revision History---------------------------------------------------------

	 12/12/05 - SPR - 18555
	   	    Card Management - General DBI3 system area cleanup.
		   
	-----------------------------------------------------------------------
	*/

	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC
	type public String CRDNUM,CRDTYP,NCRDNUM,RM
	type Number AC
	type String DTTIME,OCRDNUM
	
	if crd.replace'=1 quit 
	
	// Generate replacement card
	set OCRDNUM=crd.crdnum
	do EXEC^RPLCRD(OCRDNUM,CRDTYP,crd.acn)
	if 'RM.get().isNull() set ER=1 quit          // cpb 03/10/00
	
	// Create entry in the action file 
	quit:CUVAR.cmsacopt'=1	
	set DTTIME=%SystemDate_" "_%CurrentTime
	if NEXTSEQ.isNull() do { quit:ER 
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	set AC=12 
	if AC'=SVAC.get() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	if AC=SVAC.get() quit
	set SVAC=AC
	
	type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
	if cmsact1.getMode() quit

	type RecordCMSACT cmsact=Class.new("RecordCMSACT")
	set cmsact.seq=NEXTSEQ
	set cmsact.crdtyp=CRDTYP
	set cmsact.ocrdnum=CRDNUM
	set cmsact.crdnum=NCRDNUM
	set cmsact.acn=ACN
	set cmsact.ac=AC
	set cmsact.dttime=DTTIME
	do cmsact.save()
	
	quit 

vau5 // Trigger AU_STAT - AFTER UPDATE Card Status

	type public RecordCRD crd
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
	   	    Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC
	type public String CRDNUM,CRDTYP,NCRDNUM,RM
	type Number AC
	type String DTTIME
	
	quit:CUVAR.cmsacopt'=1	
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	if ACN.get().isNull() do { quit:ER 
		type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd.getMode() set ACN=crd.acn
		}
		
	if NEXTSEQ.get().isNull() do { quit:ER 
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	set AC=13 
	if AC'=SVAC.get() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
								if AC=SVAC.get() quit
								set SVAC=AC
	
	type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
	if cmsact1.getMode() quit
	
	type RecordCMSACT cmsact=Class.new("RecordCMSACT")
	set cmsact.seq=NEXTSEQ
	set cmsact.crdtyp=CRDTYP
	set cmsact.crdnum=CRDNUM
	set cmsact.acn=ACN
	set cmsact.ac=AC
	set cmsact.dttime=DTTIME
	do cmsact.save()
	
	quit 

vbd1 // Trigger BEFORE_DELETE - Before Delete

	type public RecordCRD crd
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Number ACN,SAVACN
	type public String CRDNUM,CRDTYP
	
	if ACN.get().isNull() do {
		type RecordCRD crd =Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd.getMode() set SAVACN=crd.acn
		}
		
	else  set SAVACN=ACN
	
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert of a New Card

	type public RecordCRD crd
	/*
	---- Revision History --------------------------------------------------------
	
	02/17/06- SPR - 19590
		  Modified this trigger to change the atmopt in CUVAR set to "0" 
		  and create another ard for the same cif. It will throw the error
		  message " Customer/Account number already linked to card number".
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ,NOACT,SVAC
	type public String CRDNUM,CRDTYP,DATA,NCRDNUM,RM
	type Number AC,ATMOPT,XACN
	type Date EXPDT,OTD
	type String DATA1,DTTIME,EXP,TRM,XNUM,XTYP

	type RecordCRDTYP crdtyp=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP",1)
	if crdtyp.getMode() set DATA1=crdtyp.rnwroff_"|"_crdtyp.rnwoff

	set EXPDT=crd.expdt
	if 'EXPDT.isNull(),EXPDT>0 do {
		set crd.rexpdt=EXPDT-DATA1.piece("|",1)
		set crd.rcrddt=EXPDT-DATA1.piece("|",2)
		}
		
	set ATMOPT=CUVAR.atmopt	
		
	if ATMOPT=1,NOACT.get()'=1 do {
		set DTTIME=%SystemDate_" "_%CurrentTime
		set ACN=crd.acn
		if NEXTSEQ.get().isNull() do { quit:ER 
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			} 
			
		set AC=10 
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if AC=SVAC.get() quit
		
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CRDTYP
		set cmsact.crdnum=CRDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.save()
		
		set SVAC=AC
		}
		
	set DTTIME=%SystemDate_" "_%CurrentTime
	if crd.pingen=2,crd.pinstat=3 do {
		if NEXTSEQ.get().isNull() do { quit:ER 
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			} 
			
		set crd.pingen=0
		quit:CUVAR.cmsacopt'=1	
		set AC=5 
		
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if AC=SVAC.get() quit
		
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT")
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CRDTYP
		set cmsact1.crdnum=CRDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.save()
		
		set SVAC=AC
		}
	
	set OTD=crd.ord 
	set TRM=crd.term
	if 'TRM.isNull() set EXP=$$EXT^UMDT(TRM,OTD) quit:ER 
	set ATMOPT=CUVAR.atmopt
	
	if ATMOPT'=0 quit 
	
	set XACN=crd.acn
		
	// Invalid CIF ~p1
	type RecordCIF cif=Db.getRecord("CIF","ACN=:XACN",1)
	if 'cif.getMode() do Runtime.setErrMSG("CRD",7575) quit
	
	/*
	Since ATM opt is set to 0, the existance of any card records for
	this CIF indicates that we should not allow another entry.
	*/
	
	if ATMOPT=0 do { quit:ER
		
		type ResultSet rs=Db.select("CRDTYP,CRDNUM","CRD","ACN=:XACN") 
		if rs.next() do {
																								set XTYP=rs.getCol("CRDTYP")
																								set XNUM=rs.getCol("CRDNUM")
			
			// Customer/Account ~p1 already linked to card ~p2 ~p3
        		do Runtime.setErrMSG("CRD",8387,"XCID~XTYP~XNUM") quit
			}
			
		}

	set SVAC=AC.get()
	
	quit

vbu1 // Trigger BU_PINCNTRT - Before Update PINCNTRT

	type public RecordCRD crd
	do crd.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC
	type public String CRDNUM,CRDTYP
	type Number AC
	type String DTTIME
		
	if crd.pincntrt=1 do { 
		
		set crd.pincntrt=0
		quit:CUVAR.cmsacopt'=1	
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		if ACN.get().isNull() do {
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			}
			
		if NEXTSEQ.get().isNull() do { quit:ER 
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			 
		set AC=14 
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if AC=SVAC.get() quit
		set SVAC=AC
		
		type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact1.getMode() quit
		
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CRDTYP
		set cmsact.crdnum=CRDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.save()
		}
		
	quit 

vbu2 // Trigger BU_PINDEL - Before Update PINDEL

	type public RecordCRD crd
	do crd.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC
	type public String CRDNUM,CRDTYP
	type Number AC
	type String DTTIME
	
	if crd.pindel=1 do {
		set crd.pinstat=0
		quit:CUVAR.cmsacopt'=1	 
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		if ACN.get().isNull() do { quit:ER 
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			}
			
		if NEXTSEQ.get().isNull() do { quit:ER 
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		set AC=17 
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if AC=SVAC.get() quit
		set SVAC=AC
		
		type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact1.getMode() quit
	
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CRDTYP
		set cmsact.crdnum=CRDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.save()
		}
		
	quit 
	

vbu3 // Trigger BU_PINSTAT - Before Update

	type public RecordCRD crd
	do crd.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	

	type public Boolean ER
	type public Number ACN,NEXTSEQ,SVAC
	type public String CRDNUM,CRDTYP
	type Number AC
	type String DTTIME,ENCPIN,PINTLO
	
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	if crd.pingen=1,crd.pinstat=3 do {
		
		if NEXTSEQ.get().isNull() do { quit:ER 
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			} 
		set crd.pingen=0
		quit:CUVAR.cmsacopt'=1	
		if ACN.get().isNull() do { quit:ER 
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			} 
		
		type RecordCRD crd = Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd.getMode() do { quit:ER
			 set PINTLO=crd.pintlo
			}
			
		type RecordCRD crd1 = Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd1.getMode() do { quit:ER
			 set ENCPIN=crd1.encpin
			}
			
		set AC=4 
		if ACN.get().isNull() do { quit:ER 
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			}
			
																if AC=SVAC.get() quit
																set SVAC=AC
															 
																type RecordCMSACT cmsact1=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact1.getMode() quit
		
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CRDTYP
		set cmsact.crdnum=CRDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.encpin=ENCPIN
		set cmsact.tlo=PINTLO
		set cmsact.dttime=DTTIME
		do cmsact.save()
		}
		
	if crd.pingen=2,crd.pinstat=3 do {
		set crd.pingen=0
		quit:CUVAR.cmsacopt'=1	
		if ACN.get().isNull() do { quit:ER 
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			}
			
		if NEXTSEQ.get().isNull() do { quit:ER 
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
      			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			 
		set AC=5 
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
																if AC=SVAC.get() quit
																set SVAC=AC
															 
																type RecordCMSACT cmsact=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact.getMode() quit
		
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT")
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CRDTYP
		set cmsact1.crdnum=CRDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.save()
		}
		
	quit 

vbu4 // Trigger BU_REPLACE - Before Update Replace

	type public RecordCRD crd
	do crd.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN
	type public String CRDTYP,CRDNUM,NCRDNUM,OCRDNUM
	type Number AC
	
	if crd.replace'=1 quit 
	
	// Generate replacement card number
	set OCRDNUM=crd.crdnum
	if ACN.get().isNull() do { quit:ER 
		type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd.getMode() set ACN=crd.acn
		}
	set NCRDNUM=$$^CRDNUMGN(CRDTYP,ACN,CRDNUM,1)
	set CRDNUM=OCRDNUM
	set crd.rplcrd=NCRDNUM
	
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRD crd

	if crd.crdtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CRDTYP", vRM) quit
	if crd.crdnum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CRDNUM", vRM) quit
	set X = crd.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	if '("01"[crd.ADDRFLG) set vRM=$$^MSG(742,"L") do vdderr("ADDRFLG", vRM) quit
	set X = crd.anvdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ANVDT", vRM) quit
	set X = crd.atmlmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.ATMLMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crd.atmtwtld if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.ATMTWTLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crd.caracc if 'X.isNull(),'Db.isDefined("STBLCRDACC","X") set vRM = $$^MSG(1485,X) do vdderr("CARACC", vRM) quit
	set X = crd.co if 'X.isNull(),'Db.isDefined("UTBLCO","X") set vRM = $$^MSG(1485,X) do vdderr("CO", vRM) quit
	if crd.crdcat.length()>4 set vRM = $$^MSG(1076,4) do vdderr("CRDCAT", vRM) quit
	if crd.crdhld.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CRDHLD", vRM) quit
	set X = crd.crdpl if 'X.isNull(),'Db.isDefined("UTBLCRDPL","X") set vRM = $$^MSG(1485,X) do vdderr("CRDPL", vRM) quit
	set X = crd.csblmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.CSBLMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crd.csbtwtld if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.CSBTWTLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if crd.cvv.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CVV", vRM) quit
	if crd.cvv2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CVV2", vRM) quit
	set X = crd.embopt if 'X.isNull(),'Db.isDefined("STBLCMSEMB","X") set vRM = $$^MSG(1485,X) do vdderr("EMBOPT", vRM) quit
	if crd.encpin.length()>200 set vRM = $$^MSG(1076,200) do vdderr("ENCPIN", vRM) quit
	set X = crd.expdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPDT", vRM) quit
	set X = crd.feecid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("FEECID", vRM) quit
	set X = crd.feewaive if 'X.isNull(),'Db.isDefined("UTBLWFEE","X") set vRM = $$^MSG(1485,X) do vdderr("FEEWAIVE", vRM) quit
	set X = crd.hldnet if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDNET", vRM) quit
	set X = crd.hldnon if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDNON", vRM) quit
	set X = crd.invldcnt if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("INVLDCNT", vRM) quit
	set X = crd.invlddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INVLDDT", vRM) quit
	set X = crd.isdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISDT", vRM) quit
	set X = crd.lmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.LMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if crd.mad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD1", vRM) quit
	if crd.mad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD2", vRM) quit
	if crd.mad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD3", vRM) quit
	if crd.mad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD4", vRM) quit
	if crd.mcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MCITY", vRM) quit
	set X = crd.mcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("MCNTRY", vRM) quit
	if crd.mstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MSTATE", vRM) quit
	if crd.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	set X = crd.ord if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ORD", vRM) quit
	if '("01"[crd.PINCNTRT) set vRM=$$^MSG(742,"L") do vdderr("PINCNTRT", vRM) quit
	if '("01"[crd.PINDEL) set vRM=$$^MSG(742,"L") do vdderr("PINDEL", vRM) quit
	set X = crd.pingen if 'X.isNull(),'Db.isDefined("STBLCMSPGEN","X") set vRM = $$^MSG(1485,X) do vdderr("PINGEN", vRM) quit
	set X = crd.pinind if 'X.isNull(),'Db.isDefined("STBLPININD","X") set vRM = $$^MSG(1485,X) do vdderr("PININD", vRM) quit
	set X = crd.pinstat if 'X.isNull(),'Db.isDefined("STBLCMSPSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("PINSTAT", vRM) quit
	if crd.pintlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PINTLO", vRM) quit
	if crd.pinuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PINUID", vRM) quit
	set X = crd.poslmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.POSLMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crd.postwtld if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.POSTWTLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = crd.rcrddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RCRDDT", vRM) quit
	if '("01"[crd.REPLACE) set vRM=$$^MSG(742,"L") do vdderr("REPLACE", vRM) quit
	set X = crd.retrycnt if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RETRYCNT", vRM) quit
	set X = crd.retrydt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RETRYDT", vRM) quit
	set X = crd.rexpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REXPDT", vRM) quit
	if crd.rplcrd.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RPLCRD", vRM) quit
	set X = crd.stat if 'X.isNull(),'Db.isDefined("STBLCRDSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
	if crd.term.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TERM", vRM) quit
	set X = crd.tld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TLD", vRM) quit
	set X = crd.twtld if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CRD.TWTLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRD","MSG",979,"CRD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCRD crd)	//CRD Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="O" do {
			if EFD.get() do {
				do vj5(.crd)	// Mode=D Tran=O EFD=E Seq=1 JRNID=HIST_D
				}
			else  do {
				do vj2(.crd)	// Mode=D Tran=O EFD=N Seq=1 JRNID=CRDHIST_D
				do vj5(.crd)	// Mode=D Tran=O EFD=N Seq=1 JRNID=HIST_D
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="O" do {
			if EFD.get() do {
				do vj6(.crd)	// Mode=I Tran=O EFD=E Seq=1 JRNID=HIST_I
				}
			else  do {
				do vj1(.crd)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CMSRECCRD
				do vj3(.crd)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CRDHIST_I
				do vj6(.crd)	// Mode=I Tran=O EFD=N Seq=1 JRNID=HIST_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj4(.crd)	// Mode=U Tran=B EFD=N Seq=1 JRNID=CRDHIST_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.crd)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CMSRECCRD
				do vj4(.crd)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CRDHIST_U
				}
			}
		}

	quit


vj1(RecordCRD crd)	// CMSRECCRD  Table CMSRECCRD  Adds CMSREC entry for new/mod. card rec.

	type Public String %O
	type String vlastkey
	set vlastkey=Db.nextVal("CMSRECCRD","")
	type RecordCMSRECCRD cmsreccrd=Db.getRecord("CMSRECCRD","SEQ=:vlastkey",1)
	set cmsreccrd.acn=crd.acn
	set cmsreccrd.crdnum=crd.crdnum
	set cmsreccrd.crdtyp=crd.crdtyp
	set cmsreccrd.mode=%O

	do cmsreccrd.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCRD crd)	// CRDHIST_D  Table CRDHIST  Adds CRDHIST entry for deleted card rec.

	type Public String %UID,TJD,TLO
	type String v1,v2,vlastkey
	set v1=crd.crdtyp
	set v2=crd.crdnum
	set vlastkey=Db.nextVal("CRDHIST","CRDTYP=:v1,CRDNUM=:v2")
	type RecordCRDHIST crdhist=Db.getRecord("CRDHIST","CRDTYP=:v1,CRDNUM=:v2,HSEQ=:vlastkey",1)
	set crdhist.tcmt=$$^MSG(3028,"Card")
	set crdhist.time=$P($H,",",2)
	set crdhist.tjd=TJD
	set crdhist.tlo=TLO
	set crdhist.uid=%UID

	do crdhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordCRD crd)	// CRDHIST_I  Table CRDHIST  Adds CRDHIST entry for new card record

	type Public String %UID,TJD,TLO
	type String v1,v2,vlastkey
	set v1=crd.crdtyp
	set v2=crd.crdnum
	set vlastkey=Db.nextVal("CRDHIST","CRDTYP=:v1,CRDNUM=:v2")
	type RecordCRDHIST crdhist=Db.getRecord("CRDHIST","CRDTYP=:v1,CRDNUM=:v2,HSEQ=:vlastkey",1)
	set crdhist.tcmt=$$^MSG(6712,"Card")
	set crdhist.time=$P($H,",",2)
	set crdhist.tjd=TJD
	set crdhist.tlo=TLO
	set crdhist.uid=%UID

	do crdhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordCRD crd)	// CRDHIST_U  Table CRDHIST  Adds CRDHIST entry for a mod. card rec.

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%UID,TJD,TLO
		type String v1,v2,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=crd.crdtyp
		set v2=crd.crdnum
		set vlastkey=Db.nextVal("CRDHIST","CRDTYP=:v1,CRDNUM=:v2")
		type RecordCRDHIST crdhist=Db.getRecord("CRDHIST","CRDTYP=:v1,CRDNUM=:v2,HSEQ=:vlastkey",1)
		set crdhist.tcmt=$$TCMTFM^ACNFUNCS("","CRD",vdi,vold,vnew)
		set crdhist.time=$P($H,",",2)
		set crdhist.tjd=TJD
		set crdhist.tlo=TLO
		set crdhist.uid=%UID

		do crdhist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj5(RecordCRD crd)	// HIST_D  Table CIFH  Card Insert journal file

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crd.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","CRD","CRDNUM",crd.crdtyp_"-"_crd.crdnum,$$^MSG(805))
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj6(RecordCRD crd)	// HIST_I  Table CIFH  Card Insert journal file

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crd.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","CRD","CRDNUM",crd.crdtyp_"-"_crd.crdnum,$$^MSG(7131))
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordCRD crd) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("ACN").exists() do vi1(.crd)
		if vx("ANVDT").exists() do vi3(.crd)
		if vx("EXPDT").exists() do vi4(.crd)
		if vx("RCRDDT").exists() do vi5(.crd)
		if vx("REXPDT").exists() do vi6(.crd)
		if vx("EXPDT").exists() do vi7(.crd)
	}
	do vi1(.crd)
	do vi2(.crd)
	do vi3(.crd)
	do vi4(.crd)
	do vi5(.crd)
	do vi6(.crd)
	do vi7(.crd)

	quit
	

vi1(RecordCRD crd) // Maintain CIFCRD index entries (CIF/Card Cross-Reference)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = crd.acn
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = crd.crdtyp
	type String v4 = crd.crdnum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^CIF(v1,"114",v3,v4)) do vidxerr("CIFCRD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^CIF(v1,"114",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ACN").exists() set v1=vx("ACN").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^CIF(v1,"114",v3,v4)
	#ENDBYPASS
	quit

vi2(RecordCRD crd) // Maintain CRDNUM index entries (Card Index by Card Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = crd.crdnum
	type String v2 = crd.crdtyp

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^CRDNUM(v1,v2)) do vidxerr("CRDNUM")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^CRDNUM(v1,v2)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^CRDNUM(v1,v2)
	#ENDBYPASS
	quit

vi3(RecordCRD crd) // Maintain DAYENDCRDANV index entries (DAYEND Card Index by Anniv. )

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = crd.anvdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = crd.crdtyp
	type String v4 = crd.crdnum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^DAYEND(v1,"CRDANV",v3,v4)) do vidxerr("DAYENDCRDANV")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"CRDANV",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ANVDT").exists() set v1=vx("ANVDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"CRDANV",v3,v4)
	#ENDBYPASS
	quit

vi4(RecordCRD crd) // Maintain DAYENDCRDEXP index entries (DAYEND Card Index by Exp. Dt.)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = crd.expdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = crd.crdtyp
	type String v4 = crd.crdnum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^DAYEND(v1,"CRDEXP",v3,v4)) do vidxerr("DAYENDCRDEXP")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"CRDEXP",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXPDT").exists() set v1=vx("EXPDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"CRDEXP",v3,v4)
	#ENDBYPASS
	quit

vi5(RecordCRD crd) // Maintain DAYENDRCRDDT index entries (Renewal Creation Date Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = crd.rcrddt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = crd.crdtyp
	type String v4 = crd.crdnum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^DAYEND(v1,"CRDRCRD",v3,v4)) do vidxerr("DAYENDRCRDDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"CRDRCRD",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("RCRDDT").exists() set v1=vx("RCRDDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"CRDRCRD",v3,v4)
	#ENDBYPASS
	quit

vi6(RecordCRD crd) // Maintain DAYENDREXPDT index entries (Expiry Report Date Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = crd.rexpdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = crd.crdtyp
	type String v4 = crd.crdnum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^DAYEND(v1,"CRDREXP",v3,v4)) do vidxerr("DAYENDREXPDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"CRDREXP",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("REXPDT").exists() set v1=vx("REXPDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"CRDREXP",v3,v4)
	#ENDBYPASS
	quit

vi7(RecordCRD crd) // Maintain ZEXPDT index entries (Expiration Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = crd.expdt
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = crd.crdtyp
	type String v4 = crd.crdnum

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CARD(vobj(crd,-3),vobj(crd,-4)))#2,'$D(^XCARD("EXPDT",v2,v3,v4)) do vidxerr("ZEXPDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XCARD("EXPDT",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXPDT").exists() set v2=vx("EXPDT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XCARD("EXPDT",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CRD")

	while ds.next() do {
		type RecordCRD crd=ds.getRecord("CRD")
		if vlist.contains("VINDEX") do VINDEX(.crd) quit
		if vlist.contains("CIFCRD") do vi1(.crd)
		if vlist.contains("CRDNUM") do vi2(.crd)
		if vlist.contains("DAYENDCRDANV") do vi3(.crd)
		if vlist.contains("DAYENDCRDEXP") do vi4(.crd)
		if vlist.contains("DAYENDRCRDDT") do vi5(.crd)
		if vlist.contains("DAYENDREXPDT") do vi6(.crd)
		if vlist.contains("ZEXPDT") do vi7(.crd)
	}

	quit


public VIDXBLD1(RecordCRD crd, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.crd) quit
	if vlist.contains("CIFCRD") do vi1(.crd)
	if vlist.contains("CRDNUM") do vi2(.crd)
	if vlist.contains("DAYENDCRDANV") do vi3(.crd)
	if vlist.contains("DAYENDCRDEXP") do vi4(.crd)
	if vlist.contains("DAYENDRCRDDT") do vi5(.crd)
	if vlist.contains("DAYENDREXPDT") do vi6(.crd)
	if vlist.contains("ZEXPDT") do vi7(.crd)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CRD","MSG",1225,"CRD."_di)

	quit


vkchged // Access key changed

	type public RecordCRD crd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CRDTYP").exists() set vux("CRDTYP") = vx("CRDTYP")
	if vx("CRDNUM").exists() set vux("CRDNUM") = vx("CRDNUM")
	do vkey(1) set voldkey = crd.crdtyp_","_crd.crdnum     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crd.crdtyp_","_crd.crdnum     // Copy new keys into object
	type RecordCRD vnewrec = crd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRD crd

	if vux("CRDTYP").exists() set crd.crdtyp = vux("CRDTYP").piece("|",i)
	if vux("CRDNUM").exists() set crd.crdnum = vux("CRDNUM").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordCRD crd
	type public String vpar

	do Db.delete("CRDGRP","CRDTYP=:crd.crdtyp AND CRDNUM=:crd.crdnum",vpar) // Cascade delete

	do Db.delete("CRDMEM","CRDTYP=:crd.crdtyp AND CRDNUM=:crd.crdnum",vpar) // Cascade delete

	do Db.delete("CRDNOT","CRDTYP=:crd.crdtyp AND CRDNUM=:crd.crdnum",vpar) // Cascade delete

	quit

VIDXPGM()	quit "CARDFILE"	// Location of index program

