I18NNRM //Normalization/UnNormalization
  /*
	ORIG: kumarb - 10/22/2005
	DESC: Normalization/UnNormalization

	I18N=QUIT     This program does not need to follow I18N standards
	DESC:		This is a program that contains utilities for thhe 
			normalization/unnormalization of a PROFILE phrasse
	 
			
	CALLED BY:	Menusystem. No other routines.
	CALL TO:      $$DI^SCATAB
			UTLREAD
			GETKEY^I18NUTL
			BLDMTB^I18NUTL
		 	I18NMTRA Screen program
	GLOBALS READ:
			I18NTS		- Tsets
	GLOBALS SET:
			I18NTS		- Tsets
			I18NEXT		- Header level for normalized phrases
					  Detail level for detail phrases
	ARGUMENTS:
	INPUTS:
	
	RETURNS:
	EXAMPLE:
	LIBRARY:
	
	---Revision History-------------------------------------------
	
	10/21/05 - KUMARB - CR 16921
        	Converted to PSL.
	
	--------------------------------------------------------------
	*/
	
	quit

public PHRTYP(String phr,Number dbtyp,String fi,String di)	// Assign Phrasetype
	/*	prh	Is the phrase being typed
		dbtyp	Is the DBTBL type
		fi	Is the file identifier
		di	Is the data item identifier
	*/
	
	type Number phrtyp,e
	type String quote
	
	if 'phr.exists() quit 0
	if 'dbtyp.exists() quit 0
	if 'fi.exists() set fi="UXFI"
	if 'di.exists() set di="UXDI"
	
	set phrtyp=0
	if phr.translate(" "_$C(9))?.NP quit 0
	if dbtyp=5,phr.extract()="@" quit 0
	if dbtyp=5,phr.extract(1,6)="<<RN>>" quit 0
	set quote="N"
	if (dbtyp=1),(fi="DBTBL1D") do {
		if (di="DES")!(di="RHD") do {
			if (phr.extract(1,1)=$C(34)),(phr.extract(phr.length())=$C(34)) set quote="Y"
			}
		}
		
	if (dbtyp=99),(fi="DBTBL1D") do {
		if (di="DES")!(di="RHD") do {
			if (phr.extract(1,1)=$C(34)),(phr.extract(phr.length())=$C(34)) set quote="Y"
			}
		}
	
	if quote="Y" quit 0
	// Only NTEs and nothing else
	set e=$$nnte(phr) quit:'e 0
	// Mixed bag
	if e=1 quit 11
	// Determine source of phrase
	set phrtyp=$$source(dbtyp,fi,di)
	// If it's a message, we're done
	if (phrtyp=6),(phr'["~p") set phrtyp=1 quit phrtyp
	// If it's a message, we're done
	if (phrtyp=6),(phr'["~P") set phrtyp=1 quit phrtyp
	// If UTLREAD prompt, done
	if phrtyp=4 quit phrtyp
	// Ditto for report headings
	if (phrtyp=2),(phr'["@") set phrtyp=1 quit phrtyp
	// As well as for prompts
	if phrtyp=3 do { quit phrtyp
		//   It's a phrase if there's no colon
		if phr.extract(phr.length())'=":" set phrtyp=1
		}
		
	quit 1
	
nnte(String p) //  Find out whether there are any non-NTEs.
	
	type Number i,nnte
	type String x
	
	if p'[">>" quit -1
	
	set x=p.piece("<<")
	if x'="",x.translate(" "_$C(9))'?.NP quit 1
	set nnte=0
	for i=2:1:p.length(">>") do { quit:nnte
		set x=(p.piece(">>",i)).piece("<<")
		if x.translate(" "_$C(9))?.NP quit
		if x.extract(1,2)'="<<" set nnte=1 quit
		}
		
	quit nnte
	
source(Number db,String fi,String di) //	Source
	
	if db=99,fi="STBLMSG",di="MESSAGE" quit 6
	if db=99,fi="STBLPROMPT",di="PROMPT" quit 4
	if db=1,fi="DBTBL1D",di="RHD" quit 2
	if (db=2)!(db=5) quit 3
	
	quit 0
	
public NRMPHR(String phr,Number phrtyp) // Do Normalization

	type Number i
	type String job,Nphr
	
	set Nphr=phr
	if 'phrtyp quit Nphr

	//type RecordSTBLI18NPT i18npt=Db.getRecord("STBLI18NPT","PTYPE=:phrtyp",1)
	//set jobseq=i18npt.desc
	//for i=1:1 set job=jobseq.piece(",",i) quit:job=""  do @job
	
	set job="N"_phrtyp
	if 'job.isNull() do @job
	
	quit Nphr
	
public UNNRMPHR(String Nphr,Number phrtyp) // Do UnNormalization

	type Number i
	type String job,jobseq,UNphr
	
	set UNphr=Nphr
	if 'phrtyp quit UNphr
		
	set job="UN"_phrtyp
	if 'job.isNull() do @job
	
	quit UNphr
	
N1	// Phrase Type = 1 ): Phrases

	type public String Nphr,phr
	
	type String x
	
	set x=$$rembl(phr),Nphr=$$upc(x)
	
	quit

N2	// Phrase Type = 2 ): Column Headings 

	type public String Nphr,phr
	
	type String x
	
	set phr=phr.translate("@"," ")
	set x=$$rembl(phr),Nphr=$$upc(x)
	
	quit
	
N3	// Phrase Type = 3 ): Colons 

	type public String Nphr,phr
	
	type String x
	
	set phr=phr.translate(":","")
	set x=$$rembl(phr),Nphr=$$upc(x)
	
	quit
	
N4	//	Messages from STBLPROMPT

	type public String Nphr,phr
	
	type String x
	
	set x=$$rembl(phr)
	if x["/DES" set x=$$getdes(x)
	set Nphr=$$upc(x)
	
	quit
	
N6	//	Messages with ~pn

	type public String Nphr,phr
	
	type String x
	
	set x=$$rembl(phr),Nphr=$$upc(x)
	
	quit
	
N11	//	Messages with NTE's

	type public String Nphr,phr
		
	set Nphr=$$rembl(phr)
	
	quit
	
UN1	// Phrase Type = 1 ): Normal Phrases 

	type public String Nphr,UNphr
	
	set UNphr=Nphr
	
	quit
	
UN2	// Phrase Type = 2 ): Column Headings 
	
	type public String Nphr
	
	type String UNphr
	
	if (Nphr.find(" ")>0) set UNphr=Nphr.piece(" ")_"@"_Nphr.piece(" ",2,Nphr.length(" "))
	else  set UNphr=Nphr
	
	quit
	
UN3	// Phrase Type = 3 ): Colons 

	type public String Nphr,UNphr
	
	set UNphr=Nphr_":"
	
	quit
	
	
UN4	// Phrase type = 4 ): STBLPROMPT for UTLREADS

	type public String Nphr,UNphr
	
	set UNphr=Nphr
	
	quit
	
UN6	// Messages with ~pn

	type public String Nphr,UNphr
	
	set UNphr=Nphr
	
	quit
	
UN11	// Message with NTE's

	type public String Nphr,UNphr
	
	set UNphr=Nphr
	
	quit
	
spc(Number l) // Spaces

	type String x
	type Number i
	
	set x=""
	for i=1:1:l set x=x_" " 
	
	quit x
	
lwc(String phr) // Change to Lowercase
	
	set phr=$$LOWER^%ZFUNC(phr)
	
	quit phr
	
upc(String phr) // Change to Uppercase 
	
	set phr=$$UPPER^%ZFUNC(phr)
	
	quit phr
	
rembl(String phr) //  Remove blanks.
	
	type Number i
	type String t,x

	set t="",phr=phr.translate($c(9)," ")
	for i=1:1:phr.length(" ") set x=phr.piece(" ",i) set:x'="" t=t_" "_x
	if t.extract()=" " set t=t.extract(2,t.length())
	
	quit t
	
slb(String phr) // Strip leading spaces 
	
	for  quit:(phr.extract()'=$C(9))!(phr.extract()'=" ")!(phr.length()=0)  set phr=phr.extract(2,phr.length())
	
	quit phr
	
stb(String phr) // Strip trailing spaces 
	
	for  quit:(phr.extract(phr.length())'=" ")  set phr=phr.extract(1,phr.length()-1)
	
	quit phr
	
sln(String phr,String w) // Strip leading numbers 
	
	set w=""
	for  quit:(phr.extract()'?.N)!(phr.length()=0)  set w=w_phr.extract(),phr=phr.extract(2,$L(phr))
	
	quit phr
	
public getdes(String phr,String tphr) // Strip out/in text from /keyword string
	//	phr=original phrase in ^STBL("PROMPT",?)
	//	tphr=translated phrase to be replaced back into ^STBL
	
	type Number begin,eos,i,end
	type String rphr
	
	set eos=0
	set begin=phr.find("/DES=")
	for i=begin:1 do { quit:eos=1
		if phr.extract(i)="" set eos=1,end=i-1 quit
		if phr.extract(i)="/" do {
			if phr.extract(i,i+4)="/LEN=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/TYP=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/HLP=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/TBL=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/PAT=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/XPP=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/XPR=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/MIN=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/MAX=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/DEC=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/REQ=" set eos=1,end=i-1 quit
			if phr.extract(i,i+5)="/PROT=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/SEC=" set eos=1,end=i-1 quit
			if phr.extract(i,i+4)="/REP=" set eos=1,end=i-1 quit
			}
		}
	if end=begin quit ""
	if begin>end quit ""
	if tphr.exists() do { quit rphr
		set rphr=phr.extract(1,begin-1)
		set rphr=rphr_tphr
		set rphr=rphr_phr.extract(end+1,999)
		quit ""
		}
	set phr=phr.extract(begin,end)
	quit phr
 #OPTION ResultClass ON
Public String vSIG()	quit "60233^23338^Balasubramonian Sankar^7032"	// Signature - LTD^TIME^USER^SIZE
