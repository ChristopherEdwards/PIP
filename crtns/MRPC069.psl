MRPC069(return, versn, idpf, params, efd, ctype)	//Public;Trans Anticipated Amounts Calc (Foreign Pmts)
	/*
	   ORIG: KARPIAKP - 04/09/98
	   DESC: Student Loan Status Conversions

	   KEYWORDS: MRPC

	   ARGUMENTS:
	   	. return   	null value is returned

	   	. versn    	version number   		/TYP=T/REQ
				         			/MECH=VAL

	   	. idpf        	Loan Status to be converted to  /TYP=N/REQ
	        	 					/MECH=VAL

	   	. params 	Input parameters tab separated 	/TYP=T/REQ
	     			All items numbered from 1 to 17 /MECH=VAL
	     			are separated with '|' and will
				be mapped on the local file
	     			definition LNICNV.
	   	- CID       1   Account Number
	   	- DIST1FRE  2   Payment Frequency
	   	- TRM       3   Loan Term
	   	- IRN       4   Nominal Interest Rate
	   	- INDEX     5   Interest Index
	   	- PCID      6   Permanent Account Number
	   	- DIST1ND   7   First Due Date
	   	- PMTPI     8   Payment Amount
	   	- SLDTRM   10   Deferment Term
	   	- SLDRSN   11   Deferment Reason Code
	   	- SLDFD    12   Deferment Beginning Date
	   	- SLDTD    13   Deferment Ending Date
	   	- ARDRSN   14   Account Review Reason    - resrvd for future use
	   	- ARND     15   Account Review Next Date - resrvd for future use
	   	- ARFRE    16   Account Review Frequency - resrvd for future use
	   	- DIRDEF   17   Direct Student Loan Deferment

	   	. efd        	Effective Date - valid only for     /TYP=N/NREQ
	     			Interim to Permanent conversion     /MECH=VAL

	   	. ctype         Conversion Product Type required    /TYP=N/NREQ
	     			for Interim to Permanent conversion /MECH=VAL

	   RETURNS:
	   	. $$ 	Error message  /TYP=T
	    		Null = No error

	   RELATED:
	   	. $$^PBSMRPC - MRPC Service Class Driver

	   EXAMPLE:
	   	$$^MRPC069(.RET,1,INPUT)
	  
	   --------------------------------------------------------------------
	   09/21/05 - BHOLT - 17068
		   Modified the Depricated method to Current Standard.
	   
	   05/07/02 - CHHABRIAS - 49794
		      Converted to PSL

	   --------------------------------------------------------------------

	*/

	// Version number of client message is not compatible with server
	if versn.get() '= 1 quit $$ERRMSG^PBSUTL($$^MSG(2951))
	
	
	type public Boolean ER
	type public Number XCID
	type public String RM, TY()
	
	type Date TPD
	type Number BRCD, CNTRX, CTYPE, ext, IDPF, INDEX, IRN, TYPE, XUID	
	type String CRCD, DIST1FRE, GRP, LNICNV(), TRM

	set (ER, RM) = ""

	// Obtain valid BRCD and posting day
	type RecordCUVAR cuvar = Db.getRecord("CUVAR")
	set BRCD = cuvar.bobr

	set XUID = %UserID

	type RecordTPCTRL tpctrl = Db.getRecord("TPCTRL", "BRCD = :BRCD, UID = :XUID, TPD = :%SystemDate", 1)
	set TPD = tpctrl.pmdate

	if TPD = "" set TPD = %SystemDate

	set %EffectiveDate = efd.get()
	if %EffectiveDate = "" set %EffectiveDate = %SystemDate
	set CNTRX = 0

	// Get input parameter values

	set IDPF = idpf.get()
	if IDPF = 1 set %ProcessMode = 0
	if IDPF = 2 set %ProcessMode = 1
	if IDPF = 3 set %ProcessMode = 1

	set LNICNV(1) = params.get()

	if 'Db.isDefined("LN", "CID = :XCID") quit
		
	type RecordLN ln = Db.getRecord("LN", "CID = :XCID", 1)
	
	if IDPF = 1 do {

		// Use the same CRCD for Permanent as for Interim Loan
		
		set XCID = LNICNV(1).piece("|", 1)

		set CRCD = ln.crcd

		set CTYPE = ctype.get()

		type ResultSet rs = Db.select("DIST1FRE, TRM, IRN, INDEX", "PRODDFTL", "TYPE = :CTYPE AND CRCD = :CRCD")
		if 'rs.isEmpty(), rs.next() do {
			set DIST1FRE = rs.getCol(1)
			set TRM = rs.getCol(2)
			set IRN = rs.getCol(3)
			set INDEX = rs.getCol(4)
			}
	
		if rs.isEmpty() quit
	
		set TYPE = CTYPE
		do T^LNICFE

		
		set GRP = TY(TYPE).get().piece("|", 2)

		// Default missing values from product type definition
		if LNICNV(1).piece("|", 2) = "" set LNICNV(1).piece("|", 2) = DIST1FRE
		if LNICNV(1).piece("|", 3) = "" set LNICNV(1).piece("|", 3) = TRM
		if LNICNV(1).piece("|", 4) = "" set LNICNV(1).piece("|", 4) = IRN
		if LNICNV(1).piece("|", 5) = "" set LNICNV(1).piece("|", 5) = INDEX
		do ^UMDT

		}

	if IDPF = 2 do {

		do ln.setAuditFlag(1)
		 
		set ln.dirdef = LNICNV(1).piece("|", 17)
		set ln.sldfd = LNICNV(1).piece("|", 12)
		set ln.sldrsn = LNICNV(1).piece("|", 11)
		set ln.sldtd = LNICNV(1).piece("|", 13)
		set ln.sldtrm = LNICNV(1).piece("|", 10)
		}

	if ER quit $$ERRMSG^PBSUTL(RM.get()

	//Set the external call flag before calling LNICFE

	set ext = 1
	do FILE^LNICFE

	if ER quit $$ERRMSG^PBSUTL(RM.get()

	// No return
	set return = ""

	quit ""
 #OPTION ResultClass ON
Public String vSIG()	quit "60250^17801^Tanuja Bhol^4225"	// Signature - LTD^TIME^USER^SIZE
