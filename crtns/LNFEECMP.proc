LNFEECMP	// 12/19/2006 02:34 PM - 1
	// Loan fee program compiled by LNFEEC0

	quit // Do not call from the top

public A48509(RecordLN ln)	// TESTING 48509

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 11

	// Calculate based on columns entered by user

	set TAMT = TAMT*(.02 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 300 set TAMT = 0
	// Maximum fee amount
	if TAMT > 2222 do maxer(TAMT, 2222) set TAMT = 2222
	quit TAMT

public AEH(RecordLN ln)	// Billing Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 35

	// Calculate based on columns entered by user

	set TAMT = TAMT*(.02 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public Alberta1(RecordLN ln)	// Fees at Billing Test

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 250
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 500 set TAMT = 500
	quit TAMT

public Alberta2(RecordLN ln)	// Fees at Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 50
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R2")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BILL(RecordLN ln)	// Fixed Booking Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BILL2(RecordLN ln)	// BILL - ADDITIONAL INTEREST FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.01 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U2")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 250 do maxer(TAMT, 250) set TAMT = 250
	quit TAMT

public BILL23(RecordLN ln)	// BILL23

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BILL3(RecordLN ln)	// TIED TO BILL - .25% FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.25 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U4")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BILL4(RecordLN ln)	// SEPARATE BILL/REC ON DUE DATE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 150
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BILL5(RecordLN ln)	// BILLING - DEFER INCOME

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.25 * (ln.balint))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R2")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 12 set TAMT = 0
	quit TAMT

public BILL6(RecordLN ln)	// COMMERCIAL AT BILLING/STRING

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.01 * (ln.adubm1))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U4")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BILLFA(RecordLN ln)	// BILL-FIXED AMT

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 35
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BIRD(RecordLN ln)	// LOAN FEES AT BILLING

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 22.5
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BJAM(RecordLN ln)	// Loan Fee for ARQ 40375

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BJAM007(RecordLN ln)	// Loan Fee for ARQ 40375

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BKCFWAN(RecordLN ln)	// Booking CFWA N

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 200
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BKCRL(RecordLN ln)	// Booking fee - % of credit lmt

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 500 set TAMT = 500
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public BOOK(RecordLN ln)	// AT BOOKING FIXED FEE - 

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 111.11
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R8")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK1(RecordLN ln)	// Fixed Booking Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK10(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U8")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK11(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK12(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D2")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK13(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D4")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK14(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D8")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK2(RecordLN ln)	// Booking Fixed Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK3(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK4(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R2")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK5(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R4")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK6(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R8")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK7(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK8(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U2")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BOOK9(RecordLN ln)	// Booking fee for rndng option

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 123.32
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U4")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public BPH(RecordLN ln)	// BPH Disbursement Fee

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.03 * (ln.bal))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	quit TAMT

public CINDY1(RecordLN ln)	// CINDY'S BOOKING FEE FOR LN

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 150
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public CR18932(RecordLN ln)	// TEST CR 18932

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 400
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 50 set TAMT = 0
	// Maximum fee amount
	if TAMT > 1000 set TAMT = 1000
	quit TAMT

public DEFEE(RecordLN ln)	// DEFERRED FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public DEFFEE(RecordLN ln)	// Deferred Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public DISB(RecordLN ln)	// LOCKE - TEST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public DISB2(RecordLN ln)	// LOCKE - TEST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public DISB3(RecordLN ln)	// LOCKE - TEST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 2
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public DISBEF(RecordLN ln)	// PREFERENCE LOAN DISBURSEMENT

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.015 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public DISFEE(RecordLN ln)	// DISB FEE

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.015 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public EMILY1(RecordLN ln)	// TEST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 120
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 200 do maxer(TAMT, 200) set TAMT = 200
	quit TAMT

public EPPEN(RecordLN ln)	// EARLY PAYOFF PENALTY

	type public Number AMT

	type Number TAMT = 0
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FEEBOOK1(RecordLN ln)	// Booking Fee

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.bal))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 500 set TAMT = 500
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public FEETEST(RecordLN ln)	// LOAN FEE FOR ARD 40252

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.0027 * (ln.udbal))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FLATBILL(RecordLN ln)	// Flat Fee on Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 35
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FREQ(RecordLN ln)	// Frequency Based Fixed Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 50
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FREQ2(RecordLN ln)	// Frequency based Fixed fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 200
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FREQ3(RecordLN ln)	// Frequency based Fixed Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 45
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FREQ4(RecordLN ln)	// Frequency based Fixed Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 35
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FREQ5(RecordLN ln)	// 1MAE - DEFER INCOME

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.005 * (ln.adbm1))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D4")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Maximum fee amount
	if TAMT > 10000 set TAMT = 10000
	quit TAMT

public FREQ6(RecordLN ln)	// 10D - MULTI BAL COMPUTES

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 175

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.0025 * (ln.adbm1))
	set TAMT = TAMT+(.0002 * (ln.crlmt))
	set TAMT = TAMT+(.005 * (ln.adubm1))
	set TAMT = TAMT+(.0025 * (ln.bal))
	set TAMT = TAMT+(.01 * (ln.acr))
	set TAMT = TAMT+(.0025 * (ln.cuin))
	set TAMT = TAMT+(.0025 * (ln.tfee))
	set TAMT = TAMT+(.005 * (ln.avlbal))
	set TAMT = TAMT+(.001 * (ln.balint))
	set TAMT = TAMT+(.0025 * (ln.balcmp))
	set TAMT = TAMT-(.0025 * (ln.adbc1))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R5")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public FREQFEE(RecordLN ln)	// Frequency Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 45

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.02 * (ln.udbal))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public JBILL(RecordLN ln)	// Fixed Billing Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public JBILL2(RecordLN ln)	// Fixed Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public JBILL3(RecordLN ln)	// Interest based fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Maximum fee amount
	if TAMT > 500 do maxer(TAMT, 500) set TAMT = 500
	quit TAMT

public JBILL5(RecordLN ln)	// Fixed Billing fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public JV1(RecordLN ln)	// Test Booking Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.crlmt))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 10000 do maxer(TAMT, 10000) set TAMT = 10000
	quit TAMT

public JV1T(RecordLN ln)	// Test Booking Fee TAX

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	set TAMT = TAMT+(.1 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 2 set TAMT = 2
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public JV2(RecordLN ln)	// Test Freq Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.bal))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 10000 do maxer(TAMT, 10000) set TAMT = 10000
	quit TAMT

public JV2T(RecordLN ln)	// Test Freq Fee Tax

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	set TAMT = TAMT+(.05 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 1 set TAMT = 1
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public JV3(RecordLN ln)	// Test Billing Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.crlmt))
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 10000 do maxer(TAMT, 10000) set TAMT = 10000
	quit TAMT

public JV3T(RecordLN ln)	// Test Billing Fee TAX

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	set TAMT = TAMT+(.1 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 2 set TAMT = 2
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public JV4(RecordLN ln)	// Test W/ Trans Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 200
	set TAMT = TAMT+(.05 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public JV4T(RecordLN ln)	// Test Trans Fee TAX

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	set TAMT = TAMT+(.1 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 2 set TAMT = 2
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public LATE(RecordLN ln)	// RSP Late Fee

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(1 * (ln.irn/100/365))
	set TAMT = TAMT*(1 * (ln.lchg))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LAU(RecordLN ln)	// BILLING/FIXED AMT

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 22.5
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LAU1(RecordLN ln)	// Linked to LAU

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LAU2(RecordLN ln)	// Linked to LAU1

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 200
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LAU3(RecordLN ln)	// Linked to LAU2

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 300
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LFP00001(RecordLN ln)	// Fixed Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNBOOK(RecordLN ln)	// Shripad's Booking fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 132
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNBOOK1(RecordLN ln)	// Fixed Booking fee

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 500 set TAMT = 0
	// Maximum fee amount
	if TAMT > 1000 set TAMT = 1000
	quit TAMT

public LNBOOK2(RecordLN ln)	// BOOKING FIXED FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEE3(RecordLN ln)	// Interest based fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	set TAMT = TAMT+(.015 * AMT)
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Maximum fee amount
	if TAMT > 500 do maxer(TAMT, 500) set TAMT = 500
	quit TAMT

public LNFEEBL1(RecordLN ln)	// Percent of prin. Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEEBL2(RecordLN ln)	// Fixed billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEEBLT(RecordLN ln)	// Fixed Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEEFQ2(RecordLN ln)	// Frequency Based Fixed Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 200
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEEPB2(RecordLN ln)	// Principal

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1000
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEET(RecordLN ln)	// Fixed Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFEETAN(RecordLN ln)	// Fixed Billing

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public LNFREQ(RecordLN ln)	// Shripad's Freqn. based fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 32
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public MAK(RecordLN ln)	// MAK'S FEE PLAN BILL FIXED AMT

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 250
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public MATT(RecordLN ln)	// MATT'S FEE PLAN

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.01 * (ln.bal))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public MATT2(RecordLN ln)	// AT TRAN - PRINCIPAL PREPAY 

	type public Number AMT

	type Number TAMT = 0
	type public Date EFD
	type public Number CID
	type public String BIL, ELMNT

	// Custom extrinsic function
	set TAMT = TAMT + $$PPAY^ZZZMKL(CID,EFD,BIL,AMT,ELMNT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D5")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < .01 set TAMT = .01
	// Maximum fee amount
	if TAMT > 1000000 do maxer(TAMT, 1000000) set TAMT = 1000000
	quit TAMT

public MTG1(RecordLN ln)	// MTG BOOKING FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 400
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public PGFREQ(RecordLN ln)	// AT FREQUENCY FEE/FIXED

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public POSTAGE(RecordLN ln)	// HIRE PURCHASE NOTICE POST FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 5
	type public Date EFD
	type public Number CID
	type public String BIL, ELMNT

	// Custom extrinsic function
	set TAMT = TAMT + $$FEE^CUSNOTPR(CID,EFD,BIL,AMT,ELMNT)
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public PROBLN2(RecordLN ln)	// PROB LN TRANSACTION CODES 

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 2
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public PROBLN3(RecordLN ln)	// PROBLEM LOAN CYCLE FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 50
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public PROBSUB(RecordLN ln)	// Prob Loan Sub-Account Fee Plan

	type public Number AMT

	type Number TAMT = 0
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SAHRAH(RecordLN ln)	// TEST

	type public Number AMT

	type Number TAMT = 0
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SAN1(RecordLN ln)	// 

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.01 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SANBOOK(RecordLN ln)	// AT BOOKING FIXED FEE - 

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 400
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SANDY(RecordLN ln)	// ASSESS FEE AT PAYOFF 

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(1 * (ln.irn/100/365))
	set TAMT = TAMT*(1 * (ln.lchg))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SANDY1(RecordLN ln)	// PAYOFF

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SANDY2(RecordLN ln)	// PAYOFF

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SARAH(RecordLN ln)	// TEST TRAN FUNCTIONS

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SARAH1(RecordLN ln)	// AT TRAN - EARLY PAYOFF 1% 

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.6 * ($S(ln.mdt>TJD:ln.bal,1:0)))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SARAH2(RecordLN ln)	// AT TRAN - PAYOFF 1/2% FEE

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.005 * (ln.bal))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public SASD(RecordLN ln)	// ASDSA

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.5 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 100 set TAMT = 100
	// Maximum fee amount
	if TAMT > 200 do maxer(TAMT, 200) set TAMT = 200
	quit TAMT

public SOS(RecordLN ln)	// Test W/ Trans Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 200
	set TAMT = TAMT+(.05 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TBOOK(RecordLN ln)	// Linked Booking Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TBOOK1(RecordLN ln)	// Booking fee for min/max option

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.01 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TBOOK2(RecordLN ln)	// Booking fee for min/max option

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.01 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 500 set TAMT = 500
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public TBOOK3(RecordLN ln)	// Booking fee for min/max option

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 500 set TAMT = 0
	// Maximum fee amount
	if TAMT > 1000 set TAMT = 1000
	quit TAMT

public TERRIE(RecordLN ln)	// EVERY 5 DAYS

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TEST(RecordLN ln)	// TEST

	type public Number AMT

	type Number TAMT = 0
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TLNB3(RecordLN ln)	// Booking fee min/max option

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.05 * (ln.crlmt))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 500 set TAMT = 0
	// Maximum fee amount
	if TAMT > 1000 set TAMT = 1000
	quit TAMT

public TMD1(RecordLN ln)	// MONTHLY ON 21ST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 90
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TMD2(RecordLN ln)	// MONTHLY

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 99
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 5 set TAMT = 5
	quit TAMT

public TRAN(RecordLN ln)	// Transaction Code Based Fee

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 150
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TRAN2(RecordLN ln)	// AT TRAN - PRINCIPAL PREPAY 

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.1 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "D5")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 100 set TAMT = 0
	// Maximum fee amount
	if TAMT > 20000 do maxer(TAMT, 20000) set TAMT = 20000
	quit TAMT

public TRAN3(RecordLN ln)	// AT TRAN - PAYOFF FEE TAX

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.0025 * AMT)
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TRAN4(RecordLN ln)	// AT TRAN - PAYMENT TAX

	type public Number AMT

	type Number TAMT = 0

	// Calculate based on columns entered by user

	set TAMT = TAMT+(.005 * ($S(ln.dist1nd<ln.schnd:ln.pmt,1:0)))
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public TRAN5(RecordLN ln)	// AT TRAN - DISBURSE/DEFERRED

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.01 * AMT)
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "U5")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 10 set TAMT = 10
	// Maximum fee amount
	if TAMT > 1000 do maxer(TAMT, 1000) set TAMT = 1000
	quit TAMT

public TRANFEE(RecordLN ln)	// Tran Code Fees

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 15
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public UCLF(RecordLN ln)	// DAILY UNUSED COMMITMENT FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public UNCFREQ(RecordLN ln)	// UNCOLLECTED FREQUENCY FEE SL

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 17.77
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public UPPEN(RecordLN ln)	// UNSCH PRINCIPAL PMT PENALTY

	type public Number AMT

	type Number TAMT = 0
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZDONNA(RecordLN ln)	// DONNA'S FEE

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZJLK(RecordLN ln)	// ARQ 47110 Test - 1

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 7.5
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Maximum fee amount
	if TAMT > 14 set TAMT = 14
	quit TAMT

public ZJLK2(RecordLN ln)	// ARQ 47110 Test - 2

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 3.75
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Maximum fee amount
	if TAMT > 6 set TAMT = 6
	quit TAMT

public ZPEB(RecordLN ln)	// PAT'S FEE PLAN-ARQ#30083

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZPREPAY(RecordLN ln)	// Prepayment penalty

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZSCS(RecordLN ln)	// Test Plan for ARQ 40107

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 50
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZSMC(RecordLN ln)	// Steve's Test Fee Plan

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 10
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZTAXI(RecordLN ln)	// TAX ON INTEREST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.01 * AMT)
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZTEST(RecordLN ln)	// TEST

	type public Number AMT

	type Number TAMT = 0
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZTOM(RecordLN ln)	// TEST COLLECT FROM ACCT

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 1122.34
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public ZZZ(RecordLN ln)	// TEST

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.01 * AMT)
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public donna(RecordLN ln)	// test fee plan

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT+(.05 * AMT)
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public emily2(RecordLN ln)	// Emily's plan

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 125
	// Rounding option
	set TAMT = $$RND^UINDX(TAMT, "R1")
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	// Minimum fee amount
	if TAMT < 50 set TAMT = 50
	quit TAMT

public jeff(RecordLN ln)	// prepay

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 25
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

public mak(RecordLN ln)	// mak's loan fee plan

	type public Number AMT

	type Number TAMT = 0
	set TAMT = TAMT + 100
	if TAMT set TAMT = TAMT.roundCur(ln.crcd)
	quit TAMT

maxer(Number tamt,Number max)	// Log exceeds max message

	type public String %FN, FEE
	type public Number CID

	type String RM
	// Calculated fee ~p1 of ~p2 exceeds maximum amount of ~p3
	set RM = $$^MSG("401", FEE, tamt, max)
	// Loan Fees
	do LOG^UTLEXC($select('%FN.get().isNull():%FN,1:"LNFEECMP"), "*", $$^MSG("4099"), CID, , RM)
	quit

