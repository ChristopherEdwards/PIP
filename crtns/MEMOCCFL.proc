MEMOCCFL(RecordMEMOCC memocc, String vpar, Boolean vparNorm) // MEMOCC - Memo Table for Credit Accounts Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (2)                      01/12/2005
	// Journal File Definition (3)                 01/12/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = memocc.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(memocc,.vxins(),10,"|")
	if %O = 1 quit:'memocc.isChanged()  do AUDIT^UCUTILN(memocc,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SERVICE = memocc.service
	type String ACCKEY = memocc.acckey

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SERVICE").exists()!vx("ACCKEY").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("MEMOCC",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("MEMOCC","SERVICE = :memocc.service and ACCKEY = :memocc.acckey") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SERVICE
	type public String ACCKEY

	type RecordMEMOCC memocc = Db.getRecord("MEMOCC","SERVICE=:SERVICE,ACCKEY=:ACCKEY")
	if (%ProcessMode = 2) do {
		do memocc.setMode(2)

		do MEMOCCFL(memocc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordMEMOCC memocc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("MEMOCC","SERVICE = :memocc.service and ACCKEY = :memocc.acckey") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(memocc,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^MEMO("CREDIT",vobj(memocc,-3),vobj(memocc,-4),n)=vobj(memocc,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(memocc,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(memocc,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^MEMO("CREDIT",vobj(memocc,-3),vobj(memocc,-4),n)=vobj(memocc,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.memocc)              // Create journal files
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordMEMOCC memocc
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^MEMO("CREDIT",vobj(memocc,-3),vobj(memocc,-4),n)) quit:n.isNull()  if 'vobj(memocc,n).data(),^MEMO("CREDIT",vobj(memocc,-3),vobj(memocc,-4),n).data()#2 set vobj(memocc,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordMEMOCC memocc

	if 'vkeychg.get(),memocc.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/JOURNAL/" do VJOURNAL(.memocc)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^MEMO("CREDIT",vobj(memocc,-3),vobj(memocc,-4))   // Delete Record
	quit


vinit // Initialize default values

	type public RecordMEMOCC memocc

	// Type local variables for access keys for defaults
	type public String SERVICE
	type public String ACCKEY

	type public String TJD
	if memocc.odt.isNull() set memocc.odt = TJD            // odt
	quit


vreqn // Validate required data items

	type public RecordMEMOCC memocc

	if memocc.acn.isNull() do vreqerr("ACN") quit
	if memocc.identifier.isNull() do vreqerr("IDENTIFIER") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordMEMOCC memocc

	if memocc.service.isNull() do vreqerr("SERVICE") quit
	if memocc.acckey.isNull() do vreqerr("ACCKEY") quit

	if 'vobj(memocc,-100,1,"").order().isNull() do {
		if vx("ACN").exists(),memocc.acn.isNull() do vreqerr("ACN") quit
		if vx("IDENTIFIER").exists(),memocc.identifier.isNull() do vreqerr("IDENTIFIER") quit
	}
		if vx("ACN").exists(),memocc.acn.isNull() do vreqerr("ACN") quit
		if vx("IDENTIFIER").exists(),memocc.identifier.isNull() do vreqerr("IDENTIFIER") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MEMOCC","MSG",1767,"MEMOCC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ACCKEY").exists()!vx("SERVICE").exists()!vx("IDENTIFIER").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After delete trigger

	type public RecordMEMOCC memocc
	// Delete CIFACCTS entries for this memo table
	new XACN,XSRVCAT,XSERVICE,XACCKEY

	set XSRVCAT="CREDIT"
	set XSERVICE=memocc.service
	set XACCKEY=memocc.acckey
	
	new rs 
	type ResultSet rs=Db.select("ACN","CIFACCTS","SRVCAT=:XSRVCAT AND SERVICE=:XSERVICE AND ACCKEY=:XACCKEY")
	if rs.isEmpty() quit
	while rs.next() do { 
		do Db.delete("CIFACCTS","SRVCAT=:XSRVCAT AND SERVICE=:XSERVICE AND ACCKEY=:XACCKEY AND ACN=:XACN")
		}
	quit

vau1 // Trigger AFTER_UPDATE - After Update Trigger

	type public RecordMEMOCC memocc
	/*
	------ Revision History ----------------------------------------------------
	09/17/99 - CARROLLJ - 31126
		   Convert to PSL.

	08/12/99 - CONARTYR - 34434
	Update CIFACCTS entries for the MEMOCC table
	*/


	new OLDAKEY,OLDSRV,X,XACN,XSRVCAT,XSERVICE,XACCKEY,XIDEN

	set XSRVCAT="CREDIT"
	set XSERVICE=memocc.service
	set XACCKEY=memocc.acckey
	set XACN=memocc.acn
	set XIDEN=memocc.identifier
	set OLDAKEY=memocc.acckey.oldVal
	set OLDSRV=memocc.service.oldVal
	
	do Db.update("CIFACCTS","SERVICE=:XSERVICE,ACCKEY=:XACCKEY,IDENTIFIER=:XIDEN","ACN=:XACN AND SRVCAT=:XSRVCAT AND ACCKEY=:OLDAKEY AND SERVICE=:OLDSRV")
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordMEMOCC memocc

	if (%O = 2) do vload

	if vobj(memocc,1).exists() do {

		if memocc.acctname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ACCTNAME", vRM) quit
		set X = memocc.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
		if memocc.identifier.length()>25 set vRM = $$^MSG(1076,25) do vdderr("IDENTIFIER", vRM) quit
		set X = memocc.memorelc if 'X.isNull(),'Db.isDefined("UTBLRELSRV","X") set vRM = $$^MSG(1485,X) do vdderr("MEMORELC", vRM) quit
		set X = memocc.odt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODT", vRM) quit
		set X = memocc.status if 'X.isNull(),'Db.isDefined("STBLESTATUS","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
	}

	if vobj(memocc,20).exists() do {

		set X = memocc.crdexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CRDEXP", vRM) quit
		set X = memocc.crdlmt if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CRDLMT", vRM) quit
	}
	if memocc.service.length()>20 set vRM = $$^MSG(1076,20) do vdderr("SERVICE", vRM) quit
	if memocc.acckey.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ACCKEY", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("MEMOCC","MSG",979,"MEMOCC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordMEMOCC memocc)	//MEMOCC Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.memocc)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=CIFH_D
			}
		else  if TSRC="O" do {
			do vj1(.memocc)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=CIFH_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.memocc)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=CIFH_I
			}
		else  if TSRC="O" do {
			do vj2(.memocc)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CIFH_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.memocc)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=CIFH_U
			}
		else  if TSRC="O" do {
			do vj3(.memocc)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CIFH_U
			}
		}

	quit


vj1(RecordMEMOCC memocc)	// CIFH_D  Table CIFH  Delete History

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=memocc.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(3872,"MEMOCC",memocc.service,memocc.acckey)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.tso=$$^MSG(3873,"MEMOCC",memocc.service,memocc.acckey)
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordMEMOCC memocc)	// CIFH_I  Table CIFH  Insert History

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=memocc.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(3870,"MEMOCC",memocc.service,memocc.acckey)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.tso=$$^MSG(3873,"MEMOCC",memocc.service,memocc.acckey)
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordMEMOCC memocc)	// CIFH_U  Table CIFH  Maintenance History

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=memocc.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^CIFFUNCS(memocc.service_","_memocc.acckey,"MEMOCC",vdi,vold,vnew,$G(EFD))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.tso=$$^MSG(3873,"MEMOCC",memocc.service,memocc.acckey)
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordMEMOCC memocc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("SERVICE").exists() set vux("SERVICE") = vx("SERVICE")
	if vx("ACCKEY").exists() set vux("ACCKEY") = vx("ACCKEY")
	do vkey(1) set voldkey = memocc.service_","_memocc.acckey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = memocc.service_","_memocc.acckey // Copy new keys into object
	type RecordMEMOCC vnewrec = memocc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("MEMOCC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordMEMOCC memocc

	if vux("SERVICE").exists() set memocc.service = vux("SERVICE").piece("|",i)
	if vux("ACCKEY").exists() set memocc.acckey = vux("ACCKEY").piece("|",i)
	quit
