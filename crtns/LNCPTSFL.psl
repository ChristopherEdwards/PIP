LNCPTSFL(RecordLNCYCPTS lncycpts, String vpar, Boolean vparNorm) // LNCYCPTS - Loan Cycled Items - FASB91 Fees Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (31)             11/22/2003
	// Trigger Definition (2)                      04/16/2007
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lncycpts.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lncycpts,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lncycpts,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lncycpts.cid
	type String TYP = lncycpts.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNCYCPTS",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNCYCPTS","CID = :lncycpts.cid and TYP = :lncycpts.typ") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP

	type RecordLNCYCPTS lncycpts = Db.getRecord("LNCYCPTS","CID=:CID,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do lncycpts.setMode(2)

		do LNCPTSFL(lncycpts,vpar)
	}
	else  do VINDEX(lncycpts)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNCYCPTS lncycpts

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNCYCPTS","CID = :lncycpts.cid and TYP = :lncycpts.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lncycpts)) S ^LNCYC("PTS",vobj(lncycpts,-3),vobj(lncycpts,-4))=vobj(lncycpts)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lncycpts)            // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lncycpts) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNCYCPTS lncycpts

	if vpar["/INDEX/" do VINDEX(.lncycpts)                 // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lncycpts)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNCYC("PTS",vobj(lncycpts,-3),vobj(lncycpts,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNCYCPTS lncycpts

	// Type local variables for access keys for defaults
	type public String CID
	type public String TYP

	if lncycpts.apr.isNull() set lncycpts.apr = 0          // apr
	if lncycpts.rcm.isNull() set lncycpts.rcm = 0          // rcm
	quit


vreqn // Validate required data items

	type public RecordLNCYCPTS lncycpts

	if lncycpts.apr.isNull() do vreqerr("APR") quit
	if lncycpts.rcm.isNull() do vreqerr("RCM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNCYCPTS lncycpts

	if lncycpts.cid.isNull() do vreqerr("CID") quit
	if lncycpts.typ.isNull() do vreqerr("TYP") quit

		if vx("APR").exists(),lncycpts.apr.isNull() do vreqerr("APR") quit
		if vx("RCM").exists(),lncycpts.rcm.isNull() do vreqerr("RCM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCPTS","MSG",1767,"LNCYCPTS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNCYCPTS lncycpts
	if 'lncycpts.cid.isNull() set vfkey("^ACN("_""""_lncycpts.cid_""""_","_50_")")="LNCYCPTS(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNCYCPTS lncycpts
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lncycpts.cid") set vERRMSG = $$^MSG(8563,"LNCYCPTS(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert LNCYCPTS

	type public RecordLNCYCPTS lncycpts
	/*
	---------- Revision History ------------------------------------------

	03/14/07 - KumarSS - CR 25177
		   Removed Invalid Unicode Characters.

	10/30/06 - KELLYP - CR 23814
		   Removed the setting of the audit flag for loan column 
		   changes.  This prevents a fatal integ from appearing on
		   the account after an account is opened with financed
		   cycled items and a backdated disbursement is processed.
	
	10/27/06 - KELLYP - CR 23304
		   Added edit checks on beginning/end dates defined in the
		   cycled item's corresponding AOAMO record.  Also removed
		   pre-2003 revision history.	
	
	01/21/06 - MBUIM - 19700
	   	   Replaced column aoamo.count with column aoamo.cnt. COUNT 
	   	   is an oracle reserve word and was process issues 
	   	   e.g error returned in DBSLOAD when running function 
	   	   @DDPXFR - manual transfers to FEPS.
	   	      
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
	
	02/21/03 - CARROLLJ - 51349
		   Undefined error returned because COUNT variable was not
		   defined.

	*/

	type public Boolean ER
	type public String LNLS2ARY()

	type Date NJD
	type String data,INCD,lnls2,PL
	
	type RecordLN ln = Db.getRecord("LN","CID=:lncycpts.cid",1)

	if %ProcessMode'=2 do {

		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP='PTS',PAYEE=:lncycpts.payee,PLAN=:lncycpts.plan",1)
	
		// Payee ended on ~p1
		if (aoamo.pldate),(%SystemDate > aoamo.pldate) do Runtime.setErrMSG("LNCYCPTS","2151",aoamo.pldate.toString()) quit:ER
		
		// Payee does not begin until ~p1
		if (aoamo.pbdate),(%SystemDate < aoamo.pbdate) do Runtime.setErrMSG("LNCYCPTS","2150",aoamo.pbdate.toString()) quit:ER
	
		// Update loan credit limit for insurance premiums	
		if lncycpts.amt,lncycpts.pdby do {
			
			type RecordSTBLIPDBY sipdby=Db.getRecord("STBLIPDBY","KEY=:lncycpts.pdby",1)

			if 'sipdby.add quit 
			
																								// Recalculate payment and disclosure information
																								do PROC^LNCYCPRO(.ln)
	
																								set ln.crlmt=ln.crlmt+lncycpts.amt
																								set ln.udbal=ln.udbal+lncycpts.amt
																								set ln.aoamtorg=ln.aoamtorg+lncycpts.amt
  			}
	
		// Update flags in loan record
		set ln.ptsp=1
		do ln.save()

		// Missing required data item ~p1
		if lncycpts.payee.isNull() do Runtime.setErrMSG("LNCYCPTS",1767,"PAYEE") quit:ER 
		if lncycpts.plan.isNull() do Runtime.setErrMSG("LNCYCPTS",1767,"PLAN") quit:ER

		// Update Dealer/Ins/Def Fee User Table COUNT
		set aoamo.cnt=aoamo.cnt+1
		do aoamo.save()
		
		// Insert Dayend Loan Add-On/ net Deferred Fees
		if ln.odt set NJD=ln.odt
		else  set NJD=(%SystemDate).nextFreqDate(lncycpts.freq,,"00001") quit:ER 
		if lncycpts.nxadt>NJD set NJD=(lncycpts.nxadt).nextFreqDate(lncycpts.freq,,"00001") quit:ER 
		}
	
	// Remaining only occurs if in VerifyMode
	if %ProcessMode'=2 quit 
	
	// Verify Capitalized Points
	new percsold
	if +lncycpts.caltd=+lncycpts.amt,lncycpts.cntr'<lncycpts.term quit 

	// If the loan is sold, verify percentage information
	if Db.isDefined("LNLS6","lncycpts.cid,1") do { quit:ER  quit:percsold=100 

		set percsold=0
			
		type ResultSet rs=Db.select("INCD,PL,OPS","LNLS6,LNLS6B","CID=:lncycpts.cid") quit:ER 
		if rs.isEmpty() quit
		while rs.next() do { 
			set INCD=rs.getCol(1) 
			set PL=rs.getCol(2)
			if 'LNLS2ARY("LNLS2",INCD,PL).data() do {
								
				type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:INCD,PL=:PL",1)
				set data=lnls2.pp_$C(9)_lnls2.picm
				
				set LNLS2ARY("LNLS2",INCD,PL)=data
				}
			set lnls2=LNLS2ARY("LNLS2",INCD,PL)
			
			// LNLS2.PICM
			if lnls2.piece($C(9),2)=6 set percsold=percsold+rs.getCol(3)     
			
			// LNLS2.PP
			else  set percsold=percsold + lnls2.piece($C(9),1)        
			}
		// 100% Sold Loan has Deferred Fee Balance
		if percsold<100,lncycpts.caltd'=lncycpts.amt do Runtime.setErrXBAD("LNCYCPTS",111) quit:ER 
		}
	
	if lncycpts.cntr'<lncycpts.term quit 
	if +lncycpts.caltd=+lncycpts.amt quit 

	// NEXT POINTS CYCLING DATE in the Past
	if lncycpts.nxadt,lncycpts.nxadt<%SystemDate do Runtime.setErrXBAD("LNCYCPTS",84,"lncycpts.nxadt") quit:ER 
	if 'lncycpts.rate do { quit:ER 
		
		if 'LNLS2ARY("FMET","PTS",lncycpts.payee,lncycpts.plan).data() do {
			type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP='PTS',PAYEE=:lncycpts.payee,PLAN=:lncycpts.plan",1)
			set LNLS2ARY("FMET","PTS",lncycpts.payee,lncycpts.plan)=aoamo.fmet
			}
			
		// NET INVESTMENT YIELD Inconsistent with Interest Method
		if LNLS2ARY("FMET","PTS",lncycpts.payee,lncycpts.plan)=0 do Runtime.setErrXBAD("LNCYCPTS",92) quit:ER 
		}
	
	// Check that recalculation frequency is supported
	if 'lncycpts.ryfre.isNull(),lncycpts.rynd do { quit:ER 
		// Next Yield Recalc Date in the Past
		if lncycpts.rynd<%SystemDate do Runtime.setErrXBAD("LNCYCPTS",108,"lncycpts.rynd") quit:ER 
		}
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert LNCYCPTS

	type public RecordLNCYCPTS lncycpts
	/*----- Revision History ------------------------------------

	04/16/07 - KumarSS - CR 26582
		   Modified to update Amortization Frequecy (FREQ),
		   Non-standard Interest Plan (NSIP), Non-performing
		   Deferred Amortization (NPDA) and Last Date to 
		   Calculate (LSADT) columns while adding a Net Deferred 
		   Fee Plan to a Loan account using the Get Account.
	
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.	
	
	12/30/03 - CARROLLJ - CR7658
		   Corrected undefined error.

	05/06/03 - CARROLLJ - 51349
		   Removed the use of the to array.


	Calculate deferred fees if not already calculated
	set defaults if the fields have not been provided
	*/
	
	type public Boolean ER
	type public String %FN
	type Date JD,NJD
	type String AF,AMAF,AMO,BASE,CRCD,FUNC
	type Number BASEVAL,X
	
	set FUNC=%FN.get()

	if FUNC.find("LNN0") quit

	if 'FUNC,+lncycpts.nxadt quit

	if 'FUNC do {
		
		set AMO=""

		if lncycpts.typ.isNull()!lncycpts.payee.isNull()!lncycpts.plan.isNull() quit

		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lncycpts.typ,PAYEE=:lncycpts.payee,PLAN=:lncycpts.plan",1)

		if 'aoamo.getMode() quit

		set AMO.piece("|",2)=aoamo.fre
 		set AMO.piece("|",18)=aoamo.bes
 		set AMO.piece("|",38)=aoamo.ryfre
 		set AMO.piece("|",42)=aoamo.oprf
		set AMO.piece("|",43)=aoamo.fmet
 		set AMO.piece("|",44)=aoamo.tes

		type RecordLN ln=Db.getRecord("LN","CID=:lncycpts.cid",1)

		//Force loading of ln nodes 51,57,60,64,431
		
		set JD=%SystemDate 
		set NJD=JD.nextFreqDate(aoamo.fre,.AF) quit:ER

		if 'lncycpts.amt do {

			set BASE=ln.schbal
			if 'BASE set BASE=ln.crlmt
			if (ln.iam).extract()=1 set BASE=BASE-(ln.iun-ln.ipl)

			set X=ln.orgfa+ln.comfa+ln.aprapp+ln.aprapp1
						
			type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:ln.type",1)
			set CRCD=ln.crcd
			set BASEVAL=(BASE*(prodctl.lexv))/100
			set X=X-(BASEVAL.roundDec(0,"",CRCD)+prodctl.lexf)
			set lncycpts.amt=X
			}

		set lncycpts.caltd=0
		
		if 'lncycpts.nxadt set lncycpts.nxadt=NJD
		if 'lncycpts.lsadt set lncycpts.lsadt=JD
		if 'lncycpts.cntr set lncycpts.cntr=ln.schnum
		if 'lncycpts.term set lncycpts.term=ln.onp

		set lncycpts.freq=aoamo.fre
		if 'aoamo.fmet set lncycpts.nsip = 1
		else  set lncycpts.nsip = 3
		set lncycpts.npda=0
		}		
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNCYCPTS lncycpts

	set X = lncycpts.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if lncycpts.typ.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TYP", vRM) quit
	set X = lncycpts.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycpts.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
	set X = lncycpts.cacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.CACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.caltd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.CALTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.cbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.CBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.cipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.CIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.cntr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CNTR", vRM) quit
	set X = lncycpts.cseq if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CSEQ", vRM) quit
	set X = lncycpts.dcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.DCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCPTS]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	if lncycpts.itrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ITRM", vRM) quit
	set X = lncycpts.lsadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSADT", vRM) quit
	set X = lncycpts.mben if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("MBEN", vRM) quit
	set X = lncycpts.npda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.NPDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.nsip if 'X.isNull(),'Db.isDefined("STBLNSIP","X") set vRM = $$^MSG(1485,X) do vdderr("NSIP", vRM) quit
	set X = lncycpts.nxadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NXADT", vRM) quit
	set X = lncycpts.nyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.NYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.oipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.OIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycpts.payee.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYEE", vRM) quit
	set X = lncycpts.pdby if 'X.isNull(),'Db.isDefined("STBLIPDBY","X") set vRM = $$^MSG(1485,X) do vdderr("PDBY", vRM) quit
	if lncycpts.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = lncycpts.ramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.RAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycpts.RCM) set vRM=$$^MSG(742,"L") do vdderr("RCM", vRM) quit
	set X = lncycpts.reb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCPTS.REB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycpts.ryfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCPTS]RYFRE",0) if 'vRM.get().isNull() do vdderr("RYFRE", vRM) quit
	set X = lncycpts.ryld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYLD", vRM) quit
	set X = lncycpts.rynd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYND", vRM) quit
	set X = lncycpts.term if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("TERM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCPTS","MSG",979,"LNCYCPTS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNCYCPTS lncycpts)	//LNCYCPTS Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lncycpts)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lncycpts)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lncycpts)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lncycpts)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}

	quit


vj1(RecordLNCYCPTS lncycpts)	// HIST_DELETE  Table HIST  History for deletion of the record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycpts.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("4166",lncycpts.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNCYCPTS lncycpts)	// HIST_INSERT  Table HIST  History for creation of new record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycpts.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$LNAMOJRN^LNFUNCS("PTS",lncycpts.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNCYCPTS lncycpts) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NXADT").exists()!vx("PLAN").exists() do vi1(.lncycpts)
		if vx("RYND").exists() do vi2(.lncycpts)
		if vx("PAYEE").exists()!vx("PLAN").exists() do vi3(.lncycpts)
	}
	do vi1(.lncycpts)
	do vi2(.lncycpts)
	do vi3(.lncycpts)

	quit
	

vi1(RecordLNCYCPTS lncycpts) // Maintain DYENDPTS index entries (Dayend Net Deferred Fees)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lncycpts.nxadt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lncycpts.plan
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = lncycpts.cid
	type String v5 = lncycpts.typ

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("PTS",vobj(lncycpts,-3),vobj(lncycpts,-4)))#2,'$D(^DAYEND(v1,"PTS",v3,v4,v5)) do vidxerr("DYENDPTS")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"PTS",v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NXADT").exists() set v1=vx("NXADT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v3=vx("PLAN").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"PTS",v3,v4,v5)
	#ENDBYPASS
	quit

vi2(RecordLNCYCPTS lncycpts) // Maintain DYNFRYLD index entries (Recalc Net Investment Yield)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lncycpts.rynd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lncycpts.cid
	type String v4 = lncycpts.typ

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("PTS",vobj(lncycpts,-3),vobj(lncycpts,-4)))#2,'$D(^DAYEND(v1,"NFRYLD",v3,v4)) do vidxerr("DYNFRYLD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"NFRYLD",v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("RYND").exists() set v1=vx("RYND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"NFRYLD",v3,v4)
	#ENDBYPASS
	quit

vi3(RecordLNCYCPTS lncycpts) // Maintain LNXAMOP index entries (Payee, Plan, CID X-Ref)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lncycpts.typ
	type String v3 = lncycpts.payee
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = lncycpts.plan
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycpts.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("PTS",vobj(lncycpts,-3),vobj(lncycpts,-4)))#2,'$D(^XREF("LNCYCPTS",v2,v3,v4,v5)) do vidxerr("LNXAMOP")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("LNCYCPTS",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PAYEE").exists() set v3=vx("PAYEE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v4=vx("PLAN").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("LNCYCPTS",v2,v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNCYCPTS")

	while ds.next() do {
		type RecordLNCYCPTS lncycpts=ds.getRecord("LNCYCPTS")
		if vlist.contains("VINDEX") do VINDEX(.lncycpts) quit
		if vlist.contains("DYENDPTS") do vi1(.lncycpts)
		if vlist.contains("DYNFRYLD") do vi2(.lncycpts)
		if vlist.contains("LNXAMOP") do vi3(.lncycpts)
	}

	quit


public VIDXBLD1(RecordLNCYCPTS lncycpts, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lncycpts) quit
	if vlist.contains("DYENDPTS") do vi1(.lncycpts)
	if vlist.contains("DYNFRYLD") do vi2(.lncycpts)
	if vlist.contains("LNXAMOP") do vi3(.lncycpts)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNCYCPTS","MSG",1225,"LNCYCPTS."_di)

	quit


vkchged // Access key changed

	type public RecordLNCYCPTS lncycpts

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = lncycpts.cid_","_lncycpts.typ // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lncycpts.cid_","_lncycpts.typ // Copy new keys into object
	type RecordLNCYCPTS vnewrec = lncycpts.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNCYCPTS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNCYCPTS lncycpts

	if vux("CID").exists() set lncycpts.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set lncycpts.typ = vux("TYP").piece("|",i)
	quit

VIDXPGM()	quit "LNCPTSFL"	// Location of index program

