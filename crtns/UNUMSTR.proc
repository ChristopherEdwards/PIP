public UNUMSTR(X,keys,filelist,syntax)
	/*
	ORIG: chhabris - 08/01/2005
	DESC: General Numeric String Handler

	---- Comments --------------------------------------------------------
	   DESC: This routine interprets the input string X against the
		 PROFILE numeric string semantics and returns the
		 numeric result.  If the syntax subroutine is called, the 
	         string is syntactically verified only.

	 INPUTS: If keys parameter is not used, will expect local
	         variables to contain the keynames for database
		 access.

	 ARGUMENTS:
	    . X		Input string			/TYP=T/REQ
	    .keys	Access Keys			/TYP=T/NOREQ/NOTENABLED
			Keynam=Value[,...]
	    .filelist	Valid file list			/TYP=T/NOREQ
			Filename[,...]
	    .syntax	Syntax Check only		/TYP=L/NOREQ

	  RETURNS:
		. ER	Error Indicator			/TYPE=T

		. RM	Return message			/TYPE=T/LARRAY
			Error Message if ER=1
	
	  EXAMPLE:
			S return=$$^UNUMSTR("1% of DEP.BAL","CID=123")

	---- Revision History ------------------------------------------------

	08/02/06 - KELLYP - CR 22048
		   Modified PCNT section to eliminate PRECEDENCE warning.

	01/13/06 - CHHABRIS - CR19011
		   Modified DINAM section to include logic involving [TABLE]COL.

	12/17/05 - CHHABRIS - CR16677
		   Modified the DINAM section, replaced the call $$RETVAL^DBSDD
		   with dynamic sql statement.

	08/01/05 - CHHABRIS - CR16677
		   Converted to PSL.
		   Also removed the revision history prior to 2004.

	----------------------------------------------------------------------

	*/

  	type public Boolean ER
 	type String filenam,string,vnew,wrd,z
	type Number paran,wrdptr

	if X=+X quit X

	// Remove leading " "
	for  quit:X.extract()'=" "  set X=X.extract(2,X.length())

	// Remove trailing " "
	for  quit:" "'[X.extract(X.length())  set X=X.extract(1,X.length()-1)

	if X.isNull() quit X

	catch vERROR {
		do ERROR()
		quit ""
		}

 	set ER=0,paran=0,wrdptr=0
	set string=""

	if 'keys.get().isNull() do {
		do NEWKEYS
		do DEFKEYS
		}

	for  set wrd=$$PARSE^DBSQRY(.X,.wrdptr)  do COMPILE(.wrd) quit:ER!(wrdptr=X.length())
	
	// Paranthesis count doesn't match
	if paran,'ER do ERROR($$^MSG("5325")) quit

	if ER quit ""

	set string ="S z="_string

	#ACCEPT Date=12/13/2005; PGM=Sanjay C
	xecute string
	quit z


COMPILE(wrd)	// Compile Xecutable MUMPS code here

	type public String string
	type public Number paran
	type String mf

	if wrd=+wrd set string=string_wrd quit
	if wrd.extract()="""" do ERROR() quit

	// Aritmetic OP
	if "+-*/#"[wrd set string=string_wrd quit
	if wrd="%" do PCNT quit

	if wrd="(" set string=string_wrd,paran=paran+1 quit
	if wrd=")" set string=string_wrd,paran=paran-1 quit	

	// Force Upcase
	set wrd=wrd.upperCase()

	// Data Item
	if wrd["."!(wrd["[") do DINAM quit

	// Rounding
	if "RUD"[wrd.extract(),wrd.extract(2,wrd.length()) do ROUND(wrd)  quit

	if wrd?1N.N1A do { quit
		set mf=wrd.extract(wrd.length()),wrd=wrd.extract(1,wrd.length()-1)
		if "HKM"'[mf do ERROR() quit
		set string=string_(wrd*$S(mf="H":100,mf="K":1000,1:1000000))
		}

	if $$ISDINAM(.wrd) do DINAM quit
	do ERROR()
	quit


ROUND(wrd)	// Rounding option applied
	type public String string
	type public Number paran,R,wrdptr,X
	type String rud,rexpr,D,S,HT
	type Number rate

	if string.isNull() do ERROR() quit

	if paran do {
		type Number savptr,z
		set savptr=wrdptr
		for  set z=$$PARSE^DBSQRY(.X,.wrdptr) quit:z'=")"  do {
			set paran=paran-1
			set string=string_")"
			set savptr=wrdptr
			}
		set wrdptr=savptr
		}

	set rate=string

	set rud=wrd.extract(),rexpr=wrd.extract(2,wrd.length())

	set S=1 if rate<0 set S=-1
	set rexpr=1/rexpr
	set R=rate-(rate\1),D=R\rexpr,HT=rexpr/2

	if rud="R" do {  quit

		set rud=(rexpr*D)+(HT*S)
		if (R*S)<(rud*S) set string=+((rate\1)+(rexpr*D)).roundDec(5) quit
		set string=+((rate\1)+(rexpr*(D+(1*S)))).roundDec(5) quit
		}

	if rud="U" do {  quit

		set rud=rexpr*D
		if rud.roundDec(10)=R.roundDec(10) set string=+rate.roundDec(5) quit
		set string=+((rate\1)+(rexpr*(D+1))).roundDec(5) quit
		}

	if rud="D" do {  quit

		set rud=rexpr*D
		if rud.roundDec(10)=R.roundDec(10) set string=+rate.roundDec(5) quit
		set string=+((rate\1)+(rexpr*D)).roundDec(5) quit
		}
	quit


ISDINAM(wrd)	// Find out if Keyword is a naked Data Item

	type public String filenam
	type String PFID
	type Number I,z

	if filenam.get().isNull() quit 0
	for I=1:1:filenam.length(",") if $$VER^DBSDD(filenam.piece(",",I)_"."_wrd) quit
	if  set wrd=filenam.piece(",",I)_"."_wrd quit 1
	quit 0


DINAM	// Data item syntax
	type public String keys,syntax,string,wrd,vfsn,vdd,filenam,filelist,RM
	type public Number ER
	type String DI,FROM,WHERE,VAL,TDI
	set (DI,FROM,WHERE,VAL)=""
	
	set (TDI,VAL)=""
	
	// Syntax Check
	if syntax.get() set ER='$$VER^DBSDD(.wrd),string=string_"0"
	else  do {

		if wrd["." do {
			set DI=wrd
			set FROM=wrd.piece(".",1)
			set WHERE=keys
			}
		if wrd["[" do {
			set TDI=wrd.extract(2,99)
			set TDI=TDI.translate("]",".")
			set wrd=TDI
			set DI=wrd.piece(".",2)
			set FROM=wrd.piece(".",1)
			set WHERE=keys
			}
		
		#ACCEPT Date=12/13/2005; PGM=Sanjay C
		type ResultSet rs=Db.select(DI,FROM,WHERE)
		if rs.next() set VAL=rs.getRow()

		set VAL=VAL.piece($C(9),1)
		set string=string_VAL
		}

	if ER do ERROR(RM.get().piece(":",1))
	set filenam=wrd.piece(".",1)

	// File name is not valid in list
	if 'filelist.get().isNull(),filelist'[filenam S ER=1,RM=$$^MSG("1086")
	quit


ERROR(M)	// Input order syntax error

	type public String WRD,wrd
	set WRD=wrd.get()
	do ERROR^DBSQRY(.M)
	quit


PCNT	// Percentage
	type Number op,I,savptr
	type String val,z
	type public Number wrdptr
	type public String string,wrd,X

	set z=string
	for I=z.length():-1:0 quit:"+-*/\#"[z.extract(I)
	set val=z.extract(I+1,999),op=z.extract(I),string=z.extract(1,I-1)

	if val=(+val) set val=val/100
	else  set op="",op="-" if "+-"[op set val="("_op_val_"/100+1)",op="*"

	set z=$$PARSE^DBSQRY(X,.wrdptr)
	if z.upperCase()="OF" do {  quit
		set string=string_val_"*"
		set wrd=$$PARSE^DBSQRY(.X,.wrdptr)
		if wrd=+wrd set string=string_wrd quit
		if z=")" quit
		set wrd=wrd.upperCase()
		if wrd["."!(wrd["[") do DINAM quit
		if $$ISDINAM(.wrd) do DINAM quit

		// Invalid percentage
		do ERROR($$^MSG("5324")) quit
		}

	// Invalid percentage
	if I=0 do ERROR($$^MSG("5324")) quit

	if "+-"[op set string=string_"*"_(1+$S(op="+":val,1:-val)) quit
	set string=string_op_val
	quit


public SYNTAX(X,filelist)	// Syntactic verification of Input string 
	type String z

	set z=$$UNUMSTR(X,"",.filelist,1)
	quit


NEWKEYS	// Build Indirection new string vnew from keys parameter

	type Number I
	type String kn
	type public String vnew,keys

	set vnew=""
	for I=1:1:keys.length(",") set kn=keys.piece(",",I) if kn.length("""")#2 set vnew=vnew_","_(kn.piece("=",1))
	set vnew=vnew.extract(2,vnew.length())
	quit


DEFKEYS	// Define access keys as local varibles

	type Number I
	type String kn
	type public String kn,keys
	for I=1:1:keys.length(",") set kn=keys.piece(",",I) if kn.length("""")#2 set @kn.piece("=",1)=kn.piece("=",2,999)
	quit
		

vSIG()	quit "60479^60364^Pat Kelly^6710"	// Signature - LTD^TIME^USER^SIZE
