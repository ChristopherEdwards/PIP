TRNFILE(RecordTRN trn, String vpar, Boolean vparNorm) // TRN - Transaction Codes Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (176)            12/12/2006
	// Trigger Definition (12)                     08/12/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = trn.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(trn,.vxins(),10,"|")
	if %O = 1 quit:'trn.isChanged()  do AUDIT^UCUTILN(trn,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ETC = trn.etc

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ETC").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("TRN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("TRN","ETC = :trn.etc")            // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ETC

	type RecordTRN trn = Db.getRecord("TRN","ETC=:ETC")
	if (%ProcessMode = 2) do {
		do trn.setMode(2)

		do TRNFILE(trn,vpar)
	}
	else  do VINDEX(trn)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordTRN trn

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("TRN","ETC = :trn.etc") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(trn,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(trn,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(trn,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^TRN(vobj(trn,-3),n)=vobj(trn,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(trn,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(trn,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^TRN(vobj(trn,-3),n)=vobj(trn,n)
			#ENDBYPASS
		}

	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.trn) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordTRN trn
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^TRN(vobj(trn,-3),n)) quit:n.isNull()  if 'vobj(trn,n).data(),^TRN(vobj(trn,-3),n).data()#2 set vobj(trn,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordTRN trn

	if 'vkeychg.get(),trn.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.trn)                      // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(trn,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^TRN(vobj(trn,-3))                                // Delete Record
	quit


vinit // Initialize default values

	type public RecordTRN trn

	// Type local variables for access keys for defaults
	type public String ETC

	if trn.dtl.isNull() set trn.dtl = 0                    // dtl
	if trn.enc.isNull() set trn.enc = 0                    // enc
	if trn.lnkdsabl.isNull() set trn.lnkdsabl = 0          // lnkdsabl
	if trn.lnknbk.isNull() set trn.lnknbk = 0              // lnknbk
	if trn.mff.isNull() set trn.mff = 0                    // mff
	if trn.mfreq1.isNull() set trn.mfreq1 = 0              // mfreq1
	if trn.mfreq2.isNull() set trn.mfreq2 = 0              // mfreq2
	if trn.mfreq3.isNull() set trn.mfreq3 = 0              // mfreq3
	if trn.mfreq4.isNull() set trn.mfreq4 = 0              // mfreq4
	if trn.offlnupdt.isNull() set trn.offlnupdt = 0        // offlnupdt
	if trn.pcfd1.isNull() set trn.pcfd1 = 0                // pcfd1
	if trn.pcfd10.isNull() set trn.pcfd10 = 0              // pcfd10
	if trn.pcfd11.isNull() set trn.pcfd11 = 0              // pcfd11
	if trn.pcfd12.isNull() set trn.pcfd12 = 0              // pcfd12
	if trn.pcfd13.isNull() set trn.pcfd13 = 0              // pcfd13
	if trn.pcfd14.isNull() set trn.pcfd14 = 0              // pcfd14
	if trn.pcfd15.isNull() set trn.pcfd15 = 0              // pcfd15
	if trn.pcfd17.isNull() set trn.pcfd17 = 0              // pcfd17
	if trn.pcfd18.isNull() set trn.pcfd18 = 0              // pcfd18
	if trn.pcfd19.isNull() set trn.pcfd19 = 0              // pcfd19
	if trn.pcfd2.isNull() set trn.pcfd2 = 0                // pcfd2
	if trn.pcfd20.isNull() set trn.pcfd20 = 0              // pcfd20
	if trn.pcfd21.isNull() set trn.pcfd21 = 0              // pcfd21
	if trn.pcfd22.isNull() set trn.pcfd22 = 0              // pcfd22
	if trn.pcfd23.isNull() set trn.pcfd23 = 0              // pcfd23
	if trn.pcfd24.isNull() set trn.pcfd24 = 0              // pcfd24
	if trn.pcfd26.isNull() set trn.pcfd26 = 0              // pcfd26
	if trn.pcfd27.isNull() set trn.pcfd27 = 0              // pcfd27
	if trn.pcfd28.isNull() set trn.pcfd28 = 0              // pcfd28
	if trn.pcfd29.isNull() set trn.pcfd29 = 0              // pcfd29
	if trn.pcfd30.isNull() set trn.pcfd30 = 0              // pcfd30
	if trn.pcfd31.isNull() set trn.pcfd31 = 0              // pcfd31
	if trn.pcfd32.isNull() set trn.pcfd32 = 0              // pcfd32
	if trn.pcfd33.isNull() set trn.pcfd33 = 0              // pcfd33
	if trn.pcfd34.isNull() set trn.pcfd34 = 0              // pcfd34
	if trn.pcfd35.isNull() set trn.pcfd35 = 0              // pcfd35
	if trn.pcfd36.isNull() set trn.pcfd36 = 0              // pcfd36
	if trn.pcfd37.isNull() set trn.pcfd37 = 0              // pcfd37
	if trn.pcfd38.isNull() set trn.pcfd38 = 0              // pcfd38
	if trn.pcfd39.isNull() set trn.pcfd39 = 0              // pcfd39
	if trn.pcfd4.isNull() set trn.pcfd4 = 0                // pcfd4
	if trn.pcfd40.isNull() set trn.pcfd40 = 0              // pcfd40
	if trn.pcfd41.isNull() set trn.pcfd41 = 0              // pcfd41
	if trn.pcfd42.isNull() set trn.pcfd42 = 0              // pcfd42
	if trn.pcfd5.isNull() set trn.pcfd5 = 0                // pcfd5
	if trn.pcfd6.isNull() set trn.pcfd6 = 0                // pcfd6
	if trn.pcfd8.isNull() set trn.pcfd8 = 0                // pcfd8
	if trn.pcfd9.isNull() set trn.pcfd9 = 0                // pcfd9
	if trn.pcfl1.isNull() set trn.pcfl1 = 0                // pcfl1
	if trn.pcfl10.isNull() set trn.pcfl10 = 0              // pcfl10
	if trn.pcfl11.isNull() set trn.pcfl11 = 0              // pcfl11
	if trn.pcfl12.isNull() set trn.pcfl12 = 0              // pcfl12
	if trn.pcfl13.isNull() set trn.pcfl13 = 0              // pcfl13
	if trn.pcfl14.isNull() set trn.pcfl14 = 0              // pcfl14
	if trn.pcfl15.isNull() set trn.pcfl15 = 0              // pcfl15
	if trn.pcfl16.isNull() set trn.pcfl16 = 0              // pcfl16
	if trn.pcfl17.isNull() set trn.pcfl17 = 0              // pcfl17
	if trn.pcfl18.isNull() set trn.pcfl18 = 0              // pcfl18
	if trn.pcfl19.isNull() set trn.pcfl19 = 0              // pcfl19
	if trn.pcfl2.isNull() set trn.pcfl2 = 0                // pcfl2
	if trn.pcfl20.isNull() set trn.pcfl20 = 0              // pcfl20
	if trn.pcfl21.isNull() set trn.pcfl21 = 0              // pcfl21
	if trn.pcfl23.isNull() set trn.pcfl23 = 0              // pcfl23
	if trn.pcfl24.isNull() set trn.pcfl24 = 0              // pcfl24
	if trn.pcfl25.isNull() set trn.pcfl25 = 0              // pcfl25
	if trn.pcfl26.isNull() set trn.pcfl26 = 0              // pcfl26
	if trn.pcfl27.isNull() set trn.pcfl27 = 0              // pcfl27
	if trn.pcfl28.isNull() set trn.pcfl28 = 0              // pcfl28
	if trn.pcfl29.isNull() set trn.pcfl29 = 0              // pcfl29
	if trn.pcfl3.isNull() set trn.pcfl3 = 0                // pcfl3
	if trn.pcfl31.isNull() set trn.pcfl31 = 0              // pcfl31
	if trn.pcfl32.isNull() set trn.pcfl32 = 0              // pcfl32
	if trn.pcfl33.isNull() set trn.pcfl33 = 0              // pcfl33
	if trn.pcfl34.isNull() set trn.pcfl34 = 0              // pcfl34
	if trn.pcfl35.isNull() set trn.pcfl35 = 0              // pcfl35
	if trn.pcfl36.isNull() set trn.pcfl36 = 0              // pcfl36
	if trn.pcfl37.isNull() set trn.pcfl37 = 0              // pcfl37
	if trn.pcfl38.isNull() set trn.pcfl38 = 0              // pcfl38
	if trn.pcfl39.isNull() set trn.pcfl39 = 0              // pcfl39
	if trn.pcfl4.isNull() set trn.pcfl4 = 0                // pcfl4
	if trn.pcfl40.isNull() set trn.pcfl40 = 0              // pcfl40
	if trn.pcfl41.isNull() set trn.pcfl41 = 0              // pcfl41
	if trn.pcfl42.isNull() set trn.pcfl42 = 0              // pcfl42
	if trn.pcfl43.isNull() set trn.pcfl43 = 0              // pcfl43
	if trn.pcfl5.isNull() set trn.pcfl5 = 0                // pcfl5
	if trn.pcfl6.isNull() set trn.pcfl6 = 0                // pcfl6
	if trn.pcfl7.isNull() set trn.pcfl7 = 0                // pcfl7
	if trn.pcfl9.isNull() set trn.pcfl9 = 0                // pcfl9
	if trn.popf.isNull() set trn.popf = 0                  // popf
	if trn.ppf.isNull() set trn.ppf = 0                    // ppf
	if trn.prohoff.isNull() set trn.prohoff = 0            // prohoff
	if trn.receipt.isNull() set trn.receipt = 0            // receipt
	if trn.sbtrn.isNull() set trn.sbtrn = 0                // sbtrn
	if trn.sgt.isNull() set trn.sgt = 0                    // sgt
	if trn.skpp.isNull() set trn.skpp = 0                  // skpp
	if trn.stpnt.isNull() set trn.stpnt = 0                // stpnt
	if trn.voucher.isNull() set trn.voucher = 0            // voucher
	quit


vreqn // Validate required data items

	type public RecordTRN trn

	if trn.cls.isNull() do vreqerr("CLS") quit
	if trn.des.isNull() do vreqerr("DES") quit
	if trn.dtl.isNull() do vreqerr("DTL") quit
	if trn.enc.isNull() do vreqerr("ENC") quit
	if trn.grp.isNull() do vreqerr("GRP") quit
	if trn.lnkdsabl.isNull() do vreqerr("LNKDSABL") quit
	if trn.lnknbk.isNull() do vreqerr("LNKNBK") quit
	if trn.mff.isNull() do vreqerr("MFF") quit
	if trn.mfreq1.isNull() do vreqerr("MFREQ1") quit
	if trn.mfreq2.isNull() do vreqerr("MFREQ2") quit
	if trn.mfreq3.isNull() do vreqerr("MFREQ3") quit
	if trn.mfreq4.isNull() do vreqerr("MFREQ4") quit
	if trn.offlnupdt.isNull() do vreqerr("OFFLNUPDT") quit
	if trn.pcfd1.isNull() do vreqerr("PCFD1") quit
	if trn.pcfd10.isNull() do vreqerr("PCFD10") quit
	if trn.pcfd11.isNull() do vreqerr("PCFD11") quit
	if trn.pcfd12.isNull() do vreqerr("PCFD12") quit
	if trn.pcfd13.isNull() do vreqerr("PCFD13") quit
	if trn.pcfd14.isNull() do vreqerr("PCFD14") quit
	if trn.pcfd15.isNull() do vreqerr("PCFD15") quit
	if trn.pcfd17.isNull() do vreqerr("PCFD17") quit
	if trn.pcfd18.isNull() do vreqerr("PCFD18") quit
	if trn.pcfd19.isNull() do vreqerr("PCFD19") quit
	if trn.pcfd2.isNull() do vreqerr("PCFD2") quit
	if trn.pcfd20.isNull() do vreqerr("PCFD20") quit
	if trn.pcfd21.isNull() do vreqerr("PCFD21") quit
	if trn.pcfd22.isNull() do vreqerr("PCFD22") quit
	if trn.pcfd23.isNull() do vreqerr("PCFD23") quit
	if trn.pcfd24.isNull() do vreqerr("PCFD24") quit
	if trn.pcfd26.isNull() do vreqerr("PCFD26") quit
	if trn.pcfd27.isNull() do vreqerr("PCFD27") quit
	if trn.pcfd28.isNull() do vreqerr("PCFD28") quit
	if trn.pcfd29.isNull() do vreqerr("PCFD29") quit
	if trn.pcfd30.isNull() do vreqerr("PCFD30") quit
	if trn.pcfd31.isNull() do vreqerr("PCFD31") quit
	if trn.pcfd34.isNull() do vreqerr("PCFD34") quit
	if trn.pcfd35.isNull() do vreqerr("PCFD35") quit
	if trn.pcfd36.isNull() do vreqerr("PCFD36") quit
	if trn.pcfd37.isNull() do vreqerr("PCFD37") quit
	if trn.pcfd38.isNull() do vreqerr("PCFD38") quit
	if trn.pcfd39.isNull() do vreqerr("PCFD39") quit
	if trn.pcfd4.isNull() do vreqerr("PCFD4") quit
	if trn.pcfd40.isNull() do vreqerr("PCFD40") quit
	if trn.pcfd41.isNull() do vreqerr("PCFD41") quit
	if trn.pcfd42.isNull() do vreqerr("PCFD42") quit
	if trn.pcfd5.isNull() do vreqerr("PCFD5") quit
	if trn.pcfd6.isNull() do vreqerr("PCFD6") quit
	if trn.pcfd8.isNull() do vreqerr("PCFD8") quit
	if trn.pcfd9.isNull() do vreqerr("PCFD9") quit
	if trn.pcfl1.isNull() do vreqerr("PCFL1") quit
	if trn.pcfl10.isNull() do vreqerr("PCFL10") quit
	if trn.pcfl11.isNull() do vreqerr("PCFL11") quit
	if trn.pcfl12.isNull() do vreqerr("PCFL12") quit
	if trn.pcfl13.isNull() do vreqerr("PCFL13") quit
	if trn.pcfl14.isNull() do vreqerr("PCFL14") quit
	if trn.pcfl15.isNull() do vreqerr("PCFL15") quit
	if trn.pcfl16.isNull() do vreqerr("PCFL16") quit
	if trn.pcfl17.isNull() do vreqerr("PCFL17") quit
	if trn.pcfl18.isNull() do vreqerr("PCFL18") quit
	if trn.pcfl19.isNull() do vreqerr("PCFL19") quit
	if trn.pcfl2.isNull() do vreqerr("PCFL2") quit
	if trn.pcfl20.isNull() do vreqerr("PCFL20") quit
	if trn.pcfl21.isNull() do vreqerr("PCFL21") quit
	if trn.pcfl23.isNull() do vreqerr("PCFL23") quit
	if trn.pcfl24.isNull() do vreqerr("PCFL24") quit
	if trn.pcfl25.isNull() do vreqerr("PCFL25") quit
	if trn.pcfl26.isNull() do vreqerr("PCFL26") quit
	if trn.pcfl27.isNull() do vreqerr("PCFL27") quit
	if trn.pcfl28.isNull() do vreqerr("PCFL28") quit
	if trn.pcfl29.isNull() do vreqerr("PCFL29") quit
	if trn.pcfl3.isNull() do vreqerr("PCFL3") quit
	if trn.pcfl31.isNull() do vreqerr("PCFL31") quit
	if trn.pcfl32.isNull() do vreqerr("PCFL32") quit
	if trn.pcfl33.isNull() do vreqerr("PCFL33") quit
	if trn.pcfl34.isNull() do vreqerr("PCFL34") quit
	if trn.pcfl35.isNull() do vreqerr("PCFL35") quit
	if trn.pcfl36.isNull() do vreqerr("PCFL36") quit
	if trn.pcfl37.isNull() do vreqerr("PCFL37") quit
	if trn.pcfl38.isNull() do vreqerr("PCFL38") quit
	if trn.pcfl39.isNull() do vreqerr("PCFL39") quit
	if trn.pcfl4.isNull() do vreqerr("PCFL4") quit
	if trn.pcfl40.isNull() do vreqerr("PCFL40") quit
	if trn.pcfl41.isNull() do vreqerr("PCFL41") quit
	if trn.pcfl42.isNull() do vreqerr("PCFL42") quit
	if trn.pcfl43.isNull() do vreqerr("PCFL43") quit
	if trn.pcfl5.isNull() do vreqerr("PCFL5") quit
	if trn.pcfl6.isNull() do vreqerr("PCFL6") quit
	if trn.pcfl7.isNull() do vreqerr("PCFL7") quit
	if trn.pcfl9.isNull() do vreqerr("PCFL9") quit
	if trn.popf.isNull() do vreqerr("POPF") quit
	if trn.ppf.isNull() do vreqerr("PPF") quit
	if trn.prohoff.isNull() do vreqerr("PROHOFF") quit
	if trn.receipt.isNull() do vreqerr("RECEIPT") quit
	if trn.sbtrn.isNull() do vreqerr("SBTRN") quit
	if trn.sgt.isNull() do vreqerr("SGT") quit
	if trn.skpp.isNull() do vreqerr("SKPP") quit
	if trn.voucher.isNull() do vreqerr("VOUCHER") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordTRN trn

	if trn.etc.isNull() do vreqerr("ETC") quit

	if 'vobj(trn,-100,0,"").order().isNull() do {
		if vx("CLS").exists(),trn.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),trn.grp.isNull() do vreqerr("GRP") quit
		if vx("DES").exists(),trn.des.isNull() do vreqerr("DES") quit
		if vx("MFF").exists(),trn.mff.isNull() do vreqerr("MFF") quit
		if vx("DTL").exists(),trn.dtl.isNull() do vreqerr("DTL") quit
		if vx("VOUCHER").exists(),trn.voucher.isNull() do vreqerr("VOUCHER") quit
		if vx("POPF").exists(),trn.popf.isNull() do vreqerr("POPF") quit
		if vx("PPF").exists(),trn.ppf.isNull() do vreqerr("PPF") quit
		if vx("SGT").exists(),trn.sgt.isNull() do vreqerr("SGT") quit
		if vx("RECEIPT").exists(),trn.receipt.isNull() do vreqerr("RECEIPT") quit
		if vx("SBTRN").exists(),trn.sbtrn.isNull() do vreqerr("SBTRN") quit
	}
	if 'vobj(trn,-100,1,"").order().isNull() do {
		if vx("ENC").exists(),trn.enc.isNull() do vreqerr("ENC") quit
		if vx("SKPP").exists(),trn.skpp.isNull() do vreqerr("SKPP") quit
		if vx("OFFLNUPDT").exists(),trn.offlnupdt.isNull() do vreqerr("OFFLNUPDT") quit
		if vx("PROHOFF").exists(),trn.prohoff.isNull() do vreqerr("PROHOFF") quit
	}
	if 'vobj(trn,-100,2,"").order().isNull() do {
		if vx("LNKNBK").exists(),trn.lnknbk.isNull() do vreqerr("LNKNBK") quit
		if vx("LNKDSABL").exists(),trn.lnkdsabl.isNull() do vreqerr("LNKDSABL") quit
	}
	if 'vobj(trn,-100,3,"").order().isNull() do {
		if vx("MFREQ1").exists(),trn.mfreq1.isNull() do vreqerr("MFREQ1") quit
		if vx("MFREQ2").exists(),trn.mfreq2.isNull() do vreqerr("MFREQ2") quit
		if vx("MFREQ3").exists(),trn.mfreq3.isNull() do vreqerr("MFREQ3") quit
		if vx("MFREQ4").exists(),trn.mfreq4.isNull() do vreqerr("MFREQ4") quit
	}
	if 'vobj(trn,-100,5,"").order().isNull() do {
		if vx("PCFD1").exists(),trn.pcfd1.isNull() do vreqerr("PCFD1") quit
		if vx("PCFD2").exists(),trn.pcfd2.isNull() do vreqerr("PCFD2") quit
		if vx("PCFD4").exists(),trn.pcfd4.isNull() do vreqerr("PCFD4") quit
		if vx("PCFD5").exists(),trn.pcfd5.isNull() do vreqerr("PCFD5") quit
		if vx("PCFD6").exists(),trn.pcfd6.isNull() do vreqerr("PCFD6") quit
		if vx("PCFD8").exists(),trn.pcfd8.isNull() do vreqerr("PCFD8") quit
		if vx("PCFD9").exists(),trn.pcfd9.isNull() do vreqerr("PCFD9") quit
		if vx("PCFD10").exists(),trn.pcfd10.isNull() do vreqerr("PCFD10") quit
		if vx("PCFD11").exists(),trn.pcfd11.isNull() do vreqerr("PCFD11") quit
		if vx("PCFD12").exists(),trn.pcfd12.isNull() do vreqerr("PCFD12") quit
		if vx("PCFD13").exists(),trn.pcfd13.isNull() do vreqerr("PCFD13") quit
		if vx("PCFD14").exists(),trn.pcfd14.isNull() do vreqerr("PCFD14") quit
		if vx("PCFD15").exists(),trn.pcfd15.isNull() do vreqerr("PCFD15") quit
		if vx("PCFD17").exists(),trn.pcfd17.isNull() do vreqerr("PCFD17") quit
		if vx("PCFD18").exists(),trn.pcfd18.isNull() do vreqerr("PCFD18") quit
		if vx("PCFD19").exists(),trn.pcfd19.isNull() do vreqerr("PCFD19") quit
		if vx("PCFD20").exists(),trn.pcfd20.isNull() do vreqerr("PCFD20") quit
		if vx("PCFD21").exists(),trn.pcfd21.isNull() do vreqerr("PCFD21") quit
		if vx("PCFD22").exists(),trn.pcfd22.isNull() do vreqerr("PCFD22") quit
		if vx("PCFD23").exists(),trn.pcfd23.isNull() do vreqerr("PCFD23") quit
		if vx("PCFD24").exists(),trn.pcfd24.isNull() do vreqerr("PCFD24") quit
		if vx("PCFD26").exists(),trn.pcfd26.isNull() do vreqerr("PCFD26") quit
		if vx("PCFD27").exists(),trn.pcfd27.isNull() do vreqerr("PCFD27") quit
		if vx("PCFD28").exists(),trn.pcfd28.isNull() do vreqerr("PCFD28") quit
		if vx("PCFD29").exists(),trn.pcfd29.isNull() do vreqerr("PCFD29") quit
		if vx("PCFD30").exists(),trn.pcfd30.isNull() do vreqerr("PCFD30") quit
		if vx("PCFD31").exists(),trn.pcfd31.isNull() do vreqerr("PCFD31") quit
		if vx("PCFD34").exists(),trn.pcfd34.isNull() do vreqerr("PCFD34") quit
		if vx("PCFD35").exists(),trn.pcfd35.isNull() do vreqerr("PCFD35") quit
		if vx("PCFD36").exists(),trn.pcfd36.isNull() do vreqerr("PCFD36") quit
		if vx("PCFD37").exists(),trn.pcfd37.isNull() do vreqerr("PCFD37") quit
		if vx("PCFD38").exists(),trn.pcfd38.isNull() do vreqerr("PCFD38") quit
		if vx("PCFD39").exists(),trn.pcfd39.isNull() do vreqerr("PCFD39") quit
		if vx("PCFD40").exists(),trn.pcfd40.isNull() do vreqerr("PCFD40") quit
		if vx("PCFD41").exists(),trn.pcfd41.isNull() do vreqerr("PCFD41") quit
		if vx("PCFD42").exists(),trn.pcfd42.isNull() do vreqerr("PCFD42") quit
	}
	if 'vobj(trn,-100,6,"").order().isNull() do {
		if vx("PCFL1").exists(),trn.pcfl1.isNull() do vreqerr("PCFL1") quit
		if vx("PCFL2").exists(),trn.pcfl2.isNull() do vreqerr("PCFL2") quit
		if vx("PCFL3").exists(),trn.pcfl3.isNull() do vreqerr("PCFL3") quit
		if vx("PCFL4").exists(),trn.pcfl4.isNull() do vreqerr("PCFL4") quit
		if vx("PCFL5").exists(),trn.pcfl5.isNull() do vreqerr("PCFL5") quit
		if vx("PCFL6").exists(),trn.pcfl6.isNull() do vreqerr("PCFL6") quit
		if vx("PCFL7").exists(),trn.pcfl7.isNull() do vreqerr("PCFL7") quit
		if vx("PCFL9").exists(),trn.pcfl9.isNull() do vreqerr("PCFL9") quit
		if vx("PCFL10").exists(),trn.pcfl10.isNull() do vreqerr("PCFL10") quit
		if vx("PCFL11").exists(),trn.pcfl11.isNull() do vreqerr("PCFL11") quit
		if vx("PCFL12").exists(),trn.pcfl12.isNull() do vreqerr("PCFL12") quit
		if vx("PCFL13").exists(),trn.pcfl13.isNull() do vreqerr("PCFL13") quit
		if vx("PCFL14").exists(),trn.pcfl14.isNull() do vreqerr("PCFL14") quit
		if vx("PCFL15").exists(),trn.pcfl15.isNull() do vreqerr("PCFL15") quit
		if vx("PCFL16").exists(),trn.pcfl16.isNull() do vreqerr("PCFL16") quit
		if vx("PCFL17").exists(),trn.pcfl17.isNull() do vreqerr("PCFL17") quit
		if vx("PCFL18").exists(),trn.pcfl18.isNull() do vreqerr("PCFL18") quit
		if vx("PCFL19").exists(),trn.pcfl19.isNull() do vreqerr("PCFL19") quit
		if vx("PCFL20").exists(),trn.pcfl20.isNull() do vreqerr("PCFL20") quit
		if vx("PCFL21").exists(),trn.pcfl21.isNull() do vreqerr("PCFL21") quit
		if vx("PCFL23").exists(),trn.pcfl23.isNull() do vreqerr("PCFL23") quit
		if vx("PCFL24").exists(),trn.pcfl24.isNull() do vreqerr("PCFL24") quit
		if vx("PCFL25").exists(),trn.pcfl25.isNull() do vreqerr("PCFL25") quit
		if vx("PCFL26").exists(),trn.pcfl26.isNull() do vreqerr("PCFL26") quit
		if vx("PCFL27").exists(),trn.pcfl27.isNull() do vreqerr("PCFL27") quit
		if vx("PCFL28").exists(),trn.pcfl28.isNull() do vreqerr("PCFL28") quit
		if vx("PCFL29").exists(),trn.pcfl29.isNull() do vreqerr("PCFL29") quit
		if vx("PCFL31").exists(),trn.pcfl31.isNull() do vreqerr("PCFL31") quit
		if vx("PCFL32").exists(),trn.pcfl32.isNull() do vreqerr("PCFL32") quit
		if vx("PCFL33").exists(),trn.pcfl33.isNull() do vreqerr("PCFL33") quit
		if vx("PCFL34").exists(),trn.pcfl34.isNull() do vreqerr("PCFL34") quit
		if vx("PCFL35").exists(),trn.pcfl35.isNull() do vreqerr("PCFL35") quit
		if vx("PCFL36").exists(),trn.pcfl36.isNull() do vreqerr("PCFL36") quit
		if vx("PCFL37").exists(),trn.pcfl37.isNull() do vreqerr("PCFL37") quit
		if vx("PCFL38").exists(),trn.pcfl38.isNull() do vreqerr("PCFL38") quit
		if vx("PCFL39").exists(),trn.pcfl39.isNull() do vreqerr("PCFL39") quit
		if vx("PCFL40").exists(),trn.pcfl40.isNull() do vreqerr("PCFL40") quit
		if vx("PCFL41").exists(),trn.pcfl41.isNull() do vreqerr("PCFL41") quit
		if vx("PCFL42").exists(),trn.pcfl42.isNull() do vreqerr("PCFL42") quit
		if vx("PCFL43").exists(),trn.pcfl43.isNull() do vreqerr("PCFL43") quit
	}
		if vx("CLS").exists(),trn.cls.isNull() do vreqerr("CLS") quit
		if vx("DES").exists(),trn.des.isNull() do vreqerr("DES") quit
		if vx("DTL").exists(),trn.dtl.isNull() do vreqerr("DTL") quit
		if vx("ENC").exists(),trn.enc.isNull() do vreqerr("ENC") quit
		if vx("GRP").exists(),trn.grp.isNull() do vreqerr("GRP") quit
		if vx("LNKDSABL").exists(),trn.lnkdsabl.isNull() do vreqerr("LNKDSABL") quit
		if vx("LNKNBK").exists(),trn.lnknbk.isNull() do vreqerr("LNKNBK") quit
		if vx("MFF").exists(),trn.mff.isNull() do vreqerr("MFF") quit
		if vx("MFREQ1").exists(),trn.mfreq1.isNull() do vreqerr("MFREQ1") quit
		if vx("MFREQ2").exists(),trn.mfreq2.isNull() do vreqerr("MFREQ2") quit
		if vx("MFREQ3").exists(),trn.mfreq3.isNull() do vreqerr("MFREQ3") quit
		if vx("MFREQ4").exists(),trn.mfreq4.isNull() do vreqerr("MFREQ4") quit
		if vx("OFFLNUPDT").exists(),trn.offlnupdt.isNull() do vreqerr("OFFLNUPDT") quit
		if vx("PCFD1").exists(),trn.pcfd1.isNull() do vreqerr("PCFD1") quit
		if vx("PCFD10").exists(),trn.pcfd10.isNull() do vreqerr("PCFD10") quit
		if vx("PCFD11").exists(),trn.pcfd11.isNull() do vreqerr("PCFD11") quit
		if vx("PCFD12").exists(),trn.pcfd12.isNull() do vreqerr("PCFD12") quit
		if vx("PCFD13").exists(),trn.pcfd13.isNull() do vreqerr("PCFD13") quit
		if vx("PCFD14").exists(),trn.pcfd14.isNull() do vreqerr("PCFD14") quit
		if vx("PCFD15").exists(),trn.pcfd15.isNull() do vreqerr("PCFD15") quit
		if vx("PCFD17").exists(),trn.pcfd17.isNull() do vreqerr("PCFD17") quit
		if vx("PCFD18").exists(),trn.pcfd18.isNull() do vreqerr("PCFD18") quit
		if vx("PCFD19").exists(),trn.pcfd19.isNull() do vreqerr("PCFD19") quit
		if vx("PCFD2").exists(),trn.pcfd2.isNull() do vreqerr("PCFD2") quit
		if vx("PCFD20").exists(),trn.pcfd20.isNull() do vreqerr("PCFD20") quit
		if vx("PCFD21").exists(),trn.pcfd21.isNull() do vreqerr("PCFD21") quit
		if vx("PCFD22").exists(),trn.pcfd22.isNull() do vreqerr("PCFD22") quit
		if vx("PCFD23").exists(),trn.pcfd23.isNull() do vreqerr("PCFD23") quit
		if vx("PCFD24").exists(),trn.pcfd24.isNull() do vreqerr("PCFD24") quit
		if vx("PCFD26").exists(),trn.pcfd26.isNull() do vreqerr("PCFD26") quit
		if vx("PCFD27").exists(),trn.pcfd27.isNull() do vreqerr("PCFD27") quit
		if vx("PCFD28").exists(),trn.pcfd28.isNull() do vreqerr("PCFD28") quit
		if vx("PCFD29").exists(),trn.pcfd29.isNull() do vreqerr("PCFD29") quit
		if vx("PCFD30").exists(),trn.pcfd30.isNull() do vreqerr("PCFD30") quit
		if vx("PCFD31").exists(),trn.pcfd31.isNull() do vreqerr("PCFD31") quit
		if vx("PCFD34").exists(),trn.pcfd34.isNull() do vreqerr("PCFD34") quit
		if vx("PCFD35").exists(),trn.pcfd35.isNull() do vreqerr("PCFD35") quit
		if vx("PCFD36").exists(),trn.pcfd36.isNull() do vreqerr("PCFD36") quit
		if vx("PCFD37").exists(),trn.pcfd37.isNull() do vreqerr("PCFD37") quit
		if vx("PCFD38").exists(),trn.pcfd38.isNull() do vreqerr("PCFD38") quit
		if vx("PCFD39").exists(),trn.pcfd39.isNull() do vreqerr("PCFD39") quit
		if vx("PCFD4").exists(),trn.pcfd4.isNull() do vreqerr("PCFD4") quit
		if vx("PCFD40").exists(),trn.pcfd40.isNull() do vreqerr("PCFD40") quit
		if vx("PCFD41").exists(),trn.pcfd41.isNull() do vreqerr("PCFD41") quit
		if vx("PCFD42").exists(),trn.pcfd42.isNull() do vreqerr("PCFD42") quit
		if vx("PCFD5").exists(),trn.pcfd5.isNull() do vreqerr("PCFD5") quit
		if vx("PCFD6").exists(),trn.pcfd6.isNull() do vreqerr("PCFD6") quit
		if vx("PCFD8").exists(),trn.pcfd8.isNull() do vreqerr("PCFD8") quit
		if vx("PCFD9").exists(),trn.pcfd9.isNull() do vreqerr("PCFD9") quit
		if vx("PCFL1").exists(),trn.pcfl1.isNull() do vreqerr("PCFL1") quit
		if vx("PCFL10").exists(),trn.pcfl10.isNull() do vreqerr("PCFL10") quit
		if vx("PCFL11").exists(),trn.pcfl11.isNull() do vreqerr("PCFL11") quit
		if vx("PCFL12").exists(),trn.pcfl12.isNull() do vreqerr("PCFL12") quit
		if vx("PCFL13").exists(),trn.pcfl13.isNull() do vreqerr("PCFL13") quit
		if vx("PCFL14").exists(),trn.pcfl14.isNull() do vreqerr("PCFL14") quit
		if vx("PCFL15").exists(),trn.pcfl15.isNull() do vreqerr("PCFL15") quit
		if vx("PCFL16").exists(),trn.pcfl16.isNull() do vreqerr("PCFL16") quit
		if vx("PCFL17").exists(),trn.pcfl17.isNull() do vreqerr("PCFL17") quit
		if vx("PCFL18").exists(),trn.pcfl18.isNull() do vreqerr("PCFL18") quit
		if vx("PCFL19").exists(),trn.pcfl19.isNull() do vreqerr("PCFL19") quit
		if vx("PCFL2").exists(),trn.pcfl2.isNull() do vreqerr("PCFL2") quit
		if vx("PCFL20").exists(),trn.pcfl20.isNull() do vreqerr("PCFL20") quit
		if vx("PCFL21").exists(),trn.pcfl21.isNull() do vreqerr("PCFL21") quit
		if vx("PCFL23").exists(),trn.pcfl23.isNull() do vreqerr("PCFL23") quit
		if vx("PCFL24").exists(),trn.pcfl24.isNull() do vreqerr("PCFL24") quit
		if vx("PCFL25").exists(),trn.pcfl25.isNull() do vreqerr("PCFL25") quit
		if vx("PCFL26").exists(),trn.pcfl26.isNull() do vreqerr("PCFL26") quit
		if vx("PCFL27").exists(),trn.pcfl27.isNull() do vreqerr("PCFL27") quit
		if vx("PCFL28").exists(),trn.pcfl28.isNull() do vreqerr("PCFL28") quit
		if vx("PCFL29").exists(),trn.pcfl29.isNull() do vreqerr("PCFL29") quit
		if vx("PCFL3").exists(),trn.pcfl3.isNull() do vreqerr("PCFL3") quit
		if vx("PCFL31").exists(),trn.pcfl31.isNull() do vreqerr("PCFL31") quit
		if vx("PCFL32").exists(),trn.pcfl32.isNull() do vreqerr("PCFL32") quit
		if vx("PCFL33").exists(),trn.pcfl33.isNull() do vreqerr("PCFL33") quit
		if vx("PCFL34").exists(),trn.pcfl34.isNull() do vreqerr("PCFL34") quit
		if vx("PCFL35").exists(),trn.pcfl35.isNull() do vreqerr("PCFL35") quit
		if vx("PCFL36").exists(),trn.pcfl36.isNull() do vreqerr("PCFL36") quit
		if vx("PCFL37").exists(),trn.pcfl37.isNull() do vreqerr("PCFL37") quit
		if vx("PCFL38").exists(),trn.pcfl38.isNull() do vreqerr("PCFL38") quit
		if vx("PCFL39").exists(),trn.pcfl39.isNull() do vreqerr("PCFL39") quit
		if vx("PCFL4").exists(),trn.pcfl4.isNull() do vreqerr("PCFL4") quit
		if vx("PCFL40").exists(),trn.pcfl40.isNull() do vreqerr("PCFL40") quit
		if vx("PCFL41").exists(),trn.pcfl41.isNull() do vreqerr("PCFL41") quit
		if vx("PCFL42").exists(),trn.pcfl42.isNull() do vreqerr("PCFL42") quit
		if vx("PCFL43").exists(),trn.pcfl43.isNull() do vreqerr("PCFL43") quit
		if vx("PCFL5").exists(),trn.pcfl5.isNull() do vreqerr("PCFL5") quit
		if vx("PCFL6").exists(),trn.pcfl6.isNull() do vreqerr("PCFL6") quit
		if vx("PCFL7").exists(),trn.pcfl7.isNull() do vreqerr("PCFL7") quit
		if vx("PCFL9").exists(),trn.pcfl9.isNull() do vreqerr("PCFL9") quit
		if vx("POPF").exists(),trn.popf.isNull() do vreqerr("POPF") quit
		if vx("PPF").exists(),trn.ppf.isNull() do vreqerr("PPF") quit
		if vx("PROHOFF").exists(),trn.prohoff.isNull() do vreqerr("PROHOFF") quit
		if vx("RECEIPT").exists(),trn.receipt.isNull() do vreqerr("RECEIPT") quit
		if vx("SBTRN").exists(),trn.sbtrn.isNull() do vreqerr("SBTRN") quit
		if vx("SGT").exists(),trn.sgt.isNull() do vreqerr("SGT") quit
		if vx("SKPP").exists(),trn.skpp.isNull() do vreqerr("SKPP") quit
		if vx("VOUCHER").exists(),trn.voucher.isNull() do vreqerr("VOUCHER") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TRN","MSG",1767,"TRN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("SBTRN").exists()!vx("SBTRNTYP").exists()!vx("FORMID").exists()!vx("RECEIPT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordTRN trn
	if vx("").order().isNull() do AUDIT^UCUTILN(trn,.vx(),10,"|") quit
	if vx("DC").exists()!vx("ENC").exists()!vx("SKPP").exists()!vx("STPNT").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FEEPLN").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MFVAR1").exists()!vx("MFDSC1").exists()!vx("MFREQ1").exists()!vx("MFDFT1").exists()!vx("MFTBL1").exists()!vx("MFPP1").exists()!vx("MFVAR2").exists()!vx("MFDSC2").exists()!vx("MFREQ2").exists()!vx("MFDFT2").exists()!vx("MFTBL2").exists()!vx("MFPP2").exists()!vx("MFVAR3").exists()!vx("MFDSC3").exists()!vx("MFREQ3").exists()!vx("MFDFT3").exists()!vx("MFTBL3").exists()!vx("MFPP3").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MFVAR4").exists()!vx("MFDSC4").exists()!vx("MFREQ4").exists()!vx("MFDFT4").exists()!vx("MFDFT4").exists()!vx("MFTBL4").exists()!vx("MFPP4").exists()!vx("MFQRY1").exists()!vx("MFQRY2").exists()!vx("MFQRY3").exists()!vx("MFQRY4").exists()!vx("MFPRE1").exists()!vx("MFPRE2").exists()!vx("MFPRE3").exists()!vx("MFPRE4").exists()!vx("MFHLP1").exists()!vx("MFHLP2").exists()!vx("MFHLP3").exists()!vx("MFHLP4").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PCF").exists() do vbu5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PCFD1").exists()!vx("PCFD2").exists()!vx("PCFD3").exists()!vx("PCFD4").exists()!vx("PCFD5").exists()!vx("PCFD6").exists()!vx("PCFD7").exists()!vx("PCFD8").exists()!vx("PCFD9").exists()!vx("PCFD10").exists()!vx("PCFD11").exists()!vx("PCFD12").exists()!vx("PCFD13").exists()!vx("PCFD14").exists()!vx("PCFD15").exists()!vx("PCFD16").exists()!vx("PCFD17").exists()!vx("PCFD18").exists()!vx("PCFD19").exists()!vx("PCFD20").exists()!vx("PCFD21").exists()!vx("PCFD22").exists()!vx("PCFD23").exists()!vx("PCFD30").exists()!vx("PCFD31").exists()!vx("PCFD32").exists()!vx("PCFD33").exists()!vx("PCFD34").exists()!vx("PCFD35").exists()!vx("PCFD36").exists()!vx("PCFD41").exists() do vbu6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PCFL1").exists()!vx("PCFL2").exists()!vx("PCFL3").exists()!vx("PCFL4").exists()!vx("PCFL5").exists()!vx("PCFL6").exists()!vx("PCFL7").exists()!vx("PCFL8").exists()!vx("PCFL9").exists()!vx("PCFL10").exists()!vx("PCFL11").exists()!vx("PCFL12").exists()!vx("PCFL13").exists()!vx("PCFL14").exists()!vx("PCFL15").exists()!vx("PCFL16").exists()!vx("PCFL17").exists()!vx("PCFL18").exists()!vx("PCFL19").exists()!vx("PCFL20").exists()!vx("PCFL21").exists()!vx("PCFL22").exists()!vx("PCFL23").exists()!vx("PCFL24").exists()!vx("PCFL30").exists()!vx("PCFL35").exists()!vx("PCFL38").exists()!vx("PCFL39").exists()!vx("PCFL40").exists()!vx("PCFL41").exists()!vx("PCFL43").exists() do vbu7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("POP").exists() do vbu8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PP").exists() do vbu9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(trn,.vx(),10,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordTRN trn
	/*
	---- Revision History-----------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and removed
		   pre-2002 revision history.
	
	*/	

	type Public String ER

	// Cannot define SBN type if SBN flag is disabled 
	if (trn.sbtrn="0"),(trn.sbtrntyp'="") do Runtime.setErrMSG("TRN",4889) quit:ER
	
	// Cannot define form ID if print receipt is disabled
	if (trn.formid'=""),(trn.receipt="0") do Runtime.setErrMSG("TRN",4996) quit:ER

	quit




vau1 // Trigger AU_SBN - After Update Shared Branch Network

	type public RecordTRN trn
	/*
	---- Revision History-------------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and removed
		   pre-2002 revision history.

	*/
	
	type Public String ER
	
	// Cannot define SBN type if SBN flag is disabled
	if (trn.sbtrn="0")&(trn.sbtrntyp'="") do Runtime.setErrMSG("TRN",4889) quit:ER
	
	// Cannot define form ID if print receipt is disabled
	if (trn.formid'="")&(trn.receipt="0") do Runtime.setErrMSG("TRN",4996) quit:ER

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordTRN trn
	/*
	---- Revision History ------------------------------------------------
	
	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned up
		   code.  Also added PCF's that were missing.
	
	05/04/04 - RussellDS - CR9172
		   Added parenthesis around + operations to avoid
		   PSL precedence warnings.
		   
		   Removed old change history.
	*/
	
	type Public String ER
	
	type String tempvar
	
	// Update PPF (pre-proc flag) and POPF (post-proc flag) based on PP and pop
	set trn.ppf=$S(trn.pp="":0,1:1)
	set trn.popf=$S(trn.pop="":0,1:1)
	
	if trn.cls="D" do { quit:ER
		// Transaction code considers service fees, missing transaction fee plan
		if trn.pcfd10=1,trn.feepln="" do Runtime.setErrMSG("TRN",214) quit:ER 

		set tempvar=(+trn.pcfd1)_(+trn.pcfd2)_(+trn.pcfd3)_(+trn.pcfd4)_(+trn.pcfd5)_(+trn.pcfd6)_(+trn.pcfd7)_(+trn.pcfd8)
		set tempvar=tempvar_(+trn.pcfd9)_(+trn.pcfd10)_(+trn.pcfd11)_(+trn.pcfd12)_(+trn.pcfd13)_(+trn.pcfd14)_(+trn.pcfd15)
		set tempvar=tempvar_(+trn.pcfd16)_(+trn.pcfd17)_(+trn.pcfd18)_(+trn.pcfd19)_(+trn.pcfd20)_(+trn.pcfd21)_(+trn.pcfd22)
		set tempvar=tempvar_(+trn.pcfd23)_(+trn.pcfd24)_(+trn.pcfd25)_(+trn.pcfd26)_(+trn.pcfd27)_(+trn.pcfd28)_(+trn.pcfd29)
		set tempvar=tempvar_(+trn.pcfd30)_(+trn.pcfd31)_(+trn.pcfd32)_(+trn.pcfd33)_(+trn.pcfd34)_(+trn.pcfd35)_(+trn.pcfd36)
		set tempvar=tempvar_(+trn.pcfd37)_(+trn.pcfd38)_(+trn.pcfd39)_(+trn.pcfd40)_(+trn.pcfd41)_(+trn.pcfd42)
		set trn.pcf=tempvar
		}
	if trn.cls="L" do {
		set tempvar=(+trn.pcfl1)_(+trn.pcfl2)_(+trn.pcfl3)_(+trn.pcfl4)_(+trn.pcfl5)_(+trn.pcfl6)_(+trn.pcfl7)_(+trn.pcfl8)
		set tempvar=tempvar_(+trn.pcfl9)_(+trn.pcfl10)_(+trn.pcfl11)_(+trn.pcfl12)_(+trn.pcfl13)_(+trn.pcfl14)_(+trn.pcfl15)
		set tempvar=tempvar_(+trn.pcfl16)_(+trn.pcfl17)_(+trn.pcfl18)_(+trn.pcfl19)_(+trn.pcfl20)_(+trn.pcfl21)_(+trn.pcfl22)
		set tempvar=tempvar_(+trn.pcfl23)_(+trn.pcfl24)_(+trn.pcfl25)_(+trn.pcfl26)_(+trn.pcfl27)_(+trn.pcfl28)_(+trn.pcfl29)
		set tempvar=tempvar_(+trn.pcfl30)_(+trn.pcfl31)_(+trn.pcfl32)_(+trn.pcfl33)_(+trn.pcfl34)_(+trn.pcfl35)_(+trn.pcfl36)
		set tempvar=tempvar_(+trn.pcfl37)_(+trn.pcfl38)_(+trn.pcfl39)_(+trn.pcfl40)_(+trn.pcfl41)_(+trn.pcfl42)_(+trn.pcfl43)
		set trn.pcf=tempvar
		}
	
	set trn.mff=$$MFFTEST(.trn)
	
	// Added section below to define ITC with Tran Code Create
	if trn.cls="*" set trn.itc="" quit 
	
	type String REC
	set REC=trn.itc
	set trn.itc=""
	set REC=REC_"0|0|0|0|0|0|0|0|0"
	set REC.piece("|",1)=trn.dc
	set REC.piece("|",3)=trn.enc
	set REC.piece("|",5)=trn.skpp
	set REC.piece("|",9)=trn.stpnt
	do STRIP	// Removes pipes and trailing zeroes
	set trn.itc=REC
	quit 
	

vbu1 // Trigger BU_FEEPLN - Before Update of FEEPLN

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	---- Revision History-------------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned
		   up code.

	*/

	type Public String ER

	// Transaction code considers service fees, missing transaction fee plan
	if trn.cls="D",trn.pcfd10=1,trn.feepln="" do Runtime.setErrMSG("TRN",214) quit:ER

	quit
	

vbu2 // Trigger BU_ITC - ITC values that have to get files

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	---- Revision History-----------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned
		   up code.
	
	*/

	if trn.cls="*" set trn.itc="" quit 
	if trn.skpp="" set trn.skpp=0

	type String REC
	set REC=trn.itc
	set trn.itc=""
	set REC=REC_"0|0|0|0|0|0|0|0|0"
	set REC.piece("|",1)=trn.dc
	set REC.piece("|",3)=trn.enc
	set REC.piece("|",5)=trn.skpp
	set REC.piece("|",9)=trn.stpnt
	do STRIP
	set trn.itc=REC
	quit 
	
STRIP	// Strip trailing zeroes

	type Public String REC
	
	type Number I
	
	set REC=REC.translate("|","")
	for I=REC.length():-1:2 quit:REC.extract(I)'=0  set REC=REC.extract(1,I-1)
	quit
	

vbu3 // Trigger BU_MISC1 - Before Update of misc fields

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	---- Revision History-----------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned
		   up code.
	
	*/
	
	set trn.mff=$$MFFTEST(.trn)
	
	quit 

MFFTEST(RecordTRN trn)
	// test the values of each MISC field and return yes if it has a value
	// this indicates that the MFF flag should be turned on
	if trn.mfvar1'="" quit 1
	if trn.mfdsc1'="" quit 1
	if +trn.mfreq1'=0 quit 1
	if trn.mfdft1'="" quit 1
	if trn.mftbl1'="" quit 1
	if trn.mfpp1'="" quit 1
	if trn.mfvar2'="" quit 1
	if trn.mfdsc2'="" quit 1
	if +trn.mfreq2'=0 quit 1
	if trn.mfdft2'="" quit 1
	if trn.mftbl2'="" quit 1
	if trn.mfpp2'="" quit 1
	if trn.mfvar3'="" quit 1
	if trn.mfdsc3'="" quit 1
	if +trn.mfreq3'=0 quit 1
	if trn.mfdft3'="" quit 1
	if trn.mftbl3'="" quit 1
	if trn.mfpp3'="" quit 1
	if trn.mfvar4'="" quit 1
	if trn.mfdsc4'="" quit 1
	if +trn.mfreq4'=0 quit 1
	if trn.mfdft4'="" quit 1
	if trn.mftbl4'="" quit 1
	if trn.mfpp4'="" quit 1
	if trn.mfqry1'="" quit 1
	if trn.mfqry2'="" quit 1
	if trn.mfqry3'="" quit 1
	if trn.mfqry4'="" quit 1
	if trn.mfpre1'="" quit 1
	if trn.mfpre2'="" quit 1
	if trn.mfpre3'="" quit 1
	if trn.mfpre4'="" quit 1
	if trn.mfhlp1'="" quit 1
	if trn.mfhlp2'="" quit 1
	if trn.mfhlp3'="" quit 1
	if trn.mfhlp4'="" quit 1
	quit 0
	
	quit

vbu4 // Trigger BU_MISC2 - Before Update of MISC fields #2

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	---- Revision History-----------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned
		   up code.
	
	*/
	
	set trn.mff=$$MFFTEST(.trn)
	
	quit

vbu5 // Trigger BU_PCF - SHOW ERROR MESSAGE IF PCF IS UPDATED

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	---- Revision History-----------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned
		   up code.
	
	*/

	type Public String ER

	// Change to column ~p1 not allowed
	do Runtime.setErrMSG("TRN",412,"TRN.PCF") quit:ER 
	quit
	

vbu6 // Trigger BU_PCFD - UPDATE TRN.PCF BASED ON CHANGES OF PCFD

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned up
		   code.  Also added PCF's that were missing.

	05/04/04 - RussellDS - CR9172
		   Added parenthesis around + operations to avoid
		   PSL precedence warnings.
		   
		   Removed old change history.

	*/

	type Public String ER

	type String tempvar
	if trn.cls="D" do { quit
		// Transaction code considers service fees, missing transaction fee plan
		if trn.pcfd10=1,trn.feepln="" do Runtime.setErrMSG("TRN",214) quit:ER 

		set tempvar=(+trn.pcfd1)_(+trn.pcfd2)_(+trn.pcfd3)_(+trn.pcfd4)_(+trn.pcfd5)_(+trn.pcfd6)_(+trn.pcfd7)_(+trn.pcfd8)
		set tempvar=tempvar_(+trn.pcfd9)_(+trn.pcfd10)_(+trn.pcfd11)_(+trn.pcfd12)_(+trn.pcfd13)_(+trn.pcfd14)_(+trn.pcfd15)
		set tempvar=tempvar_(+trn.pcfd16)_(+trn.pcfd17)_(+trn.pcfd18)_(+trn.pcfd19)_(+trn.pcfd20)_(+trn.pcfd21)_(+trn.pcfd22)
		set tempvar=tempvar_(+trn.pcfd23)_(+trn.pcfd24)_(+trn.pcfd25)_(+trn.pcfd26)_(+trn.pcfd27)_(+trn.pcfd28)_(+trn.pcfd29)
		set tempvar=tempvar_(+trn.pcfd30)_(+trn.pcfd31)_(+trn.pcfd32)_(+trn.pcfd33)_(+trn.pcfd34)_(+trn.pcfd35)_(+trn.pcfd36)
		set tempvar=tempvar_(+trn.pcfd37)_(+trn.pcfd38)_(+trn.pcfd39)_(+trn.pcfd40)_(+trn.pcfd41)_(+trn.pcfd42)
		set trn.pcf=tempvar
		}
		
	// Change to column ~p1 not allowed
	do Runtime.setErrMSG("TRN",412,"TRN.PCFD") quit:ER 
	quit
	

vbu7 // Trigger BU_PCFL - UPDATE TRN.PCF BASED ON CHANGES OF PCFL

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	/*
	--Revision History -------------------------------------------

	01/13/05 - KELLYP - CR 13667
		   Modified to conform to current PSL standards and cleaned up
		   code.  Also added PCF's that were missing.
		   	
	05/04/04 - RussellDS - CR9172
		   Added parenthesis around + operations to avoid
		   PSL precedence warnings.
		   
		   Removed old change history.

	--------------------------------------------------------------
	*/

	type Public String ER
	
	type String tempvar

	if trn.cls="L" do { quit
		set tempvar=(+trn.pcfl1)_(+trn.pcfl2)_(+trn.pcfl3)_(+trn.pcfl4)_(+trn.pcfl5)_(+trn.pcfl6)_(+trn.pcfl7)_(+trn.pcfl8)
		set tempvar=tempvar_(+trn.pcfl9)_(+trn.pcfl10)_(+trn.pcfl11)_(+trn.pcfl12)_(+trn.pcfl13)_(+trn.pcfl14)_(+trn.pcfl15)
		set tempvar=tempvar_(+trn.pcfl16)_(+trn.pcfl17)_(+trn.pcfl18)_(+trn.pcfl19)_(+trn.pcfl20)_(+trn.pcfl21)_(+trn.pcfl22)
		set tempvar=tempvar_(+trn.pcfl23)_(+trn.pcfl24)_(+trn.pcfl25)_(+trn.pcfl26)_(+trn.pcfl27)_(+trn.pcfl28)_(+trn.pcfl29)
		set tempvar=tempvar_(+trn.pcfl30)_(+trn.pcfl31)_(+trn.pcfl32)_(+trn.pcfl33)_(+trn.pcfl34)_(+trn.pcfl35)_(+trn.pcfl36)
		set tempvar=tempvar_(+trn.pcfl37)_(+trn.pcfl38)_(+trn.pcfl39)_(+trn.pcfl40)_(+trn.pcfl41)_(+trn.pcfl42)_(+trn.pcfl43)
		set trn.pcf=tempvar
		}
		
	// Change to column ~p1 not allowed
	do Runtime.setErrMSG("TRN",412,"TRN.PCFL") quit:ER 
	quit
	

vbu8 // Trigger BU_POP - Update POPF

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	// Change POPF (post-processor flag) based on POP
	
	if trn.pop'="" set trn.popf=1 quit 
	if trn.pop="" set trn.popf=0 quit 
	quit
	

vbu9 // Trigger BU_PP - Before update pre-processor

	type public RecordTRN trn
	do trn.setAuditFlag(1)
	// Update PPF (pre-processor flag based on PP
	
	if trn.pp'="" set trn.ppf=1 quit 
	if trn.pp="" set trn.ppf=0 quit 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordTRN trn

	if (%O = 2) do vload

	if vobj(trn,0).exists() do {

		set X = trn.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
		set X = trn.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRN.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = trn.bingrp if 'X.isNull(),'Db.isDefined("UTBLBING","X") set vRM = $$^MSG(1485,X) do vdderr("BINGRP", vRM) quit
		set X = trn.cktyp if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CKTYP", vRM) quit
		set X = trn.cls if 'X.isNull(),'Db.isDefined("STBLTRNCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
		set X = trn.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
		if trn.des.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DES", vRM) quit
		set X = trn.dftcc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("DFTCC", vRM) quit
		if '("01"[trn.DTL) set vRM=$$^MSG(742,"L") do vdderr("DTL", vRM) quit
		set X = trn.grp if 'X.isNull(),'Db.isDefined("STBLLIBS","X") set vRM = $$^MSG(1485,X) do vdderr("GRP", vRM) quit
		if trn.itc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ITC", vRM) quit
		if trn.lnketc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LNKETC", vRM) quit
		if '("01"[trn.MFF) set vRM=$$^MSG(742,"L") do vdderr("MFF", vRM) quit
		if trn.pac.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAC", vRM) quit
		if trn.pcf.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PCF", vRM) quit
		if trn.pgm.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PGM", vRM) quit
		if trn.pgmec.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PGMEC", vRM) quit
		if '("01"[trn.POPF) set vRM=$$^MSG(742,"L") do vdderr("POPF", vRM) quit
		if '("01"[trn.PPF) set vRM=$$^MSG(742,"L") do vdderr("PPF", vRM) quit
		if '("01"[trn.RECEIPT) set vRM=$$^MSG(742,"L") do vdderr("RECEIPT", vRM) quit
		if '("01"[trn.SBTRN) set vRM=$$^MSG(742,"L") do vdderr("SBTRN", vRM) quit
		set X = trn.sbtrntyp if 'X.isNull(),'Db.isDefined("STBLSBTSD","X") set vRM = $$^MSG(1485,X) do vdderr("SBTRNTYP", vRM) quit
		if '("01"[trn.SGT) set vRM=$$^MSG(742,"L") do vdderr("SGT", vRM) quit
		if trn.svmsc1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SVMSC1", vRM) quit
		if trn.svmsc2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SVMSC2", vRM) quit
		set X = trn.trmax if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRN.TRMAX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = trn.trntyp if 'X.isNull(),'Db.isDefined("STBLTRNTYP","X") set vRM = $$^MSG(1485,X) do vdderr("TRNTYP", vRM) quit
		if trn.vartamt.length()>15 set vRM = $$^MSG(1076,15) do vdderr("VARTAMT", vRM) quit
		if '("01"[trn.VOUCHER) set vRM=$$^MSG(742,"L") do vdderr("VOUCHER", vRM) quit
	}

	if vobj(trn,1).exists() do {

		set X = trn.dc if 'X.isNull(),'Db.isDefined("STBLDC","X") set vRM = $$^MSG(1485,X) do vdderr("DC", vRM) quit
		set X = trn.ec if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("EC", vRM) quit
		if '("01"[trn.ENC) set vRM=$$^MSG(742,"L") do vdderr("ENC", vRM) quit
		if '("01"[trn.OFFLNUPDT) set vRM=$$^MSG(742,"L") do vdderr("OFFLNUPDT", vRM) quit
		if trn.prdes.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRDES", vRM) quit
		if '("01"[trn.PROHOFF) set vRM=$$^MSG(742,"L") do vdderr("PROHOFF", vRM) quit
		if '("01"[trn.SKPP) set vRM=$$^MSG(742,"L") do vdderr("SKPP", vRM) quit
		set X = trn.stmtrd if 'X.isNull(),'Db.isDefined("UTBLSTMTR","X") set vRM = $$^MSG(1485,X) do vdderr("STMTRD", vRM) quit
		set X = trn.stmtrs if 'X.isNull(),'Db.isDefined("UTBLSTMTR","X") set vRM = $$^MSG(1485,X) do vdderr("STMTRS", vRM) quit
		set X = trn.stpnt if 'X.isNull(),'Db.isDefined("STBLSTPNT","X") set vRM = $$^MSG(1485,X) do vdderr("STPNT", vRM) quit
		set X = trn.tcode if 'X.isNull(),'Db.isDefined("STBLVCODE","X") set vRM = $$^MSG(1485,X) do vdderr("TCODE", vRM) quit
		if trn.trnset.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TRNSET", vRM) quit
	}

	if vobj(trn,2).exists() do {

		set X = trn.formid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("FORMID", vRM) quit
		set X = trn.lnkamt if 'X.isNull(),'Db.isDefined("STBLLNKTRN","X") set vRM = $$^MSG(1485,X) do vdderr("LNKAMT", vRM) quit
		set X = trn.lnkcid if 'X.isNull(),'Db.isDefined("STBLLNKTRN","X") set vRM = $$^MSG(1485,X) do vdderr("LNKCID", vRM) quit
		set X = trn.lnkcmt if 'X.isNull(),'Db.isDefined("STBLLNKTRN","X") set vRM = $$^MSG(1485,X) do vdderr("LNKCMT", vRM) quit
		if '("01"[trn.LNKDSABL) set vRM=$$^MSG(742,"L") do vdderr("LNKDSABL", vRM) quit
		if '("01"[trn.LNKNBK) set vRM=$$^MSG(742,"L") do vdderr("LNKNBK", vRM) quit
		if trn.pfww.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PFWW", vRM) quit
		if trn.pop.length()>74 set vRM = $$^MSG(1076,74) do vdderr("POP", vRM) quit
		if trn.pp.length()>74 set vRM = $$^MSG(1076,74) do vdderr("PP", vRM) quit
		if trn.ppb.length()>74 set vRM = $$^MSG(1076,74) do vdderr("PPB", vRM) quit
	}

	if vobj(trn,3).exists() do {

		if trn.mfdft1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MFDFT1", vRM) quit
		if trn.mfdft2.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFDFT2", vRM) quit
		if trn.mfdft3.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFDFT3", vRM) quit
		if trn.mfdft4.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFDFT4", vRM) quit
		if trn.mfdsc1.length()>15 set vRM = $$^MSG(1076,15) do vdderr("MFDSC1", vRM) quit
		if trn.mfdsc2.length()>15 set vRM = $$^MSG(1076,15) do vdderr("MFDSC2", vRM) quit
		if trn.mfdsc3.length()>15 set vRM = $$^MSG(1076,15) do vdderr("MFDSC3", vRM) quit
		if trn.mfdsc4.length()>15 set vRM = $$^MSG(1076,15) do vdderr("MFDSC4", vRM) quit
		if trn.mfhlp1.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFHLP1", vRM) quit
		if trn.mfhlp2.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFHLP2", vRM) quit
		if trn.mfhlp3.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFHLP3", vRM) quit
		if trn.mfhlp4.length()>24 set vRM = $$^MSG(1076,24) do vdderr("MFHLP4", vRM) quit
		if trn.mfpp1.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPP1", vRM) quit
		if trn.mfpp2.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPP2", vRM) quit
		if trn.mfpp3.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPP3", vRM) quit
		if trn.mfpp4.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPP4", vRM) quit
		if trn.mfpre1.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPRE1", vRM) quit
		if trn.mfpre2.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPRE2", vRM) quit
		if trn.mfpre3.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPRE3", vRM) quit
		if trn.mfpre4.length()>65 set vRM = $$^MSG(1076,65) do vdderr("MFPRE4", vRM) quit
		if trn.mfqry1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFQRY1", vRM) quit
		if trn.mfqry2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFQRY2", vRM) quit
		if trn.mfqry3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFQRY3", vRM) quit
		if trn.mfqry4.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFQRY4", vRM) quit
		if '("01"[trn.MFREQ1) set vRM=$$^MSG(742,"L") do vdderr("MFREQ1", vRM) quit
		if '("01"[trn.MFREQ2) set vRM=$$^MSG(742,"L") do vdderr("MFREQ2", vRM) quit
		if '("01"[trn.MFREQ3) set vRM=$$^MSG(742,"L") do vdderr("MFREQ3", vRM) quit
		if '("01"[trn.MFREQ4) set vRM=$$^MSG(742,"L") do vdderr("MFREQ4", vRM) quit
		if trn.mftbl1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFTBL1", vRM) quit
		if trn.mftbl2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFTBL2", vRM) quit
		if trn.mftbl3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFTBL3", vRM) quit
		if trn.mftbl4.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MFTBL4", vRM) quit
		set X = trn.mfvar1 if 'X.isNull(),'Db.isDefined("STBLMFVAR","X") set vRM = $$^MSG(1485,X) do vdderr("MFVAR1", vRM) quit
		set X = trn.mfvar2 if 'X.isNull(),'Db.isDefined("STBLMFVAR","X") set vRM = $$^MSG(1485,X) do vdderr("MFVAR2", vRM) quit
		set X = trn.mfvar3 if 'X.isNull(),'Db.isDefined("STBLMFVAR","X") set vRM = $$^MSG(1485,X) do vdderr("MFVAR3", vRM) quit
		set X = trn.mfvar4 if 'X.isNull(),'Db.isDefined("STBLMFVAR","X") set vRM = $$^MSG(1485,X) do vdderr("MFVAR4", vRM) quit
	}

	if vobj(trn,4).exists() do {

		set X = trn.feegl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("FEEGL", vRM) quit
		if trn.feegrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FEEGRP", vRM) quit
		if trn.feepln.length()>5 set vRM = $$^MSG(1076,5) do vdderr("FEEPLN", vRM) quit
	}

	if vobj(trn,5).exists() do {

		if '("01"[trn.PCFD1) set vRM=$$^MSG(742,"L") do vdderr("PCFD1", vRM) quit
		if '("01"[trn.PCFD10) set vRM=$$^MSG(742,"L") do vdderr("PCFD10", vRM) quit
		if '("01"[trn.PCFD11) set vRM=$$^MSG(742,"L") do vdderr("PCFD11", vRM) quit
		if '("01"[trn.PCFD12) set vRM=$$^MSG(742,"L") do vdderr("PCFD12", vRM) quit
		if '("01"[trn.PCFD13) set vRM=$$^MSG(742,"L") do vdderr("PCFD13", vRM) quit
		if '("01"[trn.PCFD14) set vRM=$$^MSG(742,"L") do vdderr("PCFD14", vRM) quit
		if '("01"[trn.PCFD15) set vRM=$$^MSG(742,"L") do vdderr("PCFD15", vRM) quit
		set X = trn.pcfd16 if 'X.isNull(),'Db.isDefined("STBLPCFD16","X") set vRM = $$^MSG(1485,X) do vdderr("PCFD16", vRM) quit
		if '("01"[trn.PCFD17) set vRM=$$^MSG(742,"L") do vdderr("PCFD17", vRM) quit
		if '("01"[trn.PCFD18) set vRM=$$^MSG(742,"L") do vdderr("PCFD18", vRM) quit
		if '("01"[trn.PCFD19) set vRM=$$^MSG(742,"L") do vdderr("PCFD19", vRM) quit
		if '("01"[trn.PCFD2) set vRM=$$^MSG(742,"L") do vdderr("PCFD2", vRM) quit
		if '("01"[trn.PCFD20) set vRM=$$^MSG(742,"L") do vdderr("PCFD20", vRM) quit
		if '("01"[trn.PCFD21) set vRM=$$^MSG(742,"L") do vdderr("PCFD21", vRM) quit
		if '("01"[trn.PCFD22) set vRM=$$^MSG(742,"L") do vdderr("PCFD22", vRM) quit
		if '("01"[trn.PCFD23) set vRM=$$^MSG(742,"L") do vdderr("PCFD23", vRM) quit
		if '("01"[trn.PCFD24) set vRM=$$^MSG(742,"L") do vdderr("PCFD24", vRM) quit
		set X = trn.pcfd25 if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PCFD25", vRM) quit
		if '("01"[trn.PCFD26) set vRM=$$^MSG(742,"L") do vdderr("PCFD26", vRM) quit
		if '("01"[trn.PCFD27) set vRM=$$^MSG(742,"L") do vdderr("PCFD27", vRM) quit
		if '("01"[trn.PCFD28) set vRM=$$^MSG(742,"L") do vdderr("PCFD28", vRM) quit
		if '("01"[trn.PCFD29) set vRM=$$^MSG(742,"L") do vdderr("PCFD29", vRM) quit
		set X = trn.pcfd3 if 'X.isNull(),'Db.isDefined("STBLPCFCML","X") set vRM = $$^MSG(1485,X) do vdderr("PCFD3", vRM) quit
		if '("01"[trn.PCFD30) set vRM=$$^MSG(742,"L") do vdderr("PCFD30", vRM) quit
		if '("01"[trn.PCFD31) set vRM=$$^MSG(742,"L") do vdderr("PCFD31", vRM) quit
		set X = trn.pcfd32 if 'X.isNull(),'Db.isDefined("STBLNRACTU","X") set vRM = $$^MSG(1485,X) do vdderr("PCFD32", vRM) quit
		set X = trn.pcfd33 if 'X.isNull(),'Db.isDefined("STBLBGTPMT","X") set vRM = $$^MSG(1485,X) do vdderr("PCFD33", vRM) quit
		if '("01"[trn.PCFD34) set vRM=$$^MSG(742,"L") do vdderr("PCFD34", vRM) quit
		if '("01"[trn.PCFD35) set vRM=$$^MSG(742,"L") do vdderr("PCFD35", vRM) quit
		if '("01"[trn.PCFD36) set vRM=$$^MSG(742,"L") do vdderr("PCFD36", vRM) quit
		if '("01"[trn.PCFD37) set vRM=$$^MSG(742,"L") do vdderr("PCFD37", vRM) quit
		if '("01"[trn.PCFD38) set vRM=$$^MSG(742,"L") do vdderr("PCFD38", vRM) quit
		if '("01"[trn.PCFD39) set vRM=$$^MSG(742,"L") do vdderr("PCFD39", vRM) quit
		if '("01"[trn.PCFD4) set vRM=$$^MSG(742,"L") do vdderr("PCFD4", vRM) quit
		if '("01"[trn.PCFD40) set vRM=$$^MSG(742,"L") do vdderr("PCFD40", vRM) quit
		if '("01"[trn.PCFD41) set vRM=$$^MSG(742,"L") do vdderr("PCFD41", vRM) quit
		if '("01"[trn.PCFD42) set vRM=$$^MSG(742,"L") do vdderr("PCFD42", vRM) quit
		if '("01"[trn.PCFD5) set vRM=$$^MSG(742,"L") do vdderr("PCFD5", vRM) quit
		if '("01"[trn.PCFD6) set vRM=$$^MSG(742,"L") do vdderr("PCFD6", vRM) quit
		set X = trn.pcfd7 if 'X.isNull(),'Db.isDefined("STBLPCFPCN","X") set vRM = $$^MSG(1485,X) do vdderr("PCFD7", vRM) quit
		if '("01"[trn.PCFD8) set vRM=$$^MSG(742,"L") do vdderr("PCFD8", vRM) quit
		if '("01"[trn.PCFD9) set vRM=$$^MSG(742,"L") do vdderr("PCFD9", vRM) quit
	}

	if vobj(trn,6).exists() do {

		if '("01"[trn.PCFL1) set vRM=$$^MSG(742,"L") do vdderr("PCFL1", vRM) quit
		if '("01"[trn.PCFL10) set vRM=$$^MSG(742,"L") do vdderr("PCFL10", vRM) quit
		if '("01"[trn.PCFL11) set vRM=$$^MSG(742,"L") do vdderr("PCFL11", vRM) quit
		if '("01"[trn.PCFL12) set vRM=$$^MSG(742,"L") do vdderr("PCFL12", vRM) quit
		if '("01"[trn.PCFL13) set vRM=$$^MSG(742,"L") do vdderr("PCFL13", vRM) quit
		if '("01"[trn.PCFL14) set vRM=$$^MSG(742,"L") do vdderr("PCFL14", vRM) quit
		if '("01"[trn.PCFL15) set vRM=$$^MSG(742,"L") do vdderr("PCFL15", vRM) quit
		if '("01"[trn.PCFL16) set vRM=$$^MSG(742,"L") do vdderr("PCFL16", vRM) quit
		if '("01"[trn.PCFL17) set vRM=$$^MSG(742,"L") do vdderr("PCFL17", vRM) quit
		if '("01"[trn.PCFL18) set vRM=$$^MSG(742,"L") do vdderr("PCFL18", vRM) quit
		if '("01"[trn.PCFL19) set vRM=$$^MSG(742,"L") do vdderr("PCFL19", vRM) quit
		if '("01"[trn.PCFL2) set vRM=$$^MSG(742,"L") do vdderr("PCFL2", vRM) quit
		if '("01"[trn.PCFL20) set vRM=$$^MSG(742,"L") do vdderr("PCFL20", vRM) quit
		if '("01"[trn.PCFL21) set vRM=$$^MSG(742,"L") do vdderr("PCFL21", vRM) quit
		set X = trn.pcfl22 if 'X.isNull(),'Db.isDefined("STBLPCFAEU","X") set vRM = $$^MSG(1485,X) do vdderr("PCFL22", vRM) quit
		if '("01"[trn.PCFL23) set vRM=$$^MSG(742,"L") do vdderr("PCFL23", vRM) quit
		if '("01"[trn.PCFL24) set vRM=$$^MSG(742,"L") do vdderr("PCFL24", vRM) quit
		if '("01"[trn.PCFL25) set vRM=$$^MSG(742,"L") do vdderr("PCFL25", vRM) quit
		if '("01"[trn.PCFL26) set vRM=$$^MSG(742,"L") do vdderr("PCFL26", vRM) quit
		if '("01"[trn.PCFL27) set vRM=$$^MSG(742,"L") do vdderr("PCFL27", vRM) quit
		if '("01"[trn.PCFL28) set vRM=$$^MSG(742,"L") do vdderr("PCFL28", vRM) quit
		if '("01"[trn.PCFL29) set vRM=$$^MSG(742,"L") do vdderr("PCFL29", vRM) quit
		if '("01"[trn.PCFL3) set vRM=$$^MSG(742,"L") do vdderr("PCFL3", vRM) quit
		set X = trn.pcfl30 if 'X.isNull(),'Db.isDefined("STBLLNCPTCF","X") set vRM = $$^MSG(1485,X) do vdderr("PCFL30", vRM) quit
		if '("01"[trn.PCFL31) set vRM=$$^MSG(742,"L") do vdderr("PCFL31", vRM) quit
		if '("01"[trn.PCFL32) set vRM=$$^MSG(742,"L") do vdderr("PCFL32", vRM) quit
		if '("01"[trn.PCFL33) set vRM=$$^MSG(742,"L") do vdderr("PCFL33", vRM) quit
		if '("01"[trn.PCFL34) set vRM=$$^MSG(742,"L") do vdderr("PCFL34", vRM) quit
		if '("01"[trn.PCFL35) set vRM=$$^MSG(742,"L") do vdderr("PCFL35", vRM) quit
		if '("01"[trn.PCFL36) set vRM=$$^MSG(742,"L") do vdderr("PCFL36", vRM) quit
		if '("01"[trn.PCFL37) set vRM=$$^MSG(742,"L") do vdderr("PCFL37", vRM) quit
		if '("01"[trn.PCFL38) set vRM=$$^MSG(742,"L") do vdderr("PCFL38", vRM) quit
		if '("01"[trn.PCFL39) set vRM=$$^MSG(742,"L") do vdderr("PCFL39", vRM) quit
		if '("01"[trn.PCFL4) set vRM=$$^MSG(742,"L") do vdderr("PCFL4", vRM) quit
		if '("01"[trn.PCFL40) set vRM=$$^MSG(742,"L") do vdderr("PCFL40", vRM) quit
		if '("01"[trn.PCFL41) set vRM=$$^MSG(742,"L") do vdderr("PCFL41", vRM) quit
		if '("01"[trn.PCFL42) set vRM=$$^MSG(742,"L") do vdderr("PCFL42", vRM) quit
		if '("01"[trn.PCFL43) set vRM=$$^MSG(742,"L") do vdderr("PCFL43", vRM) quit
		if '("01"[trn.PCFL5) set vRM=$$^MSG(742,"L") do vdderr("PCFL5", vRM) quit
		if '("01"[trn.PCFL6) set vRM=$$^MSG(742,"L") do vdderr("PCFL6", vRM) quit
		if '("01"[trn.PCFL7) set vRM=$$^MSG(742,"L") do vdderr("PCFL7", vRM) quit
		set X = trn.pcfl8 if 'X.isNull(),'Db.isDefined("STBLPCFPCN","X") set vRM = $$^MSG(1485,X) do vdderr("PCFL8", vRM) quit
		if '("01"[trn.PCFL9) set vRM=$$^MSG(742,"L") do vdderr("PCFL9", vRM) quit
	}
	if trn.etc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ETC", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TRN","MSG",979,"TRN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordTRN trn) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("CLS").exists()!vx("GRP").exists() do vi1(.trn)
	}
	do vi1(.trn)

	quit
	

vi1(RecordTRN trn) // Maintain XTRN index entries (Tran code CLS/GRP index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = trn.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = trn.grp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = trn.etc

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XTRN(v1,v2,v3)) do vidxerr("XTRN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XTRN(v1,v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v2=vx("GRP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XTRN(v1,v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("TRN")

	while ds.next() do {
		type RecordTRN trn=ds.getRecord("TRN")
		if vlist.contains("VINDEX") do VINDEX(.trn) quit
		if vlist.contains("XTRN") do vi1(.trn)
	}

	quit


public VIDXBLD1(RecordTRN trn, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.trn) quit
	if vlist.contains("XTRN") do vi1(.trn)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("TRN","MSG",1225,"TRN."_di)

	quit


vkchged // Access key changed

	type public RecordTRN trn

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("ETC")
	set voldkey = vux.piece("|",1),vobj(trn,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(trn,-3) = vnewkey  // Copy new keys into object
	type RecordTRN vnewrec = trn.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("TRN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(trn,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "TRNFILE"	// Location of index program

