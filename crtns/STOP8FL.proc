STOP8FL(RecordSTOP8 stop8, String vpar, Boolean vparNorm) // STOP8 - Document Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (13)             03/02/2005
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop8.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(stop8,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop8,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String DOCTYP = stop8.doctyp
	type String DOCNUM = stop8.docnum
	type String SEQ = stop8.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("DOCTYP").exists()!vx("DOCNUM").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP8",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP8","DOCTYP = :stop8.doctyp and DOCNUM = :stop8.docnum and SEQ = :stop8.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String DOCTYP
	type public String DOCNUM
	type public String SEQ

	type RecordSTOP8 stop8 = Db.getRecord("STOP8","DOCTYP=:DOCTYP,DOCNUM=:DOCNUM,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do stop8.setMode(2)

		do STOP8FL(stop8,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP8 stop8

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP8","DOCTYP = :stop8.doctyp and DOCNUM = :stop8.docnum and SEQ = :stop8.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop8.DP = %SystemDate
		if %O = 0  set stop8.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop8))  S ^STOP(8,vobj(stop8,-3),vobj(stop8,-4),vobj(stop8,-5))=vobj(stop8)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.stop8)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP8 stop8

	if vpar["/JOURNAL/" do VJOURNAL(.stop8)                // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^STOP(8,vobj(stop8,-3),vobj(stop8,-4),vobj(stop8,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordSTOP8 stop8

	// Type local variables for access keys for defaults
	type public String DOCTYP
	type public String DOCNUM
	type public String SEQ

	type public String TJD
	if stop8.dp.isNull() set stop8.dp = TJD                // dp
	if stop8.stcon.isNull() set stop8.stcon = 0            // stcon
	if stop8.time.isNull() set stop8.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP8 stop8

	if stop8.act.isNull() do vreqerr("ACT") quit
	if stop8.dp.isNull() do vreqerr("DP") quit
	if stop8.stcon.isNull() do vreqerr("STCON") quit
	if stop8.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP8 stop8

	if stop8.doctyp.isNull() do vreqerr("DOCTYP") quit
	if stop8.docnum.isNull() do vreqerr("DOCNUM") quit
	if stop8.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACT").exists(),stop8.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop8.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop8.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop8.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP8","MSG",1767,"STOP8."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("FEECID").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT_FEECID - Create stop with fee charge account

	type public RecordSTOP8 stop8
	/*
 	 ---- Revision History ---------------------------------
	
	05/24/00 - JARVISG - 39638
		   Modified to add FEECAT,FEETYP parameters to SRVSTP call.
	
	12/17/99 - JARVISG - 34535
		   Convert to PSL
	
	10/21/99 - JARVISG - 34535
		   Add for stop fee processing.
	*/
	
	if %ProcessMode'=0 quit
	
	set FEECID8=stop8.feecid                       // Fee Charge Account

	if $G(FEECID8) do {  quit:ER
		new values
		set values=Db.getOneRow("STAT,CLS","DEP","FEECID8")
		// Error if fee account is closed or not a deposit account.
		if $P(values,$C(9),1)=4 do Runtime.setErrMSG("STOP8",457,"FEECID8") quit:ER
		if $P(values,$C(9),2)'="D" do Runtime.setErrMSG("STOP8",803) quit:ER
		do ^SRVSTP(FEECID8,8,2,"STP")           // Assess stop type 8 fee
		}

	quit

vau1 // Trigger AFTER_UPDATE_FEECID - Fee Charge Account

	type public RecordSTOP8 stop8
	if %ProcessMode'=1 quit     // 1 = Update
	set FEECID8=stop8.feecid
	if (stop8.feecid.oldVal'=stop8.feecid) do Runtime.setErrMSG("STOP8",412,"FEECID8") quit:ER
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete trigger

	type public RecordSTOP8 stop8
	/*
	---------- Revision History ------------------------------------------
	08/04/00 JARVISG - 41360
		 Fix spelling of STOPDOCT to STPDOCT in Db.insert method to
		 stop undefined when deleting external IBS document stops.
  	
	09/20/99 - CARROLLJ - 31126
	*/
	
	new LSEQ,STPDOCN,STPDOCT,STPSEQ,TER,ZDP,ZTJD
	
	set STPDOCT=stop8.doctyp
	set STPDOCN=stop8.docnum
	set STPSEQ=stop8.seq
	/*	
	Create STOPLOGA entry
	Find last log sequence number
	*/	
	set ZTJD=%SystemDate
	
	new rs 
	type ResultSet rs=Db.select("LSEQ","STOPLOGA","TJD=:ZTJD AND STPTYP=8 AND KEY1=:STPDOCT AND KEY2=:STPDOCN AND SEQ=:STPSEQ","LSEQ DESC") 
	if rs.isEmpty() set LSEQ=1
	else  set LSEQ=rs.next(),LSEQ=rs.getCol(1)+1
	set ZDP=stop8.dp
	do Db.insert("STOPLOGA","TJD,STPTYP,KEY1,KEY2,SEQ,LSEQ,ACTFLG,DP",":ZTJD,8,:STPDOCT,:STPDOCN,:STPSEQ,:LSEQ,3,:ZDP")
	
	// Remove Territories before deleting the stop
	new rs 
	type ResultSet rs=Db.select("TER","STOP8A","DOCNUM=:STPDOCN AND DOCTYP=:STPDOCT AND SEQ=:STPSEQ")
	if rs.isEmpty() quit
	while rs.next() do { 
		set TER=rs.getCol(1)
		do Db.delete("STOP8A","DOCNUM=:STPDOCN AND DOCTYP=:STPDOCT AND SEQ=:STPSEQ AND TER=:TER")
		}
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP8 stop8

	set X = stop8.doctyp if 'X.isNull(),'Db.isDefined("UTBLDOCTYP","X") set vRM = $$^MSG(1485,X) do vdderr("DOCTYP", vRM) quit
	if stop8.docnum.length()>10 set vRM = $$^MSG(1076,10) do vdderr("DOCNUM", vRM) quit
	set X = stop8.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop8.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	if stop8.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop8.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop8.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop8.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	if stop8.own.length()>60 set vRM = $$^MSG(1076,60) do vdderr("OWN", vRM) quit
	if '("01"[stop8.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop8.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop8.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop8.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP8","MSG",979,"STOP8."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSTOP8 stop8)	//STOP8 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.stop8)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=ACTION
			}
		else  if TSRC="O" do {
			do vj1(.stop8)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=ACTION
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.stop8)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=ACTION
			}
		else  if TSRC="O" do {
			do vj1(.stop8)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=ACTION
			}
		}

	quit


vj1(RecordSTOP8 stop8)	// ACTION  Table STOPLOGA  Action jouranl file

	type Public String %O,TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=8
	set v3=stop8.doctyp
	set v4=stop8.docnum
	set v5=stop8.seq
	set vlastkey=Db.nextVal("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5")
	type RecordSTOPLOGA stoploga=Db.getRecord("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5,LSEQ=:vlastkey",1)
	set stoploga.actflg=%O
	set stoploga.dp=stop8.dp

	do stoploga.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordSTOP8 stop8

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("DOCTYP").exists() set vux("DOCTYP") = vx("DOCTYP")
	if vx("DOCNUM").exists() set vux("DOCNUM") = vx("DOCNUM")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = stop8.doctyp_","_stop8.docnum_","_stop8.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop8.doctyp_","_stop8.docnum_","_stop8.seq // Copy new keys into object
	type RecordSTOP8 vnewrec = stop8.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP8",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP8 stop8

	if vux("DOCTYP").exists() set stop8.doctyp = vux("DOCTYP").piece("|",i)
	if vux("DOCNUM").exists() set stop8.docnum = vux("DOCNUM").piece("|",i)
	if vux("SEQ").exists() set stop8.seq = vux("SEQ").piece("|",i)
	quit
