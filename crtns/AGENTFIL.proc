AGENTFIL(RecordAGENT agent, String vpar, Boolean vparNorm) // AGENT - Agent Information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (18)             03/21/2006
	// Trigger Definition (4)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = agent.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(agent,.vxins(),10,"|")
	if %O = 1 quit:'agent.isChanged()  do AUDIT^UCUTILN(agent,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String AGENT = agent.agent

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("AGENT").exists() do vkchged quit               // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("AGENT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("AGENT","AGENT = :agent.agent")    // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String AGENT

	type RecordAGENT agent = Db.getRecord("AGENT","AGENT=:AGENT")
	if (%ProcessMode = 2) do {
		do agent.setMode(2)

		do AGENTFIL(agent,vpar)
	}
	else  do VINDEX(agent)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordAGENT agent

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("AGENT","AGENT = :agent.agent") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(agent,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^AGENT(vobj(agent,-3),n)=vobj(agent,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(agent,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(agent,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^AGENT(vobj(agent,-3),n)=vobj(agent,n)
			#ENDBYPASS
		}

	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.agent) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordAGENT agent
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^AGENT(vobj(agent,-3),n)) quit:n.isNull()  if 'vobj(agent,n).data(),^AGENT(vobj(agent,-3),n).data()#2 set vobj(agent,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordAGENT agent

	if 'vkeychg.get(),agent.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.agent)                    // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^AGENT(vobj(agent,-3))                            // Delete Record
	quit


vinit // Initialize default values

	type public RecordAGENT agent

	// Type local variables for access keys for defaults
	type public String AGENT

	if agent.agency.isNull() set agent.agency = 0          // agency
	type public String %CRCD
	if agent.crcd.isNull() set agent.crcd = %CRCD          // crcd
	if agent.skppmt.isNull() set agent.skppmt = 0          // skppmt
	type public String TJD
	if agent.start.isNull() set agent.start = TJD          // start
	quit


vreqn // Validate required data items

	type public RecordAGENT agent

	if agent.agency.isNull() do vreqerr("AGENCY") quit
	if agent.skppmt.isNull() do vreqerr("SKPPMT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordAGENT agent

	if agent.agent.isNull() do vreqerr("AGENT") quit

	if 'vobj(agent,-100,1,"").order().isNull() do {
		if vx("SKPPMT").exists(),agent.skppmt.isNull() do vreqerr("SKPPMT") quit
		if vx("AGENCY").exists(),agent.agency.isNull() do vreqerr("AGENCY") quit
	}
		if vx("AGENCY").exists(),agent.agency.isNull() do vreqerr("AGENCY") quit
		if vx("SKPPMT").exists(),agent.skppmt.isNull() do vreqerr("SKPPMT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("AGENT","MSG",1767,"AGENT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("CRCD").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After_Insert Triggers

	type public RecordAGENT agent
	/*
	----- Revision History ----------------------------------------------------
								07/14/00 - ARPAV - 37155
		   Reserving to prevent roll forward of Mutual Funds

	09/03/99 - CARROLLJ - 33890
		   Convert to PSL.

	01/20/99 - ARPAV - 28590
		   Adding checks on interim settlement account and commission
		   payable account to make sure that they exist.
	*/
	
	
	// An agency cannot be tied to another agency
	if agent.agency=1,agent.agnum'="" do Runtime.setErrMSG("AGENT",3257) quit:ER 
	
	new XCIF,data
	set XCIF=agent.cif
	set data=Db.getOneRow("ACN","CIF","XCIF") quit:ER 
	// Invalid customer number
	if data="" do Runtime.setErrMSG("AGENT",1295) quit:ER 
	
	// Check interim settlement account
	new XCID,data
	set XCID=agent.intrm
	set data=Db.getOneRow("CID","ACN","XCID") quit:ER 
	// Invalid account ~p1
	if data="" do Runtime.setErrMSG("AGENT",1259,XCID) quit:ER 
	
	if agent.comopt=0 do { quit:ER         // Check commission payable account
		new XCID,data
		set XCID=agent.compacct
		set data=Db.getOneRow("CID","ACN","XCID") quit:ER 
		// Invalid account ~p1
		if data="" do Runtime.setErrMSG("AGENT",1259,XCID) quit:ER 
		}

	/*	
	If payment option is to an external account, check the settlement account
	to see of external transfers are enabled.
	*/

	if agent.comopt=1 do { quit:ER 
		new DATA,XCID,CLS,XTYPE
		set XCID=agent.intrm
		set CLS=Db.getOneRow("CLS","ACN","XCID")
	
		//Account ~p1 not permitted for foreign payments
		if CLS="D" set DATA=Db.getOneRow("EFTDEB","DEP","XCID")
		if CLS="L" set DATA=Db.getOneRow("EFTDEB","LN","XCID")
		if DATA=0 do Runtime.setErrMSG("AGENT",7664,XCID) quit:ER 
		}
	quit
	

vau1 // Trigger AFTER_UPDATE - After_Update Triggers

	type public RecordAGENT agent
	/*
	--------- Revision History --------------------------------------------------
	
	01/20/99 - ARPAV - 28590
		   Adding checks on interim settlement account and commission
		   payable account to make sure that they exist.
	
	01/06/99 - ARPAV - 31200
		   Added check on interim settlement account for payment orders if
		   commission payment option is to external account.
	*/
	
	
	// An agency cannot be tied to another agency
	if agent.agency=1,agent.agnum'="" do Runtime.setErrMSG("AGENT",3257) quit:ER 
	
	if (agent.cif.oldVal'=agent.cif) do { quit:ER 
		new XCIF,data
		set XCIF=agent.cif
		set data=Db.getOneRow("ACN","CIF","XCIF") quit:ER 
		// Invalid customer number
		if data="" do Runtime.setErrMSG("AGENT",1295) quit:ER 
		}
	
	// Check interim settlement account
	new XCID,data
	set XCID=agent.intrm
	set data=Db.getOneRow("CID","ACN","XCID") quit:ER 
	// Invalid account ~p1
	if data="" do Runtime.setErrMSG("AGENT",1259,XCID) quit:ER 
	
	if agent.comopt=0 do { quit:ER         // Check commission payable account
		new XCID,data
		set XCID=agent.compacct
		set data=Db.getOneRow("CID","ACN","XCID") quit:ER 
		// Invalid account ~p1
		if data="" do Runtime.setErrMSG("AGENT",1259,XCID) quit:ER 
		}
	
	/*
	If payment option is to an external account, check the settlement account
	to see of external transfers are enabled.
	*/
	
	if agent.comopt=1 do { quit:ER 
		new DATA,XCID,CLS,XTYPE
		set XCID=agent.intrm
		set CLS=Db.getOneRow("CLS","ACN","XCID")
	
		//Account ~p1 not permitted for foreign payments
		if CLS="D" set DATA=Db.getOneRow("EFTDEB","DEP","XCID")
		if CLS="L" set DATA=Db.getOneRow("EFTDEB","LN","XCID")
		if DATA=0 do Runtime.setErrMSG("AGENT",7664,XCID) quit:ER 
		}
	
	quit
	

vau2 // Trigger AU_CRCD - After Update - Currency

	type public RecordAGENT agent
		/*
		--- Revision History ------------------------------------------------

	11/01/00 - ARPAV - 42762
		Created After Update - Currency code
		---------------------------------------------------------------------
		*/

		// If the currency code changed, call into the subroutine to
		// exchange all agent balances

		do PROC^AGNTCRCD(agent.agent,agent.crcd.oldVal,agent.crcd)
		quit

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordAGENT agent
	/*
	Based on the commission group, loop through the group user table
	and default the commission plans to the agent level AGENTCOM.
	*/
	
	if agent.comgrp'="" do {
		new rs,CPLAN,SQLCNT,COMGRP
		set COMGRP=agent.comgrp
		type ResultSet rs=Db.select("CPLAN","UTBLCOMGRP","COMGRP=:COMGRP") quit:ER 
		if rs.isEmpty() quit 
		while rs.next() do { 
			set CPLAN=rs.getCol(1)
			do Db.insert("AGENTCOM","AGENT,CPLAN,APP",":AGENT,:CPLAN,1") quit:ER 
			}
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordAGENT agent

	if (%O = 2) do vload

	if vobj(agent,1).exists() do {

		if '("01"[agent.AGENCY) set vRM=$$^MSG(742,"L") do vdderr("AGENCY", vRM) quit
		set X = agent.agnum if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("AGNUM", vRM) quit
		set X = agent.cif if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CIF", vRM) quit
		set X = agent.comgrp if 'X.isNull(),'Db.isDefined("UTBLCOMGRPT","X") set vRM = $$^MSG(1485,X) do vdderr("COMGRP", vRM) quit
		set X = agent.comopt if 'X.isNull(),'Db.isDefined("STBLCOMPMTH","X") set vRM = $$^MSG(1485,X) do vdderr("COMOPT", vRM) quit
		set X = agent.compacct if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COMPACCT", vRM) quit
		set X = agent.compl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENT.COMPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = agent.comppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENT.COMPPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = agent.comytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AGENT.COMYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = agent.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
		set X = agent.end if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("END", vRM) quit
		set X = agent.extagn1 if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EXTAGN1", vRM) quit
		set X = agent.extagn2 if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EXTAGN2", vRM) quit
		set X = agent.fldstaff if 'X.isNull(),'Db.isDefined("UTBLFLDSTAFF","X") set vRM = $$^MSG(1485,X) do vdderr("FLDSTAFF", vRM) quit
		set X = agent.intrm if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("INTRM", vRM) quit
		if '("01"[agent.SKPPMT) set vRM=$$^MSG(742,"L") do vdderr("SKPPMT", vRM) quit
		set X = agent.start if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("START", vRM) quit
	}
	set X = agent.agent if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("AGENT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("AGENT","MSG",979,"AGENT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordAGENT agent) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("AGENCY").exists()!vx("CIF").exists() do vi1(.agent)
		if vx("CIF").exists() do vi2(.agent)
		if vx("EXTAGN1").exists() do vi3(.agent)
		if vx("EXTAGN2").exists() do vi4(.agent)
	}
	do vi1(.agent)
	do vi2(.agent)
	do vi3(.agent)
	do vi4(.agent)

	quit
	

vi1(RecordAGENT agent) // Maintain AGENCY index entries (Agency)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = +agent.agency
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = agent.cif
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = agent.agent

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("AGENCY",v2,v3,v4)) do vidxerr("AGENCY")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("AGENCY",v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AGENCY").exists() set v2=vx("AGENCY").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("CIF").exists() set v3=vx("CIF").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("AGENCY",v2,v3,v4)
	quit

vi2(RecordAGENT agent) // Maintain AGNTBRCD index entries (Agent/Branch)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = agent.cif
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = agent.agent

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("AGNTBRCD",v2,v3)) do vidxerr("AGNTBRCD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("AGNTBRCD",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CIF").exists() set v2=vx("CIF").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("AGNTBRCD",v2,v3)
	quit

vi3(RecordAGENT agent) // Maintain EXTAGN1 index entries (External Agent Number 1)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = agent.extagn1
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = agent.agent

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("EXTAGN1",v2,v3)) do vidxerr("EXTAGN1")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("EXTAGN1",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXTAGN1").exists() set v2=vx("EXTAGN1").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("EXTAGN1",v2,v3)
	quit

vi4(RecordAGENT agent) // Maintain EXTAGN2 index entries (External Agent Number 2)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = agent.extagn2
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = agent.agent

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("EXTAGN2",v2,v3)) do vidxerr("EXTAGN2")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("EXTAGN2",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXTAGN2").exists() set v2=vx("EXTAGN2").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("EXTAGN2",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("AGENT")

	while ds.next() do {
		type RecordAGENT agent=ds.getRecord("AGENT")
		if vlist.contains("VINDEX") do VINDEX(.agent) quit
		if vlist.contains("AGENCY") do vi1(.agent)
		if vlist.contains("AGNTBRCD") do vi2(.agent)
		if vlist.contains("EXTAGN1") do vi3(.agent)
		if vlist.contains("EXTAGN2") do vi4(.agent)
	}

	quit


public VIDXBLD1(RecordAGENT agent, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.agent) quit
	if vlist.contains("AGENCY") do vi1(.agent)
	if vlist.contains("AGNTBRCD") do vi2(.agent)
	if vlist.contains("EXTAGN1") do vi3(.agent)
	if vlist.contains("EXTAGN2") do vi4(.agent)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("AGENT","MSG",1225,"AGENT."_di)

	quit


vkchged // Access key changed

	type public RecordAGENT agent

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("AGENT")
	set voldkey = vux.piece("|",1),vobj(agent,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(agent,-3) = vnewkey // Copy new keys into object
	type RecordAGENT vnewrec = agent.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("AGENT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(agent,-3) = vux.piece("|",1)                  // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "AGENTFIL"	// Location of index program

