RFLGCCFL(RecordRFLGCCID rflgccid, String vpar, Boolean vparNorm) // RFLGCCID - Customer Restrict - CID Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (4)                      03/13/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = rflgccid.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(rflgccid,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(rflgccid,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = rflgccid.acn
	type String RFLG = rflgccid.rflg
	type String CID = rflgccid.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("RFLG").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RFLGCCID",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RFLGCCID","ACN = :rflgccid.acn and RFLG = :rflgccid.rflg and CID = :rflgccid.cid") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String RFLG
	type public String CID

	type RecordRFLGCCID rflgccid = Db.getRecord("RFLGCCID","ACN=:ACN,RFLG=:RFLG,CID=:CID")
	if (%ProcessMode = 2) do {
		do rflgccid.setMode(2)

		do RFLGCCFL(rflgccid,vpar)
	}
	else  do VINDEX(rflgccid)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRFLGCCID rflgccid

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RFLGCCID","ACN = :rflgccid.acn and RFLG = :rflgccid.rflg and CID = :rflgccid.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(rflgccid)) S ^HLD(2,vobj(rflgccid,-3),vobj(rflgccid,-4),vobj(rflgccid,-5))=vobj(rflgccid)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.rflgccid) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRFLGCCID rflgccid

	if vpar["/INDEX/" do VINDEX(.rflgccid)                 // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^HLD(2,vobj(rflgccid,-3),vobj(rflgccid,-4),vobj(rflgccid,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordRFLGCCID rflgccid

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRFLGCCID rflgccid

	if rflgccid.acn.isNull() do vreqerr("ACN") quit
	if rflgccid.rflg.isNull() do vreqerr("RFLG") quit
	if rflgccid.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLGCCID","MSG",1767,"RFLGCCID."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordRFLGCCID rflgccid
	if 'rflgccid.rflg.isNull() set vfkey("^HLD("_2_","_""""_rflgccid.acn_""""_","_""""_rflgccid.rflg_""""_")")="RFLGCCID(ACN,RFLG) -> RFLGC"
	if 'rflgccid.cid.isNull() set vfkey("^ACN("_""""_rflgccid.cid_""""_","_50_")")="RFLGCCID(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordRFLGCCID rflgccid
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("RFLGC",":rflgccid.acn,:rflgccid.rflg") set vERRMSG = $$^MSG(8563,"RFLGCCID(ACN,RFLG) -> RFLGC") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("ACN",":rflgccid.cid") set vERRMSG = $$^MSG(8563,"RFLGCCID(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - RFLGCCID After Delete trigger

	type public RecordRFLGCCID rflgccid
	/*
	   ---------- Revision History ------------------------------------------

	   02/28/05 - TITOVE - CR 13291
	   	      Modified logic of checking for FRMFILER parameter, to
	   	      prevent undefined and logical errors.

	   09/09/04 - KELLYP - CR 11982
		      Replaced references to RELACN with RELCIF.  RELACN is an index
		      and should not be directly referenced.  The RELACN table was 
		      also obsoleted from the M database.  Also modified this trigger
		      to conform to current PSL standards.  Also removed pre-2002
		      revision history.

	   06/10/02 - SELVANTHANS - 50471
		      Added code to check the restriction on all the customers
		      on the account before deleting the account restriction.

	*/

	type Public Number ACN,CID
	type Public String ER,RFLG,vpar()

	type String TCMT

	// After Delete Restriction
	// Customer restriction ~p1 removed from account ~p2
	set TCMT=$$^MSG(1569,RFLG,CID) do HISTBLD^ACNFUNCS(TCMT)

	type ResultSet rs=Db.select("CID","RFLG","CID=:CID") 
	if 'rs.isEmpty() quit
		
	if Db.isDefined("RFLG","CID,RFLG") quit 
	
	type Boolean RSTFLG
	type Number XACN
	type String CLS,RFL,RFLR

	set RFLR=""
	type ResultSet rs=Db.select("RFLG","RFLGRPACID","CID=:CID") 
	if 'rs.isEmpty() while rs.next() do {
		set RFLR=rs.getCol(1)
		}

	/*
	 Do not delete account restriction if other customers on the account
	 have restriction
	*/
	
	set RSTFLG=0
	set ACN=ACN.get()

	// 11982 - Replaced RELACN with RELCIF
	type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
	if 'rs.isEmpty() while rs.next() do {
		set XACN=rs.getCol(1) quit:XACN=ACN
		if Db.isDefined("RFLGCCID","XACN,RFLG,CID") set RSTFLG=1
		}

	type ResultSet rs=Db.select("CLS,RFLG","ACN","CID=:CID")
	if 'rs.isEmpty() if rs.next() do {
		set CLS=rs.getCol(1)
		set RFL=rs.getCol(2)
		}

	if RSTFLG=0,CLS="D",(RFL'=0),(RFLR="") do { quit:ER 
		if vpar["/FRMFILER" do Db.update("DEP","RFLG=0","CID=:CID","/FRMFILER") quit 
		do Db.update("DEP","RFLG=0","CID=:CID") quit 
		}
	
	if RSTFLG=0,CLS="L",(RFL'=0) do { quit:ER 
		if vpar["/FRMFILER" do Db.update("LN","RFLG=0","CID=:CID","/FRMFILER") quit 
		do Db.update("LN","RFLG=0","CID=:CID") quit 
		}
	quit

vai1 // Trigger AFTER_INSERT - RFLGCCID After Insert trigger.

	type public RecordRFLGCCID rflgccid
	/*
	   ---------- Revision History ------------------------------------------
	
	   02/28/05 - TITOVE - CR 13291
	   	      Modified logic of checking for FRMFILER parameter, to
	   	      prevent undefined and logical errors.

	   09/17/99 - CHOK - 31126
		      Coverted to PSL
	
	   02/17/99 - SCHWARTZC - 28966
	              Added check for vpar("FRMFILER").  This parameter checks to see
		      if the call to this filer has been made from CIFFILE.  If it has
		      we set FRMFILER parameter for the call to DEPFILE/LNFILER
		      so we don't do the DOD or DODSABL integrity checks.
	*/

	// Set Restriction Flags after Insert
	
	type public Number CID, ER
	type public String RFLG

	type Number SAVACN
	type String TCMT
	
	set SAVACN = ACN

	type RecordACN acn = Db.getRecord("ACN", "CID = :CID")

	if acn.cls = "D" do { quit:ER
		
		if 'acn.rflg do { quit:ER
		
			if vpar["/FRMFILER" do Db.update("DEP","RFLG=1","CID=:CID","/FRMFILER") quit

			do Db.update("DEP","RFLG=1","CID=:CID")
			}
		// Customer restriction ~p1 placed on account ~p2
		set TCMT = $$^MSG(1568,RFLG,CID)
		
		do HISTBLD^ACNFUNCS(TCMT)
		}
	
	if acn.cls = "L" do { quit:ER
		
		if 'acn.rflg do { quit:ER
		
			if vpar["/FRMFILER" do Db.update("LN","RFLG=1","CID=:CID","/FRMFILER") quit

			do Db.update("LN","RFLG=1","CID=:CID")
			}
		// Customer restriction ~p1 placed on account ~p2
		set TCMT=$$^MSG(1568,RFLG,CID)
		
		do HISTBLD^ACNFUNCS(TCMT)
		}

	set ACN = SAVACN

	quit
	

vbd1 // Trigger BEFORE_DELETE - RFLGCCID Before Delete trigger.

	type public RecordRFLGCCID rflgccid
	// Invalid customer number
	if 'Db.isDefined("CIF","ACN") do Runtime.setErrMSG("RFLGCCID",1295) quit:ER 

	// Restriction must exist in OVR system table or RFLG user table
	new GRP
	set GRP="CIF"
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") do Runtime.setErrMSG("RFLGCCID",2408) quit:ER 

	// Restriction ~p1 not placed on account ~p2
	if 'Db.isDefined("RFLGCCID","ACN,RFLG,CID") do Runtime.setErrMSG("RFLGCCID",2411,"RFLG~CID") quit:ER 
	quit
	

vbi1 // Trigger BEFORE_INSERT - RFLGCCID Before Insert trigger.

	type public RecordRFLGCCID rflgccid
	// Invalid customer number
	if 'Db.isDefined("CIF","ACN") do Runtime.setErrMSG("RFLGCCID",1295) quit:ER 

	// Restriction must exist in OVR system table or RFLG user table
	new GRP
	set GRP="CIF"
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") do Runtime.setErrMSG("RFLGCCID",2408) quit:ER 

	// Account ~p1 is not owned by CIF ~p2
	if 'Db.isDefined("RELCIF","ACN,CID") do Runtime.setErrMSG("RFLGCCID",4365,"CID~ACN") quit:ER 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRFLGCCID rflgccid

	set X = rflgccid.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	if rflgccid.rflg.length()>4 set vRM = $$^MSG(1076,4) do vdderr("RFLG", vRM) quit
	set X = rflgccid.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLGCCID","MSG",979,"RFLGCCID."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordRFLGCCID rflgccid) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.rflgccid)

	quit
	

vi1(RecordRFLGCCID rflgccid) // Maintain XRFLGC index entries (RFLGC Index by CID)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = rflgccid.cid
	type String v3 = rflgccid.acn
	type String v4 = rflgccid.rflg

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^HLD(2,vobj(rflgccid,-3),vobj(rflgccid,-4),vobj(rflgccid,-5)))#2,'$D(^XREF("XRFLGC",v2,v3,v4)) do vidxerr("XRFLGC")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("XRFLGC",v2,v3,v4)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("XRFLGC",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("RFLGCCID")

	while ds.next() do {
		type RecordRFLGCCID rflgccid=ds.getRecord("RFLGCCID")
		if vlist.contains("VINDEX") do VINDEX(.rflgccid) quit
		if vlist.contains("XRFLGC") do vi1(.rflgccid)
	}

	quit


public VIDXBLD1(RecordRFLGCCID rflgccid, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.rflgccid) quit
	if vlist.contains("XRFLGC") do vi1(.rflgccid)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("RFLGCCID","MSG",1225,"RFLGCCID."_di)

	quit


vkchged // Access key changed

	type public RecordRFLGCCID rflgccid

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("RFLG").exists() set vux("RFLG") = vx("RFLG")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = rflgccid.acn_","_rflgccid.rflg_","_rflgccid.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = rflgccid.acn_","_rflgccid.rflg_","_rflgccid.cid // Copy new keys into object
	type RecordRFLGCCID vnewrec = rflgccid.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RFLGCCID",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRFLGCCID rflgccid

	if vux("ACN").exists() set rflgccid.acn = vux("ACN").piece("|",i)
	if vux("RFLG").exists() set rflgccid.rflg = vux("RFLG").piece("|",i)
	if vux("CID").exists() set rflgccid.cid = vux("CID").piece("|",i)
	quit

VIDXPGM()	quit "RFLGCCFL"	// Location of index program

