R01S477	// SCA531 - Transaction Code Verification Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:59 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ

	set RID="SCA531"
	set RN="Transaction Code Verification Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB

	set %READ="IO/REQ,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,CONAM,RID,RN,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vovc1,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA531",RN="Transaction Code Verification Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA531","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:1 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("TRN.ETC,TRN.CLS,TRN.GRP,TRN.DES,TRN.ACN,TRN.PGM,TRN.PGMEC,TRN.SGT","TRN","","TRN.ETC","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1
	set vovc1=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1
	set vovc1=vc1
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8
	set vc1=V.piece($C(9),1)			// TRN.ETC
	set vc2=V.piece($C(9),2)			// TRN.CLS
	set vc3=V.piece($C(9),3)			// TRN.GRP
	set vc4=V.piece($C(9),4)			// TRN.DES
	set vc5=V.piece($C(9),5)			// TRN.ACN
	set vc6=V.piece($C(9),6)			// TRN.PGM
	set vc7=V.piece($C(9),7)			// TRN.PGMEC
	set vc8=V.piece($C(9),8)			// TRN.SGT
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1		// Skip detail
	do VBREAK

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(1).get() do VDTL1 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(1)
	type Public String vc1,vovc1
	type Number vb1
	set (vb1)=0
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(1)=VT(1)+1
	quit

VDTL1	// Detail
	type public String %TIM,IOSL,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,verror,vh(),vovc1,vrundate,vsysdate

	if VLC+4>IOSL do VHDG0 quit:VFMQ

	set VL=$E(vc1,1,12)
	set VL=VL_$J("",14-VL.length())_$E(vc2,1,1)
	set VL=VL_$J("",18-VL.length())_$E(vc3,1,6)
	set VL=VL_$J("",26-VL.length())_$E(vc4,1,35)
	do VP1 quit:VFMQ!verror.get()  set V=$E(ERROR(1),1,60) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",63-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set V=$E(ERROR(2),1,60) do VP3 quit:VFMQ!verror.get()  set VL="                                                               "_V
	if 'VL.translate(" ").isNull() do VOM
	set V=$E(ERROR(3),1,60) do VP4 quit:VFMQ!verror.get()  set VL="                                                               "_V
	if 'VL.translate(" ").isNull() do VOM
	set V=$E(ERROR(4),1,60) do VP5 quit:VFMQ!verror.get()  set VL="                                                               "_V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CONAM,RID,RN,VL,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vovc1,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+5,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="Tran Code    Cls  Group   Description                          Error"
	do VOM
	set VL="==================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: ERROR(1)

	type public String vc5,vc2,vc3,vc6,vc7,vc8
 /*
   ---- Revision History------------------------------------------------

	01/20/05 - KELLYP - CR 13667
		Modified to return an error message if an invalid
		account number is defined on a loan or deposit class
		transaction code.  Also modified to return an error
		message if the account group and transaction code
		group don't match.
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */
 
 type Public String ERROR()

 type Number ACN,ECNT,I
 type String CLS,data,GRP,PGM,PGMEC

 // Determine if error and display
 // Suppress any lines with no errors

 set ECNT=1
 for I=1:1:4 set ERROR(I)=""

 set ACN=vc5
 set CLS=vc2
 set GRP=vc3

 if 'ACN.isNull() do {
 	if CLS="M" do {
		if 'Db.isDefined("GLAD","ACN=:ACN") do {
			// Invalid G/L account ~p1
			set ERROR(ECNT)=$$^MSG(1364,ACN) 
			set ECNT=ECNT+1
			}
		}
 	else  if (CLS="D")!(CLS="L") do {
		if 'Db.isDefined("ACN","CID=:ACN") do {
			// Invalid account number
			set ERROR(ECNT)=$$^MSG(7774)
			set ECNT=ECNT+1
			}
		else  do {
			type RecordACN acn=Db.getRecord("ACN","CID=:ACN")
			if acn.grp'=GRP do {
				// Account is not in group ~p1
				set ERROR(ECNT)=$$^MSG(8228,GRP)
				set ECNT=ECNT+1
				}
			}
		}
	}

 set PGM=vc6.piece("^",2) 
 set PGMEC=vc7.piece("^",2)

 if PGM["(" set PGM=PGM.piece("(",1)
 if PGMEC["(" set PGMEC=PGMEC.piece("(",1)

 // Invalid routine
 if PGM'="",'$$VALID^%ZRTNS(PGM) set ERROR(ECNT)=$$^MSG(5424,PGM) set ECNT=ECNT+1       //Invalid routine
	
 // Invalid EC routine
 if PGMEC'="",'$$VALID^%ZRTNS(PGMEC) set ERROR(ECNT)=$$^MSG(7502,PGM) set ECNT=ECNT+1   //Invalid E/C routine ~p1
	
 // No routine
 if CLS'="M",PGM="",GRP'="ESC" set ERROR(ECNT)=$$^MSG(5425)   //No routine
 if vc8,PGM="" set ERROR(ECNT)=""

	quit

VP2	// Column post-processor - Variable: ERROR(1)

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String ERROR(),V,VL

 if ERROR(1)="" set (V,VL)=""
 
	quit

VP3	// Column post-processor - Variable: ERROR(2)

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String ERROR(),V,VL

 if ERROR(2)="" set (V,VL)=""
	quit

VP4	// Column post-processor - Variable: ERROR(3)

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String ERROR(),V,VL

 if ERROR(3)="" set (V,VL)=""
	quit

VP5	// Column post-processor - Variable: ERROR(4)

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String ERROR(),V,VL

 if ERROR(4)="" set (V,VL)=""

	quit
