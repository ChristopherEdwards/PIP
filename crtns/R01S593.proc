R01S593	// SCA665 - Credit Bureau File Create Metro 1 Format
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:53 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String CNAME,CNT,CO,CRCTRL,CRID,CRSHRT,CRSTUD,TJD,TPST
	type String BJD,EJD,TTYPE
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date BJD
	type String DEV
	type Date EJD

	set RID="SCA665"
	set RN="Credit Bureau File Create Metro 1 Format"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("BJD")="|12|||||||D|From|||||"
	set %TAB("DEV")="|40|||[DEVICE]||S SIO=IO,%EXT=1 D ^SCAIO I 'ER S IO=SIO,IOPAR=SIOPAR,IOTYP=SIOTYP|S RM=$I_%_2,DEV=$I,SIOPAR=$G(IOPAR),SIOTYP=$G(IOTYP)|T|Device for summary report|||||"
	set %TAB("EJD")="|12|||||I X<BJD S ER=1,RM=$$^MSG(8216)||D|Through|||||"
	set %TAB("IO")=$$IO^SCATAB

	set %READ="IO/REQ,DEV#1,BJD#1,EJD#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String CNAME,CNT,CO,CRCTRL,CRID,CRSHRT,CRSTUD,TJD,TPST
	type public String BJD,EJD,TTYPE
	type public Date BJD,EJD
	type public String DEV
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,A2Y,A3Y,ADDRESS,AMTFLD,CBDOO,CBSC,CBST,CONAM,D14,D15,D29,D7,EXPID,FIL1,RID,RN,TBAL,TTYPE,VL,VLOF,VRF(),VSTATS(),ZIP2,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA665",RN="Credit Bureau File Create Metro 1 Format"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA665","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=561")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[LN]CID#12#17,[LN]CBC#29#2,[LN]ODT#48#6,[LN]LPDT#60#6,[LN]BAL#73#7,[CIF]TAXID#94#9,[CIF]MAR#105#1,[CIF]MZIP#106#6,[RELCIF]ECOACD#112#1,[CIF]NAM#115#32,[CIF]MAD1#148#32,[CIF]MAD2#180#32,[CIF]MCITY#213#20,[CIF]MSTATE#240#2,[CIF]MCNTRY#242#2,[CIF]OWN#244#1,[LN]CRLMT#245#7,[LN]DTC#254#6,[LN]DIST1LD#265#1"

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("LN.CLS,LN.GRP,LN.TYPE,LN.CID,LN.CBC,LN.ODT,LN.LPDT,LN.BAL,CIF.TAXID,CIF.MAR,CIF.MZIP,RELCIF.ECOACD,CIF.NAM,CIF.MAD1,CIF.MAD2,CIF.MCITY,CIF.MSTATE,CIF.MCNTRY,CIF.OWN,LN.CRLMT,LN.DTC,LN.DIST1LD,LN.COA,LN.ONP,LN.DIST1AF,LN.TDUE,LN.PMT,LN.CBST,LN.CREPSCC,LN.CBDOO,LN.STAT,LN.FCLD,LN.SCHSEQ,LN.DSEQ,LN.DIST1ND,LN.REVF,LN.MAXBAL,LN.ACN,LN.HABL1,LN.AMTREQ","LN,ACNADDR,PRODDFTL,RELCIF,CIF","LN.CBC NOT ='99' AND LN.CBC IS NOT NULL AND (LN.GRP NOT ='RC' OR LN.CNTDR>0) AND LN.DIST1AF>0 AND PRODDFTL.CBC NOT ='99' AND PRODDFTL.CPF NOT =1","LN.CLS,LN.GRP,LN.TYPE,LN.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40
	set vc1=V.piece($C(9),1)			// LN.CLS
	set vc2=V.piece($C(9),2)			// LN.GRP
	set vc3=V.piece($C(9),3)			// LN.TYPE
	set vc4=V.piece($C(9),4)			// LN.CID
	set vc5=V.piece($C(9),5)			// LN.CBC
	set vc6=V.piece($C(9),6)			// LN.ODT
	set vc7=V.piece($C(9),7)			// LN.LPDT
	set vc8=V.piece($C(9),8)			// LN.BAL
	set vc9=V.piece($C(9),9)			// CIF.TAXID
	set vc10=V.piece($C(9),10)			// CIF.MAR
	set vc11=V.piece($C(9),11)			// CIF.MZIP
	set vc12=V.piece($C(9),12)			// RELCIF.ECOACD
	set vc13=V.piece($C(9),13)			// CIF.NAM
	set vc14=V.piece($C(9),14)			// CIF.MAD1
	set vc15=V.piece($C(9),15)			// CIF.MAD2
	set vc16=V.piece($C(9),16)			// CIF.MCITY
	set vc17=V.piece($C(9),17)			// CIF.MSTATE
	set vc18=V.piece($C(9),18)			// CIF.MCNTRY
	set vc19=V.piece($C(9),19)			// CIF.OWN
	set vc20=V.piece($C(9),20)			// LN.CRLMT
	set vc21=V.piece($C(9),21)			// LN.DTC
	set vc22=V.piece($C(9),22)			// LN.DIST1LD
	set vc23=V.piece($C(9),23)			// LN.COA
	set vc24=V.piece($C(9),24)			// LN.ONP
	set vc25=V.piece($C(9),25)			// LN.DIST1AF
	set vc26=V.piece($C(9),26)			// LN.TDUE
	set vc27=V.piece($C(9),27)			// LN.PMT
	set vc28=V.piece($C(9),28)			// LN.CBST
	set vc29=V.piece($C(9),29)			// LN.CREPSCC
	set vc30=V.piece($C(9),30)			// LN.CBDOO
	set vc31=V.piece($C(9),31)			// LN.STAT
	set vc32=V.piece($C(9),32)			// LN.FCLD
	set vc33=V.piece($C(9),33)			// LN.SCHSEQ
	set vc34=V.piece($C(9),34)			// LN.DSEQ
	set vc35=V.piece($C(9),35)			// LN.DIST1ND
	set vc36=V.piece($C(9),36)			// LN.REVF
	set vc37=V.piece($C(9),37)			// LN.MAXBAL
	set vc38=V.piece($C(9),38)			// LN.ACN
	set vc39=V.piece($C(9),39)			// LN.HABL1
	set vc40=V.piece($C(9),40)			// LN.AMTREQ
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 set (TREC,TBAL,TPST)=0
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set TJD=cuvar.tjd

 kill LNCRBT,SEG

 set CRCTRL=cuvar.crctrl
 set CRSHRT=cuvar.crshrt
 set CRID=cuvar.crid
 set CRSTUD=cuvar.crstud
 set CO=cuvar.co
 set CNAME=cuvar.cname
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=CO,CNAME,CNT,CRCTRL,CRSHRT,CRID,CRSTUD,TJD,TPST

 // This is part of account number processing

 quit

TTYPE(Number ACN,Number CID,Number SEG)  
 /* To determine transaction types for base and segments.
    Calendar dates are used, these transactions can't be effective 
    dated.  Using system dates for looping, so adding 21 days on either 
    side, assumption is system date and calendar date on client system 
    should never be more than 3 weeks apart. */

 type public Date BJD,EJD
 type public Number TTYPE

 set TTYPE=4                   // 4 Updates is the default

 // Find ECOACD changes
 // Find new borrowers, segments only!
 set STDT=BJD-22
 set ENDT=EJD+22
 type DbSet ds=Db.selectDbSet("HIST","CID=:CID AND TJD>:STDT AND TJD<:ENDT","TSEQ DESC")
 while ds.next() do {
	type RecordHIST hist=ds.getRecord("HIST")
	if (hist.cdt>(BJD-1)),(hist.cdt<(EJD+1)) do {
		if hist.tcmt["[RELCIF]ECOACD" set TTYPE=7 quit
		if SEG,(hist.tcmt["[REL]ROLE") set TTYPE=1
		}
	}

 // Stop if type is 1 new borrower, overrides 7
 // Stop if type is already 7
 if TTYPE'=4 quit TTYPE

 // Find address and name changes, type is 7.
 type DbSet dscifh=Db.selectDbSet("CIFH","ACN=:ACN AND TJD>:STDT AND TJD<:ENDT","SEQ DESC")
 while dscifh.next() do {
	type RecordCIFH cifh=dscifh.getRecord("CIFH")
	if (cifh.hdate>(BJD-1)),(cifh.hdate<(EJD+1)) do {
		if cifh.tcmt["[CIF]MAD1" set TTYPE=7 quit
		if cifh.tcmt["[CIF]MCITY" set TTYPE=7 quit
		if cifh.tcmt["[CIF]NAM" set TTYPE=7 quit
		}
	}

 quit TTYPE
	quit

VRPOST	// Report post-processor

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set cuvar.crlrd=%SystemDate
 do cuvar.bypassSave()
 do CLOSE^SCAIO
 set SIO=IO
 set RID="SCA179" do ^URID
 if PGM.length() set %BLK="/,"_DEV do ^@PGM
 set IO=SIO set %NOCLOSE=""
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(4)=1		// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL4	// Detail
	type public String A2Y,A3Y,ADDRESS,AMTFLD,BJD,CBDOO,CBSC,CBST,CNAME,CNT,CO,CRCTRL,CRID,CRSHRT,CRSTUD,D14,D15,D29,D7,EJD,EXPID,FIL1,IOSL,TBAL,TJD,TPST,TTYPE,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),ZIP2,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="0560"
	set VL=VL_$J("",4-VL.length())_$E(10E30_CRID,26+$L(CRID),99)
	set V=vc4,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(10E30_V,16+$L(vc4),99) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V		// [SYSDEV,LN]CID
	set V=vc5,VO=V set V=$J(V,2) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",28-VL.length())_V		// [SYSDEV,LN]CBC
	set VL=VL_$J("",30-VL.length())_$E(vc28,1,2)
	set VL=VL_$J("",32-VL.length())_"00000000000"
	set VL=VL_$J("",43-VL.length())_$E(10E30_D7,30+$L(D7),99)
	set VL=VL_$J("",46-VL.length())_$E(TTYPE,1,1)
	set VL=VL_$J("",47-VL.length())_$$^%ZD(vc6,"MM")_$$^%ZD(vc6,"DD")_$$^%ZD(vc6,"YY")
	set V=vc30,VO=V set V=$$^%ZD(V,"MM")_$$^%ZD(vc30,"DD")_$$^%ZD(vc30,"YY") do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V
	set V=vc7,VO=V set V=$$^%ZD(V,"MM")_$$^%ZD(vc7,"DD")_$$^%ZD(vc7,"YY") do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",59-VL.length())_V		// [SYSDEV,LN]LPDT
	do VP6 quit:VFMQ!verror.get()  set V=$E(10E30_(AMTFLD*10E-1\1),26+$L(AMTFLD*10E-1\1),99)
	set VL=VL_$J("",65-VL.length())_V
	set VL=VL_$J("",72-VL.length())_$E(10E30_(vc8*10E-1\1),26+$L(vc8*10E-1\1),99)
	set VL=VL_$J("",79-VL.length())_$E(10E30_(D14*10E-1\1),26+$L(D14*10E-1\1),99)
	set VL=VL_$J("",86-VL.length())_$E(10E30_(D15*10E-1\1),26+$L(D15*10E-1\1),99)
	set VL=VL_$J("",93-VL.length())_$J(vc9,9)
	set VL=VL_$J("",102-VL.length())_$E(CBSC,1,2)
	set VL=VL_$J("",104-VL.length())_$E(vc10,1,1)
	set V=vc11,VO=V set V=$J(V,6) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",105-VL.length())_V		// [SYSDEV,CIF]MZIP
	set VL=VL_$J("",111-VL.length())_$E(vc12,1,1)
	set VL=VL_$J("",112-VL.length())_"  "
	set VL=VL_$J("",114-VL.length())_$E(vc13,1,32)
	set VL=VL_$J("",146-VL.length())_" "
	set VL=VL_$J("",147-VL.length())_$E(vc14,1,32)
	set VL=VL_$J("",179-VL.length())_$E(vc15,1,32)
	set VL=VL_$J("",212-VL.length())_$E(vc16,1,20)
	set VL=VL_$J("",239-VL.length())_$E(vc17,1,2)
	set VL=VL_$J("",241-VL.length())_$E(vc18,1,2)
	set VL=VL_$J("",243-VL.length())_$E(vc19,1,1)
	set V=vc20,VO=V set V=$E(10E30_(V*10E-1\1),26+$L(vc20*10E-1\1),99) do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",244-VL.length())_V		// [SYSDEV,LN]CRLMT
	set VL=VL_$J("",251-VL.length())_$E(D29,1,1)
	set VL=VL_$J("",252-VL.length())_"U"
	set VL=VL_$J("",253-VL.length())_$$^%ZD(vc21,"MM")_$$^%ZD(vc21,"DD")_$$^%ZD(vc21,"YY")
	set VL=VL_$J("",259-VL.length())_$E(ZIP2,1,4)
	set V=vc22,VO=V set V=$E(V,1,1) do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",264-VL.length())_V		// [SYSDEV,LN]DIST1LD
	set VL=VL_$J("",272-VL.length())_"A1"
	set VL=VL_$J("",274-VL.length())_$E(SEGAR(1,"ECOA"),1,1)
	set VL=VL_$J("",275-VL.length())_$E(SEGAR(1,"NAME"),1,32)
	set V=$E(10E30_SEGAR(1,"SECSSN"),24+$L(SEGAR(1,"SECSSN")),99) do VP10 quit:VFMQ!verror.get()
	set VL=VL_$J("",307-VL.length())_V
	set VL=VL_$J("",318-VL.length())_$E(SEGAR(1,"TTYPE"),1,1)
	do VP11 quit:VFMQ!verror.get()  set V=$E(FIL1,1,1)
	set VL=VL_$J("",319-VL.length())_V
	set VL=VL_$J("",320-VL.length())_"A2"
	set VL=VL_$J("",322-VL.length())_$E(SEGAR(2,"ECOA"),1,1)
	set V=$E(SEGAR(2,"NAME"),1,32) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",323-VL.length())_V
	set V=$E(10E30_SEGAR(2,"SECSSN"),24+$L(SEGAR(2,"SECSSN")),99) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",355-VL.length())_V
	set VL=VL_$J("",366-VL.length())_$E(SEGAR(2,"TTYPE"),1,1)
	set VL=VL_$J("",369-VL.length())_$E(A2Y,1,1)
	set VL=VL_$J("",370-VL.length())_$E(SEGAR(2,"MAD1"),1,32)
	set VL=VL_$J("",402-VL.length())_$E(SEGAR(2,"MCITY"),1,22)
	set VL=VL_$J("",426-VL.length())_$E(SEGAR(2,"MSTATE"),1,2)
	set VL=VL_$J("",428-VL.length())_$E(SEGAR(2,"MCNTRY"),1,2)
	set VL=VL_$J("",430-VL.length())_$E(SEGAR(2,"MZIP"),1,10)
	set VL=VL_$J("",440-VL.length())_"A3"
	set VL=VL_$J("",442-VL.length())_$E(SEGAR(3,"ECOA"),1,1)
	set V=$E(SEGAR(3,"NAME"),1,32) do VP14 quit:VFMQ!verror.get()
	set VL=VL_$J("",443-VL.length())_V
	set V=$E(10E30_SEGAR(3,"SECSSN"),24+$L(SEGAR(3,"SECSSN")),99) do VP15 quit:VFMQ!verror.get()
	set VL=VL_$J("",475-VL.length())_V
	set VL=VL_$J("",486-VL.length())_$E(SEGAR(3,"TTYPE"),1,1)
	set VL=VL_$J("",489-VL.length())_$E(A3Y,1,1)
	set VL=VL_$J("",490-VL.length())_$E(SEGAR(3,"MAD1"),1,32)
	set VL=VL_$J("",522-VL.length())_$E(SEGAR(3,"MCITY"),1,22)
	set VL=VL_$J("",546-VL.length())_$E(SEGAR(3,"MSTATE"),1,2)
	set VL=VL_$J("",548-VL.length())_$E(SEGAR(3,"MCNTRY"),1,2)
	set VL=VL_$J("",550-VL.length())_$E(SEGAR(3,"MZIP"),1,10)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,A2Y,A3Y,ADDRESS,AMTFLD,BJD,CBDOO,CBSC,CBST,CNAME,CNT,CO,CONAM,CRCTRL,CRID,CRSHRT,CRSTUD,D14,D15,D29,D7,EJD,EXPID,FIL1,RID,RN,TBAL,TJD,TPST,TTYPE,VL,ZIP2,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+1,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL="0560HEADER"
	set VL=VL_$J("",10-VL.length())_$E(CRCTRL,1,5)
	set VL=VL_$J("",15-VL.length())_$E(CRSHRT,1,8)
	set VL=VL_$J("",23-VL.length())_$$^%ZD(TJD,"MM")_$$^%ZD(TJD,"DD")_$$^%ZD(TJD,"YY")
	set VL=VL_$J("",29-VL.length())_"00"
	set VL=VL_$J("",31-VL.length())_$E(10E30_CRSTUD,29+$L(CRSTUD),99)
	set VL=VL_$J("",35-VL.length())_"8105"
	set VL=VL_$J("",43-VL.length())_$E(CO,1,10)
	set VL=VL_$J("",59-VL.length())_$$^%ZD(TJD,"MM")_$$^%ZD(TJD,"DD")_$$^%ZD(TJD,"YY")
	set VL=VL_$J("",114-VL.length())_$E(CNAME,1,33)
	do VP16 quit:VFMQ!verror.get()  set V=$E(ADDRESS,1,96)
	set VL=VL_$J("",147-VL.length())_V
	do VP17 quit:VFMQ!verror.get()  set V=$E(EXPID,1,10)
	set VL=VL_$J("",243-VL.length())_V
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String A2Y,A3Y,ADDRESS,AMTFLD,CBDOO,CBSC,CBST,CNAME,CO,CRCTRL,CRID,CRSHRT,CRSTUD,D14,D15,D29,D7,EXPID,FIL1,TBAL,TJD,TPST,TTYPE,ZIP2,vc28,vc30,vovc1,vovc2,vovc3,vovc4
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="0560TRAILER"
	set VL=VL_$J("",11-VL.length())_$E(10E30_(TBAL*10E-1\1),22+$L(TBAL*10E-1\1),99)
	set VL=VL_$J("",22-VL.length())_$E(10E30_(TPST*10E-1\1),22+$L(TPST*10E-1\1),99)
	set V=(VT(0)+VT(1)+VT(2)+VT(3)+VT(4))		// @CNT(0,N,9)
	do VP18 quit:VFMQ!verror.get()  set V=$J(V,9)
	set VL=VL_$J("",33-VL.length())_V		// @CNT(0,N,9)
	set VL=VL_$J("",42-VL.length())_"0000"
	set VL=VL_$J("",51-VL.length())_$$^%ZD(TJD,"MM")_$$^%ZD(TJD,"DD")_$$^%ZD(TJD,"YY")
	do VOM
	quit

VOM	// Output print line
	type Public Number VLC
	type Public String IO,VL

	use IO
	write VL_$J("",560-VL.length()),!
	set VL="",VLC=VLC+1
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,LN]CID

	type public String vc4,vc23,vc24,vc5,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc7,vc32,vc33,vc34,vc35
	//set TREC=TREC+1

	type public String CBSC, CBST, CBDOO
	type public Number D7, D14 
	type Number ACN, CID, X
	type Date COA, DLCO
	type String B
 
	set (CBST,CBDOO,CBSC)=""

	kill D7

	set CID=vc4
	set COA=vc23
	set DLCO=$$DLCO^LNCDI(CID,COA) // date of last charge off

	do CBST(.CBST,DLCO)

	set X=vc24
	set B=vc5

	if X.isNull()!(vc25.isNull()) set D7="001"

	// revolving or line of credit
	if (B="07")!(B=15)!(B=18)!(B=47)!(B=89) set D7="010"

	if 'D7.data() do {
		set X = (X*12) / vc25

		type Boolean A=0

		if B="08"!(B=19)!(B=25)!(B=26)!(B=27) set A=1
		// if A=1, report years, otherwise report months
		set D7=$S(A:(X/12),1:X)

		if (D7\1).length()>1 set D7=$$^SCARND(D7,0,CID,"",0)
		else  set D7=$$^SCARND(D7,0,CID,"",1)
		}

	if (CBST=11)!(CBST=13) set D14=0
	else  set D14 = vc26 - vc27

	if D14 < 0 set D14=0

	quit


CBST(String CBST,  	// Status field
     Date DLCO)		// Last charge off date

	// If CBST Status is populated, report Date of Occurrence and
	// Special Comments exactly as stored in database
	
	type public Date CBDOO

	set CBST=vc28

	if 'CBST.isNull() do { quit
		set CBSC=vc29
		set CBDOO=vc30
		}

	set CBDOO=""

	// Special comments
	if CBSC.get().isNull() set CBSC=vc29

	// Account closed
	if vc31=4 do { quit
		set CBST=13
		set CBDOO=vc7
		}

	// Foreclosure       
	if 'vc32.isNull() do { quit
		set CBDOO=vc32
		set CBST=94 quit    // Foreclosure
		}

	// check last action file - problem loan sub-system
	type ResultSet rs = Db.select("CAD","LNPL2","CID=:CID")
	while rs.next() do {
		// last action date
		if rs.getCol("CAD")>DLCO set DLCO=rs.getCol("CAD")
		}

	if 'DLCO.isNull() set CBST=97,CBDOO=DLCO quit // charge off

	set CBST=vc33 - vc34
	set CBST=12*CBST/vc25

	set CBST=$S(CBST<1:11,CBST<2:71,CBST<3:78,CBST<4:80,CBST<5:82,CBST<6:83,1:84)
	/*
		Categories:
                      11 = Current
                      13 = Closed account
                      71 = 30 days past due
                      78 = 60 days past due
                      80 = 90 days past due
                      82 = 120 days past due
                      83 = 150 days past due
                      84 = 180 days past due
	*/

	if CBST=11 set CBDOO=%SystemDate    // current, use system date
	else  set CBDOO=vc35  // delinquent, use next due date

	quit

VP2	// Column post-processor - [SYSDEV,LN]CID

	type public String vc27,vc25,vc2,vc36,vc37,vc6,vc38,vc4,vc8,vc14,vc16
	// Set report's detail record fields here

	type public String D15, D29, LNCRBT(,), CBST, SEG(,)
	type public Date BJD, EJD
	type public Number ACN, CID, D14, TBAL, TPST, TTYPE

	type Number I

	set D15=(vc27 * vc25)/12
	set D29=vc2
	set D29=$S(D29="RC":"R",D29="MTG":"M","LN":"I",1:"O")
	
	if D29="O",(vc36=1),(vc37'="") set D29="R"

	// Base segment, new account created during from/to time period

	if (vc6 > (BJD-1)) , (vc6 < (EJD+1)) set TTYPE=1
	else  set SEG=0,TTYPE=$$TTYPE(vc38,vc4,SEG)

	set TBAL=TBAL+vc8  // totals
	set TPST=TPST+D14

	if 'LNCRBT(CBST).exists() set (LNCRBT(CBST,1),LNCRBT(CBST,4),LNCRBT(CBST,7))=0
	
	set LNCRBT(CBST,TTYPE)=LNCRBT(CBST,TTYPE)+1

	// Select accounts for A1,A2,A3 segments, load SEGAR array

	type public String SEGAR(,)

	for I=1:1:3 set SEGAR(I,"ECOA")="",SEGAR(I,"NAME")="",SEGAR(I,"SECSSN")="",SEGAR(I,"TTYPE")=""
	
	for I=2,3 set SEGAR(I,"MAD1")="",SEGAR(I,"MCITY")="",SEGAR(I,"MSTATE")="",SEGAR(I,"MZIP")="",SEGAR(I,"MCNTRY")=""

	do SPOUSE

	do ROLE

	quit

SPOUSE  // Find spouse - A1 segment is only for a spouse at same address
	
	set (A1,SACN,SAD1,SP)=""

	type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
	while rs.next() do { quit:SACN=""

		quit:A1'=""

		set SACN=rs.getCol("ACN")

		// found spouse, same address?
		set SP=$$SPOUSE^UCO1(CID,SACN) if SP do {

			type RecordCIF cif=Db.getRecord("CIF","ACN=:SACN")
			set SCITY=cif.pcity
			set SAD1=cif.pad1

			if SAD1=vc14,SCITY=vc16 set A1=SACN // have A1
			}
		}
	
	quit
	
		
ROLE    // Build ROLE array ROLE(2 or 3, ACN) secondary or tertiary
	// account owner
		
	type String ROLE(,)

	set (RACN,R)=""

	type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
	while rs.next() do { quit:(RACN="")

		if RACN=A1 quit		// don't use A1

		set RACN=rs.getCol("ACN")

		set R=$$ROLE^UCO1(CID,RACN)                     // |2d|1
		set R=R.piece("|",2),R=R.extract(),R=+R         // 2d, 2
		if R'=1 set ROLE(R,RACN)=""             // don't include primary
		}

	// Get accounts for A2 and A3
	set (A2,A3,A2Y,A3Y,R,RACN)="" for  set R=ROLE(R).order() quit:R=""!(A3)  do {
		for  set RACN=ROLE(R,RACN).order() Q:RACN=""!(A3)  do {
			if A2="" set A2=RACN,A2Y="Y" quit
			if A3="" set A3=RACN,A3Y="Y" quit
			}
		}

	// Fill in SEGAR data
	set MAD=""
	
	for SEG=1:1:3 do {
		set RACN=$S(SEG=1:A1,SEG=2:A2,1:A3)
		quit:RACN=""

		type ResultSet rs=Db.select("ECOACD","RELCIF","CID=:CID AND ACN=:RACN")	
		if rs.next() do {

			set SEGAR(SEG,"ECOA")=rs.getCol("ECOACD")

			type RecordCIF cif=Db.getRecord("CIF","ACN=:RACN")
			
			set SEGAR(SEG,"NAME")=cif.nam
			set SEGAR(SEG,"SECSSN")=$TR(cif.taxid,"-","")

			if TTYPE=1 set SEGAR(SEG,"TTYPE")=1
			// new account; this code is in report pre proc
			else  set TTYPE=$$TTYPE(RACN,CID,SEG),SEGAR(SEG,"TTYPE")=TTYPE
			
			// totals for SCA179
			set SEG(SEG,TTYPE)=SEG(SEG,TTYPE).get()+1

			quit:RACN=1        // only need addresses for A2 and A3
			
			set SEGAR(SEG,"MAD1")=cif.mad1
			set SEGAR(SEG,"MCITY")=cif.mcity
			set SEGAR(SEG,"MSTATE")=cif.mstate
			set SEGAR(SEG,"MZIP")=cif.mzip
			set SEGAR(SEG,"MCNTRY")=cif.mcntry
			}
		}

	quit	

VP3	// Column post-processor - [SYSDEV,LN]CBC

 if 'V set V=31
	quit

VP4	// Column post-processor - Variable: CBDOO

 if CBDOO.isNull() set V="000000"
	quit

VP5	// Column post-processor - [SYSDEV,LN]LPDT

	type public String vc7
 // If the field is null, zero fill
 if vc7.isNull() set V="000000"
	quit

VP6	// Column pre-processor - Variable: AMTFLD

	type public String vc2,vc39,vc40
 set AMTFLD=""
 if vc2="RC" set AMTFLD=vc39 quit
 set AMTFLD=vc40
	quit

VP7	// Column post-processor - [SYSDEV,CIF]MZIP

 set ZIP2=$P(V,"-",2)	; last 4 digits for columns 260-263
 set V=$P(V,"-",1)
	quit

VP8	// Column post-processor - [SYSDEV,LN]CRLMT

	type public String vc2
 // Post-processor for LN.CRLMT
 if vc2'="RC" set V="0000000"
	quit

VP9	// Column post-processor - [SYSDEV,LN]DIST1LD

 // This field should never display, included so that the data item is
 // defined for calculations in the User Defined sections ; PJE 8/24/99
 set V=" "
	quit

VP10	// Column post-processor - Variable: SEGAR(1

 if A1="" set V=""
	quit

VP11	// Column pre-processor - Variable: FIL1

 set FIL1=" "
	quit

VP12	// Column post-processor - Variable: SEGAR(2

 if A2="" set V=""  // blank if no A2 segment number
	quit

VP13	// Column post-processor - Variable: SEGAR(2

 if A2="" set V=""
	quit

VP14	// Column post-processor - Variable: SEGAR(3

 if A3="" set V=""  // blank if no A3 segment number
	quit

VP15	// Column post-processor - Variable: SEGAR(3

 if A3="" set V=""		// blank if no A3 segment number
	quit

VP16	// Column pre-processor - Variable: ADDRESS

 set ADDRESS=CUVAR.cad1_", "_CUVAR.ccity
 set ADDRESS=ADDRESS_", "_CUVAR.cstate_", "_CUVAR.czip
	quit

VP17	// Column pre-processor - Variable: EXPID

 set EXPID=""
	quit

VP18	// Column pre-processor - @CNT(0,N,9)

	type public Number CNT, V	

	set CNT=V,V=V*2
	quit
