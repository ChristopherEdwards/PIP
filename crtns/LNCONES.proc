public LNCONES(RecordLN ln)	//Escrow Balance/Accrual/Payment Conversion
	/*
	       ORIG:  Neal E. Gorman (5053) - 03/05/87

          ARGUMENTS:
                . ln    Loan Account Object     TYP=RecordLN/REQ/MECH=REF

	 ---- Revision History ------------------------------------------------
	
	   04/20/05 - KELLYP - CR 14452
		      Modified entire procedure to fix several logic errors and 
	   	      to conform to current PSL standards.  Also removed pre-2003 
	   	      revision history.
	*/

	type Public Boolean MANBIL

	type String CONVES()

	new CONVES,PCM
	set MANBIL=0

	// Payment Calculation Method
	if 'ln.pcmval.extract(1) set MANBIL=1

	do BIL(.ln)
	
	quit


BIL(RecordLN ln)	// Input new bill file (from data entry)
	/*

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF
	*/
	
	type Public Boolean MANBIL
	type Public Date CEFD
	type Public Number CID
	
	type Number I
	type String BIL0,COL
	
	type DbSet ds=Db.selectDbSet("LNCONBL1","CEFD=:CEFD AND CID=:CID","BSEQ ASC")
	
	while ds.next() do {

		type RecordLNCONBL1 lnconbl1=ds.getRecord()

		if lnconbl1.bseq=0 do {	// LNBIL0 update
			type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:CID",1)
			for I=1:1:20 do {
				if I<10 set COL="PE0"_I
				else  set COL="PE"_I
				set lnbil0.@COL=lnconbl1.@COL
				}
			do lnbil0.save()
			}
		else  do {		// LNBIL1 update
			type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:lnconbl1.bseq",1)
			set lnbil1.bp1=lnconbl1.first
			for I=1:1:20 do {
				if I<10 set COL="PE0"_I
				else  set COL="PE"_I
				set lnbil1.@COL=lnconbl1.@COL
				}
			do lnbil1.save()
			}
		}

	// Billing - Last Sequence Number
	set ln.bseq=+Db.currVal("LNBIL1","CID")
	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:CID")
	set BIL0=$$BIL0ELE^BILFUNCS(.lnbil0)
	
	do ESC(.ln)
	quit


ESC(RecordLN ln)	// Escrow conversion data entry
	/*

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF
	*/

	type Public Date CEFD
	type Public Number CID
	type Public String CONVES()
	
	type Number DCID
	type String ET,TRTYP

	type DbSet ds=Db.selectDbSet("LNCONVEST","CEFD=:CEFD AND CID=:CID")

	while ds.next() do {

		catch vError {
			type Boolean %ZTHALT
			type String RM
			set ET=vError.type
			set %ZTHALT=0
			do ZE^UTLERR

			set ET=ET_"-"_vError.thrownAt
			// System processing error
			set RM=$$^MSG(2575)
			do LOGERR
			}

		type RecordLNCONVEST lnconvest=ds.getRecord()

		set DCID=lnconvest.ecid
		
		//Account Locked - Not Converted
		lock +ACN(DCID):2 else  set ET=$$^MSG(3944) do LOGERR quit

		type RecordDEP dep=Db.getRecord("DEP","CID=:DCID")

		// Local array to track processed escrow accounts
		set CONVES(DCID)=""
		
		set dep.curramt=lnconvest.curramt
		set dep.recamt=lnconvest.remamt

		type DbSet ds2=Db.selectDbSet("LNCONVES","CEFD=:CEFD AND CID=:CID AND ECID=:DCID")

	        while ds2.next() do {

			type RecordLNCONVES lnconves=ds2.getRecord()

			set TRTYP=lnconves.typ	// 4th key

			type RecordTRTYPE trtype=Db.getRecord("TRTYPE","CID=:DCID,TYP=:lnconves.typ",1)

			do ACTUPD(.ln,.dep,.trtype,.lnconves)
			}

		// History Cutoff
		set dep.hisctf=CEFD
		
		// Accrual processed date
		set dep.acs=%SystemDate-1
		
		do dep.save()

		// Set up 0 history level to justify the conversion "transaction"
		type RecordHIST0 hist0=Class.new("RecordHIST0")
		
		set hist0.cid=DCID
		set hist0.jd=CEFD+1
		set hist0.bal=dep.bal
		set hist0.seqzero=""
		do hist0.bypassSave()
		
		// Unlock account
		lock -ACN(DCID)
		}

	do END(.ln)
	quit


ACTUPD(RecordLN ln,RecordDEP dep,RecordTRTYPE trtype,RecordLNCONVES lnconves)
	/*

	ARGUMENTS:
	    . ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF

	    . dep	Deposit Account Object	TYP=RecordDEP/REQ/MECH=REF

	    . trtype	Escrow Transfer Type	TYP=RecordTRTYPE/REQ/MECH=REF

	    . lnconves	Escrow Summary		TYP=RecordLNCONVES/REQ/MECH=REF
	*/

	// Remittance - Next Date
	set trtype.remnd=lnconves.remnd
	
	// Escrow Funds Remitted Prior Tax Year
	set trtype.rempy=lnconves.rempy
	
	//  Escrow Funds Remitted Tax YTD
	set trtype.remytd=lnconves.remytd
	
	do trtype.bypassSave()

	// Current balance
	set dep.bal=dep.bal+lnconves.bal
	
	// Balance Collected
	set dep.balcol=dep.balcol+lnconves.bal
	
	// Current accrual
	set dep.posacr=dep.posacr+lnconves.acr
	
	// Total Escrow Balance
	set ln.teb=ln.teb+lnconves.bal
	
	quit


END(RecordLN ln)
	/*
	  This section will process elements in LNBIL0 file for this CID
	  to check if escrow accounts contained there have been converted.

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF
	*/
	
	type Public Boolean ER
	type Public String BIL0,CONVES(),ET
	
	type Number ECID,ELMPC,I,PMTESC
	type String ACRONYM
		
	// Initialize Payment Escrow Amount
	set PMTESC=0
	for I=1:1:BIL0.length($C(9)) do { quit:ER  if ELMPC.isNull() set ln.pmttrs=PMTESC quit

		set ELMPC=BIL0.piece("|",I) quit:ELMPC.isNull()
		
		// Element Acronym - Sub-field #1
		set ACRONYM=ELMPC.piece("#",1)
		if ACRONYM.isNull() quit
		
		// Deposit account - Sub-field #2
		set ECID=ELMPC.piece("#",2)

		// Payment Amount Next Bill
		if 'ELMPC.piece("#",3) quit
		
		type RecordDEP dep=Db.getRecord("DEP","CID=:ECID")
		
		set PMTESC=PMTESC+dep.curramt
		
		// Account converted 
		if CONVES(ECID).exists() quit
		
		// Escrow Account ~p1  Not Converted
		set ET=$$^MSG(3966,ECID) do LOGERR
		}
	quit


LOGERR	// Log error in exception file

	type Public Number CID,%ZTSEQ
	type Public String ET

	// Manual Loan Conversion
	do LOG^UTLEXC($T(+0),"*",$$^MSG(3946),CID.get(),%ZTSEQ.get(),ET.get(),"")
	kill ET,%ZTSEQ
	quit

vSIG()	quit "60010^61778^Pat Kelly^5240"	// Signature - LTD^TIME^USER^SIZE
