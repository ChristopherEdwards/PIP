IRAFIX	 /* 
    ORIG: GRAY - 01/18/2000
    DESC: Fix IRA History
    
    ---- Comments --------------------------------------------------------
    
    ---- Revision History ------------------------------------------------

        04/07/06 - DHANALAKSHMI R - 20628
	           Modified to correct the errors while IRA correction.
	           Moved the definition of hist from PPG00 to MRPC034 and
	           removed the check for DIR.
	           Removed the keywork 'IRACON' & 'IRADIS' from 
	           Db.isDefined of the sections PPG00 and PPG01.
	           Modified the call to Extrinsic functions UPDIRA*^IRA 
	            & moved ira.bypassSave() method to end of FILE section.
	           Removed the second call to UPDIRA*^IRA from COMP.

        12/02/05 - DHANALAKSHMI R - 16851
	           Modified the sections FILE and NEW by replacing the 
	           method .data() with .order(). 

        11/16/05 - DHANALAKSHMI R - 16851
	           Modified the sections BEN,OLD and NEW. Refer 
	           "51390_CR1869DS Multiple Distribution Codes for IRS 
	           Form 1099-R.doc" for details.

        09/09/05 - DHANALAKSHMI R - 16851
	           Implemented "Supporting Military Combat Zone Codes for 
	           Military Contributions" project. Refer "CR11986DS 
	           Supporting Military Combat Zone Codes for Military 
	           Contributions.doc" for more Details.

	12/08/03 - CARROLLJ - CR7239
		   Correct parameter mismatch errors.   

	10/1/03 - CARROLLJ - 51630
		  Remove to and from array's.

*/
	
	quit
	
	
Public MRPC034(CID,TSEQ,RCODE,BEN,MCZC,MCZYR)     //

	// CID - Account Number             /TYP=N/REQ/MECH=VAL
	// TSEQ - History Sequence          /TYP=N/REQ/MECH=VAL
	// RCODE - Contr/Dist Reason Code   /TYP=N/REQ/MECH=VAL
	// BEN - Beneficiary                /TYP=N/NOREQ/MECH=VAL
	// MCZC - Military Combat Zone Code /TYP=T/NOREQ/MECH=REFARR:R
	// MCZYR – Military Year of Service /TYP=T/NOREQ/MECH=REFARR:R

	type public Number ER
	type public String benfil,H,iratso,IRATSO,NEWTSO,ORIGUTSO,PAR,TSO,X

	type public RecordHIST hist
	type String DIR

	// Get history record and verify old value
	set X=TSEQ

	// Invalid history sequence
	set H=$$RETREC^UHFETCH(CID,X,.DIR) if H="" do Runtime.setErrMSG("HIST",3532) quit

	set hist=Db.getRecord("HIST","CID,X")

	do PPG00(.hist) quit:ER

	set iratso=""
	if $G(IRATSO)'=$G(RCODE) set iratso=IRATSO_"|"_RCODE
	set IRATSO=RCODE

	// Validate new reason code
	do PPG01 quit:ER

	// Validate beneficary applies.
	Type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	if BEN do BEN1(.dep) quit:ER

	set benfil=""

	if BEN'="" do {
		new UTSO
		set X=$G(BEN) do BEN quit:ER  if BEN'=$G(UTSO("BEN")) set benfil=(+$G(UTSO("BEN")))_"|"_BEN
		}

	// Update IRA and HIST
	do FILE(.dep,.hist)

	quit

PPG00(RecordHIST hist)	// Post-processor

	type public String CID,ETC,H,IRATSO,ITC,K,ORIGUTSO,OV,X
	type public Date EFD
	type public Number ER,FWH,INT,NEGINT,OLD,PEN,SWH,TAMT,TAXYR,WAMT
	type String D,PAR,PCF,UTBL(),Z
	quit:X=""

	set EFD=hist.efd,ITC=$E(hist.itc)
	set TAXYR=$$YEAR^SCADAT($S(EFD'="":EFD,1:hist.tjd),1)  // TANY
	set TAMT=hist.tamt,OV=hist.tso
	set ETC=hist.etc

	// Non-monetary transaction
	if TAMT=""!(ITC="") do Runtime.setErrMSG("HIST",2013) quit

	if TAMT["#" do {
		set INT=$P(TAMT,"#",3)
		set PEN=$P(TAMT,"#",4)
		set WAMT=$P(TAMT,"#",5)+$P(TAMT,"#",15)	// 46454 - AS
		set TAMT=$P(TAMT,"#",1)
		set NEGINT=$P(TAMT,"#",6)
		set FWH=$P(TAMT,"#",5)			// 46454 - AS
		set SWH=$P(TAMT,"#",15)			// 46454 - AS
		}
	else  set INT=0,PEN=0,WAMT=0,NEGINT=0,FWH=0,SWH=0	// DFM 6/22/00

	set ORIGUTSO=""
	do OUT^UTSO(.ORIGUTSO,OV)

	// Contribution Code 
	type RecordTRN trn1=Db.getRecord("TRN","ETC=:ETC")
	set PCF=trn1.pcf

	if ITC,'$E(PCF,4) do { quit:$G(ER)
		set K="IRACON",D=$$^MSG(3680),OV=$G(ORIGUTSO("IRAC"))
		set PAR=D,$P(PAR,"~",2)=OV
		set Z=OV I $E(Z)="-" S Z=$E(Z,2,99)

		// Invalid entry - no ~p1
		if Z="" do Runtime.setErrMSG("HIST",5791,D) quit

		// Invalid ~p1~p2
		if 'Db.isDefined("UTBLIRACON","KEY=:Z") do Runtime.setErrMSG("HIST",1515,PAR) quit


		type RecordUTBLIRACON utblirac=Db.getRecord("UTBLIRACON","KEY=:Z")

		set OLD=utblirac.rsn

		// Invalid linkage for ~p1~p2
		if 'OLD set OLD=utblirac.age

		if 'OLD do Runtime.setErrMSG("HIST",1391,PAR) quit
		}

	// Distribution Code 
	else  do {  quit:ER
		set K="IRADIS",D=$$^MSG(3681),OV=$G(ORIGUTSO("IRAD"))
		set PAR=D,$P(PAR,"~",2)=OV
		set Z=OV I $E(Z)="-" S Z=$E(Z,2,99)
		
		// Invalid entry - no ~p1
		if Z="" do Runtime.setErrMSG("HIST",5791,D) quit

		// Invalid ~p1~p2
		if 'Db.isDefined("UTBLIRADIS","KEY=:Z") do Runtime.setErrMSG("HIST",1515,PAR) quit

		type RecordUTBLIRADIS utblirad=Db.getRecord("UTBLIRADIS","KEY=:Z")
		set OLD=utblirad.rsn

		// Invalid linkage for ~p1~p2
		if 'OLD set OLD=utblirad.age

		if 'OLD do Runtime.setErrMSG("HIST",1391,PAR) quit
		}

	if $E(OV)'="-" set UTBL(0)="Reversal"
	set IRATSO=OV

	quit


PPG01	// Screen 1 post-processor

	type public String IRATSO,K,PAR,TSO,UTSO,ZTSO
	type public Number NEW,NUM,ER
	
	kill TSO				// Remove OLD TSO
	set TSO=IRATSO if 'TSO set NEW=0 quit	// Reversal

	// Invalid code

	if K="IRACON" do { quit:$G(ER)
		if 'Db.isDefined("UTBLIRACON","KEY=:TSO") do Runtime.setErrMSG("HIST",1284) quit
		type RecordUTBLIRACON utblirac=Db.getRecord("UTBLIRACON","KEY=:TSO")
		set NEW=utblirac.rsn

		// Invalid linkage for ~p1~p2
		if 'NEW set NEW=utblirac.age

		if 'NEW do Runtime.setErrMSG("HIST",1391) quit
		}

	else  do { quit:ER

		if 'Db.isDefined("UTBLIRADIS","KEY=:TSO") do Runtime.setErrMSG("HIST",1284) quit
		type RecordUTBLIRADIS utblirad=Db.getRecord("UTBLIRADIS","KEY=:TSO")

		set NEW=utblirad.rsn

		// Invalid linkage for ~p1~p2
		if 'NEW set NEW=utblirad.age

		if 'NEW do Runtime.setErrMSG("HIST",1391,PAR) quit
		}

	quit


BEN	//
	
	type public String IRATSO,OV,TSO,UTSO,X,ZTSO
	type public Number TAXYR,ER
	type Number Y
	
	set ZTSO=IRATSO
	set UTSO="" do OUT^UTSO(.UTSO,ZTSO)
	set Y=+$G(UTSO("IRAD"))
	
	type RecordUTBLIRADIS utblirad=Db.getRecord("UTBLIRADIS","KEY=:Y")
	set Y=utblirad.rsn
	

	// Beneficiary required for death benefits
	if (Y=6)!(Y=26)!(Y=27)!(Y=59)!(Y=60)!(Y=68)!(Y=75)!(Y=85)!(Y=87),X="" do Runtime.setErrMSG("HIST",349) quit
	
	// Beneficiary applies to death benefits only
	if X'="",Y'=6,Y'=26,Y'=27,Y'=59,Y'=60,Y'=68,Y'=75,Y'=85,Y'=87 do Runtime.setErrMSG("HIST",348) quit

	quit


BEN1(RecordDEP dep)	//
	
	type ResultSet rs=Db.select("BENSEQ","IRABEN","ACN=:dep.acn AND RPASEQ=:dep.rpaseq")
	
	if rs.isEmpty() do Runtime.setErrMSG("HIST",2187) quit

	quit


FILE(RecordDEP dep,RecordHIST hist)	// File data
	
	type public Number ACN,ER,INT,K,MCZYR,NEGINT,NEW,NEWUTSO(),OLD,ORIGUTSO(),RPASEQ,TAMT,TAXYR
	type public String ITC,MCZC,NEWTSO,OV,TSO,WAMT
	type public Date JD

	set ACN=dep.acn
	set RPASEQ=dep.rpaseq

	type RecordIRA ira=Db.getRecord("IRA","ACN,RPASEQ,TAXYR")

	type RecordTTX ttx
	set ttx=Class.new("RecordTTX")

	// force loading of individual nodes
	type Number x,y,z
	set x=ira.d1
	set y=ira.c1
	set z=ira.w1

	// UPDIRA0 Distribution totals
	// UPDIRA1 Contribution totals
	// UPDIRA2 Withholding

	if $E(OV)'="-" do COMP(.dep,.ira,.ttx) quit:ER

	/* 
	the variables OLD and NEW indicate which pieces of the file are
	updated with distribution/contribution amounts (user-defined)
	*/

	if TSO do {

		type Number TOTAMT

		if (TAMT=INT)!(TAMT=NEGINT) quit
		if ITC,(TAMT'=WAMT) set TOTAMT=$$UPDIRA1^IRA(.ttx,.ira,NEW,TAMT) quit
		if TAMT'=WAMT set TOTAMT=$$UPDIRA0^IRA(.dep,.ttx,.ira,NEW,TAMT+WAMT)

		set TOTAMT=$$UPDIRA2^IRA(.ttx,.ira,NEW,WAMT)
		}
	
	set TSO=$S(TSO:TSO,1:-OV),NEWUTSO($E(K,1,4))=TSO
	
	type String temp
	set temp=""
	for temp=ORIGUTSO(temp).order()  quit:temp=""  do {
		if '(NEWUTSO(temp).exists()) set NEWUTSO(temp)=ORIGUTSO(temp)
		}

	set JD=hist.tjd

	if (NEWUTSO("IRAC").exists())  do {
		if (MCZC.exists()),('MCZC.isNull()) set NEWUTSO("MCZC")=MCZC
		if (MCZYR.exists()),('MCZYR.isNull()) set NEWUTSO("MCZYR")=MCZYR
		if ((NEW=17)!(OLD=17)) do MILCHK^IRA(.NEWUTSO) quit:ER
		
		if (OLD=17) do UPDMCZC(ACN,RPASEQ,TAXYR,ORIGUTSO("MCZC"),ORIGUTSO("MCZYR"),TAMT,1) quit:ER
		if (NEW=17) do UPDMCZC(ACN,RPASEQ,TAXYR,NEWUTSO("MCZC"),NEWUTSO("MCZYR"),TAMT,0) quit:ER
		}

	if ER quit

	do IN^UTSO(.NEWUTSO,.NEWTSO)
	do OLD(.hist)
	set hist.tso=NEWTSO

	do hist.bypassSave()
	do ira.bypassSave()
	quit


OLD(RecordHIST hist)	// Reverse beneficiary data

	type public Date JD
	type public Number ACN,BEN,BKT,CYR,FWH,NB,NEW,OB,OLD,OV,RPASEQ,SWH,TAMT
	type public String NEWTSO,NEWUTSO,UTSO(),X16

	if $E(hist.itc) do HIST(.hist) quit
	if (OLD'=6!(OLD'=59)!(OLD'=60)!(OLD'=68)!(OLD'=75)!(OLD'=85)!(OLD'=87)),(NEW'=6!(NEW'=59)!(NEW'=60)!(NEW'=68)!(NEW'=75)!(NEW'=85)!(NEW'=87)) do HIST(.hist) quit

	set OB=$G(UTSO("BEN")) kill UTSO
	set NB=$G(BEN)
	if OB=NB do HIST(.hist) quit

	if 'NB.isNull() do {
		set NEWUTSO("BEN")=NB do IN^UTSO(.NEWUTSO,.NEWTSO)
		set hist.tso=NEWTSO
		}

	set hist.ben=NB
	set X16=hist.xhs16,$P(X16,"#",6)=NB,hist.xhs16=X16

	set CYR=$$YEAR^SCADAT(JD,1)		// TANY
	if (OLD'=6),(OLD'=59),(OLD'=60),(OLD'=68),(OLD'=75),(OLD'=85),(OLD'=87)!($E(OV)="-") do NEW(.hist)

	type RecordIRABEN1 iraben1
	if 'Db.isDefined("IRABEN1","ACN,RPASEQ,OB,CYR") do {
		set iraben1=Class.new("RecordIRABEN1")
		set iraben1.acn=ACN
		set iraben1.rpaseq=RPASEQ
		set iraben1.benseq=OB
		set iraben1.cyr=CYR
		}

	else  set iraben1=Db.getRecord("IRABEN1","ACN,RPASEQ,OB,CYR")

 	if BKT=6 do {
		set iraben1.tamt=iraben1.tamt-TAMT
		set iraben1.wth=iraben1.wth-FWH
		set iraben1.totstwh=iraben1.totstwh-SWH
		}

	if BKT=59 do {
		set iraben1.tamt59=iraben1.tamt59-TAMT
		set iraben1.wth59=iraben1.wth59-FWH
		set iraben1.totswh59=iraben1.totswh59-SWH
		}

	if BKT=60 do {
		set iraben1.tamt60=iraben1.tamt60-TAMT
		set iraben1.wth60=iraben1.wth60-FWH
		set iraben1.totswh60=iraben1.totswh60-SWH
		}

	if BKT=68 do {
		set iraben1.tamt68=iraben1.tamt68-TAMT
		set iraben1.wth68=iraben1.wth68-FWH
		set iraben1.totswh68=iraben1.totswh68-SWH
		}

	if BKT=75 do {
		set iraben1.tamt75=iraben1.tamt75-TAMT
		set iraben1.wth75=iraben1.wth75-FWH
		set iraben1.totswh75=iraben1.totswh75-SWH
		}

	if BKT=85 do {
		set iraben1.tamt85=iraben1.tamt85-TAMT
		set iraben1.wth85=iraben1.wth85-FWH
		set iraben1.totswh85=iraben1.totswh85-SWH
		}

	if BKT=87 do {
		set iraben1.tamt87=iraben1.tamt87-TAMT
		set iraben1.wth87=iraben1.wth87-FWH
		set iraben1.totswh87=iraben1.totswh87-SWH
		}

	do iraben1.bypassSave()

	do NEW(.hist)
	quit


NEW(RecordHIST hist)	//
	
	type public Number ACN,BKT,CYR,FWH,NB,NEW,RPASEQ,SWH,TAMT
	type public String TSO

	type RecordIRABEN1 iraben1
	
	if TSO.exists(),NEW=6 do {
		if 'Db.isDefined("IRABEN1","ACN,RPASEQ,NB,CYR") do {
			set iraben1=Class.new("RecordIRABEN1")
			set iraben1.acn=ACN
			set iraben1.rpaseq=RPASEQ
			set iraben1.benseq=NB
			set iraben1.cyr=CYR
			}
		
		else  set iraben1=Db.getRecord("IRABEN1","ACN,RPASEQ,NB,CYR")
		}

 	if BKT=6 do {
		set iraben1.tamt=iraben1.tamt+TAMT
		set iraben1.wth=iraben1.wth+FWH
		set iraben1.totstwh=iraben1.totstwh+SWH
		}

	if BKT=59 do {
		set iraben1.tamt59=iraben1.tamt59+TAMT
		set iraben1.wth59=iraben1.wth59+FWH
		set iraben1.totswh59=iraben1.totswh59+SWH
		}

	if BKT=60 do {
		set iraben1.tamt60=iraben1.tamt60+TAMT
		set iraben1.wth60=iraben1.wth60+FWH
		set iraben1.totswh60=iraben1.totswh60+SWH
		}

	if BKT=68 do {
		set iraben1.tamt68=iraben1.tamt68+TAMT
		set iraben1.wth68=iraben1.wth68+FWH
		set iraben1.totswh68=iraben1.totswh68+SWH
		}

	if BKT=75 do {
		set iraben1.tamt75=iraben1.tamt75+TAMT
		set iraben1.wth75=iraben1.wth75+FWH
		set iraben1.totswh75=iraben1.totswh75+SWH
		}

	if BKT=85 do {
		set iraben1.tamt85=iraben1.tamt85+TAMT
		set iraben1.wth85=iraben1.wth85+FWH
		set iraben1.totswh85=iraben1.totswh85+SWH
		}

	if BKT=87 do {
		set iraben1.tamt87=iraben1.tamt87+TAMT
		set iraben1.wth87=iraben1.wth87+FWH
		set iraben1.totswh87=iraben1.totswh87+SWH
		}

	do iraben1.bypassSave()
	
	do HIST(.hist)
	quit


HIST(RecordHIST hist)	// File history

	type public String benfil,K,iratso

	// Move IRATSO info to [HIST]
       	new TSO1,TCLT
	
	do HIST1($G(iratso),"TSO")
	do HIST1(benfil,"BEN")
        
	if K="IRACON" do IRACON
        quit


IRACON  //
	
	// I18N=OFF
	type public String IRATSO,OV
	type public Number ACN,CID,NEW,RPASEQ,TAMT,TSEQ
	type public Date EFD,JD
	
	type Number EXCLUDEI,NEWN,OLDN,TAMTI
	type Date EFDI
	
	set NEWN=$$UTBLVAL(IRATSO)
	set OLDN=$$UTBLVAL(OV)
        if NEWN=OLDN quit

	
	type RecordRSPDNOT rspdnot=Db.getRecord("RSPDNOT","ACN,RPASEQ,CID,TSEQ",1)
	
	do rspdnot.setAuditFlag(1)

        if NEWN=1 do { quit				// Notice
                if EFD="" set EFD=JD,EXCLUDEI=""
		else   do {
			set EFDI=rspdnot.efd
			if 'rspdnot.efd set EFDI=EFD 
			set rspdnot.efd=EFDI

			set TAMTI=rspdnot.tamt
			if 'rspdnot.tamt set TAMTI=TAMT 
			set rspdnot.tamt=TAMTI

			set EXCLUDEI=rspdnot.exclude
			if rspdnot.exclude=3 set EXCLUDEI=""
			set rspdnot.exclude=EXCLUDEI

			do rspdnot.save()
			}
		}
	
	if NEW'=1  do {  quit	   			// Not notice
		if rspdnot.ndate="" do Db.delete("RSPDNOT","ACN=:ACN AND RPASEQ=:RPASEQ AND CID=:CID AND TSEQ=:TSEQ") quit
		if rspdnot.exclude="" do {
			set rspdnot.exclude=3
			do rspdnot.save()
			}
		}
	
	// I18N=ON
        quit


HIST1(TSO1,TSO)	//
	
	type public String TCMT
	type public Number TSEQ
	type public Date EFD
	
	if TSO1="" quit
	set TCMT=$$TCMTFM^ACNFUNCS("","HIST",TSO,$P(TSO1,"|",1),$P(TSO1,"|",2),$G(EFD),$$^MSG(3682,TSEQ))
	do HISTBLD^ACNFUNCS(TCMT)
	quit


COMP(RecordDEP dep,RecordIRA ira,RecordTTX ttx)	// Adjust buckets, including complex transactions

	type public Number ER,INT,NEGINT,OLD,PEN,TAMT,WAMT
	type public String ITC,TSO

	if TSO,((TAMT=INT)!(TAMT=NEGINT)) quit
	
	if ITC,(TAMT'=WAMT) do {

		// Adjustment exceeds contribution
		if $$UPDIRA1^IRA(.ttx,.ira,OLD,-TAMT)<0 do Runtime.setErrMSG("DEP",7011) quit
		}
	else  do {
		if TAMT'=WAMT do {

			// Adjustment exceeds distribution
			if $$UPDIRA0^IRA(.dep,.ttx,.ira,OLD,-TAMT)<0 do Runtime.setErrMSG("DEP",7012) quit
			}

		// Adjustment exceeds withholding
		if $$UPDIRA2^IRA(.ttx,.ira,OLD,-WAMT) do Runtime.setErrMSG("DEP",233) quit
		}
 
	if ER!TSO quit
	
	set ira.c8=ira.c8-INT				// Reduce interest for reversals
	set ira.d12=ira.d12-PEN				// Reduce  penalty for reversals
	quit


UTBLVAL(KEY)
	
	type String VAL
	if 'Db.isDefined("UTBLIRACON","KEY=:KEY") do {
		type RecordUTBLIRADIS iradis=Db.getRecord("UTBLIRADIS","KEY=:KEY")
		set VAL=iradis.wh
		}
	else  do {
		type RecordUTBLIRACON iracon=Class.new("RecordUTBLIRACON")
		set VAL=iracon.depnot
		}
	quit VAL


Public UPDMCZC(ACN,RPASEQ,TAXYR,MCZC,MCZYR,AMT,REVFLAG)	// Update table RPAMCZC

	/*
	ACN - Customer Number                   /TYP=N/REQ/MECH=REFARR:R

	RPASEQ - Retirement Plan Account Sequence Number 
						/TYP=N/REQ/MECH=REFARR:R

	TAXYR – Tax Year        		/TYP=N/REQ/MECH=REFARR:R

	MCZC - Military Combat Zone Code    	/TYP=T/REQ/MECH=REFARR:R

	MCZYR - Military Year of Service       	/TYP=N/REQ/MECH=REFARR:R

	AMT - Contribution Amount               /TYP=$/REQ/MECH=REFARR:R

	REVFLAG - Reverse Data Flag		/TYP=N/REQ/MECH=REFARR:R
	This flag indicates whether an amount for an existing military 
	combat zone contribution is being reversed.  A value of 1 
	indicates the amount will be subtracted from the existing entry.
	A value of 0 indicates that the amount will be added to an 
	existing entry, or a new record entry will be inserted.
	*/
	
	type public Number ER
	type RecordRPAMCZC rpamczc			
	
	if 'Db.isDefined("RPAMCZC","ACN,RPASEQ,TAXYR,MCZC,MCZYR") do {
		
		// Record not found
		if REVFLAG=1 do Runtime.setErrMSG("RPAMCZC",2335) quit
		set rpamczc=Class.new("RecordRPAMCZC")
		set rpamczc.acn=ACN
		set rpamczc.rpaseq=RPASEQ
		set rpamczc.taxyr=TAXYR
		set rpamczc.mczc=MCZC
		set rpamczc.mczyr=MCZYR
		set rpamczc.mczcamt=AMT
		}
	else  do {
		set rpamczc=Db.getRecord("RPAMCZC","ACN,RPASEQ,TAXYR,MCZC,MCZYR")
		if REVFLAG=1 set AMT=-AMT
		set rpamczc.mczcamt=rpamczc.mczcamt+AMT
		}
	if 'ER do rpamczc.save()
	quit

vSIG()	quit "60362^14101^Dhanalakshmi R^15366"	// Signature - LTD^TIME^USER^SIZE
