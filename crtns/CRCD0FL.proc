CRCD0FL(RecordCRCD0 crcd0, String vpar, Boolean vparNorm) // CRCD0 - Related Currency Codes Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (5)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crcd0.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(crcd0,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crcd0,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CO = crcd0.co
	type String CRCD = crcd0.crcd
	type String RELCRCD = crcd0.relcrcd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CO").exists()!vx("CRCD").exists()!vx("RELCRCD").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRCD0",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRCD0","CO = :crcd0.co and CRCD = :crcd0.crcd and RELCRCD = :crcd0.relcrcd") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CO
	type public String CRCD
	type public String RELCRCD

	type RecordCRCD0 crcd0 = Db.getRecord("CRCD0","CO=:CO,CRCD=:CRCD,RELCRCD=:RELCRCD")
	if (%ProcessMode = 2) do {
		do crcd0.setMode(2)

		do CRCD0FL(crcd0,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRCD0 crcd0

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRCD0","CO = :crcd0.co and CRCD = :crcd0.crcd and RELCRCD = :crcd0.relcrcd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(crcd0,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(crcd0,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crcd0))  S ^CRCD(vobj(crcd0,-3),vobj(crcd0,-4),0,vobj(crcd0,-5))=vobj(crcd0)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRCD0 crcd0

	if vpar'["/NOLOG/" do ^DBSLOGIT(crcd0,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CRCD(vobj(crcd0,-3),vobj(crcd0,-4),0,vobj(crcd0,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordCRCD0 crcd0

	// Type local variables for access keys for defaults
	type public String CO
	type public String CRCD
	type public String RELCRCD

	if crcd0.relbase.isNull() set crcd0.relbase = 0        // relbase
	quit


vreqn // Validate required data items

	type public RecordCRCD0 crcd0

	if crcd0.dircrcd.isNull() do vreqerr("DIRCRCD") quit
	if crcd0.relbase.isNull() do vreqerr("RELBASE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRCD0 crcd0

	if crcd0.co.isNull() do vreqerr("CO") quit
	if crcd0.crcd.isNull() do vreqerr("CRCD") quit
	if crcd0.relcrcd.isNull() do vreqerr("RELCRCD") quit

		if vx("DIRCRCD").exists(),crcd0.dircrcd.isNull() do vreqerr("DIRCRCD") quit
		if vx("RELBASE").exists(),crcd0.relbase.isNull() do vreqerr("RELBASE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRCD0","MSG",1767,"CRCD0."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("DIRCRCD").exists()!vx("RELBASE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCRCD0 crcd0
	if vx("").order().isNull() do AUDIT^UCUTILN(crcd0,.vx(),1,"|") quit
	if vx("DIRCRCD").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(crcd0,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - After Delete of CRCD0

	type public RecordCRCD0 crcd0
	new XCO,XCRCD,XRELCRCD,XDIRCRCD
	set XCO=crcd0.co 
	set XCRCD=crcd0.relcrcd 
	set XRELCRCD=crcd0.crcd
	do Db.delete("CRCD0","CO=:XCO AND CRCD=:XCRCD AND RELCRCD=:XRELCRCD","/NOTRIGBEF/NOTRIGAFT")
	quit 

vai1 // Trigger AFTER_INSERT - After Insert of CRCD0

	type public RecordCRCD0 crcd0
	/*
	---- Revision History ------------------------------------------------

	11/25/02 - APPLEYARDM - 50904
		   Modified call to update database by adding parameters
		   NOTRIGBEF and NOTRIGAFT. This prevents error in creating
		   or deleting a CRCD relationship.

	09/09/99 - CARROLLJ - 33890
		   Convert to PSL.

	02/23/99 - NGUYENP - 30915
		   To correct undefined variable RELBASE


	12/30/98 - RANALLIC - 30916
		   Changed RELBASE to XRELBASE.
	
	12/15/98 - RANALLIC - 30916
		   When filing the relationship for the Secondary Currency
		   the RELBASE needs to be opposite from the Primary
		   Currency.
	
	*/

	new XCO,XCRCD,XRELCRCD,XDIRCRCD,XRELBASE
	set XCO=crcd0.co 
	set XCRCD=crcd0.relcrcd 
	set XRELCRCD=crcd0.crcd 
	set XDIRCRCD=crcd0.dircrcd 
	set XRELBASE='crcd0.relbase
	//MCA 11/15/02: added parameters
	do Db.insert("CRCD0","CO,CRCD,RELCRCD,DIRCRCD,RELBASE",":XCO,:XCRCD,:XRELCRCD,:XDIRCRCD,:XRELBASE","/NOTRIGBEF/NOTRIGAFT")
	quit
	

vau1 // Trigger AFTER_UPDATE - After Update of CRCD0

	type public RecordCRCD0 crcd0
	/*
	---- Revision History ------------------------------------------------
	
	12/15/98 - RANALLIC - 30916
		   When filing the relationship for the Secondary Currency
		   the RELBASE needs to be opposite from the Primary
		   Currency.  Changed RELBASE to XRELBASE.
	*/

	new XCO,XCRCD,XRELCRCD,XDIRCRCD,XRELBASE
	set XCO=crcd0.co 
	set XCRCD=crcd0.relcrcd 
	set XRELCRCD=crcd0.crcd 
	set XDIRCRCD=crcd0.dircrcd 
	set XRELBASE='crcd0.relbase
	do Db.update("CRCD0","RELBASE=:XRELBASE,DIRCRCD=:XDIRCRCD","CO=:XCO AND CRCD=:XCRCD AND RELCRCD=:XRELCRCD","/NOTRIGBEF/NOTRIGAFT") 
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert of CRCD0

	type public RecordCRCD0 crcd0
	type RecordCRCD crcd=Db.getRecord("CRCD","CO,CRCD")

	new SQLCNT,RRR,XCO,XCRCD,XRELCRCD
	set crcd.co=%CompanyName
	set XCO=crcd0.co 
	set RRR=0 
	set XCRCD=crcd0.crcd 
	set XRELCRCD=crcd0.relcrcd

	if 'Db.isDefined("CRCD","XCO,XCRCD") do Runtime.setErrMSG("CRCD0",1484,"CRCD0.CRCD") quit:ER
	
	// Enter currency code other than CRCD
	if crcd0.relcrcd=XCRCD do Runtime.setErrMSG("CRCD0",938,"CRCD0.CRCD") quit:ER 
	
	if 'Db.isDefined("CRCD","XCO,XRELCRCD") do Runtime.setErrMSG("CRCD0",1485,"CRCD0.RELCRCD") quit:ER

	// Enter a currency code other than  CRCD or RELCRCD
	if (crcd0.dircrcd=crcd0.crcd!(crcd0.dircrcd=XRELCRCD)) do Runtime.setErrMSG("CRCD0",913,"XCRCD~XRELCRCD") quit:ER 
	quit 

vbu1 // Trigger BU_DIRCRCD - Before Update DIRCRCD

	type public RecordCRCD0 crcd0
	do crcd0.setAuditFlag(1)
	// Enter a currency code other than  CRCD or RELCRCD
	if (crcd0.dircrcd=crcd0.crcd!(crcd0.dircrcd=crcd0.relcrcd)) do Runtime.setErrMSG("CRCD0",913,"CRCD~RELCRCD") quit
	quit 
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRCD0 crcd0

	if crcd0.co.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CO", vRM) quit
	if crcd0.crcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("CRCD", vRM) quit
	if crcd0.relcrcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("RELCRCD", vRM) quit
	if crcd0.dircrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("DIRCRCD", vRM) quit
	if '("01"[crcd0.RELBASE) set vRM=$$^MSG(742,"L") do vdderr("RELBASE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRCD0","MSG",979,"CRCD0."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCRCD0 crcd0

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CO").exists() set vux("CO") = vx("CO")
	if vx("CRCD").exists() set vux("CRCD") = vx("CRCD")
	if vx("RELCRCD").exists() set vux("RELCRCD") = vx("RELCRCD")
	do vkey(1) set voldkey = crcd0.co_","_crcd0.crcd_","_crcd0.relcrcd // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crcd0.co_","_crcd0.crcd_","_crcd0.relcrcd // Copy new keys into object
	type RecordCRCD0 vnewrec = crcd0.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRCD0",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRCD0 crcd0

	if vux("CO").exists() set crcd0.co = vux("CO").piece("|",i)
	if vux("CRCD").exists() set crcd0.crcd = vux("CRCD").piece("|",i)
	if vux("RELCRCD").exists() set crcd0.relcrcd = vux("RELCRCD").piece("|",i)
	quit
