public UTBLIOEN	
		 
	/*
	Maintain table UTBLIOENCODE and build runtime routine ^UCIOENCD
	for use as function by PSL to use the data in the table.
	
	Called at top by function UTBLIOENC0 for table maintenance, and
	at BUILD by function UTBLIOENC1 for building ^UCIOENCD.
	
	The reason that UCIOENCD encapsulates the knowledge of the data
	in the table is to keep PSL use of this information independent
	of Profile.  For possible future uses of PSL in non-Profile 
	environments, ^UCIOENCD can be generated from a .ini-type file.
		    
	RETURNS:
		. ER	Error indicator		/TYP=L
		. RM	Error message

	---- Revision History -------------------------------------------------
	07/16/06 - RussellDS - CR22121
		   Created.

	-----------------------------------------------------------------------
	*/
	
	type public String ER, RM
	
	type Boolean delete, stop
	type String %READ, %TAB(), %ZI(), %ZR(), ELEMTYPE, ELEMNAME, FORMAT
	type String INSTNAME, LABEL, N, VFMQ
	
	// Set up routine list for look-ups
	set %ZI("*") = ""
	do INT^%RSEL
	// Remove "descriptions" and ignore reports and screens
	set N = ""
	for  set N = %ZR(N).order() quit:N.isNull()  do {
		
		if (N.beginsWith("R01S") ! N.beginsWith("V01S")) kill %ZR(N)
		else  set %ZR(N) = ""
	}
	
	set stop = 0
	
	while 'stop do {
	
		set delete = 0
		
		// Reset ELEMNAME, LABEL, and INSTNAME, but leave ELEMTYPE
		set (ELEMNAME, FORMAT, INSTNAME, LABEL) = ""
	
		set %TAB("ELEMTYPE")="[UTBLIOENCODE]ELEMTYPE"
		set %TAB("ELEMNAME")="[UTBLIOENCODE]ELEMNAME/XPR=DO NAMEPR^UTBLIOEN/XPP=DO NAMEPP^UTBLIOEN"
		set %TAB("LABEL")="[UTBLIOENCODE]LABEL/XPP=DO LABELPP^UTBLIOEN"
		set %TAB("INSTNAME")="[UTBLIOENCODE]INSTNAME/XPP=DO INSTPP^UTBLIOEN"
		set %TAB("delete") = ".FUN34/XPP=DO DELETEPP^UTBLIOEN"
		set %TAB("FORMAT") = "[UTBLIOENCODE]FORMAT/XPR=DO FORMATPR^UTBLIOEN"
	
		set %READ="@@%FN,,ELEMTYPE/REQ,ELEMNAME/REQ,LABEL/REQ,INSTNAME/REQ,,delete/NOREQ,,FORMAT/NOREQ"
	
		do ^UTLREAD
		if (VFMQ = "Q") set stop = 1 quit
			
		if 'delete do {
	
			type RecordUTBLIOENCODE utblioen = Db.getRecord("UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE,ELEMNAME=:ELEMNAME,LABEL=:LABEL,INSTNAME=:INSTNAME", 1)
		
			if (utblioen.format '= FORMAT) do {
			
				set utblioen.format = FORMAT
		
				do utblioen.save()
			}
		}
		else  do Db.delete("UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME=:ELEMNAME AND LABEL=:LABEL AND INSTNAME=:INSTNAME")
	}
	
	set ER = "W"
	// Use the Build IO Encoding Exception Runtime Routine function (UTBLIOENC1) to rebuild the runtime routine ^UCIOENCD for encoding exceptions
	set RM = $$^MSG(5715)
	
	quit
	
	
NAMEPR	// ELEMNAME prompt pre-processor - set up table look-up
	
	type public String ELEMTYPE
	
	if (ELEMTYPE = "Report") do CHANGE^DBSMACRO("TBL", "[DBTBL5H]:NOVALID")
	if (ELEMTYPE = "Routine") do CHANGE^DBSMACRO("TBL", "%ZR(:NOVALID")
	
	quit
	
	
NAMEPP	// ELEMNAME prompt post-processor - validate input

	type public String ELEMTYPE, ER, FORMAT, INSTNAME, LABEL, RM, X
	
	// * also valid => LABEL and INSTNAME also *
	if (X = "*") do {
		
		type ResultSet rs = Db.select("ELEMNAME", "UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME <> '*'")
		
		if rs.next() do {
			
			set ER = 1
			// Invalid - delete other entries before using *
			set RM = $$^MSG(5716)
		}
		else  do {
		
			set (LABEL, INSTNAME) = "*"
		
			do DISPLAY^DBSMACRO("@LABEL", LABEL)
			do DISPLAY^DBSMACRO("@INSTNAME", LABEL)
		
			do PROTECT^DBSMACRO("@LABEL")
			do PROTECT^DBSMACRO("@INSTNAME")
			
			set FORMAT = $$SKIPDEL(ELEMTYPE, X, LABEL, INSTNAME)
		}
	}
	else  do {
		
		type ResultSet rs = Db.select("ELEMNAME", "UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME = '*'")
		
		if rs.next() do {
			
			set ER = 1
			// Invalid - delete * entry first
			set RM = $$^MSG(5717)
		}
		else  do {
	
			if (ELEMTYPE = "Report"), 'Db.isDefined("DBTBL5H", "LIBS='SYSDEV' AND RID=:X") do {
		
				set ER = 1
				// Invalid report name
				set RM = $$^MSG(1446)
			}
		
			if (ELEMTYPE = "Routine"), '%ZR(X).exists() do {
		
				set ER = 1
				// Invalid routine name
				set RM = $$^MSG(1454)
			}
		
			do UNPROT^DBSMACRO("@LABEL")
			do UNPROT^DBSMACRO("@INSTNAME")
		}
	}
	
	quit
	
	
LABELPP	// LABEL prompt post-processor

	type public String ELEMNAME, ELEMTYPE, ER, FORMAT, INSTNAME, RM, X
	
	if (X = "*") do {
		
		type ResultSet rs = Db.select("LABEL", "UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME=:ELEMNAME AND LABEL <> '*'")
		
		if rs.next() do {
			
			set ER = 1
			// Invalid - delete other entries before using *
			set RM = $$^MSG(5716)
		}
		else  do {
		
			set INSTNAME = "*"
		
			do DISPLAY^DBSMACRO("@INSTNAME", INSTNAME)
		
			do PROTECT^DBSMACRO("@INSTNAME")
			
			set FORMAT = $$SKIPDEL(ELEMTYPE, ELEMNAME, X, INSTNAME)
		}
	}
	else  do {
		
		type ResultSet rs = Db.select("LABEL", "UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME=:ELEMNAME AND LABEL = '*'")
		
		if rs.next() do {
			
			set ER = 1
			// Invalid - delete * entry first
			set RM = $$^MSG(5717)
		}
		else  do UNPROT^DBSMACRO("@INSTNAME")
	}
	
	quit
	
	
INSTPP	// INSTNAME prompt post-processor

	type public String ELEMTYPE, ELEMNAME, ER, FORMAT, LABEL, RM, X
	
	if (X = "*") do {
		
		type ResultSet rs = Db.select("INSTNAME", "UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME=:ELEMNAME AND LABEL=:LABEL AND INSTNAME <> '*'")
		
		if rs.next() do {
			
			set ER = 1
			// Invalid - delete other entries before using *
			set RM = $$^MSG(5716)
		}
		
	}
	else  do {
		
		type ResultSet rs = Db.select("INSTNAME", "UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE AND ELEMNAME=:ELEMNAME AND LABEL=:LABEL AND INSTNAME = '*'")
		
		if rs.next() do {
			
			set ER = 1
			// Invalid - delete * entry first
			set RM = $$^MSG(5717)
		}
	}
	
	if 'ER set FORMAT = $$SKIPDEL(ELEMTYPE, ELEMNAME, LABEL, X)
	
	quit


DELETEPP	// Delete prompt post-processor
	
	type public Boolean X
	
	if X do GOTO^DBSMACRO("END")
	
	quit
	
	
FORMATPR	// FORMAT prompt pre-processor

	type public Boolean delete
	
	if 'delete do CHANGE^DBSMACRO("REQ")
	
	quit
	
	
SKIPDEL(String ELEMTYPE,
	String ELEMNAME,
	String LABEL,
	String INSTNAME)
	
	/*
	Skip delete prompt unless record exists.  Return format.
	*/

	type RecordUTBLIOENCODE utblioen = Db.getRecord("UTBLIOENCODE", "ELEMTYPE=:ELEMTYPE,ELEMNAME=:ELEMNAME,LABEL=:LABEL,INSTNAME=:INSTNAME", 1)
		
	if utblioen.format.isNull() do {
		
		do DELETE^DBSMACRO("@FORMAT")
	}
	else  do DISPLAY^DBSMACRO("@FORMAT", utblioen.format)
	
	// Skip delete prompt if not defined
	if (utblioen.getMode() = 0) do GOTO^DBSMACRO("@FORMAT")
	
	quit utblioen.format
	
	
public BUILD

	/*
	Build or rebuild routine ^UCIOENCD based on the contents of table
	UTBLIOENCODE.  This routine is used as a function call ($$^UCIOENCD)
	from PSL when using the IO.open() class, or by any other non-PSL
	routine that needs to determine if an element should use an
	exception to the standard character set.
	*/
	
	type Boolean build
	type Number cmperr, tabcnt
	type String %READ, %TAB(), lastlabl, lastname, lasttype, src(), VFMQ
	
	// Build run-time routine
	set %TAB("build") = "/DES="_$$^MSG(397)_" ^UCIOENCD/TYP=L/LEN=1"
	set %READ = "@@%FN,,build"
	
	do ^UTLREAD quit:((VFMQ = "Q") ! 'build)
	
	do addcode(0, "public UCIOENCD(String ELEMTYPE,")
	do addcode(0, "               String ELEMNAME,")
	do addcode(0, "               String LABEL,")
	do addcode(0, "               String INSTNAME)")
	do addcode(0, "")
	do addcode(1, "/*")
	do addcode(1, "Check for character set exceptions based on data registered in UTBLIOENCODE")
	do addcode(0, "")
	do addcode(1, "This routine is generated by BUILD^UTBLIOEN")
	do addcode(1, "*/")
	do addcode(0, "")
	do addcode(1, "type String CHARSET = """"")
	
	set tabcnt = 1
	set (lastlabl, lastname, lasttype) = ""
	
	type DbSet ds = Db.selectDbSet("UTBLIOENCODE", "", "ELEMTYPE,ELEMNAME,LABEL,INSTNAME")
	
	while ds.next() do {
		
		type String code = ""
		
		type RecordUTBLIOENCODE utblioen = ds.getRecord("UTBLIOENCODE")
		
		if (utblioen.elemtype '= lasttype) do { quit:(tabcnt = 1)
		
			// Close do blocks
			if (tabcnt > 1) do {
				
				do closedo(.tabcnt, 1)
				set (lastlabl, lastname) = ""
			}
			
			do addcode(0, "")
		
			set lasttype = utblioen.elemtype
			set code = "if (ELEMTYPE = """_utblioen.elemtype_""") "
		
			if (utblioen.elemname = "*") do addcode(1, code_"quit """_utblioen.format_"""  // ELEMNAME=*")
			else  do {
				
				do addcode(1, code_"do { quit CHARSET")
				
				set tabcnt = tabcnt + 1
			}
		}
		
		if (utblioen.elemname '= lastname) do { quit:(tabcnt = 2)
		
			// Close do blocks
			if (tabcnt > 2) do {
				
				do closedo(.tabcnt, 2)
				set lastlabl = ""
			}
		
			set lastname = utblioen.elemname
			set code = "if (ELEMNAME = """_utblioen.elemname_""") "
		
			if (utblioen.label = "*") do addcode(2, code_"set CHARSET = """_utblioen.format_""" quit  // LABEL=*")
			else  do {
				
				do addcode(2, code_"do { quit")
				
				set tabcnt = tabcnt + 1
			}
		}
		
		if (utblioen.label '= lastlabl) do { quit:(tabcnt = 3)
		
			// Close do blocks
			if (tabcnt > 3) do closedo(.tabcnt, 3)
		
			set lastlabl = utblioen.label
			set code = "if (LABEL = """_utblioen.label_""") "
		
			if (utblioen.instname = "*") do addcode(3, code_"set CHARSET = """_utblioen.format_""" quit  // INSTNAME=*")
			else  do {
				
				do addcode(3, code_"do { quit")
				do addcode(0, "")
				
				set tabcnt = tabcnt + 1
			}
		}
		
		set code = "if (INSTNAME = """_utblioen.instname_""") "
		
		do addcode(4, code_"set CHARSET = """_utblioen.format_""" quit")
	}
	
	// Close any open do blocks
	if (tabcnt > 1) do closedo(.tabcnt, 1)
	
	do addcode(0,"")
	do addcode(1, "quit """"")
	
	// Call PSL compiler
	do cmpA2F^UCGM(.src(), "UCIOENCD", , , , ,.cmperr, )

	if +cmperr.get() set ER = 1
	
	quit
	

addcode(Number tabcnt,		// Number of tabs
	String code)		// Code to add
	
	// Add procedural code in the output array

	type public String src()
	
	type Number I, line
	
	set line = src("").order(-1) + 1
	
	for I = 1:1:tabcnt set code = 9.char()_code
	
	set src(line) = code
	
	quit
	
	
closedo(Number tabcnt,		// Current tab count	/MECH=REFNAM:RW
	Number target)		// Target tab count
	
	while (tabcnt > target) do {
		
		do addcode(tabcnt - 1, "}")
		set tabcnt = tabcnt - 1
	}
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60466^48244^Dan Russell^9753"	// Signature - LTD^TIME^USER^SIZE
