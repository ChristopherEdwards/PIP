RCIFFILE(RecordRELCIF relcif, String vpar, Boolean vparNorm) // RELCIF - CIF-ACN Relationship File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             02/07/2007
	// Trigger Definition (5)                      02/07/2007
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = relcif.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(relcif,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(relcif,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = relcif.acn
	type String CID = relcif.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RELCIF",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RELCIF","ACN = :relcif.acn and CID = :relcif.cid") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String CID

	type RecordRELCIF relcif = Db.getRecord("RELCIF","ACN=:ACN,CID=:CID")
	if (%ProcessMode = 2) do {
		do relcif.setMode(2)

		do RCIFFILE(relcif,vpar)
	}
	else  do VINDEX(relcif)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRELCIF relcif

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RELCIF","ACN = :relcif.acn and CID = :relcif.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(relcif)) S ^CIF(vobj(relcif,-3),99,vobj(relcif,-4))=vobj(relcif)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.relcif)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.relcif) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRELCIF relcif

	if vpar["/INDEX/" do VINDEX(.relcif)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.relcif)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CIF(vobj(relcif,-3),99,vobj(relcif,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordRELCIF relcif

	// Type local variables for access keys for defaults
	type public String ACN
	type public String CID

	if relcif.profana.isNull() set relcif.profana = 0      // profana
	if relcif.proinq.isNull() set relcif.proinq = 0        // proinq
	if relcif.s1099.isNull() set relcif.s1099 = 0          // s1099
	quit


vreqn // Validate required data items

	type public RecordRELCIF relcif

	if relcif.profana.isNull() do vreqerr("PROFANA") quit
	if relcif.proinq.isNull() do vreqerr("PROINQ") quit
	if relcif.s1099.isNull() do vreqerr("S1099") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRELCIF relcif

	if relcif.acn.isNull() do vreqerr("ACN") quit
	if relcif.cid.isNull() do vreqerr("CID") quit

		if vx("PROFANA").exists(),relcif.profana.isNull() do vreqerr("PROFANA") quit
		if vx("PROINQ").exists(),relcif.proinq.isNull() do vreqerr("PROINQ") quit
		if vx("S1099").exists(),relcif.s1099.isNull() do vreqerr("S1099") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RELCIF","MSG",1767,"RELCIF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordRELCIF relcif
	if 'relcif.acn.isNull() set vfkey("^CIF("_""""_relcif.acn_""""_","_1_")")="RELCIF(ACN) -> CIF"
	if 'relcif.cid.isNull() set vfkey("^ACN("_""""_relcif.cid_""""_","_50_")")="RELCIF(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordRELCIF relcif
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":relcif.acn") set vERRMSG = $$^MSG(8563,"RELCIF(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("ACN",":relcif.cid") set vERRMSG = $$^MSG(8563,"RELCIF(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ACN").exists()!vx("CID").exists()!vx("ROLE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After delete trigger

	type public RecordRELCIF relcif
	/*
	---------- Revision History ------------------------------------------
	03/12/03 - Dan Russell - 51351
		   Removed references to membership (obsoleted).

		   Removed old change history.
	*/

	new CLS
	set CLS=Db.getOneRow("CLS","ACN","CID")

	// Delete Master Commitment entry, if any
	new ACN,CID
	set ACN=relcif.acn,CID=relcif.cid
	if CLS="L" do Db.delete("LNMCOM1","ACN=:ACN AND CID=:CID")
	
	/*
	STP - Stop Payments - Look for customer stops on account creation and 
	set account stops if customer stop exist.
	*/
	new ACNSEQ,CIFSEQ
	if CLS="D",Db.isDefined("DEP","relcif.cid") do { quit:ER 
		new rs 
		type ResultSet rs=Db.select("SEQ,EXP","STOP1","ACN=:ACN")
		if rs.isEmpty() quit	
		while rs.next() do {
			set CIFSEQ=rs.getCol(1)
			set EXP=rs.getCol(2)
			quit:CIFSEQ="" 
			set SRC="1,"_ACN_","_CIFSEQ
			// Retrieve account seq
			new rs,STP
			type ResultSet rs=Db.select("SEQ","STOP2","CID=:CID AND SRC=:SRC")
			if rs.isEmpty() quit
			while rs.next() do {
				set ACNSEQ=rs.getCol(1)
				quit:ACNSEQ="" 
				do Db.delete("STOP2","CID=:CID AND SEQ=:ACNSEQ")
				set STP=Db.getOneRow("STP","DEP","CID")
				set $P(STP,"#",1)=$P(STP,"#",1)-1
				if 'EXP!(EXP>%SystemDate) do Db.update("DEP","STP=:STP","CID=:CID","/NOJOURNAL")
				}
			}
		}

	// Update U. S. Residency Status on account
	if Db.getOneRow("USRESTAT","CUVAR") do RELAT^USRESTAT(CID) quit:ER

	/*
	This is a transaction (core) account set up for percentage based
	investment sweep - make identical change (Delete ACN) on corresponding 
	non-institutional investment accounts.	//AV - 05/11/2000 - 37946
	*/
	new SWPF,SWPOPT,CRCD,OCID,data
	set OCID=relcif.cid.oldVal
	set data=Db.getOneRow("SWPF,SWPOPT,CRCD","DEP","OCID")
	set SWPF=$P(data,$C(9),1)
	set SWPOPT=$P(data,$C(9),2)
	set CRCD=$P(data,$C(9),3)
	if SWPF=1,SWPOPT=2,CRCD=%SystemCurrency do { quit:ER
		new XICID
		new rs
		type ResultSet rs=Db.select("ICID","DEP101","CID=:OCID")
		if rs.isEmpty() quit
		while rs.next() do {
			set XICID=rs.getCol(1)
			new XSWPNI
			set XSWPNI=Db.getOneRow("SWPNI","DEP","XICID")
			if 'XSWPNI quit
			new OACN
			set OACN=relcif.acn.oldVal
			do Db.delete("RELCIF","CID=:XICID AND ACN=:OACN")
			}
		}
	quit

vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordRELCIF relcif
	/*
	 ---------- Revision History ------------------------------------------
	
	08/06/99 - Mugilvannan - 25047
		   Added code to verify the total of Account ownership
		   percentages should be 100 percent. This is only done
		   during account integrity.
		   
	03/03/06 - RussellDS - CR19065
		   Change references to STP column from ACN to DEP

	09/13/04 - KELLYP - CR 12086
		   Moved checks on deposit sweep fields from top level of this
		   trigger to a deposit-specific section to prevent errors from
		   occurring when creating a loan account.

	09/09/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also modified this trigger
		   to conform to current PSL standards.

	03/12/03 - Dan Russell - 51351
		   Removed references to membership (obsoleted).

		   Removed old change history.

	01/10/03 - Spier -51423
		   Correct db.insert of stop2a record, it was would not work
		   with new compiler as coded.(use of currval)

	*/
	
	type Public Number ACN,CID
	type Public String %RESPROC,ER
	
	type Number ACTOWNPCT,COUNT
		
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	
	if acn.cls="D" do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		if dep.ira>0 do {
			set COUNT=0

			type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
			if rs.isEmpty() quit
			while rs.next() set COUNT=COUNT+1 if COUNT>1 quit
			
			// Retirement accounts restricted to one customer
			if (COUNT>1) do Runtime.setErrXBAD("RELCIF",3002) quit:ER 
			}
		}
	
	// Deposit Secured Loans

	// Verify CIF's between pledged account and loan account match
	type ResultSet rs=Db.select("CID","LNCOL","PLDGACN=:CID")
	if 'rs.isEmpty() while rs.next() do { quit:ER  
		// 11982 - Replaced RELACN with RELCIF
		// Pledged account owners not owners of loan account
		if 'Db.isDefined("RELCIF","ACN,rs.getCol(1)") do Runtime.setErrXBAD("RELCIF","PCIF") quit:ER 
		}
	
	// Verify CIF's between pledged account and loan account match
	type Number XPLDCID
	type ResultSet rs=Db.select("PLDGACN","LNCOL","CID=:CID AND PLDGACN IS NOT NULL")
	if 'rs.isEmpty() while rs.next() do { quit:ER	
		set XPLDCID=rs.getCol(1) quit:XPLDCID=""
		
		// 11982 - Replaced RELACN with RELCIF
		// Pledged account owners not owners of loan account
		if 'Db.isDefined("RELCIF","ACN,XPLDCID") do Runtime.setErrXBAD("RELCIF","PCIF") quit:ER 
		}
	
	// Account Ownership Percentage.
	if %ProcessMode=2 do {
		type ResultSet rs1=Db.select("ACTOWNPCT","RELCIF","CID=:CID AND ACTOWNPCT > 0")
		if 'rs1.isEmpty() do { quit:ER
			set ACTOWNPCT = 0
			while rs1.next() set ACTOWNPCT = ACTOWNPCT + rs1.getCol("ACTOWNPCT")
			if ACTOWNPCT'=100 do Runtime.setErrMSG("RELCIF",6003,"Account Owernship Percentage")
			}
		}
	
	/*
	The following section should not be executed if the trigger is being
	executed for integrity checking ONLY
	*/
	
	quit:%ProcessMode=2
	
	type Boolean RFLGC
	type ResultSet rs=Db.select("RFLGC","CIF","ACN=:ACN")
	if 'rs.isEmpty() if rs.next() set RFLGC=rs.getCol(1)
	if RFLGC do {
		type String RFLG
		type ResultSet rs=Db.select("RFLG","RFLGC","ACN=:ACN AND (EXDT>=:%SystemDate OR EXDT IS NULL)") 
	 	if rs.isEmpty() quit
	 	set RFLG=rs.next(),RFLG=rs.getCol(1)
		if RFLG'="" do Runtime.setErrXBAD("RELCIF",520,relcif.acn) quit:ER 
		}

	type Number ACN,CID		// Protect ACN and CID var's
	set ACN=relcif.acn
	set CID=relcif.cid

	// Residency Processing verification
	if %RESPROC do RELAT^ALLWACCT(CID)
	
	// Update U. S. Residency Status on account
	if CUVAR.USRESTAT do RELAT^USRESTAT(CID) quit:ER 
	
	// LNMCOM1 - Master Commitments
	if acn.cls="L" do {
		if 'Db.isDefined("LN","CID") quit
		
		type RecordLN ln=Db.getRecord("LN","CID=:CID")

		if ln.ccl="",ln.cpf do {
			do Db.insert("LNMCOM1","ACN,CID",":ACN,:CID")	
			}
		}

	/*
	STP - Stop Payments - Look for customer stops on account creation and 
	set account stops if customer stop exist.
	*/
	if acn.cls="D",Db.isDefined("DEP","CID") do { quit:ER 
 	
		type ResultSet rs=Db.select("SEQ,EXP,ACT,DP,WHO,STPWHY,TIME,STCON,CMT","STOP1","ACN=:ACN")
		if rs.isEmpty() quit
		while rs.next() do { 

			type Date EXP
			type Number SEQ
		
			set SEQ=rs.getCol(1)
			set EXP=rs.getCol(2)
			if SEQ="" quit 
			
			/*
			Expiration date is expired if less than system date. If
			expiration date is null, stop is indefinite.
			*/
			if EXP,'(EXP>%SystemDate) quit 
			
			type Boolean STCON
			type Date DP
			type Number ACT
			type String CMT,SRC,STPWHY,TER,TIME,WHO
			
			set ACT=rs.getCol(3)
			set DP=rs.getCol(4)
			set WHO=rs.getCol(5)
			set STPWHY=rs.getCol(6)
			set TIME=rs.getCol(7)
			set STCON=rs.getCol(8)
			set CMT=rs.getCol(9)
			set SRC="1,"_ACN_","_SEQ
			do Db.insert("STOP2","CID,SEQ,ACT,DP,WHO,EXP,TIME,CMT,STCON,STPWHY,SRC",":CID,STOP2.NEXTVAL,:ACT,:DP,:WHO,:EXP,:TIME,:CMT,:STCON,:STPWHY,:SRC")

			type ResultSet rs2=Db.select("TER","STOP1A","ACN=:ACN AND SEQ=:SEQ")
			if rs2.isEmpty() quit
			while rs2.next() do {
				set TER=rs2.getCol(1)
				quit:TER="" 
				type RecordSTOP2A stop2a=Class.new("RecordSTOP2A")
				set stop2a.cid=CID
				set stop2a.seq=Db.currVal("STOP2","CID=:CID") 
				set stop2a.ter=TER
				do stop2a.save()
				}
				
			type String STP
			type RecordDEP dep = {RecordDEP}acn
			set STP=dep.stp
			set STP.piece("#",1)=STP.piece("#",1)+1
			do Db.update("DEP","STP=:STP","CID=:CID","/NOJOURNAL")
			}
			
		/*
		This is a transaction (core) account set up for percentage based
		investment sweep - make identical change (Insert ACN) on corresponding
		non-institutional investment accounts.
		*/
		type String SWPF,SWPOPT,CRCD

		set (SWPF,SWPOPT)=""

		type ResultSet rs=Db.select("SWPF,SWPOPT","DEP","CID=:CID")
		if 'rs.isEmpty() while rs.next() do {
			set SWPF=rs.getCol(1)
			set SWPOPT=rs.getCol(2)
			}
		set CRCD=acn.crcd
		
		if SWPF=1,SWPOPT=2,CRCD=%SystemCurrency do { quit:ER
	
			type Number XICID,XSWPNI
	
			type ResultSet rs=Db.select("ICID","DEP101","CID=:CID")
			if rs.isEmpty() quit
			while rs.next() do {
				set XICID=rs.getCol(1)
							
				type ResultSet rs2=Db.select("SWPNI","DEP","CID=:XICID")
				if rs2.isEmpty() quit
				if rs2.next() set XSWPNI=rs2.getCol(1)
		                if 'XSWPNI quit

				do Db.insert("RELCIF","CID,ACN,ROLE,FSID,PROINQ,PROFANA,S1099",":XICID,:relcif.acn,:relcif.role,:relcif.fsid,:relcif.proinq,:relcif.profana,:relcif.s1099")
				}
			}
		}

	// Update the Date of Death/Disability restrictions
	type ResultSet rs=Db.select("DOD,DODSABL","CIF","ACN=:ACN")
	if 'rs.isEmpty() while rs.next() do {
	
		type Date DOD,DODSABL
		type String DISBRST,DODRST,GRP
	
		// Check that the restrictions exists
		set GRP="CIF"
		set DODRST=CUVAR.DODRST
		set DISBRST=CUVAR.DISBRST

		set DOD=rs.getCol(1)
		set DODSABL=rs.getCol(2)

		if DOD'="",DODRST'="" do {
			if Db.isDefined("UTBLRFLG","GRP,DODRST") quit
			do Db.insert("RFLGCCID","ACN,RFLG,CID",":relcif.acn,:DODRST,:relcif.cid","/NOVALRI/FRMFILER")
			}

		if DODSABL'="",DISBRST'="" do {
			if Db.isDefined("UTBLRFLG","GRP,DISBRST") quit
			do Db.insert("RFLGCCID","ACN,RFLG,CID",":relcif.acn,:DISBRST,:relcif.cid","/NOVALRI/FRMFILER")
			}
		}
	/*
	When a Reg CC account opened, this section will check to determine if
	the account qualifies as an exception. If it does, the expiration date 
	should file as T+30.
	*/
	if acn.regcc do { quit:ER
		type Boolean NEWFLG,REGCC
		type Date EXPDTE,ODT

		set NEWFLG=0	// if NEWFLG=0 - consider as risky depositor

		type ResultSet rs=Db.select("REGCC,ODT","DEP","ACN=:ACN")
		if 'rs.isEmpty() while rs.next() do { quit:(ER!NEWFLG)
			set REGCC=rs.getCol(1)
			set ODT=rs.getCol(2)
			if REGCC,((ODT+30)<%SystemDate) set NEWFLG=1 quit
			}
		if 'NEWFLG set EXPDTE=%SystemDate+30 do Db.update("DEP","REGCCEXC=1,REGCCEXP=:EXPDTE","CID=:CID") quit:ER
		}
	quit

vau1 // Trigger AFTER_UPDATE - After update trigger

	type public RecordRELCIF relcif
	/*
	   ---------- Revision History -----------------------------------------
	   
	   12/19/06 - MBUIM - CR 24516
	       	      Modified to retrofit the following CR's from V64

		      06/23/03 - YENDAPALLIS - CR3971 
		      Modified the code to check to see if the customer
		      number has changed and role code (relcif.role) is 1
		      and updates the ACN file (acn.lnm and acn.acn) 
		      if CIF number has changed. Also added a check to see  
		      if the class is "D" to restrict the error MSG 3002 to  
		      come only for deposits. 
		      
		      09/25/03 - MBUIM - CR5152 
	   	      Modified to add code that will update the acounts  
	   	      statement group info ^CIF(,110, to current primary CIF  
	   	      when the previoius primary CIF is changed.  
	   	      Removed Pre-2000 Revision History  
	   	 	
	   	      10/06/03 - BHANGALV - CR5927 
	   	      Modified to add proper parameters in the do Runtime.setErrXBAD  
	   	      function to load proper value for ~p1 
	   	      
	   	      12/14/06 - MBUIM - CR24518 
		      Retrofit CR23998 from ICG|ICGWeb01_Dev_Profile view  
	
	   	      11/07/06 - HAILEYK - CR23998 
	   	      Modified code to properly determine if the primary owner 
 		      has changed by looking at the RELCIF.PCIF instead of  
 		      assuming role 1 is the primary.  Also changed code that 
 		      would move the account from the statement group of the 
 		      old primary to the statement group of the new primary 
 		      owner to always create a new statement group for the new 
 		      owner.
	   	           
	   04/20/06 - Hillanbrand CR 20770
	              Modified trigger of RELCIF to not do the foreign key on the 
	              update to dep since during a transfer which updates ACN
	              IRATYPE has not be created yet in UCIFM.proc
	   
	   09/13/04 - KELLYP - CR 12086
	   	      Modified trigger to prevent deposit-specific processing
	   	      from occurring when executing this trigger for a loan account.

	   09/09/04 - KELLYP - CR 11982
		      Replaced references to RELACN with RELCIF.  RELACN is an index
		      and should not be directly referenced.  The RELACN table was 
		      also obsoleted from the M database.  Also modified this trigger
		      to conform to current PSL standards.
	
	   03/12/03 - Dan Russell - 51351
		      Removed references to membership (obsoleted).

		      Removed old change history.

	   10/07/02 - MBUIM - 51234/CR620
		      When account relationship was modified, for example
		      switching the primary and secondary owners, the report
		      name on the account did not change.
		      Added column relcif.role to the list of columns that must
		      trigger when updated.
	   
	*/
	
	type Public Number ACN,CID
	type Public String ER
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")
	
	if acn.cls="D" do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		
		if dep.ira>0 do { quit:ER
		 
			type Number COUNT
		
			set COUNT=0
	
			type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
			while rs.next() set COUNT=COUNT+1 if COUNT>1 quit
			
			// Retirement accounts restricted to one customer
			if (COUNT>1) do Runtime.setErrXBAD("RELCIF",3002) quit:ER 
			}
		}

	type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
	
	// Determine if role is primary(PCIF=1) 
	type RecordRELCODE relcode=Db.getRecord("RELCODE","REL=:acn.acnrelc,ROLE=relcif.role") 
	
	if relcif.acn'=acn.acn,relcode.pcif do { quit:ER 
	
		type Number NACN,PACN
	
		type String XLNM
	
		set XLNM=cif.xname
	
		// Primary owner
		set PACN=acn.acn

		// New owner
		set NACN=relcif.acn
		
		do acn.setAuditFlag(1) 
		set acn.acn=relcif.acn 
		set acn.lnm=$$TRIM^%ZS(XLNM.extract(1,20))
		do acn.save() 
		 
		// Not a statement account 
		if 'acn.smet quit 
	
		type Number DFTGRP,NSTMGRP 
	
		// Old statement group 
		type RecordCMBCID cmbcid=Db.getRecord("CMBCID","CID=:CID,ACN=:PACN")
		set DFTGRP=cmbcid.stmgrp
	
		// New statement group number
		set NSTMGRP=Db.nextVal("CMBGRP","ACN=:NACN") 
	
		// Data from old statement group account entry 
		type RecordCMBSTM cmbstm=Db.getRecord("CMBSTM","ACN=:PACN,STMGRP=:DFTGRP,CID=:CID")
	
		// Remove account from old statement group 
		do Db.delete("CMBSTM","ACN=:PACN AND STMGRP=:DFTGRP AND CID=:CID")

		quit:ER 
	
		// Retrieve old statement group 
		type RecordCMBGRP cmbgrp=Db.getRecord("CMBGRP","ACN=:PACN,STMGRP=:DFTGRP")
	
		// Create new statement group 
		type RecordCMBGRP newcmbgrp=cmbgrp.copy() 
	
		do newcmbgrp.setMode(0)
		set newcmbgrp.acn=relcif.acn
	
		set newcmbgrp.stmgrp=NSTMGRP 
		do newcmbgrp.save()
		quit:ER 
	
		// Add account to new statement group 
		type RecordCMBSTM newcmbstm=cmbstm.copy()
	
		do newcmbstm.setMode(0) 
		set newcmbstm.acn=relcif.acn
		set newcmbstm.stmgrp=NSTMGRP 
		do newcmbstm.save()
		}

	if cif.rflgc do {
		type String RFLG
		type ResultSet rs=Db.select("RFLG","RFLGC","ACN=:ACN AND (EXDT>=:%SystemDate OR EXDT IS NULL)") 
		if rs.isEmpty() quit
	    	if rs.next() set RFLG=rs.getCol(1)
	    	
	    	// Customer record ~p1 contains restriction
		if 'RFLG.isNull() do Runtime.setErrXBAD("RELCIF",520,"",relcif.acn) quit:ER 
		}
	
	// Deposit Secured Loans
	// Verify CIF's between pledged account and loan account match
	type Number XLCID,XPLDCID

	type ResultSet rs=Db.select("CID","LNCOL","PLDGACN=:CID")
	if 'rs.isEmpty() while rs.next() do { quit:ER  
		set XLCID=rs.getCol(1)
		// Pledged account owners not owners of loan account
		// 11982 - Replaced RELACN with RELCIF
		if 'Db.isDefined("RELCIF","ACN,XLCID") do Runtime.setErrXBAD("RELCIF","PCIF") quit:ER 
		}
	
	type ResultSet rs=Db.select("PLDGACN","LNCOL","CID=:CID AND PLDGACN IS NOT NULL")	
	if 'rs.isEmpty() while rs.next() do { quit:ER  
		set XPLDCID=rs.getCol(1)
		// Pledged account owners not owners of loan account
		// 11982 - Replaced RELACN with RELCIF
		if 'Db.isDefined("RELCIF","ACN,XPLDCID") do Runtime.setErrXBAD("RELCIF","PCIF") quit:ER 
		}

	// 12086 - Rest of trigger for deposit accounts only.
	if acn.cls="L" quit

								/*
								This is a transaction (core) account set up for percentage based
								investment sweep - make identical change (Update ACN) on corresponding
								non - institutional investment accounts.
								*/
	type String SWPF,SWPOPT,CRCD

	set (SWPF,SWPOPT)=""

	type ResultSet rs=Db.select("SWPF,SWPOPT","DEP","CID=:CID")
	if 'rs.isEmpty() while rs.next() do {
		set SWPF=rs.getCol(1)
		set SWPOPT=rs.getCol(2)
		}
	set CRCD=acn.crcd
	
								if SWPF=1,SWPOPT=2,CRCD=%SystemCurrency do { quit:ER
							 
	        type Number XICID,XOACN,XSWPNI

	        type ResultSet rs=Db.select("ICID","DEP101","CID=:CID")
	        if rs.isEmpty() quit
	        while rs.next() do {
	        
	                set XICID=rs.getCol(1)

			type ResultSet rs2=Db.select("SWPNI","DEP","CID=:XICID")
			if rs2.isEmpty() quit
			if rs2.next() set XSWPNI=rs2.getCol(1)
	                if 'XSWPNI quit
	                
	                set XOACN=relcif.acn.oldVal
	                
	                do Db.update("RELCIF","ACN=:ACN","CID=:XICID AND ACN=:XOACN")
	                }
		}
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger RELCIF

	type public RecordRELCIF relcif
	/*
	---- Revision History ------------------------------------------------

	01/16/01 - ESTERLYP - ARQ 43165, roll forward of 33823
		   Create trigger, update RELCIF.ECOACD with LN.ECOA value
		   until LN.ECOA is obsolete - after which this should be
		   removed.
	*/
	new DATA,XACN,XCID,XECOACD
	set XACN=relcif.acn
	set XCID=relcif.cid
	if relcif.ecoacd="" do {
		set DATA=Db.getOneRow("ECOA","LN","CID")
		set XECOACD=$p(DATA,$C(9),1)
		if XECOACD'=""	set relcif.ecoacd=XECOACD
		}
	quit

vbu1 // Trigger BEFORE_UPDATE - Before update trigger

	type public RecordRELCIF relcif
	do relcif.setAuditFlag(1)

	/*
	   ---------- Revision History -----------------------------------------

	   11/07/06 - HAILEYK - CR23998
	   	      Created trigger.
 		      
 	*/

	type RecordACN acn=Db.getRecord("ACN","relcif.cid")
		
	// Determine if role is primary(PCIF=1)
	type RecordRELCODE relcode=Db.getRecord("RELCODE","REL=:acn.acnrelc,ROLE=relcif.role")

	/*
	Since this is the primary role and the customer number is changing
	we need to clear out the at Date of Death fields.
	*/
	if relcode.pcif do {
		set relcif.dacr=""
		set relcif.dbal=""
		set relcif.dfee=""
		set relcif.dfmv=""
		set relcif.diytd=""
	}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRELCIF relcif

	set X = relcif.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = relcif.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = relcif.actownpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RELCIF.ACTOWNPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = relcif.atm if 'X.isNull(),'Db.isDefined("UTBLATM","X") set vRM = $$^MSG(1485,X) do vdderr("ATM", vRM) quit
	set X = relcif.dacr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RELCIF.DACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = relcif.dbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RELCIF.DBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = relcif.dfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RELCIF.DFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = relcif.dfmv if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RELCIF.DFMV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = relcif.diytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"RELCIF.DIYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = relcif.ecoacd if 'X.isNull(),'Db.isDefined("UTBLECOA","X") set vRM = $$^MSG(1485,X) do vdderr("ECOACD", vRM) quit
	set X = relcif.fsid if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("FSID", vRM) quit
	if '("01"[relcif.PROFANA) set vRM=$$^MSG(742,"L") do vdderr("PROFANA", vRM) quit
	if '("01"[relcif.PROINQ) set vRM=$$^MSG(742,"L") do vdderr("PROINQ", vRM) quit
	set X = relcif.role if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ROLE", vRM) quit
	if '("01"[relcif.S1099) set vRM=$$^MSG(742,"L") do vdderr("S1099", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RELCIF","MSG",979,"RELCIF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordRELCIF relcif)	//RELCIF Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.relcif)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HISTFM_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.relcif)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HISTFM_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.relcif)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HISTFM_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.relcif)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HISTFM_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.relcif)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HISTFM_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.relcif)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HISTFM_UPDATE
			}
		}

	quit


vj1(RecordRELCIF relcif)	// HISTFM_DELETE  Table HIST  History on account for delete of a cif

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=relcif.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS(relcif.cid,"REL","ROLE"_$$ACNKLHIS^REL(relcif.acn,relcif.cid),$$ACNKLHIS^REL(relcif.acn,relcif.cid),"",$G(EFD),"CIF "_relcif.acn)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordRELCIF relcif)	// HISTFM_INSERT  Table HIST  History on account for inserts

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=relcif.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$TCMTFM^ACNFUNCS(relcif.acn_","_relcif.cid,"REL","ROLE","",relcif.role,$G(EFD),"CIF "_relcif.acn)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordRELCIF relcif)	// HISTFM_UPDATE  Table HIST  History on account for updates

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=relcif.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(relcif.acn_","_relcif.cid,"RELCIF",vdi,vold,vnew,$G(EFD),"CIF "_relcif.acn,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordRELCIF relcif) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.relcif)

	quit
	

vi1(RecordRELCIF relcif) // Maintain RELACN index entries (Account to CIF)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = relcif.cid
	type String v3 = relcif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CIF(vobj(relcif,-3),99,vobj(relcif,-4)))#2,'$D(^ACN(v1,99,v3)) do vidxerr("RELACN")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^ACN(v1,99,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^ACN(v1,99,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("RELCIF")

	while ds.next() do {
		type RecordRELCIF relcif=ds.getRecord("RELCIF")
		if vlist.contains("VINDEX") do VINDEX(.relcif) quit
		if vlist.contains("RELACN") do vi1(.relcif)
	}

	quit


public VIDXBLD1(RecordRELCIF relcif, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.relcif) quit
	if vlist.contains("RELACN") do vi1(.relcif)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("RELCIF","MSG",1225,"RELCIF."_di)

	quit


vkchged // Access key changed

	type public RecordRELCIF relcif

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = relcif.acn_","_relcif.cid     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" if vx("ACN").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = relcif.acn_","_relcif.cid     // Copy new keys into object
	type RecordRELCIF vnewrec = relcif.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RELCIF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRELCIF relcif

	if vux("ACN").exists() set relcif.acn = vux("ACN").piece("|",i)
	if vux("CID").exists() set relcif.cid = vux("CID").piece("|",i)
	quit

VIDXPGM()	quit "RCIFFILE"	// Location of index program

