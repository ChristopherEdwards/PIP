VALUEDFL(RecordUTBLPRODRTDT utblprodrtdt, String vpar, Boolean vparNorm) // UTBLPRODRTDT - Product Attribute Result Set Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (1)                      01/05/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblprodrtdt.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblprodrtdt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblprodrtdt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String COLNAME = utblprodrtdt.colname
	type String RESULTSID = utblprodrtdt.resultsid
	type String DECISION = utblprodrtdt.decision

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("COLNAME").exists()!vx("RESULTSID").exists()!vx("DECISION").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPRODRTDT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPRODRTDT","COLNAME = :utblprodrtdt.colname and RESULTSID = :utblprodrtdt.resultsid and DECISION = :utblprodrtdt.decision") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String COLNAME
	type public String RESULTSID
	type public String DECISION

	type RecordUTBLPRODRTDT utblprodrtdt = Db.getRecord("UTBLPRODRTDT","COLNAME=:COLNAME,RESULTSID=:RESULTSID,DECISION=:DECISION")
	if (%ProcessMode = 2) do {
		do utblprodrtdt.setMode(2)

		do VALUEDFL(utblprodrtdt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPRODRTDT utblprodrtdt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPRODRTDT","COLNAME = :utblprodrtdt.colname and RESULTSID = :utblprodrtdt.resultsid and DECISION = :utblprodrtdt.decision") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set utblprodrtdt.LDATE = %SystemDate
		set utblprodrtdt.LTIME = %CurrentTime
		set utblprodrtdt.LUSER = %UserID
		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrtdt,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrtdt,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblprodrtdt))  S ^UTBL("PRODRT",vobj(utblprodrtdt,-3),vobj(utblprodrtdt,-4),vobj(utblprodrtdt,-5))=vobj(utblprodrtdt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPRODRTDT utblprodrtdt

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrtdt,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("PRODRT",vobj(utblprodrtdt,-3),vobj(utblprodrtdt,-4),vobj(utblprodrtdt,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLPRODRTDT utblprodrtdt

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPRODRTDT utblprodrtdt

	if utblprodrtdt.colname.isNull() do vreqerr("COLNAME") quit
	if utblprodrtdt.resultsid.isNull() do vreqerr("RESULTSID") quit
	if utblprodrtdt.decision.isNull() do vreqerr("DECISION") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRTDT","MSG",1767,"UTBLPRODRTDT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordUTBLPRODRTDT utblprodrtdt
	if 'utblprodrtdt.resultsid.isNull() set vfkey("^UTBL("_"""PRODRT"""_","_""""_utblprodrtdt.colname_""""_","_""""_utblprodrtdt.resultsid_""""_")")="UTBLPRODRTDT(COLNAME,RESULTSID) -> UTBLPRODRT"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordUTBLPRODRTDT utblprodrtdt
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("UTBLPRODRT",":utblprodrtdt.colname,:utblprodrtdt.resultsid") set vERRMSG = $$^MSG(8563,"UTBLPRODRTDT(COLNAME,RESULTSID) -> UTBLPRODRT") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLPRODRTDT utblprodrtdt
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblprodrtdt,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Reset Min and Max value based on range

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Reset Min and Max value based on range

	type public RecordUTBLPRODRTDT utblprodrtdt
	do utblprodrtdt.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.

	01/07/2000 - DOUGANM - 31126	
		   Removed one premature quit that made the logic of the code
		   differ from the code prior to PSL conversion.  Added quit
		   commands to the end of a few Runtime error message statements
		   that were missing them.

	09/22/99 - CARROLLJ - 31126
		   Convert to PSL.

	*/	

	type public Boolean ER

	type Date JD,NJD,ZTJD
	type Number i,min,max,zseq,ZRID
	type String di,list(),tab,z,zdel,FRE,ZCOL,ZDFT,ZLIST,ZTYPE

	// List delimiter
	set zdel=";"     
	set ZTJD=%SystemDate
	set ZCOL=utblprodrtdt.colname
	set ZRID=utblprodrtdt.resultsid
	set ZDFT=utblprodrtdt.default

	set tab=ZCOL.piece(".",1)
	set di=ZCOL.piece(".",2)

	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID=:tab,DI=:di",1)

	// Numeric
	set ZTYPE=dbtbl1d.typ if ZTYPE.find("N$DCL") set ZTYPE="N" 

	// Check header record
	type RecordUTBLPRODRT prodrt=Db.getRecord("UTBLPRODRT","COLNAME=:ZCOL,RESULTSID=:ZRID")

	// Invalid Column name or Results ID
	if 'prodrt.getMode() do Runtime.setErrMSG("UTBLPRODRTDT",3659) quit:ER

	if '%ProcessMode,utblprodrtdt.decision'=1 do { if ER quit

		type ResultSet rs=Db.select("DECISION","UTBLPRODRTDT","COLNAME=:ZCOL AND RESULTSID=:ZRID","DECISION DESC")

		if rs.isEmpty() set zseq=0
		else  set zseq=rs.next(),zseq=rs.getCol("DECISION")

		// Next available DECISION number should be ~p1
		if zseq+1'=utblprodrtdt.decision do Runtime.setErrMSG("UTBLPRODRTDT",3666,zseq+1) quit:ER
		}

	//  Invalid default value ~p1
	if ZTYPE="N",ZDFT?.E1A.E do Runtime.setErrMSG("UTBLPRODRTDT",3667,ZDFT) quit:ER 
	if ZTYPE="F",'ZDFT.isNull() do {

		set FRE=ZDFT
		set JD=ZTJD
		set NJD=JD.nextFreqDate(FRE) if ER quit
		}

	set ZLIST=utblprodrtdt.list
	if 'ZLIST.isNull() do { if ER quit

		// Place list in order
		for i=1:1:ZLIST.length(zdel) do { if ER quit

			if ZLIST.piece(zdel,i)="" quit 
			set z=ZLIST.piece(zdel,i)

			if ZTYPE="F" do {

				set FRE=z 
				set JD=ZTJD
				set NJD=JD.nextFreqDate(FRE) if ER quit
				}

			// Invalid list value ~p1
			if ZTYPE="N",z?.e1a.e do Runtime.setErrMSG("UTBLPRODRTDT",3668,z) quit:ER

			// convert to numeric
			if ZTYPE="N" set z=+z
			set list(z)=""
			}

		set z="" set i="" for  set i=list(i).order() quit:i=""  set z=z_zdel_i
		set ZLIST=z.extract(2,9999) 
		set utblprodrtdt.list=ZLIST
		set min=list("").order() 
		set max=list("").order(-1)

		// Reset min and max values

		// First item in the list
		if min'?.e1a.e set utblprodrtdt.rangemin=min
		// Last item
		if max'?.e1a.e set utblprodrtdt.rangemax=max 
		}

	if utblprodrtdt.rangemin'="",utblprodrtdt.rangemax'="" do { if ER quit 

		// Min value > Max value
		if utblprodrtdt.rangemin>utblprodrtdt.rangemax do Runtime.setErrMSG("UTBLPRODRTDT",3669) quit:ER
		}

	if utblprodrtdt.default'="" do { if ER quit

		if ZLIST'="" do { if ER quit

			// Default value is not in the list
			if '(zdel_ZDFT_zdel).find(zdel_ZLIST_zdel) do Runtime.setErrMSG("UTBLPRODRTDT",3673) quit:ER
			}

		// Default value < Min value
		if utblprodrtdt.rangemin'="" if utblprodrtdt.default<utblprodrtdt.rangemin do Runtime.setErrMSG("UTBLPRODRTDT",3670) quit:ER
		// Default value > Max value
		if utblprodrtdt.rangemax'="" if utblprodrtdt.default>utblprodrtdt.rangemax do Runtime.setErrMSG("UTBLPRODRTDT",3671) quit:ER
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPRODRTDT utblprodrtdt

	if utblprodrtdt.colname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("COLNAME", vRM) quit
	set X = utblprodrtdt.resultsid if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("RESULTSID", vRM) quit
	set X = utblprodrtdt.decision if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DECISION", vRM) quit
	if utblprodrtdt.default.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DEFAULT", vRM) quit
	set X = utblprodrtdt.ldate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDATE", vRM) quit
	if utblprodrtdt.list.length()>100 set vRM = $$^MSG(1076,100) do vdderr("LIST", vRM) quit
	set X = utblprodrtdt.ltime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LTIME", vRM) quit
	if utblprodrtdt.luser.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LUSER", vRM) quit
	if utblprodrtdt.rangemax.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RANGEMAX", vRM) quit
	if utblprodrtdt.rangemin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RANGEMIN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRTDT","MSG",979,"UTBLPRODRTDT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLPRODRTDT utblprodrtdt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("COLNAME").exists() set vux("COLNAME") = vx("COLNAME")
	if vx("RESULTSID").exists() set vux("RESULTSID") = vx("RESULTSID")
	if vx("DECISION").exists() set vux("DECISION") = vx("DECISION")
	do vkey(1) set voldkey = utblprodrtdt.colname_","_utblprodrtdt.resultsid_","_utblprodrtdt.decision // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblprodrtdt.colname_","_utblprodrtdt.resultsid_","_utblprodrtdt.decision // Copy new keys into object
	type RecordUTBLPRODRTDT vnewrec = utblprodrtdt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPRODRTDT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLPRODRTDT utblprodrtdt

	if vux("COLNAME").exists() set utblprodrtdt.colname = vux("COLNAME").piece("|",i)
	if vux("RESULTSID").exists() set utblprodrtdt.resultsid = vux("RESULTSID").piece("|",i)
	if vux("DECISION").exists() set utblprodrtdt.decision = vux("DECISION").piece("|",i)
	quit
