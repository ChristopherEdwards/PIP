INVINTPS //Batch BCHINVINTPOS - Investment Sweep Int/Div Posting
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHINVINTPOS Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHINVINTPOS")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHINVINTPOS") quit
 do JOBMGR^BCHUTL(%FN,"BCHINVINTPOS",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHINVINTPOS")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(PSTDT,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHINVINTPOS","*","",PSTDT.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHINVINTPOS",PSTDT.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHINVINTPOS",PSTDT.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,PSTDT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHINVINTPOS","*","",PSTDT.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHINVINTPOS",PSTDT.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,PSTDT,CID) //
	// Initialize variables
	type public Number BRCD,par()
	
	

	type TranSet ts
	set ts=Class.new("TranSet")

	// Each account, get all of the transactions and add them to the 
	// transaction set

	type ResultSet rs
	set rs=Db.select("TSEQ","DAYENDINVINT","PSTDT=:PSTDT and CID=:CID")

	// loop through and build the transaction sets	
	while rs.next() do {
		new TSEQ
		set TSEQ=rs.getCol(1)
		do TRANS(.ts)
		}

	// File the transactions
	set par("IPMODE")=3
	set par("OPTION")=2
	do ts.postTSet(%SystemDate,BRCD,.par)
 
	quit

TRANS(TranSet ts)	// Get the transaction records
	
	type public Number CID,TSEQ
	type public Date PSTDT
	

	type RecordDAYENDINVINT invint=Db.getRecord("DAYENDINVINT","PSTDT=:PSTDT,CID=:CID,TSEQ=:TSEQ")

	// Generate the ttx record
	type RecordTTX ttx
	set ttx=Class.new("RecordTTX")

	set ttx.cid=invint.tcid           // Account Number
	set ttx.itc=invint.itc           // Internal Transaction	
	set ttx.etc=invint.etc           // External Transaction
	set ttx.tamt=invint.tamt         // Transaction Amount
	set ttx.tlo=invint.tlo           // Transaction Location
	set ttx.tcmt=invint.tcmt         // Transaction Comment
	set ttx.tso=invint.tso           // Source of Funds
	set ttx.crcd=invint.crcd         // Currency Code
	if ttx.tcmt="PDO" do PROCCHK(.invint)    // Process check

	set ttx1=ts.copyTran(ttx)
	
	quit


PROCCHK(RecordDAYENDINVINT invint)	// Process a check 

	type public Number AECAMT,CID,INTAMT,JOB,TAMT,TYPE,TRANCD
	type public String CRCD,ETC
	type public Boolean CHECK
		
	

	type RecordDEP dep
	set dep=Db.getRecord("DEP","CID=:CID",1)
	if 'dep.getMode() quit
	set TYPE=dep.type
	set CRCD=dep.crcd
	set AECAMT=dep.aecamt
	set INTAMT=$P(AECAMT,"#",3)     // Interest Amount
	set TAMT=invint.tamt
	set ETC=invint.etc
	set JOB=$J

	do SETTC		// set uo TRANCD array

	// Process Checks
	do XPDO^BCHINTPS(.dep) if 'CHECK quit
	do XPDO2^BCHINTPS(.dep)
	
	do dep.bypassSave()

	quit
	
SETTC	// Initialize product data 
	
	type public String TCB,TRANCD()
	type public Number TYPE	// Transaction code elements 	
	type public Cache %CACHE()
	type RecordPRODCTL prodctl = %CACHE("PRODCTL").getRecord("PRODCTL","TYPE = :TYPE")	
	
	// TCB components:
	set $P(TCB,"|",1)=prodctl.ckint		// Check Type TC
	set $P(TCB,"|",2)=prodctl.dradin	// DR Adj. Accrued Interest TC
	set $P(TCB,"|",3)=prodctl.cradin	// CR Adj. Accrued Interest TC
	set $P(TCB,"|",4)=prodctl.drtrit	// DR Interest Transfer TC
	set $P(TCB,"|",5)=prodctl.drtrip	// DR Interest Paid TC
	set $P(TCB,"|",6)=prodctl.crtrin	// CR Interest Paid TC
	set $P(TCB,"|",7)=prodctl.crtrit	// CR Interest Transfer TC
	set $P(TCB,"|",8)=prodctl.maxadj	// Max Accrual Adjustment amount
	set $P(TCB,"|",9)=prodctl.drtrin	// DR Pos. Interest Paid TC

	set $P(TCB,"|",10)=prodctl.dradni	// DR Neg. Interest Paid TC
	set $P(TCB,"|",11)=prodctl.cradni	// DR Neg. Interest Paid TC
	set $P(TCB,"|",12)=prodctl.dradna	// DR Adj. Neg Accrued Int TC
	set $P(TCB,"|",13)=prodctl.cradna	// CR Adj. Neg Accrued Int TC

	set $P(TCB,"|",14)=prodctl.draai	// DR Accrued Int on Avail Int
	set $P(TCB,"|",15)=prodctl.craai	// CR Accrued Int on Avail Int
	set $P(TCB,"|",16)=prodctl.drpai	// DR Int Posted on Avail Int
	set $P(TCB,"|",17)=prodctl.crpai	// CR Int Posted on Avail Int
  	set $P(TCB,"|",18)=prodctl.drtrdv       // DR Interest Transfer TC
	set $P(TCB,"|",19)=prodctl.crtrdv       // CR Interest Transfer TC
	set $P(TCB,"|",20)=prodctl.crlaf	// Lease Admin. Fee - Credit
	set $P(TCB,"|",21)=prodctl.drlaf	// Lease Admin. Fee - Debit
	
	set $P(TCB,"|",22)=prodctl.draiud       // DR Uncoll Int Accrued TC	//AV
	set $P(TCB,"|",23)=prodctl.craiuc       // CR Uncoll Int Accrued TC	//AV
	set $P(TCB,"|",24)=prodctl.driufd       // DR Uncoll Int Paid TC 	//AV

	set $P(TCB,"|",26)=prodctl.drtrgp       // DR General Purpose TC
	set $P(TCB,"|",27)=prodctl.crtrgp       // CR General Purpose TC

	set $P(TCB,"|",28)=prodctl.drnegacrua   // DR Adj. Neg Accrued Unauth Tran Code
	set $P(TCB,"|",29)=prodctl.crnegacrua	// CR Adj. Neg Accrued Unauth Tran Code

	set $P(TCB,"|",30)=prodctl.dradres      // DR ADJ Residual Interest

	// Defaults (if null)
	if $P(TCB,"|",1)="" set $P(TCB,"|",1)="STND"	       // Check type
	if $P(TCB,"|",4)="" set $P(TCB,"|",4)=prodctl.drtrgp   // DR Int xfer TC
	if $P(TCB,"|",5)="" set $P(TCB,"|",5)=prodctl.drtrgp   // DR Int paid TC
	if $P(TCB,"|",6)="" set $P(TCB,"|",6)=prodctl.crtrgp   // CR Int Paid TC
	if $P(TCB,"|",7)="" set $P(TCB,"|",7)=prodctl.crtrgp   // CR Int Xfer TC
	if $P(TCB,"|",9)="" set $P(TCB,"|",9)=prodctl.drtrgp   // DR Int Paid TC
	if $P(TCB,"|",10)="" set $P(TCB,"|",10)=prodctl.drtrgp // DR Int Paid TC
	if $P(TCB,"|",24)="" set $P(TCB,"|",24)=prodctl.drtrgp // DR Uncoll Int Paid TC	    //AV
	set TRANCD(TYPE)=TCB
	
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,PSTDT,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set PSTDT=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(PSTDT,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,PSTDT,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("PSTDT,CID","DAYENDINVTOP","DAYENDINVTOP.PSTDT=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Number BRCD,CTL,IPCID,SWPDELIP,TSDRCID,TSCRCID
	type public String IPETC,IPITC
	
	do SOURCE^BCHSOURC("INT","INT",.%UserID,.BRCD,.%UserClass,.TSDRCID,.TSCRCID)

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set IPETC=cuvar.ipetc
	
	        // Dividend check G/L offset tran code
	set IPCID=cuvar.ipcid	//Dividend check G/L offset account
        if IPETC="" set IPETC="MCR"
	// IPETC debit/credit 
	type RecordTRN trn=Db.getRecord("TRN","ETC=:IPETC")
	set IPITC=trn.itc
	set IPITC=$e(IPITC)
	set SWPDELIP=0
	set CTL=1

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type public Number BRCD,TSDRCID,TSCRCID
	
	// Add source in scheduler as well as in threads     VCA 10/14/99
	do SOURCE^BCHSOURC("INT","INT",.%UserID,.BRCD,.%UserClass,.TSDRCID,.TSCRCID)

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public Date TPD
	type public Number BRCD
	
	// process offsets
	set TPD=%SystemDate
	do OFFSET^TTXBLD(TPD,BRCD,%UserID,"INTPOST")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
