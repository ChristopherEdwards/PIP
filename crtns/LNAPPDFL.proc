LNAPPDFL(RecordUTBLLNAPPD utbllnappd, String vpar, Boolean vparNorm) // UTBLLNAPPD - New Loan Application/Application to Loan Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Trigger Definition (1)                      11/07/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbllnappd.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utbllnappd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbllnappd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TABLE = utbllnappd.table
	type String COLUMN = utbllnappd.column

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TABLE").exists()!vx("COLUMN").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLLNAPPD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLLNAPPD","TABLE = :utbllnappd.table and COLUMN = :utbllnappd.column") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TABLE
	type public String COLUMN

	type RecordUTBLLNAPPD utbllnappd = Db.getRecord("UTBLLNAPPD","TABLE=:TABLE,COLUMN=:COLUMN")
	if (%ProcessMode = 2) do {
		do utbllnappd.setMode(2)

		do LNAPPDFL(utbllnappd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLLNAPPD utbllnappd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLLNAPPD","TABLE = :utbllnappd.table and COLUMN = :utbllnappd.column") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbllnappd,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbllnappd,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbllnappd))  S ^UTBL("LNAPPD",vobj(utbllnappd,-3),vobj(utbllnappd,-4))=vobj(utbllnappd)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLLNAPPD utbllnappd

	if vpar'["/NOLOG/" do ^DBSLOGIT(utbllnappd,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("LNAPPD",vobj(utbllnappd,-3),vobj(utbllnappd,-4)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLLNAPPD utbllnappd

	// Type local variables for access keys for defaults
	type public String TABLE
	type public String COLUMN

	if utbllnappd.mode.isNull() set utbllnappd.mode = 0    // mode
	quit


vreqn // Validate required data items

	type public RecordUTBLLNAPPD utbllnappd

	if utbllnappd.relcol.isNull() do vreqerr("RELCOL") quit
	if utbllnappd.reltable.isNull() do vreqerr("RELTABLE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLLNAPPD utbllnappd

	if utbllnappd.table.isNull() do vreqerr("TABLE") quit
	if utbllnappd.column.isNull() do vreqerr("COLUMN") quit

		if vx("RELCOL").exists(),utbllnappd.relcol.isNull() do vreqerr("RELCOL") quit
		if vx("RELTABLE").exists(),utbllnappd.reltable.isNull() do vreqerr("RELTABLE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLLNAPPD","MSG",1767,"UTBLLNAPPD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLLNAPPD utbllnappd
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utbllnappd,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before_Insert validation.

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before_Insert validation.

	type public RecordUTBLLNAPPD utbllnappd
	do utbllnappd.setAuditFlag(1)
 /*  	Revision History
	
	12/20/99 - SHANL - 31126
		   Converted M reference to PSL format.

 */            	

	
 	new data,len,typ,ATTRIB,DLEN,DTYP,XTABLE,XCOLUMN,XRELCOL,XRELTABLE
								new XMODE,XFID,XRELFID,exist,rexist
	
								// Get data for the current UTBLLNAPPD record created or modified.
	
								set XTABLE=utbllnappd.table 
	set XCOLUMN=utbllnappd.column 
	set XMODE=utbllnappd.mode
								set XRELCOL=utbllnappd.relcol 
	set XRELTABLE=utbllnappd.reltable
	
	/*
											Verify that the columns specified in COLUMN and  RELCOL are
											acctually belong to the files specified in TABLE and RELTABLE.
											Validate length and data type of the TABLE.COLUMN against 
											corresponding RELTABLE.RELCOL length and data type.
 	*/
	
								// Invalid column link ~p1 to ~p2
								if 'Db.isDefined("DBTBL1D","'SYSDEV',XTABLE,XCOLUMN") do Runtime.setErrMSG("DEP",1305,"XCOLUMN~TABLE") quit:ER
			 
								set ATTRIB=Db.getOneRow("LEN,TYP","DBTBL1D","'SYSDEV',XTABLE,XCOLUMN")    
							 
								// Invalid column link ~p1 to ~p2
								if 'Db.isDefined("DBTBL1D","'SYSDEV',XRELTABLE,XRELCOL") do Runtime.setErrMSG("DEP",1305,"XRELCOL~XRELTABLE") quit:ER
							 
								set data=Db.getOneRow("LEN,TYP","DBTBL1D","'SYSDEV',XRELTABLE,XRELCOL")
							 
	set DLEN=$P(ATTRIB,$C(9),1) 
	set DTYP=$P(ATTRIB,$C(9),2)
							 
	// Get data for the corresponding RELATION data item.
								set len=$P(data,$C(9),1) 
	set typ=$P(data,$C(9),2)
							 
	// "Column attributes must match between files."
								if DLEN<len do Runtime.setErrMSG("DEP",3788) quit:ER
								if DTYP'=typ do Runtime.setErrMSG("DEP",3788) quit:ER
	
								// Verify that tables specify in RELTABLE are: LNAP1, LNAP1OWN or CIF.
	
								if XRELTABLE'="LNAP1",XRELTABLE'="LNAP1OWN",XRELTABLE'="CIF" do { quit:ER
																do Runtime.setErrMSG("DEP",1484,XRELTABLE) quit:ER    
																}

	set utbllnappd.dtype=DTYP
							 
								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLLNAPPD utbllnappd

	if utbllnappd.table.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TABLE", vRM) quit
	if utbllnappd.column.length()>20 set vRM = $$^MSG(1076,20) do vdderr("COLUMN", vRM) quit
	set X = utbllnappd.dtype if 'X.isNull(),'Db.isDefined("DBCTLDVFM","X") set vRM = $$^MSG(1485,X) do vdderr("DTYPE", vRM) quit
	set X = utbllnappd.mode if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MODE", vRM) quit
	if utbllnappd.relcol.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RELCOL", vRM) quit
	if utbllnappd.reltable.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RELTABLE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLLNAPPD","MSG",979,"UTBLLNAPPD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLLNAPPD utbllnappd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TABLE").exists() set vux("TABLE") = vx("TABLE")
	if vx("COLUMN").exists() set vux("COLUMN") = vx("COLUMN")
	do vkey(1) set voldkey = utbllnappd.table_","_utbllnappd.column // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utbllnappd.table_","_utbllnappd.column // Copy new keys into object
	type RecordUTBLLNAPPD vnewrec = utbllnappd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLLNAPPD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLLNAPPD utbllnappd

	if vux("TABLE").exists() set utbllnappd.table = vux("TABLE").piece("|",i)
	if vux("COLUMN").exists() set utbllnappd.column = vux("COLUMN").piece("|",i)
	quit
