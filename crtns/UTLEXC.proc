UTLEXC	
	/*   Log Errors into ^DAYEND Exception File
	
	       ORIG:  Allan R. Mattson (6915) - 12/11/87
	       DESC:

	  ---- Revision History ----------------------------------------------
	  
	   09/28/05 - RussellDS - CR17311
	   	      Modify DAYENDEXC.SEQ to ensure unique number between
	   	      processes to avoid collisions.

	   07/07/05 - KELLYP - CR 16543
		      Modified to only save the DAYENDEXCR record if it 
		      doesn't already exist to prevent an RDBSAVEFAIL error.  
		      Also modified to rollback the creation of the DAYENDEXCR
		      record if the creation of the DAYENDEXC record fails. 
		      Also modified DAYENDEXC code to save ET to DAYENDEXC.ET
		      and to save ZE to DAYENDEXC.MISC (instead of the other
		      way around).

	   02/01/05 - SmithCD - 13661
	   	      Fixed infinite loop situation that caused stackcrit 
	   	      error. %SystemDate/TJD was not defined, so changed 
	   	      reference to cuvar.tjd. Cleaned up compiler warnings 
	   	      and modified to conform to current standards.

	   02/28/02 - SIVCHUKA - 43583
	              Converted to PSL.
		      Remove pre-2001 revision history.

	*/
	
	quit

public LOG(String PROC,		// Process ID				/REQ
	   String SORT,		// Sort key
	   String DESC,		// Description
	   Number CID,		// Account number
	   String ZE,		// $$ETLOC^%ZT (if system error)
	   String ET,		// Error type (^STBL("ER",et))
	   Number BAL)		// BAL Account balance
	/*
	Log exceptions into DAYENDEXC
	*/

	type public String %FN

	type String FN
	type Number SEQ
	type Date JD
	
	do Runtime.start("CS","","EXCPTR")

	// CUVAR needs to be retrieved explicitly to prevent
	// issues during backdating (TJD may be redefined).
	type RecordCUVAR cuvar = Db.getRecord("CUVAR")
	
	set JD = cuvar.tjd

	set FN = %FN.get()
	if FN.isNull() set FN = PROC
	if SORT.get().isNull() set SORT = "*"

	catch Error {
		// Rollback DAYENDEXCR record if error occurs
		// during creation of DAYENDEXC record.
		do Runtime.rollback("EXCPTR")
		}
	
	// Create header for this function, if necessary
		
	type RecordDAYENDEXCR deexcr = Db.getRecord("DAYENDEXCR","TJD=:JD,RTN=:FN",1)

	// Record does not already exists
	if (deexcr.getMode() = 0) do {
			
		set DESC = DESC.get()
		
		if DESC.isNull(),'%FN.get().isNull() do {
			type RecordSCATBL scatbl = Db.getRecord("SCATBL", "FN=:FN")
			set DESC = scatbl.desc
		}
		
		set deexcr.desc = DESC.piece("|", 1)
		set deexcr.usebal = DESC.piece("|", 2)
		
		do deexcr.bypassSave()
	}
	
	// Get unique sequence number - be sure not used by this process already
	for  do { quit:'SEQ.isNull()
	
		set SEQ = $$GETSEQ^SQLDD
		if Db.isDefined("DAYENDEXC", "TJD=:JD,RTN=:FN,SORT=:SORT,SEQ=:SEQ") do {
			set SEQ = ""
			hang 1
		}
	}

	// Create detail record
	type RecordDAYENDEXC deexc = Class.new("RecordDAYENDEXC", "TJD=:JD,RTN=:FN,SORT=:SORT,SEQ=:SEQ")
	set deexc.recid = CID.get()
	set deexc.et = ET.get()
	set deexc.misc = ZE.get()
	set deexc.time = %CurrentTime
	set deexc.bal = BAL.get()
	set deexc.rou = PROC
	do deexc.bypassSave()
	
	do Runtime.commit()

	quit

vSIG()	quit "60172^71792^Dan Russell^2960"	// Signature - LTD^TIME^USER^SIZE
