LNDS1FIL(RecordLNDS1 lnds1, String vpar, Boolean vparNorm) // LNDS1 - Loan Disbursement Schedule Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              02/09/2006
	// Trigger Definition (4)                      05/31/2006
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnds1.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnds1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnds1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnds1.cid
	type String SDD = lnds1.sdd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SDD").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNDS1",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNDS1","CID = :lnds1.cid and SDD = :lnds1.sdd") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SDD

	type RecordLNDS1 lnds1 = Db.getRecord("LNDS1","CID=:CID,SDD=:SDD")
	if (%ProcessMode = 2) do {
		do lnds1.setMode(2)

		do LNDS1FIL(lnds1,vpar)
	}
	else  do VINDEX(lnds1)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNDS1 lnds1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNDS1","CID = :lnds1.cid and SDD = :lnds1.sdd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnds1))  S ^ACN(vobj(lnds1,-3),90,vobj(lnds1,-4))=vobj(lnds1)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnds1)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lnds1) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNDS1 lnds1

	if vpar["/INDEX/" do VINDEX(.lnds1)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lnds1)                // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACN(vobj(lnds1,-3),90,vobj(lnds1,-4))             // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNDS1 lnds1

	// Type local variables for access keys for defaults
	type public String CID
	type public String SDD

	if lnds1.sdm.isNull() set lnds1.sdm = 1                // sdm
	quit


vreqn // Validate required data items

	type public RecordLNDS1 lnds1

	if lnds1.sdm.isNull() do vreqerr("SDM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNDS1 lnds1

	if lnds1.cid.isNull() do vreqerr("CID") quit
	if lnds1.sdd.isNull() do vreqerr("SDD") quit

		if vx("SDM").exists(),lnds1.sdm.isNull() do vreqerr("SDM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNDS1","MSG",1767,"LNDS1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNDS1 lnds1
	if 'lnds1.cid.isNull() set vfkey("^ACN("_""""_lnds1.cid_""""_","_50_")")="LNDS1(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNDS1 lnds1
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnds1.cid") set vERRMSG = $$^MSG(8563,"LNDS1(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("SDA").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert and verification

	type public RecordLNDS1 lnds1
	/*
	----Revision History---------------------------------------------------

	05/09/06 - Dhanalakshmi R - 21105
		   Modified to use Db.getRecord with getmode instead
		   of Db.insert for DAYENDLNNOT.

	09/15/99 - CARROLLJ - 31126
		   Convert to PSL.
	
	11/07/00 - VETSENM - 40379
	           Insert values into the DAYENDLNNOT if LN.GENPRJREP="Y" 

	*/


	new CLMD1,MDT1,SDD1,TBA,XCID
	set XCID=lnds1.cid
	set data=Db.getOneRow("MDT,CLMD,CRLMT,REVF","LN","XCID")
	//Check disbursement date validation
	if ($P(data,$C(9),1)'=""),(lnds1.sdd'<$P(data,$C(9),1)) do {
		set SDD1=$$DAT^%ZM(lnds1.sdd,%MSKD) 
		set MDT1=$$DAT^%ZM($P(data,$C(9),1),%MSKD)
		//Disbursement date is on or after account maturity date.
		do Runtime.setErrMSG("LNDS1",1351,"SDD1~MDT1") quit:ER 
		}
	
	if ($P(data,$C(9),2)'=""),(lnds1.sdd'<$P(data,$C(9),2)) do {
		set SDD1=$$DAT^%ZM(lnds1.sdd,%MSKD) 
		set CLMD1=$$DAT^%ZM($P(data,$C(9),2),%MSKD)
		//Disbursement date is on or after credit limit maturity date.
		do Runtime.setErrMSG("LNDS1",8426,"SDD1~CLMD1") quit:ER 
		}
	
	if %ProcessMode=2 do {
		// if REVF don't review credit limit
		if $P(data,$C(9),4) quit           
		new rs 
		type ResultSet rs=Db.select("SDA","LNDS1","CID=:XCID")
		set TBA=0
		if rs.isEmpty() quit
		while rs.next() set TBA=TBA+rs.getCol(1) 
		if TBA>$P(data,$C(9),3) do Runtime.setErrMSG("LNDS1",8369) quit:ER 
		}

								type ResultSet relcnt=Db.select("GENPRJREP,ODT","LN","CID=:lnds1.cid")
								for  quit:'relcnt.next()  do {

																if (relcnt.getCol("GENPRJREP")=1),(relcnt.getCol("ODT")<%SystemDate) do { quit:ER

                	type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnds1.cid,ID=4",1)
	                if 'lnnot.getMode() do lnnot.bypassSave()
																}
								}
								quit

vau1 // Trigger AU_SDA - After Update trigger for column SDA

	type public RecordLNDS1 lnds1
 	/*---------- Revision History ------------------------------------------

 	05/09/06 - Dhanalakshmi R - 21105
																						Modified to use Db.getRecord with getmode instead
																						of Db.insert.
	
 	11/07/00 - VETSENM - 40359 
																						If LN.GENPRJREP is set to "Yes" than an entry will be set
																						into the table DAYENDLNNOT.

	12/11/00 - VETSENM- 43111
		Replaced getrecord method with getOneRow method	
	*/


	type public RecordLNDS1 lnds1
	type RecordLN ln=Db.getRecord("LN","CID=:lnds1.cid")

	if ln.genprjrep=1 do {

		type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnds1.cid,ID=4",1)
		if 'lnnot.getMode() do lnnot.bypassSave()
	}
	quit

vau2 // Trigger AU_SDD - After Update trigger for SDD column.

	type public RecordLNDS1 lnds1
								/*---------- Revision History------------------------------------------

									05/09/06 - Dhanalakshmi R - 21105
														Modified to use Db.getRecord with getmode instead of Db.insert.

									11/07/00 - VETSENM - 40359
														Insert values into the DAYENDLNNOT if LN.GENPRJREP="Y"
								*/
	

	type public RecordLNDS1 lnds1
	type RecordLN ln=Db.getRecord("LN","CID=:lnds1.cid")

	if ln.genprjrep=1 do {

		type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnds1.cid,ID=4",1)

		if 'lnnot.getMode() do lnnot.bypassSave()
	}
	quit

vbu1 // Trigger BU_LNDS - Check date validation

	type public RecordLNDS1 lnds1
	do lnds1.setAuditFlag(1)

	new data,CLMD1,MDT1,SDD1
	set XCID=lnds1.cid
	set data=Db.getOneRow("MDT,CLMD","LN","XCID")
	//Check disbursement date validation
	if ($P(data,$C(9),1)'=""),(lnds1.sdd'<$P(data,$C(9),1)) do {
		set SDD1=$$DAT^%ZM(lnds1.sdd,%MSKD) 
		set MDT1=$$DAT^%ZM($P(data,$C(9),1),%MSKD)
		//Disbursement date is on or after account maturity date.
		do Runtime.setErrMSG("LNDS1",1351,"SDD1~MDT1") quit:ER 
		}
	
	if ($P(data,$C(9),2)'=""),(lnds1.sdd'<$P(data,$C(9),1)) do {
		set SDD1=$$DAT^%ZM(lnds1.sdd,%MSKD) 
		set CLMD1=$$DAT^%ZM($P(data,$C(9),1),%MSKD)
		//Disbursement date is on or after credit limit maturity date.
		do Runtime.setErrMSG("LNDS1",8426,"SDD1~CLMD1") quit:ER 
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNDS1 lnds1

	set X = lnds1.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = lnds1.sdd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SDD", vRM) quit
	if lnds1.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = lnds1.expdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPDT", vRM) quit
	set X = lnds1.repymt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNDS1.REPYMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnds1.sda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNDS1.SDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnds1.sdm if 'X.isNull(),'Db.isDefined("STBLSDM","X") set vRM = $$^MSG(1485,X) do vdderr("SDM", vRM) quit
	set X = lnds1.sds if 'X.isNull(),'Db.isDefined("STBLSDS","X") set vRM = $$^MSG(1485,X) do vdderr("SDS", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNDS1","MSG",979,"LNDS1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNDS1 lnds1)	//LNDS1 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnds1)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lnds1)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lnds1)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lnds1)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.lnds1)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.lnds1)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordLNDS1 lnds1)	// HIST_DELETE  Table HIST  History for record deletion

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnds1.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(4147,$$DAT^%ZM(lnds1.sdd))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNDS1 lnds1)	// HIST_INSERT  Table HIST  History for record insertion

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnds1.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(4146,$$DAT^%ZM(lnds1.sdd))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNDS1 lnds1)	// HIST_UPDATE  Table HIST  History for record update

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnds1.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnds1.cid_","_lnds1.sdd,"LNDS1",vdi,vold,vnew,$G(EFD),$$DAT^%ZM(lnds1.sdd),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordLNDS1 lnds1) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.lnds1)

	quit
	

vi1(RecordLNDS1 lnds1) // Maintain DYLNDS index entries (Loan Disb. Sch. Dayend Record)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lnds1.sdd
	type String v3 = lnds1.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^ACN(vobj(lnds1,-3),90,vobj(lnds1,-4)))#2,'$D(^DAYEND(v1,"LNDS",v3)) do vidxerr("DYLNDS")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"LNDS",v3)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"LNDS",v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNDS1")

	while ds.next() do {
		type RecordLNDS1 lnds1=ds.getRecord("LNDS1")
		if vlist.contains("VINDEX") do VINDEX(.lnds1) quit
		if vlist.contains("DYLNDS") do vi1(.lnds1)
	}

	quit


public VIDXBLD1(RecordLNDS1 lnds1, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lnds1) quit
	if vlist.contains("DYLNDS") do vi1(.lnds1)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNDS1","MSG",1225,"LNDS1."_di)

	quit


vkchged // Access key changed

	type public RecordLNDS1 lnds1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SDD").exists() set vux("SDD") = vx("SDD")
	do vkey(1) set voldkey = lnds1.cid_","_lnds1.sdd       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" if vx("SDD").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnds1.cid_","_lnds1.sdd       // Copy new keys into object
	type RecordLNDS1 vnewrec = lnds1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNDS1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do {
		do VAU
		if vx("SDD").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNDS1 lnds1

	if vux("CID").exists() set lnds1.cid = vux("CID").piece("|",i)
	if vux("SDD").exists() set lnds1.sdd = vux("SDD").piece("|",i)
	quit

VIDXPGM()	quit "LNDS1FIL"	// Location of index program

