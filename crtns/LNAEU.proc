LNAEU	
	/*
		Auto Escrow Balance Changes


	   ORIG: GORMAN
	   DESC:
	
	  ---- Revision History ------------------------------------------------
	  
	  02/03/06 - SWARNALP - CR18338
		Modified section TR to pass ttx object as parameter instead of 
		declaring, instantiating and passing a new object ttxpri.
		Modified section ESC0 to use the escrow account and loan account 
		in appropriate places.
		Modified section EXEC to declare acn object to resolve 
		undefined error for acn object in CREATE^LNTRB.
		Modified CID section to pass Escrow CID as parameter while 
		going into the exception EXC and modified EXC section to accept 
		escrow account number as input.
		Modified DTL1 section and included a temporary fix to force 
		loading node 15	while getting the record of PRODCTL table.
	  
	  08/02/05 - KUMARB - CR16684
		Modified section CID, changed the table name LCOMACN 
		to LN in Db.select
		
	  12/08/03 - CARROLLJ - CR7239
	  		 Corrected parameter mismatch errors.
	
	  11/12/02 - CARROLLJ - 43583
		     Convert to PSL.	

	  ----------------------------------------------------------------------
	
	*/
	quit 
	
	
public EXEC(RecordLN ln,RecordTTX ttx,CID,CTL,SEQ,%EffectiveDate,AEUO,AUADJ)	// Single Account Access

	/*
	
	   ARGUMENTS:
	
	   . CID   Account Number				/REQ/TYP=N/MECH=VAL
	
			   The subject loan account.  Utility returns the
			   list of transactions required to adjust this
			   loan account to the appropriate balance.
	
	   . CTL     Control					/NOREQ/TYP=T/MECH=VAL
	
			   Position 1 - 0) Indicates that TR array should not
					   be created with adjustment
					   transactions.
	
					1) Indicates that TR array should be
					   created with adjustment transactions.
					   Both primary (loan) and secondary
					   (escrow) transactions returned.
					   This option will be used when called
					   via transaction processing routines.
	
					2) Indicates that TR array should be
					   created with adjustment transactions.
					   Only primary (loan) transactions
					   are returned.  This option will be
					   used when called from batch processes
					   such as the on-demand escrow update
					   routines.
	
			   Position 2 - Value indicates whether (1) or not (0)
					exception conditions should be recorded
					in the standard exception file
					^DAYEND(,"EXC".  Bit will normally be
					turned on when called from a batch
					process such as the on-demand auto
					escrow process.
	
			   Position 3 - Value indicates whether (1) or not (0)
					arrays "A" and "%A" should be "N"ewed
					prior to processing.  It is expected
					that bit will be turned on in batch
					and not in on-line transaction mode.
	
			   Position 4 - Indicates whether (1) or not (0)
					utility should return array ADJ
					with information necessary for
					on-demand process extract.
	
					Array will be in the structure:
					ADJ(CID)= Balance | Adjustment
					ADJ(ECID)= Bal | Adj | TRTYPE
	
			   Position 5 - 0) On-line auto escrow adjustment
					   field [DEP]AUTAF should be used.
	
					1) On-demand auto escrow adjustment
					   field [DEP]ODEAO should be used.
	
	   . SEQ     Primary sequence number			/NOREQ/TYP=N/MECH=VAL
	
			   If passed, and $E(CTL)=1, then transactions generated
			   will be offset from this starting sequence number.
	
	   . EFD     Effective Date				/NOREQ/TYP=D/MECH=VAL
	
			   The effective date of the returned transactions.
			   Do not pass if transactions are not required or
			   if effective date is same as system date.
	
	   . AEUO    Override escrow update code		/NOREQ/TYP=N/MECH=VAL
	
			   If passed, value will be use in place of [DEP]AUTAF
			   found in escrow records.
	
	   . AUADJ   Adjustment amount				/NOREQ/TYP=N/MECH=VAL
	
			   Required only if total adjustment amount is needed.
			   It is expected that this will be used for computed
			   data item designed to return this information.
	
	
	*/
	
	type public Number TR
	
	type RecordACN acn={RecordACN}ln

	set CTL=$G(CTL)
	set SEQ=$G(SEQ)
	set AEUO=$G(AEUO)
	new ER,FROMCALC,NEEDAGG,SAVCID,TMP

	set ER=0
	set SAVCID=CID 
	set NEEDAGG=0 
	set FROMCALC=0
	
	if $E(CTL,3)
	if $E(CTL,4) kill ADJ
	
	set AUADJ=$$CID(.ln,.ttx) quit:ER
	
	if $E(CTL,4) do {
		Type RecordACN acn=Db.getRecord("ACN","CID")
		set BAL=acn.bal
		set ADJ(CID)=BAL
		set $P(ADJ(CID),"|",2)=AUADJ
		set $P(ADJ(CID),"|",3)=Db.nextVal("HIST","CID")
		}
	
	if NEEDAGG set CID=SAVCID
	
	quit 
	
	
CID(RecordLN ln,RecordTTX ttx)

	type public Number ECID
	
	new AUTAF,BALCMP,BIL,CCL,DRCR,EADJ,EDIF,ELE,EFLG,ENTF,I,ITC,P,SCID
	new TAMT,TBAL,TGT,TRACN,TSO,TYPE

	set EFLG1=0
	
	set ER=0
	if ER quit 0
	
	// Check to see if account is closed
	if ln.stat=4 quit 0	

	// Auto Escrow Update - Processing Option
	set AUO=ln.auo
	
	// Check to see if account is coded for Auto Escrow Update
	if 'AUO quit 0
	
	// Check to see if processing specifically disabled by user
	if AEUO'="",AEUO'>0 quit 0
	
	/*
	Determine if this account is a carve-out loan with
	out any escrow accounts or with an escrow account that
	does not implement escrow update functionality.  Or
	if this account is a master loan with a carve-out loan
	that meets the above conditions.  If this is true, this
	account require an aggragrate escrow balance adjustment.
	*/

	set NEEDAGG=0
	set CCL=ln.ccl

	/*
	Determine if this account is linked to a commitment
	if not continue with processing - does not require an adjustment
	*/
	if CCL do {
	
		// Determine if this account is a master loan (TRACN is "")
		set TRACN=ln.tracn
	
		/*
		Determine if an adjustment is needed based on the escrow
		accounts attached to the carve-outs linked to this master
		account. Build the TMP array holding the balances.
		*/
		if 'TRACN do { quit 
			new MCID
			set MCID=CID 
			set CIDSAV=CID 
			Type ResultSet rs=Db.select("CID","LN","CCL=:CCL AND TRACN=:MCID")
			if rs.isEmpty() while rs.next() do {
				set CID=rs.getCol(1)
				do AGGESC(.ln)
				}
			if NEEDAGG set CID=MCID do MSTESC(.ln)
			}
	
		/*
		Determine if an adjustment is needed based on the escrow
		accounts attached to this carve-out
		*/
		do AGGESC(.ln)
	
		/*
		Build the TMP array for the TRACN (the master acct) that
		this account is linked to
		*/
		if NEEDAGG do {
			kill TMP(CID)
			set CID=""
			Type ResultSet rs=Db.select("CID","LN","CCL=:CCL AND TRACN=:MCID")
			if rs.isEmpty() while rs.next() do {
				set CID=rs.getCol(1)
				do AGGESC(.ln)
				}
			set CID=TRACN do MSTESC(.ln)
			}
		}
	
	set TYPE=ln.type
	set ENTF=ln.entf
	
	// Ensure that percent of balance required is greater than zero
	if ln.aupbr'>0 quit 0
	
	/*
	Get total escrow balance to be included in adjustment calculation
	If an aggregate adjustment is need set BALCMP
	*/
	if NEEDAGG set EFLG=1 do CALCAGG(.ln)
	else  do ESC0

	/*
	Get the balance for this loan if and aggregrate
	adjustment is not needed
	*/
	if 'NEEDAGG do {
		// Payoff candidate if no balance so no adjustment necessary
		set BALCMP=ln.bal
		if ln.aruf set BALCMP=BALCMP-ln.udbal
		}
	
	if 'BALCMP do { quit 0
		if '$E(CTL,2) quit
		do EXC("AUBAL",ECID)
		}
	
	// All included escrow accounts closed or none designated
	if 'EFLG do { quit 0
		if '$E(CTL,2) quit
		do EXC("AUNOESC")
		}
	
	// No target escrow account found
	if '$D(TGT) do { quit 0
		if '$E(CTL,2) quit
		do EXC("AUNOTGT")
		}
	
	/*
	EDIF represents the difference between required and actual escrow
	balances.  If negative, the actual escrow balance exceeds the
	required escrow balance and will be decreased if the loan allows.
	If positive, the actual escrow balance is less than the
	required escrow balance and will be increased if the loan allows.
	*/

	set EDIF=BALCMP*(ln.aupbr/100)-TBAL
	
	// DECREASE - Debit escrow balance, credit loan
	if EDIF<0 set DRCR=0

	// INCREASE - Credit escrow balance, debit loan
	else  set DRCR=1
	
	/*
	Roll through TGT array and only keep TGT entry if appropriate.  The
	value of TGT(N) is equal to the value of [DEP]AUTAF for the escrow
	account.  If AUTAF is equal to "1", all transactions are allowed.
	If equal to "2", then only increase transactions are allowed.  If
	equal to "3", then only decrease transactions are allowed.
	*/
	set N="" for  set N=$O(TGT(N)) quit:N=""  do {
	
		// Only increase transactions allowed but this is a decrease
		if TGT(N)=2,'DRCR kill TGT(N)
	
		// Only decrease transactions allowed but this is a increase
		if TGT(N)=3,DRCR kill TGT(N)
		}
	
	// We may have deleted all of the target accounts.
	if '$D(TGT) quit 0
	
	/*
	Calculate EADJ, the amount necessary to adjust escrow and loan
	balances before consideration of any limits.
	*/
	set EADJ=EDIF+(EDIF*((1/(1-(ln.aupbr/100)))-1))
	set EADJ=$$^SCARND(EADJ,0,CID)
	if EADJ<0 set EADJ=EADJ*-1
	
	// No adjustment necessary
	if 'EADJ quit 0
	
	set SCID=CID
	
	// Build adjustment transactions
	do DTL(.ttx)
	
	// Entire adjustment could not be applied to escrow accounts
	if EADJ>0,$E(CTL,2) do EXC("AUPCT")
	
	if 'DRCR set AUADJ=AUADJ*-1
	quit AUADJ
	

ESC0 // First get escrow account numbers

	/*
	   EFLG = Flag indicating whether or not includable accounts are found
	   TBAL = Total escrow balance associated with auto-escrow processing
	*/
	
	type public Number ECID
	
	set (EFLG,TBAL)=0
	
	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:CID")			
	new ESCACT
	set ELENUM=0
	for  set ESCACT=$$ESCACT^BILFUNCS(.lnbil0,.ELENUM) quit:ESCACT=""  do {
		set ECID=$P(ESCACT,$C(9),1)
		type RecordDEP dep=Db.getRecord("DEP","CID=:ECID")


		// Ignore closed escrow accounts
		if dep.stat=4 quit
	
		/*
		If [DEP]AUTAF is defined, set into TGT array as a possible
		target account.  At this point, we don't know if transaction
		will be increase or decrease so can't definitively determine
		whether or not account is a target.

		Determine whether to use on-line indicator ([DEP]AUTAF)
		or on-demand indicator ([DEP]ODEAO).
		*/
		if '$E(CTL,5) set A=dep.autaf
		else  set A=dep.odeao
		if A set:AEUO A=AEUO set TGT(ECID)=A
	
		/*
		Determine whether account balance should be included based
		upon AUBBF.  (If AUBBF=0, balance is not be ignored.)
		*/
		if 'dep.aubbf quit 
	
		// We've got an account to include.
		set EFLG=1
	
		set TBAL=TBAL+dep.bal
		}
		
	quit 


AGGESC(RecordLN	ln) // Determine if an Aggregate Escrow Adjustment is needed

	/*
	   This sub-routines determines if an Aggregate Escrow Balance
	   adjustment is needed.  If it is needed it will build the TMP
	   array which will later be used to determine the actual adjustment
	   amount.
	
	   BIL needs to be set before calling this sub-routine
	
	*/
	
	new LNCID 
	set LNCID=CID
	set ER=$G(ER)

	set TMP(LNCID)=ln.bal

	new lnbil0
	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:LNCID")			
	new ESCACT
	set ELENUM=0
	for  set ESCACT=$$ESCACT^BILFUNCS(.lnbil0,.ELENUM) quit:ESCACT=""  do {
		set CID=$P(ESCACT,$C(9),1)

		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

		// Ignore closed escrow accounts
		if dep.stat=4 quit	

		/*
		Determine whether to use on-line indicator ([DEP]AUTAF)
		or on-demand indicator ([DEP]ODEAO).
		*/
		if '$E(CTL,5) set A=dep.autaf
		else  set A=dep.odeao

		/*
		Determine if control is on-line and on-line flag is set
		(then it is set for On-line updating and an adjustment
		is not needed) or if control is on-demand and the on-demand
		flag is set.  If it is set then Automatic updating exists
		on this account and an aggregate adjustment is not needed
		for this carve-out or master loan.
		*/
		if A kill TMP(LNCID)  quit 
	
		/*
		Determine whether account balance should be included based
		upon AUBBF.  (If AUBBF=0, balance is not be ignored.)
		*/
		if 'dep.aubbf quit 
	
		// Write an entry in the TMP array
		set TMP(LNCID,CID)=dep.bal
		}
	
	if $D(TMP(LNCID)) set NEEDAGG=1
	quit 

	
MSTESC(RecordLN	ln) // Set up TMP array with the values from the Master Escrow Accounts

	/*
	   This sub-routines set up the necessary entries in the TMP array
	   for the master account that needs an Aggregate Escrow Balance
	   Adjustment.
	
	*/
	
	new LNCID 

	set LNCID=CID
	set ER=$G(ER)
	set TMP(CID)=ln.bal
	
	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:LNCID")			
	new ESCACT
	set ELENUM=0
	for  set ESCACT=$$ESCACT^BILFUNCS(.lnbil0,.ELENUM) quit:ESCACT=""  do {	
		new CID
		set CID=$P(ESCACT,$C(9),1)

		// Accumulate total escrow balance to be included
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

		// Ignore closed escrow accounts
		if dep.stat=4 quit

		/*
		Determine whether account balance should be included based
		upon AUBBF.  (If AUBBF=0, balance is not be ignored.)
		*/
		if 'dep.aubbf quit 

		// Write an entry in the TMP array and the TGT array
		set TGT(CID)=1
		set TMP(LNCID,CID)=dep.bal
		}
	quit 

	
CALCAGG(RecordLN ln) // Calculate some totals for the Aggregate Escrow Balance Adjustment


	/*
	   This sub-routines calculates the balance of the escrow accounts
	   and the master and carve-out loan accounts.  These totals are
	   used for the Aggregate Escrow Balance Adjustment
	
	*/
	
	new ESCCID,CID
	set CID="" set BALCMP=0 set TBAL=0
	for  set CID=$O(TMP(CID)) quit:CID=""  do {
	
		// Payoff candidate if no balance so no adjustment necessary
		Type RecordLN ln1=Db.getRecord("LN","CID")
		if ln1.aruf set TMP(CID)=(TMP(CID))-(ln1.udbal)
	
		// Calculate the balance for the master loan and the carve-outs
		set BALCMP=BALCMP+TMP(CID)
		set ESCCID=""
		for  set ESCCID=$O(TMP(CID,ESCCID)) quit:ESCCID=""  do {
			// Calculated the balance for all the escrow accounts
			set TBAL=(TBAL)+(TMP(CID,ESCCID))
			}
		}
	
	quit 
	


DTL(RecordTTX ttx)	// Process target escrow account(s)

	set AUADJ=0
	new CID set CID=""
	for  set CID=$O(TGT(CID)) quit:CID=""  do DTL1(CID,.ttx) if EADJ=0 quit 
	quit 

	
DTL1(CID,RecordTTX ttx)	// Collate through TGT array, build adjustment transaction for escrow
	
	 
	new DRCRINC
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	// Define incremental limit as either incremental DR or CR as apprpriate
	set DRCRINC=$S(DRCR:dep.inccr,1:dep.incdr)
	
	/*
	Initializes some values for processing the adjustment
	on the master loan and not the original account, which
	is a carve-out linked to this master
	*/	
	
	// Initialize transaction amount to total adjustment amount
	set TAMT=EADJ
	
	// Credit (Decrease) transaction
	if DRCR=1 do CR(.dep)
	
	// Debit (Increase) transaction
	if DRCR=0 do CKBAL do DR(.dep)
	
	// No transaction
	if 'TAMT quit 
	
	// Reduce adjustment by amount applied to this escrow account
	set EADJ=EADJ-TAMT
	
	// Total adjustment amount
	set AUADJ=AUADJ+TAMT
	
	// Create transactions
	if $E(CTL) do {
	
		// Ecrow adjustment transaction
		type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE")
		
		// temporary fix to force loading of node 15:
		type String dummy = prodctl.crtreuec

		set CRCD=prodctl.pmcrcd
		if DRCR=0 do {
			if prodctl.drtreued'="" set ETC=prodctl.drtreued quit 
			else  set ETC=prodctl.drtrts
			}
		else  if DRCR=1 do {
			if prodctl.crtreuec'="" set ETC=prodctl.crtreuec quit 
			else  set ETC=prodctl.crtrts
			}
	
		/*
		Set TSO "AEUO" value so that error correct logic
		knows to skip transaction.
		*/
		kill TSO
		set TSO("AEUO")=AUO
		set XTSO("ESC")=dep.esc
		do IN^UTSO(.XTSO,.TSO)
		do TR(SCID,ETC,.ttx)
	
		if $E(CTL)=1!($E(CTL,4)) do {
			kill TSO
			new TRTYPE
			set TRTYPE=dep.esc
			if $E(CTL,4) do {
				new AMT
				set AMT=TAMT if 'DRCR set AMT=AMT*-1
				set $P(ADJ(CID),"|",1)=dep.bal
				set $P(ADJ(CID),"|",2)=AMT
				set $P(ADJ(CID),"|",3)=TRTYPE
				}
	
			if $E(CTL)'=1 quit 
	
			/*
			Escrow adjustment transaction - escrow account
			(needed for on-line processing.  Not needed when
			transactions are generated in batch.)
			*/
	
			if DRCR=0 set ETC=prodctl.drtrts
			else  if DRCR=1 set ETC=prodctl.crtrts
			set XTSO("ESC")=TRTYPE
			do IN^UTSO(.XTSO,.TSO)
			do TR(CID,ETC,.ttx)
			}
	
		// Loan adjustment transaction
		kill TSO
		if DRCR=0 do {
			if prodctl.crtreuec'="" set ETC=prodctl.crtreuec quit 
			else  set ETC=prodctl.crtrpr
			}
		else  if DRCR=1 do {
			if prodctl.drtreued'="" set ETC=prodctl.drtreued quit 
			else  set ETC=prodctl.crtrgp
			}
	
		if ENTF'="" do {
			/*
			Define loan budget code (AUBCU) that should be updated to recognize
			source of repayment funds (decrease) or use of borrowed funds
			(increase).
			*/
	
			// Increase transaction - define budget use code
			if DRCR=1 set TSO("LBUDU")=dep.aubcu
	
			// Decrease transaction - define budget source code
			else  set TSO("LBUDS")=dep.aubcu
			}
	
		// Set TSO "AEUO" value so that error correct logic knows to skip tran
		set XTSO("AEUO")=AUO
		do IN^UTSO(.XTSO,.TSO)
	
		do TR(SCID,ETC,.ttx)
		}
	
	quit 

	
DR(RecordDEP dep)	// Compare adjustment amount to MINDR, MAXDR, MINBAL, INCDR
     
        type public Number CID
	
	// No transaction if adjustment is less than minimum transaction allowed
	if TAMT<dep.mindr set TAMT=0 quit 
	
	// Use maximum credit if adjustment is greater than maximum
	if dep.maxdr,TAMT>dep.maxdr set TAMT=dep.maxdr
	
	// Do not allow balance to go below minimum allowed
	if dep.minbal,dep.bal-TAMT<dep.minbal set TAMT=TAMT-(dep.minbal-(dep.bal-TAMT))
	
	/*
	Account balance may have been less thant MINBAL before transaction.
	If this is the case, transaction amount should now be -0-.
	*/
	if TAMT<0 do { quit 
		set TAMT=0
		if $E(CTL,2) do EXC("AUTBZ")
		}
	
	// Do not allow balance to go below zero
	if dep.bal-TAMT<0 set TAMT=dep.bal
	
	// Consider incremental amount
	if DRCRINC,TAMT#DRCRINC set TAMT=TAMT-(TAMT#DRCRINC)
	quit 

	
CR(RecordDEP dep)	// Compare adjustment amount to MINCR, MAXCR, MAXBAL, INCCR

        type public Number CID
	
	// No transaction if adjustment is less than minimum transaction allowed
	if TAMT<dep.mincr set TAMT=0 quit 
	
	// Use maximum credit if adjustment is greater than maximum
	if dep.maxcr,TAMT>dep.maxcr set TAMT=dep.maxcr
	
	// Consider incremental amount
	new F 
	set F=0
	if dep.maxbal,dep.bal+TAMT>dep.maxbal set TAMT=TAMT-((dep.bal+TAMT)-dep.maxbal) set F=1
	if DRCRINC,TAMT#DRCRINC set TAMT=TAMT-(TAMT#DRCRINC)+$S('F:DRCRINC,1:0)
	
	/*
	Account balance may have exceeded MAXBAL before transaction posted.
	If this is the case, transaction amount should now be -0-.
	*/
	if TAMT<0 do {
		set TAMT=0
		if $E(CTL,2) do EXC("AUTBZ")
		}
	quit 


	
CKBAL	// If transaction will take loan balance below zero, use balance.

	type public Number CID
	if BALCMP-TAMT>0 quit 
	
	if $E(CTL,2) do EXC("AUPCT")
	
	/*
	At this point, AUADJ represents the portion that cannot be
	applied to the loan.
	*/

	set AUADJ=TAMT-BALCMP
	if DRCRINC,AUADJ#DRCRINC set AUADJ=AUADJ-(AUADJ#DRCRINC)+DRCRINC
	set TAMT=BALCMP 
	if DRCRINC,TAMT#DRCRINC set TAMT=TAMT-(TAMT#DRCRINC)
	set EADJ=TAMT
	quit 


	
TR(CID,LTC,RecordTTX ttx)	// Build Transaction array

	type public Number TR
	
	if '$E(CTL) quit 
	
	// Define variables needed by ^LNTRB utility
	new X,CC,SUF
	set (X,CC,SUF)=""
	
	if $D(TLO) S XTLO=TLO
	else  set XTLO=$$TLO^UTLO

	set TR=CID

	do POST^LNTRB(.ttx,CID,LTC,TAMT,,XTLO,TSO,,CRCD)
	
	quit 

	
public EXC(ET,Number DCID)	// Log error in exception file - batch mode only
	
	/*
	  DCID is the Escrow CID for which Balance is taken from DEP table if it is passed, 
	  otherwise BAL is set to null
	*/
	set DESC="Auto Escrow Balance Change Processing|1"
	if 'CID.get().isNull(),'DCID.get().isNull() do {
		Type RecordDEP dep=Db.getRecord("DEP","CID=:DCID")
		set BAL=dep.bal
		}
	else  set BAL=""
	do LOG^UTLEXC("LNAEU","*",DESC,$G(DCID),$G(%ZTSEQ),$G(ET),BAL)
	kill ET,%ZTSEQ
	quit 

	
AUADJ(CID)	// Entry for computed data item [LN]AUADJ

	new ADJ
	Type RecordLN ln=Db.getRecord("LN","CID=:CID")
	Type RecordTTX ttx
	do EXEC(.ln,.ttx,CID,"001",,,,.ADJ)
	quit ADJ
	

vSIG()	quit "60306^19893^P.R. Swarnalatha^18881"	// Signature - LTD^TIME^USER^SIZE
