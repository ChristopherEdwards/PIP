STOP9FL(RecordSTOP9 stop9, String vpar, Boolean vparNorm) // STOP9 - External Document Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (13)             11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop9.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stop9,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop9,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String DOCTYP = stop9.doctyp
	type String DOCNUM = stop9.docnum
	type String INST = stop9.inst

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("DOCTYP").exists()!vx("DOCNUM").exists()!vx("INST").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP9",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP9","DOCTYP = :stop9.doctyp and DOCNUM = :stop9.docnum and INST = :stop9.inst") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String DOCTYP
	type public String DOCNUM
	type public String INST

	type RecordSTOP9 stop9 = Db.getRecord("STOP9","DOCTYP=:DOCTYP,DOCNUM=:DOCNUM,INST=:INST")
	if (%ProcessMode = 2) do {
		do stop9.setMode(2)

		do STOP9FL(stop9,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP9 stop9

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP9","DOCTYP = :stop9.doctyp and DOCNUM = :stop9.docnum and INST = :stop9.inst") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop9.DP = %SystemDate
		if %O = 0  set stop9.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop9)) S ^STOP(9,vobj(stop9,-3),vobj(stop9,-4),vobj(stop9,-5))=vobj(stop9)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP9 stop9


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^STOP(9,vobj(stop9,-3),vobj(stop9,-4),vobj(stop9,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSTOP9 stop9

	// Type local variables for access keys for defaults
	type public String DOCTYP
	type public String DOCNUM
	type public String INST

	type public String TJD
	if stop9.dp.isNull() set stop9.dp = TJD                // dp
	if stop9.stcon.isNull() set stop9.stcon = 0            // stcon
	if stop9.time.isNull() set stop9.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP9 stop9

	if stop9.act.isNull() do vreqerr("ACT") quit
	if stop9.dp.isNull() do vreqerr("DP") quit
	if stop9.stcon.isNull() do vreqerr("STCON") quit
	if stop9.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP9 stop9

	if stop9.doctyp.isNull() do vreqerr("DOCTYP") quit
	if stop9.docnum.isNull() do vreqerr("DOCNUM") quit
	if stop9.inst.isNull() do vreqerr("INST") quit

		if vx("ACT").exists(),stop9.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop9.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop9.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop9.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP9","MSG",1767,"STOP9."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - Modify fee charge account

	type public RecordSTOP9 stop9
	/*
	 ---- Revision History ------------------------------------------
	
	05/24/00 - JARVISG - 39638
		   Modified to add FEECAT,FEETYP parameters to SRVSTP call.
	
	12/17/99 - JARVISG - 34535
		   Convert to PSL
	
								10/21/99 - JARVISG - 34535
		   Add for stop fee processing.
	*/
	
	if %ProcessMode'=0 quit
	
	set FEECID9=stop9.feecid                       // Fee Charge Account

	if $G(FEECID9) do {  quit:ER
		new values
		set values=Db.getOneRow("STAT,CLS","DEP","FEECID9")
		// Error if fee account is closed or not a deposit account.
		if $P(values,$C(9),1)=4 do Runtime.setErrMSG("STOP9",457,"FEECID9") quit:ER
		if $P(values,$C(9),2)'="D" do Runtime.setErrMSG("STOP9",803) quit:ER
		do ^SRVSTP(FEECID9,9,2,"STP")           // Assess stop type 9 fee
		}
	quit

vau1 // Trigger AFTER_UPDATE - Modify fee charge account

	type public RecordSTOP9 stop9
	if %ProcessMode'=1 quit     // 1 = Update
	set FEECID9=stop9.feecid
	if (stop9.feecid.oldVal'=stop9.feecid) do Runtime.setErrMSG("STOP9",412,"FEECID9") quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP9 stop9

	set X = stop9.doctyp if 'X.isNull(),'Db.isDefined("UTBLDOCTYP","X") set vRM = $$^MSG(1485,X) do vdderr("DOCTYP", vRM) quit
	if stop9.docnum.length()>10 set vRM = $$^MSG(1076,10) do vdderr("DOCNUM", vRM) quit
	set X = stop9.inst if 'X.isNull(),'Db.isDefined("UTBLEFTINST","X") set vRM = $$^MSG(1485,X) do vdderr("INST", vRM) quit
	set X = stop9.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	if stop9.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop9.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop9.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop9.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	if stop9.own.length()>60 set vRM = $$^MSG(1076,60) do vdderr("OWN", vRM) quit
	if '("01"[stop9.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop9.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop9.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop9.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP9","MSG",979,"STOP9."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSTOP9 stop9

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("DOCTYP").exists() set vux("DOCTYP") = vx("DOCTYP")
	if vx("DOCNUM").exists() set vux("DOCNUM") = vx("DOCNUM")
	if vx("INST").exists() set vux("INST") = vx("INST")
	do vkey(1) set voldkey = stop9.doctyp_","_stop9.docnum_","_stop9.inst // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop9.doctyp_","_stop9.docnum_","_stop9.inst // Copy new keys into object
	type RecordSTOP9 vnewrec = stop9.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP9",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP9 stop9

	if vux("DOCTYP").exists() set stop9.doctyp = vux("DOCTYP").piece("|",i)
	if vux("DOCNUM").exists() set stop9.docnum = vux("DOCNUM").piece("|",i)
	if vux("INST").exists() set stop9.inst = vux("INST").piece("|",i)
	quit
