BCHCHKST //Batch BCHCHKSTP - Check stops processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHCHKSTP Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHCHKSTP")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHCHKSTP") quit
 do JOBMGR^BCHUTL(%FN,"BCHCHKSTP",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHCHKSTP")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(EXP,STPTYP,KEY1,KEY2,SEQ) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHCHKSTP","*","",EXP.get()_","_STPTYP.get()_","_KEY1.get()_","_KEY2.get()_","_SEQ.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHCHKSTP",EXP.get()_","_STPTYP.get()_","_KEY1.get()_","_KEY2.get()_","_SEQ.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHCHKSTP",EXP.get()_","_STPTYP.get()_","_KEY1.get()_","_KEY2.get()_","_SEQ.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,EXP,STPTYP,KEY1,KEY2,SEQ)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHCHKSTP","*","",EXP.get()_","_STPTYP.get()_","_KEY1.get()_","_KEY2.get()_","_SEQ.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHCHKSTP",EXP.get()_","_STPTYP.get()_","_KEY1.get()_","_KEY2.get()_","_SEQ.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,EXP,STPTYP,KEY1,KEY2,SEQ) //
	// Remove stops

	new acn,stop1,stop2,stop3,stop4,stop5,z,zsql,CHKTYP,XCID
	// Note CHKTYP is set in EUROCHK^CHKPROC if needed

	type RecordACN acn
	type RecordSTOP2 stop2
	type RecordSTOP3 stop3
	type RecordSTOP4 stop4
	type RecordSTOP5 stop5

	// get type 2 record (account stops)

	if STPTYP=2 do {
		set stop2=Db.getRecord("STOP2","KEY1,SEQ")
		set expdt=stop2.exp
		}


	// type 3 (check stops) 

	if STPTYP=3 do {
		set stop3=Db.getRecord("STOP3","KEY1,KEY2,SEQ")
		set expdt=stop3.exp
		}


	// type 4 (amount stops) 

	if STPTYP=4 do {
		set stop4=Db.getRecord("STOP4","KEY1,KEY2,SEQ")
		set expdt=stop4.exp
		}


	// type 5 (ACH stops)

	if STPTYP=5 do {
		set stop5=Db.getRecord("STOP5","KEY1,KEY2,SEQ")
		set expdt=stop5.exp
		}

	if expdt'=TJD quit			// Different expiration date

	set acn=Db.getRecord("ACN","KEY1")
	set XCID=KEY1				// Account number

	new dep,ln
	type RecordDEP dep
	type RecordLN ln
	if acn.cls="D" do {
		set dep=Db.getRecord("DEP","XCID")
		set zsql=dep.stp 
		}
	if acn.cls="L" do {
		set ln=Db.getRecord("LN","XCID")
		set zsql=ln.stp 
		}

	if STPTYP=2 do {
		if stop2.src'="" set $p(zsql,"#",1)=$p(zsql,"#",1)-1        // customer stops
		set $p(zsql,"#",2)=$p(zsql,"#",2)-1			   // account stops
		}
	else  do {
		if STPTYP=3 set $p(zsql,"#",3)=$p(zsql,"#",3)-1
		if STPTYP=4 set $p(zsql,"#",4)=$p(zsql,"#",4)-1
		if STPTYP=5 set $p(zsql,"#",5)=$p(zsql,"#",5)-1
		}

	// Update counters

	if acn.cls="D" do DEP(.dep)
 	if acn.cls="L" do LN(.ln)


 	// EURO check stops - deposits only
	if acn.cls="D",STPTYP=3,$$EUROCHK^CHKPROC(KEY1) do {
 		new CHKLO

		// The stop is expired we don't need to change the status
        	set CHKLO=stop3.chklo
        	if CHKLO="" quit		// Low check number not defined
        	if CHKLO]]KEY2 quit		// Low check is greater than high check

		// update file
		do STPFIL^CHKPROC(XCID,CHKTYP,CHKLO,KEY2,3,"")
		}
	quit


DEP(RecordDEP dep)

	do dep.setAuditFlag(1)
	set dep.stp=zsql
	do dep.save("NOJOURNAL")
	quit


LN(RecordLN ln)

	do ln.setAuditFlag(1)
	set ln.stp=zsql
	do ln.save("NOJOURNAL")
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,EXP,STPTYP,KEY1,KEY2,SEQ
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set EXP=vRECORD.piece($C(9),1)
 set STPTYP=vRECORD.piece($C(9),2)
 set KEY1=vRECORD.piece($C(9),3)
 set KEY2=vRECORD.piece($C(9),4)
 set SEQ=vRECORD.piece($C(9),5)
 do vPROC(EXP,STPTYP,KEY1,KEY2,SEQ)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,EXP,STPTYP,KEY1,KEY2,SEQ
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+59>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("EXP,STPTYP,KEY1,KEY2,SEQ","DAYENDSTPEXP","EXP=:TJD AND STPTYP>1 AND STPTYP<6")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
