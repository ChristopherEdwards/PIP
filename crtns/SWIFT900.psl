SWIFT900	 // 
 // ORIG: KELLYP - 11/03/1999
 // DESC: SWIFT MT900 Polling Procedure
 // 
 // ---- Comments --------------------------------------------------------
 // This procedure is used to poll the SW900HST table for transactions
 //  requiring the generation of a SWIFT MT900 Confirmation of Debit Message.
 //  All entries in SW900HST require the generation of an MT900, so this
 //  procedure loops through it, starting at a high-water mark which has been 
 //  saved to the SW900SRV file.  This procedure is initiated & detached by the
 //  SWINTSTR function and is terminated by the SWINTSTP function. 
 /* ---- Revision History ------------------------------------------------
 	

	02/09/00 - SCHWARTZC - 34282
		   Modifications to clear up compiler issues in QA environment.
            
	01/06/00 - SCHWARTZC - 34282
	 	   Made changes to retrieving and setting the SW900SRV records
		   for modifications made to the file defintion.

		   Made changes to retrieving the SWINTSRV values for 
		   modifications made to the file definition.
 */ 

 new badcid,BADREC,badseq,int,TJD,tmp,tmpdel,tmpcuvar,srv,stop,sw900srv
 new XCID,XTIME,XTJD,XTSEQ

 // Get MT900 Time Interval, use 60 seconds if undefined
 set tmpcuvar=Db.getOneRow("MT900INT,TJD","CUVAR")
 set int=$P(tmpcuvar,$C(9),1)	    	// MT900 Time Interval
 if int="" set int=60		    	// Default interval is 60 seconds
 else  set int=int*60 			// Convert from minutes to seconds
 set TJD=$P(tmpcuvar,$C(9),2)		// System Date

 set stop="0"				// Initialize stop-control to 0 (run)

 new KEY set KEY=1  			// SW900SRV and SWINTSRV key  cds 1/6/00

 if Db.isDefined("SW900SRV","KEY") do {  	// Retrieve High-Water Mark
    new sw900srv
    type RecordSW900SRV sw900srv=Db.getRecord("SW900SRV","KEY")
    if sw900srv.dat'="" do {
    	set XTJD=sw900srv.dat
    	set XTIME=sw900srv.tim
    	set XCID=sw900srv.cid
    	set XTSEQ=sw900srv.tseq
    	}
    }

 // The following section of code is only executed when no high-water mark
 //  is saved.  It puts a temporary record into the SW900HST file
 //  so the select in the loop below doesn't bomb out on a null subscript.
 //  This temp record is deleted from SW900HST before this procedures stops.

 if ($G(XTJD)="")!($G(XTIME)="") do {
    type RecordSW900HST tmp=Class.new("RecordSW900HST")
    set tmp.dat=1
    set XTJD=1
    set tmp.tim=0
    set XTIME=0
    set tmp.cid=0
    set tmp.tseq=0
    set tmp.gen=1
    do tmp.save()
    kill tmp		// No longer needed
    set tmpdel=1	// Indicates that a temp entry was filed to SW900HST
    }

 for  quit:stop=1  do {
 
    // Check for stop command
    set srv=Db.getOneRow("MT900STP","SWINTSRV","KEY")
    if srv="STOP" set stop=1 quit
	
    new rs
    type ResultSet rs=Db.select("DAT,TIM,CID,TSEQ","SW900HST","DAT>=:XTJD AND GEN<>1")
    if rs.isEmpty() hang int quit    // No new entries, back to start of loop 
    while rs.next() do {
        set XTJD=rs.getCol(1)
        set XTIME=rs.getCol(2)
        set XCID=rs.getCol(3)
	set XTSEQ=rs.getCol(4)

	// Error trap for catching any errors that SW900GEN or SWFILE may throw
	catch vERROR {
                new ET
                set ET=vERROR.type
                set ET=ET_"-"_vERROR.thrownAt_"-"_vERROR.description		
		do ERR
		set BADREC=XTJD_"|"_XTIME_"|"_XCID_"|"_XTSEQ
		set badcid=XCID
		set badseq=XTSEQ
		}

        do PROC^SW900GEN(XCID,XTSEQ,1)   // Generate MT900 Message

	new sw900hst
 	type RecordSW900HST sw900hst=Db.getRecord("SW900HST","XTJD,XTIME,XCID,XTSEQ")
        set sw900hst.gen=1		// Mark tran entry as generated
        do sw900hst.save() 		

	if Db.isDefined("DEP","XCID") do {
       		new tempdep
                type RecordDEP tempdep=Db.getRecord("DEP","XCID")
                if tempdep.feepln'="" do { 	// Increment MT900s This Period
			set tempdep.mt900prd=tempdep.mt900prd+1
                	do tempdep.bypassSave()   
			}
		}
        }

    // The following lines are only executed if the SW900GEN procedure or the
    // SWIFT filer throw an error.  Will mark entry in SW900HST as "0" (failed
    // generation).  This program will try to regenerate the msg on the next
    // iteration of the control loop.

    if $G(BADREC) do { 
	new genfail
    	type RecordSW900HST genfail=Class.new("RecordSW900HST")
	set genfail.dat=$P(BADREC,"|",1)
	set genfail.tim=$P(BADREC,"|",2)
	set genfail.cid=$P(BADREC,"|",3)
	set genfail.tseq=$P(BADREC,"|",4)
	set genfail.gen=0
	do genfail.save()
    	}    

    // Avoid saving high-water mark if last record didn't generate properly
    if $G(BADREC),($G(badcid)=XCID),($G(badseq)=XTSEQ) hang int quit

    // If processing executes to here, we should have at least one new entry to 
    //  save as a high-water mark.
    
    new sw900srv
    type RecordSW900SRV sw900srv=Db.getRecord("SW900SRV","KEY")
    //type RecordSW900SRV sw900srv=Class.new("RecordSW900SRV")   //cds

    set sw900srv.dat=XTJD
    set sw900srv.tim=XTIME
    set sw900srv.cid=XCID
    set sw900srv.tseq=XTSEQ
    do sw900srv.save()


    // Wait for interval period to expire
    hang int
    }

 // Clean up temporary entry in SW900HST if it exists
 if $G(tmpdel)=1 do Db.delete("SW900HST","DAT=1 AND TIM=0 AND CID=0 AND TSEQ=0")

 quit


 // ----------------------------------------------------------------------
ERR // Logs error in exception file
 // ----------------------------------------------------------------------

 if '$D(ET) set ET=$G(RM)
 // SWIFT Message Processing Error
 do LOG^UTLEXC("SWIFT_900","*",$$^MSG(7371),CID,$G(%ZTSEQ),ET,"")
 kill ET,%ZTSEQ

 quit
 #OPTION ResultClass ON
Public String vSIG()	quit "59886^43613^Sanchez SCM Administrator^5374"	// Signature - LTD^TIME^USER^SIZE
