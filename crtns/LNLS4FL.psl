LNLS4FL(RecordLNLS4 lnls4, String vpar, Boolean vparNorm) // LNLS4 - Loan Sale Temp File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              12/28/2005
	// Trigger Definition (6)                      07/17/2006
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnls4.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnls4,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnls4,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String INCD = lnls4.incd
	type String PL = lnls4.pl
	type String GRP = lnls4.grp
	type String CID = lnls4.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("INCD").exists()!vx("PL").exists()!vx("GRP").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNLS4",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNLS4","INCD = :lnls4.incd and PL = :lnls4.pl and GRP = :lnls4.grp and CID = :lnls4.cid") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String INCD
	type public String PL
	type public String GRP
	type public String CID

	type RecordLNLS4 lnls4 = Db.getRecord("LNLS4","INCD=:INCD,PL=:PL,GRP=:GRP,CID=:CID")
	if (%ProcessMode = 2) do {
		do lnls4.setMode(2)

		do LNLS4FL(lnls4,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNLS4 lnls4

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNLS4","INCD = :lnls4.incd and PL = :lnls4.pl and GRP = :lnls4.grp and CID = :lnls4.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnls4)) S ^LSA(vobj(lnls4,-3),vobj(lnls4,-4),vobj(lnls4,-5),vobj(lnls4,-6))=vobj(lnls4)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnls4)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNLS4 lnls4

	if vpar["/JOURNAL/" do VJOURNAL(.lnls4)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LSA(vobj(lnls4,-3),vobj(lnls4,-4),vobj(lnls4,-5),vobj(lnls4,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNLS4 lnls4

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNLS4 lnls4

	if lnls4.incd.isNull() do vreqerr("INCD") quit
	if lnls4.pl.isNull() do vreqerr("PL") quit
	if lnls4.grp.isNull() do vreqerr("GRP") quit
	if lnls4.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS4","MSG",1767,"LNLS4."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNLS4 lnls4
	if 'lnls4.cid.isNull() set vfkey("^ACN("_""""_lnls4.cid_""""_","_50_")")="LNLS4(CID) -> LN"
	if 'lnls4.grp.isNull() set vfkey("^UTBL("_"""INCD"""_","_""""_lnls4.incd_""""_","_""""_lnls4.pl_""""_","_""""_lnls4.grp_""""_")")="LNLS4(INCD,PL,GRP) -> LNLS3"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNLS4 lnls4
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnls4.cid") set vERRMSG = $$^MSG(8563,"LNLS4(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("LNLS3",":lnls4.incd,:lnls4.pl,:lnls4.grp") set vERRMSG = $$^MSG(8563,"LNLS4(INCD,PL,GRP) -> LNLS3") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNLS4 lnls4
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(lnls4,.vx(),1,"|") quit
	if vx("CONTRA").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SOLD").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnls4,.vx(),1,"|")
	quit


vau1 // Trigger AU_CID - After Update trigger for CID column

	type public RecordLNLS4 lnls4
								/*
								---- Revision History ------------------------------------------------

	12/06/05 - chhabris - CR18008
		   Removed deprecated methods and cleaned up the code as per 
		   PSL standards.
		   
	----------------------------------------------------------------------	
								*/

								// Create new LNLS4C entry
 	type RecordLNLS4C lnls4c=Class.new("RecordLNLS4C")
 	set lnls4c.cid=lnls4.cid
 	set lnls4c.incd=lnls4.incd
 	set lnls4c.pl=lnls4.pl
 	set lnls4c.grp=lnls4.grp
	do lnls4c.save()
 	
								quit
	

vbd1 // Trigger BEFORE_DELETE - Before delete trigger for LNLS4

	type public RecordLNLS4 lnls4
	/*
	---- Revision History ------------------------------------------------

	07/17/06 - KELLYP - CR 22174
		   Modified to update ln.tflg properly and did away with old
		   variables which were no longer needed.

	02/11/02 - LAUDEMANR - 48724
		   Modified the Before Insert and Before Delete triggers
		   to create LNLS4C entry.  This was previously created by
		   an index definition from LNLS4, but must be created here
		   since the user can add new data(Priority Method info)
		   to LNLS4C.  Fixes problem of lost data when the indexes
		   are rebuilt.

	*/

	type RecordLN ln=Db.getRecord("LN","CID=:lnls4.cid")

	set ln.tflg=ln.tflg-1
	if ln.tflg<0 set ln.tflg=0

	do ln.save("/NOJOURNAL")

	do Db.delete("LNLS4B","CID=:lnls4.cid AND XSEQ=:lnls4.xseq")
	do Db.delete("LNLS4C","CID=:lnls4.cid AND INCD=:lnls4.incd AND PL=:lnls4.pl AND GRP=:lnls4.grp")
	
	quit 

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger for LNLS4

	type public RecordLNLS4 lnls4
	/*
	---- Revision History ------------------------------------------------
	12/05/05 - chhabris - CR18008
		   Replaced the deprecated methods. Also removed the revision
		   history prior to 2004.
	----------------------------------------------------------------------
	*/	
	
	new CO,RRR,SLBL,SO,SQLCNT,TGRP,TINCD,TPL
	new ARUF,BAL,TFLG,TRB,UDBAL,XSEQ,data
	
	// Create LNLS4C entry
	type RecordLNLS4C lnls4c=Db.getRecord("LNLS4C","CID=:lnls4.cid,INCD=:lnls4.incd,PL=:lnls4.pl,GRP=:lnls4.grp",1)
	if 'lnls4c.getMode() do lnls4c.save()	

	type RecordLN ln=Db.getRecord("LN","CID=:lnls4.cid",1)
	
	type RecordLNLS1 lnls1=Db.getRecord("LNLS1","INCD=:lnls4.incd",1)
		
	type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:lnls4.incd,PL=:lnls4.pl",1)
	
	if lnls1.getMode() do {
		if lnls1.leadinst'=1 do { quit:ER
			
			if lnls2.getMode() if lnls2.wash.isNull() quit
						
			type RecordDEP dep=Db.getRecord("DEP","CID=:lnls2.wash",1)
			
			if dep.crcd'=ln.crcd set ER=1,RM=$$^MSG(4259)
			}
		}

	if ln.slbl>0 do Runtime.setErrMSG("LNLS4",2243,XCID) quit:ER 
	
	if 'lnls1.getMode() do Runtime.setErrMSG("LNLS4",1485,"lnls4.incd") quit:ER
	
	if 'lnls2.getMode() do Runtime.setErrMSG("LNLS4",1485,"lnls4.pl") quit:ER
		
	type RecordLNLS3 lnls3=Db.getRecord("LNLS3","INCD=:lnls4.incd,PL=:lnls4.pl,GRP=:lnls4.grp",1)
	if 'lnls3.getMode() do Runtime.setErrMSG("LNLS4",1485,"lnls4.grp") quit:ER
	
	if lnls4.dtap="" set lnls4.dtap=%SystemDate

	// Effective date may not be in the future
	else  if lnls4.dtap>%SystemDate do Runtime.setErrMSG("LNLS4",876) quit:ER 
	
	do PP^PROLNLS4(CID) quit:ER 

	if lnls2.picm=6 do { quit:ER 
		if (lnls1.leadinst'=1)&(lnls4.cid'="")&(lnls4.contra="") set ER=1 set CO="Contra Account" do Runtime.setErrMSG("LNLS4",7531,CO) quit:ER 
		if lnls4.contra.isNull() quit
		new AMTS
		do PP2^PROLNLS4(lnls4.contra,lnls4.cid) quit:ER 
		if ($G(AMTS)),(lnls4.sold="") set lnls4.sold=AMTS
		if (lnls4.sold'="")&(lnls4.sold'=0) set ER=1,RM=$$^MSG(4306) quit
		}

	set ARUF=ln.aruf
	set TRB=ln.trb 
	set BAL=ln.bal 
	set UDBAL=ln.udbal 
	set TFLG=ln.tflg 
	if ARUF set BAL=BAL-UDBAL
	if %SystemDate'=lnls4.dtap do {
		kill UAVB
		do INIT^UAVB(,CID,lnls4.dtap,%SystemDate,"00000000000000000001")     
		set BAL=$P(UAVB(1),"|",19)
		}
	
	set XSEQ=TFLG+1

	if lnls2.picm'=6 set ER=0 do {
		set ln.tflg=XSEQ
		do ln.bypassSave()
		}

	if lnls2.picm=6 set XSEQ=0
	set lnls4.xseq=XSEQ set lnls4.sbal=BAL
	
	quit 

vbu1 // Trigger BU_CID - Before Update trigger for CID column

	type public RecordLNLS4 lnls4
	do lnls4.setAuditFlag(1)
	/*
								---- Revision History ------------------------------------------------
	
								03/12/02 - VETSENM - 49528
																			New trigger created.
	
	*/
	
								new XCID,XGRP,XINCD,XPL
								set XCID=lnls4.cid
								set XINCD=lnls4.incd
								set XPL=lnls4.pl
								set XGRP=lnls4.grp
	
								// Delete old  LNLS4C entry
								do Db.delete("LNLS4C","CID=:XCID AND INCD=:XINCD AND PL=:XPL AND GRP=:XGRP")
	
	quit

vbu2 // Trigger BU_CONTRA - Before Update of Contra Account

	type public RecordLNLS4 lnls4
	do lnls4.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	12/05/05 - chhabris - CR18008
		   Replaced the depricated methods. Also removed the revision
		   history prior to 2004.
	----------------------------------------------------------------------

	*/	
	
	type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:lnls4.incd,PL=:lnls4.pl",1)
	if lnls2.getMode() do { 
 		if lnls2.picm=6 do { quit:ER
			if lnls4.contra.isNull() quit
			do PP2^PROLNLS4(lnls4.contra,lnls4.cid) quit:ER
			}
		}
	quit

vbu3 // Trigger BU_SOLD - Before Update Sold Amount

	type public RecordLNLS4 lnls4
	do lnls4.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	12/05/05 - chhabris - CR18008
		   Replaced the depricated methods. Also removed the revision
		   history prior to 2004.
	----------------------------------------------------------------------

	*/	
	
	type RecordLNLS2 lnls2=Db.getRecord("LNLS2","INCD=:lnls4.incd,PL=:lnls4.pl",1)
	if lnls2.getMode() do {
		if (lnls2.picm=6),('lnls4.sold.isNull()),(lnls4.sold'=0) do Runtime.setErrMSG("LNLS4",4306) quit
	}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNLS4 lnls4

	if lnls4.incd.length()>5 set vRM = $$^MSG(1076,5) do vdderr("INCD", vRM) quit
	if lnls4.pl.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PL", vRM) quit
	if lnls4.grp.length()>7 set vRM = $$^MSG(1076,7) do vdderr("GRP", vRM) quit
	set X = lnls4.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = lnls4.contra if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CONTRA", vRM) quit
	set X = lnls4.dtap if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTAP", vRM) quit
	set X = lnls4.sbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS4.SBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls4.sold if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNLS4.SOLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnls4.xseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("XSEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS4","MSG",979,"LNLS4."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNLS4 lnls4)	//LNLS4 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.lnls4)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=LNLS4B_I
			}
		else  if TSRC="O" do {
			do vj1(.lnls4)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=LNLS4B_I
			}
		}

	quit


vj1(RecordLNLS4 lnls4)	// LNLS4B_I  Table LNLS4B  Journal of LNLS4

	if +lnls4.xseq'=0
	else  quit

							//// Save this line for Public datatyping, if needed
	type String v1,vlastkey
	set v1=lnls4.cid
	set vlastkey=lnls4.xseq
	type RecordLNLS4B lnls4b=Db.getRecord("LNLS4B","CID=:v1,XSEQ=:vlastkey",1)
	set lnls4b.grp=lnls4.grp
	set lnls4b.incd=lnls4.incd
	set lnls4b.pl=lnls4.pl

	do lnls4b.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNLS4 lnls4

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("INCD").exists() set vux("INCD") = vx("INCD")
	if vx("PL").exists() set vux("PL") = vx("PL")
	if vx("GRP").exists() set vux("GRP") = vx("GRP")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = lnls4.incd_","_lnls4.pl_","_lnls4.grp_","_lnls4.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnls4.incd_","_lnls4.pl_","_lnls4.grp_","_lnls4.cid // Copy new keys into object
	type RecordLNLS4 vnewrec = lnls4.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNLS4",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" if vx("CID").exists() do vau1

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNLS4 lnls4

	if vux("INCD").exists() set lnls4.incd = vux("INCD").piece("|",i)
	if vux("PL").exists() set lnls4.pl = vux("PL").piece("|",i)
	if vux("GRP").exists() set lnls4.grp = vux("GRP").piece("|",i)
	if vux("CID").exists() set lnls4.cid = vux("CID").piece("|",i)
	quit
