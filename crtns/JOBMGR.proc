public JOBMGR(vinput)	// Batch Job Manager
	/*
	Copyright(c)2002 Sanchez Computer Associates, Inc.  
	All Rights Reserved - 01/16/02 14:58:58 - MATTSON
	ORIG: MATTSON - 06/05/95
	DESC: Batch Job Manager.

	Note: Refer to subroutine 'init' for specific information that
	may be passed in the vinput array.

	Non-global scope variables used within this routine begin with
	the sentinal character 'v'.  This convention is used to avoid
	conflicts with application programs that interface with this
	routine.

	KEYWORDS: Utilities

	RELATED:  HTM, Job Manager, Job Monitor

	ARGUMENTS:
		. vinput Input array   /TYP=T/REQ/MECH=REFARR:R

	The following is an example of how the job manager may be used to
	multi-thread a specified number of processes (6 in this example).

	Note that even though the elements of the input array for the
	scheduler and thread program entry points do specify any
	arguments, these entry points must have two arguments:

		par1 = input argument
		par2 = output argument

		N input
		S input("thrtimr")=1
		S input("schtimr")=30
		S input("threads")=6
		S input("maxsize")=12
		S input("msgbufs")=100
		S input("schrcnt")=1000
		S input("thrrcnt")=1000
		S input("schinit")="SCHINIT^FDV"
		S input("schexec")="SCHEXEC^FDV"
		S input("schpost")="SCHPOST^FDV"
		S input("schexit")="SCHEXIT^FDV"
		S input("thrinit")="THRINIT^FDV"
		S input("threxec")="THREXEC^FDV"
		S input("threxit")="THREXIT^FDV"
		D ^JOBMGR(.input)

	---- Revision History ------------------------------------------------
	08/29/06 - GIRIDHARANB - CR 22807
		   Modified section compile to call the delayCommit method
		   in section threxec for the rdb case.

	07/31/06 - KELLYP - CR 22048
		   Modified debug section to eliminate BYPASS warnings.

	09/06/05 - S.Krishnan - CR16724
		   Added the 'quit:%BatchExit' in the Debug section to exit from
		   the Batch.
		   Removed the reccnt section and also removed the reccnt references
		   from the compile section.
		  
	11/22/04 - RussellDS - CR13365
		   Add public tag to JOBMGR line to eliminate PSL warnings.
		   
	07/27/04 - RussellDS - CR11349
		   Modified compile section to ignore warnings being returned
		   from PSL compiler.  Only treat errors as fatal.
		   
		   Changed new commands to type commands.
		   
		   Clean up variable scoping.
	
	11/25/2002 - Vitaliy Antonov - 51349
		   After code review clean-up.

	04/27/02 - Dan Russell - 43583
		   Converted JOBSCH and JOBTHR templates to PSL and modified
		   this procedure to make use of them.  Perform some added
		   clean-up of the code.

	03/14/02 - Vitaliy Antonov - 43583
		   Converted To PSL. Removed old revision history.

	01/10/02 - Allan Mattson - 48839
		   Introduced input argument "batchid" to use as the
		   identifier in the call to the job monitor in the
		   job scheduler (refer to routine JOBSCH).
	*/
	
	type Public Number ER
	
	type Number vmaxsize,vmsgbufs,vnonrand,vschrcnt,vschtimr,vthrrcnt,vthrtimr
	type String vbatchid,vhtid,vsch,vschexec,vschexit,vschinit,vschpost,vstatus
	type String vthr,vthreads,vthrexec,vthrexit,vthrinit,vthrlvar,vx

	catch vError {
		do ZE^UTLERR
		set ER=1
		}

	set ER=0

	// Initialize scheduler and thread info from vinput array
	do init(.vinput)

	// Debug mode
	if $G(vinput("debug")) do debug quit

	// Allocate shared memory; create and initialize message buffers
	set vstatus=$$SCINIT^%HTAPI(vmsgbufs,vmaxsize,vschtimr,vthrtimr,.vhtid,vnonrand)
	if vstatus'="" do err(vstatus) set ER=1 quit

	// Compile job scheduler and thread programs
	do compile("JOBSCH",.vsch) quit:ER
	do compile("JOBTHR",.vthr) quit:ER

	// Dispatch to compiled job scheduler program
	set vx="^"_vsch_"("""_vhtid_""")"
	do @vx

	// Free shared memory
	set vstatus=$$SCCLOSE^%HTAPI
	if vstatus'="" do err(vstatus)

	// Delete compiled job scheduler and thread programs
	do DEL^%ZRTNDEL(vsch)
	do DEL^%ZRTNDEL(vthr)
	quit


compile(template,pgm)  //Private; Compile scheduler/thread from template program

	//I18N=OFF
	
	type Public Number ER,vschrcnt,vthrrcnt
	type Public String RM
	
	type Number i,line
	type String entref,ltag,ltags,x

	if template="JOBSCH" set ltags="schinit,schexec,schpost,schexit",pgm="SCH"
	if template="JOBTHR" set ltags="thrinit,threxec,threxit",pgm="THR"
	set pgm=pgm_(%ProcessID#10000)

	do ^ULODTMPL(template,"line","",.ltag)

	for i=1:1:$L(ltags,",") do {
		set ltag=$P(ltags,",",i)
		set line=ltag(ltag)

		set x="v"_ltag
		set entref=@x
		if entref'="" do {
			// The parameters vpar1 and vpar2 need to be typed
			// to avoid warnings at compile time.
			if entref["(" do {
				type String pars
				
				set pars=entref.piece("(",2).piece(")",1)
				set pars=pars.replace(".","")
				quit:pars.isNull()
				set line=line+.001
				set line(line)=$C(9)_"type Public String "_pars
			}
			set line=line+.001 
			set line(line)=$C(9)_"type Number verrcnt,vexit"

			set line=line+.001 
			if ltag="threxec" do {
				
				set line(line)=$C(9)_"do Runtime.delayCommit("""_entref_""")"
			
			}
			else  set line(line)=$C(9)_"do "_entref
			}
		set line=line+.001 set line(line)=$C(9)_"quit"
		}

	set line(1)=pgm_"(vhtid)"_$C(9)_"// Compiled from "_template_" template"

	do BUILDRTN^UCGM(.line,pgm,.RM)
	
	// All errors and warnings return as messages in RM.  However, if top
	// level is set, it indicates an error (fatal) versus just warnings.
	if RM.get() do {
		do err("")
		set ER=1
	}

	quit
	//I18N=ON


init(vinput)	//Private; Initialization
	/*
	ARGUMENTS:
		. vinput Input array   /TYP=T/REQ/MECH=REFARR:R
	OUTPUT:
		. vschrcnt Scheduler record count interval
		. vthrrcnt Thread record count interval

		. vschtimr Scheduler timer
		. vthrtimr Thread timer

		. vnonrand Prevent random initial thread access of msgs
		. vmaxsize Maximum message size in bytes
		. vmsgbufs Number of message buffers

		. vthreads Number of threads to start
		. vthrlvar Local variables req'd by thread

		. vschinit Scheduler initialization entry ref
		. vschexec Scheduler execution entry ref
		. vschpost Scheduler post-proc entry ref
		. vschexit Scheduler exit entry ref

		. vthrinit Thread initialization entry ref
		. vthrexec Thread execution entry ref
		. vthrexit Thread exit entry ref

		. vbatchid Batch ID
	----------------------------------------------------------------------
	*/
	type Public Number vnonrand,vmaxsize,vmsgbufs,vschrcnt,vschtimr
	type Public Number vthreads,vthrrcnt,vthrtimr
	type Public String %FN,vbatchid,vschexec,vschinit,vschexit,vschpost
	type Public String vthrexit,vthrexec,vthrinit,vthrlvar
	
	set vschrcnt=$G(vinput("schrcnt"))
	set vthrrcnt=$G(vinput("thrrcnt"))

	set vschtimr=$G(vinput("schtimr"))
	if 'vschtimr set vschtimr=10
	set vthrtimr=$G(vinput("thrtimr"))
	if 'vthrtimr set vthrtimr=10

	set vnonrand=$G(vinput("nonrand"))
	set vmaxsize=$G(vinput("maxsize"))
	if 'vmaxsize set vmaxsize=100
	set vmsgbufs=$G(vinput("msgbufs"))
	if vmsgbufs<100 set vmsgbufs=100

	set vbatchid=$G(vinput("batchid"))
	if vbatchid="" set vbatchid=$G(%FN)
	if vbatchid="" set vbatchid=%ProcessID

	set vthrlvar=$G(vinput("thrlvar"))
	if $G(%FN)'="" set vthrlvar=$S(vthrlvar="":"",1:vthrlvar_",")_"%FN"
	if vthrrcnt set vthrlvar=$S(vthrlvar="":"",1:vthrlvar_",")_"vthrrcnt"

	set vthreads=$G(vinput("threads"))
	#IF CUVAR.BTTJOB if 'vthreads set vthreads=CUVAR.BTTJOB
	#IF 'CUVAR.BTTJOB if 'vthreads set 

	set vschinit=$$par($G(vinput("schinit")))
	set vschexec=$$par($G(vinput("schexec")))
	set vschpost=$$par($G(vinput("schpost")))
	set vschexit=$$par($G(vinput("schexit")))

	set vthrinit=$$par($G(vinput("thrinit")))
	set vthrexec=$$par($G(vinput("threxec")))
	set vthrexit=$$par($G(vinput("threxit")))

	quit


par(entref)	//Private;Add parameters to scheduler and thread entry refs

	if entref="" quit ""
	quit entref_"(.vpar1,.vpar2)"


debug	//Debug mode
	/* Using #BYPASS - #ENDBYPASS tags to stop compiler from executing 
	'xecute' command at compile time. Compiler is attempting to do this in
	order to check validity of the statement. Since 'zb' is not officially 
	a PSL command - it cannot be used. At runtime this command will be 
	understood. Also Read command with '*' (read one character) indicator 
	is not accepted by PSL compiler but understood as M Read command's 
	indicator. */

	//I18N=OFF
			
	type Public String vpar1,vschexec,vschexit,vschinit,vschpost,vthrexec,vthrexit,vthrinit
	
	type String exe
	
	do {
		type String x,y

		set x=""		// Avoid unreferenced variable warning
		set y=":""u 0 w !,$zpos,! zp @$zpos b"""

		// Set breaks in scheduler

		// Compiler instruction. See comment above
		#ACCEPT DATE=07/31/06;PGM=KELLYP;CR=unknown
		#BYPASS
		set x=$p(vschexec,"(",1) 
		set exe="zb @(x_y)"
		xecute exe
		set x=$p(vschinit,"(",1) 
		if x'="" set exe="zb @(x_y)" xecute exe
		set x=$p(vschpost,"(",1) 
		if x'="" set exe="zb @(x_y)" xecute exe
		set x=$p(vschexit,"(",1) 
		if x'="" set exe="zb @(x_y)" xecute exe

		; Set breaks in thread
		set x=$p(vthrexec,"(",1)
		set exe="zb @(x_y)" 
		xecute exe
		set x=$p(vthrinit,"(",1) 
		if x'="" set exe="zb @(x_y)" xecute exe
		set x=$p(vthrexit,"(",1) 
		if x'="" set exe="zb @(x_y)" xecute exe
		#ENDBYPASS

		use 0 
		write !,"Debug mode... multithreading disabled."
		write !!,"Breakpoints set at:",!! 
		set exe="zsh ""b"""
		#ACCEPT DATE=07/31/06;PGM=KELLYP;CR=unknown
		#BYPASS
		xecute exe
		#ENDBYPASS
		write !,"Press any key to continue. "
		#ACCEPT DATE=07/31/06;PGM=KELLYP;CR=unknown
		#BYPASS
		read *x,!
		#ENDBYPASS
		}
	do {
	    if vschinit'="" do @vschinit quit:%BatchExit
	    if vthrinit'="" do @vthrinit quit:%BatchExit

	    for  do @vschexec quit:$G(vpar1)=""  do @vthrexec if vschpost'="" do @vschpost

	    if vthrexit'="" do @vthrexit
	    if vschexit'="" do @vschexit
	   }
	   
	set exe="zb -*"
	#ACCEPT DATE=07/31/06;PGM=KELLYP;CR=unknown
	#BYPASS
	xecute exe
	#ENDBYPASS

	//I18N=ON
	quit

err(ET)	//Private; Log error
	do ^UTLERR
	quit

vSIG()	quit "60507^56403^Badrinath Giridharan^9466"	// Signature - LTD^TIME^USER^SIZE
