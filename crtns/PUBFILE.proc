PUBFILE(RecordPUBLISH publish, String vpar, Boolean vparNorm) // PUBLISH - Stores Published Data Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = publish.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(publish,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(publish,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ID").exists()!vx("FID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PUBLISH",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PUBLISH","ID = :publish.id and FID = :publish.fid and SEQ = :publish.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ID
	type public String FID
	type public String SEQ

	type RecordPUBLISH publish = Db.getRecord("PUBLISH","ID=:ID,FID=:FID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do publish.setMode(2)

		do PUBFILE(publish,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPUBLISH publish

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PUBLISH","ID = :publish.id and FID = :publish.fid and SEQ = :publish.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(publish))  K:$D(vobj(publish,1,1)) ^PUBLISH(vobj(publish,-3),vobj(publish,-4),vobj(publish,-5)) S ^PUBLISH(vobj(publish,-3),vobj(publish,-4),vobj(publish,-5))=vobj(publish)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(publish,1,1))  N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(publish,1,1)) S vS1=vS1+1,^PUBLISH(vobj(publish,-3),vobj(publish,-4),vobj(publish,-5),vS1)=$E(vobj(publish,1,1),vS2,vS2+449)
			#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPUBLISH publish


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^PUBLISH(vobj(publish,-3),vobj(publish,-4),vobj(publish,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordPUBLISH publish

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPUBLISH publish

	if publish.id.isNull() do vreqerr("ID") quit
	if publish.fid.isNull() do vreqerr("FID") quit
	if publish.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PUBLISH","MSG",1767,"PUBLISH."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPUBLISH publish

	set X = publish.id if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ID", vRM) quit
	if publish.fid.length()>255 set vRM = $$^MSG(1076,255) do vdderr("FID", vRM) quit
	set X = publish.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PUBLISH","MSG",979,"PUBLISH."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPUBLISH publish

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ID").exists() set vux("ID") = vx("ID")
	if vx("FID").exists() set vux("FID") = vx("FID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = publish.id_","_publish.fid_","_publish.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = publish.id_","_publish.fid_","_publish.seq // Copy new keys into object
	type RecordPUBLISH vnewrec = publish.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PUBLISH",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordPUBLISH publish

	if vux("ID").exists() set publish.id = vux("ID").piece("|",i)
	if vux("FID").exists() set publish.fid = vux("FID").piece("|",i)
	if vux("SEQ").exists() set publish.seq = vux("SEQ").piece("|",i)
	quit
