ZCCEIN		/*
	 ORIG: Prabhu Reginald
	 DESC: ACH Formatting for CCE Incoming Batch File

	---- Comments --------------------------------------------------------

	THIS ROUTINE IS TO BE COMPILED WITH TTXFMT
	DO NOT RUN THIS ROUTINE STANDALONE

	---- Revision History ------------------------------------------------

	08/22/2007 - Prabhu Reginald CR 28742
		 Modified TSO field variable names to check for 300 limit

	07/25/2007 - Prabhu Reginald
		 Removed rounding off from TAMT

	07/13/2007 - Prabhu Reginald
		 Added Security Folio field to be stored in the TSO array
	----------------------------------------------------------------------

	*/
	
	do RECCALL
	quit
		
RECCALL	// Record menu section

	// RECTYPE is defined in TTXFMT but extracted from ALLREC
		
	if RECTYPE="01" do REC01 quit
	if RECTYPE="02" do REC02 quit
	if RECTYPE="09" do REC09 quit
	if RECTYPE="51" do REC51 quit	
	set ERR=10 do RECERR(1)
	quit

ALLREC	// All records section
	type public String REC
	// Extract RECTYPE from 1st 2 chars
	if 'REC.isNull() set RECTYPE=REC.extract(1,2) quit
	if RECCNT.get()=1,RECTYPE'="01" do {
		set ERR=11 
		do RECERR(1)
		}
	quit

UFILINIT
	// File intialization
	
	type public String BLOCK,EBCASC,KEY,LABEL,REC,RECORD
	
	set KEY="ACH.INC"

	type RecordUTBLTAPEFMT tapefmt=Db.getRecord("UTBLTAPEFMT","KEY=:KEY",1)
	if 'tapefmt.getMode() quit

	set (RECORD,TREC)=tapefmt.rsiz
	set (BLOCK,TBLCK)=tapefmt.bsiz

	if tapefmt.lab="L" set LABEL="LABEL"
	else  set LABEL="UNLABEL"

	if tapefmt.dtype="A" set EBCASC="ASCII"
	else  set EBCASC="EBCDIC"

	set TFMT=EBCASC_"/FIXED/"_LABEL_"/RECORD="_RECORD_"/BLOCK="_BLOCK
	quit

REC01	// Batch header record
	type Date %JD
	type String %DIR,%DS
	type Number CRCD,BCHSEQ
	type public String ETC,REC,ZPTJD,%INST
	type public Number BCHTRUN,FILCR,FILDR,FILTRUN	
		
	do INT^%DIR
	set %INST=%DIR
	
	set CRCD=REC.extract(16)
	if CRCD=1 set %SystemCurrency="MXN"
	else set %SystemCurrency="USD"

	set %JD=REC.extract(24,31).toDate("YEARMMDD")
	if %JD<0 do {
		set ERR=52 
		do RECERR(1)
		}
	set %DS=%JD.toString("MM/DD/YEAR")
	set (EFD,%EffectiveDate)=%JD
	set ZPTJD=%JD.toString("YEARMMDD")
	
	set BCHID=REC.extract(3,9)
	set ER=0			// to remove: #UNDEFINED var ER
	do BCHINIT
	set BCHEFD=""
	set BCHSEQ=BCHSEQ.get()+1

	// Key 3 of [ACHINCD(A)]
	set DTLSEQ=0
	quit

UBCHINIT
	// User batch initialization
	quit

UBCHEND	
	// User batch end
	quit

REC02	// Detail record
	type String array(),CID,CK,TRFDT,TSO,ZTRN
	type Number TAMT
	type public String REC,ZPTJD,%INST
	type public Number BCHTRUN,FILCR,FILDR,FILTRUN
		
	set TRFDT = REC.extract(12,19)
	set TAMT = REC.extract(26,40)
	set CID = +REC.extract(68,80)
	set CK = +REC.extract(81,90)
	set ZTRN = REC.extract(63,64)
	do SETETC	

	set array("CK") = CK
	set array("ZTJD") = ZPTJD
	set array("ZAB") = REC.extract(20,22)
	set array("ZENT") = REC.extract(41,47)
	set array("ZESQ") = REC.extract(48,51)
	set array("ZEXIT") = REC.extract(52,58)
	set array("ZEXSQ") = REC.extract(59,62)
	set array("ZTRN") = ZTRN
	set array("ZCP") = REC.extract(65,67)
	set array("ZEXD") = REC.extract(91)
	set array("ZPMD") = REC.extract(92)
	set array("ZSC") = REC.extract(93,95)
	set array("ZPLD") = REC.extract(96,103)
	set array("ZTR") = REC.extract(104)
	set array("ZEXP") = REC.extract(115,116)
	set array("ZRFC") = REC.extract(117,129)
	set array("ZCRP") = REC.extract(130,147).trim(1," ")
	set array("ZTYP") = REC.extract(148,149)
	set array("ZDEP") = REC.extract(150,169)
	set array("ZNM") = REC.extract(170,209).trim(1," ")
	set array("ZAA") = REC.extract(210,211)
	set array("ZSF") = REC.extract(212,223).trim(1," ")
	
	// Populate the TSO variable
	do IN^UTSO(.array(),.TSO)

	set TCMT = ""
	set DTLSEQ=DTLSEQ.get()+1
	set BCHCNT=BCHCNT.get()+1

	if REC.extract(104)=0 {
		set BCHTRUN=BCHTRUN.get()+1
		set FILTRUN=FILTRUN.get()+1
	}

	// Credits
	set (BCHCR,FILCR)=0
		
	// Debits : Adding all the amounts in Debits since there is no DR/CR identifier
	set BCHDR=BCHDR.get()+TAMT
	set FILDR=FILDR.get()+TAMT

	set TAMT = TAMT/100
	do TTXFILE
	quit

REC09	// Batch control record
	
	type public String REC
	type public Number BCHTRUN,FILCR,FILDR,FILTRUN
			
	if +REC.extract(12,18)' = BCHCNT do {
		set ERR = 82 
		do RECERR(0)
		}
	if +REC.extract(19,36)' = BCHDR do {
		set ERR = 83 
		do RECERR(0)
		}
	if +REC.extract(37,43)' = +BCHTRUN.get() do {
		set ERR = 85 
		do RECERR(0)
		}
	set DRTOT = BCHDR
	set CRTOT = 0
	do BCHEND
	quit

REC51	// File control record
	type public String ORECTYPE,REC
	type public Number BCHTRUN,FILCR,FILDR,FILTRUN
	type Number PFILCNT,PFILDR,PFILCR
		
	if '(ORECTYPE.get() = "09") do {
		set ERR = 91 
		do RECERR(1)
		}		
	if +REC.extract(35,52)' = FILDR do {
		set ERR = 93 
		do RECERR(1)
		}
	if +REC.extract(53,59)' = +FILTRUN.get() do {
		set ERR = 95 
		do RECERR(0)
		}
	
	/* Set totals for physical file counts */

	set PFILCNT = 0
	set PFILDR = PFILDR.get() + FILDR
	set PFILCR = PFILCR.get() + FILCR
	set CTL = 0
	quit
	
SETETC	// Detail record
	type public Number ZTRN
	set ETC = ""
	type ResultSet rs = Db.select("DRETC","UTBLEXTTRN1","INTRFACE='ZCCEIN' AND CODE=:ZTRN")
	if 'rs.isEmpty(),rs.next() set ETC = rs.getCol(1)

	// Invalid transaction code
	if ETC = "" do {
		set ERR = 5
		do RECERR(1)
		}
	// Make sure it is defined in the Transaction code table.	
	else  if 'Db.isDefined("TRN","ETC") do {
		set ERR = 5
                do RECERR(1)
		}
	quit

RECERR(ABORT)	
	// Record error

	set ABORT = ABORT.get()
	if ERR.get() do {

		// Invalid Transaction code
		if ERR = 5 set ERRMSG = $$^MSG("3592") quit

		// Invalid record type code
		if ERR = 10 set ERRMSG = $$^MSG("5136") quit
		
		// Missing file header record
		if ERR = 11 set ERRMSG = $$^MSG("3038") quit
		
		// Improperly sequenced records
		if ERR = 12 set ERRMSG = $$^MSG("5137") quit
	
		// Missing batch control record
		if ERR = 51 set ERRMSG = $$^MSG("5138") quit
		
		// Invalid batch effective date
		if ERR = 52 set ERRMSG = $$^MSG("5139") quit

		// Detail record errors
		// MISSING BATCH HEADER RECORD"
		if ERR = 61 set ERRMSG = $$^MSG("5140") quit
		
		// DEATH NOTICE RECEIVED ACCOUNT p~
		if ERR = 62 set ERRMSG = $$^MSG("5141",CID.get()) quit
		
		// MISSING POP TERMINAL CITY OR STATE p~
		if ERR = 63 set ERRMSG = $$^MSG("5142",CID.get()) quit
	
		// Batch control record errors
		// MISSING DETAIL RECORDS
		if ERR = 81 set ERRMSG = $$^MSG("5143") quit
		
		// BATCH ITEM COUNT DOES NOT MATCH CONTROL RECORD
		if ERR = 82 set ERRMSG = $$^MSG("5144") quit
		
		// BATCH DEBITS DO NOT MATCH CONTROL RECORD
		if ERR = 83 set ERRMSG = $$^MSG("5145") quit
		
		// BATCH CREDITS DO NOT MATCH CONTROL RECORD
		if ERR = 84 set ERRMSG = $$^MSG("5146") quit
		
		// BATCH HASH TOTALS DO NOT MATCH CONTROL RECORD
		if ERR = 85 set ERRMSG = $$^MSG("5147") quit
	
		// File control record errors
		// MISSING BATCH CONTROL RECORD
		if ERR = 91 set ERRMSG = $$^MSG("5138") quit
		
		// FILE ITEM COUNT DOES NOT MATCH CONTROL RECORD
		if ERR = 92 set ERRMSG = $$^MSG("5144") quit
		
		// FILE DEBITS DO NOT MATCH CONTROL RECORD
		if ERR = 93 set ERRMSG = $$^MSG("5145") quit
		
		// FILE CREDITS DO NOT MATCH CONTROL RECORD
		if ERR = 94 set ERRMSG = $$^MSG("5146") quit
		
		// FILE HASH TOTALS DO NOT MATCH CONTROL RECORD
		if ERR = 95 set ERRMSG = $$^MSG("5147") quit
	}
	
	// Process error
	if ABORT do ABORT^TPINERR quit
	do ^TPINERR
	quit

PREOPEN	//
	quit
	
POSTREAD //
	quit

	// * Do not delete dummy line tags * //

%STOPLOD	
	// Stop ^ULODTMPL from this point on down
	do BCHINIT
	quit
		
BCHINIT		
	// Dummy line reference for GT.M
	do BCHEND
	quit
	
BCHEND	
	// Dummy line reference for GT.M
	quit

TTXFILE	
	// Dummy line reference for GT.M
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60869^53232^Jeff Walton^7330"	// Signature - LTD^TIME^USER^SIZE
