DAYLNFL(RecordLNDELNDA lndelnda, String vpar, Boolean vparNorm) // LNDELNDA - Dayend Late Notices Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (3)                      05/12/2005
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lndelnda.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lndelnda,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lndelnda,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String EFD = lndelnda.efd
	type String KEY = lndelnda.key
	type String CID = lndelnda.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EFD").exists()!vx("KEY").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNDELNDA",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNDELNDA","EFD = :lndelnda.efd and KEY = :lndelnda.key and CID = :lndelnda.cid") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EFD
	type public String KEY
	type public String CID

	type RecordLNDELNDA lndelnda = Db.getRecord("LNDELNDA","EFD=:EFD,KEY=:KEY,CID=:CID")
	if (%ProcessMode = 2) do {
		do lndelnda.setMode(2)

		do DAYLNFL(lndelnda,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNDELNDA lndelnda

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNDELNDA","EFD = :lndelnda.efd and KEY = :lndelnda.key and CID = :lndelnda.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lndelnda))  S ^DAYEND(vobj(lndelnda,-3),vobj(lndelnda,-4),vobj(lndelnda,-5))=vobj(lndelnda)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lndelnda)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNDELNDA lndelnda

	if vpar["/JOURNAL/" do VJOURNAL(.lndelnda)             // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DAYEND(vobj(lndelnda,-3),vobj(lndelnda,-4),vobj(lndelnda,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordLNDELNDA lndelnda

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNDELNDA lndelnda

	if lndelnda.efd.isNull() do vreqerr("EFD") quit
	if lndelnda.key.isNull() do vreqerr("KEY") quit
	if lndelnda.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNDELNDA","MSG",1767,"LNDELNDA."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete of Dayend Notice

	type public RecordLNDELNDA lndelnda
	/*
	------ Revision History ------------------------------------------------------

	
	05/24/00 - MOTENJ - 40196
	             Changed the condition checking syntax of %ProcessMode to the
																					correct form(if %ProcessMode'=).


	09/15/99 - CARROLLJ - 31126
		   Convert to PSL.

	01/13/99 - HAYMANP - 28976
		   Added section to set LCAD and LCEFD to NULL.
	

	
	Hire Purchase Notice
	If a loan account contains a custom notice, delete dayend fee record.
	*/


	type RecordLN ln=Db.getRecord("LN","CID")

	if %ProcessMode'=2,ln.custnot'="" do {
		new XCUSTNOT,XPLN,XLND
		set XLND=lndelnda.key
		set XLND=$E(XLND,4)
		set XCUSTNOT=ln.custnot
	
		// Set LCAD,LCEFD to NULL if applicable
		if ln.lchgnoto do {
			set LCGRDNOT=Db.getOneRow("LCGRDNOT","UTBLCUSNOT","XCUSTNOT,XLND")
			if LCGRDNOT="" quit
			set ln.lcad=""
			set ln.lcefd=""
			}
	
		if XLND=1 do {
			if EFD=ln.not1dt do Db.update("LN","NOT1DT=''","CID=:CID")
			set XPLN=Db.getOneRow("FEEPLN","UTBLCUSNOT","XCUSTNOT,1")
			if XPLN'="" do Db.delete("DAYENDLNFEEC","ASND=:EFD AND FEETYP=:XPLN AND CID=:CID")
			}
		if XLND=2 do {
			if EFD=ln.not2dt do Db.update("LN","NOT2DT=''","CID=:CID")
			set XPLN=Db.getOneRow("FEEPLN","UTBLCUSNOT","XCUSTNOT,2")
			if XPLN'="" do Db.delete("DAYENDLNFEEC","ASND=:EFD AND FEETYP=:XPLN AND CID=:CID")
			}
		if XLND=3 do {
			if EFD=ln.not3dt do Db.update("LN","NOT3DT=''","CID=:CID")
			set XPLN=Db.getOneRow("FEEPLN","UTBLCUSNOT","XCUSTNOT,3")
			if XPLN'="" do Db.delete("DAYENDLNFEEC","ASND=:EFD AND FEETYP=:XPLN AND CID=:CID")
			}
		if XLND=4 do {
			if EFD=ln.not4dt do Db.update("LN","NOT4DT=''","CID=:CID")
			set XPLN=Db.getOneRow("FEEPLN","UTBLCUSNOT","XCUSTNOT,4")
			if XPLN'="" do Db.delete("DAYENDLNFEEC","ASND=:EFD AND FEETYP=:XPLN AND CID=:CID")
			}
		if XLND=5 do {
			if EFD=ln.not5dt set ln.not5dt=""
			do ln.save()
			set XPLN=Db.getOneRow("FEEPLN","UTBLCUSNOT","XCUSTNOT,5")
			if XPLN'="" do Db.delete("DAYENDLNFEEC","ASND=:EFD AND FEETYP=:XPLN AND CID=:CID")
			}
		}
	quit
	

vai1 // Trigger AFTER_INSERT - After Insert of Dayend Notice

	type public RecordLNDELNDA lndelnda

	/*
	------ Revision History ------------------------------------------------------
	
	05/12/05 - Hillanbrand 13281
	           Change declare of ER from Number to Boolean per code
	           review comments.
	
	05/04/05 - Hillanbrand 13281
	           Corrected undefined on LEFD.  Rewrote based on current PSL
	           standards.
	
	10/15/02 - Spier 51089
		   Corrected setting of ln.lcefd=ln.lcefd and ln.lcad=ln.lcad
		   to correct variables. Removed newing of rs.

	05/24/00 - MOTENJ - 40196
	             Changed the condition checking syntax of %ProcessMode to the
																					correct form(if %ProcessMode'=).

	09/15/99 - CARROLLJ - 31126
		   Convert to PSL.

	01/06/98 - HAYMANP - 28976
		   Added logic to set LCAD and LCEFD based on LN.LCHGNOTO.
	
	
	Hire Purchase Notice
	*/


	type RecordLN ln=Db.getRecord("LN","lndelnda.cid")

	if %ProcessMode'=2,ln.custnot'="" do {
	
	
		// Set Loan Notice Day Category
		type Number XLND
		set XLND=(lndelnda.key).extract(4)

		type RecordUTBLCUSNOT utblcusnot=Db.getRecord("UTBLCUSNOT","ln.custnot,XLND",1)
		if utblcusnot.getMode()=0 quit


		if ln.lchgnoto do {
			
			type Public Boolean ER
			type String DMP,I,LCAD,LCEFD,TIM

			// Length of time
			set TIM=utblcusnot.lcgrdnot.extract(1,utblcusnot.lcgrdnot.length()-1)

			// Period (Days,Months,Payments)
			set DMP=utblcusnot.lcgrdnot.extract(utblcusnot.lcgrdnot.length())

			// Days
			if DMP="D" set LCAD=%SystemDate+TIM+1   
			if DMP="P" set LCAD=%SystemDate+1 for I=1:1:(TIM-1) 
			set LCAD=LCAD.nextFreqDate(ln.dist1fre) quit:ER.get()

			// Months
			if DMP="M" set LCAD=$$EXT^UMDT(utblcusnot.lcgrdnot,%SystemDate+1) 
			
			// Set LCAD,LCEFD if applicable			
			set ln.lcad=LCAD
			set ln.lcefd=ln.dist1nd
			
			type RecordLNLCNOT lnlcnot=Class.new("RecordLNLCNOT")
			set lnlcnot.cid=lndelnda.cid
			set lnlcnot.lcad=LCAD
			do lnlcnot.save()
			}
	
		// Update loan notice date field
		if lndelnda.efd>ln.not1dt set ln.not1dt=lndelnda.efd

			
		// If fee plan in custom notice category set up dayend fee record.
		if 'utblcusnot.feepln.isNull() do {
			type RecordDAYENDLNFEEC dayendlnfeec=Class.new("RecordDAYENDLNFEEC")
			set dayendlnfeec.asnd=lndelnda.efd
			set dayendlnfeec.feetyp=utblcusnot.feepln
			set dayendlnfeec.cid=lndelnda.cid
			do dayendlnfeec.save()
			}
	
		// Delete existing reminder notice entries in the future
		if 'utblcusnot.delrem do DELREM^CUSNOTPR(lndelnda.efd,utblcusnot.rnotcat,lndelnda.cid)
	
		// Create New Reminder
		if 'utblcusnot.rnotcat.isNull() do {
			type RecordLNDELREM lndelrem=Class.new("RecordLNDELREM")
			set lndelrem.cid=lndelnda.cid
			set lndelrem.efd=lndelnda.efd+utblcusnot.rnotoff
			set lndelrem.cat=utblcusnot.rnotcat
			do lndelrem.save()
			}
		
		do ln.save()
		}

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordLNDELNDA lndelnda
	/*
	---------- Revision History ------------------------------------------
	08/29/00 - Carrie Baildon - 35996
	Modified to not include problem loan sub-accounts.
	*/

	new CID,pcidstat
	set CID=lndelnda.cid
	set pcidstat=Db.getOneRow("PCIDSTAT","LN","CID")

	// Late notices may not be generated against problem loan sub-accounts.
	if pcidstat set ER=1,RM=$$^MSG(4499) quit
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNDELNDA lndelnda

	set X = lndelnda.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	if lndelnda.key.length()>7 set vRM = $$^MSG(1076,7) do vdderr("KEY", vRM) quit
	set X = lndelnda.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNDELNDA","MSG",979,"LNDELNDA."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNDELNDA lndelnda)	//LNDELNDA Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.lndelnda)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=LNOLC2
			}
		else  if TSRC="O" do {
			do vj1(.lndelnda)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=LNOLC2
			}
		}

	quit


vj1(RecordLNDELNDA lndelnda)	// LNOLC2  Table LNOLC2  Journal to On-Line Collection

	type RecordLN ln=Db.getRecord("LN","CID=:lndelnda.cid",1)

	if ln.custnot'=""
	else  quit

							//// Save this line for Public datatyping, if needed
	type String v1,v2,vlastkey
	set v1=ln.acn
	set v2=$$UID^CUSNOTPR("BOFF","NOTICE")
	set vlastkey=Db.nextVal("LNOLC2","ACN=:v1,UID=:v2")
	type RecordLNOLC2 lnolc2=Db.getRecord("LNOLC2","ACN=:v1,UID=:v2,LSEQ=:vlastkey",1)
	set lnolc2.cid=lndelnda.cid
	set lnolc2.efd=lndelnda.efd
	set lnolc2.fud=lndelnda.efd
	set lnolc2.lchg=ln.lchg
	set lnolc2.ptd=ln.dist1nd
	set lnolc2.tda=ln.gtdue
	set lnolc2.tdue=ln.tdue
	set lnolc2.tx1=$$NDES^CUSNOTPR(ln.custnot,lndelnda.key)

	do lnolc2.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNDELNDA lndelnda

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("EFD").exists() set vux("EFD") = vx("EFD")
	if vx("KEY").exists() set vux("KEY") = vx("KEY")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = lndelnda.efd_","_lndelnda.key_","_lndelnda.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lndelnda.efd_","_lndelnda.key_","_lndelnda.cid // Copy new keys into object
	type RecordLNDELNDA vnewrec = lndelnda.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNDELNDA",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNDELNDA lndelnda

	if vux("EFD").exists() set lndelnda.efd = vux("EFD").piece("|",i)
	if vux("KEY").exists() set lndelnda.key = vux("KEY").piece("|",i)
	if vux("CID").exists() set lndelnda.cid = vux("CID").piece("|",i)
	quit
