PROCPAT	
	/* 	
	--- Revision History ------------------------
	
	04/04/06 - RussellDS - CR20208
		   Added TCMT seciton.  Moved from PATDIST, which is obsoleted
		   by this CR.
		   
		   Removed GETETC section - not called.
		   
		   PSL clean-up.
		   
		   Removed old revision history.

	12/14/05 - PUTTASWH - CR 18157
		   Modified the code according to DBI Standards.
	*/	    	

	quit
	
	
public PRECID(String TC,	// External Transaction Code
	      String ZCLS,	// Transaction Class
	      String ZGRP,	// Transaction Group
	      String ITC)	// Internal Transaction Code
	
	type public Boolean ER
	type public String RM
	type String ETC	

	kill ZCLS,ZGRP

	// Enter transaction code first
	if TC="" do Runtime.setErrSTBLER("PAT","PAT005") if ER quit 

	set ETC=TC

	// Invalid transaction code ~p1
	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)	
	if trn.getMode()=0 set ER=1,(ZCLS,ZGRP,ITC)="" do Runtime.setErrMSG("TRN",1498) quit:ER		

	// Lowercase transaction codes protected
	if ETC?.E1L.E set ER=1,(ZCLS,ZGRP,ITC)="" do Runtime.setErrMSG("TRN",1663) quit:ER	
	 
	set ZCLS=trn.cls
	set ZGRP=trn.grp
	set ITC=trn.itc

	quit 
	
	
public POSCID(String CID,		// Account Number	
	      String TC,		// Transaction Code
	      String ETC,		// Transaction Code Array
	      String STOP,		// date the pat expires
	      String SRCTYP,		// PAT or PAY  	
	      String ZCLS,		// Transaction Class
	      String PAT1CRCD,		// CRCD of the batch		
	      String PATACN)		// CIF number 
		
	/*
	Validate account number- matches currency code of the Pat batch,
	it should match the transaction code class and group.  This function
	is called by the PATDIST screen and the PAT filer.
	*/
	
	type public Boolean ER
	type public String RM
	
	type Number ACCTSTAT
	type String ITC,ZGRP

	// Data required
	if TC.get().isNull(),CID.get().isNull() do Runtime.setErrMSG("PAT",741) if ER quit 
	if CID.get().isNull() quit 

	set ETC=TC

	type public Cache %CACHE()
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:ETC")

	set ZCLS=trn.cls
	set ZGRP=trn.grp
	set ITC=trn.itc

	if ZCLS="M" do { quit:ER
		type RecordGLAD glad=Db.getRecord("GLAD","ACN=:CID",1)
		if glad.getMode()=0 do Runtime.setErrSTBLER("PAT","INVLDACN") quit:ER
	}	

	if ZCLS'="M" do { if ER quit 
		
		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)

		set PATACN=acn.acn
		set ACCTSTAT=acn.stat

		if 'PAT1CRCD.get().isNull() set PAT1CRCD=acn.crcd quit	 // First account during create
		#if 'CUVAR.%MCP do CRCDCHK(PAT1CRCD,acn.crcd) if ER quit 
	}
	
	if STOP set STOP=STOP'>%SystemDate

	// Account closed
	if 'STOP,ZCLS'["M",ACCTSTAT=4 do Runtime.setErrSTBLER("PAT","ACNCLO") if ER quit 

	do ETCCID^TTXEXT(.trn,CID) if ER quit 
	
	quit 
		

CRCDCHK(String CRCD1,	// Currency Code
	String CRCD2)	// Currency Code
	
	type public Boolean ER
		
	// All accounts must be of the same currency
	if CRCD1'=CRCD2 do Runtime.setErrSTBLER("PAT","PAT008") if ER quit 

	quit 


public TC(String TC)		// Transaction Code	
 	
	/*
	Post processor for transaction code
	
	This function is called from the PATDIST screen and PAT filer to
	validate the transaction code entered for the PAT transaction.
	*/
	
	type public Boolean ER
	type public String PAY,RM
	
	type Number PBK
	type String ETC,ITC,ZCLS,ZGRP
	
	set ETC=TC 
	set PBK=1

	if ETC.extract()="`" do {
		set PBK=0 
		set ETC=ETC.extract(2,99)
	}	

	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
	// Invalid transaction code
	if trn.getMode()=0 do { quit
		set ER=1
		set RM=$$^MSG(1498)
	   	do Runtime.setErrMSG("PAT",3333,"RM")
	}

	// lower case tran code protected 
	if ETC?.E1L.E do Runtime.setErrMSG("TRN",1663) quit	
 
  	// System generated
	if trn.sgt do Runtime.setErrSTBLER("PAT","PAT006") if ER quit
	
	// No debit
	if PAY.get(),'(trn.itc.extract()) do Runtime.setErrSTBLER("PAT","PAT004") if ER quit     
	
	// Transaction Class
	set ITC=trn.itc
	set ZCLS=trn.cls 
	set ZGRP=trn.grp 
     	
	// Check tran code authorization
	do ETC^TTXEXT(.trn,PBK)
	// Invalid transaction code
	if ER do Runtime.setErrMSG("PAT",3333,"RM") if ER quit 

	quit 


public VAR(String X,	// X - PAT Amount Option
	   Number CID)	// Account Number
	
	type public Boolean ER
	type public String RM
	
	type Boolean FOUND,ZER
	type String CLS
	
	if X="*" quit

	type RecordSTBLPAT stblpat=Db.getRecord("STBLPAT","OPT=:X",1)
	if stblpat.getMode()=0 set ZER=1 quit
	
	// Enter account first
	if CID.get().isNull() do Runtime.setErrMSG("PAT",927) if ER quit 
	
	// Variable amounts cannot be used for G/L accounts
	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)

	if acn.getMode()=0 set FOUND=""
	else  set FOUND=acn.type
	
	// Variable amounts cannot be used for G/L accounts
	if 'FOUND do Runtime.setErrMSG("PAT",2927) if ER quit 
	
	set CLS="*"

	type RecordSTBLPATAUT spataut=Db.getRecord("STBLPATAUT","OPT=:X,CLS=:CLS",1)
	if spataut.getMode()=1 set ZER=1 quit

	set CLS=acn.cls
	
	// Invalid option for class ~p1
	set spataut=Db.getRecord("STBLPATAUT","OPT=:X,CLS=:CLS",1)	
	if spataut.getMode()=0 do Runtime.setErrMSG("PAT",1412,"CLS") quit:ER

	quit 
	

public AMOUNT(Number AMOUNT)

	type public Boolean ER
	
	type Number X
	type String XTYP
	
	if 'AMOUNT quit 	

	set X=$$INT^%ZM(AMOUNT,"$")

	if 'ER quit 

	set XTYP="$"
	
	// Data type is defined as ~p1
	type RecordDBCTLDVFM dvfm=Db.getRecord("DBCTLDVFM","TYP=:XTYP",1)
	do Runtime.setErrMSG("PAT",742,dvfm.des) if ER quit 

	quit 
	

public MISC(String TC,	// Transaction Code variable 
	    String ETC,	// Transaction Code array 
	    String CID)	// Account number
	
	/*
	This label is used to build a lookup table for the TSO field of a
	PAT transaction. It is called by the PAT filer and the PATDIST screen.
	Based on the account and the transaction code, a table of valid TSO values
	is created in the array FF.	
	
	RETURNS:
		. FF 	values used to build TSO  /TYP=T
	

	*/
	
	type public Boolean ER
	type public Number NI
	type public String FF, RM
	
	type Boolean E()
	type Number MAXNI, MFMAX, TYPE
	type String CLS, GRP, MFT(,), N

	set ETC=TC
	if ETC="" quit
	
	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
	// Invalid transaction code ~p1
	if trn.getMode()=0 do Runtime.setErrMSG("TRN",1498) quit		
 
	// lower case tran code protected
	if ETC?.E1L.E do Runtime.setErrMSG("TRN",1663) quit		

      	if "DL"'[trn.cls quit		  		// Transaction Class
	set E(9)=trn.mff		       		// Miscellaneous Field Flag
	
	type RecordACN acn=Db.getRecord("ACN","CID")
	set CLS=acn.cls
	
	do CRTMFT^CRTMF 	// Call CRTMFT instead of MFT cause MFT was
				// renamed to CRTMFT
	if CLS="D" kill MFT("L")
	else  kill MFT("D")
	
	// Delete non-TSO's and non-SPR's
	set N=""
	for  set N=MFT(CLS,N).order() quit:N=""  do {

		if MFT(CLS,N).piece("|",1)?1"TSO".E quit 
		if MFT(CLS,N).piece("|",1)?1"SPR".E quit 
		kill MFT(CLS,N)
	}
	
	// Clean out check prompt for DDA Withdrawals.
	
	set N=""
	if CLS="D" do {
		for  set N=MFT(CLS,N).order() quit:N=""  do {
			// I18N=OFF
			if MFT(CLS,N).piece("|",1)'?1"TSO(""CK"")" quit 
			// I18N=ON
			kill MFT(CLS,N)
		}
	}
	
	
	// Handle queries and delete those which fail
	for  set N=MFT(CLS,N).order() quit:N=""  do MFT(.MFT(,), CLS, N)
	
	// Only valid queries are left, remove non-required if duplicates
	
	set N=MFT(CLS,"").order()
	if MFT(CLS,N).order()'="" do {
		set N="" for  set N=MFT(CLS,N).order() quit:N=""  do {
			if MFT(CLS,N).piece("|",3) quit 
			kill MFT(CLS,N)
		}
	}
	
	// Take first one only
	set N=MFT(CLS,"").order() if N="" set:NI.exists() NI=NI+1 quit 
	set FF=MFT(CLS,N) do QUAL(FF.piece("|",4),.FF)

	quit 
	

MFT(String MFT(,),	 // Check the queries and delete failures
    String CLS,
    String N)

	type Date EFD
	type Number piece
	type String QRY, x, X, y, z
	
	set x=MFT(CLS,N).piece("|",4)
	set EFD=%SystemDate	
	// Execute pre-processor
	for piece=2:1 set y=x.piece("/",piece) quit:y=""  do {
		#ACCEPT DATE=12/17/03;PGM=John Carroll
		if y.extract(1,4)="XPR=" set z=y.extract(5,999) xecute z
	}
	
	set QRY=MFT(CLS,N).piece("|",2) if QRY="" quit 
	#ACCEPT DATE=12/17/03;PGM=John Carroll
	set X="S X="_QRY xecute X if X quit 
	kill MFT(CLS,N)

	quit 
	

QUAL(String str,		// Str
     String array())		// Array
	
	type Number i
	type String keywrd,val,x	
	
	for i=1:1:str.length("/") do {
		
		set x=str.piece("/",i) if x="" quit 
		set keywrd=x.piece("=",1)
		set val=x.piece("=",2,99)
		set array(keywrd)=val

	}

	quit 
	

CURCHK(String CRCD,	// Currency Code - PAT1.CRCD
       Number XCID,	// account to be checked
       RecordPAT pat)	// PAT Record
       
	type public Boolean ER

	type RecordACN acn=Db.getRecord("ACN","XCID",1)
	
	if acn.getMode()=0 quit			// gl account

	do CRCDCHK(CRCD,acn.crcd) if ER quit 

	quit 
	

public MISC1(String X,		// screen value for CKNAM1 dataitem 	
	     String CID)	// account number   

	
	/*
	Called from PATDIST screen and from PAT filer (PAY filer and 
	screens should call this when they are converted to filer code). 
	These are the only valid areas of the system which should call 
	this function. This function will build the variable TSO for 
	a PAT transaction.
	
	RETURNS:
		. TSO Transaction TSO field   		/TYP=T	 
	
	*/
	
	type public Boolean ER
	type public String FF, TSO

	type Number LEN
	type String ET, DES, TBL, TMPVAR, TYP, XPP
	
	kill TSO	
	
	if 'FF.exists(),X="" quit 
	// Miscellaneous field not applicable for this transaction code
	if 'FF.exists(),X'="" do Runtime.setErrMSG("PAT",1753) if ER quit 
	
	set DES=FF("DES").get()
	set LEN=FF("LEN").get()
	set TBL=FF("TBL").get()
	set TYP=FF("TYP").get()
	set XPP=FF("XPP").get()
	
	// ~p1 required for this transaction code
	if X="",FF.piece("|",3) set DES=DES.get() do Runtime.setErrMSG("PAT",3075,"DES") quit:ER 
	
	if TYP="" set TYP="T"
	set TSO=""
	#ACCEPT DATE=12/17/03;PGM=John Carroll
	if XPP'="" xecute XPP if ER quit 
	
	// Field length (~p1) exceeded
	if LEN,X.length()>LEN do Runtime.setErrMSG("PAT",1076,"LEN") if ER quit
	if TBL'="" set ET=$$VER^DBSTBL(TBL,X,TYP)
	
	// Invalid table value ~p1
	if TBL'="",ET="" do Runtime.setErrMSG("PAT",1485,"X") if ER quit 
	
	/*
	Update TSO; required because IN^UTSO expects both variables to be 
	passed by reference.
	*/

	new TMPTSO 
	set TMPVAR=FF.piece("|",1)  
	set @TMPVAR=X do IN^UTSO(.TSO,.TMPTSO)
	set TSO=TMPTSO 
	quit 
	

public TCMT(String key,		// Account number OR Customer number
	    String table,	// Table name
	    String column,	// Column name
	    Date EFD)		// Effective date
	    	
	/*
	Called by PAT.HIST_D journal to format TCMT field for journal file.
	
	Returns appropriate comment field (TCMT) for file maintenance
	activity for use by the PAT file journal for DTJFM. This is 
	needed to retrieve the old value during updates because the PAT
	screens does not produce a UX with old/new values.
	 
	RETURNS:
	 	. $$		Comment field		/TYP=T
	 
	EXAMPLE:
	 	set X = $$TCMT^PATDIST(CID,"PAT","TAMT",56565)
	
	*/
	
	type public Number ACN, BATCH, SEQ
	type public String SRC

	type String TCMT
	
	if (BATCH.get().isNull() ! ACN.get().isNull() ! SRC.get().isNull() ! SEQ.get().isNull()) quit ""
		
	type RecordPAT pat = Db.getRecord("PAT", "SRC=:SRC,ACN=:ACN,BATCH=:BATCH,SEQ=:SEQ", 1)
	
	// Message 805 = deleted
	// Message 3989 = Account ~p1
	set TCMT = key_"["_table_"]"_column_":"_pat.cid_":"_$$^MSG(805)_":"_$$^MSG(3989, pat.cid)
	
	if (EFD > %SystemDate) set TCMT=TCMT_":"_EFD.toString()
	
	quit TCMT
 #OPTION ResultClass ON
Public String vSIG()	quit "60359^50350^Dan Russell^10867"	// Signature - LTD^TIME^USER^SIZE
