AUDCON 
	 /*
	 ORIG: 
	 DESC: 

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------
	
	03/29/07 - SVS Kiran - CR25851
		   Modified X.isNull() to X.get().isNull() in the section INIT 
		   to eliminate GTM error while executing the function AUDITCON. 
		   
	02/15/07 - RussellDS - CR25382
		   Eliminated use of obsoleted routine DBSQRYA.
	
	08/15/06 - VANITHAK - CR 22163
		   Eliminated runtime errors while running the screen AUDMAN.
		   Deleted the call UTLERR in ERR section. Also modified to 
		   eliminate PSL compiler warnings. Included the section 
		   DYNSQL to generate a dynamic SQL based on the screen 
		   input. Eliminated ACN and MAN section and included the 
		   functionality in SETUP.
		   
	12/13/05 - chhabris - CR18153
		   Converted to PSL. Removed old revision history.

	----------------------------------------------------------------------
	*/
	
	do INIT
	
	quit


INIT	// Setting the default values 
	type public Boolean ER
			
	type Number I, OPT, POS, RAN, RUN, SKP, TOT, VAL, ZRUN
	type String AUDIT(), BAL, CID, CLS, ET, GRP, RADDR(), TXT()
	type String TLD, TYPE, X, ZADDR
	
	set POS = 1
	set (CID,CLS,TYPE,TLD,BAL,ZRUN) = "ALL"
	set TOT = 1000
	set (SKP,OPT,RAN) = 0
	set GRP = "'=""ESC""&'=""WASH"""
	
	type ResultSet rs = Db.select("RUN","AUDIT0","TJD=:%SystemDate","RUN DESC")
	if rs.next() set RUN = rs.getCol("RUN")+1
	else  set RUN=1
	
	lock AUDIT(TJD,RUN):2 
	else  set ET = "RECLOC" do ERR quit
	
	set ZADDR = "ADDR"
	type ResultSet rs1 = Db.select("NAME,NAME2,ADDR,ADDR2,CITY,STATE,CNTRY,MZIP,AUDPHON,AUDCON,CSZ","UTBLAUDIT","KEY=:ZADDR")
	if rs1.next() set X = rs1.getRow("|").toString() 
	
	// Auditor ""ADDR"" must be defined via function UTBL001
	if X.get().isNull() do Runtime.setErrMSG("UTBLAUDIT",310) quit

	set VAL = 0 
	for I = 1:1:4 set RADDR(I)=""
	for I = 1:1:4  do {
		if 'X.piece("|",I).isNull() set VAL = VAL+1,RADDR(VAL) = X.piece("|",I)
		}
	if VAL = 4 set RADDR(2) = RADDR(3),RADDR(3) = RADDR(4),VAL = 3
	set VAL = VAL+1,RADDR(VAL) = X.piece("|",5)_", "_X.piece("|",6)_"  "_X.piece("|",8)
	
	// Return Address Information
	set TXT(2) = $$^MSG(6567)
	
	do START
	quit
	
	
START	// Reading the values from the screen 
	type public Date TJD
	type public Number OLNTB, OPT, SKP, RAN, RUN, TYPE, TOT
	type public String %NOPRMT, %READ, %TAB(), BAL, CID, CLS
	type public String GRP, TLD, POS, RADDR(), SEQBY, TXT(), VFMQ
		
	set (SKP)="" 
	set %TAB("OPT")=".OPT3/HLP=[AUDIT0]OPT/TBL=[STBLAUDMET]"
		
	set %READ="@@%FN,,,OPT/REQ",%NOPRMT="F"
	do ^UTLREAD if VFMQ="Q" quit
		
	set %TAB("CID")=".ACCOUNTS1/HLP=[ACN]CID/XPP=D EXT^DBSQRY"
	set %TAB("TOT")=".TOT1/HLP=[AUDIT0]TOT"
	set %TAB("CLS")=".A7/HLP=[ACN]CLS/TBL=[STBLCLS]/XPP=D EXT^DBSQRY" 
	set %TAB("GRP")=".A8/HLP=[ACN]GRP/XPP=D EXT^DBSQRY"
	set %TAB("TYPE")=".QI1/HLP=[ACN]TYPE/XPP=D EXT^DBSQRY"
	set %TAB("BAL")=".BAL3/HLP=[ACN]BAL/XPP=D EXT^DBSQRY"
	set %TAB("TLD")=".TLD1/HLP=[ACN]TLD/XPP=D EXT^DBSQRY"
	set %TAB("POS")=".POS1/HLP=[AUDIT0]POS"
	
	// Run Option ~p1 - ~p2
	type RecordSTBLAUDMET saudmet = Db.getRecord("STBLAUDMET","OPT=:OPT",1)
	if saudmet.getMode() set TXT(3) = $$^MSG(6568,OPT,saudmet.desc)
	else  set TXT(3) = $$^MSG(6568,OPT,"")

	// Address Line 1 ~p1
	set TXT(4) = $$^MSG(8055,RADDR(1))
	
	// Address Line 2 ~p1
	set TXT(5) = $$^MSG(8056,RADDR(2))
	
	// Address Line 3 ~p1
	set TXT(6) = $$^MSG(8057,RADDR(3))
	
	// Address Line 4 ~p1
	set TXT(7) = $$^MSG(8058,RADDR(4))
	
	set %READ="@@%FN,,,@TXT(3)/CEN,,CID/REQ,TOT/REQ,CLS/REQ,GRP/REQ,TYPE/REQ,BAL/REQ,TLD/REQ,POS/REQ"

	if OPT=0 do {
		set %TAB("SKP")=".SKP1/HLP=[AUDIT0]SKP"
		set %READ=%READ_",SKP/REQ",SKP=10
		}
	
	if OPT=1 do {
		set %TAB("RAN")=".RAN1/MIN=1/HLP=[AUDIT0]RAN"
		set %READ=%READ_",RAN/REQ",RAN=25
		}
		
	set %READ=%READ_",,@TXT(2)/CEN,,@TXT(4),@TXT(5),@TXT(6),@TXT(7)"
	do ^UTLREAD if VFMQ = "Q" quit
	
	// Create top level audit entry
	type RecordAUDIT0 audit0 = Class.new("RecordAUDIT0","TJD=:%SystemDate,RUN=:RUN")

	set audit0.opt = OPT
	set audit0.cid = CID
	set audit0.tot = TOT
	set audit0.cls = CLS
	set audit0.grp = GRP
	set audit0.type = TYPE
	set audit0.bal = BAL
	set audit0.tjd = TJD
	set audit0.pos = POS
	set audit0.skp = SKP
	set audit0.ran = RAN
	
	do audit0.save()

	do SETUP 

	quit
		
	
DYNSQL()	// Construct dynamic sql
	
	type public String BAL, CID, CLS, GRP, TLD, TYPE

	type Number SEQ
	type String DQQRY(), WHERE
	
	set SEQ = 1
	set DQQRY(SEQ) = "[ACN]STAT '=4"
	
	if 'CID.get().isNull(), (CID '= "ALL") do {
		set SEQ = SEQ + 1
		set DQQRY(SEQ) = "[ACN]CID "_CID
		}

	if 'CLS.get().isNull(), (CLS '= "ALL") do {
		set SEQ = SEQ + 1
		set DQQRY(SEQ) = "[ACN]CLS "_CLS
		}

	if 'GRP.get().isNull(), (GRP '= "'=""ESC""&'=""WASH""") do {
		set SEQ = SEQ + 1
		set DQQRY(SEQ) = "[ACN]GRP "_GRP
		}

	if 'TYPE.get().isNull(), (TYPE '= "ALL") do {
		set SEQ = SEQ + 1
		set DQQRY(SEQ) = "[ACN]TYPE "_TYPE
		}
		
	if 'BAL.get().isNull(), (BAL '= "ALL") do {
		set DQQRY(SEQ) = "[ACN]BAL "_BAL
		set SEQ = SEQ + 1
		}

	if 'TLD.get().isNull(), (TLD '= "ALL") do {
		set SEQ = SEQ + 1
		set DQQRY(SEQ) = "[ACN]TLD "_TLD
		}
		
	set WHERE = $$WHERE^SQLCONV(.DQQRY(), "ACN")
	
	quit WHERE
		
	
SETUP	// Update audit table based on OPT

	type public Number OPT, RAN, SKP, TOT
	
	type Number CNT, NTH
	type String WHERECON

	// Construct dynamic SQL 	
	set WHERECON = $$DYNSQL()
	
	// 2 Manual Selection of Accounts
	if OPT = 2 do { quit
		set %ProcessMode = 1
		do ^AUDMAN
		}

	// Random Accounts Within a Range
	if OPT = 1 set NTH = RAN.random() + 1
	// All Accounts Within a Range
	else  set NTH = SKP

	set CNT = 0

	#ACCEPT Date=08/14/06; PGM=Vanitha Krishnasamy; CR=22163
	type ResultSet rs1 = Db.select("CID", "ACN", WHERECON)
	while rs1.next() do { quit:(CNT = TOT)
		set CNT = CNT + 1
		if CNT = NTH do {
			do CID(rs1.getCol("CID"))

			// Random Accounts Within a Range
			if OPT = 1 set NTH = NTH + RAN.random() + 1
			// All Accounts Within a Range
			else  set NTH = NTH + SKP
			}
		}
	
	quit

	
CID(Number CID)

	// Update audit table

	type public Number RUN, TSEQ
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:CID", 1)
	if 'acn.getMode() quit
		
	type ResultSet rs=Db.select("TSEQ", "HIST", "CID=:CID", "TSEQ DESC") 
	if rs.next() set TSEQ = rs.getCol("TSEQ")
	else  set TSEQ = 0
	
	write "."
	
	type RecordAUDIT audit=Db.getRecord("AUDIT", "TJD=:%SystemDate,RUN=:RUN,CID=:CID", 1)
	set audit.bal = acn.bal
	set audit.tseq = TSEQ
	do audit.save()
	
	quit
	
	
ERR	//
	type public Boolean ER
	type public String ET
	if 'ET.exists() set ET = "INVALID"

	set ER=1 

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60719^6544^VenkataSaiKiran Sanapala^6341"	// Signature - LTD^TIME^USER^SIZE
