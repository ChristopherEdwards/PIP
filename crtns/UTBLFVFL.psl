UTBLFVFL(RecordUTBLFORMVAR utblformvar, String vpar, Boolean vparNorm) // UTBLFORMVAR - Forms/Letters To Produce Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (17)             11/22/2003
	// Trigger Definition (2)                      02/02/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblformvar.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblformvar,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblformvar,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CO = utblformvar.co
	type String FORM = utblformvar.form
	type String VAR = utblformvar.var

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CO").exists()!vx("FORM").exists()!vx("VAR").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLFORMVAR",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLFORMVAR","CO = :utblformvar.co and FORM = :utblformvar.form and VAR = :utblformvar.var") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CO
	type public String FORM
	type public String VAR

	type RecordUTBLFORMVAR utblformvar = Db.getRecord("UTBLFORMVAR","CO=:CO,FORM=:FORM,VAR=:VAR")
	if (%ProcessMode = 2) do {
		do utblformvar.setMode(2)

		do UTBLFVFL(utblformvar,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLFORMVAR utblformvar

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLFORMVAR","CO = :utblformvar.co and FORM = :utblformvar.form and VAR = :utblformvar.var") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblformvar,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblformvar,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblformvar)) S ^UTBL("FORMVAR",vobj(utblformvar,-3),vobj(utblformvar,-4),vobj(utblformvar,-5))=vobj(utblformvar)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLFORMVAR utblformvar

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblformvar,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("FORMVAR",vobj(utblformvar,-3),vobj(utblformvar,-4),vobj(utblformvar,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLFORMVAR utblformvar

	// Type local variables for access keys for defaults
	type public String CO
	type public String FORM
	type public String VAR

	if utblformvar.acnsort.isNull() set utblformvar.acnsort = 0 // acnsort
	if utblformvar.addrflg.isNull() set utblformvar.addrflg = 0 // addrflg
	if utblformvar.parmflg.isNull() set utblformvar.parmflg = 0 // parmflg
	if utblformvar.qflg.isNull() set utblformvar.qflg = 1  // qflg
	quit


vreqn // Validate required data items

	type public RecordUTBLFORMVAR utblformvar

	if utblformvar.acnsort.isNull() do vreqerr("ACNSORT") quit
	if utblformvar.parmflg.isNull() do vreqerr("PARMFLG") quit
	if utblformvar.qflg.isNull() do vreqerr("QFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLFORMVAR utblformvar

	if utblformvar.co.isNull() do vreqerr("CO") quit
	if utblformvar.form.isNull() do vreqerr("FORM") quit
	if utblformvar.var.isNull() do vreqerr("VAR") quit

		if vx("ACNSORT").exists(),utblformvar.acnsort.isNull() do vreqerr("ACNSORT") quit
		if vx("PARMFLG").exists(),utblformvar.parmflg.isNull() do vreqerr("PARMFLG") quit
		if vx("QFLG").exists(),utblformvar.qflg.isNull() do vreqerr("QFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLFORMVAR","MSG",1767,"UTBLFORMVAR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLFORMVAR utblformvar
	if vx("").order().isNull() do AUDIT^UCUTILN(utblformvar,.vx(),1,"|") quit
	if vx("TJDVAL").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblformvar,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordUTBLFORMVAR utblformvar
	/*---- Revision History -------------------------------------------
	09/12/2005 - PrakashJ 17423
		     Converted $L,$E of code to length and extract

	02/28/2002 - ofaltr 49384
		     Added check on FORM and TJDVAL for IRA forms since TJDVAL	
		     is not required.

	08/24/2001 - ofaltr 47214
		     Added check on FORM and TJDVAL for the
		     creation/modification of Statement Forms.  TJDVAL is
		     not Required for Statement Processing.

	08/01/2001 - myersk 46735
		     Converted to psl
	------------------------------------------------------------------
	*/
	new CAL,DAYS,SN,TJDVAL
	set TJDVAL=$$UPPER^%ZFUNC(utblformvar.tjdval)
	set TJDVAL=$$RTB^%ZFUNC(TJDVAL)
	// ofaltr - 08/24/01 arq47214
 	if ((utblformvar.form).extract(1,4)="STMT"),(TJDVAL.isNull()) quit
	//ofaltr - 02/28/02
	if ((utblformvar.form).extract(1,3)="IRA"),(TJDVAL.isNull()) quit
	set CAL=TJDVAL.extract(1)
	if $S(CAL="P":0,CAL="T":0,1:1) do XERR quit
	if CAL="P",(utblformvar.form'="REJITEMS") do XERR quit
	if CAL="P",TJDVAL.length()>1 do XERR quit
	set SN=TJDVAL.extract(2)
	if $S(SN="+":0,SN="-":0,SN.isNull():0,1:1) do XERR quit 
	if $L(TJDVAL)=2 do XERR quit
	set DAYS=TJDVAL.extract(3,99)
	if 'DAYS.isNull(),(DAYS'=+DAYS) do XERR quit
	set utblformvar.tjdval=TJDVAL
 	quit
	//----------------------------------------------------------------
XERR	/* Set error message and ER
	   This line tag is also called by BEFORE_UPD_TJDVAL trigger
	----------------------------------------------------------------*/
	type String VAR

	set VAR=$$^MSG(1350,$$^MSG(4453))
	// ("Error Invalid format Use one of the following forms: P, T, T-n, or T+n")
	do Runtime.setErrMSG("UTBLFORMVAR",979,VAR)
	quit

vbu1 // Trigger BEFORE_UPD_TJDVAL - Strip spaces from TJDVAL

	type public RecordUTBLFORMVAR utblformvar
	do utblformvar.setAuditFlag(1)
	/*---- Revision History -------------------------------------------
	09/12/2005 - PrakashJ 17423
		     Converted $E of code to extract
		     
	02/28/2002 - ofaltr 49384
		     Added check on FORM and TJDVAL for IRA forms since TJDVAL
		     is not required.

								08/24/2001 - ofaltr 47214
																					Added check on FORM and TJDVAL for the
																					creation/modification of Statement Forms.  TJDVAL is
																					not Required for Statement Processing.

	08/01/2001 - myersk 46735
		     Converted to psl
	------------------------------------------------------------------
	*/
	
	new CAL,DAYS,SN,TJDVAL
	
	set TJDVAL=(utblformvar.tjdval).upperCase()
	set TJDVAL=$$RTB^%ZFUNC(TJDVAL)
	// ofaltr - 08/24/01 arq47214
	if ((utblformvar.form).extract(1,4)="STMT"),(TJDVAL.isNull()) quit
	//ofaltr - 02/28/02
	if ((utblformvar.form).extract(1,3)="IRA"),(TJDVAL.isNull()) quit	
 	set CAL=TJDVAL.extract(1)
 	
	if $S(CAL="P":0,CAL="T":0,1:1) do XERR quit
	if CAL="P",(utblformvar.form'="REJITEMS") do XERR quit
	if CAL="P",TJDVAL.length()>1 do XERR quit
	set SN=TJDVAL.extract(2)
	if $S(SN="+":0,SN="-":0,SN.isNull():0,1:1) do XERR quit
	if TJDVAL.length()=2 do XERR quit
	set DAYS=TJDVAL.extract(3,99)
	if 'DAYS.isNull(),(DAYS'=+DAYS) do XERR quit
	set utblformvar.tjdval=TJDVAL
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLFORMVAR utblformvar

	set X = utblformvar.co if 'X.isNull(),'Db.isDefined("UTBLCO","X") set vRM = $$^MSG(1485,X) do vdderr("CO", vRM) quit
	set X = utblformvar.form if 'X.isNull(),'Db.isDefined("UTBLFORMS","X") set vRM = $$^MSG(1485,X) do vdderr("FORM", vRM) quit
	set X = utblformvar.var if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("VAR", vRM) quit
	if '("01"[utblformvar.ACNSORT) set vRM=$$^MSG(742,"L") do vdderr("ACNSORT", vRM) quit
	set X = utblformvar.addrflg if 'X.isNull(),'Db.isDefined("STBLFORMVAR","X") set vRM = $$^MSG(1485,X) do vdderr("ADDRFLG", vRM) quit
	set X = utblformvar.cal if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("CAL", vRM) quit
	if utblformvar.conflg.length()>60 set vRM = $$^MSG(1076,60) do vdderr("CONFLG", vRM) quit
	if utblformvar.cproc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CPROC", vRM) quit
	if utblformvar.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	if utblformvar.needcol.length()>60 set vRM = $$^MSG(1076,60) do vdderr("NEEDCOL", vRM) quit
	if utblformvar.omr.length()>8 set vRM = $$^MSG(1076,8) do vdderr("OMR", vRM) quit
	if '("01"[utblformvar.PARMFLG) set vRM=$$^MSG(742,"L") do vdderr("PARMFLG", vRM) quit
	if '("01"[utblformvar.QFLG) set vRM=$$^MSG(742,"L") do vdderr("QFLG", vRM) quit
	if utblformvar.rectypes.length()>100 set vRM = $$^MSG(1076,100) do vdderr("RECTYPES", vRM) quit
	if utblformvar.subqry.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SUBQRY", vRM) quit
	if utblformvar.test.length()>200 set vRM = $$^MSG(1076,200) do vdderr("TEST", vRM) quit
	if utblformvar.tjdval.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TJDVAL", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLFORMVAR","MSG",979,"UTBLFORMVAR."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLFORMVAR utblformvar

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CO").exists() set vux("CO") = vx("CO")
	if vx("FORM").exists() set vux("FORM") = vx("FORM")
	if vx("VAR").exists() set vux("VAR") = vx("VAR")
	do vkey(1) set voldkey = utblformvar.co_","_utblformvar.form_","_utblformvar.var // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblformvar.co_","_utblformvar.form_","_utblformvar.var // Copy new keys into object
	type RecordUTBLFORMVAR vnewrec = utblformvar.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLFORMVAR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLFORMVAR utblformvar

	if vux("CO").exists() set utblformvar.co = vux("CO").piece("|",i)
	if vux("FORM").exists() set utblformvar.form = vux("FORM").piece("|",i)
	if vux("VAR").exists() set utblformvar.var = vux("VAR").piece("|",i)
	quit
