DBSDOMF(RecordDBSDOM dbsdom, String vpar, Boolean vparNorm) // DBSDOM - User-Defined Data Types Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (38)             06/09/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = dbsdom.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dbsdom,.vxins(),10,"|")
	if %O = 1 quit:'dbsdom.isChanged()  do AUDIT^UCUTILN(dbsdom,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SYSSN").exists()!vx("DOM").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBSDOM",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBSDOM","SYSSN = :dbsdom.syssn and DOM = :dbsdom.dom") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SYSSN
	type public String DOM

	type RecordDBSDOM dbsdom = Db.getRecord("DBSDOM","SYSSN=:SYSSN,DOM=:DOM")
	if (%ProcessMode = 2) do {
		do dbsdom.setMode(2)

		do DBSDOMF(dbsdom,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBSDOM dbsdom

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBSDOM","SYSSN = :dbsdom.syssn and DOM = :dbsdom.dom") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(dbsdom,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(dbsdom,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(dbsdom,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^DBCTL("SYS","DOM",vobj(dbsdom,-3),vobj(dbsdom,-4),n)=vobj(dbsdom,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(dbsdom,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(dbsdom,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^DBCTL("SYS","DOM",vobj(dbsdom,-3),vobj(dbsdom,-4),n)=vobj(dbsdom,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDBSDOM dbsdom
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^DBCTL("SYS","DOM",vobj(dbsdom,-3),vobj(dbsdom,-4),n)) quit:n=""  if '$D(vobj(dbsdom,n)),$D(^DBCTL("SYS","DOM",vobj(dbsdom,-3),vobj(dbsdom,-4),n))#2 set vobj(dbsdom,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBSDOM dbsdom

	if 'vkeychg.get(),dbsdom.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar'["/NOLOG/" do ^DBSLOGIT(dbsdom,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DBCTL("SYS","DOM",vobj(dbsdom,-3),vobj(dbsdom,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDBSDOM dbsdom

	// Type local variables for access keys for defaults
	type public String SYSSN
	type public String DOM

	if dbsdom.ltd.isNull() set dbsdom.ltd = +$H            // ltd
	if dbsdom.prdec.isNull() set dbsdom.prdec = 0          // prdec
	if dbsdom.prdes.isNull() set dbsdom.prdes = 0          // prdes
	if dbsdom.prdft.isNull() set dbsdom.prdft = 0          // prdft
	if dbsdom.pripf.isNull() set dbsdom.pripf = 0          // pripf
	if dbsdom.prlen.isNull() set dbsdom.prlen = 1          // prlen
	if dbsdom.prmax.isNull() set dbsdom.prmax = 0          // prmax
	if dbsdom.prmin.isNull() set dbsdom.prmin = 0          // prmin
	if dbsdom.prmsk.isNull() set dbsdom.prmsk = 0          // prmsk
	if dbsdom.prmsu.isNull() set dbsdom.prmsu = 0          // prmsu
	if dbsdom.prnlv.isNull() set dbsdom.prnlv = 0          // prnlv
	if dbsdom.propf.isNull() set dbsdom.propf = 0          // propf
	if dbsdom.prptn.isNull() set dbsdom.prptn = 0          // prptn
	if dbsdom.prrhd.isNull() set dbsdom.prrhd = 0          // prrhd
	if dbsdom.prsiz.isNull() set dbsdom.prsiz = 0          // prsiz
	if dbsdom.prtbl.isNull() set dbsdom.prtbl = 0          // prtbl
	if dbsdom.prtyp.isNull() set dbsdom.prtyp = 1          // prtyp
	if dbsdom.prvld.isNull() set dbsdom.prvld = 0          // prvld
	if dbsdom.user.isNull() set dbsdom.user = $$USERNAM^%ZFUNC // user
	quit


vreqn // Validate required data items

	type public RecordDBSDOM dbsdom

	if dbsdom.des.isNull() do vreqerr("DES") quit
	if dbsdom.prdec.isNull() do vreqerr("PRDEC") quit
	if dbsdom.prdes.isNull() do vreqerr("PRDES") quit
	if dbsdom.prdft.isNull() do vreqerr("PRDFT") quit
	if dbsdom.pripf.isNull() do vreqerr("PRIPF") quit
	if dbsdom.prlen.isNull() do vreqerr("PRLEN") quit
	if dbsdom.prmax.isNull() do vreqerr("PRMAX") quit
	if dbsdom.prmin.isNull() do vreqerr("PRMIN") quit
	if dbsdom.prmsk.isNull() do vreqerr("PRMSK") quit
	if dbsdom.prmsu.isNull() do vreqerr("PRMSU") quit
	if dbsdom.prnlv.isNull() do vreqerr("PRNLV") quit
	if dbsdom.propf.isNull() do vreqerr("PROPF") quit
	if dbsdom.prptn.isNull() do vreqerr("PRPTN") quit
	if dbsdom.prrhd.isNull() do vreqerr("PRRHD") quit
	if dbsdom.prsiz.isNull() do vreqerr("PRSIZ") quit
	if dbsdom.prtbl.isNull() do vreqerr("PRTBL") quit
	if dbsdom.prtyp.isNull() do vreqerr("PRTYP") quit
	if dbsdom.prvld.isNull() do vreqerr("PRVLD") quit
	if dbsdom.typ.isNull() do vreqerr("TYP") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBSDOM dbsdom

	if dbsdom.syssn.isNull() do vreqerr("SYSSN") quit
	if dbsdom.dom.isNull() do vreqerr("DOM") quit

	if 'vobj(dbsdom,-100,0,"").order().isNull() do {
		if vx("DES").exists(),dbsdom.des.isNull() do vreqerr("DES") quit
		if vx("TYP").exists(),dbsdom.typ.isNull() do vreqerr("TYP") quit
	}
	if 'vobj(dbsdom,-100,1,"").order().isNull() do {
		if vx("PRDES").exists(),dbsdom.prdes.isNull() do vreqerr("PRDES") quit
		if vx("PRTYP").exists(),dbsdom.prtyp.isNull() do vreqerr("PRTYP") quit
		if vx("PRLEN").exists(),dbsdom.prlen.isNull() do vreqerr("PRLEN") quit
		if vx("PRSIZ").exists(),dbsdom.prsiz.isNull() do vreqerr("PRSIZ") quit
		if vx("PRTBL").exists(),dbsdom.prtbl.isNull() do vreqerr("PRTBL") quit
		if vx("PRRHD").exists(),dbsdom.prrhd.isNull() do vreqerr("PRRHD") quit
		if vx("PRNLV").exists(),dbsdom.prnlv.isNull() do vreqerr("PRNLV") quit
		if vx("PRMIN").exists(),dbsdom.prmin.isNull() do vreqerr("PRMIN") quit
		if vx("PRMAX").exists(),dbsdom.prmax.isNull() do vreqerr("PRMAX") quit
		if vx("PRPTN").exists(),dbsdom.prptn.isNull() do vreqerr("PRPTN") quit
		if vx("PROPF").exists(),dbsdom.propf.isNull() do vreqerr("PROPF") quit
		if vx("PRIPF").exists(),dbsdom.pripf.isNull() do vreqerr("PRIPF") quit
		if vx("PRVLD").exists(),dbsdom.prvld.isNull() do vreqerr("PRVLD") quit
		if vx("PRDFT").exists(),dbsdom.prdft.isNull() do vreqerr("PRDFT") quit
		if vx("PRDEC").exists(),dbsdom.prdec.isNull() do vreqerr("PRDEC") quit
		if vx("PRMSU").exists(),dbsdom.prmsu.isNull() do vreqerr("PRMSU") quit
		if vx("PRMSK").exists(),dbsdom.prmsk.isNull() do vreqerr("PRMSK") quit
	}
		if vx("DES").exists(),dbsdom.des.isNull() do vreqerr("DES") quit
		if vx("PRDEC").exists(),dbsdom.prdec.isNull() do vreqerr("PRDEC") quit
		if vx("PRDES").exists(),dbsdom.prdes.isNull() do vreqerr("PRDES") quit
		if vx("PRDFT").exists(),dbsdom.prdft.isNull() do vreqerr("PRDFT") quit
		if vx("PRIPF").exists(),dbsdom.pripf.isNull() do vreqerr("PRIPF") quit
		if vx("PRLEN").exists(),dbsdom.prlen.isNull() do vreqerr("PRLEN") quit
		if vx("PRMAX").exists(),dbsdom.prmax.isNull() do vreqerr("PRMAX") quit
		if vx("PRMIN").exists(),dbsdom.prmin.isNull() do vreqerr("PRMIN") quit
		if vx("PRMSK").exists(),dbsdom.prmsk.isNull() do vreqerr("PRMSK") quit
		if vx("PRMSU").exists(),dbsdom.prmsu.isNull() do vreqerr("PRMSU") quit
		if vx("PRNLV").exists(),dbsdom.prnlv.isNull() do vreqerr("PRNLV") quit
		if vx("PROPF").exists(),dbsdom.propf.isNull() do vreqerr("PROPF") quit
		if vx("PRPTN").exists(),dbsdom.prptn.isNull() do vreqerr("PRPTN") quit
		if vx("PRRHD").exists(),dbsdom.prrhd.isNull() do vreqerr("PRRHD") quit
		if vx("PRSIZ").exists(),dbsdom.prsiz.isNull() do vreqerr("PRSIZ") quit
		if vx("PRTBL").exists(),dbsdom.prtbl.isNull() do vreqerr("PRTBL") quit
		if vx("PRTYP").exists(),dbsdom.prtyp.isNull() do vreqerr("PRTYP") quit
		if vx("PRVLD").exists(),dbsdom.prvld.isNull() do vreqerr("PRVLD") quit
		if vx("TYP").exists(),dbsdom.typ.isNull() do vreqerr("TYP") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBSDOM","MSG",1767,"DBSDOM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBSDOM dbsdom

	if (%O = 2) do vload

	if vobj(dbsdom,0).exists() do {

		set X = dbsdom.dec if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DEC", vRM) quit
		if dbsdom.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
		if dbsdom.dft.length()>58 set vRM = $$^MSG(1076,58) do vdderr("DFT", vRM) quit
		if dbsdom.ipf.length()>40 set vRM = $$^MSG(1076,40) do vdderr("IPF", vRM) quit
		set X = dbsdom.len if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("LEN", vRM) quit
		set X = dbsdom.ltd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LTD", vRM) quit
		if dbsdom.max.length()>25 set vRM = $$^MSG(1076,25) do vdderr("MAX", vRM) quit
		if dbsdom.min.length()>25 set vRM = $$^MSG(1076,25) do vdderr("MIN", vRM) quit
		if dbsdom.msk.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MSK", vRM) quit
		set X = dbsdom.msu if 'X.isNull(),'{List}"C,D,V,W".contains(X) set vRM = $$^MSG(1485,X) do vdderr("MSU", vRM) quit
		if dbsdom.nlv.length()>20 set vRM = $$^MSG(1076,20) do vdderr("NLV", vRM) quit
		if dbsdom.opf.length()>40 set vRM = $$^MSG(1076,40) do vdderr("OPF", vRM) quit
		if dbsdom.ptn.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PTN", vRM) quit
		if dbsdom.rhd.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RHD", vRM) quit
		set X = dbsdom.siz if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SIZ", vRM) quit
		if dbsdom.tbl.length()>255 set vRM = $$^MSG(1076,255) do vdderr("TBL", vRM) quit
		set X = dbsdom.typ if 'X.isNull(),'Db.isDefined("DBCTLDVFM","X") set vRM = $$^MSG(1485,X) do vdderr("TYP", vRM) quit
		if dbsdom.user.length()>20 set vRM = $$^MSG(1076,20) do vdderr("USER", vRM) quit
		if dbsdom.vld.length()>70 set vRM = $$^MSG(1076,70) do vdderr("VLD", vRM) quit
	}

	if vobj(dbsdom,1).exists() do {

		if '("01"[dbsdom.PRDEC) set vRM=$$^MSG(742,"L") do vdderr("PRDEC", vRM) quit
		if '("01"[dbsdom.PRDES) set vRM=$$^MSG(742,"L") do vdderr("PRDES", vRM) quit
		if '("01"[dbsdom.PRDFT) set vRM=$$^MSG(742,"L") do vdderr("PRDFT", vRM) quit
		if '("01"[dbsdom.PRIPF) set vRM=$$^MSG(742,"L") do vdderr("PRIPF", vRM) quit
		if '("01"[dbsdom.PRLEN) set vRM=$$^MSG(742,"L") do vdderr("PRLEN", vRM) quit
		if '("01"[dbsdom.PRMAX) set vRM=$$^MSG(742,"L") do vdderr("PRMAX", vRM) quit
		if '("01"[dbsdom.PRMIN) set vRM=$$^MSG(742,"L") do vdderr("PRMIN", vRM) quit
		if '("01"[dbsdom.PRMSK) set vRM=$$^MSG(742,"L") do vdderr("PRMSK", vRM) quit
		if '("01"[dbsdom.PRMSU) set vRM=$$^MSG(742,"L") do vdderr("PRMSU", vRM) quit
		if '("01"[dbsdom.PRNLV) set vRM=$$^MSG(742,"L") do vdderr("PRNLV", vRM) quit
		if '("01"[dbsdom.PROPF) set vRM=$$^MSG(742,"L") do vdderr("PROPF", vRM) quit
		if '("01"[dbsdom.PRPTN) set vRM=$$^MSG(742,"L") do vdderr("PRPTN", vRM) quit
		if '("01"[dbsdom.PRRHD) set vRM=$$^MSG(742,"L") do vdderr("PRRHD", vRM) quit
		if '("01"[dbsdom.PRSIZ) set vRM=$$^MSG(742,"L") do vdderr("PRSIZ", vRM) quit
		if '("01"[dbsdom.PRTBL) set vRM=$$^MSG(742,"L") do vdderr("PRTBL", vRM) quit
		if '("01"[dbsdom.PRTYP) set vRM=$$^MSG(742,"L") do vdderr("PRTYP", vRM) quit
		if '("01"[dbsdom.PRVLD) set vRM=$$^MSG(742,"L") do vdderr("PRVLD", vRM) quit
	}
	set X = dbsdom.syssn if 'X.isNull(),'Db.isDefined("SCASYS","X") set vRM = $$^MSG(1485,X) do vdderr("SYSSN", vRM) quit
	if dbsdom.dom.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DOM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBSDOM","MSG",979,"DBSDOM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBSDOM dbsdom

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SYSSN").exists() set vux("SYSSN") = vx("SYSSN")
	if vx("DOM").exists() set vux("DOM") = vx("DOM")
	do vkey(1) set voldkey = dbsdom.syssn_","_dbsdom.dom   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbsdom.syssn_","_dbsdom.dom   // Copy new keys into object
	type RecordDBSDOM vnewrec = dbsdom.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBSDOM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBSDOM dbsdom

	if vux("SYSSN").exists() set dbsdom.syssn = vux("SYSSN").piece("|",i)
	if vux("DOM").exists() set dbsdom.dom = vux("DOM").piece("|",i)
	quit
