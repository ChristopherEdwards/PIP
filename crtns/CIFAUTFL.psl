CIFAUTFL(RecordCIFAUTH cifauth, String vpar, Boolean vparNorm) // CIFAUTH - Customer Authorization Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (38)             03/21/2007
	// Trigger Definition (6)                      09/16/2005
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cifauth.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(cifauth,.vxins(),10,"|")
	if %O = 1 quit:'cifauth.isChanged()  do AUDIT^UCUTILN(cifauth,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = cifauth.acn

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CIFAUTH",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CIFAUTH","ACN = :cifauth.acn")    // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN

	type RecordCIFAUTH cifauth = Db.getRecord("CIFAUTH","ACN=:ACN")
	if (%ProcessMode = 2) do {
		do cifauth.setMode(2)

		do CIFAUTFL(cifauth,vpar)
	}
	else  do VINDEX(cifauth)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCIFAUTH cifauth

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CIFAUTH","ACN = :cifauth.acn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(cifauth,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CIF(vobj(cifauth,-3),120,n)=vobj(cifauth,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(cifauth,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(cifauth,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CIF(vobj(cifauth,-3),120,n)=vobj(cifauth,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.cifauth)             // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.cifauth) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordCIFAUTH cifauth
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^CIF(vobj(cifauth,-3),120,n)) quit:n=""  if '$D(vobj(cifauth,n)),$D(^CIF(vobj(cifauth,-3),120,n))#2 set vobj(cifauth,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCIFAUTH cifauth

	if 'vkeychg.get(),cifauth.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.cifauth)                  // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.cifauth)              // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^CIF(vobj(cifauth,-3),120)
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordCIFAUTH cifauth

	// Type local variables for access keys for defaults
	type public String ACN

	if cifauth.ltd.isNull() set cifauth.ltd = +$H          // ltd
	if cifauth.ltt.isNull() set cifauth.ltt = $P($H,",",2) // ltt
	type public String %UID
	if cifauth.ltu.isNull() set cifauth.ltu = %UID         // ltu
	if cifauth.pwd1ind.isNull() set cifauth.pwd1ind = 0    // pwd1ind
	if cifauth.pwd2ind.isNull() set cifauth.pwd2ind = 0    // pwd2ind
	if cifauth.pwd3ind.isNull() set cifauth.pwd3ind = 0    // pwd3ind
	quit


vreqn // Validate required data items

	type public RecordCIFAUTH cifauth

	if cifauth.pwd1ind.isNull() do vreqerr("PWD1IND") quit
	if cifauth.pwd2ind.isNull() do vreqerr("PWD2IND") quit
	if cifauth.pwd3ind.isNull() do vreqerr("PWD3IND") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCIFAUTH cifauth

	if cifauth.acn.isNull() do vreqerr("ACN") quit

	if 'vobj(cifauth,-100,6,"").order().isNull() do {
		if vx("PWD1IND").exists(),cifauth.pwd1ind.isNull() do vreqerr("PWD1IND") quit
		if vx("PWD2IND").exists(),cifauth.pwd2ind.isNull() do vreqerr("PWD2IND") quit
		if vx("PWD3IND").exists(),cifauth.pwd3ind.isNull() do vreqerr("PWD3IND") quit
	}
		if vx("PWD1IND").exists(),cifauth.pwd1ind.isNull() do vreqerr("PWD1IND") quit
		if vx("PWD2IND").exists(),cifauth.pwd2ind.isNull() do vreqerr("PWD2IND") quit
		if vx("PWD3IND").exists(),cifauth.pwd3ind.isNull() do vreqerr("PWD3IND") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFAUTH","MSG",1767,"CIFAUTH."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCIFAUTH cifauth
	if 'cifauth.acn.isNull() set vfkey("^CIF("_""""_cifauth.acn_""""_","_1_")")="CIFAUTH(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCIFAUTH cifauth
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":cifauth.acn") set vERRMSG = $$^MSG(8563,"CIFAUTH(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCIFAUTH cifauth
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(cifauth,.vx(),10,"|") quit
	if vx("PWD1IND").exists()!vx("PWD2IND").exists()!vx("PWD3IND").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SCRTWRD").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STATUS").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("USERID1").exists() do vbu5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(cifauth,.vx(),10,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordCIFAUTH cifauth
	/*
	---- Revision History ------------------------------------------------
			 
								09/14/05 - PRAKASHJ - 17173
 	           Removed unscoped warnings.
							 
								04/25/00 - SHANL - 37246
 	           Added uniqueness check for USERID1.

	09/07/99 - CARROLLJ - 33890
		   Convert to PSL.	

	05/24/99 - SIGDAE - 33294
		   Added code to trim whitespace from Secret Word and User ID.
	
	04/08/99 - SIGDAE - 31905
		   Added code to convert USERID1 to upper case.
	----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public Number ACN
	
	if cifauth.scrtwrd'="" do {
		new SCRTWRD
		set SCRTWRD=$$TRIM^%ZS(cifauth.scrtwrd)
		set cifauth.scrtwrd=$$UPPER^%ZFUNC(SCRTWRD)
		}
	if cifauth.userid1'="" do { quit:ER
		new USERID1
		set USERID1=$$TRIM^%ZS(cifauth.userid1)
		set cifauth.userid1=$$UPPER^%ZFUNC(USERID1)
		set USERID1=cifauth.userid1
		lock +USERID(USERID1):2  
		new rs
																type ResultSet rs=Db.select("ACN,USERID1","CIFAUTH","USERID1=:USERID1")
																if rs.next(),rs.getCol(1),rs.getCol(1)'=ACN do Runtime.setErrMSG("CIFAUTH",4325) quit:ER
		}
	
	// Account status equals blocked
	if cifauth.status=2 do { quit 
		set cifauth.blkddt=%CurrentDate
		set cifauth.blkdtm=%CurrentTime
		}
	quit

vbu1 // Trigger BEFORE_UPDATE - Before Update Trigger

	type public RecordCIFAUTH cifauth
	do cifauth.setAuditFlag(1)
	// Last Updated - User
	set cifauth.ltu=%UserID     

	// Last Updated - Date
	set cifauth.ltd=%CurrentDate

	// Last Updated - Time
	set cifauth.ltt=%CurrentTime
	quit
	

vbu2 // Trigger BU_PWIND - Before Update - Password Fields

	type public RecordCIFAUTH cifauth
	do cifauth.setAuditFlag(1)
	/* Revision History
	
		08/11/00 - OFALTR - 41423
 	      Added code to reset password fields if indicator flag is set.
	*/
	
	if cifauth.pwd1ind set cifauth.password=cifauth.pwd1reset,cifauth.pwd1ind=0,cifauth.pwd1dlr=%SystemDate
	if cifauth.pwd2ind set cifauth.pwd2=cifauth.pwd2reset,cifauth.pwd2ind=0,cifauth.pwd2dlr=%SystemDate
	if cifauth.pwd3ind set cifauth.pwd3=cifauth.pwd3reset,cifauth.pwd3ind=0,cifauth.pwd3dlr=%SystemDate
	quit

vbu3 // Trigger BU_SCRTWRD - Before Update for Secret Word

	type public RecordCIFAUTH cifauth
	do cifauth.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	09/07/99 - CARROLLJ - 33890
		   Convert to PSL.	

	04/08/99 - SIGDAE - 31905
		   Added code to protect original old value.
	----------------------------------------------------------------------
	*/
	
	new old,new
	if cifauth.scrtwrd="" quit 
	
	// The following code protects the original old value
	set old=cifauth.scrtwrd.oldVal
	set new=$$TRIM^%ZS(cifauth.scrtwrd)
	set new=$$UPPER^%ZFUNC(new)
	if cifauth.scrtwrd=new quit 
	set cifauth.scrtwrd=old
	set cifauth.scrtwrd=new
	quit
	

vbu4 // Trigger BU_STATUS - Before update trigger for status

	type public RecordCIFAUTH cifauth
	do cifauth.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	
								09/14/05 - PRAKASHJ - 17173
 	           Removed deprecated warnings.
 	           
	05/24/99 - SIGDAE - 33294
		   Modified code to reset LOGFAILS=0 if LOGFAILS is equal
		   or greater than maximum number of failures.
	
	----------------------------------------------------------------------
	*/

	// Status changed to Active
	if cifauth.status=1 do { quit 
		new MAXFAILS
		// Record Not Blocked
		if cifauth.blkrsn'=0 set cifauth.blkrsn=0

		// Reset log failure count if equal maximum
				
		set MAXFAILS=CUVAR.maxlogfails
		
		// Default value as in ECOMMERC.M
		if +MAXFAILS=0 set MAXFAILS=3    
		if cifauth.logfails'<MAXFAILS set cifauth.logfails=0
		if cifauth.blkddt'="" set cifauth.blkddt=""
		if cifauth.blkdtm'="" set cifauth.blkdtm=""
		}
	
	// Status changed to Blocked
	if cifauth.status=2 do { quit 
		set cifauth.blkddt=%CurrentDate
		set cifauth.blkdtm=%CurrentTime
		}
	quit
	

vbu5 // Trigger BU_USERID1 - Before Update for User Id

	type public RecordCIFAUTH cifauth
	do cifauth.setAuditFlag(1)
	/*
								---- Revision History ------------------------------------------------
	
								09/14/05 - PRAKASHJ - 17173
 	           Removed unscoped warnings.
 	           
								04/25/00 - SHANL - 37246
																			Added uniqueness check for USERID1.
	
								----------------------------------------------------------------------
								*/
	type public Boolean ER
	type public Number ACN
	
	new old,new
	if cifauth.userid1="" quit 
	
	// The following code protects the original old value
	set old=cifauth.userid1.oldVal
	set new=$$TRIM^%ZS(cifauth.userid1)
	set new=$$UPPER^%ZFUNC(new)
	
	if new'="" do { quit:ER
	    new USERID1
												set USERID1=new
												lock +USERID(USERID1):2
												new rs
												type ResultSet rs=Db.select("ACN,USERID1","CIFAUTH","USERID1=:USERID1")
												if rs.next(),rs.getCol(1),rs.getCol(1)'=ACN do Runtime.setErrMSG("CIFAUTH",4325) quit:ER
												}

	if cifauth.userid1=new quit 
	set cifauth.userid1=old
	set cifauth.userid1=new
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCIFAUTH cifauth

	if (%O = 2) do vload

	if vobj(cifauth,1).exists() do {

		if cifauth.password.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PASSWORD", vRM) quit
		if cifauth.userid1.length()>32 set vRM = $$^MSG(1076,32) do vdderr("USERID1", vRM) quit
	}

	if vobj(cifauth,2).exists() do {

		if cifauth.pwd2.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PWD2", vRM) quit
	}

	if vobj(cifauth,3).exists() do {

		if cifauth.pwd3.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PWD3", vRM) quit
	}

	if vobj(cifauth,4).exists() do {

		if cifauth.rsapubkey.length()>255 set vRM = $$^MSG(1076,255) do vdderr("RSAPUBKEY", vRM) quit
	}

	if vobj(cifauth,5).exists() do {

		if cifauth.answer.length()>55 set vRM = $$^MSG(1076,55) do vdderr("ANSWER", vRM) quit
		set X = cifauth.blkddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BLKDDT", vRM) quit
		set X = cifauth.blkdtm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("BLKDTM", vRM) quit
		set X = cifauth.blkrsn if 'X.isNull(),'Db.isDefined("UTBLBLKRSN","X") set vRM = $$^MSG(1485,X) do vdderr("BLKRSN", vRM) quit
		set X = cifauth.enrolldt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ENROLLDT", vRM) quit
		set X = cifauth.enrolltm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("ENROLLTM", vRM) quit
		set X = cifauth.frstlogdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FRSTLOGDT", vRM) quit
		set X = cifauth.frstlogtm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("FRSTLOGTM", vRM) quit
		if cifauth.hint.length()>20 set vRM = $$^MSG(1076,20) do vdderr("HINT", vRM) quit
		set X = cifauth.logfails if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LOGFAILS", vRM) quit
		set X = cifauth.logfails2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LOGFAILS2", vRM) quit
		set X = cifauth.lstfaildt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSTFAILDT", vRM) quit
		set X = cifauth.lstfailtm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LSTFAILTM", vRM) quit
		set X = cifauth.lstlogdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSTLOGDT", vRM) quit
		set X = cifauth.lstlogtm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LSTLOGTM", vRM) quit
		set X = cifauth.ltd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LTD", vRM) quit
		set X = cifauth.ltt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LTT", vRM) quit
		if cifauth.ltu.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LTU", vRM) quit
		if cifauth.question.length()>80 set vRM = $$^MSG(1076,80) do vdderr("QUESTION", vRM) quit
		if cifauth.scrtwrd.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SCRTWRD", vRM) quit
		set X = cifauth.status if 'X.isNull(),'Db.isDefined("STBLCIFSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
	}

	if vobj(cifauth,6).exists() do {

		set X = cifauth.pwd1dlr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PWD1DLR", vRM) quit
		if '("01"[cifauth.PWD1IND) set vRM=$$^MSG(742,"L") do vdderr("PWD1IND", vRM) quit
		set X = cifauth.pwd2dlr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PWD2DLR", vRM) quit
		if '("01"[cifauth.PWD2IND) set vRM=$$^MSG(742,"L") do vdderr("PWD2IND", vRM) quit
		set X = cifauth.pwd3dlr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PWD3DLR", vRM) quit
		if '("01"[cifauth.PWD3IND) set vRM=$$^MSG(742,"L") do vdderr("PWD3IND", vRM) quit
	}

	if vobj(cifauth,7).exists() do {

		if cifauth.pwd1reset.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PWD1RESET", vRM) quit
	}

	if vobj(cifauth,8).exists() do {

		if cifauth.pwd2reset.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PWD2RESET", vRM) quit
	}

	if vobj(cifauth,9).exists() do {

		if cifauth.pwd3reset.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PWD3RESET", vRM) quit
	}

	if vobj(cifauth,11).exists() do {

		set X = cifauth.webstat if 'X.isNull(),'Db.isDefined("STBLCIFSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("WEBSTAT", vRM) quit
		if cifauth.webuid.length()>32 set vRM = $$^MSG(1076,32) do vdderr("WEBUID", vRM) quit
	}
	set X = cifauth.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFAUTH","MSG",979,"CIFAUTH."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCIFAUTH cifauth)	//CIFAUTH Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.cifauth)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=CIFH_U
			}
		else  if TSRC="O" do {
			do vj1(.cifauth)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CIFH_U
			}
		}

	quit


vj1(RecordCIFAUTH cifauth)	// CIFH_U  Table CIFH  Maintenance History

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",LSTFAILDT,LSTFAILTM,LSTLOGDT,LSTLOGTM,RSAPUBKEY,LTD,LTT,LTU,"'[(","_vdi_",") do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=cifauth.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^CIFFUNCS("","CIFAUTH",vdi,vold,vnew,$G(EFD))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordCIFAUTH cifauth) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("USERID1").exists() do vi1(.cifauth)
	}
	do vi1(.cifauth)

	quit
	

vi1(RecordCIFAUTH cifauth) // Maintain USERID index entries (Customer Defined UserID)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cifauth.userid1
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cifauth.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^XREF("USERID",v2,v3)) do vidxerr("USERID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("USERID",v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("USERID1").exists() set v2=vx("USERID1").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("USERID",v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CIFAUTH")

	while ds.next() do {
		type RecordCIFAUTH cifauth=ds.getRecord("CIFAUTH")
		if vlist.contains("VINDEX") do VINDEX(.cifauth) quit
		if vlist.contains("USERID") do vi1(.cifauth)
	}

	quit


public VIDXBLD1(RecordCIFAUTH cifauth, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.cifauth) quit
	if vlist.contains("USERID") do vi1(.cifauth)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CIFAUTH","MSG",1225,"CIFAUTH."_di)

	quit


vkchged // Access key changed

	type public RecordCIFAUTH cifauth

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("ACN")
	set voldkey = vux.piece("|",1),vobj(cifauth,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(cifauth,-3) = vnewkey // Copy new keys into object
	type RecordCIFAUTH vnewrec = cifauth.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CIFAUTH",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(cifauth,-3) = vux.piece("|",1)                // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "CIFAUTFL"	// Location of index program

