LETSTCMB	  /*
ORIG: haileyk - 07/25/2000
DESC: Collate accounts linked to Customer/Grp

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------

	12/21/06 - PUTTASWH - CR 24538
		   Added sections PPSTM, POSBJD and POSEJD to validate 
		   the inputs since STMSNAP that had these sections is 
		   obsolete. Modified to remove the compilation errors.
		   
	11/13/06 - KUMARB - CR 23283
		Modified section SJDPP to replace array variable QI()
		and Q(2,1) with SJD.
	
	01/30/06 Radhika - CR 17423
		 .Eliminated PSL deprecated features and warnings.
		 .Removed revision history prior to 2004.
		 
	01/20/04 - Erik Scheetz - CR7798
		 Modified LETSTM section and removed the column reference
		 DAYENDSTM.STMT739 (table being obsoleted) and called into 
		 STMT739^DAYNDCDI directly.
	
 */

	quit

LETSTM(CO,FORM,VAR)

	type public Number ACN,BCHJOB,CID,DSORT,ER,KEY,LSORT,STMGRP,SEQ
	type public Date BJD,EJD,LETTJD,SJD
	type public String RM
	type Boolean CDONLY,PNA,STMLCC
	type Date EFD,GRPSTDT
	type Number AFLG,ADDRLNS,I,STAMT,SVAR,SKPFLG,SKPARRAY,T 
	type Number CTL,IRASTGRP,TYPES(),TYPE,SCID,WIRN()
	type String AGRP,ADDR,ATM,CNT,CLS,G,GRP,KEYS,REC,R798,SCO,SFORM,STMT,TRN,x
		
	do Db.fastDelete("TMPRPT3","PID=:BCHJOB,KEY1=:ACN")
	do Db.fastDelete("TMPRPT8","PID=:%ProcessID,KEY1=:ACN")

	set AGRP=CO
	set (LETTJD,SJD)=%SystemDate
	set DSORT=CUVAR.stmtsrtd,LSORT=CUVAR.stmtsrtl
	type RecordCMBGRP cmbgrp = Db.getRecord("CMBGRP","ACN=:ACN,STMGRP=:STMGRP") 
	set ADDR=cmbgrp.addr
	
	set AFLG=$S(ADDR="CIF":0,1:1)
	// myersk 11/15/00 - save CID from BCHLETSTM
	set SCID=CID.get()
	set SCO=CO
	set SFORM=FORM
	set SVAR=VAR
	//ofaltr
	set ADDRLNS=100
	set STMLCC=CUVAR.stmlcc
	
	type RecordSTMPRM stmprm = Db.getRecord("STMPRM","KEY=:KEY")
	set PNA=stmprm.pna

	set STAMT=0
	set R798=""

	if FORM="STMTSNAP" set CTL=1
	else  kill BJD set CTL=""

	kill CO

	// ofaltr - 02/27/02 added parameter IRASTGRP to call to SUMM^LETSTINI
	do SUMM^LETSTINI(ACN,STMGRP,CTL,.BJD,EJD,.IRASTGRP) quit:ER

	if STMT(ACN,"").order().isNull() quit			// No Accounts Linked

	// if only a CD is linked to statement group quit..no statement
	set CDONLY=CUVAR.stmtcdskip
	set G=""
	if CDONLY&('STMT(ACN,"L").exists()) for  set G=STMT(ACN,"D",G).order()  quit:G.isNull()!(CDONLY=0)  if G'="CD" set CDONLY=0
	//I18N=off
	if CDONLY&('STMT(ACN,"L").exists()) S:FORM="STMTSNAP" ER=1,RM=$$^MSG(2542,STMGRP_", CD Only,") quit	
	//I18N=on

	// haileyk - 44501
	// Delete from STMT array any accounts with product types in
	// UTBLSKIPSTM - Product types to skip with statements.
	set (CLS,GRP,CID)=""
	set SKPFLG=1
	for  set CLS=STMT(ACN,CLS).order() quit:CLS.isNull()  do {
		for  set GRP=STMT(ACN,CLS,GRP).order() quit:GRP.isNull()  do {
			for  set CID=STMT(ACN,CLS,GRP,CID).order() quit:CID.isNull()  do {
				type RecordACN acn=Db.getRecord("ACN","CID=:CID")
				set T=acn.type 
				if 'SKPARRAY(T).exists() S SKPFLG=0,SCID=CID
				else  kill STMT(ACN,CLS,GRP,CID)
				}
			}
		}
	if SKPFLG quit


	set CO=SCO

	#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do STMTPRE^ZLSTMCMB quit:ZQUIT

	// Header Record
	// myersk 11/15/00 - If Address is pulled from CIF, send the CID from
	// BCHLETSTM, so the TRN Record will have a valid CID from the
	// Statement Group
	if AFLG=0 set ADDR=SCID
	set TRN=$$TRN^LETTERU(ADDR,ACN,AFLG,FORM,VAR)
	set SEQ=1
	do FILESTM^LETTERU(ACN,,FORM,CO,VAR,"TRN",SEQ,STMGRP,TRN)

	type RecordUTBLFORMVAR utblform = Db.getRecord("UTBLFORMVAR","CO=:CO,FORM=:FORM,VAR=:VAR")
	set CNT=(utblform.rectypes).length(",")
	for I=1:1:CNT set TYPE=utblform.rectypes.piece(",",I),TYPES(TYPE)=""

	/* 49469 - Only include 739 Records if an account in the statement
		   group is of a product type which requires 739 records */
	if TYPES(739).exists(),'$$STMT739(EFD,ACN,STMGRP) kill TYPES(739)

	// Affinity Group(100) and Primary Customer(200) Information
	// myersk 43728: Pick up all record types < 300
	set I="" for  set I=TYPES(I).order() quit:((I'<300)!(I.isNull()))  do {
	
		type RecordSTBLFORM0 stblform0=Db.getRecord("STBLFORM0","RECTYPE=:I")
		set KEYS=stblform0.acckeys
		
		set x="set REC=$$"_I_"^LETTERF("_KEYS_")"
		#ACCEPT DATE=12/12/03;PGM=John Carroll
		xecute x
		set SEQ=SEQ+1
		do FILESTM^LETTERU(ACN,,FORM,CO,VAR,I,SEQ,STMGRP,REC)
		}

	set GRPSTDT=STMT(ACN).piece("|",2)

	// Process All Accounts Linked to Customer and Statement Group
	set (CLS,GRP,CID)=""
	for  set CLS=$O(STMT(ACN,CLS)) quit:CLS.isNull()  do {
		for  set GRP=$O(STMT(ACN,CLS,GRP)) quit:GRP.isNull()  do {
			for  set CID=$O(STMT(ACN,CLS,GRP,CID)) quit:CID.isNull()  do {
				do ACCT
				set SEQ=SEQ+1
				set REC=$$ZERO^FIL($G(CID),12,,"N")
				set REC=$$BLK^FIL(769_REC,416)
				do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,769,SEQ,STMGRP,REC)
				}
			}
		}


	#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do STMTPOST^ZLSTMCMB quit:ZQUIT

	do REC770	// 770 Records - Accounts Summary Sub-Total
	do REC780	// 780 Records - Accounts Summary Total
	do REC798	// 798 Records - Statement Trailer Record

	#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do END^ZLSTMCMB quit:ZQUIT
	
	do END		// Kill Any Remaining Arrays or Globals

	quit



ACCT	// Process Each Account Linked to Customer and Statement Group
	
	type public Date BJD,ENDDT,EJD,ODT,STARTDT
	type public Number ACN,CID,CRCNTCK,CRSUMCK,DBCNTCK,DBSUMCK,RECCNTCK,RECSUMCK
	type public Number BEGBAL,DSORT,IPP,LSORT,PAID,SEQ,TDRCNT,TCRCNT,TCRSUM,TDRSUM
	type public Number BCHJOB,RUNBAL,STMGRP,VAR,XBAL,XWIRN()
	type RecordACN dacn
	type public String CLS,CO,FORM,GRP,IRNARR,STMTREC,STMT(),TRNDESC,TRNDSC1
	
	type Boolean STMTINTRTC
	type Date BALCHG
	type Number ATM(),ETSEQ,QUIT,SKIP,SORT,TYPE,NOACTFLG,RECTYPE,TYPES(),TSEQ,TRNSEQ
	type Number ATMMAX,COA,DC,ESCSUS,HISTRSEQ,INT,MISC,NITUF,PENALTY,PRN,SPR,SPR15,UNC,WHLD,XSEQ
	type String CHECK,OLDCK,CKNO(),CHKSTR(),EBALCHG,ETC,KEYS,MAXAMT,REC,R798,SUMM,TDES,TRNDSC,x
	type String CHKNUM,CRAMT,DBAMT,DETCATCD,DETCATDS,ITC1,SEQIND,SUMCATCD,SUMCATDS,TOT,TAMT
	type String DESC3,ITC,ITC4,RUNBALP,SCO,X

	set (PAID,TDRCNT,TCRCNT,TCRSUM,TDRSUM,IPP)=0
	set (RECCNTCK,RECSUMCK,CRCNTCK,CRSUMCK,DBCNTCK,DBSUMCK)=0
	set STMTREC=STMT(ACN,CLS,GRP,CID).get()
	set NOACTFLG=1
        set dacn=Db.getRecord("ACN","CID=:CID")
        set TYPE=dacn.type
        set ODT=dacn.odt
        
        set TRNSEQ=+STMT(ACN,CLS,GRP,CID).piece("|",4)
        set ETSEQ=+STMT(ACN,CLS,GRP,CID).piece("|",13)
        set XSEQ=1
	set ENDDT=EJD
	set SUMM=STMTREC.piece("|",1)		// psg 11/01/2000
	set STARTDT=STMTREC.piece("|",3)

	set SORT=dacn.stmtsrt
	if SORT.isNull() do {
		if CLS="D" do {
				type RecordPRODDFTD proddf=Db.getRecord("PRODDFTD","TYPE=:TYPE")
				set SORT =proddf.stmtsrt
				}	
				
		if CLS="L" do {
				type RecordPRODDFTL proddfL=Db.getRecord("PRODDFTL","TYPE=:TYPE")
				set SORT =proddfL.stmtsrt
				}
		}
		
	if SORT.isNull() set SORT=$S(CLS="D":+DSORT,1:+LSORT)

	// 08/22/00 MYERSK - Need to use Beginning Total Balance for Loans
	if CLS="L" do LNBEGBAL I 1
	else  set (RUNBAL,BEGBAL)=STMTREC.piece("|",2)

	if STARTDT'>ODT set (RUNBAL,BEGBAL)=0

        if 'XWIRN(CID,ENDDT).exists() set XWIRN(CID,ENDDT)=+$G(XWIRN(CID,$O(XWIRN(CID,""),-1)))
        if 'XWIRN(CID,BJD).exists() set XWIRN(CID,BJD)=0

	do BALARR(.XWIRN,.XBAL,BEGBAL,.IRNARR)

	#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do ACCTPRE^ZLSTMCMB quit:ZQUIT

        type RecordTMPRPT3 tmprpt3=Class.new("RecordTMPRPT3")

	set (CHECK,OLDCK)=""
	for  set CHECK=CKNO(CID,CHECK).order() quit:CHECK.isNull()  do {

		type String DATA

		if OLDCK.isNull() set OLDCK=CHECK
		if OLDCK'=CHECK,(OLDCK+1'=CHECK) set CHKSTR(CHECK)="*"
		else  set CHKSTR(CHECK)=""
		set OLDCK=CHECK

		if FORM="STMTSNAP" quit

                set tmprpt3.pid=BCHJOB
                set tmprpt3.key1=ACN
                set tmprpt3.key2=CID
                set tmprpt3.key3=CHECK
                set DATA=(+CKNO(CID,CHECK,1).piece("|",1))_"|"_(CKNO(CID,CHECK,1).piece("|",2))
                set tmprpt3.data=DATA
                do tmprpt3.bypassSave()

		}

	// Deposit Account(300,301) and Loan Account(400,401,402) Information	
	for RECTYPE=300,301,400,401,402 do {
		if 'TYPES(RECTYPE).exists() quit
		if ((RECTYPE=300)!(RECTYPE=301)),CLS'="D" quit
		if ((RECTYPE=400)!(RECTYPE=401)!(RECTYPE=402)),CLS'="L" quit
		type RecordSTBLFORM0 stblform0=Db.getRecord("STBLFORM0","RECTYPE=:RECTYPE")
		set KEYS=stblform0.acckeys
		
		set x="set REC=$$"_RECTYPE_"^LETTERF("_KEYS_")"
		#ACCEPT DATE=12/12/03;PGM=John Carroll
		xecute x
		set SEQ=SEQ+1
		do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,RECTYPE,SEQ,STMGRP,REC)
		if (RECTYPE=300)!(RECTYPE=400) set R798.piece("|",1)=$P(R798.get(),"|",1)+1
                }

	/*
	if the custom atm rebate project is being used set up an
	array with the rebate tran. code and maximum amount.  If the
	transaction code is null or the max amount is null it will
	be assumed that the rebate process is not being used or that
	there is no maximum amount.  This array will be used to set
	the max ATM refund indicator flag.
	*/

	if 'ATM(TYPE).exists() do {
		type RecordUTBLATMREB utbatm=Db.getRecord("UTBLATMREB","CLS=:CLS,GRP=:GRP,TYPE=:TYPE")
		set ETC=utbatm.etc
		set MAXAMT=utbatm.maxamt
		if ETC.isNull()!(MAXAMT.isNull()) set ATM(TYPE)=""
		else  set ATM(TYPE,ETC)=MAXAMT
		}


	// Process all History Records
	while (TRNSEQ)'>(ETSEQ) do {

		if +TRNSEQ=0 set TRNSEQ=ETSEQ+1 quit
		set QUIT=0
		set TRNDESC=""

		type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TRNSEQ")
		set ETC=hist.etc
	
		type ResultSet rs = Db.select("TSEQ","HIST","CID=:CID AND TSEQ>:TRANSEQ","TSEQ ASC")
		if rs.next() do {
        		set TRNSEQ=rs.getCol("TSEQ")
			}
	
		#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do TRANPRE^ZLSTMCMB quit:ZQUIT

		// if interest rate change create 710 record
		if ETC.isNull() do {  quit		// geissp 43728
			if 'STMTINTRTC.get() quit	// burnsm 44718
			new TCMT,NEWV,OLDV,DI		
			set TCMT=hist.tcmt
			set DI=$$di^CIFDBS(TCMT).piece(".",2)
			if DI'="IRN" quit
			set NEWV=$$^SCARND($$newv^CIFDBS(TCMT),,,,2)
			if '(NEWV#1) set NEWV=NEWV_".00"
			else  if '((10*NEWV)#1) set NEWV=NEWV_"0"
			set OLDV=$$^SCARND($$newv^CIFDBS(TCMT),,,,2)
			set TDES="INTEREST RATE CHANGE to "_NEWV_"%"
			set (TRNDESC,DESC3,TOT,TAMT,ITC1,SPR,SPR15)=""
			set (CHKNUM,CRAMT,DBAMT,ATMMAX,SEQIND)=""
			set (DETCATCD,SUMCATCD)="RATECHANGE"
			set (DETCATDS,SUMCATDS)="Interest Rate Change"
			set RECTYPE=710,REC=$$710^LETTERF(CID,hist.tseq)
			do TEMPREC(.hist)
			}


		if ETC.isNull() quit

		// Check if Transaction was Reversed
		if hist.revtrn=1 do {
			type String RRTSO,RTSO,RREV
			TYPE Date HISTRTJD
			
			set HISTRSEQ=hist.histrseq
			type RecordHIST hist1=Db.getRecord("HIST","CID=:CID,TSEQ=:HISTRSEQ")
			set RRTSO=hist1.tso
			set HISTRTJD=hist1.tjd
			if HISTRTJD=hist.tjd set QUIT=1,SKIP(HISTRSEQ)="" quit
	
			do OUT^UTSO(.RTSO,RRTSO)
			set RREV=RTSO("REV").get()
                	if RTSO("REAPPLY").get(),RREV set QUIT=1,SKIP(RREV)="" quit

			}

		if QUIT=1 quit					// Transaction Reversed
		if SKIP(hist.tseq).exists() quit		// Reversal of Previous

		set ITC=hist.itc
                set (ITC1,DC)=ITC.extract()
		set TOT=hist.tot

		// Calculate IPP - Interest Paid Period
		set ITC4=ITC.extract(4)
		if (CLS="D")&(hist.tso["INTADJ") set ITC4=1
		if ITC4=1 do {
			if ITC1=1 set IPP=IPP.get()+TOT
			if ITC1=0 set IPP=IPP.get()-TOT
			}

                if ITC.extract(5)=1 quit		// Skip Statement Print
		if hist.tso["ADJAVCR" quit 	// Loan Payment Reverse

		new RTSO,RREV			// geissp 43728
		do OUT^UTSO(.RTSO,hist.tso)
		set RREV=RTSO("REV").get()
		if RTSO("REAPPLY").get(),RTSO("REV").get() quit

		// Sum all direct reductions to accruals to add to finance
		// charge on 790 record
		if ITC1=1,TYPES(790).exists() do {
			new HISTL,I,LEN,Z
			do HISTL^UHFETCH(CID,hist.tseq,.HISTL,"*")
			set Z=""
			for  set Z=HISTL(Z).order() quit:Z.isNull()  do {
				set LEN=$L(HISTL(Z),"|")-1
				for I=1:1:LEN I $P($P(HISTL(Z),"|",I),"#",2)="I" set PAID=PAID+$P($P(HISTL(Z),"|",I),"#",3)
				}
			}


		// Set All Fields Needed For 710,711,712 Records
		kill CO
		kill TRNDSC
		set TRNDSC=""
		set TSEQ=hist.tseq
		set X=""		// myersk - 43728
		do TRNDSC^STMDBS(1)	// hist.trndsc, not truncated to 30
		set TRNDSC1=TRNDSC	
		set CO=SCO
		set DESC3=""
		set CHKNUM=hist.chknum
		set (SPR,SPR15)=hist.spr
		if SPR.toString().length()>12 set SPR=""	// prevents exception error
		set DBAMT=$S(DC=0:hist.tamt,1:0)
		set CRAMT=$S(DC=1:hist.tamt,1:0)
		set SEQIND=$S(CHKNUM="":"",1:CHKSTR(CHKNUM).get())
		set BALCHG(hist.tjd)=hist.endbal
		set EBALCHG(hist.efdcmp)=hist.endbal
		set PRN=hist.prin
		set INT=hist.int
		set WHLD=hist.whld
		set PENALTY=hist.penalty
		set TAMT=hist.tamt
		if 'ATM(TYPE,ETC).get().isNull(),ATM(TYPE,ETC)'>TAMT set ATMMAX=1
		else  set ATMMAX=0  

		if CLS="D" do DEPOSIT(.hist)
		if CLS="L" do {	
			set TDES=$$TDES(ETC)
			set TRNDESC=$S($E(TRNDSC1,1,4)="TFR-":"Transfer"_TRNDSC1.extract(4,40),1:TRNDSC1)
			do SPLITDES
			set (TOT,TAMT)=hist.tamt,MISC=hist.misc
			set ESCSUS=hist.escsus,UNC=hist.unc
			set NITUF=hist.nituf,COA=hist.coa	
			set RUNBAL=RUNBAL+$S(ITC1=0:TOT,1:-TOT)

			// 11/15/00 myersk - calculate running principal balance
			set RUNBALP=RUNBALP+$S(ITC1=0:PRN,1:-PRN)
			do SETCODES(ETC,hist.tjd,TAMT)
			if TYPES(710).exists() set RECTYPE=710,REC=$$710^LETTERF(CID,hist.tseq) do TEMPREC(.hist)
			if TYPES(711).exists() set RECTYPE=711,REC=$$711^LETTERF(CID,hist.tseq) do TEMPREC1
			if TYPES(712).exists() set RECTYPE=712,REC=$$712^LETTERF(CID,hist.tseq) do TEMPREC1
			}
		if hist.chknum>0 do REC715(.hist)	// geissp 43728

		#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do TRANPOST^ZLSTMCMB quit:ZQUIT

		}

	#if $$VALID^%ZRTNS("ZLSTMCMB") set ZQUIT=0 do ACCTPOST^ZLSTMCMB quit:ZQUIT

	do REC720 // Insert 720 Records into TMPRPT8
	do SET790 // 05/02/02 myersk - Set ENDTBAL prior to calling REC700
	do REC700(.dacn) // 
	do REC710 // Transaction Detail
	do REC730 // Transactions Summary Totals
	do REC740 // Balance and Rate Change Summary
	if CLS="D" do REC750 // Service Fee Analysis 
	if CLS="D" do REC760 // Service Fee Analysis Totals

	// 8/22/00 MYERSK - Create 790 Record for Loan if desired
	if ((CLS="L")&(TYPES(790).exists())) do REC790

	do Db.fastDelete("TMPRPT8","PID=:%ProcessID")

	quit

REC720	// Insert 720 Records into TMPRPT8
	
	type public Number TCRCNT,TCRSUM,TRECSUM,TDRCNT,TDRSUM
	type Number CRCNT,CRSUM,DRCNT,DRSUM,RECCNT,RECTYPE,RECSUM,SORT3,TYPES()
	type String CODE,DES,R7,SORT1,SORT2,R720(),REC
	
	set SORT1="",SORT3=0,SORT2="ZZZZZZZZZZZZ"
	for  set SORT1=R720(SORT1).order() quit:SORT1.isNull()  do {
		set CODE=SORT1
		type RecordUTBLSTMTR utstmtr=Db.getRecord("UTBLSTMTR","CAT=:SORT1")
		set DES=utstmtr.des
		set R7=R720(SORT1).get()
		set RECCNT=R7.piece("|",1)
		set RECSUM=R7.piece("|",2)
		set CRCNT=R7.piece("|",3)
		set TCRCNT=TCRCNT.get()+CRCNT
		set DRCNT=R7.piece("|",5)
		set TDRCNT=TDRCNT.get()+DRCNT
		set CRSUM=R7.piece("|",4)
		set TCRSUM=TCRSUM.get()+CRSUM
		set DRSUM=R7.piece("|",6)
		set TDRSUM=TDRSUM.get()+ DRSUM
		if CRCNT=0 set RECSUM=(-1)*(RECSUM)
		if TCRCNT=0 set TRECSUM=(-1)*(TRECSUM.get())
		if TYPES(720).exists() do {
			set REC=$$720^LETTERF
			set RECTYPE=720
			do TEMPREC1
			}
		}
	quit


REC710	// Write Out All 710,711,712,715,720 Records From Temp File
	
	type public Number ACN,BEGBAL,CID,RUNBAL,RECTYPE,SEQ,STMGRP,SORT,VAR
	type public String CO,FORM,REC
	type Number CHKFLG1,CHKFLG2,TYPES(),XJOB
	
	
	set XJOB=%ProcessID
	set (CHKFLG1,CHKFLG2)=0
	set RUNBAL=BEGBAL
	type ResultSet rs2=Db.select("KEY7,DATA","TMPRPT8","PID=:%ProcessID")
	if 'rs2.isEmpty() while rs2.next() do {
		
		set RECTYPE=rs2.getCol("KEY7")
		if RECTYPE=715 set CHKFLG1=1
		if RECTYPE'=715 set CHKFLG2=1
		if CHKFLG2,CHKFLG1,TYPES(715).exists() do CHECK730 set CHKFLG1=0
		if 'TYPES(RECTYPE).exists() quit
		set REC=rs2.getCol("DATA").piece("|",1)
		set SEQ=SEQ+1
		
		// if sort is by effective date compute running balance

		if SORT=1,(RECTYPE=710) do {		// psg 3/2001	
			set RUNBAL=RUNBAL+rs2.getCol("DATA").piece("|",1)	
			set REC=REC.extract(1,340)_$$ZERO^FIL(RUNBAL,16,2,"$")_REC.extract(357,499)
		}	
		
		do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,RECTYPE,SEQ,STMGRP,REC)
		}
	quit


REC730	// 730 Record - Deposit Transactions Summary Totals

	type public Number ACN,CID,STMGRP,SEQ,VAR
	type public String CO,FORM,R730
	type String REC,SORT1,TRNSUMS
	type Number CRCNT,CRSUM,DBSUM,DBCNT,RECCNT,RECSUM,TRNSUMCD,TYPES()
	
	set SORT1=""
	if TYPES(730).exists() for  set SORT1=R730(SORT1).order() quit:SORT1.isNull()  do {
		set TRNSUMCD=SORT1
		type RecordUTBLSTMTR utstmtr=Db.getRecord("UTBLSTMTR","CAT=:TRNSUMCD")
		set TRNSUMS=utstmtr.des
		if TRNSUMCD=0 set TRNSUMCD=""
		set R730=R730.get()
		set RECCNT=R730(SORT1).piece("|",1)
		set RECSUM=R730(SORT1).piece("|",2)
		set CRCNT=R730(SORT1).piece("|",3)
		set DBCNT=R730(SORT1).piece("|",5)
		set CRSUM=R730(SORT1).piece("|",4)
		set DBSUM=R730(SORT1).piece("|",6)
		set REC=$$730^LETTERF
		set SEQ=SEQ+1
		do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,730,SEQ,STMGRP,REC)
		}
	quit

	// myersk 43728
CHECK730 // Create 730 Record for Check Section if 715 Records Printed
	type public Number ACN,CID,CRCNTCK,CRSUMCK,DBCNTCK,DBSUMCK,RECCNTCK,RECSUMCK,STMGRP,SEQ,VAR
	type public String CO,FORM
	type Number CRCNT,CRSUM,DBSUM,DBCNT,RECCNT,RECSUM
	type String REC,TRNSUMCD,TRNSUMDS
	
	
	set TRNSUMCD="CHECKS"
	type RecordUTBLSTMTR utstmtr=Db.getRecord("UTBLSTMTR","CAT=:TRNSUMCD")
	set TRNSUMDS=utstmtr.des
	
	set RECCNT=RECCNTCK
	set RECSUM=RECSUMCK
	set CRCNT=CRCNTCK
	set CRSUM=CRSUMCK
	set DBCNT=DBCNTCK
	set DBSUM=DBSUMCK
	set REC=$$730^LETTERF
	set SEQ=SEQ+1
	do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,730,SEQ,STMGRP,REC)
	quit

	// myersk - 49649 - Added following section to create 739 Records
REC739	// 739 Records - Transaction Summary for Account by Date and Summary Code

	
	type public Date IRCHGDT
	type public Number ACN,CID,SEQ,STMGRP,VAR
	type public String CO,FORM
	type Date BALCHGDT
	type String BALCHG(),REC,TRNSUMCD,TMP
	type Number TRNCNT,TRNSUM,TRNSUMDS
	
	set TRNSUMCD=""
	set BALCHGDT=IRCHGDT
	for  set TRNSUMCD=BALCHG(BALCHGDT,TRNSUMCD).order() quit:TRNSUMCD.isNull()  do {
		set TMP=BALCHG(BALCHGDT,TRNSUMCD)
		set TRNCNT=+TMP
		set TRNSUM=+TMP.piece("|",2)
		set TRNSUMDS=TMP.piece("|",3)
		set REC=$$739^LETTERF
		set SEQ=SEQ+1
		do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,739,SEQ,STMGRP,REC)
		}
	quit
	
REC740 	// 740 Records - Balance and Rate Change Summary
	
	type public Date BJD,IRCHGDT,ODT
	type public Number ACN,CID,SEQ,STMGRP,TYPES(),VAR
	type public String CO,FORM
	type Date BALCHG()
	type Number CHGDTBAL,MINBAL,MINBALFL,XWIRN()
	type String CLS,CODE,EBALCHG,REC
	
	if TYPES(740).exists() do {
		set CODE="BAL",IRCHGDT=""
		for  set IRCHGDT=BALCHG(IRCHGDT).order() quit:IRCHGDT.isNull()  do {
			if TYPES(739).exists() do REC739	// myersk - 49649
			
			if CLS="D" do {
				type RecordDEP depart=Db.getRecord("DEP","CID=:CID")
				set MINBAL=depart.minbal
				}
				
			if CLS="L" do {
				type RecordLN ln=Db.getRecord("LN","CID=:CID")
				set MINBAL=ln.sbwamt
				}
			
			set CHGDTBAL=+BALCHG(IRCHGDT)
			if ('MINBAL.isNull()),(CHGDTBAL<MINBAL) set MINBALFL=1
			else  set MINBALFL=0
			if IRCHGDT=ODT,(CHGDTBAL=0) quit
			set REC=$$740^LETTERF()				
			set SEQ=SEQ+1
			do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,740,SEQ,STMGRP,REC)
			}

		kill BALCHG,EBALCHG

		set CODE="RATE"
		if 'XWIRN(CID).exists() quit

		new IROLD,IRNEW
		set IROLD=+XWIRN(CID,BJD)
		set IRCHGDT=BJD
		for  set IRCHGDT=$O(XWIRN(CID,IRCHGDT)) quit:IRCHGDT.isNull()  do {
			set IRNEW=+XWIRN(CID,IRCHGDT)
			if IRNEW=IROLD quit
			if IRCHGDT=ODT set IROLD=IRNEW quit
			set REC=$$740^LETTERF()
			set SEQ=SEQ+1
			do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,740,SEQ,STMGRP,REC)
			set IROLD=IRNEW
			}
		}
	kill XWIRN(CID)
	quit


REC750	// 750 Records - Service Fee Analysis
	type public Date STARTDT,ENDDT
	type public Number ACN,CID,SEQ,STMGRP,TYPES(),VAR
	type public String CO,FORM
	type Date FEEDT
	type Number DSEQ,DEPSFA,FEEAMT,FEECNT,FEESUM,REC
	type String FEEDES

	if (TYPES(750).exists())!(TYPES(760).exists()) do {
		set DEPSFA=""
		do SRV^DEPDI(CID,STARTDT,ENDDT,.DEPSFA)
		set DSEQ=""
		set FEECNT=0
		set FEESUM=0
		for  set DSEQ=DEPSFA(DSEQ).order()  quit:DSEQ.isNull()  do {
			set FEEDT=DEPSFA(DSEQ).piece("|",1)
			set FEEAMT=DEPSFA(DSEQ).piece("|",4)
			set FEEDES=DEPSFA(DSEQ).piece("|",5)
			set FEECNT=FEECNT+1
			set FEESUM=FEESUM+FEEAMT
			if TYPES(750).exists() do {
				set REC=$$750^LETTERF()
				set SEQ=SEQ+1
				do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,750,SEQ,STMGRP,REC)		
				}
			}
		}
	quit


REC760	// 760 Record - Service Fee Analysis Totals
	type public Number ACN,CID,SEQ,STMGRP,TYPES(),VAR
	type public String CO,FORM
	type String REC

	if TYPES(760).exists() do {
		set REC=$$760^LETTERF()
		set SEQ=SEQ+1
		do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,760,SEQ,STMGRP,REC)
		}
	quit


REC700(RecordACN dacn)	// 700 Record - Deposit Transaction Detail
        
        type public Date BJD,ENDDT,ODT,STARTDT
        type public Number ACN,CID,SEQ,STMGRP,TDRSUM,TCRCNT,TCRSUM,TDRCNT,TYPES(),VAR
        type public Number BEGBAL,ENDBAL,BEGTBAL,ENDTBAL,TYPE,IRASTGRP,IPP
	type public String CO,FORM,GRP,STMTREC 
	type Date IRDT,SLDT,SNDT
	type Number AVBAL,AVGSBAL,CLS,CRCNT,DBTOT,CRTOT,DBCNT,IRCB,IRN,ENCLOSNO,XWIRN()
	type Number AVGIBAL,APR,DISCODE,IRSTART,IREND,IPAID,DAYS,IEARNP
	type String AEIA,APY,CHARGES,IRAVG,R770(),SUMCD,STMSUM,SUMM,REC,TYPDES
	
	if 'XWIRN(CID,ENDDT).exists() set XWIRN(CID,ENDDT)=+$G(XWIRN($O(XWIRN(CID,""),-1)))
	if 'XWIRN(CID,BJD).exists() set XWIRN(CID,BJD)=0

	set ENDBAL=STMTREC.piece("|",9)
	set DBCNT=TDRCNT.get()
	set CRCNT=TCRCNT.get()
	set DBTOT=TDRSUM.get()
	set CRTOT=TCRSUM.get()

	type RecordPRODCTL prd=Db.getRecord("PRODCTL","TYPE=:TYPE")
	set STMSUM=prd.stmsum

	set SUMCD=$S(IRASTGRP:GRP,STMSUM'="":STMSUM,1:GRP)
	
	set R770(SUMCD)=R770(SUMCD).get()
	set R770(SUMCD).piece("|",1)=R770(SUMCD).piece("|",1)+1
	set R770(SUMCD).piece("|",2)=R770(SUMCD).piece("|",2)+BEGBAL
	set R770(SUMCD).piece("|",3)=R770(SUMCD).piece("|",3)+ENDBAL
	set R770(SUMCD).piece("|",4)=R770(SUMCD).piece("|",4)+CRTOT
	set R770(SUMCD).piece("|",5)=R770(SUMCD).piece("|",5)+DBTOT
	set R770(SUMCD).piece("|",6)=R770(SUMCD).piece("|",6)+$S(BEGTBAL.exists():BEGTBAL,1:BEGBAL)
	set R770(SUMCD).piece("|",7)=R770(SUMCD).piece("|",7)+$S(ENDTBAL.exists():ENDTBAL,1:ENDBAL)
	if TYPES(700).exists() do {
		set SLDT=STMTREC.piece("|",3)-1
		set SNDT=ENDDT		
		
		type RecordDEP depp=Db.getRecord("DEP","CID=:CID")
		set IRCB=depp.ircb 
		set IRN=depp.irn
		set AVBAL=$S(IRCB=1!(IRCB=2):STMTREC.piece("|",25),IRCB=3:STMTREC.piece("|",26),1:0)
		
		set (AEIA,APY)=""	
		if IRCB>0 do {
			// myersk - 44044 - use SLDT+1
			if ((FORM'="STMTSNAP")&($$HISTCHK^DEPDI(CID,SLDT+1,SNDT))) set AEIA=$$AEIA^DEPDI(CID,IPP,SLDT+1,SNDT)
			else  set AEIA=$$GETAEIA^LETSTINI(CID,STARTDT,ENDDT)
			set AEIA=$$^SCARND(AEIA,,,,2)
			set APY=$$APY^LETSTINI(CID,AEIA,(SLDT+1),SNDT,AVBAL)
			}

		set SUMM=STMTREC.piece("|",1)
		set ENCLOSNO=STMTREC.piece("|",10)
		set IPAID=IPP.get()
		set CHARGES=STMTREC.piece("|",11)
		set AVGSBAL=STMTREC.piece("|",25)
		set IEARNP=$S(CLS="D":AEIA,1:0)
		set AVGIBAL=STMTREC.piece("|",25)
		set APR=dacn.irn
		set IRAVG=APY
		set DISCODE=dacn.regd
		set IRDT=$S(STARTDT<ODT:ODT,1:STARTDT)
		set IRSTART=+XWIRN(CID,IRDT)
		set IREND=+XWIRN(CID,ENDDT)
		set DAYS=ENDDT-STARTDT+1
		set TYPDES=prd.des
	        set REC=$$700^LETTERF(ACN,STMGRP,CID)
        	set SEQ=SEQ+1
	        do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,700,SEQ,STMGRP,REC)
		}

	quit


REC770	// 770 Records - Accounts Summary Sub-Total
	
	type public Date EJD
	type public Number ACN,CID,IRASTGRP,SEQ,STMGRP,TYPES(),VAR
	type public String CO,FORM,STMTRS
	
	type Date TXYEAR
	type RecordUTBLSTMTR stmtr
	type String SUMDES,SUMCD,R770(),R780,R77,REC
	type Number ACCTCNT,BEGBALSM,BEGTSUM,ENDTSUM,ENDBALSM,CRSUM,DBSUM
	
	set STMTRS=""
	for  set STMTRS=R770(STMTRS).order() quit:STMTRS.isNull()  do {

		set SUMCD=STMTRS
		//ofaltr 03/20/02
		if IRASTGRP do {
			type RecordSTBLIRA stblira
			set stblira=Db.getRecord("STBLIRA","IRA=:SUMCD")
			set SUMDES=stblira.desc
			}

		else  set stmtr=Db.getRecord("UTBLSTMTR","CAT=:STMTRS") set SUMDES=stmtr.des   
		set R77=R770(STMTRS).get()
		set ACCTCNT=R77.piece("|",1)
		set BEGBALSM=R77.piece("|",2)
		set ENDBALSM=R77.piece("|",3)
		set CRSUM=R77.piece("|",4)
		set DBSUM=R77.piece("|",5)
		set BEGTSUM=R77.piece("|",6)
		set ENDTSUM=R77.piece("|",7)

		if TYPES(770).exists() do {
		        set REC=$$770^LETTERF
        		set SEQ=SEQ+1
        		do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,770,SEQ,STMGRP,REC)
			}

		if TYPES(771).exists() do {
			type Number CON1,CON2
			type String RPA,IRAARY(),TOT
			set RPA="",CON1=0,CON2=0
			//total contributions
			for  set RPA=IRAARY(ACN,STMTRS,RPA).order() quit:RPA.isNull()  do {
				set TOT=IRAARY(ACN,STMTRS,RPA).get()
				set CON1=CON1+TOT.piece("|",1)
				set CON2=CON2+TOT.piece("|",2)
				}
			type Number PREVYR
 			type Date date=EJD
			set TXYEAR=date.year()
			set PREVYR=TXYEAR-1
			set REC=$$771^LETTERF
			set SEQ=SEQ+1
			do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,771,SEQ,STMGRP,REC)
			}

		set R780=R780.get()
		set R780.piece("|",1)=R780.piece("|",1)+ACCTCNT
		set R780.piece("|",2)=R780.piece("|",2)+BEGBALSM
		set R780.piece("|",3)=R780.piece("|",3)+ENDBALSM
		set R780.piece("|",4)=R780.piece("|",4)+CRSUM
		set R780.piece("|",5)=R780.piece("|",5)+DBSUM
		set R780.piece("|",6)=R780.piece("|",6)+BEGTSUM
		set R780.piece("|",7)=R780.piece("|",7)+ENDTSUM
		
		}

	quit


REC780	// 780 Records - Accounts Summary Total
	
	type public Number ACN,CID,SEQ,STMGRP,TYPES(),VAR
	type public String CO,FORM,R780
	type String REC
	type Number ACCTCNT,BEGBALSM,CRTOTAL,DBTOTAL,ENDBALSM,BEGTOTSM,ENDTOTSM
	
	if 'TYPES(780).exists() quit
	set R780=R780.get()
	set ACCTCNT=R780.piece("|",1)
	set BEGBALSM=R780.piece("|",2)
	set ENDBALSM=R780.piece("|",3)
	set CRTOTAL=R780.piece("|",4)
	set DBTOTAL=R780.piece("|",5)
	set BEGTOTSM=R780.piece("|",6)
	set ENDTOTSM=R780.piece("|",7)

	set REC=$$780^LETTERF
	set SEQ=SEQ+1 
	do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,780,SEQ,STMGRP,REC)

	quit

SET790	// 05/02/02 MYERSK - Set Variables used in 790 Section
	// Quit if no LNBLP record defined
	
	type public Number BEGTBAL,CID,PAID,TYPE,TCRSUM,TDRSUM
	type public Date ENDDT
	type public String STMTREC
	type String AVGBC,FINCHG,XLNBLP01
	type Number ENDTBAL,PCRAMT,PDBAMT,TCRAMT,TDBAMTFC,TDBAMT
	
	type RecordLNBLP lnbl=Db.getRecord("LNBLP","BILDT=:ENDDT,TYPE=:TYPE,CID=:CID",1)
	if 'lnbl.getMode() quit
	 
	// set variables required in 790^LETTERF
	set PCRAMT=STMTREC.piece("|",6)
	set TCRAMT=TCRSUM
	set PDBAMT=STMTREC.piece("|",8)
	set TDBAMT=TDRSUM

        // The following 3 lines are equivalent to FINCHG=[LNBLP]CPBDI
        set XLNBLP01=lnbl.xlnblp01
        set FINCHG=XLNBLP01.piece("|",1)	
	// kph 4/27/01
	// Add in direct reductions to accruals
	set FINCHG=FINCHG+PAID
	
	set TDBAMTFC=TDBAMT+FINCHG
	set ENDTBAL=BEGTBAL+TDBAMTFC-TCRAMT
	set AVGBC=lnbl.avgbc		// $P(STMTREC,"|",25)

	quit

	// 08/22/00 MYERSK - Routine to Create 790 Records
REC790  // 790 Records - Loan Summary Record
	// Quit if no LNBLP record defined
	
	type public Number ACN,CID,SEQ,STMGRP,TYPE,VAR
	type public String CO,FORM
	
	type public Date ENDDT
	type String REC
	
	type RecordLNBLP lnb=Db.getRecord("LNBLP","BILDT=:ENDDT,TYPE=:TYPE,CID=:CID",1)
	if 'lnb.getMode() quit

	set REC=$$790^LETTERF(ENDDT,TYPE,CID)

	set SEQ=SEQ+1
	do FILESTM^LETTERU(ACN,CID,FORM,CO,VAR,790,SEQ,STMGRP,REC)

	quit

 
REC798	// 798 Records - Statement Trailer Record

	type public Number ACN,SEQ,STMGRP,VAR
	type public String CO,FORM,R798
	type Number TOTACCT,TOTTRAN
	type String REC
	
	set R798=R798.get()
	set TOTACCT=R798.piece("|",1)
	set TOTTRAN=R798.piece("|",2)
						
	set REC=$$798^LETTERF
	set SEQ=SEQ+1
	do FILESTM^LETTERU(ACN,"",FORM,CO,VAR,798,SEQ,999,REC)
        
	quit
 

DEPOSIT(RecordHIST hist)	// Create 710 Records for Deposits Accounts
	
	type public Number CID,ITC1,INT,IPP,PENALTY,PRN,TYPE,WHLD
	type public String ETC,GRP,TDES,TRNDSC1
	type Number CRAMT,DBAMT,ITC4,RUNBAL,RECTYPE,TOT
	type String REC,TRNDESC

	if +PRN=0 quit

	type RecordPRODCTL prdc=Db.getRecord("PRODCTL","TYPE=:TYPE")
	
	if (ITC1=0) do {  quit
		if 'INT.isNull() do {
			set (TOT,DBAMT)=INT
			set CRAMT=0
			set ETC=prdc.crtrin
			if ETC.isNull() set ETC="IIP"_GRP.extract()		// myersk 48940
			set ITC1=1
			set ITC4=1
			set IPP=IPP.get()+INT
			set TDES=$$TDES(ETC)
			set RUNBAL=RUNBAL+TOT
			do SETCODES(ETC,hist.tjd,TOT)
			set REC=$$710^LETTERF(CID,hist.tseq)
			set RECTYPE=710
			do TEMPREC(.hist)
			set ITC1=0
			}
	
		if +WHLD'=0 do {
			set (TOT,CRAMT)=WHLD
			set DBAMT=0
			set ETC=prdc.cradbw 
			if ETC.isNull() set ETC="IBW"_GRP.extract()		// myersk 48940
			set ITC1=1
			set TDES=$$TDES(ETC)
			set TRNDESC=""
			set RUNBAL=RUNBAL-TOT
			do SETCODES(ETC,hist.tjd,TOT)
			set REC=$$710^LETTERF(CID,hist.tseq)
			set RECTYPE=710
			do TEMPREC(.hist)
			set ITC1=0
			}

		if PENALTY do {
			set (TOT,DBAMT)=PENALTY
			set ETC=prdc.dradpe
			if ETC.isNull() set ETC="IPC"			// myersk 48940
			set TDES=$$TDES(ETC)
			set RUNBAL=RUNBAL-TOT
			do SETCODES(ETC,hist.tjd,TOT)
			set REC=$$710^LETTERF(CID,hist.tseq)
			set RECTYPE=710
			do TEMPREC(.hist)
			}
		
		set (TOT,DBAMT)=PRN-WHLD+INT-PENALTY
		set CRAMT=0
		set ETC=hist.etc
		set ITC1=0
		set TDES=$$TDES(ETC)
		set TRNDESC=$S(TRNDSC1.extract(1,4)="TFR-":"Transfer"_TRNDSC1.extract(4,40),1:TRNDSC1)
		do SPLITDES
		set RUNBAL=RUNBAL-TOT
		do SETCODES(ETC,hist.tjd,TOT)
		set REC=$$710^LETTERF(CID,hist.tseq)
		set RECTYPE=710
		do TEMPREC(.hist)
		}

	if (ITC1=1)&('WHLD.isNull()) do {
		if WHLD+PRN-TOT quit
		set (TOT,CRAMT)=TOT
		set DBAMT=0
		set ETC=hist.etc
		set TDES=$$TDES(ETC)
		set TRNDESC=$S(TRNDSC1.extract(1,4)="TFR-":"Transfer"_TRNDSC1.extract(4,40),1:TRNDSC1)
		do SPLITDES
		set RUNBAL=RUNBAL+TOT
		do SETCODES(ETC,hist.tjd,TOT)
		set REC=$$710^LETTERF(CID,hist.tseq)
		set RECTYPE=710
		do TEMPREC(.hist)

		set (TOT,DBAMT)=WHLD
		set CRAMT=0
		set ETC=prdc.dradbw
		if ETC.isNull() set ETC="DBW"_$E(GRP)			// myersk 48940
		set ITC1=0
		set TDES=$$TDES(ETC)
		set TRNDESC=""
		set RUNBAL=RUNBAL-TOT
		do SETCODES(ETC,hist.tjd,TOT)
		set REC=$$710^LETTERF(CID,hist.tseq)
		set RECTYPE=710
		do TEMPREC(.hist)		
		}

	if (ITC1=1),(WHLD.isNull()) do {
		set (TOT,CRAMT)=PRN
		set DBAMT=0
		set ETC=hist.etc
		set TDES=$$TDES(ETC)
		set TRNDESC=$S(TRNDSC1.extract(1,4)="TFR-":"Transfer"_TRNDSC1.extract(4,40),1:TRNDSC1)
		do SPLITDES
		set RUNBAL=RUNBAL+TOT
		do SETCODES(ETC,hist.tjd,TOT)
		set REC=$$710^LETTERF(CID,hist.tseq)
		set RECTYPE=710
		do TEMPREC(.hist)
		}

	set TRNDESC=""
	
	if ITC1=1,('PENALTY.isNull())&(INT.isNull()) do {
		set ETC=prdc.cradpe
		if ETC.isNull() set ETC="DPC"				// myersk 48940
		set (TOT,CRAMT)=PENALTY
		set DBAMT=0
		set TDES=$$TDES(ETC)
		set RUNBAL=RUNBAL+TOT
		do SETCODES(ETC,hist.tjd,TOT)
		set REC=$$710^LETTERF(CID,hist.tseq)
		set RECTYPE=710
		do TEMPREC(.hist)

		set ETC=hist.ETC
		set ITC1='ITC1
		set CRAMT=0
		set DBAMT=TOT
		set TDES=$$TDES(ETC)
		set TRNDESC=$S(TRNDSC1.extract(1,4)="TFR-":"Transfer"_TRNDSC1.extract(4,40),1:TRNDSC1)
		do SPLITDES
		set RUNBAL=RUNBAL+TOT
		do SETCODES(ETC,hist.tjd,TOT)
		set REC=$$710^LETTERF(CID,hist.tseq)
		set RECTYPE=710
		do TEMPREC(.hist)
		}

	quit


TEMPREC(RecordHIST hist)	// Write 710,711,712,720 Records to Temp
	/*
	SORT = Sort Option (0=TJD, 1=EFD, 2=STMTRD, 3=STMTRS)
	SORT1 = How the transactions are to be sorted on the statement
	SORT2 = The secondary sort for the detail categories
	SORT3 = Summary category code; Should only be used for the creation of
	730 records and not filed to the temporary record holding the detail
	transactions.
	SORT720 = Sort code for the 720 (detail trailer) record.
	*/
	
	 type public Number RECTYPE,SORT
	 type public String ETC,R798,SORT2,SORT3,XSTMTRS(),XSTMTRD(),XSTMTSRT()
	 type public Date SORT1
	 type Number NOACTFLG
	 type String SORT720

	if (RECTYPE'=720) do {
		if RECTYPE=710 set R798.piece("|",2)=$P(R798.get(),"|",2)+1
		set NOACTFLG=0
		//set SORT3=$$STMTRS^HISTCDI(ETC)
		if 'ETC.isNull() set SORT3=XSTMTRS(ETC).get()
		else  set SORT3="RATECHANGE"
		if SORT=0 set SORT1=hist.tjd,SORT2=SORT1
		if SORT=1 set SORT1=hist.efdcmp,SORT2=SORT1
		if SORT=2 do {
			if ETC.isNull() set SORT1="RATECHANGE",SORT2="" quit
			set SORT1=XSTMTRD(ETC).get()   //$$STMTRD^HISTCDI(ETC)
			set SORT2=XSTMTSRT(ETC).get()  //$$STMTSRT^HISTCDI(ETC)
			}
		if SORT=3 do {
			if ETC.isNull() set SORT1="RATECHANGE",SORT2="" quit
			set SORT1=XSTMTRS(ETC).get()  //$$STMTRS^HISTCDI(ETC)
			set SORT2=XSTMTSRT(ETC).get()
			}
                if SORT2="TJD"!(SORT2.isNull()) set SORT2=hist.tjd
                if SORT2="EFD" set SORT2=hist.efdcmp
                if SORT2="CHKNUM" set SORT2=hist.chknum

		if SORT1.isNull() set SORT1=" "	// geissp 43728
		if SORT2.isNull() set SORT2=0
		if SORT3.isNull() set SORT3=0
	
		set SORT720=$S(SORT<2:"999999",1:SORT1)
		}
		
	quit
	
TEMPREC1	

	type public Number ACN,CID,ITC1,RECTYPE,STMGRP,TOT
	type public String CLS,REC,SORT1,SORT2,SORT720,SORT3,XSEQ
	type String DATA,R720(),R730()
	type Number P
	
	set XSEQ=XSEQ+1
	set DATA=""
	type RecordTMPRPT8 tmprpt8=Class.new("RecordTMPRPT8")
 
	set tmprpt8.pid=%ProcessID
	set tmprpt8.key1=ACN
	set tmprpt8.key2=STMGRP
	set tmprpt8.key3=CID
	set tmprpt8.key4=SORT1
	set tmprpt8.key5=SORT2
	set tmprpt8.key6=0
	set tmprpt8.key7=RECTYPE
	set tmprpt8.key8=XSEQ
	set DATA.piece("|",1)=REC
	if CLS="D" set DATA.piece("|",2)=$S(ITC1=0:-TOT,1:TOT)
	else  set DATA.piece("|",2)=$S(ITC1=0:TOT,1:-TOT)
	set tmprpt8.data=DATA

	do tmprpt8.bypassSave()

	if RECTYPE'=710 quit

	set R720(SORT720)=R720(SORT720).get()
	set R720(SORT720).piece("|",1)=R720(SORT720).piece("|",1)+1
	set R720(SORT720).piece("|",2)=R720(SORT720).piece("|",2)+TOT
	set P=$S(ITC1:3,1:5)
	set R720(SORT720).piece("|",P)=R720(SORT720).piece("|",P)+1
	set R720(SORT720).piece("|",P+1)=R720(SORT720).piece("|",P+1)+TOT

	set R730(SORT3)=R730(SORT3).get()
	set R730(SORT3).piece("|",1)=R730(SORT3).piece("|",1)+1
	set R730(SORT3).piece("|",2)=R730(SORT3).piece("|",2)+TOT
	set R730(SORT3).piece("|",P)=R730(SORT3).piece("|",P)+1
	set R730(SORT3).piece("|",P+1)=R730(SORT3).piece("|",P+1)+TOT

	quit


SETCODES(ETC,XTJD,TAMT)

	type public String BALCHG,XSTMTRD(),XSTMDDES(),XSTMTSRT(),XSTMTRS(),XSTMSDES()
	type String DETCATDS,DETCATCD,SUMCATDS,SUMCATCD,TMP()
	type Number STMTRD,STMTRS

	if 'XSTMTRD(ETC).exists() set XSTMTRD(ETC)=$$STMTRD^HISTCDI(ETC)
	if 'XSTMTRS(ETC).exists() set XSTMTRS(ETC)=$$STMTRS^HISTCDI(ETC)
	if 'XSTMDDES(ETC).exists() set XSTMDDES(ETC)=$$STMTRDDS^HISTCDI(ETC)
	if 'XSTMSDES(ETC).exists() set XSTMSDES(ETC)=$$STMTRSDS^HISTCDI(ETC)
	if 'XSTMTSRT(ETC).exists() set XSTMTSRT(ETC)=$$STMTSRT^HISTCDI(ETC)

	set (DETCATCD,STMTRD)=XSTMTRD(ETC)
	set (SUMCATCD,STMTRS)=XSTMTRS(ETC)
	set DETCATDS=XSTMDDES(ETC)
	set SUMCATDS=XSTMSDES(ETC)

	if STMTRD.isNull() set STMTRD=0
	if STMTRS.isNull() set STMTRS=0	

	set TMP=BALCHG(XTJD,STMTRS).get()
	set TMP.piece("|",1)=1+TMP
	set TMP.piece("|",2)=TAMT+TMP.piece("|",2)
	set TMP.piece("|",3)=SUMCATDS
	set BALCHG(XTJD,STMTRS)=TMP

	quit


BALARR(XWIRN,XBAL,BEGBAL,IRNARR)	//
	
	type public Number CID
	type public Date BJD
	type String BALARR(),X
	type Number BAL,IRN,MINACR
	
	set BALARR(BJD)=BEGBAL		// kph 11/14/00

	set X=""
	for  set X=XBAL(CID,X).order() quit:X.isNull()  set (BEGBAL,BALARR(X))=BEGBAL-XBAL(CID,X)

	set X=""
	for  set X=BALARR(X).order() quit:X.isNull()  do {
		set BAL=BALARR(X)
		if XWIRN(CID,X).exists() set IRN=+XWIRN(CID,X),XWIRN(CID,X).piece("|",3)="DONE"
		else  set IRN=+$G(IRNARR(IRNARR(X).order(),-1))
		set IRNARR(X)=IRN_"|"_BAL
		}

	set X=""
	type RecordDEP depar=Db.getRecord("DEP","CID=:CID")  
	set MINACR=+depar.minacr

	for  set X=XWIRN(CID,X).order() quit:X.isNull()  do {
		if XWIRN(CID,X).piece("|",3)="DONE" quit
		set IRN=+XWIRN(CID,X)
		set BAL=+$G(IRNARR(IRNARR(X).order(),-1)).piece("|",2)
		// 10/02/00 myersk - check bal against minacr
		if BAL<MINACR set BAL=0
		set IRNARR(X)=IRN_"|"_BAL
		}

	quit


END	// Kill Any Remaining Arrays or Globals
	type public String STMT,R770,R780
	
	do Db.fastDelete("TMPRPT8","PID=:%ProcessID")

	kill STMT,R770,R780

	quit


LETSNAP	// Produce Snap-Shot Statements

	type public Number ACN,CID,STMGRP,SVAR
	type public String SCO,SFORM
	type Boolean STMTINTRTC
	type Date BJD,EJD,LETTJD,SJD
	type Number PTYPE,SEQ,SKPARRAY(),TOTTRN,TOTSTM,TOTCID,VAR
	type String CO,FORM,IO,HDG,MODE,MODETBL(),%READ,REC,RTYP,%TAB(),VFMQ,XFORM
	
	set LETTJD=0
	set SEQ=0
        set HDG=$$^MSG("4994"),HDG=$J("",(80-(HDG.length()))\2)_HDG
	set MODETBL(1)="Batch"
	set MODETBL(2)="Online"

	// /DES=Customer Number/TYP=N/LEN=12
	set %TAB("ACN")=".ACN1/HLP=[CIF]ACN/XPP=set %EXT=1 do ^UCIF"

	// /DES=Statement Group/TYP=N/LEN=3
	set %TAB("STMGRP")=".STMGRP1/TBL=^CIF(ACN,110,/XPP=do PPSTM(ACN)"

	// /DES=Start Date/TYP=D/LEN=10
	set %TAB("BJD")=".BJD2/XPP=do POSBJD",BJD=""

	// /DES=End Date/TYP=D/LEN=10
	set %TAB("EJD")=".EJD56/XPP=do POSEJD(BJD2)",EJD=%SystemDate

	// MODE - Online or Offline
	set %TAB("MODE")=".MODE"

	set %READ="@HDG,,ACN/REQ,STMGRP/REQ,,BJD/REQ,EJD/REQ,MODE/REQ"

        do ^UTLREAD quit:VFMQ="Q"

	if MODE=2 do {
		set IO="STMSNAP_"_ACN_".TXT"

		set %TAB("ACN")=".ACN1/PRO"
		set %TAB("STMGRP")=".STMGRP1/PRO"
		set %TAB("BJD")=".BJD2/PRO"
		set %TAB("EJD")=".EJD56/PRO"
		set %TAB("MODE")=".MODE/PRO"
		// set %TAB("IO")="IO/TYP=T/DES=Device/LEN=40"
		set %TAB("IO")=$$IO^SCATAB(IO)

		set %READ="@HDG,,ACN/REQ/PRO,STMGRP/REQ/PRO,,BJD/REQ/PRO,EJD/REQ/PRO,MODE/REQ/PRO/,IO/REQ"

		do ^UTLREAD
		}
	
	quit:VFMQ="Q"

	// 11/07/00 myersk - Pull CID to determine CO
	set CID=""
	type ResultSet rscid=Db.select("CID","CMBSTM","ACN=:ACN AND STMGRP=:STMGRP AND CID>:CID","CID ASC")
	if rscid.next() do {
       		set CID=rscid.getCol("CID")
		}
	
	
	set CO=$$GETCO^LETTERU(ACN,CID)

	// 04/06/01 haileyk
	type ResultSet rs2=Db.select("PTYPE","UTBLSKIPSTM","PTYPE=:PTYPE")
	if 'rs2.isEmpty() while rs2.next() set SKPARRAY(rs2.getCol("PTYPE"))=""

	// 04/20/01 burnsm
	set STMTINTRTC=CUVAR.stmtintrtc

	// 09/05/00 myersk
	set XFORM="STMTSNAP"
	do CIF^LETTRIG 
	kill SKPARRAY
	quit:MODE'=2
	
	type IO io=Class.new("IO")

	set io.fileName=IO
	set io.recordSize=1000
	set io.openParams="WRITE/NEWV"
	do io.open()

	set (TOTTRN,TOTCID)=0

	// myersk 44044 - Set SJD to avoid SQLFAIL error
	set SJD=%SystemDate
	type ResultSet rs=Db.select("RECORD,RECTYPE","LETSTMT","SJD=:SJD AND CO=:SCO AND FORM=:SFORM AND VAR=:SVAR AND ACN=:ACN")
	while rs.next() do {
		set SEQ=SEQ+1
		set REC=rs.getCol("RECORD")
		set RTYP=rs.getCol("RECTYPE")
		do io.write(REC)

		if ((RTYP="300")!(RTYP="400")) set TOTCID=TOTCID+1	
		if RTYP="710" set TOTTRN=TOTTRN+1
		}

	set CO=SCO
	set FORM=SFORM
	set VAR=SVAR
	set TOTSTM=1
	set REC=$$799^LETTERF()
	do io.write(REC)

	set REC=$$ZERO^FIL(SEQ+1,13)_SJD.toString("MMDDYEAR")
	do io.write(REC)

	do io.close()
	do Db.fastDelete("LETSTMT","SJD,SCO,SFORM,SVAR,ACN")

	quit


LNBEGBAL	
	// 08/22/00 MYERSK - Routine to calculate Beginning Total Balance
	//	for Loans
	// Set BEGTBAL and RUNBAL to the Beginning Total Balance
	
	type public Date BJD,EJD
	type public Number CID,TYPE
	type public String STMTREC
	type Date CUVAR2
	type Number BEGBAL,BEGPBAL,BEGTBAL,RUNBALP,RUNBAL,%UID
	type String %UCLS
	
	// 11/15/00 myersk - set up beginning and running principal balances	
	set (BEGBAL,BEGPBAL,RUNBALP)=STMTREC.piece("|",17)

	// myersk 43728
	// LNUEFD was returning incorrect results for the Beginning Total
	// Balance. If the Statement End Date matches a Bill Date, we can
	// get the Beginning Total Balance from the Previous Bill Pay record
	
	type RecordLNBLP lnb1=Db.getRecord("LNBLP","BILDT=:EJD,TYPE=:TYPE,CID=:CID",1)
	if lnb1.getMode() set (BEGTBAL,RUNBAL)=$$BEGTBAL^LETSTMTL(EJD,TYPE,CID) quit
	 
	// else

        set %UID=%UserID.get()
	set %UCLS=%UserClass.get()
	set CUVAR2=%SystemDate

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
        do EXEC^LNUEFD(.ln,,,BJD)
	set BEGTBAL=$S(ln.aruf:ln.bal-ln.udbal,1:+ln.bal)
	set BEGTBAL=BEGTBAL+ln.acr+ln.iun
	set BEGTBAL=BEGTBAL+$$MCHG^LNCO3(CID)
	set RUNBAL=BEGTBAL

	quit

PPMODE	// Post processor for Mode Prompt
	type public Number X
	type Number %NOPRMT
	if X=2 set %NOPRMT=1
	quit

TDES(ETC)	// Set Transaction Description

	type public String DES()
	type String PRDES
	type RecordTRN tr
	
	if 'DES(ETC).exists() do {
		set tr=Db.getRecord("TRN","ETC=:ETC")
		set DES(ETC)=tr.prdes_"|"_tr.des
		}
	set PRDES=DES(ETC).piece("|",1)
	if PRDES.isNull() set PRDES=DES(ETC).piece("|",2)
	quit PRDES

SPLITDES // Split TRNDESC into TRNDESC and DESC3 when $L(TRNDESC)>60
	 // Splits on a word break and removes leading spaces from DESC3

	type public Number IRASTGRP
	type public String DESC3,ITC,TRNDESC,RTSO()
	
	I ITC.extract(12) do REVDES		// geissp 2/01

	//ofaltr 02/27/02
        if IRASTGRP do {
        	type public String TDES
        	type public Number ITC1
                type Number CD
                type String SUBFIELD
                type RecordUTBLIRACON iracon
                type RecordUTBLIRADIS iradis
 
                set TRNDESC=TRNDESC.extract(1,60)
                set SUBFIELD=$S(ITC1:"IRAC",1:"IRAD")
                set CD=RTSO(SUBFIELD).get()
                if CD.isNull() set DESC3=TDES quit
                if SUBFIELD="IRAC" set iracon=Db.getRecord("UTBLIRACON","KEY=:CD") set DESC3=iracon.desc
                else  set iradis=Db.getRecord("UTBLIRADIS","KEY=:CD") set DESC3=iradis.desc
                set:DESC3="" DESC3=TDES
        	}

        quit:$L(TRNDESC.get())'>60
 
        new HLDDES,HLDDES60,N
 
        set HLDDES=TRNDESC.get()
        set HLDDES60=HLDDES.extract(1,61)
        set N=$L(HLDDES60," ")-1
	if 'N set DESC3=TRNDESC.extract(61,999),TRNDESC=TRNDESC.extract(1,60) quit
        set TRNDESC=$P(HLDDES60," ",1,N)
	if IRASTGRP quit
        set DESC3=$P(HLDDES," ",N+1,999)
        for  quit:DESC3.extract()'=" "  set DESC3=DESC3.extract(2,999)
        quit

	// geissp 43728
REC715(RecordHIST hist)		 // Create 715, check information records
         
        type public Number CID,ITC1
        type String REC,CHKSTR(),CHKNUM,SORT2,SEQIND
        type Number CRSUMCK,CRCNTCK,DBCNTCK,DBSUMCK,RECTYPE,RECCNTCK,RECSUMCK,SORT1,TOT
          
	set CHKNUM=hist.chknum
	set SORT1=0
	set SORT2=CHKNUM
	set TOT=hist.tot
	set SEQIND=CHKSTR(CHKNUM).get()
	set RECTYPE=715
	set REC=$$715^LETTERF(CID,hist.tseq)
	do TEMPREC1
	set RECCNTCK=RECCNTCK+1
	set RECSUMCK=RECSUMCK+TOT
	if ITC1 set CRCNTCK=CRCNTCK+1,CRSUMCK=CRSUMCK+TOT
	else  set DBCNTCK=DBCNTCK+1,DBSUMCK=DBSUMCK+TOT
	quit

	// geissp 43728
public REVDES	// Add (Reversal) to line 1 and remove from line 2
	// if line 2 matches line1 blank out line 2
	// TDES=line 1, TRNDESC=line 2, DESC=line 3

	type public String TRNDESC
	type String D2,TDES,TEXT
	
	set TEXT=$$^MSG(5483)
	set D2=TRNDESC.piece(TEXT,1)
	set TRNDESC=D2
	if TDES=D2 set TRNDESC=TDES_TEXT	// make line 1 = line 2
	set TDES=TDES_TEXT		// docucorp will prevent duplication
	quit

SJDPP
	/*
	 ofaltr - 05/22/01
	 Pre Processor on Extract File Name when running function LETSTMTTOT.
	 This section will build a lookup table for the Extract File name
	 Extract.
	*/
	
	type public Date SJD
	type public String LKTBL
	
	kill LKTBL
	set LKTBL("ALL")="" 

	if SJD="ALL" do {  quit
		type ResultSet rs98=Db.select("EXTRACT","LETSTMTTOT")
		if rs98.isEmpty() quit
		while rs98.next() do {
			set LKTBL(rs98.getCol("EXTRACT"))=rs98.getCol("EXTRACT")
			}
		}

	type ResultSet rs99=Db.select("EXTRACT","LETSTMTTOT","SJD=:SJD")
	if rs99.isEmpty() quit
	while rs99.next() do {
		set LKTBL(rs99.getCol("EXTRACT"))=rs99.getCol("EXTRACT")
		}

	quit

EXTPP(X,IO)
	/*
	 ofaltr - 05/22/01
	 Post Processor on 'Extract File Name' when running function LETSTMTTOT.
	 This process will add the path of the spool directory to the beginning 
	 of the File Name entered.
	*/

	type Number %EXT
	type public String IOHDG,IORM,IOSL,IOSUB,IOTYP
	type String XIO,XIOHDG,XIORM,XIOSL,XIOSUB,XIOTYP

	if X="ALL" quit

	//save off intitial IO parameter for output device
	set XIO=IO,XIOHDG=IOHDG,XIORM=IORM,XIOSL=IOSL,XIOSUB=IOSUB,XIOTYP=IOTYP

	set %EXT=1
	do ^SCAIO 

	set IO=XIO,IOHDG=XIOHDG,IORM=XIORM,IOSL=XIOSL,IOSUB=XIOSUB,IOTYP=XIOTYP
	quit
	
STMT739(XEFD,XACN,XSTMGRP)	// Include 739 Records in statement extract
	/*
	This function will return 1 if the product type for any account in
	the statement group is defined in User Table UTBLSTMT739. Otherwiswe,
	it will return 0

	ARGUMENTS:
	. XEFD		[DAYENDSTM]EFD		/TYP=D/NOREQ/MECH=VAL
	. XACN		[DAYENDSTM]ACN		/TYP=N/REQ/MECH=VAL
	. XSTMGRP	[DAYENDSTM]STMGRP	/TYP=N/REQ/MECH=VAL

	RETURNS:
	. $$		[DAYENDSTM]STMT739

	EXAMPLE:
	set STMT739=Db.getOneRow("STMT739","DAYENDSTM","EFD,ACN,STMGRP")
	*/

	type Number TYPE,STMT739,XCID
	
	set XACN=+XACN.get()
	set XSTMGRP=+XSTMGRP.get()

	set STMT739=0

	type ResultSet rs=Db.select("CID","CMBSTM","ACN=:XACN AND STMGRP=:XSTMGRP")
	if rs.isEmpty() quit 0
	for  quit:('rs.next()!STMT739)  do {
		set XCID=rs.getCol("CID")
		quit:'Db.isDefined("ACN","XCID")
		type RecordACN acn=Db.getRecord("ACN","XCID")
		set TYPE=acn.type
		if Db.isDefined("UTBLSTMT739","TYPE") set STMT739=1
		}
	quit STMT739

PPSTM(Number ACN)	// Statement group Post-processor
	type public Boolean ER
	type public String X

	quit:X=""
	
	type RecordCMBGRP cmbgrp=Db.getRecord("CMBGRP","ACN=:ACN AND STMGRP=:X",1)

	// No accounts in statement group ~p1
	if 'cmbgrp.getMode() set ER=1 do Runtime.setErrMSG("CMBGRP",1889,X) quit
	quit

POSBJD	// BJD Post-processor	
	type public Boolean ER
	type public Date X	
	type Date %DS,%JD
	
	quit:X=""
	
	set %DS=X set %JD=$$^SCAJD(%DS) quit:ER

	// Invalid date
	if %JD<0 set ER=1 do Runtime.setErrMSG("CMBGRP",1308) quit

	quit	

POSEJD(Date BJD)	// EJD Post-processor
	type public Boolean ER
	type public String X
	type Date %DS,%JD

	quit:X=""

	set %DS=X set %JD=$$^SCAJD(%DS) quit:ER

	// Invalid date
	if %JD<0 set ER=1 do Runtime.setErrMSG("CMBGRP",1308) quit
	
	// Must be after start date
	if %JD<BJD set ER=1 do Runtime.setErrMSG("CMBGRP",1799) quit

	quit

vSIG()	quit "60627^18038^Hema Puttaswamy^44599"	// Signature - LTD^TIME^USER^SIZE
