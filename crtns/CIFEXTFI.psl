CIFEXTFI(RecordCIFEXT cifext, String vpar, Boolean vparNorm) // CIFEXT - CIF External Institution Accounts Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             11/22/2003
	// Trigger Definition (1)                      12/16/2005
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cifext.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(cifext,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(cifext,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = cifext.acn
	type String SEQ = cifext.seq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CIFEXT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CIFEXT","ACN = :cifext.acn and SEQ = :cifext.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String SEQ

	type RecordCIFEXT cifext = Db.getRecord("CIFEXT","ACN=:ACN,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do cifext.setMode(2)

		do CIFEXTFI(cifext,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCIFEXT cifext

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CIFEXT","ACN = :cifext.acn and SEQ = :cifext.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(cifext)) S ^CIF(vobj(cifext,-3),199,vobj(cifext,-4))=vobj(cifext)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.cifext)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCIFEXT cifext

	if vpar["/JOURNAL/" do VJOURNAL(.cifext)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CIF(vobj(cifext,-3),199,vobj(cifext,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordCIFEXT cifext

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCIFEXT cifext

	if cifext.acn.isNull() do vreqerr("ACN") quit
	if cifext.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFEXT","MSG",1767,"CIFEXT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCIFEXT cifext
	if 'cifext.acn.isNull() set vfkey("^CIF("_""""_cifext.acn_""""_","_1_")")="CIFEXT(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCIFEXT cifext
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":cifext.acn") set vERRMSG = $$^MSG(8563,"CIFEXT(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordCIFEXT cifext
	/*
	----------Revision History------------------------------------

	12/14/05 - PUTTASWH - 18157
		    Modified to change the code to DBI Standards.
		    
	05/20/02 - ARPAV - 50667
		    Removed check to see if internal account is owned by
		    related customer.

	12/08/00 - 42979 - ARCILLAZ
		    Converted the trigger to PSL code

	-----------------------------------------------------------------
	*/

	// Check to see if internal institutions are allowed
	
	new EXTINST,EXTACCT
	
	set EXTINST=cifext.extinst
	set EXTACCT=cifext.extacct
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")	
	
	type RecordUTBLEFTINST utbleft=Db.getRecord("UTBLEFTINST","KEY=:EXTINST",1)	
	
	// Internal institutions not allowed
	if 'cuvar.cifexti do { quit:ER              
		// Must use an external institution for an external account
		if utbleft.onus=1 do Runtime.setErrMSG("CIFEXT",1584) quit:ER 
		}
	
	// Internal Institution
	if cuvar.cifexti do { quit:ER               
		// Check for a valid profile account
		if utbleft.onus=1 do { quit:ER 
			// Account does not exist
			type RecordACN acn=Db.getRecord("ACN","CID=:EXTACCT",1)
			if 'acn.getMode() do Runtime.setErrMSG("CIFEXT",57,"ACN") quit:ER
	
			}
		}
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCIFEXT cifext

	set X = cifext.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = cifext.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if cifext.addr.length()>32 set vRM = $$^MSG(1076,32) do vdderr("ADDR", vRM) quit
	if cifext.bencity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENCITY", vRM) quit
	if cifext.benname.length()>32 set vRM = $$^MSG(1076,32) do vdderr("BENNAME", vRM) quit
	set X = cifext.constant if 'X.isNull(),'Db.isDefined("UTBLECOACT","X") set vRM = $$^MSG(1485,X) do vdderr("CONSTANT", vRM) quit
	if cifext.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	if cifext.extacct.length()>20 set vRM = $$^MSG(1076,20) do vdderr("EXTACCT", vRM) quit
	set X = cifext.extacctp if 'X.isNull(),'Db.isDefined("UTBLEXTYP","X") set vRM = $$^MSG(1485,X) do vdderr("EXTACCTP", vRM) quit
	set X = cifext.extinst if 'X.isNull(),'Db.isDefined("UTBLEFTINST","X") set vRM = $$^MSG(1485,X) do vdderr("EXTINST", vRM) quit
	if cifext.pc.length()>32 set vRM = $$^MSG(1076,32) do vdderr("PC", vRM) quit
	if cifext.prov.length()>32 set vRM = $$^MSG(1076,32) do vdderr("PROV", vRM) quit
	if cifext.time.length()>14 set vRM = $$^MSG(1076,14) do vdderr("TIME", vRM) quit
	if cifext.transit.length()>5 set vRM = $$^MSG(1076,5) do vdderr("TRANSIT", vRM) quit
	if cifext.type.length()>32 set vRM = $$^MSG(1076,32) do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFEXT","MSG",979,"CIFEXT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCIFEXT cifext)	//CIFEXT Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.cifext)	// Mode=D Tran=B EFD=N Seq=1 JRNID=CIFH_D
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.cifext)	// Mode=D Tran=O EFD=N Seq=1 JRNID=CIFH_D
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.cifext)	// Mode=I Tran=B EFD=N Seq=1 JRNID=CIFH_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.cifext)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CIFH_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.cifext)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=CIFH_U
			}
		else  if TSRC="O" do {
			do vj3(.cifext)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CIFH_U
			}
		}

	quit


vj1(RecordCIFEXT cifext)	// CIFH_D  Table CIFH  History File Delete

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cifext.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(3852)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCIFEXT cifext)	// CIFH_I  Table CIFH  History File

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cifext.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(1174)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordCIFEXT cifext)	// CIFH_U  Table CIFH  History File Maintenance

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=cifext.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMTFM^CIFFUNCS(cifext.acn,"CIFEXT",vdi,vold,vnew,$G(EFD))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordCIFEXT cifext

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = cifext.acn_","_cifext.seq     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = cifext.acn_","_cifext.seq     // Copy new keys into object
	type RecordCIFEXT vnewrec = cifext.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CIFEXT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCIFEXT cifext

	if vux("ACN").exists() set cifext.acn = vux("ACN").piece("|",i)
	if vux("SEQ").exists() set cifext.seq = vux("SEQ").piece("|",i)
	quit
