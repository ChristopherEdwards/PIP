R01S607	// SCA703 - Group Control Reconciliation
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:02 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String INCD,INCDS,REMLDS
	type String query
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1
	type Date VIN2

	set RID="SCA703"
	set RN="Group Control Reconciliation"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|5||[LNLSINV]INCD|[LNLSINV]INCD:DISTINCT||S (INCD,INCDS)=X||T|Investor|||||"
	set %TAB("VIN2")="|10||[LNLSINV]REMLD|[LNLSINV]REMLD:DISTINCT:QU query||S REMLDS=X||D|Remittance Date|||||"

	set %READ="IO/REQ,VIN1#1,VIN2#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String INCD,INCDS,REMLDS
	type public String query
	type public Date VIN2
	type public String VIN1
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,ADJINT,ADJPRBAL,ADJPRL,CONAM,INVGRP,NCONS,PTCNT,PTOTCON,PTPLRIC,PTPLRPB,PTPLRPC,RID,RN,STCONS,TDUEINT,TDUEPRL,TINTRM,TNDUEINT,TNDUEPRL,TNETRMT,TOTREM,TPOBAL,TPPDINT,TPPDPRL,TPRLRM,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA703",RN="Group Control Reconciliation"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA703","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:3 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("LNLSINV.INCD,LNLSINV.REMLD,LNLSINV.PL,LNLS1.DESC,LNLS2.SVN,LNLSINV.TPLRIC,LNLSINV.TPLRPC,LNLSINV.TPLRFR,LNLSINV.TPLROC,LNLSINV.NPLRIC,LNLSINV.NPLRPC,LNLSINV.NPLRPB,LNLSINV.NTOT,LNLSINV.TPLRPB,LNLSINV.TCNT,LNLSINV.TPLRCA,LNLS2.ACTGRP,LNLS2.INCD,LNLSINV.PREMLD,LNLS2.PREMLD,LNLS2.SFCM,LNLS2.PP,LNLS2.REMFRE,LNLS2.FEEP,LNLS2.YIELD","LNLSINV,LNLS2,LNLS1","LNLSINV.INCD=:VIN1 AND LNLSINV.REMLD=:VIN2","LNLSINV.INCD,LNLSINV.REMLD,LNLSINV.PL","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3
	set vovc1="",vovc2="",vovc3=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3
	set vovc1=vc1,vovc2=vc2,vovc3=vc3
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25
	set vc1=V.piece($C(9),1)			// LNLSINV.INCD
	set vc2=V.piece($C(9),2)			// LNLSINV.REMLD
	set vc3=V.piece($C(9),3)			// LNLSINV.PL
	set vc4=V.piece($C(9),4)			// LNLS1.DESC
	set vc5=V.piece($C(9),5)			// LNLS2.SVN
	set vc6=V.piece($C(9),6)			// LNLSINV.TPLRIC
	set vc7=V.piece($C(9),7)			// LNLSINV.TPLRPC
	set vc8=V.piece($C(9),8)			// LNLSINV.TPLRFR
	set vc9=V.piece($C(9),9)			// LNLSINV.TPLROC
	set vc10=V.piece($C(9),10)			// LNLSINV.NPLRIC
	set vc11=V.piece($C(9),11)			// LNLSINV.NPLRPC
	set vc12=V.piece($C(9),12)			// LNLSINV.NPLRPB
	set vc13=V.piece($C(9),13)			// LNLSINV.NTOT
	set vc14=V.piece($C(9),14)			// LNLSINV.TPLRPB
	set vc15=V.piece($C(9),15)			// LNLSINV.TCNT
	set vc16=V.piece($C(9),16)			// LNLSINV.TPLRCA
	set vc17=V.piece($C(9),17)			// LNLS2.ACTGRP
	set vc18=V.piece($C(9),18)			// LNLS2.INCD
	set vc19=V.piece($C(9),19)			// LNLSINV.PREMLD
	set vc20=V.piece($C(9),20)			// LNLS2.PREMLD
	set vc21=V.piece($C(9),21)			// LNLS2.SFCM
	set vc22=V.piece($C(9),22)			// LNLS2.PP
	set vc23=V.piece($C(9),23)			// LNLS2.REMFRE
	set vc24=V.piece($C(9),24)			// LNLS2.FEEP
	set vc25=V.piece($C(9),25)			// LNLS2.YIELD
	quit

	// User-defined pre/post-processor code

VPREBQ	// Pre-processor (before query)

 //Incoming=INCD,INCDS,REMLDS
 type public String query

 set query="[LNLSINV]INCD=<<INCD>>"
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(3)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(3)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3
	set VH0=1					// Page break
	type Number vb1,vb2,vb3
	set (vb1,vb2,vb3)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(3)=VT(3)+1
	quit

VDTL3	// Detail
	type public String %TIM,ADJINT,ADJPRBAL,ADJPRL,INCD,INCDS,INVGRP,IOSL,NCONS,PTCNT,PTOTCON,PTPLRIC,PTPLRPB,PTPLRPC,REMLDS,STCONS,TDUEINT,TDUEPRL,TINTRM,TNDUEINT,TNDUEPRL,TNETRMT,TOTREM,TPOBAL,TPPDINT,TPPDPRL,TPRLRM,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),query,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vrundate,vsysdate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="  "_"Investor:  "
	set VL=VL_$J("",13-VL.length())_$E(vc4,1,30)
	set VL=VL_$J("",48-VL.length())_"Investor/Group Number: "
	do VP1 quit:VFMQ!verror.get()  set V=$E(INVGRP,1,16)
	set VL=VL_$J("",71-VL.length())_V
	set VL=VL_$J("",95-VL.length())_"Interest Rate:"
	set VL=VL_$J("",111-VL.length())_"Variable"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="  "_"Servicer:  "
	set VL=VL_$J("",13-VL.length())_$E(vc5,1,10)
	set VL=VL_$J("",44-VL.length())_"  "
	set VL=VL_$J("",58-VL.length())_"Pool Number:"
	set VL=VL_$J("",71-VL.length())_$E(vc3,1,10)
	set VL=VL_$J("",91-VL.length())_"Servicer Fee Rate:"
	set VL=VL_$J("",111-VL.length())_"Variable"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="Remittance: "
	set VL=VL_$J("",13-VL.length())_$J($$DAT^%ZM(vc2),10)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="                                "_"---- Remittance ----"
	set VL=VL_$J("",62-VL.length())_"-- Principal Control --"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="                                             "_"Principal"
	set VL=VL_$J("",75-VL.length())_" Principal"
	set VL=VL_$J("",91-VL.length())_"Number of"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="   "_"Description"
	set VL=VL_$J("",32-VL.length())_" Interest"
	set VL=VL_$J("",47-VL.length())_" Credit"
	set VL=VL_$J("",62-VL.length())_" Constant"
	set VL=VL_$J("",77-VL.length())_" Balance"
	set VL=VL_$J("",87-VL.length())_"   "
	set VL=VL_$J("",93-VL.length())_"Loans"
	set VL=VL_$J("",98-VL.length())_"       "
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="    "_"Control Totals"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="1.  (Prev. Reconciliation)"
	do VP2 quit:VFMQ!verror.get()  set V=$J(PTPLRIC,12,2)
	set VL=VL_$J("",29-VL.length())_V
	set VL=VL_$J("",43-VL.length())_$J(PTPLRPC,12,2)
	do VP3 quit:VFMQ!verror.get()  set V=$J(PTOTCON,12,2)
	set VL=VL_$J("",60-VL.length())_V
	set VL=VL_$J("",74-VL.length())_$J(PTPLRPB,12,2)
	do VP4 quit:VFMQ!verror.get()  set V=$J(PTCNT,12)
	set VL=VL_$J("",87-VL.length())_V
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="                                                                                                         "_"Service Fee"
	set VL=VL_$J("",118-VL.length())_"Net Remitted"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="2.  Total Cash Collected"
	set VL=VL_$J("",29-VL.length())_$J(vc6,12,2)
	set VL=VL_$J("",43-VL.length())_$J(vc7,12,2)
	set VL=VL_$J("",60-VL.length())_"************"
	set VL=VL_$J("",74-VL.length())_$J(vc7,12,2)
	set VL=VL_$J("",88-VL.length())_"***********"
	set VL=VL_$J("",104-VL.length())_$J(vc8,12,2)
	do VP5 quit:VFMQ!verror.get()  set V=$J(TNETRMT,12,2)
	set VL=VL_$J("",118-VL.length())_V
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="3.  Curtailments"
	set VL=VL_$J("",29-VL.length())_"************"
	set VL=VL_$J("",43-VL.length())_$J(vc9,12,2)
	set VL=VL_$J("",60-VL.length())_"************"
	set VL=VL_$J("",74-VL.length())_"************"
	set VL=VL_$J("",88-VL.length())_"***********"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="4.  Loans Added"
	set VL=VL_$J("",29-VL.length())_$J(vc10,12,2)
	set VL=VL_$J("",43-VL.length())_$J(vc11,12,2)
	do VP6 quit:VFMQ!verror.get()  set V=$J(NCONS,12,2)
	set VL=VL_$J("",60-VL.length())_V
	set VL=VL_$J("",74-VL.length())_$J(vc12,12,2)
	set VL=VL_$J("",87-VL.length())_$J(vc13,12,2)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="5.  Loans Removed"
	do VP7 quit:VFMQ!verror.get()  set V=$J(TINTRM,12,2)
	set VL=VL_$J("",29-VL.length())_V
	set VL=VL_$J("",43-VL.length())_$J(TPRLRM,12,2)
	set VL=VL_$J("",60-VL.length())_$J(TINTRM,12,2)
	set VL=VL_$J("",74-VL.length())_$J(TPOBAL,12,2)
	set VL=VL_$J("",87-VL.length())_$J(TOTREM,12)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="    "_"Trial Balance"
	set VL=VL_$J("",60-VL.length())_"======================================="
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="                                                                                                                 "_"Forecast"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="6.  (Sub-Tot Prin. Control)"
	do VP8 quit:VFMQ!verror.get()  set V=$J(STCONS,12,2)
	set VL=VL_$J("",60-VL.length())_V
	set VL=VL_$J("",74-VL.length())_$J(vc14,12,2)
	set VL=VL_$J("",87-VL.length())_$J(vc15,12)
	set VL=VL_$J("",108-VL.length())_"Interest"
	set VL=VL_$J("",121-VL.length())_"Principal"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="7.  Delinquent Installments  "
	do VP9 quit:VFMQ!verror.get()  set V=$J(TDUEINT,12,2)
	set VL=VL_$J("",29-VL.length())_V
	set VL=VL_$J("",43-VL.length())_$J(TDUEPRL,12,2)
	set VL=VL_$J("",60-VL.length())_"************"
	set VL=VL_$J("",74-VL.length())_$J(TDUEPRL,12,2)
	set VL=VL_$J("",88-VL.length())_"***********"
	set VL=VL_$J("",104-VL.length())_$J(TDUEINT,12,2)
	set VL=VL_$J("",118-VL.length())_$J(TDUEPRL,12,2)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="8.  Prepaid Installments     "
	set VL=VL_$J("",29-VL.length())_$J(TPPDINT,12,2)
	set VL=VL_$J("",43-VL.length())_$J(TPPDPRL,12,2)
	set VL=VL_$J("",60-VL.length())_"************"
	set VL=VL_$J("",74-VL.length())_$J(TPPDPRL,12,2)
	set VL=VL_$J("",88-VL.length())_"***********"
	set VL=VL_$J("",104-VL.length())_$J(TPPDINT,12,2)
	set VL=VL_$J("",118-VL.length())_$J(TPPDPRL,12,2)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="    "_"Curtailments after"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="9.  Prepayments              ************  ************    "
	set VL=VL_$J("",60-VL.length())_"************  "
	set VL=VL_$J("",74-VL.length())_$J(vc16,12,2)
	set VL=VL_$J("",88-VL.length())_"***********"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="    "_"Adjusted Prin. Bal and"
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="10. Normal Payment Due"
	do VP10 quit:VFMQ!verror.get()  set V=$J(ADJINT,12,2)
	set VL=VL_$J("",29-VL.length())_V
	do VP11 quit:VFMQ!verror.get()  set V=$J(ADJPRL,12,2)
	set VL=VL_$J("",43-VL.length())_V
	set VL=VL_$J("",60-VL.length())_"************  "
	do VP12 quit:VFMQ!verror.get()  set V=$J(ADJPRBAL,12,2)
	set VL=VL_$J("",74-VL.length())_V
	set VL=VL_$J("",88-VL.length())_"***********"
	set VL=VL_$J("",104-VL.length())_$J(ADJINT,12,2)
	set VL=VL_$J("",118-VL.length())_$J(ADJPRL,12,2)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	set VL="    "_"Adjustments and "
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="11. Forecasted Total Credit "
	set VL=VL_$J("",29-VL.length())_$J(TNDUEINT,12,2)
	set VL=VL_$J("",43-VL.length())_$J(TNDUEPRL,12,2)
	set VL=VL_$J("",60-VL.length())_"************  ************  *********** "
	set VL=VL_$J("",104-VL.length())_$J(TNDUEINT,12,2)
	set VL=VL_$J("",118-VL.length())_$J(TNDUEPRL,12,2)
	if VLC+1>IOSL do VHDG0 quit:VFMQ
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ADJINT,ADJPRBAL,ADJPRL,CONAM,INCD,INCDS,INVGRP,NCONS,PTCNT,PTOTCON,PTPLRIC,PTPLRPB,PTPLRPC,REMLDS,RID,RN,STCONS,TDUEINT,TDUEPRL,TINTRM,TNDUEINT,TNDUEPRL,TNETRMT,TOTREM,TPOBAL,TPPDINT,TPPDPRL,TPRLRM,VL,query,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+3,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=$E(RN,1,30)
	set VL=VL_$J("",33-VL.length())_$E(RID,1,12)
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="==================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: INVGRP

	type public String vc17,vc18
 type public String INVGRP
 type String ACTGRP1,INCD1 

 set ACTGRP1=vc17
 set INCD1=vc18
 //
 set INVGRP=INCD1_"/"_ACTGRP1
	quit

VP2	// Column pre-processor - Variable: PTPLRIC

	type public String vc3,vc19
 type public String PTCNT,PTPLRCA,PTPLRFR,PTPLROC,PTPLRPB,PTPLRPC,PTPLRIC,ZPREMLD
 
 type Number PL
 set PL = vc3
 set ZPREMLD=vc19

 set (PTCNT,PTPLRIC,PTPLRPC,PTPLRPB,PTPLROC,PTPLRFR,PTPLRCA)=""

 if 'ZPREMLD.isNull()  do {
 	type ResultSet rs=Db.select("TCNT,TPLRIC,TPLRPC,TPLRPB,TPLROC,TPLRFR,TPLRCA,PREMLD,NPLRIC,NPLRPC,NPLRPB,NTOT","LNLSINV","INCD=:INCD AND REMLD=:ZPREMLD AND PL=:PL")
	while rs.next() do {
		 set PTCNT=rs.getCol("TCNT")  
		 set PTPLRIC=rs.getCol("TPLRIC")
		 set PTPLRPC=rs.getCol("TPLRPC")
		 set PTPLRPB=rs.getCol("TPLRPB")
		 set PTPLROC=rs.getCol("TPLROC")
		 set PTPLRFR=rs.getCol("TPLRFR")
		 set PTPLRCA=rs.getCol("TPLRCA")
		} 
 }
	quit

VP3	// Column pre-processor - Variable: PTOTCON

 type public String PTOTCON,PTPLRPC,PTPLRIC

 set PTOTCON=PTPLRIC+PTPLRPC
	quit

VP4	// Column pre-processor - Variable: PTCNT

 type public String PTCNT

 if PTCNT="" set PTCNT=0
	quit

VP5	// Column pre-processor - Variable: TNETRMT

	type public String vc8,vc6,vc7
 type public Number TNETRMT
 type Number ZTPLRFR,ZTPLRIC,ZTPLRPC

 set ZTPLRFR=vc8
 set ZTPLRIC=vc6
 set ZTPLRPC=vc7
 //
 set TNETRMT=ZTPLRIC+ZTPLRPC-ZTPLRFR
	quit

VP6	// Column pre-processor - Variable: NCONS

	type public String vc10,vc11
 type public Number NCONS
 type Number ZNPLRIC,ZNPLRPC

 set ZNPLRIC=vc10
 set ZNPLRPC=vc11
 //
 set NCONS=ZNPLRIC+ZNPLRPC
	quit

VP7	// Column pre-processor - Variable: TINTRM

	type public String vc2,vc19,vc20,vc3
 type public Date FDT,TDT
 type public Number CID,TINTRM,TOTREM,TPOBAL,TPRLRM
 type public String GRP,INCD

 type Number DT,PL,ZREMLD,ZPREMLD,ZPREMLD1
 
 set (TINTRM,TPRLRM,TPOBAL)=""
 set TOTREM=0
 set ZREMLD=vc2
 set ZPREMLD=vc19
 set ZPREMLD1=vc20
 set PL=vc3
 
 if ZREMLD'>ZPREMLD quit

 set GRP="",CID="",FDT="",TDT=""

 for DT=ZPREMLD1+1:1:ZREMLD  do {
	type ResultSet zrs=Db.select("GRP,CID","LNLS9","EFD=:DT AND INCD=:INCD AND PL=:PL","GRP,CID")

	while zrs.next()  do {
		set GRP=zrs.getCol(1)
		set CID=zrs.getCol(2)
		}

	type ResultSet zrs1=Db.select("POBAL,PRLRM,INTRM","LNLS9","EFD=:DT AND INCD=:INCD AND PL=:PL AND GRP=:GRP AND CID=:CID")		

	while zrs1.next()  do {
		set TINTRM=TINTRM+zrs1.getCol(3)
		set TPRLRM=TPRLRM+zrs1.getCol(2)
		set TPOBAL=TPOBAL+zrs1.getCol(1)
		set TOTREM=TOTREM+1		
		}
 }
	quit

VP8	// Column pre-processor - Variable: STCONS

	type public String vc6,vc7
 type public Number STCONS
 type Number ZTPLRIC,ZTPLRPC

 set ZTPLRIC=vc6
 set ZTPLRPC=vc7
 //
 set STCONS=ZTPLRIC+ZTPLRPC
	quit

VP9	// Column pre-processor - Variable: TDUEINT

	type public String vc21,vc22,vc23,vc2,vc3,vc24,vc25,vc19
 type public Number AF,DUEINT,DUEPRL,FEEP,FRE,JD,NDUEINT,NDUEPRL,MAX,MIN,OPTR,PLRPB,PP,PPDINT,PPDPRL,REMAF,SFCM,TDUEINT,TDUEPRL,TNDUEPRL,TNDUEINT,TPPDINT,TPPDPRL,YLD
 type public String CID,DPSUM,GRP,INCD,NJD,PSEQ

 type String ZPREMLD,ZREMLD
 type Number PL,SCHSEQ,ZRFPF

 set SFCM=vc21	// needed by FEE^LNLS8PD
 set PP=vc22/100
 set FRE=vc23
 set JD=vc2
 set PL=vc3
 
 do ^UFRE
 set REMAF=AF
 set JD=""  		// needed for UHFETCH
 set FEEP=vc24
 set YLD=vc25/100
 set MIN("1")=""
 set MAX("1")=$CHAR(225)
 
 set (GRP,CID,TDUEINT,TDUEPRL,TPPDINT,TPPDPRL,TNDUEPRL,TNDUEINT)=""
 type ResultSet rs=Db.select("GRP,CID","LNLS8","INCD=:INCD AND PL=:PL","GRP,CID")
 	while rs.next()  do {
		set GRP=rs.getCol(1)
		set CID=rs.getCol(2)

		type ResultSet zrs=Db.select("PSEQ","LNLS8","INCD=:INCD AND PL=:PL AND GRP=:GRP AND CID=:CID")
			while zrs.next()  do {
				set PSEQ=zrs.getCol(1)
			}
	
		type RecordLN ln = Db.getRecord("LN","CID=:CID")
		type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:ln.schseq")

 		type ResultSet zrs1=Db.select("RFPF,PLRPB,OPTR","LNLS6","CID=:CID AND PSEQ=:PSEQ")
			while zrs1.next()  do {
				set ZRFPF=zrs1.getCol(1)
				if ZRFPF'=1,$$INBAL^LNCDI("",CID,INCD,PL)>0  do {
					set PLRPB=zrs1.getCol(2)         // need for FEE^LNLS8PD
					set OPTR=zrs1.getCol(3)/100

					set ZPREMLD=vc19
					set ZREMLD=vc2

					set DPSUM=$$DPSUM^LNLS8PD(.lnbil1,CID,ZPREMLD,ZREMLD-1)
					
					set DUEPRL=DPSUM.piece("|",1)*PP
					set DUEPRL=DUEPRL.roundDec()
					set DUEINT=DPSUM.piece("|",2)*PP
					set DUEINT=DUEINT.roundDec()
					set PPDPRL=DPSUM.piece("|",4)*PP
					set PPDPRL=PPDPRL.roundDec()
					set PPDINT=DPSUM.piece("|",5)*PP
					set PPDINT=PPDINT.roundDec()

					set ZREMLD=vc2
					set DPSUM=$$DPSUM^LNLS8PD(.lnbil1,CID,ZREMLD,NJD-1)

					set NDUEINT=DPSUM.piece("|",2)*PP
					set NDUEINT=NDUEINT.roundDec()
					set NDUEPRL=DPSUM.piece("|",1)*PP
					set NDUEPRL=NDUEPRL.roundDec()
					set TDUEPRL=TDUEPRL+DUEPRL
					set TDUEINT=TDUEINT+DUEINT
					set TPPDPRL=TPPDPRL+PPDPRL
					set TPPDINT=TPPDINT+PPDINT
					set TNDUEINT=TNDUEINT+NDUEINT
					set TNDUEPRL=TNDUEPRL+NDUEPRL
					}
				
			}
	}
		
	quit

VP10	// Column pre-processor - Variable: ADJINT

 type public Number ADJINT,TDUEINT,TPPDINT,TNDUEINT

 set ADJINT=TNDUEINT-TDUEINT+TPPDINT
	quit

VP11	// Column pre-processor - Variable: ADJPRL

 type public Number ADJPRL,TDUEPRL,TNDUEPRL,TPPDPRL

 set ADJPRL=TNDUEPRL-TDUEPRL+TPPDPRL
	quit

VP12	// Column pre-processor - Variable: ADJPRBAL

	type public String vc16,vc14
 type public Number ADJPRBAL,TDUEPRL,TPPDPRL
 type Number ZTPLRCA,ZTPLRPB

 set ZTPLRCA=vc16
 set ZTPLRPB=vc14
 //
 set ADJPRBAL=ZTPLRPB-TDUEPRL+TPPDPRL-ZTPLRCA

	quit
