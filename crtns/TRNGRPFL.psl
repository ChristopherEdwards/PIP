TRNGRPFL(RecordUTBLTRNGRP utbltrngrp, String vpar, Boolean vparNorm) // UTBLTRNGRP - Transaction Code Groups Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              12/17/2004
	// Trigger Definition (3)                      09/12/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbltrngrp.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utbltrngrp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbltrngrp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TRNGRP = utbltrngrp.trngrp
	type String TRNGRPDT = utbltrngrp.trngrpdt
	type String TRNCD = utbltrngrp.trncd

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TRNGRP").exists()!vx("TRNGRPDT").exists()!vx("TRNCD").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLTRNGRP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLTRNGRP","TRNGRP = :utbltrngrp.trngrp and TRNGRPDT = :utbltrngrp.trngrpdt and TRNCD = :utbltrngrp.trncd") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TRNGRP
	type public String TRNGRPDT
	type public String TRNCD

	type RecordUTBLTRNGRP utbltrngrp = Db.getRecord("UTBLTRNGRP","TRNGRP=:TRNGRP,TRNGRPDT=:TRNGRPDT,TRNCD=:TRNCD")
	if (%ProcessMode = 2) do {
		do utbltrngrp.setMode(2)

		do TRNGRPFL(utbltrngrp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLTRNGRP utbltrngrp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLTRNGRP","TRNGRP = :utbltrngrp.trngrp and TRNGRPDT = :utbltrngrp.trngrpdt and TRNCD = :utbltrngrp.trncd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbltrngrp,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbltrngrp,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbltrngrp)) S ^UTBL("FEE","TRNGRP",vobj(utbltrngrp,-3),vobj(utbltrngrp,-4),vobj(utbltrngrp,-5))=vobj(utbltrngrp)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLTRNGRP utbltrngrp

	if vpar'["/NOLOG/" do ^DBSLOGIT(utbltrngrp,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("FEE","TRNGRP",vobj(utbltrngrp,-3),vobj(utbltrngrp,-4),vobj(utbltrngrp,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLTRNGRP utbltrngrp

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLTRNGRP utbltrngrp

	if utbltrngrp.trngrp.isNull() do vreqerr("TRNGRP") quit
	if utbltrngrp.trngrpdt.isNull() do vreqerr("TRNGRPDT") quit
	if utbltrngrp.trncd.isNull() do vreqerr("TRNCD") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLTRNGRP","MSG",1767,"UTBLTRNGRP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("TRNCD").exists()!vx("TRNGRP").exists()!vx("FEEAMT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Transaction Group

	type public RecordUTBLTRNGRP utbltrngrp
								/*
								----Revision History---------------------------------------------------
								09/12/05 - RussellDS - CR16911
        	   Clean up PSL code.
        	   
        	   Remove old revision history.
     	-----------------------------------------------------------------------

	If an exemption plan contains a transaction code that was deleted, then
	delete the transaction codes in the exemption plan trangroup.
	*/
	type Date XEFD, XENDT
	type String XPLAN

	/*
	Get effective date if the transaction group record exist with a
	greater effective date
	*/
	type ResultSet rs1 = Db.select("TRNGRPDT","UTBLTRNGRP","TRNGRPDT>:TRNGRPDT AND TRNCD=:TRNCD AND TRNGRP=:TRNGRP") 
	if rs1.isEmpty() set XENDT = utbltrngrp.trngrpdt
	else  if rs1.next()  set XENDT = rs1.getCol("TRNGRPDT")
	
	type ResultSet rs2 = Db.select("PLAN,EFD","YFEEEXP3","FTYPE=:TRNGRP AND EFD>=:TRNGRPDT AND EFD<=:XENDT")
	while rs2.next() do { 
		set XPLAN = rs2.getCol("PLAN")
		set XEFD = rs2.getCol("EFD")
		do Db.delete("UTBLTRNGRP","TRNGRP=:XPLAN AND TRNGRPDT=:XEFD AND TRNCD=:TRNCD")
	}
	
	// Delete the top level UTBLTRNGRPT(parent) if all UTBLTRNGRP(child) are deleted
	type ResultSet rs3 = Db.select("TRNCD","UTBLTRNGRP","TRNGRP=:TRNGRP AND TRNGRPDT=:TRNGRPDT") 
	if rs3.isEmpty() do Db.delete("UTBLTRNGRPT","TRNGRP=:TRNGRP AND TRNGRPDT=:TRNGRPDT")

	quit

vai1 // Trigger AFTER_INSERT - After Insert Service Fee Trangroup

	type public RecordUTBLTRNGRP utbltrngrp
								/*
								----Revision History---------------------------------------------------
								09/12/05 - RussellDS - CR16911
        	   Correct undefined error.  Clean up PSL code.
        	   
        	   Remove old revision history.
     	-----------------------------------------------------------------------
     	*/
     	
     	type public Boolean ER

	if (%ProcessMode '= 2) do { quit:ER
	
		type Date XENDT
		type Number XFEEAMT = utbltrngrp.feeamt
		type String TRNCD = utbltrngrp.trncd
	
		// Effective date must be the same as or after the system date for modification
		if (utbltrngrp.trngrpdt < %SystemDate) do Runtime.setErrMSG("UTBLTRNGRP",879) quit:ER 
		
		/*
		If an exemption plan contains a transaction group, then update the
		transaction codes in the exemption plan trangroup with the new values.

		Get effective date if the transaction group record exists with a
		greater effective date
		*/
	
		type ResultSet rs1 = Db.select("TRNGRPDT","UTBLTRNGRP","TRNGRPDT>:TRNGRPDT AND TRNCD=:TRNCD AND TRNGRP=:TRNGRP") 
		if rs1.isEmpty() set XENDT = utbltrngrp.trngrpdt
		else  if rs1.next() set XENDT = rs1.getCol("TRNGRPDT")
	
		type ResultSet rs2 = Db.select("PLAN,EFD","YFEEEXP3","FTYPE=:TRNGRP AND EFD>=:TRNGRPDT AND EFD<=:XENDT")
		while rs2.next() do { 
			
			type Date XEFD = rs2.getCol("EFD")
			type String XPLAN = rs2.getCol("PLAN")
			
			type RecordUTBLTRNGRP trngrp = Db.getRecord("UTBLTRNGRP", "TRNGRP=:XPLAN,TRNGRPDT=:XEFD,TRNCD=:TRNCD", 1)
			
			set trngrp.feeamt = XFEEAMT
			
			do trngrp.save()
		}
	}

	quit

vau1 // Trigger AU_TRNCD - After Update Transaction Code Fee Amount

	type public RecordUTBLTRNGRP utbltrngrp
								/*
								----Revision History---------------------------------------------------
								09/12/05 - RussellDS - CR16911
        	   Clean up PSL code.
        	   
        	   Remove old revision history.
     	-----------------------------------------------------------------------
     	*/
     	
     	type public Boolean ER

	type Date XENDT
	type Number XFEEAMT

	// Effective date must be the same as or after the system date for modification
	if (utbltrngrp.trngrpdt < %SystemDate) do Runtime.setErrMSG("UTBLTRNGRP",879) quit:ER 
	
	/*	
	If an exemption plan contains a transaction group that was modified, then
	update the transaction codes in the exemption plan trangroup with the
	new values.

	Get effective date if the transaction group record exists with a
	greater effective date
	*/
	set XFEEAMT=utbltrngrp.feeamt

	type ResultSet rs1 = Db.select("TRNGRPDT","UTBLTRNGRP","TRNGRPDT>:TRNGRPDT AND TRNCD=:TRNCD AND TRNGRP=:TRNGRP") 
	if rs1.isEmpty() set XENDT = utbltrngrp.trngrpdt
	else  if rs1.next() set XENDT = rs1.getCol("TRNGRPDT")
	
	type ResultSet rs2 = Db.select("PLAN,EFD","YFEEEXP3","FTYPE=:TRNGRP AND EFD>=:TRNGRPDT AND EFD<=:XENDT")
	while rs2.next() do {
		
		type Date XEFD = rs2.getCol("EFD")
		type String XPLAN = rs2.getCol("PLAN")
		
		do Db.update("UTBLTRNGRP","FEEAMT=:XFEEAMT","TRNGRP=:XPLAN AND TRNGRPDT=:XEFD AND TRNCD=:TRNCD")
	}
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLTRNGRP utbltrngrp

	if utbltrngrp.trngrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRNGRP", vRM) quit
	set X = utbltrngrp.trngrpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TRNGRPDT", vRM) quit
	set X = utbltrngrp.trncd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("TRNCD", vRM) quit
	set X = utbltrngrp.feeamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLTRNGRP.FEEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLTRNGRP","MSG",979,"UTBLTRNGRP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLTRNGRP utbltrngrp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("TRNGRP").exists() set vux("TRNGRP") = vx("TRNGRP")
	if vx("TRNGRPDT").exists() set vux("TRNGRPDT") = vx("TRNGRPDT")
	if vx("TRNCD").exists() set vux("TRNCD") = vx("TRNCD")
	do vkey(1) set voldkey = utbltrngrp.trngrp_","_utbltrngrp.trngrpdt_","_utbltrngrp.trncd // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utbltrngrp.trngrp_","_utbltrngrp.trngrpdt_","_utbltrngrp.trncd // Copy new keys into object
	type RecordUTBLTRNGRP vnewrec = utbltrngrp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLTRNGRP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLTRNGRP utbltrngrp

	if vux("TRNGRP").exists() set utbltrngrp.trngrp = vux("TRNGRP").piece("|",i)
	if vux("TRNGRPDT").exists() set utbltrngrp.trngrpdt = vux("TRNGRPDT").piece("|",i)
	if vux("TRNCD").exists() set utbltrngrp.trncd = vux("TRNCD").piece("|",i)
	quit
