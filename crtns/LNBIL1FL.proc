LNBIL1FL(RecordLNBIL1 lnbil1, String vpar, Boolean vparNorm) // LNBIL1 - Internal Bill Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (139)            11/04/2005
	// Trigger Definition (6)                      05/11/2005
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnbil1.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnbil1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnbil1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnbil1.cid
	type String SCHSEQ = lnbil1.schseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SCHSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNBIL1",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNBIL1","CID = :lnbil1.cid and SCHSEQ = :lnbil1.schseq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SCHSEQ

	type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:SCHSEQ")
	if (%ProcessMode = 2) do {
		do lnbil1.setMode(2)

		do LNBIL1FL(lnbil1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNBIL1 lnbil1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNBIL1","CID = :lnbil1.cid and SCHSEQ = :lnbil1.schseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnbil1))  S ^BIL(vobj(lnbil1,-3),vobj(lnbil1,-4))=vobj(lnbil1)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnbil1)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNBIL1 lnbil1

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.lnbil1)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^BIL(vobj(lnbil1,-3),vobj(lnbil1,-4))              // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNBIL1 lnbil1

	// Type local variables for access keys for defaults
	type public String CID
	type public String SCHSEQ

	if lnbil1.mancre.isNull() set lnbil1.mancre = 0        // mancre
	if lnbil1.manmod.isNull() set lnbil1.manmod = 0        // manmod
	if lnbil1.mantfl.isNull() set lnbil1.mantfl = 0        // mantfl
	quit


vreqn // Validate required data items

	type public RecordLNBIL1 lnbil1

	if lnbil1.mancre.isNull() do vreqerr("MANCRE") quit
	if lnbil1.manmod.isNull() do vreqerr("MANMOD") quit
	if lnbil1.mantfl.isNull() do vreqerr("MANTFL") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNBIL1 lnbil1

	if lnbil1.cid.isNull() do vreqerr("CID") quit
	if lnbil1.schseq.isNull() do vreqerr("SCHSEQ") quit

		if vx("MANCRE").exists(),lnbil1.mancre.isNull() do vreqerr("MANCRE") quit
		if vx("MANMOD").exists(),lnbil1.manmod.isNull() do vreqerr("MANMOD") quit
		if vx("MANTFL").exists(),lnbil1.mantfl.isNull() do vreqerr("MANTFL") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNBIL1","MSG",1767,"LNBIL1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNBIL1 lnbil1
	if 'lnbil1.cid.isNull() set vfkey("^ACN("_""""_lnbil1.cid_""""_","_50_")")="LNBIL1(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNBIL1 lnbil1
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnbil1.cid") set vERRMSG = $$^MSG(8563,"LNBIL1(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNBIL1 lnbil1
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnbil1,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - LNBIL1 After Delete Trigger

	type public RecordLNBIL1 lnbil1
	
	do EXEC^PROCLNB1("LNBIL1","delete","after",lnbil1.cid,lnbil1.schseq,.lnbil1)
	
	quit 

vai1 // Trigger AFTER_INSERT - LNBIL1 After Insert Trigger

	type public RecordLNBIL1 lnbil1
	/*
	-----Revision History--------------------------------------------------
	12/03/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	
	do EXEC^PROCLNB1("LNBIL1","insert","after",lnbil1.cid,lnbil1.schseq,.lnbil1)
	
	quit 

vau1 // Trigger AFTER_UPDATE - LNBIL1 After Update Trigger

	type public RecordLNBIL1 lnbil1
	
	do EXEC^PROCLNB1("LNBIL1","update","after",lnbil1.cid,lnbil1.schseq,.lnbil1)
	
	quit 

vbd1 // Trigger BEFORE_DELETE - LNBIL1 Before Delete Trigger

	type public RecordLNBIL1 lnbil1
	/*	
	Only payment records which have had no payments applied to it
	may be deleted
	*/
	if lnbil1.ctab-lnbil1.casd do { quit:ER 
	
		new datedisp set datedisp=$$DAT^%ZM(lnbil1.cdpd)
	
		// ~p1 payment record partially satisfied and may not be deleted
		do Runtime.setErrMSG("LNBIL1",1804,datedisp) quit:ER 
		}
	
	do EXEC^PROCLNB1("LNBIL1","delete","before",lnbil1.cid,lnbil1.schseq,.lnbil1)
	
	quit 

vbi1 // Trigger BEFORE_INSERT - LNBIL1 Before Insert Trigger

	type public RecordLNBIL1 lnbil1
	/*
	---------- Revision History ------------------------------------------
	
	05/05/05 - KinI - 15524
		   Modified to eliminated PE0* and BP1 master fields update as 
		   they are treated as a special kind of computed columns per 
		   DBI standards.
	
	06/15/01 - HUNDERMARKD - 45562
		   Modifications done to insure that correct values
		   are being filed back into the right pieces for
		   lnbil1.bp1, lnbil1.pe01 - lnbil1.pe20, respectively.
	
	*/
	
	type RecordLN ln = Db.getRecord("LN","CID=lnbil1.cid")
		
	if (lnbil1.copb = "") set lnbil1.copb = ln.balint
	
	if (lnbil1.coia = "") set lnbil1.coia = $$^SCARND(ln.inta,0,,,2)
	
	if (lnbil1.cirn = "") set lnbil1.cirn = ln.irn	
		
	do EXEC^PROCLNB1("LNBIL1","insert","before",lnbil1.cid,lnbil1.schseq,.lnbil1) quit:ER
	
	/*
	Ensure validity of new due date.  The associated billing cutoff
	date must be less than today, because the payment could not have
	otherwise been billed during the normal course of business.  This
	check must be done after the call to PROCLNB1 because the check
	needs the new values of CASD and CATB.
	*/		
	do { quit:ER 
	
		// Ensure that due date is not before disbursement date
		if (lnbil1.cdpd < ln.odd) do Runtime.setErrMSG("LNBIL1",8436) quit:ER 
	
		/*
		It is not necessary to do this check if there are no
		amounts due for this payment.  This would indicate that
		zero amount bills are being created to advance the
		due date.
		*/
		if (+lnbil1.casd = 0) , (+lnbil1.ctab = 0) quit 
	
		type Date billdate
	
		if (lnbil1.cdpd.isNull()) quit 
	
		if (ln.bloff '= "1P") set billdate = lnbil1.cdpd - ln.bloff
		if (ln.bloff = "1P") set billdate = $$NJD^UFRE(lnbil1.cdpd,ln.dist1fre,,1) quit:ER
	
		// Choose a payment due date with corresponding billing cutoff 
		// date prior to today
		if (lnbil1.cdpd = "") ! (billdate '< %SystemDate) do Runtime.setErrMSG("LNBIL1",2020) quit:ER 	
		}
	
	quit 

vbu1 // Trigger BEFORE_UPDATE - LNBIL1 Before Update Trigger

	type public RecordLNBIL1 lnbil1
	do lnbil1.setAuditFlag(1)
	/*
	---------- Revision History ------------------------------------------
	
	05/05/05 - KinI - 15524
		   Modified to eliminated PE0* and BP1 master fields update as 
		   they are treated as a special kind of computed columns per 
		   DBI standards.
		   Modified to directly update BP1 and PE0* amount billed 
		   sub-fields (rather then BP1 and PE0* pieces) when amount due 
		   is changing.
		   
	11/29/01 - SKLYUTD - 47955:02
		   Updated section UPDORG.  Removed all of the 
		   isChanged("","SYSTEM") logic.  Would never execute
		   code in the if block with that mister in the if.

	06/15/01 - HUNDERMARKD - 45562
		   In section UPDORG any modifications done to
		   PE02AD - PE20AD were incorrectly being filed
		   back into PE01, instead of filing back into
		   PE02 - PE20, respectively.
	
	02/11/00 - CHOK - 31126
		   Converted isChanged method.

	*/
	
	type public String ER
	
	// If "due" amount is updated, then update "original" amount
	do UPDORG(.lnbil1) quit:ER 
	
	/*
	Ensure validity of new due date.  The associated billing cutoff
	date must be less than today, because the payment could not have
	otherwise been billed during the normal course of business.
	*/
	if lnbil1.isChanged("CDPD") do { quit:ER 
	
		type Date billdate
				
		type RecordLN ln = Db.getRecord("LN","CID=lnbil1.cid")
	
		// Due date may not be before original disbursement date
		if (lnbil1.cdpd < ln.odd) do Runtime.setErrMSG("LNBIL1",8436) quit:ER 
	
		if (ln.bloff '= "1P") set billdate = lnbil1.cdpd - ln.bloff
		if (ln.bloff = "1P") set billdate = $$NJD^UFRE(lnbil1.cdpd,ln.dist1fre,,1) quit:ER
	
		// Choose a payment due date with corresponding billing cutoff 
		// date prior to today
		if (lnbil1.cdpd = "") ! (billdate '< %SystemDate) do Runtime.setErrMSG("LNBIL1",2020) quit:ER 	
		}
	
	do EXEC^PROCLNB1("LNBIL1","update","before",lnbil1.cid,lnbil1.schseq,.lnbil1)
	
	quit 
	

UPDORG(RecordLNBIL1 lnbil1) // Update original amount if amount remaining changes
	
	if lnbil1.isChanged("CPID") set lnbil1.cpib = lnbil1.cpib + (lnbil1.cpid - lnbil1.cpid.oldVal)
	
	if lnbil1.isChanged("CSUBDUE") set lnbil1.csubamt = lnbil1.csubamt + (lnbil1.csubdue - lnbil1.csubdue.oldVal)
	
	if lnbil1.isChanged("PE01AD") set lnbil1.pe01ab = lnbil1.pe01ab + (lnbil1.pe01ad - lnbil1.pe01ad.oldVal)

	if lnbil1.isChanged("PE02AD") set lnbil1.pe02ab = lnbil1.pe02ab + (lnbil1.pe02ad - lnbil1.pe02ad.oldVal)
	
	if lnbil1.isChanged("PE03AD") set lnbil1.pe03ab = lnbil1.pe03ab + (lnbil1.pe03ad - lnbil1.pe03ad.oldVal)
	
	if lnbil1.isChanged("PE04AD") set lnbil1.pe04ab = lnbil1.pe04ab + (lnbil1.pe04ad - lnbil1.pe04ad.oldVal)
	
	if lnbil1.isChanged("PE05AD") set lnbil1.pe05ab = lnbil1.pe05ab + (lnbil1.pe05ad - lnbil1.pe05ad.oldVal)
	
	if lnbil1.isChanged("PE06AD") set lnbil1.pe06ab = lnbil1.pe06ab + (lnbil1.pe06ad - lnbil1.pe06ad.oldVal)
	
	if lnbil1.isChanged("PE07AD") set lnbil1.pe07ab = lnbil1.pe07ab + (lnbil1.pe07ad - lnbil1.pe07ad.oldVal)
	
	if lnbil1.isChanged("PE08AD") set lnbil1.pe08ab = lnbil1.pe08ab + (lnbil1.pe08ad - lnbil1.pe08ad.oldVal)
	
	if lnbil1.isChanged("PE09AD") set lnbil1.pe09ab = lnbil1.pe09ab + (lnbil1.pe09ad - lnbil1.pe09ad.oldVal)
	
	if lnbil1.isChanged("PE10AD") set lnbil1.pe10ab = lnbil1.pe10ab + (lnbil1.pe10ad - lnbil1.pe10ad.oldVal)
	
	if lnbil1.isChanged("PE11AD") set lnbil1.pe11ab = lnbil1.pe11ab + (lnbil1.pe11ad - lnbil1.pe11ad.oldVal)
	
	if lnbil1.isChanged("PE12AD") set lnbil1.pe12ab = lnbil1.pe12ab + (lnbil1.pe12ad - lnbil1.pe12ad.oldVal)
	
	if lnbil1.isChanged("PE13AD") set lnbil1.pe13ab = lnbil1.pe13ab + (lnbil1.pe13ad - lnbil1.pe13ad.oldVal)
	
	if lnbil1.isChanged("PE14AD") set lnbil1.pe14ab = lnbil1.pe14ab + (lnbil1.pe14ad - lnbil1.pe14ad.oldVal)

	if lnbil1.isChanged("PE15AD") set lnbil1.pe15ab = lnbil1.pe15ab + (lnbil1.pe15ad - lnbil1.pe15ad.oldVal)
	
	if lnbil1.isChanged("PE16AD") set lnbil1.pe16ab = lnbil1.pe16ab + (lnbil1.pe16ad - lnbil1.pe16ad.oldVal)

	if lnbil1.isChanged("PE17AD") set lnbil1.pe17ab = lnbil1.pe17ab + (lnbil1.pe17ad - lnbil1.pe17ad.oldVal)

	if lnbil1.isChanged("PE18AD") set lnbil1.pe18ab = lnbil1.pe18ab + (lnbil1.pe18ad - lnbil1.pe18ad.oldVal)

	if lnbil1.isChanged("PE19AD") set lnbil1.pe19ab = lnbil1.pe19ab + (lnbil1.pe19ad - lnbil1.pe19ad.oldVal)
	
	if lnbil1.isChanged("PE20AD") set lnbil1.pe20ab = lnbil1.pe20ab + (lnbil1.pe20ad - lnbil1.pe20ad.oldVal)

	quit 

	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNBIL1 lnbil1

	set X = lnbil1.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = lnbil1.schseq if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,1,,,,,8) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.SCHSEQ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.bp1.length()>150 set vRM = $$^MSG(1076,150) do vdderr("BP1", vRM) quit
	set X = lnbil1.casd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CASD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.cbcd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CBCD", vRM) quit
	set X = lnbil1.cdib if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CDIB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.cdpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDPD", vRM) quit
	set X = lnbil1.cirn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CIRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.coia if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.COIA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.copb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.COPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.cpib if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CPIB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.cpid if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CPID"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.csubamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CSUBAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.csubdue if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CSUBDUE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.ctab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.CTAB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.intadj if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.INTADJ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lnbil1.MANCRE) set vRM=$$^MSG(742,"L") do vdderr("MANCRE", vRM) quit
	if '("01"[lnbil1.MANMOD) set vRM=$$^MSG(742,"L") do vdderr("MANMOD", vRM) quit
	if '("01"[lnbil1.MANTFL) set vRM=$$^MSG(742,"L") do vdderr("MANTFL", vRM) quit
	if lnbil1.pe01.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE01", vRM) quit
	set X = lnbil1.pe01ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE01AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe01ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE01AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe01da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE01DA", vRM) quit
	if lnbil1.pe01ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE01EA", vRM) quit
	set X = lnbil1.pe01la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE01LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe02.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE02", vRM) quit
	set X = lnbil1.pe02ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE02AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe02ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE02AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe02da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE02DA", vRM) quit
	if lnbil1.pe02ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE02EA", vRM) quit
	set X = lnbil1.pe02la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE02LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe03.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE03", vRM) quit
	set X = lnbil1.pe03ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE03AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe03ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE03AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe03da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE03DA", vRM) quit
	if lnbil1.pe03ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE03EA", vRM) quit
	set X = lnbil1.pe03la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE03LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe04.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE04", vRM) quit
	set X = lnbil1.pe04ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE04AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe04ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE04AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe04da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE04DA", vRM) quit
	if lnbil1.pe04ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE04EA", vRM) quit
	set X = lnbil1.pe04la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE04LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe05.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE05", vRM) quit
	set X = lnbil1.pe05ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE05AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe05ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE05AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe05da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE05DA", vRM) quit
	if lnbil1.pe05ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE05EA", vRM) quit
	set X = lnbil1.pe05la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE05LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe06.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE06", vRM) quit
	set X = lnbil1.pe06ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE06AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe06ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE06AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe06da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE06DA", vRM) quit
	if lnbil1.pe06ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE06EA", vRM) quit
	set X = lnbil1.pe06la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE06LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe07.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE07", vRM) quit
	set X = lnbil1.pe07ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE07AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe07ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE07AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe07da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE07DA", vRM) quit
	if lnbil1.pe07ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE07EA", vRM) quit
	set X = lnbil1.pe07la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE07LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe08.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE08", vRM) quit
	set X = lnbil1.pe08ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE08AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe08ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE08AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe08da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE08DA", vRM) quit
	if lnbil1.pe08ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE08EA", vRM) quit
	set X = lnbil1.pe08la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE08LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe09.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE09", vRM) quit
	set X = lnbil1.pe09ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE09AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe09ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE09AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe09da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE09DA", vRM) quit
	if lnbil1.pe09ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE09EA", vRM) quit
	set X = lnbil1.pe09la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE09LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe10.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE10", vRM) quit
	set X = lnbil1.pe10ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE10AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe10ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE10AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe10da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE10DA", vRM) quit
	if lnbil1.pe10ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE10EA", vRM) quit
	set X = lnbil1.pe10la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE10LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe11.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE11", vRM) quit
	set X = lnbil1.pe11ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE11AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe11ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE11AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe11da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE11DA", vRM) quit
	if lnbil1.pe11ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE11EA", vRM) quit
	set X = lnbil1.pe11la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE11LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe12.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE12", vRM) quit
	set X = lnbil1.pe12ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE12AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe12ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE12AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe12da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE12DA", vRM) quit
	if lnbil1.pe12ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE12EA", vRM) quit
	set X = lnbil1.pe12la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE12LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe13.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE13", vRM) quit
	set X = lnbil1.pe13ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE13AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe13ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE13AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe13da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE13DA", vRM) quit
	if lnbil1.pe13ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE13EA", vRM) quit
	set X = lnbil1.pe13la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE13LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe14.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE14", vRM) quit
	set X = lnbil1.pe14ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE14AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe14ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE14AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe14da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE14DA", vRM) quit
	if lnbil1.pe14ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE14EA", vRM) quit
	set X = lnbil1.pe14la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE14LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe15.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE15", vRM) quit
	set X = lnbil1.pe15ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE15AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe15ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE15AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe15da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE15DA", vRM) quit
	if lnbil1.pe15ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE15EA", vRM) quit
	set X = lnbil1.pe15la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE15LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe16.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE16", vRM) quit
	set X = lnbil1.pe16ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE16AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe16ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE16AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe16da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE16DA", vRM) quit
	if lnbil1.pe16ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE16EA", vRM) quit
	set X = lnbil1.pe16la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE16LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe17.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE17", vRM) quit
	set X = lnbil1.pe17ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE17AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe17ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE17AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe17da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE17DA", vRM) quit
	if lnbil1.pe17ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE17EA", vRM) quit
	set X = lnbil1.pe17la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE17LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe18.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE18", vRM) quit
	set X = lnbil1.pe18ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE18AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe18ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE18AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe18da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE18DA", vRM) quit
	if lnbil1.pe18ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE18EA", vRM) quit
	set X = lnbil1.pe18la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE18LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe19.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE19", vRM) quit
	set X = lnbil1.pe19ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE19AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe19ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE19AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe19da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE19DA", vRM) quit
	if lnbil1.pe19ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE19EA", vRM) quit
	set X = lnbil1.pe19la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE19LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnbil1.pe20.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PE20", vRM) quit
	set X = lnbil1.pe20ab if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE20AB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe20ad if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE20AD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnbil1.pe20da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE20DA", vRM) quit
	if lnbil1.pe20ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE20EA", vRM) quit
	set X = lnbil1.pe20la if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL1.PE20LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNBIL1","MSG",979,"LNBIL1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNBIL1 lnbil1)	//LNBIL1 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnbil1)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_D
			}
		else  if TSRC="O" do {
			do vj1(.lnbil1)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lnbil1)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I
			}
		else  if TSRC="O" do {
			do vj2(.lnbil1)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.lnbil1)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj3(.lnbil1)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNBIL1 lnbil1)	// HIST_D  Table HIST  Update History for LNBIL1 Delete

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnbil1.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL^PROCLNBL("delete",lnbil1.cid,lnbil1.schseq,"LNBIL1",,,,,,.lnbil1)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNBIL1 lnbil1)	// HIST_I  Table HIST  Update History for LNBIL1 Inserts

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnbil1.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL^PROCLNBL("insert",lnbil1.cid,lnbil1.schseq,"LNBIL1",,,,,,.lnbil1)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNBIL1 lnbil1)	// HIST_U  Table HIST  Update History for LNBIL1 Updates

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",PE01AB,PE02AB,PE03AB,PE04AB,PE05AB,PE06AB,PE07AB,PE08AB,PE09AB,PE10AB,PE11AB,PE12AB,PE13AB,PE14AB,PE15AB,PE16AB,PE17AB,PE18AB,PE19AB,PE20AB,CSUBAMT,"'[(","_vdi_",") do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=lnbil1.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$JRNL^PROCLNBL("update",lnbil1.cid,lnbil1.schseq,"LNBIL1",vdi,vold,vnew,,,.lnbil1)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNBIL1 lnbil1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SCHSEQ").exists() set vux("SCHSEQ") = vx("SCHSEQ")
	do vkey(1) set voldkey = lnbil1.cid_","_lnbil1.schseq  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnbil1.cid_","_lnbil1.schseq  // Copy new keys into object
	type RecordLNBIL1 vnewrec = lnbil1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNBIL1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNBIL1 lnbil1

	if vux("CID").exists() set lnbil1.cid = vux("CID").piece("|",i)
	if vux("SCHSEQ").exists() set lnbil1.schseq = vux("SCHSEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordLNBIL1 lnbil1
	type public String vpar

	do Db.delete("LNBIL5","CID=:lnbil1.cid AND SCHSEQ=:lnbil1.schseq",vpar) // Cascade delete

	quit
