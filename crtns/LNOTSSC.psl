public LNOTSSC
  /*
ORIG: BAILDONC - 10/23/2000
DESC: Schedule SC/PD/SB Reporting for OTC

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------

	04/18/07 - RussellDS - CR26387
		   Eliminated use of UHFETCH.

	07/31/06 - KELLYP - CR 22048
		   Modified FRMDT and SCHCCR sections to eliminate
		   PRECEDENCE warnings.

	08/23/05 - SWARNALATHAP - CR16708
		   .    Removed index table reference (LNCOLC) and changes 
		        made to refer the base table LNCOL in section LD 
		        and CCR460.
		   .    Corrected the syntax of Db.select in LD section by 
		   	removing the word "ORDER BY" during the fetch of the 
		   	record in LNLS6 table.   
		   Retrofitted the following changes made in profile 01
		   for the projects "OTS TFR March 2004 Reporting" and 
		   "OTS Schedule PD Enhancement"
		   .	Changed sections PROCESS,ACCT,CTGRY,SCHCCR,ESC 
		        and added section DEPOSIT to incorporate the 
		        modifications for Schedule SC,PD,CC and 
		   	CCR which includes the addition of new cells 
		   	SC251,SC254,SC255,SC710,SC712,PD121,PD221,
		   	PD321,PD123,PD223,PD323,PD124,PD224,PD324,CC412 
		   	and CC425 for the project "OTS TFR March 2004 
		   	Reporting".
		   .	Modified code in the CTGRY section, to include 
		   	processing for the new cells PD180,PD280 and 
		   	PD380 for the project "OTS Schedule PD 
		   	Enhancement".
  	
	01/12/04 - CARROLLJ - CR7901
		   Correct compile errors returned from new compiler.
 */

	do START
	
	quit

START

	do INIT
	do PROCESS
	quit


INIT	// Initialize extract

	/*
	Kill any table entries for today's system date prior to generating 
	the extract.
	*/

	do Db.fastDelete("LNOTSSC1","SCDT=:%SystemDate")
	do Db.fastDelete("LNOTSSC","SCDT=:%SystemDate")
	quit


PROCESS	// Generate the extracts


	new AR,cid,CID,cnt,LDAR,ldcnt,sb100f,rs,SB,sbln,scln,sb110f

	set sb100f=0
	set sb110f=1

	type ResultSet rs=Db.select("CID,CLS","ACN")
	if rs.isEmpty() quit
	while rs.next() do {
		set CID=rs.getCol(1)
		set CLS=rs.getCol(2)
		if CLS="L" do ACCT
		if CLS="D" do DEPOSIT
		}

	 
        /*
        Create schedule LD extracts from the data stored in LDAR.  This
        corresponds to data found in table LNOTSSC.  The account level data
        extract has already been created by section LD.
        */
 
        set scln=""
        for  set scln=$O(LDAR(scln)) quit:scln=""  do {
                new lnotssc
                type RecordLNOTSSC lnotssc=Db.getRecord("LNOTSSC","SCDT=:%SystemDate,SCLN=:scln",1)
                set lnotssc.tot=$P(LDAR(scln),"|",1)
                set lnotssc.numcnt=$P(LDAR(scln),"|",2)
                do lnotssc.save()
                }

	/*
	Create schedules SC and PD extracts from the data stored in AR.  This
	corresponds to data found in table LNOTSSC.  The account level data
	extracts for these two schedules have already been created by
	section SC of this procedure.
	*/

	set scln=""
	for  set scln=$O(AR(scln)) quit:scln=""  do {
		new lnotssc
		type RecordLNOTSSC lnotssc=Db.getRecord("LNOTSSC","SCDT=:%SystemDate,SCLN=:scln",1)
		set lnotssc.tot=$P(AR(scln),"|",1)
		set lnotssc.numcnt=$P(AR(scln),"|",2)
		do lnotssc.save()
		}

	/*
	Create the SB schedule extract from data accumulated in the SB array.
	First determine whether to report SB200 and SB210 or SB300-SB650 based
	upon the SB100 and SB110 criteria.  If the answer to SB100 is yes, then
	sb100f flag will be set to 1 and there is at least one account whose
	original amount is less than $500,000.  If the answer to SB110 is yes, 
	then the sb110f flag will be set to 1 and we have found that all
	accounts have an original amount of $100,000 or less.  If sb110f is 0,
	then not all accounts have an original balance amount of 100,000 or 
	less.

	To report SB200 and SB210 both sb100f and sb110f flags must be set. 
	Otherwise SB300-SB650 will be reported instead.
	*/

	if sb100f  do {
		kill SB("SB200")
		kill SB("SB210")
		}

	else  do {
		if sb110f do {
			// Killing off the 300 through 650 entries
			set sbln="SB210"
			for  set sbln=$O(SB(sbln)) quit:sbln=""  kill SB(sbln)
			}
		else  do {
			// Killing off the 451 through 650 entries
			kill SB("SB200")
			kill SB("SB210")
			set sbln="SB450"
			for  set sbln=$O(SB(sbln)) quit:sbln=""  kill SB(sbln)
			}
		}

        set SB("SB100")=0_"|"_sb100f
        set SB("SB110")=0_"|"_sb110f

	set sbln=""
	for  set sbln=$O(SB(sbln)) quit:sbln=""  do {
                new lnotssc
                type RecordLNOTSSC lnotssc=Db.getRecord("LNOTSSC","SCDT=:%SystemDate,SCLN=:sbln",1)
                set lnotssc.tot=$P(SB(sbln),"|",1)
                set lnotssc.numcnt=$P(SB(sbln),"|",2)
                do lnotssc.save()
		set cid=""
		for  set cid=$O(SB(sbln,cid)) quit:cid=""  do {
			new lnotssc1
			type RecordLNOTSSC1 lnotssc1=Class.new("RecordLNOTSSC1")
			set lnotssc1.scdt=%SystemDate
			set lnotssc1.scln=sbln
			set lnotssc1.cid=cid
			set lnotssc1.amt=SB(sbln,cid)
			do lnotssc1.save()
			}
                }

	do ^LNOTSSC1
	
	quit


ACCT	// Evaluate each account


	new acr,amt,aruf,avlbal,bal,balcmp,bbal,coa,colcd,coll,coltyp,colval
	new crlmt,dlco,dp2,dtc,dist1nd,dtnt,frmdt,grp,intfre,ladt,lfpc
	new lfsc,ltv,ltvc,mdt,nai,ncoa,odt,pdsld,pflg,pldgamt,pldgpct
	new pldgctot,ppflg,rec,stat,subcd,subt,totcol,trb,udbal
	new psrlnbal,ssrlnbal

	if 'Db.isDefined("ACN","CID") quit
	type RecordLN ln=Db.getRecord("LN","CID")

	set stat=ln.stat
	set dtc=ln.dtc
	set frmdt=$$FRMDT(%SystemDate)
	
	// do not include accts closed prior to the start of the quarter
	if stat=4,dtc>0,dtc<frmdt Q
	
	set aruf=ln.aruf
	set grp=ln.grp
	set bal=ln.bal
	set balcmp=ln.balcmp
	set crlmt=ln.crlmt
	set udbal=ln.udbal
	set coa=ln.coa
	set rec=ln.rec
	set nai=ln.nai
	set dist1nd=ln.dist1nd
	set lfpc=ln.lfpc
	set lfsc=ln.lfsc
	set mdt=ln.mdt
	set colcd=ln.colcd

	//  Schedule CCR information
	set totcol=ln.totcol			// Total Collateral Value
	set ltvc=ln.ltvc			// Current Loan to value ratio
	set subt=ln.subt			// Account sub-type
	set subcd=ln.subcd			// Lien Subordination code
	set coll=ln.coll			// Collateral Record Number
	set dp2=ln.dp2				// Times overdue - prior year
	set intfre=ln.intfre			// Interest Change Frequency
	set odt=ln.odt				// Original Disbursement Date
	set dtnt=ln.dtnt			// Date of Note
	
	// Scheduld LD information
	set acr=ln.acr				// Accrued Interest
	set avlbal=ln.avlbal			// Available Balance
	set dlco=ln.dlco			// Date of Last Charge-off
	set ladt=ln.ladt			// Date of Last Loan Advance
	set ncoa=ln.ncoa			// Net Charge-off Balance
	set pdsld=ln.pdsld			// Amount of Loan Sold
	set pflg=ln.pflg			// Participation Sold Flag
	set ppflg=ln.ppflg			// Participation Purchase Flag
	set trb=ln.trb				// Transaction to Reduce Balance
	set psrlnbal=ln.psrlnbal		// Primary Senior Loan Balance
	set ssrlnbal=ln.ssrlnbal		// Secondary Senior Loan Balance
	
	if colcd="" set coltyp=0			// unsecured
	else  do {
		type ResultSet rscolcd = Db.select("TYPE","UTBLCOLCD","GRP=:grp AND KEY=:colcd")
	        if rscolcd.next() set coltyp=rscolcd.getCol("TYPE")
	}

	set colval=0,pldgamt=0,pldgpct=0
 	if coll'="" do {
		type RecordLNCOL lncol
		if Db.isDefined("LNCOL","CID,coll") do {
 			set lncol=Db.getRecord("LNCOL","CID,coll")
			set pldgamt=lncol.pldgamt
			if bal'=0 set pldgpct=$$^SCARND(pldgamt/bal,,,,4)*100
			else  set pldgpct=0
			}
		}
	
	set amt=$$AMT()
	do CTGRY
	do SCHCCR
	do LD
	quit


AMT()
	set amt=balcmp-coa+rec
	quit amt


FRMDT(TD)	// Calculate the beginning of the quarter


	set dt=$$DAT^%ZM(TD,"MM/DD/YEAR")

	/* 
	if today is the first day of the new quarter set it to the last day
	of the old quarter for conversion
	*/

	if "01/01,04/01,07/01,10/01"[$P(dt,"/",1,2) do {
		new td
		set td=TD-1
		set dt=$$DAT^%ZM(td,"MM/DD/YEAR")
		}

	set mnth=($P(dt,"/",1)-1)\3*3+1
	set mnth=$E("00",1,2-$L(mnth))_mnth
	set %DS=mnth_"/01/"_$P(dt,"/",3)
	set %JD=$$^SCAJD(%DS)
	quit %JD

CTGRY	// Identify the proper cell in which to report data for this account


	new match
	set match=0
	if lfpc="RE" do {  quit:match
		if lfsc="D1-4",coltyp=10 do {  quit
			do SC("SC230",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD115","PD215","PD315",amt)
			}
		if lfsc="DMULT",coltyp=10 do {  quit
			do SC("SC235",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD115","PD215","PD315",amt)
			}
		if lfsc="DNON",coltyp=10 do {  quit
			do SC("SC240",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD115","PD215","PD315",amt)
			}
		if lfsc="MULT",coltyp=10 do {  quit
			do SC("SC256",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD125","PD225","PD325",amt)
			}
		if ((lfsc="NON")!(lfsc="FRM")),coltyp=10 do {  quit
			new sb100,sb110
			do SC("SC260",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD135","PD235","PD335",amt)
			if lfsc="FRM" do {  quit
				do SB("SB500","SB520","SB540",amt)
				do sb("SB200",amt)
				if 'sb100f do { 
					set sb100=$$SB100(CID)
					if sb100 set sb100f=1
					}
				if sb110f do {
					set sb110=$$SB110(CID)
					if 'sb110 set sb110f=0
					}
				}
			if sb110f do {
				set sb110=$$SB110(CID)
				if 'sb110 set sb110f=0
				}
			do SB("SB300","SB320","SB340",amt)
			// cell SB200 holds the num of lns rprted on SC260
			do sb("SB200",amt)
			}
		if lfsc="DEV",coltyp=10 do {  quit
			do SC("SC265",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD138","PD238","PD338",amt)
			}
		if lfsc="O1-4",mdt>0,((coltyp'=10)!(coltyp=10&(pldgpct<50))) do {  quit
			do SC("SC316",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			do PD("PD163","PD263","PD363",amt)
			}
		if lfsc="R1-4",mdt="",coltyp=10,pldgpct<50 do {  quit
			do SC("SC340",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			}
		if (lfsc="R1-4"),(coltyp=10) do {  quit
			do SC("CC412",udbal)
			do SC("SC251",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD121","PD221","PD321",amt)
			}
		if (lfsc="O1-4"),(coltyp=10),((subcd="")!(subcd<2)) do {  quit
			do SC("SC254",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD123","PD223","PD323",amt)
			}
		if (lfsc="O1-4"),(coltyp=10),(subcd>1) do {  quit
			do SC("SC255",amt)
			do SC("SC26",amt)
			do ESC
			do PD("PD124","PD224","PD324",amt)
			}
		}

	if (lfpc="COM")!(lfpc="AG") do {  quit:match
		if lfpc="COM",mdt="" do SC("CC420",udbal) 
		if coltyp,coltyp'=10 do {  quit
			new sb100,sb110
			do SC("SC300",amt)
			do SC("SC32",amt)
			do SC("SC31",amt)
			do PD("PD140","PD240","PD340",amt)
			if lfpc="AG" do {  quit
				do SB("SB600","SB620","SB640",amt)
				do sb("SB210",amt)
				if 'sb100f do { 
					set sb100=$$SB100(CID)
					if sb100 set sb100f=1
					}
				if sb110f do {
					set sb110=$$SB110(CID)
					if 'sb110 set sb110f=0
					}
				}
			if sb110f do {
				set sb110=$$SB110(CID)
				if 'sb110 set sb110f=0
				}
			do SB("SB400","SB420","SB440",amt)
			do sb("SB210",amt)
			}
		if 'coltyp do {  quit
			new sb100,sb110
			do SC("SC303",amt)
			do SC("SC32",amt)
			do SC("SC31",amt)
			do PD("PD140","PD240","PD340",amt)
			if lfpc="AG" do {  quit
				do SB("SB600","SB620","SB640",amt)
				do sb("SB210",amt)
				if 'sb100f do { 
					set sb100=$$SB100(CID)
					if sb100 set sb100f=1
					}
				if sb110f do {
					set sb110=$$SB110(CID)
					if 'sb110 set sb110f=0
					}
				}
			if sb110f do {
				set sb110=$$SB110(CID)
				if 'sb110 set sb110f=0
				}
			do SB("SB400","SB420","SB440",amt)
			do sb("SB210",amt)
			}
		}

	if lfpc="IND" do {  quit:match
		if (coltyp=50)!(coltyp=70) do {  quit
			do SC("SC310",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			do PD("PD161","PD261","PD361",amt)
			}
		if lfsc="EDU",mdt>0 do {  quit
			do SC("SC320",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			do PD("PD165","PD265","PD365",amt)
			}
		if coltyp=30 do {  quit
			do SC("SC323",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			do PD("PD167","PD267","PD367",amt)
			}
		if coltyp=90 do {  quit
			do SC("SC326",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			do PD("PD169","PD269","PD369",amt)
			}
		if lfsc="OTH",mdt>0 do {  quit
			do SC("CC425",udbal)
			do SC("SC330",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			do PD("PD180","PD280","PD380",amt)
			}
		if lfsc="CRDT",mdt="",coltyp'=10 do {  quit
			do SC("SC345",amt)
			do SC("SC35",amt)
			do SC("SC31",amt)
			}
		}

	if lfpc="LOC",lfsc="OTH" do SC("CC430",udbal)
	if lfpc="LOC",((lfsc="PSTBY")!(lfsc="FSTBY")) do SC("CC435",udbal)

	quit

SCHCCR

	new match
	set match=0

	// CCR370:

	if lfpc="RE",((lfsc="DEV")!(lfsc="DNON")),(ltvc>80) do {
		new amt
		set amt=(totcol*80/100)-bal
		do SC("CCR370",amt)
		}

	// CCR450:

	new fvsubt	
	set fvsubt=""
	if subt'="" do {
		type ResultSet rssubt1 = Db.select("FHAVA","UTBLSUBT","GRP=:grp AND KEY=:subt") 
		if rssubt1.next() set fvsubt=rssubt1.getCol("FHAVA")
	}
	if (fvsubt="FHA"!(fvsubt="VA"))!(colcd'=""&(coltyp=50!(coltyp=40))) do SC("CCR450",bal)


	// CCR 460:

	do CCR460


	// CCR465:

	if lfpc="RE",(lfsc="MULT"),((subcd=0)!(subcd=1)!(subcd="")) do {
		set trm=(mdt-odt)/365
		set trm1=(mdt-dtnt)/365
		if trm<30,(trm1>7),(dp2=0),(dist1nd>(%SystemDate-89)) do {
			if ((intfre'=""&(ltvc<75))!(intfre=""&(ltvc<80))) do SC("CCR465",bal)
			}
		}

	quit

LD	// Schedule LD - High loan-to-value loans for 1-4 unit residential
	
	// must be residential
	if lfpc="" quit
	if lfpc'="RE" quit

	// must be 1-4 units
	if lfsc="" quit
	if (lfsc'="O1-4")&(lfsc'="O1-4JR")&(lfsc'="R1-4") quit
	 
        // FHA or VA flag
        new fvsubt,fhava
        set (fvsubt,fhava)=""
        if subt'="" do {
        	type ResultSet rssubt2 = Db.select("FHAVA","UTBLSUBT","GRP=:grp AND KEY=:subt") 
        	if rssubt2.next() set fvsubt=rssubt2.getCol("FHAVA")
        }
        if (fvsubt="FHA")!(fvsubt="VA") set fhava=1

	// Private Mortgage Insurance
	set pmi=$$getpmi()

	// If the loan has either PMI or FHA or VA insurance, do not report
	if pmi!fhava quit

	new PRIMCID,bbal,linkbal,lncoll,ltv,ltvcell,ltvcol,pldgtot,priceflg
	new pricetot,repbal,totbal
	set (linkbal,ltv,ltvcol,repbal,totbal)=0

	// if there's no collateral, ltv is zero (see routine LNCDI)
	if 'coll,'totcol quit
 
	if coll do {
		
		set (linkbal,pldgtot,pricetot,primtot)=0
		set priceflg=1
		set PRIMCID=CID

		// Get each collateral number for this loan
		type ResultSet rs=Db.select("COLL","LNCOL","CID=:CID")
		if rs.isEmpty() quit
		while rs.next() do {
			set lncoll=rs.getCol(1)
	
		
			// Collateral record
			new COLL,col,price,pldgctot
			set COLL=lncoll
			type RecordCOL col
			if Db.isDefined("COL","COLL") do {
				set col=Db.getRecord("COL","COLL")
				set price=col.price
				set pldgctot=col.pldgctot
				
				// Price only valid if it exists for each record
				if price>0 set pricetot=pricetot+price
				else  set priceflg=""
				
				// add into pldgtot
				if pldgctot set pldgtot=pldgtot+pldgctot
				

				// Get linked loans
				new ln2,CID
			
				type ResultSet rs2=Db.select("CID","LNCOL","COLL=:COLL")
				if rs2.isEmpty() quit
				while rs2.next() do {
					set CID=rs2.getCol(1)
					type RecordLN ln2=Db.getRecord("LN","CID")
					
					if ln2.cid=PRIMCID quit

					set linkbal=linkbal+ln2.bal+ln2.avlbal
					set repbal=repbal+ln2.bal
					}

				}
			
			}
	
		// calculate total balance to use		
		set totbal=bal+avlbal+psrlnbal+ssrlnbal	// primary loan
		if linkbal set totbal=totbal+linkbal

		/*
		Calculate collateral amount to divide by, ltvcol
		No linked loans, all had price and it's less than total collateral
		*/
		if 'linkbal,priceflg,(pricetot<totcol) set ltvcol=pricetot

		// no linked loans, sales price invalid
		if 'linkbal,'priceflg set ltvcol=totcol

		// add in pledged amounts from linked loans
		if linkbal set ltvcol=ltvcol+pldgtot

		// calculate loan to value ratio
		if 'ltvcol s ltv=0
		else  set ltv=totbal/ltvcol*100
		
		/*
		Balance to report
		If no linked loans, use ledger balance + accrued interest
		If linked loans, use combined ledger balances (repbal)
		*/
		if 'linkbal set repbal=bal+acr
		if linkbal set repbal=bal+repbal

		}
	
	set ltv=$$^SCARND(ltv,0,"","",0)
	set repbal=$$^SCARND(repbal,0,"","",2)

	// Not reporting loan to values under 90
	quit:ltv<90

	// ltv 100+
	if ltv>99 set ltvcell=2

	// ltv from 90 to 99
	else  set ltvcell=1	

	// report balances at quarter end
	if ltvcell=1 do LDF("LD110",repbal)
	if ltvcell=2 do LDF("LD120",repbal)

	// past due and nonaccrual balances 30-89 days
	if 'nai,(dist1nd<(%SystemDate-29)),(dist1nd>(%SystemDate-90)) do {
		if ltvcell=1 do LDF("LD210",repbal)
		if ltvcell=2 do LDF("LD220",repbal)
		}
	
	// past due and nonaccrual balances, 90 days +
	if 'nai,(dist1nd<(%SystemDate-89)) do {
		if ltvcell=1 do LDF("LD230",repbal)
		if ltvcell=2 do LDF("LD240",repbal)
		}

	// nonaccrual
	if nai do {
		if ltvcell=1 do LDF("LD250",repbal)
		if ltvcell=2 do LDF("LD260",repbal)
		}

	// net charge-offs and recoveries
	if ncoa,(dlco'<frmdt) do {
	
		type Boolean isDone
		type Number coamt, totcoa

		set totcoa = 0
		
		type ResultSet rs = Db.select("TJD,TAMT", "HIST", "CID=:CID AND ITC1=1 AND ITC6<>1 AND ITC12<>1", "TSEQ DESC")
		
		set isDone = false
		while rs.next() do { quit:isDone
			
			// Charge offs
			set coamt = rs.getCol("TAMT").piece("#", 10) 
			quit:'coamt
			
			if (rs.getCol("TJD") '< frmdt) set totcoa = totcoa + coamt
			else  set isDone = true
		}
		
		if totcoa=0 quit

		if ltvcell=1 do LDF("LD310",totcoa)
                if ltvcell=2 do LDF("LD320",totcoa)

	}
	
	// If loan purchased in current quarter, get purchased balance
	set bbal=0
	if ppflg do {
                if 'Db.isDefined("LNPP6","CID") quit
                type RecordLNPP6 lnpp6=Db.getRecord("LNPP6","CID")
                if lnpp6.sdat<frmdt quit
		if lnpp6.sdat>%SystemDate quit
                set bbal=lnpp6.bbal
                }
	
	// purchases
	if bbal do {
		if ltvcell=1 do LDF("LD410",bbal)
		if ltvcell=2 do LDF("LD420",bbal)
		}	

	// originated in current quarter
	if ladt'<frmdt do DISB
		

	// Sales - in current quarter, report Amount of Loan Sold
	if pflg do {
		new now,SDAT
                set now=0
                type ResultSet rs1=Db.select("SDAT","LNLS6","CID=:CID","PSEQ DESC")
                if rs1.isEmpty() quit
                while rs1.next() do { quit:now
                	set SDAT=rs1.getCol(1)
                	if SDAT>frmdt set now=1 quit
                        }

		if 'now quit

		if ltvcell=1 do LDF("LD450",pdsld)
		if ltvcell=2 do LDF("LD460",pdsld)
		}

	quit	

SC(scln,amt)

	new lnotssc1
	type RecordLNOTSSC1 lnotssc1=Class.new("RecordLNOTSSC1")
	set cnt(scln)=$G(cnt(scln))+1
	set AR(scln)=$G(AR(scln))+amt_"|"_cnt(scln)

	set lnotssc1.scdt=%SystemDate
	set lnotssc1.scln=scln
	set lnotssc1.cid=CID
	set lnotssc1.amt=amt
	do lnotssc1.save()

	set match=1
	quit

ESC

	new ESCCID,ind,remdt,rs,tamt,total
	
	set total=0

	set ESCCID=$$ECID^LNU(CID,"ESC1")
	if 'ESCCID quit

	type ResultSet rs=Db.select("REMDT,IND,TAMT","ERB","CID=:ESCCID")
	if rs.isEmpty() quit
	while rs.next() do {
		set remdt=rs.getCol(1)
		if remdt<frmdt quit
		set ind=rs.getCol(2)
		set tamt=rs.getCol(3)
		set total=$G(total)+tamt
		}
	do SC("SC275",total)
	do SC("SC26",total)
	quit


PD(pd1,pd2,pd3,amt)

	
	if nai do {  quit
		do SC(pd3,amt)
		do SC("PD30",amt)
		}
	
	if dist1nd<(%SystemDate-29),(dist1nd>(%SystemDate-90)) do {  quit
		do SC(pd1,amt)
		do SC("PD10",amt)
		}
	
	if dist1nd<(%SystemDate-89) do {  quit
		do SC(pd2,amt)
		do SC("PD20",amt)
		}
	quit


SB(sb1,sb2,sb3,amt)	// Identify the SB category
 
 
        if amt'>100000 do sb(sb1,amt) quit
 
        if amt'>250000 do sb(sb2,amt) quit
 
        if amt'>1000000 do sb(sb3,amt) quit

	quit

sb(sbln,amt)	// update the cell-level and account level SB arrays


        set cnt(sbln)=$G(cnt(sbln))+1
        set SB(sbln)=$G(SB(sbln))+amt_"|"_cnt(sbln)
 	set SB(sbln,CID)=$G(SB(sbln,CID))+amt
        quit



SB100(cid)
	// if this loan would make the answer to question sb100 no return 0
	// if this loan would make the answer to question sb100 yes return 1,
	// and then we have found an account (i.e. any account) whose original
	// amount is less that $500,000.

	new origamt
	set origamt=$$ORIG()
	if origamt'>500000 quit 1
	quit 0


SB110(cid)
	// if this loan would make the answer to question sb110 yes return 1
	// if this loan would make the answer to question sb110 no return 0,
	// and we will have found the exception account such that not all 
	// accounts have an original amount<$100,000.

	new origamt
	set origamt=$$ORIG()
	if origamt>100000 quit 0
	quit 1

ORIG()	// Original Amount as defined by Schedule SB

	if balcmp>crlmt quit balcmp
	quit crlmt


CCR460

	new COMBLTV,CVAL,EXIST,FIRST,I,PASTDUE,PRIMCOLL,PRINT,SECBAL,SECCID,XCID
 
	if lfpc'="RE" quit
	if (lfsc'="O1-4")&(lfsc'="D1-4") quit
	if dist1nd<(%SystemDate-90) quit
	if subcd>1 quit
 	
	set pmi=$$getpmi()

	// if loan doesn't have a collateral, determine if it's a first lien
	if (coll="") do { quit 
		if (bal'=0),((ltvc'>90)!((ltvc>90)&pmi)) do SC("CCR460",bal)
		} 
 
	set PRIMCOLL=coll
	set PASTDUE=0
	set EXIST=0
	set FIRST=0
        set PRINT=0 

	/*
	Determine if loan's collateral is linked to additional loans. If it 
	does (junior liens), check if loans meet the selection criteria, if it
	doesn't, check if it satisfy first lien criteria.
	*/
	
	set SECBAL=0
	set I=1
	type ResultSet rs=Db.select("CID","LNCOL","COLL=:PRIMCOLL")
	if rs.isEmpty() quit
	while rs.next() do { quit:PASTDUE

		set XCID=rs.getCol(1)
		if XCID=CID set FIRST=1 quit  // do not process first lien

		type RecordLN ln2=Db.getRecord("LN","XCID")
		if ln2.dist1nd<(%SystemDate-90) set PASTDUE=1 quit

		if ln2.subcd<2 quit
		set SECCID(I)=XCID 
		set SECBAL(I)=ln2.bal
		set SECBAL=SECBAL+SECBAL(I)
		set I=I+1
		set EXIST=1

		}
	
	// JMB - 51453
	// Determine a first lien. If it is - process it and quit
	if FIRST,('EXIST),((ltvc'>90)!((ltvc>90)&pmi)),'PASTDUE do SC("CCR460",bal) quit

	// Quit if one or more junior liens are more than 90 days past due
	if PASTDUE quit		
 
	if 'EXIST quit		// there are no junior liens
	
	// Get collateral record number. Define collateral amount

        type RecordCOL col1=Db.getRecord("COL","coll")
        set CVAL=col1.colval

	// Determine combined loan-to-value ratio

	if CVAL=0 set COMBLTV=0
	else  set COMBLTV=(bal+SECBAL)/CVAL*100

	if COMBLTV'>90 do {
		new CID
		set I=1
		while $G(SECCID(I)) do {
			set CID=SECCID(I)
			do SC("CCR460",SECBAL(I))
			set I=I+1
			}
		set PRINT=1
		}
	else  do {
		new PMI,PMIFLAG,SECPMI
		set I=1
		set PMIFLAG=0
		set PMI=$$getpmi()      // first lien pmi
                while $G(SECCID(I)) do {
			new CID
                        set CID=SECCID(I)
                        set SECPMI(I)=$$getpmi()	// junior liens pmi
			if SECPMI(I) set PMIFLAG=1
                        set I=I+1
                        }
		if 'PMIFLAG,'PMI quit	// neither Loan has pmi
		
		if (ltvc'>90)!((ltvc>90)&PMI) do {

			new RATIO,OVERFLAG,TMPAMT

			/*
			Determine the loan that causes combined ltv ratio to
			go over 90% 
			*/
		
			set OVERFLAG=0
			set TMPAMT=bal		
			set I=1
			if CVAL=0 quit
			while $G(SECCID(I)) do { quit:OVERFLAG
				set TMPAMT=TMPAMT+SECBAL(I)
				set RATIO=TMPAMT/CVAL*100
				if RATIO>90 set OVERFLAG=1 quit
				set I=I+1
				}
			/*
			Beginning from the returned sequence (I) check pmi
			of each junior lien. If at least one lien does not have
			pmi - do not include combined balance to CCR460 and quit
 			*/

			set OVERFLAG=0
			while $G(SECCID(I)) do { quit:OVERFLAG
				if SECPMI(I)=0 set OVERFLAG=1 quit
				set I=I+1
				}
			
			if OVERFLAG quit

			set I=1
	                while $G(SECCID(I)) do {
				new CID
	                        set CID=SECCID(I)
	                        do SC("CCR460",SECBAL(I))
	                        set I=I+1
	                        }

			set PRINT=1

			}
		}
	if PRINT do SC("CCR460",bal)
 
	quit
  
getpmi()
	
	new ESCCID
	set pmi=0

	type ResultSet rs=Db.select("CID","DEP","AREF=:CID")
	if rs.isEmpty() quit pmi
	while rs.next() quit:pmi  do {
		set ESCCID=rs.getCol(1)
	
		type ResultSet rs=Db.select("TYP","TRTYPE","CID=:ESCCID")
		if rs.isEmpty() quit
		while rs.next() quit:pmi  do {
			set TYP=rs.getCol(1)
			set TYP=$$TT^LNU(TYP)
			type RecordLNTRS lntrs=Db.getRecord("LNTRS","TYP")
			set pmi=lntrs.pmi
			if pmi="" set pmi=0
			}
		}
		
	quit pmi

LDF(scln,amt)	// update LD cell amounts
 
        new lnotssc1
        type RecordLNOTSSC1 lnotssc1=Class.new("RecordLNOTSSC1")
        set ldcnt(scln)=$G(ldcnt(scln))+1
        set LDAR(scln)=$G(LDAR(scln))+amt_"|"_ldcnt(scln)
 
        set lnotssc1.scdt=%SystemDate
        set lnotssc1.scln=scln
        set lnotssc1.cid=CID
        set lnotssc1.amt=amt
        do lnotssc1.save()
 
        quit	

DISB	// find disbursements this quarter

	type Number AMT = 0
	type String ETC
 	
	type ResultSet rs = Db.select("ETC,TAMT,ITC1", "HIST", "CID=:CID AND TJD>=:frmdt AND ETC IS NOT NULL", "TSEQ DESC")
	
	while rs.next() do {
		
		set ETC = rs.getCol("ETC")

                // transaction is considered a disbursement if PC4=1 and the
                // transaction is an "increase" transaction.
                if '$D(PCFL4(ETC)) do {
                	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
                	set PCFL4(ETC)=trn.pcfl4
               	}
               	
               	if PCFL4(ETC), (rs.getCol("ITC1") = 0) set AMT = AMT + rs.getCol("TAMT")
	}

	quit:'AMT
	
	if ltvcell=1 do LDF("LD430",AMT)
        if ltvcell=2 do LDF("LD440",AMT)
	        
	quit
	
DEPOSIT  //  Deposit balance

	type RecordDEP dep=Db.getRecord("DEP","CID")

	if dep.grp="ESC" do {
		do SC("SC712",dep.bal)
		do SC("SC71",dep.bal)
		}
	if (dep.grp="CD")!(dep.grp="DBD")!(dep.grp="DDA")!(dep.grp="SAV")!(dep.grp="SEC")!(dep.grp="WASH") do {
		do SC("SC710",dep.bal)
		do SC("SC71",dep.bal)
		}	
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60757^57833^Dan Russell^24648"	// Signature - LTD^TIME^USER^SIZE
