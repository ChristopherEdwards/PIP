BCHDPREC //Batch BCHDEPREC - Deposit Reclassification
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHDEPREC Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHDEPREC")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHDEPREC") quit
 do JOBMGR^BCHUTL(%FN,"BCHDEPREC",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHDEPREC")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(NPDT,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHDEPREC","*","",NPDT.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHDEPREC",NPDT.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHDEPREC",NPDT.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,NPDT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHDEPREC","*","",NPDT.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHDEPREC",NPDT.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,NPDT,CID) //
	do NCID(CID,NPDT)
	
	quit

public	RERUN(NPDT)	// Entry point from function to rerun reclassification

	type public Boolean RERUN = 1

	do ^BCHDPREC
	
	quit


public	NCID(CID,NPDT)	// Process Account

	/*
	ARGUMENTS:
       	. CID   Account Number  	/TYPE=N/REQ/MECH=VAL
	
       		Profile/IBS Account Number
	*/

	new ACN,DARCEXPD,DARCLS,DEPRECPF,DARCOVR,ER,SUSPECT
	
	set ER=0
	set DARCNPDT=NPDT
	set DEPRECPF=0

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	if dep.stat=4 quit

	set ACN=dep.acn
	set DARCLS=dep.darcls			// Delinquency Asset Risk Class
	set DARCOVR=dep.darcovr			// Delinquency Asset Class Override
	set SUSPECT=dep.suspect			// Suspect Indicator
	set DARCEXPD=dep.darcexpd		// Reclassifiction Expiration Date

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:dep.type")

	if 'prodctl.darcpo quit

	type RecordDAYENDDOVRCB dovrcb=Class.new("RecordDAYENDDOVRCB")
	set dovrcb.npdt=NPDT
	set dovrcb.acn=ACN
	set dovrcb.cid=CID

	do DPRC(.dep,.dovrcb)
	
	do FILE(.dep,.dovrcb)
	
	if ER do EXC
	
	quit


DPRC(RecordDEP dep,RecordDAYENDDOVRCB dovrcb)

	/* 
	Find Deposit Reclassification - Loop backwards through DEPREC (asset 
	class) array to see if the account meets the reclassification 
	parameters.
	*/
	
	type public Boolean DARCDFLG
	type public Date DARCEXPD
	type public Number CID, DARCOVR
	type public String DARCLS, DEPREC()

	type Date NEGEFD
	type String AC, DEPRECCL, TAG
	
	if DARCOVR do DEPRCAL(DARCOVR,.dep,.dovrcb) quit  // Use override class
	
	// If customer variable has an expiration period
	if dep.bal>0 do EXPPER(.dep,.dovrcb) quit
	
	// Account is overdrawn find asset reclassification
	set (AC,DEPRECCL)=""
	for  set AC = DEPREC(AC).order(-1) quit:AC.isNull()  quit:DEPRECCL  do {
		
		if DEPREC(AC).isNull() quit
		
		// Asset class is determined by a QUERY
		if DEPREC(AC)="Q" do {  quit
			
			set TAG="raclsD"_AC
			
			if $$@TAG^LNRCMP1(.dep) set DEPRECCL=AC
			}
			
		// Asset class is determined by number of days or months overdrawn
		else  if (DEPREC(AC)["D")!(DEPREC(AC)["M") do { quit
			
			set NEGEFD=$$NEGEFD^DEPDI(CID)
			
			if %SystemDate '< $$EXT^UMDT(DEPREC(AC),NEGEFD) set DEPRECCL=AC
			}
		}
	/*
	If the account is overdrawn and an expiration date exists on the
	account, this means the account was once current.  The account remains
	in the asset classification assigned to the account.  If the new
	class is less than the class assigned to the deposit while it is in
	the expiration period, the higher class (worst) will be assigned. If
	the delinquency determination flag is on in customer variables,
	the account remains in the asset classification assigned to the
	account when the class was first assiged.  However, an account can
	be moved to a more severe class.
	*/
 
	if ('DARCEXPD.isNull() ! DARCDFLG),(DEPRECCL < DARCLS) set DEPRECCL = DARCLS
	
	
	if 'DEPRECCL.isNull() do DEPRCAL(DEPRECCL,.dep,.dovrcb)
	
	do dep.setAuditFlag(1)
	
	if dep.darcls'=DEPRECCL set dep.darcls=DEPRECCL
	if 'dep.suspect.isNull() set dep.suspect=""
	if 'dep.darcexpd.isNull() set dep.darcexpd=""
	
	quit


DEPRCAL(String AC,
	RecordDEP dep,
	RecordDAYENDDOVRCB dovrcb) 

	// Calculate Deposit Reclassification
	
	type public Number CID
	type public String DEPRRIP(),DEPRNAIP(),DEPRNPBP(),DEPRUNAI(),DEPRUNPB()
	type public String NICAL(),NPCAL(),RICAL(),RM,UNPCAL(),UNICAL()

	type Number AMTD
	
	// Negative principal calculation
	if $D(NPCAL(AC)) do {
		set AMTD=""
	
		// Execute negative principal extrinsic or DATA-QWIK expression
		#ACCEPT pgm=spier;date=12/8/03
		xecute NPCAL(AC)
		quit:'AMTD
	
		// Multiply negative principal by negative principal percentage
		set AMTD=$$^SCARND(AMTD*DEPRNPBP(AC),,CID)
		set dovrcb.ovrnpb=AMTD
	
		/*
		If calculated amount is less than zero, then a negative
		amount is reclassified into Negative Principal Balance GL.
		*/
		// Negative amount cannot be reclassified into negative principal
 		// balance general ledger
		if AMTD<0 set RM=$$^MSG(3273) do EXC
		}
	
	// Unauthorized negative principal calculation
	if $D(UNPCAL(AC)) do {
		set AMTD=""
	
		// Execute unauthorized negative principal extrinsic or DATA-QWIK expression
		#ACCEPT pgm=spier;date=12/8/03
		xecute UNPCAL(AC)
		quit:'AMTD
	
		// Multiply unauthorized negative principal by unauthorized negative principal percentage
		set AMTD=$$^SCARND(AMTD*DEPRUNPB(AC),,CID)
		set dovrcb.unaunp=AMTD
	
		/* 
		If calculated amount is less than zero, then a negative amount
		is reclassified into Unauthorized Negative Principal Balance GL.
		*/
		// Negative amount cannot be reclassified into unauthorized
		// negative principal balance general ledger
		if AMTD<0 set RM=$$^MSG(3274) do EXC
		}

	// Negative Accrued Interest Calculation
	if $D(NICAL(AC)) do {
		set AMTD=""
	
		// Execute negative accrued interest extrinsic or DATA-QWIK expression
		#ACCEPT pgm=spier;date=12/8/03
		xecute NICAL(AC)
		quit:'AMTD
       
		// Multiply negative accrued interest by negative accrued interest percentage
		set AMTD=$$^SCARND(AMTD*DEPRNAIP(AC),,CID)
		set dovrcb.ovrnai=AMTD

		/*
		If calculated amount is less than zero, then a negative amount
		is reclassified into Negative Accrued Interest GL.
		*/
		// Negative amount cannot be reclassified into negative accrued
		// interest general ledger
		if AMTD<0 set RM=$$^MSG(3275) do EXC
		}

	// Unauthorized negative accrued interest Calculation
	if $D(UNICAL(AC)) do {
		set AMTD=""
	
		// Execute unauthorized negative accrued interest extrinsic or DATA-QWIK expression
		#ACCEPT pgm=spier;date=12/8/03
		xecute UNICAL(AC)
		quit:'AMTD
       
		// Multiply unauthorized negative accrued interest by unauthorized negative accrued interest percentage
		set AMTD=$$^SCARND(AMTD*DEPRUNAI(AC),,CID)
		set dovrcb.unauni=AMTD
       
		/*
		If calculated amount is less than zero, then a negative amount
		is reclassified into Unauthorized Negative Accrued Interest GL.
		*/
		// Negative amount cannot be reclassified into unauthorized
		// negative accrued interest general ledger
		if AMTD<0 set RM=$$^MSG(3276) do EXC
		}

	// Residual interest calculation
	if $D(RICAL(AC)) do {
		set AMTD=""
	
		// Execute residual interest extrinsic or DATA-QWIK expression
		#ACCEPT pgm=spier;date=12/8/03
		xecute RICAL(AC)
		quit:'AMTD
	
		// Multiply residual interest by residual percentage
		set AMTD=$$^SCARND(AMTD*DEPRRIP(AC),,CID)
		set dovrcb.rin=AMTD

		/*
		If calculated amount is less than zero, then a negative
		amount is reclassified into Residual Interest GL.
		*/
		// Negative amount cannot be reclassified into residual interest
		// general ledger
		if AMTD<0 set RM=$$^MSG(3277) do EXC
		}
	quit

EXPPER(RecordDEP dep,RecordDAYENDDOVRCB dovrcb)		// Expiration Period

	new DARCLS
	set DARCLS=dep.darcls
	quit:DARCLS=""
	
	do dep.setAuditFlag(1)
	
	/*
	Account just became current. Put in expiration waiting period if an
	expiration period exist for the current class.
	*/

	if DARCEXPD="",$G(DEPEXP(DARCLS)) do { quit
		do DEPRCAL(DARCLS,.dep,.dovrcb)

		set DARCEXPD=$$EXT^UMDT(DEPEXP(DARCLS),%SystemDate)
		if dep.darcexpd'=DARCEXPD set dep.darcexpd=DARCEXPD
		if dep.suspect'=3 set dep.suspect=3
		}
	// Account remains in expiration period at same risk class.
	if DARCEXPD>%SystemDate do DEPRCAL(DARCLS,.dep,.dovrcb) quit
	
	// Account has been current for the expiration period.
	if DARCEXPD'>%SystemDate do { quit
		set DARCLS=$O(DEPREC(DARCLS),-1)
	
		// Account is no longer a risk.
		if DARCLS="" do {
			if dep.darcls'="" set dep.darcls=""
			if dep.suspect'="" set dep.suspect=""
			if dep.darcexpd'="" set dep.darcexpd=""
       			}
		/*
		Account will be placed in lesser risk class and expiration
		waiting period is recalculated from today's date.
		*/
		else  do {
			do DEPRCAL(DARCLS,.dep,.dovrcb)
			set DARCEXPD=$$EXT^UMDT(DEPEXP(DARCLS),%SystemDate)
			if dep.darcls'=DARCLS set dep.darcls=DARCLS
			if dep.suspect'=3 set dep.suspect=3
			if dep.darcexpd'=DARCEXPD set dep.darcexpd=DARCEXPD
			}
		}
	quit

FILE(RecordDEP dep,RecordDAYENDDOVRCB dovrcb)
	
	// File into [DAYENDDOVRCB] for posting/reports. File changed DEP fields
	
	do dep.save()

	// Prevent filing an "empty" DAYENDDOVRCB record
	if dovrcb.ovrnai.isNull(),dovrcb.ovrnpb.isNull(),dovrcb.rin.isNull(),dovrcb.unauni.isNull(),dovrcb.unaunp.isNull() quit

	set dovrcb.timestmp = %CurrentDate	// Date and Time reclassified
	set dovrcb.uid = %UserID		// User that ran reclassification
	// Class used for calculation - DARCOVR or DARCLS
	set dovrcb.darcls = dep.darcls		// DARCLS
	set dovrcb.darcovr = dep.darcovr	// DARCOVR
	set dovrcb.suspect = dep.suspect	// Suspect indicator

	do dovrcb.save()

	quit
	
	
EXC     // Log error to DAYEND
       
	type public Number %ZTSEQ, CID
	type public String DESC, RM

	do LOG^UTLEXC($T(+0),"*",DESC,CID.get(),%ZTSEQ.get(),RM.get())
	kill RM,%ZTSEQ
	quit
      
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,NPDT,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set NPDT=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(NPDT,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,NPDT,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Boolean RERUN
	type public Date DARCNPDT, DARCLPDT, NPDT
	type public Number DARCOFF
	type public String DARCFREQ

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	
	set DARCOFF = cuvar.darcoff
	
	if RERUN.get() set DARCNPDT = NPDT	
	else  set DARCNPDT = cuvar.darcnpdt
	
	set DARCFREQ = cuvar.darcfreq
	set DARCLPDT = cuvar.darclpdt 

	// Do not execute in batch if Next Post Date minus offset days is not one 
	// one less day than the current system date (BTTDRV already bumped it)
	if 'RERUN.get(),(((DARCNPDT - DARCOFF) + 1) '= %SystemDate) set %BatchExit = 1 quit
	
	do Db.delete("DAYENDDOVRCB","NPDT=:DARCNPDT")

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("NPDT,CID","DAYENDDOVRC","DAYENDDOVRC.NPDT=:DARCNPDT")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
   
	// Initialize Customer Variable reclassification fields for single account

	type public Boolean DARCDFLG = 0
	type public String ACC(),DEPEXP(),DEPREC(),DEPRNAIP(),DEPRRIP(),DEPRNPBP(),DEPRUNAI()
	type public String %FN,DEPRUNPB(),DESCNICAL(),NPCAL(),RICAL(),RM,UNPCAL(),UNICAL()

	type Number I
	type String AC, CLS

	set %UserID = "BATCH"

	set DARCDFLG = CUVAR.DARCDFLG

	type RecordSCATBL scatbl=Db.getRecord("SCATBL","FN=:%FN")
	set DESC=scatbl.desc

	for I=1:1:5 set DEPREC(I)=""

	set CLS = "D"

	// Loop through [UTBLACC] and define data items for reclassification
	// for each asset class
	type ResultSet rs = Db.select("AC","UTBLACC","CLS=:CLS")
	while rs.next() do {	
	
		set AC = rs.getCol("AC")
		type RecordUTBLACC utblacc=Db.getRecord("UTBLACC","CLS=:CLS,AC=:AC")
		set ACC(AC)=utblacc.ac
		set DEPEXP(AC)=utblacc.depexp			// Expiration Period
		set DEPRNPBP(AC)=utblacc.deprnpbp/100		// Dep Reclass Neg Principal Balance Percen
		set DEPRUNPB(AC)=utblacc.deprunpb/100		// Dep Reclass Unauth Neg Principal Bal Per
		set DEPRNAIP(AC)=utblacc.deprnaip/100		// Dep Reclass Neg Accrued Interest Percent
		set DEPRUNAI(AC)=utblacc.deprunai/100		// Dep Reclass Unauth Neg Accrued Inter Per
		set DEPRRIP(AC)=utblacc.deprrip/100		// Dep Reclass Residual Interest Percent

		// Asset class deposit reclass by query, or days, or months.
		if utblacc.deproq'="" set DEPREC(AC)="Q"
		else  if utblacc.deprdo'="" set DEPREC(AC)=utblacc.deprdo_"D"
		else  if utblacc.deprmo'="" set DEPREC(AC)=utblacc.deprmo_"M"
       
		// Extrinsic function or Data QWIK expression used to
		// calculate negative principal
		if utblacc.depnpext'="" do {
			set NPCAL(AC)=utblacc.depnpext
			if $E(NPCAL(AC),1,2)'="$$" set NPCAL(AC)="$$"_NPCAL(AC)
			set NPCAL(AC)="S AMTD="_NPCAL(AC)
			}
		else  if utblacc.deprnpdq'="" set NPCAL(AC)="S AMTD=$$dqnp"_AC_"^LNRCMP1(.dep)"
       
		// Extrinsic function or Data QWIK expression used to
		// calculate unauthorized negative principal.
		if utblacc.depupext'="" do {
			set UNPCAL(AC)=utblacc.depupext
			if $E(UNPCAL(AC),1,2)'="$$" set UNPCAL(AC)="$$"_UNPCAL(AC)
			set UNPCAL(AC)="S AMTD="_UNPCAL(AC)
			}
		else  if utblacc.deprupdq'="" set UNPCAL(AC)="S AMTD=$$dqunp"_AC_"^LNRCMP1(.dep)"
			
		// Extrinsic function or Data QWIK expression used to
		// calculate negative interest.
		if utblacc.depniext'="" do {
			set NICAL(AC)=utblacc.depniext
			if $E(NICAL(AC),1,2)'="$$" set NICAL(AC)="$$"_NICAL(AC)
			set NICAL(AC)="S AMTD="_NICAL(AC)
			}
		else  if utblacc.deprnidq'="" set NICAL(AC)="S AMTD=$$dqni"_AC_"^LNRCMP1(.dep)"
			
		// Extrinsic function or Data QWIK expression used to
		// calculate unauthorized negative interest.
		if utblacc.depuiext'="" do {
			set UNICAL(AC)=utblacc.depuiext
			if $E(UNICAL(AC),1,2)'="$$" set UNICAL(AC)="$$"_UNICAL(AC)
			set UNICAL(AC)="S AMTD="_UNICAL(AC)
			}	
		else  if utblacc.depruidq'="" set UNICAL(AC)="S AMTD=$$dquni"_AC_"^LNRCMP1(.dep)"
			
		// Extrinsic function or Data QWIK expression used to
		// calculate residual interest.
		if utblacc.depriext'="" do {
			set RICAL(AC)=utblacc.depriext
			if $E(RICAL(AC),1,2)'="$$" set RICAL(AC)="$$"_RICAL(AC)
			set RICAL(AC)="S AMTD="_RICAL(AC)
			}
		else  if utblacc.deprridq'="" set RICAL(AC)="S AMTD=$$dqri"_AC_"^LNRCMP1(.dep)"
		}
	quit
	

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
