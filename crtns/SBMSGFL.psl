SBMSGFL(RecordSBADVMSG sbadvmsg, String vpar, Boolean vparNorm) // SBADVMSG - SBN Advice Message Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = sbadvmsg.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(sbadvmsg,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(sbadvmsg,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PROCDT").exists()!vx("MSGID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SBADVMSG",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SBADVMSG","PROCDT = :sbadvmsg.procdt and MSGID = :sbadvmsg.msgid and SEQ = :sbadvmsg.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PROCDT
	type public String MSGID
	type public String SEQ

	type RecordSBADVMSG sbadvmsg = Db.getRecord("SBADVMSG","PROCDT=:PROCDT,MSGID=:MSGID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do sbadvmsg.setMode(2)

		do SBMSGFL(sbadvmsg,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSBADVMSG sbadvmsg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SBADVMSG","PROCDT = :sbadvmsg.procdt and MSGID = :sbadvmsg.msgid and SEQ = :sbadvmsg.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(sbadvmsg)) S ^SBADV(vobj(sbadvmsg,-3),vobj(sbadvmsg,-4),vobj(sbadvmsg,-5))=vobj(sbadvmsg)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSBADVMSG sbadvmsg


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SBADV(vobj(sbadvmsg,-3),vobj(sbadvmsg,-4),vobj(sbadvmsg,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordSBADVMSG sbadvmsg

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSBADVMSG sbadvmsg

	if sbadvmsg.procdt.isNull() do vreqerr("PROCDT") quit
	if sbadvmsg.msgid.isNull() do vreqerr("MSGID") quit
	if sbadvmsg.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SBADVMSG","MSG",1767,"SBADVMSG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSBADVMSG sbadvmsg

	set X = sbadvmsg.procdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROCDT", vRM) quit
	if sbadvmsg.msgid.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MSGID", vRM) quit
	set X = sbadvmsg.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if sbadvmsg.msgtext.length()>450 set vRM = $$^MSG(1076,450) do vdderr("MSGTEXT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SBADVMSG","MSG",979,"SBADVMSG."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSBADVMSG sbadvmsg

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("PROCDT").exists() set vux("PROCDT") = vx("PROCDT")
	if vx("MSGID").exists() set vux("MSGID") = vx("MSGID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = sbadvmsg.procdt_","_sbadvmsg.msgid_","_sbadvmsg.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = sbadvmsg.procdt_","_sbadvmsg.msgid_","_sbadvmsg.seq // Copy new keys into object
	type RecordSBADVMSG vnewrec = sbadvmsg.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SBADVMSG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSBADVMSG sbadvmsg

	if vux("PROCDT").exists() set sbadvmsg.procdt = vux("PROCDT").piece("|",i)
	if vux("MSGID").exists() set sbadvmsg.msgid = vux("MSGID").piece("|",i)
	if vux("SEQ").exists() set sbadvmsg.seq = vux("SEQ").piece("|",i)
	quit
