BCHPATAU //Batch BCHPATAUTO - Preauthorized Transfers
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHPATAUTO Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHPATAUTO")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHPATAUTO") quit
 do JOBMGR^BCHUTL(%FN,"BCHPATAUTO",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHPATAUTO")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(SRC,ACN,BATCH) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHPATAUTO","*","",SRC.get()_","_ACN.get()_","_BATCH.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHPATAUTO",SRC.get()_","_ACN.get()_","_BATCH.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHPATAUTO",SRC.get()_","_ACN.get()_","_BATCH.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,SRC,ACN,BATCH)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHPATAUTO","*","",SRC.get()_","_ACN.get()_","_BATCH.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHPATAUTO",SRC.get()_","_ACN.get()_","_BATCH.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,SRC,ACN,BATCH) //
PROC	// Process a batch
	
	do PROC^PATCALC(SRC,ACN,BATCH)
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
	new vi
	
	for vi=1:1 set vRECORD=vINPUT.piece("|",vi) quit:vRECORD=""  do { 
		set SRC=vRECORD.piece("#",1)
		if '(SETUP(SRC).exists()) do INIT 
		set ACN=vRECORD.piece("#",2)
		set BATCH=vRECORD.piece("#",3)
		do vPROC(SRC,ACN,BATCH)
		}
		
	quit
	
INIT	/* 
	The posting teller initialization is being done here because vINPUT 
	can contain several PAT sources. 
	*/
	
	kill ETC				// SPG 8/30/99
	new ER
	set ER=0
	
	do SOURCE^BCHSOURC("PAT",SRC,.%UserID,.BRCD,.%UserClass,"","",.%ODP)
	set UID=%UserID
	set TPD=%SystemDate
	do ^TTXLOK if ER quit
	
	type RecordUTBLSRC utblsrc=Db.getRecord("UTBLSRC","SRCTYP='PAT',KEY=:SRC")
	set PATFEE=utblsrc.patfee
	set SETUP(SRC)=""
	quit
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
	new vi
	
	set (first,run)=0,valid=1
	
	if vINPUT.get().isNull() set vINPUT=SRC_"#"_ACN_"#"_BATCH
	else  set vINPUT=""
	
	for vi=1:1:300 do { quit:vINPUT=""!(SRC="")
		if SRC="",vi=1 set vINPUT="" quit
		if valid do GETBCH
		if BATCH'=""&(run) set vINPUT=vINPUT_"|"_SRC_"#"_ACN_"#"_BATCH quit
		if valid,BATCH="" do GETACN
		if ACN="" do GETSRC  //get next valid SRC and ACN
		}
		
	if vINPUT.extract(1)="|" set vINPUT=vINPUT.piece("|",2,350)
	
	quit

GETSRC	// Get next SRC
	set valid=0
	
	// Get first entry in table
	if SRC="" do {
		type ResultSet rs=Db.select("KEY","UTBLSRC","SRCTYP='PAT'")
		if rs.next() set SRC=rs.getCol("KEY")
		}
	
	// Otherwise, get next entry	
	else  do {
		type ResultSet rs=Db.select("KEY","UTBLSRC","SRCTYP='PAT' AND KEY>:SRC")
		if rs.next() set SRC=rs.getCol("KEY")
		else  set SRC=""
		}
		
	quit:SRC=""

	type RecordUTBLSRC REC=Db.getRecord("UTBLSRC","SRCTYP='PAT',KEY=:SRC")
	if %SystemDate-REC.npd quit
	if REC.eodp-EODP quit  	  // EODP is defined on the function.
	set ACN=""
	do GETACN if ACN="" quit  // Source exists with no records.
	set valid=1

	quit
	
GETACN	
	
	type ResultSet rs=Db.select("ACN","PAT1","SRC=:SRC AND ACN>:ACN")
	if rs.next() set ACN=rs.getCol("ACN")
	else  set ACN=""
	quit
	
GETBCH	
	/* 
	Submit the first batch whether it is supposed to run or not, the
	very first time through.  EXEC section will evaluate the dates. 
	For all other times, batches not scheduled to run won't be 
	considered for submission. 
	*/
	
	new pat1
	
	if first do {  quit
		type ResultSet rs=Db.select("BATCH","PAT1","SRC=:SRC AND ACN=:ACN AND BATCH>:BATCH")
		if rs.next() set BATCH=rs.getCol("BATCH")
		else  set BATCH=""
	}
	
	set run=0
	
	type ResultSet rs=Db.select("BATCH","PAT1","SRC=:SRC AND ACN=:ACN AND BATCH>:BATCH")
	if rs.next() set BATCH=rs.getCol("BATCH")
	else  set BATCH=""
	
	quit:BATCH=""
	
	type RecordPAT1 pat1=Db.getRecord("PAT1","SRC=:SRC,ACN=:ACN,BATCH=:BATCH")
	if pat1.start>%SystemDate quit    		    // Start date
	if pat1.stop,pat1.stop'>%SystemDate quit  	    // Expiration date
	
	set run=1
	
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set (SRC,ACN,BATCH)="",first=1,valid=0
	
	for  do GETSRC quit:SRC=""!(valid)
	if SRC="" set %BatchExit=1 quit  // There are no PATs scheduled to run today.
	
	// If SRC is defined, there will be an ACN defined as well-see GETSRC.
	do GETBCH
	
	do Db.fastDelete("PATEX")
	do Db.fastDelete("PATEX1")
	
	quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("SRC,ACN,BATCH","PAT1","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set TPD=%SystemDate
	set (ER,RM,POFF,SEQ,PATFEE)=""
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set iracon=cuvar.iracon
	set iradis=cuvar.iradis
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
END	// Finish up
	
	do FRE
	
	set X=$$MON^SCADAT(%SystemDate,1) S:X<10 X="0"_X
	set Y=$$DAY^SCADAT(%SystemDate,1) S:Y<10 Y="0"_Y	
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set POP=$$FILE^%TRNLNM("PATEXC."_X_Y,cuvar.spldir)
	set CONAM=cuvar.conam
	
	set RID="SCA022" D ^URID
	do ^SCAIO,OPEN^SCAIO
	if PGM'="" do V0^@PGM
	
	set ER=0
	quit
	
FRE	// Bump next posting date
	
	new rs
	type ResultSet rs=Db.select("KEY","UTBLSRC","SRCTYP='PAT'")
	while rs.next() do {
		set SRC=rs.getCol("KEY")
		do FRE1
		}
	quit
	
FRE1	//
	new RETURN
	
	type RecordUTBLSRC utblsrc=Db.getRecord("UTBLSRC","SRCTYP='PAT',KEY=:SRC")
	if utblsrc.npd'=%SystemDate quit
	if utblsrc.eodp-EODP quit    	// check end-ofday processing flag
	
	set utblsrc.lpd=utblsrc.npd
	set FRE=utblsrc.freq,JD=%SystemDate
	set utblsrc.npd=$$NJD^UFRE(JD,FRE)
	do utblsrc.bypassSave()
	
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
