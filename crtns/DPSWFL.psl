DPSWFL(RecordDEPSWIFT depswift, String vpar, Boolean vparNorm) // DEPSWIFT - Deposit File - SWIFT related information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (54)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = depswift.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(depswift,.vxins(),10,"|")
	if %O = 1 quit:'depswift.isChanged()  do AUDIT^UCUTILN(depswift,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEPSWIFT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEPSWIFT","CID = :depswift.cid")  // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordDEPSWIFT depswift = Db.getRecord("DEPSWIFT","CID=:CID")
	if (%ProcessMode = 2) do {
		do depswift.setMode(2)

		do DPSWFL(depswift,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEPSWIFT depswift

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEPSWIFT","CID = :depswift.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(depswift,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(depswift,-3),150,n)=vobj(depswift,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(depswift,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(depswift,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(depswift,-3),150,n)=vobj(depswift,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDEPSWIFT depswift
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^ACN(vobj(depswift,-3),150,n)) quit:n=""  if '$D(vobj(depswift,n)),$D(^ACN(vobj(depswift,-3),150,n))#2 set vobj(depswift,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEPSWIFT depswift

	if 'vkeychg.get(),depswift.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^ACN(vobj(depswift,-3),150)
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordDEPSWIFT depswift

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEPSWIFT depswift

	if depswift.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPSWIFT","MSG",1767,"DEPSWIFT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDEPSWIFT depswift
	if 'depswift.cid.isNull() set vfkey("^ACN("_""""_depswift.cid_""""_","_50_")")="DEPSWIFT(CID) -> DEP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDEPSWIFT depswift
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DEP",":depswift.cid") set vERRMSG = $$^MSG(8563,"DEPSWIFT(CID) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEPSWIFT depswift

	if (%O = 2) do vload

	if vobj(depswift,320).exists() do {

		if depswift.accwinst.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCWINST", vRM) quit
		if depswift.accwinst1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCWINST1", vRM) quit
		if depswift.accwinst2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCWINST2", vRM) quit
		if depswift.accwinst3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCWINST3", vRM) quit
		if depswift.intmd.length()>11 set vRM = $$^MSG(1076,11) do vdderr("INTMD", vRM) quit
		if depswift.intmd1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD1", vRM) quit
		if depswift.intmd2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD2", vRM) quit
		if depswift.intmd3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD3", vRM) quit
		if depswift.intmd4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD4", vRM) quit
		set X = depswift.ipmeth if 'X.isNull(),'Db.isDefined("STBLMT320IM","X") set vRM = $$^MSG(1485,X) do vdderr("IPMETH", vRM) quit
		if depswift.sncora.length()>11 set vRM = $$^MSG(1076,11) do vdderr("SNCORA", vRM) quit
		if depswift.sncorb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORB", vRM) quit
		if depswift.sncord1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD1", vRM) quit
		if depswift.sncord2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD2", vRM) quit
		if depswift.sncord3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD3", vRM) quit
		if depswift.sncord4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD4", vRM) quit
	}

	if vobj(depswift,321).exists() do {

		if depswift.accwinst4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCWINST4", vRM) quit
		if depswift.intmdb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMDB", vRM) quit
		if depswift.setcode.length()>11 set vRM = $$^MSG(1076,11) do vdderr("SETCODE", vRM) quit
		if depswift.sncorab.length()>11 set vRM = $$^MSG(1076,11) do vdderr("SNCORAB", vRM) quit
		if depswift.sncorbb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORBB", vRM) quit
		if depswift.sncord1b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD1B", vRM) quit
		if depswift.sncord2b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD2B", vRM) quit
		if depswift.sncord3b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD3B", vRM) quit
		if depswift.sncord4b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNCORD4B", vRM) quit
		if depswift.sntorec1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNTOREC1", vRM) quit
		if depswift.sntorec2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNTOREC2", vRM) quit
		if depswift.sntorec3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNTOREC3", vRM) quit
		if depswift.sntorec4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNTOREC4", vRM) quit
		if depswift.sntorec5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNTOREC5", vRM) quit
		if depswift.sntorec6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNTOREC6", vRM) quit
	}

	if vobj(depswift,322).exists() do {

		if depswift.acwinst1b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST1B", vRM) quit
		if depswift.acwinst2b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST2B", vRM) quit
		if depswift.acwinst3b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST3B", vRM) quit
		if depswift.acwinst4b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST4B", vRM) quit
		if depswift.acwinstb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINSTB", vRM) quit
		if depswift.intmd1b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD1B", vRM) quit
		if depswift.intmd1c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD1C", vRM) quit
		if depswift.intmd2b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD2B", vRM) quit
		if depswift.intmd2c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD2C", vRM) quit
		if depswift.intmd3b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD3B", vRM) quit
		if depswift.intmd3c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD3C", vRM) quit
		if depswift.intmd4b.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD4B", vRM) quit
		if depswift.intmdc.length()>11 set vRM = $$^MSG(1076,11) do vdderr("INTMDC", vRM) quit
		if depswift.setcodeb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SETCODEB", vRM) quit
	}

	if vobj(depswift,323).exists() do {

		if depswift.acwinst1c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST1C", vRM) quit
		if depswift.acwinst2c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST2C", vRM) quit
		if depswift.acwinst3c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST3C", vRM) quit
		if depswift.acwinst4c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINST4C", vRM) quit
		if depswift.acwinstc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACWINSTC", vRM) quit
		if depswift.intmd4c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTMD4C", vRM) quit
		if depswift.setcodec.length()>11 set vRM = $$^MSG(1076,11) do vdderr("SETCODEC", vRM) quit
	}

	if vobj(depswift,324).exists() do {

		if depswift.mt320ref.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MT320REF", vRM) quit
	}
	set X = depswift.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEPSWIFT","MSG",979,"DEPSWIFT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDEPSWIFT depswift

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(depswift,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(depswift,-3) = vnewkey // Copy new keys into object
	type RecordDEPSWIFT vnewrec = depswift.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEPSWIFT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(depswift,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
