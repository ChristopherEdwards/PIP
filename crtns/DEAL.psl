DEAL	//;Private;Deal Record Creation & Maintenance
	/*
	   Origin: Matt Lessig 04/01/93

	   Description: Deal Record Creation & Maintenance
	   This routine supports the creation and maintenance of
	   foreign exchange deal records.  It is called by an IBS
	   function (FX*) to create/update an FX deal record.  It
	   can display multiple prompts (dependant upon %O); it
	   then displays a series of screens for deal definition
	   and files the record into DEAL1 table.

	   Inputs:
	   . System %CRCD,%FN,%LIBS,%UID

	   . ER 	Error indicator  /TYPE=T
	     Returns ER=1 if an error, otherwise ER="W"

	   . RM 	Return message   /TYPE=T
	     Returns error message if ER=1, otherwise completion message

	  ---- Revision History -------------------------------------------------
	  
	   03/21/06 - RussellDS - CR20234
	  	      Fixed query syntax for table lookups.
	  	      
	  	      Cleaned up PSL warnings.
	
	   02/17/06 - KinI - CR19642
	              Modified FILE section to set DEAL1.REFLG when modifying
	              a deal with status 5. 
	              Also modified NOSSPP to remove X=V check as if there was 
	              no change in the nostro account but wrong currency was 
	              used, no validation is performed that leads to setting up 
	              deals where the account has the wrong currency code. 	              

	   01/22/06 - KinI - CR 16664
	   	      DBI related clean-up. Moved the code to default the new
	   	      Contract Number when creating a deal from VPG01 to VPG00 
	   	      section. Added TP logic as this procedure is called by 
	   	      the character driver and updates multiple tables.
		      Modified prompt post-processors to use %OSAVE instead of 
		      %ProcessMode as it is redefined by UTLREAD.
		      
	   08/11/04 - KELLYP - CR 11477
	   	      Re-converted to PSL, fixed previously commented-out code,
	   	      and modified to conform to current standards.  Also removed
	   	      code in VER section that called TACCOUNT which has been 
	   	      obsoleted.
	   	      
	   11/06/02 - DATTAR - 49451
	   	      Converted to PSL

	   09/13/00 - LAMY - 41809
	              Added code in the NOSSPP section to define fEFTPAY
		      to vobj(eftpay) if fEFTPAY is null and vobj(eftpay)
		      exist.

	   02/10/00 - Anna Maltepes 34806
	              Modified NOSSPP section. Introduced settlement currency
	              for NOPDI.

           ------------------------------------------------------------------------
	*/

	quit

NEW	// 

	do INIT(0)

	quit


UPD 	//
 
	do INIT(1)

	quit


DIS 	//

	do INIT(2)

	quit


DEL	//

	do INIT(3)

        quit



INIT(Number %ProcessMode)
	
	type public String CO
	
	type Boolean delete,newdeal,SOURCE
	type Number %PAGE,%PG,NOEXT,NOINT
	type String msg,NO,OLNTB,PS,QRY,REC,REFNO,STATDSC,TR,TRREFNO,VFMQ
	
	set %PG=0 
	set %PAGE=1
	
	if (%ProcessMode=1) set QRY="[DEAL1]UID=<<%UID>> AND ([DEAL1]STATUS=1 OR [DEAL1]STATUS=5)"
	else  if (%ProcessMode=3) set QRY="[DEAL1]UID=<<%UID>> AND ([DEAL1]STATUS=1 OR [DEAL1]STATUS=5)"
	else  set QRY=""

	// Tr Ref Source "deals"
	set (NO,REC,TR,REFNO)="" 
	set SOURCE=1
	
	set CO=CUVAR.co

	type RecordDEAL1 fDEAL1

	do VPG(.fDEAL1)
	
	quit


VPG(RecordDEAL1 fDEAL1)	// Page control

	type public String %PG,ER,REFNO,SOURCE,VFMQ

	type Boolean FOUND

	set FOUND=0
	for  do { quit:FOUND=1
		if %PG=0 do VPG00(.fDEAL1) if ER=1 set FOUND=1 quit

		if %PG>0 do VPG01(.fDEAL1)

		if "DF"[VFMQ do VER(.fDEAL1) set FOUND=1 quit
	
		// Process aborted
		if ("Q"[VFMQ)&(%ProcessMode=0) do {  quit
		
			do KTRN(SOURCE,REFNO) 
		
			do VER(.fDEAL1)
			
			set FOUND=1
			}

		if ('FOUND),("Q"[VFMQ) do VER(.fDEAL1) set FOUND=1 quit
		set %PG=%PG+1
		}
	quit


VPG00(RecordDEAL1 fDEAL1) // Set up/Prompts

	type public String ER,IO,NOEXT,NOINT,QRY,VFMQ
	
	type String %NOPRMT,%READ,%TAB()
	type Boolean LOCK
	
	if %ProcessMode=0 do {
		set %TAB("NOINT")="[DEAL1]NOINT"
		set %TAB("PS")=".DEALPS/TBL=[STBLDEALPS]"
		set %READ="@@%FN,,,NOINT/PRO,PS/REQ" set %NOPRMT="N"
		}
	else  do {
		set %TAB("NOINT")="[DEAL1]NOINT/TBL=""[DEAL1]NOINT,NOEXT,AMTB,CRCDB,AMTS,CRCDS,STATUS,TYPE/LEN=1:QU """""_QRY_"""""""/XPP=D NOPP2^DEAL(.fDEAL1,X)"
		set %TAB("NOEXT")="[DEAL1]NOEXT/TBL=""[DEALMEMO]NOEXT,NOINT,[DEAL1]AMTB,[DEAL1]CRCDB,[DEAL1]AMTS,[DEAL1]CRCDS,[DEAL1]STATUS,[DEAL1]TYPE/LEN=1:QU """""_QRY_"""""""/XPP=D MEMOPP^DEAL(X,NOINT,.fDEAL1)"
		set %TAB("TRREFNO")="[DEAL1]TRREFNO/TBL=""[DEALREFNO]TRREFNO,NOINT,[DEAL1]AMTB,[DEAL1]CRCDB,[DEAL1]AMTS,[DEAL1]CRCDS,[DEAL1]STATUS,[DEAL1]TYPE/LEN=1:QU """""_QRY_"""""""/XPP=D REFPP^DEAL(X,NOINT,NOEXT,.fDEAL1)"
		set %READ="@@%FN,,,NOINT,NOEXT,TRREFNO" set %NOPRMT="N"
		}

	set %TAB("IO")=$$IO^SCATAB($I)
	
	// If in create mode, default the next available deal number
	// allowing two people to create deals at the same time

        set LOCK=0
       
	if %ProcessMode=0 set NOINT="" for  do {  quit:LOCK
		
		type String DEAL1()
		
		set DEAL1(NOINT) = ""		// Avoid warning on lock
		
		if NOINT="" set NOINT=Db.currVal("DEAL1") set NOINT=NOINT+1
		lock +DEAL1(NOINT):2 else  set NOINT=NOINT+1 quit
		set LOCK=1
		}

	if %ProcessMode=2 set %READ=%READ_",,IO#1"

	do ^UTLREAD 

	if VFMQ="Q" set ER=1 quit

	if %ProcessMode=2,IO'=$I do OPEN^SCAIO

	quit


NOPP2(RecordDEAL1 fDEAL1,	// DEAL1 record		
      String X)			// Contract Number
      
	// Deal Number Post-Processor (Modify,Inquiry,Delete Mode).

	type public Number NI,%OSAVE
	type public String NOINT

	if X="" quit
	
	if %OSAVE=2 set NI=NI+2 quit

	set fDEAL1=Db.getRecord("DEAL1","NOINT=:X",1)

	// Record not found
	if fDEAL1.getMode()=0 do Runtime.setErrMSG("DEAL1",2335) quit

	// Deal has been deleted
	if fDEAL1.status=8 do Runtime.setErrMSG("DEAL1",7551) quit

	// Only the user who created this deal can modify it
	if (%OSAVE=1) , (fDEAL1.uid'=%UserID) do Runtime.setErrMSG("DEAL1",7557) set NOINT="" quit

	// Only the user who created this deal can delete it
	if (%OSAVE=3) , (fDEAL1.uid'=%UserID) do Runtime.setErrMSG("DEAL1",7556) set NOINT="" quit

	// Verified deals can't be modified
	// Invalid Table Value
	if (%OSAVE=1) , (fDEAL1.status=2) do Runtime.setErrMSG("DEAL1",7194) set NOINT="" quit

	do GOTO^DBSMACRO("END")

	quit


MEMOPP(String X,		// Trader's Memo
       String NOINT,		// Contract Number
       RecordDEAL1 fDEAL1)	// DEAL1 record
       
	// Trader's Memo (NOEXT) Post-Processor

	type public Number NI, %OSAVE
	type public String RM
	type public Boolean ER

	if X="" quit

	if NOINT="" do {
		type RecordDEALMEMO dealmem=Db.getRecord("DEALMEMO","NOEXT=:X")
		set NOINT=dealmem.noint
		}

	// Invalid trader memo
	if NOINT="" do Runtime.setErrMSG("DEAL1",7552) quit
	
	set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT",1)

	if (%OSAVE=1)!(%OSAVE=3) do { quit:ER

		// Only the user who created this deal can modify it
		if (%OSAVE=1)&(fDEAL1.uid'=%UserID) do Runtime.setErrMSG("DEAL1",7557) quit

		// Only the user who created this deal can delete it
		if (%OSAVE=3)&(fDEAL1.uid'=%UserID) do Runtime.setErrMSG("DEAL1",7556) quit

		// Status
		if (fDEAL1.status=1)!(fDEAL1.status=5) set NI=NI+1 set RM=""

		// Invalid Table Value
		else  do Runtime.setErrMSG("DEAL1",7194) set NOINT="" quit
		}
		
	set NI=NI+1
	
	quit


REFPP(Number X,			// Transaction Reference Number
      String NOINT,		// Contract Number
      String NOEXT,		// Trader's Memo
      RecordDEAL1 fDEAL1)	// DEAL1 record
      
	// Transaction Reference Number (REFNO) Post-Processor

	type public Number NI, %OSAVE
	type public String RM
	type public Boolean ER

	// Data required
	if (X="")&(NOINT="")&(NOEXT="") do Runtime.setErrMSG("DEAL1",741) quit

	if NOINT="" do {
                type RecordDEALMEMO dealmem=Db.getRecord("DEALMEMO","NOEXT=:X")
                set NOINT=dealmem.noint
                }
 
	//Invalid transaction ref. number
	if NOINT="" do Runtime.setErrMSG("DEAL1",7553) quit

	set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT",1)

	if (%OSAVE=1)!(%OSAVE=3) do { quit:ER

		// Only the user who created this deal can modify it
		if (%OSAVE=1)&(fDEAL1.uid'=%UserID) do Runtime.setErrMSG("DEAL1",7557) quit

		// Only the user who created this deal can delete it
		if (%OSAVE=3)&(fDEAL1.uid'=%UserID) do Runtime.setErrMSG("DEAL1",7556) quit

		// Status
		if (fDEAL1.status=1)!(fDEAL1.status=5) set NI=NI+1 set RM=""

		// Invalid Table Value
		else  do Runtime.setErrMSG("DEAL1",7194) quit
		}
		
	quit


VPG01(RecordDEAL1 fDEAL1)	// Screen priorities

	type public Boolean SOURCE
	type public Number NOINT
	type public String msg,PS,REFNO,STATDSC
	
	type String NO,SID

	// In Create or Display mode fDEAL1 still does not exists
	if (%ProcessMode=0) ! (%ProcessMode=2) set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT",1)
	
	// Determine the Transaction Reference Number for SWIFT messages
	if (%ProcessMode=0) do {

		type String TEMP

		// filename|primary key 
		set TEMP="DEAL|"_NOINT

		// assign reference no.
		do ^TRREFNO(SOURCE,.REFNO,TEMP)

		// Transaction Reference Number
		set fDEAL1.trrefno=REFNO

		// Purchase/Sale
		set fDEAL1.dealps=PS

		// default status
		set fDEAL1.status=1

		type RecordSTBLDSTAT fSTBLDST=Db.getRecord("STBLDSTAT","DSTAT=:fDEAL1.status")		
		set STATDSC=fSTBLDST.desc
		}

	// Check for pre-existing messages, set system base currency
	type ResultSet rs=Db.select("MSG","DEALMSG","NOINT=:NOINT")
	if 'rs.isEmpty() set msg=1

	set fDEAL1.crcdbase=%SystemCurrency
		
	// Purchase/Sale
	set PS=fDEAL1.dealps

	// In display mode call Deal Settlement Instructions linkage screens
	if %ProcessMode=2 do {
			
		set SID=$S(PS.get()="S":"DEAL1SIS",1:"DEAL1SIP")

		type RecordDEALMSG2 DEALMSG2=Db.getRecord("DEALMSG2","NOINT=:NOINT,MSG=5",1)
		type RecordDEALMSG3 DEALMSG3=Db.getRecord("DEALMSG3","NOINT=:NOINT,MSG=6",1)
					
		do DRV^USID(%ProcessMode,SID,.DEALMSG2,.DEALMSG3,.fDEAL1)
				
		}
			
	else  do {
		// In all other the Display mode call DEAL1 or DEAL1A screens
		
		set SID=$S(PS.get()="S":"DEAL1A",1:"DEAL1")
		do DRV^USID(%ProcessMode,SID,.fDEAL1)
		}
		
	set NO=NOINT

	quit


VER(RecordDEAL1 fDEAL1) // Option of running T-Account report (Display mode only).

	type public Boolean delete
	type public Number NO,NOINT
	type public String ER,RM,VFMQ

	// Must reload fDEAL1 local array when %O=2
	if 'NOINT.exists() quit
	
	// Verify the user's intent to delete the deal (Delete mode only)
	if (%ProcessMode=3),(NO.exists()),(VFMQ="D") do {
	
		type Number OPT
	
		set OPT=$$^DBSMBAR(142)  // Delete this deal?  Yes  No
		if OPT=2 set VFMQ="Q" quit

		do fDEAL1.setAuditFlag(1)

		//set status to "deleted"
		set fDEAL1.status=8

		set %ProcessMode=1 
		set delete=1
		}

	if (%ProcessMode=2)!(%ProcessMode=4)!(VFMQ="Q") do END(.fDEAL1) quit

	do FILE(.fDEAL1)

	do END(.fDEAL1)

	quit


FILE(RecordDEAL1 fDEAL1)	// File data - manipulate entries in ^DEAL global.

	/*
	   When in create mode, after filing the trader ticket info. (pg1)
	   execute settlement instruction screens by calling NEW^DEALSINT.
	*/

	type public Boolean delete, ER, newdeal
	type public String NOINT

	if %ProcessMode=0 do {
		if fDEAL1.mt300flg="" set fDEAL1.mt300flg=1
		if fDEAL1.mt210flg="" set fDEAL1.mt210flg=$S(fDEAL1.type="SPOT":1,1:0)
		if fDEAL1.mt202flg="" set fDEAL1.mt202flg=$S(fDEAL1.type="SPOT":1,1:0)

		//set to 1 if the newdeal is created
		set newdeal=1
		}
	
	// Set resubmit flag so a user is able to re-verify modified deal
	if %ProcessMode=1,fDEAL1.status=5 set fDEAL1.reflg=1	
		
	// TP logic should prevent new DEAL1 record saving in the case some
	// error is set in DEALSINT processing updating some additional files.
	do Runtime.start("CS", "", "SAVEPTR")

	do fDEAL1.save()

	// Deal Settlement Instructions
	if (%ProcessMode=0),('delete.get()) do NEW^DEALSINT(NOINT)

	if ER do Runtime.rollback("SAVEPTR") quit
	do Runtime.commit()
	
	quit


CCYBPP(String RECV,String CCY,Number OURN)	//Currency Bought Post-Processor

	/*
	   Post-processor to determine data items RECV and NOSTROB in the
	   DEAL1 file.

	   Arguments:
	   . RECV  SWIFT Address/Bank ID Code /TYPE=T
	   . CCY  Currency   /TYPE=T/LEN=3
	   . OURN  Nostro Account   /TYPE=N

	*/
	
	type public String CO
	
	type RecordCRCD fCRCD=Db.getRecord("CRCD","CO=:CO,CRCD=:CCY")	

	// Preferred Payment Nostro
	set OURN=fCRCD.ourpref 
	if OURN="" quit

	type RecordDEP dep=Db.getRecord("DEP","CID=:OURN")
	set RECV=dep.corre

	quit


public	CCYSPP(Number ACN,	// Customer ID
               String CCY,	// Currency
               Number OPPN, 	// Nostro Account
               String SEND,	// Correspondent
               Number INTBL)	// In currency table indicator

	// Currency Sold Post-processor to determine data items SEND and 
	// NOSTROS in the DEAL file.
	
	type public String CO
	
	type RecordCRCD crcd=Db.getRecord("CRCD","CO=:CO,CRCD=:CCY",1)
	if 'crcd.getMode() set INTBL=0 quit

	type RecordSINSTR fSINSTR=Db.getRecord("SINSTR","ACN=:ACN,CRCD=:CCY,FXPROD='FX',PAYRECV='P'",1)
	if fSINSTR.corre'="" set SEND=fSINSTR.corre

	do CCYBPP(.SEND,.CCY,.OPPN)

	quit


NOSSPP(String X,String CRCDS,RecordEFTPAY fEFTPAY)	//Nostro Sold Post-Processor

	/*
	   Post-processor to verify that the nostro account (X) is the same
	   currency as the deal currency (CRCDS), and that it isn't closed.

	   Arguments:
	   . X  Account Number  /TYPE=N
	   . CRCDS  Currency  /TYPE=T/LEN=3
	*/

	type public Number CID,SEQ
	type public String ER,RM
	
	type String CCYS,EFTTYPE,EMUCRCD,SETCRCD

	if X="" quit

	// Check if account exists
	do CID^UACN1 quit:ER

	type RecordDEP dep=Db.getRecord("DEP","CID=:X")

	// Account ~p1 is closed
	if dep.stat=4 do Runtime.setErrMSG("DEP",6050,X) quit
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set EMUCRCD=cuvar.emucrcd
	
	set EFTTYPE=""
	if fEFTPAY.exists() set EFTTYPE=fEFTPAY.efttype
	else  do {
		if SEQ.get()'="" do {
			set fEFTPAY=Db.getRecord("EFTPAY","CID=:X,SEQ=:SEQ")
			set EFTTYPE=fEFTPAY.efttype
			}
		}
		
	if (EFTTYPE="NDPO")!(EFTTYPE="NDPOIN") do {
		set SETCRCD=fEFTPAY.setcrcd
		if ((SEQ.get()'="")!(EFTTYPE="NDPOIN")),SETCRCD set CRCDS=EMUCRCD
		}
	
	if dep.crcd'="" do { quit
		set CCYS=dep.crcd
		
		if CCYS=CRCDS quit
		
		// Account ~p1 defined as a ~p2 account
		do Runtime.setErrMSG("DEP",7560,X_"~"_CCYS) quit
		}
	
	// Currency not defined for this account
	do Runtime.setErrMSG("DEP",7560)
	
	quit


public	PAMTPP	// Positive Amount Post-Processor.

	type public String V,X

	if (X="")!(X=V) quit

	// Amount must be positive
	if X<0 do Runtime.setErrMSG("DEP",7549) quit

	quit


KTRN(String SOURCE,String REFNO)	// Kill Transaction Reference Number

	/*
	   Kills the ^TRREFNO record that was originally created for this deal.
	   Only executed if in create mode and user "Q"uits instead of "Files".

	   Arguments:
	   . SOURCE Transaction Source  /TYPE=N
	   . REFNO  Transaction Reference Number /TYPE=T

	*/
	
	if REFNO="" quit
	
	do Db.delete("TRREF","TYPE=:SOURCE AND REFNO=:REFNO")

	quit


	// MSG* subroutines below called from DEAL1 file for computed data items.

MSG202(Date mtdt,Boolean mtflg)

	type Date newdate 
	
	set newdate=$$DAT^%ZM(mtdt,"YY/MM/DD")
	
	// Completed on ~p1
	if mtdt,mtflg quit $$^MSG(7550,newdate)
	
	// Not completed
	if 'mtdt,mtflg quit $$^MSG(7554)
	
	// Not required
	if 'mtflg quit $$^MSG(7555)
	
	quit ""


MSG210(Date mtdt,Boolean mtflg)

	type Date newdate 
	
	set newdate=$$DAT^%ZM(mtdt,"YY/MM/DD")
	
	// Completed on ~p1
	if mtdt,mtflg quit $$^MSG(7550,newdate)
	
	// Not completed
	if 'mtdt,mtflg quit $$^MSG(7554)
	
	// Not required
	if 'mtflg quit $$^MSG(7555)
	
	quit ""


MSG300(Date mtdt,Boolean mtflg)

	type Date newdate 
	
	set newdate=$$DAT^%ZM(mtdt,"YY/MM/DD")
	
	// Completed on ~p1
	if mtdt,mtflg quit $$^MSG(7550,newdate)
	
	// Not completed
	if 'mtdt,mtflg quit $$^MSG(7554)
	
	// Not required
	if 'mtflg quit $$^MSG(7555)
	
	quit ""


CORREDSC(String PAIDBYS)	// Correspondent Description

	/*
	   Computed data item for correspondent description.

	   Arguments:
	   . PAIDBYS SWIFT Address/Bank ID Code /TYPE=T

	*/

	if PAIDBYS.get()="" quit ""
	
	type RecordUTBLCORRE corre=Db.getRecord("UTBLCORRE","KEY=:PAIDBYS")
	
	quit corre.name
	

END(RecordDEAL1 fDEAL1)		// DEAL1 Record	

	// End of processing - free locks, display end message from MSG table.
	
	type public Boolean delete,newdeal
	type public String ER,NOINT,RM,VFMQ
	
	type Boolean flg = 0
	type String msg = ""
	
	if (ER.get())!(%ProcessMode=2)!(%ProcessMode=4) quit
		
	set newdeal=newdeal.get()	// set in FILE if the new deal if filed

	// If DEAL1.INSTRFLG=0, display MSG "with incomplete instructions",
	// else use "with complete instructions".
				
	if NOINT.exists() do {
		if 'fDEAL1.exists() set fDEAL1=Db.getRecord("DEAL1","NOINT=:NOINT")
		set flg=fDEAL1.instrflg
				
		// Deal record ~p1 created with complete/incomplete instructions			
		set msg=$S('flg.isNull():$$^MSG(7558,NOINT),1:$$^MSG(7559,NOINT))
		}
	
	if VFMQ="Q" do {
		// Deal record not created
		if (%ProcessMode=0)&(newdeal'=1) set RM=$$^MSG(7566) quit

		// Deal record ~p1 created with complete instructions
		if (%ProcessMode=0)&(newdeal)&(flg="") set RM=$$^MSG(7559,NOINT) quit

		// Deal record ~p1 created with complete instructions
		if (%ProcessMode=0)&(newdeal)&(flg=1) set RM=$$^MSG(7558,NOINT) quit

		// Deal record ~p1 created with complete instructions
		if (%ProcessMode=1)&(flg="") set RM=$$^MSG(7559,NOINT) quit

		// Deal record ~p1 not modified
		if %ProcessMode=1 set RM=$$^MSG(7567,NOINT) quit

		// Deal record ~p1 not deleted
		set RM=$$^MSG(7568,NOINT)
		}
		
	else  do {
		
		if %ProcessMode=0 set RM=msg quit			
			
		// Deal record ~p1 created with complete instructions
		if (%ProcessMode=1)&(newdeal)&(flg=1) set RM=$$^MSG(7558,NOINT) quit

		// Deal record ~p1 deleted
		if (%ProcessMode=1)&(delete.get()) set RM=$$^MSG(7565,NOINT) quit

		// Deal record ~p1 modified
		if %ProcessMode=1 set RM=$$^MSG(7564,NOINT) quit
		}
		
	set ER="W"
	
	quit
	
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60346^62125^Dan Russell^17070"	// Signature - LTD^TIME^USER^SIZE
