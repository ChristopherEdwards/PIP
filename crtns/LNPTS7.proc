public LNPTS7(RecordLN ln, RecordTTX ttx, RecordTRN trn)

	/*
	Loan Disbursement
	       ORIG:  David Caliendo (5527) - 06/24/86

	---- Revision History ------------------------------------------------

	05/30/06 - DESHPANDE S K - CR 20748
		   Replaced public variable %TRNSEQ with call to 
		   ttx.getStoredValue("TranSeq")

	02/17/06 - panyaras - CR 19546.
		   In AVL^LNPTS7, Moved the setting of AVLBAL with the tolerance
		   calculation to after the permanent holds calculation.	

	02/02/06 - Srinivar / SmithCD - CR 16890
		   Replaced the references of LFD with
		   '(%EffectiveDate&(%EffectiveDate<CUVAR2)).
		   Performed some minor cleanup.
		   
	08/29/05 - KELLYP - CR 17026
		   Modified FMAVL and FMA sections to retrieve a DEP object 
		   instead of a LN object when retrieving the front-money 
		   account.  Also removed pre-2003 revision history.
	
	05/13/05 - KinI - 15524
		   Modified IRNC section to reset JD instead on ln.bndt.
	
	02/02/05 - arpavc - CR 14330
		   Cleaned up miscellaneous compiler issues.  Changed call into 
		   ^LNPTS to pass ln object.
		   
	05/27/04 - RussellDS - CR10298
		   Removed instantiation of RecordTRN in S1 section.  It is
		   passed as a parameter and the attempt to re-instantiate it
		   resulted in it being destroyed.

	*/

	type public String CTL
	type public Date CUVAR2
	
	set CTL=$E(CTL)
	do INIT(.ln,.ttx,.trn)

	quit


INIT(RecordLN ln, RecordTTX ttx, RecordTRN trn)
	
	type public Number ZAMT
	type public String E23
	
	type Number FMAVL,IRN,%ZAMT
	type Date XDAT
	
       	// Temporarily save ZAMT
	set %ZAMT=ZAMT
	set FMAVL=0 
	set IRN=ln.irn
	if 'ln.fmo!'ln.fma do EXEC(.ln,.ttx,.trn) quit
	if $E(E23,4) do {
		set FMAVL=$$FMAVL(.ln) 
		if ln.fmo=1 do FMA(.ln,.ttx)
		}
	do EXEC(.ln,.ttx,.trn)

	quit


EXEC(RecordLN ln, RecordTTX ttx, RecordTRN trn)
	 
	type public Boolean ER
	type public String CTL,ET,E23
	type public Number SAVE,ZAMT
	
	type Number BALCMP,DSBAMT
	
	if 'ZAMT!ER quit
       	if %EffectiveDate'=ln.dtnt,ln.bndt<(%SystemDate-1),(ln.pcidstat'>0) set ET="EFDODT" set ER=1 do ^UTLERR quit
	set DSBAMT=ZAMT

	// This is a commitment transfer.

	// Update credit limit and total disbursed amount.
	if $E(CTL,2) do {
		set ln.crlmt=ln.crlmt+ZAMT 
		set ln.tdr=ln.tdr+ZAMT
		}

	if $E(E23,4) do {

		do AVL(.ln)

		/*
		  At this point, %ZAMT is the total transaction amount and ZAMT is
		  only the amount applied to the loan (with the difference 
		  going to the front money account)
		*/

       		do SETOVR(.ln,.ttx,.trn)

		set:'SAVE.exists() SAVE="" 
		set SAVE=SAVE_ln.ladt

		// Update TDR, if not already updated by commitment transfer
		if '$E(CTL,2) set ln.tdr=ln.tdr+ZAMT

		set ln.cntdr=ln.cntdr+1 set ln.schbal=ln.schbal+ZAMT
		
		// first disbursement
		if ln.cntdr=1 set ln.org=ZAMT set ln.odd=%EffectiveDate
		}

	do S1(.ln,.ttx,.trn)

	quit


S1(RecordLN ln, RecordTTX ttx, RecordTRN trn)

	/*
	   G/L, UDBAL and BAL will be updated under the following conditions:

	   Flags		     	    |    Affected
	    $E(E23,4)  REVF  ARUF $E(CTL,2) |  BAL   UDBAL   G/L

		 0      0     0       0	 Y      N     "P"
		 0      0     1       0	 Y      N     "P"
		 0      1     0       0	 Y      Y     "P"
		 0      1     1       0	 N      Y     "U"
		 1      0     0       0	 Y      Y     "P"
		 1      0     1       0	 N      Y     "U"
		 1      1     0       0	 Y      Y     "P"
		 1      1     1       0	 N      Y     "U"
		0/1    0/1   0/1      1	 Y      N     "P"

	   Update UDBAL
	*/

	type public Boolean ER
	type public String CTL,E23,LTC
	type public Number BALCMP,CID,DSBAMT,%INTA,IRN,LNMDLR,PRETRN(),ZAMT,%ZAMT
	
	type Number HABL1

	if '$E(CTL,2)&($E(E23,4)!ln.revf) set ln.udbal=ln.udbal-ZAMT

	// Update G/L
	if '$E(CTL,2),ln.aruf,((ln.revf&'$E(E23,4))!$E(E23,4)) do GL^LNPTSU(.ttx,ZAMT,5)
	else  do GL^LNPTSU(.ttx,ZAMT,2)

	// Update BAL
	if $E(CTL,2)!'ln.aruf!('$E(E23,4)&'ln.revf&'$E(CTL,2)) set ln.bal=ln.bal+ZAMT

	set BALCMP=ln.bal 
	if ln.aruf set BALCMP=ln.bal-ln.udbal

	// debit ratification
	if ln.drf,$E(E23,4) do DRAT(.ln,.ttx) if ER quit

	if $E(CTL,2) do FBP^LNPTSU(.ln,ZAMT)
	if $E(E23,12),ln.cntdr>0 do {
		new V
		set V=ZAMT 
		if V>ln.pvar set V=ln.pvar
		set ln.pvar=ln.pvar-V

		// Transaction Source of Funds
		if V set ttx.tso=$$FIELDIN^UTSO(ttx.tso,"PVAR",V)
		}

	set ln.balcol=ln.balcol+ZAMT
       	if 'ln.idgp do BALINT(.ln)
   	if ln.idgp do IDGP(.ln)

	// Stop Payments
	if ln.stp,(ln.crlmt<ln.balint) set ln.balint=ln.crlmt

	// Find out if next interest rate has not been calculated
	do IRNC(.ln,.trn)

	do INTA^LNPTSU(.ttx,.ln,ZAMT)
	set ln.inta=ln.inta+%INTA

	do %HSEQ^LNPTSU(.ttx,"*#P#"_ZAMT)
	set ln.inta=$$^SCARND(ln.inta,0,"","",5)

	// Capture highest account balance
	if BALCMP>ln.habl1 set ln.habl1=BALCMP
	if BALCMP>ln.habl2 set ln.habl2=BALCMP

	// Deferred Interest Capitalization
	if $E(E23,16) do {
		set ln.dic=ln.dic+ZAMT
		set ln.dicytd=ln.dicytd+ZAMT

		// Commercial Commitment Link
		if ln.ccl set ln.balint=ln.balint-ZAMT
		}

	set ZAMT=%ZAMT-ZAMT
	if ln.fma,ln.fmo=2 do FMA(.ln,.ttx)

	// FILE

	set ZAMT=0
	set ln.irn=IRN
	
	/*
	If the balance was negative prior to this transaction, BALINT cannot be
	adjusted. BALINT must be recalculated.
	*/

	if PRETRN("BALCMP")<0 do ^LNPTS(.ln)

	// Call PMAXBAL to check Previous Largest Loan Balance
	set HABL1=ln.habl1

	if '$G(HABL1) set HABL1=0
	do EXEC^PMAXBAL(ln.acn,CID,HABL1) 
	quit:ER

	/* Find fees associated with this transaction
	   W/H Adj (Interest and Distributions)
	*/

	if $E(trn.pcf,4) do {
		do FEEDUE^LNFEEU(.ln,.ttx,CID,2,11001,%EffectiveDate,"",DSBAMT,"P",LTC)
		do FEEDUE^LNFEEU(.ln,.ttx,CID,2,11001,%EffectiveDate,"",DSBAMT,,LTC)
		}

	#IF CUVAR.LIMPRO if $G(LNMDLR)'=1 do INIT^PROCLIM

	quit
	

DRAT(RecordLN ln, RecordTTX ttx)

	// Extract new interest rate

	type public Boolean ER
	type public Number BALCMP,CID,HSEQ,IRN,TSEQ
	type public String SPR,WIRN()
	type public Date CUVAR2
	
	type String INDEX

	set INDEX=$$INDDATA^LNU(.ln)

	type RecordPRODDFTL proddftl=Db.getRecord("PRODDFTL","TYPE=ln.type")
		
	set IRN=proddftl.irn

	if $TR(INDEX," ","")'="" do {
		// Int/Div Matrix
		
		type String PAR()
		type Number RATE,RRATE,SRATE,URATE

		set PAR("INDEX")=INDEX
		set PAR("MATRIX")=ln.intmat
		set PAR("IXLOAD")=0
		set PAR("NOTSER")=0
		set PAR("IPMODE")=0
		set PAR("ROUND")=1
		set PAR("LIMIT")=0

		do CTL^UINDX(.ln,%EffectiveDate,BALCMP,.PAR()) 
		quit:ER
		set IRN=RATE
		set ln.indo=SRATE
		}

	// Nominal Int/Div Rate
	if IRN="" set IRN=ln.irn quit
	if IRN-ln.irn=0,'(%EffectiveDate&(%EffectiveDate<CUVAR2)) quit

	do HSEQ^LNPTSU(.ttx)

	type RecordHIST hist=Class.new("RecordHIST")
	
	set hist.cid=CID
	set hist.tseq=Db.nextVal("HIST","CID,TSEQ")
	set hist.tjd=%SystemDate
	set hist.efd=%EffectiveDate
	set hist.tlo=%UserStation
	set hist.tcmt=CID_"[LN]IRN:"_ln.irn_":"_IRN_":HSEQ#"_HSEQ
	set hist.cdt=%CurrentDate
	set hist.time=%CurrentTime
	set hist.uid=%UserID
	set hist.spr=$G(SPR)

	do hist.bypassSave()

	if '(%EffectiveDate&(%EffectiveDate<CUVAR2)) quit

	set $P(WIRN(%EffectiveDate),"|",1)=IRN 
	set $P(WIRN(%EffectiveDate),"|",3)=1

	quit


FMAVL(RecordLN ln)	// Find available amount for front money account
	
	type Number FMAVL
	type RecordDEP dep=Db.getRecord("DEP","CID=:ln.fma")

	// Calculate available balance in deposit account
	set FMAVL=dep.bal-dep.chkhld-dep.phld 

	// Minimum Balance
	set FMAVL=FMAVL-dep.minbal
	if FMAVL<0 set FMAVL=0

	quit FMAVL


FMA(RecordLN ln, RecordTTX ttx)

	// Front Money Account
	
	type public Number FMAVL,XTFR(),ZAMT,%ZAMT

	type String TSO
	type Number SCID,SSEQ,TAMT

	set TSO="FMA#"
	set SCID=ln.cid
	
	type Number CID
	
	set CID=ln.fma
	set TAMT=$S(FMAVL>ZAMT:ZAMT,1:FMAVL)
	if TAMT'>0 quit

	do GL^LNPTSU(.ttx,TAMT,7)

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:dep.type")
 
	set ZAMT=ZAMT-TAMT 
	set %ZAMT=%ZAMT-TAMT
	
	do POST^LNTRB(.ttx,CID,prodctl.drtrgp,TAMT,%EffectiveDate,%UserStation,TSO,,ln.crcd)
	set CID=SCID
	
	type Number LTRNSEQ = ttx.getStoredValue("TranSeq")
	
	set XTFR(LTRNSEQ,"FMA")=TAMT_","_CID
	do %HSEQ^LNPTSU(.ttx,"*#FMA#"_TAMT)
	
	quit


AVL(RecordLN ln)	// Available balance

	type public Number AVLBAL,CID,FMAVL,ZAMT
	
	type Number A,PHLDAMT,X
	type Date XDAT

	// Days Delinquent - Restrict Advances
	if ln.cntdr,$L(ln.dist1nd),(ln.ddra+ln.dist1nd<%EffectiveDate) set AVLBAL=0 quit
	set XDAT=999999
	if $L(ln.mdt) set XDAT=ln.mdt

	// Credit Limit Maturity Date
	if $L(ln.clmd),ln.clmd<XDAT set XDAT=ln.clmd

	// loan or credit limit has matured
	if XDAT'>%EffectiveDate set AVLBAL=0 quit

	// Consider interest billed/unpaid
	set A=0

	// Subtract Int Billed from Available Bal
	if ln.sibf do {
		if ln.cuin>0 set A=A+ln.cuin
		if ln.unin>0 set A=A+ln.unin
		}

	// If LN.RACLC=1 Consider late charges assessed/not paid
     	if ln.raclc set A=A+ln.lchg

    	// Reduce Avail CR by Loan Fees Outstanding
	if ln.raclf set A=A+$$XLN09EX^LNCDI(CID,21)

	set PHLDAMT=0
	// Permanent Hold Indicator
	if ln.phld set PHLDAMT=$$^UHLD(ln.cid,ln.balcmp,ln.crcd)

	// Check for permanent holds
	set AVLBAL=ln.udbal-ln.chkhld-A-PHLDAMT
	
	// Loan Withdrawal Limit Processing 
	if ((ln.wdlmtp)!(ln.collimpr))&(ln.wdlmt'="") do {
		// Loan Withdrawal Limit
		set AVLBAL=AVLBAL-(ln.crlmt-ln.wdlmt)
		if AVLBAL<0 set AVLBAL=0
		}
	/*
	  Some products provide a certain percentage of over-limit tolerance,
	  so that a disbursement transaction will generate a restriction only
	  when the resulting balance exceeds the credit limit plus the tolerance
	  amount.
	*/
	
	if ln.oltp set AVLBAL=AVLBAL+(ln.crlmt*ln.oltp/100)	    
	
	if AVLBAL'<ZAMT quit
	set X=ZAMT-AVLBAL 
	if X>FMAVL set X=FMAVL
	set ZAMT=ZAMT-X

	quit


public	CTI(RecordLN ln, RecordTTX ttx, RecordTRN trn)

	// Commitment transfer in

	type public String CTL
	
	set CTL=$E(CTL,1)_$E("0",1-$L(CTL))_1_$E(CTL,3,99)
	do INIT(.ln,.ttx,.trn)

	quit


public IRNC(RecordLN ln, RecordTRN trn)

	// Find out if next rate has/has not been calculated for use with INTA

	type public Boolean ER
	
	type Date JD
	type String PCF
	
	// Only calc INTA for loans with pre-calculated interest
	Type RecordSTBLPCM stblpcm=Db.getRecord("STBLPCM","KEY=:ln.pcm")

	if $E(stblpcm.pcmp,2)-1 quit
		
	set PCF=trn.pcf
	if '$E(PCF,13) quit
	
	if ln.bloff="1P" set JD=$$NJD^UFRE(ln.bndt,ln.dist1fre) quit:ER	
	else  set JD=ln.bndt+ln.bloff

	// Get rate or set up override
	set ln.irn=$$IRN^LNBLDE(.ln,JD)

	quit


SETOVR(RecordLN ln, RecordTTX ttx, RecordTRN trn)

	// Set up any necessary overrides

	type public Number AVLBAL,CID,ZAMT,%ZAMT
	type public String OVR(,,)
	type public Boolean IDC
	
	type Boolean PCFL35
	
	// Check for Maximum Aggregate Draw Restriction
	set PCFL35=$E(trn.pcf,35)

	if PCFL35,ln.revf,ln.maxaggr'="" if ((ln.tdr+ZAMT)>ln.maxaggr) set OVR(CID,"OVR","MAXAGGR")=ln.maxaggr

	if ZAMT>AVLBAL set OVR(CID,"OVR","AVLBAL")=$$^SCARND(AVLBAL,0,CID)
	if %ZAMT<ln.mindr set OVR(CID,"OVR","MINDR")=$$^SCARND(ln.mindr,0,CID)

	if ln.maxdrct'="",ln.cntdr'<ln.maxdrct set OVR(CID,"OVR","MAXDRCT")=ln.maxdrct
	if ln.maxdrct=1,'ln.cntdr,+(ln.crlmt-ZAMT) set OVR(CID,"OVR","DR1")=$$^SCARND(ln.crlmt,0,CID)

	// ICPA is set to adjust
	if ln.icpa set ln.baola=ln.baola+ZAMT
       	else  set ln.baola=ln.balint+ZAMT

	set ln.ladt=%EffectiveDate

	if 'IDC,ln.dist1nd,%EffectiveDate'<(ln.dist1nd+ln.ddra) set OVR(CID,"OVR","DEL1")=$$DAT^%ZM(ln.dist1nd)
	// Commitment Processing Flag
	if ln.cpf set OVR(CID,"OVR","CPF")=""
	if ln.incdr,%ZAMT#ln.incdr set OVR(CID,"OVR","INCDR")=$$^SCARND(ln.incdr,0,CID)

	// Stop payments interface
	if ln.stp'="" do STOP^DEPPO(.ln,.ttx)
		
	quit


BALINT(RecordLN ln)	// Calculate BALINT    

	type public Number ZAMT
	
       	set ln.balint=ln.balint+ZAMT
	if $E(ln.iam)=1 set ln.balint=ln.balint-(ln.iun-(ln.ipl-ln.extamt))

	quit


IDGP(RecordLN ln)

	// Initalize BALINT and create disbursement record

	type public Number CID,ZAMT
	type Date EXPDT

	set EXPDT=%EffectiveDate+ln.idgp-1

	type RecordLNDS1 lnds1=Db.getRecord("LNDS1","CID=:CID,SDD=:%EffectiveDate",1)

	set lnds1.sda=lnds1.sda+ZAMT
	set lnds1.sds=1
       	set lnds1.sdm=2
	set lnds1.expdt=EXPDT

	do lnds1.bypassSave()

	quit

vSIG()	quit "60457^32821^Shriram Deshpande^11592"	// Signature - LTD^TIME^USER^SIZE
