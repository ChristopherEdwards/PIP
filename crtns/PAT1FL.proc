PAT1FL(RecordPAT1 pat1, String vpar, Boolean vparNorm) // PAT1 - Batch Level Of PAT Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              03/21/2006
	// Trigger Definition (2)                      12/17/2004
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = pat1.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(pat1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(pat1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SRC = pat1.src
	type String ACN = pat1.acn
	type String BATCH = pat1.batch

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SRC").exists()!vx("ACN").exists()!vx("BATCH").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PAT1",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PAT1","SRC = :pat1.src and ACN = :pat1.acn and BATCH = :pat1.batch") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SRC
	type public String ACN
	type public String BATCH

	type RecordPAT1 pat1 = Db.getRecord("PAT1","SRC=:SRC,ACN=:ACN,BATCH=:BATCH")
	if (%ProcessMode = 2) do {
		do pat1.setMode(2)

		do PAT1FL(pat1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPAT1 pat1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PAT1","SRC = :pat1.src and ACN = :pat1.acn and BATCH = :pat1.batch") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(pat1))  S ^PAT(vobj(pat1,-3),vobj(pat1,-4),vobj(pat1,-5))=vobj(pat1)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.pat1)                // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPAT1 pat1

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.pat1)                 // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^PAT(vobj(pat1,-3),vobj(pat1,-4),vobj(pat1,-5))    // Delete Record
	quit


vreqn // Validate required data items

	type public RecordPAT1 pat1

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPAT1 pat1

	if pat1.src.isNull() do vreqerr("SRC") quit
	if pat1.acn.isNull() do vreqerr("ACN") quit
	if pat1.batch.isNull() do vreqerr("BATCH") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PAT1","MSG",1767,"PAT1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordPAT1 pat1
	if 'pat1.acn.isNull() set vfkey("^CIF("_""""_pat1.acn_""""_","_1_")")="PAT1(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordPAT1 pat1
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":pat1.acn") set vERRMSG = $$^MSG(8563,"PAT1(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After insert

	type public RecordPAT1 pat1
	/*
	 
	  ----------------------- Revision History ----------------------------
	  09/15/99 - MOTENJ - 31126
	       Converting to PSL. Pat1 integrity checks
	
	*/

	if pat1.start'="",pat1.start<%SystemDate do Runtime.setErrSTBLER("PAT1","LPSTDT") if ER quit 
	
	if pat1.stop do { quit:ER 
	if pat1.stop'>pat1.start do Runtime.setErrSTBLER("PAT1","PAT001") if ER quit
	if pat1.stop<%SystemDate do Runtime.setErrMSG("PAT1",748) if ER quit 
	}
	quit
	

vbd1 // Trigger BEFORE_DELETE - Before Delete Trigger

	type public RecordPAT1 pat1
	/*
	---- Revision History -----------------------------------------------

	01/30/02 - KELLYP - 46680
		Added this trigger to delete PAT sequence records when
		deleting a PAT1 batch record.  DAYEND problems were occurring
		when the PAT1 batch record was deleted via PFW because the
		associated PAT sequence records were left around.

	*/

	new XACN,XBCH,XSRC

	set XACN=pat1.acn,XBCH=pat1.batch,XSRC=pat1.src

	// 46680 - Delete associated PAT sequences when deleting PAT1 record
	do Db.delete("PAT","ACN=:XACN AND BATCH=:XBCH AND SRC=:XSRC") quit:ER

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPAT1 pat1

	if pat1.src.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SRC", vRM) quit
	set X = pat1.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = pat1.batch if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("BATCH", vRM) quit
	if pat1.ccode.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CCODE", vRM) quit
	set X = pat1.chcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CHCID", vRM) quit
	if pat1.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = pat1.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
	set X = pat1.start if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("START", vRM) quit
	set X = pat1.stop if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STOP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PAT1","MSG",979,"PAT1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordPAT1 pat1)	//PAT1 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="O" do {
			do vj1(.pat1)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj2(.pat1)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj2(.pat1)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordPAT1 pat1)	// HIST_I  Table CIFH  Pat batch create

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=pat1.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","PAT1","BATCH",pat1.batch,$$^MSG(7054)_":"_$$^MSG(4341,pat1.src))
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordPAT1 pat1)	// HIST_U  Table CIFH  Pat batch create

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=pat1.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^CIFFUNCS("","PAT1",vdi,vold,vnew,$G(EFD))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordPAT1 pat1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SRC").exists() set vux("SRC") = vx("SRC")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("BATCH").exists() set vux("BATCH") = vx("BATCH")
	do vkey(1) set voldkey = pat1.src_","_pat1.acn_","_pat1.batch // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = pat1.src_","_pat1.acn_","_pat1.batch // Copy new keys into object
	type RecordPAT1 vnewrec = pat1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PAT1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordPAT1 pat1

	if vux("SRC").exists() set pat1.src = vux("SRC").piece("|",i)
	if vux("ACN").exists() set pat1.acn = vux("ACN").piece("|",i)
	if vux("BATCH").exists() set pat1.batch = vux("BATCH").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordPAT1 pat1
	type public String vpar

	do Db.delete("PAT","SRC=:pat1.src AND ACN=:pat1.acn AND BATCH=:pat1.batch",vpar) // Cascade delete

	quit
