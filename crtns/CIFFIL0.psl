CIFFIL0 // CIF DATA-QWIK filer, part (2)
 // Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 05/09/2007 16:32 - joynerd

	quit		// Not called from top


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau10 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("AUD1").exists()!vx("AUD1CF").exists()!vx("AUD1ND").exists()!vx("AUD1LD").exists()!vx("AUD2").exists()!vx("AUD2CF").exists()!vx("AUD2ND").exists()!vx("AUD2LD").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CIFOFF").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CO").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CRRATEND").exists()!vx("CRRATELD").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DARCOVR").exists() do vau7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DEPCLOVR").exists() do vau8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DOD").exists() do vau9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("EMPSTATE").exists()!vx("EMPZIP").exists()!vx("EMPCNTRY").exists() do vau11 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("GOVT").exists()!vx("SIC").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("INTYPE").exists() do vau12 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MAD1").exists()!vx("MAD2").exists()!vx("MAD3").exists()!vx("MAD4").exists()!vx("MCITY").exists()!vx("MCNTRY").exists()!vx("MLOC").exists()!vx("MSTATE").exists()!vx("MZIP").exists()!vx("PAD1").exists()!vx("PAD2").exists()!vx("PAD3").exists()!vx("PAD4").exists()!vx("PCITY").exists()!vx("PCNTRY").exists()!vx("PLOC").exists()!vx("PSTATE").exists()!vx("PZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT900").exists()!vx("MT900THR").exists() do vau13 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT910").exists()!vx("MT910THR").exists() do vau14 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MZIP").exists() do vau15 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NR").exists() do vau16 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIP").exists() do vau17 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SCHRVND").exists()!vx("SCHRVLD").exists() do vau18 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("SEMFIN").exists() do vau19 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STMTRVND").exists()!vx("STMTRVLD").exists() do vau20 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCIF cif
	do vbu16 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do vbu19 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(cif,.vx(),10,"|") quit
	if vx("BOO").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CREREFRE").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DOB").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DOD").exists() do vbu4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DODSABL").exists() do vbu5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FINSTFRE").exists() do vbu6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT320").exists() do vbu7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT900").exists() do vbu8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT910").exists() do vbu9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT940").exists() do vbu10 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT942G1").exists()!vx("MT942G2").exists()!vx("MT942").exists() do vbu11 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MT950").exists() do vbu12 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NAM").exists()!vx("LNM").exists()!vx("FNAME").exists()!vx("MNAME").exists()!vx("SUFFIX").exists() do vbu13 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PIN1CNTR").exists() do vbu14 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PIN1DEL").exists() do vbu15 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PIN2CNTR").exists() do vbu17 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PIN2DEL").exists() do vbu18 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIP").exists()!vx("MZIP").exists() do vbu24 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("STAT").exists()!vx("CUSTCHDT").exists() do vbu20 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("TAXID").exists() do vbu21 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("USRESTAT").exists() do vbu22 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("XNAME").exists() do vbu23 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(cif,.vx(),10,"|")
	quit


vad1 // Trigger AFTER_DELETE - After delete

	type public RecordCIF cif
	kill par("CASDEL")
	quit
	

vai1 // Trigger AFTER_INSERT_UPDATE - After Insert Trigger

	type public RecordCIF cif
	/*
	--Revision History-----------------------------------------------------------

	03/14/07 - KumarSS - CR 25177
		   Removed Invalid Unicode Characters.

	06/02/06 - GIRIDHAL - 21207
	 	   Trigger has been modified to validate the ZIP code, state, and
	 	   country fields associated with a customer's employer
	 	    
	01/17/05 - HILLANBRAND - 13686
		   Changed call for TAXID verfication to call directly into EXT^VERTIN.

	06/14/04 - SCHWARTZC - CR10219
		   Removed code to default the relationship matrix (CIF.RELMAT)
		   from the product type.  The code has been moved to the
		   BEFORE_INSERT trigger to prevent calling the CIF filer
		   from the triggers, which was causing a "Record already
		   exists" error when creating customers.

	11/12/02 - CARROLLJ - 43583
		   PSL conversion cleanup.	

	08/23/01 - VETSENM - 46279:18
		   Trigger modified to default Relationship Matrix value from
		   from product type to customer record.            

 	11/2/00 - Spier - 42606
		   Added call to CHKSTATE^ADDRUTL to validate states against the
		   STBLCNTRY1 table. This check can not be done by DQ table validate.

								03/29/00 - SIVCHUKA - 37734
																			Add new check to prevent account creation prior to
																			PRODCTL.DTBEG
		   Optimized performance by passing a parameter to SCADAT
																			calls, reference LRQ 58163-03

	01/17/00 - KELLYP - 36682
		   Added checks on MT900THR and MT910THR (RF of these triggers
		   from 6.2). 

	12/08/99 - Chiang - 33890
																			Modified to convert triggers into PSL format.

	04/16/99 - CARROLLJ - 31428
	           Added integrity check to check if plan owner's date of death for
		   records with dates with the year prior to the current year.
	*/

	// ----- Validate Postal/zip code
	
	do ZIP^PROCZIP(cif.pcntry,cif.pstate,cif.pzip) if $G(ER) do Runtime.setErrMSG("CIF",3333,RM) quit:ER 
	do ZIP^PROCZIP(cif.mcntry,cif.mstate,cif.mzip) if $G(ER) do Runtime.setErrMSG("CIF",3333,RM) quit:ER 
	do ZIP^PROCZIP(cif.empcntry,cif.empstate,cif.empzip) if $G(ER) do Runtime.setErrMSG("CIF",3333,RM) quit:ER
	
 	//Validate State

	if cif.mstate'="",$$CHKSTATE^ADDRUTL("CIF",cif.mcntry,cif.mstate) quit:ER
	if cif.pstate'="",$$CHKSTATE^ADDRUTL("CIF",cif.pcntry,cif.pstate) quit:ER
	if cif.empstate'="",$$CHKSTATE^ADDRUTL("CIF",cif.empcntry,cif.empstate) quit:ER


	// ----- Validate Tax Id	
	do EXT^VERTIN(.cif)
	if ER do Runtime.setErrSTBLER("CIF","INVLDTX") quit:ER         // Log fatal error
	
								// ----- New check to prevent account creation prior to PRODCTL.DTBEG
															new ddate,diff,TYPE
	       set TYPE=cif.type
	       set dtbeg=Db.getOneRow("DTBEG","PRODCTL","TYPE")
	       set dao=cif.dao
															if dao<dtbeg set ER=1
	       if ER set ddate=$$DAT^%ZM(dtbeg) do Runtime.setErrMSG("CIF",2036,"TYPE~ddate") quit:ER
													 
	// ----- Validate audit information
	do { quit:ER 
		if cif.aud1="",cif.aud1cf="",cif.aud1nd="",cif.aud1ld="" quit 
		if cif.aud1'="",cif.aud1cf'="",cif.aud1nd'="",cif.aud1ld'="" quit 
		do Runtime.setErrMSG("CIF",1767,"AUD1 AUD1CF AUD1ND AUD1LD") quit:ER 

		}
	do { quit:ER 
		if cif.aud2="",cif.aud2cf="",cif.aud2nd="",cif.aud2ld="" quit 
		if cif.aud2'="",cif.aud2cf'="",cif.aud2nd'="",cif.aud2ld'="" quit 
		do Runtime.setErrMSG("CIF",1767,"AUD2 AUD2CF AUD2ND AUD2LD") quit:ER 
		}
	
	// Verify the value exist in [UTBLACC]
	if cif.darcovr,'Db.isDefined("UTBLACC","'L',cif.darcovr") do Runtime.setErrMSG("CIF",1485,"UTBLACC.AC") quit:ER 


	// Verify the date entered if it is end of the month
	if cif.semfin'="",cif.semfin'=$$EOMJD^SCADAT(cif.semfin,1) do Runtime.setErrMSG("CIF",2848) quit:ER 
	

	// Only execute following code during account creation
	if %ProcessMode=0 do { quit:ER 
		// Duplicate Customer Search
		if 'Db.isDefined("UTBLDUPCIF","1") quit 
		new xacn,XACN,CIFDATA
		set CIFDATA=""
		do SEARCH^DUPLCIF(CIFDATA,.XACN) quit:ER 
		set xacn=$P($O(XACN("")),$C(9),1) if xacn'="" do Runtime.setErrXBAD("CIF","DUPCIF",xacn) quit:ER 
		}


	// Check Plan Owner's Date of Death
	if %ProcessMode=2 do { quit:ER 
		if 'cif.dod quit 
		set TYR=$$YEAR^SCADAT(%SystemDate,1)
		set DYR=$$YEAR^SCADAT(cif.dod,1)
		if (TYR-1)'>DYR quit 
	
		new rs 
		type ResultSet rs=Db.select("PLNFMV,PVMAD","IRA","ACN=:ACN AND TAXYR=:TYR") 
		if rs.isEmpty() quit
		set INFO=rs.next()
	
		if (rs.getCol(1))!(rs.getCol(2)) do Runtime.setErrXBAD("CIF","CIFPLN",) quit:ER 
		}

	// MT900THR - MT900 Debit Threshold
	if (cif.mt900=1)&(cif.mt900thr="") do Runtime.setErrMSG("CIF",4077) quit:ER

	// MT910THR - MT910 Credit Threshold
	if (cif.mt910=1)&(cif.mt910thr="") do Runtime.setErrMSG("CIF",4078) quit:ER

	quit

vau1 // Trigger AFTER_UPD_ADDRESS - AFTER ADDRESS FIELDS ARE UPDATED

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------	
	 05/31/06 - GIRIDHAL - 21510
	 	Rewriting the trigger logic to use PSL objects.
	 	
	 05/15/01 - ANTONOVS - 43026
		Add logic to update SADDRCIF - seasonal address table if 
		seasonal address is in effect (currently is mailing address)
	
	 11/02/00 - Spier - 42606
		Modified to add lookup table checking for states PSTATE,MSTATE
		Since the defined lookup requires 2 keys, DQ can not do the validation.

	 02/25/00 - BECKERW - 35821
		TOTCOMEXP and TOTOUTEXP need to rounded to the precision
		indicated by the currency code.  It was causing decimal
		format errors.  Added rounding function when inserting or
		updating EXPCNTRY.	

	 09/17/99 - SCHWARTZC - 28966
		Added the /FRMFILER parameter to the sql update of ACN.  This
		should prevent the DOD and DODSABL restriction messages from
		being displayed for each account.
	
	 05/04/99 - SCHWARTZC - 32889
		Added "N"ew of ACN inside of the I LCCADR D statement.  This
		prevents an undefined error after the SQL UPDATE of the ACN file.
	
	*/
	
	// Update CCLD on the accounts linked to the account as the primary owner.
	if CUVAR.LCCADR do {
		type Number XCID
		type ResultSet rs=Db.select("CID","RELCIF","ACN=:cif.acn AND ROLE='1'")
		while rs.next() do { 
			set XCID=rs.getCol("CID")
			do Db.update("ACN","CCLD=:%SystemDate","CID=:XCID","/NOJOURNAL/FRMFILER")  //cds 9/17/99
			}
		}

	// Country Update
	if (cif.pcntry.oldVal'=cif.pcntry),(CUVAR.LIMPRO = 1) do {
		type Number TOTCOM, TOTOUT
		type String NCN, PCN, TMP

		// PCN - Country before, NCN - Country after
		set PCN = cif.pcntry.oldVal 
		set NCN = cif.pcntry
		set TMP = $$ACCUM^PROCLIM(ACN) 
		set TOTCOM = TMP.piece("|",1) 
		set TOTOUT = TMP.piece("|",2)

		type RecordEXPCNTRY expcnto = Db.getRecord("EXPCNTRY","CNTRY=:PCN",1)		
		set expcnto.totcomexp = expcnto.totcomexp - TOTCOM 
		set expcnto.totoutexp = expcnto.totoutexp - TOTOUT
		set expcnto.totcomexp = expcnto.totcomexp.roundDec()	//WVB - 35821
		set expcnto.totoutexp = expcnto.totoutexp.roundDec()	//WVB - 35821

		do expcnto.save()
	
		type RecordEXPCNTRY expcntn = Db.getRecord("EXPCNTRY","CNTRY=:NCN",1)
		set expcntn.totcomexp = expcntn.totcomexp + TOTCOM
		set expcntn.totoutexp = expcntn.totoutexp + TOTOUT
		set expcntn.totcomexp = expcntn.totcomexp.roundDec()  //WVB - 35821
		set expcntn.totoutexp = expcntn.totoutexp.roundDec()  //WVB - 35821

		do expcntn.save()


		// Update Sovereign Risk Limits
		if cif.govt do {
			type RecordEXPCNSOV expsovo = Db.getRecord("EXPCNSOV","CNTRY=:PCN",1)
			set expsovo.totcomexp = expsovo.totcomexp - TOTCOM 
			set expsovo.totoutexp = expsovo.totoutexp - TOTOUT
			set expsovo.totcomexp = expsovo.totcomexp.roundDec()  //WVB - 35821
			set expsovo.totoutexp = expsovo.totoutexp.roundDec()  //WVB - 35821

			do expsovo.save()	
			
			type RecordEXPCNSOV expsovn = Db.getRecord("EXPCNSOV","CNTRY=:NCN",1)
			set expsovn.totcomexp = expsovn.totcomexp + TOTCOM 
			set expsovn.totoutexp = expsovn.totoutexp + TOTOUT
			set expsovn.totcomexp = expsovn.totcomexp.roundDec()  //WVB - 35821
			set expsovn.totoutexp = expsovn.totoutexp.roundDec()  //WVB - 35821

			do expsovn.save()
			}
		}
		
	//Validate state form lookup table
	type Public Boolean ER
	if cif.isChanged("PSTATE"),cif.pstate'="",$$CHKSTATE^ADDRUTL("CIF",cif.pcntry,cif.pstate) Q:ER
	if cif.isChanged("MSTATE"),cif.mstate'="",$$CHKSTATE^ADDRUTL("CIF",cif.mcntry,cif.mstate) Q:ER

	//Update SADDRCIF with seasonal address if seasonal address is in effect

	type RecordSADDRCIF saddrcif=Db.getRecord("SADDRCIF","ACN",1)

	if saddrcif.getMode() = 0 quit
	
	if saddrcif.sadsd = "",saddrcif.saded = "" quit

	if ((%SystemDate'<saddrcif.sadsd)&(%SystemDate'>saddrcif.saded)) do { quit:ER
		set saddrcif.sad1=cif.mad1
		set saddrcif.sad2=cif.mad2
		set saddrcif.sad3=cif.mad3
		set saddrcif.sad4=cif.mad4
		set saddrcif.scity=cif.mcity
		set saddrcif.scntry=cif.mcntry
		set saddrcif.sstate=cif.mstate
		set saddrcif.szip=cif.mzip

		do saddrcif.bypassSave()
		}

	quit 

vau2 // Trigger AFTER_UPD_LIM - After UPDATE trigger (Limits)

	type public RecordCIF cif
	/*
	 Revision History
	
	02/25/00 - BECKERW - 35821
		TOTCOMEXP and TOTOUTEXP need to rounded to the precision
		indicated by the currency code.  It was causing decimal
		format errors.  Added rounding function when inserting or
		updating EXPCNTRY.
	
	 06/17/98 - ZWITKOWITS - ARQ 29058
	          Modified setting up of EXPIND for the new SIC to fix "Record already
	          exists" error.  Retrofitted following:
	
	     KLINEB - ARQ 28193
	              Added code to check if SIC is not null before inserting/updating
	              exposure data to EXPIND.
	
	*/

	
	quit:'Db.getOneRow("LIMPRO","CUVAR","") 

	if cif.govt.oldVal'=cif.govt do {
		new CONDATA,CNTRY,TMP,TOTCOM,TOTCOMEXP,TOTOUT,TOTOUTEXP,X
		set TMP=$$ACCUM^PROCLIM(ACN) set TOTCOM=$P(TMP,"|",1) set TOTOUT=$P(TMP,"|",2) set TMP=""
		set CNTRY=cif.pcntry
		set CONDATA=Db.getOneRow("TOTCOMEXP,TOTOUTEXP","EXPCNSOV","CNTRY")
		set TOTCOMEXP=$P(CONDATA,$C(9),1) set TOTOUTEXP=$P(CONDATA,$C(9),2)
		if cif.govt=0 do {
			set TOTCOMEXP=TOTCOMEXP-TOTCOM set TOTOUTEXP=TOTOUTEXP-TOTOUT
			if 'TOTCOMEXP,'TOTOUTEXP set X=0 do Db.delete("EXPCNSOV","CNTRY=:CNTRY")
			else  do {
				set TOTCOMEXP=$$^SCARND(TOTCOMEXP,0,"")  //WVB - 35821
				set TOTOUTEXP=$$^SCARND(TOTOUTEXP,0,"")  //WVB - 35821
				set X=0 do Db.update("EXPCNSOV","TOTCOMEXP=:TOTCOMEXP,TOTOUTEXP=:TOTOUTEXP","CNTRY=:CNTRY")
				}
			}
		else  do {
			set TOTCOMEXP=$$^SCARND(TOTCOMEXP,0,"")   //WVB - 35821
			set TOTOUTEXP=$$^SCARND(TOTOUTEXP,0,"")   //WVB - 35821
			if 'TOTCOMEXP,'TOTOUTEXP set X=0 do Db.insert("EXPCNSOV","CNTRY,TOTCOMEXP,TOTOUTEXP",":CNTRY,:TOTCOM,:TOTOUT") quit 
			set TOTCOMEXP=TOTCOMEXP+TOTCOM set TOTOUTEXP=TOTOUTEXP+TOTOUT
			set TOTCOMEXP=$$^SCARND(TOTCOMEXP,0,"")   //WVB - 35821
			set TOTOUTEXP=$$^SCARND(TOTOUTEXP,0,"")   //WVB - 35821
			set X=0 do Db.update("EXPCNSOV","TOTCOMEXP=:TOTCOMEXP,TOTOUTEXP=:TOTOUTEXP","CNTRY=:CNTRY")
			}
		}
	if cif.sic.oldVal'=cif.sic do {
		new CONDATA,SIC,TMP,TOTCOM,TOTCOMEXP,TOTOUT,TOTOUTEXP,X
		set TMP=$$ACCUM^PROCLIM(ACN) 
		set TOTCOM=$P(TMP,"|",1)
		set TOTOUT=$P(TMP,"|",2)

		// Old Industy Code
		set SIC=cif.sic.oldVal
		if $G(SIC)'="" do {
			set CONDATA=Db.getOneRow("TOTCOMEXP,TOTOUTEXP","EXPIND","SIC")
			set TOTCOMEXP=$P(CONDATA,$C(9),1) set TOTOUTEXP=$P(CONDATA,$C(9),2) set CONDATA=""
			set TOTCOMEXP=TOTCOMEXP-TOTCOM set TOTOUTEXP=TOTOUTEXP-TOTOUT
			if 'TOTCOMEXP,'TOTOUTEXP set X=0 do Db.delete("EXPIND","IND=:SIC")
			else  do {
				set TOTCOMEXP=$$^SCARND(TOTCOMEXP,0,"")   //WVB - 35821
				set TOTOUTEXP=$$^SCARND(TOTOUTEXP,0,"")   //WVB - 35821
				do Db.update("EXPIND","TOTCOMEXP=:TOTCOMEXP,TOTOUTEXP=:TOTOUTEXP","IND=:SIC")
				}
			}

		// New Industy Code
		set SIC=cif.sic
		if $G(SIC)'="" do {
			if 'TOTCOM,'TOTOUT quit 
			set CONDATA=Db.getOneRow("TOTCOMEXP,TOTOUTEXP","EXPIND","SIC")
			set TOTCOMEXP=$P(CONDATA,$C(9),1) set TOTOUTEXP=$P(CONDATA,$C(9),2)
			set TOTCOMEXP=$$^SCARND(TOTCOMEXP,0,"")   //WVB - 35821
			set TOTOUTEXP=$$^SCARND(TOTOUTEXP,0,"")   //WVB - 35821
			if TOTCOMEXP="",TOTOUTEXP="" do Db.insert("EXPIND","IND,TOTCOMEXP,TOTOUTEXP",":SIC,:TOTCOM,:TOTOUT") quit 
			set TOTCOMEXP=TOTCOMEXP+TOTCOM set TOTOUTEXP=TOTOUTEXP+TOTOUT
			set TOTCOMEXP=$$^SCARND(TOTCOMEXP,0,"")   //WVB - 35821
			set TOTOUTEXP=$$^SCARND(TOTOUTEXP,0,"")   //WVB - 35821
			do Db.update("EXPIND","TOTCOMEXP=:TOTCOMEXP,TOTOUTEXP=:TOTOUTEXP","IND=:SIC")
			}
		}
	quit 

	/* References to other routines

	   PROCLIM    (ACCUM)        - Procedure LIMCHK - Consolidated Limit Check
	*/
	
	quit

vau3 // Trigger AU_AUDIT - After Update Audit Information

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------

	 01/17/05 - HILLANBRAND - 13686
	 	    Place Audit Columns verification in this new trigger with
	 	    description to identify the columns that are being verified.

	*/	



	// ----- Validate audit information
	do { quit:ER 
		if cif.aud1="",cif.aud1cf="",cif.aud1nd="",cif.aud1ld="" quit 
		if cif.aud1'="",cif.aud1cf'="",cif.aud1nd'="",cif.aud1ld'="" quit 
		do Runtime.setErrMSG("CIF",1767,"AUD1 AUD1CF AUD1ND AUD1LD") quit:ER 
		}
	do { quit:ER 
		if cif.aud2="",cif.aud2cf="",cif.aud2nd="",cif.aud2ld="" quit 
		if cif.aud2'="",cif.aud2cf'="",cif.aud2nd'="",cif.aud2ld'="" quit 
		do Runtime.setErrMSG("CIF",1767,"AUD2 AUD2CF AUD2ND AUD2LD") quit:ER 
		}
	
	quit
	

vau4 // Trigger AU_CIFOFF - After Update of CIFOFF

	type public RecordCIF cif

	// Update CIF Officer Code on Deposit accounts where the CIF is the primary CIF.

	new X,XACN,XCID,XOFF
	set XACN=cif.acn
	set XOFF=cif.cifoff

	new rs 
	type ResultSet rs=Db.select("CID","RELCIF","ACN=:XACN AND ROLE='1'")
	if rs.isEmpty() quit
	while rs.next()  do { 
		set XCID=rs.getCol(1)
		set ER=0 do Db.update("DEP","OFF2=:XOFF","CID=:XCID AND CLS='D'","/NOJOURNAL")
		}
	quit

vau5 // Trigger AU_CO - After Update of Company Code

	type public RecordCIF cif
	/*
		-----Revision History-------------------------------------------------
	01/17/05 - HILLANBRAND - 13686
	 	   Changed call for TAXID verfication to call directly 
		   into EXT^VERTIN.


	05/09/00 - SKLYUTD - 38116
		   On the company code change perform taxid verification.
		----------------------------------------------------------------------
	*/
	do EXT^VERTIN(.cif)
	quit

vau6 // Trigger AU_CRRATE - After Upd of Next/Last Credit Rating Dt

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------	
	
	 06/05/06 - GIRIDHAL - CR 21207
									Validate Credit Rating Next Date and Last Date.
								 
	----------------------------------------------------------------------
	*/
	//Enter a date after the current system date
	if cif.crratend,(cif.crratend < %SystemDate) do Runtime.setErrMSG("CIF",914) quit:ER
	//Date must be the same as or before the system date
	if cif.crrateld,(cif.crrateld > %SystemDate) do Runtime.setErrMSG("CIF",753) quit:ER
	quit

vau7 // Trigger AU_DARCOVR - CIF.DARCOVR after update

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------

	08/10/05 - TITOVE - CR 16844
		   Minor clean up as part of DBI3 project. 

	*/
	
	// Default CIF.DARCOVR modifications to LN.DARCOVR, if applicable
	
	// Verify the value exist in UTBLACC: "Invalid table value ~p1"
	if cif.darcovr,'Db.isDefined("UTBLACC","'L',cif.darcovr") do Runtime.setErrMSG("CIF",1485,"UTBLACC.AC") quit:ER 

	// Select accounts with Loan Account Direct Liability Indicator set
	type ResultSet rs = Db.select("CID","RELCIF","ACN=:cif.acn AND LDI=1") 

	while rs.next()  do { 

		set XCID = rs.getCol("CID")

		type RecordLN ln = Db.getRecord("LN","CID = :XCID")

		type RecordPRODCTL prodctl = Db.getRecord("PRODCTL","TYPE = :ln.type")
		
		// If product type delinquency reclassification processing is "N",
		// the override can not be set
		if cif.darcovr,'prodctl.darcpo quit
		
		do ln.setAuditFlag(1)
		
		set ln.darcovr = cif.darcovr
		
		do ln.save()
		}
		
	quit

vau8 // Trigger AU_DEPCLOVR - Deposit Asset Class Override

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------

	08/10/05 - TITOVE - CR 16844
		   Minor clean up as part of DBI3 project. 

	*/
	
	// Default [CIF]DEPCLOVR modifications to [DEP]DARCOVR

	// Verify the value exist in UTBLACC: "Invalid table value ~p1"
	if cif.depclovr,'Db.isDefined("UTBLACC","'D',cif.depclovr") do Runtime.setErrMSG("CIF",1485,"UTBLACC.AC") quit:ER 

	// Select accounts with Deposit Account Owner Indicator set
	type ResultSet rs = Db.select("CID","RELCIF","ACN=:cif.acn AND DOI=1")

	while rs.next()  do { 

		set XCID = rs.getCol("CID")

		type RecordDEP dep = Db.getRecord("DEP","CID = :XCID")

		type RecordPRODCTL prodctl = Db.getRecord("PRODCTL","TYPE = :dep.type")
		
		// If product type deposit reclassification processing is "N",
		// the override can not be set
		if cif.depclovr,'prodctl.darcpo quit
		
		do dep.setAuditFlag(1)
		
		set dep.darcovr = cif.depclovr
		
		do dep.save()
		}
		
	quit

vau9 // Trigger AU_DOD - After Update Date of Death

	type public RecordCIF cif
	/*
	----------Revision History--------------------------------------------

	01/03/05 - HILLANBRAND - 13686
	           Changed call to ^CIFDOD to DODCALC^CIFDOD and pass cif 
	
	02/07/01 - ANTONOVS - 43472
		   Display error message "Date cannot be less than date of
		   creation" if Date of Death is less then CIF created date	

	12/28/99 - MAGERAM - 36114
		   Roll Forward for ARQ# 33138 - Problems with deceased customer
		   account inquiry.
	-----------------------------------------------------------------------
	*/
	
	// Update DOD data fields.
	if (cif.dod'="")&(cif.dod<cif.dao) do Runtime.setErrMSG("CIF",8368) quit:ER
	do DODCALC^CIFDOD(.cif)
	quit

vau10 // Trigger AU_DOD_INTEG - Date of Death/Disability Integrity Check

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------
	
	 02/15/00 - SCHWARTZC - 35048
		    Added code to check if DOD and DODSABL restrictions have
		    already been triggered.
	
	----------------------------------------------------------------------
	
	This trigger should never have a column name associated with it.  It should
	be called for any and all CIF maintenance.
	*/

	// cds 9/21/99 Verify that the CIFDOD and CIFDODSABL restrictions have
	// not been set.  Do not set the restrictions a second time.

	new DODRST,DISBRST set (DODRST,DISBRST)=0
	new VERR1,VERR2 set (VERR1,VERR2)=""
	for  set VERR1=$O(verrors(VERR1)) quit:VERR1=""  do {
		for  set VERR2=$O(verrors(VERR1,VERR2)) quit:VERR2=""  do {
			if $P(verrors(VERR1,VERR2),"|",3)="CIFDOD" set DODRST=1
			if $P(verrors(VERR1,VERR2),"|",3)="CIFDODSABL" set DISBRST=1
			}
		}

	if cif.dod,'DODRST do Runtime.setErrXBAD("CIF","CIFDOD",) quit:ER 
	if cif.dodsabl,'DISBRST do Runtime.setErrXBAD("CIF","CIFDODSABL",) quit:ER 
	quit 

vau11 // Trigger AU_EMPADDR - After Update of Employer Address

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------	
	
	  06/02/06 - GIRIDHAL - CR 21207
	  Trigger has been modified to validate the ZIP code,state,
	  and country fields associated with a customer's employer
								 
	----------------------------------------------------------------------
	*/
	
	// Validate postal/zip code
	do ZIP^PROCZIP(cif.empcntry,cif.empstate,cif.empzip) if $G(ER) do Runtime.setErrMSG("CIF",3333,RM) quit:ER
	
	// Validate state
	if cif.empstate'="",$$CHKSTATE^ADDRUTL("CIF",cif.empcntry,cif.empstate) quit:ER
	quit

vau12 // Trigger AU_INTYPE - Institution Type

	type public RecordCIF cif
	/*
	---- Revision History -------------------------------------------------------
	
	 02/05/99 - KONGJ - 30071
	       Changed table name from CIFTYP to PRODCTL for INTYPRST.
	


	*/
	new INTYPRST,VCNT,DATA,CID,ATYPE,CIFTYPE
	
	// If CIF.INTYPE is null, do nothing; else check for Institution Type Restriction.
	
	if cif.intype'="" do { quit:ER 
		set CIFTYPE=cif.type
		set INTYPRST=Db.getOneRow("INTYPRST","PRODCTL","CIFTYPE")

		// If INTYPRST is set to Yes, check the user table UTBLINTTBL for a valid
		// combination for every account tied to this CIF.
	
		if INTYPRST do { quit:ER 
			new rs 
			type ResultSet rs=Db.select("CID,TYPE","ACN","ACN=:ACN")
			if rs.isEmpty() quit
			while rs.next()  do { 
				set CID=rs.getCol(1)
				set ATYPE=rs.getCol(2)
				if Db.isDefined("UTBLINTTBL","CIFTYPE,cif.intype,ATYPE") quit 
				do Runtime.setErrXBAD("CIF","INTYPRST") quit:ER 
				}
			}
		}
	quit

vau13 // Trigger AU_MT900THR - After Update MT900 Debit Threshold Trgr

	type public RecordCIF cif
	// Check to ensure that MT900 Debit Threshold is defined if Generate MT900="Y"
	
	if (cif.mt900=1)&(cif.mt900thr="") do Runtime.setErrMSG("CIF",4077) quit:ER
	quit

vau14 // Trigger AU_MT910THR - After Update MT910 Credit Threshold Trgr

	type public RecordCIF cif
	// Check to ensure that MT910 Credit Threshold is defined if Generate MT910="Y"
	
	if (cif.mt910=1)&(cif.mt910thr="") do Runtime.setErrMSG("CIF",4078) quit:ER
	quit

vau15 // Trigger AU_MZIP - After Update of ZIP Code

	type public RecordCIF cif

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with 
		   customer's mailing address.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(cif.mcntry, cif.mstate, cif.mzip)
	if ER.get() do Runtime.setErrMSG("CIF", 3333, RM)

	quit

vau16 // Trigger AU_NR - After Update Non-Residency flag

	type public RecordCIF cif
	/*
	---------- Revision History ------------------------------------------
	
	 08/04/99 - HAYMANP - 34326
	            This code was moved from before update to after update.
	
	*/

	
	if %RESPROC do CUST^ALLWACCT(cif.acn)
	quit
	

vau17 // Trigger AU_PZIP - After Update of ZIP Code

	type public RecordCIF cif

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with customer's
		   legal address.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(cif.pcntry, cif.pstate, cif.pzip)
	if ER.get() do Runtime.setErrMSG("CIF", 3333, RM)

	quit

vau18 // Trigger AU_SCHRV - After Update of Next/Last Credit Review

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------	
	
	06/05/06 - GIRIDHAL - CR 21207 
	Validate Credit Review Next Date and Last Date. 

	----------------------------------------------------------------------
	*/
	
	if 'cif.crerefre.isNull() do {
		//Enter a date after the current system date
		if cif.schrvnd < %SystemDate do Runtime.setErrMSG("CIF",914) quit:ER
		//Date must be the same as or before the system date
		if cif.schrvld > %SystemDate do Runtime.setErrMSG("CIF",753) quit:ER
	}
	
	quit

vau19 // Trigger AU_SEMFIN - AFTER UPDATE End of Study

	type public RecordCIF cif
							/*
								--Revision History-----------------------------------------------------^
	
									12/14/05 - PUTTASWH - 18157
		    Modified to change the code to DBI Standards.
		    
									03/29/00 - SIVCHUKA - 37587 
																					Optimized performance by passing a parameter to SCADAT
																				calls, reference LRQ 58163-03
							*/  

	if cif.semfin="" quit 
	if cif.semfin'="",cif.semfin'=$$EOMJD^SCADAT(cif.semfin,1) do Runtime.setErrMSG("CIF",2848) quit:ER 
	new AKEY,BATCH,BUFF,CID,DATE,DEFAL,IDPF,IGRC,MDT,PTF,SEMFIN,SEQ,SRC,TABLE,TYPE,XACN
	
	set XACN=cif.acn
	type ResultSet rs=Db.select("CID","RELCIF","ACN=:XACN")
	while rs.next()  do {
		
		set CID=rs.getCol(1)		
		type ResultSet rs=Db.select("IGRC,PTF,DEFAL,IDPF,TYPE","LN,PRODCTL","PRODCTL.DEFAL=1 AND LN.IDPF=1 and LN.CID=:CID AND PRODCTL.TYPE=LN.TYPE")		
		while rs.next()  do { 
			
			set IGRC=rs.getCol(1)
			set PTF=rs.getCol(2)
			set DEFAL=rs.getCol(5)
			set IDPF=rs.getCol(5)
			set XTYPE=rs.getCol(5)
			
			type RecordUTBLSEMFIN utblsem=Db.getRecord("UTBLSEMFIN","TYPE=:XTYPE",1)						
			if utblsem.term set XMDT=$$EXT^UMDT(utblsem.term,cif.semfin)
			else  set XMDT=cif.semfin
			
			set ER=0 
			type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
			set ln.mdt=XMDT
			do ln.save()
			quit:ER	
			
			type ResultSet rs=Db.select("SRC,ACN,BATCH","PAT","CID=:CID")			
			while rs.next()  do { 
				new ACN
				set (ACN,SRC,BATCH,SEQ)=""
				set SRC=rs.getCol(1)
				set ACN=rs.getCol(2)
				set BATCH=rs.getCol(3)
				if IGRC set XSTOP=$$EXT^UMDT(IGRC,cif.semfin)+10
				else  set XSTOP=cif.semfin+10
				set ER=0 
				type RecordPAT1 pat1=Db.getRecord("PAT1","SRC=:SRC,ACN=:ACN,BATCH=:BATCH",1)
				set pat1.stop=XSTOP
				do pat1.save()
				
				}


			// PTF Update
			if cif.semfin.oldVal do { quit:ER 
				set (BUFF,DATE,SQL)=""
				if IGRC set DATE=$$EOMJD^SCADAT(($$EXT^UMDT(IGRC,cif.semfin.oldVal,"","N")),1) quit:ER 
				else  set DATE=$$EOMJD^SCADAT(cif.semfin.oldVal) quit:ER 
				set AKEY=CID
				set SQL="UPDATE LN SET PTF=1 WHERE CID="_CID         // Set PTF back to 1
				set TABLE="LN" set SEQ=1	
				
				type ResultSet rs=Db.select("BUFF","EFD","EFDATE=:DATE","BUFF DESC") 
				if rs.isEmpty() set BUFF=""
	    			else  set BUFF=rs.next(),BUFF=rs.getCol(1) 
				set BUFF=BUFF+1
				
				type RecordEFD efd=Db.getRecord("EFD","EFDATE=:DATE,BUFF=:BUFF,SEQ=:SEQ",1)
				set efd.akey=AKEY
				set efd.table=TABLE
				set efd.sql=SQL
				do efd.save()
				quit:ER 
				
				}
			if cif.semfin do { quit:ER 
				set (BUFF,DATE,SQL)=""
				if IGRC set DATE=$$EOMJD^SCADAT(($$EXT^UMDT(IGRC,cif.semfin,"","N")),1) quit:ER 
				else  set DATE=$$EOMJD^SCADAT(cif.semfin,1) quit:ER 
				set AKEY=CID
				set SQL="UPDATE LN SET PTF=0 WHERE CID="_CID         // Set PTF to O
				set TABLE="LN" set SEQ=1	
	 			
	    			type ResultSet rs=Db.select("BUFF","EFD","EFDATE=:DATE","BUFF DESC") 
				if rs.isEmpty() set BUFF=""
	    			else  set BUFF=rs.next(),BUFF=rs.getCol(1) 
				set BUFF=BUFF+1
				set ER=0 
				
				type RecordEFD efd=Db.getRecord("EFD","EFDATE=:DATE,BUFF=:BUFF,SEQ=:SEQ",1)
				set efd.akey=AKEY
				set efd.table=TABLE
				set efd.sql=SQL
				do efd.save()
				quit:ER 
				
				}
			}
		}
	quit 

vau20 // Trigger AU_STMTRV - After Update of Next/Last Stmt Review Dt

	type public RecordCIF cif
	/*
	---- Revision History ------------------------------------------------	
	
	06/05/06 - GIRIDHAL - CR 21207
	Validate statement review next date and last date.
								 
	----------------------------------------------------------------------
	*/

	if 'cif.finstfre.isNull() do {
		//Enter a date after the current system date
		if cif.stmtrvnd < %SystemDate do Runtime.setErrMSG("CIF",914) quit:ER
		//Date must be the same as or before the system date
		if cif.stmtrvld > %SystemDate do Runtime.setErrMSG("CIF",753) quit:ER
	}
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete

	type public RecordCIF cif
	// Allow to delete?
	
	if cif.nopurge do Runtime.setErrMSG("CIF",445) quit:ER 
	
	set par("CASDEL")=1                    // In cascade delete mode
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before INSERT new record

	type public RecordCIF cif

	/*
	 Revision History----------------------------------------------------
	06/01/06 - GIRIDHAL - CR 21207
		   Added new code to default date values for the credit review
		   next date/last date fields
		   
	12/07/05 - KELLYP - CR 17423
		   Modified to remove references to the TFSBANK, TFSCIFID, 
		   and TFSHOEXT columns which are being obsoleted.  Also
		   removed pre-2003 revision history and cleaned up.
	
	06/14/04 - SCHWARTZC - CR10219
		   Moved code to default the product level relationship
		   matrix (CIF.RELMAT)from the AFTER_INSERT_UPDATE
		   trigger.  This prevents the need to call the CIF filer 
		   from the trigger which was causing a "Record already
		   exists" error when creating customers.
	*/
	
	// US Residency Status
	if cif.usrestat=1 set cif.nr=1
	
	// If the UTBLBRCD.INACTV (inactive flag) is Y no accounts can be opened
	// under this branch.
	do { quit:ER 
		new XBRCD,INACTV,XTYPE,A
		set XBRCD=cif.boo
		set XTYPE=cif.type
		set INACTV=Db.getOneRow("INACTV","UTBLBRCD","XBRCD") quit:ER 
		if INACTV=1 do Runtime.setErrMSG("CIF",3830,XBRCD) quit:ER 
		if Db.isDefined("UTBLPRODAUTH","XBRCD,XTYPE") do Runtime.setErrMSG("CIF",4358,"XTYPE~XBRCD") quit:ER  //MJ 09/08/00
		}
	
	// Customer Full Name default
	if 'cif.pers,cif.nam="" do {
		if cif.fname'="" set cif.fname=$$TRIM^%ZS(cif.fname)
		if cif.mname'="" set cif.mname=$$TRIM^%ZS(cif.mname)
		if cif.lnm'="" set cif.lnm=$$TRIM^%ZS(cif.lnm)
		if cif.suffix'="" set cif.suffix=$$TRIM^%ZS(cif.suffix)
		set cif.nam=$$NAM^CIFFUNCS(cif.fname,cif.mname,cif.lnm,cif.suffix)
		}
	
	// Calulate alpha index name
	if 'cif.pers set cif.xname=$$XNAME^XALPHA(cif.nam,cif.lnm)
	else  set cif.xname=$$UPPER^%ZFUNC($E(cif.nam,1,35))
	
	// Cost center default
	if cif.boo'="",cif.cc="" do {
		type RecordUTBLBRCD ubrcd=Db.getRecord("UTBLBRCD","BRCD=:cif.boo")
		set cif.cc=ubrcd.ccdef
		}

 	// Check if SWIFT Address is defined, return error message if it's not
 	if cif.mt320=1 do {
		if cif.mt320a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
		if cif.mt320a="",cif.swiftadd'="" set cif.mt320a=cif.swiftadd 
 		}
 	if cif.mt900=1 do {
		if cif.mt900a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
        	if cif.mt900a="",cif.swiftadd'="" set cif.mt900a=cif.swiftadd
		}
 	if cif.mt910=1 do {
		if cif.mt910a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
        	if cif.mt910a="",cif.swiftadd'="" set cif.mt910a=cif.swiftadd
        	}
 	if cif.mt940=1 do { 
		if cif.mt940a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
        	if cif.mt940a="",cif.swiftadd'="" set cif.mt940a=cif.swiftadd
		}
 	if cif.mt942=1 do { 
		if cif.mt942a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
        	if cif.mt942a="",cif.swiftadd'="" set cif.mt942a=cif.swiftadd
		}
 	if cif.mt950=1 do { 
		if cif.mt950a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
        	if cif.mt950a="",cif.swiftadd'="" set cif.mt950a=cif.swiftadd
        	}
 	// Checking for CIF.MT942G1 AND CIF.MT942G2
 	if cif.mt942=1 do {
 		if cif.mt942g1'=""!cif.mt942g2'="" do Runtime.setErrMSG("CIF",4113) quit:ER
 		}
 		
 	// Checking for CIF.MT942G1
 	if cif.mt942g1="",cif.mt942g2'="" do Runtime.setErrMSG("CIF",4114) quit:ER
	
 	// Checking for values (greater or not)
 	if cif.mt942g2'="",cif.mt942g1>cif.mt942g2 do Runtime.setErrMSG("CIF",4121) quit:ER
	
 	if cif.mt942g1#900'=0 do Runtime.setErrMSG("CIF",4186) quit:ER
 	if cif.mt942g2#900'=0 do Runtime.setErrMSG("CIF",4186) quit:ER

	// Region Code validation through the branch of ownership
	if cif.brreg="" do {
		if cif.boo="" quit
		type ResultSet rs2=Db.select("REGION","UTBLREGIONS","KEY=:cif.boo")
		if rs2.next() set cif.brreg=rs2.getCol(1)
		}

	// Defaulting LCL and DCL from CUVAR
	if cif.dcl="" set cif.dcl=+CUVAR.dcl
	if cif.lcl="" set cif.lcl=+CUVAR.lcl
 	
	// Mailing address default
	if (cif.mad1'="")!(cif.mad2'="")!(cif.mad3'="")!(cif.mad4'="")
	else  do {
		set cif.mad1=cif.pad1
		set cif.mad2=cif.pad2
		set cif.mad3=cif.pad3
		set cif.mad4=cif.pad4
		set cif.mcity=cif.pcity
		set cif.mstate=cif.pstate
		set cif.mzip=cif.pzip
		set cif.mcntry=cif.pcntry
		}
	
	// Validate Tax Id
	if cif.taxid'="" do {  quit:ER
		new X,TYPE
		set TYPE=cif.type
		set X=cif.taxid
		do EXT^VERTIN(.cif)
		if X'=cif.taxid set cif.taxid=X
		}
	
	// Default Relationship Matrix value from product type level.
	type RecordPRODDFTC proddftc=Db.getRecord("PRODDFTC","TYPE=:cif.type")
	set cif.relmat=proddftc.relmat
	
	//Default values for credit review next date/last dates
	if 'cif.crerefre.isNull(),cif.schrvnd.isNull() do {  quit:ER
		set cif.schrvnd = %SystemDate.nextFreqDate(cif.crerefre) quit:ER
		set cif.schrvld = %SystemDate
		} 
	
	if 'cif.finstfre.isNull(),cif.stmtrvnd.isNull() do {  quit:ER
		set cif.stmtrvnd = %SystemDate.nextFreqDate(cif.finstfre) quit:ER
		set cif.stmtrvld = %SystemDate
		} 
	quit

vbu1 // Trigger BU_BOO - BEFORE UPDATE BRANCH CODE

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/* 
	--------------------Revision History-------------------------
	09/05/00 JavakovM Added logic to return an error message if the product type
	not authorized for a branch.
	*/
	// If the UTBLBRCD.INACTV (inactive flag) is Y no accounts can be opened
	// under this branch.
	do { quit:ER
	 new XBRCD,INACTV,XTYPE,A                
									set XBRCD=cif.boo
									set XTYPE=cif.type              
									set INACTV=Db.getOneRow("INACTV","UTBLBRCD","XBRCD") quit:ER
									if INACTV=1 do Runtime.setErrMSG("CIF",3830,XBRCD) quit:ER
									if Db.isDefined("UTBLPRODAUTH","XBRCD,XTYPE") do Runtime.setErrMSG("CIF",4358,"XTYPE~XBRCD") quit:ER  
	}
	quit

vbu2 // Trigger BU_CREREFRE - Before Update of Credit Review Frequency

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------	
	
	   06/02/06 - GIRIDHAL - CR 21207
	   Trigger created to set Credit Review Next Date.
								 
	----------------------------------------------------------------------
	*/
	
	 if 'cif.crerefre.isNull(),cif.schrvnd.isNull() do {  quit:ER
		set cif.schrvnd = %SystemDate.nextFreqDate(cif.crerefre) quit:ER
		set cif.schrvld = %SystemDate
	 	} 	
	 
	quit

vbu3 // Trigger BU_DOB - Date of birth before update validation

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	   ---- Revision History -------------------------------------------------------
	
	   12/01/05 - DHANALAKSHMI R - 16851
		      Modified by eliminating the usage of the index table XRSPPLID.
	*/

	if cif.dob'="" quit 
	new count,XACN
	set XACN=cif.acn
	
	new rs 
	type ResultSet rs=Db.select("RPASEQ","DEP","ACN=:XACN AND DEP.STAT<>4")
	if rs.isEmpty() set count=0
	else  set count=rs.next(),count=rs.getCol("RPASEQ")

	if count do Runtime.setErrXBAD("CIF","CIFDOB") quit:ER 
	quit
	

vbu4 // Trigger BU_DOD - Before update of Date of Death

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	----------Revision History--------------------------------------------

	4/18/05 - Hillanbrand - 13686
	          Added delete and insert to RFLGC since RFLGC is relational
	          to RFGLCCID. Modified entire trigger per PSL standards.
	
	11/02/01 - SHVACHKINAD - 47709
		   Replaced direct call to RFLGCCFL filer with Db.delete to
		   prevent host update error that happened because vobj was
		   not set with necessary data for keys in RFLGCCID table.

	12/28/99 - MAGERAM - 36114
		   Roll Forward for ARQ# 33138 - Problems with deceased customer
		   account inquiry.
		 
	-----------------------------------------------------------------------
	*/
	
	type String RFLG
	
	// Check that the restriction exists
	if CUVAR.DODRST.isNull() quit
	
	set RFLG=CUVAR.DODRST

	type RecordUTBLRFLG rflg=Db.getRecord("UTBLRFLG","""CIF"",RFLG",1)
	if rflg.getMode()=0 quit
		
	// Remove restrictions if DOD is removed.
	if cif.dod="" do {
		type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
		if rs.isEmpty() quit
		while rs.next()  do { 
			set CID=rs.getCol(1)
			do Db.delete("RFLGCCID","ACN=:ACN AND RFLG=:RFLG AND CID=:CID")
			}
		do Db.delete("RFLGC","ACN=:ACN AND RFLG=:RFLG")
		}
	
	// Place restrictions if DOD is set.
	if cif.dod'="" do {
		type RecordRFLGC rflgc=Db.getRecord("RFLGC",":ACN,RFLG",1)
		set rflgc.acn=ACN
		set rflgc.rflg=RFLG
		do rflgc.save()

		type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
		if rs.isEmpty() quit
		while rs.next()  do {
			set CID=rs.getCol(1)
                	type RecordRFLGCCID rflgccid=Db.getRecord("RFLGCCID",":ACN,RFLG,CID",1)
                	set rflgccid.acn=ACN
                	set rflgccid.rflg=RFLG
			set rflgccid.cid=CID
                	do rflgccid.save()
 			}
		}
	
	quit 

vbu5 // Trigger BU_DODSABL - Before Update of Date of Disability

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	----------Revision History--------------------------------------------
 	
	4/18/05 - Hillanbrand - 13686
		  Added delete and insert to RFLGC since RFLGC is relational
		  to RFGLCCID. Modified entire trigger per PSL standards.
	-----------------------------------------------------------------------
	*/
	
	type String RFLG
	
	// Check that the restriction exists
	if CUVAR.DISBRST.isNull() quit
	
	set RFLG=CUVAR.DISBRST

	type RecordUTBLRFLG rflg=Db.getRecord("UTBLRFLG","""CIF"",RFLG",1)
	if rflg.getMode()=0 quit
		
	// Remove restrictions if DODSABL is removed.
	if cif.dodsabl="" do {
		type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
		if rs.isEmpty() quit
		while rs.next()  do { 
			set CID=rs.getCol(1)
			do Db.delete("RFLGCCID","ACN=:ACN AND RFLG=:RFLG AND CID=:CID")
			}
		do Db.delete("RFLGC","ACN=:ACN AND RFLG=:RFLG")
		}
	
	// Place restrictions if DODSABL is set.
	if cif.dodsabl'="" do {
		type RecordRFLGC rflgc=Db.getRecord("RFLGC",":ACN,RFLG",1)
		set rflgc.acn=ACN
		set rflgc.rflg=RFLG
		do rflgc.save()

		type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
		if rs.isEmpty() quit
		while rs.next()  do {
			set CID=rs.getCol(1)
                	type RecordRFLGCCID rflgccid=Db.getRecord("RFLGCCID",":ACN,RFLG,CID",1)
                	set rflgccid.acn=ACN
                	set rflgccid.rflg=RFLG
			set rflgccid.cid=CID
                	do rflgccid.save()
 			}
		}
	
	quit 

vbu6 // Trigger BU_FINSTFRE - Before Update of Financial Stmt Freq

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------	
	
	06/05/06 - GIRIDHAL - CR 21207
	Trigger created to set Statement Review Next Date.
								 
	----------------------------------------------------------------------
	*/
	
	 if 'cif.finstfre.isNull(),cif.stmtrvnd.isNull() do {  quit:ER
		set cif.stmtrvnd = %SystemDate.nextFreqDate(cif.finstfre) quit:ER
		set cif.stmtrvld = %SystemDate
	 	} 
	quit

vbu7 // Trigger BU_MT320 - Before Update MT320 Trigger

	type public RecordCIF cif
	do cif.setAuditFlag(1)
 	/*	
	 10/05/00 - VETSENM - 42053
	     Roll forward for ARQ#34282
	*/
	//Check if SWIFT address is defined, if not then return error message
	if cif.mt320=1 do {
		if cif.mt320="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER 
		if cif.mt320="",cif.swiftadd'="" set cif.mt320a=cif.swiftadd
		}
 	quit

vbu8 // Trigger BU_MT900 - Before Update MT900 Trigger

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	 10/05/00 - VETSENM - 42053
		Roll forward for ARQ#42053
	*/
	 	           

		//Check if SWIFT address is defined, if not then return error message
	if cif.mt900=1 do {
		if cif.mt900a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER 
		if cif.mt900a="",cif.swiftadd'="" set cif.mt900a=cif.swiftadd
		}
	quit

vbu9 // Trigger BU_MT910 - Before Update MT910 Trigger

	type public RecordCIF cif
	do cif.setAuditFlag(1)
						/*
									10/05/00 - VETSENM - 42053
																Roll forward for ARQ#42053
								*/
	
	
		//Check if SWIFT address is defined, if not then return error message
								if cif.mt910=1 do {
																if cif.mt910a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
																if cif.mt910a="",cif.swiftadd'="" set cif.mt910a=cif.swiftadd
																}
								quit

vbu10 // Trigger BU_MT940 - Before Update MT940 trigger

	type public RecordCIF cif
	do cif.setAuditFlag(1)
					/*
									10/05/00 - VETSENM - 42053
																Roll forward for ARQ#42053
								*/
	
	
		//Check if SWIFT address is defined, if not then return error message
								if cif.mt940=1 do {
																if cif.mt940a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
																if cif.mt940a="",cif.swiftadd'="" set cif.mt940a=cif.swiftadd
																}
								quit

vbu11 // Trigger BU_MT942TIME - Before Update MT942TIME trigger

	type public RecordCIF cif
	do cif.setAuditFlag(1)
 	/*
	---------------Revision History---------------------------------------

	09/19/05 - KELLYP - CR 17050
		   Modified to correct logic errors throughout trigger
		   and removed pre-2003 revision history.
 	*/

	type public Boolean ER

	if cif.mt942=1,cif.mt942a.isNull() do { quit:ER
		// SWIFT Address must be defined
		if cif.swiftadd.isNull() do Runtime.setErrMSG("CIF",4029) quit:ER
		else  set cif.mt942a=cif.swiftadd
		}

	// Generate MT942 must be set to "Yes"
	if cif.mt942=0,(('cif.mt942g1.isNull())!('cif.mt942g2.isNull())) do Runtime.setErrMSG("CIF",4113) quit:ER

	// A value must be entered in MT942 Generate Time 1
	if ('cif.mt942g2.isNull()),(cif.mt942g1.isNull()) do Runtime.setErrMSG("CIF",4114) quit:ER

	// Value must be greater than MT942 Generate Time 1
	if ('cif.mt942g2.isNull()),(cif.mt942g1>cif.mt942g2) do Runtime.setErrMSG("CIF",4121) quit:ER

	// Field must be defined in 15-minute increments only
	if '((cif.mt942g1#900)=0) do Runtime.setErrMSG("CIF",4186) quit:ER
								if '((cif.mt942g2#900)=0) do Runtime.setErrMSG("CIF",4186) quit:ER

	if 'cif.mt942g1.isNull() do {
		// Check all the accounts on the CIF
		type ResultSet rs=Db.select("CID","RELCIF","ACN=:cif.acn")
		while rs.next() do DCHEK(rs.getCol("CID"),cif.mt942g1,cif.mt942g2)
		}
	
	quit


DCHEK(Number CID,Time GTIME1,Time GTIME2)
	// Determine the next date and time to generate an MT942

	type Date TMPDT
	type Time TMPTM

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	if 'dep.getMode() quit	// Not a deposit account

	// MT942 generation not enabled for this account
	if 'dep.mt942 quit

	// Account-level MT942 generation time supercedes CIF level generation time
	if 'dep.mt942g1.isNull() set GTIME1=dep.mt942g1
	if 'dep.mt942g2.isNull() set GTIME2=dep.mt942g2

	// GTIME1 has not passed
	if GTIME1>%CurrentTime do {
		set TMPDT=%SystemDate
		set TMPTM=GTIME1
		}
		
	// GTIME1 has passed but GTIME2 hasn't
	else  if GTIME1<%CurrentTime,GTIME2>%CurrentTime do {
		set TMPDT=%SystemDate
		set TMPTM=GTIME2
		}
		
	// GTIME1 and GTIME2 have both passed
	else  if GTIME1<%CurrentTime,GTIME2<%CurrentTime do {
		set TMPDT=%SystemDate+1
		set TMPTM=GTIME1
		}

	if 'TMPDT.isBusDate(dep.nbdc) do {
		set TMPDT=TMPDT.nextBusDate(1,dep.nbdc)
		set TMPTM=GTIME1
		}
			
	// Create the SW942 record
	type RecordSW942 sw942=Class.new("RecordSW942","SWDATE=:TMPDT,SWTIME=:TMPTM,CID=:dep.cid")
	set sw942.status=0
	do sw942.save()

	quit

vbu12 // Trigger BU_MT950 - Before Update NT950 trigger

	type public RecordCIF cif
	do cif.setAuditFlag(1)
					/*
									10/05/00 - VETSENM - 42053
																Roll forward for ARQ#42053
								*/
	
	
		//Check if SWIFT address is defined, if not then return error message
								if cif.mt950=1 do {
																if cif.mt950a="",cif.swiftadd="" do Runtime.setErrMSG("CIF",4029) quit:ER
																if cif.mt950a="",cif.swiftadd'="" set cif.mt950a=cif.swiftadd
																}
								quit

vbu13 // Trigger BU_NAME - Full name or last name changed

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	
	 10/04/99 - SIGDAE - 33268
	            Add customer full name default logic to support structured
	            name.

	*/
	
	new new,old,default
	
	set default=0
	if (cif.fname.oldVal'=cif.fname) do {
		set default=1
		set old=cif.fname.oldVal
		set new=$$TRIM^%ZS(cif.fname)
		if cif.fname=new quit 
		set cif.fname=old
		set cif.fname=new
		}
	if (cif.mname.oldVal'=cif.mname) do {
		set default=1
		set old=cif.mname.oldVal
		set new=$$TRIM^%ZS(cif.mname)
		if cif.mname=new quit 
		set cif.mname=old
		set cif.mname=new
		}
	if (cif.lnm.oldVal'=cif.lnm) do {
		set default=1
		set old=cif.lnm.oldVal
		set new=$$TRIM^%ZS(cif.lnm)
		if cif.lnm=new quit 
		set cif.lnm=old
		set cif.lnm=new
		}
	if (cif.suffix.oldVal'=cif.suffix) do {
		set default=1
		set old=cif.suffix.oldVal
		set new=$$TRIM^%ZS(cif.suffix)
		if cif.suffix=new quit 
		set cif.suffix=old
		set cif.suffix=new
		}
	if (cif.nam.oldVal'=cif.nam) do {
		set default=0
		set old=cif.nam.oldVal
		set new=$$TRIM^%ZS(cif.nam)
		if cif.nam=new quit 
		set cif.nam=old
		set cif.nam=new
		}
	
	// Structured Name only changed
	if 'cif.pers,default do {
		// If old NAM was defaulted, default new NAM
		set old=$$NAM^CIFFUNCS(cif.fname.oldVal,cif.mname.oldVal,cif.lnm.oldVal,cif.suffix.oldVal)
		if old=cif.nam.oldVal set cif.nam=$$NAM^CIFFUNCS(cif.fname,cif.mname,cif.lnm,cif.suffix)
		}
	
	if 'cif.pers set new=$$XNAME^XALPHA(cif.nam,cif.lnm)   // Calculate new index name
	else  set new=$$UPPER^%ZFUNC($E(cif.nam,1,35))
	set cif.xname=new
	quit 

vbu14 // Trigger BU_PIN1CNTRT - Before Update PIN1CNTR

	type public RecordCIF cif
	do cif.setAuditFlag(1)

	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	*/	
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ
	type public String CARDNUM,CARDTYPE
	type Number AC,CARDUF
	type String DTTIME
		
	if cif.pin1cntr=1 do {
		set cif.pin1cntr=0
		quit:CUVAR.cmsacopt'=1
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		type RecordCIF xcif=Db.getRecord("CIF","ACN=:ACN",1)
		if xcif.getMode() do { quit:ER
			set CARDUF=xcif.carduf
			}

		if CARDUF'=1 quit 
	
		if CARDNUM.get().isNull() do {
			type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN")
			if rs.next() set CARDNUM=rs.getCol("CRDNUM")
			else  set CARDNUM=""
			} 
	
		if CARDTYPE.get().isNull() do {
			type ResultSet rs=Db.select("CRDTYP","CRD","ACN=:ACN") 
			if rs.next() set CARDTYPE=rs.getCol("CRDTYP")
			else  set CARDTYPE="" 
			} 
	
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
		set AC=15
		set ER=0 
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT") 
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CARDTYPE
		set cmsact1.crdnum=CARDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.bypassSave()	
		}
			
	quit 

vbu15 // Trigger BU_PIN1DEL - Before Update PIN1DEL

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------	
	*/
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ
	type public String CARDNUM,CARDTYPE
	type Number AC,CARDUF
	type String DTTIME
	
	if cif.pin1del=1 do {
		set cif.pin1stat=0
		quit:CUVAR.cmsacopt'=1 
		set DTTIME=%SystemDate_" "_%CurrentTime 
		
		type RecordCIF xcif=Db.getRecord("CIF","ACN=:ACN",1)
		if xcif.getMode() do { quit:ER
				set CARDUF=xcif.carduf
				}
				
		if CARDUF'=1 quit 
	
		if CARDNUM.get().isNull() do { 
			type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN") 
			if rs.next() set CARDNUM=rs.getCol("CRDNUM")
			else  set CARDNUM=""
			} 
	
		if CARDTYPE.get().isNull() do { 
			type ResultSet rs=Db.select("CRDTYP","CRD","ACN=:ACN") 
			if rs.next() set CARDTYPE=rs.getCol("CRDTYP")
			else  set CARDTYPE="" 
			} 
	
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
		set AC=18
		set ER=0 
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CARDTYPE
		set cmsact.crdnum=CARDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.bypassSave()
		}
		
	quit 

vbu16 // Trigger BU_PIN1STAT - Before Update

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------

	*/
	type public Boolean ER
	type public Number ACN,NEXTSEQ
	type public String CARDNUM,CARDTYPE
	type Number AC,CARDUF
	type String DTTIME,ENCPIN1,PIN1TLO

	
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	type RecordCIF cif1=Db.getRecord("CIF","ACN=:ACN",1)
	if cif1.getMode() do { quit:ER
		set CARDUF=cif1.carduf
		}
		
	if CARDUF'=1 quit 
	
	if CARDNUM.get().isNull() do { 
		type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN") 
		if rs.next() set CARDNUM=rs.getCol("CRDNUM")
		else  set CARDNUM=""
		} 
	
	if CARDTYPE.get().isNull() do { 
		type ResultSet rs=Db.select("CRDTYP","CRD","ACN=:ACN") 
		if rs.next() set CARDTYPE=rs.getCol("CRDTYP")
		else  set CARDTYPE="" 
		} 
	
	if cif.pin1gen=1,cif.pin1stat=3 do {
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		set cif.pin1gen=0
		quit:CUVAR.cmsacopt'=1 
		set AC=6
		
		type RecordCIF xcif=Db.getRecord("CIF","ACN=:ACN",1)
		if xcif.getMode() do { quit:ER
			set ENCPIN1=xcif.encpin1
			set PIN1TLO=xcif.pin1tlo
			}
			
		set ER=0 
		
		type RecordCMSACT cmsact=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact.getMode() quit
		
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT")
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CARDTYPE
		set cmsact1.crdnum=CARDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.encpin=ENCPIN1
		set cmsact1.tlo=PIN1TLO
		set cmsact1.dttime=DTTIME
		do cmsact1.bypassSave()
		}
		
	if cif.pin1gen=2,cif.pin1stat=3 do {
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		set cif.pin1gen=0
		quit:CUVAR.cmsacopt'=1 
		set AC=7
		set ER=0 
		
		type RecordCMSACT cmsact=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact.getMode() quit
		
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT")
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CARDTYPE
		set cmsact1.crdnum=CARDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.bypassSave()
		}
		
	quit 
	
	
	

vbu17 // Trigger BU_PIN2CNTRT - Before Update PIN2CNTR

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------

	*/
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ
	type public String CARDNUM,CARDTYPE
	type Number AC,CARDUF
	type String DTTIME
	
	
	if cif.pin2cntr=1 do {
		set cif.pin2cntr=0
		quit:CUVAR.cmsacopt'=1  
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		type RecordCIF xcif=Db.getRecord("CIF","ACN=:ACN",1)
		if xcif.getMode() do { quit:ER
			set CARDUF=xcif.carduf
			}
			
		if CARDUF'=1 quit 
	
		if CARDNUM.get().isNull() do { 
			type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN") 
			if rs.next() set CARDNUM=rs.getCol("CRDNUM")
			else  set CARDNUM=""
			} 
	
		if CARDTYPE.get().isNull() do { 
			type ResultSet rs=Db.select("CRDTYP","CRD","ACN=:ACN") 
			if rs.next() set CARDTYPE=rs.getCol("CRDTYP")
			else  set CARDTYPE="" 
			} 
	
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
		set AC=16
		set ER=0 
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CARDTYPE
		set cmsact.crdnum=CARDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.bypassSave()
		}
		
	quit 

vbu18 // Trigger BU_PIN2DEL - Before Update PIN2DEL

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	
	*/
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ
	type public String CARDNUM,CARDTYPE
	type Number AC,CARDUF
	type String DTTIME
	
	
	if cif.pin2del=1 do {
		set cif.pin2stat=0
		quit:CUVAR.cmsacopt'=1
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		type RecordCIF xcif=Db.getRecord("CIF","ACN=:ACN",1)
		if xcif.getMode() do { quit:ER
			set CARDUF=xcif.carduf
			}
			
		if CARDUF'=1 quit 
	
		if CARDNUM.get().isNull() do { 
			type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN") 
			if rs.next() set CARDNUM=rs.getCol("CRDNUM")
			else  set CARDNUM=""
			} 
	
		if CARDTYPE.get().isNull() do { 
			type ResultSet rs=Db.select("CRDTYP","CRD","ACN=:ACN") 
			if rs.next() set CARDTYPE=rs.getCol("CRDTYP")
			else  set CARDTYPE="" 
			}
	
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		set AC=19
		set ER=0 
		type RecordCMSACT cmsact=Class.new("RecordCMSACT")
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CARDTYPE
		set cmsact.crdnum=CARDNUM
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.bypassSave()
		}
		
	quit 
	
	

vbu19 // Trigger BU_PIN2STAT - Before Update

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History --------------------------------------------------------
	
	12/12/05 - SPR - 18555
		   Card Management - General DBI3 system area cleanup.
		   
	------------------------------------------------------------------------------
	
	*/
	
	type public Boolean ER
	type public Number ACN,NEXTSEQ
	type public String CARDNUM,CARDTYPE
	type Number AC,CARDUF
	type String DTTIME,ENCPIN2,PIN2TLO
	
	
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	type RecordCIF cif1=Db.getRecord("CIF","ACN=:ACN",1)
	if cif1.getMode() do { quit:ER
		set CARDUF=cif1.carduf
		}
	
	if CARDUF'=1 quit 
	
	if CARDNUM.get().isNull() do { 
		type ResultSet rs=Db.select("CRDNUM","CRD","ACN=:ACN") 
		if rs.next() set CARDNUM=rs.getCol("CRDNUM")
		else  set CARDNUM=""
		} 
	
	if CARDTYPE.get().isNull() do { 
		type ResultSet rs=Db.select("CRDTYP","CRD","ACN=:ACN") 
		if rs.next() set CARDTYPE=rs.getCol("CRDTYP")
		else  set CARDTYPE="" 
		} 
	
	if cif.pin2gen=1,cif.pin2stat=3 do {
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
		set cif.pin2gen=0
		quit:CUVAR.cmsacopt'=1
		
		set AC=8
		
		type RecordCIF xcif=Db.getRecord("CIF","ACN=:ACN",1)
		if xcif.getMode() do { quit:ER
			set ENCPIN2=xcif.encpin2
			set PIN2TLO=xcif.pin2tlo
			}
			
		set ER=0 
		
																type RecordCMSACT cmsact=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact.getMode() quit
		
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT")
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CARDTYPE
		set cmsact1.crdnum=CARDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.encpin=ENCPIN2
		set cmsact1.tlo=PIN2TLO
		set cmsact1.dttime=DTTIME
		do cmsact1.bypassSave()
		}
		
	if cif.pin2gen=2,cif.pin2stat=3 do {
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		set cif.pin2gen=0
		quit:CUVAR.cmsacopt'=1
		set AC=9
		set ER=0 
	      
	        type RecordCMSACT cmsact=Db.getRecord("CMSACT","SEQ=:NEXTSEQ",1)
		if cmsact.getMode() quit
		
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT")
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CARDTYPE
		set cmsact1.crdnum=CARDNUM
		set cmsact1.acn=ACN
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.bypassSave()
		}
		
	quit 
	
	

vbu20 // Trigger BU_STAT - Before Update of Customer Status

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------	
	
	06/05/06 - GIRIDHAL - CR 21207
	This trigger sets the Customer Status Change Date when 
	the customer status is modified.
								 
	----------------------------------------------------------------------
	*/
	type public Boolean ER

	// Future-dated request invalid
	if cif.custchdt > %SystemDate do Runtime.setErrMSG("CIF",1152) quit:ER

	if cif.custchdt.oldVal = cif.custchdt set cif.custchdt = %SystemDate
	quit

vbu21 // Trigger BU_TAXID - Verify TAXID before update.

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	new X,TYPE
	set TYPE=cif.type
	set X=cif.taxid
	do EXT^VERTIN(.cif)
	if X'=cif.taxid set cif.taxid=X
	quit 

vbu22 // Trigger BU_USRESTAT - Before Update U. S. Residency Status

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---------- Revision History ------------------------------------------
	
	01/12/01 - Terrie Dougherty - 42579
		   Modified to check on new CUVAR.USRESTAT column before
																			processing call to RELAT^USRESTAT.

	08/18/99 - HAYMANP - 33049
		   Added call to CUST^USRESTAT.
	
	*/
	
	if cif.usrestat=1 set cif.nr=1
	else  set cif.nr=0
	
	// Update U. S. Residency Status on all accounts linked to this customer

	if Db.getOneRow("USRESTAT","CUVAR") do CUST^USRESTAT(ACN,cif.usrestat) quit:ER 

	quit

vbu23 // Trigger BU_XNAME - Index name XNAME changed

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	if (cif.nam.oldVal'=cif.nam) quit 
	if (cif.lnm.oldVal'=cif.lnm) quit 
	
	// Protect calculated field XNAME
	
	do Runtime.setErrMSG("CIF",412,"CIF.XNAME") quit:ER 
	quit 
	

vbu24 // Trigger BU_ZIPCODE - Before Update of Zip Code

	type public RecordCIF cif
	do cif.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	
	07/31/00 - HUNDERMARKD - 41048  (Retrofit of ARQ 40839)
		   Added the Before Update trigger for Zip Code - BU_ZIPCODE
	
	*/
	
	if (cif.pzip.oldVal'=cif.pzip) do {
		do ZIP^PROCZIP(cif.pcntry,cif.pstate,cif.pzip) if $G(ER) do Runtime.setErrMSG("CIF",3333,RM) quit:ER
		}
	if (cif.mzip.oldVal'=cif.mzip) do {
		do ZIP^PROCZIP(cif.mcntry,cif.mstate,cif.mzip) if $G(ER) do Runtime.setErrMSG("CIF",3333,RM) quit:ER
		}
	quit
