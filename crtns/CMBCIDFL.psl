CMBCIDFL(RecordCMBCID cmbcid, String vpar, Boolean vparNorm) // CMBCID - Combined Statement Account Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              01/24/2005
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cmbcid.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(cmbcid,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(cmbcid,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = cmbcid.cid
	type String ACN = cmbcid.acn

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ACN").exists() do vkchged quit // Primary key changed
		if vpar["/VALDD/" do VDDUX^DBSFILER("CMBCID",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CMBCID","CID = :cmbcid.cid and ACN = :cmbcid.acn") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ACN

	type RecordCMBCID cmbcid = Db.getRecord("CMBCID","CID=:CID,ACN=:ACN")
	if (%ProcessMode = 2) do {
		do cmbcid.setMode(2)

		do CMBCIDFL(cmbcid,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCMBCID cmbcid

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CMBCID","CID = :cmbcid.cid and ACN = :cmbcid.acn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(cmbcid)) S ^ACN(vobj(cmbcid,-3),110,vobj(cmbcid,-4))=vobj(cmbcid)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCMBCID cmbcid


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(cmbcid,-3),110,vobj(cmbcid,-4))
	#ENDBYPASS
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCMBCID cmbcid
	if 'cmbcid.cid.isNull() set vfkey("^CIF("_""""_cmbcid.acn_""""_","_110_","_""""_cmbcid.stmgrp_""""_","_""""_cmbcid.cid_""""_")")="CMBCID(ACN,STMGRP,CID) -> CMBSTM"
	if 'cmbcid.cid.isNull() set vfkey("^ACN("_""""_cmbcid.cid_""""_","_50_")")="CMBCID(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCMBCID cmbcid
	type public Number %O
	type String vERRMSG

	if 'cmbcid.acn.isNull(),'cmbcid.stmgrp.isNull(),'cmbcid.cid.isNull() if 'Db.isDefined("CMBSTM",":cmbcid.acn,:cmbcid.stmgrp,:cmbcid.cid") set vERRMSG = $$^MSG(8563,"CMBCID(ACN,STMGRP,CID) -> CMBSTM") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'cmbcid.cid.isNull() if 'Db.isDefined("ACN",":cmbcid.cid") set vERRMSG = $$^MSG(8563,"CMBCID(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("STMGRP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vau1 // Trigger AU_STMGRP - After update Statement Group

	type public RecordCMBCID cmbcid
	/*
	---------- Revision History -------------------------------------------

	09/10/01 - APPLEYARDM - 45929
		   Modified trigger to change xcid to XCID to prevent undefined
		   host error during update.

	04/25/01 - SCOTTC - 44515
        	Need to add a check to determine if the frequency on the
       	     the account was different than that in CMBGRP before doing
       	     the update.  Depending on which way the system comes into the
       	     filer, it can make a difference.  Coming in from the Depfile
       	     the frequency on account may be being modified and this trigger
       	     could change the frequency to the old one.  If coming in from
       	     CIFSTFIL the frequency will need to change.  Also need to check
	     the product type before updating so it will go through the proper
	     filers.
	
	03/10/00 - CARROLLJ - 31126
		   Convert to PSL.

	09/24/99 - KLINEB - 34241
		   Added code to update statement frequecncy in DEP table if
		   statement group is modified at account level.
	*/

	set CID=cmbcid.cid
	new XCID
	set XCID=CID
	
	set XSFRE=Db.getOneRow("SFRE","CMBGRP","ACN,STMGRP")
	set RETVAL=Db.getOneRow("CLS,SFRE","ACN","CID")
	set PRODCLS=$P(RETVAL,$C(9),1)
	set ACCTSFRE=$P(RETVAL,$C(9),2)

	//Update Frequency on account if not = Statement Group Frequency
	if (XSFRE'=ACCTSFRE)&(PRODCLS'="") do { quit:ER
		if PRODCLS="L" do Db.update("LN","SFRE=:XSFRE","CID=:XCID")
		if PRODCLS="D" do Db.update("DEP","SFRE=:XSFRE","CID=:XCID")
					      }
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCMBCID cmbcid

	set X = cmbcid.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = cmbcid.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = cmbcid.stmgrp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("STMGRP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CMBCID","MSG",979,"CMBCID."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCMBCID cmbcid

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	do vkey(1) set voldkey = cmbcid.cid_","_cmbcid.acn     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = cmbcid.cid_","_cmbcid.acn     // Copy new keys into object
	type RecordCMBCID vnewrec = cmbcid.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CMBCID",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCMBCID cmbcid

	if vux("CID").exists() set cmbcid.cid = vux("CID").piece("|",i)
	if vux("ACN").exists() set cmbcid.acn = vux("ACN").piece("|",i)
	quit
