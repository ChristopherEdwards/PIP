COMPLNFL(RecordUTBLCOMPLN utblcompln, String vpar, Boolean vparNorm) // UTBLCOMPLN - Commission Plan User Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (36)             11/22/2003
	// Trigger Definition (5)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblcompln.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblcompln,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblcompln,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CPLAN = utblcompln.cplan

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CPLAN").exists() do vkchged quit               // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLCOMPLN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLCOMPLN","CPLAN = :utblcompln.cplan") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CPLAN

	type RecordUTBLCOMPLN utblcompln = Db.getRecord("UTBLCOMPLN","CPLAN=:CPLAN")
	if (%ProcessMode = 2) do {
		do utblcompln.setMode(2)

		do COMPLNFL(utblcompln,vpar)
	}
	else  do VINDEX(utblcompln)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLCOMPLN utblcompln

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLCOMPLN","CPLAN = :utblcompln.cplan") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblcompln,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblcompln,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblcompln)) S ^UTBL("COMPLN",vobj(utblcompln,-3))=vobj(utblcompln)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.utblcompln) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLCOMPLN utblcompln

	if vpar["/INDEX/" do VINDEX(.utblcompln)               // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblcompln,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("COMPLN",vobj(utblcompln,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLCOMPLN utblcompln

	// Type local variables for access keys for defaults
	type public String CPLAN

	if utblcompln.alc.isNull() set utblcompln.alc = 0      // alc
	if utblcompln.fsav.isNull() set utblcompln.fsav = 0    // fsav
	if utblcompln.rrp.isNull() set utblcompln.rrp = 0      // rrp
	quit


vreqn // Validate required data items

	type public RecordUTBLCOMPLN utblcompln

	if utblcompln.alc.isNull() do vreqerr("ALC") quit
	if utblcompln.fsav.isNull() do vreqerr("FSAV") quit
	if utblcompln.rrp.isNull() do vreqerr("RRP") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLCOMPLN utblcompln

	if utblcompln.cplan.isNull() do vreqerr("CPLAN") quit

		if vx("ALC").exists(),utblcompln.alc.isNull() do vreqerr("ALC") quit
		if vx("FSAV").exists(),utblcompln.fsav.isNull() do vreqerr("FSAV") quit
		if vx("RRP").exists(),utblcompln.rrp.isNull() do vreqerr("RRP") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCOMPLN","MSG",1767,"UTBLCOMPLN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("COMCALC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("QUERY").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete - Commission Plan

	type public RecordUTBLCOMPLN utblcompln
	/*
	----Revision History---------------------------------------------------
	04/10/03 - Dan Russell - 51351
		   Change call to ^COMRTN to ^COMMRTN
	09/21/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	// Rebuild the commission query file
	do QRY^COMQRY
	
	// Rebuild the commission calculation routine
	do ^COMMRTN
	quit

vai1 // Trigger AFTER_INSERT - After Insert - Commission Plan

	type public RecordUTBLCOMPLN utblcompln

	/* ----Revision History-------------------------------------------------
	04/10/03 - Dan Russell - 51351
 		   Change call to ^COMRTN to ^COMMRTN
	*/

	// Rebuild the commission query file
	do QRY^COMQRY
	
	// Rebuild the commission calculation routine
	do ^COMMRTN
	quit

vau1 // Trigger AU_COMCALC - After Update - Commission Calculation

	type public RecordUTBLCOMPLN utblcompln
	/* Rebuild the commission calculation routine
	
	Revision History:
	6-15-01 - GOLATOS - ARQ44647 - Changed COMRTN to COMMRTN. COMMRTN is
		  the routine for the COMRTN procedure that was created when
		  the COMRTN routine was converted to PSL.
	*/

	do ^COMMRTN
	quit

vau2 // Trigger AU_QUERY - After Update - Commission Query

	type public RecordUTBLCOMPLN utblcompln
	do QRY^COMQRY
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordUTBLCOMPLN utblcompln
	// Check the field COMRP for a valid term format
	
	new ODT,TRM
	set ODT=%SystemDate 
	set TRM=utblcompln.comrp
	if TRM'="" do ^UMDT quit:ER 
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLCOMPLN utblcompln

	if utblcompln.cplan.length()>8 set vRM = $$^MSG(1076,8) do vdderr("CPLAN", vRM) quit
	if '("01"[utblcompln.ALC) set vRM=$$^MSG(742,"L") do vdderr("ALC", vRM) quit
	set X = utblcompln.amfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[UTBLCOMPLN]AMFRE",0) if 'vRM.get().isNull() do vdderr("AMFRE", vRM) quit
	set X = utblcompln.amth if 'X.isNull(),'Db.isDefined("STBLCOMAMTH","X") set vRM = $$^MSG(1485,X) do vdderr("AMTH", vRM) quit
	set X = utblcompln.baltyp if 'X.isNull(),'Db.isDefined("STBLCOMBALTP","X") set vRM = $$^MSG(1485,X) do vdderr("BALTYP", vRM) quit
	set X = utblcompln.calcfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[UTBLCOMPLN]CALCFRE",0) if 'vRM.get().isNull() do vdderr("CALCFRE", vRM) quit
	set X = utblcompln.camt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLCOMPLN.CAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblcompln.cindex if 'X.isNull(),'Db.isDefined("UTBLCOMINDX","X") set vRM = $$^MSG(1485,X) do vdderr("CINDEX", vRM) quit
	set X = utblcompln.cmarg if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLCOMPLN.CMARG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblcompln.cmth if 'X.isNull(),'Db.isDefined("STBLCMTH","X") set vRM = $$^MSG(1485,X) do vdderr("CMTH", vRM) quit
	if utblcompln.comcalc.length()>80 set vRM = $$^MSG(1076,80) do vdderr("COMCALC", vRM) quit
	if utblcompln.comrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("COMRP", vRM) quit
	if utblcompln.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	set X = utblcompln.deferexpgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DEFEREXPGL", vRM) quit
	if utblcompln.descr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESCR", vRM) quit
	set X = utblcompln.expgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("EXPGL", vRM) quit
	if utblcompln.fcall.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FCALL", vRM) quit
	if '("01"[utblcompln.FSAV) set vRM=$$^MSG(742,"L") do vdderr("FSAV", vRM) quit
	set X = utblcompln.grthchnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("GRTHCHND", vRM) quit
	set X = utblcompln.grthfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[UTBLCOMPLN]GRTHFRE",0) if 'vRM.get().isNull() do vdderr("GRTHFRE", vRM) quit
	set X = utblcompln.gtbl if 'X.isNull(),'Db.isDefined("UTBLEXPGRTHT","X") set vRM = $$^MSG(1485,X) do vdderr("GTBL", vRM) quit
	if utblcompln.intquery.length()>12 set vRM = $$^MSG(1076,12) do vdderr("INTQUERY", vRM) quit
	set X = utblcompln.lcald if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LCALD", vRM) quit
	set X = utblcompln.lcd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LCD", vRM) quit
	set X = utblcompln.ncald if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NCALD", vRM) quit
	set X = utblcompln.ncd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NCD", vRM) quit
	set X = utblcompln.noc if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NOC", vRM) quit
	set X = utblcompln.paygl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("PAYGL", vRM) quit
	set X = utblcompln.pft if 'X.isNull(),'Db.isDefined("UTBLCOMPFT","X") set vRM = $$^MSG(1485,X) do vdderr("PFT", vRM) quit
	set X = utblcompln.postoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("POSTOFF", vRM) quit
	if utblcompln.query.length()>12 set vRM = $$^MSG(1076,12) do vdderr("QUERY", vRM) quit
	set X = utblcompln.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLCOMPLN.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblcompln.rcindx if 'X.isNull(),'Db.isDefined("UTBLRCINDX","X") set vRM = $$^MSG(1485,X) do vdderr("RCINDX", vRM) quit
	set X = utblcompln.rrfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[UTBLCOMPLN]RRFRE",0) if 'vRM.get().isNull() do vdderr("RRFRE", vRM) quit
	if '("01"[utblcompln.RRP) set vRM=$$^MSG(742,"L") do vdderr("RRP", vRM) quit
	if utblcompln.trgrp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRGRP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCOMPLN","MSG",979,"UTBLCOMPLN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordUTBLCOMPLN utblcompln) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NCALD").exists() do vi1(.utblcompln)
		if vx("NCD").exists() do vi2(.utblcompln)
	}
	do vi1(.utblcompln)
	do vi2(.utblcompln)

	quit
	

vi1(RecordUTBLCOMPLN utblcompln) // Maintain DAYENDCOMCAL index entries (Dayend Commission Calculation)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = utblcompln.ncald
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = utblcompln.cplan

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^UTBL("COMPLN",vobj(utblcompln,-3)))#2,'$D(^DAYEND(v1,"COMCALC",v3)) do vidxerr("DAYENDCOMCAL")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"COMCALC",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NCALD").exists() set v1=vx("NCALD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"COMCALC",v3)
	#ENDBYPASS
	quit

vi2(RecordUTBLCOMPLN utblcompln) // Maintain DAYENDCOMDEF index entries (Deferred Commission Dayend)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = utblcompln.ncd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = utblcompln.cplan

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^UTBL("COMPLN",vobj(utblcompln,-3)))#2,'$D(^DAYEND(v1,"COMDEF",v3)) do vidxerr("DAYENDCOMDEF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"COMDEF",v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NCD").exists() set v1=vx("NCD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"COMDEF",v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("UTBLCOMPLN")

	while ds.next() do {
		type RecordUTBLCOMPLN utblcompln=ds.getRecord("UTBLCOMPLN")
		if vlist.contains("VINDEX") do VINDEX(.utblcompln) quit
		if vlist.contains("DAYENDCOMCAL") do vi1(.utblcompln)
		if vlist.contains("DAYENDCOMDEF") do vi2(.utblcompln)
	}

	quit


public VIDXBLD1(RecordUTBLCOMPLN utblcompln, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.utblcompln) quit
	if vlist.contains("DAYENDCOMCAL") do vi1(.utblcompln)
	if vlist.contains("DAYENDCOMDEF") do vi2(.utblcompln)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("UTBLCOMPLN","MSG",1225,"UTBLCOMPLN."_di)

	quit


vkchged // Access key changed

	type public RecordUTBLCOMPLN utblcompln

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CPLAN")
	set voldkey = vux.piece("|",1),vobj(utblcompln,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblcompln,-3) = vnewkey // Copy new keys into object
	type RecordUTBLCOMPLN vnewrec = utblcompln.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLCOMPLN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utblcompln,-3) = vux.piece("|",1)             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "COMPLNFL"	// Location of index program

