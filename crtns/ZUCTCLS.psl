public ZUCTCLS()	// PSL Test Set, class Class, all methods
	/*
	ORIG: Frans S.C. Witte - 2005-04-12
	DESC: PSL Test Set, class Class

	Module that tests the behaviour of the Class class.
	Note that all methods of this class are "static": they are called on the
	Name of the Class (Class.xxx()), not on an instance of the class. This reduces
	the number of test cases.

	---- Revision History --------------------------------------------------
	2005-04-12, Frans S.C. Witte - CR 22843
		Implemented validations for Class.isAncestor()
	*/
	#ACCEPT CR=22843; DATE=2006-08-29; PGM=Frans S.C. Witte;GROUP=XECUTE
	xecute "zprint"

	write !,"Validate Class method calls",!
	do isAnc()	// Class.isAncestor( String ancestorName, String descendantName)
	//do isDesc()	// Class.isDescendant( String descendantName, String ancestorName)
	//do isValid()	// Class.isValid( String className)
	//do new()	// Class.new( literal String className, String initInst)
	quit

	// =====================================================================
public isAnc()	// Validate String.isAncestor( String ancestorName, String descendantName)
	/* ---------------------------------------------------------------------
	Procedure that validates code relating to Class.isAncestor().
	Test values:
	C1/R1	"", "Db", "Noclass", "Object", "Primitive", "Record", "RecordACN",
		"RecordDep", "RecordTTL", "Reference", "String", "Time", "TranSet"
	C2/R2	same as C1/R1
	*/
	type String R
	do isAnc0()
	for R="", "Db", "Noclass", "Object", "Primitive", "Record", "RecordACN", "RecordDep", "RecordTTL", "Reference", "String", "Time", "TranSet" do isAnc1(R),isAnc2(R)
	quit

	// ==========================================================================
	/* isAnc0() - validate Class.isAncestor(C1,C2)
	*/
isAnc0()	// validate Class.isAncestor(C1,C2)
	type Boolean bRes
	type String sStr = "Primitive"

	set bRes = Class.isAncestor("","")			// C1,C2 Empty
	write "isAnc0():Class.isAncestor("""","""")=",bRes.get(),!

	set bRes = Class.isAncestor("","Db")			// C1 Empty, C2 arbitrary
	write "isAnc0():Class.isAncestor("""",""Db"")=",bRes.get(),!

	set bRes = Class.isAncestor("Noclass","Object")	// C1 non existant, C2 = Object
	write "isAnc0():Class.isAncestor(""Noclass"",""Object"")=",bRes,!

	set bRes = Class.isAncestor("Noclass","Primitive")	// C1 non existant, C2 = arbitrary
	write "isAnc0():Class.isAncestor(""Noclass"",""Primitive"")=",bRes,!

	set bRes = Class.isAncestor("Object","")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"","""")=",bRes,!

	set bRes = Class.isAncestor("Object","Db")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"",""Db"")=",bRes,!

	set bRes = Class.isAncestor("Object","Primitive")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"",""Primitive"")=",bRes,!

	set bRes = Class.isAncestor("Object","String")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"",""String"")=",bRes,!

	set bRes = Class.isAncestor("Object","Reference")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"",""Reference"")=",bRes,!

	set bRes = Class.isAncestor("Object","Record")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"",""Record"")=",bRes,!

	set bRes = Class.isAncestor("Object","RecordTTL")		// C1 = Object, C2 Empty
	write "isAnc0():Class.isAncestor(""Object"",""RecordTTL"")=",bRes,!

	quit

	// ==========================================================================
	/* isAnc1() - validate Class.isAncestor(R1,C2)
	*/
isAnc1( String sAnc)	// validate Class.isAncestor(R1,C2)
	type Boolean bRes
  
	set bRes = Class.isAncestor( sAnc, "")	  		// C1 Empty
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,"""")="_bRes.get(),!

	set bRes = Class.isAncestor( sAnc, "Db")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Db"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Noclass")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""NoClass"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Object")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Object"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Primitive")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Primitive"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Reference")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Reference"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Record")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Record"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "RecordACN")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""RecordACN"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "RecordDEP")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""RecordDEP"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "RecordTTL")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""RecordTTL"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "RecordNOTAB")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""RecordNOTAB"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Reference")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Reference"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "String")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""String"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "Time")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""Time"")="_bRes,!

	set bRes = Class.isAncestor( sAnc, "TranSet")
	write "isAnc1(R1):Class.isAncestor(<"_sAnc_">,""TranSet"")="_bRes,!

	quit

	// ==========================================================================
	/* isAnc2() - validate Class.isAncestor(C1,R2)
	*/
isAnc2( String sDesc)	// validate C0.isAncestor(C1,R2)
	type Boolean bRes
	type String R

	set bRes = Class.isAncestor( "", sDesc)	  		// C1 Empty
	write "isAnc2(R2):Class.isAncestor("""",<"_sDesc_">)="_bRes.get(),!

	set bRes = Class.isAncestor( "Db", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Db"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Noclass", sDesc)
	write "isAnc2(R2):Class.isAncestor(""NoClass"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Object", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Object"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Primitive", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Primitive"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Reference", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Reference"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Record", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Record"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "RecordACN", sDesc)
	write "isAnc2(R2):Class.isAncestor(""RecordACN"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "RecordDEP", sDesc)
	write "isAnc2(R2):Class.isAncestor(""RecordDEP"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "RecordTTL", sDesc)
	write "isAnc2(R2):Class.isAncestor(""RecordTTL"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "RecordNOTAB", sDesc)
	write "isAnc2(R2):Class.isAncestor(""RecordNOTAB"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Reference", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Reference"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "String", sDesc)
	write "isAnc2(R2):Class.isAncestor(""String"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "Time", sDesc)
	write "isAnc2(R2):Class.isAncestor(""Time"",<"_sDesc_">)="_bRes,!

	set bRes = Class.isAncestor( "TranSet", sDesc)
	write "isAnc2(R2):Class.isAncestor(""TranSet"",<"_sDesc_">)="_bRes,!

	for R="", "Db", "Noclass", "Object", "Primitive", "Record", "RecordACN", "RecordDep", "RecordTTL", "RecordNOTAB", "Reference", "String", "Time", "TranSet" do isAnc3(R,sDesc)

	quit

	// ==========================================================================
	/* isAnc3() = validate Class.isAncestor(R1,R2)
	*/
isAnc3( String sAnc, String sDesc)	// validate C0.isAncestor(C1,R2)
	type Boolean bRes = Class.isAncestor( sAnc, sDesc)
	write "isAnc3(R0,R1): Class.isAncestor(<"_sAnc_">,<"_sDesc_">)="_bRes,!
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60507^25467^Frans S.C. Witte^7678"	// Signature - LTD^TIME^USER^SIZE
