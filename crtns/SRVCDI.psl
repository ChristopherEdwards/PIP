SRVCDI		/* 
	ORIG: SCOTTC - 02/10/2000
	DESC: Computed fields for SRV,SRV0 items
	---- Comments ---------------------------------------------------------
	All of the computations which are related to Combined Earnings Analysis
	will return a value for the linked accounts to be analyzed in the 
	currency of the lead account.
	---- Revision History -------------------------------------------------
	06/19/06 - RussellDS - CR21810
		   Modified BALEXLD to add R8TYP and SCND to call to
		   $$CONV^CRCDUTL to get correct exchange rate.
	
	06/14/06 - RussellDS - CR21775
		   Modified CBCOLLEC to add third parameter for SRV0 getRecord
		   to avoid error if no SRV0 record exists for a linked account.
	
	08/23/05 - RussellDS - CR16911
		   Eliminated PSL warnings.  Replaced deprecated features.
		   
		   Removed old revision history.
	-----------------------------------------------------------------------

	LIBRARY:
	
	$$AVGFLT	Average FLoat
	$$BALEXLD	Balance to exclude, Total if Lead Account 
	$$CBAVGBAL	Combined Average Balance
	$$CBLOWBAL	Combined Low Balance
	$$CBAVGCOL	Combined Average Collected Balance using float holds
	$$CAVGCOLC	Combined Average Collected Balance using check holds
        $$CBCOLLEC      Combined Collected Balance
	$$CBRSVPCT	Combined Reserve Percentage
	$$CBLEDGER	Combined Ledger Balance
	$$CBINTPD       Combined Interest Paid
	$$CBDAYIN       Combined Daily Investable Balance
	$$COA		Charge On Analysis - Amount
	$$EARN		Net Earnings Allowance
	$$OEA		Offset Earnings Allowance Amount
	$$PROFIT	Account Profitability
	$$RESPCT	Reserve % used to Calculate Investible Balance (Float)
	$$RESPCTC	Reserve % used to Calculate Investible Balance (Check)
	$$RESREQ	Reserve requirement (Float hold investable balance)
	$$RESREQC	Reserve requirement (Check hold investable balance)
	$$SCNUC		Service Charge Net of Usage Credits
	$$TOTADJ	Total Earn Allowance Adjustments for REP174	
	$$UNPR		Unit Price

	*/

	//Do not call from the top
	quit
	

public CBAVGBAL(CID,PLTP,SCND)	

	/* This function is used to compute the SRV0.CBAVGBAL data item,
		Combined Average Balance used in combined account analysis.
		If the account is not linked to sub accounts, but is set for 
		analysis, the value returned will be for that account only.

	  ARGUMENTS:
	   . CID                 Account Number          /TYP=N/REQ/MECH=VAL
 	   . PLTP		 Plan Type		 /TYP=N/REQ/MECH=VAL
	   . SCND		 Scheduled Next Date	 /TYP=D/REQ/MECH=VAL
	
	   RETURNS:
	   . $$Combined Average Balance               /TYP=$

	   EXAMPLE:
 
	   W BALAGE1=$$CBAVGBAL^SRVCDI(100,0,59666)

	*/
	if '$G(CID)!'$G(SCND) quit 0

	if 'PLTP set PLTP=0
	new avgbal,anltype,CBAVGBAL,leadcrcd,SUBCID,subcrcd,XCID
	set avgbal=0,CBAVGBAL=0,XCID=CID

	//see if it is an analysis account
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set anltype=dep.anltyp
	if anltype'=1 quit 0

	set leadcrcd=dep.crcd
	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set CBAVGBAL=srv0.avgbal

	//check if there are linked accounts, if not quit
	type ResultSet rs=Db.select("CID,CRCD","DEP","ANLCID=:XCID")
		
	/*Go through liked account index and get linked CID's
	Using linked CID, check DEP for the average balance
	per service period and add to total average balance.
	*/

	while rs.next() do {

		set SUBCID=rs.getCol("CID")
		set subcrcd=rs.getCol("CRCD")
		
		type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:SUBCID,PLTP=:PLTP,SCND=:SCND")
		set avgbal = srv02.avgbal
		//Check currency of sub and convert to lead if different
		if avgbal do {
			if subcrcd'=leadcrcd set avgbal=$$CONV^CRCDUTL(avgbal,leadcrcd,subcrcd,1,SCND)
			set CBAVGBAL=CBAVGBAL+avgbal
		}
	}

	quit CBAVGBAL
	

public CBLOWBAL(CID,PLTP,SCND)
 
	/* This function is used to compute the SRV0.CBLOWGBAL data item,
		Combined Low Balance used in combined account analysis.
		If the account is not linked to sub accounts, but is set for
		analysis, the value returned will be for that account only.
	 
	 ARGUMENTS:
	   . CID                 Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
	   . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
 
 
	   RETURNS:
	   . $$Combined Low Balance               /TYP=$
	   EXAMPLE:
 
	   W CBLOWBAL=$$CBLOWBAL^SRVCDI(100,0,58080)
 
	*/
	if '$G(CID)!'$G(SCND) quit 0
	
	if 'PLTP set PLTP=0 
	new anlrcb,anltype,CBLOWBAL,data1,leadcrcd,lowbal,SUBCID,subcrcd,XCID
	set CBLOWBAL=0,lowbal=0,XCID=CID

 
	//see if it is an analysis account
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")

	//check to see if it is a lead analysis account, if not, quit 
	set anltype=dep.anltyp
	if anltype'=1 quit 0

	set leadcrcd=dep.crcd
	set anlrcb=dep.anlrcb
 
	/*if rate calcultion base is anything but 8 (low balance end-
	of-day, set it to low balance intra-day*/

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	if anlrcb=8 set CBLOWBAL = srv0.lwbal2
	else  set CBLOWBAL = srv0.lwbal1

	//check if there are linked accounts
	type ResultSet rs=Db.select("CID,CRCD","DEP","ANLCID=:XCID")
 
	/*Go through liked account index and get linked CID's
	Using linked CID, check DEP for the low balance intra-
	day per service period and add to total low balance.
	*/
 
	while rs.next() do {
		set SUBCID = rs.getCol("CID")
		set subcrcd = rs.getCol("CRCD")
		type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:SUBCID,PLTP=:PLTP,SCND=:SCND")
		if anlrcb=8 set lowbal = srv02.lwbal2
		else  set lowbal = srv02.lwbal1

		//Check that subaccount's currency is same as lead
		if lowbal do {
			if subcrcd'=leadcrcd set lowbal=$$CONV^CRCDUTL(lowbal,leadcrcd,subcrcd,1,SCND)
			set CBLOWBAL=CBLOWBAL+lowbal
		}			
	}
 
	quit CBLOWBAL


public CBAVGCOL(CID,PLTP,SCND)
 
	/* This function is used to compute the combined average collected 
	   balance less float holds amount for accounts used in combined 
	   account analysis.
	   If the account is not linked to sub accounts, but is set for
	   analysis, the value returned will be for that account only.
 
	  ARGUMENTS:
	   . CID		 Account Number	  /TYP=N/REQ/MECH=VAL
	   . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
  
           RETURNS:
           . $$Combined Average Collected balance less float          /TYP=$
           EXAMPLE:
 
           W CBAVGCOL=$$CBAVGCOL^SRVCDI(100,0,58080)
 
	*/
	if '$G(CID)!'$G(SCND) quit 0
 
	if 'PLTP set PLTP=0
 
	new avgcol,anlrcb,anltype,CBAVGCOL,leadcrcd,SUBCID,subcrcd,XCID
	set avgcol=0,XCID=CID

	//see if it is an analysis account
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set anltype = dep.anltyp
	//check to see if it is an analysis account, if not, quit
	if anltype'=1 quit 0

	set anlrcb = dep.anlrcb
	set leadcrcd = dep.crcd

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set CBAVGCOL = srv0.avgcol

	//check if there are linked accounts
	type ResultSet rs=Db.select("CID,CRCD","DEP","ANLCID=:XCID")
 
	/*Go through liked account index and get linked CID's
	Using linked CID, check DEP for the average collected
	balance per service period and add to total low balance.
	*/
 
	while rs.next() do {
		set SUBCID = rs.getCol("CID")
		set subcrcd = rs.getCol("CRCD")
		type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:SUBCID,PLTP=:PLTP,SCND=:SCND")
		set avgcol =  srv02.avgcol
		if avgcol do {
			if subcrcd'=leadcrcd set avgcol=$$CONV^CRCDUTL(avgcol,leadcrcd,subcrcd,1,SCND)
			set CBAVGCOL=CBAVGCOL+avgcol
		}
	}
	
	quit CBAVGCOL


public CAVGCOLC(CID,PLTP,SCND)
 
        /* This function is used to compute the combined average collected
           balance less check holds amount for accounts used in combined
           account analysis.
           If the account is not linked to sub accounts, but is set for
           analysis, the value returned will be for that account only.
 
          ARGUMENTS:
           . CID                 Account Number   /TYP=N/REQ/MECH=VAL
           . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
 
           RETURNS:
           . $$Combined Average Collected balance less float          /TYP=$
           EXAMPLE:
 
           W CAVGCOLC$$CAVGCOLC^SRVCDI(100,0,58080)
 
        */
        if '$G(CID)!'$G(SCND) quit 0
 
        if 'PLTP set PLTP=0

 	new avgcol,anlrcb,anltype,CAVGCOLC,leadcrcd,SUBCID,subcrcd,XCID
	set avgcol=0,XCID=CID
 
        //see if it is an analysis account
        type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
        set anltype = dep.anltyp
        //check to see if it is an analysis account, if not, quit
        if anltype'=1 quit 0
 
        set anlrcb = dep.anlrcb
        set leadcrcd = dep.crcd
 
	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
        set CAVGCOLC = srv0.avgcolc

        //check if there are linked accounts
        type ResultSet rs=Db.select("CID,CRCD","DEP","ANLCID=:XCID")
 
         /*Go through liked account index and get linked CID's
         Using linked CID, check DEP for the average collected
         balance per service period and add to total low balance.
         */
 
        while rs.next() do {
                set SUBCID = rs.getCol("CID")
                set subcrcd = rs.getCol("CRCD")
                type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:SUBCID,PLTP=:PLTP,SCND=:SCND")
                set avgcol = srv02.avgcolc
                if avgcol do {
                        if subcrcd'=leadcrcd set avgcol=$$CONV^CRCDUTL(avgcol,leadcrcd,subcrcd,1,SCND)
                        set CAVGCOLC=CAVGCOLC+avgcol
		}
	}
        
        quit CAVGCOLC


public CBCOLLEC(CID,PLTP,SCND)

       /* This function is used to compute the combined collected
           balance for accounts used in combined account analysis.
           If the account is not linked to sub accounts, but is set for
           analysis, the value returned will be for that account only.
 
          ARGUMENTS:
           . CID                 Account Number   /TYP=N/REQ/MECH=VAL
           . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
 
           RETURNS:
           . $$Combined Collected balance 	          /TYP=$
           EXAMPLE:
 
           W $$CBCOLLEC^SRVCDI(100,0,58080)
 
        */
        if '$G(CID)!'$G(SCND) quit 0
 
        if 'PLTP set PLTP=0
 
	new anlrcb,anltype,balcol,CBCOLLEC,leadcrcd,SUBCID,subcrcd,XCID
        set balcol=0,XCID=CID
 
        //see if it is an analysis account
        type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
        set anltype = dep.anltyp

        //check to see if it is an analysis account, if not, quit
        if anltype'=1 quit 0
 
        set anlrcb = dep.anlrcb
        set leadcrcd = dep.crcd

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
        set CBCOLLEC = srv0.balcol

        //check if there are linked accounts
        type ResultSet rs=Db.select("CID,CRCD","DEP","ANLCID=:XCID")
 
         /*Go through liked account index and get linked CID's
         Using linked CID, check DEP for the average collected
         balance per service period and add to total low balance.
         Note that there may not be an SRV0 record.
         */
 
         while rs.next() do {
                set SUBCID = rs.getCol("CID")
                set subcrcd = rs.getCol("CRCD")
                type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:SUBCID,PLTP=:PLTP,SCND=:SCND", 1)
                set balcol = srv02.balcol
                if balcol do {
                        if subcrcd'=leadcrcd set balcol=$$CONV^CRCDUTL(balcol,leadcrcd,subcrcd,1,SCND)
                        set CBCOLLEC=CBCOLLEC+balcol
		}
	}
        
        quit CBCOLLEC


public CBRSVPCT(CID,PLTP,SCND)
 
	/* This function is used to compute the CBRSVPCT data item,
		Reserve Percentage Requirement amount for accounts used in
		combined account analysis.
		If the account is not linked to sub accounts, but is set for
		analysis, the value returned will be for that account only.
 
	  ARGUMENTS:
	   . CID                 Account Number          /TYP=N/REQ/MECH=VAL
           . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
  
           RETURNS:
           . $$Reserve Percentage Requirement               /TYP=$
           EXAMPLE:
 
           W CBRSVPCT=$$CBRSVPCT^SRVCDI(100,0,58080)
 
	*/
	new anlrcb,anltype,avgcol,CBRSVPCT,prodtype,respct,XCID
	set avgcol=0,respct=0,XCID=CID
 
	//see if it is an analysis account
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set anltype = dep.anltyp

	//check to see if it is a lead analysis account
	if anltype'=1 quit 0
	set prodtype = dep.type
	set anlrcb = dep.anlrcb
	
	if '((anlrcb=6)!(anlrcb=11)) quit 0	 
	//get reserve percent from PRODCTL
	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE=:prodtype")
 	set respct = prodctl.resreq
	if respct=0 quit 0

	if (anlrcb=6) set avgcol=$$CBAVGCOL^SRVCDI(XCID,PLTP,SCND)
	if (anlrcb=11) set avgcol=$$CAVGCOLC^SRVCDI(XCID,PLTP,SCND)
 	set CBRSVPCT=avgcol*(respct/100)                               
 
	quit CBRSVPCT
	

public BALEXLD(CID,PLTP,SCND)

	/*
	  This function is used to compute the SRV0.BALEXLD data
	  item, Balance to Exclude from Earnings.
	  It is used by service fee processing and is called from 
	  BCHFEEUTL to determine the total amount (lead and all linked accts)
	  to deduct from the earnings allowance balance base.
 
          ARGUMENTS:
           . CID                 Account Number          /TYP=N/REQ/MECH=VAL
 
           RETURNS:
           . $$Balance to Exclude from Earnings               /TYP=$
	     Total of lead and all linked accounts if there are any.

           EXAMPLE:
           W BALEXLD=$$BALEXLD^SRVCDI(100)
 
        */

	if '$G(CID) quit 0
 
	new anltype,BALEXLD,crcd,dtc,stat,XCID
	set XCID=CID
	set (BALEXLD,anltype)=0
 
	//see if it is an analysis account
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set anltype = dep.anltyp

	if anltype'=1 quit 0		// Quit if not lead account
	set BALEXLD = dep.anlbefe	// Lead account bal to exclude
	set crcd = dep.crcd 	// Lead account currency
 
	// if no linked accts return lead's balance to exclude
 	type ResultSet rs=Db.select("CRCD,ANLBEFE,STAT,DTC","DEP","ANLCID=:XCID")

	//if linked accounts add bal to exclude to lead's bal to excl
	while rs.next() do {
		new anlbefe,subcrcd
		set subcrcd = rs.getCol("CRCD")		// Link acct currency
		set anlbefe = rs.getCol("ANLBEFE")	// Link acct bal exclude
		set stat = rs.getCol("STAT")		// Link acct status (closed?)
		set dtc = rs.getCol("DTC")		// Link acct date acct. closed

		/*if the account is closed and the close date is after or on the 
		  service fee date, don't include sub account's amount*/

		if (stat=4),((dtc<SCND)!(dtc=SCND)) quit
		if '$G(anlbefe) quit
		//Convert to lead account currency
		if subcrcd'=crcd set anlbefe=$$CONV^CRCDUTL(anlbefe, crcd, subcrcd, 1, SCND)
		set BALEXLD=BALEXLD+anlbefe
	}
        
        quit BALEXLD


public CBLEDGER(CID,PLTP,SCND)
 
        /* This function is used to compute the SRV0.CBLEDGER data item,
                Combined Ledger Balance used in combined account analysis.
                If the account is not linked to sub accounts, but is set for
                analysis, the value returned will be for that account only.
 
         ARGUMENTS:
           . CID                 Account Number          /TYP=N/REQ/MECH=VAL
           . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
  
           RETURNS:
           . $$Combined Ledger Balance		          /TYP=$

           EXAMPLE:
           W CBLEDGER=$$CBLEDGER^SRVCDI(100,0,58080)
 
        */

	if '$G(CID)!'$G(SCND) quit 0
 
	new anltype,CBLEDGER,leadcrcd,ledger,NCID,subcrcd,XCID
	set CBLEDGER=0,ledger=0,XCID=CID
 
        //see if it is an analysis account
        type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set anltype = dep.anltyp
        //check to see if it is a lead analysis account, if not, quit
        if anltype'=1 quit 0
	set leadcrcd = dep.crcd
  
	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:XCID,PLTP=:PLTP,SCND=:SCND")
	set CBLEDGER = srv0.ledger
 
        /*Go through liked account index and get linked CID's
        Using linked CID, check SRV0 for the low balance
        per service period and add to total low balance.
        */
 
        type ResultSet rs=Db.select("CID,CRCD,FEEPLN","DEP","ANLCID=:XCID")
        while rs.next() do {
		new subpltp
		set NCID = rs.getCol("CID")
                set subcrcd = rs.getCol("CRCD")
                set subpltp = rs.getCol("FEEPLN")
                //Check that subaccount's currency is same as lead
                type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:NCID,PLTP=0,SCND=:SCND")
                set ledger = srv02.ledger
		if ledger do {
                if subcrcd'=leadcrcd set ledger=$$CONV^CRCDUTL(ledger,leadcrcd,subcrcd,1,SCND)
                set CBLEDGER=CBLEDGER+ledger
		}
	}
 
        quit CBLEDGER
        
 
public CBINTPD(CID,PLTP,SCND)
 
        /*
          This function is used to compute the amount of interest paid
	  during a service fee period. If the account being analyzed has
	  sub accounts, the sub accounts amounts are also included, how-
	  ever, the total will not include linked "other" accounts.
	  If the account being analyzed does not have any linked accounts,
	  it will return the amount of interest paid for the period that
	  is sent in.
 
          ARGUMENTS:
           . CID                 Account Number          /TYP=N/REQ/MECH=VAL
           . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
  
           RETURNS:
           . $$Total interest paid for the service fee period. /TYP=$
 
           EXAMPLE:
           W CBINTPD=$$CBINTPD^SRVCDI(100,0,58108)
	*/

	if '$G(CID)!'$G(SCND) quit 0
 
	new anltype,CBINTPD,intpd,leadcrcd,NCID,subcrcd,XCID
	set CBINTPD=0,intpd=0,XCID=CID
 
        //see if it is an analysis account
        type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set anltype = dep.anltyp
        //check to see if it is a lead analysis account, if not, quit
        if anltype'=1 quit 0
	set leadcrcd = dep.crcd

	type RecordSRV srv = Db.getRecord("SRV", "CID=:XCID,PLTP=:PLTP,SCND=:SCND")
	set CBINTPD = srv.int
 
        /*Go through liked account index and get linked CID's
        Using linked CID, check SRV for the int
        per service period and add to total int balance.
        */
 
        type ResultSet rs=Db.select("CID,CRCD,ANLTYP","DEP","ANLCID=:XCID")
        while rs.next() do {
                set NCID = rs.getCol("CID")
                set subcrcd = rs.getCol("CRCD")
                set anltype = rs.getCol("ANLTYP")
		if anltype'=2 quit
		//Check that subaccount's currency is same as lead
		type RecordSRV srv2 = Db.getRecord("SRV", "CID=:NCID,PLTP=0,SCND=:SCND")
                set intpd = srv2.int
                if subcrcd'=leadcrcd set intpd=$$CONV^CRCDUTL(intpd,leadcrcd,subcrcd,1,SCND)
 
                set CBINTPD=CBINTPD+intpd
	}
 
        quit CBINTPD
        

public CBDAYIN(CID,PLTP,SCND)
 
        /* This function is used to compute the Combined Daily Investable
		balance for accounts used in Combined Analysis.
                If the account is not linked to sub accounts, but is set for
                analysis, the value returned will be for that account only.
 
         ARGUMENTS:
           . CID                 Account Number          /TYP=N/REQ/MECH=VAL
           . PLTP                Plan Type               /TYP=N/REQ/MECH=VAL
           . SCND                Scheduled Next Date     /TYP=D/REQ/MECH=VAL
 
           RETURNS:
           . $$Combined Daily Investable Balance                    /TYP=$
 
           EXAMPLE:
           W CBDAYIN=$$CBDAYIN^SRVCDI(100,0,58080)
 
        */
 
        if '$G(CID)!'$G(SCND) quit 0
 
        new anltype,CBDAYIN,daily,data,data1,leadcrcd,NCID,subcrcd,subpltp,XCID
        set CBDAYIN=0,daily=0,XCID=CID
 
        //see if it is an analysis account
        type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
        set anltype = dep.anltyp
        //check to see if it is a lead analysis account, if not, quit
        if anltype'=1 quit 0
        set leadcrcd = dep.crcd

	type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:XCID,PLTP=:PLTP,SCND=:SCND")
        set CBDAYIN = srv02.dlyinv
 
        /*Go through liked account index and get linked CID's
        Using linked CID, check SRV0 for the low balance
        per service period and add to total low balance.
        */
 
        type ResultSet rs=Db.select("CID,CRCD,FEEPLN","DEP","ANLCID=:XCID")
        while rs.next() do {
                set NCID = rs.getCol("CID")
                set subcrcd = rs.getCol("CRCD")
                set subpltp = rs.getCol("FEEPLN")
                //Check that subaccount's currency is same as lead
                type RecordSRV0 srv02 = Db.getRecord("SRV0", "CID=:NCID,PLTP=0,SCND=:SCND")
                set daily = srv02.dlyinv
                if daily do {
                if subcrcd'=leadcrcd set daily=$$CONV^CRCDUTL(daily,leadcrcd,subcrcd,1,SCND)
                set CBDAYIN=CBDAYIN+daily
		}
	}
 
        quit CBDAYIN
        

public TOTADJ(CID,PLTP,SCND) 
	/*
	  This function is used to compute the net adjustment for the 
	  earnings allowance. The earnings allowance is adjusted by adding
	  the prior period's carryforward position if the analysis charge
	  option is 5, and deducting the total interest paid to all accounts
	  if the dep.dedintpd flag is turned on.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL
  

	   RETURNS:
	   . $$ Prior period NETFWD less Total interest paid for all lead and
	     sub accounts				/TYP=$

	   EXAMPLE:
	   W TOTADJ=$$TOTADJ^SRVCDI(100,0,58080)
 
	*/

	if '$G(CID)!'$G(SCND) quit 0


	new CRCD,LINT,PPNETFWD,TOTADJ,XCID

	if PLTP="" set PLTP=0	// Plan Type - only for service fee plans
	set LINT=0	// Lead Account or total interest
	set PPNETFWD=0	// Prior period Carry forward 

	set XCID=CID

	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")

	set CRCD = dep.crcd

	if dep.anltyp'=1 quit 0	// Not a lead account

	//if deduct int paid flag on get int from SRV file
	if dep.dedintpd do {

		type RecordSRV srv = Db.getRecord("SRV", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
		set LINT = srv.int
		if LINT<0 set LINT=0

		type ResultSet rs=Db.select("CID,CRCD","DEP","ANLCID=:XCID")
		while rs.next() do {

			new data,LNKINT,NCID,NCRCD
			set NCID = rs.getCol("CID")
			set NCRCD = rs.getCol("CRCD")
			type RecordSRV srv2 = Db.getRecord("SRV", "CID=:NCID,PLTP=:PLTP,SCND=:SCND")
 			set LNKINT = srv2.int
			// if null or negative do not add it
			if '$G(LNKINT)!(LNKINT<0) quit
			if NCRCD'=CRCD set LNKINT=$$CONV^CRCDUTL(LNKINT,CRCD,NCRCD,1,SCND)
			set LINT=LINT+LNKINT
		}
	}

	// Need prior period SRV entry. This looks to prior SRV global 
	// entry, it is not based on accounts SCLD 

	if dep.anlchg=5 do {
		new PPSCND
		type ResultSet rs = Db.select("SCND", "SRV", "CID=:CID AND PLTP=:PLTP AND SCND<:SCND", "SCND DESC")
		if rs.next() do {
			set PPSCND = rs.getCol("SCND")
			type RecordSRV srv2 = Db.getRecord("SRV", "CID=:CID,PLTP=:PLTP,SCND=:PPSCND")
			set PPNETFWD = srv2.netfwdo
		}
		else  set PPNETFWD = 0
	}

	// Adjustment is based on adding ppnetfwd to earnings allowance
	// and then deducting the interest paid in period

 	set TOTADJ=PPNETFWD-LINT
 	
	quit TOTADJ
	

public EARN(CID,PLTP,SCND)
	/*
	  This function is used to compute the net earnings allowance or the
	  net earnings credit for a lead account.  It is done by taking the
	  net earnings allowance for the account less the total adjustments
	  calculated in the TOTADJ function.  This value is then compared to
	  the cost of services to determine the net analysis position.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Net earnings allowance which is the net earnings credit.

	   EXAMPLE:
	   S EARN=$$EARN^SRVCDI(100,0,58271)
 
	*/

	new ANLTYP,ERNALL

	if '$G(CID)!'$G(SCND) quit 0

	if PLTP="" set PLTP=0	// Plan Type - only for service fee plans

	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set ANLTYP = dep.anltyp
	if ANLTYP'=1 quit 0

	type RecordSRV srv = Db.getRecord("SRV", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set ERNALL = srv.ernall

	// TOTADJ is prior period carryforward (if analysis charge option is 5)
	// less total interest paid if DEP deduct interest paid flag is on.

	quit ERNALL+$$TOTADJ(CID,PLTP,SCND)
	

public PROFIT(CID,PLTP,SCND)

	/*
	  This function is used to determine if an account was profitable or
	  not after the service fee analysis is complete.  It returns a 1 if
	  the account was profitable and a 0 if the account was not profitable.
	  Profit is determined by the total cost of services less the net
	  earnings credit for lead accounts.	

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Indicator if an account is profitable (1) or not (0).

	   EXAMPLE:
	   S PROFIT=$$PROFIT^SRVCDI(100,0,58271)
 
	*/

	new ANLTYP,NETFWD

	if '$G(CID)!'$G(SCND) quit 0

	if PLTP="" set PLTP=0	// Plan Type - only for service fee plans

	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	set ANLTYP = dep.anltyp
	if ANLTYP'=1 quit 0

	type RecordSRV srv = Db.getRecord("SRV", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set NETFWD = srv.netfwd

	// Net analysis position NETFWD is Earnings - Cost
	if NETFWD>0 quit 1

	quit 0
	

public SCNUC(CID,PLTP,SCND)

	/*
	  This function is used to show the service fees less the usage credit
	  amount for an account.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Service Charges less Usage Credits 

	   EXAMPLE:
	   S SCNUC=$$SCNUC^SRVCDI(100,0,58271)
 
	*/

	new FEEACT,UCR

	if '$G(CID)!'$G(SCND) quit 0

	// Plan Type - only for service fee plans
	type RecordSRV srv = Db.getRecord("SRV", "CID=:CID,PLTP=0,SCND=:SCND")
	set FEEACT = srv.feeact

	type RecordSRV srv2 = Db.getRecord("SRV", "CID=:CID,PLTP=1,SCND=:SCND")
	set UCR = srv2.ucr

	quit FEEACT-UCR
	

public AVGFLT(CID,PLTP,SCND)

	/*
	  This function is used to calculate the average float amount for an
	  account.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Average Float for an account

	   EXAMPLE:
	   S AVGFLT=$$AVGFLT^SRVCDI(100,0,58271)
 
	*/

	new AVGBAL,AVGCOL

	if '$G(CID)!'$G(SCND) quit 0

	if 'PLTP set PLTP=0

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set AVGBAL = srv0.avgbal	// Average Ledger
	set AVGCOL = srv0.avgcol	// Avg Collected (using float holds)

	quit AVGBAL-AVGCOL


public RESPCT(CID,PLTP,SCND)

	/*
	  This function returns the reserve percentage that was used to
	  calculate the investable balance.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Reserve percentage used to calculate investable balances
		where collected balance calculated using float holds
	   EXAMPLE:
	   S RESPCT=$$RESPCT^SRVCDI(100,0,58271)
 
	*/

	new AVGRES,AVGCOL

	if '$G(CID)!'$G(SCND) quit 0

	if 'PLTP set PLTP=0

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set AVGRES = srv0.avgres	// Average Investable Balance
	set AVGCOL = srv0.avgcol	// Avg Collected (using float holds)

	quit $$^SCARND($S(AVGCOL:((AVGCOL - AVGRES) / AVGCOL) * 100,1:0),0,CID)
	

public RESPCTC(CID,PLTP,SCND)

	/*
	  This function returns the reserve percentage that was used to
	  calculate the investable balance.
	
	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Reserve percentage used to calculate investable balances
		where collected balance calculated using check holds	
	   EXAMPLE:
	   S RESPCTC=$$RESPCTC^SRVCDI(100,0,58271)
 
	*/

	new AVGRESC,AVGCOLC

	if '$G(CID)!'$G(SCND) quit 0

	if 'PLTP set PLTP=0

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set AVGRESC = srv0.avgresc	// Average Investable Balance
	set AVGCOLC = srv0.avgcolc	// Avg Collected (using check holds)

	quit $$^SCARND($S(AVGCOLC:((AVGCOLC - AVGRESC) / AVGCOLC) * 100,1:0),0,CID)
	

public RESREQ(CID,PLTP,SCND)

	/*
	  This function is used to return the reserve requirement amount.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Reserve amount required by law where collected balance is
		calculated using float holds

	   EXAMPLE:
	   S RESREQ=$$RESREQ^SRVCDI(100,0,58271)
 
	*/

	new AVGRES,AVGCOL

	if '$G(CID)!'$G(SCND) quit 0

	if 'PLTP set PLTP=0

	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set AVGRES = srv0.avgres	// Average Investable Balance
	set AVGCOL = srv0.avgcol	// Avg Collected (using float holds)

	quit AVGCOL-AVGRES
	

public RESREQC(CID,PLTP,SCND)

	/*
	  This function is used to return the reserve requirement amount.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL

	   RETURNS:
	   . $$ Reserve amount required by law where collected balance is
		calculated using check holds

	   EXAMPLE:
	   S RESREQC=$$RESREQC^SRVCDI(100,0,58271)
 
	*/

	new AVGRESC,AVGCOLC

	if '$G(CID)!'$G(SCND) quit 0

	if 'PLTP set PLTP=0
	
	type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
	set AVGRESC = srv0.avgresc	// Average Investable Balance
	set AVGCOLC = srv0.avgcolc	// Avg Collected (using check holds)

	quit AVGCOLC-AVGRESC
	

public COA(CID,PLTP,SCND,FEECAT,FEETYP)

	/*
	  This function is used to return the fees charged at analysis (charge
	  option of 2) amount, where analysis means the service charge next 
	  date, not the service fees earnings analysis.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL
	   . FEECAT		Feeplan Catagory	/TYP=N/REQ/MECH=VAL
	   . FEETYP		Fee Type		/TYP=T/REQ/MECH=VAL

	   RETURNS:
	   . $$ Cost of fee charge option 2 fees

	   EXAMPLE:
	   S COA=$$COA^SRVCDI(100,0,58271,2,"CECF")
 
	*/

	new CHGOPT,SRVCSTA

	if '$G(CID)!'$G(SCND)!'$G(FEECAT)!($G(FEETYP)="") quit 0

	if 'PLTP set PLTP=0

	type RecordSRVD srvd = Db.getRecord("SRVD", "CID=:CID,PLTP=:PLTP,SCND=:SCND,FEECAT=:FEECAT,FEETYP=:FEETYP")
	set CHGOPT = srvd.chgopt	// Fee Type Charge Option
	set SRVCSTA = srvd.srvcsta	// Cost Accumulated

	if CHGOPT=2 quit SRVCSTA
	
	quit 0


public OEA(CID,PLTP,SCND,FEECAT,FEETYP)

	/*
	  This function is used to return the fees offset with earnings (charge
	  option of 3) amount.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL
	   . FEECAT		Feeplan Catagory	/TYP=N/REQ/MECH=VAL
	   . FEETYP		Fee Type		/TYP=T/REQ/MECH=VAL

	   RETURNS:
	   . $$ Cost of fee charge option 3 fees

	   EXAMPLE:
	   S OEA=$$OEA^SRVCDI(100,0,58271,2,"CECF")
 
	*/

	new CHGOPT,SRVCSTA

	if '$G(CID)!'$G(SCND)!'$G(FEECAT)!($G(FEETYP)="") quit 0

	if 'PLTP set PLTP=0

	type RecordSRVD srvd = Db.getRecord("SRVD", "CID=:CID,PLTP=:PLTP,SCND=:SCND,FEECAT=:FEECAT,FEETYP=:FEETYP")
	set CHGOPT = srvd.chgopt	// Fee Type Charge Option
	set SRVCSTA = srvd.srvcsta	// Cost Accumulated

	if CHGOPT=3 quit SRVCSTA
	
	quit 0


public UNPR(CID,PLTP,SCND,FEECAT,FEETYP)

	/*
	  This function is used to return the unit price of the fee, the fee
	  amount divided by the number of times the fee type was used.

	 ARGUMENTS:
	   . CID		Account Number          /TYP=N/REQ/MECH=VAL
	   . PLTP		Plan Type	        /TYP=N/REQ/MECH=VAL
	   . SCND		Service Charge Next Date/TYP=D/REQ/MECH=VAL
	   . FEECAT		Feeplan Catagory	/TYP=N/REQ/MECH=VAL
	   . FEETYP		Fee Type		/TYP=T/REQ/MECH=VAL

	   RETURNS:
	   . $$ Unit price of the fee (if there were 4 AVL infractions in a
		service charge period and fee was $12, the unit cost would
		be $3 per infraction)

	   EXAMPLE:
	   S UNPR=$$UNPR^SRVCDI(100,0,58271,2,"CCA")

	*/

	new SRVCNTA,SRVCSTA

	if '$G(CID)!'$G(SCND)!'$G(FEECAT)!($G(FEETYP)="") quit 0

	if 'PLTP set PLTP=0

	type RecordSRVD srvd = Db.getRecord("SRVD", "CID=:CID,PLTP=:PLTP,SCND=:SCND,FEECAT=:FEECAT,FEETYP=:FEETYP")
	set SRVCNTA = srvd.srvcnta	// Fee Couter
	set SRVCSTA = srvd.srvcsta	// Cost Accumulated

	quit $$^SCARND($S(SRVCNTA:SRVCSTA/SRVCNTA,1:0),0,CID)
 #OPTION ResultClass ON
Public String vSIG()	quit "60436^51354^Dan Russell^32671"	// Signature - LTD^TIME^USER^SIZE
