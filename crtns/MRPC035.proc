MRPC035(return,versn,ln,lnps1,lnamoao,lnaopts)	//Public;Loan disclosure info
	/*
	   ORIG: Dan Russell - 12/17/96

	   This extrinsic function returns a list of loan columns and their
	   new values based on calling the loan disclosure utilitye, LNNEW10.
	   It's purpose is to allow a client call to calculate and then display
	   this information.

	   [SCATBL5]RPCID=33

	   KEYWORDS: Client/Server, Loan Utilities

	   ARGUMENTS:
	   . return Data (see below)  			/TYP=T/REQ
	         					/MECH=REFNAM:W

	   . versn  ^MRPC033 version number  		/TYP=N/REQ
	     Current version = 1  			/MECH=VAL

	   . ln  Partial SQL syntax for LN info		/TYP=T/REQ
	     (col,...) VALUES (val,...) 		/MECH=VAL

	   . lnps1  Arrayed list of SQL for LNPS1 	/TYP=T/NOREQ
	     (col,...) VALUES (val,...) 		/MECH=VAL
	     tab separate between records
	     LNPS1 is payment schedule info

	   . lnamoao Arrayed list of SQL for LNAMOAO 	/TYP=T/NOREQ
	     (col,...) VALUES (val,...) 		/MECH=VAL
	     tab separate between records
	     LNAMOAO is insurance info

	   . lnaopts List of SQL for LNAOPTS  		/TYP=T/NOREQ
	     (col,...) VALUES (val,...)			/MECH=VAL
	     Single record
	     LNAOPTS is net def fee info

	   RETURNS:
	   . $$ Error message   			/TYP=T
	    Null = No error

	   RELATED:
	   . $$^PBSMRPC - MRPC Service Class Driver

	   Data is returned only for LN values that are created or changed.
	   Format for return is col=value<tab>col=value...

	  ---- Revision History ------------------------------------------------

	   05/05/03 - GRAY - 51349
		      Corrected error %GTM-E-NULSUBSC,vL2a3^LNAPR when
		      call into RPC does not contain any add-on items or
		      net deferred fee information.  Also, modified to return
		      changes even if ER is set, but RM is not.

	   05/02/2002 - DATTAR  - ARQ 49794
                        Converted to PSL
         -----------------------------------------------------------------------

	*/
	new changes,data,i,insrecs,n,ndfrec,%ProcessMode,psrecs

	// Version number of client message is not compatible with server
	if $G(versn)'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))
	set (ER,%ProcessMode)=0 set (ndfrec,return)=""

	// Load info in ln into data array by name
	do getinfo(ln,.data)

	if '$D(data("CID")) set data("CID")=999999999999

	// Set up LNPS1 info into psrecs(PDD) array
	if $D(lnps1) do {
		new psx
		for i=1:1 set psx=$P(lnps1,$C(9),i) quit:psx=""  do {
			new PDD,ps
			do getinfo(psx,.ps)
			set PDD=$G(ps("PDD"))
			quit:PDD=""
			set psrecs(PDD)=$G(ps("D2F"))_"|"_$G(ps("D3F"))_"|"_$G(ps("D4F"))_"|"_$G(ps("FPC"))
			}
		}

	// Set up LNAMOAO info into insrec(TYP) - only need portion
	if $G(lnamoao)'="" do {
		new insx
		for i=1:1 set insx=$P(lnamoao,$C(9),i) quit:insx=""  do {
			new ins,TYP
			do getinfo(insx,.ins)
			set TYP=$G(ins("TYP"))
			quit:TYP=""
			set $P(insrecs(TYP),"|",7)=$G(ins("AMT"))
			set $P(insrecs(TYP),"|",10)=$G(ins("PDBY"))
			set $P(insrecs(TYP),"|",11)=$G(ins("APR"))
			}
		}

	// Set up LNAOPTS info into ndfrec - only need AMT and PLAN
	if $G(lnaopts)'="" do {
		new ndf
		do getinfo(lnaopts,.ndf)
		set ndfrec=$G(ndf("AMT"))_"||"_$G(ndf("PLAN"))
		}

	do RPC^LNNEW10(.data,.psrecs,.insrecs,ndfrec,.changes)

	/*
	In versions prior to V7.0, ER would be set in ^UIC via a call
	from START^LNNEW10.  However, ER was being reset to 0 when the
	product type table was being loaded in CLS^LNAPR via a call to 
	SELECT^SQL.  In V7.0, the SQL select has been replaced with the 
	Db.getRecord method, which resulted in ER still being set and the 
	message unidentified error encountered being returned,
	since RM did not have a value once returning to this process.	
	*/   

	if ER,RM.get()'="" quit $$ERRMSG^PBSUTL(RM)

	// Format changes for return
	set n=""
	for  set n=$O(changes(n)) quit:n=""  do {
		set return=return_n_"="_changes(n)_$C(9)
		}
	
	// Strip trailing tab
	set return=$E(return,1,$L(return)-1)

	set return=$$V2LV^MSG(return)

	quit ""



getinfo(in,out)	//Private; Parse input strings into out array

	new c,columns,i,values
	set in=$$UPPER^%ZFUNC(in)
	set columns=$P(in,"VALUES",1) 
	set values=$P(in,"VALUES",2)
	set columns=$P($P(columns,"(",2),")",1)
	set values=$P($P(values,"(",2),")",1)
	for i=1:1 set c=$P(columns,",",i) quit:c=""  set out(c)=$TR($P(values,",",i),"'")

	quit

	

vSIG()	quit "60184^56198^Brian J. Doherty^4088"	// Signature - LTD^TIME^USER^SIZE
