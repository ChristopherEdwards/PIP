CUVARFIL(RecordCUVAR cuvar, String vpar, Boolean vparNorm) // CUVAR - Institution Variables Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (506)            01/04/2007
	// Trigger Definition (10)                     10/11/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cuvar.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(cuvar,.vxins(),10,"|")
	if %O = 1 quit:'cuvar.isChanged()  do AUDIT^UCUTILN(cuvar,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver^CUVARFI0                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
		do SET^UCLREGEN("CUVAR","*")                          // Literal references to CUVAR exist
	}

	if %O = 1 do { quit                                    // Update record control block
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CUVAR",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
		do {                                                  // Check to see if updated columns involved in literal references
			type String vcol, vlitcols()

			type ResultSet rslits = Db.select("DISTINCT COLUMN", "SYSMAPLITDTA", "TABLE='CUVAR'")
			while rslits.next()  set vlitcols(rslits.getCol("COLUMN")) = ""

			set vcol = ""
			for  set vcol = vlitcols(vcol).order() quit:vcol.isNull()  if vx(vcol).exists() do SET^UCLREGEN("CUVAR",vcol)
		}
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CUVAR","")                        // No record exists
		do vdelete(0)
		do SET^UCLREGEN("CUVAR","*")                          // Literal references to CUVAR exist
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)


	type RecordCUVAR cuvar = Db.getRecord("CUVAR","")
	if (%ProcessMode = 2) do {
		do cuvar.setMode(2)

		do CUVARFIL(cuvar,vpar)
	}

	quit

vLITCHK() quit 1 // Table has columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCUVAR cuvar

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CUVAR","") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(cuvar,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(cuvar,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(cuvar,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CUVAR(n)=vobj(cuvar,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(cuvar,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(cuvar,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CUVAR(n)=vobj(cuvar,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordCUVAR cuvar
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^CUVAR(n)) quit:n.isNull()  if 'vobj(cuvar,n).data(),^CUVAR(n).data()#2 set vobj(cuvar,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCUVAR cuvar

	if 'vkeychg.get(),cuvar.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar'["/NOLOG/" do ^DBSLOGIT(cuvar,3)
	quit


vinit // Initialize default values

	type public RecordCUVAR cuvar

	if cuvar.%et.isNull() set cuvar.%et = "ZE^UTLERR"      // %et
	if cuvar.%help.isNull() set cuvar.%help = 0            // %help
	if cuvar.%helpcnt.isNull() set cuvar.%helpcnt = 0      // %helpcnt
	if cuvar.%keys.isNull() set cuvar.%keys = 0            // %keys
	if cuvar.%mcp.isNull() set cuvar.%mcp = 0              // %mcp
	if cuvar.alcount.isNull() set cuvar.alcount = 5        // alcount
	if cuvar.alphi.isNull() set cuvar.alphi = 0            // alphi
	if cuvar.bamtmod.isNull() set cuvar.bamtmod = 0        // bamtmod
	if cuvar.banner.isNull() set cuvar.banner = 1          // banner
	if cuvar.bindef.isNull() set cuvar.bindef = 0          // bindef
	if cuvar.bobr.isNull() set cuvar.bobr = 0              // bobr
	if cuvar.bsemod.isNull() set cuvar.bsemod = 0          // bsemod
	if cuvar.catsup.isNull() set cuvar.catsup = 0          // catsup
	if cuvar.ccmod.isNull() set cuvar.ccmod = 0            // ccmod
	if cuvar.chkimg.isNull() set cuvar.chkimg = 0          // chkimg
	if cuvar.cifalloc.isNull() set cuvar.cifalloc = 0      // cifalloc
	if cuvar.cifexti.isNull() set cuvar.cifexti = 0        // cifexti
	if cuvar.cmsacopt.isNull() set cuvar.cmsacopt = 0      // cmsacopt
	if cuvar.crtdsp.isNull() set cuvar.crtdsp = 0          // crtdsp
	if cuvar.ctof1098.isNull() set cuvar.ctof1098 = 0      // ctof1098
	if cuvar.ctof1099.isNull() set cuvar.ctof1099 = 0      // ctof1099
	if cuvar.currenv.isNull() set cuvar.currenv = 0        // currenv
	if cuvar.darcdflg.isNull() set cuvar.darcdflg = 0      // darcdflg
	if cuvar.dbsph132.isNull() set cuvar.dbsph132 = "SCAU$HELP:OOE_SCA132.EXP" // dbsph132
	if cuvar.dbsph80.isNull() set cuvar.dbsph80 = "SCAU$HELP:OOE_SCA80.EXP" // dbsph80
	if cuvar.debaut.isNull() set cuvar.debaut = 0          // debaut
	if cuvar.devptr.isNull() set cuvar.devptr = 0          // devptr
	if cuvar.dftthrc.isNull() set cuvar.dftthrc = 0        // dftthrc
	if cuvar.dftthrr.isNull() set cuvar.dftthrr = 0        // dftthrr
	if cuvar.duptin.isNull() set cuvar.duptin = 0          // duptin
	if cuvar.efd.isNull() set cuvar.efd = 0                // efd
	if cuvar.efdftflg.isNull() set cuvar.efdftflg = 0      // efdftflg
	if cuvar.eftmemo.isNull() set cuvar.eftmemo = 0        // eftmemo
	if cuvar.eftrefno.isNull() set cuvar.eftrefno = 0      // eftrefno
	if cuvar.eftrico.isNull() set cuvar.eftrico = 0        // eftrico
	if cuvar.emu.isNull() set cuvar.emu = 0                // emu
	if cuvar.emurnd.isNull() set cuvar.emurnd = 9          // emurnd
	if cuvar.errmdft.isNull() set cuvar.errmdft = 0        // errmdft
	if cuvar.eurinteg.isNull() set cuvar.eurinteg = 0      // eurinteg
	if cuvar.extrem.isNull() set cuvar.extrem = 0          // extrem
	if cuvar.extval.isNull() set cuvar.extval = 0          // extval
	if cuvar.failwait.isNull() set cuvar.failwait = 0      // failwait
	if cuvar.fcvmemo.isNull() set cuvar.fcvmemo = 0        // fcvmemo
	if cuvar.fepxall.isNull() set cuvar.fepxall = 0        // fepxall
	if cuvar.fldovf.isNull() set cuvar.fldovf = 0          // fldovf
	if cuvar.fncrate.isNull() set cuvar.fncrate = 0        // fncrate
	if cuvar.futbld.isNull() set cuvar.futbld = 0          // futbld
	if cuvar.fx.isNull() set cuvar.fx = 0                  // fx
	if cuvar.glefdbch.isNull() set cuvar.glefdbch = 0      // glefdbch
	if cuvar.iccff.isNull() set cuvar.iccff = 0            // iccff
	if cuvar.iccnf.isNull() set cuvar.iccnf = 0            // iccnf
	if cuvar.icdff.isNull() set cuvar.icdff = 0            // icdff
	if cuvar.icdnf.isNull() set cuvar.icdnf = 0            // icdnf
	if cuvar.icdrf.isNull() set cuvar.icdrf = 0            // icdrf
	if cuvar.icdtf.isNull() set cuvar.icdtf = 0            // icdtf
	if cuvar.iclff.isNull() set cuvar.iclff = 0            // iclff
	if cuvar.iclnf.isNull() set cuvar.iclnf = 0            // iclnf
	if cuvar.iclrf.isNull() set cuvar.iclrf = 0            // iclrf
	if cuvar.icltf.isNull() set cuvar.icltf = 0            // icltf
	if cuvar.image.isNull() set cuvar.image = 0            // image
	if cuvar.ipd.isNull() set cuvar.ipd = 0                // ipd
	if cuvar.irahist.isNull() set cuvar.irahist = 365      // irahist
	if cuvar.lccadr.isNull() set cuvar.lccadr = 0          // lccadr
	if cuvar.lccpu.isNull() set cuvar.lccpu = 0            // lccpu
	if cuvar.lcctit.isNull() set cuvar.lcctit = 0          // lcctit
	if cuvar.letfix.isNull() set cuvar.letfix = 0          // letfix
	if cuvar.limpro.isNull() set cuvar.limpro = 0          // limpro
	if cuvar.lncc.isNull() set cuvar.lncc = 0              // lncc
	if cuvar.lncfp.isNull() set cuvar.lncfp = 0            // lncfp
	if cuvar.lncpi.isNull() set cuvar.lncpi = 0            // lncpi
	if cuvar.lncpp.isNull() set cuvar.lncpp = 0            // lncpp
	if cuvar.lnrendel.isNull() set cuvar.lnrendel = 0      // lnrendel
	if cuvar.maxcifl.isNull() set cuvar.maxcifl = 12       // maxcifl
	if cuvar.mincifl.isNull() set cuvar.mincifl = 1        // mincifl
	if cuvar.mrpt.isNull() set cuvar.mrpt = 0              // mrpt
	if cuvar.multiitsid.isNull() set cuvar.multiitsid = 0  // multiitsid
	if cuvar.mxtrlm.isNull() set cuvar.mxtrlm = 0          // mxtrlm
	if cuvar.noregd.isNull() set cuvar.noregd = 0          // noregd
	if cuvar.nosegments.isNull() set cuvar.nosegments = 0  // nosegments
	if cuvar.notp.isNull() set cuvar.notp = 0              // notp
	if cuvar.odp.isNull() set cuvar.odp = 0                // odp
	if cuvar.odpe.isNull() set cuvar.odpe = 0              // odpe
	if cuvar.orcifn.isNull() set cuvar.orcifn = 1          // orcifn
	if cuvar.otc.isNull() set cuvar.otc = 0                // otc
	if cuvar.publish.isNull() set cuvar.publish = 0        // publish
	if cuvar.regccopt.isNull() set cuvar.regccopt = 0      // regccopt
	if cuvar.regflg.isNull() set cuvar.regflg = 0          // regflg
	if cuvar.rekey.isNull() set cuvar.rekey = 0            // rekey
	if cuvar.resproc.isNull() set cuvar.resproc = 0        // resproc
	if cuvar.restrict.isNull() set cuvar.restrict = 0      // restrict
	if cuvar.rpanet.isNull() set cuvar.rpanet = 0          // rpanet
	if cuvar.scaurel.isNull() set cuvar.scaurel = 0        // scaurel
	if cuvar.schrcc.isNull() set cuvar.schrcc = 0          // schrcc
	if cuvar.schrce.isNull() set cuvar.schrce = 0          // schrce
	if cuvar.schrck.isNull() set cuvar.schrck = 0          // schrck
	if cuvar.schrcl.isNull() set cuvar.schrcl = 0          // schrcl
	if cuvar.schrcn.isNull() set cuvar.schrcn = 0          // schrcn
	if cuvar.schri.isNull() set cuvar.schri = 0            // schri
	if cuvar.scovr.isNull() set cuvar.scovr = 0            // scovr
	if cuvar.sfeeopt.isNull() set cuvar.sfeeopt = 0        // sfeeopt
	if cuvar.stmlcc.isNull() set cuvar.stmlcc = 0          // stmlcc
	if cuvar.stmtcdskip.isNull() set cuvar.stmtcdskip = 0  // stmtcdskip
	if cuvar.stmtcumul.isNull() set cuvar.stmtcumul = 0    // stmtcumul
	if cuvar.stmtintrtc.isNull() set cuvar.stmtintrtc = 0  // stmtintrtc
	if cuvar.stmtlnskip.isNull() set cuvar.stmtlnskip = 0  // stmtlnskip
	if cuvar.taxreq.isNull() set cuvar.taxreq = 1          // taxreq
	if cuvar.tfs.isNull() set cuvar.tfs = 0                // tfs
	if cuvar.tinco.isNull() set cuvar.tinco = 0            // tinco
	if cuvar.tref.isNull() set cuvar.tref = 0              // tref
	if cuvar.username.isNull() set cuvar.username = 0      // username
	if cuvar.usrestat.isNull() set cuvar.usrestat = 0      // usrestat
	quit


vreqn // Validate required data items

	type public RecordCUVAR cuvar

	if cuvar.%keys.isNull() do vreqerr("%KEYS") quit
	if cuvar.%mcp.isNull() do vreqerr("%MCP") quit
	if cuvar.alphi.isNull() do vreqerr("ALPHI") quit
	if cuvar.bamtmod.isNull() do vreqerr("BAMTMOD") quit
	if cuvar.banner.isNull() do vreqerr("BANNER") quit
	if cuvar.bindef.isNull() do vreqerr("BINDEF") quit
	if cuvar.bobr.isNull() do vreqerr("BOBR") quit
	if cuvar.bsemod.isNull() do vreqerr("BSEMOD") quit
	if cuvar.catsup.isNull() do vreqerr("CATSUP") quit
	if cuvar.ccmod.isNull() do vreqerr("CCMOD") quit
	if cuvar.chkimg.isNull() do vreqerr("CHKIMG") quit
	if cuvar.cifalloc.isNull() do vreqerr("CIFALLOC") quit
	if cuvar.cifexti.isNull() do vreqerr("CIFEXTI") quit
	if cuvar.cmsacopt.isNull() do vreqerr("CMSACOPT") quit
	if cuvar.crtdsp.isNull() do vreqerr("CRTDSP") quit
	if cuvar.ctof1098.isNull() do vreqerr("CTOF1098") quit
	if cuvar.ctof1099.isNull() do vreqerr("CTOF1099") quit
	if cuvar.currenv.isNull() do vreqerr("CURRENV") quit
	if cuvar.darcdflg.isNull() do vreqerr("DARCDFLG") quit
	if cuvar.debaut.isNull() do vreqerr("DEBAUT") quit
	if cuvar.devptr.isNull() do vreqerr("DEVPTR") quit
	if cuvar.dftthrc.isNull() do vreqerr("DFTTHRC") quit
	if cuvar.dftthrr.isNull() do vreqerr("DFTTHRR") quit
	if cuvar.duptin.isNull() do vreqerr("DUPTIN") quit
	if cuvar.efd.isNull() do vreqerr("EFD") quit
	if cuvar.efdftflg.isNull() do vreqerr("EFDFTFLG") quit
	if cuvar.eftmemo.isNull() do vreqerr("EFTMEMO") quit
	if cuvar.eftrefno.isNull() do vreqerr("EFTREFNO") quit
	if cuvar.eftrico.isNull() do vreqerr("EFTRICO") quit
	if cuvar.emu.isNull() do vreqerr("EMU") quit
	if cuvar.errmdft.isNull() do vreqerr("ERRMDFT") quit
	if cuvar.eurinteg.isNull() do vreqerr("EURINTEG") quit
	if cuvar.extrem.isNull() do vreqerr("EXTREM") quit
	if cuvar.extval.isNull() do vreqerr("EXTVAL") quit
	if cuvar.failwait.isNull() do vreqerr("FAILWAIT") quit
	if cuvar.fcvmemo.isNull() do vreqerr("FCVMEMO") quit
	if cuvar.fepxall.isNull() do vreqerr("FEPXALL") quit
	if cuvar.finye.isNull() do vreqerr("FINYE") quit
	if cuvar.fldovf.isNull() do vreqerr("FLDOVF") quit
	if cuvar.fncrate.isNull() do vreqerr("FNCRATE") quit
	if cuvar.futbld.isNull() do vreqerr("FUTBLD") quit
	if cuvar.fx.isNull() do vreqerr("FX") quit
	if cuvar.glefdbch.isNull() do vreqerr("GLEFDBCH") quit
	if cuvar.iccff.isNull() do vreqerr("ICCFF") quit
	if cuvar.iccnf.isNull() do vreqerr("ICCNF") quit
	if cuvar.icdff.isNull() do vreqerr("ICDFF") quit
	if cuvar.icdnf.isNull() do vreqerr("ICDNF") quit
	if cuvar.icdrf.isNull() do vreqerr("ICDRF") quit
	if cuvar.icdtf.isNull() do vreqerr("ICDTF") quit
	if cuvar.iclff.isNull() do vreqerr("ICLFF") quit
	if cuvar.iclnf.isNull() do vreqerr("ICLNF") quit
	if cuvar.iclrf.isNull() do vreqerr("ICLRF") quit
	if cuvar.icltf.isNull() do vreqerr("ICLTF") quit
	if cuvar.image.isNull() do vreqerr("IMAGE") quit
	if cuvar.ipd.isNull() do vreqerr("IPD") quit
	if cuvar.lccadr.isNull() do vreqerr("LCCADR") quit
	if cuvar.lccpu.isNull() do vreqerr("LCCPU") quit
	if cuvar.lcctit.isNull() do vreqerr("LCCTIT") quit
	if cuvar.letfix.isNull() do vreqerr("LETFIX") quit
	if cuvar.limpro.isNull() do vreqerr("LIMPRO") quit
	if cuvar.lnrendel.isNull() do vreqerr("LNRENDEL") quit
	if cuvar.mrpt.isNull() do vreqerr("MRPT") quit
	if cuvar.multiitsid.isNull() do vreqerr("MULTIITSID") quit
	if cuvar.mxtrlm.isNull() do vreqerr("MXTRLM") quit
	if cuvar.noregd.isNull() do vreqerr("NOREGD") quit
	if cuvar.nosegments.isNull() do vreqerr("NOSEGMENTS") quit
	if cuvar.notp.isNull() do vreqerr("NOTP") quit
	if cuvar.odp.isNull() do vreqerr("ODP") quit
	if cuvar.odpe.isNull() do vreqerr("ODPE") quit
	if cuvar.orcifn.isNull() do vreqerr("ORCIFN") quit
	if cuvar.otc.isNull() do vreqerr("OTC") quit
	if cuvar.publish.isNull() do vreqerr("PUBLISH") quit
	if cuvar.regccopt.isNull() do vreqerr("REGCCOPT") quit
	if cuvar.regflg.isNull() do vreqerr("REGFLG") quit
	if cuvar.rekey.isNull() do vreqerr("REKEY") quit
	if cuvar.resproc.isNull() do vreqerr("RESPROC") quit
	if cuvar.restrict.isNull() do vreqerr("RESTRICT") quit
	if cuvar.rpanet.isNull() do vreqerr("RPANET") quit
	if cuvar.scaurel.isNull() do vreqerr("SCAUREL") quit
	if cuvar.schrcc.isNull() do vreqerr("SCHRCC") quit
	if cuvar.schrce.isNull() do vreqerr("SCHRCE") quit
	if cuvar.schrck.isNull() do vreqerr("SCHRCK") quit
	if cuvar.schrcl.isNull() do vreqerr("SCHRCL") quit
	if cuvar.schrcn.isNull() do vreqerr("SCHRCN") quit
	if cuvar.schri.isNull() do vreqerr("SCHRI") quit
	if cuvar.scovr.isNull() do vreqerr("SCOVR") quit
	if cuvar.sfeeopt.isNull() do vreqerr("SFEEOPT") quit
	if cuvar.stmlcc.isNull() do vreqerr("STMLCC") quit
	if cuvar.stmtcdskip.isNull() do vreqerr("STMTCDSKIP") quit
	if cuvar.stmtcumul.isNull() do vreqerr("STMTCUMUL") quit
	if cuvar.stmtintrtc.isNull() do vreqerr("STMTINTRTC") quit
	if cuvar.stmtlnskip.isNull() do vreqerr("STMTLNSKIP") quit
	if cuvar.taxye.isNull() do vreqerr("TAXYE") quit
	if cuvar.tfs.isNull() do vreqerr("TFS") quit
	if cuvar.tinco.isNull() do vreqerr("TINCO") quit
	if cuvar.tref.isNull() do vreqerr("TREF") quit
	if cuvar.uacnl1f.isNull() do vreqerr("UACNL1F") quit
	if cuvar.usrestat.isNull() do vreqerr("USRESTAT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCUVAR cuvar


	if 'vobj(cuvar,-100,1099,"").order().isNull() do {
		if vx("CTOF1098").exists(),cuvar.ctof1098.isNull() do vreqerr("CTOF1098") quit
		if vx("CTOF1099").exists(),cuvar.ctof1099.isNull() do vreqerr("CTOF1099") quit
	}
	if 'vobj(cuvar,-100,"%BATCH","").order().isNull() do {
		if vx("FAILWAIT").exists(),cuvar.failwait.isNull() do vreqerr("FAILWAIT") quit
	}
	if 'vobj(cuvar,-100,"%CRCD","").order().isNull() do {
		if vx("BSEMOD").exists(),cuvar.bsemod.isNull() do vreqerr("BSEMOD") quit
		if vx("CCMOD").exists(),cuvar.ccmod.isNull() do vreqerr("CCMOD") quit
		if vx("BAMTMOD").exists(),cuvar.bamtmod.isNull() do vreqerr("BAMTMOD") quit
		if vx("OTC").exists(),cuvar.otc.isNull() do vreqerr("OTC") quit
		if vx("FX").exists(),cuvar.fx.isNull() do vreqerr("FX") quit
		if vx("TFS").exists(),cuvar.tfs.isNull() do vreqerr("TFS") quit
	}
	if 'vobj(cuvar,-100,"%ET","").order().isNull() do {
		if vx("ERRMDFT").exists(),cuvar.errmdft.isNull() do vreqerr("ERRMDFT") quit
	}
	if 'vobj(cuvar,-100,"%IO","").order().isNull() do {
		if vx("DEVPTR").exists(),cuvar.devptr.isNull() do vreqerr("DEVPTR") quit
	}
	if 'vobj(cuvar,-100,"%KEYS","").order().isNull() do {
		if vx("%KEYS").exists(),cuvar.%keys.isNull() do vreqerr("%KEYS") quit
	}
	if 'vobj(cuvar,-100,"%MCP","").order().isNull() do {
		if vx("%MCP").exists(),cuvar.%mcp.isNull() do vreqerr("%MCP") quit
	}
	if 'vobj(cuvar,-100,"ALP","").order().isNull() do {
		if vx("ALPHI").exists(),cuvar.alphi.isNull() do vreqerr("ALPHI") quit
	}
	if 'vobj(cuvar,-100,"BANNER","").order().isNull() do {
		if vx("BANNER").exists(),cuvar.banner.isNull() do vreqerr("BANNER") quit
	}
	if 'vobj(cuvar,-100,"BINDEF","").order().isNull() do {
		if vx("BINDEF").exists(),cuvar.bindef.isNull() do vreqerr("BINDEF") quit
	}
	if 'vobj(cuvar,-100,"BOBR","").order().isNull() do {
		if vx("BOBR").exists(),cuvar.bobr.isNull() do vreqerr("BOBR") quit
	}
	if 'vobj(cuvar,-100,"CHK","").order().isNull() do {
		if vx("CHKIMG").exists(),cuvar.chkimg.isNull() do vreqerr("CHKIMG") quit
	}
	if 'vobj(cuvar,-100,"CIF","").order().isNull() do {
		if vx("ORCIFN").exists(),cuvar.orcifn.isNull() do vreqerr("ORCIFN") quit
		if vx("CIFALLOC").exists(),cuvar.cifalloc.isNull() do vreqerr("CIFALLOC") quit
		if vx("LIMPRO").exists(),cuvar.limpro.isNull() do vreqerr("LIMPRO") quit
		if vx("DUPTIN").exists(),cuvar.duptin.isNull() do vreqerr("DUPTIN") quit
		if vx("TINCO").exists(),cuvar.tinco.isNull() do vreqerr("TINCO") quit
		if vx("EXTVAL").exists(),cuvar.extval.isNull() do vreqerr("EXTVAL") quit
	}
	if 'vobj(cuvar,-100,"CNTRY","").order().isNull() do {
		if vx("CATSUP").exists(),cuvar.catsup.isNull() do vreqerr("CATSUP") quit
	}
	if 'vobj(cuvar,-100,"CRT","").order().isNull() do {
		if vx("TREF").exists(),cuvar.tref.isNull() do vreqerr("TREF") quit
	}
	if 'vobj(cuvar,-100,"CRTDSP","").order().isNull() do {
		if vx("CRTDSP").exists(),cuvar.crtdsp.isNull() do vreqerr("CRTDSP") quit
	}
	if 'vobj(cuvar,-100,"CURRENV","").order().isNull() do {
		if vx("CURRENV").exists(),cuvar.currenv.isNull() do vreqerr("CURRENV") quit
	}
	if 'vobj(cuvar,-100,"DAYEND","").order().isNull() do {
		if vx("FINYE").exists(),cuvar.finye.isNull() do vreqerr("FINYE") quit
		if vx("TAXYE").exists(),cuvar.taxye.isNull() do vreqerr("TAXYE") quit
	}
	if 'vobj(cuvar,-100,"DBS","").order().isNull() do {
		if vx("FLDOVF").exists(),cuvar.fldovf.isNull() do vreqerr("FLDOVF") quit
		if vx("NOTP").exists(),cuvar.notp.isNull() do vreqerr("NOTP") quit
	}
	if 'vobj(cuvar,-100,"DEAL","").order().isNull() do {
		if vx("REKEY").exists(),cuvar.rekey.isNull() do vreqerr("REKEY") quit
	}
	if 'vobj(cuvar,-100,"DEP","").order().isNull() do {
		if vx("RPANET").exists(),cuvar.rpanet.isNull() do vreqerr("RPANET") quit
		if vx("CMSACOPT").exists(),cuvar.cmsacopt.isNull() do vreqerr("CMSACOPT") quit
	}
	if 'vobj(cuvar,-100,"DRMT","").order().isNull() do {
		if vx("STMLCC").exists(),cuvar.stmlcc.isNull() do vreqerr("STMLCC") quit
		if vx("LCCADR").exists(),cuvar.lccadr.isNull() do vreqerr("LCCADR") quit
		if vx("LCCTIT").exists(),cuvar.lcctit.isNull() do vreqerr("LCCTIT") quit
		if vx("LCCPU").exists(),cuvar.lccpu.isNull() do vreqerr("LCCPU") quit
	}
	if 'vobj(cuvar,-100,"EFD","").order().isNull() do {
		if vx("EFD").exists(),cuvar.efd.isNull() do vreqerr("EFD") quit
		if vx("EFDFTFLG").exists(),cuvar.efdftflg.isNull() do vreqerr("EFDFTFLG") quit
	}
	if 'vobj(cuvar,-100,"EFTPAY","").order().isNull() do {
		if vx("EFTRICO").exists(),cuvar.eftrico.isNull() do vreqerr("EFTRICO") quit
		if vx("EFTREFNO").exists(),cuvar.eftrefno.isNull() do vreqerr("EFTREFNO") quit
		if vx("DEBAUT").exists(),cuvar.debaut.isNull() do vreqerr("DEBAUT") quit
		if vx("FUTBLD").exists(),cuvar.futbld.isNull() do vreqerr("FUTBLD") quit
		if vx("EFTMEMO").exists(),cuvar.eftmemo.isNull() do vreqerr("EFTMEMO") quit
	}
	if 'vobj(cuvar,-100,"EUR","").order().isNull() do {
		if vx("EMU").exists(),cuvar.emu.isNull() do vreqerr("EMU") quit
		if vx("FNCRATE").exists(),cuvar.fncrate.isNull() do vreqerr("FNCRATE") quit
		if vx("DFTTHRC").exists(),cuvar.dftthrc.isNull() do vreqerr("DFTTHRC") quit
		if vx("DFTTHRR").exists(),cuvar.dftthrr.isNull() do vreqerr("DFTTHRR") quit
		if vx("SCOVR").exists(),cuvar.scovr.isNull() do vreqerr("SCOVR") quit
		if vx("EURINTEG").exists(),cuvar.eurinteg.isNull() do vreqerr("EURINTEG") quit
	}
	if 'vobj(cuvar,-100,"FCVMEMO","").order().isNull() do {
		if vx("FCVMEMO").exists(),cuvar.fcvmemo.isNull() do vreqerr("FCVMEMO") quit
	}
	if 'vobj(cuvar,-100,"FEPXALL","").order().isNull() do {
		if vx("FEPXALL").exists(),cuvar.fepxall.isNull() do vreqerr("FEPXALL") quit
	}
	if 'vobj(cuvar,-100,"GLEFD","").order().isNull() do {
		if vx("GLEFDBCH").exists(),cuvar.glefdbch.isNull() do vreqerr("GLEFDBCH") quit
	}
	if 'vobj(cuvar,-100,"IMAGE","").order().isNull() do {
		if vx("IMAGE").exists(),cuvar.image.isNull() do vreqerr("IMAGE") quit
	}
	if 'vobj(cuvar,-100,"INCK","").order().isNull() do {
		if vx("ICDTF").exists(),cuvar.icdtf.isNull() do vreqerr("ICDTF") quit
		if vx("ICDFF").exists(),cuvar.icdff.isNull() do vreqerr("ICDFF") quit
		if vx("ICDNF").exists(),cuvar.icdnf.isNull() do vreqerr("ICDNF") quit
		if vx("ICDRF").exists(),cuvar.icdrf.isNull() do vreqerr("ICDRF") quit
		if vx("ICLTF").exists(),cuvar.icltf.isNull() do vreqerr("ICLTF") quit
		if vx("ICLFF").exists(),cuvar.iclff.isNull() do vreqerr("ICLFF") quit
		if vx("ICLNF").exists(),cuvar.iclnf.isNull() do vreqerr("ICLNF") quit
		if vx("ICLRF").exists(),cuvar.iclrf.isNull() do vreqerr("ICLRF") quit
		if vx("ICCFF").exists(),cuvar.iccff.isNull() do vreqerr("ICCFF") quit
		if vx("ICCNF").exists(),cuvar.iccnf.isNull() do vreqerr("ICCNF") quit
	}
	if 'vobj(cuvar,-100,"IPD","").order().isNull() do {
		if vx("IPD").exists(),cuvar.ipd.isNull() do vreqerr("IPD") quit
	}
	if 'vobj(cuvar,-100,"LETTER","").order().isNull() do {
		if vx("LETFIX").exists(),cuvar.letfix.isNull() do vreqerr("LETFIX") quit
	}
	if 'vobj(cuvar,-100,"LN","").order().isNull() do {
		if vx("DARCDFLG").exists(),cuvar.darcdflg.isNull() do vreqerr("DARCDFLG") quit
		if vx("LNRENDEL").exists(),cuvar.lnrendel.isNull() do vreqerr("LNRENDEL") quit
		if vx("MRPT").exists(),cuvar.mrpt.isNull() do vreqerr("MRPT") quit
	}
	if 'vobj(cuvar,-100,"MFUND","").order().isNull() do {
		if vx("CIFEXTI").exists(),cuvar.cifexti.isNull() do vreqerr("CIFEXTI") quit
	}
	if 'vobj(cuvar,-100,"MULTIITSID","").order().isNull() do {
		if vx("MULTIITSID").exists(),cuvar.multiitsid.isNull() do vreqerr("MULTIITSID") quit
	}
	if 'vobj(cuvar,-100,"MXTRLM","").order().isNull() do {
		if vx("MXTRLM").exists(),cuvar.mxtrlm.isNull() do vreqerr("MXTRLM") quit
	}
	if 'vobj(cuvar,-100,"NOREGD","").order().isNull() do {
		if vx("NOREGD").exists(),cuvar.noregd.isNull() do vreqerr("NOREGD") quit
	}
	if 'vobj(cuvar,-100,"ODP","").order().isNull() do {
		if vx("ODP").exists(),cuvar.odp.isNull() do vreqerr("ODP") quit
		if vx("SFEEOPT").exists(),cuvar.sfeeopt.isNull() do vreqerr("SFEEOPT") quit
	}
	if 'vobj(cuvar,-100,"ODPE","").order().isNull() do {
		if vx("ODPE").exists(),cuvar.odpe.isNull() do vreqerr("ODPE") quit
	}
	if 'vobj(cuvar,-100,"OPTIMIZE","").order().isNull() do {
		if vx("NOSEGMENTS").exists(),cuvar.nosegments.isNull() do vreqerr("NOSEGMENTS") quit
	}
	if 'vobj(cuvar,-100,"PUBLISH","").order().isNull() do {
		if vx("PUBLISH").exists(),cuvar.publish.isNull() do vreqerr("PUBLISH") quit
	}
	if 'vobj(cuvar,-100,"REGCC","").order().isNull() do {
		if vx("REGCCOPT").exists(),cuvar.regccopt.isNull() do vreqerr("REGCCOPT") quit
	}
	if 'vobj(cuvar,-100,"REGFLG","").order().isNull() do {
		if vx("REGFLG").exists(),cuvar.regflg.isNull() do vreqerr("REGFLG") quit
	}
	if 'vobj(cuvar,-100,"RESPROC","").order().isNull() do {
		if vx("RESPROC").exists(),cuvar.resproc.isNull() do vreqerr("RESPROC") quit
	}
	if 'vobj(cuvar,-100,"RESTRICT","").order().isNull() do {
		if vx("RESTRICT").exists(),cuvar.restrict.isNull() do vreqerr("RESTRICT") quit
	}
	if 'vobj(cuvar,-100,"SCAUREL","").order().isNull() do {
		if vx("SCAUREL").exists(),cuvar.scaurel.isNull() do vreqerr("SCAUREL") quit
	}
	if 'vobj(cuvar,-100,"SCHRC","").order().isNull() do {
		if vx("SCHRCC").exists(),cuvar.schrcc.isNull() do vreqerr("SCHRCC") quit
		if vx("SCHRCK").exists(),cuvar.schrck.isNull() do vreqerr("SCHRCK") quit
		if vx("SCHRCL").exists(),cuvar.schrcl.isNull() do vreqerr("SCHRCL") quit
		if vx("SCHRCN").exists(),cuvar.schrcn.isNull() do vreqerr("SCHRCN") quit
		if vx("SCHRI").exists(),cuvar.schri.isNull() do vreqerr("SCHRI") quit
		if vx("SCHRCE").exists(),cuvar.schrce.isNull() do vreqerr("SCHRCE") quit
	}
	if 'vobj(cuvar,-100,"STMTSRT","").order().isNull() do {
		if vx("STMTCDSKIP").exists(),cuvar.stmtcdskip.isNull() do vreqerr("STMTCDSKIP") quit
		if vx("STMTINTRTC").exists(),cuvar.stmtintrtc.isNull() do vreqerr("STMTINTRTC") quit
		if vx("STMTLNSKIP").exists(),cuvar.stmtlnskip.isNull() do vreqerr("STMTLNSKIP") quit
		if vx("STMTCUMUL").exists(),cuvar.stmtcumul.isNull() do vreqerr("STMTCUMUL") quit
	}
	if 'vobj(cuvar,-100,"SWIFT","").order().isNull() do {
		if vx("EXTREM").exists(),cuvar.extrem.isNull() do vreqerr("EXTREM") quit
	}
	if 'vobj(cuvar,-100,"UACNL1F","").order().isNull() do {
		if vx("UACNL1F").exists(),cuvar.uacnl1f.isNull() do vreqerr("UACNL1F") quit
	}
	if 'vobj(cuvar,-100,"USRESTAT","").order().isNull() do {
		if vx("USRESTAT").exists(),cuvar.usrestat.isNull() do vreqerr("USRESTAT") quit
	}
		if vx("%KEYS").exists(),cuvar.%keys.isNull() do vreqerr("%KEYS") quit
		if vx("%MCP").exists(),cuvar.%mcp.isNull() do vreqerr("%MCP") quit
		if vx("ALPHI").exists(),cuvar.alphi.isNull() do vreqerr("ALPHI") quit
		if vx("BAMTMOD").exists(),cuvar.bamtmod.isNull() do vreqerr("BAMTMOD") quit
		if vx("BANNER").exists(),cuvar.banner.isNull() do vreqerr("BANNER") quit
		if vx("BINDEF").exists(),cuvar.bindef.isNull() do vreqerr("BINDEF") quit
		if vx("BOBR").exists(),cuvar.bobr.isNull() do vreqerr("BOBR") quit
		if vx("BSEMOD").exists(),cuvar.bsemod.isNull() do vreqerr("BSEMOD") quit
		if vx("CATSUP").exists(),cuvar.catsup.isNull() do vreqerr("CATSUP") quit
		if vx("CCMOD").exists(),cuvar.ccmod.isNull() do vreqerr("CCMOD") quit
		if vx("CHKIMG").exists(),cuvar.chkimg.isNull() do vreqerr("CHKIMG") quit
		if vx("CIFALLOC").exists(),cuvar.cifalloc.isNull() do vreqerr("CIFALLOC") quit
		if vx("CIFEXTI").exists(),cuvar.cifexti.isNull() do vreqerr("CIFEXTI") quit
		if vx("CMSACOPT").exists(),cuvar.cmsacopt.isNull() do vreqerr("CMSACOPT") quit
		if vx("CRTDSP").exists(),cuvar.crtdsp.isNull() do vreqerr("CRTDSP") quit
		if vx("CTOF1098").exists(),cuvar.ctof1098.isNull() do vreqerr("CTOF1098") quit
		if vx("CTOF1099").exists(),cuvar.ctof1099.isNull() do vreqerr("CTOF1099") quit
		if vx("CURRENV").exists(),cuvar.currenv.isNull() do vreqerr("CURRENV") quit
		if vx("DARCDFLG").exists(),cuvar.darcdflg.isNull() do vreqerr("DARCDFLG") quit
		if vx("DEBAUT").exists(),cuvar.debaut.isNull() do vreqerr("DEBAUT") quit
		if vx("DEVPTR").exists(),cuvar.devptr.isNull() do vreqerr("DEVPTR") quit
		if vx("DFTTHRC").exists(),cuvar.dftthrc.isNull() do vreqerr("DFTTHRC") quit
		if vx("DFTTHRR").exists(),cuvar.dftthrr.isNull() do vreqerr("DFTTHRR") quit
		if vx("DUPTIN").exists(),cuvar.duptin.isNull() do vreqerr("DUPTIN") quit
		if vx("EFD").exists(),cuvar.efd.isNull() do vreqerr("EFD") quit
		if vx("EFDFTFLG").exists(),cuvar.efdftflg.isNull() do vreqerr("EFDFTFLG") quit
		if vx("EFTMEMO").exists(),cuvar.eftmemo.isNull() do vreqerr("EFTMEMO") quit
		if vx("EFTREFNO").exists(),cuvar.eftrefno.isNull() do vreqerr("EFTREFNO") quit
		if vx("EFTRICO").exists(),cuvar.eftrico.isNull() do vreqerr("EFTRICO") quit
		if vx("EMU").exists(),cuvar.emu.isNull() do vreqerr("EMU") quit
		if vx("ERRMDFT").exists(),cuvar.errmdft.isNull() do vreqerr("ERRMDFT") quit
		if vx("EURINTEG").exists(),cuvar.eurinteg.isNull() do vreqerr("EURINTEG") quit
		if vx("EXTREM").exists(),cuvar.extrem.isNull() do vreqerr("EXTREM") quit
		if vx("EXTVAL").exists(),cuvar.extval.isNull() do vreqerr("EXTVAL") quit
		if vx("FAILWAIT").exists(),cuvar.failwait.isNull() do vreqerr("FAILWAIT") quit
		if vx("FCVMEMO").exists(),cuvar.fcvmemo.isNull() do vreqerr("FCVMEMO") quit
		if vx("FEPXALL").exists(),cuvar.fepxall.isNull() do vreqerr("FEPXALL") quit
		if vx("FINYE").exists(),cuvar.finye.isNull() do vreqerr("FINYE") quit
		if vx("FLDOVF").exists(),cuvar.fldovf.isNull() do vreqerr("FLDOVF") quit
		if vx("FNCRATE").exists(),cuvar.fncrate.isNull() do vreqerr("FNCRATE") quit
		if vx("FUTBLD").exists(),cuvar.futbld.isNull() do vreqerr("FUTBLD") quit
		if vx("FX").exists(),cuvar.fx.isNull() do vreqerr("FX") quit
		if vx("GLEFDBCH").exists(),cuvar.glefdbch.isNull() do vreqerr("GLEFDBCH") quit
		if vx("ICCFF").exists(),cuvar.iccff.isNull() do vreqerr("ICCFF") quit
		if vx("ICCNF").exists(),cuvar.iccnf.isNull() do vreqerr("ICCNF") quit
		if vx("ICDFF").exists(),cuvar.icdff.isNull() do vreqerr("ICDFF") quit
		if vx("ICDNF").exists(),cuvar.icdnf.isNull() do vreqerr("ICDNF") quit
		if vx("ICDRF").exists(),cuvar.icdrf.isNull() do vreqerr("ICDRF") quit
		if vx("ICDTF").exists(),cuvar.icdtf.isNull() do vreqerr("ICDTF") quit
		if vx("ICLFF").exists(),cuvar.iclff.isNull() do vreqerr("ICLFF") quit
		if vx("ICLNF").exists(),cuvar.iclnf.isNull() do vreqerr("ICLNF") quit
		if vx("ICLRF").exists(),cuvar.iclrf.isNull() do vreqerr("ICLRF") quit
		if vx("ICLTF").exists(),cuvar.icltf.isNull() do vreqerr("ICLTF") quit
		if vx("IMAGE").exists(),cuvar.image.isNull() do vreqerr("IMAGE") quit
		if vx("IPD").exists(),cuvar.ipd.isNull() do vreqerr("IPD") quit
		if vx("LCCADR").exists(),cuvar.lccadr.isNull() do vreqerr("LCCADR") quit
		if vx("LCCPU").exists(),cuvar.lccpu.isNull() do vreqerr("LCCPU") quit
		if vx("LCCTIT").exists(),cuvar.lcctit.isNull() do vreqerr("LCCTIT") quit
		if vx("LETFIX").exists(),cuvar.letfix.isNull() do vreqerr("LETFIX") quit
		if vx("LIMPRO").exists(),cuvar.limpro.isNull() do vreqerr("LIMPRO") quit
		if vx("LNRENDEL").exists(),cuvar.lnrendel.isNull() do vreqerr("LNRENDEL") quit
		if vx("MRPT").exists(),cuvar.mrpt.isNull() do vreqerr("MRPT") quit
		if vx("MULTIITSID").exists(),cuvar.multiitsid.isNull() do vreqerr("MULTIITSID") quit
		if vx("MXTRLM").exists(),cuvar.mxtrlm.isNull() do vreqerr("MXTRLM") quit
		if vx("NOREGD").exists(),cuvar.noregd.isNull() do vreqerr("NOREGD") quit
		if vx("NOSEGMENTS").exists(),cuvar.nosegments.isNull() do vreqerr("NOSEGMENTS") quit
		if vx("NOTP").exists(),cuvar.notp.isNull() do vreqerr("NOTP") quit
		if vx("ODP").exists(),cuvar.odp.isNull() do vreqerr("ODP") quit
		if vx("ODPE").exists(),cuvar.odpe.isNull() do vreqerr("ODPE") quit
		if vx("ORCIFN").exists(),cuvar.orcifn.isNull() do vreqerr("ORCIFN") quit
		if vx("OTC").exists(),cuvar.otc.isNull() do vreqerr("OTC") quit
		if vx("PUBLISH").exists(),cuvar.publish.isNull() do vreqerr("PUBLISH") quit
		if vx("REGCCOPT").exists(),cuvar.regccopt.isNull() do vreqerr("REGCCOPT") quit
		if vx("REGFLG").exists(),cuvar.regflg.isNull() do vreqerr("REGFLG") quit
		if vx("REKEY").exists(),cuvar.rekey.isNull() do vreqerr("REKEY") quit
		if vx("RESPROC").exists(),cuvar.resproc.isNull() do vreqerr("RESPROC") quit
		if vx("RESTRICT").exists(),cuvar.restrict.isNull() do vreqerr("RESTRICT") quit
		if vx("RPANET").exists(),cuvar.rpanet.isNull() do vreqerr("RPANET") quit
		if vx("SCAUREL").exists(),cuvar.scaurel.isNull() do vreqerr("SCAUREL") quit
		if vx("SCHRCC").exists(),cuvar.schrcc.isNull() do vreqerr("SCHRCC") quit
		if vx("SCHRCE").exists(),cuvar.schrce.isNull() do vreqerr("SCHRCE") quit
		if vx("SCHRCK").exists(),cuvar.schrck.isNull() do vreqerr("SCHRCK") quit
		if vx("SCHRCL").exists(),cuvar.schrcl.isNull() do vreqerr("SCHRCL") quit
		if vx("SCHRCN").exists(),cuvar.schrcn.isNull() do vreqerr("SCHRCN") quit
		if vx("SCHRI").exists(),cuvar.schri.isNull() do vreqerr("SCHRI") quit
		if vx("SCOVR").exists(),cuvar.scovr.isNull() do vreqerr("SCOVR") quit
		if vx("SFEEOPT").exists(),cuvar.sfeeopt.isNull() do vreqerr("SFEEOPT") quit
		if vx("STMLCC").exists(),cuvar.stmlcc.isNull() do vreqerr("STMLCC") quit
		if vx("STMTCDSKIP").exists(),cuvar.stmtcdskip.isNull() do vreqerr("STMTCDSKIP") quit
		if vx("STMTCUMUL").exists(),cuvar.stmtcumul.isNull() do vreqerr("STMTCUMUL") quit
		if vx("STMTINTRTC").exists(),cuvar.stmtintrtc.isNull() do vreqerr("STMTINTRTC") quit
		if vx("STMTLNSKIP").exists(),cuvar.stmtlnskip.isNull() do vreqerr("STMTLNSKIP") quit
		if vx("TAXYE").exists(),cuvar.taxye.isNull() do vreqerr("TAXYE") quit
		if vx("TFS").exists(),cuvar.tfs.isNull() do vreqerr("TFS") quit
		if vx("TINCO").exists(),cuvar.tinco.isNull() do vreqerr("TINCO") quit
		if vx("TREF").exists(),cuvar.tref.isNull() do vreqerr("TREF") quit
		if vx("UACNL1F").exists(),cuvar.uacnl1f.isNull() do vreqerr("UACNL1F") quit
		if vx("USRESTAT").exists(),cuvar.usrestat.isNull() do vreqerr("USRESTAT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CUVAR","MSG",1767,"CUVAR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("AGE1").exists()!vx("AGE2").exists()!vx("AGE3").exists()!vx("AGE4").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BALAVLCODE").exists()!vx("BALAVLPGM").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("CZIP").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FINYE").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("LTCL").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PBALRTN").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("REGCCRO").exists() do vau7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RFC").exists()!vx("RFR").exists() do vau8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("VZIP").exists() do vau9 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER-INSERT - After INSERT New Record.

	type public RecordCUVAR cuvar
 /*	 Revision History
	
 	 09/28/06 - KUMARB - CR22464
 	 	    Added code to check whether CUVAR.BALAVLPGM is defined
 	 	    if CUVAR.BALAVLCODE is 99.

     	 08/21/06 - KumarSS - 22169
		    Added code to validate the ZIP code columns.

     	 03/21/01 - JERUCHIMC - 44164
		    Added code to verify the rounding factor for Euro
 	            is greater than zero.

 	 12/26/00 - KELLYP - 42288
		    Added code to verify that the routine name defined in 
		    CUVAR.PBALRTN is a valid routine.
	
 	 02/01/00 - SCHWARTZC - 35835
	       	    Add code to validate the value of REGCCRO.  The value may
	      	    not be greater than 15 (due to hardcoded values in 
		    PROFILE).

	 01/03/00 - PENDURTHIA - 36309
        	    Verify LTCL is a valid term.
	
	*/

	type public Boolean ER
	type public String RM
	
	// Data required in Data Item ~p1
	if (cuvar.balavlcode=99),((cuvar.balavlpgm).isNull()) do Runtime.setErrMSG("CUVAR", 7531, "Custom Available Balance Calc Program") quit:ER

	// Validate ZIP code - Institution
	do ZIP^PROCZIP(cuvar.ccntry, cuvar.cstate, cuvar.czip)
	if ER.get() do Runtime.setErrMSG("CUVAR", 3333, RM) quit:ER

	// Validate ZIP code - Vendor Contact Area
	do ZIP^PROCZIP(cuvar.vccode, cuvar.vstate, cuvar.vzip)
	if ER.get() do Runtime.setErrMSG("CUVAR", 3333, RM) quit:ER

	// Euro rounding factor must be greater than zero.
	if (cuvar.rfc'=""), '(cuvar.rfc>0) set ER=1, RM=$$^MSG(4815) quit
	if (cuvar.rfr'=""), '(cuvar.rfr>0) set ER=1, RM=$$^MSG(4815) quit 

	// Number of overdrafts may not exceed 15
	if cuvar.regccro>15 do Runtime.setErrMSG("CUVAR", 4188) quit:ER

	// Loan Term verification.
	if cuvar.ltcl'="" do { quit:ER
 	// First character of term may not be '0'
								if $E(cuvar.ltcl)=0 do Runtime.setErrMSG("DEP", 1113) quit:ER
								// First character of term must be numeric
								if +cuvar.ltcl=0 do Runtime.setErrMSG("DEP", 1114) quit:ER
								// Lowercase characters not allowed
								if cuvar.ltcl?.E1L.E do Runtime.setErrMSG("DEP", 1662) quit:ER
								// Term may only contain characters D,  W,  M,  or Y
								for I=1:1:$L(cuvar.ltcl) if '("DWMY"[$E(cuvar.ltcl, I)!($E(cuvar.ltcl, I)?1N)) do Runtime.setErrMSG("DEP", 2628) quit:ER
								// Last character of term must be D,  W,  M,  or Y
								if $E(cuvar.ltcl, $L(cuvar.ltcl))?1N do Runtime.setErrMSG("DEP", 2714) quit:ER
								}

	/* 
		42288 - Make sure that the routine name entered in CUVAR.PBALRT is a valid
  	  routine
	*/
	new PBRTN
	set PBRTN=cuvar.pbalrtn
	if (PBRTN'="") do {
 	// Invalid routine name ~p1
	if '($$VALID^%ZRTNS(PBRTN)) do Runtime.setErrMSG("CUVAR", 1454, PBRTN) quit:ER
 	}

	quit

vau1 // Trigger AU_AGE_MILESTONES - After Update Age Milestones

	type public RecordCUVAR cuvar
	/*
	----Revision History--------------------------------------------------
	09/09/99 - CARROLLJ - 33890
		   Convert to PSL.

	08/12/99 - MOHAMEDE - 33544
		   Added code to order sort age milestones and return the
		   message "Age milestones are not in a progressive order"
		   when the change of the age milestones in the institutions
		   variables fails to meet the progressive order of the
		   first the lowest and the last the highest.


	Age milestones are to be positive greater than zero in a progressive order.
	*/

	if (cuvar.age1'>0)!(cuvar.age1'<cuvar.age2)!(cuvar.age2'<cuvar.age3)!(cuvar.age3'<cuvar.age4) do Runtime.setErrMSG("CUVAR",3984) quit:ER 
	quit
	

vau2 // Trigger AU_BALAVLCODE - After Update BALAVLCODE and BALAVLPGM

	type public RecordCUVAR cuvar
	/*
	---- Revision History -----------------------------------------
	
	10/03/06 - KUMARB - CR22464
 	 	    Added code to check whether CUVAR.BALAVLPGM is defined
 	 	    if CUVAR.BALAVLCODE is 99.
	
	*/

	type public Boolean ER
	
	// Data required in Data Item ~p1
	if (cuvar.balavlcode=99),((cuvar.balavlpgm).isNull()) do Runtime.setErrMSG("CUVAR", 7531, "Custom Available Balance Calc Program") quit:ER
	quit

vau3 // Trigger AU_CZIP - After Update of Customer ZIP Code

	type public RecordCUVAR cuvar

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with
		   institution.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Insitution
	do ZIP^PROCZIP(cuvar.ccntry, cuvar.cstate, cuvar.czip)
	if ER.get() do Runtime.setErrMSG("CUVAR", 3333, RM)

	quit

vau4 // Trigger AU_FINYE - After Update of Financial Year-End

	type public RecordCUVAR cuvar
	/*	Revision History
	
		11/06/03 - CHHABRIS - CR6664
			   Created trigger to verify that cuvar.finye is not
			   modified to a date less than the current system date.
	*/

	// Date cannot be less than system date
	if cuvar.finye<%SystemDate do Runtime.setErrMSG("CUVAR",7647) quit:ER
	quit

vau5 // Trigger AU_LTCL - After Update

	type public RecordCUVAR cuvar
	/*        Revision History
 	 	01/03/00 - PENDURTHIA - 36309
               	Verify LTCL is a valid term. 
	
	*/

	//  Loan Term Cover Limit verification.
	
	
	if cuvar.ltcl'="" do { quit:ER
																// First character of term may not be '0'
																if $E(cuvar.ltcl)=0 do Runtime.setErrMSG("DEP",1113) quit:ER
																// First character of term must be numeric
																if +cuvar.ltcl=0 do Runtime.setErrMSG("DEP",1114) quit:ER
																// Term must contain character D, W, M, or Y
																if cuvar.ltcl=+cuvar.ltcl do Runtime.setErrMSG("DEP",2629) quit:ER
																// Lowercase characters not allowed
																if cuvar.ltcl?.E1L.E do Runtime.setErrMSG("DEP",1662) quit:ER
																// Term may only contain characters D, W, M, or Y
																for I=1:1:$L(cuvar.ltcl) if '("DWMY"[$E(cuvar.ltcl,I)!($E(cuvar.ltcl,I)?1N)) do Runtime.setErrMSG("DEP",2628) quit:ER
																// Last character of term must be D, W, M, or Y
																if $E(cuvar.ltcl,$L(cuvar.ltcl))?1N do Runtime.setErrMSG("DEP",2714) quit:ER
																						}
								quit

vau6 // Trigger AU_PBALRTN - After Update Penalty Balance Rtn Trigger

	type public RecordCUVAR cuvar
	// 42288 - Make sure that the routine name defined in CUVAR.PBALRTN is valid
	new PBRTN
	set PBRTN=cuvar.pbalrtn
	if (PBRTN'="") do {
 	// Invalid routine name ~p1
	if '($$VALID^%ZRTNS(PBRTN)) do Runtime.setErrMSG("CUVAR",1454,PBRTN) quit:ER
	}
	quit

vau7 // Trigger AU_REGCCRO - After Update REGCCRO

	type public RecordCUVAR cuvar
	/*
	---- Revision History ------------------------------------------------
	 
			02/01/00 - SCHWARTZC - 35835
														Add code to validate the value of REGCCRO.  The value may
														not be greater than 15 (due to hardcoded values in PROFILE).

	----------------------------------------------------------------------
	*/

	// Number of overdrafts may not exceed 15
	if cuvar.regccro>15 do Runtime.setErrMSG("CUVAR",4188) quit:ER
	quit

vau8 // Trigger AU_RFC - After Update Euro Rounding Factor

	type public RecordCUVAR cuvar
		/*      Revision History
	
									03/21/01 - JERUCHIMC - 44164
																				Added code to verify the rounding factor for Euro
																				is greater than zero.
	*/
		 
	// Euro rounding factor must be greater than zero.
	if (cuvar.rfc'=""),'(cuvar.rfc>0) set ER=1,RM=$$^MSG(4815) quit
	if (cuvar.rfr'=""),'(cuvar.rfr>0) set ER=1,RM=$$^MSG(4815) quit
	quit

vau9 // Trigger AU_VZIP - After Update of Vendor ZIP Code

	type public RecordCUVAR cuvar

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with vendor.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Vendor Contacr Area
	do ZIP^PROCZIP("US", cuvar.vstate, cuvar.vzip)
	if ER.get() do Runtime.setErrMSG("CUVAR", 3333, RM)

	quit



vkchged // Access key changed

	type public RecordCUVAR cuvar

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("")
	set voldkey = vux.piece("|",1),vobj(cuvar,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver^CUVARFI0
	do vexec

	set vnewkey = vux.piece("|",2),vobj(cuvar,-3) = vnewkey // Copy new keys into object
	type RecordCUVAR vnewrec = cuvar.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CUVAR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(cuvar,-3) = vux.piece("|",1)                  // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
