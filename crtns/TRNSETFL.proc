TRNSETFL(RecordUTBLTRNSET utbltrnset, String vpar, Boolean vparNorm) // UTBLTRNSET - Transaction Sets Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (12)             12/28/2005
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbltrnset.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utbltrnset,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbltrnset,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TRNSET = utbltrnset.trnset
	type String SEQ = utbltrnset.seq
	type String TRNFIELD = utbltrnset.trnfield

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TRNSET").exists()!vx("SEQ").exists()!vx("TRNFIELD").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLTRNSET",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLTRNSET","TRNSET = :utbltrnset.trnset and SEQ = :utbltrnset.seq and TRNFIELD = :utbltrnset.trnfield") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TRNSET
	type public String SEQ
	type public String TRNFIELD

	type RecordUTBLTRNSET utbltrnset = Db.getRecord("UTBLTRNSET","TRNSET=:TRNSET,SEQ=:SEQ,TRNFIELD=:TRNFIELD")
	if (%ProcessMode = 2) do {
		do utbltrnset.setMode(2)

		do TRNSETFL(utbltrnset,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLTRNSET utbltrnset

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLTRNSET","TRNSET = :utbltrnset.trnset and SEQ = :utbltrnset.seq and TRNFIELD = :utbltrnset.trnfield") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbltrnset,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbltrnset,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbltrnset))  S ^UTBL("TRNSET",vobj(utbltrnset,-3),vobj(utbltrnset,-4),vobj(utbltrnset,-5))=vobj(utbltrnset)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLTRNSET utbltrnset

	if vpar'["/NOLOG/" do ^DBSLOGIT(utbltrnset,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("TRNSET",vobj(utbltrnset,-3),vobj(utbltrnset,-4),vobj(utbltrnset,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLTRNSET utbltrnset

	// Type local variables for access keys for defaults
	type public String TRNSET
	type public String SEQ
	type public String TRNFIELD

	if utbltrnset.diszero.isNull() set utbltrnset.diszero = 0 // diszero
	if utbltrnset.prot.isNull() set utbltrnset.prot = 0    // prot
	quit


vreqn // Validate required data items

	type public RecordUTBLTRNSET utbltrnset

	if utbltrnset.diszero.isNull() do vreqerr("DISZERO") quit
	if utbltrnset.prot.isNull() do vreqerr("PROT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLTRNSET utbltrnset

	if utbltrnset.trnset.isNull() do vreqerr("TRNSET") quit
	if utbltrnset.seq.isNull() do vreqerr("SEQ") quit
	if utbltrnset.trnfield.isNull() do vreqerr("TRNFIELD") quit

		if vx("DISZERO").exists(),utbltrnset.diszero.isNull() do vreqerr("DISZERO") quit
		if vx("PROT").exists(),utbltrnset.prot.isNull() do vreqerr("PROT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLTRNSET","MSG",1767,"UTBLTRNSET."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AI - After Insert

	type public RecordUTBLTRNSET utbltrnset
								/*
								----Revision History---------------------------------------------------
	03/09/2000 - DOUGANM - 31126
		   Again added parameter to call to ^PROCTRNS, because it can 
		   now handle calls from both PSL'd and non-PSL'd programs.

								02/23/2000 - DOUGANM - 31126
																			Removed parameter passing in call to procedure def ^PROCTRNS,
		   because it no longer expects an argument, since all calling 
		   programs aren't yet PSL'd.

								11/18/99 - DOUGANM - 31126
																			Added parameter to call to procedure def: ^PROCTRNS,
																			which since being PSL'd, now requires an argument.
	
								09/23/99 - CARROLLJ - 31126
																			Convert to PSL
								*/ 

	do ^PROCTRNS(.utbltrnset)
	quit
	

vau1 // Trigger AU - After Update

	type public RecordUTBLTRNSET utbltrnset
								/*
								----Revision History---------------------------------------------------

								03/09/2000 - DOUGANM - 31126
																			Again added parameter to call to ^PROCTRNS, because it can
																			now handle calls from both PSL'd and non-PSL'd programs.
	
								02/23/2000 - DOUGANM - 31126
																			Removed parameter passing in call to procedure def ^PROCTRNS,
																			because it no longer expects an argument, since all calling
																			programs aren't yet PSL'd.

								11/18/99 - DOUGANM - 31126
																			Added parameter to call to procedure def: ^PROCTRNS,
																			which since being PSL'd, now requires an argument.
	
								09/23/99 - CARROLLJ - 31126
																			Convert to PSL
								*/

	do ^PROCTRNS(.utbltrnset)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLTRNSET utbltrnset

	if utbltrnset.trnset.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TRNSET", vRM) quit
	set X = utbltrnset.seq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if utbltrnset.trnfield.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TRNFIELD", vRM) quit
	if '("01"[utbltrnset.DISZERO) set vRM=$$^MSG(742,"L") do vdderr("DISZERO", vRM) quit
	if utbltrnset.dte.length()>10 set vRM = $$^MSG(1076,10) do vdderr("DTE", vRM) quit
	if utbltrnset.fixedval.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FIXEDVAL", vRM) quit
	if utbltrnset.function.length()>20 set vRM = $$^MSG(1076,20) do vdderr("FUNCTION", vRM) quit
	if '("01"[utbltrnset.PROT) set vRM=$$^MSG(742,"L") do vdderr("PROT", vRM) quit
	set X = utbltrnset.reftran if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("REFTRAN", vRM) quit
	if utbltrnset.repeat.length()>20 set vRM = $$^MSG(1076,20) do vdderr("REPEAT", vRM) quit
	if utbltrnset.tablecol.length()>15 set vRM = $$^MSG(1076,15) do vdderr("TABLECOL", vRM) quit
	if utbltrnset.tso.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TSO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLTRNSET","MSG",979,"UTBLTRNSET."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLTRNSET utbltrnset

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("TRNSET").exists() set vux("TRNSET") = vx("TRNSET")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	if vx("TRNFIELD").exists() set vux("TRNFIELD") = vx("TRNFIELD")
	do vkey(1) set voldkey = utbltrnset.trnset_","_utbltrnset.seq_","_utbltrnset.trnfield // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utbltrnset.trnset_","_utbltrnset.seq_","_utbltrnset.trnfield // Copy new keys into object
	type RecordUTBLTRNSET vnewrec = utbltrnset.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLTRNSET",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLTRNSET utbltrnset

	if vux("TRNSET").exists() set utbltrnset.trnset = vux("TRNSET").piece("|",i)
	if vux("SEQ").exists() set utbltrnset.seq = vux("SEQ").piece("|",i)
	if vux("TRNFIELD").exists() set utbltrnset.trnfield = vux("TRNFIELD").piece("|",i)
	quit
