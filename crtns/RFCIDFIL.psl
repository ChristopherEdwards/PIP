RFCIDFIL(RecordRFLGRPACID rflgrpacid, String vpar, Boolean vparNorm) // RFLGRPACID - Retirement/Savings Plan Restrictions, CID level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              06/27/2007
	// Trigger Definition (4)                      07/19/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = rflgrpacid.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(rflgrpacid,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(rflgrpacid,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = rflgrpacid.acn
	type String RPASEQ = rflgrpacid.rpaseq
	type String RFLG = rflgrpacid.rflg
	type String CID = rflgrpacid.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("RPASEQ").exists()!vx("RFLG").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RFLGRPACID",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RFLGRPACID","ACN = :rflgrpacid.acn and RPASEQ = :rflgrpacid.rpaseq and RFLG = :rflgrpacid.rflg and CID = :rflgrpacid.cid") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String RPASEQ
	type public String RFLG
	type public String CID

	type RecordRFLGRPACID rflgrpacid = Db.getRecord("RFLGRPACID","ACN=:ACN,RPASEQ=:RPASEQ,RFLG=:RFLG,CID=:CID")
	if (%ProcessMode = 2) do {
		do rflgrpacid.setMode(2)

		do RFCIDFIL(rflgrpacid,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRFLGRPACID rflgrpacid

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RFLGRPACID","ACN = :rflgrpacid.acn and RPASEQ = :rflgrpacid.rpaseq and RFLG = :rflgrpacid.rflg and CID = :rflgrpacid.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(rflgrpacid)) S ^HLD(13,vobj(rflgrpacid,-3),vobj(rflgrpacid,-4),vobj(rflgrpacid,-5),vobj(rflgrpacid,-6))=vobj(rflgrpacid)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRFLGRPACID rflgrpacid


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^HLD(13,vobj(rflgrpacid,-3),vobj(rflgrpacid,-4),vobj(rflgrpacid,-5),vobj(rflgrpacid,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordRFLGRPACID rflgrpacid

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRFLGRPACID rflgrpacid

	if rflgrpacid.acn.isNull() do vreqerr("ACN") quit
	if rflgrpacid.rpaseq.isNull() do vreqerr("RPASEQ") quit
	if rflgrpacid.rflg.isNull() do vreqerr("RFLG") quit
	if rflgrpacid.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLGRPACID","MSG",1767,"RFLGRPACID."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordRFLGRPACID rflgrpacid
	if 'rflgrpacid.rflg.isNull() set vfkey("^HLD("_13_","_""""_rflgrpacid.acn_""""_","_""""_rflgrpacid.rpaseq_""""_","_""""_rflgrpacid.rflg_""""_")")="RFLGRPACID(ACN,RPASEQ,RFLG) -> RFLGRPA"
	if 'rflgrpacid.cid.isNull() set vfkey("^ACN("_""""_rflgrpacid.cid_""""_","_50_")")="RFLGRPACID(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordRFLGRPACID rflgrpacid
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("RFLGRPA",":rflgrpacid.acn,:rflgrpacid.rpaseq,:rflgrpacid.rflg") set vERRMSG = $$^MSG(8563,"RFLGRPACID(ACN,RPASEQ,RFLG) -> RFLGRPA") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("ACN",":rflgrpacid.cid") set vERRMSG = $$^MSG(8563,"RFLGRPACID(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - RFLGRPACID After Delete Trigger

	type public RecordRFLGRPACID rflgrpacid
	/*
	----- Revision History -----------------------------------------------
	
	07/19/05 - RussellDS - CR16614
		   Changed references to vpar array to vpar variable.
		   
		   Minor PSL clean up.
		   
		   Removed old revision history.
	*/
	
	// After Delete Restriction
	
	type public Number CID
	type public String RFLG, vpar
	
	type String RFLR, TCMT
	
	//Restriction ~p1 removed from account ~p2
	set TCMT = $$^MSG(2414, RFLG, CID) do HISTBLD^ACNFUNCS(TCMT)
	
	type ResultSet rs = Db.select("ACN", "RFLGRPACID", "CID=:CID") 
	quit:'rs.isEmpty()		// Still have entries
		
	type ResultSet rs2=Db.select("RFLG","RFLGCCID","CID=:CID") 
	quit:rs2.isEmpty()
	
	if rs2.next() set RFLR = rs2.getCol("RFLG")
		
	type RecordACN acn = Db.getRecord("ACN", "CID=:CID")
	
	if acn.rflg, RFLR.isNull() do {
	
		type String par = ""
		
		if vpar.isLike("%/FRMFILER/%") set par = "/FRMFILER"
		
		type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
		
		set dep.rflg = 0
		
		do dep.save(par)
	}

	quit

vai1 // Trigger AFTER_INSERT - RFLGRPACID After Insert Trigger

	type public RecordRFLGRPACID rflgrpacid
	/*
	----- Revision History -----------------------------------------------
	
	07/19/05 - RussellDS - CR16614
		   Changed references to vpar array to vpar variable.
		   
		   Minor PSL clean up.
	*/

	type public Number ACN, CID
	type public String RFLG, vpar
	
	type Number SAVACN

	// Set Restriction Flags After Insert
	type RecordACN acn = Db.getRecord("ACN", "CID=:CID")
	
	set SAVACN = ACN
	
	if 'acn.rflg do {
	
		type String par, TCMT
		
		set par = ""
		
		if vpar.isLike("%/FRMFILER/%") set par = "/FRMFILER"
		
		type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
		
		set dep.rflg = 1
		
		do dep.save(par)
	
		//Restriction ~p1 placed on account ~p2
		set TCMT=$$^MSG(2413,RFLG,CID)
		do HISTBLD^ACNFUNCS(TCMT)
	}

	set ACN = SAVACN

	quit
	

vbd1 // Trigger BEFORE_DELETE - RFLGRPACID Before Delete Trigger

	type public RecordRFLGRPACID rflgrpacid
	// Before Delete Trigger
	
	// Invalid customer number
	if 'Db.isDefined("CIF","ACN") do Runtime.setErrMSG("RFLGRPACID",1295) quit:ER 

	// Restriction must exist in OVR system table or RFLG user table
	new GRP
	set GRP="RPA"
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") do Runtime.setErrMSG("RFLGRPACID",2408) quit:ER 

	// Restriction ~p1 not placed on account ~p2
	if 'Db.isDefined("RFLGRPACID","ACN,RPASEQ,RFLG,CID") do Runtime.setErrMSG("RFLGRPACID",2411,"RFLG~CID") quit:ER 
	quit
	

vbi1 // Trigger BEFORE_INSERT - RFLGRPACID Before Insert Trigger

	type public RecordRFLGRPACID rflgrpacid
	// Before Insert Trigger
	
	// Invalid customer number
	if 'Db.isDefined("CIF","ACN") do Runtime.setErrMSG("RFLGRPACID",1295) quit:ER 

	// Restriction must exist in OVR system table or RFLG user table
	new GRP
	set GRP="RPA"
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") do Runtime.setErrMSG("RFLGRPACID",2408) quit:ER 

	// Account ~p1 is not owned by CIF ~p2
	if 'Db.isDefined("RELCIF","ACN,CID") do Runtime.setErrMSG("RFLGRPACID",4365,"CID~ACN") quit:ER 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRFLGRPACID rflgrpacid

	set X = rflgrpacid.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = rflgrpacid.rpaseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RPASEQ", vRM) quit
	if rflgrpacid.rflg.length()>4 set vRM = $$^MSG(1076,4) do vdderr("RFLG", vRM) quit
	set X = rflgrpacid.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLGRPACID","MSG",979,"RFLGRPACID."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordRFLGRPACID rflgrpacid

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("RPASEQ").exists() set vux("RPASEQ") = vx("RPASEQ")
	if vx("RFLG").exists() set vux("RFLG") = vx("RFLG")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = rflgrpacid.acn_","_rflgrpacid.rpaseq_","_rflgrpacid.rflg_","_rflgrpacid.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = rflgrpacid.acn_","_rflgrpacid.rpaseq_","_rflgrpacid.rflg_","_rflgrpacid.cid // Copy new keys into object
	type RecordRFLGRPACID vnewrec = rflgrpacid.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RFLGRPACID",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRFLGRPACID rflgrpacid

	if vux("ACN").exists() set rflgrpacid.acn = vux("ACN").piece("|",i)
	if vux("RPASEQ").exists() set rflgrpacid.rpaseq = vux("RPASEQ").piece("|",i)
	if vux("RFLG").exists() set rflgrpacid.rflg = vux("RFLG").piece("|",i)
	if vux("CID").exists() set rflgrpacid.cid = vux("CID").piece("|",i)
	quit
