CIFHFILE(RecordCIFH cifh, String vpar, Boolean vparNorm) // CIFH - CIF History Sequence Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             11/22/2003
	// Journal File Definition (1)                 09/01/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cifh.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(cifh,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(cifh,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CIFH",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CIFH","ACN = :cifh.acn and SEQ = :cifh.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String SEQ

	type RecordCIFH cifh = Db.getRecord("CIFH","ACN=:ACN,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do cifh.setMode(2)

		do CIFHFILE(cifh,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCIFH cifh

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CIFH","ACN = :cifh.acn and SEQ = :cifh.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(cifh)) S ^CIFH(vobj(cifh,-3),vobj(cifh,-4))=vobj(cifh)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.cifh)                // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCIFH cifh

	if vpar["/JOURNAL/" do VJOURNAL(.cifh)                 // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CIFH(vobj(cifh,-3),vobj(cifh,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordCIFH cifh

	// Type local variables for access keys for defaults
	type public String ACN
	type public String SEQ

	if cifh.hdate.isNull() set cifh.hdate = +$H            // hdate
	if cifh.htime.isNull() set cifh.htime = $P($H,",",2)   // htime
	type public String TJD
	if cifh.tjd.isNull() set cifh.tjd = TJD                // tjd
	type public String TLO
	if cifh.tlo.isNull() set cifh.tlo = TLO                // tlo
	type public String %UID
	if cifh.uid.isNull() set cifh.uid = %UID               // uid
	quit


vreqn // Validate required data items

	type public RecordCIFH cifh

	if cifh.tjd.isNull() do vreqerr("TJD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCIFH cifh

	if cifh.acn.isNull() do vreqerr("ACN") quit
	if cifh.seq.isNull() do vreqerr("SEQ") quit

		if vx("TJD").exists(),cifh.tjd.isNull() do vreqerr("TJD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFH","MSG",1767,"CIFH."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCIFH cifh
	if 'cifh.acn.isNull() set vfkey("^CIF("_""""_cifh.acn_""""_","_1_")")="CIFH(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCIFH cifh
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":cifh.acn") set vERRMSG = $$^MSG(8563,"CIFH(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCIFH cifh

	set X = cifh.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = cifh.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = cifh.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = cifh.hdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("HDATE", vRM) quit
	set X = cifh.htime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("HTIME", vRM) quit
	if cifh.ident.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDENT", vRM) quit
	if cifh.tcmt.length()>510 set vRM = $$^MSG(1076,510) do vdderr("TCMT", vRM) quit
	set X = cifh.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	if cifh.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if cifh.tso.length()>200 set vRM = $$^MSG(1076,200) do vdderr("TSO", vRM) quit
	if cifh.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFH","MSG",979,"CIFH."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCIFH cifh)	//CIFH Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.cifh)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=CIFD_I
			}
		else  if TSRC="O" do {
			do vj1(.cifh)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CIFD_I
			}
		}

	quit


vj1(RecordCIFH cifh)	// CIFD_I  Table CIFD  Daily file maintenance journal

	type Public String EFD,TJD
	type String v1,v2,vlastkey
	set v1=TJD
	set v2=cifh.acn
	set vlastkey=cifh.seq
	type RecordCIFD cifd=Db.getRecord("CIFD","TJD=:v1,ACN=:v2,SEQ=:vlastkey",1)
	set cifd.efd=$G(EFD)
	set cifd.hdate=cifh.hdate
	set cifd.htime=cifh.htime
	set cifd.tcmt=cifh.tcmt
	set cifd.tlo=cifh.tlo
	set cifd.tso=cifh.tso
	set cifd.uid=cifh.uid

	do cifd.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordCIFH cifh

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = cifh.acn_","_cifh.seq         // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = cifh.acn_","_cifh.seq         // Copy new keys into object
	type RecordCIFH vnewrec = cifh.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CIFH",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCIFH cifh

	if vux("ACN").exists() set cifh.acn = vux("ACN").piece("|",i)
	if vux("SEQ").exists() set cifh.seq = vux("SEQ").piece("|",i)
	quit
