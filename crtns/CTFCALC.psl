CTFCALC
	/*
	ORIG: MURRAY - 01/26/2001
	DESC: Commission/Taxes/Fees Calculation


	The purpose of this routine is to calculate the commission, tax, or
	fee amount for a given account.  The commission/tax/fee (CTF) will
	be calculated based on the commission/tax/fee plan setup in the user 
	table UTBLCTFPLN.  All commission/tax/fee amounts will be
	calculated and returned in the currency of the account being
	evaluated.
		
	EXAMPLE:
	S X=$$EXT^CTFCALC(ORDNUM,FULL,CID,SECID,AMT,ORDTYPE,SHARES,TRNCD,CTL,POINTS,SEQ)
	D TRANS^CTFCALC

	---- Revision History ------------------------------------------------
	
	03/15/07 - PUTTASWH - CR 25885
		   Modified TRANS section to declare TSO() as public since 
		   SEQ wasn't defined. Modifed DTL section to fix errors 
		   and to invoke CTLCID^UINDX with the right parameters.
		   
	07/28/06 - KELLYP - CR 22048
		   Modified INCR section to eliminate PRECEDENCE warnings.
	
	04/19/06 - RussellDS - CR20209
		   Removed sections dealing with obsoleted tables ORDEXEC,
		   ORDEXTCTL, SECPOSCTF and ttx.secid column.
		   
		   Removed references to PROCTYP=4, since no longer valid.
		   
		   NOTE:  This code will need to be reviewed and cleaned up
		   	  when this system area is dealt with in detail.

	01/02/04 - CARROLLJ - CR7658
		   Corrected parameter mismatch error.
	*/

	quit

Public	EXT(ORDNUM,FULL,CID,SECID,AMT,ORDTYPE,SHARES,TRNCD,CTL,POINTS,SEQ) // External Line Tag

	/*

	   Arguments:
	
	   . ORDNUM - Order Number		/TYP=N/REQ 

		A unique number for this specific order.

	   . FULL - Full or Partial		/TYP=L/REQ 

		A logical indicator which determines if this order execution 
		represents a full execution or a partial execution.  If this 
		is the last in a series of partial executions, the full 
		indicator will be true.

	   . CID - Account Number		/TYP=N/REQ

		The investment account number for this request.

	   . SECID - Security ID		/TYP=T/REQ

		The mnemonic which identifies the equity.
		Retained for backward compatibility, but not currently
		used with obsoletion of mutual funds/securities processing.

	   . AMT - Amount			/TYP=$/REQ

		The full cash amount of the order being processed.

	   . ORDTYP - Order Type		/TYP=N/REQ

		The type of order being placed.  Valid types are:
			0 - Buy
			1 - Sell

	   . SHARES - Shares			/TYP=N/REQ

		The number of shares involved with the order.


	   . TRNCD - The External Transaction Code	/TYP=T/REQ

		The external transaction code used to execute the order.

	   . CTL - Control Flag

		A series of flags indicating specific processing values

		Position 1: Store data flag - indicates if the order
			    is to be stored into the ORDEXEC* tables
			    0 - do not save/store
			    1 - save/store

	   . POINTS - Reward Points

		The number of rewards points eligible for a commission
		discount. 


	   Returns:
	
	   . return  - Calculated Commission/Tax/Fee Amounts.  Format will
		       be CTF plan type.CTFPLN name = assessment amount.  Each
		       entry will be delimited by "|".

		       Example:  TAX.DTRD=4.50|FEE.EXCH=6.75|
	
	*/

	new params
	new ACTIVE,AMTH,BRCD,CMTH,COMCALC,CRCD,CTFGRP,CTFTYP,DAYCALC
	new DAYCALCF,DCOA,DCCFOA,DESCR,ENDDATE,EXPGL,INDAMT,INDRATE,IX
	new INDEX,INTQUERY,PAYGL,PCALL,PLIF,PLNCRCD,PROCTYP,PYTD,QUERY,RATE
	new RATE2,RATEIND,RATEIND2,RETURN,STRTDATE,TRGRP,TYPE,TYPESTR
	
	/* 
	   Variable PROCTYP will have 4 possible values:
		1 - Order Entry
		2 - Order Execution
		3 - Transaction
	*/

	if $E(CTL)=1 set PROCTYP=2
	else  set PROCTYP=1

	set RETURN=""

	Type RecordDEP dep=Db.getRecord("DEP","CID")
	do dep.setAuditFlag(1)

	do LOAD(.dep) 
	
	if CTFGRP="" quit RETURN
	set TBLD=1
	do PROC(.dep,.RETURN) if $G(ER) quit $$ERRMSG^PBSUTL(RM)

	quit RETURN


Public TRANS(RecordTTX ttx)	// Transaction processing entry point

	new par,params,pripln
	new AMT,AMTH,BRCD,CMTH,COMCALC,DAYCALC,DAYCALCF,DCOA,DCCFOA,DESCR,ACTIVE,EXPGL
	new INDEX,INTQUERY,OPTION,PAYGL,PCALL,PLIF,PLNCRCD,PROCTYP,PYTD
	new CRCD,QUERY,RATE,RATE2,RETURN,SAVSEQ,PASS,TRGRP,TYPE,TYPSTR
	new CTFPLN		

	type public String TSO()
	
	if $G(ORDNUM)="" set ORDNUM=0
	if $G(FULL)="" set FULL=1
	set SECID = SECID.get()
	
	if $G(TAMT)="" set AMT=ttx.tamt
	else  set AMT=TAMT
	
	if $G(ORDTYP)="" set ORDTYP=ttx.itc
	set SHARES = SHARES.get()
	if $G(TRNCD)="" set TRNCD=ttx.etc
	if $G(POINTS)="" set POINTS=0
	set pripln=$$FIELD^UTSO(ttx.tso,"CTFPLN")
	
	set SEQ=TSO("SEQ").get()
	// If secondary and the tran charges a CTF then quit - DFM 10/08/01
	I (SEQ#1),pripln'="" quit	

	set RETURN=""

	set PROCTYP=3		// 3 - Transaction

	Type RecordDEP dep=Db.getRecord("DEP","CID")
	do dep.setAuditFlag(1)

	do LOAD(.dep)

	if CTFGRP="" do {  quit
		if '(TSO["MFSTL")!('$D(INVCID)) quit
		set CID=INVCID

		Type RecordDEP dep=Db.getRecord("DEP","CID")
		do dep.setAuditFlag(1)

		do LOAD(.dep)

		if CTFGRP="" quit
		else  do { if $g(ER) quit
			do PROC(.dep,.RETURN) 

		} // end else

	} // end if CTFGRP


	set SEQ=0				// SEQ set to 0 to avoid ORDEXEC table confusion
	do PROC(.dep,.RETURN)  

	quit


TRANPROC(RecordCTFPLNCID ctfplncid,amount,CTFPLN,RecordDEP dep)

	
	new drcr,tamt,ETC,SAVCID,TSO,TCMT 	

	if CTFPLN=pripln quit		// original transaction plan

	set tamt=amount
 	if tamt<0 set tamt=tamt*-1
	
	type RecordPRODCTL prodctl
	set prodctl=Db.getRecord("PRODCTL","TYPE")

	set TSO=""
	do UTSO(.TSO,CTFPLN)

	if amount>0 do {
		set drcr=0
		if CMTH=0 set ETC="MDR"
		else  set ETC=prodctl.drctfpln // DR Commission, Tax, Fee Tran Code 
		}
	else  do {
		set drcr=1
		if CMTH=0 set ETC="MCR"
		else  set ETC=prodctl.crctfpln // CR Commission, Tax, Fee Tran Code
		}

	if ETC="" do {  quit
		new par,DI,FID,%LIBS
	
		set %LIBS="SYSDEV"
		set FID="PRODCTL"
		
		if amount>0 set DI="DRCTFPLN"
		else  set DI="CRCTFPLN"

		set par=TYPE_"~"_Db.getOneRow("DES","DBTBL1D","%LIBS,FID,DI")

		do Runtime.setErrMSG("DEP",2268,par)
		}

	if PROCTYP=3,AMTH'=1 quit

	set SAVCID=CID

	if CMTH=0 set CID=EXPGL

	if $G(TCMT)="" set TCMT=$G(DESCR)
	
	do CRTTX(ETC,tamt,CID,TSO,TCMT,.dep) if $G(ER) quit

	if $g(amount("SUSGL")) set CID=amount("SUSGL")     // petitioning  ;ARQ 44334 - NK
	else  set CID=PAYGL				

	if 'drcr set ETC="MCR",drcr=1
	else  set ETC="MDR",drcr=0

	do CRTTX(ETC,tamt,CID,TSO,TCMT,.dep) if $G(ER) quit

	set CID=SAVCID

	if '$G(secctf) do {	// 44691
		do ctfplncid.setAuditFlag(1)
		set ctfplncid.pytd=tamt+PYTD
		set ctfplncid.plif=tamt+PLIF
		do ctfplncid.save()
	}

	quit
				

PROC(RecordDEP dep,return)	//  Main procedure

	new calcord,file,plnarray,CTFPLN	
	
	type RecordCTFPLNCID ctfplncid

	// ResultSet - get CTFPLN'S from CTF group table UTBLCTFGRP1
	type ResultSet rs=Db.select("CTFPLN,CALCORD","UTBLCTFGRP1","GRPNAME=:CTFGRP")
	if rs.isEmpty() quit
	while rs.next() do { 
		set plnarray(rs.getCol(2))=rs.getCol(1)
		}

	set calcord=""
	for  set calcord=$o(plnarray(calcord)) quit:(calcord="")  do { quit:ER 

		set CTFPLN=$P(plnarray(calcord),"|",1)

		if $G(secctf)!Db.isDefined("CTFPLNCID","CID,CTFPLN") do {	// 44691
			do DTL(.ctfplncid,CID,CTFPLN)
			}
		else  quit

		if ((PROCTYP=1)!(PROCTYP=2)),(AMTH=1) quit
		if (PROCTYP=3),(AMTH=3) quit

		new amount
		set amount=""

		// Quit if the current plan is not active for this CID
		if 'ACTIVE quit
		
		// Quit if the current plan's Start date STRTDATE is
		// greater than today's system processing date
		if STRTDATE>%SystemDate quit  
		
		// Quit if the current plan's End date has passed
		if ENDDATE'="",(ENDDATE<%SystemDate) quit	

		// Check if the tran code is in the plan's tran code group 
		if '$$CHECKETC() quit

		// Check if the account matches the execution query 
		if '$$CHECKCID() quit

		set file=1		// flag to file to ORDEXCTF table

		do EXEC(.ctfplncid,.dep,.amount) quit:ER
		set amount=$$^SCARND(amount,0,,CRCD)

		if +amount=0 quit
		if AMTH=4 quit

		if PROCTYP=2,file do {  
			new TSO
			set TSO=""
			do UTSO(.TSO,CTFPLN)
			do FILE(+amount,TSO,ORDNUM)
			}

		if ((PROCTYP=1)!(PROCTYP=2)) do {
			if return="" set return=TYPESTR_"."_CTFPLN_"="_amount
			else  set return=return_"|"_TYPESTR_"."_CTFPLN_"="_amount
			}

		if '$g(traninq),PROCTYP=3 do { 	   	// ARQ 47938
			if AMTH=1 do TRANPROC(.ctfplncid,.amount,CTFPLN,.dep)
 			if AMTH=2 do {  
				do ctfplncid.setAuditFlag(1)
				set ctfplncid.daycalc=DAYCALC+amount
				if $g(amount("NEGBAL")) set ctfplncid.dcoa=DCOA+amount("NEGBAL")
				else  do {
					if $e(ORDTYP)=1 set ctfplncid.dcoa=DCOA+AMT
					else  set ctfplncid.dcoa=DCOA-AMT
					}
				do ctfplncid.save()
				}
			} // if PROCTYP=3

		if $g(traninq),(AMTH=1) do {
 
			set RETURN=RETURN+amount
			set RETURN(CTFPLN)=amount
 
			}

		}  //for set calcord loop

	quit


Public EXEC(RecordCTFPLNCID ctfplncid,RecordDEP dep,return)

	new PGM

	/*
	 If a CTF procedure call is defined, then call the routine to get
	 the commission/tax/fee amount.  The routine should define "return"
	 as an array with the commission/tax/fee amount to be assessed.
	*/

	if PCALL'="" do { quit
		set file=0	// Custom procedures will file to ORDEXCTF
		set PGM=PCALL
		if PGM'["^" set PGM="^"_PGM
		do @PGM
		}
		  

	// Check for a predefined Commission Calculation formula
	if COMCALC'="" set return=$$COMCALC(.dep) quit
	
	// Get Rate and/or CTF Amount
	do CTFRATE
	
	// Calculate commission/tax/fee based on index rate and fixed amount
	if $G(INDRATE)!($G(INDAMT)) set return=INDAMT+(INDRATE*AMT*.01) quit

	// Calculate commission/tax/fee based on plan rate
	if $G(RATE) set return=RATE*AMT*.01 quit

	quit
	
	
LOAD(RecordDEP dep)	// Load Account Data
	
	if $G(%SystemDate)="" set TJD=Db.getOneRow("TJD","CUVAR")
	if %EffectiveDate.get()=""  set EFD=%SystemDate
	if $G(%SystemCurrency)="" set %CRCD=(Db.getOneRow("%CRCD","CUVAR"))
 
	if $G(TPD)="" set TPD=%SystemDate
	
	set BRCD=dep.boo
	set CRCD=dep.crcd
	set CTFGRP=dep.ctfgrp
	set TYPE=dep.type

	quit 
	
	
DTL(RecordCTFPLNCID ctfplncid,CID,CTFPLN) // Get Account Plan and Commission/tax/fee Plan Detail
	
 	type public Number AMT
 	type String PAR()
 	
 	//  Load Commission/tax/fee Plan Detail 	
	type RecordUTBLCTFPLN utblctfpln
	set utblctfpln=Db.getRecord("UTBLCTFPLN","CTFPLN")
	do utblctfpln.setAuditFlag(1)

	set DESCR=utblctfpln.descr		// Description
	set INDEX=utblctfpln.index		// Index
	set PAYGL=utblctfpln.paygl		// PAYGL
	set EXPGL=utblctfpln.expgl		// EXPGL
	set COMCALC=utblctfpln.comcalc		// CTF Calc Formula
	set QUERY=utblctfpln.query		// Query
	set PCALL=utblctfpln.pcall		// Procedure Call
	set TRGRP=utblctfpln.trgrp		// Transaction Code Group
	set CMTH=utblctfpln.cmth		// Collection Method
	set PLNCRCD=utblctfpln.crcd             // Plan Currency Code
	set INTQUERY=utblctfpln.intquery	// Initial Query
	set AMTH=utblctfpln.amth		// Assessment Method
	set STRTDATE=utblctfpln.strtdate	// Start Date
	set ENDDATE=utblctfpln.enddate		// End Date
	set CTFTYP=utblctfpln.type		// CTF Type
	set RATEIND=utblctfpln.rate		// Rate
	set RATEIND2=utblctfpln.rate2		// Secondary Rate
	
	set PAR("INDEX")=utblctfpln.rate	
	if RATEIND'="" do CTLCID^UINDX(CID,%EffectiveDate,AMT,.PAR())
	if RATEIND2'=""  do {
		new RATE
		set PAR("INDEX")=utblctfpln.rate2
		do CTLCID^UINDX(CID,%EffectiveDate,AMT,.PAR())
		S RATE2=RATE
		}

	if PLNCRCD="" set PLNCRCD=%SystemCurrency
	
	type RecordSTBLCTFTYP stblctftyp

	set stblctftyp=Db.getRecord("STBLCTFTYP","CTFTYP")
	set TYPESTR=$$UPPER^%ZFUNC(stblctftyp.descr)

	// Load Account Plan level detail

	if Db.isDefined("CTFPLNCID","CID,CTFPLN") do {  	  // 44691
		set ctfplncid=Db.getRecord("CTFPLNCID","CID,CTFPLN")
		do ctfplncid.setAuditFlag(1)

		set ACTIVE=ctfplncid.active	// Active Flag
		set DAYCALC=ctfplncid.daycalc	// Net Daily Calculation
		set DAYCALCF=ctfplncid.daycalcf	// Daily Calc Carry Forward
		set DCOA=ctfplncid.dcoa         // Daycalc Original Amount
		set DCCFOA=ctfplncid.dccfoa     // Daycalcf Original Amount
		set PYTD=ctfplncid.pytd		// Paid - Year to Date
		set PLIF=ctfplncid.plif		// Paid Life

		if $G(ORDNUM)="" set ORDNUM=0
		if '$G(CTL) set FULL=1
		if $G(SEQ)="" set SEQ=0
	}

	set params("ORDNUM")=$G(ORDNUM)
	set params("FULL")=$G(FULL)
	set params("CID")=$G(CID)
	set params("SECID")=$G(SECID)
	set params("AMT")=$G(AMT)
	set params("ORDTYPE")=$G(ORDTYPE)
	set params("SHARES")=$G(SHARES)
	set params("TRNCD")=$G(TRNCD)
	set params("CTL")=$G(CTL)
	set params("POINTS")=$G(POINTS)
	set params("SEQ")=$G(SEQ)
	set params("SAVSEQ")=$G(SAVSEQ)                 //Save transaction sequence
	set params("CTFPLN")=$G(CTFPLN)
	set params("VATRATE")=$G(RATE)			// Used for VATCALC custom procedure
	set params("PROCTYP")=$G(PROCTYP)

	quit 
	
CTFRATE	// Determine rate or index to use
	
	// First check to see if the rate is already valued.
	if $G(RATE) quit 
	
	set INDRATE=0
	set INDAMT=0
	
	// If the index is already valued, use that index.
	
	if $G(INDEX)'="" do INDEX(INDEX,AMT,%EffectiveDate)

	quit 
	

INDEX(IND,CALCBAL,EFD)   // Given the index and the balance, return the rate

	  /*
	  Description:
	  
	          Given the commission/tax/fee index and the balance, this 
	        routine will return the rate and/or fixed amount associated 
		with the tiered balance in the commission index.
         
          Arguments:
         
                IND : Commission Index
         
                CALCBAL : Commission Balance
         
                EFD : Effective Date
         
          Returns:
         
                INDRATE : The rate associated with the tier level.
         
                INDAMT : The predefined commission amount
        */

        new comindx,comindx1,BCRCD,COMTYPE,MTIER,SEQ,TBAL,XEFD,XRATE
        
        set (INDRATE,INDAMT)=0

        type RecordUTBLCOMINDX comindx
        set comindx=Db.getRecord("UTBLCOMINDX","IND")

	// If the currency in the index is different than the agent, convert
	set BCRCD=comindx.crcd
	If CRCD'=BCRCD set TBAL=$$MC(CALCBAL,CRCD,comindx.crcd)
	Else  set TBAL=CALCBAL

        set XEFD=Db.prevVal("UTBLCOMINDX1","IND,EFD+.1") Quit:XEFD=""
	set MTIER=Db.prevVal("UTBLCOMINDX1","IND,XEFD,TBAL+.00001") Quit:MTIER=""

        type RecordUTBLCOMINDX1 comindx1
        set comindx1=Db.getRecord("UTBLCOMINDX1","IND,XEFD,MTIER")        
        
	// Rate
        If comindx.comtype=0 do { quit
		if comindx.indtyp="I" set INDRATE=$$INCR(IND,XEFD,TBAL) quit
		set INDRATE=comindx1.rate
		}

	// Fixed amount
        If comindx.comtype=1 do { quit
	   if comindx.indtyp="I" set INDAMT=$$INCR(IND,XEFD,TBAL,1) if 1
	   else  set INDAMT=comindx1.amt	// Get amount from Index

	   // If the currencies are different, then exchange the amount
	   if CRCD'=comindx.crcd set INDAMT=$$MC(INDAMT,comindx.crcd,CRCD)
	   }
        
	// Percentage Rate + Fixed amount
        If comindx.comtype=2 do { quit
	   if comindx.indtyp="I" do {  
		new temp
		set temp=$$INCR(IND,XEFD,TBAL,2)
		set INDAMT=$P(temp,"|",1)
		set INDRATE=$P(temp,"|",2)
		}
	   else  do {
	   	set INDAMT=comindx1.amt		// Get amount from Index
		set INDRATE=comindx1.rate	// Get rate from Index
		}

	   // If the currencies are different, then exchange the amount
	   if CRCD'=comindx.crcd set INDAMT=$$MC(INDAMT,comindx.crcd,CRCD)
	   }
        
        Quit


INCR(IND,XEFD,XBAL,FXD) // Calculate incremental rate or amount

	/* Description:

		Given the commission index and the balance, this extrinsic
		routine will return either the blended rate associated with
		the tiered balance in the commission index, the accumulation
		of the fixed amount values, or both.

	Arguments:

		IND : Commission Index

		XEFD : Effective Date

		XBAL : Calculation Balance

		FXD : Fixed amount flag

	$$Returns:

		The blended rate caluclated for the amount

			-OR-

		The accumulated commission amount

			-OR-
	
		Both if the commission type is 2 - Percentage Rate + Fixed Amt


	*/

	new AMT,BASE,BLENDRTE,CUMAMT,CURDEC,DECMIN,INDAMT,TIERAMT,PTIER
	new XCAMT,XRATE,XTIER

	set FXD=$G(FXD)
	set CURDEC=$$curdec^CRCDUTL(BCRCD)
	set BASE=1
	for  quit:'CURDEC  set BASE=BASE*10 set CURDEC=CURDEC-1
	set DECMIN=1/BASE

	set CUMAMT=0
	set XCAMT=0
	set INDAMT=0

	new rs
	type ResultSet rs=Db.select("MTIER,RATE,AMT","UTBLCOMINDX1","CINDEX=:IND AND EFD=:XEFD")

	quit:'rs.next() 0

	set XTIER=rs.getCol(1) set PTIER=XTIER
	set XRATE=rs.getCol(2)
	if FXD set INDAMT=rs.getCol(3)

	for  quit:'rs.next()  quit:(CUMAMT=XBAL)  do {
		set XTIER=rs.getCol(1)
		if XBAL'<XTIER set AMT=XTIER-PTIER-DECMIN
		else  set AMT=XBAL-CUMAMT if FXD set CUMAMT=XBAL quit
		set CUMAMT=CUMAMT+AMT
		set PTIER=XTIER
		set TIERAMT=rs.getCol(3)
		if FXD set INDAMT=INDAMT+TIERAMT quit
		set XCAMT=XCAMT+(AMT*XRATE)
		set XRATE=rs.getCol(2)
	}

	// quit with the commission amount if using fixed amounts
	if FXD=1 quit INDAMT

	// apply the remaining amount at the last rate
	if FXD=2,(CUMAMT-XBAL) set XCAMT=XCAMT+((XBAL-CUMAMT)*XRATE)+TIERAMT
	else  if (CUMAMT-XBAL) set XCAMT=XCAMT+((XBAL-CUMAMT)*XRATE)

	// return the rate
	if 'XCAMT!('XBAL) set BLENDRTE=0
	else  set BLENDRTE=$$^SCARND(XCAMT/XBAL,,,,5)

	if 'FXD quit:BLENDRTE
	
	quit INDAMT_"|"_BLENDRTE

	
COMCALC(RecordDEP dep)	// Calculate Commission based on predefined formula.
	
	/*
	
	   All of the commission, tax, fee calculations have been compiled 
	   into the routine ^CTFRTN1.M.  The line tag to call is the same as 
	   the commission plan being evaluated.  This subprogram calls that
	   routine and returns CAMT.
	
	*/

	new PGM
	
	set PGM=CTFPLN_"^CTFRTN1(.dep)"
	do @PGM
	quit CAMT
	
	
MC(AMT,BCRCD,CRCD) // Multicurrency Calculation

	/* This routine will convert the given amount in the given currency
	   code (BCRCD) to an amount in another given currency code (CRCD).  
	   The routine will return the new amount.
	
	Arguments:
	
		AMT : The amount to be exchanged.

		BCRCD : The currency that the amount is currently in.
	
		CRCD: The currency code that the amount will be converted to.

	Returns:

		NAMT : The converted amount.

	*/

	new NAMT

	If BCRCD=CRCD Quit AMT  	// Already the same
	Do EXC^CRCDUTL(BCRCD,CRCD,AMT,1,1,00)
	set NAMT=$$^SCARND(EXCAMT,0,,CRCD)
	
	Quit NAMT


CHECKETC()	// Check to see if the transaction code is in the plan's
		// transaction code group

	new TRNGRPDT

	if $G(TRNCD)=""  quit 0
	if TRGRP="" quit 0

	set TRNGRPDT=%SystemDate+.001
	set TRNGRPDT=Db.prevVal("UTBLTRNGRP","TRGRP,TRNGRPDT")

	if 'Db.isDefined("UTBLTRNGRP","TRGRP,TRNGRPDT,TRNCD") quit 0

	quit 1
	

CHECKCID()	// Check to see if account is in query

	// Call to the correct line tag in routine COMQRY to check
	// and see if the account is in the query.

	new pgm,X
	
	// If no query is defined, then the CID is valid
	if QUERY="" quit 1

	set pgm="$$"_QUERY_"^COMQRY1"
	if @pgm quit 1
 	quit 0

CRTTX(ETC,TAMT,CID,TSO,TCMT,RecordDEP dep)
 
	/*
 
 	ETC  -   External Transaction Code.
 	TAMT  -   Transaction Amount.
 	CID   -   Customer Id.
 	TSO   -   Transaction Source.
	TCMT  -   Transaction Comment.
 
 	With these parameters it will create a TTX record for TTXP2 to post.
 	*/

	type Public Cache %CACHE()
	new ITC,SEQ

	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:ETC")
	set ITC=trn.itc

	type RecordTTX ttx=Class.new("RecordTTX")
	set ttx.cid=CID
	set ttx.itc=ITC
	set ttx.etc=ETC
	set ttx.tamt=TAMT
	set ttx.efd=%EffectiveDate 
	set ttx.tlo=%UserStation
	set ttx.tso=TSO
	set ttx.tcmt=TCMT
	set ttx.crcd=CRCD
		
	// If the collection method is 1, we need to process the transaction
	// to collect the commission/tax/fee
	
	if CMTH=1 do {  
		do TRNSINGL^TRNDRV(.ttx,.dep,%SystemDate,BRCD,5)
		}

	quit

UTSO(TSO,CTFPLN)	 //Create TSO
 
	new UTSO

	set UTSO("CTFPLN")=CTFPLN

	do IN^UTSO(.UTSO,.TSO)

	quit

FILE(fee,tso,CONFIRM)

	/* This code previously updated ORDEXECCTF, which has been
	   obsoleted with Mutual Funds.  The use of this section needs
	   to be reanalyzed on overall review of this procedure.
	*/

	quit


Public CTFINQ(CID,TRNCD,AMT)   // Inquire on CTF plan amounts for transactions
 
	/*
 
	This section of code will accept an account number, transaction code,
	and the amount subject to CTF plan assessments.   The Processing type
	for this process will be 3 and transaction inquiry flag (traninq) will
	be set to 1. 
	The PROC section will store the individual CTF plan amounts in the 
	RETURN array keyed by the CTF plan name.  The sum of the CTF plan 
	assessments will be stored on the top/unkeyed level of RETURN.
 
	*/
 
	type Public Cache %CACHE()

	new par,params
	new AMTH,BRCD,CMTH,COMCALC,CTFAMT,DAYCALC,DAYCALCF,DESCR,ACTIVE,EXPGL
	new INDEX,INTQUERY,OPTION,PAYGL,PCALL,PLIF,PLNCRCD,PROCTYP,PYTD
	new CRCD,QUERY,RATE,RATE2,RETURN,SAVSEQ,PASS,TRSAV,TRGRP,TYPE,TYPSTR
 
	set RETURN=""

	if $G(CID)="" quit RETURN
	if $G(TRNCD)="" quit RETURN
	if +$G(AMT)=0 quit RETURN
 
	if $G(ORDNUM)="" set ORDNUM=0
	if $G(FULL)="" set FULL=1
	if $G(SECID)="" set SECID=""
	if $G(ORDTYP)="" set ORDTYP=""
	if $G(SHARES)="" set SHARES=""
	if $G(POINTS)="" set POINTS=0
 
	Type RecordDEP dep=Db.getRecord("DEP","CID")
	do LOAD(.dep)
 
	if CTFGRP="" quit RETURN
 
	new trn,ETC,ITC
 	set ETC=TRNCD
 
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:ETC")
	set ITC=trn.itc

	set PROCTYP=3
	set traninq=1   //  Transaction Inquiry
 
	do PROC(.dep,.RETURN)
 
	quit RETURN
 #OPTION ResultClass ON
Public String vSIG()	quit "60705^5973^Hema Puttaswamy^20232"	// Signature - LTD^TIME^USER^SIZE
