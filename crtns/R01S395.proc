R01S395	// SCA429 - ACH Inclearing Posted Detail Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:49 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date VIN1
	type Number VIN2
	type String VIN3
	type String VIN6="ALL"
	type String VIN7="ALL"

	set RID="SCA429"
	set RN="ACH Inclearing Posted Detail Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|10||[TTX]TJD|[TTX]TJD:DISTINCT:NOVAL||||D|System Processing Date is equal to|||||"
	set %TAB("VIN2")="|6||[TTX]BRCD|[UTBLBRCD]:NOVAL||||N|Branch Code is equal to|||||"
	set %TAB("VIN3")="|20||[TTX]UID|[TTX]UID:DISTINCT:NOVAL||||T|Teller ID|||||"
	set %TAB("VIN6")="|255||[TTX]CID|[ACN]:NOVAL||D EXT^DBSQRY||T|Account Number|||||"
	set %TAB("VIN7")="|255||[TTX]TSEQ|[TTX]TSEQ:DISTINCT:NOVAL||D EXT^DBSQRY||T|Transaction Sequence Number|||||"

	set %READ="IO/REQ,VIN1#1,VIN2#1,VIN3#1,VIN6#0,VIN7#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=37
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date VIN1
	type public Number VIN2
	type public String VIN3,VIN6,VIN7
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %NOCLOSE,%NOOPEN,%TIM,CONAM,EFFDT,PGM,PN,RCNT,RID,RN,SIGN,SUMRN,TOTCR,TOTDR,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc6,vc7,vc8,vc9,vcrt,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA429",RN="ACH Inclearing Posted Detail Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA429","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[TTX]CID#1#12,[ACHINCD]IDNO#15#15,[TTX]ETC#34#12,[ACHINCD]TRNCD#47#2,[ACHINCD]AMOUNT#52#13,[ACHINCD]NAME#68#22,[ACHINCD]DISCDATA#92#2,[ACHINCD]TRACE#99#15,[ACHINCD]FILEID#117#10,[ACHINCD]BCHSEQ#129#4\[ACHINCD]ACCTNO#15#17"

	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		set DQQRY(SEQ)="[TTX]TJD = "_$$addqts^DBSRWUTL(VIN1),SEQ=SEQ+1
		set DQQRY(SEQ)="[TTX]BRCD = "_$$addqts^DBSRWUTL(VIN2),SEQ=SEQ+1
		set DQQRY(SEQ)="[TTX]UID = "_$$addqts^DBSRWUTL(VIN3),SEQ=SEQ+1
		set DQQRY(SEQ)="[TTX]SIF=1",SEQ=SEQ+1
		set DQQRY(SEQ)="[TTX]ITC6'=1",SEQ=SEQ+1
		if VIN6.get()="" set VIN6="ALL"
		if VIN6'="ALL" set DQQRY(SEQ)="[TTX]CID "_VIN6,SEQ=SEQ+1
		if VIN7.get()="" set VIN7="ALL"
		if VIN7'="ALL" set DQQRY(SEQ)="[TTX]TSEQ "_VIN7,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("TTX,ACHINCD,ACHINCDA") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC1|"_"System Processing Date is equal to"_"|VIN1|"_$$DAT^%ZM(VIN1.get(),%MSKD)
		set VBNRINFO("PROMPTS",2)="WC1|"_"Branch Code is equal to"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC1|"_"Teller ID"_"|VIN3|"_VIN3.get()
		set VBNRINFO("PROMPTS",6)="WC2|"_"Account Number"_"|VIN6|"_VIN6.get()
		set VBNRINFO("PROMPTS",7)="WC2|"_"Transaction Sequence Number"_"|VIN7|"_VIN7.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="ACH Inclearing Posted Detail Report"
		set VBNRINFO("PGM")="R01S395"
		set VBNRINFO("RID")="SCA429"
		set VBNRINFO("TABLES")="TTX,ACHINCD,ACHINCDA"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TTX]TJD"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TTX]BRCD"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TTX]UID"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TTX]TSEQ"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,ACHINCDA]ASEQ"

		set VBNRINFO("DOC",1)="This report provides information from the ACH file for items which were posted"
		set VBNRINFO("DOC",2)="succesfully (not rejected) under the ACH teller.  The information is taken"
		set VBNRINFO("DOC",3)="directly from the ACH input file."
		set VBNRINFO("DOC",4)="The purpose of the report is to provide detailed information from the ACH file "
		set VBNRINFO("DOC",5)="for research and returns of ACH postings.  Also included are detailed addenda"
		set VBNRINFO("DOC",6)="records for each ACH detail record displayed."
		set VBNRINFO("DOC",7)="Batch information is provided at the end of the report on report SCA428A (run"
		set VBNRINFO("DOC",8)="automatically at the completion of this report) for any batch which had a detail"
		set VBNRINFO("DOC",9)="record displayed.  Batches are uniquely identified by a file ID (the date and"
		set VBNRINFO("DOC",10)="time from the ACH file header) and a batch number (assigned by IBS)."
		set VBNRINFO("DOC",11)="This report is only available if the ACH inclearing reformatter has been"
		set VBNRINFO("DOC",12)="designed to save the ACH file information into the files [ACHINCF], [ACHINCB],"
		set VBNRINFO("DOC",13)="and [ACHINCD]."
		set VBNRINFO("DOC",14)=";"
		set VBNRINFO("DOC",15)="STATTOND - ARQ49659 - 05/10/02"
		set VBNRINFO("DOC",16)="Added addenda information for addenda type code 01,02,98, and 99. Only data"
		set VBNRINFO("DOC",17)="items, which are associated with the incoming addenda record type will be"
		set VBNRINFO("DOC",18)="displayed."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:5 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"TTX.TJD,TTX.BRCD,TTX.UID,TTX.TSEQ,ACHINCDA.ASEQ,AC"
	set VSELECT=VSELECT_"HINCDA.AINFO,ACHINCDA.TRACE,ACHINCDA.ATC,ACHINCDA."
	set VSELECT=VSELECT_"TTC,ACHINCDA.FRDFI,ACHINCDA.FPAMT,ACHINCDA.FTRACE,"
	set VSELECT=VSELECT_"ACHINCDA.FRCID,ACHINCDA.TRNSDESC,ACHINCDA.NID,ACHI"
	set VSELECT=VSELECT_"NCDA.TID,ACHINCDA.TRNSSN,ACHINCDA.TRNSDT,ACHINCDA."
	set VSELECT=VSELECT_"TRNSTM,ACHINCDA.TLOC,ACHINCDA.TCITY,ACHINCDA.TSTAT"
	set VSELECT=VSELECT_"E,ACHINCDA.REF1,ACHINCDA.REF2,ACHINCDA.VALIDCRD,AC"
	set VSELECT=VSELECT_"HINCDA.CORC,ACHINCDA.AORIGTRACE,ACHINCDA.ART,ACHIN"
	set VSELECT=VSELECT_"CDA.CORDATA,ACHINCDA.RCORC,ACHINCDA.CORTRACE,ACHIN"
	set VSELECT=VSELECT_"CDA.ARETRES,ACHINCDA.DRCORC,ACHINCDA.RSTDT,ACHINCD"
	set VSELECT=VSELECT_"A.RTRACE,ACHINCDA.RETDT,ACHINCDA.CDRCORC,ACHINCDA."
	set VSELECT=VSELECT_"DRSTDT,ACHINCDA.DRTRACE,ACHINCDA.OSTDT,ACHINCDA.OF"
	set VSELECT=VSELECT_"EPA,TTX.CID,ACHINCD.IDNO,TTX.ETC,ACHINCD.TRNCD,ACH"
	set VSELECT=VSELECT_"INCD.AMOUNT,ACHINCD.NAME,ACHINCD.DISCDATA,ACHINCD."
	set VSELECT=VSELECT_"TRACE,ACHINCD.FILEID,ACHINCD.BCHSEQ,ACHINCD.ACCTNO"
	set VSELECT=VSELECT_",TTX.ITC"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"TTX,ACHINCD,ACHINCDA",VWHERE,"TTX.TJD,TTX.BRCD,TTX.UID,TTX.TSEQ,ACHINCDA.ASEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53
	set vc1=V.piece($C(9),1)			// TTX.TJD
	set vc2=V.piece($C(9),2)			// TTX.BRCD
	set vc3=V.piece($C(9),3)			// TTX.UID
	set vc4=V.piece($C(9),4)			// TTX.TSEQ
	set vc5=V.piece($C(9),5)			// ACHINCDA.ASEQ
	set vc6=V.piece($C(9),6)			// ACHINCDA.AINFO
	set vc7=V.piece($C(9),7)			// ACHINCDA.TRACE
	set vc8=V.piece($C(9),8)			// ACHINCDA.ATC
	set vc9=V.piece($C(9),9)			// ACHINCDA.TTC
	set vc10=V.piece($C(9),10)			// ACHINCDA.FRDFI
	set vc11=V.piece($C(9),11)			// ACHINCDA.FPAMT
	set vc12=V.piece($C(9),12)			// ACHINCDA.FTRACE
	set vc13=V.piece($C(9),13)			// ACHINCDA.FRCID
	set vc14=V.piece($C(9),14)			// ACHINCDA.TRNSDESC
	set vc15=V.piece($C(9),15)			// ACHINCDA.NID
	set vc16=V.piece($C(9),16)			// ACHINCDA.TID
	set vc17=V.piece($C(9),17)			// ACHINCDA.TRNSSN
	set vc18=V.piece($C(9),18)			// ACHINCDA.TRNSDT
	set vc19=V.piece($C(9),19)			// ACHINCDA.TRNSTM
	set vc20=V.piece($C(9),20)			// ACHINCDA.TLOC
	set vc21=V.piece($C(9),21)			// ACHINCDA.TCITY
	set vc22=V.piece($C(9),22)			// ACHINCDA.TSTATE
	set vc23=V.piece($C(9),23)			// ACHINCDA.REF1
	set vc24=V.piece($C(9),24)			// ACHINCDA.REF2
	set vc25=V.piece($C(9),25)			// ACHINCDA.VALIDCRD
	set vc26=V.piece($C(9),26)			// ACHINCDA.CORC
	set vc27=V.piece($C(9),27)			// ACHINCDA.AORIGTRACE
	set vc28=V.piece($C(9),28)			// ACHINCDA.ART
	set vc29=V.piece($C(9),29)			// ACHINCDA.CORDATA
	set vc30=V.piece($C(9),30)			// ACHINCDA.RCORC
	set vc31=V.piece($C(9),31)			// ACHINCDA.CORTRACE
	set vc32=V.piece($C(9),32)			// ACHINCDA.ARETRES
	set vc33=V.piece($C(9),33)			// ACHINCDA.DRCORC
	set vc34=V.piece($C(9),34)			// ACHINCDA.RSTDT
	set vc35=V.piece($C(9),35)			// ACHINCDA.RTRACE
	set vc36=V.piece($C(9),36)			// ACHINCDA.RETDT
	set vc37=V.piece($C(9),37)			// ACHINCDA.CDRCORC
	set vc38=V.piece($C(9),38)			// ACHINCDA.DRSTDT
	set vc39=V.piece($C(9),39)			// ACHINCDA.DRTRACE
	set vc40=V.piece($C(9),40)			// ACHINCDA.OSTDT
	set vc41=V.piece($C(9),41)			// ACHINCDA.OFEPA
	set vc42=V.piece($C(9),42)			// TTX.CID
	set vc43=V.piece($C(9),43)			// ACHINCD.IDNO
	set vc44=V.piece($C(9),44)			// TTX.ETC
	set vc45=V.piece($C(9),45)			// ACHINCD.TRNCD
	set vc46=V.piece($C(9),46)			// ACHINCD.AMOUNT
	set vc47=V.piece($C(9),47)			// ACHINCD.NAME
	set vc48=V.piece($C(9),48)			// ACHINCD.DISCDATA
	set vc49=V.piece($C(9),49)			// ACHINCD.TRACE
	set vc50=V.piece($C(9),50)			// ACHINCD.FILEID
	set vc51=V.piece($C(9),51)			// ACHINCD.BCHSEQ
	set vc52=V.piece($C(9),52)			// ACHINCD.ACCTNO
	set vc53=V.piece($C(9),53)			// TTX.ITC
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1
  type public Date EFFDT 

  if '(EFFDT.exists())  set EFFDT=vc1
	quit

VPREAQ	// Pre-processor (after query)

 type public Date EFFDT
 type public Number TOTCR,TOTDR

 set (TOTDR,TOTCR)=0
 set EFFDT=""
	quit

VPREBQ	// Pre-processor (before query)

 type Date EFFDT

 set EFFDT="" 
	quit

VRPOST	// Report post-processor

 type public Boolean ER 
 type public Number PN,RCNT
 type public String %NOOPEN,%NOCLOSE,PGM,RID,RM,RN,SUMRN,vcrt 
 
 if RCNT do {
	// Call summary report
 	if vcrt.get() set PN=-1 do ^DBSRWBR(2,,1)

	// ~p1 Batch Summary
 	set SUMRN=$$^MSG(6673,RN)
	set RID="SCA428A" 

	do ^URID

	// Invalid Report ~p1
	if PGM.isNull() set ER=1,RM=$$^MSG(8074,RID) quit
	do VO^@PGM
	}
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(4)=1,vskp(5)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(5)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5
	type Number vb1,vb2,vb3,vb4,vb5
	set (vb1,vb2,vb3,vb4,vb5)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,VH0=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1
	if vb4!(+vovc4'=+vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(5)=VT(5)+1
	quit

VDTL4	// Detail
	type public String %NOCLOSE,%NOOPEN,%TIM,EFFDT,ER,IOSL,PGM,PN,RCNT,RID,RM,RN,SIGN,SUMRN,TOTCR,TOTDR,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	quit:VD(4)  set VD(4)=1				// Print flag
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set V=vc42,VO=V set V=$J(V,12) do VP1 quit:VFMQ!verror.get()  set VL=V
	set VL=VL_$J("",14-VL.length())_$E(vc43,1,15)
	set VL=VL_$J("",33-VL.length())_$E(vc44,1,12)
	set VL=VL_$J("",45-VL.length())_"/"
	set VL=VL_$J("",47-VL.length())_$J(vc45,1)
	set V=vc46,VO=V set V=$J($FN(V,",",2),15) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",49-VL.length())_V		// [SYSDEV,ACHINCD]AMOUNT
	set VL=VL_$J("",64-VL.length())_$E(SIGN,1,1)
	set VL=VL_$J("",67-VL.length())_$E(vc47,1,22)
	set VL=VL_$J("",91-VL.length())_$E(vc48,1,2)
	set VL=VL_$J("",94-VL.length())_$J(vc49,19)
	set VL=VL_$J("",116-VL.length())_$E(vc50,1,10)
	set VL=VL_$J("",127-VL.length())_$J(vc51,5)
	do VOM
	set VL="              "_$E(vc52,1,17)
	do VOM
	quit

VDTL5	// Detail
	type public String %NOCLOSE,%NOOPEN,%TIM,EFFDT,ER,IOSL,PGM,PN,RCNT,RID,RM,RN,SIGN,SUMRN,TOTCR,TOTDR,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	if VLC+14>IOSL do VHDG0 quit:VFMQ

	set V=vc5,VO=V do VP3 quit:VFMQ!verror.get()  set V=$J(V,4) set VL="                  "_V
	set VL=VL_$J("",33-VL.length())_$E(vc6,1,80)
	set VL=VL_$J("",114-VL.length())_$J(vc7,16)
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="Addenda Type:"
	set VL=VL_$J("",14-VL.length())_$E(vc8,1,2)
	set VL=VL_$J("",18-VL.length())_"Transaction Type:"
	set VL=VL_$J("",36-VL.length())_$E(vc9,1,3)
	set VL=VL_$J("",41-VL.length())_"Foreign Receiver's DFI ID:"
	set VL=VL_$J("",68-VL.length())_$E(vc10,1,11)
	set VL=VL_$J("",81-VL.length())_"Foreign Payment Amt:"
	set V=vc11,VO=V set V=$J($FN(V,",",2),15) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",102-VL.length())_V		// [SYSDEV,ACHINCDA]FPAMT
	if 'VL.translate(" ").isNull() do VOM
	set VL="Foreign Trace #:"
	set VL=VL_$J("",17-VL.length())_$J(vc12,22)
	set VL=VL_$J("",41-VL.length())_"Foreign Receiver's DFI Acct #:"
	set V=vc13,VO=V set V=$E(V,1,25) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",72-VL.length())_V		// [SYSDEV,ACHINCDA]FRCID
	if 'VL.translate(" ").isNull() do VOM
	set VL="Addenda Type:"
	set VL=VL_$J("",14-VL.length())_$E(vc8,1,2)
	set VL=VL_$J("",18-VL.length())_"Trans Desc:"
	set VL=VL_$J("",30-VL.length())_$E(vc14,1,7)
	set VL=VL_$J("",39-VL.length())_"Network ID:"
	set VL=VL_$J("",51-VL.length())_$E(vc15,1,3)
	set VL=VL_$J("",56-VL.length())_"Terminal ID:"
	set VL=VL_$J("",69-VL.length())_$E(vc16,1,6)
	set VL=VL_$J("",77-VL.length())_"Trans Serial #:"
	set V=vc17,VO=V set V=$E(V,1,6) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",93-VL.length())_V		// [SYSDEV,ACHINCDA]TRNSSN
	if 'VL.translate(" ").isNull() do VOM
	set VL="Trans Date:"
	set VL=VL_$J("",12-VL.length())_$J(vc18,4)
	set VL=VL_$J("",18-VL.length())_"Trans Time:"
	set VL=VL_$J("",30-VL.length())_$J(vc19,6)
	set VL=VL_$J("",38-VL.length())_"Terminal Loc:"
	set VL=VL_$J("",52-VL.length())_$E(vc20,1,27)
	set VL=VL_$J("",81-VL.length())_"Terminal City:"
	set VL=VL_$J("",96-VL.length())_$E(vc21,1,15)
	set VL=VL_$J("",113-VL.length())_"Terminal ST: "
	set V=vc22,VO=V set V=$E(V,1,2) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",126-VL.length())_V		// [SYSDEV,ACHINCDA]TSTATE
	if 'VL.translate(" ").isNull() do VOM
	set VL="Ref Info #1:"
	set VL=VL_$J("",13-VL.length())_$E(vc23,1,7)
	set VL=VL_$J("",22-VL.length())_"Ref Info #2:"
	set VL=VL_$J("",35-VL.length())_$E(vc24,1,7)
	set VL=VL_$J("",44-VL.length())_"Auth. Code /Card Exp Date:"
	set V=vc25,VO=V set V=$E(V,1,6) do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",71-VL.length())_V		// [SYSDEV,ACHINCDA]VALIDCRD
	if 'VL.translate(" ").isNull() do VOM
	set VL="Addenda Type:"
	set VL=VL_$J("",14-VL.length())_$E(vc8,1,2)
	set VL=VL_$J("",18-VL.length())_"Change Code:"
	set VL=VL_$J("",31-VL.length())_$E(vc26,1,3)
	set VL=VL_$J("",36-VL.length())_"Orig Entry Trace #:"
	set VL=VL_$J("",56-VL.length())_$J(vc27,15)
	set VL=VL_$J("",73-VL.length())_"Orig RDFI ID:"
	set V=vc28,VO=V set V=$E(V,1,8) do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",87-VL.length())_V		// [SYSDEV,ACHINCDA]ART
	if 'VL.translate(" ").isNull() do VOM
	set VL="Corrected Data:"
	set VL=VL_$J("",16-VL.length())_$E(vc29,1,29)
	set VL=VL_$J("",47-VL.length())_"Refused COR Code:"
	set VL=VL_$J("",65-VL.length())_$E(vc30,1,3)
	set VL=VL_$J("",70-VL.length())_"COR Trace Seq #:"
	set V=vc31,VO=V set V=$J(V,7) do VP10 quit:VFMQ!verror.get()
	set VL=VL_$J("",87-VL.length())_V		// [SYSDEV,ACHINCDA]CORTRACE
	if 'VL.translate(" ").isNull() do VOM
	set VL="Addenda Type:"
	set VL=VL_$J("",14-VL.length())_$E(vc8,1,2)
	set VL=VL_$J("",18-VL.length())_"Original RDFI ID:"
	set VL=VL_$J("",36-VL.length())_$E(vc28,1,8)
	set VL=VL_$J("",46-VL.length())_"Return Reason: "
	set VL=VL_$J("",61-VL.length())_$E(vc32,1,3)
	set VL=VL_$J("",66-VL.length())_"Dishonored Return Reason:"
	set VL=VL_$J("",92-VL.length())_$E(vc33,1,3)
	set VL=VL_$J("",97-VL.length())_"Return Settlement Date:"
	set V=vc34,VO=V set V=$J($$DAT^%ZM(V),10) do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",121-VL.length())_V		// [SYSDEV,ACHINCDA]RSTDT
	if 'VL.translate(" ").isNull() do VOM
	set VL="Return Trace #:"
	set VL=VL_$J("",16-VL.length())_$J(vc35,15)
	set VL=VL_$J("",33-VL.length())_"Date Original Entry Returned:"
	set VL=VL_$J("",63-VL.length())_$J($$DAT^%ZM(vc36),10)
	set VL=VL_$J("",75-VL.length())_"Contested Dishonored Return Reason Code:"
	set V=vc37,VO=V set V=$E(V,1,3) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",116-VL.length())_V		// [SYSDEV,ACHINCDA]CDRCORC
	if 'VL.translate(" ").isNull() do VOM
	set VL="Dishonored Return Settlement Date:"
	set VL=VL_$J("",35-VL.length())_$J($$DAT^%ZM(vc38),10)
	set VL=VL_$J("",47-VL.length())_"Dishonored Return Trace #:"
	set VL=VL_$J("",74-VL.length())_$J(vc39,15)
	set VL=VL_$J("",91-VL.length())_"Orig Settlement Date:"
	set V=vc40,VO=V set V=$J($$DAT^%ZM(V),10) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",113-VL.length())_V		// [SYSDEV,ACHINCDA]OSTDT
	if 'VL.translate(" ").isNull() do VOM
	set VL="Foreign Recvr's DFI ID:"
	set VL=VL_$J("",24-VL.length())_$E(vc10,1,11)
	set VL=VL_$J("",37-VL.length())_"Orig Fwd Entry Pymt Amt:"
	set VL=VL_$J("",62-VL.length())_$J($FN(vc41,",",2),10)
	set VL=VL_$J("",74-VL.length())_"Foreign Payment Amount:"
	set V=vc11,VO=V set V=$J($FN(V,",",2),15) do VP14 quit:VFMQ!verror.get()
	set VL=VL_$J("",98-VL.length())_V		// [SYSDEV,ACHINCDA]FPAMT
	if 'VL.translate(" ").isNull() do VOM
	set VL="Orig Entry Trace #: "
	set V=vc27,VO=V set V=$J(V,14) do VP15 quit:VFMQ!verror.get()
	set VL=VL_$J("",21-VL.length())_V		// [SYSDEV,ACHINCDA]AORIGTRACE
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%NOCLOSE,%NOOPEN,%TIM,CONAM,EFFDT,PGM,RCNT,RID,RM,RN,SIGN,SUMRN,TOTCR,TOTDR,VL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+8,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",97-VL.length())_"System Date:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="Branch:"
	set VL=VL_$J("",8-VL.length())_$J(vc2,6)
	set VL=VL_$J("",16-VL.length())_"Teller:"
	set VL=VL_$J("",24-VL.length())_$E(vc3,1,12)
	set VL=VL_$J("",39-VL.length())_"Effective Date:"
	set V=vc1,VO=V set V=$J($$DAT^%ZM(V),10) do VP16 quit:VFMQ!verror.get()
	set VL=VL_$J("",54-VL.length())_V		// [SYSDEV,TTX]TJD
	do VOM
	set VL="" do VOM
	set VL=" "_"IBS Account  ID Number          IBS/ACH Trn Code      Amount      Name                   Disc    Trace Number      File ID    Batch"
	do VOM
	set VL="              "_"ACH Account                                                                 Data"
	do VOM
	set VL="              "_"Add. Seq           Addenda Info                                                                      Add. Trace Number"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %NOCLOSE,%NOOPEN,%TIM,EFFDT,ER,PGM,PN,RCNT,RID,RM,RN,SIGN,SUMRN,TOTCR,TOTDR,vcrt,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="                                 "_"Total Debits:"
	set VL=VL_$J("",48-VL.length())_$J($FN(TOTDR,",",2),16)
	set VL=VL_$J("",67-VL.length())_"Items:"
	set V=(VT(0)+VT(1)+VT(2)+VT(3)+VT(4)+VT(5))	// @CNT(0,N,8)
	set VL=VL_$J("",75-VL.length())_$J(V,8)
	do VOM
	set VL="                                      "_"Credits:"
	set VL=VL_$J("",48-VL.length())_$J($FN(TOTCR,",",2),16)
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - [SYSDEV,TTX]CID

 type public Number RCNT

 set RCNT=RCNT+1
	quit

VP2	// Column post-processor - [SYSDEV,ACHINCD]AMOUNT

	type public String vc53,vc46
 type public Number TOTCR,TOTDR
 type public String SIGN

 if vc53.extract()=1 do {       
	set SIGN=" "       

	// Credit
	set TOTCR=TOTCR+vc46
	}

 else   do {       
	set SIGN="-"       

	// Debit
	set TOTDR=TOTDR+vc46
	}
	quit

VP3	// Column pre-processor - [SYSDEV,ACHINCDA]ASEQ

	type public String vc5
 type public String V

 if vc5=0 set V=" "
	quit

VP4	// Column post-processor - [SYSDEV,ACHINCDA]FPAMT

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2) '= "01" set (V,VL)=""
	quit

VP5	// Column post-processor - [SYSDEV,ACHINCDA]FRCID

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="01" set (V,VL)=""
	quit

VP6	// Column post-processor - [SYSDEV,ACHINCDA]TRNSSN

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="02" set (V,VL)=""
	quit

VP7	// Column post-processor - [SYSDEV,ACHINCDA]TSTATE

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="02" set (V,VL)=""
	quit

VP8	// Column post-processor - [SYSDEV,ACHINCDA]VALIDCRD

	type public String vc8
  type public String V,VL

  if vc8.extract(1,2)'="02" set (V,VL)=""
	quit

VP9	// Column post-processor - [SYSDEV,ACHINCDA]ART

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'=98 set (V,VL)=""
	quit

VP10	// Column post-processor - [SYSDEV,ACHINCDA]CORTRACE

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'=98 set (V,VL)=""

 
	quit

VP11	// Column post-processor - [SYSDEV,ACHINCDA]RSTDT

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="99" set (V,VL)=""
	quit

VP12	// Column post-processor - [SYSDEV,ACHINCDA]CDRCORC

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="99" set (V,VL)=""
	quit

VP13	// Column post-processor - [SYSDEV,ACHINCDA]OSTDT

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="99" set (V,VL)=""
	quit

VP14	// Column post-processor - [SYSDEV,ACHINCDA]FPAMT

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="99" set (V,VL)=""
	quit

VP15	// Column post-processor - [SYSDEV,ACHINCDA]AORIGTRACE

	type public String vc8
 type public String V,VL

 if vc8.extract(1,2)'="99" set (V,VL)=""
	quit

VP16	// Column post-processor - [SYSDEV,TTX]TJD

 type public Date EFFDT,X
 type public Number RCNT

 set RCNT=0,EFFDT=X
	quit
