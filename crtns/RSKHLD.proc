RSKHLD		/* 
	  Risk Analysis
	---- Revision History ------------------------------------------------
	
	08/28/06 - KUMARB - CR 22464
		   Modify in the beginning of the section FDHLD8 to suppress 
		   the Check Hold record creation if Check Hold is not defined 
		   in Available Calculation Formula for the account.

	11/28/05 - NATRAJAH - 13734
		   General DBI3 cleanup.

	03/21/03 - CARROLLJ - 51349
		   Removed the use of TR and %A array's for DBI project.

	----------------------------------------------------------------------
	*/
	quit


public	RHLD(RecordDEP dep,RecordTTX ttx)

	type Number BALAVL,NONSD,PRI,RAMT,RSKSEQ,SDFUN,TRNSEQ,UNALHLD
	type Date XTJD
	type Public String HLD8,TSO
	type Public Number GCRAVL 	
 
	// Find last Risk Hold Detail for today
	set XTJD=%SystemDate
	type ResultSet rs=Db.select("TRNSEQ","RSKHD","CID=:CID AND TJD=:XTJD","TRNSEQ DESC")
	if rs.isEmpty() set TRNSEQ=""
	else  set TRNSEQ=rs.next(),TRNSEQ=rs.getRow()
	set TRNSEQ=TRNSEQ+1	

	// Update TSO (Transaction Source of Funds)
	set TSO=ttx.tso                        
	set TSO=$$FIELDIN^UTSO(TSO,"RSKANL",TRNSEQ)
	set ttx.tso=TSO                        
	
	set BALAVL=dep.balavl
	// Setting RAMT equal to transaction amount
	set RAMT=+ttx.tamt
	// Subtract available balance from the remaining amount
	if BALAVL>0 set RAMT=RAMT-BALAVL
	
	// Get Check Hold Table
	type ResultSet rs=Db.select("EXPDT,AMT,TOTAMT,ALCAMT","HLD8","CID=:CID AND EXPDT >=:XTJD")
	if 'rs.isEmpty() while rs.next() do { 
		if rs.getCol(2)=rs.getCol(4) quit 
		set HLD8(rs.getCol(1))=rs.getCol(2)_"|"_rs.getCol(3)_"|"_rs.getCol(4)
		}

	/*
	GCR coverage can only cover the amount that is in Same day GCR 
	available when there are same day deposits
	*/
	if dep.netdep do {
		set UNALHLD=dep.chkhld-dep.alcamt     // Unallocated check hold
		set NONSD=UNALHLD-dep.netdep          // Non Same Day Funds
		if NONSD<0 set NONSD=0                // No non-same day available
		if NONSD>RAMT quit                    // Non same day funds cover
		set SDFUN=RAMT-NONSD
		
		/*
		Find how much GCR will be allowed to cover.  No same day 
		funds available. Can not use GCR to cover transaction
		*/
		if 'dep.sdavl set GCRAVL=0 quit 
	
		/*
		If same day available is less than what is needed for same day
		funds that are needed, can not use GCR to cover transaction
		*/
		if dep.sdavl<SDFUN set GCRAVL=0 quit	 
	
		// Reduce same day available to amount to be used by same day funds
		set dep.sdavl=dep.sdavl-SDFUN	// GCR Same Day Available
	
		// Update TSO for Same Day Funds for Error Corrects
		set TSO=ttx.tso			// Transaction Source of Funds			
		set TSO=$$FIELDIN^UTSO(TSO,"SDFUN",SDFUN)
		set ttx.tso=TSO			
		}


	// GCR Holds
	for  quit:GCRAVL=0  quit:RAMT=0  if GCRAVL>0 do GCR(.dep)
	if RAMT=0 quit 
	
	// Build array of donor accounts
	if dep.dcl>0 do DCLPR(.dep)
	
	// DCL holds
	set PRI=0
	for  quit:dep.dcl=0  quit:RAMT=0  if dep.dcl>0 do DCL(.dep) 
	if RAMT=0 quit 
	
	// Securities holds
	for  quit:dep.secavl=0  quit:RAMT=0  if dep.secavl>0 do SECAVL(.dep)

	quit 
	

GCR(RecordDEP dep)	// GCR Hold

	// GCRHLD is amount GCR hold will be holding
	type Public Number CID,GCRAVL,RAMT,TRNSEQ
	type Public Date EXPDT,HLDEXP
	type Number GCRHLD,HAMT
	
	if dep.gcravl>RAMT set GCRHLD=RAMT
	else  set GCRHLD=dep.gcravl
	
	// Get expiration date and unallocated amount from check hold
	set HLDEXP=$$FDHLD8(GCRHLD)
	set EXPDT=$P(HLDEXP,"|",1)             // Setting expiration date
	set HAMT=$P(HLDEXP,"|",2)              // Setting hold amount
	set RAMT=RAMT-HAMT
	
	// Update GCR hold
	type RecordHLD11 hld11
	if Db.isDefined("HLD11","CID,EXPDT") set hld11=Db.getRecord("HLD11","CID,EXPDT")
	else  do {
		set hld11=Class.new("RecordHLD11")
		set hld11.cid=CID
		set hld11.expdt=EXPDT
		set hld11.gcrhld=0
		}
	set hld11.gcrhld=hld11.gcrhld+HAMT	
	do hld11.bypassSave()

	// Update Detail
	type RecordRSKHD rskhd=Class.new("RecordRSKHD")
	set rskhd.tjd=%SystemDate
	set rskhd.cid=CID
	set rskhd.trnseq=TRNSEQ
	type ResultSet rs=Db.select("TRNSEQ","RSKHD","TJD=:%SystemDate AND CID=:CID AND TRNSEQ>:TRNSEQ","TRNSEQ")	
	if rs.next() set rskhd.rskseq=rs.getCol("TRNSEQ")
	set rskhd.expdt=EXPDT
	set rskhd.hldtyp=11
	set rskhd.hldamt=HAMT
	do rskhd.bypassSave()

	// Update GCR hold on account
	set dep.gcrrsk=dep.gcrrsk+HAMT	// Total GCR Risk Hold
	set GCRAVL=GCRAVL-HAMT
	// Updating the GCR risk hold amount on the account
	if dep.sdavl>dep.gcravl set dep.sdavl=dep.gcravl

	quit 

	
DCLPR(RecordDEP dep)	// Donor account priority

	// BUILD ARRAY OF DCL(1)=ACCOUNT/BALAVL/CRCD/CONVBALAVL

	type Number DONACT,PRI
	type String CLS,DCRCD
	type Public Number AVLBAL,CID
	type Public String DCL
	type Public Boolean ER
	
	type ResultSet rs=Db.select("DONACT,PRI","DEPDONOR","CID=:CID")
	if rs.isEmpty() quit
	while rs.next() do { 
		set DONACT=rs.getCol(1)
		set PRI=rs.getCol(2)
		type ResultSet rs1=Db.select("CLS,CRCD","ACN","CID=:DONACT")		
		set CLS=rs1.getCol("CLS")
		set DCRCD=rs1.getCol("CRCD")
		if CLS="L" do {
			type ResultSet rs2=Db.select("AVLBAL","LN","CID=:DONACT")
			if rs2.next() set AVLBAL=rs2.getCol("AVLBAL")
		}
		
		if CLS="D" do {
			type ResultSet rs3=Db.select("BALAVL","DEP","CID=:DONACT")
			if rs3.next() set AVLBAL=rs3.getCol("BALAVL") 
		}
		set DCL(PRI)=DONACT_"|"_AVLBAL_"|"_DCRCD_"|"_AVLBAL
		if dep.crcd'=DCRCD do {
			do CAMT^CRCDUTL(DCRCD,dep.crcd,.AVLBAL) quit:ER 
			set $P(DCL(PRI),"|",4)=AVLBAL
			}
		}
	quit 
	

DCL(RecordDEP dep)	// Donor account priority


	type Public String DCL
	type Public Number PRI
	type Number DCID,DCRCD,HAMT,RSKHLD
	type String HLDEXP
	type Date EXPDT
	
	
	set PRI=$O(DCL(PRI))  quit:'PRI  do {
		set DCID=$P(DCL(PRI),"|",1)
                set DCRCD=$P(DCL(PRI),"|",3)
                if $P(DCL(PRI),"|",2) do {
                        do DONCID(.dep,DCID,.DCL,PRI,DCRCD)
                        if $P(DCL(PRI),"|",2) set PRI=PRI-1
                        }
                }
	quit

	
DONCID(RecordDEP dep,DCID,DCL,PRI,DCRCD)
	
	type Public Number CID,HAMT,RAMT,TRNSEQ
	type Public String DCLACN,HLDEXP
	type Public Date EXPDT	
	type Number CHAMT,RSKHLD
	
	// Donor account available in recipient account currency
	if $P(DCL(PRI),"|",4)>RAMT set RSKHLD=RAMT
	else  set RSKHLD=$P(DCL(PRI),"|",4)
	
	// Get expiration date and unallocated amount from check hold
	set HLDEXP=$$FDHLD8(RSKHLD)
	set EXPDT=$P(HLDEXP,"|",1)	// Setting expiration date
	set HAMT=$P(HLDEXP,"|",2)	// Setting hold amount
	set RSKHLD=RSKHLD-HAMT
	set RAMT=RAMT-HAMT
	
	set $P(DCL(PRI),"|",4)=$P(DCL(PRI),"|",4)-HAMT
	
	// Update DCL hold on Recipient account
	set DCL=DCL-HAMT

	/*	
	If different currency, convert hold amount back into DCL's currency to
	place the risk hold on the donor account.
	*/
	if DCRCD=dep.crcd set CHAMT=HAMT
	else  do CAMT^CRCDUTL(dep.crcd,DCRCD,.HAMT) set CHAMT=HAMT
	
	// Update donor array available balance
	set $P(DCL(PRI),"|",2)=$P(DCL(PRI),"|",2)-CHAMT
	
	// Update DCL hold
	type RecordHLD10 hld10
	if Db.isDefined("HLD10","DCID,EXPDT,CID") set hld10=Db.getRecord("HLD10","DCID,EXPDT,CID")
	else  do {
		set hld10=Class.new("RecordHLD10")
		set hld10.cid=DCID
		set hld10.expdt=EXPDT
		set hld10.rcid=CID
		set hld10.rskamt=0
		}
	set hld10.rskamt=hld10.rskamt+CHAMT	
	do hld10.bypassSave()

	// Update Detail
	type RecordRSKHD rskhd=Class.new("RecordRSKHD")
	set rskhd.tjd=%SystemDate
	set rskhd.cid=CID
	set rskhd.trnseq=TRNSEQ
	set rskhd.rskseq=Db.nextVal("RSKHD","%SystemDate,CID,TRNSEQ")
	set rskhd.dcid=DCID
	set rskhd.expdt=EXPDT
	set rskhd.hldtyp=10
	set rskhd.hldamt=CHAMT
	do rskhd.bypassSave()

	// Update risk hold on donor account
	set DCLACN(DCID,"DONRSK")=CHAMT
	
	// Update DCL risk on receipient
	set dep.dclrsk=dep.dclrsk+CHAMT
	
	quit 

	
SECAVL(RecordDEP dep)	// Creating security holds
	
	// SECHLD is amount security hold will be holding
	
	type Public Number CID,RAMT,SECAVL,TRNSEQ
	type Number HAMT,SECHLD
	type String HLDEXP
	type Date EXPDT
	
	if dep.secavl>RAMT set SECHLD=RAMT
	else  set SECHLD=dep.secavl
	
	// Get expiration date and unallocated amount from check hold
	set HLDEXP=$$FDHLD8(SECHLD)
	set EXPDT=$P(HLDEXP,"|",1)	// Setting expiration date
	set HAMT=$P(HLDEXP,"|",2)	// Setting hold amount
	set SECHLD=SECHLD-HAMT
	set RAMT=RAMT-HAMT
	
	// Update SEC hold
	type RecordHLD12 hld12
	if Db.isDefined("HLD12","CID,EXPDT") set hld12=Db.getRecord("HLD12","CID,EXPDT")
	else  do {
		set hld12=Class.new("RecordHLD12")
		set hld12.cid=CID
		set hld12.expdt=EXPDT
		set hld12.sechld=0
		}
	set hld12.sechld=hld12.sechld+HAMT	
	do hld12.bypassSave()

	// Update Detail
	type RecordRSKHD rskhd=Class.new("RecordRSKHD")
	set rskhd.tjd=%SystemDate
	set rskhd.cid=CID
	set rskhd.trnseq=TRNSEQ
	set rskhd.rskseq=Db.nextVal("RSKHD","%SystemDate,CID,TRNSEQ")
	set rskhd.expdt=EXPDT
	set rskhd.hldtyp=12
	set rskhd.hldamt=HAMT
	do rskhd.bypassSave()	

	// Update SEC hold on account
	set dep.secrsk=dep.secrsk+HAMT	// Total Security Risk Hold
	set SECAVL=SECAVL-HAMT

	quit 
	

FDHLD8(FAMT)	
	/* 
	Find expiration date to hold
		FAMT - Amount looking to hold
	*/
	type Public String HLD8
	type Public Number CID,HAMT
	type Date EXPDT
	type Number AMT,ALCAMT
	type String BALAVLCALCFO

	set (EXPDT,AMT,ALCAMT)=""
	
	set BALAVLCALCFO = $$BALAVLFO^DEPCDI(CID)
	
	// Suppress check hold if Available Balance Calculation Formula
	// does not include check holds
	if BALAVLCALCFO.extract(4)'=1 quit ""
	
	for  quit:AMT-ALCAMT  set EXPDT=$O(HLD8(EXPDT)) quit:EXPDT=""  do {
		set AMT=$P(HLD8(EXPDT),"|",1)
		set ALCAMT=$P(HLD8(EXPDT),"|",3)
		}
	set HAMT=AMT-ALCAMT
	if FAMT<HAMT set HAMT=FAMT
	
	// Update allocated check hold
	if HAMT do {
		set $P(HLD8(EXPDT),"|",3)=$P(HLD8(EXPDT),"|",3)+HAMT
		type RecordHLD8 hld8=Class.new("RecordHLD8")
		set hld8.cid=CID
		set hld8.expdt=EXPDT
		set hld8.amt=$P(HLD8(EXPDT),"|",1)
		set hld8.totamt=$P(HLD8(EXPDT),"|",2)
		set hld8.alcamt=$P(HLD8(EXPDT),"|",3)
		do hld8.bypassSave()
		}
	
	quit EXPDT_"|"_HAMT

vSIG()	quit "60523^993^Balasubramonian Sankar^9549"	// Signature - LTD^TIME^USER^SIZE
