CMSCOMP(String VALUE,Number FLUPD,Number MOD,String PAR)	//;PROFILE/CMS Computed Value Routine
	/*
	   ORIG: BAILDONC - 12/15/97
	   DESC: PROFILE/CMS Computed Value Routine

	   This is custom to RS/2, ING Hungary's CMS.  This is used to
	   calculate the values of any pieces of data that are not actual
	   PROFILE data items.  Each such value is given VALTYP of 3 in the
	   CMSFILE user table and the VALUE represents the line tag that
	   will return the computed value.

	   For any new data items added to the "STAT" file layout that must
	   be computed, a new subroutine must be added to this routine.

	   ARGUMENTS:
	   . VALUE  Linetag to set value /TYP=T/REQ/MECH=VAL

	   . FLUPD  File Type Indicator /TYP=T/REQ/MECH=VAL
	     This indicates whether the record entered is
	     the result of a change to CRD, ACN, or CIF file.

	     1 - CRD
	     2 - ACN
	     3 - CIF

	   . MOD  Mode   /TYP=T/REQ/MECH=VAL
	     0 - Insert
	     1 - Update
	     3 - Delete

	   . PAR  Parameters  /TYP=T/NOREQ
	     This is a list of other parameters that might
	     be needed to compute the values.
	     For example, BALAVL needs the account number
	     passed in

	   RETURNS:
	   . DATA  Computed Value  /TYP=T

	   EXAMPLE:
	   S VALUE=$$^CMSCOMP("CLINST",3,1)

	   --------- Revision History --------------------------------------------
	   	  	  
           	07/25/05 - SkariahV- CR16679
	              Removed #WARN and #OPTIMIZE directives.
	    
		06/02/03 - TELIV - 51351
	   		Converted to PSL
	   		
	   ------------------------------------------------------------------------

	*/

	
	type String DATA
	
	set DATA=""
	
	if VALUE.get()="" quit ""
	if VALUE.get()="CLINST" do CLINST(.DATA,FLUPD) quit DATA
	if VALUE.get()="ALINST" do ALINST(.DATA,FLUPD) quit DATA
	if VALUE.get()="CRDINST" do CRDINST(.DATA,FLUPD,MOD) quit DATA
	if VALUE.get()="CRDSTAT" do CRDSTAT(.DATA) quit DATA
	if VALUE.get()="CLSTAT" do CLSTAT(.DATA) quit DATA
	if VALUE.get()="ALSTAT" do ALSTAT(.DATA) quit DATA
	if VALUE.get()="SIGN" do SIGN(.DATA) quit DATA
	if VALUE.get()="BALAVL" do BALAVL(.DATA) quit DATA
	
	quit ""
	
	

CLINST(String DATA,Number FLUPD)	//
	/* This is used to indicate that the record is the result of a change to
	   the customer file.
	   INPUTS:

	         . CUSTFLG        CMS Existing Customer Flag

	*/

	type public Number CUSTFLG

	//Account records contain no customer information
	if FLUPD.get()=2 set DATA="NN" quit

	//Customer records are always modified
	if FLUPD.get()=3 set DATA="AE"
	else  do {
		if CUSTFLG=1 set DATA="AE"
		else  set DATA="CN"
		}
	quit


ALINST(String DATA,Number FLUPD)	//
	/* This is used to indicate that the record is the result of a change to
	   the account file.
	   INPUTS:

	         . ACCTFLG        CMS Existing Account Flag

	*/


	type public Number ACCTFLG

	//Customer records contain no account information
	if FLUPD.get()=3 set DATA="NN" quit

	//Account records are always modified
	if FLUPD.get()=2 set DATA="AE"
	else  do {
		if ACCTFLG=1 set DATA="AE"
		else  set DATA="CN"
		}
	quit


CRDINST(String DATA,Number FLUPD,Number MOD)	//
	/* This is used to indicate that the record is the result of a change to
	   the card file.

	   Customer and account records contain no card information
	*/

	if (FLUPD.get()=2)!(FLUPD.get()=3) set DATA="NN" quit

	if FLUPD=1 do {
		if (MOD=1)!(MOD=3) set DATA="AE"
		if MOD=0 set DATA="CN"
		if '((MOD=1)!(MOD=3)!(MOD=0)) set DATA="NN"
		}
	else  set DATA="NN"

	quit


CRDSTAT(String DATA)	// This is empty in the file that goes to the CMS.
	
	set DATA="   "

	quit


CLSTAT(String DATA)	// This is empty in the file that goes to the CMS.

	set DATA="   "

	quit


ALSTAT(String DATA)	// This is empty in the file that goes to the CMS.

	set DATA="   "

	quit


SIGN(String DATA)	// This gets the sign (+/-) of the available balance.

	type public Number CID
	type Number BALAVL
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	
	if acn.cls="L" do {
		type RecordLN ln=Db.getRecord("LN","CID=:CID")
		set BALAVL=ln.avlbal
		}

	else  do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		set BALAVL=dep.balavl
		}

	// Sign of the available balance
	set DATA=$select(BALAVL["-":"-",1:"+")

	quit
	

BALAVL(String DATA)	//
	/* This returns the available balance with the sign but without the
	   decimal point.

	   To calculate the available balance the ledger balance and any holds
	   must be considered
	*/
			
	type public Number CID,EXCAMT
	type Number AMT,BALAVL,BSEAMT,CASH,DOLLAR,EXP,I
	type String BSE,CRCD,R8TYP,TRNTYP,SEC,SIGN
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	
	if acn.cls="L" do {
		type RecordLN ln=Db.getRecord("LN","CID=:CID")
		set BALAVL=ln.avlbal
		// Account Currency
		set CRCD=ln.crcd
		}

	else  do {
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		set BALAVL=dep.balavl
				
		// Account Currency
		set CRCD=dep.crcd
		}

	// If the currency is not in HUF or USD it must be translated to HUF
	if '((CRCD="USD")!(CRCD="HUF")) do {
		// Base Currency
		set BSE="HUF"

		// Currency that will be translated to base currency
		set SEC=CRCD

		// Amount to be translated
		set AMT=BALAVL

		// Indicates the amount is not in the base currency
		set BSEAMT=0

		// Cash value--not a debit or credit--no margins apply
		set TRNTYP=2

		// Indicates both currencies are cash--not non-cash
		set CASH=11

		// Use the MIDRATE
		set R8TYP=1

		do EXC^CRCDUTL(BSE,SEC,AMT,BSEAMT,TRNTYP,CASH,,,R8TYP)

		set BALAVL=EXCAMT
		}

	set SIGN=$select(BALAVL["-":"-",1:"+")
	set AMT=$select(BALAVL["-":BALAVL.extract(2,BALAVL.length()),1:BALAVL)
	set DOLLAR=$select(AMT[".":AMT.piece(".",1),AMT[",":AMT.piece(",",1),1:AMT)
	set EXP=$select(AMT[".":AMT.piece(".",2),AMT[",":AMT.piece(",",2),1:"00")

	if EXP.length()<2 for I=1:1:2-EXP.length() set EXP=EXP_"0"
	set DATA=DOLLAR_EXP

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60106^26771^Viji Skariah^5499"	// Signature - LTD^TIME^USER^SIZE
