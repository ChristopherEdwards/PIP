SRVSUM	// Library;Summarize Service Fee Information
	/*
	   ORIG: MATTSON - 07/25/94
	   DESC: Service Fee Toolbox

	   KEYWORDS: Service Fee

	   LIBRARY:
	       . DATA Load account node level data
	       . FEEPLN Load service fee plan information
	       . FEECAT Load service fee detail information
	       . LOAD Load account service fee information


	---- Revision History ------------------------------------------------
	07/10/06 - RussellDS - CR22121
		   Modified WILD section to replace use of $C(255) with
		   $C(PSL.maxCharValue) to make Unicode compliant.
		   
		   Add parenthesis in SELECT in FEEPLN section to correct
		   logic error.
	
	06/07/06 - RussellDS - CR21655
		   Modified RUN section to turn DQ query conditions into
		   proper WHERE clause.
		   
		   Added quit in EXT and LOAD sections in the event SCND is null.
		   Otherwise, we get errors further on.
	
	08/23/05 - RussellDS - CR16911
		   Fix various logic errors.
		   
		   Fix casting problems.
	
		   Minor PSL clean-up - still scoping issues.
		   
		   Removed old revision history.
		   
	06/15/05 - Carol Scott - CR 16330
		   
		   Put .get on SRVSUM references to eliminate undefined errors.

	----------------------------------------------------------------------
	*/
	
	quit
	


Public RUN	// Run service fee accumulation (function SRVSUM)

	new FEEPLN,frm,SRVSUM,%TAB,TRNGRP,WHERE,whr,X

	set %TAB("frm")=".FRM3/TBL=[DBTBL1]:LIST/XPP=D FILEPP^DBE"
	set %TAB("whr")="/TYP=T/LEN=78/SIZ=255/XPP=S FILES=frm D ^DBSQRY"

	// Record Selection Conditions
	set %READ="@@%FN,,,frm/REQ,,"""_$$^MSG(2337)_""",,whr*3"

	do ^UTLREAD

	if VFMQ="Q" quit
	
	// Convert DQ style query to WHERE clause
	set WHERE = $$WHERE^SQLCONV(.whr(), frm)

	// Dynamic select
	#ACCEPT DATE=12/29/03;PGM=John Carroll
	type ResultSet rs=Db.select("CID",frm,WHERE)

	if rs.isEmpty() quit

	while rs.next() do {
		set CID=rs.getCol(1)
		do FETCH
	}

	quit


FETCH	// Set up error trap and Fetch

	set ER=0

	catch error {

		new ET,RM

		set ET=error.type

		if ET["%GTM-" do ZE^UTLERR quit

		set ET=ET_"-"_error.thrownAt
		set RM=error.description

		do ^UTLERR
	}

	type RecordACN acn=Db.getRecord("ACN","CID")

	if acn.stat=4 quit

	// Fee Plan
	do EXT(.acn,"",.SRVSUM,.FEEPLN,.TRNGRP,0,6,,0)

	// Credit Usage
	do EXT(.acn,"",.SRVSUM,.FEEPLN,.TRNGRP,0,6,,1)

	set ER=0

	quit


Public EXT(RecordACN acn,RecordTTX ttx,SRVSUM,FEEPLN,TRNGRP,CTL,THRESH,SCND,PLTP,EXPL)	// Account service fee detail
	/*
	   Note:  This entry point assumes error trapping, if desired, is
	          set by the calling routine.

	   Limitation:
	          If a transaction is error corrected or reversed after
	          the original transaction was accumulated, the
	          SRVSUM file is not re-accumulated.

	   ARGUMENTS:
	       . acn	Account number			/TYP=RecordACN/REQ
	       . ttx    Transaction			/TYP=RecordTTX/NOREQ
			required if $E(CTL,3)=1

	       . SRVSUM Account service fee summary	/TYP=N/MECH=REFARR:W
	       . FEEPLN Service fee plan info		/TYP=T/MECH=REFARR:RW
	       . TRNGRP Tranaction code group info	/TYP=T/MECH=REFARR:RW
	       . CTL	Accumulate transactions flag	/TYP=L/NOREQ/MECH=VAL
	       		 Position 1:
	                  0 - Accumulate through TJD-1   SRVSUM accumulation
	                  1 - Accumulate through TJD     SRVFEE at SCND
	                 
	                 Position 2: 
			  0 - Save updates
			  1 - Return data without saving
		
			 Position 3:
			  1 - Adjustment from EFD transaction - Restate Fees

	       . THRESH Transaction threshold		/TYP=N/NOREQ/MECH=VAL
	       . SCND	Schedule next date. EFD Tran	/TYP=D/NOREQ/MECH=VAL
	       . PLTP	Plan Type			/TYP=N/REQ/MECH=VAL
	       . EXPL	Exemption Plan Flag		/TYP=N/NOREQ/MECH=VAL
	*/

	new CID,feeplan,GRP,OLDSUM,SCFRE,SCLD

	set CTL=$G(CTL)
	set THRESH=$G(THRESH)
	set PLTP=$G(PLTP)
	set EXPL=$G(EXPL)
	set CID=acn.cid
	set ER=0

	/*
	 If called from SRVFEE for transaction processing, the SCND for 
	 the effective date of the transaction is being passed.
	*/
	if '$E(CTL,3) new SCND

	kill SRVSUM

	do LOAD(.acn,.feeplan,.SCND,.SCLD,.SCFRE,.SRVSUM,PLTP)

	if feeplan.isNull() quit
	if SCND.isNull() quit

	set OLDSUM=SRVSUM.get()

	if (SRVSUM.get()),SRVSUM'>SCLD kill SRVSUM set SRVSUM=SCLD+1

	if '$D(FEEPLN(feeplan)) do FEEPLN(feeplan,.FEEPLN) quit:ER

	if '$P(FEEPLN(feeplan),"|",5),'$D(FEEPLN(feeplan,3)),'EXPL,'$G(ANLSYS) quit

	set GRP=""

	for  set GRP=$O(FEEPLN(feeplan,3,GRP)) quit:GRP=""  do {

		if '$D(TRNGRP(GRP)) set TRNGRP(GRP)=$$TRNGRP(GRP,1,SCND)

		// Tran code group modified, re-accumulate
		if TRNGRP(GRP)>SRVSUM kill SRVSUM set SRVSUM=SCLD+1
	}

	if $E(CTL,3) do {
		// Need ttx for UAVB
		if ttx.exists() do UAVB(.acn,.ttx,feeplan,SCND,SCLD,.SRVSUM) quit
		
		// None passed in, so create dummy
		type RecordTTX ttx2 = Class.new("RecordTTX")
		set ttx2.cid = acn.cid
		do UAVB(.acn,.ttx2,feeplan,SCND,SCLD,.SRVSUM)
	}
		
	else  do SUMM(.acn,feeplan,SCND,SCLD,.SRVSUM)

	// Second byte of CTL = 1 indicates don't save
	if SRVSUM'=OLDSUM,'CTL.extract(2) do SAVE(CID,feeplan,SCND,SCLD,.SRVSUM,PLTP)

	quit


UAVB(RecordACN acn,RecordTTX ttx,feeplan,SCND,SCLD,SUM)

	new AMT,CNT,ETC,TSEQ,UAVB

	do INIT^UAVB(.acn,CID,SCLD,SCND,"00100000111000000001") quit:ER

	// Date Last Accumulated
	set $P(SUM,"|",1)=%SystemDate

	// Returns HSEQ
	do HSEQ^LNPTSU(.ttx)

	// History Sequence Last Accumulated
	set $P(SUM,"|",2)=HSEQ
	// 3 - Dollar Days

	// 4 - Float Hold Days

	// Average Balance in Period
	set $P(SUM,"|",5)=$$^SCARND(+UAVB(1),,CID)
	// Average Collected Balance in Period
	set $P(SUM,"|",6)=$$^SCARND($P(UAVB(2),"|",3),,CID)
	// 7 - Avg Investible Balance in Period

	// Low Balance (Intra-Day)
	set $P(SUM,"|",8)=$$^SCARND($P(UAVB(1),"|",5),,CID)
	// Low Balance (End-of-Day)
	set $P(SUM,"|",9)=$$^SCARND($P(UAVB(1),"|",6),,CID)
	// Average Available Bal (ledger less chk holds)
	set $P(SUM,"|",11)=$$^SCARND($P(UAVB(2),"|",16),,CID)

	// This information is done on the primary transaction that generated the fee adjustment.
	if ttx.cid'=CID quit
	set TSEQ=Db.currVal("HIST","CID")

	type RecordHIST hist=Db.getRecord("HIST","CID,TSEQ")

	// Internal Transaction Code
	if hist.itc="" quit

	// External Transaction Code
	if hist.etc="" quit

	// Transaction Amount
	if 'hist.tamt quit

	// Do not include effective dated service fee adjustments for prior periods.
	if hist.efd,(hist.efd'>SCLD) quit

	set ETC=hist.etc

	// Determine transaction count.  Transaction may be summarized (HVA).
	set CNT=1

	if acn.highvol,hist.tso'="" set CNT=$$FIELD^UTSO(hist.tso,"SLCNT")

	if 'CNT set CNT=1

	// Transaction Amount
	set AMT=hist.prin

	// Add absolute value unless error correct/reversal
	if AMT<0 set AMT=-AMT

	// Subtract for EC/REV
	if hist.itc6!hist.itc12 set CNT=-(CNT) set AMT=-(AMT)

	// Accumulate for SRVSUM3
	do TRNSUMM

	quit


SUMM(RecordACN acn,feeplan,SCND,SCLD,SUM)	//Private;Summarize service fee info

	new AVGBAL,AVGCOL,AVGCOLC,BJD,CHLDDYS,DLRDYS,FHLDDYS,LOWBAL,LOWEOD,NEWEND,NET,OLDEND

	type ResultSet rs = Db.select("MAX(TSEQ)", "HIST", "CID=:CID")
	if rs.next() set NEWEND = rs.getCol(1)
	else  set NEWEND = ""

	/*
	 Accumulation is now done for transactions dates TJD-1. Only include
	 TJD transactions when the accumulation is done for the service fee
	 analysis date through the routine SRVFEE where CTL=1.
	*/

	#ACCEPT DATE=12/29/03;PGM=John Carroll
	if 'CTL.extract(1) quit:(%SystemDate'>(SCLD+1))  new X set X=%SystemDate new %SystemDate set %SystemDate=X-1

	/*
	 If accumulation is under the threshhold and the system date is less
	 than the next service fee date, do not accumulate at this time (for
	 performance reasons).  Note that online service fees do not pass a
	 threshold and will always accumulate service fee information.
	*/

	set BJD=$P(SUM,"|",1)
	set OLDEND=+$P(SUM,"|",2)

	if THRESH,%SystemDate<SCND,NEWEND-OLDEND<THRESH quit

	set DLRDYS=$P(SUM,"|",3)
	set FHLDDYS=$P(SUM,"|",4)+$$HLDDYS(CID,$S('OLDEND:BJD,1:BJD+1),%SystemDate,7)

	set LOWBAL=$P(SUM,"|",8)
	if LOWBAL="" set LOWBAL=acn.bal

	set LOWEOD=$P(SUM,"|",9)
	if LOWEOD="" set LOWEOD=acn.bal

	// Check Hold Days
	set CHLDDYS=$P(SUM,"|",13)+$$HLDDYS(CID,$S('OLDEND:BJD,1:BJD+1),%SystemDate,8)

	set NET=0

	//  Accumulation through SRVSUM. Accumulate for SCND
	if OLDEND<NEWEND do {
		
		new AMT,CNT,ENDBAL,ETC,HEFD,HTJD,ITC,TSEQ,TSO

		type ResultSet rs=Db.select("TSEQ,EFD,ENDBAL,ETC,ITC,PRIN,TJD,TSO","HIST","CID=:CID AND TSEQ > :OLDEND AND TJD NOT >:%SystemDate AND TJD NOT < :BJD","TSEQ DESC")

		while rs.next() do {

			set TSEQ=rs.getCol(1)
			set HEFD=rs.getCol(2)
			set ENDBAL=rs.getCol(3)
			set ETC=rs.getCol(4)
			set ITC=rs.getCol(5)
			set AMT=rs.getCol(6)
			set HTJD=rs.getCol(7)
			set TSO=rs.getCol(8)

			do HIST(.acn)
		}
	}

	if $P(SUM,"|",3)="" set DLRDYS=DLRDYS+((acn.bal-NET)*(SCND-SCLD))

	set AVGBAL = $J(DLRDYS/(SCND-SCLD),0,2)
	set AVGCOL = $J((DLRDYS-FHLDDYS)/(SCND-SCLD),0,2)
	set AVGCOLC = $J((DLRDYS-CHLDDYS)/(SCND-SCLD),0,2)

	// Last accumulated
	set $P(SUM,"|",1)=%SystemDate
	// History sequence
	set $P(SUM,"|",2)=NEWEND
	// Dollar days
	set $P(SUM,"|",3)=DLRDYS
	// Float hold days
	set $P(SUM,"|",4)=FHLDDYS
	// Avg balance
	set $P(SUM,"|",5)=AVGBAL
	// Avg collected
	set $P(SUM,"|",6)=AVGCOL
	// 7 - Reserved for avg inv

	// Low balance (per)
	set $P(SUM,"|",8)=$$^SCARND(LOWBAL,,CID)
	// Low balance (eod)
	set $P(SUM,"|",9)=$$^SCARND(LOWEOD,,CID)
	// Avg Ldgr less chk holds
	set $P(SUM,"|",10)=acn.bal
	// Avg Ldgr less chk holds
	set $P(SUM,"|",11)=AVGCOLC
	// 12 - Reserved for avg ldgr less chk hld less reserve

	// Check hold days
	set $P(SUM,"|",13)=CHLDDYS

	quit


HIST(RecordACN acn)	//Private;Accumulate data from history record

	if ITC="" quit
	if ETC="" quit
	if 'AMT quit

	if '$E(ITC) set AMT=-AMT
	if acn.trb set AMT=-AMT

	if HEFD="" set HEFD=HTJD
	if HEFD'>SCLD set HEFD=SCLD+1

	set DLRDYS=DLRDYS+(AMT*(SCND-HEFD+1))
	set NET=NET+AMT

	// Calculate low balances
	if ENDBAL<LOWBAL set LOWBAL=ENDBAL
	if BJD'=HTJD set BJD=HTJD
	if ENDBAL<LOWEOD set LOWEOD=ENDBAL

	// Summarize transaction counts by tran code group (feecat 3)

	// Exclude E/Cs and reversals
	if $E(ITC,6)!($E(ITC,12)) quit

	// Exclude original tran that was EC/REV
	if TSEQ,Db.isDefined("HISTR","CID,TSEQ") quit

	/*
	 Do not include effective dated service fee adjustments for prior
	 periods in transaction accumulation.
	*/
	if HEFD,$$FIELD^UTSO(TSO,"SRVADJ") quit

	// Determine transaction count.  Transaction may be summarized (HVA).
	set CNT=1
	if acn.highvol,TSO'="" set CNT=$$FIELD^UTSO(TSO,"SLCNT")
	if 'CNT set CNT=1

	// Need the absolute value of amt.
	if AMT<0 set AMT=-AMT

	do TRNSUMM

	quit


TRNSUMM	// Accumulated SRVSUM transactions

	new FEETYP,STR

	set STR=","_ETC_","
	set FEETYP=""

	for  set FEETYP=$O(FEEPLN(feeplan,3,FEETYP)) quit:FEETYP=""  do {

		if $P(TRNGRP(FEETYP),"|",2)'[STR quit

		set $P(SUM(3,FEETYP),"|",1)=$P($G(SUM(3,FEETYP)),"|",1)+CNT
		set $P(SUM(3,FEETYP),"|",2)=$P($G(SUM(3,FEETYP)),"|",2)+AMT
		set $P(SUM(3,FEETYP),"|",3)=$P($G(SUM(3,FEETYP)),"|",3)+(AMT#5)
	}
	
	quit


HLDDYS(CID,BJD,EJD,HTYP)	// Calculate hold dollar days

	new AMT,DT1,DT2,HLD,HOLD

	// Build HOLD array of total hold amounts
	do GETHOLD^UHLDSCA(HTYP,CID,BJD-1,EJD,.HOLD)

	// No holds exist in the specified period
	if '$D(HOLD(HTYP,CID)) quit 0

	set DT1=$O(HOLD(HTYP,CID,BJD+1),-1)
	if DT1="" set DT1=$O(HOLD(HTYP,CID,BJD-1))
	if DT1="" quit 0

	set HLD=HOLD(HTYP,CID,DT1)

	if DT1<BJD set DT1=BJD

	set DT2=DT1
	set AMT=0

	for  set DT2=$O(HOLD(HTYP,CID,DT2)) quit:DT2=""!(DT2>EJD)  do {
		set AMT=AMT+((DT2-DT1)*HLD)
		set HLD=HOLD(HTYP,CID,DT2)
		set DT1=DT2
	}

	if DT2>EJD set AMT=AMT+((EJD+1-DT1)*HLD)

	quit AMT


LOAD(RecordACN acn,feeplan,SCND,SCLD,SCFRE,SUM,PLTP)	//Private;Load service fee information

	set SCLD=""

	// Service Fee or Credit Usage
	if 'PLTP do {

		if acn.cls="D" do {
			
			type RecordDEP dep = {RecordDEP}acn
			set feeplan = dep.feepln
		}
		else  do {
			
			type RecordLN ln = {RecordLN}acn
			set feeplan = ln.feepln
		}
	}

	else  do {

		if acn.cls="D" do {
			type RecordDEP dep = {RecordDEP}acn
			set feeplan = dep.feepln
			
		}

		else  set feeplan=""
	}

	if feeplan="" set (SCND,SCFRE)="" quit

	if 'PLTP do {

		if acn.cls="D" do {
			type RecordDEP dep = {RecordDEP}acn
			set SCFRE = dep.scfre
			if $E(CTL,3) quit
			set SCND = dep.scnd
			set SCLD = dep.scld
		}

		else  set (SCFRE,SCND,SCLD)=""
	}

	else  do {

		if acn.cls="D" do {
			type RecordDEP dep = {RecordDEP}acn
			set SCFRE = dep.upfre
			if $E(CTL,3) quit
			set SCND = dep.upndt
			set SCLD = dep.upldt
		}

		else  set (SCFRE,SCND,SCLD)=""
	}
	
	quit:SCND.isNull()

	if SCLD="" do {

		new ER

		set ER=0
		set SCLD=$$NJD^UFRE(SCND,SCFRE,,1) quit:ER
	}

	if SCLD'>acn.odt set SCLD=acn.odt-1

	type RecordSRVSUM srvsum=Db.getRecord("SRVSUM","CID,PLTP,SCND",1)

	if srvsum.getMode() do {

		set $P(SUM,"|",1)=srvsum.enddat
		set $P(SUM,"|",2)=srvsum.endseq
		set $P(SUM,"|",3)=srvsum.dlrdys
		set $P(SUM,"|",4)=srvsum.hlddys
		set $P(SUM,"|",5)=srvsum.avgbal
		set $P(SUM,"|",6)=srvsum.avgcol
		set $P(SUM,"|",7)=srvsum.avginv
		set $P(SUM,"|",8)=srvsum.lowbal
		set $P(SUM,"|",9)=srvsum.loweod
		set $P(SUM,"|",10)=srvsum.ledger
		set $P(SUM,"|",11)=srvsum.avgcolc
		set $P(SUM,"|",12)=srvsum.avgcolr
		set $P(SUM,"|",13)=srvsum.chkdys

		type ResultSet rs=Db.select("TRNGRP,TRNCNT,TRNTAMT,SURCHG","SRVSUM3","CID=:CID AND PLTP=:PLTP AND SCND=:SCND")

		while rs.next() do {
			
			type String TRNGRP = rs.getCol("TRNGRP")
			
			set $P(SUM(3,TRNGRP),"|",1) = rs.getCol("TRNCNT")
			set $P(SUM(3,TRNGRP),"|",2) = rs.getCol("TRNTAMT")
			set $P(SUM(3,TRNGRP),"|",3) = rs.getCol("SURCHG")
		}
	}
	
	else  set SUM = ""

	quit


SAVE(CID,feeplan,SCND,SCLD,SUM,PLTP)	//Private;File summary information

	new TRNGRP
	set TRNGRP=""
	type RecordSRVSUM srvsum=Db.getRecord("SRVSUM","CID,PLTP,SCND",1)

	set srvsum.enddat=$P(SUM,"|",1)
	set srvsum.endseq=$P(SUM,"|",2)
	set srvsum.dlrdys=$P(SUM,"|",3)
	set srvsum.hlddys=$P(SUM,"|",4)
	set srvsum.avgbal=$P(SUM,"|",5)
	set srvsum.avgcol=$P(SUM,"|",6)
	set srvsum.avginv=$P(SUM,"|",7)
	set srvsum.lowbal=$P(SUM,"|",8)
	set srvsum.loweod=$P(SUM,"|",9)
	set srvsum.ledger=$P(SUM,"|",10)
	set srvsum.avgcolc=$P(SUM,"|",11)
	set srvsum.avgcolr=$P(SUM,"|",12)
	set srvsum.chkdys=$P(SUM,"|",13)

	do srvsum.bypassSave()

	for  set TRNGRP=$O(FEEPLN(feeplan,3,TRNGRP)) quit:TRNGRP=""  do {

		type RecordSRVSUM3 srvsum3=Db.getRecord("SRVSUM3","CID,PLTP,SCND,TRNGRP",1)

		set srvsum3.trncnt=$P($G(SUM(3,TRNGRP)),"|",1)
		set srvsum3.trntamt=$P($G(SUM(3,TRNGRP)),"|",2)
		set srvsum3.surchg=$P($G(SUM(3,TRNGRP)),"|",3)

		do srvsum3.bypassSave()
	}

	quit


FEEPLN(feeplan,ARRAY)	//Private;Load service fee plan information

	type Date FEEDT

	type DbSet ds=Db.selectDbSet("FEEPLN","PLAN=:feeplan AND FEEDT NOT>:SCND","FEEDT DESC")

	// Service fee plan for ~p1 not defined
	if ds.isEmpty() do Runtime.setErrMSG("DEP",1971,SCND) quit

	if ds.next() do {

		type RecordFEEPLN feepln = ds.getRecord("FEEPLN")

		set FEEDT = feepln.feedt

		set $P(ARRAY(feeplan),"|",1)=feepln.desc
		set $P(ARRAY(feeplan),"|",2)=feepln.base
		set $P(ARRAY(feeplan),"|",3)=feepln.feemin
		set $P(ARRAY(feeplan),"|",4)=feepln.feemax
		set $P(ARRAY(feeplan),"|",5)=feepln.feebal
		set $P(ARRAY(feeplan),"|",6)=feepln.cmpdate
		set $P(ARRAY(feeplan),"|",7)=feepln.cmptime
		set $P(ARRAY(feeplan),"|",8)=feepln.cmpuid
		set $P(ARRAY(feeplan),"|",9)=feepln.curflg
		set $P(ARRAY(feeplan),"|",10)=feepln.plancur
		set $P(ARRAY(feeplan),"|",11)=feepln.planexc
		set $P(ARRAY(feeplan),"|",12)=feepln.ftrf
		set $P(ARRAY(feeplan),"|",13)=feepln.mintrf
		set $P(ARRAY(feeplan),"|",14)=feepln.maxtrf
		set $P(ARRAY(feeplan),"|",15)=feepln.otrtrf
		set $P(ARRAY(feeplan),"|",16)=feepln.pltp
		set $P(ARRAY(feeplan),"|",17)=feepln.feebalrm
		set $P(ARRAY(feeplan),"|",18)=feepln.feebalrf
	}

	type ResultSet rs1=Db.select("FEECAT,FEETYP,CHGOPT,FEEAMT,FEESCH,MAXDLY,FEEPRCT,FEETBL","FEESRV","PLAN=:feeplan AND FEEDT=:FEEDT AND (FEECAT=3 OR FEECAT=4) AND NOT (FEECAT=3 AND CHGOPT=1)")

	while rs1.next() do {
		
		type Number FEECAT = rs1.getCol("FEECAT")
		type String FEETYP = rs1.getCol("FEETYP")

		set $P(ARRAY(feeplan,FEECAT,FEETYP),"|",2)=rs1.getCol("CHGOPT")
		set $P(ARRAY(feeplan,FEECAT,FEETYP),"|",3)=rs1.getCol("FEEAMT")
		set $P(ARRAY(feeplan,FEECAT,FEETYP),"|",4)=rs1.getCol("FEESCH")
		set $P(ARRAY(feeplan,FEECAT,FEETYP),"|",5)=rs1.getCol("MAXDLY")
		set $P(ARRAY(feeplan,FEECAT,FEETYP),"|",7)=rs1.getCol("FEEPRCT")
		set $P(ARRAY(feeplan,FEECAT,FEETYP),"|",8)=rs1.getCol("FEETBL")
	}

	quit


Public TRNGRP(GRP,CMP,FEEDT)	// Transaction codes in specified tran code group
	/*
	   ARGUMENTS:

	       . GRP Transaction code group		/TYP=T/REQ/MECH=VAL
	       . CMP Update [SRVSAVE]			/TYP=L/REQ
			Value 0 = Called by routine SRVCMP to load trancodes
				  in trangroups. Does not update [SRVSAV]
			Value 1 = Called by ^SRVSUM and could update
				  [SRVSAV].
	       . FEEDT Fee plan effective date		/TYP=D/NOREQ

	   RETURNS:

	       . $$ Transaction code group data		/TYP=T
			Last modified date|,etc1,etc2,
	*/

	new NV,OV

	set CTL=$G(CTL)
	set CMP=$G(CMP)

	// Process came from restate service fees, do not reset [SRVSAV]
	if $E(CTL,3) set CMP=0

	set OV=""

	type ResultSet rs=Db.select("FEEDT,TRNCDLST","SRVSAV","TRNGRP=:GRP")
	
	while rs.next() do {
		
		if OV.isNull() set OV = rs.getCol("FEEDT")_"|"
		
		set OV = OV_rs.getCol("TRNCDLST")
	}

	set NV=FEEDT_"|,"

	type ResultSet rs1=Db.select("TRNGRPDT","UTBLTRNGRPT","TRNGRP=:GRP AND TRNGRPDT NOT >:FEEDT","TRNGRPDT DESC")

	if rs1.isEmpty() quit NV

	new TRNGRPDT

	if rs1.next() set TRNGRPDT=rs1.getCol(1)

	type ResultSet rs2=Db.select("TRNCD","UTBLTRNGRP","TRNGRP=:GRP AND TRNGRPDT=:TRNGRPDT")

	if rs2.isEmpty() quit NV

	new TRNCD

	while rs2.next() do {

		set TRNCD=rs2.getCol(1)

		if TRNCD["-" set NV=NV_$$RNGE(TRNCD) quit
		if TRNCD["*" set NV=NV_$$WILD(TRNCD) quit

		type ResultSet rs3=Db.select("CLS","TRN","ETC=:TRNCD AND CLS='D'")

		if rs3.next() set NV=NV_TRNCD_","
	}

	/*
	  If the transaction group has been modified, update the last modified
	  date and file into ^SRVSAV.  This date will be used to determine if
	  a re-accumulation is necessary when summarzing transaction counts.
	*/

	// Screen SRVPLNQ3, SRVPLN3 and routine ^SRVCMP using for error checking.
	if 'CMP quit NV

	// If no change in tran code group, quit with old values
	if $P(NV,"|",2)=$P(OV,"|",2) quit OV

	// Tran code group was modified, update [SRVSUM]; use new date/tran codes
	do Db.fastDelete("SRVSAV","GRP")

	new I,LST

	set LST=$P(NV,"|",2)

	for I=1:390:$L(LST) do {

		type RecordSRVSAV srvsav=Class.new("RecordSRVSAV")

		set srvsav.trngrp=GRP
		set srvsav.seq=(I\390)+1
		set srvsav.feedt=FEEDT
		set srvsav.trncdlst=$E(LST,I,I+389)

		do srvsav.bypassSave()
	}

	quit NV


RNGE(ETC)	// Range syntax (for example, SD-SDZZZ)

	new X,Y,Z

	set X=$P(ETC,"-",1)
	set Y=$P(ETC,"-",2)
	set Z=""

	type ResultSet rs=Db.select("ETC","TRN","ETC NOT <:X AND ETC NOT >:Y AND CLS='D'")

	if rs.isEmpty() quit Z

	while rs.next() set Z=Z_rs.getCol(1)_","

	quit Z


WILD(ETC)	// Wildcard syntax (for example, SD*)

	new X,Y,Z

	set X=$P(ETC,"*",1)
	set Y=X_$C(PSL.maxCharValue)
	set Z=""

	type ResultSet rs=Db.select("ETC","TRN","ETC NOT <:X AND ETC NOT >:Y AND CLS='D'")

	if rs.isEmpty() quit Z

	while rs.next() set Z=Z_rs.getCol(1)_","

	quit Z

vSIG()	quit "60466^47137^Dan Russell^18544"	// Signature - LTD^TIME^USER^SIZE
