INDXTST
	/*
	Turbo High performance Index Tester (excluding transaction smashing 
	technology)
	
	   ORIG:  ROTELLA - 26 AUG 1991

	   Interest Index Test Utility  -  Replaces TEST tag in BTTINDEX

	---- Revision History ------------------------------------------------
	
	04/19/06 - SmithCD - CR 20836
		   Removed check for loan class before setting PAR("LIMIT")=1 
		   before call to CTL^UINDX. The restriction on limits for 
		   loans only must be a relic from when limits did not exist 
		   for deposit accounts.

	03/27/06 - SmithCD - CR 20369
		   . Added setting of acn.bal to BAL so matrices with balance 
		     as a row / column will use the balance specified by the 
		     user
		   . Modified TEST1 section to properly pass index parameters 
		     when determining the value of a nested index within a tier
		   . Performed some minor cleanup
	  
	02/01/05 - SmithCD - CR13661
		   Replaced $$TAG call/section with setting of PAR array, 
	   	   as required for CTL^UINDX to prevent "Int/div plan does 
	 	   not exist" error. Removed old revision history.

	---------------------------------------------------------------------
	*/

	// Driver Section for INDEX test utility

	type public Boolean ER
	type public String RM
	
	type String OLNTB,VFMQ,X
	type Number CID,BAL
	type Boolean CMP
	type Date %EffectiveDate,%ProcessMode,%READ,%TAB(),IDX

	set ER=0 
	set %ProcessMode=2 
	set CMP=""
	set %TAB("IDX")=".IDX1/TBL=[INDEX]/XPP=quit:X=""""  set I(3)="""" do EDT^UINDX"
	set %TAB("BAL")=".BAL4"
	set %TAB("EFD")=".EFD1"
	set %EffectiveDate=%SystemDate
	set %TAB("CID")=".CID1/XPP=quit:X=""""  set %EXT=1 do ^UACN/XPR=do CHK^INDXTST"
	set OLNTB="00034"

	set %READ="@@%FN,,,IDX/REQ,BAL/REQ,EFD/REQ,CID"

	do ^UTLREAD 

	if VFMQ="Q" quit

	set ER=0 
	set CID=+CID

	set X=$$TEST(IDX,%EffectiveDate,BAL)

	if 'X do { quit
		set ER=+X 
		set RM=X.piece("|",2) 
		do ERR
		}
	do SCREEN
	
	if ER do ERR
	
	quit


SCREEN	//  Call DQ screen INDXTST

	type public Boolean CMP
	type public String IDX

	type Number %REPEAT
	type String SID

	set %REPEAT=10
	set SID="INDXTST"_CMP 
	type RecordINDEX fINDEX=Db.getRecord("INDEX","INDEX=:IDX",1)
	
	do DRV^USID(%ProcessMode,SID,.fINDEX)

	quit


TEST(String INDEX,			// Index name
     Date %EffectiveDate,		// Effective date
     Number BAL)			// Balance

     	// Function to Test the index ... build fINDXTST and R array

	type public Number BASREL,CID,RATE,RRATE,SRATE,URATE
	type public Boolean CMP,IXER,ER
	type public String IDX,INDXTST,IX(,,),RM
	
	type String index,CLS,PAR(),TIER
	type Boolean IRF
	type Date SVEFD,TEFD

	set (CLS,IRF,RATE,RRATE,SRATE,TEFD,URATE)=""

        type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	set CLS=acn.cls
        set IRF=acn.irf
	set TEFD=acn.trexd

        set PAR("INDEX")=INDEX
        set PAR("ROUND")=1
        if CID set PAR("LIMIT")=1
        
        set acn.bal=BAL
	
	do CTL^UINDX(.acn,%EffectiveDate,BAL,.PAR()) 
	if ER quit "0|"_RM.get()

	// If teaser rate is active, IX array is not loaded in UINDX.
	if 'IX(INDEX).exists() set IXER=$$LOADIX^UINDX(.acn,INDEX,%EffectiveDate,,0)
	
	set INDXTST.piece("|",1)=INDEX
	set INDXTST.piece("|",2)=$$INDTYP(IX(IDX))
	set INDXTST.piece("|",6)=SRATE
	set INDXTST.piece("|",7)=URATE
	set INDXTST.piece("|",8)=RATE
	set INDXTST.piece("|",9)=RRATE
	set INDXTST.piece("|",11)=acn.intspr
	set INDXTST.piece("|",12)=acn.rndmtd
	set INDXTST.piece("|",13)=IDX
	set INDXTST.piece("|",14)=TEFD
	set INDXTST.piece("|",15)=%EffectiveDate
	set INDXTST.piece("|",16)=CLS

	set BASREL=IX(IDX).piece("|",3)
	if BASREL=2 set CMP=1

	type RecordSTBLINDEX0 stblidx0=Db.getRecord("STBLINDEX0","BASREL=:BASREL",1)
	set INDXTST.piece("|",3)=stblidx0.desc

	set index="" 
	for  set index=IX(index).order() quit:index.isNull()  do {
		if SVEFD.exists() set %EffectiveDate=SVEFD
		if 'IX(index,%EffectiveDate).exists() do {
			set SVEFD=%EffectiveDate 
			set %EffectiveDate=IX(index,%EffectiveDate+.01).order(-1)
			}
		set TIER=""
		for  set TIER=IX(index,%EffectiveDate,TIER).order() quit:TIER.isNull()  do TEST1(.acn) quit:ER
	
		}
	if ER quit 0
	
	quit 1


TEST1(RecordACN acn)		// Account				/REF:R

	// Evaluate tier rate

	type public String index,IDX,IX(,,),R(),TIER
	type public Number RATE,TIERSEQ
	type public Boolean ER
	
	type Number BAL,RMIN
	type String PAR()
	type Date EXPDT

	if TIER<-1E14 do {
		type ResultSet rs=Db.select("RMIN","INDEX1","INDEX=:index AND EFD=:%EffectiveDate AND RMIN>:TIER")
		if rs.next() set RMIN=rs.getCol("RMIN")
		set IX(index,%EffectiveDate,RMIN)=IX(index,%EffectiveDate,TIER)
		set TIER=RMIN
		}

	if index=IDX,IX(index,%EffectiveDate,TIER).piece("|",1)?1A.E quit

	// Priority
	set TIERSEQ=IX(index,%EffectiveDate,TIER).piece("|",2)
	set R(TIERSEQ)=IX(index,%EffectiveDate,TIER)
	set R(TIERSEQ).piece("|",5)=index 
	set R(TIERSEQ).piece("|",4)=TIER
	set R(TIERSEQ).piece("|",6)=IX(index,%EffectiveDate,TIER).piece("|",3)

	// Convert Expiration Date
	set EXPDT=IX(index,%EffectiveDate,TIER).piece("|",4)
	set R(TIERSEQ).piece("|",7)=EXPDT.toString()

	if IX(index,%EffectiveDate,TIER).piece("|",1)'?.N.1".".N do { quit:ER
		type String INDDATA,RNDFC,SPREAD

		set INDDATA=IX(index,%EffectiveDate,TIER)

		// Extract spread and rounding factor from index data
		do INDEXTR^UINDX(INDDATA,.SPREAD,.RNDFC)

		set PAR("INDEX")=INDDATA.piece("|",1)
		set PAR("SPREAD")=SPREAD
		set PAR("RNDFC")=RNDFC

		do CTL^UINDX(.acn,%EffectiveDate,TIER,.PAR()) quit:ER

		set R(TIERSEQ).piece("|",2)=RATE
		}
	else  do {
		set R(TIERSEQ).piece("|",2)=+IX(index,%EffectiveDate,TIER) 
		set R(TIERSEQ).piece("|",1)=""
		}
		
	quit


INDTYP(String IX)		// Index data
	
	/* 
	Determine type of index and return this to piece 2 of fINDXTST for 
	screen
	*/

	type String COMP,INDTYP,RET

	set IX=IX.get()
	if IX.isNull() quit ""

	// Lessor or Greater
	if IX.piece("|",3)=2 do { quit RET
		set COMP=IX.piece("|",2)
		if COMP'="L" set COMP="G"
		type RecordSTBLLCOM stbllcom=Db.getRecord("STBLLCOM","COMP=:COMP")
		set RET=stbllcom.desc
		}
			
	// Cumulative or Incremental
	if IX.piece("|",3)=1 do { quit RET
                set INDTYP=IX.piece("|",2)
                if INDTYP'="C" set INDTYP="I"
                type RecordSTBLINDTYP stbindtp=Db.getRecord("STBLINDTYP","INDTYP=:INDTYP")
                set RET=stbindtp.desc
                }
	
	quit ""


ERR	// Return generic error if RM not defined

	type public Boolean ER
	type public String RM

	set ER=1 
	set RM=RM.get()

	// Error ~p1
	if RM.isNull() set RM=$$^MSG(979)
	
	quit


CHK	// If Data Item Authorization flag is on make account field required.

	type public String IDX

	type RecordINDEX index=Db.getRecord("INDEX","INDEX=:IDX",1)
	if index.diauth do CHANGE^DBSMACRO("REQ",1)

	quit

vSIG()	quit "60374^41916^Chad Smith^6439"	// Signature - LTD^TIME^USER^SIZE
