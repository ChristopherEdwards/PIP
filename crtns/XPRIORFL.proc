XPRIORFL(RecordXPRIOR xprior, String vpar, Boolean vparNorm) // XPRIOR - Alpha Cross Index Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (2)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = xprior.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(xprior,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(xprior,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("NAM").exists()!vx("ACN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("XPRIOR",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("XPRIOR","NAM = :xprior.nam and ACN = :xprior.acn") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String NAM
	type public String ACN

	type RecordXPRIOR xprior = Db.getRecord("XPRIOR","NAM=:NAM,ACN=:ACN")
	if (%ProcessMode = 2) do {
		do xprior.setMode(2)

		do XPRIORFL(xprior,vpar)
	}
	else  do VINDEX(xprior)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordXPRIOR xprior

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("XPRIOR","NAM = :xprior.nam and ACN = :xprior.acn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(xprior))  S ^XPRIOR("A",vobj(xprior,-3),"*","*",vobj(xprior,-4))=vobj(xprior)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.xprior) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordXPRIOR xprior

	if vpar["/INDEX/" do VINDEX(.xprior)                   // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^XPRIOR("A",vobj(xprior,-3),"*","*",vobj(xprior,-4)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordXPRIOR xprior

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordXPRIOR xprior

	if xprior.nam.isNull() do vreqerr("NAM") quit
	if xprior.acn.isNull() do vreqerr("ACN") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("XPRIOR","MSG",1767,"XPRIOR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordXPRIOR xprior

	if xprior.nam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NAM", vRM) quit
	set X = xprior.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("XPRIOR","MSG",979,"XPRIOR."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordXPRIOR xprior) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.xprior)

	quit
	

vi1(RecordXPRIOR xprior) // Maintain ACNPNAM index entries (Customer Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = xprior.acn
	type String v2 = xprior.nam

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^XPRIOR("A",vobj(xprior,-3),"*","*",vobj(xprior,-4)))#2,'$D(^XACNPNAM(v1,v2)) do vidxerr("ACNPNAM")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XACNPNAM(v1,v2)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XACNPNAM(v1,v2)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("XPRIOR")

	while ds.next() do {
		type RecordXPRIOR xprior=ds.getRecord("XPRIOR")
		if vlist.contains("VINDEX") do VINDEX(.xprior) quit
		if vlist.contains("ACNPNAM") do vi1(.xprior)
	}

	quit


public VIDXBLD1(RecordXPRIOR xprior, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.xprior) quit
	if vlist.contains("ACNPNAM") do vi1(.xprior)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("XPRIOR","MSG",1225,"XPRIOR."_di)

	quit


vkchged // Access key changed

	type public RecordXPRIOR xprior

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("NAM").exists() set vux("NAM") = vx("NAM")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	do vkey(1) set voldkey = xprior.nam_","_xprior.acn     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = xprior.nam_","_xprior.acn     // Copy new keys into object
	type RecordXPRIOR vnewrec = xprior.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("XPRIOR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordXPRIOR xprior

	if vux("NAM").exists() set xprior.nam = vux("NAM").piece("|",i)
	if vux("ACN").exists() set xprior.acn = vux("ACN").piece("|",i)
	quit

VIDXPGM()	quit "XPRIORFL"	// Location of index program

