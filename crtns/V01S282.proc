V01S282(%ProcessMode,RecordINDEX1 INDEX1,RecordINDEX fINDEX)   //PBS -  - SID= <INDEX0A> Interest Index Rate - Basis
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:54 - shetyes
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,RATE",VSID="INDEX0A",VPGM=$T(+0),VSNAME="Interest Index Rate - Basis"
 set VFSN("INDEX")="zfINDEX",VFSN("INDEX1")="zINDEX1"
 set vPSL=1
 set KEYS(1)=fINDEX.INDEX
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=14 do VPR(.INDEX1,.fINDEX),VDA1(.INDEX1,.fINDEX),V5^DBSPNT quit

 if '%ProcessMode do VNEW(.INDEX1,.fINDEX),VPR(.INDEX1,.fINDEX),VDA1(.INDEX1,.fINDEX)
 if %ProcessMode do VLOD(.INDEX1,.fINDEX) quit:$G(ER)  do VPR(.INDEX1,.fINDEX),VDA1(.INDEX1,.fINDEX)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.INDEX1,.fINDEX)
	quit


VNEW(RecordINDEX1 INDEX1,RecordINDEX fINDEX) // Initialize arrays if %O=0
 
 do VLOD(.INDEX1,.fINDEX)
 do VDEF(.INDEX1,.fINDEX)
 do VLOD(.INDEX1,.fINDEX)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordINDEX1 INDEX1,RecordINDEX fINDEX)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VNEWDQ(RecordINDEX1 INDEX1,RecordINDEX fINDEX) // Original VNEW section
 
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VLOD(RecordINDEX1 INDEX1,RecordINDEX fINDEX) // User defined access section
 //
 if '$D(%REPEAT) set %REPEAT=14
 if '$D(%MODS) set %MODS=1
 ;
 #ACCEPT date=11/05/03;pgm=Screen compiler
 quit
VLODDQ(RecordINDEX1 INDEX1,RecordINDEX fINDEX) //Original VLOD section
 
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordINDEX1 INDEX1,RecordINDEX fINDEX) // Display screen prompts
 set VO="4||13|"
 set VO(0)="|"
 set VO(1)=$C(1,12,12,0,0,0,0,0,0,0)_"01T      Index:"
 set VO(2)=$C(2,11,13,0,0,0,0,0,0,0)_"01T Description:"
 set VO(3)=$C(5,28,20,0,0,0,0,0,0,0)_"01TBasis Interest Index"
 set VO(4)=$C(8,23,15,0,0,0,0,0,0,0)_"01TEffective Date:"
 if '$D(%MODS) set %MODS=1
 set DY=9 for I=%MODS:1:%REPEAT+%MODS-1 do VRPR(.INDEX1,.fINDEX)
 set VO=(+VO)_"|"_(VO+1)_"|13" quit  // BOD pointer
 
VRPR(RecordINDEX1 INDEX1,RecordINDEX fINDEX)  // Display prompts %REPEAT times
 
 set VO(VO+1)=$C(DY,27,11,0,0,0,0,0,0,0)_"01TDaily Rate:"
 set VO(VO+2)=$C(DY+1,17,6,0,0,0,0,0,0,0)_"01TAnnual"
 set VO(VO+3)=$C(DY+1,24,14,0,0,0,0,0,0,0)_"01TRate or Index:"
 set VO(VO+4)=$C(DY+2,26,12,0,0,0,0,0,0,0)_"01T7 Day Yield:"
 set VO(VO+5)=$C(DY+3,25,13,0,0,0,0,0,0,0)_"01T30 Day Yield:"
 set VO=VO+5,DY=DY+4
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordINDEX1 INDEX1,RecordINDEX fINDEX)  // Display screen data
 new V
 s RATE=$G(RATE)
 //
 set VX=$P(VO,"|",2)
 set VO(VX+0)=$C(1,25,6,2,0,0,0,0,0,0)_"01T"_$E(fINDEX.INDEX,1,6)
 set VO(VX+1)=$C(2,25,40,2,0,0,0,0,0,0)_"01T"_$E(fINDEX.DES,1,40)
 set VO(VX+2)=$C(8,39,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM(INDEX1.EFD)
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+2,DY=9 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.INDEX1,.fINDEX)
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordINDEX1 INDEX1,RecordINDEX fINDEX)  // Display data %REPEAT times
 //instantiate new object if necessary
 if %ProcessMode=5 new v1
 if  set (v1)=""
 else  new v1
 else  set (v1,RATE(I))=$G(RATE(I))
 
 set V=$P(v1,"|",6) set VO(VX+1)=$C(DY,39,11,2,0,0,0,0,0,0)_"00N"_$S(V="":"",1:$J(V,0,9))
 set VO(VX+2)=$C(DY+1,39,20,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",2)
 set V=$P(v1,"|",7) set VO(VX+3)=$C(DY+2,39,9,2,0,0,0,0,0,0)_"00N"_$S(V="":"",1:$J(V,0,7))
 set V=$P(v1,"|",8) set VO(VX+4)=$C(DY+3,39,9,2,0,0,0,0,0,0)_"00N"_$S(V="":"",1:$J(V,0,7))
 set DY=DY+4,VX=VX+4
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordINDEX1 INDEX1,RecordINDEX fINDEX)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=4
 set %MODOFF=3,%MOD=4,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=1,VPB=8+(%REPEAT*4),BLKSIZ=(49*%REPEAT)+56,PGM=$T(+0),DLIB="SYSDEV",DFID="INDEX1,INDEX"
 set OLNTB=VPB*1000
 
 set VFSN("INDEX")="zfINDEX",VFSN("INDEX1")="zINDEX1"
 //
 for I=8:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(0,24,6)_"21T12401|1|[INDEX]INDEX|[INDEX]"
 set %TAB(2)=$C(1,24,40)_"20T12401||[INDEX]DES"
 set %TAB(3)=$C(7,38,10)_"21D12402|1|[INDEX1]EFD"
 set %TAB(4)=$C(8,38,11)_"00N12406|*RATE(1)|[*]@DRATE|||do VP1^V01S282(.INDEX1,.fINDEX)||||9"
 set %TAB(5)=$C(9,38,20)_"00T12402|*RATE(1)|[*]@RATE|||do VP2^V01S282(.INDEX1,.fINDEX)|do VP3^V01S282(.INDEX1,.fINDEX)"
 set %TAB(6)=$C(10,38,9)_"00N12407|*RATE(1)|[*]@YLD7|||||||7"
 set %TAB(7)=$C(11,38,9)_"00N12408|*RATE(1)|[*]@YLD30|||||||7"
 do VTBL(.INDEX1,.fINDEX)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordINDEX1 INDEX1,RecordINDEX fINDEX) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordINDEX1 INDEX1,RecordINDEX fINDEX) //
 if V=0!(X="") do {
 	do UNPROT^DBSMACRO("@RATE")

 	}
 if X="" quit
 new ANN,DAYS,DEC31,JAN1,NJD
 set NJD=INDEX1.EFD
 set JAN1=$$BOYJD^SCADAT(NJD,1)
 set DEC31=$$EOYJD^SCADAT(NJD,1)
 set DAYS=(DEC31-JAN1)+1
 
 set ANN=X*DAYS
 set ANN=$$^SCARND(ANN,"","","",5)
 do DEFAULT^DBSMACRO("@RATE",ANN,"1","0","0")
 do PROTECT^DBSMACRO("@RATE")
 quit

 /*
 --------- Revision History ------------------------------------------------
 
  05/03/00 - HAYMANP - 39841
             Modified rate conversion calculation to account for dates in a
             leap year after 2/29 and to use the EFD value as the basis.
 
 -------------------------------------------------------------------------
 */
VP2(RecordINDEX1 INDEX1,RecordINDEX fINDEX) //
 do VPO1(.INDEX1,.fINDEX)

 do CHANGE^DBSMACRO("TBL","")

 quit

VPO1(RecordINDEX1 INDEX1,RecordINDEX fINDEX)  // user library INDEX_RATE
 /*   Revision History
  04/03/06 - SmithCD - CR 20366
	     Fixed undefined error created by last change when a non-index 
	     rate is specified by moving code to re-format number rates for 
	     diplay and check for "Rate exceeds conventional limits" to 
	     before the call to VALTIER. Fixed infinite loop situation in 
	     POST1 section.
  03/27/06 - SmithCD - CR 20396
	     Modified "Index ~p1 links back to this index" check to check on 
	     just the first piece of the input string (X) so it will work 
	     even if there is a spread / rounding method. Cleaned up code, 
	     including creation of VALTIER section to protect the input 
	     string. Moved in POST1 section from INDX1.
  04/12/05 - JERUCHIMC - 14822
             Modify code for DBI II.  Replace direct global references
             with PSL. 
 
 */
 type public String X
 type public Boolean ER
 
 if X.isNull() quit
 type Boolean INDEXDF
 type String INDNAME
 set INDNAME = X.piece(" ", 1)
 set INDEXDF = Db.isDefined("INDEX", "INDEX=:INDNAME")
 // Check for 99.9.. (number and decimal only) format
 if X?.N.1".".N do { quit
	// Re-format for display
	set X = X.toNumber().roundDec(5, , 5)
	set X = X.translate(" ", "")
	// Rate exceeds conventional limits
	if X '< 100  do Runtime.setErrMSG("INDEX", 2310) quit
	}
 
 do VALTIER(X) quit:ER
 quit
VALTIER(String INPUTSTR)		// Protect input string
 // Validate index tier string
 type public Boolean ER
 type public String INDEX, INDNAME
 type public Boolean INDEXDF
 type String EXTRA, ROUND, SPREAD, X
 set SPREAD = INPUTSTR.piece(" ", 2)
 set ROUND = INPUTSTR.piece(" ", 3)
 if 'SPREAD.isNull(), "RUD".isLike("%"_SPREAD.extract(1)_"%")  do {
	// Rounding method w/no spread
	set ROUND = SPREAD
	set SPREAD = ""
	}
 set X = INDNAME
 do EDT^UINDX quit:ER
 set X = SPREAD
 do SPRPP^UINDX quit:ER
 if 'ROUND.isNull() do { quit:ER
	set X = ROUND
	do RNDPP^UINDX
	}
 // Index ~p1 links back to this index
 if INDNAME = INDEX do Runtime.setErrMSG("INDEX", 1223, INDNAME) quit
 
 if INDEXDF do POST1(INDNAME) quit
 
 // Entry must have a valid index
 do Runtime.setErrMSG("INDEX", 971) quit
 
 quit
 
POST1(String INDNAME)			// Index name
	// Set up check index loop
	type public Boolean ER
	type Date NEFD, JD, ZJD
	type String EFDSTR, RATEIND
	type Boolean DONE = 0
	if INDNAME.isNull() quit
	type RecordINDEX index = Db.getRecord("INDEX", "INDEX=:INDNAME")
	set NEFD = %EffectiveDate + 1
	type ResultSet rs = Db.select("EFD", "INDEX1", "INDEX=:INDNAME AND EFD<:NEFD")
	if rs.isEmpty(), index.basrel '= 3 do { quit
		set EFDSTR = %EffectiveDate.toString()
		// Index ~p1 not set up for ~p2
		do Runtime.setErrMSG("INDEX1", 1228, "N~EFDSTR") quit
		}
	set JD = %EffectiveDate
	
	set ZJD = JD + 1
		
	type ResultSet rs = Db.select("EFD,RATE", "INDEX1", "INDEX=:INDNAME AND EFD<:ZJD", "EFD DESC,RMIN ASC")
	while rs.next() do { quit:DONE
		set JD = rs.getCol("EFD")
			
		// Rate field may contain an index reference
		set RATEIND = rs.getCol("RATE").piece(" ", 1)
		// Index ~p1 contains link back to this index
		if RATEIND = INDNAME do Runtime.setErrMSG("INDEX1", 1220, RATEIND) quit
		// Found lowest level (contains numeric rate)
		if RATEIND?1N.N ! (RATEIND?.N1".".N) set DONE = 1 quit
	
		// Links back to non-existent index (~p1)
		if 'Db.isDefined("INDEX", "INDEX=:RATEIND") do Runtime.setErrMSG("INDEX", 1223, RATEIND) quit
		// Index ~p1 links back to this index
		if RATEIND = INDEX do Runtime.setErrMSG("INDEX", 1223, INDNAME) quit
		}
	quit
 #ACCEPT DATE=11/05/03;pgm=screen compiler
 quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VP3(RecordINDEX1 INDEX1,RecordINDEX fINDEX) //
 set zv="[INDEX]INDEX,[INDEX]DES"
 do CHANGE^DBSMACRO("TBL",zv)

 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordINDEX1 INDEX1
 type Public RecordINDEX fINDEX
 do VPR(.INDEX1,.fINDEX)
 do VDA1(.INDEX1,.fINDEX)
 do ^DBSPNT()
 quit

VW(RecordINDEX1 INDEX1,RecordINDEX fINDEX)
 do VDA1(.INDEX1,.fINDEX)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordINDEX1 INDEX1,RecordINDEX fINDEX)
 do VDA1(.INDEX1,.fINDEX)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordINDEX1 INDEX1
 type Public RecordINDEX fINDEX
 do VDA1(.INDEX1,.fINDEX)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordINDEX1 INDEX1
 if sn="INDEX1" do vSET1(.INDEX1,di,X)
 type Public RecordINDEX fINDEX
 if sn="INDEX" do vSET2(.fINDEX,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordINDEX1 INDEX1,di,X)
 do INDEX1.setAuditFlag(1)
 set INDEX1.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET2(RecordINDEX fINDEX,di,X)
 do fINDEX.setAuditFlag(1)
 set fINDEX.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordINDEX1 INDEX1
 if fid="INDEX1" quit $$vREAD1(.INDEX1,di)
 type Public RecordINDEX fINDEX
 if fid="INDEX" quit $$vREAD2(.fINDEX,di)
 quit ""
vREAD1(RecordINDEX1 INDEX1,di)
 quit INDEX1.@di
vREAD2(RecordINDEX fINDEX,di)
 quit fINDEX.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
