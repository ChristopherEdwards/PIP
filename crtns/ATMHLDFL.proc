ATMHLDFL(RecordATMHLD atmhld, String vpar, Boolean vparNorm) // ATMHLD - ATM Daily Hold Journal Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = atmhld.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(atmhld,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(atmhld,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EXPDT").exists()!vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ATMHLD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ATMHLD","EXPDT = :atmhld.expdt and CID = :atmhld.cid and SEQ = :atmhld.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EXPDT
	type public String CID
	type public String SEQ

	type RecordATMHLD atmhld = Db.getRecord("ATMHLD","EXPDT=:EXPDT,CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do atmhld.setMode(2)

		do ATMHLDFL(atmhld,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordATMHLD atmhld

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ATMHLD","EXPDT = :atmhld.expdt and CID = :atmhld.cid and SEQ = :atmhld.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(atmhld))  S ^DAYEND(vobj(atmhld,-3),"ATMHLD",vobj(atmhld,-4),vobj(atmhld,-5))=vobj(atmhld)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordATMHLD atmhld


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DAYEND(vobj(atmhld,-3),"ATMHLD",vobj(atmhld,-4),vobj(atmhld,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordATMHLD atmhld

	// Type local variables for access keys for defaults
	type public String EXPDT
	type public String CID
	type public String SEQ

	type public String TLO
	if atmhld.tlo.isNull() set atmhld.tlo = TLO            // tlo
	type public String %UID
	if atmhld.uid.isNull() set atmhld.uid = %UID           // uid
	quit


vreqn // Validate required data items

	type public RecordATMHLD atmhld

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordATMHLD atmhld

	if atmhld.expdt.isNull() do vreqerr("EXPDT") quit
	if atmhld.cid.isNull() do vreqerr("CID") quit
	if atmhld.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ATMHLD","MSG",1767,"ATMHLD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordATMHLD atmhld
	if 'atmhld.cid.isNull() set vfkey("^ACN("_""""_atmhld.cid_""""_","_50_")")="ATMHLD(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordATMHLD atmhld
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":atmhld.cid") set vERRMSG = $$^MSG(8563,"ATMHLD(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordATMHLD atmhld

	set X = atmhld.expdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPDT", vRM) quit
	set X = atmhld.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = atmhld.seq if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = atmhld.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ATMHLD.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = atmhld.stdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STDT", vRM) quit
	if atmhld.tcmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCMT", vRM) quit
	if atmhld.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if atmhld.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ATMHLD","MSG",979,"ATMHLD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordATMHLD atmhld

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("EXPDT").exists() set vux("EXPDT") = vx("EXPDT")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = atmhld.expdt_","_atmhld.cid_","_atmhld.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = atmhld.expdt_","_atmhld.cid_","_atmhld.seq // Copy new keys into object
	type RecordATMHLD vnewrec = atmhld.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ATMHLD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordATMHLD atmhld

	if vux("EXPDT").exists() set atmhld.expdt = vux("EXPDT").piece("|",i)
	if vux("CID").exists() set atmhld.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set atmhld.seq = vux("SEQ").piece("|",i)
	quit
