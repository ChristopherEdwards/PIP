RRLNKFIL(RecordUTBLPRODLNK utblprodlnk, String vpar, Boolean vparNorm) // UTBLPRODLNK - Product Column Rule/Result Link Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (12)             11/22/2003
	// Trigger Definition (1)                      01/05/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblprodlnk.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblprodlnk,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblprodlnk,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYPE = utblprodlnk.type
	type String COLNAME = utblprodlnk.colname
	type String MARSEG = utblprodlnk.marseg
	type String SEGID = utblprodlnk.segid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYPE").exists()!vx("COLNAME").exists()!vx("MARSEG").exists()!vx("SEGID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPRODLNK",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPRODLNK","TYPE = :utblprodlnk.type and COLNAME = :utblprodlnk.colname and MARSEG = :utblprodlnk.marseg and SEGID = :utblprodlnk.segid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYPE
	type public String COLNAME
	type public String MARSEG
	type public String SEGID

	type RecordUTBLPRODLNK utblprodlnk = Db.getRecord("UTBLPRODLNK","TYPE=:TYPE,COLNAME=:COLNAME,MARSEG=:MARSEG,SEGID=:SEGID")
	if (%ProcessMode = 2) do {
		do utblprodlnk.setMode(2)

		do RRLNKFIL(utblprodlnk,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPRODLNK utblprodlnk

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPRODLNK","TYPE = :utblprodlnk.type and COLNAME = :utblprodlnk.colname and MARSEG = :utblprodlnk.marseg and SEGID = :utblprodlnk.segid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set utblprodlnk.LDATE = %SystemDate
		set utblprodlnk.LTIME = %CurrentTime
		set utblprodlnk.LUSER = %UserID
		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodlnk,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodlnk,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblprodlnk)) S ^UTBL("PRODLNK",vobj(utblprodlnk,-3),vobj(utblprodlnk,-4),vobj(utblprodlnk,-5),vobj(utblprodlnk,-6))=vobj(utblprodlnk)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPRODLNK utblprodlnk

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblprodlnk,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("PRODLNK",vobj(utblprodlnk,-3),vobj(utblprodlnk,-4),vobj(utblprodlnk,-5),vobj(utblprodlnk,-6))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLPRODLNK utblprodlnk

	// Type local variables for access keys for defaults
	type public String TYPE
	type public String COLNAME
	type public String MARSEG
	type public String SEGID

	if utblprodlnk.appmod.isNull() set utblprodlnk.appmod = 0 // appmod
	quit


vreqn // Validate required data items

	type public RecordUTBLPRODLNK utblprodlnk

	if utblprodlnk.appmod.isNull() do vreqerr("APPMOD") quit
	if utblprodlnk.resultsid.isNull() do vreqerr("RESULTSID") quit
	if utblprodlnk.ruleid.isNull() do vreqerr("RULEID") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPRODLNK utblprodlnk

	if utblprodlnk.type.isNull() do vreqerr("TYPE") quit
	if utblprodlnk.colname.isNull() do vreqerr("COLNAME") quit
	if utblprodlnk.marseg.isNull() do vreqerr("MARSEG") quit
	if utblprodlnk.segid.isNull() do vreqerr("SEGID") quit

		if vx("APPMOD").exists(),utblprodlnk.appmod.isNull() do vreqerr("APPMOD") quit
		if vx("RESULTSID").exists(),utblprodlnk.resultsid.isNull() do vreqerr("RESULTSID") quit
		if vx("RULEID").exists(),utblprodlnk.ruleid.isNull() do vreqerr("RULEID") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODLNK","MSG",1767,"UTBLPRODLNK."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordUTBLPRODLNK utblprodlnk
	if 'utblprodlnk.resultsid.isNull() set vfkey("^UTBL("_"""PRODRT"""_","_""""_utblprodlnk.colname_""""_","_""""_utblprodlnk.resultsid_""""_")")="UTBLPRODLNK(COLNAME,RESULTSID) -> UTBLPRODRT"
	if 'utblprodlnk.segid.isNull() set vfkey("^UTBL("_"""MARSEG"""_","_""""_utblprodlnk.marseg_""""_","_""""_utblprodlnk.segid_""""_")")="UTBLPRODLNK(MARSEG,SEGID) -> UTBLMARSEGDT"
	if 'utblprodlnk.ruleid.isNull() set vfkey("^UTBL("_"""PRODRL"""_","_""""_utblprodlnk.ruleid_""""_")")="UTBLPRODLNK(RULEID) -> UTBLPRODRL"
	if 'utblprodlnk.type.isNull() set vfkey("^UTBLCTL("_""""_utblprodlnk.type_""""_","_50_")")="UTBLPRODLNK(TYPE) -> PRODCTL"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordUTBLPRODLNK utblprodlnk
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("UTBLPRODRT",":utblprodlnk.colname,:utblprodlnk.resultsid") set vERRMSG = $$^MSG(8563,"UTBLPRODLNK(COLNAME,RESULTSID) -> UTBLPRODRT") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("UTBLMARSEGDT",":utblprodlnk.marseg,:utblprodlnk.segid") set vERRMSG = $$^MSG(8563,"UTBLPRODLNK(MARSEG,SEGID) -> UTBLMARSEGDT") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("UTBLPRODRL",":utblprodlnk.ruleid") set vERRMSG = $$^MSG(8563,"UTBLPRODLNK(RULEID) -> UTBLPRODRL") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("PRODCTL",":utblprodlnk.type") set vERRMSG = $$^MSG(8563,"UTBLPRODLNK(TYPE) -> PRODCTL") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLPRODLNK utblprodlnk
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblprodlnk,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert/Update

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before Insert/Update

	type public RecordUTBLPRODLNK utblprodlnk
	do utblprodlnk.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.

	04/30/2001 - CHENARDP - 34847
		   Removed check for inconsistent match condition on
		   rule / result set since it could be a valid condition.

	01/04/2000 - DOUGANM - 31126
	  	   Removed premature quit commands resulting from incorrect
		   conversion that altered original logic of code, causing
		   a few of the Runtime error message statements not to be
		   executed as expected.

	09/22/99 - CARROLLJ - 31126
		   Convert to PSL.

	11/16/98 - CHIANG - 26685
		   Modified to replace error messages with calls to MSG utility
	*/

	type public Boolean ER

	type Number ZMARSEG,ZSEGID,ZTYPE
	type String cls,di,tab,ZCOL

	set ZTYPE=utblprodlnk.type
	if 'ZTYPE.get() quit

	// --- Validate class/type
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:ZTYPE")

	set cls=prodctl.cls

	// Invalid column name for type ~p1
	if utblprodlnk.colname.extract()'=cls do Runtime.setErrMSG("UTBLPRODLNK",3684,ZTYPE) quit:ER

	// --- Valid column name?
	set ZCOL=utblprodlnk.colname

	set tab=ZCOL.piece(".",1)
	set di=ZCOL.piece(".",2)	

	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID=:tab,DI=:di",1)

	// Invalid column name
	if 'dbtbl1d.getMode() quit

	// --- Valid market segment and ID?
	set ZMARSEG=utblprodlnk.marseg 
	set ZSEGID=utblprodlnk.segid

	type RecordUTBLMARSEGDT marsegdt=Db.getRecord("UTBLMARSEGDT","MARSEG=:ZMARSEG,SEGID=:ZSEGID",1)

	// Invalid market segment or segment ID
	if 'marsegdt.getMode() do Runtime.setErrMSG("UTBLPRODLNK",3685) quit:ER

	// --- Column name created for this result ID?
	type ResultSet rs=Db.select("RESULTSID","UTBLPRODRT","COLNAME=:ZCOL")

	// Result set not created for column ~p1
	if rs.isEmpty() do Runtime.setErrMSG("UTBLPRODLNK",3686,ZCOL) quit:ER

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPRODLNK utblprodlnk

	set X = utblprodlnk.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	if utblprodlnk.colname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("COLNAME", vRM) quit
	set X = utblprodlnk.marseg if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("MARSEG", vRM) quit
	set X = utblprodlnk.segid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEGID", vRM) quit
	set X = utblprodlnk.appmod if 'X.isNull(),'Db.isDefined("STBLAPPMOD","X") set vRM = $$^MSG(1485,X) do vdderr("APPMOD", vRM) quit
	set X = utblprodlnk.ldate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDATE", vRM) quit
	set X = utblprodlnk.ltime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LTIME", vRM) quit
	if utblprodlnk.luser.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LUSER", vRM) quit
	set X = utblprodlnk.mnchlvrl if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("MNCHLVRL", vRM) quit
	set X = utblprodlnk.mnchlvrs if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("MNCHLVRS", vRM) quit
	set X = utblprodlnk.resultsid if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("RESULTSID", vRM) quit
	set X = utblprodlnk.ruleid if 'X.isNull(),'Db.isDefined("UTBLPRODRL","X") set vRM = $$^MSG(1485,X) do vdderr("RULEID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODLNK","MSG",979,"UTBLPRODLNK."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLPRODLNK utblprodlnk

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TYPE").exists() set vux("TYPE") = vx("TYPE")
	if vx("COLNAME").exists() set vux("COLNAME") = vx("COLNAME")
	if vx("MARSEG").exists() set vux("MARSEG") = vx("MARSEG")
	if vx("SEGID").exists() set vux("SEGID") = vx("SEGID")
	do vkey(1) set voldkey = utblprodlnk.type_","_utblprodlnk.colname_","_utblprodlnk.marseg_","_utblprodlnk.segid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblprodlnk.type_","_utblprodlnk.colname_","_utblprodlnk.marseg_","_utblprodlnk.segid // Copy new keys into object
	type RecordUTBLPRODLNK vnewrec = utblprodlnk.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPRODLNK",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLPRODLNK utblprodlnk

	if vux("TYPE").exists() set utblprodlnk.type = vux("TYPE").piece("|",i)
	if vux("COLNAME").exists() set utblprodlnk.colname = vux("COLNAME").piece("|",i)
	if vux("MARSEG").exists() set utblprodlnk.marseg = vux("MARSEG").piece("|",i)
	if vux("SEGID").exists() set utblprodlnk.segid = vux("SEGID").piece("|",i)
	quit
