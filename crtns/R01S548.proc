R01S548	// SCA631 - Non-Replicated Transaction Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:52 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type String jourfil,timeseq,zclass(),zftype(),zmode(),zstatus()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1="ALL"
	type String VIN2="ALL"
	type String VIN3="ALL"
	type String VIN4="ALL"
	type String VIN5="ALL"
	type String VIN6="ALL"
	type String VIN7=1

	set RID="SCA631"
	set RN="Non-Replicated Transaction Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[URECLOST]DATE1|[URECLOST]DATE1:DISTINCT:NOVAL||D EXT^DBSQRY||T|Recovery Date|||||"
	set %TAB("VIN2")="|255||[URECLOST]FILE|[URECLOST]FILE:DISTINCT:NOVAL||D EXT^DBSQRY||T|Journal File|||||"
	set %TAB("VIN3")="|255||[URECL1]CLASS|zclass(||D EXT^DBSQRY||T|Server Class|||||"
	set %TAB("VIN4")="|255||[URECL1]STATUS|zstatus(||D EXT^DBSQRY||T|Recovery Status|||||"
	set %TAB("VIN5")="|255||[URECL1]ONLINE|zmode(||D EXT^DBSQRY||T|Online|||||"
	set %TAB("VIN6")="|255||[URECLOST]TRANID|[URECLOST]TRANID:DISTINCT:NOVAL||D EXT^DBSQRY||T|Transaction Sequence|||||"
	set %TAB("VIN7")="|255||[URECLOST]FTYPE|zftype(||D EXT^DBSQRY||T|File Type|||||"

	set %READ="IO/REQ,VIN1#0,VIN2#0,VIN3#0,VIN4#0,VIN5#0,VIN6#0,VIN7#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String jourfil,timeseq,zclass(),zftype(),zmode(),zstatus()
	type public String VIN1,VIN2,VIN3,VIN4,VIN5,VIN6,VIN7
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,CONAM,RID,RN,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA631",RN="Non-Replicated Transaction Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA631","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=80				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[URECLOST]SUBSEQ#2#5,[URECLOST]RECORD#12#103,[URECLOST]FTYPE#117#10"

	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[URECLOST]DATE1 "_VIN1,SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[URECLOST]FILE "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[URECL1]CLASS "_VIN3,SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[URECL1]STATUS "_VIN4,SEQ=SEQ+1
		if VIN5.get()="" set VIN5="ALL"
		if VIN5'="ALL" set DQQRY(SEQ)="[URECL1]ONLINE "_VIN5,SEQ=SEQ+1
		if VIN6.get()="" set VIN6="ALL"
		if VIN6'="ALL" set DQQRY(SEQ)="[URECLOST]TRANID "_VIN6,SEQ=SEQ+1
		if VIN7.get()="" set VIN7="ALL"
		if VIN7'="ALL" set DQQRY(SEQ)="[URECLOST]FTYPE "_VIN7,SEQ=SEQ+1
		set DQQRY(SEQ)="[URECL1]DATE1=[URECLOST]DATE1",SEQ=SEQ+1
		set DQQRY(SEQ)="[URECL1]FILE=[URECLOST]FILE",SEQ=SEQ+1
		set DQQRY(SEQ)="[URECL1]TRANID=[URECLOST]TRANID",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("URECLOST,URECL1") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC2|"_"Recovery Date"_"|VIN1|"_VIN1.get()
		set VBNRINFO("PROMPTS",2)="WC2|"_"Journal File"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC2|"_"Server Class"_"|VIN3|"_VIN3.get()
		set VBNRINFO("PROMPTS",4)="WC2|"_"Recovery Status"_"|VIN4|"_VIN4.get()
		set VBNRINFO("PROMPTS",5)="WC2|"_"Online"_"|VIN5|"_VIN5.get()
		set VBNRINFO("PROMPTS",6)="WC2|"_"Transaction Sequence"_"|VIN6|"_VIN6.get()
		set VBNRINFO("PROMPTS",7)="WC2|"_"File Type"_"|VIN7|"_VIN7.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Non-Replicated Transaction Report"
		set VBNRINFO("PGM")="R01S548"
		set VBNRINFO("RID")="SCA631"
		set VBNRINFO("TABLES")="URECLOST,URECL1"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,URECLOST]DATE1"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,URECLOST]FILE"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,URECL1]STATUS"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,URECLOST]TRANID"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,URECLOST]SUBSEQ"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,URECLOST]SUBSUB"

		set VBNRINFO("DOC",1)="Report, SCA631 ,  is used to report status of non-replicated transaction"
		set VBNRINFO("DOC",2)="processing. There are 8 items on menu of the report, Device, Recovery Date,"
		set VBNRINFO("DOC",3)="Journal Date, Journal File, Server Class, Recovery Status, Online, Transaction"
		set VBNRINFO("DOC",4)="Sequence, and File Type. "
		set VBNRINFO("DOC",5)="Recovery Date indicates date of non-replicated transaction processing.  Journal"
		set VBNRINFO("DOC",6)="File indicates extracted G.T.M journal file name used for the processing. "
		set VBNRINFO("DOC",7)="Server Class indicates Profile/Anyware server class, NMSP, MRPC, TSSP, CSIS,"
		set VBNRINFO("DOC",8)="MSQL, FSSP and ALL. Recovery Status indicates status of the recovery, failure,"
		set VBNRINFO("DOC",9)="success or review. Online indicates transaction types, character based or"
		set VBNRINFO("DOC",10)="online.  File Type indicates file definition type, primary, journal, index. To"
		set VBNRINFO("DOC",11)="display information of online transition or information of updating of global"
		set VBNRINFO("DOC",12)="without file definition, ALL option should be chosen on  File Type item.  "

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:6 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"URECLOST.DATE1,URECLOST.FILE,URECL1.STATUS,URECLOS"
	set VSELECT=VSELECT_"T.TRANID,URECLOST.SUBSEQ,URECLOST.SUBSUB,URECL1.ON"
	set VSELECT=VSELECT_"LINE,URECL1.MESSAGE,URECL1.CLASS,URECLOST.RECORD,U"
	set VSELECT=VSELECT_"RECLOST.FTYPE"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"URECLOST,URECL1",VWHERE,"URECLOST.DATE1,URECLOST.FILE,URECL1.STATUS,URECLOST.TRANID,URECLOST.SUBSEQ,URECLOST.SUBSUB","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5,vovc6
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5="",vovc6=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5,vovc6,vc6
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5,vovc6=vc6
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11
	set vc1=V.piece($C(9),1)			// URECLOST.DATE1
	set vc2=V.piece($C(9),2)			// URECLOST.FILE
	set vc3=V.piece($C(9),3)			// URECL1.STATUS
	set vc4=V.piece($C(9),4)			// URECLOST.TRANID
	set vc5=V.piece($C(9),5)			// URECLOST.SUBSEQ
	set vc6=V.piece($C(9),6)			// URECLOST.SUBSUB
	set vc7=V.piece($C(9),7)			// URECL1.ONLINE
	set vc8=V.piece($C(9),8)			// URECL1.MESSAGE
	set vc9=V.piece($C(9),9)			// URECL1.CLASS
	set vc10=V.piece($C(9),10)			// URECLOST.RECORD
	set vc11=V.piece($C(9),11)			// URECLOST.FTYPE
	quit

	// User-defined pre/post-processor code

VPREBQ	// Pre-processor (before query)

 type public Number timeseq
 type public String jourfil, zclass(),zftype(),zmode(),zstatus()

 set timeseq=""
 type ResultSet rs=Db.select("TIMESEQ","URECD")
 while rs.next() do {
	set timeseq=rs.getCol("TIMESEQ")
	set jourfil=""
	type ResultSet rs1=Db.select("JRNLFILE","URECD","TIMESEQ=:timeseq")
	while rs1.next() do {
		set jourfil=rs1.getCol("JRNLFILE")
		type RecordURECL urecl=Db.getRecord("URECL","DATE1=:timeseq,FILE=:jourfil",1)
		if urecl.status="complete" quit
		else  do ^URECREP
		}
	}
 
 set zftype(1)="Primary"
 set zftype(2)="Index"
 set zftype(3)="Journal"
 set zmode(0)="Character-Based"
 set zmode(1)="Online"
 set zstatus(0)="Success"
 set zstatus(1)="Failure"
 set zstatus(2)="Review"
 set zclass(0)="NMSP"
 set zclass(1)="TSSP"
 set zclass(2)="FSSP"
 set zclass(3)="MRPC"
 set zclass(4)="CSIS"
 set zclass(5)="MSQL"

	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1,vskp(6)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VHDG5 quit:VFMQ
	if 'vskp(6).get() do VDTL6 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(6)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5,vc6,vovc6
	type Number vb1,vb2,vb3,vb4,vb5,vb6
	set (vb1,vb2,vb3,vb4,vb5,vb6)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,VH0=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,VH0=1
	if vb4!(+vovc4'=+vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1
	if vb5!(+vovc5'=+vc5) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(6) set vs(6)=1 do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(6)=VT(6)+1
	quit

VHDG5	// Group Header
	type public String %MSKD,%TIM,CONAM,ER,IOSL,RID,RN,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,jourfil,timeseq,vc1,vc10,vc11,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate,zclass(),zftype(),zmode(),zstatus()

	quit:vh(5)  set vh(5)=1				// Print flag
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL=" "_"------------------------------------------------------------------------------------------------------------------------------------"
	do VOM
	set VL=" "_"Tran Seq: "
	set VL=VL_$J("",12-VL.length())_$J(vc4,9)
	set V=vc7,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(V,1,15)
	set VL=VL_$J("",26-VL.length())_V		// [SYSDEV,URECL1]ONLINE
	set VL=VL_$J("",47-VL.length())_"Message: "
	set VL=VL_$J("",56-VL.length())_$E(vc8,1,12)
	set VL=VL_$J("",71-VL.length())_"Class: "
	set V=vc9,VO=V do VP2 quit:VFMQ!verror.get()  set V=$E(V,1,5)
	set VL=VL_$J("",78-VL.length())_V		// [SYSDEV,URECL1]CLASS
	set VL=VL_$J("",88-VL.length())_"Status: "
	set V=vc3,VO=V do VP3 quit:VFMQ!verror.get()  set V=$E(V,1,10)
	set VL=VL_$J("",96-VL.length())_V		// [SYSDEV,URECL1]STATUS
	set VL=VL_$J("",116-VL.length())_"File Type"
	do VOM
	set VL=" "_"-----------------------------------------------------------------------------------------------------"
	do VOM
	quit

VDTL6	// Detail
	type public String %TIM,IOSL,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),jourfil,timeseq,vc1,vc10,vc11,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate,zclass(),zftype(),zmode(),zstatus()

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc5,VO=V do VP4 quit:VFMQ!verror.get()  set V=$J(V,5) set VL=" "_V
	set V=vc10,VO=V do VP5 quit:VFMQ!verror.get()  set V=$E(V,1,103)
	set VL=VL_$J("",11-VL.length())_V		// [SYSDEV,URECLOST]RECORD
	set V=vc11,VO=V do VP6 quit:VFMQ!verror.get()  set V=$E(V,1,10)
	set VL=VL_$J("",116-VL.length())_V		// [SYSDEV,URECLOST]FTYPE
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CONAM,RID,RN,VL,jourfil,timeseq,vc1,vc10,vc11,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate,zclass(),zftype(),zmode(),zstatus()
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+5,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL=" "_"Non-Replicated Transaction Recovery Date: "
	set VL=VL_$J("",43-VL.length())_$J($$DAT^%ZM(vc1),12)
	set VL=VL_$J("",60-VL.length())_"Journal File: "
	set VL=VL_$J("",74-VL.length())_$E(vc2,1,30)
	do VOM
	set VL=" "_"==============================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,URECL1]ONLINE

 type public String FS,SAVEV,STYPE,SPFID,ONLINE,V,zmode()

 // Processing mode
 set ONLINE=V,V=zmode(V)
 set SAVEV=""
 set STYPE=""
 set SPFID=""
 set FS=""

	quit

VP2	// Column pre-processor - [SYSDEV,URECL1]CLASS

 type public Boolean ONLINE
 type public String V,zclass
 
 if ONLINE=1 set V=zclass(V).get() quit
 set V=""

	quit

VP3	// Column pre-processor - [SYSDEV,URECL1]STATUS

 type public String V,zstatus()

 // change status code to description
 set V=zstatus(V).get()
	quit

VP4	// Column pre-processor - [SYSDEV,URECLOST]SUBSEQ

 type public Boolean ONLINE
 type public Number M1
 type public String SAVEV,V
 
 if ONLINE set V=""
 if V=SAVEV set V="",M1=0
 if 'V.isNull() set SAVEV=V,M1=1

	quit

VP5	// Column pre-processor - [SYSDEV,URECLOST]RECORD

 type public String T,V,var

 zsh "v":var
 set T=var("V",1).piece("=",2,9999)
 if T["$CHAR" set V=var("V",1).piece("=",2,9999)
	quit

VP6	// Column pre-processor - [SYSDEV,URECLOST]FTYPE

 type public Number M1
 type public Boolean ONLINE
 type public String V,zftype

 if ONLINE=0 do {
 	if M1.get()=0 set V="" quit
 	if V.get()="" set V="" quit
	set V=zftype(V)
 	}
 else  set V=""

	quit
