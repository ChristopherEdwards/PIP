ZUCTZ2P()	// PSL Test Set, test function signatures for method with 2 parameters
	/*
	ORIG: Frans S.C. Witte - 2006-08-16
	DESC: PSL Test Set, test function signatures for method with 2 parameters

	---- Comments ----------------------------------------------------------
	
	About absent, empty, and non-empty literal values
	=================================================
	Every mtdNp0() subroutine contains a number of patterns to test the
	compile time behavior of different combinations of
	A - Absent parameter
	E - Empty parameter or source
	V - Non-empty parameter or source value
	For a method with N paramters this will lead to 3**N*2 possible
	combinations of literals. In most cases it is not needed to include all
	these combinations. For example if the generated code will call it's own
	implementation of R0.method(R1,R2), then it sufficient to validate that
	A and E end up correctly in the generated code, which can be tested in
	a subroutine that deal with a constant for that parameter.

	To support testing absent and empty combinations, each subroutine that
	deals with onr or more constansts will contain 3 signatures:
	- a signature in which all constants are absent (and C0 empty)
	- a signature in which all constants are empty
	- a signature in which all constants have a value.
	Combinations of Absent, Empty, and Value will not be included, but can
	easily be derived from the three signatures that are present.	
	
	---- Revision History --------------------------------------------------
	2006-08-16, Frans S.C. Witte - CR 22843
		Initial implementation
	*/
	quit

	// #####################################################################
	// Test function signatures, method with 2 parameters
	// #####################################################################

	// =====================================================================
public mtd2p()	// Validate TestClass.method2p(P1Class,P2Class)
	/* ---------------------------------------------------------------------
	Procedure that validates code relating to TestClass.method2p().
	Validation values (see ZUCT for meaning of Cn and Rn):
	C0/R0: "", "P0value", "P0wrong"
	C1/R1: absent, "", "P1value"
	C2/R2: absent, "", "P2value"
	calls:
	* public mtd2p()		// test TestClass.method2p( P1Class P1, P2Class P2)
	* public mtd2p0()		// test C0.method2p(C1,C2)
	* public mtd2p1(R0)		// test R0.method2p(C1,C2)
	* public mtd2p2(R1)		// test C0.method2p(R1,C2)
	* public mtd2p3(R2)		// test C0.method2p(C1,R2)
	* public mtd2p4(R0,R1)		// test R0.method2p(R1,C2)
	* public mtd2p5(R0,R2)		// test R0.method2p(C1,R2)
	* public mtd2p6(R1,R2)		// test C0.method2p(R1,R2)
	* public mtd2p7(R0,R1,R2)	// test R0.method2p(R1,R2)
	*/
	type Primitive R0
	type Primitive R1
	type Primitive R2

	do mtd2p0()
	for R0 = "", "P0value" do {
		do mtd2p1( R0)
		for R1 = "", "P1value" do {
			if R0.isNull() do mtd2p2(R1)
			do mtd2p4(R0,R1)
			for R2 = "", "P2value" do {
				if R0.isNull(),R1.isNull() do mtd2p3(R2)
				if R1.isNull() do mtd2p5(R0,R2)
				if R0.isNull() do mtd2p6(R1,R2)
				do mtd2p7(R0,R1,R2)
			}
		}
	}
	quit

	// =====================================================================
public mtd2p0()
	// validate C0.method2p(C1,C2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method2p()	// C0="", C1 absent, C2 absent
	write "mtd2p0().EAA:"""".method2p()="_rRes,!

	set rRes = ({TestClass}"").method2p("","")	// C0="", C1="", C2=""
	write "mtd2p0().EEE:"""".method2p("""","""")="_rRes,!

	set rRes = ({TestClass}"P0value").method2p("P1value","P2value")	// C0="P0value", C1="P1value", C2="P2value"
	write "mtd2p0().VVV:""P0value"".method2p(""P1value"",""P2value"")="_rRes,!

	================ end commented out ================ */
	quit

	// =====================================================================
public mtd2p1( Primitive R0)
	// validate R0.method2p(C1,C2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method2p()			// C1 absent, C2 absent
	write "mtd2p1(R0).AA:<"_R0_">.method2p()="_rRes,!

	set rRes = R0.method2p("","")			// C1="", C2=""
	write "mtd2p1(R0).EE:<"_R0_">.method2p("""","""")="_rRes,!

	set rRes = R0.method2p("P1value","P2value")	// C1="P1value", C2="P2value"
	write "mtd2p1(R0).VV:<"_R0_">.method2p(""P1value"",""P2value"")="_rRes,!

	set rRes = R0.method2p("P1value","P2wrong")	// C1="P1value", C2="P2wrong"
	write "mtd2p1(R0).VW:<"_R0_">.method2p(""P1value"",""P2wrong"")="_rRes,!
	================ end commented out ================ */
	quit


	// =====================================================================
public mtd2p2( Primitive R1)
	// =====================================================================
	// validate C0.method2p(R1,C2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method2p( R1)	// C0="", C2 absent
	write "mtd2p2(R1).EA:"""".method2p(<"_R1_">)="_rRes,!

	set rRes = ({TestClass}"").method2p( R1, "")	// C0="", C2=""
	write "mtd2p2(R1).EE:"""".method2p(<"_R1_">,"""")="_rRes,!

	set rRes = ({TestClass}"P0value").method2p( R1, "P2value")	// C0="P0value", C2="P2value"
	write "mtd2p2(R1).VV:""P0value"".method2p(<"_R1_">,""P2value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd2p3( Primitive R2)
	// =====================================================================
	// validate C0.method2p(C1,R2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method2p( , R2)	// C0="", C1 absent
	write "mtd2p3(R2).EA:"""".method2p(,<"_R2_">)="_rRes,!

	set rRes = ({TestClass}"").method2p("", R2)	// C0="", C1=""
	write "mtd2p3(R2).EE:"""".method2p("""",<"_R2_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method2p( "P1value", R2)	// C0="P0value", C1="P1value"
	write "mtd2p3(R2).VV:""P0value"".method2p(""P1value"",<"_R2_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd2p4( Primitive R0, Primitive R1)
	// =====================================================================
	// validate R0.method2p(R1,C2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method2p( R1)	// C2 absent
	write "mtd2p4(R0,R1).A:<"_R0_">.method2p(<"_R1_">)="_rRes,!

	set rRes = R0.method2p( R1, "")	// C2=""
	write "mtd2p4(R0,R1).E:<"_R0_">.method2p(<"_R1_">,"""")="_rRes,!

	set rRes = R0.method2p( R1, "P2value")	// C2="P2value"
	write "mtd2p4(R0,R1).V:<"_R0_">.method2p(<"_R1_">,""P2value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd2p5( Primitive R0, Primitive R2)
	// =====================================================================
	// validate R0.method2p(C1,R2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method2p( , R2)	// C1 absent
	write "mtd2p5(R0,R2).A:<"_R0_">.method2p(,<"_R2_">)="_rRes,!

	set rRes = R0.method2p( "", R2)	// C1=""
	write "mtd2p5(R0,R2).E:<"_R0_">.method2p("""",<"_R2_">)="_rRes,!

	set rRes = R0.method2p( "P1value", R2)	// C1="P1value"
	write "mtd2p5(R0,R2).V:<"_R0_">.method2p(""P1value"",<"_R2_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd2p6( Primitive R1, Primitive R2)
	// =====================================================================
	// validate C0.method2p(R1,R2)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method2p( R1, R2)	// C0=""
	write "mtd2p6(R1,R2).E:"""".method2p(<"_R1_">,<"_R2_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method2p( R1, R2)	// C0="P0value"
	write "mtd2p6(R1,R2).V:""P0value"".method2p(<"_R1_">,<"_R2_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd2p7( Primitive R0, Primitive R1, Primitive R2)
	// =====================================================================
	// validate R0.method2p(R1,R2) -- 1 "combination"
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method2p( R1, R2)
	write "mtd2p7(R0,R1,R2):<"_R0_">.method2p(<"_R1_">,<"_R2_">)="_rRes,!
	================ end commented out ================ */
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60507^25753^Frans S.C. Witte^8381"	// Signature - LTD^TIME^USER^SIZE
