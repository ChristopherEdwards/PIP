DTJFILE(RecordDTJ dtj, String vpar, Boolean vparNorm) // DTJ - Daily Transaction Journal Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (41)             10/04/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dtj.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(dtj,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dtj,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJD").exists()!vx("DATETIME").exists()!vx("CID").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DTJ",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DTJ","TJD = :dtj.tjd and DATETIME = :dtj.datetime and CID = :dtj.cid and TSEQ = :dtj.tseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJD
	type public String DATETIME
	type public String CID
	type public String TSEQ

	type RecordDTJ dtj = Db.getRecord("DTJ","TJD=:TJD,DATETIME=:DATETIME,CID=:CID,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do dtj.setMode(2)

		do DTJFILE(dtj,vpar)
	}
	else  do VINDEX(dtj)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDTJ dtj

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DTJ","TJD = :dtj.tjd and DATETIME = :dtj.datetime and CID = :dtj.cid and TSEQ = :dtj.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dtj))  S ^DTJ(vobj(dtj,-3),vobj(dtj,-4),vobj(dtj,-5),vobj(dtj,-6))=vobj(dtj)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.dtj) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDTJ dtj

	if vpar["/INDEX/" do VINDEX(.dtj)                      // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DTJ(vobj(dtj,-3),vobj(dtj,-4),vobj(dtj,-5),vobj(dtj,-6)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordDTJ dtj

	// Type local variables for access keys for defaults
	type public String TJD
	type public String DATETIME
	type public String CID
	type public String TSEQ

	if dtj.cdt.isNull() set dtj.cdt = +$H                  // cdt
	if dtj.time.isNull() set dtj.time = $P($H,",",2)       // time
	quit


vreqn // Validate required data items

	type public RecordDTJ dtj

	if dtj.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDTJ dtj

	if dtj.tjd.isNull() do vreqerr("TJD") quit
	if dtj.datetime.isNull() do vreqerr("DATETIME") quit
	if dtj.cid.isNull() do vreqerr("CID") quit
	if dtj.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("TIME").exists(),dtj.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DTJ","MSG",1767,"DTJ."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDTJ dtj

	set X = dtj.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = dtj.datetime if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("DATETIME", vRM) quit
	set X = dtj.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = dtj.tseq if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	if dtj.bcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BCRCD", vRM) quit
	set X = dtj.ben if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BEN", vRM) quit
	set X = dtj.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	set X = dtj.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dtj.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
	set X = dtj.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	set X = dtj.chktyp if 'X.isNull(),'Db.isDefined("STBLCHKTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CHKTYP", vRM) quit
	set X = dtj.cmpsav if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.CMPSAV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if dtj.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	set X = dtj.custcd if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CUSTCD", vRM) quit
	set X = dtj.dir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.DIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dtj.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = dtj.endbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.ENDBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dtj.etc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("ETC", vRM) quit
	set X = dtj.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
	if dtj.ident.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDENT", vRM) quit
	if dtj.itc.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ITC", vRM) quit
	if dtj.msd.length()>120 set vRM = $$^MSG(1076,120) do vdderr("MSD", vRM) quit
	set X = dtj.mult if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MULT", vRM) quit
	set X = dtj.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dtj.rty if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RTY", vRM) quit
	set X = dtj.spr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
	if dtj.summ.length()>50 set vRM = $$^MSG(1076,50) do vdderr("SUMM", vRM) quit
	set X = dtj.sysbase if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.SYSBASE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if dtj.tamt.length()>60 set vRM = $$^MSG(1076,60) do vdderr("TAMT", vRM) quit
	if dtj.tcmt.length()>510 set vRM = $$^MSG(1076,510) do vdderr("TCMT", vRM) quit
	set X = dtj.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if dtj.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	set X = dtj.trc if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("TRC", vRM) quit
	set X = dtj.tresref if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("TRESREF", vRM) quit
	set X = dtj.tsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DTJ.TSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if dtj.tso.length()>300 set vRM = $$^MSG(1076,300) do vdderr("TSO", vRM) quit
	set X = dtj.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	if dtj.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	set X = dtj.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	if dtj.xhs16.length()>80 set vRM = $$^MSG(1076,80) do vdderr("XHS16", vRM) quit
	if dtj.xpdo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("XPDO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DTJ","MSG",979,"DTJ."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordDTJ dtj) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.dtj)

	quit
	

vi1(RecordDTJ dtj) // Maintain XDTJ index entries (DTJ Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dtj.tjd
	type String v2 = dtj.cid
	type String v3 = dtj.tseq
	type String v4 = dtj.datetime

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^DTJ(vobj(dtj,-3),vobj(dtj,-4),vobj(dtj,-5),vobj(dtj,-6)))#2,'$D(^XDTJ(v1,v2,v3,v4)) do vidxerr("XDTJ")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XDTJ(v1,v2,v3,v4)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XDTJ(v1,v2,v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DTJ")

	while ds.next() do {
		type RecordDTJ dtj=ds.getRecord("DTJ")
		if vlist.contains("VINDEX") do VINDEX(.dtj) quit
		if vlist.contains("XDTJ") do vi1(.dtj)
	}

	quit


public VIDXBLD1(RecordDTJ dtj, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.dtj) quit
	if vlist.contains("XDTJ") do vi1(.dtj)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DTJ","MSG",1225,"DTJ."_di)

	quit


vkchged // Access key changed

	type public RecordDTJ dtj

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("DATETIME").exists() set vux("DATETIME") = vx("DATETIME")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = dtj.tjd_","_dtj.datetime_","_dtj.cid_","_dtj.tseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dtj.tjd_","_dtj.datetime_","_dtj.cid_","_dtj.tseq // Copy new keys into object
	type RecordDTJ vnewrec = dtj.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DTJ",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDTJ dtj

	if vux("TJD").exists() set dtj.tjd = vux("TJD").piece("|",i)
	if vux("DATETIME").exists() set dtj.datetime = vux("DATETIME").piece("|",i)
	if vux("CID").exists() set dtj.cid = vux("CID").piece("|",i)
	if vux("TSEQ").exists() set dtj.tseq = vux("TSEQ").piece("|",i)
	quit

VIDXPGM()	quit "DTJFILE"	// Location of index program

