public AUTRN	//;PBS - CRT - V2.0 - Tran Code Authorization
  	/*
	
	       ORIG:  Tom Locke (2424) - 08/05/86
	
	  ---- Revision History ------------------------------------------------

	   03/22/05 - KELLYP - CR 13667
	   	      Rewrote and documented filing sections to be more concise
	   	      and to behave better.  Also replaced setting of TRN.BNR
	   	      master field with setting of TRN.BOOK, TRN.NOBOOK, and 
	   	      TRN.REVERSAL subfields.  Also removed pre-2003 revision
	   	      history.

	   01/11/05 - KELLYP - CR 10372
	   	      Reconverted procedure to resolve issues with prior
	   	      conversion and to adhere to current PSL standards.
	
	  ------------------------------------------------------------------------	
	
	*/

	do UPD 
	
	quit

public EXT	// Entry point with ETC already defined (ie: new tran code setup)

	do UPD
	
	quit


public UPD	// Transaction code authorization update

	do INIT(1)

	quit 


public INQ	// Transaction code authorization inquiry

	do INIT(2) 

	quit 

	
INIT(Number %ProcessMode)   	// Init Variables

	type public Boolean ER
	type public String %UCLS

	type Boolean SEC

	set ER=0
	
	type RecordSCAU0 scau0=Db.getRecord("SCAU0","UCLS=:%UCLS")
	set SEC=scau0.secucls

	do VPG00

	quit
	

VPG00	// Set-up

	type public String ETC

	type String %NOPRMT,OLNTB,%READ,%TAB(),VFMQ

	set %TAB("ETC")=".TRN1/HLP=[TRN]ETC/TBL=[TRN]/XPP=D PP00^AUTRN"
	if %ProcessMode=2 set %TAB("IO")=$$IO^SCATAB($I)
	
	set %READ="@@%FN,,,ETC/REQ" 
	set %NOPRMT="N"
	if %ProcessMode=2 set %READ=%READ_",IO/REQ"

	do ^UTLREAD 

	if VFMQ="Q" quit

	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)

	type RecordTRNAUT trnaut()

	do VPG01(.trnaut(),.trn)

	quit 
	
	
VPG01(RecordTRNAUT trnaut(),RecordTRN trn)	// Authorize Tran code

	type public Boolean SEC
	type public String ER,ETC,IO,VFMQ
	
	type Boolean ALL,SECUCLS
	type Number I,%REPEAT
	type String UCLS
	
	if %ProcessMode=2,IO'=$I do OPEN^SCAIO 
	if ER set VFMQ="Q" quit 
	
	set ALL=0
	set I=0

 	if Db.isDefined("TRNAUT","ETC=:ETC,UCLS='*'") set ALL=1

	type ResultSet rs=Db.select("UCLS,SECUCLS","SCAU0")
 	while rs.next() do {
		set UCLS=rs.getCol("UCLS")
 		set SECUCLS=rs.getCol("SECUCLS")

		/* 
		 Non-secure userclasses may not modify a secure
		 userclass' permissions, so exclude those records
		 from the screen.
		*/
 		if 'SEC,SECUCLS quit
 		
		set I=I+1
		set trnaut(I)=Db.getRecord("TRNAUT","ETC=:ETC,UCLS=:UCLS",1)
		if trnaut(I).getMode() quit
		if ALL do {
			set trnaut(I).book=1
			set trnaut(I).nobook=1
			set trnaut(I).reversal=1
			}
		else  do {
			set trnaut(I).book=0
			set trnaut(I).nobook=0
			set trnaut(I).reversal=0
			}
 		}
 		
	if %ProcessMode=2 set %REPEAT=15

	do DRV^USID(%ProcessMode,"AUTRN",.trnaut(),.trn)

	if "DFQ"[VFMQ do VER(.trnaut(),.trn)

	quit 
	

PP00	// Protect lower case tran codes

	type public Number %OSAVE
	type public String ET,X

	if %OSAVE=2!(%OSAVE=4) quit 

	if X?.E1L.E set ET="TRNPROT" do ERR

	quit 
	

VER(RecordTRNAUT trnaut(),RecordTRN trn)	// Verify and process

	type public Boolean ER
	type public String VFMQ

	if ER!(VFMQ="Q")!(%ProcessMode=2) do END quit

	do FILE(.trnaut(),.trn)

	do END

	quit
	

FILE(RecordTRNAUT trnaut(),RecordTRN trn) // File data

	type public Boolean ALL,SEC
	type public String ETC

	type Number I

	if ALL do { quit
		
		// Authorize all userclasses (secure & non-secure)
		if SEC do VALL quit
		
		// Authorize all non-secure userclasses
		do UNSALL(.trnaut())
		
		// Possibly authorize all userclasses
		do AUTHALL
		}

	if Db.isDefined("TRNAUT","ETC=:ETC,UCLS='*'") do {

		/* User did not opt to authorize all userclasses, so
		the "*" record in TRNAUT needs to be deleted */
		do Db.delete("TRNAUT","ETC=:ETC AND UCLS='*'")

		if 'SEC do {
			/*
			 This section of code is executed when a "*" TRNAUT
			 record previously existed and a non-secure userclass
			 has indicated that not all non-secure userclasses
			 have full permissions (book/no book/reversal) for the
			 transaction code.  In this case, individual TRNAUT
			 records for secure userclasses need to be added because
			 they didn't previously exist and because the non-secure
			 userclass doesn't have access to them on the screen.
			*/

			type String UCLS
			
			type DbSet ds=Db.selectDbSet("SCAU0")

			while ds.next() do {
				type RecordSCAU0 scau0=ds.getRecord()
				set UCLS=scau0.ucls
				if scau0.secucls do {
					type RecordTRNAUT trnaut=Db.getRecord("TRNAUT","ETC=:ETC,UCLS=:UCLS",1)
	
					set trnaut.book=1
					set trnaut.nobook=1
					set trnaut.reversal=1
	
					do trnaut.save()
					}
				}
			}
		}
	
	set I=0
	for  set I=trnaut(I).order() quit:I.isNull()  do trnaut(I).save()

	// Possibly authorize all userclasses
	do AUTHALL
	
	quit
	

VALL 	// Validate all userclasses
	/*
	 This section is called when the userclass of the user authorizing
	 the transaction code is a secure userclass and they have chosen
	 the option to enable all permissions (book/no book/reversal) for
	 all userclasses.  It is also called when a non-secure userclass
	 has updated the non-secure userclass' permissions in such a way
	 that all userclasses (both secure and non-secure) have full
	 permissions for the transaction code.  In these cases, all 
	 existing TRNAUT records are deleted and a single "*" (star) record 
	 is added to the TRNAUT table.
	*/

	type Public String ETC

	do Db.delete("TRNAUT","ETC=:ETC")

	type RecordTRNAUT trnaut=Db.getRecord("TRNAUT","ETC=:ETC,UCLS='*'",1)

	set trnaut.book=1
	set trnaut.nobook=1
	set trnaut.reversal=1

	do trnaut.save()

	quit
	

UNSALL(RecordTRNAUT trnaut())	// Validate all unsecured usereclasses
	/*
	 This section is called when the userclass of the user authorizing
	 the transaction code is a non-secure userclass and they have chosen
	 the option to enable all permissions (book/no book/reversal) for
	 all userclasses.  In this case, existing TRNAUT records for only
	 non-secure userclasses are updated with full BNR permissions.  The
	 TRNAUT records that already exist for secure userclasses are not
	 modified as they were not included on the screen for modification.
	 (Non-secure userclasses cannot modify secure userclass' permissions)
	*/
	
	type Number I
	
	set I=0
	for  set I=trnaut(I).order() quit:I.isNull()  do {
		set trnaut(I).book=1
		set trnaut(I).nobook=1
		set trnaut(I).reversal=1
		do trnaut(I).save()
		}
	
	quit 


AUTHALL	// Possibly mark all userclasses as authorized
	/*
	 This section collates through the TRNAUT table to determine if
	 all userclasses in SCAU0 are individually authorized for full
	 permissions (book/no book/reversal) on the transaction code.
	 In this case, all existing TRNAUT records for this transaction
	 code are deleted and a single "*" (star) record is added to the 
	 TRNAUT table.
	*/

	type public String ETC

	type Boolean FL
	type String UCLS
	
	set UCLS="" 
	set FL=1
	
	type ResultSet rs=Db.select("UCLS","SCAU0",,"UCLS")
	while rs.next() do { quit:FL=0
		
		set UCLS=rs.getCol(1)
		
		type RecordTRNAUT trnaut=Db.getRecord("TRNAUT","ETC=:ETC,UCLS=:UCLS",1)
		
		if (trnaut.getMode()=0)!(trnaut.bnr'=111) set FL=0
		}

	if FL do VALL

	quit


END	// End of processing

	type public String ER,ETC,RM,VFMQ

	kill ETC

	if ER!(%ProcessMode=2)!(%ProcessMode=4) quit 
	
	if VFMQ="Q" do {

		// Transaction code authorization not created
		if %ProcessMode=0 set RM=$$^MSG(2688) quit    

		// Transaction code authorization not modified
		if %ProcessMode=1 set RM=$$^MSG(2690) quit    

		// Transaction code authorization not deleted
		set RM=$$^MSG(2689)                   
		}
	else  do {

		// Transaction code authorization created
		if %ProcessMode=0 set RM=$$^MSG(2685) quit    

		// Transaction code authorization modified
		if %ProcessMode=1 set RM=$$^MSG(2687) quit    

		// Transaction code authorization deleted
		set RM=$$^MSG(2686)                   
		}

	set ER="W"

	quit 

	
ERR	// Error occurred
	type public Boolean ER

	set ER=1

	do ^UTLERR	

	quit

vSIG()	quit "59981^56589^Pat Kelly^7554"	// Signature - LTD^TIME^USER^SIZE
