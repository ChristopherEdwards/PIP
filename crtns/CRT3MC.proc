CRT3MC
	/*
	ORIG: Vitaliy Antonov - 1/22/2002
        DESC: Multi-Currency field post processors
        PROCEDURE ID: CRT3MC

	Contains post processors for amount, Rate

	DCRCD    - System base currency code
	CRCDBASE - Screen base currency code
	CRCD     - Transaction currency code (This sequence)
	DFTSEQ   - Sequence to default transaction amount
	BAMT     - The base equivalent of the transaction
		amount, it is the same as the transaction
		amount if CRCD=CRCDBASE, otherwise it is
		exchange amount.

	If the AMT is in the screen base currency, (CRCD=CRCDBASE) set
	the BAMT=AMT & BASE=1.  Otherwise, set the BAMT=EXCAMT & BASE=0

	---- Revision History-------------------------------------------------

	12/02/03 - CARROLLJ - CR7239
		Modified EXCAMT section to remove use of crcd variable twice.

	06/16/03 - CARROLLJ - 51349
		Modified EXCAMT section to remove the use of the CC array.

	1/22/2002 - Vitaliy Antonov - 43583
		Converted To PSL.
		
	02/02/2000 - GRAY - 32507
		Removed code no longer needed due to the Elimination of
		Teller/Branch Character Interface.  Also, removed old
		revision history.

	------------------------------------------------------------------------
	*/
	quit


public	RATE(RecordTTX ttx(),ETC)
	/* Default rate from rate table if different as default
	ARGUMENTS:
		. ttx()	Array of TTX objects	/TYP=RecordTTX/REQ=0
		. ETC	Transaction code	/TYP=T/MECH=VAL/REQ=0

	Global Variables used in this subroutine:
		AMT,BASE,CRCDBASE,CRCD,ETC,EXCAMT,ITC,R8TYP,MULTIPLY
	*/
	new bsecsh,BSEAMT,cshseq,CRFLG,ETC1,scurflg,Y
	
	// Base currency cash, secondary currency cash flags (0=No, 1=Yes)
	// eg:  00 = Base non-cash, secondary non-cash
	
	set BSEAMT=BASE
	if 'AMT set BSEAMT=1

	set EXCAMT=0 
	set R8TYP=1 

	// Find out if there is a cash transaction in base currency
	set cshseq="" 
	set bsecsh=0
	
	if '$D(ttx) set bsecsh=$$TRANTYP(ETC)="CASH"
	
	for  set cshseq=$O(ttx(cshseq)) quit:cshseq=""!bsecsh  do {
		if ttx(cshseq).crcd'=CRCDBASE quit 
		if $$TRANTYP(ttx(cshseq).etc)="CASH" set bsecsh=1
		}
	set bsecsh=$$TRANTYP(ETC)="CASH"
	
	//Secondary currency cash flag
	set scurflg=bsecsh_($$TRANTYP(ETC)="CASH")
	
	set CRFLG=$E(ITC)			//Credit Transaction flag

	//Check allocation
	if Db.isDefined("TRN","ETC=:ETC") do {
		type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
		if trn.trntyp=3 set CRFLG='CRFLG
		}
 
 	set CCODE=$$CCODE(.ttx())
	
	set SAVRAT=""
	if RATE'="" set SAVRAT=RATE
	
	//Even if the user modified the rate, we still need to call this
	//utility to return MULTIPLY.

	do EXC^CRCDUTL(CRCDBASE,CRCD,AMT,.BSEAMT,'CRFLG,scurflg,+CCODE,%EffectiveDate,R8TYP)
	if SAVRAT'="" set RATE=SAVRAT
	if ER quit 
	
	if BASE set BAMT=AMT set AMT=$$^SCARND(EXCAMT,0,"",CRCDBASE)
	else  set BAMT=$$^SCARND(EXCAMT,0,"",CRCDBASE)
	 
	quit  //RATE
	

CCODE(RecordTTX ttx())
	/* Determine the customer code from the first transaction 
	on the screen if this is miscellaneous (ie. CK, CI, etc)
	
	Global Variables used in this subroutine: ETC,CCODE
	*/
	new cctmp,custcd,seq,TRNCLS

	if '$D(ttx) quit +$G(CCODE)	// No TR array

	// CCODE returned in account load
	if Db.isDefined("TRN","ETC=:ETC") do {
		type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
		set TRNCLS=trn.cls
		}
	else  set TRNCLS=""
	if "DL"[TRNCLS quit +$G(CCODE)
	
	// Misc. trans get CCODE from 1st record
	set seq=""
	set custcd=""
		
	set cctmp=+$G(CCODE)
	
	for  set seq=$O(ttx(seq)) quit:seq=""!(custcd'="")  do { set CCODE=custcd
		new ETC,CLS,TRNCLS
		set ETC=ttx(seq).etc if ETC="" quit	// External Transaction Code
		if Db.isDefined("TRN","ETC=:ETC") do {
			type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
			set TRNCLS=trn.cls
			}
		if "DL"[TRNCLS quit
		set custcd=+ttx(seq).custcd		// Customer Code
		}
	
	if CCODE="" set CCODE=+$G(cctmp)
	quit +CCODE
	

public	EXCAMT(BSE,SEC,RATE,BSEAMT,NORND) // Currency exchange
	// Global Variables used in this subroutine: V,CC(),CB,CS

	new CMP,crcd
	
	if 'RATE set RATE=1
	if $G(V) do {
		set diff=AMT-V
		if diff<0 set diff=-diff
		}
	if BSE=SEC set RATE="" set MULTIPLY="" set BAMT=$S(V&(diff<.01):V,1:AMT) quit 
	
	// Determine currency used for rounding/decimal precision
	set crcd=$S(BSEAMT:SEC,1:BSE)
	
	/* If the screen base currency is the system currency, use it
	   Otherwise, if the secondary currency is the system, use it */
	if BSE=%SystemCurrency
	else  if SEC=%SystemCurrency set z=SEC set SEC=BSE set BSE=z set BSEAMT='BSEAMT
	/* Otherwise, if either currency is a system currency equivalent,
	   the base is the currency which is a system equivalent.  */

	Type RecordCRCD crcd1=Db.getRecord("CRCD","CO=:%CompanyName,CRCD=:BSE")
	else  if crcd1.sysceq set CB=BSE set CS=SEC
	else  set CB=SEC set CS=BSE set BSEAMT='BSEAMT
	
	quit:$G(RATE)="" 
	
	if MULTIPLY set CMP=AMT*RATE
	else  set CMP=AMT/RATE
	
	if '$G(NORND) set EXCAMT=$$^SCARND(CMP,0,"",crcd)
	else  set EXCAMT=CMP
	
	if BASE set BAMT=AMT quit 
	set BAMT=EXCAMT quit 
	

public	TRANTYP(ETC)
	/* Return transaction type from a list of choices

	ARGUMETS:
		. ETC	TRansaction Code 		/TYP=T/REQ/MECH=VALE
	RETURNS:
		. $$	Transaction type - literal	/TYP=T
	EXAMPLE:
		if $$TRANTYP^CRT3MC(ETC)="CASH" do ....
	*/

	new RETURN
	set RETURN=""
	if Db.isDefined("TRN","ETC=:ETC") do {
		type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
		if trn.trntyp=1 set RETURN="CASH"
		else  if trn.trntyp=2 set RETURN="CHECK"
		}

	quit RETURN
	

public TTSBE(RecordTTX ttx())
	/*  Transaction Time Sytem Base Equivalent if the rate is modified.
	
	This code determines the transaction time system base equivalent 
	and/or defines the transaction time system base equivalent rate when 
	the rate is modified on the teller posting screen.

	Global Variables used in this subroutine: AMT,SBERT,RATE
	*/

	// TRANSACTION TIME SYSTEM BASE EQUIVALENT RATE
	if '$D(ttx) set SBERT=RATE quit
	new CUR,CAMT,seq,CRCD
	set seq=""
	for  set seq=$O(ttx(seq)) quit:seq=""  do {
		set CUR=ttx(seq).crcd		// Currency
		set CAMT=ttx(seq).tamt		// Currency Transaction Amount
		set CRCD=ttx(seq).bcrcd		// Screen Base Currency
		if CUR="" set CUR=%SystemCurrency 
		if CRCD="" set CRCD=%SystemCurrency 
	
		// 1st part of transaction is foreign currency and defaulted 2nd part is system base currency
		if $G(CAMT)="",CUR'=%SystemCurrency set ttx(seq).sysbase=$G(AMT) set SBERT=RATE quit
	
		// 1st part of transaction system base currency and defaulted 2nd part is foreign currency
		if $G(CAMT)="",CUR=%SystemCurrency,MULTIPLY set ttx(seq).sysbase=$$^SCARND(AMT*RATE,0,"",CUR) set SBERT=RATE quit
		if $G(CAMT)="",CUR=%SystemCurrency,'MULTIPLY set ttx(seq).sysbase=$$^SCARND(AMT/RATE,0,"",CUR) set SBERT=RATE quit
	
		// 1st part of transaction is system base currency 2nd part is foreign currency and defaulted
		if CUR=""!(CUR=%SystemCurrency) set ttx(seq).sysbase=CAMT set SBERT=RATE quit      // System Base Currency Equivalent
	
		// Both parts of transaction are foreign currencies
		if CUR'=CRCD,CRCD'=%SystemCurrency do { quit 
			set ttx(seq).sysbase=$$SBASE^TTXOFST(.ttx(),seq,CAMT,CUR,CUR)
			set BAMT=$G(EXCAMT)
			}
	
		// 1st part of transaction is foreign currency 2nd part is system base currency and defaulted
		if MULTIPLY set ttx(seq).sysbase=$$^SCARND(CAMT*RATE,0,"",CUR) quit
		if 'MULTIPLY set ttx(seq).sysbase=$$^SCARND(CAMT/RATE,0,"",CUR) quit
		}
	quit 

vSIG()	quit "59886^43500^Sanchez SCM Administrator^7043"	// Signature - LTD^TIME^USER^SIZE
