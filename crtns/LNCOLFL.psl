LNCOLFL(RecordLNCOL lncol, String vpar, Boolean vparNorm) // LNCOL - Loan Collateral Records Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	// Trigger Definition (6)                      10/27/2005
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lncol.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lncol,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lncol,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lncol.cid
	type String COLL = lncol.coll

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("COLL").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNCOL",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNCOL","CID = :lncol.cid and COLL = :lncol.coll") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String COLL

	type RecordLNCOL lncol = Db.getRecord("LNCOL","CID=:CID,COLL=:COLL")
	if (%ProcessMode = 2) do {
		do lncol.setMode(2)

		do LNCOLFL(lncol,vpar)
	}
	else  do VINDEX(lncol)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNCOL lncol

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNCOL","CID = :lncol.cid and COLL = :lncol.coll") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lncol)) S ^ACN(vobj(lncol,-3),80,vobj(lncol,-4))=vobj(lncol)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lncol)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lncol) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNCOL lncol

	if vpar["/INDEX/" do VINDEX(.lncol)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lncol)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(lncol,-3),80,vobj(lncol,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNCOL lncol

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNCOL lncol

	if lncol.cid.isNull() do vreqerr("CID") quit
	if lncol.coll.isNull() do vreqerr("COLL") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCOL","MSG",1767,"LNCOL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNCOL lncol
	if 'lncol.cid.isNull() set vfkey("^ACN("_""""_lncol.cid_""""_","_50_")")="LNCOL(CID) -> LN"
	if 'lncol.coll.isNull() set vfkey("^COL("_""""_lncol.coll_""""_","_2_")")="LNCOL(COLL) -> COL"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNCOL lncol
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lncol.cid") set vERRMSG = $$^MSG(8563,"LNCOL(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("COL",":lncol.coll") set vERRMSG = $$^MSG(8563,"LNCOL(COLL) -> COL") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("FPLDG").exists()!vx("PCTPLDG").exists()!vx("MAXPLDG").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNCOL lncol
	if vx("").order().isNull() do AUDIT^UCUTILN(lncol,.vx(),1,"|") quit
	if vx("FPLDG").exists()!vx("PCTPLDG").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lncol,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - After Delete Loan Collateral Record

	type public RecordLNCOL lncol
	new XCOLCD,XCID,XCOLL
	
	set XCID=CID
	set XCOLL=Db.getOneRow("COLL","LN","XCID") quit:ER 
	if $G(XCOLL)=COLL do {
	
		new rs 
		type ResultSet rs=Db.select("COLL","LNCOL","CID=:XCID") 
		if rs.isEmpty() quit
		set XCOLL=rs.next(),XSEQ=rs.getCol(1)
	
	
		if ER!(+XCOLL=0) set XCOLCD=""
		else  set XCOLCD=Db.getOneRow("SCOLCD","COL","XCOLL") quit:ER 
		do Db.update("LN","COLL=:XCOLL,COLCD=:XCOLCD","CID=:XCID") quit:ER 
		}
	
	quit
	

vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordLNCOL lncol
	/*
	---- Revision History -------------------------------------------------
	
	10/19/05 - ArpaVC - CR17850
		   Added set of XDMDT to pass into Db.Update statement for 
		   maturity date.
		   
		   Changed reference to XPHC to reference table.column from
		   the utblcolcd object.
		   
	07/19/05 - RussellDS - CR16614
		   Removed vpar() reference.
		   
		   Minor PSL clean up.  Replace direct calls to computed DI
		   code with column references.
		   
		   Eliminated use of Db.insert.
		   
		   Removed old revision history.

	09/09/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also modified this trigger
		   to bring it in-line with current PSL standards.  Also removed
		   pre-2001 revision history.
	*/

	type public Number CID
	type public String ER
	
	type Number COLL, PLDGCID
	
	set COLL=lncol.coll
	set PLDGCID=lncol.pldgacn
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	if '(%ProcessMode=2) do { quit:ER 
	
		type Number COLACN,SCOLCD,XCRLMT
		set XCRLMT=0

		type RecordCOL col=Db.getRecord("COL","COLL=:COLL")

		set COLACN=col.colacn
		set SCOLCD=col.scolcd
	
		// If loan does not have a primary collateral code, set this one (first) up
		if ln.coll="" do Db.update("LN","COLL=:COLL,COLCD=:SCOLCD","CID=:CID") quit:ER 

		// Check if the pledged collateral total is more than 100% of it's current value
		if lncol.coltyp'=70,lncol.pldgamt do { quit:ER 
		
			// "Pledged Amount Exceeds 100% of Collateral Value"
			if col.pldgctot>col.colval do Runtime.setErrXBAD("LNCOL","PAECV") quit:ER
	
			// Check if there's a credit limit, if no credit limit use Bank Exposure
			if 'ln.crlmt set ln.crlmt=ln.bal+ln.udbal
	
			// Check to ensure that the credit limit or bank exposure does not exceed pledged amount.

			// "Secured Loan Account is Under-Collateralized"
			if ln.crlmt>col.pldgctot do Runtime.setErrXBAD("LNCOL","PLDGU") quit:ER
		}
	
		/*
		This section is done before LVR because credit limit can be adjusted when
		the collateral record type is a 70 (pledged account).
		*/
		if lncol.coltyp=70 do { quit:ER 
		
			type Boolean PCIFER
			type Number BAL,DRATE,XACN
			type String XMSG

			set PCIFER=0
			
			type RecordDEP dep=Db.getRecord("DEP","CID=:PLDGCID") quit:ER
			
			// Pledged account is a segmented account
			if dep.segflg do Runtime.setErrXBAD("LNCOL","PSEG") 
	
			// Verify CIF's between pledged account and loan account match
			// 11982 - Replaced RELACN with RELCIF
			type ResultSet rs=Db.select("ACN","RELCIF","CID=:PLDGCID")
			if rs.isEmpty() quit
			while rs.next() do { 
				set XACN=rs.getCol(1)
				
				// Pledged account owners not owners of loan account
				// 11982 - Replaced RELACN with RELCIF
				if 'Db.isDefined("RELCIF","XACN,CID") do Runtime.setErrXBAD("LNCOL","PCIF") set PCIFER=1 quit:ER 
			}
	
			// Verify titles between pledged account and loan account match
			if 'PCIFER do { quit:ER
				type RecordACN acn1=Db.getRecord("ACN","CID=:COLACN")
				type RecordACN acn2=Db.getRecord("ACN","CID=:CID")
				
				// Pledged account owners not owners of loan account
				if (acn1.title1'=acn2.title1)!(acn1.title2'=acn2.title2)!(acn1.title3'=acn2.title3)!(acn1.title4'=acn2.title4) do Runtime.setErrXBAD("LNCOL","PCIF")
			}
				
			if 'lncol.pldgamt quit 
			
			set BAL = col.colbal

			// "Pledged amount exceeds collateral value"	
			if lncol.pldgamt>BAL do Runtime.setErrXBAD("LNCOL","PAVL")  
	
			// Adjust the loan account credit limit if pledged amount and adjust flag is on
			if ln.adjcrlmt do { quit:ER 
				set XCRLMT = $$PLDGCRLMT^LNCDI(lncol.cid) quit:ER 
				do Db.update("LN","CRLMT=:XCRLMT","CID=:CID") quit:ER 
			}
	
			// Adjust the loan account interest rate to meet the minimum rate differential
			if ln.minrate do { quit:ER 
				set DRATE=$$MINRATE^LNCDI(lncol.cid) quit:ER 
				set DRATE=DRATE+ln.minrate
				if DRATE>ln.irn do { quit:ER
					
					type Number XSEQ
					
					do Db.update("LN","IRN=:DRATE","CID=:CID") quit:ER 
					//Loan Rate adjusted due to Minimum Rate Differential requirement					
					set XMSG=$$^MSG(2979)
					
					set XSEQ = Db.nextVal("DAYENDEXC", "TJD=:%SystemDate,RTN=:%RoutineName,SORT='*'")
					
					type RecordDAYENDEXC deexc = Class.new("RecordDAYENDEXC", "TJD=:%SystemDate,RTN=:%RoutineName,SORT='*',SEQ=:XSEQ")
					set deexc.recid = CID
					set deexc.et = XMSG
					set deexc.time = %CurrentTime
					set deexc.rou =%RoutineName
					
					do deexc.save()
				}
			}
	
			/*
			Adjust loan account maturity date to earliest pledged account MDT
			If maturity date of the deposit pledged account is the earliest
			maturity date of all the pledged accounts securing the loan of which
			this deposit account is securing, then update the deposit secured loan
			with the maturity date of the deposit pledged account.
			*/
			type RecordDEP dep2=Db.getRecord("DEP","CID=:COLACN")
			
			if ln.mdt,'col.omdt do { quit:ER
				type Date XDMDT
				set XDMDT=dep2.mdt 
				if dep2.mdt=$$PLDGMDT^LNCDI(lncol.cid),dep2.mdt'=ln.mdt do Db.update("LN","MDT=:XDMDT","CID=:CID") quit:ER
			}
	
			/*
			If Override Maturity date if flag so that the deposit maturity date
			does not default to the loan maturity date, display override if the
			pledged account's maturity date is less than the loan maturity date
			if the pledged deposit maturity code is not set to automatically
			renew.
			*/

			// Collateral Matures Before Loan Term Expires
			if col.omdt,dep2.rencd'=3,dep2.mdt<ln.mdt do Runtime.setErrXBAD("LNCOL","CMBLTE") 
			
			type Number XSEQ
			type String GRP,XAREF,XCOMP

			set GRP=ln.grp
			
			type RecordUTBLCOLCD utblcolcd=Db.getRecord("UTBLCOLCD","GRP,SCOLCD")

			if lncol.pctpldg set XCOMP=$S(col.pldgcb=1:"%PCOL",col.pldgcb=2:"%PAVL",1:"%BAL") set XAREF=col.colacn
			else  set (XCOMP,XAREF)=""

			// Create a permanent hold on the pledged account
			set XSEQ = Db.nextVal("PHLD", "CID=:COLACN")
			type RecordPHLD phld = Class.new("RecordPHLD", "CID=:COLACN,SEQ=:XSEQ")
			set phld.depsc = CID
			set phld.stdt = %SystemDate
			set phld.tlo = %UserStation
			set phld.amt = lncol.fpldg
			set phld.percnt = lncol.pctpldg
			set phld.comp = XCOMP
			set phld.aref = XAREF
			set phld.phc = utblcolcd.phc
			do phld.save("FRMFILER")
	
			// Update pledged as collateral on the deposit account
			do Db.update("DEP","PLDG=1","CID=:COLACN") quit:ER 
		}
	
		// Loan to value ratio. If the collateral record is new, i.e., no loan to value ratio.
		if col.lvr="" do { quit:ER
			type String XLVR
			set XLVR=$$COLLVR^LNFUNCS(ln.crcd,$S(XCRLMT:XCRLMT,1:ln.amtreq),ln.amtreq,col.crcd,col.colval,col.price)
			do Db.update("COL","LVR=:XLVR","COLL=:COLL") quit:ER 
		}
	}
	
	type Number TOTAMT
	set TOTAMT=0
	
	if ln.adjcol do {	
		type ResultSet rs=Db.select("PLDGAMT","LNCOL","CID=:CID")
		if rs.isEmpty() quit
		while rs.next() set TOTAMT=TOTAMT+rs.getCol(1)
		
		do Db.update("LN","COLLIM=:TOTAMT","CID=:CID")
	}

	if ln.collimpr do {
		type Number XWDLMT
		
		if (ln.crlmt<TOTAMT) set XWDLMT=ln.crlmt
		else  set XWDLMT=TOTAMT
		
		do Db.update("LN","WDLMT=:XWDLMT","CID=:CID")
	}

	quit

vau1 // Trigger AU_PLEDGED - After Update Pledged Information

	type public RecordLNCOL lncol
	/*
	---- Revision History ------------------------------------------------
	10/19/05 - ArpaVC - CR17850
		   Added passing of FRMFILER parameter during the 
		   insert of the new PHLD record.  This prevents the error
		   being thrown from the PHLD filer since creations of holds 
		   through collateral maintenance are allowed. 

	07/19/05 - RussellDS - CR16614
		   Removed reference to vpar array, getOneRow, and Db.insert.
		   
		   Changed /SYSTEM parameter on delete to /FRMFILER.
		   
		   Removed old revision history.
	*/
	
	new account,BALDATA,BAL,BALAVL
	new CPLDGAMT,DMDT,DRATE,RCID,RCIF
	new XADJCRLMT,XAMTREQ,XAREF,XCID,XCOMP,XCOLACN,XCOLCRCD
	new XCOLL,XCOLVAL,XCRLMT,XDEPO,XDMDT,XDMT,XFPLDG,XIRN,XGRP,XLMDT,XLNBAL
	new XLNCOLL,XLNCRCD,XLNO,XLVR,XMINRATE,XOMDT,XPCTPLDG,XPHC,XPLDGCB
	new XPLDGCTOT,XPRICE,XPHLDSEQ,XRENCD,XSCOLCD,XSTDT,XTLO,XUDBAL

	set XCID = lncol.cid
	set XCOLL = lncol.coll
	set XPHLDSEQ = lncol.phldseq
	set XFPLDG = lncol.fpldg
	set XPCTPLDG = lncol.pctpldg
	
	type RecordLN ln = Db.getRecord("LN", "CID=:XCID")
	set XLNCOLL = ln.coll
	set XADJCRLMT = ln.adjcrlmt
	set XGRP = ln.grp
	set XLNCRCD = ln.crcd
	set XCRLMT = ln.crlmt
	set XAMTREQ = ln.amtreq
	set XMINRATE = ln.minrate
	set XLNBAL = ln.bal
	set XIRN = ln.irn
	set XLMDT = ln.mdt
	set XUDBAL = ln.udbal
	
	type RecordCOL col = Db.getRecord("COL", "COLL=:XCOLL")
	set XCOLCRCD = col.crcd
	set XLVR = col.lvr
	set XCOLVAL = col.colval
	set XPRICE = col.price
	set XSCOLCD = col.scolcd
	set XCOLACN = col.colacn
	set XPLDGCB = col.pldgcb
	set XPLDGCTOT = col.pldgctot
	set XOMDT = col.omdt
	
	// Check if the pledged collateral total is more than 100% of it's currentvalue
	if lncol.coltyp'=70,lncol.pldgamt do { quit:ER 
		// "Pledged Amount Exceeds 100% of Collateral Value"
		if XPLDGCTOT>XCOLVAL do Runtime.setErrXBAD("LNCOL","PAECV") quit:ER   
	
		// Check if there's a credit limit, if no credit limit use Bank Exposure
		if 'XCRLMT set XCRLMT=XLNBAL+XUDBAL
	
		// Check to ensure that the credit limit or bank exposure does not exceed pledged amount.

		// "Secured Loan Account is Under-Collateralized"
		if XCRLMT>XPLDGCTOT do Runtime.setErrXBAD("LNCOL","PLDGU") quit:ER       
	}
	
	if lncol.coltyp=70,lncol.pldgamt do { quit:ER 
		set BAL=$$COLBAL^LNCDI(XCOLACN,XPLDGCB)
		// "Pledged amount exceeds collateral value"
		if lncol.pldgamt>BAL do Runtime.setErrXBAD("LNCOL","PAVL") quit:ER      
	
		/*
		Return override message if the total pledged amount is greater
		than or less than the secured loan's ledger balance.
		*/
		set XCRLMT=$$PLDGCRLMT^LNCDI(XCID) quit:ER 

		// "Secured Loan is Over-Collateralized"
		if XCRLMT>XLNBAL do Runtime.setErrXBAD("LNCOL","PLDGO") quit:ER

		// "Secured Loan is Under-Collateralized"
		if XCRLMT<XLNBAL do Runtime.setErrXBAD("LNCOL","PLDGU") quit:ER
	
		// Adjust the loan account credit limit if pledged amount and adjust flag is on
		if XADJCRLMT do Db.update("LN","CRLMT=:XCRLMT","CID=:XCID") quit:ER 
	
		// Adjust the loan account interest rate to meet the minimum rate differential
		if XMINRATE do { quit:ER 
			set DRATE=$$MINRATE^LNCDI(XCID) quit:ER 
			set DRATE=DRATE+XMINRATE
			if DRATE>XIRN do { quit:ER
				
				type Number XSEQ
				
				do Db.update("LN","IRN=:DRATE","CID=:XCID") quit:ER 
				//Loan Rate adjusted due to Minimum Rate Differential requirement				
				set XMSG=$$^MSG(2979)
				
				set XSEQ = Db.nextVal("DAYENDEXC", "TJD=:%SystemDate,RTN=:%RoutineName,SORT='*'")
					
				type RecordDAYENDEXC deexc = Class.new("RecordDAYENDEXC", "TJD=:%SystemDate,RTN=:%RoutineName,SORT='*',SEQ=:XSEQ")
				set deexc.recid = XCID
				set deexc.et = XMSG
				set deexc.time = %CurrentTime
				set deexc.rou =%RoutineName
				
				do deexc.save()
			}
		}
	
		/*
		If maturity date of the deposit pledged account is the earliest
		maturity date of all the pledged accounts securing the loan of which
		this deposit account is securing, then update the deposit securedloan
		with the maturity date of the deposit pledged account.
		*/
		type RecordDEP dep = Db.getRecord("DEP", "CID=:XCOLACN")
		set XDMDT = dep.mdt
		set XRENCD = dep.rencd
		if XLMDT,'XOMDT if XDMDT=$$PLDGMDT^LNCDI(XCID),XDMDT'=XLMDT do Db.update("LN","MDT=:XDMDT","CID=:XCID") quit:ER 
	
		/*
		If Override Maturity date flag so that the deposit maturity date
		does not default to the loan maturity date, display override if the
		pledged account's maturity date is less than the loan maturity date
		if the pledged deposit maturity code is not set to automatically
		renew.
		*/
		if XOMDT,XRENCD'=3,XDMDT<XLMDT do Runtime.setErrXBAD("LNCOL","CMBLTE") quit:ER 
	
		/*
		Create a permanent hold on the pledged account if old fixed pledged
		and percent pledged did not have a value before.
		*/
		if XPCTPLDG set XCOMP=$S(XPLDGCB=1:"%PCOL",XPLDGCB=2:"%PAVL",1:"%BAL") set XAREF=XCOLACN
		else  set (XCOMP,XAREF)=""
		if 'lncol.fpldg.oldVal,'lncol.pctpldg.oldVal do { quit:ER
			
			type Number XSEQ
			
			type RecordUTBLCOLCD colcd = Db.getRecord("UTBLCOLCD", "GRP=:XGRP,KEY=:XSCOLCD")
			
			set XSEQ = Db.nextVal("PHLD", "CID=:XCOLACN")
			
			type RecordPHLD phld = Class.new("RecordPHLD", "CID=:XCOLACN,SEQ=:XSEQ")
			set phld.depsc = XCID
			set phld.stdt = %SystemDate
			set phld.tlo = %UserStation
			set phld.amt = XFPLDG
			set phld.percnt = XPCTPLDG
			set phld.comp = XCOMP
			set phld.aref = XAREF
			set phld.phc = colcd.phc
			do phld.save("FRMFILER")
	
			// Update pledged as collateral on the deposit account
			do Db.update("DEP","PLDG=1","CID=:XCOLACN") quit:ER 
		}
	
		// Update Permanent hold if old fixed pledged or old percent pledged
		if lncol.fpldg.oldVal!(lncol.pctpldg.oldVal) do Db.update("PHLD","AMT=:XFPLDG,PERCNT=:XPCTPLDG,COMP=:XCOMP,AREF=:XAREF","CID=:XCOLACN AND SEQ=:XPHLDSEQ","/FRMFILER") quit:ER 
	}
	
	/*
	If no pledge amount, then fixed amount and percent pledge have been changed
	to zero.  Treat this as a delete of pledged information for hold.
	*/
	if lncol.coltyp=70,'lncol.pldgamt do {
		if XPHLDSEQ do Db.delete("PHLD","CID=:XCOLACN AND SEQ=:XPHLDSEQ","/FRMFILER") quit:ER 
	
		/*
		If total calculated total pledged amount is zero, the collateral account is
		not pledged in any collateral.  Remove pledged on the account.
		*/
		new rs 
		type ResultSet rs=Db.select("COLL,COLACN,PLDGAMT","COL","COLACN=:XCOLACN")
		do Db.update("DEP","PLDG=0","CID=:XCOLACN")
	}

	new rs,XCID,xadjcol,XDATA,xcollimpr,xcrlmt,xcollim
	set XCID=lncol.cid
	type ResultSet rs=Db.select("ADJCOL,COLLIMPR,CRLMT,COLLIM","LN","CID=:XCID")
	if rs.isEmpty() quit
	while rs.next() do {
		set xadjcol=rs.getCol(1)
		set xcollimpr=rs.getCol(2)
		set xcrlmt=rs.getCol(3)
		set xcollim=rs.getCol(4)
	}
	if xadjcol do {
		new rs,xtotamt,xamt
		set xtotamt=0
		type ResultSet rs=Db.select("PLDGAMT","LNCOL","CID=:XCID")
		if rs.isEmpty() quit
		while rs.next() do {
			set xamt=rs.getCol(1)
			set xtotamt=xtotamt+xamt
		}
		set XDATA=xtotamt
		do Db.update("LN","COLLIM=:XDATA","CID=:XCID")
	}
	set xcollim=$G(XDATA)
	if xcollimpr do {
		new XWDLMT
		if (xcrlmt<xcollim) set XWDLMT=xcrlmt
		else  set XWDLMT=xcollim
		do Db.update("LN","WDLMT=:XWDLMT","CID=:XCID")
	}
	
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete

	type public RecordLNCOL lncol
	/*
	---- Revision History ------------------------------------------------
	
	07/19/05 - RussellDS - CR16614
		   Removed reference to vpar array.
		   
		   Changed /SYSTEM parameter on delete to /FRMFILER.
		   
		   Removed use of getOneRow
		   
		   Removed old revision history.
	*/
	
	type public Boolean ER
	
	type Number CID, COLL
	
	set CID = lncol.cid
	set COLL = lncol.coll

	/*
	Return override message if the credit limit is greater than the pledged amount.
	Check if there's a credit limit, if no credit limit use Bank Exposure
	*/
	if lncol.coltyp'=70,lncol.pldgamt do { quit:ER
	
		type Number XCRLMT
	
		type RecordLN ln = Db.getRecord("LN", "CID=:CID")
	
		set XCRLMT = ln.crlmt
		if 'XCRLMT set XCRLMT = ln.bal + ln.udbal
	
		// Check to ensure that the credit limit or bank exposure does not exceed pledged amount.
		// "Secured Loan Account is Under-Collateralized"
		if XCRLMT>lncol.pldgamt do Runtime.setErrXBAD("LNCOL","PLDGU") quit:ER        
	}
	
	if lncol.coltyp=70 do { quit:ER 
		// Delete Permanent Hold on Pledged Account
		
		type Number XADJCRLMT, XCOLACN, XCRLMT, XLNBAL, XPHLDSEQ, XPLDGAMT
		
		type RecordCOL col = Db.getRecord("COL", "COLL=:COLL")
		
		set XCOLACN = col.colacn
		set XPHLDSEQ = lncol.phldseq
		if XPHLDSEQ set ER=0 do Db.delete("PHLD","CID=:XCOLACN AND SEQ=:XPHLDSEQ","/FRMFILER") quit:ER 
	
		/*
		If total calculated total pledged amount is zero, the collateral
		account is not pledged in any collateral.  Remove pledged on the
		pledged account.
		*/
		set XPLDGAMT=0
		new rs 
		type ResultSet rs=Db.select("PLDGAMT","COL","COLACN=:XCOLACN")
		if rs.isEmpty() quit
		while rs.next() set XPLDGAMT=XPLDGAMT+rs.getCol(1) 
		if XPLDGAMT=lncol.pldgamt do Db.update("DEP","PLDG=0","CID=:XCOLACN")   
	
		/*
		Return override message if the total pledged amount is greater
		than or less than the secured loan's ledger balance.
		*/
		set XCRLMT=$$PLDGCRLMT^LNCDI(CID) quit:ER
		
		type RecordLN ln = Db.getRecord("LN", "CID=:CID")
		
		set XLNBAL = ln.bal
		set XADJCRLMT = ln.adjcrlmt

		// S RM="Secured Loan is Over-Collateralized"
		if XCRLMT>XLNBAL do Runtime.setErrXBAD("LNCOL","PLDGO") quit:ER      

		 // S RM="Secured Loan is Under-Collateralized"
		if XCRLMT<XLNBAL do Runtime.setErrXBAD("LNCOL","PLDGU") quit:ER      

		// Adjust the loan account credit limit if pledged amount and adjust flag
		if XADJCRLMT do {
			
			set ln.crlmt = XCRLMT
			do ln.save()
		}
	}
	
	quit

vbi1 // Trigger BEFORE_INSERT - LNCOL before insert

	type public RecordLNCOL lncol
	// Collateral record does not exist
	if 'Db.isDefined("COL","COLL") do Runtime.setErrMSG("LNCOL",784) quit:ER 
	
	new DATA,XCLS,XCOLACN,XELG,XID,XSCOLCD,XSEQ
	
	set XCLS=Db.getOneRow("CLS","LN","CID")
	if XCLS'="L" do Runtime.setErrMSG("LNCOL",57) quit 
	set DATA=Db.getOneRow("ID,SCOLCD,COLACN","COL","COLL")
	set XID=$P(DATA,$C(9),1)
	set XSCOLCD=$P(DATA,$C(9),2)
	set XCOLACN=$P(DATA,$C(9),3)
	
	// SET Vehicle lookup code
	if XID'="",lncol.coltyp=30 set lncol.id=XID
	
	// Fixed pledged amount and percent pledged can not be combined
	if lncol.fpldg,lncol.pctpldg do Runtime.setErrMSG("LNCOL",3525) quit:ER 
	
	// Pledged Account - Deposit Secured Loan
	if lncol.coltyp=70 do { quit:ER 
		// "Invalid pledged account"
		if 'Db.isDefined("DEP","XCOLACN") do Runtime.setErrMSG("LNCOL",3524) quit:ER
		set lncol.pldgacn=XCOLACN
		set XELG=Db.getOneRow("COLELG","DEP","XCOLACN")
		// Invalid pledged account
		if 'XELG do Runtime.setErrMSG("LNCOL",3524) quit:ER 
		for XSEQ=1:1 if 'Db.isDefined("PHLD","XCOLACN,XSEQ") set lncol.phldseq=XSEQ quit 
		}
	quit
	

vbu1 // Trigger BU_PLEDGED - Before Update Pledged

	type public RecordLNCOL lncol
	do lncol.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------	
	
	12/13/99 - MAGERAM - 36111
		   Added check to get the next hold sequence only if pledged 
		   amount and pledged percentage are not defined.
			
	*/	
	
	
	new XELG,XCOLACN,XSEQ
	// "Fixed pledged amount and percent pledged can not be combined"	
	if lncol.fpldg,lncol.pctpldg do Runtime.setErrMSG("LNCOL",3525) quit:ER       
	
	// Pledged Account - Deposit Secured Loan
	if lncol.coltyp=70,lncol.fpldg.oldVal="",lncol.pctpldg.oldVal="" do { quit:ER 
		set XCOLACN=Db.getOneRow("COLACN","COL","COLL") quit:ER 
		set lncol.pldgacn=XCOLACN
		set XELG=Db.getOneRow("COLELG","DEP","XCOLACN")
		// Invalid pledged account
		if 'XELG do Runtime.setErrMSG("LNCOL",3524) quit:ER  
		for XSEQ=1:1 if 'Db.isDefined("PHLD","XCOLACN,XSEQ") set lncol.phldseq=XSEQ quit 
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNCOL lncol

	set X = lncol.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lncol.coll if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("COLL", vRM) quit
	set X = lncol.fpldg if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCOL.FPLDG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncol.id.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ID", vRM) quit
	set X = lncol.maxpldg if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCOL.MAXPLDG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncol.pctpldg if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCOL.PCTPLDG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncol.phldseq if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("PHLDSEQ", vRM) quit
	set X = lncol.pldgacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PLDGACN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCOL","MSG",979,"LNCOL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNCOL lncol)	//LNCOL Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.lncol)	// Mode=D Tran=B EFD=N Seq=1 JRNID=HIST_DELETE
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.lncol)	// Mode=D Tran=O EFD=N Seq=1 JRNID=HIST_DELETE
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lncol)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lncol)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}

	quit


vj1(RecordLNCOL lncol)	// HIST_DELETE  Table HIST  History for deletion of a collateral

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncol.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(8176,lncol.coll,lncol.desc)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNCOL lncol)	// HIST_INSERT  Table HIST  History for link of new collateral

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncol.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3942,lncol.cid,lncol.coll)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNCOL lncol) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("PLDGACN").exists() do vi2(.lncol)
		if vx("ID").exists() do vi3(.lncol)
	}
	do vi1(.lncol)
	do vi2(.lncol)
	do vi3(.lncol)

	quit
	

vi1(RecordLNCOL lncol) // Maintain LNCOLC index entries (Collateral/Loan Link File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lncol.coll
	type String v3 = lncol.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(lncol,-3),80,vobj(lncol,-4)))#2,'$D(^COL(v1,3,v3)) do vidxerr("LNCOLC")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^COL(v1,3,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^COL(v1,3,v3)
	#ENDBYPASS
	quit

vi2(RecordLNCOL lncol) // Maintain PLDGSCL index entries (Pledged Account Securing Loan)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lncol.pldgacn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = lncol.cid
	type String v4 = lncol.coll

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(lncol,-3),80,vobj(lncol,-4)))#2,'$D(^XREF("PLDGSCL",v2,v3,v4)) do vidxerr("PLDGSCL")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("PLDGSCL",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PLDGACN").exists() set v2=vx("PLDGACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("PLDGSCL",v2,v3,v4)
	#ENDBYPASS
	quit

vi3(RecordLNCOL lncol) // Maintain VEHICLE index entries (Vehicle/Loan Link File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lncol.id
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = lncol.cid
	type String v4 = lncol.coll

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(lncol,-3),80,vobj(lncol,-4)))#2,'$D(^XREF("VEHICLE",v2,v3,v4)) do vidxerr("VEHICLE")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("VEHICLE",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ID").exists() set v2=vx("ID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("VEHICLE",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNCOL")

	while ds.next() do {
		type RecordLNCOL lncol=ds.getRecord("LNCOL")
		if vlist.contains("VINDEX") do VINDEX(.lncol) quit
		if vlist.contains("LNCOLC") do vi1(.lncol)
		if vlist.contains("PLDGSCL") do vi2(.lncol)
		if vlist.contains("VEHICLE") do vi3(.lncol)
	}

	quit


public VIDXBLD1(RecordLNCOL lncol, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lncol) quit
	if vlist.contains("LNCOLC") do vi1(.lncol)
	if vlist.contains("PLDGSCL") do vi2(.lncol)
	if vlist.contains("VEHICLE") do vi3(.lncol)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNCOL","MSG",1225,"LNCOL."_di)

	quit


vkchged // Access key changed

	type public RecordLNCOL lncol

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("COLL").exists() set vux("COLL") = vx("COLL")
	do vkey(1) set voldkey = lncol.cid_","_lncol.coll      // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lncol.cid_","_lncol.coll      // Copy new keys into object
	type RecordLNCOL vnewrec = lncol.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNCOL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNCOL lncol

	if vux("CID").exists() set lncol.cid = vux("CID").piece("|",i)
	if vux("COLL").exists() set lncol.coll = vux("COLL").piece("|",i)
	quit

VIDXPGM()	quit "LNCOLFL"	// Location of index program

