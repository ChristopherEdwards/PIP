BCHTIKLA //Batch BCHTIKLACN - Account-Level Tickler Entry Date Change
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHTIKLACN Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHTIKLACN")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHTIKLACN") quit
 do JOBMGR^BCHUTL(%FN,"BCHTIKLACN",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHTIKLACN")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID,TKS) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHTIKLACN","*","",CID.get()_","_TKS.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHTIKLACN",CID.get()_","_TKS.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHTIKLACN",CID.get()_","_TKS.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID,TKS)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHTIKLACN","*","",CID.get()_","_TKS.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHTIKLACN",CID.get()_","_TKS.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID,TKS) //
	type public Boolean ER

	type Date NJD
 
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

 	quit:acn.stat=4
 	
 	type RecordTIKLACN tiklacn=Db.getRecord("TIKLACN","CID=:CID,TKS=:TKS",1)
 	
 	quit:tiklacn.arf.isNull()
 	
	set NJD=%SystemDate.nextFreqDate(tiklacn.arf)

	// Invalid frequency
	if (ER)!(NJD<0) do Runtime.setErrSTBLER("TIKLACN","INVLDFRE1") quit:ER
 
 	set tiklacn.ARLD=%SystemDate
 
	if ('tiklacn.expd)!(NJD'>tiklacn.expd) set tiklacn.arnd=NJD

 	do tiklacn.bypassSave()

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID,TKS
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 set TKS=vRECORD.piece($C(9),2)
 do vPROC(CID,TKS)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID,TKS
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+20>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Boolean ER
	type public String BRCD

        // Go to the "SRC","BOFF","TIKL" user table to get the teller ID, BRCD.
        do SOURCE^BCHSOURC("BOFF","TIKL",.%UserID,.BRCD,.%UserClass)
        
        if ER set %BatchExit=1 quit
 
	// Invalid teller ID
        if %UserID.isNull() set %BatchExit=1 do Runtime.setErrMSG("TIKLACN","3533") quit:ER

	// Invalid userclass for teller ~p1
        if %UserClass.isNull() set %BatchExit=1 do Runtime.setErrMSG("TIKLACN","3535",%UserID) quit:ER

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID,TKS","TIKLACN","TIKLACN.ARND=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Boolean ER
	type public String BRCD

        // Go to the "SRC","BOFF","TIKL" user table to get the teller ID, BRCD.
        do SOURCE^BCHSOURC("BOFF","TIKL",.%UserID,.BRCD,.%UserClass)
        
        if ER set %BatchExit=1 quit
 
	// Invalid teller ID
        if %UserID.isNull() set %BatchExit=1 do Runtime.setErrMSG("TIKLACN","3533") quit:ER

	// Invalid userclass for teller ~p1
        if %UserClass.isNull() set %BatchExit=1 do Runtime.setErrMSG("TIKLACN","3535",%UserID) quit:ER
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
