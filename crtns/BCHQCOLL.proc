BCHQCOLL //Batch BCHQCOLL - Collection Queue Batch Process
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHQCOLL Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHQCOLL")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHQCOLL") quit
 do JOBMGR^BCHUTL(%FN,"BCHQCOLL",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHQCOLL")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHQCOLL","*","",TJD.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHQCOLL",TJD.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHQCOLL",TJD.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHQCOLL","*","",TJD.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHQCOLL",TJD.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,CID) //
 type Number vMONID,vMONCNT
	
PROC	//
	new acn,CLS,PRIO,query,fnd
	type RecordACN acn=Db.getRecord("ACN","CID")
	set CID=acn.cid
	set CLS=acn.cls
			
	// if no query for this class quit
	//PRIO=1 => at least 1 query for this class
	set PRIO=1		
	if 'Db.isDefined("UTBLCOLLQRY","CLS,PRIO") quit
	else  do {
		new rs
		set fnd=0
		type ResultSet rs=Db.select("QUERY,PRIO","UTBLCOLLQRY","CLS=:CLS","PRIO ASC")
		while rs.next() quit:fnd'=0  do {
			new pgm
			set query=rs.getCol(1)
			set PRIO=rs.getCol(2)	
			set pgm="set fnd=$$"_CLS_PRIO_"^COLLQRY1(.acn)"
			#accept pgm=spier;date=12/09/03
			x pgm
			if fnd'=0 do SETQCOLL(CID,query,.acn)
			}
		quit
		}
	quit

SETQCOLL(CID,queue,RecordACN acn)	//write records to QCOLLREP
	new cif,ln,qcollrep,qcollrpt,utblacod,utbltzone
	new acod,cifacn,collst,hph,tzone,tzoneseq,wrkdte

	type RecordQCOLLREP qcollrep=Class.new("RecordQCOLLREP")	
	set qcollrep.queue=queue
	set qcollrep.cls=acn.cls
	set qcollrep.cid=acn.cid
	set qcollrep.wrkdte=acn.wrkdte
        set qcollrep.collst=acn.collst
        set qcollrep.bal=acn.bal
	set cifacn=acn.acn

	//to get tzone
	type RecordCIF cif=Db.getRecord("CIF","ACN=:cifacn",1)
	if cif.getMode() set hph=cif.hph
	
	set acod=hph.extract(1,3)

	if acod.isNull() set tzoneseq=""
	if 'acod.isNull() do {
		
		type RecordUTBLACOD utblacod=Db.getRecord("UTBLACOD","ACOD=:acod",1)
		set tzoneseq=utblacod.tzoneseq
		}

	if 'tzoneseq.isNull() do {
		
		type RecordUTBLTZONE utbltzone=Db.getRecord("UTBLTZONE","SEQ=:tzoneseq",1)
		set tzone=utbltzone.tzone
		}
		
	//area code no time zone
	if tzoneseq.isNull() set tzoneseq=999,tzone=$$^MSG(3333,"UND")    

	set qcollrep.tzoneseq=tzoneseq
	set qcollrep.tzone=tzone

	//loans only data
        if qcollrep.cls="L" do {
                type RecordLN ln=Db.getRecord("LN","CID=:CID")
                set qcollrep.gtdue=ln.gtdue
                set qcollrep.daysdelq=ln.daysdelq
		}

	do qcollrep.bypassSave()

	if Db.isDefined("QCOLLREPT","QUEUE=:queue,CLS=:qcollrep.cls") do {
		type RecordQCOLLREPT qcollrpt=Db.getRecord("QCOLLREPT","QUEUE=:queue,CLS=:qcollrep.cls")
		if qcollrpt.quetot.isNull() set qcollrpt.quetot=0
		set qcollrpt.quetot=qcollrpt.quetot+1
		if qcollrpt.wrktot.isNull() set qcollrpt.wrktot=0
		if 'qcollrep.wrkdte.isNull(),qcollrep.wrkdte'>%SystemDate set qcollrpt.wrktot=qcollrpt.wrktot+1
		do qcollrpt.bypassSave()
		}
		
	else  do {
		new qcollrpt
		type RecordQCOLLREPT qcollrpt=Class.new("RecordQCOLLREPT")
		set qcollrpt.queue=queue
		set qcollrpt.cls=qcollrep.cls
		set qcollrpt.quetot=1
		set qcollrpt.wrktot=1
		do qcollrpt.bypassSave()
		}
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,TJD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set TJD=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(TJD,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public Number vMONID,vMONCNT
 type public String vBUFOVFL
 type String vRECORD,vrow,TJD,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 set vMONCNT=vMONCNT+1
 if vMONCNT#1000=0 do UPDATE^JOBMON(vMONID,vMONCNT,$TR(vrow,$C(9),$C(44)))
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	//for opening query
	set XTJD=%SystemDate-1	
	
	//compile queries
	do ^COLLQRY 		

	// Set batch exit flag if error returned from above call
	if ER set %BatchExit=1  


	//delete old QCOLLREP table
	do Db.fastDelete("QCOLLREP")	

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,CID","DAYENDQCOLL","DAYENDQCOLL.TJD=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 type public Number vMONID,vMONCNT
 type public String %FN
 set vMONID=$$INIT^JOBMON($G(%FN)_"#"_"BCHQCOLL"),vMONCNT=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 type public Number vMONID,vMONCNT
 type public String %FN
 do CLOSE^JOBMON(vMONID,vMONCNT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
