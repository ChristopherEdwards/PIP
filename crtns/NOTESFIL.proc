NOTESFIL(RecordNOTES notes, String vpar, Boolean vparNorm) // NOTES - Customer/Account Notes Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (13)             01/08/2007
	// Trigger Definition (1)                      02/21/2006
	// Journal File Definition (2)                 09/16/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = notes.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(notes,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(notes,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String FILE = notes.file
	type String CID = notes.cid
	type String NUM = notes.num

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("FILE").exists()!vx("CID").exists()!vx("NUM").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("NOTES",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("NOTES","FILE = :notes.file and CID = :notes.cid and NUM = :notes.num") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String FILE
	type public String CID
	type public String NUM

	type RecordNOTES notes = Db.getRecord("NOTES","FILE=:FILE,CID=:CID,NUM=:NUM")
	if (%ProcessMode = 2) do {
		do notes.setMode(2)

		do NOTESFIL(notes,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordNOTES notes

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("NOTES","FILE = :notes.file and CID = :notes.cid and NUM = :notes.num") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		set notes.LUPD = %SystemDate
		set notes.UID = %UserID
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(notes))  K:$D(vobj(notes,1,1)) ^NOTES(vobj(notes,-3),vobj(notes,-4),vobj(notes,-5)) S ^NOTES(vobj(notes,-3),vobj(notes,-4),vobj(notes,-5))=vobj(notes)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(notes,1,1))  N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(notes,1,1)) S vS1=vS1+1,^NOTES(vobj(notes,-3),vobj(notes,-4),vobj(notes,-5),vS1)=$E(vobj(notes,1,1),vS2,vS2+449)
			#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.notes)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordNOTES notes

	if vpar["/JOURNAL/" do VJOURNAL(.notes)                // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^NOTES(vobj(notes,-3),vobj(notes,-4),vobj(notes,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordNOTES notes

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordNOTES notes

	if notes.file.isNull() do vreqerr("FILE") quit
	if notes.cid.isNull() do vreqerr("CID") quit
	if notes.num.isNull() do vreqerr("NUM") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("NOTES","MSG",1767,"NOTES."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordNOTES notes
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(notes,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT_UPD - Before Insert and Update

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT_UPD - Before Insert and Update

	type public RecordNOTES notes
	do notes.setAuditFlag(1)
	/*
	-----Revision History--------------------------------------------------

	    02/21/06 - KELLYP - CR 19586
		Retrofitted this trigger from P01.  When the NOTESACN and 
		NOTESCIF tables were consolidated into the NOTES table, this 
		trigger was apparently not included.
	*/ 
	
	type public Boolean ER

	// Date must be after the system processing date
	if notes.exp,notes.exp'>%SystemDate do Runtime.setErrMSG("NOTES",751) quit:ER
	
	if (notes.rbdate.isNull()),('notes.ntype.isNull()) do {

		type String CAL

		type RecordUTBLNTYPE untype=Db.getRecord("UTBLNTYPE","NTYPE=:notes.ntype",1)

		if +untype.rday'>0 quit

		set CAL=untype.bcalen
		if CAL.isNull() set CAL="IBS"

		set notes.rbdate=%SystemDate.nextBusDate(untype.rday,CAL)
		}
	
								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordNOTES notes

	if notes.file.length()>4 set vRM = $$^MSG(1076,4) do vdderr("FILE", vRM) quit
	set X = notes.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = notes.num if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("NUM", vRM) quit
	if notes.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = notes.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = notes.lupd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LUPD", vRM) quit
	set X = notes.nstat if 'X.isNull(),'Db.isDefined("UTBLNOTESTAT","X") set vRM = $$^MSG(1485,X) do vdderr("NSTAT", vRM) quit
	set X = notes.ntype if 'X.isNull(),'Db.isDefined("UTBLNTYPE","X") set vRM = $$^MSG(1485,X) do vdderr("NTYPE", vRM) quit
	set X = notes.odate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODATE", vRM) quit
	if notes.origin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ORIGIN", vRM) quit
	set X = notes.rbdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RBDATE", vRM) quit
	set X = notes.rperson if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("RPERSON", vRM) quit
	if notes.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("NOTES","MSG",979,"NOTES."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordNOTES notes)	//NOTES Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if TSRC="B" do {
		do vj1(.notes)	// Mode=I,U,D Tran=B EFD=N,E Seq=1 JRNID=ACN_HIST
		do vj2(.notes)	// Mode=I,U,D Tran=B EFD=N,E Seq=1 JRNID=CIF_HIST
		}
	else  if TSRC="O" do {
		do vj1(.notes)	// Mode=I,U,D Tran=O EFD=N,E Seq=1 JRNID=ACN_HIST
		do vj2(.notes)	// Mode=I,U,D Tran=O EFD=N,E Seq=1 JRNID=CIF_HIST
		}

	quit


vj1(RecordNOTES notes)	// ACN_HIST  Table HIST  Account History

	if notes.file="ACN"
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=notes.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG($S(%O=0:5641,%O=1:5643,%O=3:5642),notes.num)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordNOTES notes)	// CIF_HIST  Table CIFH  Customer History

	if notes.file="CIF"
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=notes.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG($S(%O=0:5645,%O=1:5647,%O=3:5646),notes.num)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordNOTES notes

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("FILE").exists() set vux("FILE") = vx("FILE")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("NUM").exists() set vux("NUM") = vx("NUM")
	do vkey(1) set voldkey = notes.file_","_notes.cid_","_notes.num // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = notes.file_","_notes.cid_","_notes.num // Copy new keys into object
	type RecordNOTES vnewrec = notes.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("NOTES",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordNOTES notes

	if vux("FILE").exists() set notes.file = vux("FILE").piece("|",i)
	if vux("CID").exists() set notes.cid = vux("CID").piece("|",i)
	if vux("NUM").exists() set notes.num = vux("NUM").piece("|",i)
	quit
