STOP1AFL(RecordSTOP1A stop1a, String vpar, Boolean vparNorm) // STOP1A - Customer Stops - Territory Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop1a.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stop1a,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop1a,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = stop1a.acn
	type String SEQ = stop1a.seq
	type String TER = stop1a.ter

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("SEQ").exists()!vx("TER").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP1A",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP1A","ACN = :stop1a.acn and SEQ = :stop1a.seq and TER = :stop1a.ter") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String SEQ
	type public String TER

	type RecordSTOP1A stop1a = Db.getRecord("STOP1A","ACN=:ACN,SEQ=:SEQ,TER=:TER")
	if (%ProcessMode = 2) do {
		do stop1a.setMode(2)

		do STOP1AFL(stop1a,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP1A stop1a

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP1A","ACN = :stop1a.acn and SEQ = :stop1a.seq and TER = :stop1a.ter") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop1a)) S ^STOP(1,vobj(stop1a,-3),vobj(stop1a,-4),vobj(stop1a,-5))=vobj(stop1a)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP1A stop1a


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^STOP(1,vobj(stop1a,-3),vobj(stop1a,-4),vobj(stop1a,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordSTOP1A stop1a

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP1A stop1a

	if stop1a.acn.isNull() do vreqerr("ACN") quit
	if stop1a.seq.isNull() do vreqerr("SEQ") quit
	if stop1a.ter.isNull() do vreqerr("TER") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP1A","MSG",1767,"STOP1A."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSTOP1A stop1a
	if 'stop1a.seq.isNull() set vfkey("^STOP("_1_","_""""_stop1a.acn_""""_","_""""_stop1a.seq_""""_")")="STOP1A(ACN,SEQ) -> STOP1"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSTOP1A stop1a
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("STOP1",":stop1a.acn,:stop1a.seq") set vERRMSG = $$^MSG(8563,"STOP1A(ACN,SEQ) -> STOP1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER - After trigger

	do vad1

	quit

vau1 // Trigger AFTER - After trigger

	do vad1

	quit

vad1 // Trigger AFTER - After trigger

	type public RecordSTOP1A stop1a
	/*
	---------- Revision History ------------------------------------------
	01/10/03 - Spier 51423
		   Corrected db.insert statement by changing it to 
		   class.new instantiation. This corrected a compiler issue
		   caused by curval usage.

	01/12/00 - CHOK - 31126
		   Fix PSL code.

	09/20/99 - CARROLLJ - 31126
		   Convert to PSL.

	*/
	
	// Verify mode
	if %ProcessMode=2 quit              
	
	new msg,terdes,CID
	// Stop payment - type-seq-ter
	set msg=$S('%ProcessMode:$$^MSG(6701),%ProcessMode=1:$$^MSG(6702),%ProcessMode=3:$$^MSG(6700)) 
	set terdes=Db.getOneRow("DES","DBTBL1D","'SYSDEV','STOP1A','TER'")
	//Sequence ~p1
	set msg=msg_"1 - "_$$^MSG(6742,stop1a.seq)_" "_terdes_" "_stop1a.ter  

	// History
	do CIFHBLD^CIFFUNCS(msg)               
		
	if %ProcessMode=3 set SRC="1,"_ACN_","_SEQ
	new rs 
	set CLS="D"
	type ResultSet rs=Db.select("CID","RELCIF,ACN","ACN=:ACN AND CLS=:CLS AND RELCIF.CID=ACN.CID")

	if rs.isEmpty() quit
	while rs.next() do { 
		set CID=rs.getCol(1)
		//  Create STOP2A
		if %ProcessMode=3 do zdelete(.stop1a) quit 
		type RecordSTOP2A stop2a=Class.new("RecordSTOP2A")
		set stop2a.cid=CID
		set stop2a.seq=Db.currVal("STOP2","CID=:CID")
		set stop2a.ter=TER
		do stop2a.save()
		}
	quit 


zdelete(RecordSTOP1A stop1a) 
	

	do zfind(.stop1a)
	if SEQ="" quit 
	do Db.delete("STOP2A","CID=:CID AND SEQ=:SEQ AND TER=:TER")
	quit

	
zfind(RecordSTOP1A stop1a) 
	

	// Locate original STOP2 deposit account created by this CIF
	
	
	new rs 
	type ResultSet rs=Db.select("SEQ","STOP2","CID=:CID AND SRC=:SRC") 
	if rs.isEmpty() set SEQ="" quit
	set SEQ=rs.next(),SEQ=rs.getCol(1)
	
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP1A stop1a

	set X = stop1a.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = stop1a.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop1a.ter if 'X.isNull(),'Db.isDefined("UTBLTER","X") set vRM = $$^MSG(1485,X) do vdderr("TER", vRM) quit
	set X = stop1a.dtsend if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTSEND", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP1A","MSG",979,"STOP1A."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSTOP1A stop1a

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	if vx("TER").exists() set vux("TER") = vx("TER")
	do vkey(1) set voldkey = stop1a.acn_","_stop1a.seq_","_stop1a.ter // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop1a.acn_","_stop1a.seq_","_stop1a.ter // Copy new keys into object
	type RecordSTOP1A vnewrec = stop1a.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP1A",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP1A stop1a

	if vux("ACN").exists() set stop1a.acn = vux("ACN").piece("|",i)
	if vux("SEQ").exists() set stop1a.seq = vux("SEQ").piece("|",i)
	if vux("TER").exists() set stop1a.ter = vux("TER").piece("|",i)
	quit
