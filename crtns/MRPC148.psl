MRPC148( String RETURN, Number VERSN, Number CID, String INPUT, Boolean SAVEFLG)
	/*
	Procedure ID: MRPC148
	DESC: Create Account Titles
	ORIG: Kevin Hailey
	DATE: 11/07/06
	
	KEYWORDS: RPC
	
	ARGUMENTS:
	
		RETURN		Return Value

		VERSN		Version Number		/TYP=N/REQ/MECH=VAL
		current version=1
	
		CID		Account Number		/TYP=N/REQ/MECH=VAL
	
		INPUT		Input String		/TYP=T/REQ/MECH=VAL
		See details below
		
		SAVEFLG		Save Data Flag		/TYP=L/REQ/MECH=VAL


	RETURNS:
	
		$$		Error Message		/TYP=T
		Null		No Error
	

	RELATED:
	
		$$^PBSMRPC - MRPC Service Class Driver

	
	EXAMPLE:

		S RM=$$^MRPC148(.RETURN,1,CID,INPUT,SAVEFLG)


	This RPC is a public RPC to perform the creation of account
	title fields.
	
	This MRPC will accept a comma separated string in the form 
	FID.DI=VAL, FID.DI=VAL,... which will be used to create the
	account titles.

	This form of input is used vs. individual parameters to provide
	the flexibility of changes on the input data without changes
	to this routine.
		      
	In order to handle multiple records for a single table, an
	exception to the FID.DI=VAL format must be used.  For these
	records, add a sequential number to the FID field.  For example,
	if there are 3 CIFs that should be attached to an account,
	CIFs 544 (primary), 545 and 546, this should be set up as
	RELCIF1.ACN=544,RELCIF1.ROLE=1,RELCIF2.ACN=545,RELCIF2.ROLE=2,
	RELCIF3.ACN=546,RELCIF3.ROLE=3.

	---- Revision History ------------------------------------------------

	*/
 
 	// Begin processing

	type public Boolean ER
	type public String RM
	type Boolean ERV
	type String ERRMSG

	set (ER,ERV)=0
	set (ERRMSG,RM)=""
	set RETURN=""
	
	do MAIN(CID.get(),INPUT.get(),SAVEFLG.get(),.RETURN)
	
	if ERV set ER=1,RM=ERRMSG

	if ER quit $$ERRMSG^PBSUTL(RM)

	quit ""


MAIN( Number CID, String INPUT, Boolean SAVEFLG, String RETURN)
	/*
	Process request

	ARGUMENTS:
		CID		Account Number
		INPUT		Input string
		SAVEFLG		Update data flag

	RETURNS:
		RETURN		Return value
	

	This subroutine is responsible for parsing the INPUT string and
	creating the account titles based on the values contained in INPUT.

	The input string should contain ACNRELC(Account Relationship Code)
	for the account in the form of ACN.ACNRELC=A.
	
	The input string will also contain a list of all of the account
	owners(ACN) and their respective role codes(ROLE) in the form of 
	RELCIF1.ACN=123,RELCIF1.ROLE=1,RELCIF2.ACN=456,RELCIF2.ROLE=2.
	
	The RELCIF entries must be sent in in the correct order because
	TITLE^MRPC043 will use this order when defaulting title.

	If the SAVEFLG is set to Yes then the account titles will be updated on
	the account.
	
	*/
	catch vERROR {

		// Log GTM system errors
		set ET=vERROR.type
		if vERROR.type["%GTM-" do {
			do ZE^UTLERR
			set ERRMSG=vERROR.type_","_vERROR.description
		}

		trollback:$tlevel

		// Build error message for thrown errors
		else  do {
			set ERRMSG=$S(RM.get().isNull():vERROR.description,1:RM)
			set ERRMSG=$S(ET.isNull():ERRMSG,ERRMSG.isNull():ET,1:ET_","_ERRMSG)
		}

		// Set error flag
		set ERV=1
	}
	
	type String DATA(),RET
	type RecordACN acn
	type RecordRELCIF relcif()

	// Version number of client message is not compatible with server
	if VERSN'=1 set RM=$$^MSG(2951) throw Class.new("Error",","_RM)

	// Required fields cannot be null - ~p1
	if CID.isNull() set RM=$$^MSG(2388,"CID") throw Class.new("Error",","_RM)
	if INPUT.isNull() set RM=$$^MSG(2388,"INPUT") throw Class.new("Error",","_RM)
	if SAVEFLG.isNull() set RM=$$^MSG(2388,"SAVEFLG") throw Class.new("Error",","_RM)

	// Convert input string to DATA array
	do STR2ARR^UTLMRPC(INPUT,.DATA)
	
	// Create ACN object
	set acn=Db.getRecord("ACN","CID=:CID",1)
	
	// Populate the acn object with DATA
	do acn.overlay("DATA")

	// Create an array of relcif objects
	do BLDRELOB(.relcif(),.DATA)
	if ER throw class.new("Error",","_RM) quit
	
	set acn.title1=""
	set acn.title2=""
	set acn.title3=""
	set acn.title4=""
 
	// Create title fields
	do TITLE^MRPC043(.acn,.relcif())
	if ER throw class.new("Error",","_RM) quit

	// Format RETURN field
	set RET(1)=acn.title1
	set RET(2)=acn.title2
	set RET(3)=acn.title3
	set RET(4)=acn.title4
	set RETURN=$$V2LV^MSG(.RET)
	
	// Save data if flag is set
	if SAVEFLG do acn.save()
	
	quit


BLDRELOB( RecordRELCIF relcif(), String DATA())
	/*
	Build RELCIF objects
	
	ARGUMENTS:
		relcif		New RELCIF (account relationship) object array
		DATA		Data array

	RETURNS:
		relcif		Populated RELCIF (account relationship) object array
	
	Create relcif objects that can be used by linetag TITLE.
	This will be used when the relationship data may not yet exist
	such as in the creation of a new account or the addition of an
	owner to an account.
	*/

	type Boolean QUIT
	type Number ACN,COUNT

	set QUIT=0

	// Process all RELCIF entries contained in INPUT string
	for COUNT=1:1 do { quit:ER.get()!(QUIT)

		/*
		If ACN is null then there are no more RELCIF entries to
		process
		*/
		set ACN=DATA("RELCIF"_COUNT_".ACN").get()
		if ACN.isNull() set QUIT=1 quit

		// Customer ~p1 does not exist
		if 'Db.isDefined("CIF","ACN=:ACN") set RM=$$^MSG(6167,ACN) throw class.new("Error",","_RM) quit
				
		set relcif(COUNT)=Class.new("RecordRELCIF")
		set relcif(COUNT).acn=ACN
		set relcif(COUNT).role=DATA("RELCIF"_COUNT_".ROLE").get()
	
		// Missing required field RELCIF.ROLE
		if relcif(COUNT).role.isNull() set RM=$$^MSG(6174,"RELCIF.ROLE") throw class.new("Error",","_RM) quit
	}

	quit
	
		

TEST( String %UserID)
	/* Test Linetag
	
	This linetag can be used to test the RPC from the GTM prompt
	*/


	type Boolean ER
	type Number ACN,CID,CNT,NUMA
	type String ACNRELC,FLD(),TLO,INPUT,RET(),RETURN,ROLE,RM,SAVEFLG
	type String X,%IPMODE,%LOGID
	
	// User ID required
	if %UserID.isNull() set ER=1 write !,$$^MSG(2849)

	do SYSVAR^SCADRV0()
	set %UserClass="SCA"
	set %LOGID=$$LOGID^SCADRV
	set %IPMODE="NOINT"
	set %UserStation=$$TLO^UTLO()

	set ER=0
	set (INPUT,RM)=""

	read !,"Account Number: ",CID
	read !,"Relationship Code: ",ACNRELC
	read !,"Number of customers: ",NUMA
	read !,"Save Flag: ",SAVEFLG
	
	for CNT=1:1:NUMA do {
		read !,"Customer Number: ",ACN
		read !,"Role Code: ",ROLE
		set INPUT=INPUT_"RELCIF"_CNT_"."_"ACN"_"="_ACN_","
		set INPUT=INPUT_"RELCIF"_CNT_"."_"ROLE"_"="_ROLE_","
	}

	if INPUT.extract(INPUT.length())="," set INPUT=INPUT.extract(1,INPUT.length()-1)
	set INPUT=INPUT_","_"ACN.ACNRELC="_ACNRELC

	set SAVEFLG=$S(SAVEFLG="Y":1,1:0)

	do Runtime.start("BA")
	
	set X=$$^MRPC148(.RETURN,1,CID,INPUT,SAVEFLG)
		
	if 'X.isNull() do {
		set PTR=$$LV2V^MSG(X,.FLD)
		set ER=1
		if RM.isNull() set RM=FLD(5)
	}
	else  set RM="Success"
	write !!,"Error Flag: ",ER.get(),"   ",RM.get()
	write !,"Return",!
	if X.isNull() do {
		set RET=$$LV2V^MSG(RETURN,.RET)
		for i=1:1:4 write RET(i),!
	}

	if $TLevel do Runtime.commit()

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60614^47972^Marie Mbui^6458"	// Signature - LTD^TIME^USER^SIZE
