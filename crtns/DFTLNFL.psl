DFTLNFL(RecordPRODDFTL proddftl, String vpar, Boolean vparNorm) // PRODDFTL - Loan Product Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (353)            08/14/2007
	// Trigger Definition (11)                     08/23/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = proddftl.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(proddftl,.vxins(),10,"|")
	if %O = 1 quit:'proddftl.isChanged()  do AUDIT^UCUTILN(proddftl,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYPE = proddftl.type

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYPE").exists() do vkchged quit                // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PRODDFTL",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PRODDFTL","TYPE = :proddftl.type") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYPE

	type RecordPRODDFTL proddftl = Db.getRecord("PRODDFTL","TYPE=:TYPE")
	if (%ProcessMode = 2) do {
		do proddftl.setMode(2)

		do DFTLNFL(proddftl,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPRODDFTL proddftl

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PRODDFTL","TYPE = :proddftl.type") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(proddftl,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(proddftl,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(proddftl,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLDFTL(vobj(proddftl,-3),n)=vobj(proddftl,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(proddftl,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(proddftl,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLDFTL(vobj(proddftl,-3),n)=vobj(proddftl,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordPRODDFTL proddftl
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^UTBLDFTL(vobj(proddftl,-3),n)) quit:n=""  if '$D(vobj(proddftl,n)),$D(^UTBLDFTL(vobj(proddftl,-3),n))#2 set vobj(proddftl,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPRODDFTL proddftl

	if 'vkeychg.get(),proddftl.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(proddftl,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^UTBLDFTL(vobj(proddftl,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordPRODDFTL proddftl

	// Type local variables for access keys for defaults
	type public String TYPE

	if proddftl.addlchg.isNull() set proddftl.addlchg = 0  // addlchg
	if proddftl.adjcol.isNull() set proddftl.adjcol = 0    // adjcol
	if proddftl.adjcrlmt.isNull() set proddftl.adjcrlmt = 0 // adjcrlmt
	if proddftl.aflg.isNull() set proddftl.aflg = 0        // aflg
	if proddftl.aipr.isNull() set proddftl.aipr = 0        // aipr
	if proddftl.alprty.isNull() set proddftl.alprty = 0    // alprty
	if proddftl.anlsys.isNull() set proddftl.anlsys = 0    // anlsys
	if proddftl.aruf.isNull() set proddftl.aruf = 0        // aruf
	if proddftl.auo.isNull() set proddftl.auo = 0          // auo
	if proddftl.avcrlmt.isNull() set proddftl.avcrlmt = 0  // avcrlmt
	if proddftl.bcapint.isNull() set proddftl.bcapint = 0  // bcapint
	if proddftl.bmet.isNull() set proddftl.bmet = 0        // bmet
	if proddftl.bpocl.isNull() set proddftl.bpocl = 0      // bpocl
	if proddftl.cbf.isNull() set proddftl.cbf = 0          // cbf
	if proddftl.ccbind.isNull() set proddftl.ccbind = 0    // ccbind
	if proddftl.cdf.isNull() set proddftl.cdf = 0          // cdf
	if proddftl.chkeuro.isNull() set proddftl.chkeuro = 0  // chkeuro
	if proddftl.chkiss.isNull() set proddftl.chkiss = 0    // chkiss
	if proddftl.cintbnp.isNull() set proddftl.cintbnp = 0  // cintbnp
	if proddftl.cls.isNull() set proddftl.cls = "L"        // cls
	if proddftl.collimpr.isNull() set proddftl.collimpr = 0 // collimpr
	if proddftl.comm.isNull() set proddftl.comm = 0        // comm
	if proddftl.cpf.isNull() set proddftl.cpf = 0          // cpf
	if proddftl.custom1.isNull() set proddftl.custom1 = 0  // custom1
	if proddftl.custom2.isNull() set proddftl.custom2 = 0  // custom2
	if proddftl.custom3.isNull() set proddftl.custom3 = 0  // custom3
	if proddftl.ddra.isNull() set proddftl.ddra = 30       // ddra
	if proddftl.dmndln.isNull() set proddftl.dmndln = 0    // dmndln
	if proddftl.drf.isNull() set proddftl.drf = 0          // drf
	if proddftl.dschpr.isNull() set proddftl.dschpr = 0    // dschpr
	if proddftl.dxsi.isNull() set proddftl.dxsi = 0        // dxsi
	if proddftl.eftdd.isNull() set proddftl.eftdd = 0      // eftdd
	if proddftl.eftdeb.isNull() set proddftl.eftdeb = 0    // eftdeb
	if proddftl.eftreq.isNull() set proddftl.eftreq = 0    // eftreq
	if proddftl.emplben.isNull() set proddftl.emplben = 0  // emplben
	if proddftl.entf.isNull() set proddftl.entf = 0        // entf
	if proddftl.epa.isNull() set proddftl.epa = 0          // epa
	if proddftl.flat.isNull() set proddftl.flat = 0        // flat
	if proddftl.fpaf.isNull() set proddftl.fpaf = 0        // fpaf
	if proddftl.genprjrep.isNull() set proddftl.genprjrep = 0 // genprjrep
	if proddftl.icap.isNull() set proddftl.icap = 0        // icap
	if proddftl.intcap.isNull() set proddftl.intcap = 0    // intcap
	if proddftl.ipd.isNull() set proddftl.ipd = 0          // ipd
	if proddftl.iplcf.isNull() set proddftl.iplcf = 0      // iplcf
	if proddftl.ircb.isNull() set proddftl.ircb = 0        // ircb
	if proddftl.irp.isNull() set proddftl.irp = 0          // irp
	if proddftl.lchgnoto.isNull() set proddftl.lchgnoto = 0 // lchgnoto
	if proddftl.mdf.isNull() set proddftl.mdf = 0          // mdf
	if proddftl.paf.isNull() set proddftl.paf = 0          // paf
	if proddftl.pbi.isNull() set proddftl.pbi = 0          // pbi
	if proddftl.peba.isNull() set proddftl.peba = 0        // peba
	if proddftl.piacm.isNull() set proddftl.piacm = 0      // piacm
	if proddftl.pldf.isNull() set proddftl.pldf = 0        // pldf
	if proddftl.ppf.isNull() set proddftl.ppf = 1          // ppf
	if proddftl.ptf.isNull() set proddftl.ptf = 0          // ptf
	if proddftl.raclc.isNull() set proddftl.raclc = 0      // raclc
	if proddftl.raclf.isNull() set proddftl.raclf = 0      // raclf
	if proddftl.rcbind.isNull() set proddftl.rcbind = 0    // rcbind
	if proddftl.regcc.isNull() set proddftl.regcc = 0      // regcc
	if proddftl.revf.isNull() set proddftl.revf = 0        // revf
	if proddftl.rfmo.isNull() set proddftl.rfmo = 0        // rfmo
	if proddftl.rpidc.isNull() set proddftl.rpidc = 0      // rpidc
	if proddftl.rpmo.isNull() set proddftl.rpmo = 0        // rpmo
	if proddftl.segments.isNull() set proddftl.segments = 0 // segments
	if proddftl.sibf.isNull() set proddftl.sibf = 0        // sibf
	if proddftl.smet.isNull() set proddftl.smet = 0        // smet
	if proddftl.srcbind.isNull() set proddftl.srcbind = 0  // srcbind
	if proddftl.swpel.isNull() set proddftl.swpel = 0      // swpel
	if proddftl.trunc.isNull() set proddftl.trunc = 0      // trunc
	if proddftl.wdlmtp.isNull() set proddftl.wdlmtp = 0    // wdlmtp
	quit


vreqn // Validate required data items

	type public RecordPRODDFTL proddftl

	if proddftl.addlchg.isNull() do vreqerr("ADDLCHG") quit
	if proddftl.adjcol.isNull() do vreqerr("ADJCOL") quit
	if proddftl.adjcrlmt.isNull() do vreqerr("ADJCRLMT") quit
	if proddftl.aflg.isNull() do vreqerr("AFLG") quit
	if proddftl.aipr.isNull() do vreqerr("AIPR") quit
	if proddftl.alprty.isNull() do vreqerr("ALPRTY") quit
	if proddftl.anlsys.isNull() do vreqerr("ANLSYS") quit
	if proddftl.aruf.isNull() do vreqerr("ARUF") quit
	if proddftl.auo.isNull() do vreqerr("AUO") quit
	if proddftl.avcrlmt.isNull() do vreqerr("AVCRLMT") quit
	if proddftl.bcapint.isNull() do vreqerr("BCAPINT") quit
	if proddftl.bloff.isNull() do vreqerr("BLOFF") quit
	if proddftl.bmet.isNull() do vreqerr("BMET") quit
	if proddftl.bpocl.isNull() do vreqerr("BPOCL") quit
	if proddftl.cbf.isNull() do vreqerr("CBF") quit
	if proddftl.ccbind.isNull() do vreqerr("CCBIND") quit
	if proddftl.cdf.isNull() do vreqerr("CDF") quit
	if proddftl.chkeuro.isNull() do vreqerr("CHKEURO") quit
	if proddftl.chkiss.isNull() do vreqerr("CHKISS") quit
	if proddftl.cintbnp.isNull() do vreqerr("CINTBNP") quit
	if proddftl.cls.isNull() do vreqerr("CLS") quit
	if proddftl.collimpr.isNull() do vreqerr("COLLIMPR") quit
	if proddftl.comm.isNull() do vreqerr("COMM") quit
	if proddftl.cpf.isNull() do vreqerr("CPF") quit
	if proddftl.custom1.isNull() do vreqerr("CUSTOM1") quit
	if proddftl.custom2.isNull() do vreqerr("CUSTOM2") quit
	if proddftl.custom3.isNull() do vreqerr("CUSTOM3") quit
	if proddftl.dmndln.isNull() do vreqerr("DMNDLN") quit
	if proddftl.drf.isNull() do vreqerr("DRF") quit
	if proddftl.dschpr.isNull() do vreqerr("DSCHPR") quit
	if proddftl.dxsi.isNull() do vreqerr("DXSI") quit
	if proddftl.eftdd.isNull() do vreqerr("EFTDD") quit
	if proddftl.eftdeb.isNull() do vreqerr("EFTDEB") quit
	if proddftl.eftreq.isNull() do vreqerr("EFTREQ") quit
	if proddftl.emplben.isNull() do vreqerr("EMPLBEN") quit
	if proddftl.entf.isNull() do vreqerr("ENTF") quit
	if proddftl.epa.isNull() do vreqerr("EPA") quit
	if proddftl.flat.isNull() do vreqerr("FLAT") quit
	if proddftl.fpaf.isNull() do vreqerr("FPAF") quit
	if proddftl.genprjrep.isNull() do vreqerr("GENPRJREP") quit
	if proddftl.glsc.isNull() do vreqerr("GLSC") quit
	if proddftl.grp.isNull() do vreqerr("GRP") quit
	if proddftl.iacm.isNull() do vreqerr("IACM") quit
	if proddftl.iam.isNull() do vreqerr("IAM") quit
	if proddftl.icap.isNull() do vreqerr("ICAP") quit
	if proddftl.icm.isNull() do vreqerr("ICM") quit
	if proddftl.icpa.isNull() do vreqerr("ICPA") quit
	if proddftl.idp.isNull() do vreqerr("IDP") quit
	if proddftl.intcap.isNull() do vreqerr("INTCAP") quit
	if proddftl.ipd.isNull() do vreqerr("IPD") quit
	if proddftl.iplcf.isNull() do vreqerr("IPLCF") quit
	if proddftl.ircb.isNull() do vreqerr("IRCB") quit
	if proddftl.irp.isNull() do vreqerr("IRP") quit
	if proddftl.lchgnoto.isNull() do vreqerr("LCHGNOTO") quit
	if proddftl.mdf.isNull() do vreqerr("MDF") quit
	if proddftl.paf.isNull() do vreqerr("PAF") quit
	if proddftl.pap.isNull() do vreqerr("PAP") quit
	if proddftl.pas.isNull() do vreqerr("PAS") quit
	if proddftl.payacm.isNull() do vreqerr("PAYACM") quit
	if proddftl.pbi.isNull() do vreqerr("PBI") quit
	if proddftl.pcm.isNull() do vreqerr("PCM") quit
	if proddftl.pdag.isNull() do vreqerr("PDAG") quit
	if proddftl.peba.isNull() do vreqerr("PEBA") quit
	if proddftl.piacm.isNull() do vreqerr("PIACM") quit
	if proddftl.pldf.isNull() do vreqerr("PLDF") quit
	if proddftl.ppo.isNull() do vreqerr("PPO") quit
	if proddftl.ptf.isNull() do vreqerr("PTF") quit
	if proddftl.raclc.isNull() do vreqerr("RACLC") quit
	if proddftl.raclf.isNull() do vreqerr("RACLF") quit
	if proddftl.rcbind.isNull() do vreqerr("RCBIND") quit
	if proddftl.regcc.isNull() do vreqerr("REGCC") quit
	if proddftl.revf.isNull() do vreqerr("REVF") quit
	if proddftl.rfmo.isNull() do vreqerr("RFMO") quit
	if proddftl.rpidc.isNull() do vreqerr("RPIDC") quit
	if proddftl.rpmo.isNull() do vreqerr("RPMO") quit
	if proddftl.segments.isNull() do vreqerr("SEGMENTS") quit
	if proddftl.sibf.isNull() do vreqerr("SIBF") quit
	if proddftl.smet.isNull() do vreqerr("SMET") quit
	if proddftl.srcbind.isNull() do vreqerr("SRCBIND") quit
	if proddftl.swpel.isNull() do vreqerr("SWPEL") quit
	if proddftl.trunc.isNull() do vreqerr("TRUNC") quit
	if proddftl.wdlmtp.isNull() do vreqerr("WDLMTP") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPRODDFTL proddftl

	if proddftl.type.isNull() do vreqerr("TYPE") quit

	if 'vobj(proddftl,-100,49,"").order().isNull() do {
		if vx("IACM").exists(),proddftl.iacm.isNull() do vreqerr("IACM") quit
		if vx("ICM").exists(),proddftl.icm.isNull() do vreqerr("ICM") quit
		if vx("ARUF").exists(),proddftl.aruf.isNull() do vreqerr("ARUF") quit
		if vx("PAP").exists(),proddftl.pap.isNull() do vreqerr("PAP") quit
		if vx("IRCB").exists(),proddftl.ircb.isNull() do vreqerr("IRCB") quit
		if vx("CPF").exists(),proddftl.cpf.isNull() do vreqerr("CPF") quit
		if vx("PAS").exists(),proddftl.pas.isNull() do vreqerr("PAS") quit
		if vx("PDAG").exists(),proddftl.pdag.isNull() do vreqerr("PDAG") quit
		if vx("PCM").exists(),proddftl.pcm.isNull() do vreqerr("PCM") quit
		if vx("IDP").exists(),proddftl.idp.isNull() do vreqerr("IDP") quit
		if vx("IAM").exists(),proddftl.iam.isNull() do vreqerr("IAM") quit
		if vx("SIBF").exists(),proddftl.sibf.isNull() do vreqerr("SIBF") quit
	}
	if 'vobj(proddftl,-100,50,"").order().isNull() do {
		if vx("CLS").exists(),proddftl.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),proddftl.grp.isNull() do vreqerr("GRP") quit
		if vx("ANLSYS").exists(),proddftl.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("COMM").exists(),proddftl.comm.isNull() do vreqerr("COMM") quit
		if vx("REGCC").exists(),proddftl.regcc.isNull() do vreqerr("REGCC") quit
		if vx("GLSC").exists(),proddftl.glsc.isNull() do vreqerr("GLSC") quit
		if vx("CUSTOM1").exists(),proddftl.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),proddftl.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),proddftl.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("EMPLBEN").exists(),proddftl.emplben.isNull() do vreqerr("EMPLBEN") quit
	}
	if 'vobj(proddftl,-100,51,"").order().isNull() do {
		if vx("REVF").exists(),proddftl.revf.isNull() do vreqerr("REVF") quit
		if vx("PBI").exists(),proddftl.pbi.isNull() do vreqerr("PBI") quit
		if vx("ICPA").exists(),proddftl.icpa.isNull() do vreqerr("ICPA") quit
		if vx("ENTF").exists(),proddftl.entf.isNull() do vreqerr("ENTF") quit
	}
	if 'vobj(proddftl,-100,52,"").order().isNull() do {
		if vx("TRUNC").exists(),proddftl.trunc.isNull() do vreqerr("TRUNC") quit
	}
	if 'vobj(proddftl,-100,53,"").order().isNull() do {
		if vx("SWPEL").exists(),proddftl.swpel.isNull() do vreqerr("SWPEL") quit
		if vx("AIPR").exists(),proddftl.aipr.isNull() do vreqerr("AIPR") quit
		if vx("IPD").exists(),proddftl.ipd.isNull() do vreqerr("IPD") quit
	}
	if 'vobj(proddftl,-100,54,"").order().isNull() do {
		if vx("IPLCF").exists(),proddftl.iplcf.isNull() do vreqerr("IPLCF") quit
	}
	if 'vobj(proddftl,-100,56,"").order().isNull() do {
		if vx("RFMO").exists(),proddftl.rfmo.isNull() do vreqerr("RFMO") quit
		if vx("RPMO").exists(),proddftl.rpmo.isNull() do vreqerr("RPMO") quit
		if vx("ALPRTY").exists(),proddftl.alprty.isNull() do vreqerr("ALPRTY") quit
		if vx("CCBIND").exists(),proddftl.ccbind.isNull() do vreqerr("CCBIND") quit
		if vx("SRCBIND").exists(),proddftl.srcbind.isNull() do vreqerr("SRCBIND") quit
		if vx("RCBIND").exists(),proddftl.rcbind.isNull() do vreqerr("RCBIND") quit
	}
	if 'vobj(proddftl,-100,57,"").order().isNull() do {
		if vx("RPIDC").exists(),proddftl.rpidc.isNull() do vreqerr("RPIDC") quit
		if vx("FLAT").exists(),proddftl.flat.isNull() do vreqerr("FLAT") quit
	}
	if 'vobj(proddftl,-100,58,"").order().isNull() do {
		if vx("DRF").exists(),proddftl.drf.isNull() do vreqerr("DRF") quit
		if vx("FPAF").exists(),proddftl.fpaf.isNull() do vreqerr("FPAF") quit
		if vx("AUO").exists(),proddftl.auo.isNull() do vreqerr("AUO") quit
		if vx("INTCAP").exists(),proddftl.intcap.isNull() do vreqerr("INTCAP") quit
	}
	if 'vobj(proddftl,-100,60,"").order().isNull() do {
		if vx("PIACM").exists(),proddftl.piacm.isNull() do vreqerr("PIACM") quit
	}
	if 'vobj(proddftl,-100,61,"").order().isNull() do {
		if vx("CHKISS").exists(),proddftl.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CHKEURO").exists(),proddftl.chkeuro.isNull() do vreqerr("CHKEURO") quit
	}
	if 'vobj(proddftl,-100,62,"").order().isNull() do {
		if vx("EFTDEB").exists(),proddftl.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),proddftl.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("DSCHPR").exists(),proddftl.dschpr.isNull() do vreqerr("DSCHPR") quit
		if vx("EFTDD").exists(),proddftl.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("SMET").exists(),proddftl.smet.isNull() do vreqerr("SMET") quit
	}
	if 'vobj(proddftl,-100,64,"").order().isNull() do {
		if vx("PAF").exists(),proddftl.paf.isNull() do vreqerr("PAF") quit
		if vx("MDF").exists(),proddftl.mdf.isNull() do vreqerr("MDF") quit
		if vx("EPA").exists(),proddftl.epa.isNull() do vreqerr("EPA") quit
		if vx("LCHGNOTO").exists(),proddftl.lchgnoto.isNull() do vreqerr("LCHGNOTO") quit
	}
	if 'vobj(proddftl,-100,71,"").order().isNull() do {
		if vx("PAYACM").exists(),proddftl.payacm.isNull() do vreqerr("PAYACM") quit
		if vx("PPO").exists(),proddftl.ppo.isNull() do vreqerr("PPO") quit
		if vx("PLDF").exists(),proddftl.pldf.isNull() do vreqerr("PLDF") quit
	}
	if 'vobj(proddftl,-100,80,"").order().isNull() do {
		if vx("ADJCRLMT").exists(),proddftl.adjcrlmt.isNull() do vreqerr("ADJCRLMT") quit
	}
	if 'vobj(proddftl,-100,85,"").order().isNull() do {
		if vx("AFLG").exists(),proddftl.aflg.isNull() do vreqerr("AFLG") quit
	}
	if 'vobj(proddftl,-100,101,"").order().isNull() do {
		if vx("DXSI").exists(),proddftl.dxsi.isNull() do vreqerr("DXSI") quit
		if vx("BMET").exists(),proddftl.bmet.isNull() do vreqerr("BMET") quit
		if vx("PEBA").exists(),proddftl.peba.isNull() do vreqerr("PEBA") quit
		if vx("BPOCL").exists(),proddftl.bpocl.isNull() do vreqerr("BPOCL") quit
		if vx("BLOFF").exists(),proddftl.bloff.isNull() do vreqerr("BLOFF") quit
		if vx("PTF").exists(),proddftl.ptf.isNull() do vreqerr("PTF") quit
	}
	if 'vobj(proddftl,-100,433,"").order().isNull() do {
		if vx("WDLMTP").exists(),proddftl.wdlmtp.isNull() do vreqerr("WDLMTP") quit
		if vx("CINTBNP").exists(),proddftl.cintbnp.isNull() do vreqerr("CINTBNP") quit
		if vx("AVCRLMT").exists(),proddftl.avcrlmt.isNull() do vreqerr("AVCRLMT") quit
		if vx("ICAP").exists(),proddftl.icap.isNull() do vreqerr("ICAP") quit
	}
	if 'vobj(proddftl,-100,435,"").order().isNull() do {
		if vx("ADDLCHG").exists(),proddftl.addlchg.isNull() do vreqerr("ADDLCHG") quit
	}
	if 'vobj(proddftl,-100,449,"").order().isNull() do {
		if vx("CBF").exists(),proddftl.cbf.isNull() do vreqerr("CBF") quit
		if vx("CDF").exists(),proddftl.cdf.isNull() do vreqerr("CDF") quit
		if vx("IRP").exists(),proddftl.irp.isNull() do vreqerr("IRP") quit
	}
	if 'vobj(proddftl,-100,453,"").order().isNull() do {
		if vx("BCAPINT").exists(),proddftl.bcapint.isNull() do vreqerr("BCAPINT") quit
	}
	if 'vobj(proddftl,-100,461,"").order().isNull() do {
		if vx("GENPRJREP").exists(),proddftl.genprjrep.isNull() do vreqerr("GENPRJREP") quit
	}
	if 'vobj(proddftl,-100,465,"").order().isNull() do {
		if vx("ADJCOL").exists(),proddftl.adjcol.isNull() do vreqerr("ADJCOL") quit
		if vx("COLLIMPR").exists(),proddftl.collimpr.isNull() do vreqerr("COLLIMPR") quit
		if vx("RACLF").exists(),proddftl.raclf.isNull() do vreqerr("RACLF") quit
		if vx("RACLC").exists(),proddftl.raclc.isNull() do vreqerr("RACLC") quit
	}
	if 'vobj(proddftl,-100,469,"").order().isNull() do {
		if vx("DMNDLN").exists(),proddftl.dmndln.isNull() do vreqerr("DMNDLN") quit
	}
	if 'vobj(proddftl,-100,471,"").order().isNull() do {
		if vx("SEGMENTS").exists(),proddftl.segments.isNull() do vreqerr("SEGMENTS") quit
	}
		if vx("ADDLCHG").exists(),proddftl.addlchg.isNull() do vreqerr("ADDLCHG") quit
		if vx("ADJCOL").exists(),proddftl.adjcol.isNull() do vreqerr("ADJCOL") quit
		if vx("ADJCRLMT").exists(),proddftl.adjcrlmt.isNull() do vreqerr("ADJCRLMT") quit
		if vx("AFLG").exists(),proddftl.aflg.isNull() do vreqerr("AFLG") quit
		if vx("AIPR").exists(),proddftl.aipr.isNull() do vreqerr("AIPR") quit
		if vx("ALPRTY").exists(),proddftl.alprty.isNull() do vreqerr("ALPRTY") quit
		if vx("ANLSYS").exists(),proddftl.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("ARUF").exists(),proddftl.aruf.isNull() do vreqerr("ARUF") quit
		if vx("AUO").exists(),proddftl.auo.isNull() do vreqerr("AUO") quit
		if vx("AVCRLMT").exists(),proddftl.avcrlmt.isNull() do vreqerr("AVCRLMT") quit
		if vx("BCAPINT").exists(),proddftl.bcapint.isNull() do vreqerr("BCAPINT") quit
		if vx("BLOFF").exists(),proddftl.bloff.isNull() do vreqerr("BLOFF") quit
		if vx("BMET").exists(),proddftl.bmet.isNull() do vreqerr("BMET") quit
		if vx("BPOCL").exists(),proddftl.bpocl.isNull() do vreqerr("BPOCL") quit
		if vx("CBF").exists(),proddftl.cbf.isNull() do vreqerr("CBF") quit
		if vx("CCBIND").exists(),proddftl.ccbind.isNull() do vreqerr("CCBIND") quit
		if vx("CDF").exists(),proddftl.cdf.isNull() do vreqerr("CDF") quit
		if vx("CHKEURO").exists(),proddftl.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKISS").exists(),proddftl.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CINTBNP").exists(),proddftl.cintbnp.isNull() do vreqerr("CINTBNP") quit
		if vx("CLS").exists(),proddftl.cls.isNull() do vreqerr("CLS") quit
		if vx("COLLIMPR").exists(),proddftl.collimpr.isNull() do vreqerr("COLLIMPR") quit
		if vx("COMM").exists(),proddftl.comm.isNull() do vreqerr("COMM") quit
		if vx("CPF").exists(),proddftl.cpf.isNull() do vreqerr("CPF") quit
		if vx("CUSTOM1").exists(),proddftl.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),proddftl.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),proddftl.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("DMNDLN").exists(),proddftl.dmndln.isNull() do vreqerr("DMNDLN") quit
		if vx("DRF").exists(),proddftl.drf.isNull() do vreqerr("DRF") quit
		if vx("DSCHPR").exists(),proddftl.dschpr.isNull() do vreqerr("DSCHPR") quit
		if vx("DXSI").exists(),proddftl.dxsi.isNull() do vreqerr("DXSI") quit
		if vx("EFTDD").exists(),proddftl.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("EFTDEB").exists(),proddftl.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),proddftl.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("EMPLBEN").exists(),proddftl.emplben.isNull() do vreqerr("EMPLBEN") quit
		if vx("ENTF").exists(),proddftl.entf.isNull() do vreqerr("ENTF") quit
		if vx("EPA").exists(),proddftl.epa.isNull() do vreqerr("EPA") quit
		if vx("FLAT").exists(),proddftl.flat.isNull() do vreqerr("FLAT") quit
		if vx("FPAF").exists(),proddftl.fpaf.isNull() do vreqerr("FPAF") quit
		if vx("GENPRJREP").exists(),proddftl.genprjrep.isNull() do vreqerr("GENPRJREP") quit
		if vx("GLSC").exists(),proddftl.glsc.isNull() do vreqerr("GLSC") quit
		if vx("GRP").exists(),proddftl.grp.isNull() do vreqerr("GRP") quit
		if vx("IACM").exists(),proddftl.iacm.isNull() do vreqerr("IACM") quit
		if vx("IAM").exists(),proddftl.iam.isNull() do vreqerr("IAM") quit
		if vx("ICAP").exists(),proddftl.icap.isNull() do vreqerr("ICAP") quit
		if vx("ICM").exists(),proddftl.icm.isNull() do vreqerr("ICM") quit
		if vx("ICPA").exists(),proddftl.icpa.isNull() do vreqerr("ICPA") quit
		if vx("IDP").exists(),proddftl.idp.isNull() do vreqerr("IDP") quit
		if vx("INTCAP").exists(),proddftl.intcap.isNull() do vreqerr("INTCAP") quit
		if vx("IPD").exists(),proddftl.ipd.isNull() do vreqerr("IPD") quit
		if vx("IPLCF").exists(),proddftl.iplcf.isNull() do vreqerr("IPLCF") quit
		if vx("IRCB").exists(),proddftl.ircb.isNull() do vreqerr("IRCB") quit
		if vx("IRP").exists(),proddftl.irp.isNull() do vreqerr("IRP") quit
		if vx("LCHGNOTO").exists(),proddftl.lchgnoto.isNull() do vreqerr("LCHGNOTO") quit
		if vx("MDF").exists(),proddftl.mdf.isNull() do vreqerr("MDF") quit
		if vx("PAF").exists(),proddftl.paf.isNull() do vreqerr("PAF") quit
		if vx("PAP").exists(),proddftl.pap.isNull() do vreqerr("PAP") quit
		if vx("PAS").exists(),proddftl.pas.isNull() do vreqerr("PAS") quit
		if vx("PAYACM").exists(),proddftl.payacm.isNull() do vreqerr("PAYACM") quit
		if vx("PBI").exists(),proddftl.pbi.isNull() do vreqerr("PBI") quit
		if vx("PCM").exists(),proddftl.pcm.isNull() do vreqerr("PCM") quit
		if vx("PDAG").exists(),proddftl.pdag.isNull() do vreqerr("PDAG") quit
		if vx("PEBA").exists(),proddftl.peba.isNull() do vreqerr("PEBA") quit
		if vx("PIACM").exists(),proddftl.piacm.isNull() do vreqerr("PIACM") quit
		if vx("PLDF").exists(),proddftl.pldf.isNull() do vreqerr("PLDF") quit
		if vx("PPO").exists(),proddftl.ppo.isNull() do vreqerr("PPO") quit
		if vx("PTF").exists(),proddftl.ptf.isNull() do vreqerr("PTF") quit
		if vx("RACLC").exists(),proddftl.raclc.isNull() do vreqerr("RACLC") quit
		if vx("RACLF").exists(),proddftl.raclf.isNull() do vreqerr("RACLF") quit
		if vx("RCBIND").exists(),proddftl.rcbind.isNull() do vreqerr("RCBIND") quit
		if vx("REGCC").exists(),proddftl.regcc.isNull() do vreqerr("REGCC") quit
		if vx("REVF").exists(),proddftl.revf.isNull() do vreqerr("REVF") quit
		if vx("RFMO").exists(),proddftl.rfmo.isNull() do vreqerr("RFMO") quit
		if vx("RPIDC").exists(),proddftl.rpidc.isNull() do vreqerr("RPIDC") quit
		if vx("RPMO").exists(),proddftl.rpmo.isNull() do vreqerr("RPMO") quit
		if vx("SEGMENTS").exists(),proddftl.segments.isNull() do vreqerr("SEGMENTS") quit
		if vx("SIBF").exists(),proddftl.sibf.isNull() do vreqerr("SIBF") quit
		if vx("SMET").exists(),proddftl.smet.isNull() do vreqerr("SMET") quit
		if vx("SRCBIND").exists(),proddftl.srcbind.isNull() do vreqerr("SRCBIND") quit
		if vx("SWPEL").exists(),proddftl.swpel.isNull() do vreqerr("SWPEL") quit
		if vx("TRUNC").exists(),proddftl.trunc.isNull() do vreqerr("TRUNC") quit
		if vx("WDLMTP").exists(),proddftl.wdlmtp.isNull() do vreqerr("WDLMTP") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODDFTL","MSG",1767,"PRODDFTL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("GLSC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IDP").exists()!vx("SUBPLN").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRP").exists()!vx("CBF").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PCHM").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("WDLMTP").exists()!vx("COLLIMPR").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordPRODDFTL proddftl
	if vx("").order().isNull() do AUDIT^UCUTILN(proddftl,.vx(),10,"|") quit
	if vx("DICO").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IROPT").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(proddftl,.vx(),10,"|")
	quit


vad1 // Trigger AFTER_DELETE - Remove Prodctl after deleting prod type

	type public RecordPRODDFTL proddftl
	
	/*
	  ------------------- Revision History ------------------------------------------------
	
	  02/17/05 - Kini - 13991
		     Modified to follow correct PSL sintax and avoid undefined
		     XTYPE. 		     		
	*/

	do Db.delete("PRODCTL","TYPE=:proddftl.type")

	quit
	

vai1 // Trigger AFTER_INSERT - Validate fields

	type public RecordPRODDFTL proddftl
	/*
	  ---- Revision History ------------------------------------------------

	   02/17/05 - Kini - 13991	
		Modified to replace UTBLGLSCX index table with UTBLGLSC
		since UTBLGLSCX has been obsoleted.
		Cleaned up to comply with DBI standards.	
	
	   11/01/01 - BECKERW - 47203
		Corrected check on DPEF1 to be '="" instead of ="".

	   12/27/00 - RAJARAMD - 42288
		Added code to the trigger to check if the Loan Withdrawl
		Limit Processing Flag and the Collateral Credit Limit
		Processing flag are both enabled, processing will cease
		and error message 4648 will be returned.            
	
	   09/28/00 - HALPINJ - 41961
		Modified the check of PCM to validate frequencies. The
		check was '$E(PCM,2)'=1, it should be $E(PCM,2)'=1.  Move
		new of PCM to top of trigger.  Changed $$NJD^UFRE to EDT^UFRE
		in section DIST1FRE.  This is the correct call, the other call
		caused an undefined error.

	   03/15/00 - KELLYP - 35505
		Added code for an edit check on the Interest Reserve Processing
		flag (PRODDFTL.IRP).  This flag may not be enabled if the 
		Commitment Billing flag (PRODDFTL.CBF) is disabled.

	   05/10/99 - PENDURTHIA - 29242
		Added code to the trigger so it would check only the loans
		with and Interest Determination Point of 0 will be allowed
		to use Subsidy Processing.
	
	*/	
	
	type public Boolean ER
	
	// Invalid GL set code 
	if 'Db.isDefined("UTBLGLSC",":proddftl.glsc") do Runtime.setErrSTBLER("PRODDFTL","INVGLSC") quit:ER 

	/*
	   Check that when using undisbursed processing, add-on/discount 
	   interest processing is not used.
	*/
	do { quit:ER 
		if 'proddftl.aruf quit  // Advances to Reduce Undisb Flag

		// May not combine undisbursed processing and add-on/discount interest processing
		if +proddftl.iam do Runtime.setErrMSG("PRODDFTL",1699) if ER quit 

		// Credit balance loans cannot use undisbursed processing	
		if 'proddftl.trb do Runtime.setErrSTBLER("PRODDFTL","LARUFTRB") quit:ER 
		}
	
	/*
	   Ensures that billing offset entered is either the characters "1P",
	   or (if numeric) greater than zero.
	*/
	do { quit:ER 
		if '((proddftl.bloff)?.N) ! (proddftl.bloff="1P")) quit 
		// Billing offset must be greater than zero
		if ((proddftl.bloff)?.N) , (proddftl.bloff)'>0 do Runtime.setErrSTBLER("PRODDFTL","LNBLOFF4") quit:ER 
		}
	
	/*
	   Cannot use processing for both Collateral Credit Limit and Loan 
	   Withdrawal Limit
	*/	   
	if (proddftl.wdlmtp) , (proddftl.collimpr) do Runtime.setErrMSG("PRODDFTL",4648) if ER quit 


	// Verify frequency fields
	type String ELETAB
	
	do TBL1^LNFEEU(.ELETAB) quit:ER 

	do DIST1FRE(.proddftl) quit:ER 

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:proddftl.type")
	
	// Entry in first distribution field is prohibited if payment schedule loan
	if (prodctl.dpef1'="") , (proddftl.dist1fre="*") do Runtime.setErrMSG("PRODDFTL",967) if ER quit

	do DIST2FRE(.proddftl) if ER quit 
	do DIST3FRE(.proddftl) quit:ER 
	do DIST4FRE(.proddftl) quit:ER 

	// Unscheduled prin pmt penalty method required if prepmt penalty plan defined
	if (proddftl.ppdpl'="") ,(proddftl.uppen="") do Runtime.setErrMSG("PRODDFTL",2458) if ER quit
	
	/*
	   Verify that there is no add-on/discount interest processing if using
	   undisbursed processing.
	*/
	// May not combine undisbursed processing and add-on/discount interest processing
	if (proddftl.iam) , (proddftl.aruf) do Runtime.setErrMSG("PRODDFTL",1699) if ER quit 
	
	/*
	   Verify that the collection method is 0 if interest determination
	   point is 1.
	*/
	// Collection method must be zero (arrears) for int/div determined at payment
	if (proddftl.icm) , (proddftl.idp=1) do Runtime.setErrMSG("PRODDFTL",577) if ER quit 
	
	/*
	   Verify that only loans with an Interest Determination Point of 0 will
	   be allowed to use subsidy processing.
	*/
	// To use subsidiary processing, only loans with interest determination point of 0 will be allowed
	if (proddftl.idp) , (proddftl.subpln'="") do Runtime.setErrMSG("PRODDFTL",3909) if ER quit
	
	// Collection method must be zero (arrears) for int/div determined at payment
	if (proddftl.idp=1) , (proddftl.icm) do Runtime.setErrMSG("PRODDFTL",577) if ER quit 
	
	// Rate ceiling must be greater than or equal to the int/div rate
	if (prodctl.intc) , (proddftl.irn) , (prodctl.intc < proddftl.irn) do Runtime.setErrMSG("PRODDFTL",2309) if ER quit 
	
	// Rate floor must be less than or equal to the int/div rate
	if (prodctl.intf) , (proddftl.irn) , (prodctl.intf > proddftl.irn) do Runtime.setErrMSG("PRODDFTL",2311) if ER quit 
	
	/*
	   Verify that interest change frequency corresponds with the master
	   frequency if the payment calc method calls for calculation of 
	   interest at billing.
	*/
	do FREQ^LTYFUNCS(proddftl.intfre,proddftl.dist1fre,proddftl.pcm) quit:ER 
	
	do { quit:ER 
		if proddftl.irn = "" quit 
		// Int/Div rate must be between rate ceiling and floor
		if (prodctl.intc) , (proddftl.irn > prodctl.intc) do Runtime.setErrMSG("PRODDFTL",1256) if ER quit
		if (prodctl.intf) , (proddftl.irn < prodctl.intf) do Runtime.setErrMSG("PRODDFTL",1256) if ER quit 
		}
	
	// Interest Calc Period Frequency
	type String X = proddftl.icpf
	
	do ICPF^UCO
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	
	/*
	   Check that when using undisbursed processing, add-on/discount
	   interest processing is not used.
	*/

	if proddftl.aruf do { quit:ER 
		// May not combine undisbursed processing and add-on/discount interest processing
		if +proddftl.iam do Runtime.setErrMSG("PRODDFTL",1699) if ER quit
		//  Credit balance loans cannot use undisbursed processing
		if 'proddftl.trb do Runtime.setErrSTBLER("PRODDFTL","LARUFTRB") quit:ER 
		}
	
	// Cannot enable Interest Reserve Processing if Commitment Billing is disabled
	if (proddftl.irp) , ('proddftl.cbf) do Runtime.setErrMSG("PRODDFTL",4281) if ER quit

	// Minimum credit limit may not exceed maximum
	if (proddftl.maxbal'="") , (proddftl.mincl) , (proddftl.mincl > proddftl.maxbal) do Runtime.setErrMSG("PRODDFTL",1730) if ER quit 
	if (proddftl.mincl'="") , (proddftl.maxbal) , (proddftl.mincl > proddftl.maxbal) do Runtime.setErrMSG("PRODDFTL",1730) if ER quit 
		
	// Incremental debit amount must be a factor of the incremental
	if (proddftl.incdr) , (prodctl.odsitr) , (prodctl.odsitr#proddftl.incdr) do Runtime.setErrSTBLER("PRODDFTL","ODSITR") quit:ER 
	
	// Verifies that a PAT G/L offset code is entered for interim student loan products.

	// Required for all interim student loan product types
	if (prodctl.defal=1) , (proddftl.idpf=1) , (prodctl.patglo="") do Runtime.setErrMSG("PRODDFTL",2389) quit:ER 
	// Offset code only used for interim student loan product types
	if ('prodctl.defal) , (prodctl.patglo'="") do Runtime.setErrMSG("PRODDFTL",2089) quit:ER 
	
	// Verifies that a PAT source is entered for all interim student loan products.

	// Required for all interim student loan product types
	if (prodctl.defal=1) , (proddftl.idpf=1) , (prodctl.patsrc="") do Runtime.setErrMSG("PRODDFTL",2389) if ER quit 
	// Source only used for interim student loan product types
	if ('prodctl.defal) , (prodctl.patsrc'="") do Runtime.setErrMSG("PRODDFTL",2515) if ER quit
	
	/*
	   Verifies that payment change frequency corresponds with the master
	   frequency if PCM calls for calculation of interest at billing.
	*/
	do FREQ^LTYFUNCS(proddftl.pcfre,proddftl.dist1fre,proddftl.pcm)
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	
	/*
	   Verifies that re-amoritization frequency corresponds with the master
	   frequency if PCM cals for interest calculated at billing.
	*/	
	do FREQ^LTYFUNCS(proddftl.rafre,proddftl.dist1fre,proddftl.pcm)
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	
	// Credit balance loans cannot use undisbursed processing
	if ('proddftl.trb) , (proddftl.aruf) do Runtime.setErrSTBLER("PRODDFTL","LARUFTRB") quit:ER 
	
	// Validate Index field
	set X=proddftl.index
	do ^UINDX
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit
	
	// Int/Div offset requires an index
	if (proddftl.intoff'="") , (proddftl.index="") do Runtime.setErrXBAD("PRODDFTL","INDEX15") quit:ER 
	
	// Required if payment change method is equal to 2 or 3
	if (proddftl.ppinc="") , ((proddftl.pchm=2) ! (proddftl.pchm=3)) do Runtime.setErrSTBLER("PRODDFTL","LNGPMREQ") quit:ER 
	if (proddftl.numch="") , ((proddftl.pchm=2) ! (proddftl.pchm=3)) do Runtime.setErrSTBLER("PRODDFTL","LNGPMREQ") quit:ER 
	if (proddftl.caf="") , ((proddftl.pchm=2) ! (proddftl.pchm=3)) do Runtime.setErrSTBLER("PRODDFTL","LNGPMREQ") quit:ER 
	
	quit 

	
DIST1FRE(RecordPRODDFTL proddftl) //  Verify Distribution 1 Frequency
	
	/*
	   Verify that the following frequencies correspond with the master 
	   frequency:
	   payment frequency 2,3 and 4, interest and payment change and 
	   reamoritization
	*/

	do { quit:ER 

		quit:((proddftl.dist1fre="") ! (proddftl.dist1fre="*"))

		type public Boolean ER
		type Date JD,NJD
		type String D1,F2,FRE,P1,P2,X			

		set X=proddftl.dist1fre
		do EDT^UFRE			
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

		set D1="" 
		set FRE="-"_X 
		set JD=%SystemDate 
		do ^UFRE set:'ER D1=NJD
		set P1=$$^MSG(4209) 	                 //master payment

		if proddftl.dist2fre'="" do {
			set F2=proddftl.dist2fre 
			set P2=$$^MSG(6975) 
			do VER^LNUSFV(D1,X,P1,"",F2,P2)  //due frequency (2)
			}		
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit

		if proddftl.dist3fre'="" do {
			set F2=proddftl.dist3fre 
			set P2=$$^MSG(6976) 
			do VER^LNUSFV(D1,X,P1,"",F2,P2)  //due frequency (3)
			}		
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit

		if proddftl.dist4fre'="" do {
			set F2=proddftl.dist4fre 
			set P2=$$^MSG(6977) 
			do VER^LNUSFV(D1,X,P1,"",F2,P2)  //due frequency (4)
			}		
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

		if '((proddftl.pcm).length()) quit
		type RecordSTBLPCM stblpcm=Db.getRecord("STBLPCM",":proddftl.pcm")
		if (stblpcm.pcmp).extract(2) '= 1 quit     // Dates need not correspond.

		if proddftl.intfre'="" do {
			set F2=proddftl.intfre 
			set P2=$$^MSG(4208) 
			do VER^LNUSFV(D1,X,P1,"",F2,P2)   //interest change
			}		
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

		if proddftl.pcfre'="" do {
			set F2=proddftl.pcfre 
			set P2=$$^MSG(4210) 
			do VER^LNUSFV(D1,X,P1,"",F2,P2)   //payment change
			}		
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit

		if proddftl.rafre'="" do {
			set F2=proddftl.rafre 
			set P2="re-amortization" 
			do VER^LNUSFV(D1,X,P1,"",F2,P2)
			}		
		if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	}
		
	quit 

	
DIST2FRE(RecordPRODDFTL proddftl) //  Verify Distribution 2 Frequency
	
	type public Boolean ER
	
	// Verifies that payment frequency 2 corresponds with the master frequency.
	
	do FREQ^LTYFUNCS(proddftl.dist2fre,proddftl.dist1fre)
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	
	// Verifies that payment frequency 3 corresponds with the master frequency.
	
	do FREQ^LTYFUNCS(proddftl.dist3fre,proddftl.dist1fre)
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	
	// Verifies that payment frequency 4 corresponds with the master frequency.
	
	do FREQ^LTYFUNCS(proddftl.dist4fre,proddftl.dist1fre)
	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 
	
	quit 

	
DIST3FRE(RecordPRODDFTL proddftl)

	// Verifies that payment frequency 3 corresponds with the master frequency.

	type public Boolean ER
	
	type String X = proddftl.dist3fre
	
	quit:'((X).length())
	
	if '((proddftl.dist1fre).length()) ! (proddftl.dist1fre="*") quit 

	do EDT^UFRE if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

	type Date JD,NJD
	type String D1,F1,FRE,NGFRE,P1,P2		

	set F1=proddftl.dist1fre
	set NGFRE="-"_F1 
	set D1=""
	set FRE=NGFRE 
	set JD=%SystemDate 
	do ^UFRE set:'ER D1=NJD
	set P1=$$^MSG(4209)                    		//master payment
	set P2=$$^MSG(6976)                    		//due frequency (3)
	do VER^LNUSFV(D1,proddftl.dist1fre,P1,"",X,P2)

	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

	quit 

	
DIST4FRE(RecordPRODDFTL proddftl)

	type public Boolean ER
	
	type String X = proddftl.dist4fre

	quit:'((X).length()) 
	
	if '((proddftl.dist1fre).length()) ! (proddftl.dist1fre="*") quit 

	do EDT^UFRE if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

	type Date JD,NJD
	type String D1,F1,FRE,NGFRE,P1,P2
	
	set F1=proddftl.dist1fre
	set NGFRE="-"_F1 
	set D1=""
	set FRE=NGFRE 
	set JD=%SystemDate 
	do ^UFRE set:'ER D1=NJD
	set P1=$$^MSG(4209)                    		//master payment
	set P2=$$^MSG(6977)                    		//due frequency (4)
	do VER^LNUSFV(D1,proddftl.dist1fre,P1,"",X,P2)

	if ER do Runtime.setErrMSG("PRODDFTL",3333,"RM") if ER quit 

	quit 
	
	

vau1 // Trigger AU_GLSC - After update valid G/L set code

	type public RecordPRODDFTL proddftl
								/*
								--- Revision History --------------------------------------------------

	  02/17/05 - Kini - 13991	
		   Modified to replace UTBLGLSCX index table with UTBLGLSC
		   since UTBLGLSCX has been obsoleted.    

								-----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	
	// Invalid GL set code
	if 'Db.isDefined("UTBLGLSC",":proddftl.glsc") do Runtime.setErrSTBLER("PRODDFTL","INVGLSC") quit:ER 

	quit
	

vau2 // Trigger AU_IDP - After update valid IDP code.

	type public RecordPRODDFTL proddftl
	if proddftl.idp,proddftl.subpln'="" do Runtime.setErrMSG("PRODDFTL",3909) if ER quit
	quit
	

vau3 // Trigger AU_IRP - After Update Interest Reserve Processing

	type public RecordPRODDFTL proddftl
	/* 
		This trigger verifies that the Interest Reserve Processing flag 
		(PRODDFTL.IRP) is not enabled if the Commitment Billing flag (PRODDFTL.CBF)
		is disabled.
	*/
	
	if proddftl.irp,'proddftl.cbf do Runtime.setErrMSG("PRODDFTL",4281) if ER quit
	quit

vau4 // Trigger AU_ODCC - After Update Overdraft/Cash Credit 

	type public RecordPRODDFTL proddftl
	/*
	   ---Revision History------------------------------------------------
	   12/27/00 - RAJARAMD - 42288
		Created this trigger. Added code to the trigger to check
		if the Loan Withdrawl Limit Processing Flag and the
		Collateral Credit Limit Processing flag are both enabled,
		processing will cease and error message 4648 will be returned.
	*/
	/*
	   Cannot use processing for both Collateral Credit Limit and Loan
	   Withdrawal Limit.
	*/
	if proddftl.wdlmtp,proddftl.collimpr do Runtime.setErrMSG("PRODDFTL",4648) if ER quit	            
	quit
	

vau5 // Trigger AU_PCHM - After Update - Payment Change Method

	type public RecordPRODDFTL proddftl
	/* ---- Revision History -------------------------------------------------
	
								11/19/02 - APPLEYARDM - CR 1729/ARQ 50943
																Created trigger to ensure that payment change method
																cannot be updated unless all required data items are
																defined.
	*/
	
	if proddftl.pchm=2!(proddftl.pchm=3) do { quit:ER
	
								// Error message "Required if payment change method equals 2 or 3"
								if proddftl.ppinc="" do Runtime.setErrSTBLER("PRODDFTL","LNGPMREQ") quit:ER
								if proddftl.numch="" do Runtime.setErrSTBLER("PRODDFTL","LNGPMREQ") quit:ER
								if proddftl.caf="" do Runtime.setErrSTBLER("PRODDFTL","LNGPMREQ") quit:ER
								}
	
	
	quit

vbd1 // Trigger BEFORE_DELETE - Before deleting a loan product

	type public RecordPRODDFTL proddftl
	/*
	  ---- Revision History ------------------------------------------------
	
	  03/28/06 - Sreeram P - CR19269
		     Added check that will invoke error message if user tries
		     to delete product type.
	  
	  10/21/99 - MOTENJ - 31126
		     Converted to PSL.            	   
	
	*/
		
		
	type ResultSet rs=Db.select("CID","ACN","TYPE=:proddftl.type")

	// Accounts exist with this product type. Cannot delete
	if 'rs.isEmpty() do Runtime.setErrMSG("PRODDFTL",2981) if ER quit
	
	
	if proddftl.cnt do Runtime.setErrMSG("PRODDFTL",2981) if ER quit 
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Creating a loan product record

	type public RecordPRODDFTL proddftl
	/*
	  ---- Revision History ------------------------------------------------
	   05/23/06 - GIRIDHAL - CR21588
	   	Modified proddftl.alprty to be initialized to 0 instead
	   	of ""
	   			
	   12/30/03 - CARROLLJ - CR7658
		Added #ACCEPT prior to xecute command.

	   02/04/00 - RAJARAMD - 35311:008
	  	Commented out the following line:
		if proddftl.lfpc="" set proddftl.lfpc=" ".          

	
	   12/16/99 - RAJARAMD - 36170
	   	Added appropriate file names before the data items ICAP and 
		DXSI.         

	   03/16/99 - SCOTTC - 31431 
		Populate column DICO based on entry in
	    	corresponding column IROPT.
	
	*/
	
	new X,XTYPE
	set XTYPE=proddftl.type
	
	/*
	   PRODCTL and PRODDFTL can not be out of sync for grp,cls and TRB
	   Override whatever was set by client and use PRODCTL values.
	*/

	set X=Db.getOneRow("CLS,GRP,TRB","PRODCTL","XTYPE")
	if X="" quit 
	set proddftl.cls=$P(X,$C(9),1)
	set proddftl.grp=$P(X,$C(9),2)
	set proddftl.trb=$P(X,$C(9),3)
	
	//if proddftl.lfpc="" set proddftl.lfpc=" "
	
	if 'proddftl.alpdue do {
		set proddftl.alprty=0
		set proddftl.alpmin=""
		}
	if proddftl.cusho=1 set proddftl.cushf=""
	if proddftl.cusho=0 set proddftl.cusha=""
	if proddftl.cushf?.N1"/".N do {

		new Z,X
		set X=proddftl.cushf
		// perform division
		#ACCEPT DATE=12/30/03;PGM=John Carroll
		set Z="S X="_X xecute Z
		set proddftl.cushf=$$^SCARND(X,0,,,9)
		}

	// Synchronize values between DICO & IROPT so that DICO might eventually obsoleted.
	
	// ARQ 36170 Added file name before data items icap and dxsi. 	
	if proddftl.icap!proddftl.dxsi do { quit:ER 
		set XDICO=proddftl.dico
		set XIROPT=proddftl.iropt
		if XDICO set proddftl.iropt=$S(XDICO="":0,XDICO="BL":1,XDICO="FR":2,XDICO="PC":3,XDICO="SP":4)
		if XIROPT set proddftl.dico=$S(XIROPT=0:"",XIROPT=1:"BL",XIROPT=2:"FR",XIROPT=3:"PC",XIROPT=4:"SP")
		}
	quit 
	
	

vbu1 // Trigger BU_DICO - BEFORE UPDATE TO POPULATE IROPT

	type public RecordPRODDFTL proddftl
	do proddftl.setAuditFlag(1)
	/*
	   Synchronize values between DICO & IROPT so that DICO might eventually be
	   obsoleted.
	*/

	set XDICO=proddftl.dico
	set proddftl.iropt=$S(XDICO="":"",XDICO="BL":1,XDICO="FR":2,XDICO="PC":3,XDICO="SP":4)
	quit
	

vbu2 // Trigger BU_IROPT - Update DICO based on IROPT's value

	type public RecordPRODDFTL proddftl
	do proddftl.setAuditFlag(1)
	/*
	-------------------------- Revision History -----------------------------------------------------------------------

	08/22/07 - Chhabris - CR28684
	  	   Added XIROPT=5:"BD" in the $select() statement. New
	   	   interest resolution option was added,5 - Capitalize at
	   	   the billing date.

	9/22/99 - JERUCHIMC - 34975
	   	  Include IROPT="" as one of the choices in $S command.
	   	  Synchronize values between DICO & IROPT so that DICO might
	   	  eventually be obsoleted.
	*/
	
	set XIROPT=proddftl.iropt
	set proddftl.dico=$S(XIROPT="":"",XIROPT=0:"",XIROPT=1:"BL",XIROPT=2:"FR",XIROPT=3:"PC",XIROPT=4:"SP",XIROPT=5:"BD")
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPRODDFTL proddftl

	if (%O = 2) do vload

	if vobj(proddftl,1).exists() do {

		if proddftl.acctname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ACCTNAME", vRM) quit
	}

	if vobj(proddftl,49).exists() do {

		set X = proddftl.anpp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ANPP", vRM) quit
		if '("01"[proddftl.ARUF) set vRM=$$^MSG(742,"L") do vdderr("ARUF", vRM) quit
		if '("01"[proddftl.CPF) set vRM=$$^MSG(742,"L") do vdderr("CPF", vRM) quit
		if proddftl.custnot.length()>10 set vRM = $$^MSG(1076,10) do vdderr("CUSTNOT", vRM) quit
		set X = proddftl.ddra if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DDRA", vRM) quit
		if proddftl.iacm.length()>2 set vRM = $$^MSG(1076,2) do vdderr("IACM", vRM) quit
		set X = proddftl.iam if 'X.isNull(),'Db.isDefined("STBLIAM","X") set vRM = $$^MSG(1485,X) do vdderr("IAM", vRM) quit
		set X = proddftl.icm if 'X.isNull(),'Db.isDefined("STBLICM","X") set vRM = $$^MSG(1485,X) do vdderr("ICM", vRM) quit
		set X = proddftl.idp if 'X.isNull(),'Db.isDefined("STBLIDP","X") set vRM = $$^MSG(1485,X) do vdderr("IDP", vRM) quit
		set X = proddftl.incdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INCDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.irb if 'X.isNull(),'Db.isDefined("STBLGRPI","X") set vRM = $$^MSG(1485,X) do vdderr("IRB", vRM) quit
		if '("01"[proddftl.IRCB) set vRM=$$^MSG(742,"L") do vdderr("IRCB", vRM) quit
		set X = proddftl.maxdrct if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXDRCT", vRM) quit
		set X = proddftl.minacr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MINACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.mindr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MINDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.minopt if 'X.isNull(),'Db.isDefined("STBLMINOPT","X") set vRM = $$^MSG(1485,X) do vdderr("MINOPT", vRM) quit
		set X = proddftl.odio if 'X.isNull(),'Db.isDefined("STBLODIO","X") set vRM = $$^MSG(1485,X) do vdderr("ODIO", vRM) quit
		set X = proddftl.odo if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("ODO", vRM) quit
		if proddftl.pap.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PAP", vRM) quit
		set X = proddftl.pas if 'X.isNull(),'Db.isDefined("LNPAS2","X") set vRM = $$^MSG(1485,X) do vdderr("PAS", vRM) quit
		if proddftl.pcm.length()>3 set vRM = $$^MSG(1076,3) do vdderr("PCM", vRM) quit
		if proddftl.pdag.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PDAG", vRM) quit
		set X = proddftl.pmtdelqr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PMTDELQR", vRM) quit
		if proddftl.pmtgrc.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PMTGRC", vRM) quit
		set X = proddftl.pmtmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMTMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftl.popt.length()>6 set vRM = $$^MSG(1076,6) do vdderr("POPT", vRM) quit
		set X = proddftl.ppf if 'X.isNull(),'Db.isDefined("STBLPPF","X") set vRM = $$^MSG(1485,X) do vdderr("PPF", vRM) quit
		set X = proddftl.pvo if 'X.isNull(),'Db.isDefined("STBLPVO","X") set vRM = $$^MSG(1485,X) do vdderr("PVO", vRM) quit
		set X = proddftl.sbwamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.SBWAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftl.scc.length()>3 set vRM = $$^MSG(1076,3) do vdderr("SCC", vRM) quit
		if '("01"[proddftl.SIBF) set vRM=$$^MSG(742,"L") do vdderr("SIBF", vRM) quit
		set X = proddftl.trb if 'X.isNull(),'Db.isDefined("STBLDC","X") set vRM = $$^MSG(1485,X) do vdderr("TRB", vRM) quit
	}

	if vobj(proddftl,50).exists() do {

		if '("01"[proddftl.ANLSYS) set vRM=$$^MSG(742,"L") do vdderr("ANLSYS", vRM) quit
		if proddftl.cls.length()>1 set vRM = $$^MSG(1076,1) do vdderr("CLS", vRM) quit
		if '("01"[proddftl.COMM) set vRM=$$^MSG(742,"L") do vdderr("COMM", vRM) quit
		if proddftl.crcd.length()>4 set vRM = $$^MSG(1076,4) do vdderr("CRCD", vRM) quit
		if '("01"[proddftl.CUSTOM1) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM1", vRM) quit
		if '("01"[proddftl.CUSTOM2) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM2", vRM) quit
		if '("01"[proddftl.CUSTOM3) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM3", vRM) quit
		if '("01"[proddftl.EMPLBEN) set vRM=$$^MSG(742,"L") do vdderr("EMPLBEN", vRM) quit
		if proddftl.feepln.length()>5 set vRM = $$^MSG(1076,5) do vdderr("FEEPLN", vRM) quit
		set X = proddftl.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
		set X = proddftl.grp if 'X.isNull(),'Db.isDefined("STBLGRP","CLS=""L"",GRP=:X") set vRM = $$^MSG(1485,X) do vdderr("GRP", vRM) quit
		set X = proddftl.lfpc if 'X.isNull(),'Db.isDefined("STBLLFSC1","X") set vRM = $$^MSG(1485,X) do vdderr("LFPC", vRM) quit
		if proddftl.lfsc.length()>6 set vRM = $$^MSG(1076,6) do vdderr("LFSC", vRM) quit
		if '("01"[proddftl.REGCC) set vRM=$$^MSG(742,"L") do vdderr("REGCC", vRM) quit
	}

	if vobj(proddftl,51).exists() do {

		if '("01"[proddftl.ENTF) set vRM=$$^MSG(742,"L") do vdderr("ENTF", vRM) quit
		set X = proddftl.flttbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("FLTTBL", vRM) quit
		set X = proddftl.hldtbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("HLDTBL", vRM) quit
		set X = proddftl.icpa if 'X.isNull(),'Db.isDefined("UTBLICPA","X") set vRM = $$^MSG(1485,X) do vdderr("ICPA", vRM) quit
		if '("01"[proddftl.PBI) set vRM=$$^MSG(742,"L") do vdderr("PBI", vRM) quit
		if '("01"[proddftl.REVF) set vRM=$$^MSG(742,"L") do vdderr("REVF", vRM) quit
		set X = proddftl.rskopt if 'X.isNull(),'Db.isDefined("STBLRSKOPT","X") set vRM = $$^MSG(1485,X) do vdderr("RSKOPT", vRM) quit
	}

	if vobj(proddftl,52).exists() do {

		set X = proddftl.boo if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BOO", vRM) quit
		set X = proddftl.fmo if 'X.isNull(),'Db.isDefined("STBLFMO","X") set vRM = $$^MSG(1485,X) do vdderr("FMO", vRM) quit
		set X = proddftl.maxbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MAXBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.maxfta if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MAXFTA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.maxftd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXFTD", vRM) quit
		set X = proddftl.mincl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MINCL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.onp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ONP", vRM) quit
		if '("01"[proddftl.TRUNC) set vRM=$$^MSG(742,"L") do vdderr("TRUNC", vRM) quit
	}

	if vobj(proddftl,53).exists() do {

		if '("01"[proddftl.AIPR) set vRM=$$^MSG(742,"L") do vdderr("AIPR", vRM) quit
		set X = proddftl.ambas if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("AMBAS", vRM) quit
		set X = proddftl.busopt if 'X.isNull(),'Db.isDefined("STBLBUSOPT","X") set vRM = $$^MSG(1485,X) do vdderr("BUSOPT", vRM) quit
		set X = proddftl.clps if 'X.isNull(),'Db.isDefined("STBLCLPS","X") set vRM = $$^MSG(1485,X) do vdderr("CLPS", vRM) quit
		set X = proddftl.cnvprd if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("CNVPRD", vRM) quit
		if '("01"[proddftl.IPD) set vRM=$$^MSG(742,"L") do vdderr("IPD", vRM) quit
		set X = proddftl.nbdc if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("NBDC", vRM) quit
		set X = proddftl.nbf if 'X.isNull(),'Db.isDefined("STBLLBF","X") set vRM = $$^MSG(1485,X) do vdderr("NBF", vRM) quit
		set X = proddftl.nobf if 'X.isNull(),'Db.isDefined("STBLLBF","X") set vRM = $$^MSG(1485,X) do vdderr("NOBF", vRM) quit
		set X = proddftl.oltp if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.OLTP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftl.ptrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PTRM", vRM) quit
		if proddftl.rencd.length()>8 set vRM = $$^MSG(1076,8) do vdderr("RENCD", vRM) quit
		if '("01"[proddftl.SWPEL) set vRM=$$^MSG(742,"L") do vdderr("SWPEL", vRM) quit
		if proddftl.trm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRM", vRM) quit
	}

	if vobj(proddftl,54).exists() do {

		if '("01"[proddftl.IPLCF) set vRM=$$^MSG(742,"L") do vdderr("IPLCF", vRM) quit
		if proddftl.proind.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PROIND", vRM) quit
		set X = proddftl.trate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.TRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.trexd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TREXD", vRM) quit
	}

	if vobj(proddftl,55).exists() do {

		set X = proddftl.cbfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]CBFRE",0) if 'vRM.get().isNull() do vdderr("CBFRE", vRM) quit
		set X = proddftl.cbmet if 'X.isNull(),'Db.isDefined("STBLCBMET","X") set vRM = $$^MSG(1485,X) do vdderr("CBMET", vRM) quit
		set X = proddftl.cboff if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CBOFF", vRM) quit
		set X = proddftl.flca if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.FLCA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftl,56).exists() do {

		set X = proddftl.adtar if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ADTAR", vRM) quit
		set X = proddftl.alpdue if 'X.isNull(),'Db.isDefined("STBLALPDUE","X") set vRM = $$^MSG(1485,X) do vdderr("ALPDUE", vRM) quit
		set X = proddftl.alpmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.ALPMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftl.ALPRTY) set vRM=$$^MSG(742,"L") do vdderr("ALPRTY", vRM) quit
		if '("01"[proddftl.CCBIND) set vRM=$$^MSG(742,"L") do vdderr("CCBIND", vRM) quit
		set X = proddftl.cfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]CFREQ",0) if 'vRM.get().isNull() do vdderr("CFREQ", vRM) quit
		set X = proddftl.cmrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.CMRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftl.cmrindx.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CMRINDX", vRM) quit
		set X = proddftl.cncal if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("CNCAL", vRM) quit
		set X = proddftl.cnoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CNOFF", vRM) quit
		set X = proddftl.cnvdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CNVDT", vRM) quit
		set X = proddftl.ppdpl if 'X.isNull(),'Db.isDefined("UTBLPPDPL","X") set vRM = $$^MSG(1485,X) do vdderr("PPDPL", vRM) quit
		set X = proddftl.ppfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]PPFREQ",0) if 'vRM.get().isNull() do vdderr("PPFREQ", vRM) quit
		if '("01"[proddftl.RCBIND) set vRM=$$^MSG(742,"L") do vdderr("RCBIND", vRM) quit
		set X = proddftl.rdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RDT", vRM) quit
		if '("01"[proddftl.RFMO) set vRM=$$^MSG(742,"L") do vdderr("RFMO", vRM) quit
		set X = proddftl.rfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]RFREQ",0) if 'vRM.get().isNull() do vdderr("RFREQ", vRM) quit
		set X = proddftl.rncal if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("RNCAL", vRM) quit
		set X = proddftl.rnoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RNOFF", vRM) quit
		if '("01"[proddftl.RPMO) set vRM=$$^MSG(742,"L") do vdderr("RPMO", vRM) quit
		set X = proddftl.rrmo if 'X.isNull(),'Db.isDefined("UTBLRRMO","X") set vRM = $$^MSG(1485,X) do vdderr("RRMO", vRM) quit
		if '("01"[proddftl.SRCBIND) set vRM=$$^MSG(742,"L") do vdderr("SRCBIND", vRM) quit
		set X = proddftl.strate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.STRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.strcal if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("STRCAL", vRM) quit
		if proddftl.strindx.length()>12 set vRM = $$^MSG(1076,12) do vdderr("STRINDX", vRM) quit
		set X = proddftl.stroff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("STROFF", vRM) quit
		set X = proddftl.uppen if 'X.isNull(),'Db.isDefined("UTBLLNPPN","X") set vRM = $$^MSG(1485,X) do vdderr("UPPEN", vRM) quit
	}

	if vobj(proddftl,57).exists() do {

		set X = proddftl.dimxb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.DIMXB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.dimxl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.DIMXL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.dimxy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.DIMXY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.dirfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]DIRFRE",0) if 'vRM.get().isNull() do vdderr("DIRFRE", vRM) quit
		if '("01"[proddftl.FLAT) set vRM=$$^MSG(742,"L") do vdderr("FLAT", vRM) quit
		set X = proddftl.iacf if 'X.isNull(),'Db.isDefined("STBLIACF","X") set vRM = $$^MSG(1485,X) do vdderr("IACF", vRM) quit
		set X = proddftl.icpf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]ICPF",0) if 'vRM.get().isNull() do vdderr("ICPF", vRM) quit
		set X = proddftl.intmn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intmno if 'X.isNull(),'Db.isDefined("STBLINTMNO","X") set vRM = $$^MSG(1485,X) do vdderr("INTMNO", vRM) quit
		set X = proddftl.intmx if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.irf if 'X.isNull(),'Db.isDefined("STBLIRF","X") set vRM = $$^MSG(1485,X) do vdderr("IRF", vRM) quit
		set X = proddftl.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.irsexm if 'X.isNull(),'Db.isDefined("STBLIRSEXM","X") set vRM = $$^MSG(1485,X) do vdderr("IRSEXM", vRM) quit
		set X = proddftl.nalpb if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.NALPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.namxb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.NAMXB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftl.RPIDC) set vRM=$$^MSG(742,"L") do vdderr("RPIDC", vRM) quit
		set X = proddftl.sch if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("SCH", vRM) quit
	}

	if vobj(proddftl,58).exists() do {

		set X = proddftl.anoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ANOFF", vRM) quit
		if '("01"[proddftl.AUO) set vRM=$$^MSG(742,"L") do vdderr("AUO", vRM) quit
		set X = proddftl.dico if 'X.isNull(),'Db.isDefined("STBLDICO","X") set vRM = $$^MSG(1485,X) do vdderr("DICO", vRM) quit
		if '("01"[proddftl.DRF) set vRM=$$^MSG(742,"L") do vdderr("DRF", vRM) quit
		if '("01"[proddftl.FPAF) set vRM=$$^MSG(742,"L") do vdderr("FPAF", vRM) quit
		if '("01"[proddftl.INTCAP) set vRM=$$^MSG(742,"L") do vdderr("INTCAP", vRM) quit
		set X = proddftl.ropt if 'X.isNull(),'Db.isDefined("STBLROPT","X") set vRM = $$^MSG(1485,X) do vdderr("ROPT", vRM) quit
	}

	if vobj(proddftl,60).exists() do {

		set X = proddftl.caf if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CAF", vRM) quit
		if proddftl.compirn.length()>10 set vRM = $$^MSG(1076,10) do vdderr("COMPIRN", vRM) quit
		set X = proddftl.ichm if 'X.isNull(),'Db.isDefined("STBLICHM","X") set vRM = $$^MSG(1485,X) do vdderr("ICHM", vRM) quit
		if proddftl.index.length()>12 set vRM = $$^MSG(1076,12) do vdderr("INDEX", vRM) quit
		if proddftl.index1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX1", vRM) quit
		if proddftl.index10.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX10", vRM) quit
		if proddftl.index2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX2", vRM) quit
		if proddftl.index3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX3", vRM) quit
		if proddftl.index4.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX4", vRM) quit
		if proddftl.index5.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX5", vRM) quit
		if proddftl.index6.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX6", vRM) quit
		if proddftl.index7.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX7", vRM) quit
		if proddftl.index8.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX8", vRM) quit
		if proddftl.index9.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX9", vRM) quit
		set X = proddftl.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
		set X = proddftl.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
		set X = proddftl.intmndc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMNDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intmnic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMNIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intmxdc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMXDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intmxdy if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMXDY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intmxic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMXIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intmxiy if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.INTMXIY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.intoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("INTOFF", vRM) quit
		set X = proddftl.intoffcl if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("INTOFFCL", vRM) quit
		if proddftl.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
		set X = proddftl.numch if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NUMCH", vRM) quit
		set X = proddftl.pcfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]PCFRE",0) if 'vRM.get().isNull() do vdderr("PCFRE", vRM) quit
		set X = proddftl.pchm if 'X.isNull(),'Db.isDefined("STBLPCHM","X") set vRM = $$^MSG(1485,X) do vdderr("PCHM", vRM) quit
		set X = proddftl.pcoff if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PCOFF", vRM) quit
		if '("01"[proddftl.PIACM) set vRM=$$^MSG(742,"L") do vdderr("PIACM", vRM) quit
		set X = proddftl.pmnddc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMNDDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmndic if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMNDIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxddc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXDDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxddl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXDDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxddy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXDDY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxdic if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXDIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxdil if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXDIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxdiy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXDIY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxpdc if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXPDC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxpdl if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXPDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxpdy if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXPDY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxpic if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXPIC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxpil if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXPIL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmxpiy if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PMXPIY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.ppinc if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PPINC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.prcb if 'X.isNull(),'Db.isDefined("STBLPRCB","X") set vRM = $$^MSG(1485,X) do vdderr("PRCB", vRM) quit
		set X = proddftl.rafre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]RAFRE",0) if 'vRM.get().isNull() do vdderr("RAFRE", vRM) quit
		if proddftl.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
		if proddftl.trmmx.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRMMX", vRM) quit
	}

	if vobj(proddftl,61).exists() do {

		set X = proddftl.chkcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CHKCNT", vRM) quit
		if '("01"[proddftl.CHKEURO) set vRM=$$^MSG(742,"L") do vdderr("CHKEURO", vRM) quit
		if '("01"[proddftl.CHKISS) set vRM=$$^MSG(742,"L") do vdderr("CHKISS", vRM) quit
		set X = proddftl.chkout if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CHKOUT", vRM) quit
		set X = proddftl.chks if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKS", vRM) quit
		set X = proddftl.fltd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD1", vRM) quit
		set X = proddftl.fltd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD2", vRM) quit
		set X = proddftl.fltd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD3", vRM) quit
		set X = proddftl.fltd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD4", vRM) quit
		set X = proddftl.fltd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD5", vRM) quit
		set X = proddftl.fltp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP1", vRM) quit
		set X = proddftl.fltp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP2", vRM) quit
		set X = proddftl.fltp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP3", vRM) quit
		set X = proddftl.fltp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP4", vRM) quit
		set X = proddftl.fltp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP5", vRM) quit
		set X = proddftl.hldd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD1", vRM) quit
		set X = proddftl.hldd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD2", vRM) quit
		set X = proddftl.hldd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD3", vRM) quit
		set X = proddftl.hldd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD4", vRM) quit
		set X = proddftl.hldd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD5", vRM) quit
		set X = proddftl.hldp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP1", vRM) quit
		set X = proddftl.hldp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP2", vRM) quit
		set X = proddftl.hldp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP3", vRM) quit
		set X = proddftl.hldp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP4", vRM) quit
		set X = proddftl.hldp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP5", vRM) quit
	}

	if vobj(proddftl,62).exists() do {

		if '("01"[proddftl.DSCHPR) set vRM=$$^MSG(742,"L") do vdderr("DSCHPR", vRM) quit
		if '("01"[proddftl.EFTDD) set vRM=$$^MSG(742,"L") do vdderr("EFTDD", vRM) quit
		if '("01"[proddftl.EFTDEB) set vRM=$$^MSG(742,"L") do vdderr("EFTDEB", vRM) quit
		if '("01"[proddftl.EFTREQ) set vRM=$$^MSG(742,"L") do vdderr("EFTREQ", vRM) quit
		set X = proddftl.lcadl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.LCADL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.lcanl if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LCANL", vRM) quit
		set X = proddftl.lcldl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.LCLDL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.lclnl if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LCLNL", vRM) quit
		if '("01"[proddftl.SMET) set vRM=$$^MSG(742,"L") do vdderr("SMET", vRM) quit
	}

	if vobj(proddftl,64).exists() do {

		set X = proddftl.dist1fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]DIST1FRE",0) if 'vRM.get().isNull() do vdderr("DIST1FRE", vRM) quit
		set X = proddftl.dist2fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]DIST2FRE",0) if 'vRM.get().isNull() do vdderr("DIST2FRE", vRM) quit
		set X = proddftl.dist3fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]DIST3FRE",0) if 'vRM.get().isNull() do vdderr("DIST3FRE", vRM) quit
		set X = proddftl.dist4fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]DIST4FRE",0) if 'vRM.get().isNull() do vdderr("DIST4FRE", vRM) quit
		if '("01"[proddftl.EPA) set vRM=$$^MSG(742,"L") do vdderr("EPA", vRM) quit
		set X = proddftl.lcbo if 'X.isNull(),'Db.isDefined("STBLLCBO","X") set vRM = $$^MSG(1485,X) do vdderr("LCBO", vRM) quit
		if '("01"[proddftl.LCHGNOTO) set vRM=$$^MSG(742,"L") do vdderr("LCHGNOTO", vRM) quit
		set X = proddftl.limit if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("LIMIT", vRM) quit
		if '("01"[proddftl.MDF) set vRM=$$^MSG(742,"L") do vdderr("MDF", vRM) quit
		set X = proddftl.olimit if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("OLIMIT", vRM) quit
		if '("01"[proddftl.PAF) set vRM=$$^MSG(742,"L") do vdderr("PAF", vRM) quit
	}

	if vobj(proddftl,66).exists() do {

		set X = proddftl.aprapp1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.APRAPP1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.aprmthd if 'X.isNull(),'Db.isDefined("STBLAPRMTHD","X") set vRM = $$^MSG(1485,X) do vdderr("APRMTHD", vRM) quit
		set X = proddftl.comfp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.COMFP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.lvv if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LVV", vRM) quit
		set X = proddftl.orgfp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.ORGFP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.rlvp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RLVP", vRM) quit
	}

	if vobj(proddftl,71).exists() do {

		set X = proddftl.eppenmet if 'X.isNull(),'Db.isDefined("UTBLLNPPN","X") set vRM = $$^MSG(1485,X) do vdderr("EPPENMET", vRM) quit
		set X = proddftl.payacm if 'X.isNull(),'Db.isDefined("STBLAACM","X") set vRM = $$^MSG(1485,X) do vdderr("PAYACM", vRM) quit
		if '("01"[proddftl.PLDF) set vRM=$$^MSG(742,"L") do vdderr("PLDF", vRM) quit
		set X = proddftl.ppo if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PPO", vRM) quit
	}

	if vobj(proddftl,73).exists() do {

		set X = proddftl.bilinflcalin if 'X.isNull(),'Db.isDefined("UTBLBILINFLT","X") set vRM = $$^MSG(1485,X) do vdderr("BILINFLCALIN", vRM) quit
	}

	if vobj(proddftl,75).exists() do {

		set X = proddftl.feegrpo if 'X.isNull(),'Db.isDefined("UTBLLNFEEGRP","X") set vRM = $$^MSG(1485,X) do vdderr("FEEGRPO", vRM) quit
	}

	if vobj(proddftl,80).exists() do {

		if '("01"[proddftl.ADJCRLMT) set vRM=$$^MSG(742,"L") do vdderr("ADJCRLMT", vRM) quit
		if proddftl.colcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("COLCD", vRM) quit
		set X = proddftl.fclf if 'X.isNull(),'Db.isDefined("STBLFCLF","X") set vRM = $$^MSG(1485,X) do vdderr("FCLF", vRM) quit
		set X = proddftl.fclp if 'X.isNull(),'Db.isDefined("STBLFCLP","X") set vRM = $$^MSG(1485,X) do vdderr("FCLP", vRM) quit
		set X = proddftl.fcpt if 'X.isNull(),'Db.isDefined("STBLFCPT","X") set vRM = $$^MSG(1485,X) do vdderr("FCPT", vRM) quit
		set X = proddftl.minrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MINRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftl,85).exists() do {

		if '("01"[proddftl.AFLG) set vRM=$$^MSG(742,"L") do vdderr("AFLG", vRM) quit
		set X = proddftl.anfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]ANFRE",0) if 'vRM.get().isNull() do vdderr("ANFRE", vRM) quit
	}

	if vobj(proddftl,101).exists() do {

		if proddftl.bloff.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BLOFF", vRM) quit
		if '("01"[proddftl.BMET) set vRM=$$^MSG(742,"L") do vdderr("BMET", vRM) quit
		if '("01"[proddftl.BPOCL) set vRM=$$^MSG(742,"L") do vdderr("BPOCL", vRM) quit
		set X = proddftl.cdepamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.CDEPAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.dpdo if 'X.isNull(),'Db.isDefined("STBLDPPO","X") set vRM = $$^MSG(1485,X) do vdderr("DPDO", vRM) quit
		set X = proddftl.dppo if 'X.isNull(),'Db.isDefined("STBLDPPO","X") set vRM = $$^MSG(1485,X) do vdderr("DPPO", vRM) quit
		if '("01"[proddftl.DXSI) set vRM=$$^MSG(742,"L") do vdderr("DXSI", vRM) quit
		set X = proddftl.fia if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.FIA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.fpa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.FPA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.mfcb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MFCB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.mpo if 'X.isNull(),'Db.isDefined("STBLLMPO","X") set vRM = $$^MSG(1485,X) do vdderr("MPO", vRM) quit
		set X = proddftl.mppf if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MPPF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pbpor if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PBPOR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftl.PEBA) set vRM=$$^MSG(742,"L") do vdderr("PEBA", vRM) quit
		if '("01"[proddftl.PTF) set vRM=$$^MSG(742,"L") do vdderr("PTF", vRM) quit
		set X = proddftl.rpp if 'X.isNull(),'Db.isDefined("UTBLRPP","X") set vRM = $$^MSG(1485,X) do vdderr("RPP", vRM) quit
		set X = proddftl.subpln if 'X.isNull(),'Db.isDefined("UTBLLNSUB","X") set vRM = $$^MSG(1485,X) do vdderr("SUBPLN", vRM) quit
	}

	if vobj(proddftl,102).exists() do {

		set X = proddftl.idpf if 'X.isNull(),'Db.isDefined("STBLIDPF","X") set vRM = $$^MSG(1485,X) do vdderr("IDPF", vRM) quit
		if proddftl.igrc.length()>8 set vRM = $$^MSG(1076,8) do vdderr("IGRC", vRM) quit
		if proddftl.purcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PURCD", vRM) quit
		set X = proddftl.slbl if 'X.isNull(),'Db.isDefined("STBLSLBL","X") set vRM = $$^MSG(1485,X) do vdderr("SLBL", vRM) quit
		if proddftl.subt.length()>5 set vRM = $$^MSG(1076,5) do vdderr("SUBT", vRM) quit
	}

	if vobj(proddftl,111).exists() do {

		set X = proddftl.abdm if 'X.isNull(),'Db.isDefined("UTBLABDM","X") set vRM = $$^MSG(1485,X) do vdderr("ABDM", vRM) quit
		if proddftl.cbc.length()>2 set vRM = $$^MSG(1076,2) do vdderr("CBC", vRM) quit
		set X = proddftl.ecoa if 'X.isNull(),'Db.isDefined("UTBLECOA","X") set vRM = $$^MSG(1485,X) do vdderr("ECOA", vRM) quit
		set X = proddftl.fppi if 'X.isNull(),'Db.isDefined("UTBLFPI","X") set vRM = $$^MSG(1485,X) do vdderr("FPPI", vRM) quit
		set X = proddftl.rac if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("RAC", vRM) quit
		set X = proddftl.racna if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("RACNA", vRM) quit
	}

	if vobj(proddftl,113).exists() do {

		set X = proddftl.aupbr if 'X.isNull() set vRM = $$VAL^DBSVER("$",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.AUPBR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftl,114).exists() do {

		set X = proddftl.cusha if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.CUSHA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.cushf if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,9) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.CUSHF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.cusho if 'X.isNull(),'Db.isDefined("STBLCUSHO","X") set vRM = $$^MSG(1485,X) do vdderr("CUSHO", vRM) quit
		set X = proddftl.ddmg if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("DDMG", vRM) quit
		set X = proddftl.ddml if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("DDML", vRM) quit
		set X = proddftl.dfda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.DFDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.ieasgf if 'X.isNull(),'Db.isDefined("STBLSTMT","X") set vRM = $$^MSG(1485,X) do vdderr("IEASGF", vRM) quit
		set X = proddftl.oda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.ODA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.odmg if 'X.isNull(),'Db.isDefined("STBLODM","X") set vRM = $$^MSG(1485,X) do vdderr("ODMG", vRM) quit
		set X = proddftl.odml if 'X.isNull(),'Db.isDefined("STBLODM","X") set vRM = $$^MSG(1485,X) do vdderr("ODML", vRM) quit
		set X = proddftl.sda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.SDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.sdmg if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("SDMG", vRM) quit
		set X = proddftl.sdml if 'X.isNull(),'Db.isDefined("STBLTRDD","X") set vRM = $$^MSG(1485,X) do vdderr("SDML", vRM) quit
		set X = proddftl.sdo if 'X.isNull(),'Db.isDefined("STBLSDO","X") set vRM = $$^MSG(1485,X) do vdderr("SDO", vRM) quit
	}

	if vobj(proddftl,426).exists() do {

		set X = proddftl.retmxfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.RETMXFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(proddftl,431).exists() do {

		set X = proddftl.cbt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.CBT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.costyp if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("COSTYP", vRM) quit
		set X = proddftl.dbt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.DBT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.mbldelq if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.MBLDELQ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if proddftl.nbtck.length()>6 set vRM = $$^MSG(1076,6) do vdderr("NBTCK", vRM) quit
		set X = proddftl.nbtr if 'X.isNull(),'Db.isDefined("STBLNEGBTR","X") set vRM = $$^MSG(1485,X) do vdderr("NBTR", vRM) quit
		set X = proddftl.ntropt if 'X.isNull(),'Db.isDefined("STBLNEGBOPT","X") set vRM = $$^MSG(1485,X) do vdderr("NTROPT", vRM) quit
		set X = proddftl.rfp if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("RFP", vRM) quit
		set X = proddftl.sfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]SFRE",0) if 'vRM.get().isNull() do vdderr("SFRE", vRM) quit
		set X = proddftl.troffd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("TROFFD", vRM) quit
	}

	if vobj(proddftl,433).exists() do {

		set X = proddftl.alprtyd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ALPRTYD", vRM) quit
		if '("01"[proddftl.AVCRLMT) set vRM=$$^MSG(742,"L") do vdderr("AVCRLMT", vRM) quit
		if '("01"[proddftl.CINTBNP) set vRM=$$^MSG(742,"L") do vdderr("CINTBNP", vRM) quit
		if '("01"[proddftl.ICAP) set vRM=$$^MSG(742,"L") do vdderr("ICAP", vRM) quit
		set X = proddftl.iropt if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("IROPT", vRM) quit
		if proddftl.lpspdag.length()>8 set vRM = $$^MSG(1076,8) do vdderr("LPSPDAG", vRM) quit
		set X = proddftl.paytol if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PAYTOL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.paytolp if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.PAYTOLP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.pmtrdfac if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("PMTRDFAC", vRM) quit
		set X = proddftl.wdamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.WDAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.wdfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]WDFRE",0) if 'vRM.get().isNull() do vdderr("WDFRE", vRM) quit
		set X = proddftl.wdlmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.WDLMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[proddftl.WDLMTP) set vRM=$$^MSG(742,"L") do vdderr("WDLMTP", vRM) quit
	}

	if vobj(proddftl,435).exists() do {

		if '("01"[proddftl.ADDLCHG) set vRM=$$^MSG(742,"L") do vdderr("ADDLCHG", vRM) quit
		set X = proddftl.aldchk if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("ALDCHK", vRM) quit
		set X = proddftl.aldm if 'X.isNull(),'Db.isDefined("STBLALDM","X") set vRM = $$^MSG(1485,X) do vdderr("ALDM", vRM) quit
		if proddftl.aldp.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ALDP", vRM) quit
		set X = proddftl.idgp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("IDGP", vRM) quit
	}

	if vobj(proddftl,440).exists() do {

		if proddftl.cogs.length()>4 set vRM = $$^MSG(1076,4) do vdderr("COGS", vRM) quit
		set X = proddftl.com if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COM", vRM) quit
		set X = proddftl.cot if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COT", vRM) quit
		set X = proddftl.dtco if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DTCO", vRM) quit
	}

	if vobj(proddftl,448).exists() do {

		set X = proddftl.sgncrd if 'X.isNull(),'Db.isDefined("STBLSGNCRD","X") set vRM = $$^MSG(1485,X) do vdderr("SGNCRD", vRM) quit
	}

	if vobj(proddftl,449).exists() do {

		if '("01"[proddftl.CBF) set vRM=$$^MSG(742,"L") do vdderr("CBF", vRM) quit
		if '("01"[proddftl.CDF) set vRM=$$^MSG(742,"L") do vdderr("CDF", vRM) quit
		if '("01"[proddftl.IRP) set vRM=$$^MSG(742,"L") do vdderr("IRP", vRM) quit
		if proddftl.paytrnst.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PAYTRNST", vRM) quit
	}

	if vobj(proddftl,451).exists() do {

		set X = proddftl.vatintopt if 'X.isNull(),'Db.isDefined("STBLVATINTL","X") set vRM = $$^MSG(1485,X) do vdderr("VATINTOPT", vRM) quit
	}

	if vobj(proddftl,452).exists() do {

		if proddftl.rsintspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("RSINTSPR", vRM) quit
		if proddftl.rsrndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RSRNDMTD", vRM) quit
	}

	if vobj(proddftl,453).exists() do {

		if '("01"[proddftl.BCAPINT) set vRM=$$^MSG(742,"L") do vdderr("BCAPINT", vRM) quit
		set X = proddftl.rescls if 'X.isNull(),'Db.isDefined("STBLRESCLS","X") set vRM = $$^MSG(1485,X) do vdderr("RESCLS", vRM) quit
	}

	if vobj(proddftl,455).exists() do {

		set X = proddftl.delqrsn if 'X.isNull(),'Db.isDefined("UTBLRFD","X") set vRM = $$^MSG(1485,X) do vdderr("DELQRSN", vRM) quit
	}

	if vobj(proddftl,456).exists() do {

		set X = proddftl.colexthrsh if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PRODDFTL.COLEXTHRSH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = proddftl.colextrdys if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("COLEXTRDYS", vRM) quit
		set X = proddftl.stmtsrt if 'X.isNull(),'Db.isDefined("STBLSTMTSRT","X") set vRM = $$^MSG(1485,X) do vdderr("STMTSRT", vRM) quit
	}

	if vobj(proddftl,458).exists() do {

		set X = proddftl.slc if 'X.isNull(),'Db.isDefined("STBLSBSLC","X") set vRM = $$^MSG(1485,X) do vdderr("SLC", vRM) quit
	}

	if vobj(proddftl,461).exists() do {

		if '("01"[proddftl.GENPRJREP) set vRM=$$^MSG(742,"L") do vdderr("GENPRJREP", vRM) quit
		if proddftl.maxptrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("MAXPTRM", vRM) quit
		if proddftl.minptrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("MINPTRM", vRM) quit
		set X = proddftl.numdtp if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("NUMDTP", vRM) quit
		set X = proddftl.pmro if 'X.isNull(),'Db.isDefined("STBLPMRO","X") set vRM = $$^MSG(1485,X) do vdderr("PMRO", vRM) quit
	}

	if vobj(proddftl,465).exists() do {

		if '("01"[proddftl.ADJCOL) set vRM=$$^MSG(742,"L") do vdderr("ADJCOL", vRM) quit
		if '("01"[proddftl.COLLIMPR) set vRM=$$^MSG(742,"L") do vdderr("COLLIMPR", vRM) quit
		set X = proddftl.pbfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[PRODDFTL]PBFRE",0) if 'vRM.get().isNull() do vdderr("PBFRE", vRM) quit
		if '("01"[proddftl.RACLC) set vRM=$$^MSG(742,"L") do vdderr("RACLC", vRM) quit
		if '("01"[proddftl.RACLF) set vRM=$$^MSG(742,"L") do vdderr("RACLF", vRM) quit
	}

	if vobj(proddftl,469).exists() do {

		if '("01"[proddftl.DMNDLN) set vRM=$$^MSG(742,"L") do vdderr("DMNDLN", vRM) quit
	}

	if vobj(proddftl,471).exists() do {

		if '("01"[proddftl.SEGMENTS) set vRM=$$^MSG(742,"L") do vdderr("SEGMENTS", vRM) quit
	}
	set X = proddftl.type if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODDFTL","MSG",979,"PRODDFTL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPRODDFTL proddftl

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("TYPE")
	set voldkey = vux.piece("|",1),vobj(proddftl,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(proddftl,-3) = vnewkey // Copy new keys into object
	type RecordPRODDFTL vnewrec = proddftl.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PRODDFTL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(proddftl,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordPRODDFTL proddftl
	type public String vpar

	type String vERRMSG

	if Db.isDefined("LN","TYPE=:proddftl.type") set vERRMSG = $$^MSG(8563,"LN(TYPE) -> PRODDFTL(TYPE)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	quit
