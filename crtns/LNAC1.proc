LNAC1(CID) //  Asset Classifications - Computed Data Items

	/*
	       ORIG:  GORMAN - 10 JAN 1990
	       DESC:  Routine calculates values needed for asset classification
	              computed LN data items.
	
	      INPUT:  CID
	     OUTPUT:  Variable XLN24
	
	              Piece    Description                         Data Item
	
	               1       Asset Class Amount - Category 1     ACAM1
	               2       Asset Class Amount - Category 2     ACAM2
	               3       Asset Class Amount - Category 3     ACAM3
	               4       Asset Class Amount - Category 4     ACAM4
	               5       Asset Class Amount - Category 5     ACAM5
	               6       Escrow Allocation - Category 1      ACEA1
	               7       Escrow Allocation - Category 2      ACEA2
	               8       Escrow Allocation - Category 3      ACEA3
	               9       Escrow Allocation - Category 4      ACEA4
	              10       Escrow Allocation - Category 5      ACEA5
	              11       Collateral Allocation - Category 1  ACCA1
	              12       Collateral Allocation - Category 2  ACCA2
	              13       Collateral Allocation - Category 3  ACCA3
	              14       Collateral Allocation - Category 4  ACCA4
	              15       Collateral Allocation - Category 5  ACCA5
	              16       Asset Classification Base           ACB
	              17       Total User Allocation               ACTAU
	              18       Escrow & Collateral Amount          ACTAEC
	              19       Residual Amount                     ACTAR
	

	---- Revision History ------------------------------------------------
	
	09/22/05 - KINI - 17267
		   Modified EXEC section to use correct delimiter when
		   getting Escrow CID from BIL0 string.
	
	03/29/05 - KINI - 14385
		   Modified EXEC and EXEC1 sections to fix undefined errors.
		   Modified "Resolve 'Highest Category' Instructions" loop 
		   in EXEC section to restore original logic.
		   Modified to comply with DBI standards.
		   
	04/23/03 - CARROLLJ - 51349
		   Modifed EXEC section to pass ln object to MCND^LNCO3.

	11/12/02 - CARROLLJ - 43583
		   PSL conversion cleanup.

	12/19/01 - SCOTTC - 43583
		   Convert to PSL.  Remove old history.
	
	*/

	type public String XLN24=""
	type String ABDM()
	type Number AMT,BAL
		
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	if ln.stat=4 quit
	
	set BAL=$S('ln.aruf:ln.bal,1:ln.bal-ln.udbal)

	set ABDM=ln.abdm  // Asset Class - Base Determination Method
	if ABDM.isNull() set ABDM="NULL"
	
	do EXEC(.ln,.BAL,ABDM)
	
	quit 

	
EXEC(RecordLN ln,	// LN Record
     Number BAL,	// Computed Balance
     String ABDM)	// Asset Class - Base Determination Method
     
	// Step 1 - Determine amount to allocate (BAL)

	type public String XLN24
	type String BIL0,ESC(),HI()
	type Number A,C,I
	type Boolean FLG
	
	type RecordUTBLABDM abdm=Db.getRecord("UTBLABDM","KEY=:ABDM",1)
	
	if '(ABDM(ABDM).data()) , (abdm.getMode()=1) set ABDM(ABDM)=abdm.act

	if (ABDM(ABDM).data()) do {
		// Add accrued interest
		if ABDM(ABDM).extract(1) set BAL=$$^SCARND((BAL+ln.acr),0,ln.cid)
		// Add late charge due
		if ABDM(ABDM).extract(2) set BAL=BAL + ln.lchg
		// Add misc charge due
		if ABDM(ABDM).extract(3) set BAL=BAL + $$MCND^LNCO3(,.ln)
		// Less unapplied funds
		if ABDM(ABDM).extract(4) set BAL=BAL - ln.unapf
		}
		
	// Modify balance to allocate by negative escrow balances

	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:ln.cid",1)

	if lnbil0.getMode()=1 do {
		type Number ELENUM

		for ELENUM=0:1:20 set BIL0=$$ESCACT^BILFUNCS(.lnbil0,ELENUM) quit:BIL0=""  do {

			if 'BIL0.piece($C(9),1).isNull() do ESC(BIL0.piece($C(9),1),.BAL)
			}
		}
		
	quit:'BAL 

	set XLN24.piece("|",16)=BAL
	
	if BAL>0 do EXEC1(.ln,.BAL,.HI())

	if BAL<0 do {
		set XLN24.piece("|",1)=XLN24.piece("|",1) + BAL 
		set BAL=0
		}
	// Resolve residual allocation
	set A=ln.rac 
	if 'A set A=1
	if (ln.nai) , (ln.racna) set A=ln.racna

	// Residual amount
	set XLN24.piece("|",19)=BAL
	set XLN24.piece("|",A)=XLN24.piece("|",A) + BAL
	
	// Resolve "Highest Category" Instructions
	set FLG=0 
	for I=1:1:5 do { quit:FLG  
		if XLN24.piece("|",I) set FLG=1 
		for C=5,10 if HI(C).get() do HI(I,C,HI()) 
		}

	if 'FLG set I=1 for C=5,10 if HI(C).get() do HI(I,C,HI())

	quit 

	
EXEC1(RecordLN ln,	// LN Record
      Number BAL,	// Computed Balance
      String HI())	// HI array
      
	type public String ESC()
	type Number I,N,P

	// Step 2 - Resolve escrow balances
	set N="" 
	if ESC.data() do {
		for  set N=ESC(N).order() do { quit:N=""  
			do A1(+ESC(N),(ESC(N).piece("|",2)),5,,.HI())
			}
		}
				
	if BAL'>0 quit 
	
	// Step 3 - Resolve collateral balances
	do COL(.ln,.BAL)
	
	if BAL'>0 quit 
	
	// Step 4 - Resolve fixed dollar amount allocations
	set P=0 
	for I=20:1:24 do FIX(.ln,P,I,.BAL) if BAL'>0 quit  
	
	// Step 5 - Resolve percentage allocations
	set P=0 
	for I=25:1:29 do PER(.ln,.BAL,P,I) if BAL'>0 quit 
	
	quit 

	
ESC(Number CID,		// Escrow Account Number
    Number BAL) 	// Computed Balance	
    	
    	// Escrow balances
    	
    	type public String ESC()
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	quit:'dep.bal 

	if dep.bal<0 set BAL=BAL-dep.bal quit

	quit:dep.abmc.isNull()

	set ESC=ESC+1 
	set ESC(ESC)=dep.bal_"|"_dep.abmc

	quit 

	
COL(RecordLN ln,	// LN Record
    Number BAL) 	// Computed Balance
    
    	// Collateral balances

	type public Boolean ER=0
	type Number B=0
	
	type Number COLL

	type ResultSet rs=Db.select("COLL","LNCOL","CID=:ln.cid")
        if rs.isEmpty() quit
        while rs.next() do { if ER!(BAL'>0) quit
		set COLL=rs.getCol(1)

		type RecordCOL col=Db.getRecord("COL","COLL=:COLL",1)
		
		if col.getMode()=0 quit
		
		// Adjusted collateral value
		set B=col.colval - col.aba
		if B.isNull() quit
 		if 'col.abmo.isNull() do A1(B,col.abmo,10) 

		// Collateral code

		if col.scolcd do {
			type RecordUTBLCOLCD colcd=Db.getRecord("UTBLCOLCD","GRP=:ln.grp,KEY=:col.scolcd")
			if 'colcd.abmc.isNull() do A1(B,colcd.abmc,10,.BAL)
			}
		}
	quit

	
FIX(RecordLN ln,	// LN Record
    Number P,		// XLN24 array piece increment
    Number I,		// XLN24 array piece increment
    Number BAL) 	// Computed Balance
	
	type Number ASSCLS
	
	set P=P+1
	
	if I=20 set ASSCLS=ln.acfx1
	if I=21 set ASSCLS=ln.acfx2
	if I=22 set ASSCLS=ln.acfx3
	if I=23 set ASSCLS=ln.acfx4
	if I=24 set ASSCLS=ln.acfx5

	if ASSCLS.isNull() quit 

	do A2(ASSCLS,.BAL,P)

	quit 

	
PER(RecordLN ln,	// LN Record
    Number BAL,		// Computed Balance
    Number P,		// XLN24 array piece increment
    Number I)		// XLN24 array piece increment
    
    	// Percentage Allocations

	type Number ASSCLS

	set P=P+1

	if I=25 set ASSCLS=ln.acpc1
	if I=26 set ASSCLS=ln.acpc2
	if I=27 set ASSCLS=ln.acpc3
	if I=28 set ASSCLS=ln.acpc4
	if I=29 set ASSCLS=ln.acpc5

	if ASSCLS.isNull() quit

	set ASSCLS=$$^SCARND(BAL*ASSCLS/100,0,ln.cid)

	do A2(ASSCLS,.BAL,P)

	quit 

	
A1(Number AMT,		// Adjusted Collateral Value
   String MODCD,	// Asset Base Modification Code
   Number OFFSET,	// Offset
   Number BAL,		// Computed Balance
   String HI())		// HI amount array
   
 	// Allocate balances ($ Amt, Mod Code, Offset) Escrow & Collat

	if "H|F"'[MODCD quit 

	type public String XLN24
	type Number I
	
	if AMT>BAL set AMT=BAL
	set BAL=BAL-AMT
	
	set XLN24.piece("|",18)=XLN24.piece("|",18) + AMT
	
	if MODCD="F" for I=1,1+OFFSET set XLN24.piece("|",I)=XLN24.piece("|",I) + AMT
	else  set HI(OFFSET)=HI(OFFSET).get() + AMT
	
	quit 
	
	
A2(Number ASSCLS,	// Asset Class - Percent Category
   Number BAL,		// Computed Balance
   Number P)		// XLN24 array piece increment

	// Allocate balances (fixed $$ and percentages)
	
	type public String XLN24
	
	if ASSCLS>BAL set ASSCLS=BAL
	set BAL=BAL-ASSCLS
	
	set XLN24.piece("|",17)=XLN24.piece("|",17) + ASSCLS
	set XLN24.piece("|",P)=XLN24.piece("|",P) + ASSCLS

	quit 

	
HI(Number I,		// XLN24 piece increment
   Number C,		// HI array increment
   String HI())		// HI amount array
   
   	// "Highest Category" Allocations

	type public String XLN24

	set XLN24.piece("|",I)=XLN24.piece("|",I) + HI(C)
	set XLN24.piece("|",I+C)=XLN24.piece("|",I+C) + HI(C)

	quit 
	

vSIG()	quit "60192^52685^Irina Kin^7807"	// Signature - LTD^TIME^USER^SIZE
