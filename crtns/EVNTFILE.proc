EVNTFILE(RecordEVENTS events, String vpar, Boolean vparNorm) // EVENTS - Registered Events (UCS) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (18)             01/03/2007
	// Trigger Definition (2)                      02/03/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = events.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(events,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(events,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String EVENTSEQ = events.eventseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EVENTSEQ").exists() do vkchged quit            // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EVENTS",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EVENTS","EVENTSEQ = :events.eventseq") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EVENTSEQ

	type RecordEVENTS events = Db.getRecord("EVENTS","EVENTSEQ=:EVENTSEQ")
	if (%ProcessMode = 2) do {
		do events.setMode(2)

		do EVNTFILE(events,vpar)
	}
	else  do VINDEX(events)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEVENTS events

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EVENTS","EVENTSEQ = :events.eventseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(events))  S ^EVENTS(vobj(events,-3))=vobj(events)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.events) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEVENTS events

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.events)                   // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^EVENTS(vobj(events,-3))                           // Delete Record
	quit


vinit // Initialize default values

	type public RecordEVENTS events

	// Type local variables for access keys for defaults
	type public String EVENTSEQ

	if events.isonceperday.isNull() set events.isonceperday = 0 // isonceperday
	if events.isonlyonce.isNull() set events.isonlyonce = 0 // isonlyonce
	quit


vreqn // Validate required data items

	type public RecordEVENTS events

	if events.eventid.isNull() do vreqerr("EVENTID") quit
	if events.isonceperday.isNull() do vreqerr("ISONCEPERDAY") quit
	if events.isonlyonce.isNull() do vreqerr("ISONLYONCE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEVENTS events

	if events.eventseq.isNull() do vreqerr("EVENTSEQ") quit

		if vx("EVENTID").exists(),events.eventid.isNull() do vreqerr("EVENTID") quit
		if vx("ISONCEPERDAY").exists(),events.isonceperday.isNull() do vreqerr("ISONCEPERDAY") quit
		if vx("ISONLYONCE").exists(),events.isonlyonce.isNull() do vreqerr("ISONLYONCE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EVENTS","MSG",1767,"EVENTS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordEVENTS events
	if 'events.eventid.isNull() set vfkey("^EVENTINF("_"""AVAIL"""_","_""""_events.eventid_""""_")")="EVENTS(EVENTID) -> EVENTSAVAIL"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordEVENTS events
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("EVENTSAVAIL",":events.eventid") set vERRMSG = $$^MSG(8563,"EVENTS(EVENTID) -> EVENTSAVAIL") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete EVENTS record

	type public RecordEVENTS events
	/*
	EVENTS Table 
	AFTER_DELETE Trigger
	
 	---- Revision History ------------------------------------------------
 	
 	01/19/05 - RussellDS - CR13817
 		   Clean up PSL.
 		   
	----------------------------------------------------------------------
	*/

	type Number EVENTSEQ = events.eventseq

	//Remove stored data related event
	do Db.delete("EVENTDB", "EVENTSEQ=:EVENTSEQ")
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert of Event

	type public RecordEVENTS events
	/*
	EVENTS Table 
	BEFORE_INSERT Trigger
	
 	---- Revision History ------------------------------------------------
 	
 	01/19/05 - RussellDS - CR13817
 		   Clean up PSL.
 		   
 		   Remove old revision history.
	----------------------------------------------------------------------
	*/

	type public Boolean ER

	type Number EVENTID

	// Check for required fields

	if events.eventseq.isNull() do Runtime.setErrMSG("EVENTS",7531,"EVENTS.EVENTSEQ") quit:ER
	if events.eventid.isNull() do Runtime.setErrMSG("EVENTS",7531,"EVENTS.EVENTID") quit:ER
	
	// Default values from EVENTSAVAIL
	
	set EVENTID = events.eventid
	
	type RecordEVENTSAVAIL eavail = Db.getRecord("EVENTSAVAIL", "EVENTID=:EVENTID")
	
	if 'eavail.expiredate.isNull(), (eavail.expiredate < %CurrentDate) do Runtime.setErrMSG("EVENTS",1431) quit:ER

	if events.eventtype.isNull() set events.eventtype = eavail.eventtype
	if (events.eventtype '= eavail.eventtype) do Runtime.setErrMSG("EVENTS",1430) quit:ER

	if (events.eventtype = "F") do {  quit:ER
		if events.frequency.isNull() set events.frequency = eavail.frequency
		if events.frequency.isNull() do Runtime.setErrMSG("EVENTS",1353) quit:ER
		if events.interval.isNull() set events.interval = eavail.interval
		if events.totime.isNull() set events.totime = eavail.totime
	}

	if events.expiredate.isNull() set events.expiredate = eavail.expiredate
	if events.isonlyonce.isNull() set events.isonlyonce = eavail.isonlyonce
	if events.isonceperday.isNull() set events.isonceperday = eavail.isonceperday

	if events.attime.isNull() set events.attime = eavail.attime
	if events.nexttime.isNull() set events.nexttime = events.attime

	if events.nextdate.isNull() do {  quit:ER
		if (events.eventtype = "T") set events.nextdate = %CurrentDate
		else  set events.nextdate = %SystemDate.nextFreqDate(events.frequency) quit:ER
	}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEVENTS events

	set X = events.eventseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EVENTSEQ", vRM) quit
	set X = events.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = events.attime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("ATTIME", vRM) quit
	if events.email.length()>55 set vRM = $$^MSG(1076,55) do vdderr("EMAIL", vRM) quit
	set X = events.eventid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EVENTID", vRM) quit
	if events.eventtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("EVENTTYPE", vRM) quit
	set X = events.expiredate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPIREDATE", vRM) quit
	set X = events.frequency if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[EVENTS]FREQUENCY",0) if 'vRM.get().isNull() do vdderr("FREQUENCY", vRM) quit
	set X = events.interval if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("INTERVAL", vRM) quit
	if '("01"[events.ISONCEPERDAY) set vRM=$$^MSG(742,"L") do vdderr("ISONCEPERDAY", vRM) quit
	if '("01"[events.ISONLYONCE) set vRM=$$^MSG(742,"L") do vdderr("ISONLYONCE", vRM) quit
	set X = events.lasttrigdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LASTTRIGDATE", vRM) quit
	set X = events.lasttrigtime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LASTTRIGTIME", vRM) quit
	set X = events.nextdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NEXTDATE", vRM) quit
	set X = events.nexttime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("NEXTTIME", vRM) quit
	if events.sms.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SMS", vRM) quit
	set X = events.smspr if 'X.isNull(),'Db.isDefined("UTBLSMSPR","X") set vRM = $$^MSG(1485,X) do vdderr("SMSPR", vRM) quit
	set X = events.totime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TOTIME", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EVENTS","MSG",979,"EVENTS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordEVENTS events) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EVENTTYPE").exists()!vx("NEXTDATE").exists()!vx("NEXTTIME").exists() do vi1(.events)
		if vx("EVENTTYPE").exists() do vi2(.events)
	}
	do vi1(.events)
	do vi2(.events)

	quit
	

vi1(RecordEVENTS events) // Maintain EVENTSF index entries (Frequency Based Events)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = events.eventtype
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = events.nextdate
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = events.nexttime
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = events.eventseq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^EVENTS(vobj(events,-3)))#2,'$D(^EVENTIDX("OCCURRENCE",v2,v3,v4,v5)) do vidxerr("EVENTSF")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EVENTIDX("OCCURRENCE",v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EVENTTYPE").exists() set v2=vx("EVENTTYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("NEXTDATE").exists() set v3=vx("NEXTDATE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("NEXTTIME").exists() set v4=vx("NEXTTIME").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EVENTIDX("OCCURRENCE",v2,v3,v4,v5)
	quit

vi2(RecordEVENTS events) // Maintain EVENTTYPE index entries (Events by Type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = events.eventtype
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = events.eventseq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^EVENTS(vobj(events,-3)))#2,'$D(^EVENTIDX("EVENTTYPE",v2,v3)) do vidxerr("EVENTTYPE")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EVENTIDX("EVENTTYPE",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EVENTTYPE").exists() set v2=vx("EVENTTYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EVENTIDX("EVENTTYPE",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("EVENTS")

	while ds.next() do {
		type RecordEVENTS events=ds.getRecord("EVENTS")
		if vlist.contains("VINDEX") do VINDEX(.events) quit
		if vlist.contains("EVENTSF") do vi1(.events)
		if vlist.contains("EVENTTYPE") do vi2(.events)
	}

	quit


public VIDXBLD1(RecordEVENTS events, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.events) quit
	if vlist.contains("EVENTSF") do vi1(.events)
	if vlist.contains("EVENTTYPE") do vi2(.events)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("EVENTS","MSG",1225,"EVENTS."_di)

	quit


vkchged // Access key changed

	type public RecordEVENTS events

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("EVENTSEQ")
	set voldkey = vux.piece("|",1),vobj(events,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(events,-3) = vnewkey // Copy new keys into object
	type RecordEVENTS vnewrec = events.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EVENTS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(events,-3) = vux.piece("|",1)                 // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordEVENTS events
	type public String vpar

	do Db.delete("ACCTTOEVENTS","EVENTSEQ=:events.eventseq",vpar) // Cascade delete

	do Db.delete("CUSTTOEVENTS","EVENTSEQ=:events.eventseq",vpar) // Cascade delete

	do Db.delete("EVENTARGVALS","EVENTSEQ=:events.eventseq",vpar) // Cascade delete

	quit

VIDXPGM()	quit "EVNTFILE"	// Location of index program

