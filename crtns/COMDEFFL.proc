COMDEFFL(RecordCOMDEF comdef, String vpar, Boolean vparNorm) // COMDEF - Commission Deferred Payment Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = comdef.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(comdef,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(comdef,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CPLAN").exists()!vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("COMDEF",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("COMDEF","CPLAN = :comdef.cplan and CID = :comdef.cid and SEQ = :comdef.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CPLAN
	type public String CID
	type public String SEQ

	type RecordCOMDEF comdef = Db.getRecord("COMDEF","CPLAN=:CPLAN,CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do comdef.setMode(2)

		do COMDEFFL(comdef,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCOMDEF comdef

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("COMDEF","CPLAN = :comdef.cplan and CID = :comdef.cid and SEQ = :comdef.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(comdef))  S ^COMDEF(vobj(comdef,-3),vobj(comdef,-4),vobj(comdef,-5))=vobj(comdef)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCOMDEF comdef


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^COMDEF(vobj(comdef,-3),vobj(comdef,-4),vobj(comdef,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordCOMDEF comdef

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCOMDEF comdef

	if comdef.cplan.isNull() do vreqerr("CPLAN") quit
	if comdef.cid.isNull() do vreqerr("CID") quit
	if comdef.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("COMDEF","MSG",1767,"COMDEF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCOMDEF comdef
	if 'comdef.cid.isNull() set vfkey("^ACN("_""""_comdef.cid_""""_","_50_")")="COMDEF(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCOMDEF comdef
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":comdef.cid") set vERRMSG = $$^MSG(8563,"COMDEF(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCOMDEF comdef

	set X = comdef.cplan if 'X.isNull(),'Db.isDefined("UTBLCOMPLN","X") set vRM = $$^MSG(1485,X) do vdderr("CPLAN", vRM) quit
	set X = comdef.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = comdef.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = comdef.agent if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("AGENT", vRM) quit
	set X = comdef.amond if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("AMOND", vRM) quit
	set X = comdef.amrem if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("AMREM", vRM) quit
	set X = comdef.amtot if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("AMTOT", vRM) quit
	if comdef.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	set X = comdef.defcyc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COMDEF.DEFCYC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = comdef.deforg if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COMDEF.DEFORG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = comdef.deftot if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COMDEF.DEFTOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("COMDEF","MSG",979,"COMDEF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCOMDEF comdef

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CPLAN").exists() set vux("CPLAN") = vx("CPLAN")
	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = comdef.cplan_","_comdef.cid_","_comdef.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = comdef.cplan_","_comdef.cid_","_comdef.seq // Copy new keys into object
	type RecordCOMDEF vnewrec = comdef.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("COMDEF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCOMDEF comdef

	if vux("CPLAN").exists() set comdef.cplan = vux("CPLAN").piece("|",i)
	if vux("CID").exists() set comdef.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set comdef.seq = vux("SEQ").piece("|",i)
	quit
