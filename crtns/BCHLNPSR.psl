BCHLNPSR //Batch BCHLNPSR - Payment Sweep Reset
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNPSR Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNPSR")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNPSR") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNPSR",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNPSR")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNPSR","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNPSR",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNPSR",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNPSR","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNPSR",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	type Number DCID,LPCID
	
	set LPCID=CID
	type ResultSet lpswp=Db.select("CID","LPSWEEP","LPCID=:CID")
        while lpswp.next() set DCID=lpswp.getCol(1) do {
		do PROCD
		}
	quit
	
	
	
PROCD	// Process a deposit account tied to loan account
	
	type public Number DCID
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:DCID")
	
	// Account closed?
	if dep.stat=4 set ER=1,RM=$$^MSG(55) do EXC(LPCID) quit  
	
	set LPDUE=0
	
	// Process all accounts tied to this deposit
	type ResultSet xrefswp=Db.select("LPCID","LPSWEEP","CID=:DCID")
        while xrefswp.next() set CID=xrefswp.getCol(1) do PROCL
	
	if dep.lpdue'=LPDUE do LPFILE(.dep,DCID)
	quit
	
	
	
	
PROCL	// Process a loan account tied to deposit account 
	
	new DUEDEL
	
	type RecordLPSWEEP lpsweep=Db.getRecord("LPSWEEP","CID=:DCID,LPCID=:CID")
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	// If LNPRC is defined, account is already processed
	
	if $D(LNPRC(CID)) do { quit
		set lpsweep.duedel=LNPRC(CID)
		do lpsweep.save()
		if LNPRC(CID) set LPDUE=1
		}
	
	set ER=0
	// Account closed
	if ln.stat=4 set ER=1,RM=$$^MSG(55) do EXC(CID) quit
	
	if $$GTOTDUE(CID,.ln)>0 set DUEDEL=1,LPDUE=1
	else  set DUEDEL=0
	
	// Due/delinquent flag
	set lpsweep.duedel=DUEDEL
	do lpsweep.save()

	// Mark as processed
	set LNPRC(CID)=DUEDEL
	quit
	
	
public DUE(Number CID) // Check if loan account is due/delinquent

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if $$GTOTDUE(CID,.ln)>0 quit 1
	quit 0
	
public GTDUE(Number CID)	// Grand total due for loan payment sweep

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	quit $$GTOTDUE(CID,.ln)
	
GTOTDUE(CID,RecordLN ln)	// Private ; Grand total due for loan payment sweep
	
	new GTDUE,MCND
	
	// Misc charges - not due
	set MCND=ln.mcnd
	
	// Grand total due
	set GTDUE=ln.tdue+ln.lchg+MCND-ln.unapf
	quit GTDUE
	
	
LPFILE(RecordDEP dep,CID)	// File deposit account changes (to Loan Payment Due field)
	
	set dep.lpdue=LPDUE
	// File changes w/o filing history record
	do dep.bypassSave()
	quit
	
	
EXC(CID)	// Log exceptions
	
	set EXCDESC=$G(EXCDESC)
 	if $G(%FN)'="",EXCDESC="" do {
		set TMPFN=%FN
		type RecordSCATBL function=Db.getRecord("SCATBL","TMPFN")
		set EXCDESC=function.desc
		}
	do LOG^UTLEXC($T(+0),"*",EXCDESC,CID,"",$S($G(ET):ET,1:$G(RM)))
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","LN","SCHLD=:TJD AND DIST1FRE NOT = ''")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set %UserID="BATCH"

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
