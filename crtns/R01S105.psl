R01S105	// SCA034 - System Balance Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 09/10/2007 15:38 - root

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String CLS,TJD2,YJD
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date VIN1

	set RID="SCA034"
	set RN="System Balance Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|10||[TTL]TJD|[TTL]TJD:DISTINCT:NOVAL||||D|Transaction Date|||||"

	set %READ="IO/REQ,VIN1#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String CLS,TJD2,YJD
	type public Date VIN1
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,CLSS,CONAM,CRCD,DESC,GLSC,OLDCRCD,OLDDESC,OLDTYPE,RID,RN,STAR,TRB,TXCR,TXDR,TYPE,TYPE2,VL,VLOF,VRF(),VSTATS(),XCR,XDR,XFR,YBAL,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA034",RN="System Balance Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA034","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[TTL]TYPE#1#4,[TTL]GLSC#6#4,[TTL]CC#11#6,[TTL]OPEN#18#6,[TTL]DRAMT#41#12,[TTL]CRAMT#54#12,[TTL]BAL#67#15,[TTL]ACR#83#10,[TTL]BALACR#94#12,[TTL]EFFRATE#107#6,[TTL]BALCOL#114#15"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE

		set VBNRINFO("PROMPTS",1)="WC1|"_"Transaction Date"_"|VIN1|"_$$DAT^%ZM(VIN1.get(),%MSKD)

		set VWHERE="TTL.TJD=:VIN1 AND TTL.CRCD NOT ='0'"

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="System Balance Report"
		set VBNRINFO("PGM")="R01S105"
		set VBNRINFO("RID")="SCA034"
		set VBNRINFO("TABLES")="TTL"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TTL]TJD"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TTL]CRCD"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TTL]CLS"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TTL]GRP"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,TTL]TYPE"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,TTL]GLSC"
		set VBNRINFO("ORDERBY",7)="[SYSDEV,TTL]CC"

		set VBNRINFO("DOC",1)="The System Balance Report (SCA034) lists daily changes in the ledger balances"
		set VBNRINFO("DOC",2)="for each product type.  This information is from two sources:"
		set VBNRINFO("DOC",3)=""
		set VBNRINFO("DOC",4)="*  Account accruals -- Provides the cumulative accrual amount, the ledger"
		set VBNRINFO("DOC",5)="   balance totals, and the current and prior ledger balance for each product"
		set VBNRINFO("DOC",6)="   type.  This data is from the Account Balance Totals file [TTL]."
		set VBNRINFO("DOC",7)=""
		set VBNRINFO("DOC",8)="*  Daily Transaction Journal -- Provides the total debits and credits to"
		set VBNRINFO("DOC",9)="   principal for each product type.  This data is from the Daily Transaction"
		set VBNRINFO("DOC",10)="   Journal file [DTJ]."
		set VBNRINFO("DOC",11)=""
		set VBNRINFO("DOC",12)="Refer to the ""Product Type/Cost Center Transfers Reference Manual,"" the ""System"
		set VBNRINFO("DOC",13)="Balancing Reference Manual,"" and the ""System Balancing Troubleshooting Guide"""
		set VBNRINFO("DOC",14)="for further information."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:7 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:12 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("TTL.CRCD,TTL.TYPE,TTL.GRP,TTL.GLSC,TTL.CC,TTL.TJD,TTL.BAL,TTL.CRAMT,TTL.DRAMT,TTL.TRIN,TTL.TROUT,TTL.CLS,TTL.OPEN,TTL.ACR,TTL.BALACR,TTL.EFFRATE,TTL.BALCOL,TTL.BALRATE,TTL.BALCMP","TTL","TTL.TJD=:VIN1 AND TTL.CRCD NOT ='0'","TTL.TJD,TTL.CRCD,TTL.CLS,TTL.GRP,TTL.TYPE,TTL.GLSC,TTL.CC","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc6,vovc1,vovc12,vovc3,vovc2,vovc4,vovc5
	set vovc6="",vovc1="",vovc12="",vovc3="",vovc2="",vovc4="",vovc5=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc6,vc6,vovc1,vc1,vovc12,vc12,vovc3,vc3,vovc2,vc2,vovc4,vc4,vovc5,vc5
	set vovc6=vc6,vovc1=vc1,vovc12=vc12,vovc3=vc3,vovc2=vc2,vovc4=vc4,vovc5=vc5
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19
	set vc1=V.piece($C(9),1)			// TTL.CRCD
	set vc2=V.piece($C(9),2)			// TTL.TYPE
	set vc3=V.piece($C(9),3)			// TTL.GRP
	set vc4=V.piece($C(9),4)			// TTL.GLSC
	set vc5=V.piece($C(9),5)			// TTL.CC
	set vc6=V.piece($C(9),6)			// TTL.TJD
	set vc7=V.piece($C(9),7)			// TTL.BAL
	set vc8=V.piece($C(9),8)			// TTL.CRAMT
	set vc9=V.piece($C(9),9)			// TTL.DRAMT
	set vc10=V.piece($C(9),10)			// TTL.TRIN
	set vc11=V.piece($C(9),11)			// TTL.TROUT
	set vc12=V.piece($C(9),12)			// TTL.CLS
	set vc13=V.piece($C(9),13)			// TTL.OPEN
	set vc14=V.piece($C(9),14)			// TTL.ACR
	set vc15=V.piece($C(9),15)			// TTL.BALACR
	set vc16=V.piece($C(9),16)			// TTL.EFFRATE
	set vc17=V.piece($C(9),17)			// TTL.BALCOL
	set vc18=V.piece($C(9),18)			// TTL.BALRATE
	set vc19=V.piece($C(9),19)			// TTL.BALCMP
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11
        type public Date YJD
        type public Number TXCR, TXDR, XCR, XDR, YBAL
	type public String CLS, CRCD, DESC, GLSC, OLDCRCD, OLDTYPE, STAR, TRB, TYPE, TYPE2, XFR

	type Number B, CR, DR, X
	type String CC, GRP

	set CRCD = vc1
	set TYPE = vc2
	set GRP = vc3
	set GLSC = vc4
	set CC = vc5
	
	if (CRCD '= OLDCRCD) do {

		type RecordCRCD crcd = Db.getRecord("CRCD", "CO=:%CompanyName,CRCD=:CRCD", 1)

		set DESC = crcd.desc
		set OLDCRCD = CRCD
	}

	if (TYPE '= OLDTYPE) do {

		type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE = :TYPE")

		set CLS = prodctl.cls

		if CLS = "L" do {

			type RecordPRODDFTL proddftl = Db.getRecord("PRODDFTL", "TYPE=:TYPE")
			set TRB = proddftl.trb
		}
		else  do {
			type RecordPRODDFTD proddftd = Db.getRecord("PRODDFTD", "TYPE=:TYPE")
			set TRB = proddftd.trb
		}
	}

	set (B, CR, DR) = 0
	set STAR = ""
	set TYPE2 = TYPE
	set YJD = vc6 - 1
 
	type RecordTTL ttl = Db.getRecord("TTL", "TJD=:YJD,CRCD=:CRCD,CLS=:CLS,GRP=:GRP,TYPE=:TYPE,GLSC=:GLSC,CC=:CC", 1)
	set YBAL = +ttl.bal
	set B = vc7
	set CR = vc8
	set DR = vc9

	if (+TRB '= 0) do {
		set TXDR = vc10
		set XDR = TXDR
		set TXCR = vc11
		set XCR = TXCR
		set X = DR + XDR - (CR + XCR)
	}
	else  do {
		set TXCR = vc10
		set XCR = TXCR
		set TXDR = vc11
		set XDR = TXDR
		set X = CR + XCR - (DR + XDR)
	}

	set XFR = ""
	if ((+XCR '= 0) ! (+XDR '= 0)) set XFR = "Transfers:"
	
	if (B - (YBAL + X) '= 0) set STAR = "*"
	quit

VPREAQ	// Pre-processor (after query)

	type public String CLS, DESC, OLDCRCD, OLDDESC, OLDTYPE, TRB, TYPE

	set (CLS, DESC, OLDCRCD, OLDDESC, OLDTYPE, TRB, TYPE) = ""
	quit

VPREBQ	// Pre-processor (before query)

	//Incoming=CLS,YJD,TJD2
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1,vskp(6)=1,vskp(7)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(7).get() do VDTL7 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(7)
	type Public String vc6,vovc6,vc1,vovc1,vc12,vovc12,vc3,vovc3,vc2,vovc2,vc4,vovc4,vc5,vovc5
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7)=0
	if vb1!(vovc6'=vc6) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,VH0=1
	if vb2!(vovc1'=vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,VH0=1
	if vb3!(vovc12'=vc12) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1,VH0=1
	if vb4!(vovc3'=vc3) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1,VH0=1
	if vb5!(+vovc2'=+vc2) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1
	if vb6!(vovc4'=vc4) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(7) set vs(7)=1 do VSUM7 quit:VFMQ  do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do VSUM6 quit:VFMQ  do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do VSUM5 quit:VFMQ  do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),TXCR,TXDR,YBAL,vc14,vc7,vc15,vc19,vc17,vc18,vc8,vc9,vc13
	type Public String VSTATS

	set VT(7)=VT(7)+1
	set VT(7,1,1)=VT(7,1,1)+TXCR			// @TOT(<<TXCR>>)
	set VT(7,2,1)=VT(7,2,1)+TXDR			// @TOT(<<TXDR>>)
	set VT(7,3,1)=VT(7,3,1)+YBAL			// @TOT(<<YBAL>>)
	set VT(7,4,1)=VT(7,4,1)+vc14			// @TOT([TTL]ACR)
	set VT(7,5,1)=VT(7,5,1)+vc7			// @TOT([TTL]BAL)
	set VT(7,6,1)=VT(7,6,1)+vc15			// @TOT([TTL]BALACR)
	set VT(7,7,1)=VT(7,7,1)+vc19			// @TOT([TTL]BALCMP)
	set VT(7,8,1)=VT(7,8,1)+vc17			// @TOT([TTL]BALCOL)
	set VT(7,9,1)=VT(7,9,1)+vc18			// @TOT([TTL]BALRATE)
	set VT(7,10,1)=VT(7,10,1)+vc8			// @TOT([TTL]CRAMT)
	set VT(7,11,1)=VT(7,11,1)+vc9			// @TOT([TTL]DRAMT)
	set VT(7,12,1)=VT(7,12,1)+vc13			// @TOT([TTL]OPEN)
	quit

VSUM4	// Summary
	type public String %TIM,CLS,CLSS,CRCD,DESC,GLSC,I,IOSL,OLDCRCD,OLDDESC,OLDTYPE,STAR,TJD2,TRB,TXCR,TXDR,TYPE,TYPE2,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XCR,XDR,XFR,YBAL,YJD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if 'VT(4) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="  "_$E(CLSS,1,3)
	set VL=VL_$J("",7-VL.length())_"Totals:"
	set V=VT(4,12,1)				// @TOT([TTL]OPEN,)
	set VL=VL_$J("",15-VL.length())_$J(V,8)
	set V=VT(4,3,1)					// @TOT(<<YBAL>>,)
	set VL=VL_$J("",24-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(4,11,1)				// @TOT([TTL]DRAMT,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(4,10,1)				// @TOT([TTL]CRAMT,)
	set VL=VL_$J("",53-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(4,5,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",66-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(4,4,1)					// @TOT([TTL]ACR,)
	set VL=VL_$J("",82-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(4,6,1)					// @TOT([TTL]BALACR,)
	set VL=VL_$J("",93-VL.length())_$S(V="":"",1:$J(V,0,2))
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(4,9,1)/VT(4,7,1)		// @TOT([TTL]BALRATE)/@TOT([TTL]BALCMP,)
		}
	set VL=VL_$J("",106-VL.length())_$S(V="":"",1:$J(V,0,3))
	set V=VT(4,8,1)					// @TOT([TTL]BALCOL,)
	set VL=VL_$J("",113-VL.length())_$S(V="":"",1:$J(V,0,2))
	do VOM
	set VL="                             "_"Transfers:"
	set V=VT(4,2,1)					// @TOT(<<TXDR>>,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(4,1,1)					// @TOT(<<TXCR>>,)
	set V=$S(V="":"",1:$J(V,0,2)) do VP1 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V		// @TOT(<<TXCR>>,)
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM5	// Summary
	type public String %TIM,CLS,CLSS,CRCD,DESC,GLSC,I,IOSL,OLDCRCD,OLDDESC,OLDTYPE,STAR,TJD2,TRB,TXCR,TXDR,TYPE,TYPE2,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XCR,XDR,XFR,YBAL,YJD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if 'VT(5) quit
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="  "_$E(vc3,1,4)
	set VL=VL_$J("",7-VL.length())_"Totals:"
	set V=VT(5,12,1)				// @TOT([TTL]OPEN,)
	set VL=VL_$J("",15-VL.length())_$J(V,8)
	set V=VT(5,3,1)					// @TOT(<<YBAL>>,)
	set VL=VL_$J("",24-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(5,11,1)				// @TOT([TTL]DRAMT,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(5,10,1)				// @TOT([TTL]CRAMT,)
	set VL=VL_$J("",53-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(5,5,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",66-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(5,4,1)					// @TOT([TTL]ACR,)
	set VL=VL_$J("",82-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(5,6,1)					// @TOT([TTL]BALACR,)
	set VL=VL_$J("",93-VL.length())_$S(V="":"",1:$J(V,0,2))
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(5,9,1)/VT(5,7,1)		// @TOT([TTL]BALRATE)/@TOT([TTL]BALCMP,)
		}
	set VL=VL_$J("",106-VL.length())_$S(V="":"",1:$J(V,0,3))
	set V=VT(5,8,1)					// @TOT([TTL]BALCOL,)
	set VL=VL_$J("",113-VL.length())_$S(V="":"",1:$J(V,0,2))
	do VOM
	set VL="                             "_"Transfers:"
	set V=VT(5,2,1)					// @TOT(<<TXDR>>,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(5,1,1)					// @TOT(<<TXCR>>,)
	set V=$S(V="":"",1:$J(V,0,2)) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V		// @TOT(<<TXCR>>,)
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	quit

VSUM6	// Summary
	type public String %TIM,CLS,CLSS,CRCD,DESC,GLSC,I,IOSL,OLDCRCD,OLDDESC,OLDTYPE,STAR,TJD2,TRB,TXCR,TXDR,TYPE,TYPE2,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XCR,XDR,XFR,YBAL,YJD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if 'VT(6) quit
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="  "_$E(TYPE2,1,4)
	set VL=VL_$J("",7-VL.length())_"Totals:"
	set V=VT(6,12,1)				// @TOT([TTL]OPEN,)
	set VL=VL_$J("",15-VL.length())_$J(V,8)
	set V=VT(6,3,1)					// @TOT(<<YBAL>>,)
	set VL=VL_$J("",24-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(6,11,1)				// @TOT([TTL]DRAMT,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(6,10,1)				// @TOT([TTL]CRAMT,)
	set VL=VL_$J("",53-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(6,5,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",66-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(6,4,1)					// @TOT([TTL]ACR,)
	set VL=VL_$J("",82-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(6,6,1)					// @TOT([TTL]BALACR,)
	set VL=VL_$J("",93-VL.length())_$S(V="":"",1:$J(V,0,2))
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(6,9,1)/VT(6,7,1)		// @TOT([TTL]BALRATE)/@TOT([TTL]BALCMP,)
		}
	set VL=VL_$J("",106-VL.length())_$S(V="":"",1:$J(V,0,3))
	set V=VT(6,8,1)					// @TOT([TTL]BALCOL,)
	set VL=VL_$J("",113-VL.length())_$S(V="":"",1:$J(V,0,2))
	do VOM
	set VL="                             "_"Transfers:"
	set V=VT(6,2,1)					// @TOT(<<TXDR>>,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(6,1,1)					// @TOT(<<TXCR>>,)
	set V=$S(V="":"",1:$J(V,0,2)) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V		// @TOT(<<TXCR>>,)
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	quit

VDTL7	// Detail
	type public String %TIM,CLS,CLSS,CRCD,DESC,GLSC,IOSL,OLDCRCD,OLDDESC,OLDTYPE,STAR,TJD2,TRB,TXCR,TXDR,TYPE,TYPE2,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),XCR,XDR,XFR,YBAL,YJD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL=$J(vc2,4)
	set VL=VL_$J("",5-VL.length())_$E(vc4,1,4)
	set VL=VL_$J("",10-VL.length())_$J(vc5,6)
	set VL=VL_$J("",17-VL.length())_$J(vc13,6)
	set VL=VL_$J("",24-VL.length())_$S(YBAL="":"",1:$J(YBAL,0,2))
	set VL=VL_$J("",40-VL.length())_$S(vc9="":"",1:$J(vc9,0,2))
	set VL=VL_$J("",53-VL.length())_$S(vc8="":"",1:$J(vc8,0,2))
	set VL=VL_$J("",66-VL.length())_$S(vc7="":"",1:$J(vc7,0,2))
	set VL=VL_$J("",82-VL.length())_$S(vc14="":"",1:$J(vc14,0,2))
	set VL=VL_$J("",93-VL.length())_$S(vc15="":"",1:$J(vc15,0,2))
	set VL=VL_$J("",106-VL.length())_$S(vc16="":"",1:$J(vc16,0,3))
	set VL=VL_$J("",113-VL.length())_$S(vc17="":"",1:$J(vc17,0,2))
	set VL=VL_$J("",129-VL.length())_$E(STAR,1,1)
	do VOM
	set VL="                             "_$E(XFR,1,10)
	set VL=VL_$J("",40-VL.length())_$S(XDR="":"",1:$J(XDR,0,2))
	set VL=VL_$J("",53-VL.length())_$S(XCR="":"",1:$J(XCR,0,2))
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM7	// Summary
	type public String %TIM,CLS,CLSS,CRCD,DESC,GLSC,I,IOSL,OLDCRCD,OLDDESC,OLDTYPE,STAR,TJD2,TRB,TXCR,TXDR,TYPE,TYPE2,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XCR,XDR,XFR,YBAL,YJD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate

	if 'VT(7) quit
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set V=vc4,VO=V set V=$E(V,1,4) do VP4 quit:VFMQ!verror.get()  set VL="  "_V
	set VL=VL_$J("",7-VL.length())_"Totals:"
	set V=VT(7,12,1)				// @TOT([TTL]OPEN,)
	set VL=VL_$J("",15-VL.length())_$J(V,8)
	set V=VT(7,3,1)					// @TOT(<<YBAL>>,)
	set VL=VL_$J("",24-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(7,11,1)				// @TOT([TTL]DRAMT,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(7,10,1)				// @TOT([TTL]CRAMT,)
	set VL=VL_$J("",53-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(7,5,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",66-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(7,4,1)					// @TOT([TTL]ACR,)
	set VL=VL_$J("",82-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(7,6,1)					// @TOT([TTL]BALACR,)
	set VL=VL_$J("",93-VL.length())_$S(V="":"",1:$J(V,0,2))
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(7,9,1)/VT(7,7,1)		// @TOT([TTL]BALRATE)/@TOT([TTL]BALCMP,)
		}
	set VL=VL_$J("",106-VL.length())_$S(V="":"",1:$J(V,0,3))
	set V=VT(7,8,1)					// @TOT([TTL]BALCOL,)
	set VL=VL_$J("",113-VL.length())_$S(V="":"",1:$J(V,0,2))
	do VOM
	set VL="                             "_"Transfers:"
	set V=VT(7,2,1)					// @TOT(<<TXDR>>,)
	set VL=VL_$J("",40-VL.length())_$S(V="":"",1:$J(V,0,2))
	set V=VT(7,1,1)					// @TOT(<<TXCR>>,)
	set V=$S(V="":"",1:$J(V,0,2)) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V		// @TOT(<<TXCR>>,)
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CLS,CLSS,CONAM,CRCD,DESC,GLSC,OLDCRCD,OLDDESC,OLDTYPE,RID,RN,STAR,TJD2,TRB,TXCR,TXDR,TYPE,TYPE2,VL,XCR,XDR,XFR,YBAL,YJD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc12,vovc2,vovc3,vovc4,vovc5,vovc6,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+9,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",122-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  (SCA034)"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	set VL=$E($S(CLS="D":"Deposit",1:"   Loan"),1,7)
	set VL=VL_$J("",8-VL.length())_"Group"
	set VL=VL_$J("",14-VL.length())_$E(vc3,1,4)
	do VOM
	set V="Currency Code "_vc1_" - "_DESC do VP6 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="Prod G/L     CC  Nbr of      Ledger Bal        Total        Total      Ledger Bal    Accrued      Accrual   Eff        Collected"
	do VOM
	set VL="Type Code         Accts"
	do VP7 quit:VFMQ!verror.get()  set V="("_$$DAT^%ZM(YJD,$G(%MSKD))_")"
	set VL=VL_$J("",29-VL.length())_V
	do VP8 quit:VFMQ!verror.get()  set V="("_$$DAT^%ZM(TJD2,$G(%MSKD))_")"
	set VL=VL_$J("",71-VL.length())_V
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - @TOT(<<TXCR>>,,$,12)

	type public Number TXCR, TXDR
	type public String V, VL
 
	if ((+TXCR = 0) & (+TXDR = 0)) set (V, VL) = ""
	quit

VP2	// Column post-processor - @TOT(<<TXCR>>,,$,12)

	type public Number TXCR, TXDR
	type public String V, VL
 
	if ((+TXCR = 0) & (+TXDR = 0)) set (V, VL) = ""
	quit

VP3	// Column post-processor - @TOT(<<TXCR>>,,$,12)

	type public Number TXCR, TXDR
	type public String V, VL
 
	if ((+TXCR = 0) & (+TXDR = 0)) set (V, VL) = ""
	quit

VP4	// Column post-processor - Variable: GLSC

	type public String CLS, CLSS

	if (CLS = "D") set CLSS = "Dep"
	else  set CLSS = "Loan"
	quit

VP5	// Column post-processor - @TOT(<<TXCR>>,,$,12)

	type public Number TXCR, TXDR
	type public String V, VL

	if ((+TXCR = 0) & (+TXDR = 0)) set (V, VL) = ""
	quit

VP6	// Column post-processor - Currency Code <<CRCD>> - <<DESC>>

	type public Boolean %MCP
	type public String V, VL

	if '%MCP set (V,VL) = ""
	quit

VP7	// Column pre-processor - (<<$$DAT^%ZM(YJD,$G(%MSKD))>>)

	type public String vc6
	type public Date YJD

	set YJD = vc6 - 1
	quit

VP8	// Column pre-processor - (<<$$DAT^%ZM(TJD2,$G(%MSKD))>>)

	type public String vc6
	type public Date TJD, TJD2

	set TJD2 = vc6
	quit
