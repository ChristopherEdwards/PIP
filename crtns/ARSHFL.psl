ARSHFL(RecordARSH arsh, String vpar, Boolean vparNorm) // ARSH - Reconciliation History File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (25)             04/18/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = arsh.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(arsh,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(arsh,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("ACTDT").exists()!vx("CKNO").exists()!vx("CSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ARSH",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ARSH","CID = :arsh.cid and ACTDT = :arsh.actdt and CKNO = :arsh.ckno and CSEQ = :arsh.cseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String ACTDT
	type public String CKNO
	type public String CSEQ

	type RecordARSH arsh = Db.getRecord("ARSH","CID=:CID,ACTDT=:ACTDT,CKNO=:CKNO,CSEQ=:CSEQ")
	if (%ProcessMode = 2) do {
		do arsh.setMode(2)

		do ARSHFL(arsh,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordARSH arsh

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ARSH","CID = :arsh.cid and ACTDT = :arsh.actdt and CKNO = :arsh.ckno and CSEQ = :arsh.cseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(arsh)) S ^ARSH(vobj(arsh,-3),vobj(arsh,-4),vobj(arsh,-5),vobj(arsh,-6))=vobj(arsh)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordARSH arsh


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ARSH(vobj(arsh,-3),vobj(arsh,-4),vobj(arsh,-5),vobj(arsh,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordARSH arsh

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordARSH arsh

	if arsh.cid.isNull() do vreqerr("CID") quit
	if arsh.actdt.isNull() do vreqerr("ACTDT") quit
	if arsh.ckno.isNull() do vreqerr("CKNO") quit
	if arsh.cseq.isNull() do vreqerr("CSEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ARSH","MSG",1767,"ARSH."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordARSH arsh
	if 'arsh.ckno.isNull() set vfkey("^ARS("_""""_arsh.cid_""""_","_""""_arsh.ckno_""""_")")="ARSH(CID,CKNO) -> ARS"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordARSH arsh
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ARS",":arsh.cid,:arsh.ckno") set vERRMSG = $$^MSG(8563,"ARSH(CID,CKNO) -> ARS") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordARSH arsh

	set X = arsh.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = arsh.actdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACTDT", vRM) quit
	set X = arsh.ckno if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARSH.CKNO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = arsh.cseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("CSEQ", vRM) quit
	set X = arsh.dactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DACTDT", vRM) quit
	set X = arsh.ddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DDT", vRM) quit
	if arsh.duid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DUID", vRM) quit
	set X = arsh.iactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("IACTDT", vRM) quit
	set X = arsh.iamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARSH.IAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = arsh.idt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("IDT", vRM) quit
	if arsh.iuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IUID", vRM) quit
	set X = arsh.pactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PACTDT", vRM) quit
	set X = arsh.pamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARSH.PAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = arsh.pdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PDT", vRM) quit
	if arsh.pinfo.length()>30 set vRM = $$^MSG(1076,30) do vdderr("PINFO", vRM) quit
	if arsh.pname.length()>30 set vRM = $$^MSG(1076,30) do vdderr("PNAME", vRM) quit
	if arsh.puid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PUID", vRM) quit
	set X = arsh.ractdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RACTDT", vRM) quit
	set X = arsh.rdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RDT", vRM) quit
	if arsh.ruid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RUID", vRM) quit
	set X = arsh.spray if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("SPRAY", vRM) quit
	set X = arsh.stat if 'X.isNull(),'Db.isDefined("STBLARSSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
	set X = arsh.vactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VACTDT", vRM) quit
	set X = arsh.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	if arsh.vuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("VUID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ARSH","MSG",979,"ARSH."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordARSH arsh

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("ACTDT").exists() set vux("ACTDT") = vx("ACTDT")
	if vx("CKNO").exists() set vux("CKNO") = vx("CKNO")
	if vx("CSEQ").exists() set vux("CSEQ") = vx("CSEQ")
	do vkey(1) set voldkey = arsh.cid_","_arsh.actdt_","_arsh.ckno_","_arsh.cseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = arsh.cid_","_arsh.actdt_","_arsh.ckno_","_arsh.cseq // Copy new keys into object
	type RecordARSH vnewrec = arsh.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ARSH",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordARSH arsh

	if vux("CID").exists() set arsh.cid = vux("CID").piece("|",i)
	if vux("ACTDT").exists() set arsh.actdt = vux("ACTDT").piece("|",i)
	if vux("CKNO").exists() set arsh.ckno = vux("CKNO").piece("|",i)
	if vux("CSEQ").exists() set arsh.cseq = vux("CSEQ").piece("|",i)
	quit
