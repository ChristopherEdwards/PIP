LNPP2FIL(RecordLNPP2 lnpp2, String vpar, Boolean vparNorm) // LNPP2 - Loan Seller (Pool Level) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (24)             05/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnpp2.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lnpp2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnpp2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SLCD").exists()!vx("PL").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNPP2",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNPP2","SLCD = :lnpp2.slcd and PL = :lnpp2.pl") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SLCD
	type public String PL

	type RecordLNPP2 lnpp2 = Db.getRecord("LNPP2","SLCD=:SLCD,PL=:PL")
	if (%ProcessMode = 2) do {
		do lnpp2.setMode(2)

		do LNPP2FIL(lnpp2,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNPP2 lnpp2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNPP2","SLCD = :lnpp2.slcd and PL = :lnpp2.pl") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(lnpp2,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(lnpp2,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnpp2)) S ^UTBL("LNPP",vobj(lnpp2,-3),vobj(lnpp2,-4))=vobj(lnpp2)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNPP2 lnpp2

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(lnpp2,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("LNPP",vobj(lnpp2,-3),vobj(lnpp2,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNPP2 lnpp2

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNPP2 lnpp2

	if lnpp2.slcd.isNull() do vreqerr("SLCD") quit
	if lnpp2.pl.isNull() do vreqerr("PL") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPP2","MSG",1767,"LNPP2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNPP2 lnpp2

	if lnpp2.slcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("SLCD", vRM) quit
	set X = lnpp2.pl if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PL", vRM) quit
	set X = lnpp2.cip if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.CIP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = lnpp2.fecd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("FECD", vRM) quit
	set X = lnpp2.ipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.IPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.ipy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.IPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.iytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.IYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.pp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,.01,100,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.PP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.prl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.PRL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.prlr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.PRLR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.prpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.PRPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.prytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.PRYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.reppb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.REPPB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.rmop if 'X.isNull(),'Db.isDefined("STBLRMOP","X") set vRM = $$^MSG(1485,X) do vdderr("RMOP", vRM) quit
	set X = lnpp2.scp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.SCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.spl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.SPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.spy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.SPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lnpp2.svn.length()>10 set vRM = $$^MSG(1076,10) do vdderr("SVN", vRM) quit
	set X = lnpp2.sytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.SYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lnpp2.tad if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TAD", vRM) quit
	set X = lnpp2.taip if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TAIP", vRM) quit
	set X = lnpp2.tpo if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TPO", vRM) quit
	set X = lnpp2.yield if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPP2.YIELD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPP2","MSG",979,"LNPP2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordLNPP2 lnpp2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SLCD").exists() set vux("SLCD") = vx("SLCD")
	if vx("PL").exists() set vux("PL") = vx("PL")
	do vkey(1) set voldkey = lnpp2.slcd_","_lnpp2.pl       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnpp2.slcd_","_lnpp2.pl       // Copy new keys into object
	type RecordLNPP2 vnewrec = lnpp2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNPP2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNPP2 lnpp2

	if vux("SLCD").exists() set lnpp2.slcd = vux("SLCD").piece("|",i)
	if vux("PL").exists() set lnpp2.pl = vux("PL").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordLNPP2 lnpp2
	type public String vpar

	do Db.delete("LNPP6","SLCD=:lnpp2.slcd AND PL=:lnpp2.pl",vpar) // Cascade delete

	quit
