VP01CIF()	// Date Item Protection procedure for CIF
	// Last compiled:  08/30/2007 02:22 PM - joynerd

	// THIS IS A COMPILED ROUTINE.  Compiled by procedure DBSPROT3

	quit	// No entry from top


	// ==================================================================
RECPROT()	// Record level protection
	// ==================================================================

	quit 0	// No record level protection set up


	// ==================================================================
DLNUM()	// Drivers License Number
	// ==================================================================

	type public String ACN

	type Number vprot = 0

	// Check each group, stop if get no access (vprot = 2)
	do g1(.vprot) if (vprot = 2) quit 2	// Group 1

	quit vprot


g1(Number vprot)
	// Group               1 - Date Item Protection (CIF)  on DLNUM for SCA113
	// Protection Option - 2 (No access)
	// Userclass         - SCA13
	// Query:

	if %UserClass'="SCA13" quit	// Userclass not included

	set vprot = 2	// No queries
	quit


	// ==================================================================
OIN()	// Other Identification Number
	// ==================================================================

	type public String ACN

	type Number vprot = 0

	// Check each group, stop if get no access (vprot = 2)
	do g2(.vprot) if (vprot = 2) quit 2	// Group 1

	quit vprot


g2(Number vprot)
	// Group               1 - Date Item Protection (CIF)  on OIN for SCA113
	// Protection Option - 2 (No access)
	// Userclass         - SCA13
	// Query:

	if %UserClass'="SCA13" quit	// Userclass not included

	set vprot = 2	// No queries
	quit


	// ==================================================================
PASNUM()	// Passport Number
	// ==================================================================

	type public String ACN

	type Number vprot = 0

	// Check each group, stop if get no access (vprot = 2)
	do g3(.vprot) if (vprot = 2) quit 2	// Group 1

	quit vprot


g3(Number vprot)
	// Group               1 - Date Item Protection (CIF)  on PASNUM for SCA113
	// Protection Option - 2 (No access)
	// Userclass         - SCA13
	// Query:

	if %UserClass'="SCA13" quit	// Userclass not included

	set vprot = 2	// No queries
	quit


	// ==================================================================
TAXID()	// TIN/SID
	// ==================================================================

	type public String ACN

	type Number vprot = 0

	// Check each group, stop if get no access (vprot = 2)
	do g4(.vprot) if (vprot = 2) quit 2	// Group 1

	quit vprot


g4(Number vprot)
	// Group               1 - Date Item Protection (CIF)  on TAXID for SCA13
	// Protection Option - 2 (No access)
	// Userclass         - SCA13
	// Query:

	if %UserClass'="SCA13" quit	// Userclass not included

	set vprot = 2	// No queries
	quit


	// ==================================================================
public %EXT(RecordCIF CIF,	// External entry point
	    String VP())	// Data item name array [*]	/MECH=REFAFF:RW

	/*
	ARGUMENT NOTES:
		. VP		Incoming data item name array, returns
				restriction flag.  VP(*) = record level protection

	INPUT:
		. %UCLS		Userclass
	*/

	type public String ACN

	type Number vprot
	type String vp1, vp2, vp3, vp4

	quit:'%UserClass.exists()
	quit:(VP.data() '> 0)

	if 'CIF.exists() set CIF = Db.getRecord("CIF","ACN=:ACN")

	set vp1 = CIF.dlnum
	set vp2 = CIF.oin
	set vp3 = CIF.pasnum
	set vp4 = CIF.taxid

	// Get data item protection for each data item requested
	if VP("DLNUM").exists() set vprot = $$DLNUM if vprot set VP("DLNUM") = vprot
	if VP("OIN").exists() set vprot = $$OIN if vprot set VP("OIN") = vprot
	if VP("PASNUM").exists() set vprot = $$PASNUM if vprot set VP("PASNUM") = vprot
	if VP("TAXID").exists() set vprot = $$TAXID if vprot set VP("TAXID") = vprot

	quit


	// ==================================================================
public EXT(RecordCIF CIF)	// Return record level protection indicator

	type public String ACN

	type String vp1, vp2, vp3, vp4
	if 'CIF.exists() set CIF = Db.getRecord("CIF","ACN=:ACN")

	set vp1 = CIF.dlnum
	set vp2 = CIF.oin
	set vp3 = CIF.pasnum
	set vp4 = CIF.taxid

	quit $$RECPROT


	// ==================================================================
public ptinfo(String sel)	// Select list

	/*
	Return a new select list including required column names,
	as well as column mapping information for use by status section.

	RETURNS:
		. $$   newlist|vmatch|vmap

		       newlist  A list of column names required to process
		                this protection logic
		       vmatch   A list of column positions with protection
		                logic defined
		       vmap     Internal variable mapping table

	EXAMPLES:
		- $$ptinfo("DEP.CID,DEP.BAL,DEP.BOO")

		    Returns DEP.CID,DEP.BAL,DEP.BOO,DEP.IRN|2|2,3,4
	*/

	type Boolean vp = 0
	type Number vpos
	type String vmatch, vmap

	set vmatch = ""

	// Add required column names to the original list
	set vpos = $$COLMPOS^SQLPROT(sel ,"CIF.DLNUM"), vmatch = vmatch_","_vpos
	if (vpos > 0) set vp = 1
	set vpos = $$COLMPOS^SQLPROT(sel ,"CIF.OIN"), vmatch = vmatch_","_vpos
	if (vpos > 0) set vp = 1
	set vpos = $$COLMPOS^SQLPROT(sel ,"CIF.PASNUM"), vmatch = vmatch_","_vpos
	if (vpos > 0) set vp = 1
	set vpos = $$COLMPOS^SQLPROT(sel ,"CIF.TAXID"), vmatch = vmatch_","_vpos
	if (vpos > 0) set vp = 1
	if 'vp quit sel	// Protection logic not required

	// Match column position
	set vmap=""
	set vmap = vmap_","_$$COLMPOS^SQLPROT(sel, "CIF.DLNUM", 1)
	set vmap = vmap_","_$$COLMPOS^SQLPROT(sel, "CIF.OIN", 1)
	set vmap = vmap_","_$$COLMPOS^SQLPROT(sel, "CIF.PASNUM", 1)
	set vmap = vmap_","_$$COLMPOS^SQLPROT(sel, "CIF.TAXID", 1)

	quit sel_"|"_vmatch.extract(2, vmatch.length())_"|"_vmap.extract(2, vmap.length())


	// ==================================================================
public status(String val,	// Column values (tab separated)	MECH=REF:RW
	      String vsts,	// Protection status	MECH=REF:RW
	      String ptinfo)	// Protection API info [*]

	/*
	Return data item protection status

	Return a possibly modified list of values, if some are protected,
	as well as the protection status map in vsts.

	ARGUMENT NOTES:
		. ptinfo   vmatch|vmap|orgcolm|newcolm|vptopt
		             vmatch   List of protected columns
		             vmap     List of internal variable mapping table
		             orgcolm  Total number of columns (original SELECT)
		             newcolm  Total number of columns (new SELECT)
		             vptopt   Protection option (0 = full access
		                                         2 = read only access
		                                         3 = no access)

	EXAMPLES:
		do status(.val,.vsts,"2,|2,3,4|2|4")  returns 02 in vsts
	*/

	type Number i, newcolm, orgcolm, vpos, vprot
	type String vmatch, vmap, vptopt
	type String vp1, vp2, vp3, vp4

	set vmatch = ptinfo.piece("|", 1)
	set vmap = ptinfo.piece("|", 2)
	set orgcolm = ptinfo.piece("|", 3)
	set newcolm = ptinfo.piece("|", 4)
	set vptopt = ptinfo.piece("|", 5)

	if vsts.isNull() set vsts.piece(0, orgcolm + 1)=""	// Init status to 0's

	// Map column values to internal variable names
	set vp1 = val.piece($C(9), vmap.piece(",", 1))	// CIF.DLNUM
	set vp2 = val.piece($C(9), vmap.piece(",", 2))	// CIF.OIN
	set vp3 = val.piece($C(9), vmap.piece(",", 3))	// CIF.PASNUM
	set vp4 = val.piece($C(9), vmap.piece(",", 4))	// CIF.TAXID

	// Get and insert protection status
	set vpos = vmatch.piece(",", 1) if (vpos > orgcolm) set vpos = 0
	if (vpos > 0) set vprot = $$DLNUM if (vprot > 0) set vsts.extract(vpos) = (vprot + 1)
	set vpos = vmatch.piece(",", 2) if (vpos > orgcolm) set vpos = 0
	if (vpos > 0) set vprot = $$OIN if (vprot > 0) set vsts.extract(vpos) = (vprot + 1)
	set vpos = vmatch.piece(",", 3) if (vpos > orgcolm) set vpos = 0
	if (vpos > 0) set vprot = $$PASNUM if (vprot > 0) set vsts.extract(vpos) = (vprot + 1)
	set vpos = vmatch.piece(",", 4) if (vpos > orgcolm) set vpos = 0
	if (vpos > 0) set vprot = $$TAXID if (vprot > 0) set vsts.extract(vpos) = (vprot + 1)

	// Truncate data to original length
	if (newcolm > orgcolm) set val = val.piece($C(9), 1, orgcolm)

	// Null out column data
	if (vptopt = 2) for i = 1:1:vsts.length() if vsts.extract(i) = 3 set val.piece($C(9), i) = ""

	quit


	// ==================================================================
public RPWHERE1()	// Return WHERE clause, protection options 1 and 2

	/*
	Return Record Protect WHERE clause where both protection options
	(1 = read only access; 2 = no access) are included

	RETURNS:
		. $$   WHERE clause
	*/

	quit ""	// No protection


	// ==================================================================
public RPWHERE2()	// Return WHERE clause, protection option 2

	/*
	Return Record Protect WHERE clause where only protection option
	2 (no access) is included

	RETURNS:
		. $$   WHERE clause
	*/

	quit ""	// No protection
