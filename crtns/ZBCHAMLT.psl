ZBCHAMLT //Batch ZBCHAMLDTJ - Daily Extract for Transaction to Experia
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - ZBCHAMLDTJ Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("ZBCHAMLDTJ")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("ZBCHAMLDTJ") quit
 do JOBMGR^BCHUTL(%FN,"ZBCHAMLDTJ",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("ZBCHAMLDTJ")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,DATETIME,CID,TSEQ) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("ZBCHAMLDTJ","*","",TJD.get()_","_DATETIME.get()_","_CID.get()_","_TSEQ.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"ZBCHAMLDTJ",TJD.get()_","_DATETIME.get()_","_CID.get()_","_TSEQ.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"ZBCHAMLDTJ",TJD.get()_","_DATETIME.get()_","_CID.get()_","_TSEQ.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,DATETIME,CID,TSEQ)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("ZBCHAMLDTJ","*","",TJD.get()_","_DATETIME.get()_","_CID.get()_","_TSEQ.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"ZBCHAMLDTJ",TJD.get()_","_DATETIME.get()_","_CID.get()_","_TSEQ.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,DATETIME,CID,TSEQ) //
	type Date DATE
	type String AMOUNT,BLANK,BRCD,CHKNUM,XCID,CRCD,DATA,EFD,ETC,ETCR,REVF,TCMT,TOT,UID
	type Boolean DC
	type RecordACN acn
	type RecordDTJ dtj
	type RecordZAMLDTJ zamldtj
	type RecordZUTBLTRN zutbltrn
	
	set dtj=Db.getRecord("DTJ","TJD=:TJD,DATETIME=:DATETIME,CID=:CID,TSEQ=:TSEQ")
	
	// Error Correct Transactions not included
	if dtj.itc6 quit	
	
	// Log dayend error if ETC not defined in ZUTBLTRN
	set ETC=dtj.etc
	if ZSEND(ETC).get()="N" quit	
	else  if ZSEND(ETC).get()="" do LOGERR(" not defined in ZUTBLTRN",,ETC)

	type String TSOARR,ZCASH
	do OUT^UTSO(.TSOARR,dtj.tso)
	
	
	// If base currency account AMOUNT=DTJ.TOT, If foreign currency account AMOUNT=DTJ.BASEAMT 
	if dtj.crcd="MXN" set AMOUNT=dtj.tot
	else  set AMOUNT=dtj.bseamt
	set TOT=dtj.tot
	
	// For ZAMLTRN Report, fill up the temporary array
	set DC=dtj.itc1
	if ZAMLTRN(DC,ETC).get()'="" do {
		set COUNT=(ZAMLTRN(DC,ETC).piece("|",1))+1
		set TAMOUNT=(+(ZAMLTRN(DC,ETC).piece("|",2)))+AMOUNT
		set ZAMLTRN(DC,ETC)=COUNT_"|"_TAMOUNT
	}
	else  set ZAMLTRN(DC,ETC)=1_"|"_AMOUNT
	
	// if reversal concatenate "R" in front of ETC, and amount sign shd be reversed
	set REVF=dtj.itc12
	if REVF.get() set ETC="R"_ETC
	if REVF.get() set AMOUNT=(-1)*AMOUNT.toNumber() set TOT=(-1)*TOT.toNumber()
	
	set ZCASH=TSOARR("ZCASH").get()
	if (+ZCASH) & (+AMOUNT'=+ZCASH) {
		set acn=Db.getRecord("ACN","CID=dtj.cid")
		if EXPTRN(acn.grp).get()="" set ER=$$^MSG(1485,"ZUTBLEXPTRN-"_acn.grp) throw Class.new("Error",","_RM)
		set AMOUNT=AMOUNT-ZCASH
		if DC=0 set CASHETC=EXPTRN(acn.grp).piece("|",1),CHKETC=EXPTRN(acn.grp).piece("|",2)
		if DC=1 set CASHETC=EXPTRN(acn.grp).piece("|",3),CHKETC=EXPTRN(acn.grp).piece("|",4)
		set CASHETC=CASHETC.justify(8,-1,,1)
		set CHKETC=CHKETC.justify(8,-1,,1)
	}
	
	set BLANK=""
	set ETC=ETC.justify(8,-1,,1)	
	set AMOUNT=AMOUNT.zero(20,2,0,1)
	set EFD=dtj.tjd.toString("MM/DD/YEAR")
	set EFD=EFD.justify(10,-1,,1)
	set XCID=dtj.cid, XCID=XCID.justify(20,-1,,1)
	
	// T_dtj.uid<space>B_dtj.brcd<space>C_dtj.chknum<space>dtj.tcmt
	set UID=dtj.uid if UID.get()'="" set UID="T"_UID
	set BRCD=dtj.brcd if BRCD.get()'="" set BRCD=" B"_BRCD
	set CHKNUM=dtj.chknum if CHKNUM.get()'="" set CHKNUM=" C"_CHKNUM
	set TCMT=UID_BRCD_CHKNUM_" "_dtj.tcmt
	set TCMT=TCMT.justify(40,-1,,1)
	
	set TOT=TOT.zero(20,2,0,1)
	set CRCD=dtj.crcd.justify(8,-1,,1)
	
	set DATA=ETC_AMOUNT_EFD_XCID_TCMT_TOT_CRCD_BLANK.justify(828)

	if (+ZCASH) & (+AMOUNT'=+ZCASH) {
		set DATA=CASHETC_ZCASH.zero(20,2,0,1)_EFD_XCID_TCMT_TOT_CRCD_BLANK.justify(828,-1,,1)
		set DATA1=CHKETC_AMOUNT_EFD_XCID_TCMT_TOT_CRCD_BLANK.justify(828,-1,,1)
	}
	// Dump DATA into a temporary table to be used for extract file generation 
	
	set zamldtj = Class.new("RecordZAMLDTJ")
	set zamldtj.cid=XCID
	set zamldtj.seq=dtj.tseq
	set zamldtj.data=DATA
	do zamldtj.bypassSave()
	
	if (+ZCASH.get()) & (+AMOUNT'=+ZCASH) {
		set zamldtj = Class.new("RecordZAMLDTJ")
		set zamldtj.cid=XCID
		set zamldtj.seq=dtj.tseq+0.5
		set zamldtj.data=DATA1
		do zamldtj.bypassSave()
	}
	quit
	
LOGERR(EMSGEN,ET,ETC)

	type public String ET,%ZTSEQ
	type public Number CID
	
	if ET.get() = "" set ET = "ZBCHAMLDTJ - "_ETC.get()_EMSGEN.get()
	else  set ET = ETC.get()_ET
	do LOG^UTLEXC(%RoutineName,"*",,CID.get(),%ZTSEQ.get(),ET.get())
	kill ET,%ZTSEQ
	
	quit
		
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,TJD,DATETIME,CID,TSEQ
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set TJD=vRECORD.piece($C(9),1)
 set DATETIME=vRECORD.piece($C(9),2)
 set CID=vRECORD.piece($C(9),3)
 set TSEQ=vRECORD.piece($C(9),4)
 do vPROC(TJD,DATETIME,CID,TSEQ)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,TJD,DATETIME,CID,TSEQ
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+45>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	if XTJD.get()="" set XTJD=%SystemDate-1
	
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,DATETIME,CID,TSEQ","DTJ","TJD=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	
	set (COUNT,TAMOUNT)=0
	set (EXPTRN,ZAMLTRN,ZSEND)=""
	type ResultSet rs1
	
	set rs1=Db.select("ETC,SEND","ZUTBLTRN") 
	if 'rs1.isEmpty() while rs1.next() set ZSEND(rs1.getCol(1))=rs1.getCol(2)
	
	type ResultSet exptrn
	set exptrn=Db.select("GRP,DEBCASHETC,DEBCHKETC,CRCASHETC,CRCHKETC","ZUTBLEXPTRN")
	if exptrn.isEmpty() quit
	while exptrn.next() {
		set EXPTRN(exptrn.getCol(1))=exptrn.getCol(2)_"|"_exptrn.getCol(3)_"|"_exptrn.getCol(4)_"|"_exptrn.getCol(5)
	}
		
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	
	type RecordZAMLTRN zamltrn
	set (DC,ETC)=""
	for  set DC=$O(ZAMLTRN(DC)) quit:DC=""  do {
		for  set ETC=$O(ZAMLTRN(DC,ETC)) quit:ETC=""  do {
			set zamltrn=Class.new("RecordZAMLTRN")
			set zamltrn.zdtj=XTJD
			set zamltrn.jobnum=%ProcessID
			set zamltrn.crdr=DC
			set zamltrn.etc=ETC
			set zamltrn.count=ZAMLTRN(DC,ETC).piece("|",1)
			set zamltrn.amount=+(ZAMLTRN(DC,ETC).piece("|",2))
			do zamltrn.bypassSave()
		}	
	}
	quit
	
		
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	
	type Number TYPE
	type String DATA
	type Date DT=XTJD
	type IO io=Class.new("IO")
	type ResultSet rs
	
	set io.openParams="NEWV/WRITE"
	set io.fileName="TR"_DT.toString("YEARMMDD")_".TXT"
	set io.recordSize=2000         // QC808
	do io.open()
	
	// Read from Temporary table to write in Extract Files 
	set rs=Db.select("DATA","ZAMLDTJ")
	if 'rs.isEmpty() while rs.next() do {
 		set DATA=rs.getCol(1)
		do io.write(DATA)
	}
	
	do io.close()
	do Db.fastDelete("ZAMLDTJ")
	
	quit
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
