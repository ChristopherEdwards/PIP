MRPC073(String return,Number version,String tables,String svtyp,Boolean zero)	// System Health Check
	/*
	   ORIG: CHENARDP - 07/22/98
	   DESC: System Health Check

	   This extrinsic function returns information about the system and
	   network that helps determine if they are functioning and
	   accessable.  Refer to Technical Specification 28229TS.DOC
	   for detailed information.

	   [SCATBL5]RPCID=73

	   KEYWORDS: Health Check

	   ARGUMENTS:
	       . return		Return data   		/TYP=T/REQ
	    			Refer to tech spec  	/MECH=REFNAM:W
	                 	for format

	       . versn 		^MRPC073 version number	/TYP=N/REQ/MECH=VAL
	    			Current version = 1

	       . tables 	Tables to be checked  	/TYP=T/NOREQ/MECH=VAL
	    			Comma separated list of /DFT=CUVAR.TBLS
	                 	tables that reside on the
	                 	server to be tested for
	                 	accessibility.

	       . svtyp 		Server type   		/TYP=T/NOREQ/MECH=VAL
	        					/DFT="SCA$IBS"

	       . zero 		Zero statistics   	/TYP=L/NOREQ/MECH=VAL

	   RETURNS:
	   	. $$ 		Error message   	/TYP=T
	    			Null = No error

	   RELATED:
	   	. $$^PBSMRPC - MRPC Service Class Driver

	----- Revision History -----------------------------------------------
      
        07/26/05 - SkariahV- CR16679
	           Removed #WARN directive.
		
	01/22/04 - CHENARDP - 7564
		   Modified section CHECK to select keys from the tables instead
		   of doing a "SELECT *"

	05/08/03 - GRAY - 51349
		   Corrected section ZT1 to prevent stack crit when returning
		   an error.

	03/14/03 - GRAY - 51351
		   Converted to PSL.
	  
	07/25/00 - SILVAGNIR - ARQ 41261
	           Changed section CHECK to call fsn^DBSDD instead of
	           fsn^dbsdd.  The lower case routine name WIIL NOT WORK
	           in a UNIX environment.
	
	*/


	// Version number of client message is not compatible with server
	if version.get()'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))

	set return=$$EXEC(.return)
	set return=$$V2LV^MSG(return)

	quit ""


SQL(tables,svtyp,zero)	//Get health check data (without LV wrapper)

	type String return

	quit $$EXEC(.return)


EXEC(String return)	//Get health check data

	type Number avg,i,SVID,tps
	type String PID,pid(),svcls,total,x,y
	type Public String svtyp,tables
	type Public Number zero

	if svtyp.get()="" set svtyp="SCA$IBS"
	set return=""

	// Get list of valid processes
	do ^%ZPID(.pid())

	// Initialize statistical data
	set total="0|0|0|0|0|0|0|0|0|0|0"
	for i=0:1:6 set total(i)="0|0|0|0|0|0|0|0|0|0"

	// Load statistics from ^SVSTAT
	
	type ResultSet rs=Db.select("SVID,PID","SVCTRLT","SVTYP=:svtyp")
	while rs.next() do {
		set SVID=rs.getCol(1)
		set PID=rs.getCol(2)
		if '$D(pid($$HEXDEC^%ZHEX(PID))) do { quit
			do Db.delete("SVSTATZ","SRVTYP=:svtyp AND SRVID=:SVID")
			}

		// Total active servers
		set total.piece("|",11)=total.piece("|",11)+1
		
		type DbSet svds=Db.selectDbSet("SVSTAT","SRVTYP=:svtyp AND SRVID=:SVID")
		while svds.next() do {
			type RecordSVSTAT svstat=svds.getRecord("SVSTAT")

			if zero.get() do {
				type RecordSVSTATZ svstatz=Db.getRecord("SVSTATZ","SRVTYP=:svtyp,SRVID=:SVID",1)
				set svstatz.svstatz=1
				do svstatz.save()
				}

			set svcls=svstat.srvcls

			// Initialize array
			set y=total(svcls).get()

			set y.piece("|",1)=y.piece("|",1)+svstat.reqcnt
			set y.piece("|",2)=y.piece("|",2)+svstat.rescnt
			set y.piece("|",3)=y.piece("|",3)+svstat.tottim
			set y.piece("|",4)=y.piece("|",4)+svstat.errcnt1
			set y.piece("|",5)=y.piece("|",5)+svstat.errcnt2
			set y.piece("|",6)=y.piece("|",6)+svstat.errcnt3
			set y.piece("|",7)=y.piece("|",7)+svstat.errcnt4
			set y.piece("|",8)=y.piece("|",8)+svstat.errcnt5

			if svstat.mintim do {
				if 'y.piece("|",9) set y.piece("|",9)=svstat.mintim quit
				if svstat.mintim<y.piece("|",9) set y.piece("|",9)=svstat.mintim
				}

			if svstat.maxtim>y.piece("|",10) set y.piece("|",10)=svstat.maxtim

			set total(svcls)=y
			}
		}

	set svcls=""
	for  set svcls=total(svcls).order() quit:svcls=""  do {
		set x=total(svcls)
		set total.piece("|",1)=total.piece("|",1)+x.piece("|",1)
		set total.piece("|",2)=total.piece("|",2)+x.piece("|",2)
		set total.piece("|",3)=total.piece("|",3)+x.piece("|",3)
		set total.piece("|",4)=total.piece("|",4)+x.piece("|",4)
		set total.piece("|",5)=total.piece("|",5)+x.piece("|",5)
		set total.piece("|",6)=total.piece("|",6)+x.piece("|",6)
		set total.piece("|",7)=total.piece("|",7)+x.piece("|",7)
		set total.piece("|",8)=total.piece("|",8)+x.piece("|",8)

		if x.piece("|",9) do {
			if 'total.piece("|",9) set total.piece("|",9)=x.piece("|",9) quit
			if x.piece("|",9)<total.piece("|",9) set total.piece("|",9)=x.piece("|",9)
			}

		if x.piece("|",10)>total.piece("|",10) set total.piece("|",10)=x.piece("|",10)

		set tps=$S(x.piece("|",3):$J(x/x.piece("|",3),0,3),1:0)
		set avg=$S(x.piece("|",1):$J(x.piece("|",3)/x,0,3),1:0)

		set return=return_"^"_$$SVCLS(svcls)
		set return=return_"~TPS#"_tps
		set return=return_",AVG#"_avg
		set return=return_",TRQ#"_x.piece("|",1)
		set return=return_",TRS#"_x.piece("|",2)
		set return=return_",ER1#"_x.piece("|",4)
		set return=return_",ER2#"_x.piece("|",5)
		set return=return_",ER3#"_x.piece("|",6)
		set return=return_",ER4#"_x.piece("|",7)
		set return=return_",ER5#"_x.piece("|",8)
		set return=return_",MIN#"_x.piece("|",9)
		set return=return_",MAX#"_x.piece("|",10)
		set return=return_",SRV#"_total.piece("|",11)
		}

	set tps=$S(total.piece("|",3):$J(total/total.piece("|",3),0,3),1:0)
	set avg=$S(total.piece("|",1):$J(total.piece("|",3)/total,0,3),1:0)

	set return=return_"^ALLS"
	set return=return_"~TPS#"_tps
	set return=return_",AVG#"_avg
	set return=return_",TRQ#"_total.piece("|",1)
	set return=return_",TRS#"_total.piece("|",2)
	set return=return_",ER1#"_total.piece("|",4)
	set return=return_",ER2#"_total.piece("|",5)
	set return=return_",ER3#"_total.piece("|",6)
	set return=return_",ER4#"_total.piece("|",7)
	set return=return_",ER5#"_total.piece("|",8)
	set return=return_",MIN#"_total.piece("|",9)
	set return=return_",MAX#"_total.piece("|",10)
	set return=return_",SRV#"_total.piece("|",11)

	// Check for accessibility of listed tables

	if tables.get()="" do { 
		set tables=CUVAR.TBLS
		if tables.get()="" quit
		set tables=tables.translate($C(9),",")
		}

	// Use function @CUV001 to enter table list for Health Check
	if tables.get()="" quit return_"^TBLS~ #"_$$^MSG(3705)
	set return=return_"^TBLS~"

	for i=1:1:tables.length(",") do {
		set x=tables.piece(",",i)
		set return=return_x_"#"_$$CHECK(x)_","
		}

	set return=return.extract(2,999999)

	quit return


CHECK(tbl)	//check if this table is accessible

	catch vERROR {
		do ZT1
		}

	type String %LIBS,RM
	type String keys,fsn()
	set %LIBS="SYSDEV"

	// Invalid NULL parameter for File
        if tbl.get()="" set RM=$$^MSG(8615) quit RM

	// Invalid file name ~p1
	if 'Db.isDefined("DBTBL1","%LIBS=:%LIBS,FID=:tbl") set RM=$$^MSG(1337,tbl) quit RM

	// I18N=OFF
	do fsn^SQLDD(.fsn,tbl)
	set keys=fsn(tbl).piece("|",3)
	#Accept Date=01/22/2004;PGM=Pete Chenard
	type ResultSet rs=Db.select(keys,tbl)

	if 'rs.next() set RM="?" quit RM

	if RM.get()'="" quit RM

	quit "OK"

	// I18N=ON


SVCLS(svcls)	//Return service class mnemonic

	if svcls=0 quit "NMSP"
	if svcls=1 quit "TSSP"
	if svcls=2 quit "FSSP"
	if svcls=3 quit "MRPC"
	if svcls=4 quit ""
	if svcls=5 quit "MSQL"
	if svcls=6 quit "GCIF"

	quit ""


ZT1	//

	write $ZS
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60107^17756^Viji Skariah^7071"	// Signature - LTD^TIME^USER^SIZE
