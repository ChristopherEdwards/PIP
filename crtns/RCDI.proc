RCDI	  /*
	ORIG: alagarss - 09/14/2005
	DESC: Capitalize Interest at Close-out
	CALLED BY:  
	     CALLS:Function QUERCDI during dayend (BOD) processing  
	     DESC:  
	     This routine is custom for CDW, the routine is a copy of the
	     routine LNDIC which was developed for the Canadian product
	     as part of the Pacific Coast installation.  Where possible, 
	     code which appears in LNDIC is called to prevent duplicate
	     change requirement.
	
	     The purpose of this function is to cap accrued interest on
	     revolving credit loans which have a PCM of 2N . CDW
	     has loans which should bill this amount.  The routine is
	     designed to run in the same batch as billing, but prior to 
	     billing.  The accrual will be capialized to the account, and
	     FPA updated to the amount of the posting. DIU updated to the 
	     include the posting plus whatever it already contains.  The effect
	     of this posting prior to billing is that the billing process will
	     now bill the FPA (due to pcm 2n) which actually reflects the 
	     amount of interest just capitalized.
	
	     GLOBALS -
	     READ:  ^ACN,^TRN,^UTBL,^DAYEND
	     SET:  ^ACN,^DAYEND
	     INPUT: 
	     OUTPUT:
	
---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------
	   09/14/2005 - ALAGARSS - CR16677
	                Converted to PSL.
	                Also removed the revision history prior to 2005.
----------------------------------------------------------------------	                
 */
 	type Public Number ER,ET,%ZTHANG,%ZTSEQ
	
	do INIT quit:ER
	do PROC
	//
	do ^TTXP1
	quit

PROC    // Processing
	
	// Set up error trapping
	type Public Date %TJD,TJD
	type Public Number ER,%ZTHALT
	type Public String RM

	catch vERROR {
		
		set %TJD=(%SystemDate)-1
		set TJD=%SystemDate
		set %ZTHALT=0
		do ZE^UTLERR
		//System processing error
		set ER=1,RM=$$^MSG(2575)
		do EXC
		quit
	}
	do EXEC(TJD)
	quit
	
	//
EXEC(EFD) // Load account information, verify that we need to cap this account
	// then build a TTX entry, update FPA and DIU , file it.
	
	type Public Number ACN,BAL,CID,DIU,DITGACN,TAMT,TRNC,TRND
	type Public String PCM,TYPE
		
	// Set up account array
  	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	type RecordPRODDFTL proddftl=Db.getRecord("PRODDFTL","TYPE=:ln.type")
	
	if ln.grp'="RC" quit
		
	if '(ln.acngrp).isNull() set PCM=ln.pcm else  set PCM=proddftl.pcm
	
	// its not one that we want to cap in this routine
	if PCM'="2N" quit     
	// nothing to cap       
	if ln.acr'>0 quit               
	// not set to defer/cap
	if ln.intcap'=1 quit   
	// Define variables
	set TYPE=ln.type
	set DIU=ln.diu
	set BAL=ln.bal
	set DITGACN=ln.ditgacn
	do TRANAMT(.ln)
	if TAMT>0 do FPADIU(.ln)
	//
	quit

TRANAMT(RecordLN ln) //Calculate Transaction Amount (TAMT)
	
	type Public Number TRC,CID,TAMT,DITGACN
	type Public String TRNC,TRND,TSO,TYPE
	
	set TAMT=(ln.acr).roundDec(0)
	quit:TAMT'>0
	if TRND(TYPE).isNull() do TRANSET
	do FILETTX($S(DITGACN:DITGACN,1:CID),TRND(TYPE).piece("|",1),TRND(TYPE).piece("|",2))
	do FILETTX(CID,TRNC(TYPE).piece("|",1),TRNC(TYPE).piece("|",2))
	set TRC=((TRC\1000)+1)*1000
	quit
		
FPADIU(RecordLN ln)  //
	// Move the amount being capitalized into [LN]FPA and [LN]DIU
	// and file to the account.
	
	type Public Number CID,TAMT
	
	set ln.diu=ln.diu+TAMT
	set ln.fpa=TAMT
	do ln.save()
	quit
	
	
	//
	//-----------------------------------------------------------------------
FILETTX(CID,ETC,ITC)	// Create ^TTX entry
	//-----------------------------------------------------------------------
	 /*This label use to reside in the routine LNDIC but was moved to 
	   here when that routine was moved into M++ BATCH definition. If this
	   routine is M++, the call into the batch rtn may be resumed. 
	 */
	
	type Public Number ER,SEQ,TRC,TAMT,UID
	type Public String BRCD,CRCD,CTL,TLO,TR,T
	type Public Date EFD,TJD
	
	set T=CID_"|"_ITC_"|"_ETC_"|"_TAMT_"|"_EFD_"|"_%UserStation
	set T=T_"||Def Int Cap|"_%CurrentDate _"|"_%CurrentTime _"|"
	
	if CRCD'="",CRCD'=%SystemCurrency set T.piece("|",17)=CRCD
	if 'CTL.extract(1) set SEQ=(TR("").order(-1)+1),TR(SEQ)=T do EXEC^TRNDRV
	if CTL.extract(1) do {
		 
		 set TRC=TRC+1
		 type RecordTTX ttx=Db.getRecord("TTX","TJD=:TJD,BRCD=:BRCD,UID=:UID,TSEQ=:TRC",1)
		 set ttx.cid=CID
		 set ttx.itc=ITC
		 set ttx.etc=ETC
		 set ttx.tamt=TAMT
		 set ttx.efd=EFD
		 set ttx.tlo=%UserStation
		 set ttx.tcmt="Def Int Cap"
		 set ttx.cdt=%CurrentDate
		 set ttx.tim=%CurrentTime
		 set ttx.crcd=CRCD
		 do ttx.save()
	
	}
		 
	quit

EXC     // Log error in exception file
	type Public Number BAL,CID,ET,%ZTSEQ
	type Public String DESC
	
	set DESC="Deferred Interest Capitalization|1"
	do LOG^UTLEXC($T(+0),"*",DESC,CID.get(),%ZTSEQ.get(),ET.get(),$S(CID.get():BAL,1:""))
	kill ET,%ZTSEQ
	quit
	
INIT    // Initialize transaction file data        
	
	type Public String BRCD,ET,RM,%UID
	type Public Number ER,TRC
	
	type ResultSet rs=Db.select("BRCD,UID","UTBLSRC","SRCTYP='BOFF' AND KEY='NEGAM'") 
	if rs.next() set BRCD=rs.getCol("BRCD"),%UID=rs.getCol("UID")        
	// Interest capitalization teller not defined        
	if '(BRCD_%UID).length() set ER=1,RM=$$^MSG("1249") quit      
	type ResultSet rs1=Db.select("TSEQ","TTX","TJD=:TJD AND BRCD=:BRCD AND UID=:%UID","TSEQ DESC")
	set TRC=rs1.getCol("TSEQ")\((1000+1)*1000)       
	do ^TTXLOK if ER,'ET.isNull() set ET="TTXLOK" do EXC quit     
	quit

TRANSET // Find capitalization tran codes        
	
	type Public String CRTRNA,DRTRNA,TRND,TRNC,TYPE
	
	type ResultSet rs=Db.select("DRTRNA,CRTRNA","PRODCTL","TYPE=:TYPE")       
	if rs.next() do {
	set DRTRNA=rs.getCol("DRTRNA")            
	set CRTRNA=rs.getCol("CRTRNA") 
	}
	type ResultSet rs1=Db.select("ITC","TRN","ETC=:DRTRNA")
	type ResultSet rs2=Db.select("ITC","TRN","ETC=:CRTRNA")           
	set TRND(TYPE)=DRTRNA_"|"_rs1.getCol("ITC")                          
	set TRNC(TYPE)=CRTRNA_"|"_rs2.getCol("ITC")          
	quit 
 

vSIG()	quit "60234^32926^Sanjay Chhrabria^5821"	// Signature - LTD^TIME^USER^SIZE
