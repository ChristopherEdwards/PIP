DEPFILE(RecordDEP dep, String vpar, Boolean vparNorm) // DEP - Deposit File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (1106)           09/27/2006
	// Trigger Definition (130)                    12/12/2006
	// Journal File Definition (15)                01/03/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dep.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(dep,.vxins(),10,"|")
	if %O = 1 quit:'dep.isChanged()  do AUDIT^UCUTILN(dep,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = dep.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI^DEPFIL0                    // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver^DEPFIL1                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI^DEPFIL0                    // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU^DEPFIL0                    // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU^DEPFIL0                    // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI^DEPFIL0                    // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACN","CID = :dep.cid")            // No record exists
		if vpar["/TRIGBEF/" do VBD^DEPFIL0                    // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordDEP dep = Db.getRecord("DEP","CID=:CID")
	if (%ProcessMode = 2) do {
		do dep.setMode(2)

		do DEPFILE(dep,vpar)
	}
	else  do VINDEX^DEPFIL3(dep)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEP dep

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACN","CID = :dep.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set dep.FMLD = %SystemDate
		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(dep,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(dep,-3),n)=vobj(dep,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(dep,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(dep,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(dep,-3),n)=vobj(dep,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL^DEPFIL2(.dep)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX^DEPFIL3(.dep) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDEP dep
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^ACN(vobj(dep,-3),n)) quit:n.isNull()  if 'vobj(dep,n).data(),^ACN(vobj(dep,-3),n).data()#2 set vobj(dep,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEP dep

	if 'vkeychg.get(),dep.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX^DEPFIL3(.dep)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL^DEPFIL2(.dep)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^ACN(vobj(dep,-3))                                // Delete Record
	quit


vinit // Initialize default values

	type public RecordDEP dep

	// Type local variables for access keys for defaults
	type public String CID

	if dep.actibpay.isNull() set dep.actibpay = 0          // actibpay
	if dep.adf.isNull() set dep.adf = 0                    // adf
	if dep.aiacrf.isNull() set dep.aiacrf = 0              // aiacrf
	if dep.anflg.isNull() set dep.anflg = 0                // anflg
	if dep.anlfpr.isNull() set dep.anlfpr = 0              // anlfpr
	if dep.anlsys.isNull() set dep.anlsys = 0              // anlsys
	if dep.aomcode.isNull() set dep.aomcode = 0            // aomcode
	if dep.ars.isNull() set dep.ars = 0                    // ars
	if dep.aubbf.isNull() set dep.aubbf = 0                // aubbf
	if dep.awtp.isNull() set dep.awtp = 0                  // awtp
	if dep.bgtpro.isNull() set dep.bgtpro = 0              // bgtpro
	if dep.blproc.isNull() set dep.blproc = 0              // blproc
	if dep.bwf.isNull() set dep.bwf = 0                    // bwf
	if dep.chkactf.isNull() set dep.chkactf = 0            // chkactf
	if dep.chkeuro.isNull() set dep.chkeuro = 0            // chkeuro
	if dep.chkiss.isNull() set dep.chkiss = 0              // chkiss
	if dep.cmsflg.isNull() set dep.cmsflg = 0              // cmsflg
	if dep.cof.isNull() set dep.cof = 0                    // cof
	if dep.colelg.isNull() set dep.colelg = 0              // colelg
	if dep.collque.isNull() set dep.collque = 0            // collque
	if dep.comm.isNull() set dep.comm = 0                  // comm
	if dep.cumdep.isNull() set dep.cumdep = 0              // cumdep
	if dep.custom1.isNull() set dep.custom1 = 0            // custom1
	if dep.custom2.isNull() set dep.custom2 = 0            // custom2
	if dep.custom3.isNull() set dep.custom3 = 0            // custom3
	if dep.daparwd.isNull() set dep.daparwd = 0            // daparwd
	if dep.dedintpd.isNull() set dep.dedintpd = 0          // dedintpd
	if dep.definadj.isNull() set dep.definadj = 0          // definadj
	if dep.dlkflg.isNull() set dep.dlkflg = 0              // dlkflg
	if dep.eftdd.isNull() set dep.eftdd = 0                // eftdd
	if dep.eftdeb.isNull() set dep.eftdeb = 0              // eftdeb
	if dep.eftreq.isNull() set dep.eftreq = 0              // eftreq
	if dep.eligbpay.isNull() set dep.eligbpay = 0          // eligbpay
	if dep.emplben.isNull() set dep.emplben = 0            // emplben
	if dep.errflg.isNull() set dep.errflg = 0              // errflg
	if dep.fnbodp.isNull() set dep.fnbodp = 0              // fnbodp
	if dep.gcrdod.isNull() set dep.gcrdod = 0              // gcrdod
	if dep.gis.isNull() set dep.gis = 0                    // gis
	if dep.highvol.isNull() set dep.highvol = 0            // highvol
	if dep.iraexc.isNull() set dep.iraexc = 0              // iraexc
	if dep.irfl.isNull() set dep.irfl = 0                  // irfl
	if dep.iwcp.isNull() set dep.iwcp = 0                  // iwcp
	if dep.lpdue.isNull() set dep.lpdue = 0                // lpdue
	if dep.lpswp.isNull() set dep.lpswp = 0                // lpswp
	if dep.lsp.isNull() set dep.lsp = 0                    // lsp
	if dep.mdtext.isNull() set dep.mdtext = 0              // mdtext
	if dep.minbalfl.isNull() set dep.minbalfl = 0          // minbalfl
	if dep.mt320.isNull() set dep.mt320 = 0                // mt320
	if dep.mt900.isNull() set dep.mt900 = 0                // mt900
	if dep.mt910.isNull() set dep.mt910 = 0                // mt910
	if dep.mt940.isNull() set dep.mt940 = 0                // mt940
	if dep.mt942.isNull() set dep.mt942 = 0                // mt942
	if dep.mt950.isNull() set dep.mt950 = 0                // mt950
	if dep.nr.isNull() set dep.nr = 0                      // nr
	if dep.nrnegipty.isNull() set dep.nrnegipty = 0        // nrnegipty
	if dep.nrposipty.isNull() set dep.nrposipty = 0        // nrposipty
	if dep.nrppty.isNull() set dep.nrppty = 0              // nrppty
	if dep.nrwhpty.isNull() set dep.nrwhpty = 0            // nrwhpty
	if dep.odflg.isNull() set dep.odflg = 0                // odflg
	if dep.odsf.isNull() set dep.odsf = 0                  // odsf
	if dep.odsi.isNull() set dep.odsi = 0                  // odsi
	type public String TJD
	if dep.odt.isNull() set dep.odt = TJD                  // odt
	if dep.offproc.isNull() set dep.offproc = 0            // offproc
	if dep.oid.isNull() set dep.oid = 0                    // oid
	if dep.osgncrdc.isNull() set dep.osgncrdc = 0          // osgncrdc
	if dep.payeft.isNull() set dep.payeft = 0              // payeft
	if dep.pbi.isNull() set dep.pbi = 0                    // pbi
	if dep.pdiv.isNull() set dep.pdiv = 0                  // pdiv
	if dep.phld.isNull() set dep.phld = 0                  // phld
	if dep.pipw.isNull() set dep.pipw = 0                  // pipw
	if dep.pis.isNull() set dep.pis = 0                    // pis
	if dep.pldg.isNull() set dep.pldg = 0                  // pldg
	if dep.regcc.isNull() set dep.regcc = 0                // regcc
	if dep.regdd.isNull() set dep.regdd = 0                // regdd
	if dep.rflg.isNull() set dep.rflg = 0                  // rflg
	if dep.schproc.isNull() set dep.schproc = 0            // schproc
	if dep.segflg.isNull() set dep.segflg = 0              // segflg
	if dep.shareacct.isNull() set dep.shareacct = 0        // shareacct
	if dep.smet.isNull() set dep.smet = 0                  // smet
	if dep.spf.isNull() set dep.spf = 0                    // spf
	if dep.swpdelip.isNull() set dep.swpdelip = 0          // swpdelip
	if dep.swpni.isNull() set dep.swpni = 0                // swpni
	if dep.trunc.isNull() set dep.trunc = 0                // trunc
	if dep.voselec.isNull() set dep.voselec = 0            // voselec
	if dep.vosstmt.isNull() set dep.vosstmt = 0            // vosstmt
	if dep.vostro.isNull() set dep.vostro = 0              // vostro
	quit


vreqn // Validate required data items

	type public RecordDEP dep

	if dep.acn.isNull() do vreqerr("ACN") quit
	if dep.acnrelc.isNull() do vreqerr("ACNRELC") quit
	if dep.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	if dep.adf.isNull() do vreqerr("ADF") quit
	if dep.aiacrf.isNull() do vreqerr("AIACRF") quit
	if dep.anflg.isNull() do vreqerr("ANFLG") quit
	if dep.anlfpr.isNull() do vreqerr("ANLFPR") quit
	if dep.anlsys.isNull() do vreqerr("ANLSYS") quit
	if dep.ars.isNull() do vreqerr("ARS") quit
	if dep.aubbf.isNull() do vreqerr("AUBBF") quit
	if dep.awtp.isNull() do vreqerr("AWTP") quit
	if dep.bgtpro.isNull() do vreqerr("BGTPRO") quit
	if dep.blproc.isNull() do vreqerr("BLPROC") quit
	if dep.boo.isNull() do vreqerr("BOO") quit
	if dep.bwf.isNull() do vreqerr("BWF") quit
	if dep.cc.isNull() do vreqerr("CC") quit
	if dep.chkactf.isNull() do vreqerr("CHKACTF") quit
	if dep.chkeuro.isNull() do vreqerr("CHKEURO") quit
	if dep.chkiss.isNull() do vreqerr("CHKISS") quit
	if dep.cls.isNull() do vreqerr("CLS") quit
	if dep.cmsflg.isNull() do vreqerr("CMSFLG") quit
	if dep.cof.isNull() do vreqerr("COF") quit
	if dep.colelg.isNull() do vreqerr("COLELG") quit
	if dep.collque.isNull() do vreqerr("COLLQUE") quit
	if dep.comm.isNull() do vreqerr("COMM") quit
	if dep.crcd.isNull() do vreqerr("CRCD") quit
	if dep.cumdep.isNull() do vreqerr("CUMDEP") quit
	if dep.custom1.isNull() do vreqerr("CUSTOM1") quit
	if dep.custom2.isNull() do vreqerr("CUSTOM2") quit
	if dep.custom3.isNull() do vreqerr("CUSTOM3") quit
	if dep.daparwd.isNull() do vreqerr("DAPARWD") quit
	if dep.dedintpd.isNull() do vreqerr("DEDINTPD") quit
	if dep.definadj.isNull() do vreqerr("DEFINADJ") quit
	if dep.dlkflg.isNull() do vreqerr("DLKFLG") quit
	if dep.eftdd.isNull() do vreqerr("EFTDD") quit
	if dep.eftdeb.isNull() do vreqerr("EFTDEB") quit
	if dep.eftreq.isNull() do vreqerr("EFTREQ") quit
	if dep.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
	if dep.emplben.isNull() do vreqerr("EMPLBEN") quit
	if dep.errflg.isNull() do vreqerr("ERRFLG") quit
	if dep.fnbodp.isNull() do vreqerr("FNBODP") quit
	if dep.gcrdod.isNull() do vreqerr("GCRDOD") quit
	if dep.gis.isNull() do vreqerr("GIS") quit
	if dep.glsc.isNull() do vreqerr("GLSC") quit
	if dep.grp.isNull() do vreqerr("GRP") quit
	if dep.highvol.isNull() do vreqerr("HIGHVOL") quit
	if dep.iraexc.isNull() do vreqerr("IRAEXC") quit
	if dep.irfl.isNull() do vreqerr("IRFL") quit
	if dep.iwcp.isNull() do vreqerr("IWCP") quit
	if dep.lpdue.isNull() do vreqerr("LPDUE") quit
	if dep.lpswp.isNull() do vreqerr("LPSWP") quit
	if dep.lsp.isNull() do vreqerr("LSP") quit
	if dep.mdtext.isNull() do vreqerr("MDTEXT") quit
	if dep.minbalfl.isNull() do vreqerr("MINBALFL") quit
	if dep.mt320.isNull() do vreqerr("MT320") quit
	if dep.mt900.isNull() do vreqerr("MT900") quit
	if dep.mt910.isNull() do vreqerr("MT910") quit
	if dep.mt940.isNull() do vreqerr("MT940") quit
	if dep.mt942.isNull() do vreqerr("MT942") quit
	if dep.mt950.isNull() do vreqerr("MT950") quit
	if dep.nr.isNull() do vreqerr("NR") quit
	if dep.nrnegipty.isNull() do vreqerr("NRNEGIPTY") quit
	if dep.nrposipty.isNull() do vreqerr("NRPOSIPTY") quit
	if dep.nrppty.isNull() do vreqerr("NRPPTY") quit
	if dep.nrwhpty.isNull() do vreqerr("NRWHPTY") quit
	if dep.odflg.isNull() do vreqerr("ODFLG") quit
	if dep.odo.isNull() do vreqerr("ODO") quit
	if dep.odsf.isNull() do vreqerr("ODSF") quit
	if dep.odsi.isNull() do vreqerr("ODSI") quit
	if dep.odt.isNull() do vreqerr("ODT") quit
	if dep.offproc.isNull() do vreqerr("OFFPROC") quit
	if dep.oid.isNull() do vreqerr("OID") quit
	if dep.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
	if dep.payeft.isNull() do vreqerr("PAYEFT") quit
	if dep.pbi.isNull() do vreqerr("PBI") quit
	if dep.pdiv.isNull() do vreqerr("PDIV") quit
	if dep.phld.isNull() do vreqerr("PHLD") quit
	if dep.pipw.isNull() do vreqerr("PIPW") quit
	if dep.pis.isNull() do vreqerr("PIS") quit
	if dep.pldg.isNull() do vreqerr("PLDG") quit
	if dep.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
	if dep.regcc.isNull() do vreqerr("REGCC") quit
	if dep.regdd.isNull() do vreqerr("REGDD") quit
	if dep.rflg.isNull() do vreqerr("RFLG") quit
	if dep.schproc.isNull() do vreqerr("SCHPROC") quit
	if dep.segflg.isNull() do vreqerr("SEGFLG") quit
	if dep.sgncrd.isNull() do vreqerr("SGNCRD") quit
	if dep.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	if dep.shareacct.isNull() do vreqerr("SHAREACCT") quit
	if dep.smet.isNull() do vreqerr("SMET") quit
	if dep.spf.isNull() do vreqerr("SPF") quit
	if dep.stat.isNull() do vreqerr("STAT") quit
	if dep.swpdelip.isNull() do vreqerr("SWPDELIP") quit
	if dep.swpni.isNull() do vreqerr("SWPNI") quit
	if dep.trb.isNull() do vreqerr("TRB") quit
	if dep.trunc.isNull() do vreqerr("TRUNC") quit
	if dep.type.isNull() do vreqerr("TYPE") quit
	if dep.voselec.isNull() do vreqerr("VOSELEC") quit
	if dep.vosstmt.isNull() do vreqerr("VOSSTMT") quit
	if dep.vostro.isNull() do vreqerr("VOSTRO") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEP dep

	if dep.cid.isNull() do vreqerr("CID") quit

	if 'vobj(dep,-100,49,"").order().isNull() do {
		if vx("ODSF").exists(),dep.odsf.isNull() do vreqerr("ODSF") quit
		if vx("ODO").exists(),dep.odo.isNull() do vreqerr("ODO") quit
		if vx("TRB").exists(),dep.trb.isNull() do vreqerr("TRB") quit
		if vx("FNBODP").exists(),dep.fnbodp.isNull() do vreqerr("FNBODP") quit
	}
	if 'vobj(dep,-100,50,"").order().isNull() do {
		if vx("TYPE").exists(),dep.type.isNull() do vreqerr("TYPE") quit
		if vx("CLS").exists(),dep.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),dep.grp.isNull() do vreqerr("GRP") quit
		if vx("CC").exists(),dep.cc.isNull() do vreqerr("CC") quit
		if vx("OID").exists(),dep.oid.isNull() do vreqerr("OID") quit
		if vx("CRCD").exists(),dep.crcd.isNull() do vreqerr("CRCD") quit
		if vx("ANLSYS").exists(),dep.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("COMM").exists(),dep.comm.isNull() do vreqerr("COMM") quit
		if vx("REGCC").exists(),dep.regcc.isNull() do vreqerr("REGCC") quit
		if vx("GLSC").exists(),dep.glsc.isNull() do vreqerr("GLSC") quit
		if vx("CUSTOM1").exists(),dep.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),dep.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),dep.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("HIGHVOL").exists(),dep.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("EMPLBEN").exists(),dep.emplben.isNull() do vreqerr("EMPLBEN") quit
	}
	if 'vobj(dep,-100,51,"").order().isNull() do {
		if vx("RFLG").exists(),dep.rflg.isNull() do vreqerr("RFLG") quit
		if vx("PHLD").exists(),dep.phld.isNull() do vreqerr("PHLD") quit
		if vx("ODSI").exists(),dep.odsi.isNull() do vreqerr("ODSI") quit
		if vx("PBI").exists(),dep.pbi.isNull() do vreqerr("PBI") quit
		if vx("STAT").exists(),dep.stat.isNull() do vreqerr("STAT") quit
		if vx("ARS").exists(),dep.ars.isNull() do vreqerr("ARS") quit
		if vx("ADF").exists(),dep.adf.isNull() do vreqerr("ADF") quit
		if vx("LPDUE").exists(),dep.lpdue.isNull() do vreqerr("LPDUE") quit
		if vx("LPSWP").exists(),dep.lpswp.isNull() do vreqerr("LPSWP") quit
		if vx("COLELG").exists(),dep.colelg.isNull() do vreqerr("COLELG") quit
		if vx("PLDG").exists(),dep.pldg.isNull() do vreqerr("PLDG") quit
	}
	if 'vobj(dep,-100,52,"").order().isNull() do {
		if vx("BOO").exists(),dep.boo.isNull() do vreqerr("BOO") quit
		if vx("ODT").exists(),dep.odt.isNull() do vreqerr("ODT") quit
		if vx("IRAEXC").exists(),dep.iraexc.isNull() do vreqerr("IRAEXC") quit
		if vx("TRUNC").exists(),dep.trunc.isNull() do vreqerr("TRUNC") quit
	}
	if 'vobj(dep,-100,53,"").order().isNull() do {
		if vx("MDTEXT").exists(),dep.mdtext.isNull() do vreqerr("MDTEXT") quit
	}
	if 'vobj(dep,-100,54,"").order().isNull() do {
		if vx("BWF").exists(),dep.bwf.isNull() do vreqerr("BWF") quit
		if vx("IWCP").exists(),dep.iwcp.isNull() do vreqerr("IWCP") quit
		if vx("NR").exists(),dep.nr.isNull() do vreqerr("NR") quit
	}
	if 'vobj(dep,-100,55,"").order().isNull() do {
		if vx("PIPW").exists(),dep.pipw.isNull() do vreqerr("PIPW") quit
	}
	if 'vobj(dep,-100,57,"").order().isNull() do {
		if vx("SEGFLG").exists(),dep.segflg.isNull() do vreqerr("SEGFLG") quit
	}
	if 'vobj(dep,-100,61,"").order().isNull() do {
		if vx("CHKISS").exists(),dep.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CHKEURO").exists(),dep.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKACTF").exists(),dep.chkactf.isNull() do vreqerr("CHKACTF") quit
	}
	if 'vobj(dep,-100,62,"").order().isNull() do {
		if vx("EFTDEB").exists(),dep.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),dep.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("EFTDD").exists(),dep.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("SMET").exists(),dep.smet.isNull() do vreqerr("SMET") quit
		if vx("SWPNI").exists(),dep.swpni.isNull() do vreqerr("SWPNI") quit
		if vx("ELIGBPAY").exists(),dep.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
		if vx("ACTIBPAY").exists(),dep.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	}
	if 'vobj(dep,-100,66,"").order().isNull() do {
		if vx("VOSTRO").exists(),dep.vostro.isNull() do vreqerr("VOSTRO") quit
		if vx("VOSELEC").exists(),dep.voselec.isNull() do vreqerr("VOSELEC") quit
		if vx("VOSSTMT").exists(),dep.vosstmt.isNull() do vreqerr("VOSSTMT") quit
	}
	if 'vobj(dep,-100,70,"").order().isNull() do {
		if vx("CMSFLG").exists(),dep.cmsflg.isNull() do vreqerr("CMSFLG") quit
	}
	if 'vobj(dep,-100,99,"").order().isNull() do {
		if vx("ACN").exists(),dep.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),dep.acnrelc.isNull() do vreqerr("ACNRELC") quit
	}
	if 'vobj(dep,-100,100,"").order().isNull() do {
		if vx("ODFLG").exists(),dep.odflg.isNull() do vreqerr("ODFLG") quit
	}
	if 'vobj(dep,-100,107,"").order().isNull() do {
		if vx("BGTPRO").exists(),dep.bgtpro.isNull() do vreqerr("BGTPRO") quit
	}
	if 'vobj(dep,-100,115,"").order().isNull() do {
		if vx("SHAREACCT").exists(),dep.shareacct.isNull() do vreqerr("SHAREACCT") quit
	}
	if 'vobj(dep,-100,210,"").order().isNull() do {
		if vx("ANFLG").exists(),dep.anflg.isNull() do vreqerr("ANFLG") quit
		if vx("SPF").exists(),dep.spf.isNull() do vreqerr("SPF") quit
		if vx("AUBBF").exists(),dep.aubbf.isNull() do vreqerr("AUBBF") quit
	}
	if 'vobj(dep,-100,426,"").order().isNull() do {
		if vx("GCRDOD").exists(),dep.gcrdod.isNull() do vreqerr("GCRDOD") quit
	}
	if 'vobj(dep,-100,428,"").order().isNull() do {
		if vx("AIACRF").exists(),dep.aiacrf.isNull() do vreqerr("AIACRF") quit
		if vx("OFFPROC").exists(),dep.offproc.isNull() do vreqerr("OFFPROC") quit
	}
	if 'vobj(dep,-100,431,"").order().isNull() do {
		if vx("PAYEFT").exists(),dep.payeft.isNull() do vreqerr("PAYEFT") quit
	}
	if 'vobj(dep,-100,432,"").order().isNull() do {
		if vx("DEFINADJ").exists(),dep.definadj.isNull() do vreqerr("DEFINADJ") quit
		if vx("DLKFLG").exists(),dep.dlkflg.isNull() do vreqerr("DLKFLG") quit
		if vx("COLLQUE").exists(),dep.collque.isNull() do vreqerr("COLLQUE") quit
	}
	if 'vobj(dep,-100,434,"").order().isNull() do {
		if vx("SWPDELIP").exists(),dep.swpdelip.isNull() do vreqerr("SWPDELIP") quit
		if vx("GIS").exists(),dep.gis.isNull() do vreqerr("GIS") quit
		if vx("PIS").exists(),dep.pis.isNull() do vreqerr("PIS") quit
	}
	if 'vobj(dep,-100,435,"").order().isNull() do {
		if vx("MINBALFL").exists(),dep.minbalfl.isNull() do vreqerr("MINBALFL") quit
	}
	if 'vobj(dep,-100,436,"").order().isNull() do {
		if vx("PDIV").exists(),dep.pdiv.isNull() do vreqerr("PDIV") quit
	}
	if 'vobj(dep,-100,437,"").order().isNull() do {
		if vx("LSP").exists(),dep.lsp.isNull() do vreqerr("LSP") quit
	}
	if 'vobj(dep,-100,438,"").order().isNull() do {
		if vx("MT900").exists(),dep.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),dep.mt910.isNull() do vreqerr("MT910") quit
		if vx("MT320").exists(),dep.mt320.isNull() do vreqerr("MT320") quit
		if vx("MT940").exists(),dep.mt940.isNull() do vreqerr("MT940") quit
		if vx("MT942").exists(),dep.mt942.isNull() do vreqerr("MT942") quit
		if vx("MT950").exists(),dep.mt950.isNull() do vreqerr("MT950") quit
	}
	if 'vobj(dep,-100,440,"").order().isNull() do {
		if vx("COF").exists(),dep.cof.isNull() do vreqerr("COF") quit
	}
	if 'vobj(dep,-100,442,"").order().isNull() do {
		if vx("NRPOSIPTY").exists(),dep.nrposipty.isNull() do vreqerr("NRPOSIPTY") quit
		if vx("NRWHPTY").exists(),dep.nrwhpty.isNull() do vreqerr("NRWHPTY") quit
		if vx("NRNEGIPTY").exists(),dep.nrnegipty.isNull() do vreqerr("NRNEGIPTY") quit
		if vx("NRPPTY").exists(),dep.nrppty.isNull() do vreqerr("NRPPTY") quit
	}
	if 'vobj(dep,-100,444,"").order().isNull() do {
		if vx("ANLFPR").exists(),dep.anlfpr.isNull() do vreqerr("ANLFPR") quit
		if vx("DEDINTPD").exists(),dep.dedintpd.isNull() do vreqerr("DEDINTPD") quit
	}
	if 'vobj(dep,-100,446,"").order().isNull() do {
		if vx("REGDD").exists(),dep.regdd.isNull() do vreqerr("REGDD") quit
		if vx("IRFL").exists(),dep.irfl.isNull() do vreqerr("IRFL") quit
	}
	if 'vobj(dep,-100,448,"").order().isNull() do {
		if vx("SGNCRD").exists(),dep.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("PSGNCRDR").exists(),dep.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("OSGNCRDC").exists(),dep.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("SGNCRDCHGDT").exists(),dep.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	}
	if 'vobj(dep,-100,450,"").order().isNull() do {
		if vx("ERRFLG").exists(),dep.errflg.isNull() do vreqerr("ERRFLG") quit
		if vx("AWTP").exists(),dep.awtp.isNull() do vreqerr("AWTP") quit
	}
	if 'vobj(dep,-100,456,"").order().isNull() do {
		if vx("BLPROC").exists(),dep.blproc.isNull() do vreqerr("BLPROC") quit
	}
	if 'vobj(dep,-100,464,"").order().isNull() do {
		if vx("SCHPROC").exists(),dep.schproc.isNull() do vreqerr("SCHPROC") quit
		if vx("CUMDEP").exists(),dep.cumdep.isNull() do vreqerr("CUMDEP") quit
		if vx("DAPARWD").exists(),dep.daparwd.isNull() do vreqerr("DAPARWD") quit
	}
		if vx("ACN").exists(),dep.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),dep.acnrelc.isNull() do vreqerr("ACNRELC") quit
		if vx("ACTIBPAY").exists(),dep.actibpay.isNull() do vreqerr("ACTIBPAY") quit
		if vx("ADF").exists(),dep.adf.isNull() do vreqerr("ADF") quit
		if vx("AIACRF").exists(),dep.aiacrf.isNull() do vreqerr("AIACRF") quit
		if vx("ANFLG").exists(),dep.anflg.isNull() do vreqerr("ANFLG") quit
		if vx("ANLFPR").exists(),dep.anlfpr.isNull() do vreqerr("ANLFPR") quit
		if vx("ANLSYS").exists(),dep.anlsys.isNull() do vreqerr("ANLSYS") quit
		if vx("ARS").exists(),dep.ars.isNull() do vreqerr("ARS") quit
		if vx("AUBBF").exists(),dep.aubbf.isNull() do vreqerr("AUBBF") quit
		if vx("AWTP").exists(),dep.awtp.isNull() do vreqerr("AWTP") quit
		if vx("BGTPRO").exists(),dep.bgtpro.isNull() do vreqerr("BGTPRO") quit
		if vx("BLPROC").exists(),dep.blproc.isNull() do vreqerr("BLPROC") quit
		if vx("BOO").exists(),dep.boo.isNull() do vreqerr("BOO") quit
		if vx("BWF").exists(),dep.bwf.isNull() do vreqerr("BWF") quit
		if vx("CC").exists(),dep.cc.isNull() do vreqerr("CC") quit
		if vx("CHKACTF").exists(),dep.chkactf.isNull() do vreqerr("CHKACTF") quit
		if vx("CHKEURO").exists(),dep.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKISS").exists(),dep.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CLS").exists(),dep.cls.isNull() do vreqerr("CLS") quit
		if vx("CMSFLG").exists(),dep.cmsflg.isNull() do vreqerr("CMSFLG") quit
		if vx("COF").exists(),dep.cof.isNull() do vreqerr("COF") quit
		if vx("COLELG").exists(),dep.colelg.isNull() do vreqerr("COLELG") quit
		if vx("COLLQUE").exists(),dep.collque.isNull() do vreqerr("COLLQUE") quit
		if vx("COMM").exists(),dep.comm.isNull() do vreqerr("COMM") quit
		if vx("CRCD").exists(),dep.crcd.isNull() do vreqerr("CRCD") quit
		if vx("CUMDEP").exists(),dep.cumdep.isNull() do vreqerr("CUMDEP") quit
		if vx("CUSTOM1").exists(),dep.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),dep.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),dep.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("DAPARWD").exists(),dep.daparwd.isNull() do vreqerr("DAPARWD") quit
		if vx("DEDINTPD").exists(),dep.dedintpd.isNull() do vreqerr("DEDINTPD") quit
		if vx("DEFINADJ").exists(),dep.definadj.isNull() do vreqerr("DEFINADJ") quit
		if vx("DLKFLG").exists(),dep.dlkflg.isNull() do vreqerr("DLKFLG") quit
		if vx("EFTDD").exists(),dep.eftdd.isNull() do vreqerr("EFTDD") quit
		if vx("EFTDEB").exists(),dep.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),dep.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("ELIGBPAY").exists(),dep.eligbpay.isNull() do vreqerr("ELIGBPAY") quit
		if vx("EMPLBEN").exists(),dep.emplben.isNull() do vreqerr("EMPLBEN") quit
		if vx("ERRFLG").exists(),dep.errflg.isNull() do vreqerr("ERRFLG") quit
		if vx("FNBODP").exists(),dep.fnbodp.isNull() do vreqerr("FNBODP") quit
		if vx("GCRDOD").exists(),dep.gcrdod.isNull() do vreqerr("GCRDOD") quit
		if vx("GIS").exists(),dep.gis.isNull() do vreqerr("GIS") quit
		if vx("GLSC").exists(),dep.glsc.isNull() do vreqerr("GLSC") quit
		if vx("GRP").exists(),dep.grp.isNull() do vreqerr("GRP") quit
		if vx("HIGHVOL").exists(),dep.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("IRAEXC").exists(),dep.iraexc.isNull() do vreqerr("IRAEXC") quit
		if vx("IRFL").exists(),dep.irfl.isNull() do vreqerr("IRFL") quit
		if vx("IWCP").exists(),dep.iwcp.isNull() do vreqerr("IWCP") quit
		if vx("LPDUE").exists(),dep.lpdue.isNull() do vreqerr("LPDUE") quit
		if vx("LPSWP").exists(),dep.lpswp.isNull() do vreqerr("LPSWP") quit
		if vx("LSP").exists(),dep.lsp.isNull() do vreqerr("LSP") quit
		if vx("MDTEXT").exists(),dep.mdtext.isNull() do vreqerr("MDTEXT") quit
		if vx("MINBALFL").exists(),dep.minbalfl.isNull() do vreqerr("MINBALFL") quit
		if vx("MT320").exists(),dep.mt320.isNull() do vreqerr("MT320") quit
		if vx("MT900").exists(),dep.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),dep.mt910.isNull() do vreqerr("MT910") quit
		if vx("MT940").exists(),dep.mt940.isNull() do vreqerr("MT940") quit
		if vx("MT942").exists(),dep.mt942.isNull() do vreqerr("MT942") quit
		if vx("MT950").exists(),dep.mt950.isNull() do vreqerr("MT950") quit
		if vx("NR").exists(),dep.nr.isNull() do vreqerr("NR") quit
		if vx("NRNEGIPTY").exists(),dep.nrnegipty.isNull() do vreqerr("NRNEGIPTY") quit
		if vx("NRPOSIPTY").exists(),dep.nrposipty.isNull() do vreqerr("NRPOSIPTY") quit
		if vx("NRPPTY").exists(),dep.nrppty.isNull() do vreqerr("NRPPTY") quit
		if vx("NRWHPTY").exists(),dep.nrwhpty.isNull() do vreqerr("NRWHPTY") quit
		if vx("ODFLG").exists(),dep.odflg.isNull() do vreqerr("ODFLG") quit
		if vx("ODO").exists(),dep.odo.isNull() do vreqerr("ODO") quit
		if vx("ODSF").exists(),dep.odsf.isNull() do vreqerr("ODSF") quit
		if vx("ODSI").exists(),dep.odsi.isNull() do vreqerr("ODSI") quit
		if vx("ODT").exists(),dep.odt.isNull() do vreqerr("ODT") quit
		if vx("OFFPROC").exists(),dep.offproc.isNull() do vreqerr("OFFPROC") quit
		if vx("OID").exists(),dep.oid.isNull() do vreqerr("OID") quit
		if vx("OSGNCRDC").exists(),dep.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("PAYEFT").exists(),dep.payeft.isNull() do vreqerr("PAYEFT") quit
		if vx("PBI").exists(),dep.pbi.isNull() do vreqerr("PBI") quit
		if vx("PDIV").exists(),dep.pdiv.isNull() do vreqerr("PDIV") quit
		if vx("PHLD").exists(),dep.phld.isNull() do vreqerr("PHLD") quit
		if vx("PIPW").exists(),dep.pipw.isNull() do vreqerr("PIPW") quit
		if vx("PIS").exists(),dep.pis.isNull() do vreqerr("PIS") quit
		if vx("PLDG").exists(),dep.pldg.isNull() do vreqerr("PLDG") quit
		if vx("PSGNCRDR").exists(),dep.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("REGCC").exists(),dep.regcc.isNull() do vreqerr("REGCC") quit
		if vx("REGDD").exists(),dep.regdd.isNull() do vreqerr("REGDD") quit
		if vx("RFLG").exists(),dep.rflg.isNull() do vreqerr("RFLG") quit
		if vx("SCHPROC").exists(),dep.schproc.isNull() do vreqerr("SCHPROC") quit
		if vx("SEGFLG").exists(),dep.segflg.isNull() do vreqerr("SEGFLG") quit
		if vx("SGNCRD").exists(),dep.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("SGNCRDCHGDT").exists(),dep.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
		if vx("SHAREACCT").exists(),dep.shareacct.isNull() do vreqerr("SHAREACCT") quit
		if vx("SMET").exists(),dep.smet.isNull() do vreqerr("SMET") quit
		if vx("SPF").exists(),dep.spf.isNull() do vreqerr("SPF") quit
		if vx("STAT").exists(),dep.stat.isNull() do vreqerr("STAT") quit
		if vx("SWPDELIP").exists(),dep.swpdelip.isNull() do vreqerr("SWPDELIP") quit
		if vx("SWPNI").exists(),dep.swpni.isNull() do vreqerr("SWPNI") quit
		if vx("TRB").exists(),dep.trb.isNull() do vreqerr("TRB") quit
		if vx("TRUNC").exists(),dep.trunc.isNull() do vreqerr("TRUNC") quit
		if vx("TYPE").exists(),dep.type.isNull() do vreqerr("TYPE") quit
		if vx("VOSELEC").exists(),dep.voselec.isNull() do vreqerr("VOSELEC") quit
		if vx("VOSSTMT").exists(),dep.vosstmt.isNull() do vreqerr("VOSSTMT") quit
		if vx("VOSTRO").exists(),dep.vostro.isNull() do vreqerr("VOSTRO") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEP","MSG",1767,"DEP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDEP dep
	if 'dep.acn.isNull() set vfkey("^CIF("_""""_dep.acn_""""_","_1_")")="DEP(ACN) -> CIF"
	if 'dep.rpaseq.isNull() set vfkey("^IRA("_""""_dep.acn_""""_","_""""_dep.rpaseq_""""_")")="DEP(ACN,RPASEQ) -> IRATYPE"
	if 'dep.type.isNull() set vfkey("^UTBLDFTD("_""""_dep.type_""""_","_50_")")="DEP(TYPE) -> PRODDFTD"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDEP dep
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":dep.acn") set vERRMSG = $$^MSG(8563,"DEP(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'dep.rpaseq.isNull() if 'Db.isDefined("IRATYPE",":dep.acn,:dep.rpaseq") set vERRMSG = $$^MSG(8563,"DEP(ACN,RPASEQ) -> IRATYPE") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("PRODDFTD",":dep.type") set vERRMSG = $$^MSG(8563,"DEP(TYPE) -> PRODDFTD") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit






vkchged // Access key changed

	type public RecordDEP dep

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(dep,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU^DEPFIL0
	if vpar["/VALDD/" do vddver^DEPFIL1
	do vexec

	set vnewkey = vux.piece("|",2),vobj(dep,-3) = vnewkey  // Copy new keys into object
	type RecordDEP vnewrec = dep.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU^DEPFIL0

	set vobj(dep,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordDEP dep
	type public String vpar

	type String vERRMSG

	do Db.delete("DAYENDINP","CID=:dep.cid",vpar)          // Cascade delete

	do Db.delete("DEPSCH","CID=:dep.cid",vpar)             // Cascade delete

	if Db.isDefined("DEPSWIFT","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"DEPSWIFT(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	if Db.isDefined("EFUNDS","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"EFUNDS(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("LNLS1","ESCWASH=:dep.cid",vpar)          // Cascade delete

	do Db.delete("LNLS1","PIWASH=:dep.cid",vpar)           // Cascade delete

	type ResultSet rs7=Db.select("ESCWASH","LNLS2","ESCWASH=:dep.cid") // Restriction on delete
	if 'rs7.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(ESCWASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs8=Db.select("WASH","LNLS2","WASH=:dep.cid") // Restriction on delete
	if 'rs8.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(WASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("RAMT","CID=:dep.cid",vpar)               // Cascade delete

	do Db.delete("STOP2","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("STOP3","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("STOP4","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("STOP5","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("DAYENDINP","CID=:dep.cid",vpar)          // Cascade delete

	do Db.delete("DEPSCH","CID=:dep.cid",vpar)             // Cascade delete

	if Db.isDefined("DEPSWIFT","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"DEPSWIFT(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	if Db.isDefined("EFUNDS","CID=:dep.cid") set vERRMSG = $$^MSG(8563,"EFUNDS(CID) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("LNLS1","ESCWASH=:dep.cid",vpar)          // Cascade delete

	do Db.delete("LNLS1","PIWASH=:dep.cid",vpar)           // Cascade delete

	type ResultSet rs20=Db.select("ESCWASH","LNLS2","ESCWASH=:dep.cid") // Restriction on delete
	if 'rs20.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(ESCWASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs21=Db.select("WASH","LNLS2","WASH=:dep.cid") // Restriction on delete
	if 'rs21.isEmpty() set vERRMSG = $$^MSG(8563,"LNLS2(WASH) -> DEP(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("RAMT","CID=:dep.cid",vpar)               // Cascade delete

	do Db.delete("STOP2","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("STOP3","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("STOP4","CID=:dep.cid",vpar)              // Cascade delete

	do Db.delete("STOP5","CID=:dep.cid",vpar)              // Cascade delete

	quit

VIDXBLD(vlist)	do VIDXBLD^DEPFIL3(vlist.get())	// Remapped

	quit


VIDXPGM()	quit "DEPFIL3"	// Location of index program

