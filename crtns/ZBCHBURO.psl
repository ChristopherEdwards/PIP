ZBCHBURO //Batch ZBCHBURO - Monthly Files to Buro de Credito
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:09 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - ZBCHBURO Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("ZBCHBURO")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("ZBCHBURO") quit
 do JOBMGR^BCHUTL(%FN,"ZBCHBURO",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("ZBCHBURO")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(ACN) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("ZBCHBURO","*","",ACN.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"ZBCHBURO",ACN.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"ZBCHBURO",ACN.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,ACN)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("ZBCHBURO","*","",ACN.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"ZBCHBURO",ACN.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,ACN) //
	type RecordCIF cif
	type ResultSet rs

	set cif=Db.getRecord("CIF","ACN=:ACN",1)
	// Customer ~p1 does not exist
	if cif.getMode()=0 set RM=$$^MSG(6167,ACN) do EXC quit

	set rs=Db.select("CID","RELCIF","ACN=:ACN")
	if rs.isEmpty() quit
	while rs.next() do {
		type Number XCID
		type String XGRP
		type RecordLN ln

		set XCID=rs.getCol("CID")
		set ln=Db.getRecord("LN","CID=:XCID",1)
		// Only process Loan Accounts
		if ln.getMode()=0 quit

		// If Loan Account Status is 'Closed', skip Account
		if ln.stat=4 quit

		set XGRP=ln.grp

		// Individual Accounts
		if cif.pers=0 do INDIV(ACN,XCID,.cif,XGRP,.ln)

		// Company Accounts
		if cif.pers=1 do COMP(ACN,XCID,.cif,XGRP,.ln)
	}

	quit

INDIV(ACN,CID,RecordCIF cif,XGRP,RecordLN ln)
	/*
	Individual Accounts Section

	ARGUMENTS:
		ACN			Customer Number
		CID			Account Number
		RecordCIF cif		CIF Record Object
		XGRP			Loan Product Group
		RecordLN ln		LN Record Object
	*/
	type String ZPE
	type RecordZBURO zburo=Class.new("RecordZBURO")

	if '$D(TOTAL(XGRP)) set TOTAL(XGRP)=0_"|"_0

	// PN Record
	set zburo.type=0
	set zburo.grp=XGRP
	set zburo.acn=ACN
	set zburo.cid=CID
	set zburo.rtype="PN"
	set zburo.data=$$PN(.cif)
	do zburo.bypassSave()

	// PA Record
	set zburo.type=0
	set zburo.grp=XGRP
	set zburo.acn=ACN
	set zburo.cid=CID
	set zburo.rtype="PA"
	set zburo.data=$$PA(.cif)
	do zburo.bypassSave()

	// PE Record
	set ZPE=$$PE(.cif)
	if ZPE'="" do {
		set zburo.type=0
		set zburo.grp=XGRP
		set zburo.acn=ACN
		set zburo.cid=CID
		set zburo.rtype="PE"
		set zburo.data=ZPE
		do zburo.bypassSave()
	}

	// TL Record
	set zburo.type=0
	set zburo.grp=XGRP
	set zburo.acn=ACN
	set zburo.cid=CID
	set zburo.rtype="TL"
	set zburo.data=$$TL(CID,XGRP,.ln)
	do zburo.bypassSave()

	quit

LVAL(DI)
	/*
	Length/Value section

	Determine Length of Data Item and concatenate with actual value.

	ARGUMENTS:
		DI			Data Item

	RETURNS: Two-byte length value of Data Item concatenated with value.
	*/
	quit $S(DI.length()<10:"0"_DI.length(),1:DI.length())_$$UPPER^SCAUTL(DI)

PN(RecordCIF cif)
	/*
	Mapping Name Segment (PN)

	ARGUMENTS:
		RecordCIF cif		CIF Record Object

	RETURNS: PN Record
	*/
	type String OWN,REC
	type Date DOB,DOD
	set REC=""
	if 'cif.lnm.isNull() set REC="PN"_$$LVAL(cif.lnm)
	if 'cif.mmname.isNull() set REC=REC_"00"_$$LVAL(cif.mmname)
	if 'cif.fname.isNull() set REC=REC_"02"_$$LVAL(cif.fname)
	if 'cif.mname.isNull() set REC=REC_"03"_$$LVAL(cif.mname)
	if 'cif.dob.isNull() do {
		set DOB=cif.dob
		set REC=REC_"04"_$$LVAL($$DAT^%ZM(DOB,MASK))
	}
	if 'cif.taxid.isNull() do {
		type String TAX
		set TAX=cif.taxid

		// Remove Spaces and special characters / and -
		set TAX=$TR(TAX," ","")
		set TAX=$TR(TAX,"/","")
		set TAX=$TR(TAX,"-","")

		set REC=REC_"05"_$$LVAL(TAX)
	}
	if 'cif.pref.isNull() set REC=REC_"06"_$$LVAL(cif.pref)
	if 'cif.suffix.isNull() set REC=REC_"07"_$$LVAL(cif.suffix)
	if 'cif.nation.isNull() set REC=REC_"08"_$$LVAL(cif.nation)
	if 'cif.own.isNull() do {
		set OWN=cif.own
		set REC=REC_"09"_"01"_$SELECT(OWN="O":1,OWN="R":2,1:3)
	}
	if 'cif.dlnum.isNull() set REC=REC_"10"_$$LVAL(cif.dlnum)
	if 'cif.mar.isNull() do {
		// 'L' maps to 'F' (Free union)
		if cif.mar="L" set REC=REC_"11"_"01F"
		else  set REC=REC_"11"_$$LVAL(cif.mar)
	}
	if 'cif.sex.isNull() set REC=REC_"12"_$$LVAL(cif.sex)
	if 'cif.dep.isNull() set REC=REC_"17"_$$LVAL(cif.dep)
	if 'cif.dod.isNull() do {
		set DOD=cif.dod
		set REC=REC_"20"_$$LVAL($$DAT^%ZM(DOD,MASK))
		// If Date of Death is defined, set Indicator of Death='Y'
		set REC=REC_"21"_"01Y"
	}

	quit REC
	
PA(RecordCIF cif)
	/*
	Mapping of Address Segment (PA)

	ARGUMENTS:
		RecordCIF cif		CIF Record Object

	RETURNS: PA Record
	*/

	type String REC
	set REC=""
	if 'cif.pad1.isNull() set REC="PA"_$$LVAL(cif.pad1)
	if 'cif.pad2.isNull() set REC=REC_"00"_$$LVAL(cif.pad2)
	if 'cif.pad4.isNull() set REC=REC_"01"_$$LVAL(cif.pad4)
	if 'cif.pcounty.isNull() set REC=REC_"02"_$$LVAL(cif.pcounty)
	if 'cif.pcity.isNull() set REC=REC_"03"_$$LVAL(cif.pcity)
	if 'cif.pstate.isNull() do {
		if STATE(cif.pstate).get()="" quit
		// Use STATE Array initialized in THRINIT
		set REC=REC_"04"_$$LVAL(STATE(cif.pstate))
	}
	if 'cif.pzip.isNull() set REC=REC_"05"_$$LVAL(cif.pzip)
	if 'cif.hph.isNull() set REC=REC_"07"_$$LVAL(cif.hph)
	if 'cif.hfaxnum.isNull() set REC=REC_"09"_$$LVAL(cif.hfaxnum)

	quit REC

PE(RecordCIF cif)
	/*
	Employment Segment (PE)

	ARGUMENTS:
		RecordCIF cif		CIF Record Object

	RETURNS: PE Record
	*/

	type String REC
	set REC="PE"
	if 'cif.empname.isNull() set REC=$$LVAL(cif.empname)
	if 'cif.empad1.isNull() set REC=REC_"00"_$$LVAL(cif.empad1)
	if 'cif.empad2.isNull() set REC=REC_"01"_$$LVAL(cif.empad2)
	if 'cif.empad3.isNull() set REC=REC_"02"_$$LVAL(cif.empad3)
	if 'cif.empcnty.isNull() set REC=REC_"03"_$$LVAL(cif.empcnty)
	if 'cif.empcity.isNull() set REC=REC_"04"_$$LVAL(cif.empcity)
	if 'cif.empstate.isNull() do {
		if STATE(cif.empstate).get()="" quit
		// Use STATE Array initialized in THRINIT
		set REC=REC_"05"_$$LVAL(STATE(cif.empstate))
	}
	if 'cif.empzip.isNull() set REC=REC_"06"_$$LVAL(cif.empzip)
	if 'cif.bph.isNull() set REC=REC_"07"_$$LVAL(cif.bph)
	if 'cif.bphext.isNull() set REC=REC_"08"_$$LVAL(cif.bphext)
	if 'cif.faxnum.isNull() set REC=REC_"09"_$$LVAL(cif.faxnum)
	if 'cif.emplno.isNull() set REC=REC_"15"_$$LVAL(cif.emplno)
	if 'cif.empverdt.isNull() set REC=REC_"17"_$$LVAL(cif.empverdt)

	if REC="PE" quit ""
	quit REC

TL(CID,GRP,RecordLN ln)
	/*
	Account Segment (TL)

	ARGUMENTS:
		CID			Account Number
		GRP			Loan Product Group
		RecordLN ln		LN Record Object

	RETURNS: TL Record
	*/
	type RecordZUTBLCBC zcbc

	type String REC
	type Number REVFLG

	set REVFLG=ln.revf

	set REC="TL02TL"
	if 'MISC1.isNull() set REC=REC_"01"_$$LVAL(MISC1)
	if 'MISC2.isNull() set REC=REC_"02"_$$LVAL(MISC2)
	if 'CID.isNull() set REC=REC_"04"_$$LVAL(CID)
	if 'ln.acnrelc.isNull() do {
		// LN.ACNRELC=1 maps to "I"
		if ln.acnrelc=1 set REC=REC_"05"_"01I"
		// LN.ACNRELC=2 maps to "J"
		if ln.acnrelc=2 set REC=REC_"05"_"01J"
	}
	if 'ln.revf.isNull() do {
		// LN.REVL="Y" maps to "R"
		if ln.revf="Y" set REC=REC_"06"_"01R"
		// Else "I"
		else  set REC=REC_"06"_"01I"
	}
	if 'ln.cbc.isNull() do {
		type String CBC
		set CBC=ln.cbc
		set zcbc=Db.getRecord("ZUTBLCBC","CBC=:CBC",1)
		if zcbc.getMode()=0 quit
		if 'zcbc.buroco.isNull() set REC=REC_"07"_$$LVAL(zcbc.buroco)
	}
	if 'ln.crcd.isNull() do {
		// LN.CRCD=MXP=MX
		if ln.crcd="MXP" set REC=REC_"08"_"02MX"
		// LN.CRCD=USD=US
		if ln.crcd="USD" set REC=REC_"08"_"02US"
	}
	// LN.ONP for non-revolving, Blank for revolving
	if ('REVFLG),'ln.onp.isNull() set REC=REC_"10"_$$LVAL(ln.onp)

	// Weekly, Monthly, Quarterly
	if 'ln.dist1af.isNull() set REC=REC_$S(ln.dist1af=12:"1101M",ln.dist1af=26:"1101Q",ln.dist1af=52:"1101W",1:"")

	// LN.PMTPI Rounded to whole number for non-revolving
	if ('REVFLG),'ln.pmtpi.isNull() set REC=REC_"12"_$$LVAL(ln.pmtpi.roundDec(0))

	// LN.PMT for Revolving
	if (REVFLG),'ln.pmt.isNull() set REC=REC_"12"_$$LVAL(ln.pmt.roundDec(0))

	// Revolving Credit - LN.ODT
	if (REVFLG),'ln.odt.isNull() set REC=REC_"13"_$$LVAL($$DAT^%ZM(ln.odt,MASK))
	// Non-Revolving Credit - LN.ODD
	if ('REVFLG),'ln.odd.isNull() set REC=REC_"13"_$$LVAL($$DAT^%ZM(ln.odd,MASK))

	if 'ln.lpdt.isNull() set REC=REC_"14"_$$LVAL($$DAT^%ZM(ln.lpdt,MASK))

	// Revolving Credit - LN.LADT
	if (REVFLG),'ln.ladt.isNull() set REC=REC_"15"_$$LVAL($$DAT^%ZM(ln.ladt,MASK))
	// Non-Revolving Credit - LN.ODT
	if ('REVFLG),'ln.odd.isNull() set REC=REC_"15"_$$LVAL($$DAT^%ZM(ln.odd,MASK))

	if 'ln.dtc.isNull() set REC=REC_"16"_$$LVAL($$DAT^%ZM(ln.dtc,MASK))
	if 'XTJD.isNull() set REC=REC_"17"_$$LVAL($$EOMJD^SCADAT(XTJD,1))

	if 'ln.crlmt.isNull() set REC=REC_"21"_$$LVAL(ln.crlmt.roundDec(0))

	if 'ln.bal.isNull() do {
		type Number WHOLE
		set WHOLE=ln.bal.roundDec(0)
		if WHOLE>=0 set REC=REC_"22"_$$LVAL(WHOLE)

		// If ln.bal is negative, place "-" sign to the right
		else  set REC=REC_"22"_$$LVAL(WHOLE.zero(0,,,2))

		// Increment Total Balance Counter
		set TOTAL(GRP).piece("|",1)=TOTAL(GRP).piece("|",1)+ln.bal
	}
	if 'ln.crlmt.isNull() set REC=REC_"23"_$$LVAL(ln.crlmt.roundDec(0))

	if 'ln.gtdue.isNull() set REC=REC_"24"_$$LVAL(ln.gtdue.roundDec(0))

	if 'ln.pmtdel.isNull() do {
		set REC=REC_"25"_$$LVAL(ln.pmtdel)

		// Increment Total Due Balances Counter
		set TOTAL(GRP).piece("|",2)=TOTAL(GRP).piece("|",2)+ln.pmtdel
	}
	if 'ln.daysdelq.isNull() do {
		// If LN.DAYSDELQ=0 = 01
		if ln.daysdelq=0 set REC=REC_"26"_"0201"
		// If LN.DAYSDELQ=1-29 = 02
		else  if ln.daysdelq<30 set REC=REC_"26"_"0202"
		// If LN.DAYSDELQ=30-59 = 03
		else  if ln.daysdelq<60 set REC=REC_"26"_"0203"
		// If LN.DAYSDELQ=60-89 = 04
		else  if ln.daysdelq<90 set REC=REC_"26"_"0204"
		// If LN.DAYSDELQ=90-119 = 05
		else  if ln.daysdelq<120 set REC=REC_"26"_"0205"
		// If LN.DAYSDELQ=120-149 = 06
		else  if ln.daysdelq<150 set REC=REC_"26"_"0206"
		// If LN.DAYSDELQ=150-365 = 07
		else  if ln.daysdelq<366 set REC=REC_"26"_"0207"
		// If LN.DAYSDELQ>365 = 96
		else  set REC=REC_"26"_"0296"
	}
	// If LN.DAYSDELQ is undefined
	else  set REC=REC_"26"_"0201"

	set REC=REC_"9903END"

	quit REC

COMP(ACN,CID,RecordCIF cif,XGRP,RecordLN ln)
	/*
	Company Accounts Section

	ARGUMENTS:
		ACN			Customer Number
		CID			Account Number
		RecordCIF cif		CIF Record Object
		XGRP			Loan Product Group
		RecordLN ln		LN Record Object
	*/
	type String TAXID
	type RecordZBURO zburo=Class.new("RecordZBURO")

	if '$D(QUANT(XGRP)) set QUANT(XGRP)=0

	set TAXID=cif.taxid

	// Remove Spaces and special characters / and -
	set TAXID=$TR(TAXID," ","")
	set TAXID=$TR(TAXID,"/","")
	set TAXID=$TR(TAXID,"-","")

	// EM Record
	set zburo.type=1
	set zburo.grp=XGRP
	set zburo.acn=ACN
	set zburo.cid=CID
	set zburo.rtype="EM"
	set zburo.data=$$EM(.cif,TAXID)
	do zburo.bypassSave()

	// CR Record
	set zburo.type=1
	set zburo.grp=XGRP
	set zburo.acn=ACN
	set zburo.cid=CID
	set zburo.rtype="CR"
	set zburo.data=$$CR(CID,TAXID,.ln)
	do zburo.bypassSave()

	// DE Record
	set zburo.type=1
	set zburo.grp=XGRP
	set zburo.acn=ACN
	set zburo.cid=CID
	set zburo.rtype="DE"
	set zburo.data=$$DE(CID,TAXID,XGRP,.ln)
	do zburo.bypassSave()

	quit

EM(RecordCIF cif,TAXID)
	/*
	Company Segment (EM)

	ARGUMENTS:
		RecordCIF cif		CIF Record Object
		TAXID			RFC/Tax Data

	RETURNS: EM Record
	*/
	type String BLANK,REC
	type Number ZERO

	set BLANK=" "
	set ZERO=0

	set REC="EMEM"
	set REC=REC_"00"_TAXID.blank(13)
	set REC=REC_"01"_cif.oin.blank(18)
	set REC=REC_"02"_ZERO.zero(10)
	set REC=REC_"03"_cif.nam.blank(75)
	set REC=REC_"04"_BLANK.blank(75)
	set REC=REC_"05"_BLANK.blank(75)
	set REC=REC_"06"_BLANK.blank(25)
	set REC=REC_"07"_BLANK.blank(25)
	set REC=REC_"08"_cif.nation.blank(2)
	set REC=REC_"09"_BLANK.blank(2)
	set REC=REC_"10"_cif.naics.zero(11)
	set REC=REC_"11"_ZERO.zero(11)
	set REC=REC_"12"_ZERO.zero(11)
	set REC=REC_"13"_cif.pad1.blank(40)
	set REC=REC_"14"_cif.pad2.blank(40)
	set REC=REC_"15"_cif.pad4.blank(60)
	set REC=REC_"16"_BLANK.blank(40)
	set REC=REC_"17"_cif.pcity.blank(40)
	if 'cif.pstate.isNull() do {
		if STATE(cif.pstate).get()="" set REC=REC_"18"_"   "
		else  set REC=REC_"18"_STATE(cif.pstate).blank(3)
	}
	else  set REC=REC_"18"_"   "

	set REC=REC_"19"_cif.pzip.blank(10)
	set REC=REC_"20"_cif.bph.blank(11)
	set REC=REC_"21"_cif.bphext.zero(8)
	set REC=REC_"22"_cif.faxnum.blank(11)
	set REC=REC_"231"
	set REC=REC_"24"_BLANK.blank(128)

	quit REC

CR(CID,TAXID,RecordLN ln)
	/*
	Credit Segment (CR)

	ARGUMENTS:
		CID			Account Number
		TAXID			Tax Payer ID (cif.taxid)
		RecordLN ln		LN Record Object

	RETURNS: CR Record
	*/
	type RecordZUTBLCBC zcbc

	type String BLANK,DAYS,FNUM,FREQ,REC
	type Number REVFLG,ZERO

	set REVFLG=ln.revf

	set BLANK=" "
	set ZERO=0

	set REC="CRCR"
	set REC=REC_"00"_TAXID.blank(13)
	set REC=REC_"01"_ZERO.zero(6)
	set REC=REC_"02"_ln.cid.zero(25)
	set REC=REC_"03"_BLANK.blank(25)

	// Revolving Credit - LN.ODT
	if REVFLG set REC=REC_"04"_$$DAT^%ZM(ln.odt,MASK)
	// Non-Revolving Credit - LN.ODD
	else  set REC=REC_"04"_$$DAT^%ZM(ln.odd,MASK)

	// Non-Revolving Credit - LN.TRM
	if 'REVFLG set REC=REC_"05"_ln.trm.zero(5)
	// Revolving Credit - Zero filled
	else  set REC=REC_"05"_ZERO.zero(5)

	if 'ln.cbc.isNull() do {
		type String CBC
		set CBC=ln.cbc
		set zcbc=Db.getRecord("ZUTBLCBC","CBC=:CBC",1)
		if zcbc.getMode()=0 set REC=REC_"06"_ZERO.zero(4) quit
		set REC=REC_"06"_zcbc.buroco.zero(4)
	}
	else  set REC=REC_"06"_ZERO.zero(4)

	// Non-Revolving Credit - LN.ORG
	if 'REVFLG set REC=REC_"07"_ln.org.roundDec(0).zero(20)
	// Revolving Credit - Zero filled
	else  set REC=REC_"07"_ZERO.zero(20)

	if ln.crcd="MXN" set REC=REC_"08001"
	else  if ln.crcd="USD" set REC=REC_"08005"
	else  if ln.crcd="EUR" set REC=REC_"08100"
	else  set REC=REC_"08000"

	// Non-Revolving Credit - LN.ONP
	if 'REVFLG set REC=REC_"09"_ln.onp.zero(4)
	// Revolving Credit - Zero filled
	else  set REC=REC_"09"_ZERO.zero(4)

	if ln.dist1fre.isNull() set REC=REC_"10000"
	else  do {
		if ln.dist1fre="1MA15E" set DAYS=15
		else  do {
			set FNUM=ln.dist1fre.extract(1)
			set FREQ=ln.dist1fre.extract(2)
			if FREQ="M" set DAYS=FNUM*30
			if FREQ="W" set DAYS=FNUM*14
			if FREQ="Q" set DAYS=FNUM*90
			if FREQ="Y" set DAYS=FNUM*360
			if FREQ="D" set DAYS=FNUM*1
		}
		set REC=REC_"10"_DAYS.zero(3)
	}

	// Non-Revolving Credit - LN.PMTPI
	if 'REVFLG set REC=REC_"11"_ln.pmtpi.roundDec(0).zero(20)
	// Revolving Credit - Zero filled
	else  set REC=REC_"11"_ln.pmt.roundDec(0).zero(20)

	if 'ln.lpdt.isNull() set REC=REC_"12"_$$DAT^%ZM(ln.lpdt,MASK)
	else  set REC=REC_"12"_BLANK.blank(8)

	if 'ln.dlr.isNull() set REC=REC_"13"_$$DAT^%ZM(ln.dlr,MASK)
	else  set REC=REC_"13"_BLANK.blank(8)

	set REC=REC_"14"_ZERO.zero(20)

	if 'ln.dtc.isNull() set REC=REC_"15"_$$DAT^%ZM(ln.dtc,MASK)
	else  set REC=REC_"15"_BLANK.blank(8)

	set REC=REC_"16"_ZERO.zero(20)
	set REC=REC_"17"_ZERO.zero(20)
	set REC=REC_"18"_ZERO.zero(20)
	set REC=REC_"19"_"    "
	set REC=REC_"20"_" "
	set REC=REC_"21"
	set REC=REC.blank(400)

	quit REC

DE(CID,TAXID,GRP,RecordLN ln)
	/*
	Credit Detail Segment (DE)

	ARGUMENTS:
		CID			Account Number
		TAXID			Tax Payer ID (cif.taxid)
		GRP			Product Group
		RecordLN ln		LN Record Object

	RETURNS: DE Record
	*/

	type String BLANK,REC

	set BLANK=" "

	set REC="DEDE"
	set REC=REC_"00"_TAXID.blank(13)
	set REC=REC_"01"_ln.cid.zero(25)
	set REC=REC_"02"_ln.daysdelq.zero(3)
	set REC=REC_"03"_ln.gtdue.roundDec(0).zero(20)
	set REC=REC_"04"_BLANK.blank(75)

	// Total Quantity field for all Companies
	set QUANT(GRP)=QUANT(GRP)+ln.gtdue

	quit REC

EXC
	/*
	Log error to DAYEND

	INPUTS:
		RM			Error Message

	*/

	type String DESC

	set DESC="BURO DE CREDITO MONTHLY FILES"
	do LOG^UTLEXC($T(+0),"*",DESC,,%ZTSEQ.get(),RM.get())
	kill RM,%ZTSEQ
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,ACN
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set ACN=vRECORD.piece($C(9),1)
 do vPROC(ACN)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,ACN
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set INTRFACE="BURO"
	type RecordUTBLEXTINT extint=Db.getRecord("UTBLEXTINT","INTRFACE=:INTRFACE",1)
	// Invalid entry in external interface table
	if extint.getMode()=0 set RM=$$^MSG(7799),%BatchExit=1 do EXC quit

	set MISC1=extint.misc1
	set MISC2=extint.misc2
	set MISC3=extint.misc3

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("ACN","CIF","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set MASK="DDMMYEAR"

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set XTJD=cuvar.tjd-1
	set XTJD=$$DAT^%ZM(XTJD,"DDMMYEAR")

	// Build State array to eliminate disk reads
	type ResultSet rs1=Db.select("STATE,ASTATE","STBLCNTRY1","CNTRY='MX'")
	if 'rs1.isEmpty() while rs1.next() set STATE(rs1.getCol("STATE"))=rs1.getCol("ASTATE")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	/*
	Collate through the Totals Arrays and create entries in 
	ZBUROTOT for each of the Loan Product Groups totals
	*/
	type String XGRP

	set XGRP=""
	for  set XGRP=TOTAL(XGRP).order() quit:XGRP=""  do {
		type RecordZBUROTOT zburotot=Class.new("RecordZBUROTOT")
		set zburotot.type=0
		set zburotot.pid=%ProcessID
		set zburotot.grp=XGRP
		set zburotot.tlbal=TOTAL(XGRP).piece("|",1).roundDec(0)
		set zburotot.tlpmt=TOTAL(XGRP).piece("|",2).roundDec(0)
		do zburotot.bypassSave()
	}

	// Collate through the Companies Totals Array
	set XGRP=""
	for  set XGRP=QUANT(XGRP).order() quit:XGRP=""  do {
		type RecordZBUROTOT zburotot=Class.new("RecordZBUROTOT")
		set zburotot.type=1
		set zburotot.pid=%ProcessID
		set zburotot.grp=XGRP
		set zburotot.quant=QUANT(XGRP).roundDec(0)
		do zburotot.bypassSave()
	}

	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	do Db.fastDelete("ZBURO")
	do Db.fastDelete("ZBUROTOT")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type RecordZBURO zburo
	type ResultSet rs1,rs2,rs3,rs4
	type RecordCUVAR cuvar
	type RecordUTBLEXTINT extint

	type Number COCNT,RECNUM,TYPE,XACN,XCID
	type String ALLREC,CNT,HDREC,INTFREC,REC,RTYPE,TRREC,TSREC,XGRP

	set INTRFACE="BURO"

	set cuvar=Db.getRecord("CUVAR")

	set XTJD=cuvar.tjd-1

	set extint=Db.getRecord("UTBLEXTINT","INTRFACE=:INTRFACE",1)
	// Invalid entry in external interface table
	if extint.getMode()=0 quit

	// Collate through ZBURO table. Create Individual File for each Product Group
	set TYPE=0
	set rs1=Db.select("DISTINCT GRP","ZBURO","TYPE=:TYPE")
	if 'rs1.isEmpty() while rs1.next() do {
		set XGRP=rs1.getCol("GRP")

		// Initialize Sections Counter
		for RTYPE="PN","PA","PE","TL" set CNT(RTYPE)=0

		// Individual File Header - INTF Record
		set INTFREC=$$INTF(extint.misc1,extint.misc2,XTJD)

		set (ALLREC,REC)=""

		set rs2=Db.select("DISTINCT ACN","ZBURO","TYPE=:TYPE AND GRP=:XGRP")
		if 'rs2.isEmpty() while rs2.next() do {
			set XACN=rs2.getCol("ACN")

			set rs3=Db.select("DISTINCT CID","ZBURO","TYPE=:TYPE AND GRP=:XGRP AND ACN=:XACN")
			if 'rs3.isEmpty() while rs3.next() do {
				set XCID=rs3.getCol("CID")

				for RTYPE="PN","PA","PE","TL" do {
					// Retrieve Individual Account Records in the temporary file.
					set zburo=Db.getRecord("ZBURO","TYPE=:TYPE,GRP=:XGRP,ACN=:XACN,CID=:XCID,RTYPE=:RTYPE",1)
					if zburo.getMode()=0 quit
					set REC=REC_zburo.data
					set CNT(RTYPE)=CNT(RTYPE)+1
				}
			}
		}
		// Individual File Trailer - TR Record
		set TRREC=$$TR(XGRP,.cuvar,extint.misc2,CNT())

		set ALLREC=INTFREC_REC_TRREC
		if 'ALLREC.isNull() do {
			type IO io=Class.new("IO")
			set io.fileName="BUROIN_"_XGRP_%SystemDate.toString("DDMMYEAR")_".TXT"
			set io.openParams="NEWV/WRITE"
			set io.recordSize=ALLREC.length()
			do io.open()
			do io.write(.ALLREC)

			do io.close()
		}
	}

	// Collate through ZBURO table. Create Company File for each Product Group
	set TYPE=1

	// Initialize variables
	set (ALLREC,REC)=""
	set COCNT=0

	set rs1=Db.select("DISTINCT GRP","ZBURO","TYPE=:TYPE")
	if 'rs1.isEmpty() while rs1.next() do {

		set XGRP=rs1.getCol("GRP")

		set rs2=Db.select("DISTINCT ACN","ZBURO","TYPE=:TYPE AND GRP=:XGRP")
		if 'rs2.isEmpty() while rs2.next() do {
			type Number RECNUM
			set RECNUM=0
			set XACN=rs2.getCol("ACN")

			set rs4=Db.select("DISTINCT CID","ZBURO","TYPE=:TYPE AND GRP=:XGRP AND ACN=:XACN")
			if 'rs4.isEmpty() while rs4.next() do {
				set XCID=rs4.getCol("CID")

				// Only write "EM" record once for each Company
				if RECNUM=0 do {
					set RTYPE="EM"
					set zburo=Db.getRecord("ZBURO","TYPE=:TYPE,GRP=:XGRP,ACN=:XACN,CID=:XCID,RTYPE=:RTYPE",1)
					if zburo.getMode()=0 quit

					set REC=REC_$$UPPER^SCAUTL(zburo.data)
				}
				for RTYPE="CR","DE" do {
					// Retrieve Individual Account Records in the temporary file.
					set zburo=Db.getRecord("ZBURO","TYPE=:TYPE,GRP=:XGRP,ACN=:XACN,CID=:XCID,RTYPE=:RTYPE",1)
					if zburo.getMode()=0 quit
					set REC=REC_$$UPPER^SCAUTL(zburo.data)
				}
				set RECNUM=RECNUM+1
			}
			// Companies Counter
			set COCNT=COCNT+1
		}
	}
	// Company File Header - HD Record
	set HDREC=$$HD(extint.misc3,XTJD)

	// Company File Trailer - TS Record
	set TSREC=$$TS(COCNT,XGRP)

	set ALLREC=HDREC_REC_TSREC

	type IO io=Class.new("IO")
	set io.fileName="BUROCO_"_%SystemDate.toString("DDMMYEAR")_".TXT"
	set io.openParams="NEWV/WRITE"
	set io.recordSize=ALLREC.length()
	do io.open()

	do io.write(.ALLREC)

	do io.close()

	do Db.fastDelete("ZBURO")
	do Db.fastDelete("ZBUROTOT")

	quit

INTF(MISC1,MISC2,XTJD)
	/*
	Header Segment (INTF)

	ARGUMENTS:
		MISC1			User Code (extint.misc1)
		MISC2			User Name (extint.misc2)
		XTJD			Report Date (cuvar.tjd-1)

	RETURNS: INTF Record
	*/
	type String REC
	type Number EOM

	set REC="INTF10"
	set REC=REC_MISC1.blank(10)
	set REC=REC_MISC2.blank(16)
	set REC=REC_"  "

	// Report Date should be last day of the month
	set EOM=$$EOMJD^SCADAT(XTJD,1)
	set REC=REC_$$DAT^%ZM(EOM,"DDMMYEAR")

	set REC=REC_"0000000000"
	set REC=REC.blank(150)

	quit REC

TR(GRP,RecordCUVAR cuvar,MISC2,CNT)
	/*
	Control Figures Segment (TR)

	ARGUMENTS:
		GRP			Product Group
		RecordCUVAR cuvar	CUVAR Record Object
		MISC2			Grantors Name (extint.misc2)
		CNT			Sections Counter Array

	RETURNS: TR Record
	*/
	type ResultSet rs
	type String REC,ZCUVAR
	type Number TLBAL,TLPMT

	set REC="TRLR"

	set (TLBAL,TLPMT)=0

	set rs=Db.select("TLBAL,TLPMT","ZBUROTOT","TYPE=0 AND GRP=:GRP")
	if 'rs.isEmpty() while rs.next() do {
		set TLBAL=TLBAL+rs.getCol("TLBAL")
		set TLPMT=TLPMT+rs.getCol("TLPMT")
	}
	set REC=REC_"05"_$$LVAL(TLBAL)
        set REC=REC_"19"_$$LVAL(TLPMT)
	set REC=REC_"33011"
	set REC=REC_"36"_$$LVAL(CNT("PN").get())
	set REC=REC_"45"_$$LVAL(CNT("PA").get())
	set REC=REC_"54"_$$LVAL(CNT("PE").get())
	set REC=REC_"63"_$$LVAL(CNT("TL").get())
	set REC=REC_"78"_$$LVAL(MISC2)

	set ZCUVAR=cuvar.cad1_" "_cuvar.cad2_" "_cuvar.cad3_" "_cuvar.ccity_" "
	set ZCUVAR=ZCUVAR_cuvar.cstate_" "_cuvar.ccntry_" "_cuvar.czip
	if 'ZCUVAR.isNull() set REC=REC_"94"_$$LVAL(ZCUVAR)

	set REC=REC.blank(253)

	quit REC

HD(MISC3,XTJD)
	/*
	 Headline Segment (HD)

	ARGUMENTS:
		MISC3			Institution (extint.misc3)
		XTJD			Date (cuvar.tjd-1)

	RETURNS: HD Record
	*/
	type String BLANK,REC

	set BLANK=" "

	// Define header record fields
	set REC="HDBNCPM"
	set REC=REC_"00"_MISC3.zero(4)
	set REC=REC_"010000"
	set REC=REC_"02001"
	set REC=REC_"031"
	set REC=REC_"04"_$$DAT^%ZM(XTJD,"DDMMYEAR")
	set REC=REC_"05"_$$DAT^%ZM(XTJD,"MMYEAR")
	set REC=REC_"06"
	set REC=REC.blank(100)

	quit REC

TS(COCNT,GRP)
	/*
	File Closing Segment (TS)
	ARGUMENTS:
		COCNT		Company Counter
		GRP		Product Group

	RETURNS: TS Record
	*/
	type ResultSet rs
	type String BLANK,REC
	type Number QUANT

	set QUANT=0

	set rs=Db.select("QUANT","ZBUROTOT","TYPE=1 AND GRP=:GRP")
	if 'rs.isEmpty() while rs.next() set QUANT=QUANT+rs.getCol("QUANT")

	set BLANK=" "

	set REC="TSTS"
	set REC=REC_"00"_COCNT.zero(7)
	set REC=REC_"01"_QUANT.zero(30)
	set REC=REC_"02"
	set REC=REC.blank(100)

	quit REC

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
