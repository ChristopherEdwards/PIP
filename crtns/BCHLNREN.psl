BCHLNREN //Batch BCHLNRENDE - Loan Renewal Process
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNRENDE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNRENDE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNRENDE") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNRENDE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNRENDE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CNVDT,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNRENDE","*","",CNVDT.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNRENDE",CNVDT.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNRENDE",CNVDT.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CNVDT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNRENDE","*","",CNVDT.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNRENDE",CNVDT.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CNVDT,CID) //
	/*
           This procedure collates through the "LNRNW" DAYEND entries
           for todays date.  Recalculate either the interest rate or P&I
           (or both) for each account and file the changes as appropriate.
           Also, check for delinquent loans and skip if specified in
           [CUVAR]LNRENDEL
	*/

	new ER,BAL
	set ER=0

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	do RENEW(.ln)

	quit


public EXTERN(RecordLN ln,MF)	// External entry point

	new cuvar
	type RecordCUVAR cuvar
	set cuvar=Db.getRecord("CUVAR")
	set RDEL=cuvar.lnrendel	
	
	do RENEW(.ln,$G(MF))

	quit

	
RENEW(RecordLN ln,MRF)	// Process one account

	/*
	  ARGUMENTS:
	        
		. CID	Account Number		/TYPE=N/REQ/MECH=VAL
	
	        	Profile/IBS Account Number
	
		. MF    Maturity Renewal Flag   /TYPE=L/NOREQ/MECH=VAL

			Flag that marks this process as a maturity based
			loan renewal (1=MATURITY)
	*/


	new CMD,JD,FRE,NP,AF,PI,RRMO,BAL,IRN,CRCD,UX,PCM,STAT,MF,AO,ROSEQ
	new CNVDT,MDT,NIRN,BALLAMT
	
	set ER=0
	
	if ln.stat=4 quit

	set BAL=ln.bal
	set BALLAMT=ln.ballamt
	
	do ln.setAuditFlag(1)

	// Check for delinquent loans
	if 'RDEL,'ln.dseq>ln.schseq do { quit:ER

		// Loan renewal rejected due to delinquency
		do Runtime.setErrSTBLER("LN","LNRNWRJDEL")
		}

	// Check for approval

	set ROSEQ="",AO=0,MF=$G(MRF)

	// Find an approved renewal option

	new rs
	type ResultSet rs=Db.select("ROSEQ","LNRENEW","CID=:CID AND CNVAPP=1")

	if rs.next() set AO=1,ROSEQ=rs.getCol("ROSEQ")

	/*
	 Quit if this is not a maturity based renewal and 
	 there is not an approved option
	*/
	
	if 'MF,'ROSEQ quit

	set CNVDT=ln.cnvdt			// Conversion Date
	set MDT=ln.mdt				// Account Maturity Date	
	set TRM=ln.trm				// Account Term

	/*
	 Quit if this is a maturity based renewal, there is an approved
	 renewal option and it is the conversion date
	*/

	if MF,ROSEQ,MDT=CNVDT quit

	// Find the default maturity option
	if MF do {
		new rs2
		type ResultSet rs2=Db.select("ROSEQ","LNRENEW","CID=:CID AND MROPT=1")

		if rs2.next() set AO=1,ROSEQ=rs2.getCol("ROSEQ")
		}

	quit:'ROSEQ

	set SAVEIRN=ln.eirn			// Effective Interest Rate
	set CRCD=ln.crcd			// Currency Code
	if CRCD="" set CRCD=%CRCD
	set RRMO=ln.rrmo			// Renewal Interest Rate Maintenance Option
	set IRN=ln.irn				// Nominal Interest Rate

	// Set return parameters to NULL
	set ln.rnoff=""
	set ln.rfreq=""
	set ln.fpind=""
	set ln.rcbind=""
	set ln.rnflg=""
	set ln.rncal=""

	
	do ln.renew("CID,ROSEQ")

	// If new RNOFF="", set RDT to null    nph - 01/25/99
	if ln.rnoff="" set ln.rdt=""

	// If EIRN in renewal parameters, reset IRN based on new EIRN value

	//  Effective Interest Rate
	N XEIRN S XEIRN=ln.eirn				// DS 06/08/00
	if 'MF,XEIRN'=SAVEIRN set ln.irn=$$EIRN2IRN(XEIRN,.ln)

	/*
	 If IRN is in renewal parameters, this is converting to a fixed rate,
         so set variable rate parameters to NULL
	*/

	// mee - 50697 add ln.intmat,ln.intspr,ln.rndmtd
	if ln.irn'=IRN do {
		set ln.intoff=""
		set ln.intoffcl=""
		set ln.index=""
		set ln.ichnd=""
		set ln.intfre=""
		set ln.ichm=""
		set ln.intmat=""
		set ln.intspr=""
		set ln.rndmtd=""	
		}	

	/*
	 If the RFMO is true and RRMO is true, then calculate the 
	 interest rate by looking at the RRMO (if maturity).
	*/

	if MF,ln.rfmo,RRMO'="" do {  if ER quit	 // Update Interest Rate at Maturity
		new DFTIRN,RATE,EIRN,IRN
	
		set EIRN=ln.eirn		 //  Effective Interest Rate

		/*
		 Create the command to execute the appropriate RRMO 
	         program. This will calculate a new interest rate.
		*/

		new utblrrmo
		type RecordUTBLRRMO utblrrmo
		set METHOD=RRMO
		set utblrrmo=Db.getRecord("UTBLRRMO","METHOD")
		
		set CMD=utblrrmo.funcall	// Function Call

		/*
		 
		 .METHOD:	.FUNCTION CALL(CMD): 

	   	        0	              RRMO^LNRENEW
		    	1		      RRMO1^LNRENEW
			2		      RRMO2^LNRENEW	
			3		      RRM03^LNRENEW
			4		      RRM04^LNRENEW

		*/

		if CMD="" quit
		set CMD="set RATE=$$"_CMD
		#accept pgm=spier;date=12/9/03
		xecute CMD

		quit:ER
	
		new prodctl
		type RecordPRODCTL prodctl
		set prodctl=Db.getRecord("PRODCTL","ln.type")		
		set DFTIRN=prodctl.dftirn	// Default Rate Schedule Value
        	
		// Adding check for RRMO=4 - renew at rate schedule

        	set IRN=RATE
        	if DFTIRN,RRMO=4 set EIRN=RATE,IRN=$$EIRN2IRN(RATE,.ln) if ER quit

		/*	
		 If the rate returned from the RRMO routines is not null and 
		 is different from the existing rate, then set up an UX entry 
		 for the interest rate.
		*/

		if IRN'=ln.irn,IRN'="" set ln.irn=IRN
		if EIRN-ln.eirn set ln.eirn=EIRN
		}
	
	 /* 
	  If RPMO is true, then calculate the P&I using the UFINC utilities.
	  If RPMO is false, then do not calculate a new P&I (if maturity).
	 */

	if MF,ln.rpmo do {  if ER quit
		// Is this a P&I loan?
		if '$E(ln.pcm) quit		// Payment Calculation Method

		// Call UFRE to retrieve the AF(annual factor).

		set NJD=$$NJD^UFRE(%SystemDate,ln.dist1fre,.AF)

		quit:ER
		
		// Call UFINC to retrieve the NP(number of payments).
		
		set NP=$$TRM^UFINC(TJD,ln.trm,AF)	// Account Term
		
		quit:ER
		
		// Set the interest rate if it is not already set.

		/*
		 If Advances to Reduce Undisbursed Flag is not set, then
		 balance is updated by subtruct Unadvanced Balance
		*/

		set BAL=$S('ln.aruf:ln.bal,1:ln.bal-ln.udbal)

		new SAVIRN
		set SAVIRN=IRN,PCM=ln.pcm
		type Public Cache %CACHE()
		type RecordSTBLPCM stblpcm = %CACHE("STBLPCM").getRecord("STBLPCM","KEY = :PCM")
		if $E(stblpcm.pcmp,1,4)="1300",DXSI set SAVIRN=$$EIRN^PROCSAN(.ln,IRN,2,DIST1AF)

		// Balloon amount cannot be greater than loan amount
		if ('BALLAMT.isNull()),(BAL<BALLAMT) do Runtime.setErrMSG("LN","3747") quit:ER
		
		if BALLAMT do {
			set P=$$PMT^UFINC(BAL-BALLAMT,SAVIRN,NP,AF,0)
			set P=P+$$^UIC(BALLAMT,TJD,NJD,"00",SAVIRN,1,AF,ln.dist1fre,ln.icpf)
			set PI=$$^SCARND(P,0,CID,CRCD,2,"+",1)
			}
		else  set PI=$$^SCARND($$PMT^UFINC(BAL,SAVIRN,NP,AF,0),0,CID,CRCD,2,"+",1)

		quit:ER
		
		// Set up an UX entry for the P&I calculation if it has changed.
		
		if PI'=ln.pmtpi set ln.pmtpi=PI		// Principal and Interest Payment
		}

	/*
	 If not maturity, and converting to a variable rate loan, calculate
	 new rate and next change date
	*/

	if 'MF,ln.index'="" do {			// Interest Index
		new BAL,ICHND,INDEX,INTFRE,INTOFF,INTOFFCL,INTOFFDT,PCM,RATE

		// mee - 50697
		set INDEX=$$INDFILE^LNU(ln.index,ln.intspr,ln.rndmtd) quit:ER
		set INTOFF=ln.intoff			// Interest Review Offset Days
		set INTOFFCL=ln.intoffcl		// Interest Review Offset Calendar		
		set BAL=$S('ln.aruf:ln.bal,1:ln.bal-ln.udbal)
		set INTFRE=ln.intfre			// Interest Change Frequency

		set INTOFFDT=$$INTOFFDT^LNCDI(TJD,INTOFF,INTOFFCL) quit:ER

		// mee 50697 add ln.intmat, set (CTL,5)=1 to allow rounding
		type String PARAM()
		set PARAM("INDEX")=ln.index
		set PARAM("SPREAD")=ln.intspr
		set PARAM("RNDFC")=ln.rndmtd
		set PARAM("MATRIX")=ln.intmat
		do CTL^UINDX(.ln,INTOFFDT,BAL,.PARAM) quit:ER
		

		set ln.irn=RATE

		set ICHND=$$NJD^UFRE(TJD,INTFRE) quit:ER
		set INTOFFDT=$$INTOFFDT^LNCDI(ICHND,INTOFF,INTOFFCL)
		for  quit:INTOFFDT>TJD  do {
			set ICHND=$$NJD^UFRE(ICHND,INTFRE)
			set INTOFFDT=$$INTOFFDT^LNCDI(ICHND,INTOFF,INTOFFCL)
			}
		
		set ln.ichnd=ICHND
		set ln.intoffdt=INTOFFDT

		// Set ICHLD to TJD
		set ln.ichld=TJD
		}

	if ER quit

	/*
	 If this is a maturity date based renewal and there is not a new
	 maturity date set in the renewal parameters, or if the term has
	 changed, calculate the new maturity date based on the term
	*/

	if MF,(ln.mdt=MDT)!(ln.trm'=TRM) do {
		new TRM
		set TRM=ln.trm			//  Account Term
		set MDT=$$EXT^UMDT(TRM,TJD)
		set ln.mdt=MDT
		}

	// Update Date of last renewal data
	
	do FILE(.ln)	

	quit

	
FILE(RecordLN ln)	// File to disk

	new EFD
	set EFD=""
	
	// File to LNFIL
	do ln.save()

	quit
	

EIRN2IRN(RATE,RecordLN ln)	// Convert EIRN to IRN

	new IRN,TMP,TMP2
	if RATE="" quit RATE
	if ln.iacf'=2 quit ln.eirn
	if ln.dist1af=0 set ER=1,RM=$$^MSG(6970) quit ""
	set TMP=(1+(RATE/100/ln.iacf)) if TMP<1 set ER=1,RM=$$^MSG(6971) quit ""
	set TMP2=(ln.iacf/ln.dist1af)*$$LNX^%ZFUNC(TMP) if TMP2>87 set ER=1,RM=$$^MSG(6972) quit ""
	set IRN=($$EXP^%ZFUNC(TMP2)-1)*ln.dist1af*100
	set IRN=$$^SCARND(IRN,0,,,5)
	quit IRN	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CNVDT,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CNVDT=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(CNVDT,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CNVDT,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+26>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 	do SOURCE^BCHSOURC("BOFF","LNRNW",.%UserID,.BRCD,.%UserClass)
 	if ER set %BatchExit=1 quit

	set XTJD=%SystemDate

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CNVDT,CID","DAYENDLNRNW","DAYENDLNRNW.CNVDT=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 	new cuvar
 	type RecordCUVAR cuvar
 	set cuvar=Db.getRecord("CUVAR")
 	set RDEL=cuvar.lnrendel

 	set EFD=%SystemDate
 	set ER=0
       
 	do SOURCE^BCHSOURC("BOFF","LNRNW",.%UserID,.BRCD,.%UserClass)

 	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
