BCHLNNFD //Batch BCHLNNFDE - Net Deferred Fees
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNNFDE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNNFDE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNNFDE") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNNFDE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNNFDE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,CLS,GRP,TYP,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNNFDE","*","",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNNFDE",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNNFDE",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,CLS,GRP,TYP,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNNFDE","*","",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNNFDE",TJD.get()_","_CLS.get()_","_GRP.get()_","_TYP.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,CLS,GRP,TYP,CID) //
 
	
EXEC	// Process single account
 
	new ln,lncycpts,ts,ttx,trseq
	new PTSTYP
 
	set ER=0
	set EFD=%SystemDate
 
	type RecordLN ln=Db.getRecord("LN",CID)
 
	if 'ln.ptsp quit
 
	set PTSTYP="PTS"
 
	type RecordLNCYCPTS lncycpts=Db.getRecord("LNCYCPTS","CID,PTSTYP")
 
	if lncycpts.plan="" quit
	set PLAN=lncycpts.plan
 
	if ln.stat=4 quit
 
	set CRCD=ln.crcd
	set CC=ln.cc
	set GLSC=ln.glsc
	set TYPE=ln.type
 
 	// Skip plans that have already been identified as having a problem

	if $G(ERRPLN(PLAN)) quit
 
	if '$D(PAY(PLAN)) do {
	 	new aoamo
	 	new TYPE,PAYEE
	
		set ER=0,TYPE="PTS",PAYEE=1

		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYPE,PAYEE,PLAN")
 
		if aoamo.dtran="" set ER=1,ET=$$^MSG("3825") do LOGERR quit
		if aoamo.dgl="" set ER=1,ET=$$^MSG("3824") do LOGERR quit
		if aoamo.dnagl="" set ER=1,ET=$$^MSG("3824") do LOGERR quit
		if aoamo.ctran="" set ER=1,ET=$$^MSG("3825") do LOGERR quit
		if aoamo.cgl="" set ER=1,ET=$$^MSG("3824") D LOGERR quit
		if aoamo.cnagl="" set ER=1,ET=$$^MSG("3824") D LOGERR quit
 
 		set DTC(PLAN)=aoamo.dtran
 		set DNAGL(PLAN)=aoamo.dnagl
 		set DGL(PLAN)=aoamo.dgl
 		if '$D(TRN(DTC(PLAN))) do {
 			new trn
 			type RecordTRN trn=Db.getRecord("TRN","DTC(PLAN)")
 			set DITC(PLAN)=trn.itc
  			}
 
 		set CTC(PLAN)=aoamo.ctran
 		set CNAGL(PLAN)=aoamo.cnagl
 		set CGL(PLAN)=aoamo.cgl
 		if '$D(TRN(CTC(PLAN))) do {
 			new trn
 			type RecordTRN trn=Db.getRecord("TRN","CTC(PLAN)")
 			set CITC(PLAN)=trn.itc
  			}
 
   		// ~p1 New Loans, Plan ~p2
 
 		set DESC(PLAN)=$$^MSG(4161,$$DAT^%ZM(EFD),PLAN)
		}
 
	if ER set ERRPLN(PLAN)=1 quit
 
 	// Net Fee Original Amount
 
	if 'lncycpts.amt set ER=1,ET=$$^MSG("3819") do LOGERR quit
	set AMT=lncycpts.amt
 
	type TranSet ts=Class.new("TranSet")
	type RecordTTX ttx()
  
	set trseq=0
 
 	// Post amount if positive
 
	if AMT>0 do {
 		new x
 		set trseq=trseq+1
 		set ttx(trseq)=Class.new("RecordTTX")
		set ttx(trseq).uid=%UserID
		set ttx(trseq).crcd=CRCD
		set ttx(trseq).cid=DNAGL(PLAN)
		set ttx(trseq).itc=DITC(PLAN)
		set ttx(trseq).etc=DTC(PLAN)
		set ttx(trseq).tamt=AMT
		set ttx(trseq).efd=EFD
		set ttx(trseq).tcmt="Net Fee "_CID
 
 		s x=ts.copyTran(ttx(trseq))
 		}
 
 	// Post neg amounts
 	if AMT<0 do {
 		new x
 		set trseq=trseq+1
 		set ttx(trseq)=Class.new("RecordTTX")
		set ttx(trseq).uid=%UserID
		set ttx(trseq).crcd=CRCD
		set ttx(trseq).cid=DNAGL(PLAN)
		set ttx(trseq).itc=CITC(PLAN)
		set ttx(trseq).etc=CTC(PLAN)
		set ttx(trseq).tamt=-AMT
		set ttx(trseq).efd=EFD
		set ttx(trseq).tcmt="Net Fee "_CID
 	
 		set x=ts.copyTran(ttx(trseq))
 		}
 
	// Build original amount offset 
 
	if AMT do {
 		new tmpbch
 		type RecordTMPBCHOFF tmpbch 
 	
 		set PTYPE="TOT"
 
		if 'Db.isDefined("TMPBCHOFF","TJD,BCHID,JOB,PTYPE,CRCD,TYPE,GLSC,CC") do TOTINI(CNAGL(PLAN),PTYPE)
 		
		set tmpbch=Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=PTYPE,CRCD=:CRCD,TYPE=:TYPE,GLSC=:GLSC,CC=:CC")
 		if AMT>0 set tmpbch.credit=tmpbch.credit+AMT
		if AMT<0 set tmpbch.debit=tmpbch.debit+(-AMT)
 		do tmpbch.bypassSave()
 		}
 
 	/*
 	Net Fee Amortized To Date
 
 	If loan is sold net deferred fee income recognized/posted in LNNFLS.
 	If loan is opened and sold on same day skip this section of code in
 	order to avoid double posting of net deferred fee income.
 	*/
 
	if ln.pflg do FILE(.ts) quit
 
	set CALTD=lncycpts.caltd
 
 	// Post amount if positive
 
	if CALTD>0 do {
 		new x
 		set trseq=trseq+1
 		set ttx(trseq)=Class.new("RecordTTX")
		set ttx(trseq).uid=%UserID
		set ttx(trseq).crcd=CRCD
		set ttx(trseq).cid=DGL(PLAN)
		set ttx(trseq).itc=DITC(PLAN)
		set ttx(trseq).etc=DTC(PLAN)
		set ttx(trseq).tamt=CALTD
		set ttx(trseq).efd=EFD
		set ttx(trseq).tcmt="Net Fee "_CID
 
 		set x=ts.copyTran(ttx(trseq))
 		}
 
 	// Post neg amounts
 
	if CALTD<0 do {
 		new x
	 	set trseq=trseq+1
 		set ttx(trseq)=Class.new("RecordTTX")
		set ttx(trseq).uid=%UserID
		set ttx(trseq).crcd=CRCD
		set ttx(trseq).cid=DGL(PLAN)
		set ttx(trseq).itc=CITC(PLAN)
		set ttx(trseq).etc=CTC(PLAN)
		set ttx(trseq).tamt=-CALTD
		set ttx(trseq).efd=EFD
		set ttx(trseq).tcmt="Net Fee "_CID
 
  		set x=ts.copyTran(ttx(trseq))
 		}
 
	if CALTD do {
 		new tmpbch
 	
 		type RecordTMPBCHOFF tmpbch 
 
 		set PTYPE="TOTTD"
  
 		if 'Db.isDefined("TMPBCHOFF","TJD,BCHID,JOB,PTYPE,CRCD,TYPE,GLSC,CC") do TOTINI(CNAGL(PLAN),PTYPE)
		set tmpbch=Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=PTYPE,CRCD=:CRCD,TYPE=:TYPE,GLSC=:GLSC,CC=:CC")
 		if CALTD>0 set tmpbch.credit=tmpbch.credit+CALTD
 		if CALTD<0 set tmpbch.debit=tmpbch.debit+(-CALTD)
 		do tmpbch.bypassSave()
 		}

	do FILE(.ts)
 
	quit
 
FILE(TranSet ts)	// File transaction set
  
	new par
	set par("IPMODE")=3
	set par("OPTION")=2
 
	do ts.postTSet(%SystemDate,BRCD,.par)
 
 	if $G(SING) do TOT
	quit
 
TOTINI(GL,PTYPE)  // Initialize TOT (G/L)
 
	N tmpbch
 
 	Type RecordTMPBCHOFF tmpbch=Class.new("RecordTMPBCHOFF")
 
 	set tmpbch.tjd=%SystemDate
 	set tmpbch.bchid=BCHID
 	set tmpbch.job=JOB
 	set tmpbch.desc=PTYPE
 	set tmpbch.crcd=CRCD
 	set tmpbch.type=TYPE
 	set tmpbch.glsc=GLSC
 	set tmpbch.cc=CC
 	set tmpbch.debit=0
 	set tmpbch.credit=0
 	set tmpbch.gldr=GL
 	set tmpbch.glcr=GL
 	set tmpbch.gldretc=DTC(PLAN)
 	set tmpbch.glcretc=CTC(PLAN)
 	set tmpbch.tcmt=DESC(PLAN)
 
 	D tmpbch.bypassSave()
 
 	Q
 
 	//--------------------------------------------------------------------
ZT 	// Log Mumps error
 	//--------------------------------------------------------------------
 
 	set %ZTHALT=0 D ZE^UTLERR
 
 	// System processing error
 
 	set ET=$$^MSG("2575")
 	D LOGERR
 	Q
 
 	//--------------------------------------------------------------------
LOGERR 	// Log error in exception file
 	// Net Deferred Fee (New Account) Item Posting
 	//--------------------------------------------------------------------
 
 	D LOG^UTLEXC($T(+0),"*",$$^MSG(7073)_"|1",$G(CID),$G(%ZTSEQ),$G(ET),$S($G(CID):+$G(BAL),1:""))
 	K ET,%ZTSEQ
 	Q
 
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,TJD,CLS,GRP,TYP,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set TJD=vRECORD.piece($C(9),1)
 set CLS=vRECORD.piece($C(9),2)
 set GRP=vRECORD.piece($C(9),3)
 set TYP=vRECORD.piece($C(9),4)
 set CID=vRECORD.piece($C(9),5)
 do vPROC(TJD,CLS,GRP,TYP,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,TJD,CLS,GRP,TYP,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+55>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,CLS,GRP,TYP,CID","DTJNA","TJD=:TJD AND DTJNA.CLS='L'")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set (ER,ET)=""
 
	do CRCD^TTXSUM
 
	do SOURCE^BCHSOURC("PTSNA","ALL",.%UserID,.BRCD,.%UserClass,.TSDRCID,.TSCRCID) 
 
	set SING=0
	set BCHID="BCHLNNFDE"
	set JOB=%ProcessID
	set TPD=%SystemDate
 
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	if '$D(%SystemDate) do {
		type RecordCUVAR cuvar=Db.getRecord("CUVAR")
		#ACCEPT PGM=SPIER;DATE=12/9/03
		set %SystemDate=cuvar.tjd
		}

	set BCHID="BCHLNNFDE"
	set CLS="L" 
	set (ER,ET)=""
	
	do CRCD^TTXSUM
 
	do SOURCE^BCHSOURC("PTSNA","ALL",.%UserID,.BRCD,.%UserClass,.TSDRCID,.TSCRCID) 

	if ER do LOGERR quit
 
	set STATUS=0 do ^TTXLOK if ER set:'$G(ET) ET="TTXLOK" do LOGERR quit
 
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 
TOT	//
 
	do OFFSET^TTXBLD(%SystemDate,BRCD,%UserID,BCHID)
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
