BCHLNRAC //Batch BCHLNRAC - Change P+I Payment At RAND date
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNRAC Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNRAC")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNRAC") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNRAC",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNRAC")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(RAND,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNRAC","*","",RAND.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNRAC",RAND.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNRAC",RAND.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,RAND,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNRAC","*","",RAND.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNRAC",RAND.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,RAND,CID) //
	do PROCESS

	quit

Public SING	//Single Loan Reset
	
	new SING,ERRM,HIST,FRE,ERR
	set SING=1
	if '$D(EFD) set EFD=%SystemDate
	set RAND=EFD
	
	do PROCESS
	if '$D(ERR) quit
	set ER=1
	set N="" for I=1:1 set N=$O(ERR(N)) quit:N=""  set RM(I)=ERR(N)
	quit


PROCESS	//	Process a single account


	new ln,lnrachg,quiterr,BAL
	set quiterr=0
	
	type RecordLN ln
	type RecordLNRACHG lnrachg

	set ln=Db.getRecord("LN","CID=:CID")

	// Account Closed - Account Not Reset
	if ln.stat=4 set ERR(1)=$$^MSG("4224")

	set BAL=ln.bal
	
	/*
	  Do not reprocess the account if the date of processing does not
	  match the date in the loan file.  This is a indicator that the
	  process has already run for this account. For this reason the
	  restart process indicator is turned off.
	*/
	if RAND'=ln.rand set RM=$$^MSG("4115"),ER=1 quit // Restarts

	// Account Has No Balance - Account Not Reset
	if 'ln.bal,'ln.stat set ERR(2)=$$^MSG("4010")

	set (PINC,PMTPI)=ln.pmtpi
	if 'ln.stat do { if quiterr quit
		set lnrachg=Db.getRecord("LNRACHG","EFD,CID")
 		set PINC=+lnrachg.npmt
		
		// Account Has No New Payment - Account Not Reset
		if 'PINC set ERR(5)=$$^MSG("4225") do ERR set quiterr=1
		}

	set RAND=ln.rand
	
	if ln.pchld'=RAND set ln.pmtpi=PINC
	
	// Bump dates for Re-amortization 

	set JD=RAND,FRE=ln.rafre
	set ln.rald=JD
	if '$L(FRE) set ln.rand=""
	else  do {
		do ^UFRE 

		// Invalid Next Reamortization Date
		if ER set ERR(3)=$$^MSG("4226") quit
		else  set ln.rand=NJD
		}
	
	// Set up History Record for changes
	if $D(ERR) do ERR quit
	
	
	if '(ln.stat!(ln.pchld=RAND)) do {
	
		set histtcmt="[LN]PMTPI:"_PMTPI_":"_PINC
		set dtjcmt="[LN]PMTPI:"_PMTPI_":"_PINC
		do HISTFILE(.ln,histcmt,dtjcmt)

		set histtcmt="[LN]PINC:"_PINC_":"
		set dtjcmt="[LN]PINC:"_PINC_":"
		do HISTFILE(.ln,histcmt,dtjcmt)
		}

	
	//
	set histtcmt="[LN]RAND:"_RAND_":"_ln.rand
	set dtjcmt="[LN]RAND:"_RAND_":"_ln.rand
	do HISTFILE(.ln,histcmt,dtjcmt)
	
FILE	//
	do ln.bypassSave()
	new dayrand
	
	type RecordDAYENDRAND dayrand
	set dayrand=Db.getRecord("DAYENDRAND","RAND,CID")
	set dayrand.pmtpi=PMTPI
	do dayrand.bypassSave()
	
	
	// File next Dayend entries based upon next date 
	if 'ln.rand quit

	new dayrand2
	type RecordDAYENDRAND dayrand2

	set dayrand2=Class.new("RecordDAYENDRAND")
	set dayrand2.rand=ln.rand
	set dayrand2.cid=CID
	do dayrand2.bypassSave()

	quit
	
HISTFILE(RecordLN ln,histcmt,dtjcmt)	//
	new hist,dtjfm
	type RecordHIST hist
	type RecordDTJFM dtjfm
	set hist=Class.new("RecordHIST")
	set dtjfm=Class.new("RecordDTJFM")
	set hist.cid=CID
	set hist.tjd=%SystemDate
	set hist.tlo=%UserStation
	set hist.cdt=%CurrentDate
	set hist.time=%CurrentTime
	set hist.uid=%UserID
	set hist.tcmt=histtcmt
	set hist.tseq=Db.nextVal("HIST","CID")
	set dtjfm.tjd=%SystemDate
	set dtjfm.grp=ln.grp
	set dtjfm.typ=ln.type
	set dtjfm.cid=CID
	set dtjfm.tseq=hist.tseq
	set dtjfm.tlo=%UserStation
	set dtjfm.cdt=%CurrentDate
	set dtjfm.time=%CurrentTime
	set dtjfm.uid=%UserID
	set dtjfm.cc=ln.cc
	set dtjfm.tcmt=dtjcmt
	do hist.bypassSave()
	do dtjfm.bypassSave()
	quit

ERR	// Error handling

	
	if SING quit
	set N="",ER=0
	for  set N=$O(ERR(N)) quit:N=""  set ET=ERR(N) do LOGERR
	kill ERR
	quit
	
	
LOGERR	// Log error in exception file
	do LOG^UTLEXC($T(+0),"*","Variable Payment Loan Reamortization Date Reset|1",$G(CID),$G(%ZTSEQ),$G(ET),$G(BAL))
	kill ET,%ZTSEQ
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,RAND,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set RAND=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(RAND,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,RAND,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+26>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("RAND,CID","DAYENDRAND","DAYENDRAND.RAND=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set EFD=%SystemDate
	
	set %UID="BATCH"
	set SING=""

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
