BCHLNRPO //Batch BCHLNRPOST - Provision Posting
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNRPOST Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHLNRPOST",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(PROVNPDT,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNRPOST","*","",PROVNPDT.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,PROVNPDT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNRPOST","*","",PROVNPDT.get()_","_CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,PROVNPDT,CID) //
	type public Number CID
	type public String utblacc(,)

	type Number ER = 0

	do EXEC1(CID,10)
	
	if ER.get() do EXC quit

	quit
	

public	EXEC1(CID,CTL)	// Process one account

	/*
	ARGUMENTS:
		
		. CID	Account Number		TYPE=N|REQ|MECH=VAL
	
			Profile/IBS Account Number
	
	       . CTL	Control Variable	|TYPE=N|NOREQ|MECH=VAL
	
			Control Variable
			Position 1: 0 - do not file to disk (update LN array
					FSN, and TR array if applicable)
				    1 - file to disk (^ACN, ^TTX and other
					supporting files
	
			Position 2: 0 - Do not init "run" variables
				    1 - Init "run" variables.  These are
					variables that need to be defined
					prior to processing an account,
					such as %UID and BRCD.  A call
					into EXEC from an external source
					would be a candidate for passing
					this control parameter.
	
	*/
	
	new ACN,BL,CC,CLS,GLACN,GLSC,CRCD,dayendrp,TYPE,UX
	if '$E(CTL,2) do DAYEND

	// Initialize account
	
	new acn
	type RecordACN acn
	set acn=Db.getRecord("ACN","CID")
 
	set CLS=acn.cls		 	// Product Class
	set TYPE=acn.type	       	// Product Type
	set CC=acn.cc		   	// Cost Center
	set CRCD=acn.crcd	       	// Currency Code
	set GLSC=acn.glsc	       	// General Ledger Set Code
	
	// Account is closed and no provision is scheduled
	
	if acn.stat=4,'PROVBAL quit

	// Account is closed and a provision is scheduled
	
	if acn.stat=4,PROVBAL do {
		set ACLS=""
		set PROVADJ=-acn.provbal 	// Provision Balance
	}
	
	/* 
	Account has changed Asset Classification.
	Debit G/L for the old provcaatory principal provision balance and 
	Credit new principal provision balance with the provision amount. 
	Modification to not debit and credit expense when the provision
	category changes. 
	*/

	if acn.provcat'=ACLS do {
		new TAMT,GLCR,OVACLS,RAC
		set OVACLS=acn.provcat
		set acn.provcat=ACLS		// update acn.provcat
		if (ACLS="")!(OVACLS="") quit

		/*
		Post DEBIT of PROVBAL to Principal Provision G/L 
		of previous provision category
		*/
	
		set TAMT=acn.provbal
		set GLDR=$P(utblacc(CLS,OVACLS),"|",1)
		if GLDR="" set GLDR=$$GLACN("PROVPGL",GLSC,OVACLS)
		do GL(0,OVACLS_CLS,GLDR)
		
		/*
		Post Credit of +PROVBAL to Principal Provision G/L 
		of new provision category
		*/

		set GLCR=$P(utblacc(CLS,OVACLS),"|",1)
		if GLCR="" set GLCR=$$GLACN("PROVPGL",GLSC,ACLS)
		do GL(1,ACLS_CLS,GLCR)
		}
	
	if PROVADJ do PROVADJ(.acn)		// Provision adjustment
	
	/*
	Provision expiration date has changed, create UX array to file changes.
	*/

	// update acn.provexpd
	if PROVEXPD'=acn.provexpd set acn.provexpd=PROVEXPD 
		

	/*
	If override flag is on and CALACLS (provision asset calculated class)
	contains a value do nothing. But if the override flag is on and CALACLS
	does not contain a value, set CALACLS to the value in OVACLS (current 
	provision category). 
	 
	If override flag is not on and CALACLS contains a value, 
	then set CALACLS to null. The value in OVACLS (current provision 
	category) will be the calculated class no need to further save 
	in CALACLS.
	*/

	// Provision Calculated Asset Class
	if PROVRFLG,'acn.calacls set acn.calacls=OVACLS   
		
	if 'PROVRFLG,acn.calacls set acn.calacls=""
		

	// File account changes
	
	if CLS="D" do {
		new dep
		type RecordDEP dep
		set dep=Db.getRecord("DEP","CID") 
		do dep.setAuditFlag(1)
		set dep.provcat=acn.provcat
		set dep.provexpd=acn.provexpd
		set dep.calacls=acn.calacls	
		set dep.provbal=acn.provbal
		do dep.save()
		}

	if CLS="L" do {
		new ln
		type RecordLN ln
		set ln=Db.getRecord("LN","CID")
		do ln.setAuditFlag(1)
		set ln.provcat=acn.provcat
		set ln.provexpd=acn.provexpd
		set ln.calacls=acn.calacls
       		set ln.provbal=acn.provbal
		do ln.save()
		}

	quit
	
PROVADJ(RecordACN acn)	// 
	
	/*
	Provision balance has changed, update the account 
	and credit the G/L account.
	*/
	
	new OPROVBAL,TAMT,GLCR,GLDR,RAC
	set OPROVBAL=acn.provbal
	set acn.provbal=OPROVBAL+PROVADJ
	set TAMT=PROVADJ		   	// Credit amount for G/L
	set RAC=$S(ACLS'="":ACLS,1:OVACLS)
	
	// Credit Principal provision
	
	set GLCR=$P(utblacc(CLS,RAC),"|",1)

	if GLCR="" set GLCR=$$GLACN("PROVPGL",GLSC,RAC)
	do GL(1,RAC_CLS,GLCR)		  	// Credit G/L
	
	// Debit Income or Expense
	
	if $E(TAMT)="-" do {
		set GLDR=$P(utblacc(CLS,RAC),"|",6)
		if GLDR="" set GLDR=$$GLACN("PROVIGL",GLSC,RAC)
		}
	else  do {				// Expense
		set GLDR=$P(utblacc(CLS,RAC),"|",2)	
   		if GLDR="" set GLDR=$$GLACN("PROVEGL",GLSC,RAC)
		}

	do GL(0,RAC_CLS,GLDR)			// Debit G/L

	quit

	
public	INIUTBL	// Init array utblcc(CLS,AC)

	/*
	
	Initialize utblacc(cls,ac) array:
	Position in UTBLACC		   Description
	1	3		crgl - 	   Principal Provision General Ledger
	2	4		drgl -     Provision Loss Expense General Ledger 
	3	5		provpct -  Provision Percentage
	4	6		darcexp -  Asset Reclassification Expiration Period
	5	25		rfeedq -   Reclassification Fee Calculation
	6	36		provigl -  Provision Income General Ledger
	7	37		provext -  Provision Balance Extrinsic
	8	38		provcalc - Provision Balance Calculation
	9	1*		cls - 	   Product Class
	10	2*		ac - 	   Asset Class
	11	2		provqry -  Provision Query

	*/

	type public String utblacc(,)

	type ResultSet rs = Db.select("CRGL,DRGL,PROVPCT,DARCEXP,RFEEDQ,PROVIGL,PROVEXT,PROVCALC,CLS,AC,PROVQRY", "UTBLACC")
	
	while rs.next() do {
		set utblacc(rs.getCol(9),rs.getCol(10)) = rs.getCol(1)_"|"_rs.getCol(2)_"|"_rs.getCol(3)_"|"_rs.getCol(4)_"|"_rs.getCol(5)_"|"_rs.getCol(6)_"|"_rs.getCol(7)_"|"_rs.getCol(8)_"|"_rs.getCol(11)
		}
		
	quit


GL(DC,RAC,GL)	// Update temporary storage for batch offsets table

	type public Number CC, TAMT
	type public String CRCD, GLSC, TYPE
	
	if 'TAMT quit

	type Number JOB
	type String BCHID, OFFDESC, TYPE

	set OFFDESC = "GL"
	set BCHID = "LNRPOST"
	set JOB = %ProcessID
	set TYPE = RAC_GL_DC
	
	type RecordTMPBCHOFF tmpbch = Db.getRecord("TMPBCHOFF","TJD=:%SystemDate,BCHID=:BCHID,JOB=:JOB,DESC=:OFFDESC,CRCD=:CRCD,TYPE=:TYPE,GLSC=:GLSC,CC=:CC", 1)

	if 'tmpbch.getMode() do {
		
		set tmpbch.debit = 0
		set tmpbch.credit = 0
		set tmpbch.gldr = GL
		set tmpbch.glcr = GL
		set tmpbch.gldretc = "MDR"
		set tmpbch.glcretc = "MCR"
		// Provision process for asset classification ~p1
		set tmpbch.tcmt = $$^MSG("8716",RAC)
		}
	
	if DC set tmpbch.credit = tmpbch.credit + TAMT
	else  set tmpbch.debit = tmpbch.debit + TAMT

	do tmpbch.bypassSave()

	quit


DAYEND	// define array dayendrp and the fields needed to process

	type public Boolean PROVRFLG
	type public Date PROVEXPD, PROVNPDT
	type public Number ACLS, CID, OVACLS, PROVADJ, PROVBAL, PROVPCT
	type public String COLOFF, SAVUID, UID


	type RecordDAYENDLNRP dayendlnrp = Db.getRecord("DAYENDLNRP", "PROVNPDT = :PROVNPDT, CID = :CID", 1)

	set %UserID = SAVUID
	set ACLS = dayendlnrp.acls		// Asset Classification
	set PROVADJ = dayendlnrp.provadj	// Provision Adjustment
	set PROVBAL = dayendlnrp.provbal	// Provision Balance
	set COLOFF = dayendlnrp.coloff		// Collection Office
	set PROVPCT = dayendlnrp.provpct	// Provision Percentage
	set UID = dayendlnrp.uid		// User ID (last modified by)
	set OVACLS = dayendlnrp.ovacls		// Asset Classification Old Value
	set PROVEXPD = dayendlnrp.provexpd	// Provision Expiration Date
	set PROVRFLG = dayendlnrp.provrflg	// Provision Category Override

	if (UID '= %UserID) set %UserID = UID
	
	quit


EXC	// Log error to DAYEND

	do LOG^UTLEXC($T(+0),"*",$G(RM),$G(CID),$G(%ZTSEQ),$G(RM))
	kill ET,%ZTSEQ
	
	set ER=0
	quit


public	GLACN(String ELE,		// Item to be reclassified
	     String GLSC,		// General Ledger Set Code
	       Number AC)		// Asset Classification
	
	/*
	  General ledger account for item in [UTBLGLSCR]. If not found
	  in [UTBLGLSCR] the teller suspense account will be used.
	*/

	type public Number GLSCR(,,)

	type String GLACN
	
	if 'GLSCR(ELE,GLSC,AC).get().isNull() quit GLSCR(ELE,GLSC,AC)
		
	set GLACN = $$^UTLGLSC(GLSC,ELE,"UTBLGLSCR",AC)
	
	set GLSCR(ELE,GLSC,AC) = GLACN

	quit GLACN

	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,PROVNPDT,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set PROVNPDT=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(PROVNPDT,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,PROVNPDT,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	#OPTIMIZE OBJECTS OFF

	type public Date PROVRCDT, PROVNPDT, XTJD
	type public Number ER
	
	type Number BRCD
	type String %UserID, %UserClass
	
	do SOURCE^BCHSOURC("BOFF","PROV",.%UserID,.BRCD,.%UserClass)
	
	if ER set %BatchExit = 1 quit

	set XTJD = %SystemDate

	type RecordCUVAR cuvar = Db.getRecord("CUVAR")

	set PROVNPDT = cuvar.provnpdt  	// Loan provision next posting date
	set PROVRCDT = cuvar.provrcdt  	// Loan provision regeneration calc date

      	/*  
	If the regeneration calc date equals today, create the DAYENDLNRP file
	for the regeneration post date. If the regeneration calculation date
	and the regeneration posting date equal today's date, set the
	offset period to null so LNRPOST will be called to post the file.
	*/
      
	if (PROVRCDT = %SystemDate),(PROVNPDT '= %SystemDate) set PROVNPDT = cuvar.provrpdt 
	
	if (PROVNPDT '= %SystemDate) set %BatchExit = 1 quit
	
	type ResultSet rs = Db.select("CID", "DAYENDLNRP", "PROVNPDT = :PROVNPDT")

	if rs.isEmpty() do { quit
		
		do BUMP
		
		set %BatchExit = 1 
		}


 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("PROVNPDT,CID","DAYENDLNRP","DAYENDLNRP.PROVNPDT=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Date PROVNPDT
	type public Number BRCD
	type public String SAVUID, utblacc(,)

	do SOURCE^BCHSOURC("BOFF","PROV",.%UserID,.BRCD,.%UserClass)

	set SAVUID = %UserID

	do INIUTBL			// Initialize utblacc array
	
	type RecordCUVAR cuvar = Db.getRecord("CUVAR")

	set PROVNPDT = cuvar.provnpdt	// Loan provision next posting date
 
	if (cuvar.provrcdt = %SystemDate),(PROVNPDT '= %SystemDate) set PROVNPDT = cuvar.provrpdt


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type public Date PROVRCDT, PROVNPDT

	type RecordCUVAR cuvar = Db.getRecord("CUVAR")

	set PROVNPDT = cuvar.provnpdt  	// Loan provision next posting date
	set PROVRCDT = cuvar.provrcdt  	// Loan provision regeneration calc date
 
	if (PROVRCDT = %SystemDate),(PROVNPDT '= %SystemDate) set PROVNPDT = cuvar.provrpdt


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
public	FILE	// 

	/*
	File G/L changes to disk
	Update the G/L, set DAYEND file to completed and update dates in
	CUVAR("LN").
	*/

	type Number BRCD
	type String %UserID, %UserClass

	do SOURCE^BCHSOURC("BOFF","PROV",.%UserID,.BRCD,.%UserClass)

	do OFFSET^TTXBLD(%SystemDate,BRCD,%UserID,"LNRPOST")
	
	do BUMP
	
	quit
	

BUMP	// Bump the next and last dates
	
	type public Date PROVNPDT
	type public Number ER

	type RecordCUVAR cuvar = Db.getRecord("CUVAR")

	if (PROVNPDT > %SystemDate) quit			
	
	set cuvar.provlpdt = PROVNPDT	// Last posting Date
	
	set PROVNPDT = %SystemDate.nextFreqDate(cuvar.provfreq) if ER do EXC quit
	
	set cuvar.provnpdt = PROVNPDT	// Next posting Date
	
	do cuvar.bypassSave()	
		
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
