V00S162(%ProcessMode,RecordEFTFEE fEFTFEE)   // -  - SID= <EFTFEE> Electronic Payment Fee Screen
 ;;Copyright(c)2006 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/24/2006 11:17 - kini
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="EFTFEE",VPGM=$T(+0),VSNAME="Electronic Payment Fee Screen"
 set VFSN("EFTFEE")="zfEFTFEE"
 set vPSL=1
 set KEYS(1)=fEFTFEE.CODE
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fEFTFEE),VDA1(.fEFTFEE),^DBSPNT()

 if '%ProcessMode do VNEW(.fEFTFEE),VPR(.fEFTFEE),VDA1(.fEFTFEE)
 if %ProcessMode do VLOD(.fEFTFEE) quit:$G(ER)  do VPR(.fEFTFEE),VDA1(.fEFTFEE)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fEFTFEE)
	quit


VNEW(RecordEFTFEE fEFTFEE) // Initialize arrays if %O=0
 
 do VDEF(.fEFTFEE)
 do VLOD(.fEFTFEE)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordEFTFEE fEFTFEE)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordEFTFEE fEFTFEE) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordEFTFEE fEFTFEE) // Display screen prompts
 set VO="20||13|"
 set VO(0)="|0"
 set VO(1)=$C(3,27,6,1,0,0,0,0,0,0)_"01T Code:"
 set VO(2)=$C(4,20,13,1,0,0,0,0,0,0)_"01T Description:"
 set VO(3)=$C(6,7,26,1,0,0,0,0,0,0)_"01T Resident Fee G/L Account:"
 set VO(4)=$C(6,48,16,0,0,0,0,0,0,0)_"01TConstant Symbol:"
 set VO(5)=$C(7,3,30,1,0,0,0,0,0,0)_"01T Non-Resident Fee G/L Account:"
 set VO(6)=$C(8,11,22,1,0,0,0,0,0,0)_"01T Fee Transaction Code:"
 set VO(7)=$C(9,12,21,1,0,0,0,0,0,0)_"01T Fee Currency Option:"
 set VO(8)=$C(11,20,13,0,0,0,0,0,0,0)_"01TFixed Amount:"
 set VO(9)=$C(12,22,11,0,0,0,0,0,0,0)_"01TPercentage:"
 set VO(10)=$C(14,18,15,0,0,0,0,0,0,0)_"01TMinimum Amount:"
 set VO(11)=$C(14,49,15,0,0,0,0,0,0,0)_"01TMinimum Option:"
 set VO(12)=$C(15,18,15,0,0,0,0,0,0,0)_"01TMaximum Amount:"
 set VO(13)=$C(17,29,22,1,0,0,0,0,0,0)_"01T Splitting of the Fee "
 set VO(14)=$C(19,8,25,0,0,0,0,0,0,0)_"01TBranch of Pmt Percentage:"
 set VO(15)=$C(20,8,25,0,0,0,0,0,0,0)_"01TCost Center 1 Percentage:"
 set VO(16)=$C(20,50,14,0,0,0,0,0,0,0)_"01TCost Center 1:"
 set VO(17)=$C(21,8,25,0,0,0,0,0,0,0)_"01TCost Center 2 Percentage:"
 set VO(18)=$C(21,50,14,0,0,0,0,0,0,0)_"01TCost Center 2:"
 set VO(19)=$C(22,8,25,0,0,0,0,0,0,0)_"01TCost Center 3 Percentage:"
 set VO(20)=$C(22,50,14,0,0,0,0,0,0,0)_"01TCost Center 3:"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordEFTFEE fEFTFEE)  // Display screen data
 new V
 //
 set VO="40|21|13|"
 set VO(21)=$C(1,1,80,1,0,0,0,0,0,0)_"01T"_$S(%ProcessMode=5:"",1:$$BANNER^DBSGETID($G(%FN)))
 set VO(22)=$C(3,34,12,2,0,0,0,0,0,0)_"01T"_$E(fEFTFEE.CODE,1,12)
 set VO(23)=$C(4,34,40,2,0,0,0,0,0,0)_"00T"_$E(fEFTFEE.DESC,1,40)
 set VO(24)=$C(6,34,12,2,0,0,0,0,0,0)_"00N"_fEFTFEE.FEEGL
 set VO(25)=$C(6,65,12,2,0,0,0,0,0,0)_"00T"_$E(fEFTFEE.CONSTANT,1,12)
 set VO(26)=$C(7,34,12,2,0,0,0,0,0,0)_"00N"_fEFTFEE.FEEGLNR
 set VO(27)=$C(8,34,12,2,0,0,0,0,0,0)_"00T"_$E(fEFTFEE.ETCCR,1,12)
 set VO(28)=$C(9,34,3,2,0,0,0,0,0,0)_"00N"_fEFTFEE.FEECYOPT
 set V=$S(fEFTFEE.AMTFIX="":"",1:$J(fEFTFEE.AMTFIX,0,2)) set VO(29)=$C(11,34,12,2,0,0,0,0,0,0)_"00$"_$S(fEFTFEE.AMTFIX="":"",1:$J(fEFTFEE.AMTFIX,0,2))
 set V=$S(fEFTFEE.PERCENT="":"",1:$J(fEFTFEE.PERCENT,0,5)) set VO(30)=$C(12,34,12,2,0,0,0,0,0,0)_"00N"_$S(fEFTFEE.PERCENT="":"",1:$J(fEFTFEE.PERCENT,0,5))
 set V=$S(fEFTFEE.AMTMIN="":"",1:$J(fEFTFEE.AMTMIN,0,2)) set VO(31)=$C(14,34,12,2,0,0,0,0,0,0)_"00$"_$S(fEFTFEE.AMTMIN="":"",1:$J(fEFTFEE.AMTMIN,0,2))
 set VO(32)=$C(14,65,3,2,0,0,0,0,0,0)_"00N"_fEFTFEE.MINOPT
 set V=$S(fEFTFEE.AMTMAX="":"",1:$J(fEFTFEE.AMTMAX,0,2)) set VO(33)=$C(15,34,12,2,0,0,0,0,0,0)_"00$"_$S(fEFTFEE.AMTMAX="":"",1:$J(fEFTFEE.AMTMAX,0,2))
 set VO(34)=$C(19,34,12,2,0,0,0,0,0,0)_"00N"_fEFTFEE.PCTBRCD
 set VO(35)=$C(20,34,12,2,0,0,0,0,0,0)_"00N"_fEFTFEE.PCTCC1
 set VO(36)=$C(20,65,6,2,0,0,0,0,0,0)_"00N"_fEFTFEE.CC1
 set VO(37)=$C(21,34,12,2,0,0,0,0,0,0)_"00N"_fEFTFEE.PCTCC2
 set VO(38)=$C(21,65,6,2,0,0,0,0,0,0)_"00N"_fEFTFEE.CC2
 set VO(39)=$C(22,34,12,2,0,0,0,0,0,0)_"00N"_fEFTFEE.PCTCC3
 set VO(40)=$C(22,65,6,2,0,0,0,0,0,0)_"00N"_fEFTFEE.CC3
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordEFTFEE fEFTFEE)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=19,VPT=1,VPB=22,PGM=$T(+0),DLIB="SYSDEV",DFID="EFTFEE"
 set OLNTB=22065
 
 set VFSN("EFTFEE")="zfEFTFEE"
 //
 // 
	
	
 set %TAB(1)=$C(2,33,12)_"21T12401|1|[EFTFEE]CODE"
 set %TAB(2)=$C(3,33,40)_"01T12401|1|[EFTFEE]DESC"
 set %TAB(3)=$C(5,33,12)_"01N12402|1|[EFTFEE]FEEGL|[GLAD]"
 set %TAB(4)=$C(5,64,12)_"00T12419|1|[EFTFEE]CONSTANT"
 set %TAB(5)=$C(6,33,12)_"01N12409|1|[EFTFEE]FEEGLNR|[GLAD]"
 set %TAB(6)=$C(7,33,12)_"01T12410|1|[EFTFEE]ETCCR|[TRN]||do VP1^V00S162(.fEFTFEE)"
 set %TAB(7)=$C(8,33,3)_"01N12403|1|[EFTFEE]FEECYOPT|[STBLCRCDOPT2]"
 set %TAB(8)=$C(10,33,12)_"00$12404|1|[EFTFEE]AMTFIX|||||||2"
 set %TAB(9)=$C(11,33,12)_"00N12405|1|[EFTFEE]PERCENT|||do VP2^V00S162(.fEFTFEE)||||5"
 set %TAB(10)=$C(13,33,12)_"00$12406|1|[EFTFEE]AMTMIN|||||||2"
 set %TAB(11)=$C(13,64,3)_"00N12407|1|[EFTFEE]MINOPT|[STBLMOPT]"
 set %TAB(12)=$C(14,33,12)_"00$12408|1|[EFTFEE]AMTMAX|||||||2"
 set %TAB(13)=$C(18,33,12)_"00N12415|1|[EFTFEE]PCTBRCD|||do VP3^V00S162(.fEFTFEE)"
 set %TAB(14)=$C(19,33,12)_"00N12416|1|[EFTFEE]PCTCC1|||do VP4^V00S162(.fEFTFEE)"
 set %TAB(15)=$C(19,64,6)_"00N12412|1|[EFTFEE]CC1|[UTBLCCNTR]||do VP5^V00S162(.fEFTFEE)"
 set %TAB(16)=$C(20,33,12)_"00N12417|1|[EFTFEE]PCTCC2|||do VP6^V00S162(.fEFTFEE)"
 set %TAB(17)=$C(20,64,6)_"00N12413|1|[EFTFEE]CC2|[UTBLCCNTR]||do VP7^V00S162(.fEFTFEE)"
 set %TAB(18)=$C(21,33,12)_"00N12418|1|[EFTFEE]PCTCC3|||do VP8^V00S162(.fEFTFEE)"
 set %TAB(19)=$C(21,64,6)_"00N12414|1|[EFTFEE]CC3|[UTBLCCNTR]||do VP9^V00S162(.fEFTFEE)"
 do VTBL(.fEFTFEE)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordEFTFEE fEFTFEE) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */

 if 'Db.isDefined("TRN","ETC=:X") quit

 type RecordTRN trn=Db.getRecord("TRN","ETC=:X")
 
 // Tran code must be a miscellaneous credit, even if its a custom tran code.
 if trn.dc=0 do Runtime.setErrMSG("TRN",2695) quit

 // Must be  miscellaneous transaction code
 if trn.cls'="M" do Runtime.setErrMSG("TRN",1813) quit

 quit
VP2(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */

 type Public String X

 // Fixed Amount or Percentage must be entered
 if (fEFTFEE.amtfix=""),(X="") do Runtime.setErrMSG("EFTFEE",7705) quit

 // Both Fixed Amount and Percentage not allowed
 if (fEFTFEE.amtfix'=""),(X'="") do Runtime.setErrMSG("EFTFEE",8430) quit

 quit
VP3(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */

 type Public Number X

 type Number TOTAL

 set TOTAL=X+fEFTFEE.pctcc1+fEFTFEE.pctcc2+fEFTFEE.pctcc3

 // Sum of percentage allocations exceeds 100%
 if TOTAL>100 do Runtime.setErrMSG("EFTFEE",2565) quit

 quit
VP4(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */
 
 type Public Number X
 
 type Number TOTAL
 
 set TOTAL=X+fEFTFEE.pctbrcd+fEFTFEE.pctcc2+fEFTFEE.pctcc3
 
 // Sum of percentage allocations exceeds 100%
 if TOTAL>100 do Runtime.setErrMSG("EFTFEE",2565) quit
 
 quit
VP5(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */
 
 type Public Number X

 // Must enter cost center for ~p1
 if X="",fEFTFEE.PCTCC1'="" do Runtime.setErrMSG("EFTFEE",3599,"[EFTFEE]CC1") quit

 if X="" quit

 // Invalid percentage 
 if fEFTFEE.PCTCC1="" do Runtime.setErrMSG("EFTFEE",5324) quit

 quit 
VP6(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */
 
 type Public Number X
 
 type Number TOTAL
 
 set TOTAL=X+fEFTFEE.pctbrcd+fEFTFEE.pctcc1+fEFTFEE.pctcc3
 
 // Sum of percentage allocations exceeds 100%
 if TOTAL>100 do Runtime.setErrMSG("EFTFEE",2565) quit
 
 quit
VP7(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */
 
 type Public Number X

 // Must enter cost center for ~p1
 if X="",fEFTFEE.pctcc2'="" do Runtime.setErrMSG("EFTFEE",3599,"[EFTFEE]CC2") quit

 if X="" quit 

 // Invalid percentage
 if fEFTFEE.pctcc2="" do Runtime.setErrMSG("EFTFEE",5324) quit

 // Cost center previously allocated
 if (X=fEFTFEE.cc1) do Runtime.setErrMSG("EFTFEE",3603) quit

 quit
VP8(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */
 
 type Public Number X
 
 type Number TOTAL
 
 set TOTAL=X+fEFTFEE.pctbrcd+fEFTFEE.pctcc1+fEFTFEE.pctcc2
 
 // Sum of percentage allocations exceeds 100%
 if TOTAL>100 do Runtime.setErrMSG("EFTFEE",2565) quit
 
 quit
VP9(RecordEFTFEE fEFTFEE) //
 /*
   ---- Revision History--------------------------------------------------
 
        08/02/04 - KELLYP - CR 11405
                Converted to PSL.
 
   -----------------------------------------------------------------------
 */
 
 type Public Number X

 // Must enter cost center for ~p1
 if X="",fEFTFEE.pctcc3'="" do Runtime.setErrMSG("EFTFEE",3599,"[EFTFEE]CC3") quit

 if X="" quit 
 
 // Invalid percentage 
 if fEFTFEE.pctcc3="" do Runtime.setErrMSG("EFTFEE",5324) quit

 // Cost center previously allocated 
 if (X=fEFTFEE.cc1)!(X=fEFTFEE.cc2) do Runtime.setErrMSG("EFTFEE",3603) quit

 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordEFTFEE fEFTFEE
 do VPR(.fEFTFEE)
 do VDA1(.fEFTFEE)
 do ^DBSPNT()
 quit

VW(RecordEFTFEE fEFTFEE)
 do VDA1(.fEFTFEE)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordEFTFEE fEFTFEE)
 do VDA1(.fEFTFEE)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordEFTFEE fEFTFEE
 do VDA1(.fEFTFEE)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordEFTFEE fEFTFEE
 if sn="EFTFEE" do vSET1(.fEFTFEE,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordEFTFEE fEFTFEE,di,X)
 do fEFTFEE.setAuditFlag(1)
 set fEFTFEE.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordEFTFEE fEFTFEE
 if fid="EFTFEE" quit $$vREAD1(.fEFTFEE,di)
 quit ""
vREAD1(RecordEFTFEE fEFTFEE,di)
 quit fEFTFEE.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
