LNAPSHFL(RecordLNAP1SCH lnap1sch, String vpar, Boolean vparNorm) // LNAP1SCH - Loan Application Irregular Payment Sched Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnap1sch.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnap1sch,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnap1sch,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("APPS").exists()!vx("APPNUM").exists()!vx("SPD").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNAP1SCH",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNAP1SCH","ACN = :lnap1sch.acn and APPS = :lnap1sch.apps and APPNUM = :lnap1sch.appnum and SPD = :lnap1sch.spd") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String APPS
	type public String APPNUM
	type public String SPD

	type RecordLNAP1SCH lnap1sch = Db.getRecord("LNAP1SCH","ACN=:ACN,APPS=:APPS,APPNUM=:APPNUM,SPD=:SPD")
	if (%ProcessMode = 2) do {
		do lnap1sch.setMode(2)

		do LNAPSHFL(lnap1sch,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNAP1SCH lnap1sch

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNAP1SCH","ACN = :lnap1sch.acn and APPS = :lnap1sch.apps and APPNUM = :lnap1sch.appnum and SPD = :lnap1sch.spd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnap1sch))  S ^LNAP1SCH(vobj(lnap1sch,-3),vobj(lnap1sch,-4),vobj(lnap1sch,-5),vobj(lnap1sch,-6))=vobj(lnap1sch)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnap1sch)            // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNAP1SCH lnap1sch

	if vpar["/JOURNAL/" do VJOURNAL(.lnap1sch)             // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^LNAP1SCH(vobj(lnap1sch,-3),vobj(lnap1sch,-4),vobj(lnap1sch,-5),vobj(lnap1sch,-6)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordLNAP1SCH lnap1sch

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNAP1SCH lnap1sch

	if lnap1sch.acn.isNull() do vreqerr("ACN") quit
	if lnap1sch.apps.isNull() do vreqerr("APPS") quit
	if lnap1sch.appnum.isNull() do vreqerr("APPNUM") quit
	if lnap1sch.spd.isNull() do vreqerr("SPD") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAP1SCH","MSG",1767,"LNAP1SCH."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNAP1SCH lnap1sch
	if 'lnap1sch.acn.isNull() set vfkey("^CIF("_""""_lnap1sch.acn_""""_","_1_")")="LNAP1SCH(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNAP1SCH lnap1sch
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":lnap1sch.acn") set vERRMSG = $$^MSG(8563,"LNAP1SCH(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNAP1SCH lnap1sch

	set X = lnap1sch.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = lnap1sch.apps if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("APPS", vRM) quit
	set X = lnap1sch.appnum if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("APPNUM", vRM) quit
	set X = lnap1sch.spd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SPD", vRM) quit
	set X = lnap1sch.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNAP1SCH.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNAP1SCH","MSG",979,"LNAP1SCH."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNAP1SCH lnap1sch)	//LNAP1SCH Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.lnap1sch)	// Mode=I Tran=B EFD=N Seq=1 JRNID=LNAP1SCH_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.lnap1sch)	// Mode=I Tran=O EFD=N Seq=1 JRNID=LNAP1SCH_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.lnap1sch)	// Mode=U Tran=B EFD=N Seq=1 JRNID=LNAP1SCH_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.lnap1sch)	// Mode=U Tran=O EFD=N Seq=1 JRNID=LNAP1SCH_U
				}
			}
		}

	quit


vj1(RecordLNAP1SCH lnap1sch)	// LNAP1SCH_I  Table LNAP1HIST  Loan Appl Bulk Repayment (New)

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,vlastkey
	set v1=lnap1sch.acn
	set v2=lnap1sch.apps
	set v3=lnap1sch.appnum
	set vlastkey=Db.nextVal("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3")
	type RecordLNAP1HIST lnap1hist=Db.getRecord("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3,TSEQ=:vlastkey",1)
	set lnap1hist.cdt=+$H
	set lnap1hist.ctime=$P($H,",",2)
	set lnap1hist.spd=TJD
	set lnap1hist.tcmt=$$^MSG(301,"LNAP1SCH")
	set lnap1hist.tlo=TLO
	set lnap1hist.uid=%UID

	do lnap1hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNAP1SCH lnap1sch)	// LNAP1SCH_U  Table LNAP1HIST  Loan Appl Bulk Payments (Modified)

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%UID,TJD,TLO
		type String v1,v2,v3,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=lnap1sch.acn
		set v2=lnap1sch.apps
		set v3=lnap1sch.appnum
		set vlastkey=Db.nextVal("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3")
		type RecordLNAP1HIST lnap1hist=Db.getRecord("LNAP1HIST","ACN=:v1,APPS=:v2,APPNUM=:v3,TSEQ=:vlastkey",1)
		set lnap1hist.cdt=+$H
		set lnap1hist.ctime=$P($H,",",2)
		set lnap1hist.spd=TJD
		set lnap1hist.tcmt=$$TCMT^CIFFUNCS("","LNAP1SCH",vdi,vold,vnew)
		set lnap1hist.tlo=TLO
		set lnap1hist.uid=%UID

		do lnap1hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNAP1SCH lnap1sch

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("APPS").exists() set vux("APPS") = vx("APPS")
	if vx("APPNUM").exists() set vux("APPNUM") = vx("APPNUM")
	if vx("SPD").exists() set vux("SPD") = vx("SPD")
	do vkey(1) set voldkey = lnap1sch.acn_","_lnap1sch.apps_","_lnap1sch.appnum_","_lnap1sch.spd // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnap1sch.acn_","_lnap1sch.apps_","_lnap1sch.appnum_","_lnap1sch.spd // Copy new keys into object
	type RecordLNAP1SCH vnewrec = lnap1sch.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNAP1SCH",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNAP1SCH lnap1sch

	if vux("ACN").exists() set lnap1sch.acn = vux("ACN").piece("|",i)
	if vux("APPS").exists() set lnap1sch.apps = vux("APPS").piece("|",i)
	if vux("APPNUM").exists() set lnap1sch.appnum = vux("APPNUM").piece("|",i)
	if vux("SPD").exists() set lnap1sch.spd = vux("SPD").piece("|",i)
	quit
