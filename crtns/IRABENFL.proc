IRABENFL(RecordIRABEN iraben, String vpar, Boolean vparNorm) // IRABEN - RPA Beneficiary Information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (19)             08/22/2006
	// Trigger Definition (7)                      09/21/2006
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = iraben.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(iraben,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(iraben,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = iraben.acn
	type String RPASEQ = iraben.rpaseq
	type String BENSEQ = iraben.benseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("RPASEQ").exists()!vx("BENSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("IRABEN",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("IRABEN","ACN = :iraben.acn and RPASEQ = :iraben.rpaseq and BENSEQ = :iraben.benseq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String RPASEQ
	type public String BENSEQ

	type RecordIRABEN iraben = Db.getRecord("IRABEN","ACN=:ACN,RPASEQ=:RPASEQ,BENSEQ=:BENSEQ")
	if (%ProcessMode = 2) do {
		do iraben.setMode(2)

		do IRABENFL(iraben,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordIRABEN iraben

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("IRABEN","ACN = :iraben.acn and RPASEQ = :iraben.rpaseq and BENSEQ = :iraben.benseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(iraben))  S ^IRABEN(vobj(iraben,-3),vobj(iraben,-4),vobj(iraben,-5))=vobj(iraben)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.iraben)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordIRABEN iraben

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.iraben)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^IRABEN(vobj(iraben,-3),vobj(iraben,-4),vobj(iraben,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordIRABEN iraben

	// Type local variables for access keys for defaults
	type public String ACN
	type public String RPASEQ
	type public String BENSEQ

	if iraben.fmvelg.isNull() set iraben.fmvelg = 0        // fmvelg
	quit


vreqn // Validate required data items

	type public RecordIRABEN iraben

	if iraben.benrel.isNull() do vreqerr("BENREL") quit
	if iraben.bentyp.isNull() do vreqerr("BENTYP") quit
	if iraben.fmvelg.isNull() do vreqerr("FMVELG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordIRABEN iraben

	if iraben.acn.isNull() do vreqerr("ACN") quit
	if iraben.rpaseq.isNull() do vreqerr("RPASEQ") quit
	if iraben.benseq.isNull() do vreqerr("BENSEQ") quit

		if vx("BENREL").exists(),iraben.benrel.isNull() do vreqerr("BENREL") quit
		if vx("BENTYP").exists(),iraben.bentyp.isNull() do vreqerr("BENTYP") quit
		if vx("FMVELG").exists(),iraben.fmvelg.isNull() do vreqerr("FMVELG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRABEN","MSG",1767,"IRABEN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordIRABEN iraben
	if 'iraben.acn.isNull() set vfkey("^CIF("_""""_iraben.acn_""""_","_1_")")="IRABEN(ACN) -> CIF"
	if 'iraben.rpaseq.isNull() set vfkey("^IRA("_""""_iraben.acn_""""_","_""""_iraben.rpaseq_""""_")")="IRABEN(ACN,RPASEQ) -> IRATYPE"
	if 'iraben.benacn.isNull() set vfkey("^CIF("_""""_iraben.benacn_""""_","_1_")")="IRABEN(BENACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordIRABEN iraben
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":iraben.acn") set vERRMSG = $$^MSG(8563,"IRABEN(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("IRATYPE",":iraben.acn,:iraben.rpaseq") set vERRMSG = $$^MSG(8563,"IRABEN(ACN,RPASEQ) -> IRATYPE") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'iraben.benacn.isNull() if 'Db.isDefined("CIF",":iraben.benacn") set vERRMSG = $$^MSG(8563,"IRABEN(BENACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("BENNAME").exists()!vx("BENLNM").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BENZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordIRABEN iraben
	if vx("").order().isNull() do AUDIT^UCUTILN(iraben,.vx(),1,"|") quit
	if vx("BENACN").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(iraben,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - IRA Beneficiary after delete

	type public RecordIRABEN iraben
	new rs,XCYR

	type ResultSet rs=Db.select("CYR","IRABEN1","ACN=:ACN AND RPASEQ=:RPASEQ")
	if rs.isEmpty() quit 
	while rs.next() do {
		set XCYR=rs.getCol(1)
		do Db.delete("IRABEN1","ACN=:ACN AND RPASEQ=:RPASEQ AND BENSEQ=:BENSEQ AND CYR=:XCYR","/NOTRIGBEF/NOTRIGAFT")
	}
	
	quit

vai1 // Trigger AFTER_INSERT - After Insert trigger for IRABEN

	type public RecordIRABEN iraben
	/*
	  -------------------- Revision History --------------------------------

	   08/21/06 - KumarSS - 22169
		Added code to validate ZIP code column associated with beneficiary.

	   06/18/02 - ANTONOVS - 48920
		Added Beneficiary Last Name verification.

	   06/28/01 - SISONG - 45980
		New(ed) and set ERR to 0.

	   10/04/00 - MURRAY - 34101
		Updates for Beneficiary Percentage Designation

	   10/04/99 - MOTENJ - 31126
		Converted to PSL. Replaced TOTAL with TOTPCT.	

	   08/06/99 - REEDD - 31426
		Added code to verify that all beneficiary percentages
		total 0 or 100 percent.  This is only done during
		account integrity.

	*/

	type public Boolean ER
	type public String RM

	if %ProcessMode'=2 quit 

	new ERR,rs,BPCT,BTYP,FMV,N,SUM
	
 	// Validate ZIP code - Beneficiary
	do ZIP^PROCZIP(iraben.bencntry, iraben.benstate, iraben.benzip)
	if ER.get() do Runtime.setErrMSG("IRABEN", 3333, RM) quit:ER
	
	type ResultSet rs=Db.select("BENPCT,BENTYP,FMVELG","IRABEN","ACN=:ACN AND RPASEQ=:RPASEQ")
	if rs.isEmpty() quit 
	while rs.next() do {
		set BPCT=rs.getCol(1)
		set BTYP=rs.getCol(2)
		set FMV=rs.getCol(3)
		set SUM(BTYP)=$G(SUM(BTYP))+BPCT
		if FMV set SUM("FMV")=$G(SUM("FMV"))+BPCT
	}

	set N=""
	set ERR=0
	for  set N=$O(SUM(N)) quit:N=""!(ERR)  do {
		if SUM(N)=0!(SUM(N)=100) quit
		set ERR=1
		//Sum of percentage allocations must be 0% or 100%
		do Runtime.setErrMSG("IRABEN",2852)  
	}

	// Last Name is not part of a full name

	new V,XX
	set XX=$$UPPER^%ZFUNC(iraben.benlnm)
	set V=$$UPPER^%ZFUNC(iraben.benname)
	// Last name is not part of full name
	if " "[XX!(V'[XX) do Runtime.setErrMSG("IRABEN",1593) quit:ER

	quit 
	

vau1 // Trigger AU_BENZIP - After Update of Beneficiary ZIP Code

	type public RecordIRABEN iraben

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with beneficiary.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Beneficiary
	do ZIP^PROCZIP(iraben.bencntry, iraben.benstate, iraben.benzip)
	if ER.get() do Runtime.setErrMSG("IRABEN", 3333, RM)

	quit

vau2 // Trigger AU_NAME - After update Beneficiary name

	type public RecordIRABEN iraben
	// Last Name is not part of a full name
	
	new V,XX
	set XX=$$UPPER^%ZFUNC(iraben.benlnm)
	set V=$$UPPER^%ZFUNC(iraben.benname)
	// Last name is not part of full name
	if " "[XX!(V'[XX) do Runtime.setErrMSG("IRABEN",1593) quit:ER

	quit

vbd1 // Trigger BEFORE_DELETE - IRA Beneficiary before delete

	type public RecordIRABEN iraben
	new rs,CYR,DATA,DISBAMT,WTHAMT

	set DISBAMT=0,WTHAMT=0

	type ResultSet rs=Db.select("CYR","IRABEN1","ACN=:ACN AND RPASEQ=:RPASEQ AND BENSEQ=:BENSEQ")
	if rs.isEmpty() quit 
	while rs.next() do {
		set CYR=rs.getCol(1)
        	set DATA=Db.getOneRow("TAMT,WTH","IRABEN1","ACN,RPASEQ,BENSEQ,CYR")
 		set DISBAMT=DISBAMT+$P(DATA,$C(9),1)
		set WTH=$P(DATA,$C(9),2)
	}
	
	if DISBAMT!(WTHAMT) do Runtime.setErrMSG("IRABEN1",439)
	
	quit

vbi1 // Trigger BEFORE_INSERT - Check BENACN value

	type public RecordIRABEN iraben
	/*
	  ---------------- Revision History -----------------------------------
	
	   06/18/02 - ANTONOVS - 48920
		Added Beneficiary Last Name defaulting.

	   08/06/99 - REEDD - 31426
		Added code to generate the next beneficiary sequence if
		a sequence number does not exist.  This will happen if an
		institution is running a different version of PFW.

	*/
	
	
	// Plan owner cannot be designated as a beneficiary
	
	if iraben.acn=iraben.benacn do Runtime.setErrMSG("IRABEN",2187) if ER quit 
	if iraben.benseq="" do {
		set NEXTSEQ=0
		set ACN=iraben.acn
		set RPASEQ=iraben.rpaseq
		set iraben.benseq=Db.nextVal("IRABEN","ACN,RPASEQ")
		}

	// Defaulting Beneficiary Last Name field

	new V
	set V=iraben.benname
	if '$G(ACN) set ACN=""
	if '$L(iraben.benlnm) do {
		do FBL^XALPHA
		set iraben.benlnm=$E($P(LN,",",1),1,20)
		}

	quit 
	

vbu1 // Trigger BENACN_BU - Verify BENACN value

	type public RecordIRABEN iraben
	do iraben.setAuditFlag(1)
	/*
	----- Revision History ----

	06/18/02 - ANTONOVS - 48920
		   Added Beneficiary Last Name defaulting.

	*/

	// Plan owner cannot be designated as a beneficiary
	
	if iraben.acn=iraben.benacn do Runtime.setErrMSG("IRABEN",2187) if ER quit

	// Defaulting Beneficiary Last Name field
	
	new V
	set V=iraben.benname
	if '$G(ACN) set ACN=""
	if '$L(iraben.benlnm) do {
		do FBL^XALPHA
		set iraben.benlnm=$E($P(LN,",",1),1,20)
		}

	quit 
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordIRABEN iraben

	set X = iraben.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = iraben.rpaseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RPASEQ", vRM) quit
	set X = iraben.benseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BENSEQ", vRM) quit
	set X = iraben.benacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BENACN", vRM) quit
	if iraben.bencity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENCITY", vRM) quit
	set X = iraben.bencntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("BENCNTRY", vRM) quit
	if iraben.benlnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENLNM", vRM) quit
	if iraben.benmad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENMAD1", vRM) quit
	if iraben.benmad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENMAD2", vRM) quit
	if iraben.benmad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENMAD3", vRM) quit
	if iraben.benname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENNAME", vRM) quit
	set X = iraben.benpct if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("BENPCT", vRM) quit
	set X = iraben.benrel if 'X.isNull(),'Db.isDefined("UTBLBENREL","X") set vRM = $$^MSG(1485,X) do vdderr("BENREL", vRM) quit
	if iraben.benstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("BENSTATE", vRM) quit
	if iraben.bentaxid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("BENTAXID", vRM) quit
	set X = iraben.bentyp if 'X.isNull(),'Db.isDefined("UTBLBENTYP","X") set vRM = $$^MSG(1485,X) do vdderr("BENTYP", vRM) quit
	if iraben.benzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("BENZIP", vRM) quit
	set X = iraben.dob if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOB", vRM) quit
	if '("01"[iraben.FMVELG) set vRM=$$^MSG(742,"L") do vdderr("FMVELG", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRABEN","MSG",979,"IRABEN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordIRABEN iraben)	//IRABEN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.iraben)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=ACN_HIST
			}
		else  if TSRC="O" do {
			do vj1(.iraben)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=ACN_HIST
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.iraben)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=ACN_HIST
			}
		else  if TSRC="O" do {
			do vj1(.iraben)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=ACN_HIST
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj2(.iraben)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj2(.iraben)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordIRABEN iraben)	// ACN_HIST  Table CIFH  Customer History

	type Public String EFD,%IDENT,%O,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=iraben.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG($S(%O=0:2194,%O=3:2195),iraben.rpaseq,iraben.benacn)_" (IRABEN)"
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordIRABEN iraben)	// HIST_U  Table CIFH  Maintenance history journal

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=iraben.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^CIFFUNCS(iraben.rpaseq_","_iraben.benacn,"IRABEN",vdi,vold,vnew,$G(EFD))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordIRABEN iraben

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("RPASEQ").exists() set vux("RPASEQ") = vx("RPASEQ")
	if vx("BENSEQ").exists() set vux("BENSEQ") = vx("BENSEQ")
	do vkey(1) set voldkey = iraben.acn_","_iraben.rpaseq_","_iraben.benseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = iraben.acn_","_iraben.rpaseq_","_iraben.benseq // Copy new keys into object
	type RecordIRABEN vnewrec = iraben.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("IRABEN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordIRABEN iraben

	if vux("ACN").exists() set iraben.acn = vux("ACN").piece("|",i)
	if vux("RPASEQ").exists() set iraben.rpaseq = vux("RPASEQ").piece("|",i)
	if vux("BENSEQ").exists() set iraben.benseq = vux("BENSEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordIRABEN iraben
	type public String vpar

	type String vERRMSG

	type ResultSet rs1=Db.select("ACN,RPASEQ,BENSEQ","IRABEN1","ACN=:iraben.acn AND RPASEQ=:iraben.rpaseq AND BENSEQ=:iraben.benseq") // Restriction on delete
	if 'rs1.isEmpty() set vERRMSG = $$^MSG(8563,"IRABEN1(ACN,RPASEQ,BENSEQ) -> IRABEN(ACN,RPASEQ,BENSEQ)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	quit
