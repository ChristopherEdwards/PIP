RFLGCFIL(RecordRFLGC rflgc, String vpar, Boolean vparNorm) // RFLGC - Customer Restrictions  Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              11/22/2003
	// Trigger Definition (4)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = rflgc.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(rflgc,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(rflgc,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = rflgc.acn
	type String RFLG = rflgc.rflg

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("RFLG").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RFLGC",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RFLGC","ACN = :rflgc.acn and RFLG = :rflgc.rflg") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String RFLG

	type RecordRFLGC rflgc = Db.getRecord("RFLGC","ACN=:ACN,RFLG=:RFLG")
	if (%ProcessMode = 2) do {
		do rflgc.setMode(2)

		do RFLGCFIL(rflgc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRFLGC rflgc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RFLGC","ACN = :rflgc.acn and RFLG = :rflgc.rflg") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(rflgc))  S ^HLD(2,vobj(rflgc,-3),vobj(rflgc,-4))=vobj(rflgc)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRFLGC rflgc

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^HLD(2,vobj(rflgc,-3),vobj(rflgc,-4))              // Delete Record
	quit


vreqn // Validate required data items

	type public RecordRFLGC rflgc

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRFLGC rflgc

	if rflgc.acn.isNull() do vreqerr("ACN") quit
	if rflgc.rflg.isNull() do vreqerr("RFLG") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLGC","MSG",1767,"RFLGC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Restriction

	type public RecordRFLGC rflgc
	/*
	   ---------- Revision History ------------------------------------------

	   09/17/99 - CHOK - 31126
		      Converted to PSL.

	   01/28/00 - LAMY - 36389
																						Changed B'>1 to B'>0.  Before the RFLGC flag was set 'N'
																						with one restriction left.

	*/

	new A,B,RFLGC,TMP
	set RFLGC=Db.getOneRow("RFLGC","CIF","ACN")
	
	new rs 
	type ResultSet rs=Db.select("RFLG","RFLGC","ACN=:ACN") 
	if rs.isEmpty() set B=""
	else  set B=rs.next(),B=rs.getCol(1)

	/*
	Changed B'>1 to B'>0.  Before the RFLGC flag was set 'N' with one
	restriction left.  1.28.00 jcl
	*/

	if RFLGC,B'>0 do Db.update("CIF","RFLGC=0","ACN=:ACN")
	set TCMT="[CIF]RFLGC::"_$$^MSG(1499)_":"_RFLG do CIFHBLD^CIFFUNCS(TCMT)        //Customer restriction deleted
	quit
	

vai1 // Trigger AFTER_INSERT - After Insert Restriction

	type public RecordRFLGC rflgc
	/*
	   ---------- Revision History ------------------------------------------

	   09/17/99 - CHOK - 31126
		      Converted to PSL.
	*/

	// Set Restriction Flags after Insert
	
	set RFLGC=Db.getOneRow("RFLGC","CIF","ACN")
	if RFLGC'=1 do Db.update("CIF","RFLGC=1","ACN=:ACN")
	set TCMT="[CIF]RFLGC::"_$$^MSG(1491)_":"_RFLG do CIFHBLD^CIFFUNCS(TCMT)        //Customer restriction created
	quit

vbd1 // Trigger BEFORE_DELETE - RFLGC Before Delete Trigger

	type public RecordRFLGC rflgc
	// Invalid customer number
	if 'Db.isDefined("CIF","ACN") do Runtime.setErrMSG("RFLGC",1295) quit:ER 

	// Restriction must exist in OVR system table or RFLG user table
	new GRP
	set GRP="CIF"
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") do Runtime.setErrMSG("RFLGC",2408) quit:ER 

	// No restrictions on customer ~p1
	if 'Db.isDefined("RFLGC","ACN,RFLG") do Runtime.setErrMSG("RFLGC",1457) quit:ER 
	quit
	

vbi1 // Trigger BEFORE_INSERT - RFLGC Before Insert Trigger

	type public RecordRFLGC rflgc
	// Invalid customer number
	if 'Db.isDefined("CIF","ACN") do Runtime.setErrMSG("RFLGC",1295) quit:ER 

	// Restriction must exist in OVR system table or RFLG user table
	new GRP
	set GRP="CIF"
	if 'Db.isDefined("UTBLRFLG","GRP,RFLG") do Runtime.setErrMSG("RFLGC",2408) quit:ER 

	// Default value
	set rflgc.tlo=%UserStation
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRFLGC rflgc

	set X = rflgc.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	if rflgc.rflg.length()>4 set vRM = $$^MSG(1076,4) do vdderr("RFLG", vRM) quit
	set X = rflgc.exdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXDT", vRM) quit
	set X = rflgc.jdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("JDT", vRM) quit
	set X = rflgc.stdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STDT", vRM) quit
	if rflgc.tcmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCMT", vRM) quit
	set X = rflgc.tim if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIM", vRM) quit
	if rflgc.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if rflgc.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLGC","MSG",979,"RFLGC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordRFLGC rflgc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("RFLG").exists() set vux("RFLG") = vx("RFLG")
	do vkey(1) set voldkey = rflgc.acn_","_rflgc.rflg      // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = rflgc.acn_","_rflgc.rflg      // Copy new keys into object
	type RecordRFLGC vnewrec = rflgc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RFLGC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRFLGC rflgc

	if vux("ACN").exists() set rflgc.acn = vux("ACN").piece("|",i)
	if vux("RFLG").exists() set rflgc.rflg = vux("RFLG").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordRFLGC rflgc
	type public String vpar

	do Db.delete("RFLGCCID","ACN=:rflgc.acn AND RFLG=:rflgc.rflg",vpar) // Cascade delete

	quit
