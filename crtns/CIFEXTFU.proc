CIFEXTFU	  /*
ORIG: haileyk - 08/25/2005
DESC: CIFEXT Registration Functions

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------

	 10/05/06 - NATRAJAH - 22505
	 	Retrofited new procedure from P01DEV1 view as per the
	 	below mentioned CRs.
		08/01/06 - Ed Sigda - CR 22476
		Added section RFUND to for account funding once
		external account is registered.  Modified section 
		RANDOM to prevent zero amount random payments.  
		Added DAYS parameter to BUILD to set EFTPAY.EFD, 
		if necessary.  
		03/27/06 - Ed Sigda - CR 20275
		Create in Profile01 view.
		
	10/03/05 - Kevin Hailey - CR 17377
		Modify section BUILD pass a value of 1 in call to 
		DATES^EFTFUNCS.  This will prevent PROCDT of being
		equal to SystemDate if in end of day portion of dayend.

	09/01/05 - Kevin Hailey - CR 17117
		Create procedure.
  */
  
  	quit
  	
public RANDOM( Number EXTACN, Number EXTSEQ)
	/*
	Create Random Payment Orders
	
	ARGUMENTS:
		EXTACN		External Customer Number
		EXTSEQ		External Sequence Number
		
	RETURNS:
		none
	
	*/
	
	type public Boolean ER
	type Number I,MAXAMT,PAYSEQ,TAMT
	type Date XEFD
	
	type RecordCRCD crcd
	type RecordCUVAR cuvar
	type RecordCIFEXTREG extreg
	type RecordCIFEXTREGAMT regamt

	// Verify External Sequence is valid
	if 'Db.isDefined("CIFEXTREG","ACN=:EXTACN,SEQ=:EXTSEQ") throw Class.new("Error",","_$$^MSG(5671))
	
	set extreg=Db.getRecord("CIFEXTREG","ACN=:EXTACN,SEQ=:EXTSEQ")
	set crcd=Db.getRecord("CRCD","CO=:%CompanyName,CRCD=:%SystemCurrency")
	set cuvar=Db.getRecord("CUVAR")
	
	// External Account Validation Account Number is required
	if cuvar.extvalcid.isNull() do Runtime.setErrMSG("CIFEXT","5669") quit
	
	// External Account Validation Account Type is required
	if cuvar.extvalcnt.isNull() do Runtime.setErrMSG("CIFEXT","5670") quit
	
	set MAXAMT=cuvar.extvalmaxamt
	if MAXAMT.isNull() set MAXAMT=1
	
	set regamt=Class.new("RecordCIFEXTREGAMT")
	set regamt.acn=extreg.acn
	set regamt.seq=extreg.seq

	// Create Random Payment Orders
	for I=1:1:cuvar.extvalcnt do { quit:ER
		set TAMT=(((MAXAMT*(10**crcd.curdec)).random())+1)/(10**crcd.curdec))
	
		do BUILD(.extreg,cuvar.extvalcid,TAMT,"PO",cuvar.extvaltype,6,.PAYSEQ,cuvar.extvalcc,1)

		quit:ER

		set regamt.amtseq=Db.nextVal("CIFEXTREGAMT","ACN=:EXTACN,SEQ=:EXTSEQ")
		set regamt.amt=TAMT
		set regamt.cid=cuvar.extvalcid
		set regamt.payseq=PAYSEQ
		
		do regamt.save()
	}

	quit
	
public RFUND( Number ACN, Number SEQ)
	/*
	 Build account funding collection order(s) based on information that is passed and 
	 stored in ACN,CIFEXTREG, and CIFEXTRFUND.

	 FORMAT:		RFUND^CIFEXTFU(ACN,SEQ)
				
	 PUBLIC/PRIVATE:	Public
	
	 ARGUMENTS:
		. ACN		Customer Number             /TYP=N/REQ/MECH=VAL
		. SEQ		External Account Sequence Number
							   /TYP=N/REQ/MECH=VAL

	*/
	
	type public Boolean ER
	type Number PAYSEQ
	
	type RecordACN acn
	type RecordCIFEXTREG extreg
	type RecordCIFEXTRFUND extrfund
	
	type ResultSet rs
	
	set extreg=Db.getRecord("CIFEXTREG","ACN=:ACN,SEQ=:SEQ")
	
	set rs=Db.select("CID,AMT","CIFEXTRFUND","ACN=:ACN AND SEQ=:SEQ")
	quit:rs.isEmpty()
	while rs.next() do {
		
		set extrfund=Db.getRecord("CIFEXTRFUND","ACN=:ACN,SEQ=:SEQ,CID=:rs.getCol(1)",1)

		set acn=Db.getRecord("ACN","CID=:extrfund.cid")
		
		set PAYSEQ=""
		do BUILD(.extreg,extrfund.cid,extrfund.amt,"CO",extreg.extacctp,7,.PAYSEQ,acn.cc,0)

		quit:ER

		do extrfund.setAuditFlag(1)
		
		set extrfund.payseq=PAYSEQ
		
		do extrfund.save()
	}

	quit
	
	
private BUILD(RecordCIFEXTREG extreg, Number CID, Number TAMT, String TYPE, Number TTYPE, Number PCODE, Number PAYSEQ, Number EXTVALCC, Number DAYS)
	/*
	 Build payment order based on information that is passed and 
	 stored in CIFEXTREG.

	 FORMAT:		BUILD^CIFEXTFU(.extreg,CID,TAMT,TYPE,TTYPE,PCODE)
				
	 PUBLIC/PRIVATE:	Public
	
	 ARGUMENTS:
	 	. extreg	CIFEXTREG object
		. CID		Account Number             /TYP=N/REQ/MECH=VAL
		. TAMT		Transaction Amount         /TYP=N/REQ/MECH=VAL
		. TYPE		EFT Type                   /TYP=T/NOREQ/MECH=VAL
		. TTYPE		Transaction type           /TYP=N/NOREQ/MECH=VAL
		. PCODE		Process Code               /TYP=N/NOREQ/MECH=VAL
		. EXTVALCC	Ext.Acct. Cost Center	   /TYP=N/NOREQ/MECH=VAL
		. DAYS		Minimum days in future	   /TYP=N/NOREQ/MECH=VAL
	
	 RETURNS:
	 	. PAYSEQ	EFTPAY sequence		   /TYP=N/NOREQ/MECH=VAL

	*/
	
	type public Boolean ER
	type public String UTSO()
	type String PAYMET,TSO
	type Date PROCDT,XEFD,XTJD


	type RecordEFTPAY eftpay
	type RecordUTBLEXTYP extyp1
	type RecordUTBLEXTYP extyp2

	set PAYSEQ=""

	set eftpay=Class.new("RecordEFTPAY")

	set eftpay.cid=CID
	set eftpay.seq=Db.nextVal("EFTPAY","CID=:CID")
	set eftpay.status="A"

	// Load passed information
	set eftpay.amount=TAMT
	set eftpay.crcd=%SystemCurrency
	set eftpay.pcode=PCODE
	set eftpay.recinst=extreg.extinst
	set eftpay.recacct=extreg.extacct
	set eftpay.constant=extreg.constant
	set eftpay.rectype=extreg.extacctp

	// Build UNIQTSO
	if 'extreg.benname.isNull() set UTSO("EXTNAME")=extreg.benname
	if 'extreg.bencity.isNull() set UTSO("EXTCITY")=extreg.bencity

	// Determine Transaction Type
	set extyp1=Db.getRecord("UTBLEXTYP","ACCTYP=:TTYPE")
	set extyp2=Db.getRecord("UTBLEXTYP","ACCTYP=:extreg.extacctp")
	
	// GL to GL
	if extyp1.grp="MISC",extyp2.grp="MISC" set eftpay.ttype=3
	// GL to Customer
	else  if extyp1.grp="MISC",extyp2.grp'="MISC" set eftpay.ttype=2
	// Customer to GL
	else  if extyp1.grp'="MISC",extyp2.grp="MISC" set eftpay.ttype=1
	// Customer to Customer
	else  set eftpay.ttype=0
	
	if UTSO.exists() do IN^UTSO(.UTSO,.TSO)
	if 'TSO.get().isNull() set eftpay.UNIQTSO=TSO
	
	// Default in cost center
	if eftpay.ttype'<2 do { quit:ER
		if EXTVALCC.isNull() do Runtime.setErrMSG("CIFEXT","5674") quit
		set eftpay.cc=EXTVALCC
	}

	set PAYMET=$$PAYMET^PROCEFT(.eftpay) quit:ER
	set eftpay.met=PAYMET

	type RecordCTBLEFTMETPD ctbleftmetpd=Db.getRecord("CTBLEFTMETPD","PAYMET,PCODE",1)
	if ctbleftmetpd.getMode()=1 set TYPE=ctbleftmetpd.efttype
	set eftpay.efttype=TYPE

	set DAYS=+$G(DAYS)
	set XEFD=$$DATES^EFTFUNCS(%SystemDate,"1DA",0,DAYS,TYPE,%SystemCurrency,.PROCDT,1)
	set eftpay.efd=XEFD
	set eftpay.procdt=PROCDT  

	// Create EFTPAY record
	do eftpay.save("/VALDD/VALRI/VALREQ")

	set PAYSEQ=eftpay.seq

	quit

vSIG()	quit "60554^35877^Hari Natrajan^6070"	// Signature - LTD^TIME^USER^SIZE
