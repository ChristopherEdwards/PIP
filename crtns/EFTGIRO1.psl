EFTGIRO1	  /*
	ORIG: Radhika - 01/06/2006
	DESC: Outgoing GIRO Interface

	---- Comments --------------------------------------------------------
	 This procedure is the outgoing GIRO interface.  When executed,it 
	 extracts data from global ^EFTOUT building a text file for loading 
	 via the GIS.
	
	---- Revision History ------------------------------------------------
	
	 01/30/06 Radhika - CR 17423
		 Converted M to PSL.
		 
	-----------------------------------------------------------------------
	Outgoing GIRO File (File Type: 002) has 3 record types:
	'01' - Heading Record		(1 record in each file)
	'02' - Transaction record	(n records) (from ^EFTOUT)
	'03' - Ending Record		(1 record in each file)
*/	
 
	do START
	
	quit
  	
START	//Start processing of outgoing GIRO messages

	type public Boolean ER
	
	type Number NEWFILE,RECCNT,TOTAMT
	type String ARCHDIR,FILENAME,GIRONO
	
	set (ER,RECCNT,TOTAMT)=0
	set NEWFILE=0
	 		
	// error trapping
	catch vERROR {
		
		do ZTSTART
		quit
	        } 

	do INIT				//initialize variables
	quit:ER
	
	do HEADER		//write header
	do LOOP1		//loop through EFTOUT building outgoing GIRO file
	do TRAILER		//write trailer

	do END			//end processing

	if NEWFILE do START quit
	do ^EFTGIROC		//process any custom responses to a separate file
	quit
	
INIT	//Initialize variables

	type public String ARCHDIR,FILENAME,GIRONO
	
	set GIRONO=CUVAR.iso		//giro number - place on all CIDs
	
	if GIRONO.length()'=4 set GIRONO=$$ZEROG(GIRONO,4)
	
	set ARCHDIR=CUVAR.eftarcdir	 //archive directory
	
	//Archive directory not defined
	if ARCHDIR.isNull() do Runtime.setErrMSG("CUVAR",3086) quit
	
	set FILENAME=CUVAR.eftccout	//output directory
	
	//Output directory not defined
	if FILENAME.isNull() do Runtime.setErrMSG("CUVAR",3087) quit
	set FILENAME=FILENAME_$$FNAME

	set TMPFIL=$$FILE^%ZOPEN(FILENAME,"WRITE/NEWV")
	
	//Unable to open output file
	if 'TMPFIL  do Runtime.setErrMSG("",3090,FILENAME) quit 
	
	set GCHARSET=$$GCHARSET
	quit
	
LOOP1	//Loop through global ^EFTOUT at the date level, setting the date
	//level to the last record processed on last execution, as this
	//may be executed multiple times per day.
	
	type public Number TSEQ
	
	type Date DATE,SJD
	type Number LASTP,LASTF
	
	set (DATE,LASTP,LASTF)=""
	
	type ResultSet rs=Db.select("TJD,TSEQ","EFTOUT",,"TJD,TSEQ")
	while rs.next() do {
		set DATE=rs.getCol("TJD")
		set TSEQ=rs.getCol("TSEQ")
		// last seq processed
		type RecordEFTOUT0 eftout0=Db.getRecord("EFTOUT0","SJD=:DATE",1)
		set LASTP=eftout0.endseq
		if LASTP.isNull() set LASTP=0
		// last seq filed
		type ResultSet rs1=Db.select("TSEQ","EFTOUT","TJD=:DATE","TSEQ DESC")
		if rs1.next() set LASTF=rs1.getCol("TSEQ")
		// no new recs to process
		if LASTP=LASTF quit
		do LOOP2(DATE,LASTP,.eftout0)
		}
		
	quit
	
LOOP2(Date DATE,Number TSEQ,RecordEFTOUT0 eftout0) // Loop through EFTOUT at the sequence level

	type public Number NEWFILE,QUIT,RECCNT
	
	type DbSet ds=Db.selectDbSet("EFTOUT","TJD=:DATE AND TSEQ>:TSEQ","TSEQ")
	if ds.isEmpty() quit
	while ds.next() do {
		type RecordEFTOUT eftout=ds.getRecord("EFTOUT")
		// extract data
		do EXTRACT(.eftout)
		// last seq processed
		set eftout0.endseq=TSEQ
		do eftout0.save()
		if RECCNT>499 set (NEWFILE,QUIT)=1
		}
		
	quit
		
EXTRACT(RecordEFTOUT eftout) // EXTRACT data from EFTOUT
		
	type public Number TSEQ
	type public String ET,GMSG,ORIGMTYP
	
	type Number PSEQ
	type String EFTTYPE,FCID,RCID,REJECT,RINS,UTSO
	
	//pull out TSO field, as EFTPAY fields are stored there
	do OUT^UTSO(.UTSO,eftout.tso)
	
	set FCID=UTSO("FCID").get()			//sending/Profile acct
	//if the sending account is a G/L
	if FCID["-" set FCID=FCID.piece("-",2)
	
	set PSEQ=UTSO("SEQ").get()			//payment sequence
	set ORIGMTYP=UTSO("ORIGMTYP").get()

	//outgoing messages built by EFTGIRO2 and placed into ^EFTOUT
	//need GIRO area built
	if FCID.isNull() do ERR(TSEQ) quit	
	if PSEQ.isNull() set ET="Invalid sequence for account "_FCID.get() do ERR(TSEQ) quit
	
	type RecordEFTPAY fEFTPAY=Db.getRecord("EFTPAY","CID=:FCID,SEQ=:PSEQ",1)
	if 'fEFTPAY.getMode() do { quit
		set ET="No EFTPAY record for account "_FCID.get()_" sequence "_PSEQ.get()
		do ERR(TSEQ)
		}
	
	set REJECT=UTSO("REJMSG").get() if 'REJECT.isNull() do BUILD(.fEFTPAY) quit
	set EFTTYPE=UTSO("EFT").get() if EFTTYPE.isNull() do ERR(TSEQ) quit
	
	if EFTTYPE="PO" set GMSG="001"			//outgoing payment
	if EFTTYPE="SPO" set GMSG="001"			//outgoing std payment
	if EFTTYPE="COVAL" do {				//outgoing pmt for coll
		if ORIGMTYP="094" set GMSG="404"
		else  set GMSG="002"
		}
	if EFTTYPE="CO" set GMSG="092"			//outgoing collection
	if EFTTYPE="SCO" set GMSG="092"			//outgoing std collection
	if GMSG.get().isNull() do ERR(TSEQ) quit
	
	do BUILD(.fEFTPAY)
	
	quit

BUILD(RecordEFTPAY fEFTPAY) // Build message
	
	type public Boolean ER
	type public Number PSEQ,RECCNT
	type public String FCID,GMSG,RCID,REJECT,RINS,UTSO
	
	type String BANK,G61SAV,GIRO,REC
	
	if 'REJECT.isNull() set GMSG=REJECT.get()	//reject msg type
	do GIROA(.fEFTPAY,GMSG) quit:ER		//build GIRO area
	do BANKA(.fEFTPAY,GMSG) quit:ER		//build bank area
	
	set REC=GIRO_BANK			//combine sections
	do WRREC(REC)				//write record to output
	
	set RECCNT=RECCNT+1
	
	kill FCID,PSEQ,RINS,RCID,REJECT,UTSO
	
	quit

GIROA(RecordEFTPAY PREC,String MSG) // GIRO AREA - Build the GIRO area of the message
	
	/* This area contains all of the information necessary for the
	   transaction exchange, and the transaction clearing in the GIRO system.
	   This area is the same for all transactions.  This is a fixed 95
	   characters in length.
	*/
	
	type public Date DATE
	type public Number PSEQ,TAMT,TOTAMT,TSEQ
	type public String FCID,G61SAV,GIRO,GMSG,RCID,RINS,UTSO()
	
	type Date G9,G51
	type Number PREC1,PREC2
	type String G1,G2,G3,G4,G41,G42,G43,G5,G52,G53,G6,G61,G62,G63
	type String G7,G8,G81,G82,G10,G11,G12,G121,G122,G13,G14,G421,G422
	
	if 'PREC.getMode() do {
		set PREC1=UTSO("FCID").get()
		set PREC2=UTSO("SEQ").get()
		if (PREC1.isNull())!(PREC2.isNull()) quit
		set PREC=Db.getRecord("EFTPAY","CID=:PREC1,SEQ=:PREC2",1)
		}
		
	set G1="02"			//1-2	item code "02"
	set G2=MSG			//3-5	transaction code
	set G3=PREC.subcode		//6-7	transaction sub-code
	if G3.isNull() set G3="00"	//default "00"
	
	if G2=294 do GIRO294 quit
	
	set G41=1				//8-8	qualifier / Hungarian = 1
	
	set G42=CUVAR.iso			//9-14	bank code
	if G42.length()>3 do {
		set G421=G42.extract(1,3)
		set G422=G42.extract(4,8)
		set G42=G421
		}
	
	if G42.length()'=6 set G42=$$SPACE(G42,6)

	set G43=G422.get()
	if G43.length()'=5 set G43=$$ZEROS(G43,5)
	
	set G4=G41_G42_G43		//8-19	originator bank reference
	
	set G51=DATE			//date of creation
	
	set G51=G51.toString("YEARMMDD") //20-27	entry date
	
	set G52=$$ZEROS(TSEQ,7)		//28-34	sequence number (EFTOUT.TSEQ)
	
	set G53="00"			//35-36	folio number
	set G5=G51_G52_G53		//20-36	transaction number
	
	//needed for incoming rejections
	if GMSG.extract(1)'=2 do {
		type RecordEFTREFG eftrefg = Db.getRecord("EFTREFG","TRNO=:G5",1)
		set eftrefg.cid=FCID
		set eftrefg.seq=PSEQ
		do eftrefg.save()
		}	
	
	set RINS=UTSO("RINS").get()		//recipient inst
	set RCID=UTSO("RCID").get()		//recipient acct

	set G61=1				//37-37	qualifier - Hungarian bank
	set G62=RINS.extract(1,3)		//38-43	bank code
	if G62.length()'=6 set G62=$$SPACE(G62,6)
	set G63=RINS.extract(4,8)		//44-48	branch code
	if G63.length()'=5 set G63=$$ZEROS(G63,5)
	set G6=G61_G62_G63		//37-48	beneficiary bank reference
	set G61SAV=G6
	
	set TAMT=PREC.amount		//payment amount
	if 'PREC.actamt.isNull() set TAMT=PREC.actamt	// actual amount

	if ((G2'="092")&(G2'=292)&(G2'=294)) set TOTAMT=TOTAMT+TAMT
	if G2=292 set TAMT=0
	if TAMT.isNull() set TAMT=0
	set G7=$$ZEROS(TAMT,16)_"00"	//49-66	settlement amount.per page 25, last 2 chars = "00"
	set G81=PREC.crcd		//67-69	iso code
	if G81.isNull() set G81=CUVAR.%crcd
	set G82="2"
	set G8=G81_G82			//67-70	currency code
	set G9=PREC.efd			//effective date
	if G9.isNull() set G9=%SystemDate
	set G9=G9.toString("YEARMMDD")	//71-78	settlement date

	set G10=PREC.pri		//79-79	priority code
	if G10.isNull() set G10=0		//default low priority "0"

	set G11=0			//80-80	emergency code

	set G121=" "			//81-81	fee code
	set G122="  "			//82-83	reference fee table
	set G12=G121_G122		//81-83	charges
	set G13="          "		//84-93	reserved for giro further use
	set G14="00"			//94-95	error code
	set GIRO=G1_G2_G3_G4_G5_G6_G7_G8_G9_G10_G11_G12_G13_G14
	
	quit

public GIRO294	//Immediate rejection 094 

	type public Date DATE,G9,G51
	type public Number TAMT,TSEQ 	
	type public String G1,G2,G3,G4,G5,G52,G6,G7,G8,G10,G11,G12,G13,G14,GIRO,UTSO()
	
	set G51=DATE
	set G51=G51.toString("YEARMMDD") //20-27  entry date 
	set G52=$$ZEROS(TSEQ,7)          //28-34  sequence number (EFTOUT.TSEQ) 
	set G5=G51_G52_"00" 
	set TAMT=0 
	set G7=$$ZEROS(TAMT,16)_"00" 
	set G4=UTSO("G4") 
	set G6=UTSO("G6") 
	set G8=UTSO("G8")_"2" 
	set G9=UTSO("G9") 
	set G9=G9.toString("YEARMMDD") 
	set G10=UTSO("G10") 
	set G11=UTSO("G11") 
	set G12=UTSO("G12") 
	set G12=$$SPACE(G12,3) 
	//PAR
	set G13=UTSO("G13").get()
	set G13=$$ZEROS(G13,10)
	set G14=UTSO("G14") 
	set G14=$$ZEROS(G14,2) 
	set GIRO=G1_G2_G3_G4_G5_G6_G7_G8_G9_G10_G11_G12_G13_G14 
	
	quit

BANKA(RecordEFTPAY PREC,String GMSG) // BANK AREA - Build the BANK area of the message

	/* This area contains all of the information which is not necessary
	   for the GIRO system but is necessary for the dialogue between banks,
	   branches and customers.  This area is a fixed 260 characters in size.
	*/
	
	type String cod
	
	// do the appropriate bank area depending upon the message type.
	//do @GMSG(.PREC)
	
	set cod=@GMSG_"^EFTGIRO1(.PREC)"
	#ACCEPT Date=02/02/06; PGM=BALA
	xecute cod
	
	quit	

001(RecordEFTPAY PREC)	// Message Type (01) - Transfer Order (PO)

	type public Number PSEQ,TSEQ
	type public String BANK,FCID,RCID,UTSO()
	
	type Date B6
	type String B1,B2,B3,B4,B5,B7,B8,B9,B10,B11,B12,B31,B32,B51,B52
	
	set B1=PREC.refno		//1-9     init bank internal ref #
	if B1.length()'=9 set B1=$$ZEROS(B1,9)

	set B2=PSEQ			//10-15   payment order seq #
	if B2.length()'=6 set B2=$$ZEROS(B2,6)

	set FCID=UTSO("FCID").get() if FCID.isNull() do ERR(TSEQ) quit	//Profile account

	set B31=FCID.extract(5,12) if B31.length()'=16 set B31=$$SPACE(B31,16)     //bdl 6.11.98

	set B32=PREC.lnm if B32.length()'=32 set B32=$$SPACE(B32,32)

	set B3=B31_B32			//16-63   originator (debitor)

	set B4=PREC.crcd		
	set B4="    "			//64-67   not used/four spaces

	set B51=RCID.get()		//addressee account - bdl 6.11.98
	if B51.length()'=16 set B51=$$SPACE(B51,16)

	set B52=PREC.benad1	//addressee id (name, address, etc)
	if B52.length()'=32 set B52=$$SPACE(B52,32)

	set B5=B51_B52			//68-115  addressee

	set B6=PREC.procdt		//116-123 initiation date
	set B6=B6.toString("YEARMMDD")

	/* wording zones 1,2,3 taken from EFTMSG
	   per page 33 of the Norms book, Word Zone 1 should start w/"X "
	   to keep in compliance with the slip.
	*/
	set B7=PREC.msg1 if B7.length()'=32 set B7=$$SPACE(B7,32)	//124-155
	set B8=PREC.msg2 if B8.length()'=32 set B8=$$SPACE(B8,32)	//156-187
	set B9=PREC.msg3 if B9.length()'=32 set B9=$$SPACE(B9,32)	//188-219

	/* These additional account fields are if the account number
	   overflows from B3-1 and B5-1; the norms book suggests filling
	   with spaces (page 33).
	*/
	set B10="    "			//220-223  originator additional acct
	set B11="    "			//224-227  addressee additional acct

	set B12=""			//228-260  free area
	if B12.length()'=33 set B12=$$SPACE(B12,33)

	set BANK=B1_B2_B3_B4_B5_B6_B7_B8_B9_B10_B11_B12
	
	quit

002(RecordEFTPAY PREC) // Message Type (02) - Payment for Immediate Collection (COVAL)
	
	type public Number PSEQ,TSEQ
	type public String BANK,FCID,G61SAV,RCID,UTSO()
	
	type Date B6
	type String B1,B2,B3,B4,B5,B7,B8,B9,B10,B11,B12
	type String B13,B31,B32,B51,B52,B121,B122,origtrno
	
	set B1=PREC.refno	//1-9     init bank internal ref #
	if B1.length()'=9 set B1=$$ZEROS(B1,9)

	set B2=PSEQ			//10-15   payment order seq #
	if B2.length()'=6 set B2=$$ZEROS(B2,6)

	set FCID=UTSO("FCID").get() if FCID.isNull() do ERR(TSEQ) quit
	set B31=FCID.extract(5,12) if B31.length()'=16 set B31=$$SPACE(B31,16)   //bdl 6.11.98

	set B32=PREC.lnm if B32.length()'=32 set B32=$$SPACE(B32,32)

	set B3=B31_B32			//16-63   originator (debitor)

	set B4=PREC.crcd		//64-67   payment (monetary) indicator
	set B4="    "			//64-67   not used/four spaces

	set B51=RCID.get()         //addressee account - bdl 6.11.98
	if B51.length()'=16 set B51=$$SPACE(B51,16) 

	set B52=PREC.benad1	//addressee id (name, address, etc)
	if B52.length()'=32 set B52=$$SPACE(B52,32)

	set B5=B51_B52			//68-115  addressee

	set B6=PREC.procdt		//116-123 initiation date
	set B6=B6.toString("YEARMMDD")
	
	// wording zones 1,2,3 taken from EFTMSG
	set B7=PREC.msg1 if B7.length()'=32 set B7=$$SPACE(B7,32)	//124-155
	set B8=PREC.msg2 if B8.length()'=32 set B8=$$SPACE(B8,32)	//156-187
	set B9=PREC.msg3 if B9.length()'=32 set B9=$$SPACE(B9,32)	//188-219
	
	/*These additional account fields are if the account number
	  overflows from B3-1 and B5-1; the norms book suggests filling
	  with spaces (page 33).
	*/
	
	set B10="    "			//220-223  originator additional acct
	set B11="    "			//224-227  addressee additional acct

	// From original CO received which we are paying via this COVAL
	set B121=G61SAV			//228-239  original bank ID
	set B122=""			//240-256  original transaction #
	set origtrno=PREC.origtrno
	if '(origtrno.get()).isNull() set B122=PREC.origtrno
	
	set B12=B121_B122			//228-256  original non clearing tr ref
	if B12.length()'=29 set B12=$$SPACE(B12,29)
	set B13=""			//257-260  free area
	if B13.length()'=4 set B13=$$SPACE(B13,4)
	set BANK=B1_B2_B3_B4_B5_B6_B7_B8_B9_B10_B11_B12_B13
	
	quit

092(RecordEFTPAY PREC) // Message Type (092) - Immediate Collection (CO) (Request/Non-financial)
	
	type public Number PSEQ,TSEQ
	type public String BANK,FCID,G61SAV,GIRO,RCID,UTSO()
	
	type Date B6
	type String B1,B2,B3,B4,B5,B7,B8,B9,B10,B11,B12
	type String B31,B32,B51,B52,CONSTANT,LEGAL
	
	set B1=PREC.refno	//1-9     init bank internal ref #
	if B1.length()'=9 set B1=$$ZEROS(B1,9)

	set B2=PSEQ			//10-15   payment order seq #
	if B2.length()'=6 set B2=$$ZEROS(B2,6)

	set FCID=UTSO("FCID").get() if FCID.isNull() do ERR(TSEQ) quit
	set B31=FCID.extract(5,12) if B31.length()'=16 set B31=$$SPACE(B31,16) // bdl 6.11.98

	set B32=PREC.lnm if B32.length()'=32 set B32=$$SPACE(B32,32)

	set B3=B31_B32				//16-63  originator

	set B4=PREC.crcd			//64-67  payment (monetary) ind
	set B4="    "                     	//64-67   not used/four spaces

	set B51=RCID.get()                 	//addressee account - bdl 6.11.98
	if B51.length()'=16 set B51=$$SPACE(B51,16) 

	set B52=PREC.benad1		//addressee id (name, add, etc)
	if B52.length()'=32 set B52=$$SPACE(B52,32)

	set B5=B51_B52				//68-115  addressee

	set B6=PREC.procdt			//116-123 initiation date
	set B6=B6.toString("YEARMMDD")
	
	// wording zones 1,2,3
	set B7=PREC.msg1 if B7.length()'=32 set B7=$$SPACE(B7,32)	//124-155
	set B8=PREC.msg2 if B8.length()'=32 set B8=$$SPACE(B8,32)	//156-187
	set B9=PREC.msg3 if B9.length()'=32 set B9=$$SPACE(B9,32)	//188-219
	
	// Per page 44, B10 is Reason (Constant/1) + Legal (Regulation/10)
	set CONSTANT=PREC.constant		//purpose code
	set LEGAL=PREC.msg4			//legal code
	set B10=CONSTANT_LEGAL			//reason of presentation
	if B10.length()'=20 set B10=$$SPACE(B10,20)	//220-239  reason of collection
	
	set B11=PREC.amount
	set B11=B11_"00"				//filler
	if B11.length()'=18 set B11=$$ZEROS(B11,18)	//240-257  amount collected

	/* Per page 45, on an outgoing 092, B11 has settlement amount,
	   so G7 should be filled with zeros.
	*/
	set GIRO=$$RCHAR^EFTGIRO2(GIRO,49,66,"0")

	set B12=" "
	if B12.length()'=3 set B12=$$SPACE(B12,3)	//258-260  free area

	set BANK=B1_B2_B3_B4_B5_B6_B7_B8_B9_B10_B11_B12
	
	quit
	
201(RecordEFTPAY PREC) // Message Type (201) Rejection - Transfer Order 
	
	quit
	
202(RecordEFTPAY PREC) // Message Type (202) Rejection - Payment for Collection
	
	quit
	
207(RecordEFTPAY PREC) // Message Type (207) Rejection
	
	quit
	
292(RecordEFTPAY PREC) // Message Type (292) Rejection - Request Collection
	
	quit
	
294(RecordEFTPAY PREC) // Message Type (294) Rejection

	// Message Type (2xx) where xx represents the original message

	// rejection
	type public String UTSO()
	type String BANK
	
	set BANK=UTSO("REJREC").get()		//reject message in TSO
	if BANK.isNull() quit
	
	if BANK.length()'=260 set BANK=$$SPACE(BANK,260)
	
	quit
	
public 404(RecordEFTPAY PREC)	// Message Type (404) - Positive Acknowledgement

	type public Number PSEQ
	type public String BANK,RCID,RINS
	
	type Date B6,B10
	type String B1,B2,B3,B4,B5,B7,B8,B9,B11,B12,B31,B32,B51,B52
	
	set B1=PREC.refno       //1-9     init bank internal ref # 
	if B1.length()'=9 set B1=$$ZEROS(B1,9) 

	set B2=PSEQ                       //10-15   payment order seq # 
	if B2.length()'=6 set B2=$$ZEROS(B2,6) 
	
	set B31=PREC.subcid
	if B31.length()'=16 set B31=$$SPACE(B31,16)

	set B32=PREC.custid if B32.length()'=32 set B32=$$SPACE(B32,32) 

	set B3=B31_B32                    //16-63   originator (debitor) 

	set B4=PREC.crcd             //64-67   payment (monetary) indicator 
	set B4="    "                     //64-67   not used/four spaces 

	set B51=RCID.get()         //addressee account - bdl 6.11.98 
	set B51=B51.extract(5,12)       
	if B51.length()'=16 set B51=$$SPACE(B51,16) 

	set B52=PREC.benad1     //addressee id (name, address, etc) 
	if B52.length()'=32 set B52=$$SPACE(B52,32) 

	set B5=B51_B52                    //68-115  addressee 

	set B6=PREC.procdt            //116-123 initiation date 
	set B6=B6.toString("YEARMMDD") 
	
	set B7=PREC.msg1 if B7.length()'=31 set B7=$$SPACE(B7,31) 
	set B8=PREC.msg2 if B8.length()'=24 set B8=$$SPACE(B8,24)  //155-178 
	
	set B9="1"_RINS.extract(1,3)_"   "_RINS.extract(4,8)_PREC.origtrno
	if B9.length()'=29 set B9=$$SPACE(B9,29) 
	set B10=PREC.efd                    //Original settlement date(G4) 
	set B10=B10.toString("YEARMMDD") 
	set B11="" if B11.length()'=32 set B11=$$SPACE(B11,32) 
	set BANK=B1_B2_B3_B4_B5_B6_B7_B8_B9_B10_B11 
	if BANK.isNull() quit
	if BANK.length()'=260 set BANK=$$SPACE(BANK,260)
	
	quit

WRREC(String REC) //Write record to output file
	
	type public String FILENAME,GCHARSET
	
	set REC=REC.translate(GCHARSET,$J(" ",GCHARSET)))
	use FILENAME write !,REC
	quit

ZEROS(String VAL,Number N)	
	
	type public String X
	
	type Number I
	
	// Pad on left with zeroes
	if VAL.length()>N quit VAL.extract(1,N)

	for I=1:1:N set X=X.get()_0
	
	quit X.extract(1,N-VAL.length())_VAL

ZEROG(String VAL,Number N)	

	type public String X
	
	type Number I
	
	// Pad on right with zeros 
	if VAL.length()>N quit VAL.extract(1,N) 
	
	for I=1:1:N set X=0_X.get()
	
	quit VAL_X.extract(1,N-VAL.length()) 

SPACE(String VAL,Number N)
	
	// Pad on right with spaces
	if VAL.length()>N quit VAL.extract(1,N)	
	
	quit VAL_$J(" ",N).extract(1,N-VAL.length())

ERR(String S)	// ERROR - Internal error section
	
	type public Boolean ER
	type public String ET
	
	set ER=1
	if S.get() set S=S_"-"
	set ET=S.get()_ET.get()
	
	do EXC
	
	quit

ZTSTART	// Error trap

	do ZE^UTLERR
	 
	do EXC 
	
	quit

EXC	// Log error into DAYEND
	
	type public Number %ZTSEQ
	type public String ET,FCID
	
	type String DESC
	
	set DESC="Outgoing GIRO Interface"
	
	do LOG^UTLEXC($T(+0),"*",DESC,FCID.get(),%ZTSEQ.get(),ET.get())
	kill ET,%ZTSEQ
	
	quit

END	// END execution - close outfile, archive it, and quit.
	
	type public Number RECCNT
	type public String FILENAME
	
	if +RECCNT=0 do { quit
		type RecordEFTOUT0 eftout0=Db.getRecord("EFTOUT0","SJD=:%SystemDate",1)
		set eftout0.endseq=eftout0.endseq-1
		do eftout0.save()
		close FILENAME:DELETE
		}
		
	close FILENAME
	
	// copy file to archive directory then finish
	do ARCH
	
	quit

ARCH	// Copies the file to the archive directory specified in CUVAR

	type public String ARCHDIR,FILENAME

	type String STRFL,X
	
	set STRFL=ARCHDIR
	set X=$$COPYFIL^%OSSCRPT(FILENAME,STRFL) 
	
	quit
	
HEADER	// Build header for output file
	
	type public String FILENAME,BRCDV

	type Number GSP,HSEQ,X
	type String GNO,HEAD
	
	// Interbanking sending remittance heading (pg. 52)
	type RecordEFTOUT0 eftout0=Db.getRecord("EFTOUT0","SJD=:%SystemDate")
	set HSEQ=eftout0.endseq
	if HSEQ.isNull() set HSEQ=1
	
	if HSEQ.toString().length()'=4 set HSEQ=$$ZEROS(HSEQ,4)	// header sequence
	
	set HEAD="01"				// 2 - header record "01"
	set HEAD=HEAD_"002"			// 3 - file type "002"

	set HEAD=HEAD_"1"			// 1 - qualifier/Hungarian

	set GNO=CUVAR.iso
	if GNO.length()>3 do {
		set GNO1=GNO.extract(1,3)
		set GNO2=GNO.extract(4,8)
		set GNO=GNO1_"   "_GNO2
		}
	
	if GNO.length()<6 do {
		set GSP=6-GNO.length()
		for X=1:1:GSP set GNO=GNO_" "
		}
	
	set HEAD=HEAD_GNO				// 6 - bank's GIRO number
	
	set BRCDV="00011"				// 5 - branch code + check digit
	set HEAD=HEAD_BRCDV
	
	set HEAD=HEAD_%SystemDate.toString("YEARMMDD")	// 8 - today's system date
	set HEAD=HEAD_HSEQ				// 4 - header sequence

	set HEAD=HEAD_"0"				// 1 - priority
	set HEAD=HEAD_"0"				// 1 - emergency
	set HEAD=HEAD_"1"				// 1 - qualifier

	set HEAD=HEAD_%SystemDate.toString("YEARMMDD")	// 8 - today's system date

	set HEAD=HEAD_CUVAR.%crcd		        // 3 - banks' base currency
	set HEAD=HEAD_"C"				// 1 - credit/debit code
	set HEAD=HEAD_"0"				// 1 - inter/intra code

	for X=1:1:18 set HEAD=HEAD_"0"
	use FILENAME write HEAD
	quit

TRAILER	// Build trailer for output file
	
	type public Number RECCNT,TOTAMT
	type public String FILENAME
	
	type Number X
	type String TRAIL

	// Interbanking sending remittance ending (pg. 57)
	
	set TRAIL="03"					//item code

	if RECCNT.toString().length()'=4 set RECCNT=$$ZEROS(RECCNT,4)
	set TRAIL=TRAIL_RECCNT				//number of transactions
	
	if TOTAMT.toString().length()'=18 set TOTAMT=$$ZEROS(TOTAMT,18)
	set TRAIL=TRAIL_TOTAMT_"00"			//total amount
	
	for X=1:1:4 set TRAIL=TRAIL_" "			//reserved future
	use FILENAME write !,TRAIL
	quit
	
FNAME()	// Generate output file name - GYMMDD99.002

	type Date DT
	type Number GSEQ
	type String NAME
	
	set DT=%SystemDate
	set DT=DT.toString("YEARMMDD")
	set DT=DT.toString().extract(4,8)		// YMMDD

	type RecordEFTOUT0 eftout0=Db.getRecord("EFTOUT0","SJD=:%SystemDate",1)
	set GSEQ=eftout0.endseq
	if GSEQ.isNull() set GSEQ=1 
	set eftout0.endseq=GSEQ+1
	do eftout0.save()

	set GSEQ=$$ZEROS(GSEQ,2)
	set NAME="G"_DT_GSEQ_".002"
	
	quit NAME

GCHARSET() // Define the characters that can not be used for the GIRO

	type Number I
	type String X
	
	set X=""
	for I=1:1:9,11,12,14:1:31,127:1:192,194:1:200,202,203,204,206:1:210,212,215,216,217,221:1:224,226:1:232,234,235,236,238:1:242,244,247,248,249,253:1:256 set X=X_$C(I)
	
	quit X
 #OPTION ResultClass ON
Public String vSIG()	quit "60299^32016^Balasubramonian Sankar^21908"	// Signature - LTD^TIME^USER^SIZE
