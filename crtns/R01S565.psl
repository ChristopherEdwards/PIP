R01S565	// SCA645A - Reposted Returned Items Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:01 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date EFD
	type String VIN3="ALL"
	type String VIN4="ALL"
	type String VIN5="ALL"
	type String VIN6="ALL"

	set RID="SCA645A"
	set RN="Reposted Returned Items Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("EFD")="|10|||||||D|Transaction Date|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN3")="|255||[SPV]CID|[SPV]CID:DISTINCT:NOVAL||D EXT^DBSQRY||T|Account|||||"
	set %TAB("VIN4")="|255||[SPV]UID|[SPV]UID:DISTINCT:NOVAL||D EXT^DBSQRY||T|User ID|||||"
	set %TAB("VIN5")="|255||[SPV]BRCD|[SPV]BRCD:DISTINCT:NOVAL||D EXT^DBSQRY||T|Branch Code|||||"
	set %TAB("VIN6")="|255||[SPV]OVR|[SPV]OVR:DISTINCT:NOVAL||D EXT^DBSQRY||T|Restriction|||||"

	set %READ="IO/REQ,EFD#1,VIN3#0,VIN4#0,VIN5#0,VIN6#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date EFD
	type public String VIN3,VIN4,VIN5,VIN6
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,CMT,CONAM,DESC,DESC2,RID,RN,STBL,UTBL,VL,VLOF,VRF(),VSTATS(),ZFL,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA645A",RN="Reposted Returned Items Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA645A","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[SPV]CID#1#12,[SPV]BRCD#14#6,[SPV]UID#21#6,[SPV1]ETC#28#12,[SPV1]TOT#41#12,[CIF]NAM#54#38\[SPV]TSEQ#34#6,[CIF]PAD1#54#40\[CIF]PCITY#54#20"

	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		set DQQRY(SEQ)="[SPV]TJD=<<EFD>>",SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[SPV]CID "_VIN3,SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[SPV]UID "_VIN4,SEQ=SEQ+1
		if VIN5.get()="" set VIN5="ALL"
		if VIN5'="ALL" set DQQRY(SEQ)="[SPV]BRCD "_VIN5,SEQ=SEQ+1
		if VIN6.get()="" set VIN6="ALL"
		if VIN6'="ALL" set DQQRY(SEQ)="[SPV]OVR "_VIN6,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("SPV,SPV1,LN,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",3)="WC2|"_"Account"_"|VIN3|"_VIN3.get()
		set VBNRINFO("PROMPTS",4)="WC2|"_"User ID"_"|VIN4|"_VIN4.get()
		set VBNRINFO("PROMPTS",5)="WC2|"_"Branch Code"_"|VIN5|"_VIN5.get()
		set VBNRINFO("PROMPTS",6)="WC2|"_"Restriction"_"|VIN6|"_VIN6.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Reposted Returned Items Report"
		set VBNRINFO("PGM")="R01S565"
		set VBNRINFO("RID")="SCA645A"
		set VBNRINFO("TABLES")="SPV,SPV1,LN,CIF"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,SPV]CID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,SPV]TJD"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,SPV]BRCD"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,SPV]UID"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,SPV]TSEQ"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,SPV]TYP"
		set VBNRINFO("ORDERBY",7)="[SYSDEV,SPV]OVR"

		set VBNRINFO("DOC",1)="This report provides a list of all on-line and batch transactions"
		set VBNRINFO("DOC",2)="that were posted through Returned Items Repost processing and associated with"
		set VBNRINFO("DOC",3)="them restrictions were subsequently overridden by the repost teller."
		set VBNRINFO("DOC",4)="This report is keyed by account.  Similar reports are available which are"
		set VBNRINFO("DOC",5)="keyed by restriction (SCA089) and user (SCA141)."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:7 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"SPV.CID,SPV.TJD,SPV.BRCD,SPV.UID,SPV.TSEQ,SPV.TYP,"
	set VSELECT=VSELECT_"SPV.OVR,SPV1.ETC,SPV1.TOT,CIF.NAM,CIF.PAD1,CIF.PCI"
	set VSELECT=VSELECT_"TY,CIF.PSTATE,CIF.PZIP,SPV1.TSO,SPV.VALUE,SPV.GRP,"
	set VSELECT=VSELECT_"LN.CLS"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"SPV,SPV1,LN,CIF",VWHERE,"SPV.CID,SPV.TJD,SPV.BRCD,SPV.UID,SPV.TSEQ,SPV.TYP,SPV.OVR","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5="",vovc6="",vovc7=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5,vovc6,vc6,vovc7,vc7
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5,vovc6=vc6,vovc7=vc7
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18
	set vc1=V.piece($C(9),1)			// SPV.CID
	set vc2=V.piece($C(9),2)			// SPV.TJD
	set vc3=V.piece($C(9),3)			// SPV.BRCD
	set vc4=V.piece($C(9),4)			// SPV.UID
	set vc5=V.piece($C(9),5)			// SPV.TSEQ
	set vc6=V.piece($C(9),6)			// SPV.TYP
	set vc7=V.piece($C(9),7)			// SPV.OVR
	set vc8=V.piece($C(9),8)			// SPV1.ETC
	set vc9=V.piece($C(9),9)			// SPV1.TOT
	set vc10=V.piece($C(9),10)			// CIF.NAM
	set vc11=V.piece($C(9),11)			// CIF.PAD1
	set vc12=V.piece($C(9),12)			// CIF.PCITY
	set vc13=V.piece($C(9),13)			// CIF.PSTATE
	set vc14=V.piece($C(9),14)			// CIF.PZIP
	set vc15=V.piece($C(9),15)			// SPV1.TSO
	set vc16=V.piece($C(9),16)			// SPV.VALUE
	set vc17=V.piece($C(9),17)			// SPV.GRP
	set vc18=V.piece($C(9),18)			// LN.CLS
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	type public Boolean ZFL
	type public String STBL,UTBL
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1,vskp(6)=1,vskp(7)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	if 'vskp(7).get() do VDTL7 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(7)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5,vc6,vovc6,vc7,vovc7
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1
	if vb4!(vovc4'=vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1
	if vb5!(+vovc5'=+vc5) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1
	if vb6!(vovc6'=vc6) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(7) set vs(7)=1 do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(7)=VT(7)+1
	quit

VDTL5	// Detail
	type public String %TIM,CMT,DESC,DESC2,EFD,IOSL,STBL,UTBL,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),ZFL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	quit:VD(5)  set VD(5)=1				// Print flag
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set V=vc1,VO=V do VP1 quit:VFMQ!verror.get()  set V=$J(V,12) do VP2 quit:VFMQ!verror.get()  set VL=V
	set V=vc3,VO=V set V=$J(V,6) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",13-VL.length())_V		// [SYSDEV,SPV]BRCD
	set V=vc4,VO=V set V=$J(V,6) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V		// [SYSDEV,SPV]UID
	set V=vc8,VO=V set V=$E(V,1,12) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",27-VL.length())_V		// [SYSDEV,SPV1]ETC
	set V=vc9,VO=V set V=$S(V="":"",1:$J(vc9,0,2)) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",40-VL.length())_V		// [SYSDEV,SPV1]TOT
	set V=vc10,VO=V set V=$E(V,1,38) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V		// [SYSDEV,CIF]NAM
	if 'VL.translate(" ").isNull() do VOM
	set V=vc5,VO=V set V=$J(V,6) do VP8 quit:VFMQ!verror.get()  set VL="                                 "_V
	set V=vc11,VO=V set V=$E(V,1,40) do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",53-VL.length())_V		// [SYSDEV,CIF]PAD1
	if 'VL.translate(" ").isNull() do VOM
	set V=vc12,VO=V set V=$E(V,1,20) do VP10 quit:VFMQ!verror.get()  set VL="                                                     "_V
	set V=vc13,VO=V set V=$E(V,1,2) do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",75-VL.length())_V		// [SYSDEV,CIF]PSTATE
	set V=vc14,VO=V set V=$E(V,1,10) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",79-VL.length())_V		// [SYSDEV,CIF]PZIP
	if 'VL.translate(" ").isNull() do VOM
	quit

VDTL7	// Detail
	type public String %TIM,CMT,DESC,DESC2,EFD,IOSL,STBL,UTBL,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),ZFL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	if VLC+2>IOSL do VHDG0 quit:VFMQ

	do VP13 quit:VFMQ!verror.get()  set V=$E(DESC,1,40) set VL="                                                                                            "_V
	if VLC+2>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                                                                            "_$E(DESC2,1,40)
	if VLC+2>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                                                                            "_$E(CMT,1,40)
	if VLC+2>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CMT,CONAM,DESC,DESC2,EFD,RID,RN,STBL,UTBL,VL,ZFL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="Transaction Date: "
	set VL=VL_$J("",18-VL.length())_$J($$DAT^%ZM(EFD),10)
	do VOM
	set VL="" do VOM
	set VL="     "_"Account Branch   User Tran Code          Amount Customer Name                          Description"
	do VOM
	set VL="                        "_"ID     Sequence              Address                                Comment"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,SPV]CID

	type public String vc15
	type public Boolean ZFL

	if $$FIELD^UTSO(vc15,"RETSPV")=1 set ZFL=1
	else  set ZFL=0
	quit

VP2	// Column post-processor - [SYSDEV,SPV]CID

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP3	// Column post-processor - [SYSDEV,SPV]BRCD

	type public Boolean ZFL
	type public String V
	
	if ZFL<>1 set V=" "
	quit

VP4	// Column post-processor - [SYSDEV,SPV]UID

	type public Boolean ZFL
	type public String V
	
	if ZFL<>1 set V=" "
	quit

VP5	// Column post-processor - [SYSDEV,SPV1]ETC

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP6	// Column post-processor - [SYSDEV,SPV1]TOT

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP7	// Column post-processor - [SYSDEV,CIF]NAM

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP8	// Column post-processor - [SYSDEV,SPV]TSEQ

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP9	// Column post-processor - [SYSDEV,CIF]PAD1

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP10	// Column post-processor - [SYSDEV,CIF]PCITY

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP11	// Column post-processor - [SYSDEV,CIF]PSTATE

	type public Boolean ZFL
	type public String V

	if ZFL<>1 set V=" "
	quit

VP12	// Column post-processor - [SYSDEV,CIF]PZIP

	type public Boolean ZFL
	type public String V
	
	if ZFL<>1 set V=" "
	quit

VP13	// Column pre-processor - Variable: DESC

	type public String vc6,vc16,vc1,vc7,vc17,vc18
	type public Boolean ZFL
	type public String CMT,DESC,DESC2

	if ZFL<>1 set (CMT,DESC,DESC2)=" " quit

	type Number I
	type String TYP

	set (DESC2,CMT)=""
	set TYP=vc6

	if TYP="RFLG" set DESC=$$RFLG(TYP,.CMT,vc16,vc1,vc7,vc17)
	else  set DESC=$$OVR(TYP,vc16,vc18,vc7)

	if DESC.length()<41 set DESC2=CMT,CMT="" quit

	for I=40:-1:1 quit:DESC.extract(I)=" "
	set DESC2=DESC.extract(I+1,99)
	set DESC=DESC.extract(1,I-1)
	quit


RFLG(String TYP,String CMT,String VAL,Number CID,String OVR,String GRP) //

	type public String UTBL

	type String DESC

	type RecordRFLG rflg

	set rflg=Db.getRecord("RFLG","CID=:CID,RFLG=:OVR",1)
	if rflg.getMode() set CMT=rflg.tcmt

	if GRP.isNull() set GRP="*"

	if 'UTBL(TYP,GRP,OVR).exists() do {
		type RecordUTBLRFLG urflg=Db.getRecord("UTBLRFLG","GRP=:GRP,RFLG=:OVR",1)
		if 'urflg.getMode() set UTBL(TYP,GRP,OVR)=""
		else  set UTBL(TYP,GRP,OVR)=urflg.desc

		if 'UTBL(TYP,GRP,OVR).isNull() quit
		set UTBL(TYP,GRP,OVR)=$$^MSG(6343)	// No description
		}
	set DESC=UTBL(TYP,GRP,OVR)

	// Variable insertion
	if DESC["<"&(DESC[">") set DESC=DESC.piece("<",1)_VAL_DESC.piece(">",2)
	quit DESC


OVR(String OVRFLG,String AMT,String CLASS,String OVR)	//

	type public String STBL

	type String A,D1

	if CLASS="" set CLASS="*"

	if 'STBL(OVRFLG,CLASS,OVR).exists() do {
		type RecordOVRLIT ovrlit=Db.getRecord("OVRLIT","OVR=:OVR",1)
		if 'ovrlit.getMode() set A=""
		else  set A=$S(CLASS="D":ovrlit.desc,CLASS="L":ovrlit.desc1,1:ovrlit.desc2)

		if A["<" set A=A.piece("<",1)
		if A["(" set A=A.piece("(",1)

		set STBL(OVRFLG,CLASS,OVR)=A
		}

	set D1=STBL(OVRFLG,CLASS,OVR)

	if D1.extract(D1.length())="$" do {
		if AMT.isNull() set D1=D1.piece("$",1)
		else  set D1=D1_AMT
		}
	else  if 'AMT.isNull() set D1=D1_" "_AMT

	quit D1
