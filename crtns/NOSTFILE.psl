NOSTFILE(RecordNOSTTRF nosttrf, String vpar, Boolean vparNorm) // NOSTTRF - Nostro Transfers File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (44)             12/08/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = nosttrf.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(nosttrf,.vxins(),10,"|")
	if %O = 1 quit:'nosttrf.isChanged()  do AUDIT^UCUTILN(nosttrf,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TRREFNO").exists() do vkchged quit             // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("NOSTTRF",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("NOSTTRF","TRREFNO = :nosttrf.trrefno") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TRREFNO

	type RecordNOSTTRF nosttrf = Db.getRecord("NOSTTRF","TRREFNO=:TRREFNO")
	if (%ProcessMode = 2) do {
		do nosttrf.setMode(2)

		do NOSTFILE(nosttrf,vpar)
	}
	else  do VINDEX(nosttrf)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordNOSTTRF nosttrf

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("NOSTTRF","TRREFNO = :nosttrf.trrefno") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(nosttrf,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^NOSTTRF(vobj(nosttrf,-3),n)=vobj(nosttrf,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(nosttrf,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(nosttrf,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^NOSTTRF(vobj(nosttrf,-3),n)=vobj(nosttrf,n)
			#ENDBYPASS
		}

	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.nosttrf) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordNOSTTRF nosttrf
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^NOSTTRF(vobj(nosttrf,-3),n)) quit:n=""  if '$D(vobj(nosttrf,n)),$D(^NOSTTRF(vobj(nosttrf,-3),n))#2 set vobj(nosttrf,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordNOSTTRF nosttrf

	if 'vkeychg.get(),nosttrf.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.nosttrf)                  // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^NOSTTRF(vobj(nosttrf,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordNOSTTRF nosttrf

	// Type local variables for access keys for defaults
	type public String TRREFNO

	if nosttrf.edt.isNull() set nosttrf.edt = +$H          // edt
	if nosttrf.mt200ack.isNull() set nosttrf.mt200ack = 0  // mt200ack
	if nosttrf.mt200flg.isNull() set nosttrf.mt200flg = 0  // mt200flg
	if nosttrf.mt210ack.isNull() set nosttrf.mt210ack = 0  // mt210ack
	if nosttrf.mt210flg.isNull() set nosttrf.mt210flg = 0  // mt210flg
	if nosttrf.status.isNull() set nosttrf.status = 1      // status
	if nosttrf.swack.isNull() set nosttrf.swack = 0        // swack
	type public String %UID
	if nosttrf.uid.isNull() set nosttrf.uid = %UID         // uid
	quit


vreqn // Validate required data items

	type public RecordNOSTTRF nosttrf

	if nosttrf.mt200ack.isNull() do vreqerr("MT200ACK") quit
	if nosttrf.mt200flg.isNull() do vreqerr("MT200FLG") quit
	if nosttrf.mt210ack.isNull() do vreqerr("MT210ACK") quit
	if nosttrf.mt210flg.isNull() do vreqerr("MT210FLG") quit
	if nosttrf.swack.isNull() do vreqerr("SWACK") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordNOSTTRF nosttrf

	if nosttrf.trrefno.isNull() do vreqerr("TRREFNO") quit

	if 'vobj(nosttrf,-100,5,"").order().isNull() do {
		if vx("MT200FLG").exists(),nosttrf.mt200flg.isNull() do vreqerr("MT200FLG") quit
		if vx("MT210FLG").exists(),nosttrf.mt210flg.isNull() do vreqerr("MT210FLG") quit
	}
	if 'vobj(nosttrf,-100,6,"").order().isNull() do {
		if vx("MT200ACK").exists(),nosttrf.mt200ack.isNull() do vreqerr("MT200ACK") quit
		if vx("MT210ACK").exists(),nosttrf.mt210ack.isNull() do vreqerr("MT210ACK") quit
		if vx("SWACK").exists(),nosttrf.swack.isNull() do vreqerr("SWACK") quit
	}
		if vx("MT200ACK").exists(),nosttrf.mt200ack.isNull() do vreqerr("MT200ACK") quit
		if vx("MT200FLG").exists(),nosttrf.mt200flg.isNull() do vreqerr("MT200FLG") quit
		if vx("MT210ACK").exists(),nosttrf.mt210ack.isNull() do vreqerr("MT210ACK") quit
		if vx("MT210FLG").exists(),nosttrf.mt210flg.isNull() do vreqerr("MT210FLG") quit
		if vx("SWACK").exists(),nosttrf.swack.isNull() do vreqerr("SWACK") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("NOSTTRF","MSG",1767,"NOSTTRF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordNOSTTRF nosttrf

	if (%O = 2) do vload

	if vobj(nosttrf,1).exists() do {

		set X = nosttrf.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"NOSTTRF.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if nosttrf.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		set X = nosttrf.edt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EDT", vRM) quit
		if nosttrf.efdkey.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EFDKEY", vRM) quit
		set X = nosttrf.mdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDT", vRM) quit
		set X = nosttrf.status if 'X.isNull(),'Db.isDefined("STBLDSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
		if nosttrf.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
		set X = nosttrf.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	}

	if vobj(nosttrf,2).exists() do {

		set X = nosttrf.fnostro if 'X.isNull(),'Db.isDefined("DEP","X") set vRM = $$^MSG(1485,X) do vdderr("FNOSTRO", vRM) quit
		if nosttrf.paidby.length()>11 set vRM = $$^MSG(1076,11) do vdderr("PAIDBY", vRM) quit
		if nosttrf.paidby1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAIDBY1", vRM) quit
		if nosttrf.paidby2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAIDBY2", vRM) quit
		if nosttrf.paidby3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAIDBY3", vRM) quit
		if nosttrf.paidby4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAIDBY4", vRM) quit
		set X = nosttrf.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	}

	if vobj(nosttrf,3).exists() do {

		if nosttrf.payto.length()>11 set vRM = $$^MSG(1076,11) do vdderr("PAYTO", vRM) quit
		if nosttrf.payto1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAYTO1", vRM) quit
		if nosttrf.payto2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAYTO2", vRM) quit
		if nosttrf.payto3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAYTO3", vRM) quit
		if nosttrf.payto4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PAYTO4", vRM) quit
		set X = nosttrf.tnostro if 'X.isNull(),'Db.isDefined("DEP","X") set vRM = $$^MSG(1485,X) do vdderr("TNOSTRO", vRM) quit
	}

	if vobj(nosttrf,4).exists() do {

		set X = nosttrf.inter if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("INTER", vRM) quit
		if nosttrf.inter1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER1", vRM) quit
		if nosttrf.inter2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER2", vRM) quit
		if nosttrf.inter3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER3", vRM) quit
		if nosttrf.inter4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER4", vRM) quit
	}

	if vobj(nosttrf,5).exists() do {

		if '("01"[nosttrf.MT200FLG) set vRM=$$^MSG(742,"L") do vdderr("MT200FLG", vRM) quit
		set X = nosttrf.mt200pri if 'X.isNull(),'Db.isDefined("STBLPRIORITY","X") set vRM = $$^MSG(1485,X) do vdderr("MT200PRI", vRM) quit
		if '("01"[nosttrf.MT210FLG) set vRM=$$^MSG(742,"L") do vdderr("MT210FLG", vRM) quit
		set X = nosttrf.mt210pri if 'X.isNull(),'Db.isDefined("STBLPRIORITY","X") set vRM = $$^MSG(1485,X) do vdderr("MT210PRI", vRM) quit
	}

	if vobj(nosttrf,6).exists() do {

		if '("01"[nosttrf.MT200ACK) set vRM=$$^MSG(742,"L") do vdderr("MT200ACK", vRM) quit
		if '("01"[nosttrf.MT210ACK) set vRM=$$^MSG(742,"L") do vdderr("MT210ACK", vRM) quit
		if '("01"[nosttrf.SWACK) set vRM=$$^MSG(742,"L") do vdderr("SWACK", vRM) quit
	}

	if vobj(nosttrf,7).exists() do {

		if nosttrf.sendrec1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDREC1", vRM) quit
		if nosttrf.sendrec2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDREC2", vRM) quit
		if nosttrf.sendrec3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDREC3", vRM) quit
		if nosttrf.sendrec4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDREC4", vRM) quit
		if nosttrf.sendrec5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDREC5", vRM) quit
		if nosttrf.sendrec6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDREC6", vRM) quit
	}

	if vobj(nosttrf,8).exists() do {

		set X = nosttrf.constant if 'X.isNull(),'Db.isDefined("UTBLECOACT","X") set vRM = $$^MSG(1485,X) do vdderr("CONSTANT", vRM) quit
		set X = nosttrf.ds1 if 'X.isNull(),'Db.isDefined("UTBLFOREX","X") set vRM = $$^MSG(1485,X) do vdderr("DS1", vRM) quit
		set X = nosttrf.ds2 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("DS2", vRM) quit
	}

	if vobj(nosttrf,9).exists() do {

		if nosttrf.relref.length()>16 set vRM = $$^MSG(1076,16) do vdderr("RELREF", vRM) quit
	}
	if nosttrf.trrefno.length()>14 set vRM = $$^MSG(1076,14) do vdderr("TRREFNO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("NOSTTRF","MSG",979,"NOSTTRF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordNOSTTRF nosttrf) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EDT").exists()!vx("STATUS").exists() do vi1(.nosttrf)
	}
	do vi1(.nosttrf)

	quit
	

vi1(RecordNOSTTRF nosttrf) // Maintain NOSTINDX index entries (Nostro Transfers by Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = nosttrf.edt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = nosttrf.status
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = nosttrf.trrefno

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^NOSTINDX(v1,v2,v3)) do vidxerr("NOSTINDX")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^NOSTINDX(v1,v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EDT").exists() set v1=vx("EDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("STATUS").exists() set v2=vx("STATUS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^NOSTINDX(v1,v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("NOSTTRF")

	while ds.next() do {
		type RecordNOSTTRF nosttrf=ds.getRecord("NOSTTRF")
		if vlist.contains("VINDEX") do VINDEX(.nosttrf) quit
		if vlist.contains("NOSTINDX") do vi1(.nosttrf)
	}

	quit


public VIDXBLD1(RecordNOSTTRF nosttrf, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.nosttrf) quit
	if vlist.contains("NOSTINDX") do vi1(.nosttrf)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("NOSTTRF","MSG",1225,"NOSTTRF."_di)

	quit


vkchged // Access key changed

	type public RecordNOSTTRF nosttrf

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("TRREFNO")
	set voldkey = vux.piece("|",1),vobj(nosttrf,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(nosttrf,-3) = vnewkey // Copy new keys into object
	type RecordNOSTTRF vnewrec = nosttrf.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("NOSTTRF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(nosttrf,-3) = vux.piece("|",1)                // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "NOSTFILE"	// Location of index program

