public UFLG(RecordACN acn)
	/*

	Output Variables: OVR(CID,"RFLG",RFLG)  Override Array

	---- Revision History ------------------------------------------------
	04/26/06 - GiridharanL - 19660
		   Modified Customer restrictions section to look for CIF flag
		   instead of RPA. Modified CHECK section to change the if
		   condition to quit if Group not equal to RPA OR CIF rather 
		   than RPA AND CIF.
		   
	09/12/05 - S.Krishnan - 16884
		   Modified UFLG as public
		   
	06/13/02 - ZWITKOWITSM - 43583
		   Converted to PSL.

		    
	----------------------------------------------------------------------
	
	*/

	type Boolean XRFLG = 0
	type Number ACN, CID, RPASEQ
        type String RFLG        
        
	set CID = acn.cid

	// Account restrictions
	type ResultSet rs = Db.select("RFLG,STDT,EXDT,TCMT", "RFLG", "CID=:CID")
	
	while rs.next() do {

		set XRFLG = 1

		do CHECK(rs.getCol("STDT"), rs.getCol("EXDT"), rs.getCol("TCMT"), acn.grp, rs.getCol("RFLG"))
		}

	// Look for retirement restrictions
	type ResultSet rs1 = Db.select("ACN,RPASEQ,RFLG", "RFLGRPACID", "CID=:CID")
	
	while rs1.next() do {

		set ACN = rs1.getCol("ACN")
		set RPASEQ = rs1.getCol("RPASEQ")
		set RFLG = rs1.getCol("RFLG")
		set XRFLG = 1

		type RecordRFLGRPA rflgrpa = Db.getRecord("RFLGRPA", "ACN = :ACN, RPASEQ = :RPASEQ, RFLG = :RFLG")

		do CHECK(rflgrpa.stdt, rflgrpa.exdt, rflgrpa.tcmt, "RPA", RFLG)
		}

	// Look for customer restrictions
	type ResultSet rs2 = Db.select("ACN,RFLG", "RFLGCCID", "CID=:CID")
	
	while rs2.next() do {

		set ACN = rs2.getCol("ACN")
		set RFLG = rs2.getCol("RFLG")
		set XRFLG = 1

		type RecordRFLGC rflgc = Db.getRecord("RFLGC", "ACN = :ACN, RFLG = :RFLG")

		do CHECK(rflgc.stdt, rflgc.exdt, rflgc.tcmt, "CIF", RFLG)
		}

	// No restrictions are found - reset flag on the account record
	if 'XRFLG set acn.rflg = 0

	quit


CHECK(Date STDT,		// Start Date
      Date EXDT,		// Expiration Date
      String TCMT,		// Transaction Comment
      String GRP,		// Group
      String RFLG)		// Restriction

	type public Number CID, CRT
	type public String OVR(,,)

	// Expiration Date Exceeded
	if EXDT, (%SystemDate > EXDT) quit

	// Prior to Restriction Start Date
	if (STDT > %SystemDate) quit

	type RecordUTBLRFLG utblrflg = Db.getRecord("UTBLRFLG", "GRP = :GRP, RFLG = :RFLG", 1)
	
	if 'utblrflg.getMode() quit

	// Online, Transaction Access Restriction
	if CRT.get(), 'utblrflg.tares quit

	set OVR(CID,"RFLG",RFLG).piece("|",1) = TCMT

	if (GRP '= "CIF"), (GRP '= "RPA") quit

        set OVR(CID,"RFLG",RFLG).piece("|",4) = GRP
        
	quit 


Public FLG(RecordDEP dep,ITC)	// External entry point
	/*
	               Restrictions
	      1 = Restrict all debits
	      2 = Restrict all credits
	      3 = Restrict both debits and credits
	      4 = Restrict debits outside the grace period
	      5 = Restrict credits outside the grace period
	      6 = Restrict both debits and credits outside the grace period
	               Variables
	      Input : CID
	              ITC
	     Output : OVR(CID,"OVR",X) (if applicable)
	*/

	new DC,DT,GRCDYS,JD,TYPE

	if dep.flg="" quit

	set TYPE=dep.type
	set JD=$S(%EffectiveDate:%EffectiveDate,1:%SystemDate)
	set DC=$$DC^UTRB($E(ITC),dep.trb)

	// Debit transaction requires approval
	if dep.flg=1 quit:DC  set OVR(dep.cid,"OVR","FLG1")="" quit

	// Credit transaction requires approval
	if dep.flg=2 quit:'DC  set OVR(dep.cid,"OVR","FLG2")="" quit

	// All transactions require approval
	if dep.flg=3 set OVR(dep.cid,"OVR","FLG3")="" quit

	// Debit transaction after initial debit requires approval
	if dep.flg=7,dep.cntdr,DC=0 set OVR(dep.cid,"OVR","FLG7")="" quit

	// Credit transaction after initial credit requires approval
	if dep.flg=8,dep.cntcr,DC=1 set OVR(dep.cid,"OVR","FLG8")="" quit

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE")
	type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE")

	// Grace restrictions
	set GRCDYS=prodctl.grcdys
	if GRCDYS="" do {

		type RecordCUVAR cuvar=Db.getRecord("CUVAR")

		set GRCDYS=cuvar.grace
		}

	set DT=dep.mld
	if 'DT set DT=dep.odt

	/*
	 If the maturity date is blank, set the restriction based on
	 the date of first deposit
	*/
	if dep.mld="",proddftd.dgrace'="" do {
		set DT=+dep.dfdep
		set GRCDYS=proddftd.dgrace-1
		}
	if 'DT quit

	if DT+GRCDYS+1>JD do NOTDYS(.dep) quit

	// Withdrawals outside grace period require approval
	if dep.flg=4 quit:DC  set OVR(dep.cid,"OVR","FLG4")="" quit

	// Deposits outside grace period require approval
	if dep.flg=5 quit:'DC  set OVR(dep.cid,"OVR","FLG5")="" quit

	// Deposits/withdrawals outside grace period require approval
	if dep.flg=6 set OVR(dep.cid,"OVR","FLG6")="" quit

	do NOTDYS(.dep)

	quit


NOTDYS(RecordDEP dep)	// Notice Day Violations

	new NOTEFD,NOTEXP

	if (dep.notice="")!(dep.notice=0) quit 

	set NOTEFD=$$NOTEFD^DEPDBS(dep.notmin,dep.notice,dep.notnbc,dep.notdat)
	set NOTEXP=$$NOTEXP^DEPDBS(dep.notmax,dep.notnbc,NOTEFD)

	// Notice day violation
	if JD<NOTEFD set OVR(dep.cid,"OVR","FLG"_dep.flg)="" quit
	if JD>NOTEXP set OVR(dep.cid,"OVR","FLG"_dep.flg)=""

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60387^56747^Lakshmi Giridharan^4876"	// Signature - LTD^TIME^USER^SIZE
