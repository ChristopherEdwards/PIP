MPSTYPFL(RecordUTBLMPSPROD utblmpsprod, String vpar, Boolean vparNorm) // UTBLMPSPROD - MPS Card Extract Options - Product Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             01/18/2006
	// Trigger Definition (2)                      12/20/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblmpsprod.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblmpsprod,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblmpsprod,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CO = utblmpsprod.co
	type String CARDTYP = utblmpsprod.cardtyp
	type String TYP = utblmpsprod.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CO").exists()!vx("CARDTYP").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLMPSPROD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLMPSPROD","CO = :utblmpsprod.co and CARDTYP = :utblmpsprod.cardtyp and TYP = :utblmpsprod.typ") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CO
	type public String CARDTYP
	type public String TYP

	type RecordUTBLMPSPROD utblmpsprod = Db.getRecord("UTBLMPSPROD","CO=:CO,CARDTYP=:CARDTYP,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do utblmpsprod.setMode(2)

		do MPSTYPFL(utblmpsprod,vpar)
	}
	else  do VINDEX(utblmpsprod)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLMPSPROD utblmpsprod

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLMPSPROD","CO = :utblmpsprod.co and CARDTYP = :utblmpsprod.cardtyp and TYP = :utblmpsprod.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblmpsprod,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblmpsprod,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblmpsprod)) S ^UTBL("MPS",vobj(utblmpsprod,-3),vobj(utblmpsprod,-4),vobj(utblmpsprod,-5))=vobj(utblmpsprod)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.utblmpsprod) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLMPSPROD utblmpsprod

	if vpar["/INDEX/" do VINDEX(.utblmpsprod)              // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblmpsprod,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("MPS",vobj(utblmpsprod,-3),vobj(utblmpsprod,-4),vobj(utblmpsprod,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLMPSPROD utblmpsprod

	// Type local variables for access keys for defaults
	type public String CO
	type public String CARDTYP
	type public String TYP

	if utblmpsprod.acnaddr.isNull() set utblmpsprod.acnaddr = 0 // acnaddr
	if utblmpsprod.fndopt.isNull() set utblmpsprod.fndopt = 0 // fndopt
	if utblmpsprod.mpsaddcrd.isNull() set utblmpsprod.mpsaddcrd = 1 // mpsaddcrd
	if utblmpsprod.mpsjntcrd.isNull() set utblmpsprod.mpsjntcrd = 0 // mpsjntcrd
	quit


vreqn // Validate required data items

	type public RecordUTBLMPSPROD utblmpsprod

	if utblmpsprod.acnaddr.isNull() do vreqerr("ACNADDR") quit
	if utblmpsprod.fndopt.isNull() do vreqerr("FNDOPT") quit
	if utblmpsprod.mpsjntcrd.isNull() do vreqerr("MPSJNTCRD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLMPSPROD utblmpsprod

	if utblmpsprod.co.isNull() do vreqerr("CO") quit
	if utblmpsprod.cardtyp.isNull() do vreqerr("CARDTYP") quit
	if utblmpsprod.typ.isNull() do vreqerr("TYP") quit

		if vx("ACNADDR").exists(),utblmpsprod.acnaddr.isNull() do vreqerr("ACNADDR") quit
		if vx("FNDOPT").exists(),utblmpsprod.fndopt.isNull() do vreqerr("FNDOPT") quit
		if vx("MPSJNTCRD").exists(),utblmpsprod.mpsjntcrd.isNull() do vreqerr("MPSJNTCRD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMPSPROD","MSG",1767,"UTBLMPSPROD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vbi1 // Trigger BI_TYP - Before Insert of Product Type

	type public RecordUTBLMPSPROD utblmpsprod
 	/*
 	----Revision History---------------------------------------------------

	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 System Area Clean up.
	
 	-----------------------------------------------------------------------
	*/
	
	
 	type public Boolean ER
	
 	/*
 	Make sure that this type is not set up for the same company under another
 	card type.  If it is, the error "Product already exists" will be returned.
 	*/
	 
 	type ResultSet rs=Db.select("TYP","UTBLMPSPROD","CO=:utblmpsprod.co AND TYP=:utblmpsprod.typ")
 	if 'rs.isEmpty() do { quit:ER
 	 	
 	// Product ~p1 already exists
 	do Runtime.setErrMSG("UTBLMPSPROD",2266,rs.getCol("TYP")) 
 	}
	
 	// Product type as input is invalid
 	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:utblmpsprod.typ",1)
 	if 'prodctl.getMode() do { quit:ER
 	
 	// Invalid product type
 	do Runtime.setErrMSG("UTBLMPSPROD",1503)
 	}
 	
 	quit

vbu1 // Trigger BU_TYP - Before Update of TYP

	type public RecordUTBLMPSPROD utblmpsprod
	do utblmpsprod.setAuditFlag(1)
 	/*
 	----Revision History---------------------------------------------------

	 12/12/05 - SPR - 18555
		    Card Management - General DBI3 System Area Clean up.
	
 	-----------------------------------------------------------------------
	*/
	
	
 	/*
 	Make sure this product type is not set up under another card type for
 	this company.  If it is, the message "Product already exists" will be
 	returned.
 	*/
	
 	type public Boolean ER
	
 	type ResultSet rs=Db.select("TYP","UTBLMPSPROD","CO=:utblmpsprod.co AND TYP=:utblmpsprod.typ")
 	if 'rs.isEmpty() do { quit:ER
 	
 	// Product ~p1 already exists
 	do Runtime.setErrMSG("UTBLMPSPROD",2266,rs.getCol("TYP"))
 	}
	
	 // Product type as input is invalid
	
 	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:utblmpsprod.typ",1)
 	if 'prodctl.getMode() do { quit:ER
 	
 	// Invalid product type
 	do Runtime.setErrMSG("UTBLMPSPROD",1503)
	}
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLMPSPROD utblmpsprod

	if utblmpsprod.co.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CO", vRM) quit
	if utblmpsprod.cardtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CARDTYP", vRM) quit
	set X = utblmpsprod.typ if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TYP", vRM) quit
	if utblmpsprod.acardtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ACARDTYP", vRM) quit
	if '("01"[utblmpsprod.ACNADDR) set vRM=$$^MSG(742,"L") do vdderr("ACNADDR", vRM) quit
	if '("01"[utblmpsprod.FNDOPT) set vRM=$$^MSG(742,"L") do vdderr("FNDOPT", vRM) quit
	set X = utblmpsprod.mpsaddcrd if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MPSADDCRD", vRM) quit
	if '("01"[utblmpsprod.MPSJNTCRD) set vRM=$$^MSG(742,"L") do vdderr("MPSJNTCRD", vRM) quit
	set X = utblmpsprod.ofst if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("OFST", vRM) quit
	set X = utblmpsprod.orderby if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ORDERBY", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMPSPROD","MSG",979,"UTBLMPSPROD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordUTBLMPSPROD utblmpsprod) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.utblmpsprod)

	quit
	

vi1(RecordUTBLMPSPROD utblmpsprod) // Maintain MPSPRODCARD index entries (MPS Product by Card Type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = utblmpsprod.co
	type String v2 = utblmpsprod.typ
	type String v3 = utblmpsprod.cardtyp

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^UTBL("MPS",vobj(utblmpsprod,-3),vobj(utblmpsprod,-4),vobj(utblmpsprod,-5)))#2,'$D(^MPSPRCRD(v1,v2,v3)) do vidxerr("MPSPRODCARD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^MPSPRCRD(v1,v2,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^MPSPRCRD(v1,v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("UTBLMPSPROD")

	while ds.next() do {
		type RecordUTBLMPSPROD utblmpsprod=ds.getRecord("UTBLMPSPROD")
		if vlist.contains("VINDEX") do VINDEX(.utblmpsprod) quit
		if vlist.contains("MPSPRODCARD") do vi1(.utblmpsprod)
	}

	quit


public VIDXBLD1(RecordUTBLMPSPROD utblmpsprod, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.utblmpsprod) quit
	if vlist.contains("MPSPRODCARD") do vi1(.utblmpsprod)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("UTBLMPSPROD","MSG",1225,"UTBLMPSPROD."_di)

	quit


vkchged // Access key changed

	type public RecordUTBLMPSPROD utblmpsprod

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CO").exists() set vux("CO") = vx("CO")
	if vx("CARDTYP").exists() set vux("CARDTYP") = vx("CARDTYP")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = utblmpsprod.co_","_utblmpsprod.cardtyp_","_utblmpsprod.typ // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" if vx("TYP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblmpsprod.co_","_utblmpsprod.cardtyp_","_utblmpsprod.typ // Copy new keys into object
	type RecordUTBLMPSPROD vnewrec = utblmpsprod.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLMPSPROD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLMPSPROD utblmpsprod

	if vux("CO").exists() set utblmpsprod.co = vux("CO").piece("|",i)
	if vux("CARDTYP").exists() set utblmpsprod.cardtyp = vux("CARDTYP").piece("|",i)
	if vux("TYP").exists() set utblmpsprod.typ = vux("TYP").piece("|",i)
	quit

VIDXPGM()	quit "MPSTYPFL"	// Location of index program

