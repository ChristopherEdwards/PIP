LNRPFIL(RecordDAYENDLNRP dayendlnrp, String vpar, Boolean vparNorm) // DAYENDLNRP - Loan Provision Posting Files Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (12)             11/22/2003
	// Trigger Definition (5)                      05/16/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dayendlnrp.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dayendlnrp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dayendlnrp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String PROVNPDT = dayendlnrp.provnpdt
	type String CID = dayendlnrp.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PROVNPDT").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DAYENDLNRP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DAYENDLNRP","PROVNPDT = :dayendlnrp.provnpdt and CID = :dayendlnrp.cid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PROVNPDT
	type public String CID

	type RecordDAYENDLNRP dayendlnrp = Db.getRecord("DAYENDLNRP","PROVNPDT=:PROVNPDT,CID=:CID")
	if (%ProcessMode = 2) do {
		do dayendlnrp.setMode(2)

		do LNRPFIL(dayendlnrp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDAYENDLNRP dayendlnrp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DAYENDLNRP","PROVNPDT = :dayendlnrp.provnpdt and CID = :dayendlnrp.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dayendlnrp)) S ^DAYEND(vobj(dayendlnrp,-3),"PROVPOST",vobj(dayendlnrp,-4))=vobj(dayendlnrp)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDAYENDLNRP dayendlnrp


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DAYEND(vobj(dayendlnrp,-3),"PROVPOST",vobj(dayendlnrp,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDAYENDLNRP dayendlnrp

	// Type local variables for access keys for defaults
	type public String PROVNPDT
	type public String CID

	if dayendlnrp.provrflg.isNull() set dayendlnrp.provrflg = 0 // provrflg
	quit


vreqn // Validate required data items

	type public RecordDAYENDLNRP dayendlnrp

	if dayendlnrp.provrflg.isNull() do vreqerr("PROVRFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDAYENDLNRP dayendlnrp

	if dayendlnrp.provnpdt.isNull() do vreqerr("PROVNPDT") quit
	if dayendlnrp.cid.isNull() do vreqerr("CID") quit

		if vx("PROVRFLG").exists(),dayendlnrp.provrflg.isNull() do vreqerr("PROVRFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DAYENDLNRP","MSG",1767,"DAYENDLNRP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ACLS").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PROVBAL").exists()!vx("COLOFF").exists()!vx("OVACLS").exists()!vx("PROVEXPD").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDAYENDLNRP dayendlnrp
	if vx("").order().isNull() do AUDIT^UCUTILN(dayendlnrp,.vx(),1,"|") quit
	if vx("PROVTOT").exists()!vx("PROVPCT").exists()!vx("PROVADJ").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(dayendlnrp,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert Dayend Provision Posting

	type public RecordDAYENDLNRP dayendlnrp
								/*
								---- Revision History ------------------------------------------------
	
	03/15/06 - TITOVE - CR 20144
		   Modified to get LN object with a "1" qualifier,
		   since deposit accounts also go through this process.

								04/19/05 - TITOVE - CR 15089
																			Modified as part of DBI2 project.
	
								*/

	type public Number CID, ER

	type RecordACN acn = Db.getRecord("ACN", "CID = :CID")
	type RecordLN ln = Db.getRecord("LN", "CID = :CID", 1)

	/*
	The next group of data items are the values in the account at the time
	the dayend file is created. These fields are used for reporting and are
	not updated with modification to ACN.
	*/

	// Change to column ~p1 not allowed
	if (dayendlnrp.provbal '= acn.provbal) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVBAL") quit:ER

	if (dayendlnrp.coloff '= ln.coloff) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.COLOFF") quit:ER

	if (dayendlnrp.ovacls '= acn.provcat) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVCAT") quit:ER

	if (dayendlnrp.provexpd '= acn.provexpd) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVEXPD") quit:ER 

	quit
	

vau1 // Trigger AU_ACLS - After Update Provision Classification

	type public RecordDAYENDLNRP dayendlnrp
	/*
	----Revision History---------------------------------------------------
	02/11/00 - CHOK - 31126
		   Converted isChanged method.

	09/23/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/

	/*
	Override indicator is needed for expiration processing when the system
	calculated provision category is changed.
	*/
	if 'dayendlnrp.isChanged("ACLS","SYSTEM") set dayendlnrp.provrflg=1
	quit
	

vau2 // Trigger AU_NOCHANGE - Dayend Provision Fields NO CHANGE

	type public RecordDAYENDLNRP dayendlnrp
								/*
								---- Revision History ------------------------------------------------
	
								04/19/05 - TITOVE - CR 15089
																			Modified as part of DBI2 project.
	
								*/

	type public Number ER

	/*
	The next group of data items are the values in the account at the time
	the dayend file is created.  These fields are used for reporting and are
	not updated with modification to ACN and are not to change.
	*/

	// Change to column ~p1 not allowed
	if (dayendlnrp.provbal.oldVal '= dayendlnrp.provbal) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVBAL") quit:ER
	
	if (dayendlnrp.coloff.oldVal '= dayendlnrp.coloff) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.COLOFF") quit:ER 

	if (dayendlnrp.ovacls.oldVal '= dayendlnrp.ovacls) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVCAT") quit:ER 

	if (dayendlnrp.provexpd.oldVal '= dayendlnrp.provexpd) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVEXPD") quit:ER 

	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert Dayend Provision Posting

	type public RecordDAYENDLNRP dayendlnrp
								/*
								---- Revision History ------------------------------------------------
	
	05/15/06 - TITOVE - CR 21315
		   Modified to reflect changed arguments in PROVBAL^LNCDI call.

	03/15/06 - TITOVE - CR 20144
		   Modified to get LN object with a "1" qualifier,
		   since deposit accounts also go through this process.

								04/19/05 - TITOVE - CR 15089
																			Modified as part of DBI2 project.
	
								*/

	type public Number CID, ER

	type RecordACN acn = Db.getRecord("ACN", "CID = :CID")
	type RecordLN ln = Db.getRecord("LN", "CID = :CID", 1)

	/*
	The dayend provision posting file is created by the system in a batch
	dayend process.  This file can be created or modified to override the
	calculated provision balance.	

	The next group of data items are the values in the account at the time
	the dayend file is created. These fields are used for reporting and are
	not updated with modification to ACN.
	*/

	// Account Provision Balance
	if dayendlnrp.provbal.isNull() set dayendlnrp.provbal = acn.provbal  

	// Account Collection Officer
	if dayendlnrp.coloff.isNull() set dayendlnrp.coloff = ln.coloff      

	// Account Provision Category
	if dayendlnrp.ovacls.isNull() set dayendlnrp.ovacls = acn.provcat   

	// Account Provision Expiration Date
	if dayendlnrp.provexpd.isNull() set dayendlnrp.provexpd = acn.provexpd

	// Calculated Provision is overriden	
	set dayendlnrp.provrflg = 1

	// User Identification of modification
	set dayendlnrp.uid = %UserID            
	
	// Provision Total Amount - Calculate provision percentage and adjustment
	if 'dayendlnrp.provtot.isNull(),dayendlnrp.provpct.isNull() do { quit:ER 

		type Number BAL, PROVPCT
		
		// Data required in Data Item ~p1
		if dayendlnrp.acls.isNull() do Runtime.setErrMSG("DAYENDLNRP",7531,"DAYENDLNRP.ACLS") quit:ER

		set BAL=$S(acn.cls="D":acn.bal,1:ln.balcmp)

		set PROVPCT = $$PROVPCT^LNCDI(dayendlnrp.acls,dayendlnrp.provtot,dayendlnrp.cid)

		// Change to column ~p1 not allowed
		if 'dayendlnrp.provpct.isNull(),(dayendlnrp.provpct '= PROVPCT) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVPCT") quit:ER 

		set dayendlnrp.provpct = PROVPCT

		// Change to column ~p1 not allowed
		if 'dayendlnrp.provadj.isNull(),(dayendlnrp.provadj '= (dayendlnrp.provtot - dayendlnrp.provbal)) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVPCT") quit:ER 

		// Set the dayend provision adjustment amount
		set dayendlnrp.provadj = dayendlnrp.provtot - dayendlnrp.provbal
		}
	
	// Provision Percentage - Calculate provision total and adjustment
	if 'dayendlnrp.provpct.isNull(),dayendlnrp.provtot.isNull() do { quit:ER 

		type Number BAL, PROVTOT, TARGET
		
		// Data required in Data Item ~p1
		if dayendlnrp.acls.isNull() do Runtime.setErrMSG("DAYENDLNRP",7531,"DAYENDLNRP.ACLS") quit:ER

		set TARGET = $$PROVBAL^LNCDI(.acn, dayendlnrp.acls, dayendlnrp.cid)

		set PROVTOT = ((dayendlnrp.provpct / 100) * TARGET).roundCur(acn.crcd)

		// Change to column ~p1 not allowed
		if 'dayendlnrp.provtot.isNull(),(dayendlnrp.provtot '= PROVTOT) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVTOT") quit:ER 

		set dayendlnrp.provtot = PROVTOT

		// Change to column ~p1 not allowed
		if 'dayendlnrp.provadj.isNull(),(dayendlnrp.provadj '= (dayendlnrp.provtot - dayendlnrp.provbal)) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVPCT") quit:ER 

		// Set the dayend provision adjustment amount
		set dayendlnrp.provadj = dayendlnrp.provtot - dayendlnrp.provbal
		}
	
	// Provision Adjustment - Calculate provision total and percentage
	if 'dayendlnrp.provadj.isNull(),dayendlnrp.provpct.isNull(),dayendlnrp.provtot.isNull() do { quit:ER 

		type Number BAL, PROVPCT
		
		// Change to column ~p1 not allowed
		if 'dayendlnrp.provtot.isNull(),(dayendlnrp.provtot '= (dayendlnrp.provadj + dayendlnrp.provbal)) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVTOT") quit:ER 

		set dayendlnrp.provtot = dayendlnrp.provadj + dayendlnrp.provbal

		set PROVPCT = $$PROVPCT^LNCDI(dayendlnrp.acls,dayendlnrp.provtot,dayendlnrp.cid)

		// Change to column ~p1 not allowed
		if 'dayendlnrp.provpct.isNull(),(dayendlnrp.provpct '= PROVPCT) do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVPCT") quit:ER 

		set dayendlnrp.provpct = PROVPCT

		// Provision total amount requires provision asset classification
		// Data required in Data Item ~p1
		if dayendlnrp.provtot,dayendlnrp.acls.isNull() do Runtime.setErrMSG("DAYENDLNRP",7531,"DAYENDLNRP.ACLS") quit:ER
		}
		
	quit

vbu1 // Trigger BU_TOT_PCT_ADJ - Adjustments for amount changes

	type public RecordDAYENDLNRP dayendlnrp
	do dayendlnrp.setAuditFlag(1)
								/*
								---- Revision History ------------------------------------------------
	
	05/15/06 - TITOVE - CR 21315
		   Modified to reflect changed arguments in PROVBAL^LNCDI call.

								04/19/05 - TITOVE - CR 15089
																			Modified as part of DBI2 project.
	
								*/

	type public Number CID, ER

	type Number BAL, PROVPCT, PROVTOT, TARGET

	type RecordACN acn = Db.getRecord("ACN", "CID = :CID")
	
	// Calculate the new provision total amount with the changed provision
	// percentage.

	// Data required in Data Item ~p1
	if dayendlnrp.acls.isNull() do Runtime.setErrMSG("DAYENDLNRP",7531,"DAYENDLNRP.ACLS") quit:ER
	
	// Calculate the provision percentage with the change provision total amount.
	if dayendlnrp.isChanged("PROVTOT"),'dayendlnrp.provtot.isNull() do { quit:ER 

		// Set provision override flag indicator which is used for 
		// expiration processing during the posting of the file.
		set dayendlnrp.provrflg = 1
	
		set PROVPCT = $$PROVPCT^LNCDI(dayendlnrp.acls,dayendlnrp.provtot,dayendlnrp.cid)
		/*
		If the provision percentage is changed, and not by the system,
		verify the changed provision percentage equals the calculated
		provision percentage.
		*/
		// Change to column ~p1 not allowed
		if (dayendlnrp.provpct '= PROVPCT),dayendlnrp.provpct,dayendlnrp.isChanged("PROVPCT"),'dayendlnrp.isChanged("PROVPCT","SYSTEM") do Runtime.setErrMSG(412,"DAYENDLNRP.PROVPCT") quit:ER

		set dayendlnrp.provpct = PROVPCT
	
		/*
		If the provision adjustment is changed, and not by the system, verify
		the changed provision adjustment amount equals the calculated
		provision adjustment.
		*/
		// Change to column ~p1 not allowed
		if (dayendlnrp.provadj '= (dayendlnrp.provtot - dayendlnrp.provbal)),dayendlnrp.isChanged("PROVADJ"),'dayendlnrp.isChanged("PROVADJ","SYSTEM") do Runtime.setErrMSG(412,"DAYENDLNRP.PROVADJ") quit:ER 

		set dayendlnrp.provadj = dayendlnrp.provtot - dayendlnrp.provbal
		}
	

	// If the provision total amount was changed, and not by the system, verify
	// the changed total amount equals the new calculated total provision amount.
	if dayendlnrp.isChanged("PROVPCT"),'dayendlnrp.isChanged("PROVPCT","SYSTEM"),'dayendlnrp.provpct.isNull() do { quit:ER 
	
		// Set provision override flag indicator which is used for 
		// expiration processing during the posting of the file.
		set dayendlnrp.provrflg = 1
	
		set TARGET = $$PROVBAL^LNCDI(.acn, dayendlnrp.acls, dayendlnrp.cid)

		set PROVTOT = ((dayendlnrp.provpct / 100) * TARGET).roundCur(acn.crcd)

		// Change to column ~p1 not allowed
		if (dayendlnrp.provtot '= PROVTOT),dayendlnrp.provtot,dayendlnrp.isChanged("PROVTOT"),'dayendlnrp.isChanged("PROVTOT","SYSTEM") do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVTOT") quit:ER 

		set dayendlnrp.provtot = PROVTOT
	
		/*
		If the provision adjustment amount was changed, and not by the
		system, verify the changed adjustment amount equals the calculated
		adjustment amount.
		*/
		// Change to column ~p1 not allowed
		if (dayendlnrp.provadj '= (dayendlnrp.provtot - dayendlnrp.provbal)),dayendlnrp.isChanged("PROVADJ"),'dayendlnrp.isChanged("PROVADJ","SYSTEM") do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVADJ") quit:ER 

		set dayendlnrp.provadj = dayendlnrp.provtot - dayendlnrp.provbal
		}
	
	// Process changes if PROVADJ was changed outside of the filer.	
	if (dayendlnrp.provadj.oldVal '= dayendlnrp.provadj),'(dayendlnrp.provadj.oldVal '= dayendlnrp.provadj) do { quit:ER 
	
		// If the provision total was change and not by the system, verify the
		// changed total amount equals the new calculate provision total amount.
		// Change to column ~p1 not allowed
		if (dayendlnrp.provtot '= PROVTOT),dayendlnrp.isChanged("PROVTOT"),'dayendlnrp.isChanged("PROVTOT","SYSTEM") do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVTOT") quit:ER 

		set dayendlnrp.provtot = PROVTOT
	
		// Provision total amount requires provision asset classification
		// Data required in Data Item ~p1
		if dayendlnrp.provtot,dayendlnrp.acls.isNull() do Runtime.setErrMSG("DAYENDLNRP",7531,"DAYENDLNRP.ACLS") quit:ER 
	
		// Calculate the new provision percentage amount with the changed
		// provision adjustment
		set PROVPCT = $$PROVPCT^LNCDI(dayendlnrp.acls,dayendlnrp.provtot,dayendlnrp.cid)
	
		// If the provision percentage was change and not by the system, verify
		// the changed total amt equals the new calculated provision percentage.
		// Change to column ~p1 not allowed
		if (dayendlnrp.provpct '= PROVPCT),dayendlnrp.isChanged("PROVPCT"),'dayendlnrp.isChanged("PROVPCT","SYSTEM") do Runtime.setErrMSG("DAYENDLNRP",412,"DAYENDLNRP.PROVPCT") quit:ER 
		
		set dayendlnrp.provpct = PROVPCT
		}
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDAYENDLNRP dayendlnrp

	set X = dayendlnrp.provnpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROVNPDT", vRM) quit
	set X = dayendlnrp.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = dayendlnrp.acls if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ACLS", vRM) quit
	if dayendlnrp.coloff.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLOFF", vRM) quit
	set X = dayendlnrp.ovacls if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("OVACLS", vRM) quit
	set X = dayendlnrp.provadj if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DAYENDLNRP.PROVADJ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dayendlnrp.provbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DAYENDLNRP.PROVBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dayendlnrp.provexpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROVEXPD", vRM) quit
	set X = dayendlnrp.provpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,0,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"DAYENDLNRP.PROVPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[dayendlnrp.PROVRFLG) set vRM=$$^MSG(742,"L") do vdderr("PROVRFLG", vRM) quit
	set X = dayendlnrp.provtot if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,0,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DAYENDLNRP.PROVTOT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if dayendlnrp.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DAYENDLNRP","MSG",979,"DAYENDLNRP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDAYENDLNRP dayendlnrp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("PROVNPDT").exists() set vux("PROVNPDT") = vx("PROVNPDT")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = dayendlnrp.provnpdt_","_dayendlnrp.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dayendlnrp.provnpdt_","_dayendlnrp.cid // Copy new keys into object
	type RecordDAYENDLNRP vnewrec = dayendlnrp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DAYENDLNRP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDAYENDLNRP dayendlnrp

	if vux("PROVNPDT").exists() set dayendlnrp.provnpdt = vux("PROVNPDT").piece("|",i)
	if vux("CID").exists() set dayendlnrp.cid = vux("CID").piece("|",i)
	quit
