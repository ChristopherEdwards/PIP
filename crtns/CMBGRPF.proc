CMBGRPF(RecordCMBGRP cmbgrp, String vpar, Boolean vparNorm) // CMBGRP - Combined Statement Group Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             01/24/2005
	// Trigger Definition (5)                      12/17/2004
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cmbgrp.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(cmbgrp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(cmbgrp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = cmbgrp.acn
	type String STMGRP = cmbgrp.stmgrp

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("STMGRP").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CMBGRP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CMBGRP","ACN = :cmbgrp.acn and STMGRP = :cmbgrp.stmgrp") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String STMGRP

	type RecordCMBGRP cmbgrp = Db.getRecord("CMBGRP","ACN=:ACN,STMGRP=:STMGRP")
	if (%ProcessMode = 2) do {
		do cmbgrp.setMode(2)

		do CMBGRPF(cmbgrp,vpar)
	}
	else  do VINDEX(cmbgrp)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCMBGRP cmbgrp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CMBGRP","ACN = :cmbgrp.acn and STMGRP = :cmbgrp.stmgrp") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(cmbgrp))  S ^CIF(vobj(cmbgrp,-3),110,vobj(cmbgrp,-4))=vobj(cmbgrp)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.cmbgrp)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.cmbgrp) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCMBGRP cmbgrp

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.cmbgrp)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.cmbgrp)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CIF(vobj(cmbgrp,-3),110,vobj(cmbgrp,-4))          // Delete Record
	quit


vinit // Initialize default values

	type public RecordCMBGRP cmbgrp

	// Type local variables for access keys for defaults
	type public String ACN
	type public String STMGRP

	if cmbgrp.rest.isNull() set cmbgrp.rest = 0            // rest
	quit


vreqn // Validate required data items

	type public RecordCMBGRP cmbgrp

	if cmbgrp.addr.isNull() do vreqerr("ADDR") quit
	if cmbgrp.rest.isNull() do vreqerr("REST") quit
	if cmbgrp.sfre.isNull() do vreqerr("SFRE") quit
	if cmbgrp.sndt.isNull() do vreqerr("SNDT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCMBGRP cmbgrp

	if cmbgrp.acn.isNull() do vreqerr("ACN") quit
	if cmbgrp.stmgrp.isNull() do vreqerr("STMGRP") quit

		if vx("ADDR").exists(),cmbgrp.addr.isNull() do vreqerr("ADDR") quit
		if vx("REST").exists(),cmbgrp.rest.isNull() do vreqerr("REST") quit
		if vx("SFRE").exists(),cmbgrp.sfre.isNull() do vreqerr("SFRE") quit
		if vx("SNDT").exists(),cmbgrp.sndt.isNull() do vreqerr("SNDT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CMBGRP","MSG",1767,"CMBGRP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCMBGRP cmbgrp
	if 'cmbgrp.acn.isNull() set vfkey("^CIF("_""""_cmbgrp.acn_""""_","_1_")")="CMBGRP(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCMBGRP cmbgrp
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":cmbgrp.acn") set vERRMSG = $$^MSG(8563,"CMBGRP(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("SFRE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCMBGRP cmbgrp
	if vx("").order().isNull() do AUDIT^UCUTILN(cmbgrp,.vx(),1,"|") quit
	if vx("ISTND").exists()!vx("ISFRE").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(cmbgrp,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - Check group 1 restriction

	type public RecordCMBGRP cmbgrp
	/*
	---------- Revision History ------------------------------------------

	04/25/01 - SCOTTC - 44515 
		   Add paren to the I (XSFRE'=ACCTSFRE)&(PRODCLS'="") not
		   evaluating properly.	

	09/08/99 - CARROLLJ - 33890
		   Convert to PSL.	

	11/18/98 - SCOTTC - 28927
		   Added to modify Statement Frequency on account when
		   statement frequency is modified in a statement group.
	-----------------------------------------------------------------------
	*/

	// Group 1 can not be restricted
	if cmbgrp.stmgrp=1,cmbgrp.rest do Runtime.setErrMSG("CMBGRP",476) quit:ER 

	//   Make Statement Frequency on Account match Frequency on group
	new ACCTSFRE,PRODCLS,RETVAL,XACN,XCID,XSFRE
	set XACN=cmbgrp.acn set XSFRE=cmbgrp.sfre set XSTMGRP=cmbgrp.stmgrp
	//   Find Account number
	
	new rs 
	type ResultSet rs=Db.select("CID","CMBSTM","STMGRP=:XSTMGRP AND ACN=:XACN") 
	if rs.isEmpty() quit
	set XCID=rs.next(),XCID=rs.getCol(1)

	if XCID="" quit 
	//   Find frequency on account
	set RETVAL=Db.getOneRow("CLS,SFRE","ACN","XCID")
	set PRODCLS=$P(RETVAL,$C(9),1) 
	set ACCTSFRE=$P(RETVAL,$C(9),2)

	//   Update Frequency on account if not = Statement Group Frequency
	if (XSFRE'=ACCTSFRE),(PRODCLS'="") do { quit:ER 
		if PRODCLS="L" do Db.update("LN","SFRE=:XSFRE","CID=:XCID")
		if PRODCLS="D" do Db.update("DEP","SFRE=:XSFRE","CID=:XCID")
		}
	if cmbgrp.addr="" set cmbgrp.addr="CIF"
	quit 

vau1 // Trigger AU_SFRE - AFTER UPDATE FOR STATEMENT FREQUENCY

	type public RecordCMBGRP cmbgrp
	/*
	---------- Revision History ------------------------------------------
	
	11/18/98 - SCOTTC - 28927
		   Added to modify Statement Frequency on account when
		   statement frequency is modified in a statement group.

	-----------------------------------------------------------------------	
	*/

	//   Make Statement Frequency on Account matches Frequency on group
	new ACID,PRODCLS,RETVAL,XACN,XCID,XSFRE
	set XACN=cmbgrp.acn 
	set XSFRE=cmbgrp.sfre 
	set XSTMGRP=cmbgrp.stmgrp

	//   Find Account number
	new rs 
	type ResultSet rs=Db.select("CID","CMBSTM","ACN=:XACN AND STMGRP=:XSTMGRP")
	if rs.isEmpty() quit
	while rs.next() do {
		 set ACID=rs.getCol(1) quit:ER  


		//   Update Frequency on account
		set RETVAL=Db.getOneRow("CLS,SFRE","ACN","ACID")
		set PRODCLS=$P(RETVAL,$C(9),1) 
		set ACCTSFRE=$P(RETVAL,$C(9),2)
		if XSFRE'=ACCTSFRE do { quit:ER 
			if PRODCLS="L" do Db.update("LN","SFRE=:XSFRE","CID=:ACID")
			if PRODCLS="D" do Db.update("DEP","SFRE=:XSFRE","CID=:ACID")
			}
		}
	if cmbgrp.addr="" set cmbgrp.addr=CID
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete - Statement Group

	type public RecordCMBGRP cmbgrp
	if $G(par("CASDEL")) quit              // Cascade delete from CIF filer
	
	new XACN,XSTMGRP,data,match,sqlcnt
	set XACN=cmbgrp.acn
	set XSTMGRP=cmbgrp.stmgrp
	
	// Statement group 1 cannot be deleted
	if XSTMGRP=1 do Runtime.setErrMSG("CMBGRP",2536) quit:ER 
	
	// Check to ensure that no accounts are owned by group's primary CIF
	new rs 
	type ResultSet rs=Db.select("CID","CMBSTM","STMGRP=:XSTMGRP AND ACN=:XACN")
	if rs.isEmpty() quit
	set match=0
	while rs.next()  do { quit:ER  quit:match  
		set ACCOUNT=rs.getCol(1) 	
		set owner=Db.getOneRow("ACN","ACN","ACCOUNT") 
		if owner=XACN set match=1
		}
	
	// Safe to delete
	if 'match quit 
	
	// CIF ~p1 is primary owner of account(s)
	set MES=$$^MSG(550,cmbgrp.acn)          //CIF ~p1 is the primary owner of account(s)

	// ~p1 in group ~p2.  Cannot delete.
	do Runtime.setErrMSG("CMBGRP",3042,"MES~XSTMGRP") quit:ER 
	
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert of statement group

	type public RecordCMBGRP cmbgrp
								/*
										---------------- Revision History-----------------------------------^
											04/24/00 - SCOTTC - 35500
		Check Interim statement next date to ensure it is
								before the system date.  Populate the interim next date if interim
	statement frequency is defined and next date is not.
	
								*/
 	
	if cmbgrp.sndt="" do { quit:ER
		if cmbgrp.sfre="" quit 
		set cmbgrp.sndt=$$NJD^UFRE(%SystemDate,cmbgrp.sfre) quit:ER 
		}

	if cmbgrp.istnd do { quit:ER
		if cmbgrp.istnd<%SystemDate do Runtime.setErrXBAD("DEP","ANLNSD") quit:ER
		if 'cmbgrp.isfre do Runtime.setErrXBAD("DEP","ANLFRQ") quit:ER
			   }
								if 'cmbgrp.istnd do { quit:ER
																if cmbgrp.isfre="" quit
																set cmbgrp.istnd=$$NJD^UFRE(%SystemDate,cmbgrp.isfre) quit:ER
																}
	quit

vbu1 // Trigger BU_ISTND - Before update Interim stmt next date

	type public RecordCMBGRP cmbgrp
	do cmbgrp.setAuditFlag(1)
	//Interim Analysis Next Date required
	if '(cmbgrp.istnd)&(cmbgrp.isfre) do Runtime.setErrXBAD("DEP","ANLIND") quit:ER

	//Make sure interim statement next date is greater than system date
	if cmbgrp.istnd do { quit:ER
				if cmbgrp.istnd<%SystemDate do Runtime.setErrXBAD("DEP","ANLNSD") quit:ER
				if 'cmbgrp.isfre do Runtime.setErrXBAD("DEP","ANLFRQ") quit:ER
																			}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCMBGRP cmbgrp

	set X = cmbgrp.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = cmbgrp.stmgrp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("STMGRP", vRM) quit
	if cmbgrp.addr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ADDR", vRM) quit
	if cmbgrp.desc.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DESC", vRM) quit
	set X = cmbgrp.irastgrp if 'X.isNull(),'Db.isDefined("UTBLIRASTGRP","X") set vRM = $$^MSG(1485,X) do vdderr("IRASTGRP", vRM) quit
	set X = cmbgrp.isfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CMBGRP]ISFRE",0) if 'vRM.get().isNull() do vdderr("ISFRE", vRM) quit
	set X = cmbgrp.istld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISTLD", vRM) quit
	set X = cmbgrp.istnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISTND", vRM) quit
	if '("01"[cmbgrp.REST) set vRM=$$^MSG(742,"L") do vdderr("REST", vRM) quit
	set X = cmbgrp.sfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CMBGRP]SFRE",0) if 'vRM.get().isNull() do vdderr("SFRE", vRM) quit
	set X = cmbgrp.sndt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SNDT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CMBGRP","MSG",979,"CMBGRP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCMBGRP cmbgrp)	//CMBGRP Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.cmbgrp)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=CIFH_I
			}
		else  if TSRC="O" do {
			do vj1(.cmbgrp)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CIFH_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj2(.cmbgrp)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=CIFH_U
			}
		else  if TSRC="O" do {
			do vj2(.cmbgrp)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CIFH_U
			}
		}

	quit


vj1(RecordCMBGRP cmbgrp)	// CIFH_I  Table CIFH  History - Insert New Statement Group

	type RecordCIF cif=Db.getRecord("CIF","ACN=:cmbgrp.acn",1)


	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cif.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$STMGRP^MSCFUNCS(cmbgrp.stmgrp)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCMBGRP cmbgrp)	// CIFH_U  Table CIFH  History transaction

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=cmbgrp.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^MSCFUNCS(cmbgrp.acn,"CMBGRP",vdi,vold,vnew,cmbgrp.stmgrp)
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordCMBGRP cmbgrp) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("SNDT").exists() do vi1(.cmbgrp)
		if vx("ISTND").exists() do vi2(.cmbgrp)
	}
	do vi1(.cmbgrp)
	do vi2(.cmbgrp)

	quit
	

vi1(RecordCMBGRP cmbgrp) // Maintain CMBGRP index entries (DAYEND Statement Group)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = cmbgrp.sndt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = cmbgrp.acn
	type String v4 = cmbgrp.stmgrp

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^CIF(vobj(cmbgrp,-3),110,vobj(cmbgrp,-4)))#2,'$D(^DAYEND(v1,"STM",v3,v4)) do vidxerr("CMBGRP")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"STM",v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SNDT").exists() set v1=vx("SNDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"STM",v3,v4)
	quit

vi2(RecordCMBGRP cmbgrp) // Maintain ISTND index entries (Interim Statement Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = cmbgrp.istnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = cmbgrp.acn
	type String v4 = cmbgrp.stmgrp

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^CIF(vobj(cmbgrp,-3),110,vobj(cmbgrp,-4)))#2,'$D(^DAYEND(v1,"ISTND",v3,v4)) do vidxerr("ISTND")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"ISTND",v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ISTND").exists() set v1=vx("ISTND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"ISTND",v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CMBGRP")

	while ds.next() do {
		type RecordCMBGRP cmbgrp=ds.getRecord("CMBGRP")
		if vlist.contains("VINDEX") do VINDEX(.cmbgrp) quit
		if vlist.contains("CMBGRP") do vi1(.cmbgrp)
		if vlist.contains("ISTND") do vi2(.cmbgrp)
	}

	quit


public VIDXBLD1(RecordCMBGRP cmbgrp, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.cmbgrp) quit
	if vlist.contains("CMBGRP") do vi1(.cmbgrp)
	if vlist.contains("ISTND") do vi2(.cmbgrp)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CMBGRP","MSG",1225,"CMBGRP."_di)

	quit


vkchged // Access key changed

	type public RecordCMBGRP cmbgrp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("STMGRP").exists() set vux("STMGRP") = vx("STMGRP")
	do vkey(1) set voldkey = cmbgrp.acn_","_cmbgrp.stmgrp  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = cmbgrp.acn_","_cmbgrp.stmgrp  // Copy new keys into object
	type RecordCMBGRP vnewrec = cmbgrp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CMBGRP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCMBGRP cmbgrp

	if vux("ACN").exists() set cmbgrp.acn = vux("ACN").piece("|",i)
	if vux("STMGRP").exists() set cmbgrp.stmgrp = vux("STMGRP").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordCMBGRP cmbgrp
	type public String vpar

	do Db.delete("CMBSTM","ACN=:cmbgrp.acn AND STMGRP=:cmbgrp.stmgrp",vpar) // Cascade delete

	quit

VIDXPGM()	quit "CMBGRPF"	// Location of index program

