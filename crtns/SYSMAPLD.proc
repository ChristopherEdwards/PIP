SYSMAPLD(RecordSYSMAPLITDTA sysmaplitdta, String vpar, Boolean vparNorm) // SYSMAPLITDTA - System Map - Literal Data References Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              10/18/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = sysmaplitdta.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(sysmaplitdta,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(sysmaplitdta,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ELEMTYPE").exists()!vx("ELEMENT").exists()!vx("TABLE").exists()!vx("COLUMN").exists()!vx("FUNC").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SYSMAPLITDTA",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SYSMAPLITDTA","ELEMTYPE = :sysmaplitdta.elemtype and ELEMENT = :sysmaplitdta.element and TABLE = :sysmaplitdta.table and COLUMN = :sysmaplitdta.column and FUNC = :sysmaplitdta.func") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ELEMTYPE
	type public String ELEMENT
	type public String TABLE
	type public String COLUMN
	type public String FUNC

	type RecordSYSMAPLITDTA sysmaplitdta = Db.getRecord("SYSMAPLITDTA","ELEMTYPE=:ELEMTYPE,ELEMENT=:ELEMENT,TABLE=:TABLE,COLUMN=:COLUMN,FUNC=:FUNC")
	if (%ProcessMode = 2) do {
		do sysmaplitdta.setMode(2)

		do SYSMAPLD(sysmaplitdta,vpar)
	}
	else  do VINDEX(sysmaplitdta)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSYSMAPLITDTA sysmaplitdta

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SYSMAPLITDTA","ELEMTYPE = :sysmaplitdta.elemtype and ELEMENT = :sysmaplitdta.element and TABLE = :sysmaplitdta.table and COLUMN = :sysmaplitdta.column and FUNC = :sysmaplitdta.func") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(sysmaplitdta))  S ^SYSMAP("LITDATA",vobj(sysmaplitdta,-3),vobj(sysmaplitdta,-4),vobj(sysmaplitdta,-5),vobj(sysmaplitdta,-6),vobj(sysmaplitdta,-7))=vobj(sysmaplitdta)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.sysmaplitdta) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSYSMAPLITDTA sysmaplitdta

	if vpar["/INDEX/" do VINDEX(.sysmaplitdta)             // Delete index entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^SYSMAP("LITDATA",vobj(sysmaplitdta,-3),vobj(sysmaplitdta,-4),vobj(sysmaplitdta,-5),vobj(sysmaplitdta,-6),vobj(sysmaplitdta,-7)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordSYSMAPLITDTA sysmaplitdta

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSYSMAPLITDTA sysmaplitdta

	if sysmaplitdta.elemtype.isNull() do vreqerr("ELEMTYPE") quit
	if sysmaplitdta.element.isNull() do vreqerr("ELEMENT") quit
	if sysmaplitdta.table.isNull() do vreqerr("TABLE") quit
	if sysmaplitdta.column.isNull() do vreqerr("COLUMN") quit
	if sysmaplitdta.func.isNull() do vreqerr("FUNC") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SYSMAPLITDTA","MSG",1767,"SYSMAPLITDTA."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSYSMAPLITDTA sysmaplitdta

	if sysmaplitdta.elemtype.length()>10 set vRM = $$^MSG(1076,10) do vdderr("ELEMTYPE", vRM) quit
	if sysmaplitdta.element.length()>31 set vRM = $$^MSG(1076,31) do vdderr("ELEMENT", vRM) quit
	if sysmaplitdta.table.length()>37 set vRM = $$^MSG(1076,37) do vdderr("TABLE", vRM) quit
	if sysmaplitdta.column.length()>20 set vRM = $$^MSG(1076,20) do vdderr("COLUMN", vRM) quit
	if sysmaplitdta.func.length()>63 set vRM = $$^MSG(1076,63) do vdderr("FUNC", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SYSMAPLITDTA","MSG",979,"SYSMAPLITDTA."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordSYSMAPLITDTA sysmaplitdta) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.sysmaplitdta)
	do vi2(.sysmaplitdta)

	quit
	

vi1(RecordSYSMAPLITDTA sysmaplitdta) // Maintain FUNC index entries (Function)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = sysmaplitdta.func
	type String v3 = sysmaplitdta.elemtype
	type String v4 = sysmaplitdta.element
	type String v5 = sysmaplitdta.table
	type String v6 = sysmaplitdta.column

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^SYSMAP("LITDATA",vobj(sysmaplitdta,-3),vobj(sysmaplitdta,-4),vobj(sysmaplitdta,-5),vobj(sysmaplitdta,-6),vobj(sysmaplitdta,-7)))#2,'$D(^SYSMAPX("FUNC",v2,v3,v4,v5,v6)) do vidxerr("FUNC")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^SYSMAPX("FUNC",v2,v3,v4,v5,v6)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^SYSMAPX("FUNC",v2,v3,v4,v5,v6)
	quit

vi2(RecordSYSMAPLITDTA sysmaplitdta) // Maintain TABLECOL index entries (Table Column Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = sysmaplitdta.table
	type String v3 = sysmaplitdta.column
	type String v4 = sysmaplitdta.elemtype
	type String v5 = sysmaplitdta.element
	type String v6 = sysmaplitdta.func

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^SYSMAP("LITDATA",vobj(sysmaplitdta,-3),vobj(sysmaplitdta,-4),vobj(sysmaplitdta,-5),vobj(sysmaplitdta,-6),vobj(sysmaplitdta,-7)))#2,'$D(^SYSMAPX("TABLECOL",v2,v3,v4,v5,v6)) do vidxerr("TABLECOL")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^SYSMAPX("TABLECOL",v2,v3,v4,v5,v6)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^SYSMAPX("TABLECOL",v2,v3,v4,v5,v6)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("SYSMAPLITDTA")

	while ds.next() do {
		type RecordSYSMAPLITDTA sysmaplitdta=ds.getRecord("SYSMAPLITDTA")
		if vlist.contains("VINDEX") do VINDEX(.sysmaplitdta) quit
		if vlist.contains("FUNC") do vi1(.sysmaplitdta)
		if vlist.contains("TABLECOL") do vi2(.sysmaplitdta)
	}

	quit


public VIDXBLD1(RecordSYSMAPLITDTA sysmaplitdta, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.sysmaplitdta) quit
	if vlist.contains("FUNC") do vi1(.sysmaplitdta)
	if vlist.contains("TABLECOL") do vi2(.sysmaplitdta)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("SYSMAPLITDTA","MSG",1225,"SYSMAPLITDTA."_di)

	quit


vkchged // Access key changed

	type public RecordSYSMAPLITDTA sysmaplitdta

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ELEMTYPE").exists() set vux("ELEMTYPE") = vx("ELEMTYPE")
	if vx("ELEMENT").exists() set vux("ELEMENT") = vx("ELEMENT")
	if vx("TABLE").exists() set vux("TABLE") = vx("TABLE")
	if vx("COLUMN").exists() set vux("COLUMN") = vx("COLUMN")
	if vx("FUNC").exists() set vux("FUNC") = vx("FUNC")
	do vkey(1) set voldkey = sysmaplitdta.elemtype_","_sysmaplitdta.element_","_sysmaplitdta.table_","_sysmaplitdta.column_","_sysmaplitdta.func // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = sysmaplitdta.elemtype_","_sysmaplitdta.element_","_sysmaplitdta.table_","_sysmaplitdta.column_","_sysmaplitdta.func // Copy new keys into object
	type RecordSYSMAPLITDTA vnewrec = sysmaplitdta.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SYSMAPLITDTA",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSYSMAPLITDTA sysmaplitdta

	if vux("ELEMTYPE").exists() set sysmaplitdta.elemtype = vux("ELEMTYPE").piece("|",i)
	if vux("ELEMENT").exists() set sysmaplitdta.element = vux("ELEMENT").piece("|",i)
	if vux("TABLE").exists() set sysmaplitdta.table = vux("TABLE").piece("|",i)
	if vux("COLUMN").exists() set sysmaplitdta.column = vux("COLUMN").piece("|",i)
	if vux("FUNC").exists() set sysmaplitdta.func = vux("FUNC").piece("|",i)
	quit

VIDXPGM()	quit "SYSMAPLD"	// Location of index program

