TTXFDTFL(RecordTTXFDT ttxfdt, String vpar, Boolean vparNorm) // TTXFDT - Future Dated Teller Transactions Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (40)             10/04/2006
	// Trigger Definition (2)                      01/31/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ttxfdt.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(ttxfdt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ttxfdt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TJD = ttxfdt.tjd
	type String BRCD = ttxfdt.brcd
	type String UID = ttxfdt.uid
	type String TSEQ = ttxfdt.tseq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJD").exists()!vx("BRCD").exists()!vx("UID").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("TTXFDT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("TTXFDT","TJD = :ttxfdt.tjd and BRCD = :ttxfdt.brcd and UID = :ttxfdt.uid and TSEQ = :ttxfdt.tseq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJD
	type public String BRCD
	type public String UID
	type public String TSEQ

	type RecordTTXFDT ttxfdt = Db.getRecord("TTXFDT","TJD=:TJD,BRCD=:BRCD,UID=:UID,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do ttxfdt.setMode(2)

		do TTXFDTFL(ttxfdt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordTTXFDT ttxfdt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("TTXFDT","TJD = :ttxfdt.tjd and BRCD = :ttxfdt.brcd and UID = :ttxfdt.uid and TSEQ = :ttxfdt.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ttxfdt)) S ^TTXFDT(vobj(ttxfdt,-3),vobj(ttxfdt,-4),vobj(ttxfdt,-5),vobj(ttxfdt,-6))=vobj(ttxfdt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordTTXFDT ttxfdt

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^TTXFDT(vobj(ttxfdt,-3),vobj(ttxfdt,-4),vobj(ttxfdt,-5),vobj(ttxfdt,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordTTXFDT ttxfdt

	if ttxfdt.cdt.isNull() do vreqerr("CDT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordTTXFDT ttxfdt

	if ttxfdt.tjd.isNull() do vreqerr("TJD") quit
	if ttxfdt.brcd.isNull() do vreqerr("BRCD") quit
	if ttxfdt.uid.isNull() do vreqerr("UID") quit
	if ttxfdt.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("CDT").exists(),ttxfdt.cdt.isNull() do vreqerr("CDT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TTXFDT","MSG",1767,"TTXFDT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After delete trigger

	type public RecordTTXFDT ttxfdt
	/*
	   Revision History
	   
	   03/14/05 - SmithCD - CR 13782
	   	      Modified to conform to current PSL standards.
	
	   04/06/01 - CHOK - 44503
		      Defined necessary variables before SQL statement

	   09/21/99 - CHOK - 31126
		      Converted to PSL
	*/

	type Number BRCD, BSEQ, ESEQ, SCREEN, SEQ, TSEQX
	type Date JD
	type String UID

	set BRCD = ttxfdt.brcd
	set UID = ttxfdt.uid
	set SEQ = ttxfdt.tseq
	set JD = ttxfdt.tjd
	set SCREEN = SEQ \ 1000
	set BSEQ = SCREEN * 1000
	set ESEQ = BSEQ + 1000

	type ResultSet rs = Db.select("TSEQ", "TTXFDT", "TJD=:JD AND BRCD=:BRCD AND UID=:UID AND TSEQ>:SEQ AND TSEQ<:ESEQ")

	while rs.next() do {
		set TSEQX = rs.getCol(1)
		do Db.delete("TTXFDT", "TJD=:JD AND BRCD=:BRCD AND UID=:UID AND TSEQ=:TSEQX", "/NOTRIGBEF/NOTRIGAFT")
		}

	quit 

vbd1 // Trigger BEFORE_DELETE - Before delete trigger

	type public RecordTTXFDT ttxfdt
	/*
	   ---- Revision History-----------------------------------------------
	   
	   01/31/06 - SkariahV- CR 19225
	   	      Defined the variable JD.
	   	 
	   03/14/05 - SmithCD - CR 13782
		      . Retrofit the following from p01:
		                 01/23/04 - TITOVE - CR 8025
		      Added "newing" of TSEQ variable to prevent GTM ZLINKFILE
		      error.
		      . Removed some extraneous code, including line that set 
		        ER to 1 w/o setting an error message (was not in p01 
		        version), and PITC variable, which is handled in 
		        position^RGLSUM (called from position^TTXFDT)
																						. Modified to comply with current standards
	   
	   12/30/03 - CARROLLJ - CR7658
		      Added #ACCEPT prior to setting %SystemDate.

	*/

	type public Cache %CACHE()
	type public Number OBSEQ
	type public String TSO
	type public Boolean ER

	type Number BRCD, BSEQ, CID, ESEQ, ETC, GL, SCREEN, SEQ, TSEQ
	type Date %EffectiveDate,JD
	type String TCMT, UID
	
	set JD = ttxfdt.tjd
	set BRCD = ttxfdt.brcd
	set UID = ttxfdt.uid
	set SEQ = ttxfdt.tseq
	set SCREEN = SEQ \ 1000
	
	set BSEQ = SCREEN * 1000
	set ESEQ = BSEQ + 1000
	
	if OBSEQ.get() = BSEQ quit     
	            
	set OBSEQ = BSEQ
	
	set TSEQ = BSEQ

	type DbSet ds = Db.selectDbSet("TTXFDT", "TJD=:JD AND BRCD=:BRCD AND UID=:UID AND TSEQ>:TSEQ AND TSEQ<:ESEQ")
	if ds.isEmpty() quit

	while ds.next() do { quit:ER
		type RecordTTXFDT ttxfdt1 = ds.getRecord("TTXFDT")
		
		set CID = ttxfdt1.cid
		set ETC = ttxfdt1.etc
		set TSEQ = ttxfdt1.tseq

		type RecordTRN trn = %CACHE("TRN").getRecord("TRN", "ETC=:ETC")

		set GL=$S(trn.cls = "M":1, 1:0)
	
		if GL do {
			type String CRCD, PITC

			set CRCD = ttxfdt.crcd
			if CRCD.isNull() set CRCD = %SystemCurrency.get()
																							 
			// is this a position ?			
			quit:'$$position^TTXFDT(CID,CRCD)

			do sumpos^TTXFDT(.ttxfdt1)
			}
	
		quit:GL
		quit:ER

		//Future Amount: ~p1 deleted
		set TCMT = $$^MSG(7545, ttxfdt1.tamt)
		
		type RecordCUVAR cuvar = Db.getRecord("CUVAR")
	
		// In case in filer from backdated loan transaction posting, 
		// use system date as effective date (may be in the past)
		set %EffectiveDate = %SystemDate

		type Date %SystemDate
		
		#ACCEPT DATE=12/30/03;PGM=John Carroll
		set %SystemDate = cuvar.tjd

		do HISTBLD^ACNFUNCS(TCMT, BRCD, TSO.get())
		}
	
	set ttxfdt.tseq = SEQ

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordTTXFDT ttxfdt

	set X = ttxfdt.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = ttxfdt.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	if ttxfdt.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	set X = ttxfdt.tseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	if ttxfdt.bcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BCRCD", vRM) quit
	set X = ttxfdt.brcde if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCDE", vRM) quit
	set X = ttxfdt.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxfdt.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
	set X = ttxfdt.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	set X = ttxfdt.chktyp if 'X.isNull(),'Db.isDefined("STBLCHKTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CHKTYP", vRM) quit
	set X = ttxfdt.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = ttxfdt.cmpsav if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.CMPSAV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxfdt.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
	set X = ttxfdt.custcd if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CUSTCD", vRM) quit
	set X = ttxfdt.dir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.DIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxfdt.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	set X = ttxfdt.endbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.ENDBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ttxfdt.etc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ETC", vRM) quit
	set X = ttxfdt.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
	if ttxfdt.ident.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDENT", vRM) quit
	if ttxfdt.itc.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ITC", vRM) quit
	if ttxfdt.lnerc.length()>80 set vRM = $$^MSG(1076,80) do vdderr("LNERC", vRM) quit
	if ttxfdt.msd.length()>120 set vRM = $$^MSG(1076,120) do vdderr("MSD", vRM) quit
	set X = ttxfdt.mult if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MULT", vRM) quit
	set X = ttxfdt.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxfdt.rty if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RTY", vRM) quit
	set X = ttxfdt.spr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
	set X = ttxfdt.sysbase if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.SYSBASE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ttxfdt.tamt.length()>60 set vRM = $$^MSG(1076,60) do vdderr("TAMT", vRM) quit
	if ttxfdt.tcmt.length()>510 set vRM = $$^MSG(1076,510) do vdderr("TCMT", vRM) quit
	set X = ttxfdt.tim if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIM", vRM) quit
	if ttxfdt.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	set X = ttxfdt.trc if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("TRC", vRM) quit
	set X = ttxfdt.tresref if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("TRESREF", vRM) quit
	set X = ttxfdt.tsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.TSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ttxfdt.tso.length()>300 set vRM = $$^MSG(1076,300) do vdderr("TSO", vRM) quit
	set X = ttxfdt.udprin if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXFDT.UDPRIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ttxfdt.uidt.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDT", vRM) quit
	set X = ttxfdt.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	if ttxfdt.xpdo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("XPDO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TTXFDT","MSG",979,"TTXFDT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordTTXFDT ttxfdt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("BRCD").exists() set vux("BRCD") = vx("BRCD")
	if vx("UID").exists() set vux("UID") = vx("UID")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = ttxfdt.tjd_","_ttxfdt.brcd_","_ttxfdt.uid_","_ttxfdt.tseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ttxfdt.tjd_","_ttxfdt.brcd_","_ttxfdt.uid_","_ttxfdt.tseq // Copy new keys into object
	type RecordTTXFDT vnewrec = ttxfdt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("TTXFDT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordTTXFDT ttxfdt

	if vux("TJD").exists() set ttxfdt.tjd = vux("TJD").piece("|",i)
	if vux("BRCD").exists() set ttxfdt.brcd = vux("BRCD").piece("|",i)
	if vux("UID").exists() set ttxfdt.uid = vux("UID").piece("|",i)
	if vux("TSEQ").exists() set ttxfdt.tseq = vux("TSEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordTTXFDT ttxfdt
	type public String vpar

	do Db.delete("TTXFDT0","TJD=:ttxfdt.tjd AND BRCD=:ttxfdt.brcd AND UID=:ttxfdt.uid AND TSEQ=:ttxfdt.tseq",vpar) // Cascade delete

	quit
