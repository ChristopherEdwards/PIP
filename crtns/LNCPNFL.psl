LNCPNFL(RecordLNCPN lncpn, String vpar, Boolean vparNorm) // LNCPN - Coupon Production Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             11/22/2003
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lncpn.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lncpn,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lncpn,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String PND = lncpn.pnd
	type String PMET = lncpn.pmet
	type String CID = lncpn.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PND").exists()!vx("PMET").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNCPN",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNCPN","PND = :lncpn.pnd and PMET = :lncpn.pmet and CID = :lncpn.cid") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PND
	type public String PMET
	type public String CID

	type RecordLNCPN lncpn = Db.getRecord("LNCPN","PND=:PND,PMET=:PMET,CID=:CID")
	if (%ProcessMode = 2) do {
		do lncpn.setMode(2)

		do LNCPNFL(lncpn,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNCPN lncpn

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNCPN","PND = :lncpn.pnd and PMET = :lncpn.pmet and CID = :lncpn.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lncpn)) S ^DAYEND(vobj(lncpn,-3),"CBPND",vobj(lncpn,-4),vobj(lncpn,-5))=vobj(lncpn)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lncpn)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNCPN lncpn

	if vpar["/JOURNAL/" do VJOURNAL(.lncpn)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DAYEND(vobj(lncpn,-3),"CBPND",vobj(lncpn,-4),vobj(lncpn,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordLNCPN lncpn

	if lncpn.ndd.isNull() do vreqerr("NDD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNCPN lncpn

	if lncpn.pnd.isNull() do vreqerr("PND") quit
	if lncpn.pmet.isNull() do vreqerr("PMET") quit
	if lncpn.cid.isNull() do vreqerr("CID") quit

		if vx("NDD").exists(),lncpn.ndd.isNull() do vreqerr("NDD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCPN","MSG",1767,"LNCPN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNCPN lncpn
	if 'lncpn.cid.isNull() set vfkey("^ACN("_""""_lncpn.cid_""""_","_50_")")="LNCPN(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNCPN lncpn
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lncpn.cid") set vERRMSG = $$^MSG(8563,"LNCPN(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNCPN lncpn
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lncpn,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - After Delete Trigger for LNCPN

	type public RecordLNCPN lncpn
	new XCID,XXX
	set XCID=lncpn.cid 
	set XXX=""
	do Db.update("LN","CBOND=:XXX","CID=:XCID")
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger for LNCPN

	type public RecordLNCPN lncpn
	/*
	---- Revision History ------------------------------------------------
	
	10/10/01 - SIVCHUKA - 47541
		   Remove error check for ln.cbond.
		   The error check was incorrectly coded to prevent a user from
		   putting an entry for any date in the past.
		   Check was removed, because it was dealing with a character
		   base check on the prompt for the date for the manual coupon
		   order that is no longer needed.

	09/14/99 - CARROLLJ - 31126
		   Convert to PSL.

	*/

	type RecordLN ln=Db.getRecord("LN","CID")

	new VALUE,X,XPND

	set XCID=lncpn.cid
	// Account closed
	if ln.stat=4 do Runtime.setErrSTBLER("LNCPN","ACNCLO") quit:ER 

	// Loan is not coded for coupon production.
	if 'ln.cbmet do Runtime.setErrSTBLER("LNCPN","LNCP1A") quit:ER 

	set XPND=lncpn.pnd

	// Production date may not be in the past.
	if XPND<%SystemDate do Runtime.setErrSTBLER("LNCPN","LNCP1D") quit:ER 

	// Production date may not exceed today by more than one year
	if %SystemDate+365<XPND do Runtime.setErrSTBLER("LNCPN","LNCP1E") quit:ER 
	
	if lncpn.recndd'="" set lncpn.ndd=lncpn.recndd
	
	if lncpn.tpt="" set lncpn.tpt=ln.pmt
	
	set ln.cbond=XPND
	do ln.save()	
	quit

vbu1 // Trigger BU_LNCPN - Before Update of LNCPN

	type public RecordLNCPN lncpn
	do lncpn.setAuditFlag(1)
								/*
								---- Revision History ------------------------------------------------
 	12/30/03 - CARROLLJ - CR7658
		   Corrected undefined error.
	*/
	type RecordLN ln=Db.getRecord("LN","CID")

	new CBMET,CBOND,DATA,STAT,VALUE,X,XPND

	/*
	Account number changes will occur only as a cascade update
	Therefore there is no reason to process any other code in this trigger.
	*/
	if (lncpn.cid.oldVal'=lncpn.cid) quit 
	if ln.cid="" do Runtime.setErrMSG("LNCPN",1259,CID) quit:ER 

	// Account closed
	if ln.stat=4 do Runtime.setErrSTBLER("LNCPN","ACNCLO") quit:ER 

	// Loan is not coded for coupon production
	if 'ln.cbmet do Runtime.setErrSTBLER("LNCPN","LNCP1A") quit:ER 
	set XPND=ln.cbond

	// No coupon orders currently on file
	if 'XPND do Runtime.setErrSTBLER("LNCPN","LNCP1C") quit:ER 
	
	if lncpn.recndd'="" set lncpn.ndd=lncpn.recndd
	
	set ln.cbond=XPND
	do ln.save()
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNCPN lncpn

	set X = lncpn.pnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PND", vRM) quit
	set X = lncpn.pmet if 'X.isNull(),'Db.isDefined("STBLLNCBPM","X") set vRM = $$^MSG(1485,X) do vdderr("PMET", vRM) quit
	set X = lncpn.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lncpn.ncn if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NCN", vRM) quit
	set X = lncpn.ncp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NCP", vRM) quit
	set X = lncpn.ndd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NDD", vRM) quit
	set X = lncpn.pcb if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PCB", vRM) quit
	set X = lncpn.pmtpi if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCPN.PMTPI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncpn.pmttrs if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCPN.PMTTRS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncpn.recndd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RECNDD", vRM) quit
	set X = lncpn.tpt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCPN.TPT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCPN","MSG",979,"LNCPN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNCPN lncpn)	//LNCPN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lncpn)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_D
			}
		else  if TSRC="O" do {
			do vj1(.lncpn)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lncpn)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I
			}
		else  if TSRC="O" do {
			do vj2(.lncpn)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.lncpn)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj3(.lncpn)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordLNCPN lncpn)	// HIST_D  Table HIST  Journal File for Deleting of LNCPN

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncpn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("3968")
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNCPN lncpn)	// HIST_I  Table HIST  Journal File for LNCPN

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncpn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("3967")
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNCPN lncpn)	// HIST_U  Table HIST  Journal File for Updating of LNCPN

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey
		set v1=lncpn.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$^MSG("3969")
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNCPN lncpn

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("PND").exists() set vux("PND") = vx("PND")
	if vx("PMET").exists() set vux("PMET") = vx("PMET")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = lncpn.pnd_","_lncpn.pmet_","_lncpn.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lncpn.pnd_","_lncpn.pmet_","_lncpn.cid // Copy new keys into object
	type RecordLNCPN vnewrec = lncpn.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNCPN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNCPN lncpn

	if vux("PND").exists() set lncpn.pnd = vux("PND").piece("|",i)
	if vux("PMET").exists() set lncpn.pmet = vux("PMET").piece("|",i)
	if vux("CID").exists() set lncpn.cid = vux("CID").piece("|",i)
	quit
