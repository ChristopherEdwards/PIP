MAPPPROP(RecordSYSMAPPROPDATA sysmappropdata, String vpar, Boolean vparNorm) // SYSMAPPROPDATA - System Map of PSL property read/sets  Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              01/21/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = sysmappropdata.getMode()              // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(sysmappropdata,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(sysmappropdata,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TARGET").exists()!vx("LABEL").exists()!vx("TABLE").exists()!vx("COLUMN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SYSMAPPROPDATA",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SYSMAPPROPDATA","TARGET = :sysmappropdata.target and LABEL = :sysmappropdata.label and TABLE = :sysmappropdata.table and COLUMN = :sysmappropdata.column") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TARGET
	type public String LABEL
	type public String TABLE
	type public String COLUMN

	type RecordSYSMAPPROPDATA sysmappropdata = Db.getRecord("SYSMAPPROPDATA","TARGET=:TARGET,LABEL=:LABEL,TABLE=:TABLE,COLUMN=:COLUMN")
	if (%ProcessMode = 2) do {
		do sysmappropdata.setMode(2)

		do MAPPPROP(sysmappropdata,vpar)
	}
	else  do VINDEX(sysmappropdata)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSYSMAPPROPDATA sysmappropdata

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SYSMAPPROPDATA","TARGET = :sysmappropdata.target and LABEL = :sysmappropdata.label and TABLE = :sysmappropdata.table and COLUMN = :sysmappropdata.column") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(sysmappropdata)) S ^SYSMAP("DATA",vobj(sysmappropdata,-3),vobj(sysmappropdata,-4),"P",vobj(sysmappropdata,-5),vobj(sysmappropdata,-6))=vobj(sysmappropdata)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.sysmappropdata) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSYSMAPPROPDATA sysmappropdata

	if vpar["/INDEX/" do VINDEX(.sysmappropdata)           // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SYSMAP("DATA",vobj(sysmappropdata,-3),vobj(sysmappropdata,-4),"P",vobj(sysmappropdata,-5),vobj(sysmappropdata,-6))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordSYSMAPPROPDATA sysmappropdata

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSYSMAPPROPDATA sysmappropdata

	if sysmappropdata.target.isNull() do vreqerr("TARGET") quit
	if sysmappropdata.label.isNull() do vreqerr("LABEL") quit
	if sysmappropdata.table.isNull() do vreqerr("TABLE") quit
	if sysmappropdata.column.isNull() do vreqerr("COLUMN") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SYSMAPPROPDATA","MSG",1767,"SYSMAPPROPDATA."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSYSMAPPROPDATA sysmappropdata

	if sysmappropdata.target.length()>31 set vRM = $$^MSG(1076,31) do vdderr("TARGET", vRM) quit
	if sysmappropdata.label.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LABEL", vRM) quit
	if sysmappropdata.table.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TABLE", vRM) quit
	if sysmappropdata.column.length()>20 set vRM = $$^MSG(1076,20) do vdderr("COLUMN", vRM) quit
	set X = sysmappropdata.countread if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COUNTREAD", vRM) quit
	set X = sysmappropdata.countset if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COUNTSET", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SYSMAPPROPDATA","MSG",979,"SYSMAPPROPDATA."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordSYSMAPPROPDATA sysmappropdata) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.sysmappropdata)

	quit
	

vi1(RecordSYSMAPPROPDATA sysmappropdata) // Maintain TABLECOL index entries (Table Column Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = sysmappropdata.table
	type String v3 = sysmappropdata.column
	type String v4 = sysmappropdata.target
	type String v5 = sysmappropdata.label

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^SYSMAP("DATA",vobj(sysmappropdata,-3),vobj(sysmappropdata,-4),"P",vobj(sysmappropdata,-5),vobj(sysmappropdata,-6)))#2,'$D(^SYSMAPX("PROPDATA-TC",v2,v3,v4,v5)) do vidxerr("TABLECOL")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^SYSMAPX("PROPDATA-TC",v2,v3,v4,v5)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SYSMAPX("PROPDATA-TC",v2,v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("SYSMAPPROPDATA")

	while ds.next() do {
		type RecordSYSMAPPROPDATA sysmappropdata=ds.getRecord("SYSMAPPROPDATA")
		if vlist.contains("VINDEX") do VINDEX(.sysmappropdata) quit
		if vlist.contains("TABLECOL") do vi1(.sysmappropdata)
	}

	quit


public VIDXBLD1(RecordSYSMAPPROPDATA sysmappropdata, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.sysmappropdata) quit
	if vlist.contains("TABLECOL") do vi1(.sysmappropdata)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("SYSMAPPROPDATA","MSG",1225,"SYSMAPPROPDATA."_di)

	quit


vkchged // Access key changed

	type public RecordSYSMAPPROPDATA sysmappropdata

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TARGET").exists() set vux("TARGET") = vx("TARGET")
	if vx("LABEL").exists() set vux("LABEL") = vx("LABEL")
	if vx("TABLE").exists() set vux("TABLE") = vx("TABLE")
	if vx("COLUMN").exists() set vux("COLUMN") = vx("COLUMN")
	do vkey(1) set voldkey = sysmappropdata.target_","_sysmappropdata.label_","_sysmappropdata.table_","_sysmappropdata.column // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = sysmappropdata.target_","_sysmappropdata.label_","_sysmappropdata.table_","_sysmappropdata.column // Copy new keys into object
	type RecordSYSMAPPROPDATA vnewrec = sysmappropdata.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SYSMAPPROPDATA",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSYSMAPPROPDATA sysmappropdata

	if vux("TARGET").exists() set sysmappropdata.target = vux("TARGET").piece("|",i)
	if vux("LABEL").exists() set sysmappropdata.label = vux("LABEL").piece("|",i)
	if vux("TABLE").exists() set sysmappropdata.table = vux("TABLE").piece("|",i)
	if vux("COLUMN").exists() set sysmappropdata.column = vux("COLUMN").piece("|",i)
	quit

VIDXPGM()	quit "MAPPPROP"	// Location of index program

