public LNPTS13(RecordLN ln,		// Loan account			/REF:RW
	       RecordTTX ttx,		// Transaction			/REF:RW
               RecordTRN trn)		// Transaction code		/REF:R

	/*
	
	Miscellaneous fee payments
	
	---- Revision History ------------------------------------------------
	
	08/10/07 - PUTTASWH - CR 28290
		   Modified LNFEE and UPDFEE sections to set VATAMT from 
		   LN.VATFEEDUE. This change is required to pay down VAT on Loan
		   Fees.
	
	07/16/07 - PUTTASWH - CR 28194
		   Modified INIT section to remove the code to insert the 
		   record to LNBIL5 file. Modified LNFEE and UPDFEE sections to
		   set VATAMT from LN.VATFEEDUE and previous bill record.
	
	06/28/06 - PUTTASWH - CR 27530
		   Modified INIT, LNFEE and UPDFEE sections to pick the VAT
		   on Loan Fees amount from Fee Amount Still Due column from
		   LNBIL5 table.
		   
	05/21/06 - PUTTASWH - CR 27130
		   Modified INIT,LNFEE and UPDFEE sections to invoke 
		   PROVATPMT^LNPTSU to pay Misc Charges and VAT on Misc Charges 
		   proportionally, if applicable. Deleted VATPROC section.
		   
	03/25/07 - PUTTASWH / SmithCD - CR 24945
		   Added VATPMT tags for the deduction of VAT on Miscellaneous 
		   Charges. Modified INIT and UPDFEE sections, and added 
		   VATPROC section for the processing of VAT transaction
		   during fee payment.
		   
	02/28/07 - Chaithra - CR 24964
		   Modified REDUCBL section to correctly update bill records
		   when paying or adjusting a fee.  Also modified SINGFEE 
		   section (when LNFEEIN isn't defined) to base it's decision 
		   on whether to set the fee type on whether there is only 
		   one fee amount due, not if there is only one fee type.
	
	10/09/06 - KELLYP - CR 23512
		   Removed LTRNSEQ parameter from the FEETSO^LNTPS3 calls in 
		   section UPDFEE.
	
	05/30/06 - DESHPANDE S K - CR 20748
		   Replaced public variable TRNSEQ with call to 
		   ttx.getStoredValue("TranSeq")
	*/

	do INIT(.ln,.ttx,.trn,0)

	quit


INIT(RecordLN ln,		// Loan account			/REF:RW
     RecordTTX ttx,		// Transaction			/REF:RW
     RecordTRN trn,		// Transaction code		/REF:R
     Boolean ADJFLG)		// Adjustment indicator
	
	type public Number ER,ICPA,INCRS,ZAMT
	type public String LTC

	type Boolean PCF18	
	type String LNFEEIN,prvbil(),TSO
	
	// Interest Calc Principal Adjustments
	set ICPA=ln.icpa

	type RecordUTBLICPA utblicpa=Db.getRecord("UTBLICPA","KEY=:ICPA")
       
	if '$D(ICPA(ICPA)) set ICPA(ICPA)=utblicpa.prio
	set ICPA=ICPA(ICPA)

	// Transaction Source of Funds
	set TSO=ttx.tso
	set LNFEEIN=$$FIELD^UTSO(TSO,"LNFEEIN")

	set PCF18=trn.pcf.extract(18)

	// Unapplied funds
	if PCF18 do { quit:ER
		do GL^LNPTSU(.ttx,ZAMT,9)
		if INCRS set ln.unapf=ln.unapf-ZAMT
		else  set ln.unapf=ln.unapf+ZAMT
		do %HSEQ^LNPTSU(.ttx,"*#F#"_ZAMT)
		set ZAMT=0
		if trn.pac.isNull() do DPMT(.ln,.ttx,.trn)
		}

	// Pay an individual fee
	if 'PCF18 do LNFEE(.ln,.ttx,1,ADJFLG)

	quit


public LNFEE(RecordLN ln,RecordTTX ttx,CTL,ADJFLG)

	/*
	Apply fee amounts
	
	   ARGUMENTS:
		   . RecordLN - Loan record			/TYP=Object/REQ

		   . CTL - Control character 			/TYP=N
		   	   position 1 - subtract billed fees.
		     	   Used by payoff processing.
		   . ADJFLG - Adjustment entry indicator	/REQ/TYP=N
		   	0 - Payment (e.g., LPMO)
		   	1 - Adjustment (e.g., LMR or LMI)

	*/
	
	type public Boolean ER
	type public Number ZAMT
	type public String LNFEEIN,LTC,prvbil()
	
	do PRVBIL^LNBLDE(.ln)

	type Date FEEND()
	type Number TOTFEE,VATAMT
	type String FEE

	set TOTFEE=ZAMT

	/* If fee type not defined, and there is only one fee type
	   on this loan, force processing to use this fee.
	*/
	if $G(LNFEEIN)="",$$SINGFEE(.ttx) do UPDFEE(.ln,.ttx,FEE,.ZAMT,,1,ADJFLG) quit 

	do FEEND(.ln,.FEEND,CTL.extract(1)) if ER quit

	if $G(LNFEEIN)'="" do { quit:ER
		type Number FEEAMT,PC
		type String FEETYP
		
		for PC=1:1:$L(LNFEEIN,",") do {
			set FEETYP=$P($P(LNFEEIN,",",PC),":",1)
			set FEEAMT=$P($P(LNFEEIN,",",PC),":",2)
			if FEEAMT="" do UPDFEE(.ln,.ttx,FEETYP,.ZAMT,,,ADJFLG) quit
			if FEEAMT>ZAMT do UPDFEE(.ln,.ttx,FEETYP,.ZAMT,,,ADJFLG) quit
			do UPDFEE(.ln,.ttx,FEETYP,FEEAMT,,,ADJFLG) set ZAMT=ZAMT-FEEAMT quit
			}
		}

	// Pay all fees
	if $G(LNFEEIN)="" do { quit:ER
		type Number AMT
		type String FEE

		set FEE=""
		for  set FEE=$O(FEEND(FEE)) quit:FEE=""  do { quit:'ZAMT  quit:ER			
			set AMT=FEEND(FEE)+ln.vatfeedue			
			if AMT>ZAMT set AMT=ZAMT			
			if CTL.extract(1) do UPDFEE(.ln,.ttx,FEE,AMT,,,ADJFLG) quit:ER
			if 'CTL.extract(1) do UPDFEE(.ln,.ttx,FEE,AMT,,1,ADJFLG) quit:ER
			set ZAMT=ZAMT-AMT
			}
		}

	// If there is a transaction amount left to be applied, and this is a 
        // regular payment, pay down any VAT on loan fees assessed that remain

        if ZAMT,('LTC.get().isNull())&(ttx.etc'=LTC) do {
        	
              	set VATAMT = ln.vatfeedue          	
              	
                if (VATAMT'>0) quit 

                // Apply payment to Misc Charges and VAT on Misc Charges
                // proportionally, if applicable
                do PROVATPMT^LNPTSU(.ln, .ttx, 0, .VATAMT) 

                // Update VAT on Miscellaneous Charges
                do UPDVAT(.ln, .ttx, VATAMT)

                }	
	quit


public FEEND(RecordLN ln,	// Loan record
	     Number ARRAY,	// fee array w/ amts	
	     String CTL)	// Control character 
	     			// (CTL position 1 - subtract billed fees)
	     
	// Build array of fees not due
	
	type public Number ER, CID
	
	type Number BRFAMT, BSEQ, DUEAMT, OSEQ, PC, SCHSEQ
	type String BIL, DATA, ELMNT, FEE, TOPFEE

	set ARRAY = ARRAY.get()
	set CTL = CTL.get()
	
	if ER quit
	
	set OSEQ = ln.oseq   	// Internal Bill Oldest Unsatisfied Seq Nbr
	
	set BSEQ = ln.bseq	// Billing - Last Sequence Number

	set CID = ln.cid	
	
	// Step 1 - find ALL fee amounts outstanding
	type ResultSet rs = Db.select("FEEREM,FEETYP","LNFEE","CID=:CID")
	if 'rs.isEmpty() while rs.next() set ARRAY(rs.getCol("FEETYP")) = rs.getCol("FEEREM")
		
	// Step 2 - subtract billed amounts
	type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1","CID,OSEQ",1)

	set BIL = $$BIL1ELE^BILFUNCS(.lnbil1).translate($C(9),"|")

	if CTL.extract() , OSEQ '> BSEQ do {
		type ResultSet rs = Db.select("SCHSEQ","LNBIL1","CID=:CID AND SCHSEQ<=:BSEQ")

		while rs.next() do {
			set SCHSEQ = rs.getCol("SCHSEQ")

			type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1","CID,SCHSEQ")

			set BIL = $$BIL1ELE^BILFUNCS(.lnbil1).translate($C(9),"|")

			for PC = 2:1:BIL.length("|") do {
				set DATA = BIL.piece("|",PC)
				set ELMNT = DATA.piece("#",1)
				if ARRAY(ELMNT).get() set ARRAY(ELMNT) = ARRAY(ELMNT) - DATA.piece("#",4)
				}
				
			set DUEAMT = 1
			type ResultSet rs1 = Db.select("FEETYP,BRFAMT","LNBIL5","CID=:CID AND SCHSEQ=:OSEQ AND DUEAMT=:DUEAMT")
				
			if rs1.next() do {
				set FEE = rs1.getCol("FEETYP")
				set BRFAMT = rs1.getCol("BRFAMT")
				if ARRAY(FEE).get() set ARRAY(FEE) = ARRAY(FEE) - BRFAMT
				}
			}
		}

	// Step 3 - merge all linked fees with top-level fee	

	if ARRAY.data() = 0 quit

	set FEE = ""
	for  set FEE = ARRAY(FEE).order() quit:FEE = ""  do {
		
		type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP","FEETYP=:FEE",1)
		
		if lnfeep.lfee do {
			set TOPFEE = FEE 

			type Number QUIT = 0

			for  do { quit:QUIT
				type RecordLNFEEP lnfeep1 = Db.getRecord("LNFEEP","TOPFEE",1) 
				if 'lnfeep1.lfee  set QUIT = 1 quit
				if lnfeep1.basis = "I" set QUIT = 1 quit
				if lnfeep1.basis = "P" set QUIT = 1 quit
				set TOPFEE = lnfeep1.basis
				}
				
			if TOPFEE = FEE quit
			set ARRAY(TOPFEE) = ARRAY(TOPFEE).get() + ARRAY(FEE) 
			kill ARRAY(FEE)
			}		
		}

	for  set FEE = ARRAY(FEE).order() quit:FEE = ""  do {
		if ARRAY(FEE) '> 0 kill ARRAY(FEE) quit
		set ARRAY = ARRAY.get() + ARRAY(FEE)
		}

	quit


DPMT(RecordLN ln,RecordTTX ttx,RecordTRN trn)

	// Enough funds are in UNAPF (unapplied funds) for a full payment.

	type public Number %ATA,ER,PF,ZAMT
	type public String STR
	
	type Number AMT
	type String ITC,TC

	// External Transaction Code
	set TC=ttx.etc
	
	set ITC=trn.itc

	// Transaction results in negative unapplied funds
	if ln.trb-ITC.extract(1),ln.unapf<0 do Runtime.setErrMSG("LN",2741) quit:ER
		
	if 'ln.dpmt quit
	if ln.unapf<(ln.dpmt-ln.ppa) quit
	
	set (ZAMT,AMT)=ln.dpmt-ln.ppa

	do GL^LNPTSU(.ttx,-AMT,9)
	set ln.unapf=ln.unapf-AMT
	set (PF,%ATA)=1
	set STR=""

	quit


UPDFEE(RecordLN ln,		// Loan Record
       RecordTTX ttx,		// Transaction Record
       String FEE,		// Fee Type
       Number ZAMT,		// Fee Amount
       Boolean SKPTSO,		// Update TSO Flag
       String AMTFLG,		// Amount Flag (1 - pay entire fee amount, 0 - only pay unbilled amount)
       Boolean ADJFLG)		// Adjustment Entry Indicator

	type public Number BASE,CID,SEQ
	type public String prvbil(),LNFEEIN,LTC
	
	type Number APPLYBL,APPLYDR,VATAMT	
	type Number LTRNSEQ = ttx.getStoredValue("TranSeq")	
	
	set SKPTSO=SKPTSO.get()
	set AMTFLG=AMTFLG.get()
	set BASE=BASE.get()

	type Number APPLIED,APPLY,FACTOR,FEEREM,PRCNT(),TOTELMNT,X
	type String LFEE,PRVBIL,STR

	set PRVBIL=prvbil(FEE).get()
	do FINDFEE^LNFEEU(CID,$$TOPFEE^LNU(FEE),.STR)
	if 'STR.get() set PRVBIL=0
	if AMTFLG.extract() set PRVBIL=0

	set APPLIED=0 
	set FACTOR=1
	
	type ResultSet rs=Db.select("FEEREM","LNFEE","CID=:CID AND FEETYP=:FEE")
	       
	if rs.next() do {
		set BASE=rs.getCol(1)
		set X=rs.getCol(1)
		set FEEREM=rs.getCol(1)
		}

	if LNFEEIN.get().isNull() set BASE=BASE-PRVBIL
	set (APPLY,TOTELMNT)=BASE

	if 'ADJFLG do GETPRCNT(FEE,TOTELMNT,1,.TOTELMNT)
	set APPLY=TOTELMNT

	if APPLY>ZAMT,TOTELMNT'=0 do {
		set APPLY=ZAMT 
		set FACTOR=APPLY/TOTELMNT 
		set BASE=$$^SCARND(FACTOR*BASE,0,CID)
		}
	set LFEE=""
	for  set LFEE=PRCNT(LFEE).order() quit:LFEE=""  do {
		type Number AMT
		
		set (AMT,X)=$$^SCARND(PRCNT(LFEE)*BASE,0,CID)
		set APPLYDR=FEEREM-$G(prvbil(LFEE))		
		
		// Make sure amount to be applied directly does not exceed fee amount
		if APPLYDR>X set APPLYDR=X
	
		// Amount to reduce bills by
		set APPLYBL=X-APPLYDR		
		
		// Regular payment, not a direct "only" transaction
		if ('LTC.get().isNull())&(ttx.etc'=LTC) do {
				
			// Process VAT on Miscellaneous Charges				
			
			set VATAMT = ln.vatfeedue			
              		
			if (VATAMT'>0) quit
			
			// Apply payment to Misc Charges and VAT on Misc 
			// Charges proportionally, if applicable
			do PROVATPMT^LNPTSU(.ln, .ttx, .X, .VATAMT)
		
			// Update VAT on Miscellaneous Charges
			do UPDVAT(.ln, .ttx, VATAMT)
			
			set APPLY=APPLY-VATAMT
			}
		
		do FEEUPD(.ln,LFEE,X,ADJFLG)
		if APPLYDR do %HSEQ^LNPTSU(.ttx,"*#"_LFEE_"#"_APPLYDR)
		if AMT>APPLYDR do REDUCBL(.ln,.ttx,LFEE,APPLYBL)
		if 'SKPTSO do FEETSO^LNPTS3(.ttx,X,LFEE)
		set APPLIED=APPLIED+X
		}

	// Find TOTAL amount that can be applied directly to account
	if 'FEEREM.get() quit
	set APPLYDR=FEEREM-prvbil(FEE).get()

	// Find amount to be applied towards this fee
	set X=APPLY-APPLIED

	// Make sure amount to be applied directly does not exceed fee amount
	if APPLYDR>X set APPLYDR=X

	// Amount to reduce bills by
	set APPLYBL=X-APPLYDR
		
	// Regular payment, not a direct "only" transaction	
	if ('LTC.get().isNull())&(ttx.etc'=LTC) do {		
		
		// Process VAT on Miscellaneous Charges				
		
		set VATAMT = ln.vatfeedue		
              		
		if (VATAMT'>0) quit
		
		// Apply payment to Misc Charges and VAT on Misc Charges 
		// proportionally, if applicable
		do PROVATPMT^LNPTSU(.ln, .ttx, .X, .VATAMT)
		
		// Update VAT on Miscellaneous Charges
		do UPDVAT(.ln, .ttx, VATAMT)
		
		set APPLY=APPLY-VATAMT
		}

	do FEEUPD(.ln,FEE,X,ADJFLG)

	if APPLYDR do %HSEQ^LNPTSU(.ttx,"*#"_FEE_"#"_APPLYDR)
	do REDUCBL(.ln,.ttx,FEE,APPLYBL)

	if 'SKPTSO do FEETSO^LNPTS3(.ttx,X,FEE)

	set ZAMT=ZAMT-APPLY	
	do GL^LNPTSU(.ttx,X,6)
	
	quit


public FEEUPD(RecordLN ln,FEE,AMT,ADJFLG)

	// Update fee remaining, paid year-to-date and life amts

	type public Date CUVAR2
	type public Number CID
	
	type Boolean DED
	type Date BOT,BOY
	type Number TAXYEOFF,YEOFF


	type RecordLNFEE lnfee=Db.getRecord("LNFEE","CID,FEE")

	set lnfee.feerem=lnfee.feerem-AMT

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	type RecordLNFEEP lnfeep=Db.getRecord("LNFEEP","FEE",1)
	
	set YEOFF=cuvar.yeoff
	set TAXYEOFF=cuvar.taxyeoff

	// Fisrt day current year
	set BOY=$$BOFY^SCADAT(CUVAR2,1)
	set BOT=$$BOTY^SCADAT(CUVAR2,1)
	set DED=lnfeep.ded

	/* Update deductible assessed and nondeductible assessed prior year or
	   year to date buckets
	*/

	// update fees assessed buckets
	if ADJFLG do {
		// Fee accessed life
		set lnfee.aslf=lnfee.aslf-AMT
		if (YEOFF)&(%EffectiveDate<BOY)&(CUVAR2'>(BOY+YEOFF)) do {
			// Prior year
			set lnfee.aspy=lnfee.aspy-AMT
			if DED set ln.dafpy=ln.dafpy-AMT
			else  set ln.ndafpy=ln.ndafpy-AMT
			}
		else  do {
			// Current Year
			set lnfee.asytd=lnfee.asytd-AMT
			if DED set ln.dafyd=ln.dafyd-AMT
			else  set ln.ndafyd=ln.ndafyd-AMT
			}
		if (TAXYEOFF)&(%EffectiveDate<BOT)&(CUVAR2'>(BOT+TAXYEOFF)) do {
			// Prior Tax year
			set lnfee.aspty=lnfee.aspty-AMT
			if DED set ln.dafpty=ln.dafpty-AMT
			else  set ln.ndafpty=ln.ndafpty-AMT
			}
		else  do {
			// Current Tax Year
			set lnfee.astytd=lnfee.astytd-AMT
			if DED set ln.daftytd=ln.daftytd-AMT
			else  set ln.ndaftytd=ln.ndaftytd-AMT
			}
		}
	// update fees payed buckets
	else  do {
		// Fee payed life
		set lnfee.feelf=lnfee.feelf+AMT

		// prior year
		if (YEOFF)&(%EffectiveDate<BOY)&(CUVAR2'>(BOY+YEOFF)) set lnfee.feepy=lnfee.feepy+AMT

		// Currentyear
		else  set lnfee.feeytd=lnfee.feeytd+AMT

		// prior Tax year
		if (TAXYEOFF)&(%EffectiveDate<BOT)&(CUVAR2'>(BOT+TAXYEOFF)) set lnfee.feepty=lnfee.feepty+AMT
		
		// Current Tax year
		else  set lnfee.feetytd=lnfee.feetytd+AMT
		}

	do lnfee.save()

	quit


GETPRCNT(ELMNT,REMAMT,FACTOR,TOTELMNT)

	//  Calculate fee % for linked fees

	type public Number BASE,CID,CTL,PRCNT
	type public String LNFEEIN
	
	type Number LFEE,FEEREM
	type String BASIS,FEE,PRVBIL,STR

	if 'CTL.extract(1) new prvbil
	
	type ResultSet rs=Db.select("FEETYP,FEEREM","LNFEE","CID=:CID")

	while rs.next() do {
		set FEE=rs.getCol(1)
		set FEEREM=rs.getCol(2)
		type ResultSet rs=Db.select("BASIS,LFEE","LNFEEP","FEETYP=:FEE")
	       
	    	if 'rs.isEmpty(),rs.next() do {
			set BASIS=rs.getCol(1)
			set LFEE=rs.getCol(2)
			}
		if BASIS.get()=ELMNT,LFEE do {

			set PRVBIL=$G(prvbil(FEE)) 
			if $G(LNFEEIN)'="" set PRVBIL=0
			do FINDFEE^LNFEEU(CID,$$TOPFEE^LNU(ELMNT),.STR)
			if 'STR set PRVBIL=0
			if 'REMAMT set PRCNT=FACTOR
			else  set PRCNT=(FEEREM-PRVBIL)/REMAMT*FACTOR
			
			if 'BASE set BASE=FEEREM-PRVBIL
			set PRCNT(FEE)=PRCNT
			do GETPRCNT(FEE,+FEEREM-PRVBIL,PRCNT,.TOTELMNT)
			set TOTELMNT=TOTELMNT+FEEREM-PRVBIL
			}
		}

	quit


public REDUCBL(RecordLN ln,	// Loan account			/REF:RW
	       RecordTTX ttx,	// Transaction			/REF:R
	       String FEE,	// Fee name
	       Number AMT)	// Fee amount

	// Reduce fee level of bill file

	type public Boolean ADJFLG
	type public Number CID
	
	type Number XBSEQ,BSEQ,I,LEVEL,N,OSEQ,PBL1,SCHSEQ,V
	type String BL1,LNBIL1,PBL
	
	set SCHSEQ=0
	set N=Db.nextKey("LNBIL1","CID,SCHSEQ")
  	
	// Billing - Last Sequence Number
	set BSEQ=ln.bseq
	if BSEQ do {
	
		type DbSet ds = Db.selectDbSet("LNBIL1","CID=:CID","SCHSEQ ASC")
		while ds.next() do {
		
			type RecordLNBIL1 lnbil1 = ds.getRecord("LNBIL1")
		
			set XBSEQ = lnbil1.schseq

			// Update LNBIL5 records for fee adjustments and payments
			for LEVEL=0,1 do {
				/* 
				 LNBIL5 records with DUEAMT = 0 are fees not in the payment string
				 and not included in the amounts due on the bill record.
				 
				 LNBIL5 records with DUEAMT = 1 are fees not in the payment string
				 but are included in the amounts due on the bill record.
				 
				 Fees included in the payment string do not have LNBIL5 records.  In
				 that scenario, bill adjustments are made in the section after this one.
				*/
				
				type RecordLNBIL5 lnbil5=Db.getRecord("LNBIL5","CID,XBSEQ,LEVEL,FEE",1)
				if 'lnbil5.getMode() quit
				set V=lnbil5.brfamt 
				if V>AMT set V=AMT
				if 'V quit
				set lnbil5.brfamt=lnbil5.brfamt-V
				
				do lnbil5.save()

				do %HSEQ^LNPTSU(.ttx,XBSEQ_"#"_FEE_"#"_V)
				set AMT=AMT-V
				
				// For fees included in the bill totals...
				if LEVEL=1 do {
					// Decrease the total due on the bill
					set lnbil1.casd = lnbil1.casd - V
					
					// Adjust the total amount billed if this is an adjustment
					if ADJFLG set lnbil1.ctab = lnbil1.ctab - V
					}
				}
	
			set LNBIL1 = ($$BIL1ELE^BILFUNCS(.lnbil1)).translate($char(9),"|")
			
			// Update the bill record for fees in the payment string
			for I=2:1 quit:$P(LNBIL1,"|",I)=""  if $P($P(LNBIL1,"|",I),"#",1)=FEE do {

				set PBL=$P(LNBIL1,"|",I)	// LNBIL1.PE0*
				set PBL1=$P(PBL,"#",4)		// LNBIL1.PE0*AD
				
				if 'PBL1 quit	// No amount due
				
				if PBL1>AMT set PBL1=AMT
				
				// Reduce the fee amount still due
				set $P(PBL,"#",4) = $P(PBL,"#",4) - PBL1
				
				// Adjust the amount billed for this payment element
				// if this is an adjustment transaction
				if ADJFLG set $P(PBL,"#",3) = $P(PBL,"#",3) - PBL1
				
			   	do SETELMT^BILFUNCS(.lnbil1,FEE,PBL)
				
												
				do %HSEQ^LNPTSU(.ttx,XBSEQ_"#"_FEE_"#"_PBL1)
				
				// Reduce the total bill amount due
				set lnbil1.casd = lnbil1.casd - PBL1
				
				// Adjust the total amount billed if this is an adjustment
				if ADJFLG set lnbil1.ctab = lnbil1.ctab - PBL1
				
				set AMT=AMT-PBL1
				}			
		   	 do lnbil1.save()
		   	 do CALC^LNUBIL(.ln,"01001")
			}
		}

	quit


public ADJ(RecordLN ln,		// Loan account			/REF:RW
	   RecordTTX ttx,	// Transaction			/REF:RW
           RecordTRN trn)	// Transaction code		/REF:R

	// Adjustment transaction code entry point
	
	type String TSO

	do INIT(.ln,.ttx,.trn,1)

	// Transaction Source of Funds
	set TSO=ttx.tso

	set TSO=$$FIELDIN^UTSO(TSO,"LNFEEADJ")
      	set ttx.tso=TSO

	quit


SINGFEE(RecordTTX ttx)		// Transaction			/REF:RW

	// Does this loan have only one fee and this is a fee-only pmt ?

	type public Number CID
	type public String FEE
	
	type Number FEECNT = 0
	type String P21,ETC

	// External Transaction Code
	set ETC=ttx.etc

	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")

	set P21=trn.pac
	if P21="" quit 0
	if P21'["LNPTS13" quit 0
	
	type DbSet ds = Db.selectDbSet("LNFEE","CID=:CID")
	if ds.isEmpty() set FEE="" quit 0

	while ds.next() do {
		type RecordLNFEE lnfee = ds.getRecord("LNFEE")
		if 'lnfee.feerem quit
		
		set FEE = lnfee.feetyp
		set FEECNT = FEECNT + 1
		}

	// Multiple fees	
	if FEECNT > 1 set FEE = "" quit 0
	
	// Only one fee on the account
	quit 1	


public VATPMT(RecordLN ln,		// Loan account			/REF:RW
	      RecordTTX ttx,		// Transaction			/REF:RW
              RecordTRN trn)		// Transaction code		/REF:R

	/*
	Pay Value Added Tax on Interest Amount

	Called externally by Payment of Tax on Miscellaneous Charges
	transaction codes.
	*/
	
	type public Number ZAMT

	type Number VATAMT = ln.vatfeedue
	
	set VATAMT = $select(ZAMT < VATAMT:ZAMT, 1:VATAMT)
	
	do UPDVAT(.ln, .ttx, VATAMT)
	
	quit
	
	
UPDVAT(RecordLN ln,		// Loan account			/REF:RW
       RecordTTX ttx,		// Transaction			/REF:RW
       Number VATAMT)		// Value added tax amount

	type public Number ZAMT

	// Update Tran Detail: L:Val Tax Fee (ttx.ttamt2)
	do GL^LNPTSU(.ttx, VATAMT, 16)
	
	// Pay down VAT on Miscellaneous Charges on bill file
	do REDUCBL(.ln, .ttx, "VF", VATAMT)
		
	// Add VAT on Miscellaneous Charges entry into History of bills
	// for satisfied (HISTSB)
	do %HSEQ^LNPTSU(.ttx, "*#VF#"_VATAMT)
	
	set ln.vatfeepd = ln.vatfeepd + VATAMT
	set ln.vatfeedue = ln.vatfeedue - VATAMT
	
	set ZAMT = ZAMT - VATAMT
			
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60856^23808^Hema Puttaswamy^18792"	// Signature - LTD^TIME^USER^SIZE
