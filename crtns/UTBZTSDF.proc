UTBZTSDF(RecordUTBLZTSD utblztsd, String vpar, Boolean vparNorm) // UTBLZTSD - Transaction Support Data System Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             11/22/2003
	// Trigger Definition (2)                      02/06/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblztsd.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblztsd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblztsd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SEQ = utblztsd.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SEQ").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLZTSD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLZTSD","SEQ = :utblztsd.seq")  // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SEQ

	type RecordUTBLZTSD utblztsd = Db.getRecord("UTBLZTSD","SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do utblztsd.setMode(2)

		do UTBZTSDF(utblztsd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLZTSD utblztsd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLZTSD","SEQ = :utblztsd.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblztsd,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblztsd,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblztsd))  S ^UTBL("ZTSD",vobj(utblztsd,-3))=vobj(utblztsd)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLZTSD utblztsd

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblztsd,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("ZTSD",vobj(utblztsd,-3))                    // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLZTSD utblztsd

	// Type local variables for access keys for defaults
	type public String SEQ

	if utblztsd.qrytrnbs.isNull() set utblztsd.qrytrnbs = 0 // qrytrnbs
	if utblztsd.reqd.isNull() set utblztsd.reqd = 0        // reqd
	quit


vreqn // Validate required data items

	type public RecordUTBLZTSD utblztsd

	if utblztsd.acronym.isNull() do vreqerr("ACRONYM") quit
	if utblztsd.qrytrnbs.isNull() do vreqerr("QRYTRNBS") quit
	if utblztsd.reqd.isNull() do vreqerr("REQD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLZTSD utblztsd

	if utblztsd.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACRONYM").exists(),utblztsd.acronym.isNull() do vreqerr("ACRONYM") quit
		if vx("QRYTRNBS").exists(),utblztsd.qrytrnbs.isNull() do vreqerr("QRYTRNBS") quit
		if vx("REQD").exists(),utblztsd.reqd.isNull() do vreqerr("REQD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLZTSD","MSG",1767,"UTBLZTSD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLZTSD utblztsd
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblztsd,.vx(),1,"|")
	quit


vbi1 // Trigger BI - Before Insert

	type public RecordUTBLZTSD utblztsd
	/*
	----Revision History---------------------------------------------------
	
	02/06/06 - SPR - 19377 
		   Modified trigger to check the file UTBLZTSO having an entry 
		   for UTBLZTSD data.
	
	11/21/05 - SPR - 18268
	
		   Transaction Support Data/Transaction Sets -General DBI3
		   system area cleanup.
		   
	-----------------------------------------------------------------------	
	*/

	//Use standard field for sequences less than 1000
	
	type public Boolean ER
	type String X
	
	if utblztsd.seq<1000 do Runtime.setErrMSG("UTBLZTSD",3633) quit:ER
	
	set X=utblztsd.acronym
	
	// Custom Transaction Source entries must begin with "Z"
 	if 'X.isNull(),X.extract()'="Z" do Runtime.setErrMSG("STBLTSD",3627) quit:ER
	
	type RecordSTBLTSO stbltso=Db.getRecord("STBLTSO","KEY=:X",1)
 	type RecordUTBLZTSO utblztso=Db.getRecord("UTBLZTSO","KEY=:X",1)
	
 	// Acronym must be a key from STBLTSO or UTBLZTSO
 	if 'stbltso.getMode(),'utblztso.getMode() do Runtime.setErrMSG("STBLTSD",3635) quit:ER
	
 	quit

vbu1 // Trigger BU - Before Update

	type public RecordUTBLZTSD utblztsd
	do utblztsd.setAuditFlag(1)
	/*
	----Revision History---------------------------------------------------
							 
								11/21/05 - SPR - 18268
	
		   Transaction Support Data/Transaction Sets -General DBI3
		   system area cleanup.
	
	-----------------------------------------------------------------------	
	*/

	//Use standard field for sequences less than 1000
	
	type public Boolean ER
	type String ACRO,DATA1,DATA2
	
	if utblztsd.seq<1000 do Runtime.setErrMSG("UTBLZTSD",3633) quit:ER 
	
	set ACRO=utblztsd.acronym

	//Custom Transaction Source entries must begin with "Z"
	if ACRO.extract()'="Z" do Runtime.setErrMSG("UTBLZTSD",3627) quit:ER    
	
	type RecordSTBLTSO stbltso=Db.getRecord("STBLTSO","KEY=:ACRO")
	set DATA1=stbltso.key
	
	type RecordUTBLZTSO utblztso=Db.getRecord("UTBLZTSO","KEY=:ACRO")
	set DATA2=utblztso.key

	//Acronym must be a key from STBLTSO or UTBLZTSO
	if (DATA1'=ACRO),(DATA2'=ACRO) do Runtime.setErrMSG("UTBLZTSD",3635) quit:ER 

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLZTSD utblztsd

	set X = utblztsd.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if utblztsd.acronym.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ACRONYM", vRM) quit
	set X = utblztsd.class if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLASS", vRM) quit
	set X = utblztsd.dataloc if 'X.isNull(),'Db.isDefined("STBLFFTL","X") set vRM = $$^MSG(1485,X) do vdderr("DATALOC", vRM) quit
	if utblztsd.default.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DEFAULT", vRM) quit
	if utblztsd.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	if utblztsd.dummy.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DUMMY", vRM) quit
	if utblztsd.funqry.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FUNQRY", vRM) quit
	if utblztsd.help.length()>40 set vRM = $$^MSG(1076,40) do vdderr("HELP", vRM) quit
	set X = utblztsd.mrpc if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MRPC", vRM) quit
	if utblztsd.pre.length()>100 set vRM = $$^MSG(1076,100) do vdderr("PRE", vRM) quit
	if utblztsd.prompt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PROMPT", vRM) quit
	if '("01"[utblztsd.QRYTRNBS) set vRM=$$^MSG(742,"L") do vdderr("QRYTRNBS", vRM) quit
	if '("01"[utblztsd.REQD) set vRM=$$^MSG(742,"L") do vdderr("REQD", vRM) quit
	if utblztsd.sql.length()>100 set vRM = $$^MSG(1076,100) do vdderr("SQL", vRM) quit
	set X = utblztsd.type if 'X.isNull(),'Db.isDefined("DBCTLDVFM","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLZTSD","MSG",979,"UTBLZTSD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLZTSD utblztsd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("SEQ")
	set voldkey = vux.piece("|",1),vobj(utblztsd,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblztsd,-3) = vnewkey // Copy new keys into object
	type RecordUTBLZTSD vnewrec = utblztsd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLZTSD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utblztsd,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
