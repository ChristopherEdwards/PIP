ARSFIL(RecordARS ars, String vpar, Boolean vparNorm) // ARS - Account Reconciliation File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (25)             04/18/2006
	// Trigger Definition (6)                      11/16/2006
	// Journal File Definition (9)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ars.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ars,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ars,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = ars.cid
	type String CKNO = ars.ckno

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("CKNO").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ARS",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ARS","CID = :ars.cid and CKNO = :ars.ckno") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String CKNO

	type RecordARS ars = Db.getRecord("ARS","CID=:CID,CKNO=:CKNO")
	if (%ProcessMode = 2) do {
		do ars.setMode(2)

		do ARSFIL(ars,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordARS ars

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ARS","CID = :ars.cid and CKNO = :ars.ckno") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ars))  S ^ARS(vobj(ars,-3),vobj(ars,-4))=vobj(ars)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.ars)                 // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordARS ars

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.ars)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ARS(vobj(ars,-3),vobj(ars,-4))                    // Delete Record
	quit


vreqn // Validate required data items

	type public RecordARS ars

	if ars.opt.isNull() do vreqerr("OPT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordARS ars

	if ars.cid.isNull() do vreqerr("CID") quit
	if ars.ckno.isNull() do vreqerr("CKNO") quit

		if vx("OPT").exists(),ars.opt.isNull() do vreqerr("OPT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ARS","MSG",1767,"ARS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordARS ars
	if 'ars.cid.isNull() set vfkey("^ARS("_""""_ars.cid_""""_")")="ARS(CID) -> ARSCID"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordARS ars
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ARSCID",":ars.cid") set vERRMSG = $$^MSG(8563,"ARS(CID) -> ARSCID") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("VDT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordARS ars
	do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(ars,.vx(),1,"|") quit
	if vx("IAMT").exists()!vx("PAMT").exists()!vx("IDT").exists()!vx("PDT").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OPT").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(ars,.vx(),1,"|")
	quit


vau1 // Trigger AU_VDT - After Update of VDT

	type public RecordARS ars
	/*
	----Revision History---------------------------------------------------
		
	11/16/06 - PUTTASWH - 23310
		   Modified the trigger to quit if the value of ars.vdt is
		   null.			
	
	*/

	new X,OPT
	if $G(OPT)="",ars.vdt'="" set OPT="V"
	if ars.vdt="" quit
	if ars.vdt<ars.idt do { quit
		set ER=1 
		set X=$$DAT^%ZM(ars.idt) do Runtime.setErrMSG("ARS",2954,"X") quit:ER 
		}
	quit 
	

vbd1 // Trigger BEFORE_DELETE - Before delete of ARS record

	type public RecordARS ars

	/*
	----Revision History---------------------------------------------------
										 
											04/05/06 - KumarSS - CR 20537
	              This will update the OutStanding Check Amount when ever 
	              a check is deleted. 
	*/
	
	// Get the OutStanding Amount from ARSCID Table
	
	type RecordARSCID arscid=Db.getRecord("ARSCID","CID=:ars.cid")
	set arscid.cksout=arscid.cksout-ars.iamt
	do arscid.save()

	quit

vbi1 // Trigger BEFORE_INSERT - Before insert of ARS record

	type public RecordARS ars
	/*
	----Revision History---------------------------------------------------
	
	06/19/06 - PUTTASWH - 21654
		   Modified to update the outstanding check amount if the
		   issued amount already exists else it will remain the 
		   same as the previous value in ARSCID table.
	
	04/26/06 - KinI - 20743
		   Modified by adding parameters to EXC^ARSUTL call.
		   Added D variable setting to %SystemDate in case it is null
		   to cover the date for all actions available for selection 
		   when inserting new ARS record via PFW.
		   
	04/07/06 - KumarSS - CR 20537
		   Removed reference of CKR array, since CKR array is used 
		   in the lower versions to store the data. Now ARS record 
		   serves the purpose and the usage of CKR array is no 
		   longer available.

	11/04/05 - PUTTASWH - CR17011
		   Modified the call to EXC^ARSUTL by sending the record ars.
		   
	01/21/04 - CARROLLJ - CR7997
		   Corrected undefined error on CKR variable.
	*/

	type public Boolean ER	
	type public String RM
	
	type Boolean EXC
	type Date D, X
	type String MES
	type Number CHKAMT, EFLG, Y

	if ars.cid="" quit
	
	type RecordARSCID arscid=Db.getRecord("ARSCID","CID=:ars.cid",1)	
		
	type RecordDEP dep=Db.getRecord("DEP","CID=:ars.cid",1)

	// Account not set up for Account Reconciliation System	
	if (dep.ars.isNull()) ! (dep.ars=0) do Runtime.setErrMSG("ARS",85) quit:ER
	
	// Default TJD into PDT if null
	if ars.opt="P",ars.pdt="" set ars.pdt=%SystemDate
	
	if ars.opt="I" do {
		set ars.stat=$S(ars.stat.oldVal=3:4,1:0)
		set CHKAMT=arscid.cksout+ars.iamt
		set ars.iactdt=%SystemDate
		set ars.iuid=%UserID
		}

	if ars.opt="P" do {
		set ars.stat=$S($L(ars.iamt.oldVal):4,1:3)
		
		/*
		The following condition checks if the check was previously 
		issued to update the outstanding amount. This check is 
		required since a check can be paid via transaction posting
		and also as there is no restriction to create a paid check.
		*/	
			
		if ars.iamt set CHKAMT=arscid.cksout-ars.iamt
		else  set CHKAMT=arscid.cksout
		set ars.pactdt=%SystemDate 
		set ars.puid=%UserID
		}

	if ars.opt="V" do {
		set ars.stat=1 
		set CHKAMT=arscid.cksout-ars.iamt.oldVal
		}

	if ars.opt="D" do {
		set ars.stat=2 
		set CHKAMT=arscid.cksout-ars.iamt.oldVal
		}

	if ars.opt="R" do {
		set ars.stat=$S(ars.stat.oldVal=4:0,1:2) 
		set CHKAMT=arscid.cksout+ars.iamt
		}

	set arscid.cksout=CHKAMT
	do arscid.save()	
	
	if ars.opt="I" set D=ars.idt
	else  set D=ars.vdt
	
	/* Since a user can manually select check action other then issued or 
	   void when creating ARS record via PFW, set the date for such action 
	   to the system date so we don't generate unnecessary errors. 
	*/
	if D.isNull() set D=%SystemDate 
	
	// Last parameter in EXC^ARSUTL call is ARS filer indicator checked in 
	// order to skip setting the error when inserting new "paid" check.
	do EXC^ARSUTL(.ars,.EFLG,.EXC,ars.ckno,ars.opt,ars.iamt,D,1)
	
	if ('EXC.get())!(EFLG.get()=7) quit	
	
	type RecordSTBLARSEXC arsexc=Db.getRecord("STBLARSEXC","KEY=:EFLG",1)
	set MES=arsexc.DESC

	if EFLG=1 do {
		set Y=$$^SCARND(ars.pamt,1,ars.cid)
		// ~p1, paid amount is equal to ~p2
		do Runtime.setErrMSG("ARS",3101,"MES~Y") quit:ER	
		}

	if EFLG=2 do {
		set X=$$DAT^%ZM(ars.pdt)
		// ~p1, paid date is ~p2 
		do Runtime.setErrMSG("ARS",3102,"MES~X") quit:ER		
		}

	if EFLG=3 do {
		set X=$$DAT^%ZM(ars.vdt)
		// ~p1, paid date is ~p2 
		do Runtime.setErrMSG("ARS",3102,"MES~X") quit:ER	
		}

	do Runtime.setErrMSG("ARS",3333,"MES") quit:ER

	quit

	

vbu1 // Trigger BU_CKINFO - Before Update Of Check Info

	type public RecordARS ars
	do ars.setAuditFlag(1)
	/*
	----Revision History---------------------------------------------------

	04/26/06 - KinI - 20743
		   Modified by adding parameters to EXC^ARSUTL call.
		   Removed unused CHR array since ars object is used instead.

	11/04/05 - PUTTASWH - CR17011
		   Modified the call to EXC^ARSUTL by sending the 
		   record ars.
		   
	01/21/04 - CARROLLJ - CR7997
		   Corrected undefined error on CKR variable.
	*/

	type public Boolean ER	
	
	type Date D, Y	
	type Number EFLG
	type Boolean EXC
	type String MES, OPT, X	

	if ars.opt="I" set D=ars.idt
	else  if ars.opt="P" set D=ars.pdt
	else  set D=ars.vdt 

	if ars.stat=3 set OPT=ars.opt
	else  set OPT=ars.opt.oldVal
		
	do EXC^ARSUTL(.ars,.EFLG,.EXC,ars.ckno,ars.opt,ars.iamt,D,1)
	
	if (EXC.get().isNull())!(EFLG.get()=7) quit
		
	type RecordSTBLARSEXC arsexc=Db.getRecord("STBLARSEXC","KEY=:EFLG",1)
	set MES=arsexc.DESC	
	
	if EFLG=1 do {
		set Y=$$^SCARND(ars.pamt,1,ars.cid)
		// ~p1, paid amount is equal to ~p2 
		do Runtime.setErrMSG("ARS",3101,"MES~Y") quit:ER	
		}

	if EFLG=2 do {
		set X=$$DAT^%ZM(ars.pdt)
		// ~p1, paid date is ~p2  
		do Runtime.setErrMSG("ARS",3102,"MES~X") quit:ER	
		}

	if EFLG=3 do {
		set X=$$DAT^%ZM(ars.vdt)
		// ~p1, paid date is ~p2  
		do Runtime.setErrMSG("ARS",3102,"MES~X") quit:ER	
		}

	do Runtime.setErrMSG("ARS",3333,"MES") quit:ER	// ~p1  
	
	quit 
	

vbu2 // Trigger BU_OPT - Before Update Of OPT

	type public RecordARS ars
	do ars.setAuditFlag(1)
	/*
	----Revision History---------------------------------------------------

	11/16/06 - PUTTASWH - CR 23310
		   Modified to update the outstanding check amount to the
		   paid amount if the check issued date is null.
		   
	06/15/06 - PUTTASWH - CR 21764
		   Modified to add the check issued amount to the outstanding
		   amount during Reversal.   

	04/10/06 - SANTHUMS - CR 20554
		   When the Status is changed to Paid from PFW the paid amount
		   is not subtracted from outstanding amount.
		    	
	04/05/06 - KumarSS - CR 20537
		   Modifed the calucation of CHKAMT when ARS.OPT is 'P' and 'R'.
		   
	11/24/05 - PUTTASWH - CR17011
		   Added the third parameter for Db.getRecord
		   for the ARSCID record.
	*/
	
	new CHKAMT,UPD,arscid


	type RecordARSCID arscid=Db.getRecord("ARSCID","CID",1)
	set UPD=1
	if ars.opt="I" do {
		set ars.stat.journal=0
		set ars.stat=$S(ars.stat.oldVal=3:4,1:0)
		set CHKAMT=arscid.cksout-ars.iamt.oldVal+ars.iamt
		}

	if ars.opt="P" do {
		set ars.stat.journal=0
		set ars.stat=$S($L(ars.iamt.oldVal):4,1:3)
		if ars.pamt.isNull() set CHKAMT=arscid.cksout-ars.iamt
		else  set CHKAMT=arscid.cksout-ars.pamt
		}

	if ars.opt="V" do {
		set ars.stat.journal=0
		set ars.stat=1
		set CHKAMT=arscid.cksout-ars.iamt.oldVal
		}

	if ars.opt="D" do {
		set ars.stat.journal=0
		set ars.stat=2
		if ars.stat.oldVal=1 set UPD=0
		else  set CHKAMT=arscid.cksout-ars.iamt.oldVal
		}

	if ars.opt="R" do {
		set ars.stat.journal=0
		set ars.stat=$S(ars.stat.oldVal=4:0,1:2) 
		set CHKAMT=arscid.cksout+ars.iamt
		if ars.idt="" set CHKAMT=arscid.cksout+ars.pamt.oldVal
		}

	if UPD set arscid.cksout=CHKAMT
	do arscid.save()
	quit

vbu3 // Trigger UPD_GENERIC - Create a UX array for OPT to force journ

	type public RecordARS ars
	do ars.setAuditFlag(1)
	/*
	----Revision History---------------------------------------------------
		
	18/04/06 - SANTHUMS - CR 20554
		   Removed set ars.vdt=%SystemDate since ars.vdt should 
		   not set when the status of the check is "D".
		   Reversal activity date also to be set when the Status 
		   of the check is "R"	

								*/
							 
	if ars.opt.oldVal=ars.opt set ars.opt=ars.opt
	if ars.opt="I" do {
		set ars.iactdt=%SystemDate 
		set ars.iuid=%UserID
		}

	if ars.opt="P" do {
		set ars.pactdt=%SystemDate 
		set ars.puid=%UserID
		}

	if ars.opt="V" do {
		set ars.vactdt=%SystemDate 
		set ars.vuid=%UserID
		}

	if ars.opt="D" do {
		set ars.ddt=%SystemDate 
		set ars.duid=%UserID
		}

	if ars.opt="R" do {
		set ars.ractdt=%SystemDate 
		set ars.ruid=%UserID
		}

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordARS ars

	set X = ars.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = ars.ckno if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARS.CKNO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ars.ddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DDT", vRM) quit
	if ars.duid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DUID", vRM) quit
	set X = ars.iactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("IACTDT", vRM) quit
	set X = ars.iamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARS.IAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ars.idt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("IDT", vRM) quit
	if ars.iuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IUID", vRM) quit
	if ars.opt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("OPT", vRM) quit
	set X = ars.pactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PACTDT", vRM) quit
	set X = ars.pamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARS.PAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ars.pdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PDT", vRM) quit
	if ars.pinfo.length()>30 set vRM = $$^MSG(1076,30) do vdderr("PINFO", vRM) quit
	if ars.pname.length()>30 set vRM = $$^MSG(1076,30) do vdderr("PNAME", vRM) quit
	if ars.puid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PUID", vRM) quit
	set X = ars.ractdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RACTDT", vRM) quit
	set X = ars.rdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RDT", vRM) quit
	set X = ars.rpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RPDT", vRM) quit
	if ars.ruid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RUID", vRM) quit
	set X = ars.spray if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("SPRAY", vRM) quit
	set X = ars.stat if 'X.isNull(),'Db.isDefined("STBLARSSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
	set X = ars.tseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	set X = ars.vactdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VACTDT", vRM) quit
	set X = ars.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	if ars.vuid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("VUID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ARS","MSG",979,"ARS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordARS ars)	//ARS Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.ars)	// Mode=I Tran=B EFD=N Seq=1 JRNID=INS_I
				do vj3(.ars)	// Mode=I Tran=B EFD=N Seq=1 JRNID=INS_P
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.ars)	// Mode=I Tran=O EFD=N Seq=1 JRNID=INS_I
				do vj3(.ars)	// Mode=I Tran=O EFD=N Seq=1 JRNID=INS_P
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if EFD.get() do {
				quit:'vx.data()
				if vx("CKNO").data() do vj1(.ars,"CKNO")	// Mode=U Tran=B EFD=E Seq=1 JRNID=CKNO
				}
			else  do {
				do vj4(.ars)	// Mode=U Tran=B EFD=N Seq=1 JRNID=UPD_D
				do vj5(.ars)	// Mode=U Tran=B EFD=N Seq=1 JRNID=UPD_E
				do vj6(.ars)	// Mode=U Tran=B EFD=N Seq=1 JRNID=UPD_I
				do vj7(.ars)	// Mode=U Tran=B EFD=N Seq=1 JRNID=UPD_P
				do vj8(.ars)	// Mode=U Tran=B EFD=N Seq=1 JRNID=UPD_R
				do vj9(.ars)	// Mode=U Tran=B EFD=N Seq=1 JRNID=UPD_V
				quit:'vx.data()
				if vx("CKNO").data() do vj1(.ars,"CKNO")	// Mode=U Tran=B EFD=N Seq=1 JRNID=CKNO
				}
			}
		else  if TSRC="O" do {
			if EFD.get() do {
				quit:'vx.data()
				if vx("CKNO").data() do vj1(.ars,"CKNO")	// Mode=U Tran=O EFD=E Seq=1 JRNID=CKNO
				}
			else  do {
				do vj4(.ars)	// Mode=U Tran=O EFD=N Seq=1 JRNID=UPD_D
				do vj5(.ars)	// Mode=U Tran=O EFD=N Seq=1 JRNID=UPD_E
				do vj6(.ars)	// Mode=U Tran=O EFD=N Seq=1 JRNID=UPD_I
				do vj7(.ars)	// Mode=U Tran=O EFD=N Seq=1 JRNID=UPD_P
				do vj8(.ars)	// Mode=U Tran=O EFD=N Seq=1 JRNID=UPD_R
				do vj9(.ars)	// Mode=U Tran=O EFD=N Seq=1 JRNID=UPD_V
				quit:'vx.data()
				if vx("CKNO").data() do vj1(.ars,"CKNO")	// Mode=U Tran=O EFD=N Seq=1 JRNID=CKNO
				}
			}
		}

	quit


vj1(RecordARS ars,String vdi)	// CKNO  Table ARSH  HISTORY FOR UPDATE OF CHKNO

	type Public String vx(),TJD
	type String v1,v2,v3,vlastkey

	type String vold,vnew

	set vold=vx(vdi).piece("|",1)
	set vnew=vx(vdi).piece("|",2)

	set v1=ars.cid
	set v2=TJD
	set v3=ars.ckno
	set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
	type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
	set arsh.pinfo=$$^MSG(6377,vold,vnew)

	do arsh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordARS ars)	// INS_I  Table ARSH  History for insert of issue information.

	if ars.idt'=""!(ars.pdt="")
	else  quit

	type Public String %UID,TJD
	type String v1,v2,v3,vlastkey
	set v1=ars.cid
	set v2=TJD
	set v3=ars.ckno
	set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
	type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
	set arsh.iactdt=TJD
	set arsh.iamt=ars.iamt
	set arsh.idt=ars.idt
	set arsh.iuid=%UID
	set arsh.pinfo=ars.pinfo
	set arsh.pname=ars.pname
	set arsh.stat=ars.stat

	do arsh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordARS ars)	// INS_P  Table ARSH  History for insert of payment info.

	if ars.pdt'=""
	else  quit

	type Public String %UID,TJD
	type String v1,v2,v3,vlastkey
	set v1=ars.cid
	set v2=TJD
	set v3=ars.ckno
	set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
	type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
	set arsh.pactdt=TJD
	set arsh.pamt=ars.pamt
	set arsh.pdt=ars.pdt
	set arsh.pinfo=ars.pinfo
	set arsh.pname=ars.pname
	set arsh.puid=%UID
	set arsh.stat=ars.stat

	do arsh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordARS ars)	// UPD_D  Table ARSH  History for update of delete info

	if ars.opt="D"
	else  quit

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",STAT,VDT,DDT,DUID,PNAME,PINFO,"'[(","_vdi_",") do { quit
		type Public String %UID,TJD
		type String v1,v2,v3,vlastkey
		set v1=ars.cid
		set v2=TJD
		set v3=ars.ckno
		set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
		type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
		set arsh.ddt=TJD
		set arsh.duid=%UID
		set arsh.pname=$$^MSG(6555)
		set arsh.stat=ars.stat

		do arsh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj5(RecordARS ars)	// UPD_E  Table ARSH  History for update of error correct info

	type Public String TJD

	if ars.opt="R"
	else  quit
	if ars.pdt=TJD
	else  quit

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",STAT,PDT,PACTDT,PAMT,PUID,PNAME,PINFO,"'[(","_vdi_",") do { quit
		type Public String TJD
		type String v1,v2,v3,vlastkey
		set v1=ars.cid
		set v2=TJD
		set v3=ars.ckno
		set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
		type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
		set arsh.pinfo=$$^MSG(6560)
		set arsh.stat=ars.stat

		do arsh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj6(RecordARS ars)	// UPD_I  Table ARSH  History for update of issue info

	if ars.opt="I"
	else  quit

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",IAMT,IDT,IACTDT,PINFO,PNAME,IUID,STAT,CKNO,"'[(","_vdi_",") do { quit
		type Public String %UID,TJD
		type String v1,v2,v3,vlastkey
		set v1=ars.cid
		set v2=TJD
		set v3=ars.ckno
		set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
		type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
		set arsh.iactdt=TJD
		set arsh.iamt=ars.iamt
		set arsh.idt=ars.idt
		set arsh.iuid=%UID
		set arsh.pinfo=ars.pinfo
		set arsh.pname=ars.pname
		set arsh.stat=ars.stat

		do arsh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj7(RecordARS ars)	// UPD_P  Table ARSH  History for update of paid info

	if ars.opt="P"
	else  quit

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",STAT,PDT,PACTDT,PAMT,PUID,PNAME,PINFO,"'[(","_vdi_",") do { quit
		type Public String %UID,TJD
		type String v1,v2,v3,vlastkey
		set v1=ars.cid
		set v2=TJD
		set v3=ars.ckno
		set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
		type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
		set arsh.pactdt=TJD
		set arsh.pamt=ars.pamt
		set arsh.pdt=ars.pdt
		set arsh.pinfo=ars.pinfo
		set arsh.pname=ars.pname
		set arsh.puid=%UID
		set arsh.stat=ars.stat

		do arsh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj8(RecordARS ars)	// UPD_R  Table ARSH  History for update of reversal info

	type Public String TJD

	if ars.opt="R"
	else  quit
	if ars.pdt<TJD&(ars.pdt'="")
	else  quit

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",STAT,PDT,PACTDT,PAMT,PUID,PNAME,PINFO,RDT,RACTDT,RUID,RPDT,"'[(","_vdi_",") do { quit
		type Public String %UID,TJD
		type String v1,v2,v3,vlastkey
		set v1=ars.cid
		set v2=TJD
		set v3=ars.ckno
		set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
		type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
		set arsh.pinfo=$$^MSG(3538)
		set arsh.ractdt=TJD
		set arsh.rdt=ars.rdt
		set arsh.ruid=%UID
		set arsh.stat=ars.stat

		do arsh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj9(RecordARS ars)	// UPD_V  Table ARSH  History for update of void info

	if ars.opt="V"
	else  quit

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if ",STAT,VDT,VACTDT,VUID,PNAME,PINFO,"'[(","_vdi_",") do { quit
		type Public String %UID,TJD
		type String v1,v2,v3,vlastkey
		set v1=ars.cid
		set v2=TJD
		set v3=ars.ckno
		set vlastkey=Db.nextVal("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3")
		type RecordARSH arsh=Db.getRecord("ARSH","CID=:v1,ACTDT=:v2,CKNO=:v3,CSEQ=:vlastkey",1)
		set arsh.pinfo=ars.pinfo
		set arsh.pname=ars.pname
		set arsh.stat=ars.stat
		set arsh.vactdt=TJD
		set arsh.vdt=ars.vdt
		set arsh.vuid=%UID

		do arsh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordARS ars

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CKNO").exists() set vux("CKNO") = vx("CKNO")
	do vkey(1) set voldkey = ars.cid_","_ars.ckno          // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ars.cid_","_ars.ckno          // Copy new keys into object
	type RecordARS vnewrec = ars.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ARS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordARS ars

	if vux("CID").exists() set ars.cid = vux("CID").piece("|",i)
	if vux("CKNO").exists() set ars.ckno = vux("CKNO").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordARS ars
	type public String vpar

	do Db.delete("ARSH","CID=:ars.cid AND CKNO=:ars.ckno",vpar) // Cascade delete

	quit
