SCAU0FL(RecordSCAU0 scau0, String vpar, Boolean vparNorm) // SCAU0 - Userclass Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (27)             11/20/2006
	// Trigger Definition (4)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = scau0.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(scau0,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(scau0,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String UCLS = scau0.ucls

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("UCLS").exists() do vkchged quit                // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SCAU0",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SCAU0","UCLS = :scau0.ucls")      // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String UCLS

	type RecordSCAU0 scau0 = Db.getRecord("SCAU0","UCLS=:UCLS")
	if (%ProcessMode = 2) do {
		do scau0.setMode(2)

		do SCAU0FL(scau0,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSCAU0 scau0

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SCAU0","UCLS = :scau0.ucls") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(scau0,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(scau0,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(scau0))  S ^SCAU(0,vobj(scau0,-3))=vobj(scau0)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSCAU0 scau0

	if vpar'["/NOLOG/" do ^DBSLOGIT(scau0,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^SCAU(0,vobj(scau0,-3))                            // Delete Record
	quit


vinit // Initialize default values

	type public RecordSCAU0 scau0

	// Type local variables for access keys for defaults
	type public String UCLS

	if scau0.dealefd.isNull() set scau0.dealefd = 0        // dealefd
	if scau0.mulpin.isNull() set scau0.mulpin = 0          // mulpin
	if scau0.ovr.isNull() set scau0.ovr = 0                // ovr
	if scau0.pintrck.isNull() set scau0.pintrck = 0        // pintrck
	if scau0.plsaupd.isNull() set scau0.plsaupd = 0        // plsaupd
	if scau0.pwdchg.isNull() set scau0.pwdchg = 30         // pwdchg
	if scau0.pwdlen.isNull() set scau0.pwdlen = 3          // pwdlen
	if scau0.pwdtry.isNull() set scau0.pwdtry = 3          // pwdtry
	if scau0.rbrcc.isNull() set scau0.rbrcc = 0            // rbrcc
	if scau0.rstrct.isNull() set scau0.rstrct = 0          // rstrct
	if scau0.secucls.isNull() set scau0.secucls = 0        // secucls
	if scau0.seshis.isNull() set scau0.seshis = 0          // seshis
	quit


vreqn // Validate required data items

	type public RecordSCAU0 scau0

	if scau0.dealefd.isNull() do vreqerr("DEALEFD") quit
	if scau0.mulpin.isNull() do vreqerr("MULPIN") quit
	if scau0.ovr.isNull() do vreqerr("OVR") quit
	if scau0.pintrck.isNull() do vreqerr("PINTRCK") quit
	if scau0.plsaupd.isNull() do vreqerr("PLSAUPD") quit
	if scau0.rbrcc.isNull() do vreqerr("RBRCC") quit
	if scau0.rstrct.isNull() do vreqerr("RSTRCT") quit
	if scau0.secucls.isNull() do vreqerr("SECUCLS") quit
	if scau0.seshis.isNull() do vreqerr("SESHIS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSCAU0 scau0

	if scau0.ucls.isNull() do vreqerr("UCLS") quit

		if vx("DEALEFD").exists(),scau0.dealefd.isNull() do vreqerr("DEALEFD") quit
		if vx("MULPIN").exists(),scau0.mulpin.isNull() do vreqerr("MULPIN") quit
		if vx("OVR").exists(),scau0.ovr.isNull() do vreqerr("OVR") quit
		if vx("PINTRCK").exists(),scau0.pintrck.isNull() do vreqerr("PINTRCK") quit
		if vx("PLSAUPD").exists(),scau0.plsaupd.isNull() do vreqerr("PLSAUPD") quit
		if vx("RBRCC").exists(),scau0.rbrcc.isNull() do vreqerr("RBRCC") quit
		if vx("RSTRCT").exists(),scau0.rstrct.isNull() do vreqerr("RSTRCT") quit
		if vx("SECUCLS").exists(),scau0.secucls.isNull() do vreqerr("SECUCLS") quit
		if vx("SESHIS").exists(),scau0.seshis.isNull() do vreqerr("SESHIS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCAU0","MSG",1767,"SCAU0."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("CCPOPT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSCAU0 scau0
	if vx("").order().isNull() do AUDIT^UCUTILN(scau0,.vx(),1,"|") quit
	if vx("CCPOPT").exists()!vx("ICSES").exists()!vx("SUPID").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(scau0,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger for SCAU0

	type public RecordSCAU0 scau0
	/*
	----- Revision History ------------------------------------------------------
	09/20/99 - CARROLLJ - 31126
		   Convert to PSL.	

	06/15/99 - HAYMANP - 32901
		   Created trigger for Customer Session project.
	
	07/07/99 - GRAZIANOM - 32901
		   Removed logic which set Session History Indicator to required
		   if Customer Centric Processing is in use
	*/
	
	// Quit if Customer Centric Processing is not enabled
	if scau0.ccpopt'>0 quit
	
	// Initiate Customer Session is required if Customer Centric Processing is in use
	if scau0.icses="" do Runtime.setErrXBAD("SCAU0","ICSREQ") quit:ER 
	
	quit
	

vau1 // Trigger AU_CCPOPT - After Update Customer Centric Processing

	type public RecordSCAU0 scau0
	/*
	----- Revision History ------------------------------------------------------
	
	06/15/99 - HAYMANP - 32901
		   Created trigger for Customer Session project.
	
	07/07/99 - GRAZIANOM - 32901
		   Removed logic which set Session History Indicator to required
		   if Customer Centric Processing is in use
	*/
	
	// Quit if Customer Centric Processing is not enabled
	if scau0.ccpopt'>0 quit
	
	// Initiate Customer Session is required if Customer Centric Processing is in use
	if scau0.icses="" do Runtime.setErrXBAD("SCAU0","ICSREQ") quit:ER 
	
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordSCAU0 scau0
	/*
	------Revision History-------------------------------------------------------
	
	06/25/99 - Graziano - 33446
		   Created this trigger to identify whether customer centric
		   processing is selected, and if so, what is the status of
		   PINTRCK and MULPIN.
	*/
	
	if 'scau0.ccpopt do {
		if scau0.pintrck set scau0.pintrck=0
		if scau0.mulpin set scau0.mulpin=0
		if scau0.icses set scau0.icses=0
		}
	
	if scau0.icses,scau0.mulpin set scau0.mulpin=0
	
	if scau0.supid'=1,scau0.mulpin set scau0.mulpin=0
	
	quit
	

vbu1 // Trigger BU_CUSCEN - Before Update Customer Centric Options

	type public RecordSCAU0 scau0
	do scau0.setAuditFlag(1)
	/*
	------Revision History-----------------------------------------------
	
	06/25/99 - Graziano - 33446
		   Created this trigger to identify whether customer centric
		   processing is selected, and if so, what is the status of
		   PINTRCK and MULPIN.
	*/
	
	
	if 'scau0.ccpopt do {
		if scau0.pintrck set scau0.pintrck=0
		if scau0.mulpin set scau0.mulpin=0
		if scau0.icses set scau0.icses=0
		}
	
	if scau0.icses,scau0.mulpin set scau0.mulpin=0
	
	if scau0.supid'=1,scau0.mulpin set scau0.mulpin=0
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSCAU0 scau0

	if scau0.ucls.length()>12 set vRM = $$^MSG(1076,12) do vdderr("UCLS", vRM) quit
	set X = scau0.ccpopt if 'X.isNull(),'Db.isDefined("STBLCCPOPT","X") set vRM = $$^MSG(1485,X) do vdderr("CCPOPT", vRM) quit
	if '("01"[scau0.DEALEFD) set vRM=$$^MSG(742,"L") do vdderr("DEALEFD", vRM) quit
	if scau0.desc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESC", vRM) quit
	set X = scau0.icses if 'X.isNull(),'Db.isDefined("STBLICSES","X") set vRM = $$^MSG(1485,X) do vdderr("ICSES", vRM) quit
	set X = scau0.maxefd if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXEFD", vRM) quit
	set X = scau0.maxft if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXFT", vRM) quit
	set X = scau0.maxin if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXIN", vRM) quit
	set X = scau0.maxrev if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXREV", vRM) quit
	set X = scau0.maxwo if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXWO", vRM) quit
	set X = scau0.menu if 'X.isNull(),'Db.isDefined("SCAMENU0","X") set vRM = $$^MSG(1485,X) do vdderr("MENU", vRM) quit
	if '("01"[scau0.MULPIN) set vRM=$$^MSG(742,"L") do vdderr("MULPIN", vRM) quit
	set X = scau0.oacmax if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU0.OACMAX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = scau0.oacmin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SCAU0.OACMIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[scau0.OVR) set vRM=$$^MSG(742,"L") do vdderr("OVR", vRM) quit
	set X = scau0.ovrft if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("OVRFT", vRM) quit
	if '("01"[scau0.PINTRCK) set vRM=$$^MSG(742,"L") do vdderr("PINTRCK", vRM) quit
	if '("01"[scau0.PLSAUPD) set vRM=$$^MSG(742,"L") do vdderr("PLSAUPD", vRM) quit
	set X = scau0.pwdchg if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PWDCHG", vRM) quit
	set X = scau0.pwdlen if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PWDLEN", vRM) quit
	set X = scau0.pwdtry if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PWDTRY", vRM) quit
	if '("01"[scau0.RBRCC) set vRM=$$^MSG(742,"L") do vdderr("RBRCC", vRM) quit
	set X = scau0.rettime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("RETTIME", vRM) quit
	if '("01"[scau0.RSTRCT) set vRM=$$^MSG(742,"L") do vdderr("RSTRCT", vRM) quit
	if '("01"[scau0.SECUCLS) set vRM=$$^MSG(742,"L") do vdderr("SECUCLS", vRM) quit
	if '("01"[scau0.SESHIS) set vRM=$$^MSG(742,"L") do vdderr("SESHIS", vRM) quit
	set X = scau0.supid if 'X.isNull(),'Db.isDefined("STBLSUPID","X") set vRM = $$^MSG(1485,X) do vdderr("SUPID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SCAU0","MSG",979,"SCAU0."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSCAU0 scau0

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("UCLS")
	set voldkey = vux.piece("|",1),vobj(scau0,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(scau0,-3) = vnewkey // Copy new keys into object
	type RecordSCAU0 vnewrec = scau0.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SCAU0",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(scau0,-3) = vux.piece("|",1)                  // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
