CHKSTP	 /*
    ORIG: GRAY - 01/10/2000
    DESC: Stop Payments
  
    ---- Comments --------------------------------------------------------
    
    ---- Revision History ------------------------------------------------
    
    	  04/28/06 - RussellDS - CR21030
    	  	     Modify code referencing ACN.STP, moved to DEP and LN.
 
	  03/02/05 - TITOVE - CR 13291
	  	     Modified page control logic according to new standard.
	  	     Also removed code leftover from previous versions, 
	  	     when more than just report functionality was used.
	  	     Added back sections POSACH, POSACN, POSDOC and POSCHK
	  	     that are used by post-processors in STOP* tables.
	  	     Removed GETDATA section.

	  12/02/03 - CARROLLJ - CR7239
		     Removed dead code in VPG0 section.

	  03/01/02 - GRAY - 43583
		     Removed global reference from lock and unlock commands.
	
	  12/16/99 - GRAY - 32507
		     Removed code no longer needed due to the Elimination
		     of Teller/Branch Character Interface and placed remaining
		     code into PSL'd procedure definition.
 */
	

	quit
	
public	PRT(STPTYP)	// Print Stop Payments Report

	type public Number ER
	type public String %LIBS

	set %ProcessMode = 4
	
	do INIT
	
	quit
	
	
INIT	//

	type public Number ER, STPTYP
	type public String %LIBS

	type Number %PAGE, %PG
	type String %NOPRMT, %READ, %TAB, OLNTB, PGM, RID, VFMQ, X

	set %PG = 1, %PAGE = 1
	
	set STPTYP = STPTYP.get()
	
	// Display prompts
	do VPGN1 quit:ER.get()
	
	// Get the report ID for this stop type
	do GETRID(STPTYP) quit:ER.get()
		
	// Run the report
	do DRV^URID
	
	quit

	
VPGN1	// Call UTLREAD to get stop type
	
	type public Number ER, STPTYP
	type public String %LIBS, PGM, RID

	type Number %PAGE, %PG
	type String %NOPRMT, %READ, %TAB, OLNTB, VFMQ, X
	
	set %NOPRMT = "N",VFMQ = ""
	
	set %TAB("STPTYP") = $$DI^SCATAB("[UTBLCHKSTP]STPTYP",,,"[UTBLCHKSTP]","do POSSTP^CHKSTP")
	
	if %TAB("STPTYP").isNull() set %TAB("STPTYP") = "/DES=""Stop Payment Type""/TYP=N/LEN=12/TBL=[UTBLCHKSTP]/XPP=do POSSTP^CHKSTP"

	set %READ = "@@%FN,,"
	set %READ = %READ_",STPTYP/REQ"
	
	do ^UTLREAD if VFMQ = "Q" set ER = 1 quit
	
	quit


public	GETRID(STPTYP)	// Get the report for this stop type
	
	type public Number ER
	type public String %LIBS, RID

	// Missing library name
	if %LIBS.get() = "" do Runtime.setErrMSG("DBTBL5H",1762) quit:ER
	
	type RecordSTBLCHKSTP chkstp = Db.getRecord("STBLCHKSTP", "STPTYP = :STPTYP", 1)

	set RID = chkstp.rid
	
	// Invalid report name ~p1
	if RID = "" do Runtime.setErrMSG("STBLCHKSTP",1448) quit:ER
	
	if 'Db.isDefined("DBTBL5H","%LIBS,RID") do Runtime.setErrMSG("STBLCHKSTP",1448,%LIBS_","_RID) quit:ER
	
	quit
	
	
public	POSSTP	// Stop Payment Type post processor
	
	type public Number ER, X

	quit:X.isNull()
	
	// Invalid table value ~p1
	if 'Db.isDefined("STBLCHKSTP", "STPTYP = :X") do Runtime.setErrMSG("STBLCHKSTP",1485,X) quit:ER

	quit

        
public	POSCHK(CHKNUM,		// Check Number
		  CID,		// Account Number
		   %O,		// Processing Mode
		  TJD)		// Processing Date       
	/*
	  Check number post processor
	*/
 
	type public Number ER
	type public String RM

	if '$$ONLINE^DBSCLI() quit

	quit:CHKNUM.get() = ""
        
        // No spaces allowed
	if CHKNUM[" " do Runtime.setErrMSG("STOP3",7703) quit:ER

	do STPVER^CHKPROC(CID,CHKNUM,CHKNUM,%O,TJD)
        
        // Record already exists
	if ER.get() set:RM.get() = "" RM = $$^MSG(2327)

	quit

        
public	POSDOC	// Document number post processor

	type public Number X
	type public String DOCTYP, KEY()

	quit:X.get() = ""

	quit:'(KEY("DOCTYP").data()#2)	// Document type is not a key

	quit:'(DOCTYP.get()#2)		// Document type not defined

	do EXTDOC(DOCTYP,X)

	quit

        
public	POSACN	// Customer number post processor

	type public Number X
	
	type Boolean %EXT

	if '$$ONLINE^DBSCLI() quit

	quit:X.get().isNull()
	
	if 'Db.isDefined("CIF", "ACN = :X") set %EXT=1 do ^UCIF

	quit
        
        
public	POSACH	// Company ID post-processor
        
	type public String X, I()

        if X = "*" set I(3) = "" quit

	quit

	
public	EXTDOC(DOCTYP,		// Document Type
		    X)		// Document Number
	
	/* 
	  Validate the pattern for one document
	*/

	type public String ER

	type String PAT

	quit:DOCTYP.get().isNull()
	
	type RecordUTBLDOCTYP doctyp = Db.getRecord("UTBLDOCTYP", "DOCTYP = :DOCTYP", 1)

	if 'doctyp.getMode() quit

	set PAT = doctyp.docpat
	
 	quit:PAT.isNull()
	
	// Invalid format ~p1
	if X'?@PAT do Runtime.setErrMSG("UTBLDOCTYP",1350,PAT) quit:ER
	
	quit
	
	
POSCID	// Account number post processor
	
	// Called by post-processor in STOP* tables data items
	
	type public Number %OSAVE, ER, X

	if '$$ONLINE^DBSCLI() quit
	
	quit:X.get() = ""
	
	if 'Db.isDefined("ACN","X") do CID^UACN1 quit:ER.get()
	
	quit:X.isNull()
	
	// Account closed
	if (%OSAVE'=2) do { quit:ER.get()
		type RecordACN acn = Db.getRecord("ACN", "CID = :X")
		if acn.stat <> 4 quit
		do Runtime.setErrMSG("ACN",55) quit:ER
		}
	
	quit
	
	
public RBLDSTP	// Rebuild STP for one account
	
	new STP
	
	kill OLNTB,VFMQ
	set %NOPRMT="N"
	set %TAB("CID")=".CID1/XPP=D POSCID^CHKSTP"
	set %READ="@@%FN,,,CID/REQ"
	do ^UTLREAD
	if $G(VFMQ)="Q"!$G(ER) quit
	
	lock +ACN(CID,51):2 else  set ET="RECLOC" do DSP^UTLERR quit
	set STP=$$BLDSTP(CID)
	if '$G(ER) do {
	
		type Boolean hit = 0
		
		type RecordACN acn = Db.getRecord("ACN", "CID=:CID")
		
		if (acn.cls = "D") do {
			
			type RecordDEP dep = {RecordDEP}acn
			
			do dep.setAuditFlag(1)
			if (dep.stp1 <> STP.piece("#", 1)) set dep.stp1 = STP.piece("#", 1), hit = 1
			if (dep.stp2 <> STP.piece("#", 2)) set dep.stp2 = STP.piece("#", 2), hit = 1
			if (dep.stp3 <> STP.piece("#", 3)) set dep.stp3 = STP.piece("#", 3), hit = 1
			if (dep.stp4 <> STP.piece("#", 4)) set dep.stp4 = STP.piece("#", 4), hit = 1
			if (dep.stp5 <> STP.piece("#", 5)) set dep.stp5 = STP.piece("#", 5), hit = 1
			if hit do dep.save()
		}
		
		if (acn.cls = "L") do {
			
			type RecordLN ln = {RecordLN}acn
			
			do ln.setAuditFlag(1)
			if (ln.stp2 <> STP.piece("#", 2)) set ln.stp2 = STP.piece("#", 2), hit = 1
			if (ln.stp3 <> STP.piece("#", 3)) set ln.stp3 = STP.piece("#", 3), hit = 1
			if (ln.stp4 <> STP.piece("#", 4)) set ln.stp4 = STP.piece("#", 4), hit = 1
			if (ln.stp5 <> STP.piece("#", 5)) set ln.stp5 = STP.piece("#", 5), hit = 1
			if hit do ln.save()
		}
	}
	lock -ACN(CID,51)
	
	if '$G(ER) set ER="W",RM=$$^MSG(2237)		// Process complete
	
	quit
	
	
public BLDSTP(XCID,STPTYP)	// Get the number of stops for STPTYP type
	
	/*
		XCID	- Account number
		STPTYP	- Stop type	/ NOREQ
			  When is a stop type, return the number of active stops
			  When is null return the STP data item for this account
	
	*/
	new ACN,STP,STOP
	
	set STPTYP=$G(STPTYP)
	new %O set %ProcessMode=1
	if STPTYP="" do { quit STP
		do STOP2,STOP3,STOP4,STOP5 
		set STP=$G(STOP(1))_"#"_$G(STOP(2))_"#"_$G(STOP(3))_"#"_$G(STOP(4))_"#"_$G(STOP(5))_"#"
		}
	
	if STPTYP=1 do STOP2 quit $G(STOP(1))		// Shared with account
	if STPTYP=2 do STOP2 quit $G(STOP(2))
	if STPTYP=3 do STOP3 quit $G(STOP(3))
	if STPTYP=4 do STOP4 quit $G(STOP(4))
	if STPTYP=5 do STOP5 quit $G(STOP(5))
	
	quit ""

	// NOTE: ACT field requested merely to force a $C(9) and make the return
	// contain a length

STOP2	//
	type ResultSet rs=Db.select("ACT,EXP,SRC","STOP2","CID=:XCID")
	if rs.isEmpty() quit
	while rs.next() do {
		new EXP,SRC
		set EXP=rs.getCol(2)
		set SRC=rs.getCol(3)
		do CNTSTOP(2)
		}
	quit

STOP3	//
	type ResultSet rs=Db.select("ACT,EXP","STOP3","CID=:XCID")
	if rs.isEmpty() quit
	while rs.next() do {
		new EXP
		set EXP=rs.getCol(2)
		do CNTSTOP(3)
		}
	quit
	
STOP4	//
	type ResultSet rs=Db.select("ACT,EXP","STOP4","CID=:XCID")
	if rs.isEmpty() quit
	while rs.next() do {
		new EXP
		set EXP=rs.getCol(2)
		do CNTSTOP(4)
		}
	quit

STOP5	//
	type ResultSet rs=Db.select("ACT,EXP","STOP5","CID=:XCID")
	if rs.isEmpty() quit
	while rs.next() do {
		new EXP
		set EXP=rs.getCol(2)
		do CNTSTOP(5)
		}
	quit

CNTSTOP(STOPNUM)	//
	
	if '('EXP!(EXP>%SystemDate)) quit
	
	set STOP(STOPNUM)=$G(STOP(STOPNUM))+1
	
	if STOPNUM>2 quit
	
	if SRC'="" set STOP(1)=$G(STOP(1))+1
	
	quit

vSIG()	quit "60387^31720^Dan Russell^7758"	// Signature - LTD^TIME^USER^SIZE
