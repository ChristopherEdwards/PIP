LLDFILE(RecordUTBLLLD utbllld, String vpar, Boolean vparNorm) // UTBLLLD - Low Level Default Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	// Trigger Definition (1)                      12/01/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbllld.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utbllld,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbllld,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String DFTDEF = utbllld.dftdef
	type String COLUMN = utbllld.column

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("DFTDEF").exists()!vx("COLUMN").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLLLD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLLLD","DFTDEF = :utbllld.dftdef and COLUMN = :utbllld.column") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String DFTDEF
	type public String COLUMN

	type RecordUTBLLLD utbllld = Db.getRecord("UTBLLLD","DFTDEF=:DFTDEF,COLUMN=:COLUMN")
	if (%ProcessMode = 2) do {
		do utbllld.setMode(2)

		do LLDFILE(utbllld,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLLLD utbllld

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLLLD","DFTDEF = :utbllld.dftdef and COLUMN = :utbllld.column") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbllld,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbllld,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbllld))  S ^UTBL("LLD",vobj(utbllld,-3),vobj(utbllld,-4))=vobj(utbllld)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLLLD utbllld

	if vpar'["/NOLOG/" do ^DBSLOGIT(utbllld,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("LLD",vobj(utbllld,-3),vobj(utbllld,-4))     // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLLLD utbllld

	// Type local variables for access keys for defaults
	type public String DFTDEF
	type public String COLUMN

	if utbllld.key.isNull() set utbllld.key = 0            // key
	quit


vreqn // Validate required data items

	type public RecordUTBLLLD utbllld

	if utbllld.key.isNull() do vreqerr("KEY") quit
	if utbllld.relation.isNull() do vreqerr("RELATION") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLLLD utbllld

	if utbllld.dftdef.isNull() do vreqerr("DFTDEF") quit
	if utbllld.column.isNull() do vreqerr("COLUMN") quit

		if vx("KEY").exists(),utbllld.key.isNull() do vreqerr("KEY") quit
		if vx("RELATION").exists(),utbllld.relation.isNull() do vreqerr("RELATION") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLLLD","MSG",1767,"UTBLLLD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordUTBLLLD utbllld
	if 'utbllld.relation.isNull() set vfkey("^UTBL("_"""PRODAVCO"""_","_""""_utbllld.relation_""""_")")="UTBLLLD(RELATION) -> UTBLPRODAVCO"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordUTBLLLD utbllld
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("UTBLPRODAVCO",":utbllld.relation") set vERRMSG = $$^MSG(8563,"UTBLLLD(RELATION) -> UTBLPRODAVCO") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLLLD utbllld
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utbllld,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before_Insert validation.

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before_Insert validation.

	type public RecordUTBLLLD utbllld
	do utbllld.setAuditFlag(1)
	/*
	----Revision History--------------------------------------------------
	
	11/30/05 - SkariahV - CR18187
		Modified to conform with PSL standards. Removed revision history 
		prior to 2004.	

	Validate length and data type of the DFTDEF.COLUMN against corresponding
	RELATION length and data type.
	----------------------------------------------------------------------
	*/

	type String DLEN,DTYP,LIBNAME,XCOLUMN,XDFTDEF,XDI,XFID,XRELATION
	
	type public Boolean ER
	
	// Get data for the current UTBLLLD record created or modified.
	set XDFTDEF=utbllld.dftdef 
	set XCOLUMN=utbllld.column 
	set XRELATION=utbllld.relation
	
	//"Not defined ~p1"
	if 'Db.isDefined("UTBLLLDT","DFTDEF=:XDFTDEF") do Runtime.setErrMSG("UTBLLLD",2038,"UTBLLLDT.DFTDEF: "_XDFTDEF) quit:ER
	
	set LIBNAME="SYSDEV"
	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS=:LIBNAME,FID=:XDFTDEF,DI=:XCOLUMN",1)
	if dbtbl1d.getMode() do {
		set DLEN=dbtbl1d.len
		set DTYP=dbtbl1d.typ
		}
	// Get data for the corresponding RELATION data item.
	set XFID=XRELATION.piece(".",1) 
	set XDI=XRELATION.piece(".",2)
	
	type RecordDBTBL1D dbtbl1d1=Db.getRecord("DBTBL1D","%LIBS=:LIBNAME,FID=:XFID,DI=:XDI",1)
	if dbtbl1d1.getMode() do {
		// "Column attributes must match between files"
		if DLEN'=dbtbl1d1.len do Runtime.setErrMSG("UTBLLLD",3788) quit:ER 
		if DTYP'=dbtbl1d1.typ do Runtime.setErrMSG("UTBLLLD",3788) quit:ER 
		}
	
	// Validate against the UTBLPRODAVCO.
	//"Key column ~p1 must first be included in UTBLPRODAVCO table"
	if (utbllld.key),('Db.isDefined("UTBLPRODAVCO","COLNAME=:XRELATION")) do Runtime.setErrMSG("UTBLLLD",3912,XRELATION) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLLLD utbllld

	set X = utbllld.dftdef if 'X.isNull(),'Db.isDefined("UTBLLLDT","X") set vRM = $$^MSG(1485,X) do vdderr("DFTDEF", vRM) quit
	if utbllld.column.length()>12 set vRM = $$^MSG(1076,12) do vdderr("COLUMN", vRM) quit
	if '("01"[utbllld.KEY) set vRM=$$^MSG(742,"L") do vdderr("KEY", vRM) quit
	set X = utbllld.relation if 'X.isNull(),'Db.isDefined("UTBLPRODAVCO","X") set vRM = $$^MSG(1485,X) do vdderr("RELATION", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLLLD","MSG",979,"UTBLLLD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLLLD utbllld

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("DFTDEF").exists() set vux("DFTDEF") = vx("DFTDEF")
	if vx("COLUMN").exists() set vux("COLUMN") = vx("COLUMN")
	do vkey(1) set voldkey = utbllld.dftdef_","_utbllld.column // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utbllld.dftdef_","_utbllld.column // Copy new keys into object
	type RecordUTBLLLD vnewrec = utbllld.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLLLD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLLLD utbllld

	if vux("DFTDEF").exists() set utbllld.dftdef = vux("DFTDEF").piece("|",i)
	if vux("COLUMN").exists() set utbllld.column = vux("COLUMN").piece("|",i)
	quit
