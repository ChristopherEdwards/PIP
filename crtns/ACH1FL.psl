ACH1FL(RecordACH1 ach1, String vpar, Boolean vparNorm) // ACH1 - ACH Batch Description Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:12 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (35)             10/14/2005
	// Trigger Definition (2)                      09/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ach1.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(ach1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ach1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String COID = ach1.coid
	type String PTYPE = ach1.ptype

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("COID").exists()!vx("PTYPE").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ACH1",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACH1","COID = :ach1.coid and PTYPE = :ach1.ptype") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String COID
	type public String PTYPE

	type RecordACH1 ach1 = Db.getRecord("ACH1","COID=:COID,PTYPE=:PTYPE")
	if (%ProcessMode = 2) do {
		do ach1.setMode(2)

		do ACH1FL(ach1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordACH1 ach1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACH1","COID = :ach1.coid and PTYPE = :ach1.ptype") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ach1)) S ^ACH(vobj(ach1,-3),vobj(ach1,-4))=vobj(ach1)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordACH1 ach1


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACH(vobj(ach1,-3),vobj(ach1,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordACH1 ach1

	// Type local variables for access keys for defaults
	type public String COID
	type public String PTYPE

	if ach1.ocaglflg.isNull() set ach1.ocaglflg = 0        // ocaglflg
	if ach1.odaglflg.isNull() set ach1.odaglflg = 0        // odaglflg
	if ach1.osc.isNull() set ach1.osc = 1                  // osc
	if ach1.preauth.isNull() set ach1.preauth = 0          // preauth
	quit


vreqn // Validate required data items

	type public RecordACH1 ach1

	if ach1.ocaglflg.isNull() do vreqerr("OCAGLFLG") quit
	if ach1.odaglflg.isNull() do vreqerr("ODAGLFLG") quit
	if ach1.preauth.isNull() do vreqerr("PREAUTH") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordACH1 ach1

	if ach1.coid.isNull() do vreqerr("COID") quit
	if ach1.ptype.isNull() do vreqerr("PTYPE") quit

		if vx("OCAGLFLG").exists(),ach1.ocaglflg.isNull() do vreqerr("OCAGLFLG") quit
		if vx("ODAGLFLG").exists(),ach1.odaglflg.isNull() do vreqerr("ODAGLFLG") quit
		if vx("PREAUTH").exists(),ach1.preauth.isNull() do vreqerr("PREAUTH") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACH1","MSG",1767,"ACH1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("MZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordACH1 ach1

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with company.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(ach1.cntry, ach1.state, ach1.mzip)
	if ER.get() do Runtime.setErrMSG("ACH1", 3333, RM)

	quit

vau1 // Trigger AU_MZIP - After Update of Company ZIP Code

	type public RecordACH1 ach1

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with company.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(ach1.cntry, ach1.state, ach1.mzip)
	if ER.get() do Runtime.setErrMSG("ACH1", 3333, RM)

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordACH1 ach1

	set X = ach1.coid if 'X.isNull(),'Db.isDefined("ACH","X") set vRM = $$^MSG(1485,X) do vdderr("COID", vRM) quit
	if ach1.ptype.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PTYPE", vRM) quit
	if ach1.addr.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ADDR", vRM) quit
	set X = ach1.bdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BDATE", vRM) quit
	set X = ach1.borig if 'X.isNull(),'Db.isDefined("UTBLACHRT","X") set vRM = $$^MSG(1485,X) do vdderr("BORIG", vRM) quit
	if ach1.ced.length()>10 set vRM = $$^MSG(1076,10) do vdderr("CED", vRM) quit
	if ach1.city.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CITY", vRM) quit
	if ach1.cname.length()>16 set vRM = $$^MSG(1076,16) do vdderr("CNAME", vRM) quit
	set X = ach1.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	if ach1.contact.length()>25 set vRM = $$^MSG(1076,25) do vdderr("CONTACT", vRM) quit
	if ach1.discr.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DISCR", vRM) quit
	set X = ach1.edate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EDATE", vRM) quit
	set X = ach1.fdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FDATE", vRM) quit
	set X = ach1.fdest if 'X.isNull(),'Db.isDefined("UTBLACHRT","X") set vRM = $$^MSG(1485,X) do vdderr("FDEST", vRM) quit
	set X = ach1.forig if 'X.isNull(),'Db.isDefined("UTBLACHRT","X") set vRM = $$^MSG(1485,X) do vdderr("FORIG", vRM) quit
	set X = ach1.ftime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("FTIME", vRM) quit
	set X = ach1.lead if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("LEAD", vRM) quit
	set X = ach1.maxamtc if 'X.isNull() set vRM = $$VAL^DBSVER("$",11,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACH1.MAXAMTC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ach1.maxamtd if 'X.isNull() set vRM = $$VAL^DBSVER("$",11,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACH1.MAXAMTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ach1.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	if '("01"[ach1.OCAGLFLG) set vRM=$$^MSG(742,"L") do vdderr("OCAGLFLG", vRM) quit
	if '("01"[ach1.ODAGLFLG) set vRM=$$^MSG(742,"L") do vdderr("ODAGLFLG", vRM) quit
	set X = ach1.offcrcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("OFFCRCID", vRM) quit
	if ach1.offcretc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("OFFCRETC", vRM) quit
	set X = ach1.offdrcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("OFFDRCID", vRM) quit
	if ach1.offdretc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("OFFDRETC", vRM) quit
	if ach1.osc.length()>1 set vRM = $$^MSG(1076,1) do vdderr("OSC", vRM) quit
	if ach1.phone.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PHONE", vRM) quit
	if '("01"[ach1.PREAUTH) set vRM=$$^MSG(742,"L") do vdderr("PREAUTH", vRM) quit
	set X = ach1.predays if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PREDAYS", vRM) quit
	set X = ach1.preopt if 'X.isNull(),'Db.isDefined("STBLACHPO","X") set vRM = $$^MSG(1485,X) do vdderr("PREOPT", vRM) quit
	set X = ach1.sec if 'X.isNull(),'Db.isDefined("STBLACHSEC","X") set vRM = $$^MSG(1485,X) do vdderr("SEC", vRM) quit
	set X = ach1.src if 'X.isNull(),'Db.isDefined("UTBLSRC","SRCTYP=""ACHORIG"",KEY=:X") set vRM = $$^MSG(1485,X) do vdderr("SRC", vRM) quit
	if ach1.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	if ach1.vfreq.length()>50 set vRM = $$^MSG(1076,50) do vdderr("VFREQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACH1","MSG",979,"ACH1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordACH1 ach1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("COID").exists() set vux("COID") = vx("COID")
	if vx("PTYPE").exists() set vux("PTYPE") = vx("PTYPE")
	do vkey(1) set voldkey = ach1.coid_","_ach1.ptype      // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ach1.coid_","_ach1.ptype      // Copy new keys into object
	type RecordACH1 vnewrec = ach1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ACH1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordACH1 ach1

	if vux("COID").exists() set ach1.coid = vux("COID").piece("|",i)
	if vux("PTYPE").exists() set ach1.ptype = vux("PTYPE").piece("|",i)
	quit
