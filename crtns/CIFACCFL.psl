CIFACCFL(RecordCIFACCTS cifaccts, String vpar, Boolean vparNorm) // CIFACCTS - Customer Products/Accounts Directory Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             04/20/2006
	// Trigger Definition (2)                      02/21/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cifaccts.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(cifaccts,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(cifaccts,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = cifaccts.acn
	type String SRVCAT = cifaccts.srvcat
	type String SERVICE = cifaccts.service
	type String ACCKEY = cifaccts.acckey

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("SRVCAT").exists()!vx("SERVICE").exists()!vx("ACCKEY").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CIFACCTS",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CIFACCTS","ACN = :cifaccts.acn and SRVCAT = :cifaccts.srvcat and SERVICE = :cifaccts.service and ACCKEY = :cifaccts.acckey") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String SRVCAT
	type public String SERVICE
	type public String ACCKEY

	type RecordCIFACCTS cifaccts = Db.getRecord("CIFACCTS","ACN=:ACN,SRVCAT=:SRVCAT,SERVICE=:SERVICE,ACCKEY=:ACCKEY")
	if (%ProcessMode = 2) do {
		do cifaccts.setMode(2)

		do CIFACCFL(cifaccts,vpar)
	}
	else  do VINDEX(cifaccts)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCIFACCTS cifaccts

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CIFACCTS","ACN = :cifaccts.acn and SRVCAT = :cifaccts.srvcat and SERVICE = :cifaccts.service and ACCKEY = :cifaccts.acckey") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(cifaccts)) S ^CIF(vobj(cifaccts,-3),900,vobj(cifaccts,-4),vobj(cifaccts,-5),vobj(cifaccts,-6))=vobj(cifaccts)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.cifaccts) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCIFACCTS cifaccts

	if vpar["/INDEX/" do VINDEX(.cifaccts)                 // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^CIF(vobj(cifaccts,-3),900,vobj(cifaccts,-4),vobj(cifaccts,-5),vobj(cifaccts,-6))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordCIFACCTS cifaccts

	// Type local variables for access keys for defaults
	type public String ACN
	type public String SRVCAT
	type public String SERVICE
	type public String ACCKEY

	if cifaccts.newuser.isNull() set cifaccts.newuser = 0  // newuser
	quit


vreqn // Validate required data items

	type public RecordCIFACCTS cifaccts

	if cifaccts.identifier.isNull() do vreqerr("IDENTIFIER") quit
	if cifaccts.newuser.isNull() do vreqerr("NEWUSER") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCIFACCTS cifaccts

	if cifaccts.acn.isNull() do vreqerr("ACN") quit
	if cifaccts.srvcat.isNull() do vreqerr("SRVCAT") quit
	if cifaccts.service.isNull() do vreqerr("SERVICE") quit
	if cifaccts.acckey.isNull() do vreqerr("ACCKEY") quit

		if vx("IDENTIFIER").exists(),cifaccts.identifier.isNull() do vreqerr("IDENTIFIER") quit
		if vx("NEWUSER").exists(),cifaccts.newuser.isNull() do vreqerr("NEWUSER") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFACCTS","MSG",1767,"CIFACCTS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCIFACCTS cifaccts
	if 'cifaccts.acn.isNull() set vfkey("^CIF("_""""_cifaccts.acn_""""_","_1_")")="CIFACCTS(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCIFACCTS cifaccts
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":cifaccts.acn") set vERRMSG = $$^MSG(8563,"CIFACCTS(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCIFACCTS cifaccts
	if vx("").order().isNull() do AUDIT^UCUTILN(cifaccts,.vx(),1,"|") quit
	if vx("USERID1").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(cifaccts,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordCIFACCTS cifaccts
	/*
	-----Revision History--------------------------------------------------
	01/25/02 - SCHWARTZA - 48958
		   Emptied the trigger.  It will be left open in case of 
		   future need.

	02/18/00 - Terrie Dougherty - 36364
		   Obsoleted trigger V5.3.

	09/07/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/

	quit
	

vbu1 // Trigger BU_USERID1 - Before Update for User Id

	type public RecordCIFACCTS cifaccts
	do cifaccts.setAuditFlag(1)
	new old,new
	if cifaccts.userid1="" quit 
	
	// The following code protects the original old value
	set old=cifaccts.userid1.oldVal
	set new=$$UPPER^%ZFUNC(cifaccts.userid1)
	if cifaccts.userid1=new quit 
	set cifaccts.userid1=old
	set cifaccts.userid1=new
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCIFACCTS cifaccts

	set X = cifaccts.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = cifaccts.srvcat if 'X.isNull(),'Db.isDefined("STBLSRVCAT","X") set vRM = $$^MSG(1485,X) do vdderr("SRVCAT", vRM) quit
	if cifaccts.service.length()>20 set vRM = $$^MSG(1076,20) do vdderr("SERVICE", vRM) quit
	if cifaccts.acckey.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ACCKEY", vRM) quit
	set X = cifaccts.accendt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACCENDT", vRM) quit
	set X = cifaccts.avgbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIFACCTS.AVGBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if cifaccts.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	if cifaccts.identifier.length()>25 set vRM = $$^MSG(1076,25) do vdderr("IDENTIFIER", vRM) quit
	if cifaccts.invcod.length()>12 set vRM = $$^MSG(1076,12) do vdderr("INVCOD", vRM) quit
	set X = cifaccts.lcybal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIFACCTS.LCYBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = cifaccts.lstupd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSTUPD", vRM) quit
	if '("01"[cifaccts.NEWUSER) set vRM=$$^MSG(742,"L") do vdderr("NEWUSER", vRM) quit
	if cifaccts.password.length()>255 set vRM = $$^MSG(1076,255) do vdderr("PASSWORD", vRM) quit
	set X = cifaccts.role if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ROLE", vRM) quit
	set X = cifaccts.totamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIFACCTS.TOTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if cifaccts.userid1.length()>32 set vRM = $$^MSG(1076,32) do vdderr("USERID1", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIFACCTS","MSG",979,"CIFACCTS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordCIFACCTS cifaccts) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("ACCENDT").exists() do vi1(.cifaccts)
		if vx("NEWUSER").exists() do vi2(.cifaccts)
	}
	do vi1(.cifaccts)
	do vi2(.cifaccts)

	quit
	

vi1(RecordCIFACCTS cifaccts) // Maintain ACCENDT index entries (Account Enrollment Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cifaccts.accendt
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cifaccts.acn
	type String v5 = cifaccts.srvcat
	type String v6 = cifaccts.service
	type String v7 = cifaccts.acckey

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CIF(vobj(cifaccts,-3),900,vobj(cifaccts,-4),vobj(cifaccts,-5),vobj(cifaccts,-6)))#2,'$D(^XREF("ACCENDT",v2,v3,900,v5,v6,v7)) do vidxerr("ACCENDT")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("ACCENDT",v2,v3,900,v5,v6,v7)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ACCENDT").exists() set v2=vx("ACCENDT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("ACCENDT",v2,v3,900,v5,v6,v7)
	#ENDBYPASS
	quit

vi2(RecordCIFACCTS cifaccts) // Maintain NEWUSER index entries (New User)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = +cifaccts.newuser
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cifaccts.acn
	type String v4 = cifaccts.srvcat
	type String v5 = cifaccts.service
	type String v6 = cifaccts.acckey

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^CIF(vobj(cifaccts,-3),900,vobj(cifaccts,-4),vobj(cifaccts,-5),vobj(cifaccts,-6)))#2,'$D(^XREF("NEWUSER",v2,v3,v4,v5,v6)) do vidxerr("NEWUSER")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("NEWUSER",v2,v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NEWUSER").exists() set v2=vx("NEWUSER").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("NEWUSER",v2,v3,v4,v5,v6)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CIFACCTS")

	while ds.next() do {
		type RecordCIFACCTS cifaccts=ds.getRecord("CIFACCTS")
		if vlist.contains("VINDEX") do VINDEX(.cifaccts) quit
		if vlist.contains("ACCENDT") do vi1(.cifaccts)
		if vlist.contains("NEWUSER") do vi2(.cifaccts)
	}

	quit


public VIDXBLD1(RecordCIFACCTS cifaccts, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.cifaccts) quit
	if vlist.contains("ACCENDT") do vi1(.cifaccts)
	if vlist.contains("NEWUSER") do vi2(.cifaccts)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CIFACCTS","MSG",1225,"CIFACCTS."_di)

	quit


vkchged // Access key changed

	type public RecordCIFACCTS cifaccts

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("SRVCAT").exists() set vux("SRVCAT") = vx("SRVCAT")
	if vx("SERVICE").exists() set vux("SERVICE") = vx("SERVICE")
	if vx("ACCKEY").exists() set vux("ACCKEY") = vx("ACCKEY")
	do vkey(1) set voldkey = cifaccts.acn_","_cifaccts.srvcat_","_cifaccts.service_","_cifaccts.acckey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = cifaccts.acn_","_cifaccts.srvcat_","_cifaccts.service_","_cifaccts.acckey // Copy new keys into object
	type RecordCIFACCTS vnewrec = cifaccts.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CIFACCTS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCIFACCTS cifaccts

	if vux("ACN").exists() set cifaccts.acn = vux("ACN").piece("|",i)
	if vux("SRVCAT").exists() set cifaccts.srvcat = vux("SRVCAT").piece("|",i)
	if vux("SERVICE").exists() set cifaccts.service = vux("SERVICE").piece("|",i)
	if vux("ACCKEY").exists() set cifaccts.acckey = vux("ACCKEY").piece("|",i)
	quit

VIDXPGM()	quit "CIFACCFL"	// Location of index program

