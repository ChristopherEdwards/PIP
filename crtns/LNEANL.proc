public LNEANL

  /*
 ORIG: srinivar - 09/27/2005
 DESC: Modify Escrow Analysis

	---- Comments --------------------------------------------------------
		This routine is used to Modify an Escrow Analysis and then see
		what results will be.

	---- Revision History ------------------------------------------------

	 07/31/06 - KELLYP - CR 22048
	 	    Modified EXEC section to eliminate PRECEDENCE warning.

	 09/27/05 - srinivar - CR 19137
		    	    
		    .Convered to PSL.
		    .Removed the old history.
		    .Removed commented lines in VPGO1,VPGO2
	----------------------------------------------------------------------
 */

	type public Number %PG
	
 	do UPD
 	quit
 	
 
UPD	//

	set %ProcessMode=1
	do INIT
	quit
	
public INIT
	

	type public String JD,lneam,LNEAM,LPG,RM,VFMQ
	
	type Number %MOD,NPASS,OTP,%PAGE,%PG,PASS
	
	set (OTP,PASS,%PG,%MOD,LPG,NPASS)=0,%PAGE=1
	
	do Db.delete("LNEAM")
	kill lneam,JD,LNEAM
	
	type RecordLNAPCHGE lnapchge
	type RecordLNAPCHG lnapchg
	do VPG(.lnapchge,.lnapchg)
	quit
	
VPG(RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg)	//Page control

	type public Boolean ER
	type public Number NPASS,PASS,%PG,%PAGE,SVECID
	type public String DFQ,LPG,VFMQ
	type public RecordLNEAM lneam()
	
	type Boolean FINISH=0
	type RecordDEP dep
	type RecordLN ln
	
	
	for  do { quit:FINISH!(VFMQ="Q")
                
               
                if %PG=0 do VPG00(.lnapchge,.lnapchg,.ln,.dep) if VFMQ="Q" set FINISH=1 quit
		if %PG=1 do VPG01(.lnapchge,.lnapchg,.ln,.dep) if VFMQ="Q" set FINISH=1 quit
		if "DFQ".find(VFMQ) do VER(.ln,.dep,.lnapchge,.lnapchg) set FINISH=1 quit
		if %PG=2 do VPG02(.lnapchge,.lnapchg,.ln,.dep) if VFMQ="Q" set FINISH=1 quit
		if %PG>2 do VPG03(.lneam())
		
		
		if VFMQ=LPG set %PG=%PG+1,NPASS=0
		if VFMQ<LPG set %PG=VFMQ+1,LPG=VFMQ,NPASS=1 if %PG<3 set PASS=0
                }
	
	quit


VPG00(RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg,RecordLN ln,RecordDEP dep)	//Set up
      
	
	type public String ACN(),ANFRE,DEP(),EAB(),EABE(),EABL(),EABP(),ESCFRE,ESC,FRE,VFMQ
	type public Number ECID,LCID,ANOFF
	
	type public Date AED,APCND,ESDATE,JD,NJD
	type public Boolean ER
	
	type Number BR,SVBR,SVTYPE,REJFLG,PASS,TYPE,SVECID
	
	type String ET,fEABL,fEABP,fEABE,%MSKD,%READ,%TAB()
	
	set ESC="ESC1",PASS=0
	set %TAB("LCID")=".CID3/HLP=[LN]CID/XPP=D PP^LNEANL"
	set %TAB("ESC")=".ESC/TBL=ESCTBL("
	set %TAB("APCND")=".APCND2/HLP=[LN]APCND"
	
	set %READ="@@%FN,,,LCID/REQ,ESC/REQ,APCND/REQ"
	do ^UTLREAD if VFMQ="Q" quit
	
	set ESDATE=APCND,REJFLG=0            
	lock +ACN(LCID):2 else  set ET="RECLOC" do ERR quit
	
	set ECID=$$ECID^LNU(LCID,ESC),SVECID=ECID
	
	set dep = Db.getRecord("DEP","CID=:ECID")
	set ln = Db.getRecord("LN","CID=:LCID")
		
	set TYPE=ln.type
	set BR=ln.boo
	set SVBR=BR,SVTYPE=TYPE
	set ANOFF=ln.anoff
	if ln.ANFRE="" set ER=1,ET="ANFRE" do ERR quit
	
	set lnapchg=Db.getRecord("LNAPCHG","APCND=:ESDATE,CID=:LCID",1)
	
	if 'lnapchg.getMode() do { quit
		do Runtime.setErrMSG("LNAPCHG","8503",APCND.toString($G(%MSKD)))
		set VFMQ="Q"
	} 
			
	//Build list of escrow accounts to consider
	if 'fEABP.exists() set fEABP="0|0"
			
	if 'EABP("CID").exists() set EABP("CID")="0|0"
	//Get information for this particular escrow account
			
	if 'EAB(LCID,ECID).exists() do {
	type public RecordLNAPCHGE lnapchge=Db.getRecord("LNAPCHGE","APCND=:APCND,CID=:LCID,ECID=:ECID",1)
	}
					
	set ESC=$$ESCA^LNU(LCID,ECID)
	set ESCFRE=$P($$ELEFRE^LNU(LCID,ESC),"|",1)

	// Calculate AED (analysis end date)
	set ANFRE=ln.anfre
	set ANOFF=ln.anoff
        if APCND=ln.apcnd set FRE=ANFRE,JD=APCND set NJD=$$NJD^UFRE(JD,FRE) quit:ER  set AED=NJD
	if APCND'=ln.apcnd set AED=ln.apcnd
	
	// Analyze for at least 1 year
	if $$NJD^UFRE(APCND,"1YA")>AED set AED=$$NJD^UFRE(APCND,"1YA") quit:ER
 	set AED=AED-1
	
	do CUSH(.lnapchge,.ln,.dep) if ER set VFMQ="Q" quit			// get cushion data items
	
	set fEABP="0|0"
	quit

	
VPG01(RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg,RecordLN ln,RecordDEP dep)	// Screen - Change analyze data to re-analyze
	
	type public Number ECID,FLG,LCID,NPASS,OTP,%PAGE,YN,SVECID
	type public String LPG,UX(),VFMQ,X
	type public Boolean REAN
	type public Date ESDATE

	if 'NPASS,%PAGE>1 set %PAGE=1
	if OTP.get()>0,%PAGE>OTP.get() set %PAGE=OTP
	set LPG=1
	set SVECID=SVECID.get()

	//calling the screen
	set dep= Db.getRecord("DEP","CID=:ECID")
	set ln = Db.getRecord("LN", "CID=:LCID")
	
	set %PAGE=%PAGE+1,(FLG,REAN)=0

	do DRV^USID(%ProcessMode, "LNANE2",.dep,.ln)

	if VFMQ="Q" quit

	if YN do {		
		set X="" 
		for  set X=UX("LN",X).order() quit:X.isNull()!FLG  do {
			if UX("LN",X).piece("|",1)-UX("LN",X).piece("|",2) set FLG=1
			}
		}

	if FLG do REAN(.lnapchge,.ln)

	if 'REAN.exists() do {
		type RecordLNAPCHG lnapchg=Db.getRecord("LNAPCHG","APCND=:ESDATE,CID=:LCID",1)
		
		}	
	quit


VPG02(RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg,RecordLN ln,RecordDEP dep)	// Screen - Display Escrow Analysis
	
	type public Date APCND,ESDATE
	type public Number CID,ECID,LCID,LPG,NPASS,OTP,%PAGE
	type public Boolean YN
	
	if 'NPASS set %PAGE=%PAGE+1
	if OTP.get()>0,%PAGE>OTP.get() set %PAGE=OTP
	set LPG=LPG+1
	if 'NPASS do EXEC(.lnapchge)

	if 'YN do {
		type DbSet lnapc=Db.selectDbSet("LNAPCHG","APCND=:APCND and CID=:CID")
		type DbSet lnapch=Db.selectDbSet("LNAPCHGE","APCND=:APCND and CID=:LCID and ECID=:ECID")
		}
	set %ProcessMode=2  

	set lnapchge=Db.getRecord("LNAPCHGE","APCND=:APCND,CID=:LCID,ECID=:ECID",1)
	type RecordLNAPCHG lnap=Db.getRecord("LNAPCHG","APCND=:ESDATE,CID=:LCID",1)
	do DRV^USID(%ProcessMode, "LNANE1",.lnapchge,.dep,.ln,.lnap) 
	quit

	
VPG03(RecordLNEAM lneam())	//Screen - Display Analysis Projection
	
	type public Date APCND,AED
	type public Number CID,CNT,LCID,LPG,%MODS,NPASS,OLPG,OTP,PASS,%PG,%PAGE,%REPEAT,TPG
	type public String LNEAM(),SID,VFMQ
	
	type Date ASDT,AJD,AEDT
	type Number CTR
	
	set %ProcessMode=2   
	if 'PASS set (OLPG,LPG)=LPG+1
	if %PG=3 set %MODS=1
	if %PG>3,OLPG=%PAGE set NPASS=0,%MODS=1

	if 'NPASS,PASS,%PG'<LPG do {
		set LPG=LPG+1
		set %REPEAT=9,%MODS=%MODS+%REPEAT
		if %REPEAT+%MODS>CNT set %REPEAT=CNT-%MODS+1
		set %PG=LPG,OLPG=LPG

		do DRV^USID(%ProcessMode, "SCA042A",.lneam())
		if VFMQ="Q" quit
		}
	if VFMQ="Q" quit

	if PASS,'NPASS quit
	set CID=LCID,ASDT=APCND,AEDT=AED
	if %PG>LPG set LPG=%PG
	set %PAGE=%PAGE+TPG-1,%REPEAT=9
	if 'OTP set OTP=%PAGE
	if %PAGE>OTP set %PAGE=OTP
	
	
	set CTR=1
	set AJD=""

	for  set AJD=LNEAM(AJD).order() quit:AJD.isNull()  do {
		set lneam(CTR)=Db.getRecord("LNEAM","JD=:AJD",1)
		set lneam(CTR).pmt=LNEAM(AJD).piece("|",1)
		set lneam(CTR).ramt=LNEAM(AJD).piece("|",2)
		set lneam(CTR).bal=LNEAM(AJD).piece("|",3)
		set lneam(CTR).desc=LNEAM(AJD).piece("|",4)
		do lneam(CTR).save()
		set CTR=CTR+1
		}
	
	
	do DRV^USID(%ProcessMode, "SCA042A",.lneam()) 
	if VFMQ="Q" quit
	quit

	
ERR	//
	
	type public String VFMQ
	type public Boolean ER
	
	set ER=1 do ^UTLERR
	set VFMQ="Q"
	quit


VER(RecordLN ln,RecordDEP dep,RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg)	
	
	type public Number LCID,NXTSEQ,TSEQ
	type public String VFMQ,ET
	
	if %ProcessMode=2!(%ProcessMode=4)!(VFMQ="Q") do END
	
	type ResultSet rs=Db.select("TSEQ","HIST","CID=:LCID","TSEQ DESC")
	if rs.next() set NXTSEQ=rs.getCol("TSEQ")+1
		
	if NXTSEQ-TSEQ set ET="UPDERR" do ERR
	
	do FILE(.ln,.dep,.lnapchge,.lnapchg)
	do END
	quit
	
FILE(RecordLN ln,RecordDEP dep,RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg) // File data
	
	type public Boolean REAN
	
	do dep.bypassSave()
	do ln.bypassSave()

	if REAN do EAB(.ln,.lnapchge,.lnapchg)
	quit

	
EAB(RecordLN ln,RecordLNAPCHGE lnapchge,RecordLNAPCHG lnapchg)	// File re-analysis changes.
						
	type public String EABL,EABE
	type Number BR
	
	set BR=ln.boo
	
	if 'EABL.get().isNull() do {
		
		set lnapchg.lnd=EABL.piece("|",2)
		set lnapchg.lfre=EABL.piece("|",3)
		set lnapchg.laf=EABL.piece("|",4)
		set lnapchg.otrs=EABL.piece("|",5)
		set lnapchg.olbal=EABL.piece("|",6)
		set lnapchg.oebal=EABL.piece("|",7)
		set lnapchg.cebal=EABL.piece("|",8)
		set lnapchg.aebal=EABL.piece("|",9)
		set lnapchg.tdis=EABL.piece("|",10)
		set lnapchg.povsh=EABL.piece("|",11)
		set lnapchg.esreq=EABL.piece("|",12)
		set lnapchg.coll=EABL.piece("|",13)
		set lnapchg.lrbas=EABL.piece("|",14)
		set lnapchg.rndi=EABL.piece("|",15)
		set lnapchg.cpi=EABL.piece("|",16)
		set lnapchg.probas=EABL.piece("|",17)
		set lnapchg.rnda=EABL.piece("|",19)
		set lnapchg.aeaf=EABL.piece("|",20)
		set lnapchg.aelap=EABL.piece("|",21)
		set lnapchg.tamtd=EABL.piece("|",22)
		set lnapchg.tamtb=EABL.piece("|",23)
		set lnapchg.tamtl=EABL.piece("|",24)
		set lnapchg.tamts=EABL.piece("|",25)
	
		do lnapchg.save()
		}
	if 'EABE.get().isNull() do {
		set lnapchge.epmt=EABE.piece("|",2)
		set lnapchge.eaf=EABE.piece("|",5)
		set lnapchge.cbal=EABE.piece("|",7)
		set lnapchge.abal=EABE.piece("|",8)
		set lnapchge.clbal=EABE.piece("|",9)
		set lnapchge.opmt=EABE.piece("|",19)
		set lnapchge.proper=EABE.piece("|",20)
		set lnapchge.amtd=EABE.piece("|",22)
		set lnapchge.amtb=EABE.piece("|",23)
		set lnapchge.amtl=EABE.piece("|",24)
		set lnapchge.amts=EABE.piece("|",25)
		set lnapchge.amtc=EABE.piece("|",27)
		set lnapchge.cush=EABE.piece("|",28)
		set lnapchge.lowbala=EABE.piece("|",29)
		set lnapchge.ebal=EABE.piece("|",30)
		set lnapchge.ovg=EABE.piece("|",31)
		set lnapchge.shtg=EABE.piece("|",32)
		set lnapchge.def=EABE.piece("|",33)
		set lnapchge.odm=EABE.piece("|",34)
		set lnapchge.sdm=EABE.piece("|",35)
		set lnapchge.ddm=EABE.piece("|",36)
		set lnapchge.remtot=EABE.piece("|",37)
	
		do lnapchge.save()
		}
	
	quit


END	//
	
	type public String RM(),%TAB,VFMQ
	type public Boolean ER,REJFLG
	type public Number LCID
	
	kill %TAB 
	if (%ProcessMode)=2 D CLOSE^SCAIO
	if RM(4).exists() do END1
	if REJFLG.exists() do END1              
	quit:ER!(%ProcessMode=2)!(%ProcessMode=4)
	if VFMQ="Q" do {
		// LCID account ~p1 not created
		if %ProcessMode=0 do Runtime.setErrMSG(129,LCID.get()) quit
		// LCID account ~p1 not modified
		if %ProcessMode=1 do Runtime.setErrMSG(135,LCID.get()) quit
		// LCID account ~p1 not deleted
		do Runtime.setErrMSG(130,LCID.get()) quit
	else  do {
		// LCID account~p1  created
		if (%ProcessMode)=0 do Runtime.setErrMSG(107,LCID.get()) quit
		// LCID account ~p1 modified
		if (%ProcessMode)=1 do Runtime.setErrMSG(122,LCID.get()) quit
		// LCID account ~p1 deleted
		do Runtime.setErrMSG(109,LCID.get()) quit
		}
	}
	set ER="W"
	quit

	
END1	// handles new error arrays
	
	type public Number LCID
	type public String RM()
	type public Boolean ER
	
	if ER set RM(2)=$$^MSG(5959,LCID)
	else  set RM(2)=$$^MSG(290,LCID)
	set RM(2)=$J("",40-($L(RM(2))/2))_RM(2),RM(2)=RM(2)_$J("",80-$L(RM(2)))
	set (RM(1),RM(3))=$J("",80)
	set ER="W"
	quit

	
PP	// Post processor to CID prompt

	type public Boolean ER
	type public String CLS,ESCTBL,ET,RM,ZCLS
	type public Number ACN,CID,%EXT,TSEQ
	
	type public Date APCND
	
	set (CLS,ZCLS)="L"
	set %EXT=1
	do ^UACN if ER quit

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if '{String}CID.length() quit

	lock +ACN(CID):2 else  set ET="RECLOC" do ERR quit
	
	type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID","TSEQ DESC")
	if rs.next() set TSEQ=rs.getCol("TSEQ")+1
	
	set APCND=ln.apcnd
	if 'APCND set ER=1,ET="INVLDADT" D ^UTLERR quit
	set RM=APCND.toString()_"|3"
	do ESCA^LNES2(.ESCTBL)
	quit
	
	
	
CUSH(RecordLNAPCHGE lnapchge,RecordLN ln,RecordDEP dep)	
	
	type public Boolean ER
	type public Number CID,CUSHO,CUSHA,CUSHF,CUSH,DDA,ECID,LCID,ODMG,ODML,ODA,SDA,SDO,X
	type public String SDMG,SDML,DDMG,DDML,UX(),DI
	
	if ER quit
		
	set SDMG=dep.sdmg,DI="SDMG"
	
	if SDMG.get().isNull()!(SDMG=0) set SDMG=ln.sdmg,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set SDML=dep.sdml,DI="SDML"
	
	if SDML.get().isNull()!(SDML=0) set SDML=ln.sdml,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set DDMG=dep.ddmg,DI="DDMG"
		
	if DDMG.get().isNull()!(DDMG=0) set DDMG=ln.ddmg,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
			
	set DDML=dep.ddml,DI="DDML"
	
	if DDML.get().isNull()!(DDML=0) set DDML=ln.ddml,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
			
	set ODMG=dep.odmg,DI="ODMG"
	
	if ODMG.get().isNull()!(ODMG=0) set ODMG=ln.odmg,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
			
	set ODML=dep.odml,DI="ODML"
	
	if ODML.get().isNull()!(ODML=0) set ODML=ln.odml,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set ODA=dep.oda,DI="ODA"
	
	if ODA.get().isNull()!(ODA=0) set ODA=ln.oda,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
			
	set SDA=dep.sda,DI="SDA"
	
	if SDA.get().isNull()!(SDA=0) set SDA=ln.sda,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set DDA=dep.dfda,DI="DDA"
	
	if DDA.get().isNull()!(DDA=0) set DDA=ln.dfda,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set SDO =dep.sdo,DI="SDO"
	
	if SDO.get().isNull()!(SDO=0) set SDO=ln.sdo,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set CUSHO=dep.cusho,DI="CUSHO"
	
	if CUSHO.get().isNull()!(CUSHO=0) set CUSHO=ln.cusho,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
			
	set CUSHA=dep.cusha,DI="CUSHA"
	
	if CUSHA.get().isNull()!(CUSHA=0) set CUSHA=ln.cusha,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
		
	set CUSHF=dep.cushf,DI="CUSHF"
	
	if CUSHF.get().isNull()!(CUSHF=0) set CUSHF=ln.cushf,UX("LN",DI)=""
	else  set UX("DEP",DI)=""
	
			
	if CUSH.get().isNull() set CUSH=lnapchge.cush
	
	quit
	
ADJUST(RecordLNAPCHGE lnapchge)
			
	type public Number BEGBAL,BAL
	type public String LNEAM()
	type Number I,ESCPMT,ENDBAL
	type Date JD
	
	set ESCPMT=lnapchge.epmt
	set JD=""
	for  set JD=LNEAM(JD).order() quit:JD.isNull()  if LNEAM(JD) set LNEAM(JD).piece("|",1)=ESCPMT
	for I=22,23,24 set BEGBAL=BEGBAL+lnapchge.amtd+lnapchge.amtb+lnapchge.amtl
	set BEGBAL=BEGBAL-lnapchge.amtc
	set BAL=BEGBAL
	set JD=""
	for  set JD=LNEAM(JD).order() quit:JD.isNull()  do { 
		set BAL=BAL+LNEAM(JD)-LNEAM(JD).piece("|",2)
		set LNEAM(JD).piece("|",3)=BAL
		set ENDBAL=BAL
	}
	quit

	
EXEC(RecordLNAPCHGE lnapchge)	//Create the LNEAM array and then convert it to lower case for the
		//screen SCA042A to use.
	
	type public Date APCND,AED,JD
	type public Number BEGBAL,CNT,CUSHO,INIDEP,LCID,TYPE,TPG
	type public String DATA,ESC,LNEAM,lneam
	
	type Number SVCUSHO
	type String XX
	
	set SVCUSHO=CUSHO
	do Db.delete("LNEAM")
	
	kill lneam,JD,LNEAM,DATA,TPG
	type RecordLN ln = Db.getRecord("LN","CID=:LCID")

	do EXEC^LNEA(.ln,.lnapchge,LCID,.LNEAM,ESC,APCND,AED,"02",.DATA)
	
	do ADJUST(.lnapchge)
	set CNT=0,XX="" for  set XX=$O(LNEAM(XX)) quit:XX=""  do { 
	
	set CNT=CNT+1
	set JD(CNT)=XX
	set lneam(CNT)=LNEAM(XX)	
	set TPG=('(CNT#10=0))+(CNT\9)
	set TYPE=ln.type
	}
	if 'BEGBAL.exists() set BEGBAL=DATA.piece("|",3)
	if 'INIDEP.exists() set INIDEP=DATA.piece("|",2)
	set CUSHO=SVCUSHO
	quit

	
REAN(RecordLNAPCHGE lnapchge,RecordLN ln)	 //If option to re-analzye is choosen this section will do so.

	type public Boolean ER,REAN
	type public String ESC,VFMQ,EABL,EABE
	type public Date APCND,SVTJD,TJD
	type public Number ANOFF,CUSHO,LCID,SVECID,SVESC,SVCUSHO,SVTYPE,SVBR
	
	type Number BR,CID,ECID,EPOST,SDA,ODA,RSEQ,TYPE
	
	set REAN=1
	set EPOST=lnapchge.epmt
	set SVTJD=TJD,RSEQ=3,ER=0,TJD=APCND-ANOFF

	set SVCUSHO=CUSHO,SVESC=ESC,CID=LCID
	do EXTERN^BCHLNEAB(.ln,.EABL,.EABE)

	if ER set VFMQ="Q" quit
	set TJD=SVTJD,CUSHO=SVCUSHO,ESC=SVESC,ECID=SVECID
	
	
	quit

vSIG()	quit "60477^65452^Pat Kelly^14601"	// Signature - LTD^TIME^USER^SIZE
