BCHODPE //Batch BCHODPE - Overdraft Transfer
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHODPE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHODPE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHODPE") quit
 do JOBMGR^BCHUTL(%FN,"BCHODPE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHODPE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHODPE","*","",TJD.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHODPE",TJD.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHODPE",TJD.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHODPE","*","",TJD.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHODPE",TJD.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,CID) //
	/*
		This is a batch overdraft process. This process will setup zero
		dollar transactions for all accounts with the following 
		criteria:
		
			The Deposit account has End of Day Overdraft 
			Transaction type defined.

			The balance of the Deposit account is below it's minimum balance.

			The Deposit account is setup for overdraft protection.
		
			Sufficient funds exist to cover the overdraft.
	
		The zero dollar transaction will be posted, which will invoke 
		standard overdraft processing to cover the shortage.
	*/
	
	type Public String CRCD,ET,ETC,par(),RJ(),RM,TCMT,TRNITC()
	type Public Number BRCD
	type Public Boolean ER
	type Number SEQ

	set SEQ=1

	type RecordTTX ttx()

	set ttx(SEQ)=Class.new("RecordTTX")

	type RecordDEP dep
	
	set dep=Db.getRecord("DEP","CID")
	if '$$CHECK(CID,.dep) quit

	// Setup zero dollar transaction.
  	/* Build an array containing fields required for a transaction

	 CID	Customer number
	 ETC	Transaction code
	*/
	
 	if '(TRNITC(ETC).exists()) do {
		type RecordTRN trn=Db.getRecord("TRN","ETC")
		set TRNITC(ETC)=trn.itc
		}

	set ttx(SEQ).cid=CID
	set ttx(SEQ).etc=ETC
	set ttx(SEQ).itc=TRNITC(ETC)
	set ttx(SEQ).tamt=0
	set ttx(SEQ).tcmt=TCMT
	set ttx(SEQ).crcd=CRCD
	set ttx(SEQ).tlo=%UserStation

	// Post the transactions for this account

	do TRNSET^TRNDRV(.ttx(),%SystemDate,BRCD,4,,.RJ())
	
	if RJ.data() do {
		set RM=RJ(1).piece("|",2)
		set ER=+RJ(1)
		do EXC 
		set ER=0
		}
	quit
	
	
CHECK(CID,RecordDEP dep)	// Private ; Overdraft Processing Qualification

	/*
	 Determine if the account needs a zero dollar transaction setup
	 to invoke standard overdraft processing.
	
	 ARGUMENTS:
	      	. CID   Account Number  	/TYP=N/REQ
	
	    INPUTS:
		. TJD	System Date		/TYP=D/REQ
	
	   RETURNS:
	       	. $$   	0 - Account does not need overdraft processing
			1 - Account needs overdraft processing

	*/

	type Number ODAVLF,ODBB,NSFLIM,REQ,TYPE
	type Public String %CRCD,CRCD,ETC,ET
	type Public Boolean ER
	
	
	set CRCD=dep.crcd if CRCD="" set CRCD=%CRCD
	set TYPE=dep.type
	type RecordPRODCTL dtype
	set dtype=Db.getRecord("PRODCTL","TYPE")
	set ETC=dtype.drodpet			// End of Day Overdraft Transfer
  	if ETC="" set ER=1,ET=$$^MSG(2566,TYPE,25) do EXC quit 0
						// make sure it's a valid trancode
	if 'Db.isDefined("TRN","ETC") set ER=1,ET=$$^MSG(1498,ETC) do EXC quit 0
	if dep.stat=4 quit 0			// account is closed
	if dep.bal'<dep.minbal quit 0		// balance not less than minimum balance
	if dep.odo#2=0 quit 0			// O/D protection option (1 and 3 allowed)
	
	set ODBB=dep.odbb,REQ=0		// O/D base
	if ODBB=0 set REQ=+dep.bal		// Pay Against Ledger Balance
	if ODBB=1 set REQ=dep.balcol		// Pay Against Collected Balance
	// Pay Against Available Balance
	if ODBB=2 set REQ=dep.balavl
	if ER quit
	
	set NSFLIM=-dep.nsflim		// overdraft limit
	if REQ'<NSFLIM quit 0		// not beyond overdraft limit
	
	/*
	 The following section checks that linked overdraft accounts exist
	 that can cover the overdrawn Deposit account amount
	*/

	set REQ=NSFLIM-REQ		// required to be at overdraft limit
	set ODAVLF=$$ODAVLF^DEPDI(CID)  // funds available
	if ODAVLF>0,dep.fnbodp quit 1	// funds are available and force negative flag on

        // 50493 - Log insufficent funds as an exception
        if REQ>ODAVLF set ER=1,ET=$$^MSG(1244) do EXC quit 0
	
	quit 1

EXC     // Log error in exception file
	type Public Number CID,%ZTSEQ
	type Public String ET
	do LOG^UTLEXC($T(+0),"*",$$^MSG(2507),CID.get(),%ZTSEQ.get(),ET.get(),"")
	quit
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,TJD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set TJD=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(TJD,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,TJD,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public String BRCD,%ODP
	type public Boolean ER

	// Not using loan sweep processing
	#IF 'CUVAR.ODPE set %BatchExit=1 quit
	
	/* 
	Retrieve source and teller information in schinit section in order
	to prevent the scheduler from trying to process records without valid 
	teller information
	*/

	do SOURCE^BCHSOURC("BOFF","ODPE",.%UserID,.BRCD,.%UserClass,"","",.%ODP)
	// If a error occurs, do not abort the dayend . EXC will
	// reset ER, so we set %BatchExit to get out of the process.
	if ER do EXC set %BatchExit=1 quit

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,CID","DAYENDODPE","DAYENDODPE.TJD=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	
	// Setup batch teller information for the thread
	type public String BRCD,%ODP,TCMT
	
	do SOURCE^BCHSOURC("BOFF","ODPE",.%UserID,.BRCD,.%UserClass,"","",.%ODP)

	set TCMT=$$^MSG(2507)

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
