UTCHKSER	//Private; Generic Check Item Serial Number Generator (ARQ 14202)
	/*
	   ORIG: SAVITSKYS - 09/12/94
	   DESC: Generic Check Item Serial Number Generator (ARQ 14202)
	  	 Based on Serial Number Generation designed for Canadian
	  	 Clientele

	   INPUTS:
	  	 . System
	  	 Line tag:  TESTSER --> FSER, X
	      		    EDTCHK  --> X

	   NOTE:
	  	 The following line tags must be in any new serial number
	  	 generator produced as they are called from both other routines
	  	 or screens:	 TESTSER
	    			 EDTCHK
	    			 LENCHK
	    			 SELCHK
	    
	  ---- Revision History ------------------------------------------------

	   05/10/05 - KELLYP - CR 15872
		     Removed SELL section as it was only being called by the 
		     SRVCHKSELL screen (which has been obsoleted because it was
		     only used by the host teller).  Modified SEEFILE section to
		     correctly determine if check range already in use.  Also 
		     converted entire procedure to current PSL standards and
		     removed pre-2003 revision history.

	   06/17/03 - CARROLLJ - 51349
		     Removed GETNUM and VERTR lintags.  Linetags were not being
		     called by anything.
	 */

	do TESTSER
	
	quit

TESTSER	// Serial Number Generator

	/*

	   This is the portion of the routine that will actually generate the
	   serial numbers.  It currently strips the alpha characters from the
	   numeric ones and uses the numerics to parse through the creation.
	   It is called from routine ^MSRVITM and may be changed to reflect any
	   check serial number generation methods required by the client.

	   Required input:  FSER (From Serial Number already read in from an
	      			  UTLREAD prompt)
	      		    X (obtained as the variable currently being read from
		 	       an UTLREAD prompt)

	   Output   	    An array MASTID(x1)="", MASTID(x2)="" ...
	      		    where x1,x2,... are serial numbers

	*/
	
	type public Boolean ER
	
	type public Number FSERN,TSERN
	type public String FSER,MASTID(),X

	type Number I	
	type String FSERA,NEWSER,TMPSER,TSERA
	
	set FSERA=$$SERALP(FSER)
	set FSERN=$$SERNUM(FSER)
	set TSERA=$$SERALP(X)
	set TSERN=$$SERNUM(X)

	// Prefix must match the From Serial Number prefix
	if FSERA'=TSERA do Runtime.setErrMSG("SRVITM","7178") quit:ER

	// Must be greater than ~p1
	if FSERN>TSERN do Runtime.setErrMSG("SRVITM","1810",FSER) quit:ER

	kill MASTID

	// The following line of code assures that the serial number lengths
	// for mass check creation are the same.

	// Lengths of the serial numbers must match.
	if X.length()'=FSER.length() do Runtime.setErrMSG("SRVITM","7174") quit:ER

	do LENCHK quit:ER.get()

	do SEEFILE quit:ER.get()

	// Item ~p1 already exists in inventory
	if ('TMPSER.isNull()),(TMPSER']]X) do Runtime.setErrMSG("SRVITM","7173",TMPSER) quit:ER

	for I=FSERN:1:TSERN do {
		// Need to add zeros to maintain the same length
		set NEWSER=FSERA_$TR($J("",$L(FSER)-$L(FSERA_I))," ","0")_I

		set MASTID(NEWSER)=""
		}

	quit


SEEFILE	// Verify if the range already exist

	type public String FSER,SRVCAT,SRVLOC,SRVTYP,TMPSER,X

	type ResultSet rs=Db.select("SRVID","SRVITM","SRVCAT=:SRVCAT AND SRVTYP=:SRVTYP AND SRVLOC=:SRVLOC AND SRVID>=:FSER AND SRVID<=:X","SRVID")
	if rs.next() set TMPSER=rs.getCol(1)
	else  set TMPSER=""

	quit

EDTCHK	// Serial Number Edit Check Enforcer

	/*

	   This portion of the routine is to be used for strict edit check
	   enforcing.  It should be modified according to the need of the client
	   so that the particular check's serial numbers will be correctly set.
	   It is called from both ^UTSRVITM for individual check creation and
	   ^MSRVITM for mass check creation.

	   Required input:  X (obtained as the variable currently being read 
		from a UTLREAD prompt)

	*/
	
	type public String X
	
	type Number I
	type String ALPHAS,NUMS
	
	set ALPHAS="" 
	set NUMS=""

	for I=1:1:X.length() do {
		if X.extract(I)?1A set ALPHAS=ALPHAS_$$UPPER^%ZFUNC(X.extract(I))
		if X.extract(I)?1N set NUMS=NUMS_X.extract(I)
		}

	// Concatenate Serial Pre/Post Fix
	set X=ALPHAS_NUMS

	do LENCHK

	quit

LENCHK	// Serial Number Length Check

	/*
	   The following checks the length of the current serial number with
	   those previously existing  for the currently selected CATEGORY, TYPE,
	   and LOCATION.  If the lengths are not the same an error message is
	   echoed back giving the length the serial numbers must be.  An
	   alternative to this is if the check type's serial numbers are well
	   defined the length may be hard coded for the client's use.

 	*/
	
	type public Boolean ER
	type public String TMPSER,X
	
	do GETFIRST quit:ER.get()

	// Serial numbers must be ~p1 characters long
	if ('TMPSER.isNull()),(TMPSER.length()'=X.length()) do Runtime.setErrMSG("SRVITM","7179",TMPSER.length())

	quit


GETFIRST	// Get the first check item to compare the length

	type public String SRVCAT,SRVLOC,SRVTYP,TMPSER

	type ResultSet rs=Db.select("SRVID","SRVITM","SRVCAT=:SRVCAT AND SRVTYP=:SRVTYP AND SRVLOC=:SRVLOC") 
	if rs.next() set TMPSER=rs.getCol("SRVID")
	else  set TMPSER=""
	
	quit


SERALP(String SER)	// Strip Alpha Characters for To Serial Number Prefix

	type Number I
	type String SALP
	
	set SALP=""

	for I=1:1:SER.length() do {
		if SER.extract(I)?1A set SALP=SALP_$$UPPER^%ZFUNC(SER.extract(I))
		}

	quit SALP


SERNUM(String SER)	// Strip Alpha Characters for Serial Number Postfix

	type Number I
	type String SNUM
	
	set SNUM=""

	for I=1:1:SER.length() do {
		if SER.extract(I)?1N set SNUM=SNUM_SER.extract(I)
		}
		
	quit SNUM

vSIG()	quit "60036^59444^Pat Kelly^5251"	// Signature - LTD^TIME^USER^SIZE
