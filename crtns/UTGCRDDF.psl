UTGCRDDF(RecordUTBLGCRDD utblgcrdd, String vpar, Boolean vparNorm) // UTBLGCRDD - GCR Daily Scoring Decrement Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblgcrdd.getMode()                   // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblgcrdd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblgcrdd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TBLNM").exists()!vx("PERCENT").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLGCRDD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLGCRDD","TBLNM = :utblgcrdd.tblnm and PERCENT = :utblgcrdd.percent") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TBLNM
	type public String PERCENT

	type RecordUTBLGCRDD utblgcrdd = Db.getRecord("UTBLGCRDD","TBLNM=:TBLNM,PERCENT=:PERCENT")
	if (%ProcessMode = 2) do {
		do utblgcrdd.setMode(2)

		do UTGCRDDF(utblgcrdd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLGCRDD utblgcrdd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLGCRDD","TBLNM = :utblgcrdd.tblnm and PERCENT = :utblgcrdd.percent") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblgcrdd,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblgcrdd,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblgcrdd)) S ^UTBL("GCRDS",vobj(utblgcrdd,-3),vobj(utblgcrdd,-4))=vobj(utblgcrdd)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLGCRDD utblgcrdd

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblgcrdd,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("GCRDS",vobj(utblgcrdd,-3),vobj(utblgcrdd,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLGCRDD utblgcrdd

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLGCRDD utblgcrdd

	if utblgcrdd.tblnm.isNull() do vreqerr("TBLNM") quit
	if utblgcrdd.percent.isNull() do vreqerr("PERCENT") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLGCRDD","MSG",1767,"UTBLGCRDD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordUTBLGCRDD utblgcrdd
	if 'utblgcrdd.tblnm.isNull() set vfkey("^UTBL("_"""GCRDS"""_","_""""_utblgcrdd.tblnm_""""_")")="UTBLGCRDD(TBLNM) -> UTBLGCRDS"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordUTBLGCRDD utblgcrdd
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("UTBLGCRDS",":utblgcrdd.tblnm") set vERRMSG = $$^MSG(8563,"UTBLGCRDD(TBLNM) -> UTBLGCRDS") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLGCRDD utblgcrdd

	if utblgcrdd.tblnm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TBLNM", vRM) quit
	set X = utblgcrdd.percent if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,1,,,0,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLGCRDD.PERCENT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = utblgcrdd.gcrodd if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("GCRODD", vRM) quit
	set X = utblgcrdd.gcrrtd if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("GCRRTD", vRM) quit
	set X = utblgcrdd.odscropt if 'X.isNull(),'Db.isDefined("STBLDREOPT","X") set vRM = $$^MSG(1485,X) do vdderr("ODSCROPT", vRM) quit
	set X = utblgcrdd.rnscropt if 'X.isNull(),'Db.isDefined("STBLDREOPT","X") set vRM = $$^MSG(1485,X) do vdderr("RNSCROPT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLGCRDD","MSG",979,"UTBLGCRDD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLGCRDD utblgcrdd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TBLNM").exists() set vux("TBLNM") = vx("TBLNM")
	if vx("PERCENT").exists() set vux("PERCENT") = vx("PERCENT")
	do vkey(1) set voldkey = utblgcrdd.tblnm_","_utblgcrdd.percent // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblgcrdd.tblnm_","_utblgcrdd.percent // Copy new keys into object
	type RecordUTBLGCRDD vnewrec = utblgcrdd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLGCRDD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLGCRDD utblgcrdd

	if vux("TBLNM").exists() set utblgcrdd.tblnm = vux("TBLNM").piece("|",i)
	if vux("PERCENT").exists() set utblgcrdd.percent = vux("PERCENT").piece("|",i)
	quit
