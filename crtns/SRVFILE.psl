SRVFILE(RecordSRV srv, String vpar, Boolean vparNorm) // SRV - Service Fee Summary Data Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (21)             11/22/2003
	// Trigger Definition (1)                      08/27/2005
	// Journal File Definition (1)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = srv.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(srv,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(srv,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = srv.cid
	type String PLTP = srv.pltp
	type String SCND = srv.scnd

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("PLTP").exists()!vx("SCND").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SRV",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SRV","CID = :srv.cid and PLTP = :srv.pltp and SCND = :srv.scnd") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String PLTP
	type public String SCND

	type RecordSRV srv = Db.getRecord("SRV","CID=:CID,PLTP=:PLTP,SCND=:SCND")
	if (%ProcessMode = 2) do {
		do srv.setMode(2)

		do SRVFILE(srv,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSRV srv

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SRV","CID = :srv.cid and PLTP = :srv.pltp and SCND = :srv.scnd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(srv)) S ^SRV(vobj(srv,-3),vobj(srv,-4),vobj(srv,-5))=vobj(srv)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.srv)                 // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSRV srv

	if vpar["/JOURNAL/" do VJOURNAL(.srv)                  // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SRV(vobj(srv,-3),vobj(srv,-4),vobj(srv,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordSRV srv

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSRV srv

	if srv.cid.isNull() do vreqerr("CID") quit
	if srv.pltp.isNull() do vreqerr("PLTP") quit
	if srv.scnd.isNull() do vreqerr("SCND") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SRV","MSG",1767,"SRV."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSRV srv
	if vx("").order().isNull() do AUDIT^UCUTILN(srv,.vx(),1,"|") quit
	if vx("NETFWD").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(srv,.vx(),1,"|")
	quit


vbu1 // Trigger BU_NETFWD - Offset period analysis pos adjustment

	type public RecordSRV srv
	do srv.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
		   
		   Removed old revision history.
	----------------------------------------------------------------------
	*/
	
	new data,ANLOFFED,ANLTYP,SCLD
	
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")

	set SCLD = dep.scld
 set ANLOFFED = dep.anloffed	// Analysis offset end date
 set ANLTYP = dep.anltyp	// Analysis type
 set ANLLED = dep.anlled	// Net Loss end date

	// Not a lead account
	if ANLTYP'=1 do Runtime.setErrMSG("SRV",4221,"NETFWD") quit:ER

	/*
			If no SCLD can't have run service fees so no offset yet
			If coming from netloss or analysis offset allow updates as both 
			batches set NLOFF=1
	*/

	if '$G(NLOFF)&(($G(SCLD)="")!($G(ANLOFFED)="")) do Runtime.setErrMSG("SRV",4227,"NETFWD") quit:ER

	/*
			Only for system changes to NETFWD in BCHANLOFF and BCHNETLOSS processes. If 
			NETLOSS processing, may not be in offset period, so check here to reset
			earnings adjustment when batch resets NETFWD before the analysis offset 
			period check, or get "not in offset period" error when batch debits
			account for the NETFWD amount. Offset process will hit filer if debiting 
			account which resets NETFWD, so need to reset ERNADJ.
	*/

	if srv.isChanged("NETFWD","SYSTEM") do {  quit
 	if (ANLLED=%SystemDate)!(ANLOFFED=%SystemDate) set srv.ernadj=srv.netfwd
 	}
	/*
			User modifications to adjusted net analysis position need to verify
			if account is in an offset period prior to allowing user to update field.
	*/

	if (%SystemDate'>SCLD)!(%SystemDate>ANLOFFED) do Runtime.setErrMSG("SRV",4227,"NETFWD") quit:ER

	set srv.ernadj=srv.netfwd-srv.netfwdo

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSRV srv

	set X = srv.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = srv.pltp if 'X.isNull(),'Db.isDefined("STBLPLTP","X") set vRM = $$^MSG(1485,X) do vdderr("PLTP", vRM) quit
	set X = srv.scnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCND", vRM) quit
	set X = srv.anexdefbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.ANEXDEFBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.anreqbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.ANREQBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.calbal if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CALBAL", vRM) quit
	set X = srv.ernadj if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.ERNADJ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.ernall if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.ERNALL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.feeact if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.FEEACT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.feeanl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.FEEANL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.feechg if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.FEECHG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.feeoff if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.FEEOFF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.feeunp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.FEEUNP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.int if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.INT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.netfwd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.NETFWD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.netfwdo if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.NETFWDO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.netfwdp if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.NETFWDP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.sysadj if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.SYSADJ"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = srv.tseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	set X = srv.ucr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SRV.UCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SRV","MSG",979,"SRV."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSRV srv)	//SRV Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="O" do {
			if 'EFD.get() do {
				quit:'vx.data()
				if vx("NETFWD").exists() do vj1(.srv,"NETFWD")	// Mode=U Tran=O EFD=N Seq=1 JRNID=SRV_HIST
				}
			}
		}

	quit


vj1(RecordSRV srv,String vdi)	// SRV_HIST  Table HIST  NETFWD history

	type RecordACN acn=Db.getRecord("ACN","CID=:srv.cid",1)


	type Public String vx(),%UID,TJD,TLO,vfmtable
	type String v1,vlastkey

	type String vold,vnew,vfmtable

	set vold=vx(vdi).piece("|",1)
	set vnew=vx(vdi).piece("|",2)
	set vfmtable=vx(vdi).piece("|",11)

	set v1=srv.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=acn.boo
	set hist.cdt=+$H
	set hist.tcmt=$$TCMTFM^ACNFUNCS(srv.cid_","_srv.pltp_","_srv.scnd,"SRV",vdi,vold,vnew,,,vfmtable)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordSRV srv

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("PLTP").exists() set vux("PLTP") = vx("PLTP")
	if vx("SCND").exists() set vux("SCND") = vx("SCND")
	do vkey(1) set voldkey = srv.cid_","_srv.pltp_","_srv.scnd // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = srv.cid_","_srv.pltp_","_srv.scnd // Copy new keys into object
	type RecordSRV vnewrec = srv.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SRV",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSRV srv

	if vux("CID").exists() set srv.cid = vux("CID").piece("|",i)
	if vux("PLTP").exists() set srv.pltp = vux("PLTP").piece("|",i)
	if vux("SCND").exists() set srv.scnd = vux("SCND").piece("|",i)
	quit
