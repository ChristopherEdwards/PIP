CIFFILE(RecordCIF cif, String vpar, Boolean vparNorm) // CIF - Customer Information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (261)            01/10/2007
	// Trigger Definition (48)                     09/21/2006
	// Journal File Definition (8)                 09/01/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cif.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(cif,.vxins(),10,"|")
	if %O = 1 quit:'cif.isChanged()  do AUDIT^UCUTILN(cif,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = cif.acn

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI^CIFFIL0                    // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI^CIFFIL0                    // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU^CIFFIL0                    // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CIF",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU^CIFFIL0                    // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI^CIFFIL0                    // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CIF","ACN = :cif.acn")            // No record exists
		if vpar["/TRIGBEF/" do VBD^CIFFIL0                    // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD^CIFFIL0                    // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN

	type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN")
	if (%ProcessMode = 2) do {
		do cif.setMode(2)

		do CIFFILE(cif,vpar)
	}
	else  do VINDEX(cif)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCIF cif

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CIF","ACN = :cif.acn") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set cif.FMLD = %SystemDate
		set cif.USERID = %UserID
		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(cif,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CIF(vobj(cif,-3),n)=vobj(cif,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(cif,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(cif,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CIF(vobj(cif,-3),n)=vobj(cif,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL^CIFFIL1(.cif)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.cif) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordCIF cif
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^CIF(vobj(cif,-3),n)) quit:n.isNull()  if 'vobj(cif,n).data(),^CIF(vobj(cif,-3),n).data()#2 set vobj(cif,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCIF cif

	if 'vkeychg.get(),cif.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.cif)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL^CIFFIL1(.cif)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^CIF(vobj(cif,-3))                                // Delete Record
	quit


vinit // Initialize default values

	type public RecordCIF cif

	// Type local variables for access keys for defaults
	type public String ACN

	if cif.afinst.isNull() set cif.afinst = 0              // afinst
	if cif.agent.isNull() set cif.agent = 0                // agent
	if cif.bwf.isNull() set cif.bwf = 0                    // bwf
	if cif.cifdatsb.isNull() set cif.cifdatsb = 0          // cifdatsb
	if cif.cls.isNull() set cif.cls = "*"                  // cls
	if cif.cmsflg.isNull() set cif.cmsflg = 0              // cmsflg
	type public String %CRCD
	if cif.crcd.isNull() set cif.crcd = %CRCD              // crcd
	type public String TJD
	if cif.dao.isNull() set cif.dao = TJD                  // dao
	if cif.ddbip.isNull() set cif.ddbip = 0                // ddbip
	if cif.edbi.isNull() set cif.edbi = 0                  // edbi
	if cif.ellpls.isNull() set cif.ellpls = 0              // ellpls
	if cif.expflg.isNull() set cif.expflg = 0              // expflg
	if cif.finstreq.isNull() set cif.finstreq = 0          // finstreq
	if cif.govt.isNull() set cif.govt = 0                  // govt
	if cif.grp.isNull() set cif.grp = "CIF"                // grp
	if cif.hldcomind.isNull() set cif.hldcomind = 0        // hldcomind
	if cif.idshare.isNull() set cif.idshare = 0            // idshare
	if cif.idtheft.isNull() set cif.idtheft = 0            // idtheft
	if cif.intactdet.isNull() set cif.intactdet = 0        // intactdet
	if cif.interbank.isNull() set cif.interbank = 0        // interbank
	type public String TJD
	if cif.isdadt.isNull() set cif.isdadt = TJD            // isdadt
	if cif.mardm.isNull() set cif.mardm = 0                // mardm
	if cif.marem.isNull() set cif.marem = 0                // marem
	if cif.martel.isNull() set cif.martel = 0              // martel
	if cif.mt320.isNull() set cif.mt320 = 0                // mt320
	if cif.mt900.isNull() set cif.mt900 = 0                // mt900
	if cif.mt910.isNull() set cif.mt910 = 0                // mt910
	if cif.mt940.isNull() set cif.mt940 = 0                // mt940
	if cif.mt942.isNull() set cif.mt942 = 0                // mt942
	if cif.mt950.isNull() set cif.mt950 = 0                // mt950
	if cif.nopurge.isNull() set cif.nopurge = 0            // nopurge
	if cif.nr.isNull() set cif.nr = 0                      // nr
	if cif.pin1cntr.isNull() set cif.pin1cntr = 0          // pin1cntr
	if cif.pin1del.isNull() set cif.pin1del = 0            // pin1del
	if cif.pin2cntr.isNull() set cif.pin2cntr = 0          // pin2cntr
	if cif.pin2del.isNull() set cif.pin2del = 0            // pin2del
	if cif.polexpper.isNull() set cif.polexpper = 0        // polexpper
	if cif.pubhldind.isNull() set cif.pubhldind = 0        // pubhldind
	if cif.rflgc.isNull() set cif.rflgc = 0                // rflgc
	if cif.selfemp.isNull() set cif.selfemp = 0            // selfemp
	type public String TJD
	if cif.statusdt.isNull() set cif.statusdt = TJD        // statusdt
	if cif.swiftsak.isNull() set cif.swiftsak = 0          // swiftsak
	if cif.taxexm.isNull() set cif.taxexm = 0              // taxexm
	type public String %UID
	if cif.userid.isNull() set cif.userid = %UID           // userid
	if cif.votexm.isNull() set cif.votexm = 0              // votexm
	if cif.w8req.isNull() set cif.w8req = 0                // w8req
	quit


vreqn // Validate required data items

	type public RecordCIF cif

	if cif.afinst.isNull() do vreqerr("AFINST") quit
	if cif.agent.isNull() do vreqerr("AGENT") quit
	if cif.boo.isNull() do vreqerr("BOO") quit
	if cif.bwf.isNull() do vreqerr("BWF") quit
	if cif.cc.isNull() do vreqerr("CC") quit
	if cif.ccode.isNull() do vreqerr("CCODE") quit
	if cif.cifdatsb.isNull() do vreqerr("CIFDATSB") quit
	if cif.cls.isNull() do vreqerr("CLS") quit
	if cif.cmsflg.isNull() do vreqerr("CMSFLG") quit
	if cif.crcd.isNull() do vreqerr("CRCD") quit
	if cif.dao.isNull() do vreqerr("DAO") quit
	if cif.ddbip.isNull() do vreqerr("DDBIP") quit
	if cif.edbi.isNull() do vreqerr("EDBI") quit
	if cif.ellpls.isNull() do vreqerr("ELLPLS") quit
	if cif.expflg.isNull() do vreqerr("EXPFLG") quit
	if cif.finstreq.isNull() do vreqerr("FINSTREQ") quit
	if cif.govt.isNull() do vreqerr("GOVT") quit
	if cif.grp.isNull() do vreqerr("GRP") quit
	if cif.hldcomind.isNull() do vreqerr("HLDCOMIND") quit
	if cif.idshare.isNull() do vreqerr("IDSHARE") quit
	if cif.idtheft.isNull() do vreqerr("IDTHEFT") quit
	if cif.intactdet.isNull() do vreqerr("INTACTDET") quit
	if cif.interbank.isNull() do vreqerr("INTERBANK") quit
	if cif.lnm.isNull() do vreqerr("LNM") quit
	if cif.mad1.isNull() do vreqerr("MAD1") quit
	if cif.mardm.isNull() do vreqerr("MARDM") quit
	if cif.marem.isNull() do vreqerr("MAREM") quit
	if cif.martel.isNull() do vreqerr("MARTEL") quit
	if cif.mcity.isNull() do vreqerr("MCITY") quit
	if cif.mcntry.isNull() do vreqerr("MCNTRY") quit
	if cif.mt320.isNull() do vreqerr("MT320") quit
	if cif.mt900.isNull() do vreqerr("MT900") quit
	if cif.mt910.isNull() do vreqerr("MT910") quit
	if cif.mt940.isNull() do vreqerr("MT940") quit
	if cif.mt942.isNull() do vreqerr("MT942") quit
	if cif.mt950.isNull() do vreqerr("MT950") quit
	if cif.nam.isNull() do vreqerr("NAM") quit
	if cif.nopurge.isNull() do vreqerr("NOPURGE") quit
	if cif.nr.isNull() do vreqerr("NR") quit
	if cif.pad1.isNull() do vreqerr("PAD1") quit
	if cif.pcity.isNull() do vreqerr("PCITY") quit
	if cif.pcntry.isNull() do vreqerr("PCNTRY") quit
	if cif.pers.isNull() do vreqerr("PERS") quit
	if cif.pin1cntr.isNull() do vreqerr("PIN1CNTR") quit
	if cif.pin1del.isNull() do vreqerr("PIN1DEL") quit
	if cif.pin2cntr.isNull() do vreqerr("PIN2CNTR") quit
	if cif.pin2del.isNull() do vreqerr("PIN2DEL") quit
	if cif.polexpper.isNull() do vreqerr("POLEXPPER") quit
	if cif.pubhldind.isNull() do vreqerr("PUBHLDIND") quit
	if cif.rflgc.isNull() do vreqerr("RFLGC") quit
	if cif.selfemp.isNull() do vreqerr("SELFEMP") quit
	if cif.swiftsak.isNull() do vreqerr("SWIFTSAK") quit
	if cif.taxexm.isNull() do vreqerr("TAXEXM") quit
	if cif.type.isNull() do vreqerr("TYPE") quit
	if cif.votexm.isNull() do vreqerr("VOTEXM") quit
	if cif.w8req.isNull() do vreqerr("W8REQ") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCIF cif

	if cif.acn.isNull() do vreqerr("ACN") quit

	if 'vobj(cif,-100,1,"").order().isNull() do {
		if vx("NAM").exists(),cif.nam.isNull() do vreqerr("NAM") quit
	}
	if 'vobj(cif,-100,3,"").order().isNull() do {
		if vx("LNM").exists(),cif.lnm.isNull() do vreqerr("LNM") quit
	}
	if 'vobj(cif,-100,5,"").order().isNull() do {
		if vx("MCITY").exists(),cif.mcity.isNull() do vreqerr("MCITY") quit
		if vx("MCNTRY").exists(),cif.mcntry.isNull() do vreqerr("MCNTRY") quit
		if vx("MAD1").exists(),cif.mad1.isNull() do vreqerr("MAD1") quit
	}
	if 'vobj(cif,-100,6,"").order().isNull() do {
		if vx("PCITY").exists(),cif.pcity.isNull() do vreqerr("PCITY") quit
		if vx("PCNTRY").exists(),cif.pcntry.isNull() do vreqerr("PCNTRY") quit
		if vx("PAD1").exists(),cif.pad1.isNull() do vreqerr("PAD1") quit
	}
	if 'vobj(cif,-100,10,"").order().isNull() do {
		if vx("AGENT").exists(),cif.agent.isNull() do vreqerr("AGENT") quit
	}
	if 'vobj(cif,-100,13,"").order().isNull() do {
		if vx("BOO").exists(),cif.boo.isNull() do vreqerr("BOO") quit
		if vx("CC").exists(),cif.cc.isNull() do vreqerr("CC") quit
		if vx("CCODE").exists(),cif.ccode.isNull() do vreqerr("CCODE") quit
		if vx("RFLGC").exists(),cif.rflgc.isNull() do vreqerr("RFLGC") quit
		if vx("BWF").exists(),cif.bwf.isNull() do vreqerr("BWF") quit
		if vx("TAXEXM").exists(),cif.taxexm.isNull() do vreqerr("TAXEXM") quit
		if vx("W8REQ").exists(),cif.w8req.isNull() do vreqerr("W8REQ") quit
		if vx("NR").exists(),cif.nr.isNull() do vreqerr("NR") quit
		if vx("EXPFLG").exists(),cif.expflg.isNull() do vreqerr("EXPFLG") quit
	}
	if 'vobj(cif,-100,14,"").order().isNull() do {
		if vx("DAO").exists(),cif.dao.isNull() do vreqerr("DAO") quit
	}
	if 'vobj(cif,-100,15,"").order().isNull() do {
		if vx("NOPURGE").exists(),cif.nopurge.isNull() do vreqerr("NOPURGE") quit
	}
	if 'vobj(cif,-100,17,"").order().isNull() do {
		if vx("VOTEXM").exists(),cif.votexm.isNull() do vreqerr("VOTEXM") quit
	}
	if 'vobj(cif,-100,18,"").order().isNull() do {
		if vx("AFINST").exists(),cif.afinst.isNull() do vreqerr("AFINST") quit
		if vx("EDBI").exists(),cif.edbi.isNull() do vreqerr("EDBI") quit
		if vx("DDBIP").exists(),cif.ddbip.isNull() do vreqerr("DDBIP") quit
	}
	if 'vobj(cif,-100,19,"").order().isNull() do {
		if vx("MAREM").exists(),cif.marem.isNull() do vreqerr("MAREM") quit
		if vx("MARDM").exists(),cif.mardm.isNull() do vreqerr("MARDM") quit
		if vx("MARTEL").exists(),cif.martel.isNull() do vreqerr("MARTEL") quit
		if vx("ELLPLS").exists(),cif.ellpls.isNull() do vreqerr("ELLPLS") quit
	}
	if 'vobj(cif,-100,50,"").order().isNull() do {
		if vx("TYPE").exists(),cif.type.isNull() do vreqerr("TYPE") quit
		if vx("CLS").exists(),cif.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),cif.grp.isNull() do vreqerr("GRP") quit
		if vx("PERS").exists(),cif.pers.isNull() do vreqerr("PERS") quit
		if vx("CRCD").exists(),cif.crcd.isNull() do vreqerr("CRCD") quit
	}
	if 'vobj(cif,-100,67,"").order().isNull() do {
		if vx("CMSFLG").exists(),cif.cmsflg.isNull() do vreqerr("CMSFLG") quit
	}
	if 'vobj(cif,-100,75,"").order().isNull() do {
		if vx("GOVT").exists(),cif.govt.isNull() do vreqerr("GOVT") quit
	}
	if 'vobj(cif,-100,85,"").order().isNull() do {
		if vx("POLEXPPER").exists(),cif.polexpper.isNull() do vreqerr("POLEXPPER") quit
		if vx("INTACTDET").exists(),cif.intactdet.isNull() do vreqerr("INTACTDET") quit
		if vx("PUBHLDIND").exists(),cif.pubhldind.isNull() do vreqerr("PUBHLDIND") quit
		if vx("HLDCOMIND").exists(),cif.hldcomind.isNull() do vreqerr("HLDCOMIND") quit
	}
	if 'vobj(cif,-100,90,"").order().isNull() do {
		if vx("INTERBANK").exists(),cif.interbank.isNull() do vreqerr("INTERBANK") quit
		if vx("SWIFTSAK").exists(),cif.swiftsak.isNull() do vreqerr("SWIFTSAK") quit
	}
	if 'vobj(cif,-100,91,"").order().isNull() do {
		if vx("PIN1CNTR").exists(),cif.pin1cntr.isNull() do vreqerr("PIN1CNTR") quit
		if vx("PIN1DEL").exists(),cif.pin1del.isNull() do vreqerr("PIN1DEL") quit
	}
	if 'vobj(cif,-100,92,"").order().isNull() do {
		if vx("PIN2CNTR").exists(),cif.pin2cntr.isNull() do vreqerr("PIN2CNTR") quit
		if vx("PIN2DEL").exists(),cif.pin2del.isNull() do vreqerr("PIN2DEL") quit
	}
	if 'vobj(cif,-100,420,"").order().isNull() do {
		if vx("SELFEMP").exists(),cif.selfemp.isNull() do vreqerr("SELFEMP") quit
	}
	if 'vobj(cif,-100,422,"").order().isNull() do {
		if vx("FINSTREQ").exists(),cif.finstreq.isNull() do vreqerr("FINSTREQ") quit
	}
	if 'vobj(cif,-100,424,"").order().isNull() do {
		if vx("IDSHARE").exists(),cif.idshare.isNull() do vreqerr("IDSHARE") quit
		if vx("IDTHEFT").exists(),cif.idtheft.isNull() do vreqerr("IDTHEFT") quit
		if vx("CIFDATSB").exists(),cif.cifdatsb.isNull() do vreqerr("CIFDATSB") quit
	}
	if 'vobj(cif,-100,438,"").order().isNull() do {
		if vx("MT900").exists(),cif.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),cif.mt910.isNull() do vreqerr("MT910") quit
		if vx("MT320").exists(),cif.mt320.isNull() do vreqerr("MT320") quit
		if vx("MT940").exists(),cif.mt940.isNull() do vreqerr("MT940") quit
		if vx("MT942").exists(),cif.mt942.isNull() do vreqerr("MT942") quit
		if vx("MT950").exists(),cif.mt950.isNull() do vreqerr("MT950") quit
	}
		if vx("AFINST").exists(),cif.afinst.isNull() do vreqerr("AFINST") quit
		if vx("AGENT").exists(),cif.agent.isNull() do vreqerr("AGENT") quit
		if vx("BOO").exists(),cif.boo.isNull() do vreqerr("BOO") quit
		if vx("BWF").exists(),cif.bwf.isNull() do vreqerr("BWF") quit
		if vx("CC").exists(),cif.cc.isNull() do vreqerr("CC") quit
		if vx("CCODE").exists(),cif.ccode.isNull() do vreqerr("CCODE") quit
		if vx("CIFDATSB").exists(),cif.cifdatsb.isNull() do vreqerr("CIFDATSB") quit
		if vx("CLS").exists(),cif.cls.isNull() do vreqerr("CLS") quit
		if vx("CMSFLG").exists(),cif.cmsflg.isNull() do vreqerr("CMSFLG") quit
		if vx("CRCD").exists(),cif.crcd.isNull() do vreqerr("CRCD") quit
		if vx("DAO").exists(),cif.dao.isNull() do vreqerr("DAO") quit
		if vx("DDBIP").exists(),cif.ddbip.isNull() do vreqerr("DDBIP") quit
		if vx("EDBI").exists(),cif.edbi.isNull() do vreqerr("EDBI") quit
		if vx("ELLPLS").exists(),cif.ellpls.isNull() do vreqerr("ELLPLS") quit
		if vx("EXPFLG").exists(),cif.expflg.isNull() do vreqerr("EXPFLG") quit
		if vx("FINSTREQ").exists(),cif.finstreq.isNull() do vreqerr("FINSTREQ") quit
		if vx("GOVT").exists(),cif.govt.isNull() do vreqerr("GOVT") quit
		if vx("GRP").exists(),cif.grp.isNull() do vreqerr("GRP") quit
		if vx("HLDCOMIND").exists(),cif.hldcomind.isNull() do vreqerr("HLDCOMIND") quit
		if vx("IDSHARE").exists(),cif.idshare.isNull() do vreqerr("IDSHARE") quit
		if vx("IDTHEFT").exists(),cif.idtheft.isNull() do vreqerr("IDTHEFT") quit
		if vx("INTACTDET").exists(),cif.intactdet.isNull() do vreqerr("INTACTDET") quit
		if vx("INTERBANK").exists(),cif.interbank.isNull() do vreqerr("INTERBANK") quit
		if vx("LNM").exists(),cif.lnm.isNull() do vreqerr("LNM") quit
		if vx("MAD1").exists(),cif.mad1.isNull() do vreqerr("MAD1") quit
		if vx("MARDM").exists(),cif.mardm.isNull() do vreqerr("MARDM") quit
		if vx("MAREM").exists(),cif.marem.isNull() do vreqerr("MAREM") quit
		if vx("MARTEL").exists(),cif.martel.isNull() do vreqerr("MARTEL") quit
		if vx("MCITY").exists(),cif.mcity.isNull() do vreqerr("MCITY") quit
		if vx("MCNTRY").exists(),cif.mcntry.isNull() do vreqerr("MCNTRY") quit
		if vx("MT320").exists(),cif.mt320.isNull() do vreqerr("MT320") quit
		if vx("MT900").exists(),cif.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),cif.mt910.isNull() do vreqerr("MT910") quit
		if vx("MT940").exists(),cif.mt940.isNull() do vreqerr("MT940") quit
		if vx("MT942").exists(),cif.mt942.isNull() do vreqerr("MT942") quit
		if vx("MT950").exists(),cif.mt950.isNull() do vreqerr("MT950") quit
		if vx("NAM").exists(),cif.nam.isNull() do vreqerr("NAM") quit
		if vx("NOPURGE").exists(),cif.nopurge.isNull() do vreqerr("NOPURGE") quit
		if vx("NR").exists(),cif.nr.isNull() do vreqerr("NR") quit
		if vx("PAD1").exists(),cif.pad1.isNull() do vreqerr("PAD1") quit
		if vx("PCITY").exists(),cif.pcity.isNull() do vreqerr("PCITY") quit
		if vx("PCNTRY").exists(),cif.pcntry.isNull() do vreqerr("PCNTRY") quit
		if vx("PERS").exists(),cif.pers.isNull() do vreqerr("PERS") quit
		if vx("PIN1CNTR").exists(),cif.pin1cntr.isNull() do vreqerr("PIN1CNTR") quit
		if vx("PIN1DEL").exists(),cif.pin1del.isNull() do vreqerr("PIN1DEL") quit
		if vx("PIN2CNTR").exists(),cif.pin2cntr.isNull() do vreqerr("PIN2CNTR") quit
		if vx("PIN2DEL").exists(),cif.pin2del.isNull() do vreqerr("PIN2DEL") quit
		if vx("POLEXPPER").exists(),cif.polexpper.isNull() do vreqerr("POLEXPPER") quit
		if vx("PUBHLDIND").exists(),cif.pubhldind.isNull() do vreqerr("PUBHLDIND") quit
		if vx("RFLGC").exists(),cif.rflgc.isNull() do vreqerr("RFLGC") quit
		if vx("SELFEMP").exists(),cif.selfemp.isNull() do vreqerr("SELFEMP") quit
		if vx("SWIFTSAK").exists(),cif.swiftsak.isNull() do vreqerr("SWIFTSAK") quit
		if vx("TAXEXM").exists(),cif.taxexm.isNull() do vreqerr("TAXEXM") quit
		if vx("TYPE").exists(),cif.type.isNull() do vreqerr("TYPE") quit
		if vx("VOTEXM").exists(),cif.votexm.isNull() do vreqerr("VOTEXM") quit
		if vx("W8REQ").exists(),cif.w8req.isNull() do vreqerr("W8REQ") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIF","MSG",1767,"CIF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCIF cif
	if 'cif.type.isNull() set vfkey("^UTBLDFTC("_""""_cif.type_""""_","_50_")")="CIF(TYPE) -> PRODDFTC"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCIF cif
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("PRODDFTC",":cif.type") set vERRMSG = $$^MSG(8563,"CIF(TYPE) -> PRODDFTC") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit



vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCIF cif

	if (%O = 2) do vload

	if vobj(cif,1).exists() do {

		if cif.nam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NAM", vRM) quit
		if cif.xname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("XNAME", vRM) quit
	}

	if vobj(cif,2).exists() do {

		if cif.taxid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXID", vRM) quit
	}

	if vobj(cif,3).exists() do {

		if cif.fname.length()>17 set vRM = $$^MSG(1076,17) do vdderr("FNAME", vRM) quit
		if cif.lnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNM", vRM) quit
		if cif.mname.length()>17 set vRM = $$^MSG(1076,17) do vdderr("MNAME", vRM) quit
		if cif.pref.length()>5 set vRM = $$^MSG(1076,5) do vdderr("PREF", vRM) quit
		if cif.suffix.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SUFFIX", vRM) quit
	}

	if vobj(cif,5).exists() do {

		if cif.mad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD1", vRM) quit
		if cif.mad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD2", vRM) quit
		if cif.mad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD3", vRM) quit
		if cif.mad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MAD4", vRM) quit
		if cif.mcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MCITY", vRM) quit
		set X = cif.mcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("MCNTRY", vRM) quit
		if cif.mloc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MLOC", vRM) quit
		if cif.mstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MSTATE", vRM) quit
		if cif.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	}

	if vobj(cif,6).exists() do {

		if cif.pad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAD1", vRM) quit
		if cif.pad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAD2", vRM) quit
		if cif.pad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAD3", vRM) quit
		if cif.pad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PAD4", vRM) quit
		if cif.pcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PCITY", vRM) quit
		set X = cif.pcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("PCNTRY", vRM) quit
		if cif.ploc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PLOC", vRM) quit
		if cif.pstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("PSTATE", vRM) quit
		if cif.pzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIP", vRM) quit
	}

	if vobj(cif,10).exists() do {

		if '("01"[cif.AGENT) set vRM=$$^MSG(742,"L") do vdderr("AGENT", vRM) quit
		if cif.brreg.length()>6 set vRM = $$^MSG(1076,6) do vdderr("BRREG", vRM) quit
		set X = cif.cifoff if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("CIFOFF", vRM) quit
		set X = cif.dep if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DEP", vRM) quit
		set X = cif.dob if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOB", vRM) quit
		set X = cif.dod if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOD", vRM) quit
		set X = cif.dodsabl if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DODSABL", vRM) quit
		set X = cif.educ if 'X.isNull(),'Db.isDefined("UTBLEDUC","X") set vRM = $$^MSG(1485,X) do vdderr("EDUC", vRM) quit
		set X = cif.emplno if 'X.isNull(),'Db.isDefined("UTBLEMPLOYER","X") set vRM = $$^MSG(1485,X) do vdderr("EMPLNO", vRM) quit
		set X = cif.extcif if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EXTCIF", vRM) quit
		set X = cif.inc if 'X.isNull(),'Db.isDefined("UTBLIC","X") set vRM = $$^MSG(1485,X) do vdderr("INC", vRM) quit
		set X = cif.locale if 'X.isNull(),'Db.isDefined("UTBLLOCALE","X") set vRM = $$^MSG(1485,X) do vdderr("LOCALE", vRM) quit
		set X = cif.mar if 'X.isNull(),'Db.isDefined("UTBLMS","X") set vRM = $$^MSG(1485,X) do vdderr("MAR", vRM) quit
		set X = cif.occ if 'X.isNull(),'Db.isDefined("UTBLOC","X") set vRM = $$^MSG(1485,X) do vdderr("OCC", vRM) quit
		set X = cif.own if 'X.isNull(),'Db.isDefined("UTBLOWN","X") set vRM = $$^MSG(1485,X) do vdderr("OWN", vRM) quit
		set X = cif.sex if 'X.isNull(),'Db.isDefined("UTBLSEX","X") set vRM = $$^MSG(1485,X) do vdderr("SEX", vRM) quit
		set X = cif.shhld if 'X.isNull(),'Db.isDefined("UTBLSHHLD","X") set vRM = $$^MSG(1485,X) do vdderr("SHHLD", vRM) quit
		if cif.spouse.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SPOUSE", vRM) quit
	}

	if vobj(cif,11).exists() do {

		set X = cif.as if 'X.isNull() set vRM = $$VAL^DBSVER("$",14,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.AS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if cif.con.length()>30 set vRM = $$^MSG(1076,30) do vdderr("CON", vRM) quit
		set X = cif.cre if 'X.isNull() set vRM = $$VAL^DBSVER("$",14,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.CRE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if cif.fye.length()>4 set vRM = $$^MSG(1076,4) do vdderr("FYE", vRM) quit
		set X = cif.ne if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("NE", vRM) quit
		set X = cif.nw if 'X.isNull() set vRM = $$VAL^DBSVER("$",14,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.NW"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = cif.pp1 if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PP1", vRM) quit
		set X = cif.sic if 'X.isNull(),'Db.isDefined("UTBLSIC","X") set vRM = $$^MSG(1485,X) do vdderr("SIC", vRM) quit
		set X = cif.sicdsc if 'X.isNull(),'Db.isDefined("UTBLSIC","X") set vRM = $$^MSG(1485,X) do vdderr("SICDSC", vRM) quit
		set X = cif.ta if 'X.isNull() set vRM = $$VAL^DBSVER("$",14,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.TA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(cif,12).exists() do {

		if cif.aph.length()>12 set vRM = $$^MSG(1076,12) do vdderr("APH", vRM) quit
		if cif.bph.length()>12 set vRM = $$^MSG(1076,12) do vdderr("BPH", vRM) quit
		set X = cif.bphext if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("BPHEXT", vRM) quit
		if cif.email.length()>55 set vRM = $$^MSG(1076,55) do vdderr("EMAIL", vRM) quit
		if cif.hph.length()>12 set vRM = $$^MSG(1076,12) do vdderr("HPH", vRM) quit
		set X = cif.pin if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("PIN", vRM) quit
		if cif.telex.length()>30 set vRM = $$^MSG(1076,30) do vdderr("TELEX", vRM) quit
	}

	if vobj(cif,13).exists() do {

		set X = cif.boo if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BOO", vRM) quit
		if '("01"[cif.BWF) set vRM=$$^MSG(742,"L") do vdderr("BWF", vRM) quit
		set X = cif.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
		set X = cif.ccode if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
		if '("01"[cif.EXPFLG) set vRM=$$^MSG(742,"L") do vdderr("EXPFLG", vRM) quit
		set X = cif.intwcalc if 'X.isNull(),'Db.isDefined("UTBLWCALC","X") set vRM = $$^MSG(1485,X) do vdderr("INTWCALC", vRM) quit
		set X = cif.intwr if 'X.isNull(),'Db.isDefined("UTBLINTWR","X") set vRM = $$^MSG(1485,X) do vdderr("INTWR", vRM) quit
		set X = cif.lghd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LGHD", vRM) quit
		set X = cif.lnsa if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("LNSA", vRM) quit
		set X = cif.mf if 'X.isNull(),'Db.isDefined("UTBLMF","X") set vRM = $$^MSG(1485,X) do vdderr("MF", vRM) quit
		if '("01"[cif.NR) set vRM=$$^MSG(742,"L") do vdderr("NR", vRM) quit
		set X = cif.priv if 'X.isNull(),'Db.isDefined("STBLCIFPRIV","X") set vRM = $$^MSG(1485,X) do vdderr("PRIV", vRM) quit
		set X = cif.revnotdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REVNOTDT", vRM) quit
		if '("01"[cif.RFLGC) set vRM=$$^MSG(742,"L") do vdderr("RFLGC", vRM) quit
		set X = cif.sol if 'X.isNull(),'Db.isDefined("STBLCIFSOL","X") set vRM = $$^MSG(1485,X) do vdderr("SOL", vRM) quit
		if '("01"[cif.TAXEXM) set vRM=$$^MSG(742,"L") do vdderr("TAXEXM", vRM) quit
		set X = cif.w8date if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("W8DATE", vRM) quit
		if '("01"[cif.W8REQ) set vRM=$$^MSG(742,"L") do vdderr("W8REQ", vRM) quit
		set X = cif.w9stat if 'X.isNull(),'Db.isDefined("UTBLW9ST","X") set vRM = $$^MSG(1485,X) do vdderr("W9STAT", vRM) quit
	}

	if vobj(cif,14).exists() do {

		set X = cif.dao if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DAO", vRM) quit
		set X = cif.fmld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FMLD", vRM) quit
		set X = cif.lfu if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LFU", vRM) quit
	}

	if vobj(cif,15).exists() do {

		set X = cif.atm if 'X.isNull(),'Db.isDefined("UTBLATM","X") set vRM = $$^MSG(1485,X) do vdderr("ATM", vRM) quit
		if cif.cen.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CEN", vRM) quit
		if cif.convcif.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CONVCIF", vRM) quit
		set X = cif.empcd if 'X.isNull(),'Db.isDefined("UTBLEMPCD","X") set vRM = $$^MSG(1485,X) do vdderr("EMPCD", vRM) quit
		set X = cif.intype if 'X.isNull(),'Db.isDefined("UTBLINTYPE","X") set vRM = $$^MSG(1485,X) do vdderr("INTYPE", vRM) quit
		set X = cif.lang if 'X.isNull(),'Db.isDefined("UTBLLAN","X") set vRM = $$^MSG(1485,X) do vdderr("LANG", vRM) quit
		if cif.legal.length()>2 set vRM = $$^MSG(1076,2) do vdderr("LEGAL", vRM) quit
		set X = cif.nation if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("NATION", vRM) quit
		if '("01"[cif.NOPURGE) set vRM=$$^MSG(742,"L") do vdderr("NOPURGE", vRM) quit
		if cif.pasnum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PASNUM", vRM) quit
		if cif.pid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PID", vRM) quit
		set X = cif.rescd if 'X.isNull(),'Db.isDefined("UTBLRESCD","X") set vRM = $$^MSG(1485,X) do vdderr("RESCD", vRM) quit
		if cif.rescntry.length()>2 set vRM = $$^MSG(1076,2) do vdderr("RESCNTRY", vRM) quit
		set X = cif.sbli if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.SBLI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = cif.sdb if 'X.isNull(),'Db.isDefined("UTBLSDB","X") set vRM = $$^MSG(1485,X) do vdderr("SDB", vRM) quit
	}

	if vobj(cif,16).exists() do {

		set X = cif.aud1 if 'X.isNull(),'Db.isDefined("UTBLAUDIT","X") set vRM = $$^MSG(1485,X) do vdderr("AUD1", vRM) quit
		set X = cif.aud1cf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CIF]AUD1CF",0) if 'vRM.get().isNull() do vdderr("AUD1CF", vRM) quit
		set X = cif.aud1ld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUD1LD", vRM) quit
		set X = cif.aud1nd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUD1ND", vRM) quit
		set X = cif.aud2 if 'X.isNull(),'Db.isDefined("UTBLAUDIT","X") set vRM = $$^MSG(1485,X) do vdderr("AUD2", vRM) quit
		set X = cif.aud2cf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CIF]AUD2CF",0) if 'vRM.get().isNull() do vdderr("AUD2CF", vRM) quit
		set X = cif.aud2ld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUD2LD", vRM) quit
		set X = cif.aud2nd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUD2ND", vRM) quit
	}

	if vobj(cif,17).exists() do {

		set X = cif.dlv if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLV", vRM) quit
		set X = cif.qaod if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("QAOD", vRM) quit
		set X = cif.shcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SHCID", vRM) quit
		if '("01"[cif.VOTEXM) set vRM=$$^MSG(742,"L") do vdderr("VOTEXM", vRM) quit
	}

	if vobj(cif,18).exists() do {

		if '("01"[cif.AFINST) set vRM=$$^MSG(742,"L") do vdderr("AFINST", vRM) quit
		set X = cif.citzshp if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CITZSHP", vRM) quit
		set X = cif.dcl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.DCL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[cif.DDBIP) set vRM=$$^MSG(742,"L") do vdderr("DDBIP", vRM) quit
		set X = cif.dlexpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLEXPDT", vRM) quit
		set X = cif.dlisdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DLISDT", vRM) quit
		if cif.dlnum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DLNUM", vRM) quit
		if cif.dlstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("DLSTATE", vRM) quit
		if '("01"[cif.EDBI) set vRM=$$^MSG(742,"L") do vdderr("EDBI", vRM) quit
		set X = cif.efdtxbr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("EFDTXBR", vRM) quit
		if cif.empcity.length()>20 set vRM = $$^MSG(1076,20) do vdderr("EMPCITY", vRM) quit
		if cif.empstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("EMPSTATE", vRM) quit
		set X = cif.lcl if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.LCL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = cif.mtamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.MTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if cif.resd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("RESD", vRM) quit
	}

	if vobj(cif,19).exists() do {

		if '("01"[cif.ELLPLS) set vRM=$$^MSG(742,"L") do vdderr("ELLPLS", vRM) quit
		if '("01"[cif.MARDM) set vRM=$$^MSG(742,"L") do vdderr("MARDM", vRM) quit
		if '("01"[cif.MAREM) set vRM=$$^MSG(742,"L") do vdderr("MAREM", vRM) quit
		if '("01"[cif.MARTEL) set vRM=$$^MSG(742,"L") do vdderr("MARTEL", vRM) quit
		set X = cif.usrestat if 'X.isNull(),'Db.isDefined("STBLUSRESTAT","X") set vRM = $$^MSG(1485,X) do vdderr("USRESTAT", vRM) quit
	}

	if vobj(cif,20).exists() do {

		if cif.atn.length()>50 set vRM = $$^MSG(1076,50) do vdderr("ATN", vRM) quit
	}

	if vobj(cif,50).exists() do {

		set X = cif.apps if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("APPS", vRM) quit
		set X = cif.cls if 'X.isNull() set vRM = $$VAL^DBSVER("T",1,1,,,"*","*",0) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.CLS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = cif.co if 'X.isNull(),'Db.isDefined("UTBLCO","X") set vRM = $$^MSG(1485,X) do vdderr("CO", vRM) quit
		set X = cif.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
		set X = cif.grp if 'X.isNull(),'Db.isDefined("STBLGRP","CLS=""*"",GRP=:X") set vRM = $$^MSG(1485,X) do vdderr("GRP", vRM) quit
		set X = cif.pers if 'X.isNull(),'Db.isDefined("STBLPERS","X") set vRM = $$^MSG(1485,X) do vdderr("PERS", vRM) quit
		set X = cif.secgrp if 'X.isNull(),'Db.isDefined("UTBLSECGRP","X") set vRM = $$^MSG(1485,X) do vdderr("SECGRP", vRM) quit
		set X = cif.semfin if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEMFIN", vRM) quit
		set X = cif.type if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TYPE", vRM) quit
	}

	if vobj(cif,51).exists() do {

		set X = cif.darcovr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DARCOVR", vRM) quit
		set X = cif.depclovr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DEPCLOVR", vRM) quit
	}

	if vobj(cif,55).exists() do {

		set X = cif.how if 'X.isNull(),'Db.isDefined("UTBLHOW","X") set vRM = $$^MSG(1485,X) do vdderr("HOW", vRM) quit
		if cif.prad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRAD1", vRM) quit
		if cif.prad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRAD2", vRM) quit
		if cif.prad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRAD3", vRM) quit
		if cif.prad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRAD4", vRM) quit
		if cif.prcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRCITY", vRM) quit
		set X = cif.prcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("PRCNTRY", vRM) quit
		if cif.prstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("PRSTATE", vRM) quit
		if cif.przip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PRZIP", vRM) quit
	}

	if vobj(cif,66).exists() do {

		set X = cif.vosfreq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CIF]VOSFREQ",0) if 'vRM.get().isNull() do vdderr("VOSFREQ", vRM) quit
	}

	if vobj(cif,67).exists() do {

		if '("01"[cif.CMSFLG) set vRM=$$^MSG(742,"L") do vdderr("CMSFLG", vRM) quit
	}

	if vobj(cif,75).exists() do {

		set X = cif.cusamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.CUSAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = cif.cusdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CUSDATE", vRM) quit
		if '("01"[cif.GOVT) set vRM=$$^MSG(742,"L") do vdderr("GOVT", vRM) quit
		if cif.plan.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PLAN", vRM) quit
		set X = cif.pmaxbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.PMAXBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(cif,85).exists() do {

		if cif.altnam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ALTNAM", vRM) quit
		if '("01"[cif.HLDCOMIND) set vRM=$$^MSG(742,"L") do vdderr("HLDCOMIND", vRM) quit
		set X = cif.income if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.INCOME"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[cif.INTACTDET) set vRM=$$^MSG(742,"L") do vdderr("INTACTDET", vRM) quit
		set X = cif.mts if 'X.isNull(),'Db.isDefined("UTBLMTSO","X") set vRM = $$^MSG(1485,X) do vdderr("MTS", vRM) quit
		if '("01"[cif.POLEXPPER) set vRM=$$^MSG(742,"L") do vdderr("POLEXPPER", vRM) quit
		if '("01"[cif.PUBHLDIND) set vRM=$$^MSG(742,"L") do vdderr("PUBHLDIND", vRM) quit
		if cif.verdiscr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VERDISCR", vRM) quit
		set X = cif.verfdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VERFDATE", vRM) quit
		if cif.vermthd.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VERMTHD", vRM) quit
		if cif.verresol.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VERRESOL", vRM) quit
	}

	if vobj(cif,90).exists() do {

		if cif.credline.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CREDLINE", vRM) quit
		set X = cif.custgrp if 'X.isNull(),'Db.isDefined("UTBLCUSTGRP","X") set vRM = $$^MSG(1485,X) do vdderr("CUSTGRP", vRM) quit
		if cif.detnum.length()>1 set vRM = $$^MSG(1076,1) do vdderr("DETNUM", vRM) quit
		if cif.faxnum.length()>30 set vRM = $$^MSG(1076,30) do vdderr("FAXNUM", vRM) quit
		if '("01"[cif.INTERBANK) set vRM=$$^MSG(742,"L") do vdderr("INTERBANK", vRM) quit
		set X = cif.isdadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ISDADT", vRM) quit
		set X = cif.locn if 'X.isNull(),'Db.isDefined("UTBLLOCN","X") set vRM = $$^MSG(1485,X) do vdderr("LOCN", vRM) quit
		set X = cif.statusdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STATUSDT", vRM) quit
		set X = cif.swiftadd if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("SWIFTADD", vRM) quit
		set X = cif.swiftcon if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("SWIFTCON", vRM) quit
		if '("01"[cif.SWIFTSAK) set vRM=$$^MSG(742,"L") do vdderr("SWIFTSAK", vRM) quit
	}

	if vobj(cif,91).exists() do {

		if cif.encpin1.length()>200 set vRM = $$^MSG(1076,200) do vdderr("ENCPIN1", vRM) quit
		if '("01"[cif.PIN1CNTR) set vRM=$$^MSG(742,"L") do vdderr("PIN1CNTR", vRM) quit
		if '("01"[cif.PIN1DEL) set vRM=$$^MSG(742,"L") do vdderr("PIN1DEL", vRM) quit
		set X = cif.pin1gen if 'X.isNull(),'Db.isDefined("STBLCMSPGEN","X") set vRM = $$^MSG(1485,X) do vdderr("PIN1GEN", vRM) quit
		set X = cif.pin1stat if 'X.isNull(),'Db.isDefined("STBLCMSPSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("PIN1STAT", vRM) quit
		if cif.pin1tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PIN1TLO", vRM) quit
		if cif.pin1uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PIN1UID", vRM) quit
	}

	if vobj(cif,92).exists() do {

		if cif.encpin2.length()>200 set vRM = $$^MSG(1076,200) do vdderr("ENCPIN2", vRM) quit
		if '("01"[cif.PIN2CNTR) set vRM=$$^MSG(742,"L") do vdderr("PIN2CNTR", vRM) quit
		if '("01"[cif.PIN2DEL) set vRM=$$^MSG(742,"L") do vdderr("PIN2DEL", vRM) quit
		set X = cif.pin2gen if 'X.isNull(),'Db.isDefined("STBLCMSPGEN","X") set vRM = $$^MSG(1485,X) do vdderr("PIN2GEN", vRM) quit
		set X = cif.pin2stat if 'X.isNull(),'Db.isDefined("STBLCMSPSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("PIN2STAT", vRM) quit
		if cif.pin2tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PIN2TLO", vRM) quit
		if cif.pin2uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PIN2UID", vRM) quit
	}

	if vobj(cif,93).exists() do {

		set X = cif.incpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("INCPDT", vRM) quit
		if cif.issr.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ISSR", vRM) quit
		set X = cif.oed if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("OED", vRM) quit
		if cif.oin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("OIN", vRM) quit
		set X = cif.oisdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("OISDT", vRM) quit
		set X = cif.oit if 'X.isNull(),'Db.isDefined("UTBLID","X") set vRM = $$^MSG(1485,X) do vdderr("OIT", vRM) quit
		set X = cif.pci if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("PCI", vRM) quit
		set X = cif.ped if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PED", vRM) quit
		set X = cif.pisdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PISDT", vRM) quit
	}

	if vobj(cif,94).exists() do {

		if cif.crdnam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CRDNAM", vRM) quit
		set X = cif.relcode if 'X.isNull(),'Db.isDefined("UTBLRELSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("RELCODE", vRM) quit
		set X = cif.relcodovr if 'X.isNull(),'Db.isDefined("UTBLRELSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("RELCODOVR", vRM) quit
		set X = cif.relmat if 'X.isNull(),'Db.isDefined("UTBLRELMAT","X") set vRM = $$^MSG(1485,X) do vdderr("RELMAT", vRM) quit
	}

	if vobj(cif,410).exists() do {

		set X = cif.nrcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("NRCNTRY", vRM) quit
	}

	if vobj(cif,420).exists() do {

		set X = cif.creapdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CREAPDT", vRM) quit
		set X = cif.crerefre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CIF]CREREFRE",0) if 'vRM.get().isNull() do vdderr("CREREFRE", vRM) quit
		if cif.crertsc.length()>6 set vRM = $$^MSG(1076,6) do vdderr("CRERTSC", vRM) quit
		set X = cif.crrateld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CRRATELD", vRM) quit
		set X = cif.crratend if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CRRATEND", vRM) quit
		if cif.empad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPAD1", vRM) quit
		if cif.empad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPAD2", vRM) quit
		if cif.empad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPAD3", vRM) quit
		set X = cif.empcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("EMPCNTRY", vRM) quit
		if cif.empcnty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPCNTY", vRM) quit
		if cif.empname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("EMPNAME", vRM) quit
		if cif.emptitle.length()>20 set vRM = $$^MSG(1076,20) do vdderr("EMPTITLE", vRM) quit
		if cif.empzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("EMPZIP", vRM) quit
		if cif.mcounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("MCOUNTY", vRM) quit
		set X = cif.mincome if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.MINCOME"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if cif.pcounty.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PCOUNTY", vRM) quit
		set X = cif.schrvld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCHRVLD", vRM) quit
		set X = cif.schrvnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SCHRVND", vRM) quit
		if '("01"[cif.SELFEMP) set vRM=$$^MSG(742,"L") do vdderr("SELFEMP", vRM) quit
	}

	if vobj(cif,422).exists() do {

		set X = cif.altoff if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("ALTOFF", vRM) quit
		set X = cif.custchdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CUSTCHDT", vRM) quit
		set X = cif.doodpror if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DOODPROR", vRM) quit
		set X = cif.finstfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CIF]FINSTFRE",0) if 'vRM.get().isNull() do vdderr("FINSTFRE", vRM) quit
		if '("01"[cif.FINSTREQ) set vRM=$$^MSG(742,"L") do vdderr("FINSTREQ", vRM) quit
		set X = cif.naics if 'X.isNull(),'Db.isDefined("UTBLNAICS","X") set vRM = $$^MSG(1485,X) do vdderr("NAICS", vRM) quit
		set X = cif.stat if 'X.isNull(),'Db.isDefined("UTBLSTATC","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
		set X = cif.stmtrvld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STMTRVLD", vRM) quit
		set X = cif.stmtrvnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STMTRVND", vRM) quit
		set X = cif.totliab if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.TOTLIAB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(cif,424).exists() do {

		if '("01"[cif.CIFDATSB) set vRM=$$^MSG(742,"L") do vdderr("CIFDATSB", vRM) quit
		if '("01"[cif.IDSHARE) set vRM=$$^MSG(742,"L") do vdderr("IDSHARE", vRM) quit
		if '("01"[cif.IDTHEFT) set vRM=$$^MSG(742,"L") do vdderr("IDTHEFT", vRM) quit
	}

	if vobj(cif,430).exists() do {

		if cif.userid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("USERID", vRM) quit
	}

	if vobj(cif,438).exists() do {

		if '("01"[cif.MT320) set vRM=$$^MSG(742,"L") do vdderr("MT320", vRM) quit
		if cif.mt320a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT320A", vRM) quit
		if '("01"[cif.MT900) set vRM=$$^MSG(742,"L") do vdderr("MT900", vRM) quit
		if cif.mt900a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT900A", vRM) quit
		set X = cif.mt900thr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.MT900THR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[cif.MT910) set vRM=$$^MSG(742,"L") do vdderr("MT910", vRM) quit
		if cif.mt910a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT910A", vRM) quit
		set X = cif.mt910thr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CIF.MT910THR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[cif.MT940) set vRM=$$^MSG(742,"L") do vdderr("MT940", vRM) quit
		if cif.mt940a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT940A", vRM) quit
		if '("01"[cif.MT942) set vRM=$$^MSG(742,"L") do vdderr("MT942", vRM) quit
		if cif.mt942a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT942A", vRM) quit
		set X = cif.mt942crth if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("MT942CRTH", vRM) quit
		set X = cif.mt942drth if 'X.isNull(),X'?1.18N,X'?1"-"1.17N set vRM=$$^MSG(742,"N") do vdderr("MT942DRTH", vRM) quit
		set X = cif.mt942g1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("MT942G1", vRM) quit
		set X = cif.mt942g2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("MT942G2", vRM) quit
		if '("01"[cif.MT950) set vRM=$$^MSG(742,"L") do vdderr("MT950", vRM) quit
		if cif.mt950a.length()>11 set vRM = $$^MSG(1076,11) do vdderr("MT950A", vRM) quit
		set X = cif.sw940freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[CIF]SW940FREQ",0) if 'vRM.get().isNull() do vdderr("SW940FREQ", vRM) quit
	}
	set X = cif.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CIF","MSG",979,"CIF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit



public VINDEX(RecordCIF cif) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		type String vf,vi,viMap,vxn
		set viMap=",AUD1ND,~1~|,AUD2ND,~2~|,PCNTRY,~3~|,CREREFRE,~4~|,EMPLNO,~5~|,FINSTFRE,~6~|,GOVT,~7~|,MCNTRY,MSTATE,MZIP,MCITY,MAD1,MAD2,~8~|,XNAME,~9~|,NR,~10~|,PCNTRY,PSTATE,PZIP,PCITY,PAD1,PAD2,~11~|,SIC,~12~|,TAXID,~13~|,TYPE,XNAME,~14~|,EXTCIF,~15~|"
		set vf=0
		set vxn=""
		for  set vxn=vx(vxn).order() quit:vxn=""  do {
			for  set vf=$F(viMap,(","_vxn_","),vf) quit:vf=0  do {
				set vi=viMap.extract(vf,999).piece("~",2)
				set viMap.piece("|",vi)=""
				do @("vi"_vi_"(.cif)")
			}
		}
	}
	do vi1(.cif)
	do vi2(.cif)
	do vi3(.cif)
	do vi4(.cif)
	do vi5(.cif)
	do vi6(.cif)
	do vi7(.cif)
	do vi8(.cif)
	do vi9(.cif)
	do vi10(.cif)
	do vi11(.cif)
	do vi12(.cif)
	do vi13(.cif)
	do vi14(.cif)
	do vi15(.cif)

	quit
	

vi1(RecordCIF cif) // Maintain AUD1ND index entries (Auditor #1 - Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = cif.aud1nd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^DAYEND(v1,"AUDIT",v3)) do vidxerr("AUD1ND")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"AUDIT",v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AUD1ND").exists() set v1=vx("AUD1ND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"AUDIT",v3)
	quit

vi2(RecordCIF cif) // Maintain AUD2ND index entries (Auditor #2 - Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = cif.aud2nd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^DAYEND(v1,"AUDIT",v3)) do vidxerr("AUD2ND")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"AUDIT",v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AUD2ND").exists() set v1=vx("AUD2ND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"AUDIT",v3)
	quit

vi3(RecordCIF cif) // Maintain CIFCNTRY index entries (Sort by country)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.pcntry
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("XCNTRY",v2,v3)) do vidxerr("CIFCNTRY")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("XCNTRY",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PCNTRY").exists() set v2=vx("PCNTRY").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("XCNTRY",v2,v3)
	quit

vi4(RecordCIF cif) // Maintain CREREFRE index entries (Credit Review Frequency)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.crerefre
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("CREREFRE",v2,v3)) do vidxerr("CREREFRE")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("CREREFRE",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CREREFRE").exists() set v2=vx("CREREFRE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("CREREFRE",v2,v3)
	quit

vi5(RecordCIF cif) // Maintain EMPLACN index entries (Employer/Employee Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.emplno
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("EMPLACN",v2,v3)) do vidxerr("EMPLACN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("EMPLACN",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EMPLNO").exists() set v2=vx("EMPLNO").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("EMPLACN",v2,v3)
	quit

vi6(RecordCIF cif) // Maintain FINSTFRE index entries (Financial Statement Frequency)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.finstfre
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("FINSTFRE",v2,v3)) do vidxerr("FINSTFRE")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("FINSTFRE",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("FINSTFRE").exists() set v2=vx("FINSTFRE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("FINSTFRE",v2,v3)
	quit

vi7(RecordCIF cif) // Maintain GOVT index entries (Sovereign Risk)

	type Public String vx()
	type Boolean vdelete = 0
	type Boolean vflag = 0
	type String v2 = +cif.govt
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if v2'="" if $$vq7(.cif) if '$D(^XCIF("GOVT",v2,v3)) do vidxerr("GOVT")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if v2'="" if %ProcessMode<2 if $$vq7(.cif) set vflag=1 set ^XCIF("GOVT",v2,v3)="" 
	quit:%ProcessMode=0

	if vflag,'vx("GOVT").exists() quit
	if %ProcessMode=3 set vdelete=1
	if vx("GOVT").exists() set v2=vx("GOVT").piece("|",1)
	if v2.isNull() quit

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if (%ProcessMode=3)!vflag!'$$vq7(.cif)  kill ^XCIF("GOVT",v2,v3)
	quit

vq7(RecordCIF cif) // Conditional index query for Sovereign Risk

	if '(+cif.govt=1) quit 0
	quit 1


vi8(RecordCIF cif) // Maintain MADDR index entries (Mailing Address Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.mcntry.upperCase()
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.mstate.upperCase()
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = cif.mzip.upperCase()
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = cif.mcity.upperCase()
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = cif.mad1.upperCase()
	if v6.isNull() set v6=(PSL.maxCharValue-1).char()
	type String v7 = cif.mad2.upperCase()
	if v7.isNull() set v7=(PSL.maxCharValue-1).char()
	type String v8 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XADDR("CIFM",v2,v3,v4,v5,v6,v7,v8)) do vidxerr("MADDR")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XADDR("CIFM",v2,v3,v4,v5,v6,v7,v8)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("MCNTRY").exists() set v2=vx("MCNTRY").piece("|",1).upperCase()  set:v2.isNull() v2=(PSL.maxCharValue-1).char() set:v2'=vx("MCNTRY").piece("|",2).upperCase() vdelete=1
	if vx("MSTATE").exists() set v3=vx("MSTATE").piece("|",1).upperCase()  set:v3.isNull() v3=(PSL.maxCharValue-1).char() set:v3'=vx("MSTATE").piece("|",2).upperCase() vdelete=1
	if vx("MZIP").exists() set v4=vx("MZIP").piece("|",1).upperCase()  set:v4.isNull() v4=(PSL.maxCharValue-1).char() set:v4'=vx("MZIP").piece("|",2).upperCase() vdelete=1
	if vx("MCITY").exists() set v5=vx("MCITY").piece("|",1).upperCase()  set:v5.isNull() v5=(PSL.maxCharValue-1).char() set:v5'=vx("MCITY").piece("|",2).upperCase() vdelete=1
	if vx("MAD1").exists() set v6=vx("MAD1").piece("|",1).upperCase()  set:v6.isNull() v6=(PSL.maxCharValue-1).char() set:v6'=vx("MAD1").piece("|",2).upperCase() vdelete=1
	if vx("MAD2").exists() set v7=vx("MAD2").piece("|",1).upperCase()  set:v7.isNull() v7=(PSL.maxCharValue-1).char() set:v7'=vx("MAD2").piece("|",2).upperCase() vdelete=1
	quit:'vdelete                                          // Only case has changed

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XADDR("CIFM",v2,v3,v4,v5,v6,v7,v8)
	quit

vi9(RecordCIF cif) // Maintain NAME index entries (Name)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.xname
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XALPHA("A",v2,v3)) do vidxerr("NAME")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XALPHA("A",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("XNAME").exists() set v2=vx("XNAME").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XALPHA("A",v2,v3)
	quit

vi10(RecordCIF cif) // Maintain NR index entries (NRes Alien Indicator)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = +cif.nr
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("NR",v2,v3)) do vidxerr("NR")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("NR",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NR").exists() set v2=vx("NR").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("NR",v2,v3)
	quit

vi11(RecordCIF cif) // Maintain PADDR index entries (Permanent Address Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.pcntry.upperCase()
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.pstate.upperCase()
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = cif.pzip.upperCase()
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = cif.pcity.upperCase()
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = cif.pad1.upperCase()
	if v6.isNull() set v6=(PSL.maxCharValue-1).char()
	type String v7 = cif.pad2.upperCase()
	if v7.isNull() set v7=(PSL.maxCharValue-1).char()
	type String v8 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XADDR("CIFL",v2,v3,v4,v5,v6,v7,v8)) do vidxerr("PADDR")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XADDR("CIFL",v2,v3,v4,v5,v6,v7,v8)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PCNTRY").exists() set v2=vx("PCNTRY").piece("|",1).upperCase()  set:v2.isNull() v2=(PSL.maxCharValue-1).char() set:v2'=vx("PCNTRY").piece("|",2).upperCase() vdelete=1
	if vx("PSTATE").exists() set v3=vx("PSTATE").piece("|",1).upperCase()  set:v3.isNull() v3=(PSL.maxCharValue-1).char() set:v3'=vx("PSTATE").piece("|",2).upperCase() vdelete=1
	if vx("PZIP").exists() set v4=vx("PZIP").piece("|",1).upperCase()  set:v4.isNull() v4=(PSL.maxCharValue-1).char() set:v4'=vx("PZIP").piece("|",2).upperCase() vdelete=1
	if vx("PCITY").exists() set v5=vx("PCITY").piece("|",1).upperCase()  set:v5.isNull() v5=(PSL.maxCharValue-1).char() set:v5'=vx("PCITY").piece("|",2).upperCase() vdelete=1
	if vx("PAD1").exists() set v6=vx("PAD1").piece("|",1).upperCase()  set:v6.isNull() v6=(PSL.maxCharValue-1).char() set:v6'=vx("PAD1").piece("|",2).upperCase() vdelete=1
	if vx("PAD2").exists() set v7=vx("PAD2").piece("|",1).upperCase()  set:v7.isNull() v7=(PSL.maxCharValue-1).char() set:v7'=vx("PAD2").piece("|",2).upperCase() vdelete=1
	quit:'vdelete                                          // Only case has changed

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XADDR("CIFL",v2,v3,v4,v5,v6,v7,v8)
	quit

vi12(RecordCIF cif) // Maintain SIC index entries (Standard Industry Code)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.sic
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("SIC",v2,v3)) do vidxerr("SIC")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("SIC",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SIC").exists() set v2=vx("SIC").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("SIC",v2,v3)
	quit

vi13(RecordCIF cif) // Maintain TAXID index entries (Tax ID Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.taxid
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XALPHA("T",v2,v3)) do vidxerr("TAXID")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XALPHA("T",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TAXID").exists() set v2=vx("TAXID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XALPHA("T",v2,v3)
	quit

vi14(RecordCIF cif) // Maintain TYPXNAM index entries (Order by Type and Name)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.type
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.xname
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("TYPXNAM",v2,v3,v4)) do vidxerr("TYPXNAM")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("TYPXNAM",v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TYPE").exists() set v2=vx("TYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("XNAME").exists() set v3=vx("XNAME").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("TYPXNAM",v2,v3,v4)
	quit

vi15(RecordCIF cif) // Maintain XEXTCIF index entries (Customer Search by EXTCIF)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = cif.extcif
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = cif.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("EXTCIF",v2,v3)) do vidxerr("XEXTCIF")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("EXTCIF",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXTCIF").exists() set v2=vx("EXTCIF").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("EXTCIF",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CIF")

	while ds.next() do {
		type RecordCIF cif=ds.getRecord("CIF")
		if vlist.contains("VINDEX") do VINDEX(.cif) quit
		if vlist.contains("AUD1ND") do vi1(.cif)
		if vlist.contains("AUD2ND") do vi2(.cif)
		if vlist.contains("CIFCNTRY") do vi3(.cif)
		if vlist.contains("CREREFRE") do vi4(.cif)
		if vlist.contains("EMPLACN") do vi5(.cif)
		if vlist.contains("FINSTFRE") do vi6(.cif)
		if vlist.contains("GOVT") do vi7(.cif)
		if vlist.contains("MADDR") do vi8(.cif)
		if vlist.contains("NAME") do vi9(.cif)
		if vlist.contains("NR") do vi10(.cif)
		if vlist.contains("PADDR") do vi11(.cif)
		if vlist.contains("SIC") do vi12(.cif)
		if vlist.contains("TAXID") do vi13(.cif)
		if vlist.contains("TYPXNAM") do vi14(.cif)
		if vlist.contains("XEXTCIF") do vi15(.cif)
	}

	quit


public VIDXBLD1(RecordCIF cif, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.cif) quit
	if vlist.contains("AUD1ND") do vi1(.cif)
	if vlist.contains("AUD2ND") do vi2(.cif)
	if vlist.contains("CIFCNTRY") do vi3(.cif)
	if vlist.contains("CREREFRE") do vi4(.cif)
	if vlist.contains("EMPLACN") do vi5(.cif)
	if vlist.contains("FINSTFRE") do vi6(.cif)
	if vlist.contains("GOVT") do vi7(.cif)
	if vlist.contains("MADDR") do vi8(.cif)
	if vlist.contains("NAME") do vi9(.cif)
	if vlist.contains("NR") do vi10(.cif)
	if vlist.contains("PADDR") do vi11(.cif)
	if vlist.contains("SIC") do vi12(.cif)
	if vlist.contains("TAXID") do vi13(.cif)
	if vlist.contains("TYPXNAM") do vi14(.cif)
	if vlist.contains("XEXTCIF") do vi15(.cif)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CIF","MSG",1225,"CIF."_di)

	quit


vkchged // Access key changed

	type public RecordCIF cif

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("ACN")
	set voldkey = vux.piece("|",1),vobj(cif,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU^CIFFIL0
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(cif,-3) = vnewkey  // Copy new keys into object
	type RecordCIF vnewrec = cif.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CIF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU^CIFFIL0

	set vobj(cif,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordCIF cif
	type public String vpar

	type String vERRMSG

	do Db.delete("CCEXT","ACN=:cif.acn",vpar)              // Cascade delete

	do Db.delete("CIFACCTS","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("CIFAUTH","ACN=:cif.acn",vpar)            // Cascade delete

	do Db.delete("CIFEXT","ACN=:cif.acn",vpar)             // Cascade delete

	do Db.delete("CIFEXTREG","ACN=:cif.acn",vpar)          // Cascade delete

	do Db.delete("CIFFSD","ACN=:cif.acn",vpar)             // Cascade delete

	do Db.delete("CIFGRPLIM","ACN=:cif.acn",vpar)          // Cascade delete

	do Db.delete("CIFH","ACN=:cif.acn",vpar)               // Cascade delete

	do Db.delete("CIFHH","ACN=:cif.acn",vpar)              // Cascade delete

	do Db.delete("CIFPIC","ACN=:cif.acn",vpar)             // Cascade delete

	do Db.delete("CIFSERV","ACN=:cif.acn",vpar)            // Cascade delete

	do Db.delete("CIFSIG","ACN=:cif.acn",vpar)             // Cascade delete

	do Db.delete("CMBGRP","ACN=:cif.acn",vpar)             // Cascade delete

	if Db.isDefined("CMSRECCRD","ACN=:cif.acn") set vERRMSG = $$^MSG(8563,"CMSRECCRD(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	type ResultSet rs15=Db.select("ACN","CRD","ACN=:cif.acn") // Restriction on delete
	if 'rs15.isEmpty() set vERRMSG = $$^MSG(8563,"CRD(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs16=Db.select("ACN","CRDEXT","ACN=:cif.acn") // Restriction on delete
	if 'rs16.isEmpty() set vERRMSG = $$^MSG(8563,"CRDEXT(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("CUSTTOEVENTS","ACN=:cif.acn",vpar)       // Cascade delete

	do Db.delete("DAYENDCRDFI","ACN=:cif.acn",vpar)        // Cascade delete

	type ResultSet rs19=Db.select("ACN","DAYENDUSRAUT","ACN=:cif.acn") // Restriction on delete
	if 'rs19.isEmpty() set vERRMSG = $$^MSG(8563,"DAYENDUSRAUT(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs20=Db.select("ACN","DAYENDXBADC","ACN=:cif.acn") // Restriction on delete
	if 'rs20.isEmpty() set vERRMSG = $$^MSG(8563,"DAYENDXBADC(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if Db.isDefined("DEP","ACN=:cif.acn") set vERRMSG = $$^MSG(8563,"DEP(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("DTJADDRCHG","ACN=:cif.acn",vpar)         // Cascade delete

	do Db.delete("EMAIL","ACN=:cif.acn",vpar)              // Cascade delete

	type ResultSet rs24=Db.select("ACN","IRA","ACN=:cif.acn") // Restriction on delete
	if 'rs24.isEmpty() set vERRMSG = $$^MSG(8563,"IRA(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs25=Db.select("ACN","IRABEN","ACN=:cif.acn") // Restriction on delete
	if 'rs25.isEmpty() set vERRMSG = $$^MSG(8563,"IRABEN(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs26=Db.select("BENACN","IRABEN","BENACN=:cif.acn") // Restriction on delete
	if 'rs26.isEmpty() set vERRMSG = $$^MSG(8563,"IRABEN(BENACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if Db.isDefined("LN","ACN=:cif.acn") set vERRMSG = $$^MSG(8563,"LN(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("LNAP1","ACN=:cif.acn",vpar)              // Cascade delete

	do Db.delete("LNAP1COL","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("LNAP1CRM","SECACN=:cif.acn",vpar)        // Cascade delete

	do Db.delete("LNAP1HIST","ACN=:cif.acn",vpar)          // Cascade delete

	do Db.delete("LNAP1OWN","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("LNAP1SCH","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("LNLS1","ACN=:cif.acn",vpar)              // Cascade delete

	do Db.delete("LNOLC2","ACN=:cif.acn",vpar)             // Cascade delete

	do Db.delete("MDATACIF","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("MPROD","ACN=:cif.acn",vpar)              // Cascade delete

	type ResultSet rs38=Db.select("ACN","PAT","ACN=:cif.acn") // Restriction on delete
	if 'rs38.isEmpty() set vERRMSG = $$^MSG(8563,"PAT(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs39=Db.select("ACN","PAT1","ACN=:cif.acn") // Restriction on delete
	if 'rs39.isEmpty() set vERRMSG = $$^MSG(8563,"PAT1(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("PURGDCIF","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("Q1042S","ACN=:cif.acn",vpar)             // Cascade delete

	type ResultSet rs42=Db.select("ACN","RELCIF","ACN=:cif.acn") // Restriction on delete
	if 'rs42.isEmpty() set vERRMSG = $$^MSG(8563,"RELCIF(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("SADDRCIF","ACN=:cif.acn",vpar)           // Cascade delete

	do Db.delete("STOP1","ACN=:cif.acn",vpar)              // Cascade delete

	do Db.delete("TIKLCIF","ACN=:cif.acn",vpar)            // Cascade delete

	type ResultSet rs46=Db.select("ACN","USRAUTH","ACN=:cif.acn") // Restriction on delete
	if 'rs46.isEmpty() set vERRMSG = $$^MSG(8563,"USRAUTH(ACN) -> CIF(ACN)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	quit

VIDXPGM()	quit "CIFFILE"	// Location of index program

