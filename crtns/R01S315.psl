R01S315	// SCA321 - Function/Userclass Matrix Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:56 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type String OPT(),PID,vudwhere
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String OPT
	type String VIN2="ALL"
	type String VIN4="ALL"

	set RID="SCA321"
	set RN="Function/Userclass Matrix Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("OPT")="|1|||OPT(||||T|<F>UNC or <U>CLS Order|||||"
	set %TAB("VIN2")="|255||[TMPRPT1]KEY1|[SCATBL]||D EXT^DBSQRY||T|Function Name|||||"
	set %TAB("VIN4")="|255||[TMPRPT2]KEY2|[SCAU0]||D EXT^DBSQRY||T|Authorized Userclasses|||||"

	set %READ="IO/REQ,OPT#0,VIN2#0,VIN4#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String OPT(),PID,vudwhere
	type public String OPT,VIN2,VIN4
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,CONAM,RID,RN,VALUE1,VALUE2,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA321",RN="Function/Userclass Matrix Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA321","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()

	set vCOL="[TMPRPT2]DATA#9#70"

	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[TMPRPT1]KEY1 "_VIN2,SEQ=SEQ+1
		set DQQRY(SEQ)="[TMPRPT2]KEY1=[TMPRPT1]KEY1",SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[TMPRPT2]KEY2 "_VIN4,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("TMPRPT2,TMPRPT1") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",2)="WC2|"_"Function Name"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",4)="WC2|"_"Authorized Userclasses"_"|VIN4|"_VIN4.get()

		if vudwhere.exists() set VWHERE=vudwhere

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Function/Userclass Matrix Report"
		set VBNRINFO("PGM")="R01S315"
		set VBNRINFO("RID")="SCA321"
		set VBNRINFO("TABLES")="TMPRPT2,TMPRPT1"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TMPRPT2]PID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TMPRPT1]KEY1"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TMPRPT2]KEY1"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TMPRPT2]KEY2"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"TMPRPT2.PID,TMPRPT1.KEY1,TMPRPT2.KEY1,TMPRPT2.KEY2"
	set VSELECT=VSELECT_",TMPRPT1.DATA,TMPRPT2.DATA"

	set VWHERE=""
	if vudwhere.exists() set VWHERE=vudwhere
	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"TMPRPT2,TMPRPT1",VWHERE,"TMPRPT2.PID,TMPRPT1.KEY1,TMPRPT2.KEY1,TMPRPT2.KEY2","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6
	set vc1=V.piece($C(9),1)			// TMPRPT2.PID
	set vc2=V.piece($C(9),2)			// TMPRPT1.KEY1
	set vc3=V.piece($C(9),3)			// TMPRPT2.KEY1
	set vc4=V.piece($C(9),4)			// TMPRPT2.KEY2
	set vc5=V.piece($C(9),5)			// TMPRPT1.DATA
	set vc6=V.piece($C(9),6)			// TMPRPT2.DATA
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 /*
   ---- Revision History------------------------------------------------

	05/16/06 - SWARNALP - CR 21190
		Modified to prevent an SQLFAIL error from occurring 
		when running the report with both the function name 
		and userclass specified.

	11/16/05 - KELLYP - CR 18264
		Modified to prevent an RDBSAVEFAIL error from occurring
		when running the report in "U" mode (userclass-order).
 
        03/16/05 - KELLYP - CR 13666
                Rewrote entire user routine in PSL and to be more
		efficient.
   ---------------------------------------------------------------------
 */

 type Public String OPT,VIN2,VIN4

 type String FNARR(),KEY1,KEY1DES,KEY2,KEY2DES,LASTKEY1,UCLSARR(),WHR

 /*
  Setup local arrays for userclass and function descriptions so we're 
  not hitting the DB a bunch of times just for the descriptions.
 */
 type ResultSet rs=Db.select("UCLS,DESC","SCAU0")
 while rs.next() set UCLSARR(rs.getCol(1))=rs.getCol(2)

 type ResultSet rs2=Db.select("FN,DESC","SCATBL")
 while rs2.next() set FNARR(rs2.getCol(1))=rs2.getCol(2)

 set LASTKEY1=""
 set WHR=""

 // Specific function selected
 if VIN2'="ALL" set WHR="FN='"_VIN2_"'"

 // Specific userclass selected
 if VIN4'="ALL" do {
	if WHR.length()> 0 set WHR=WHR_" AND "
	set WHR=WHR_"UCLS='"_VIN4_"'"
	}

 type DbSet ds=Db.selectDbSet("SCATBL3",WHR,"FN ASC")
 while ds.next() do {

	type RecordSCATBL3 scatbl3=ds.getRecord()

	if 'UCLSARR(scatbl3.ucls).exists() quit
	if 'FNARR(scatbl3.fn).exists() quit

	if OPT="F" do {
		set KEY1=scatbl3.fn
		set KEY1DES=FNARR(scatbl3.fn)
		set KEY2=scatbl3.ucls
		set KEY2DES=UCLSARR(scatbl3.ucls)
		}
	else  do {
		set KEY1=scatbl3.ucls
		set KEY1DES=UCLSARR(scatbl3.ucls)
		set KEY2=scatbl3.fn
		set KEY2DES=FNARR(scatbl3.fn)
		}

	// Create TMPRPT1 Control Record
	if KEY1'=LASTKEY1 do {

		set LASTKEY1=KEY1

		type RecordTMPRPT1 tmprpt1=Db.getRecord("TMPRPT1","PID=:%ProcessID,KEY1=:KEY1",1)

		// Function or Userclass TMPRPT1 record already exists
		if tmprpt1.getMode() quit

		set tmprpt1.data=KEY1_" - "_KEY1DES

		do tmprpt1.bypassSave()
		}

	// Create TMPRPT2 Detail Record
	type RecordTMPRPT2 tmprpt2=Class.new("RecordTMPRPT2")

	set tmprpt2.pid=%ProcessID
	set tmprpt2.key1=KEY1
	set tmprpt2.key2=KEY2
	set tmprpt2.data=KEY2_" - "_KEY2DES

	do tmprpt2.bypassSave()
	}

 quit
	quit

VPREBQ	// Pre-processor (before query)

 /*
   ---- Revision History------------------------------------------------
 
        03/16/05 - KELLYP - CR 13666
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public Number PID
 type Public String OPT(),vudwhere

 set OPT="F"
 set OPT("F")=$$^MSG(6473)	// Function Order
 set OPT("U")=$$^MSG(6474)	// Userclass Order

 // Special where clause for excluding other process data
 set PID=%ProcessID
 set vudwhere="TMPRPT1.PID=:PID AND TMPRPT2.PID=:PID"

 // Clean up any data from previous runs
 do Db.delete("TMPRPT1","PID=:%ProcessID")
 do Db.delete("TMPRPT2","PID=:%ProcessID")

 quit
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(2).get() do VDTL2 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL2	// Detail
	type public String %TIM,IOSL,OPT,OPT(),PID,V,VALUE1,VALUE2,VD(),VFMQ,VIN2,VIN4,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate,vudwhere

	quit:VD(2)  set VD(2)=1				// Print flag
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=$E(vc5,1,70)
	do VOM
	quit

VDTL4	// Detail
	type public String %TIM,IOSL,OPT,OPT(),PID,V,VALUE1,VALUE2,VD(),VFMQ,VIN2,VIN4,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate,vudwhere

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="        "_$E(vc6,1,70)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CONAM,OPT,OPT(),PID,RID,RN,VALUE1,VALUE2,VIN2,VIN4,VL,vc1,vc2,vc3,vc4,vc5,vc6,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate,vudwhere
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+5,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",48-VL.length())_"Run Date:"
	set VL=VL_$J("",58-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",70-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",50-VL.length())_"System:"
	set VL=VL_$J("",58-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",70-VL.length())_"Page:"
	set VL=VL_$J("",76-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	do VP1 quit:VFMQ!verror.get()  set V=$E(VALUE1,1,9) set VL=V
	set VL=VL_$J("",12-VL.length())_$E(VALUE2,1,9)
	do VOM
	set VL="================================================================================"
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: VALUE1

 /*
   ---- Revision History------------------------------------------------
 
        03/16/05 - KELLYP - CR 13666
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String OPT,VALUE1,VALUE2

 if OPT="F" do { quit
	set VALUE1="FUNCTION"
	set VALUE2="USERCLASS"
	}

 set VALUE1="USERCLASS"
 set VALUE2="FUNCTION"

 quit
	quit
