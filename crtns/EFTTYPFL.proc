EFTTYPFL(RecordCTBLEFTTYPE ctblefttype, String vpar, Boolean vparNorm) // CTBLEFTTYPE - EFT Payment Types Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (31)             04/04/2005
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ctblefttype.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ctblefttype,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ctblefttype,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String KEY = ctblefttype.key

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("KEY").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CTBLEFTTYPE",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CTBLEFTTYPE","KEY = :ctblefttype.key") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String KEY

	type RecordCTBLEFTTYPE ctblefttype = Db.getRecord("CTBLEFTTYPE","KEY=:KEY")
	if (%ProcessMode = 2) do {
		do ctblefttype.setMode(2)

		do EFTTYPFL(ctblefttype,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCTBLEFTTYPE ctblefttype

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CTBLEFTTYPE","KEY = :ctblefttype.key") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(ctblefttype,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(ctblefttype,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ctblefttype))  S ^CTBL("EFTTYPE",vobj(ctblefttype,-3))=vobj(ctblefttype)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCTBLEFTTYPE ctblefttype

	if vpar'["/NOLOG/" do ^DBSLOGIT(ctblefttype,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CTBL("EFTTYPE",vobj(ctblefttype,-3))              // Delete Record
	quit


vinit // Initialize default values

	type public RecordCTBLEFTTYPE ctblefttype

	// Type local variables for access keys for defaults
	type public String KEY

	if ctblefttype.fincl.isNull() set ctblefttype.fincl = 0 // fincl
	if ctblefttype.hldauto.isNull() set ctblefttype.hldauto = 0 // hldauto
	if ctblefttype.hldpst.isNull() set ctblefttype.hldpst = 0 // hldpst
	if ctblefttype.odp.isNull() set ctblefttype.odp = 0    // odp
	if ctblefttype.prtpmt.isNull() set ctblefttype.prtpmt = 0 // prtpmt
	if ctblefttype.retrej.isNull() set ctblefttype.retrej = 0 // retrej
	if ctblefttype.rev.isNull() set ctblefttype.rev = 0    // rev
	quit


vreqn // Validate required data items

	type public RecordCTBLEFTTYPE ctblefttype

	if ctblefttype.fincl.isNull() do vreqerr("FINCL") quit
	if ctblefttype.glin.isNull() do vreqerr("GLIN") quit
	if ctblefttype.glout.isNull() do vreqerr("GLOUT") quit
	if ctblefttype.hldauto.isNull() do vreqerr("HLDAUTO") quit
	if ctblefttype.hldpst.isNull() do vreqerr("HLDPST") quit
	if ctblefttype.odp.isNull() do vreqerr("ODP") quit
	if ctblefttype.prtpmt.isNull() do vreqerr("PRTPMT") quit
	if ctblefttype.retrej.isNull() do vreqerr("RETREJ") quit
	if ctblefttype.rev.isNull() do vreqerr("REV") quit
	if ctblefttype.stbleft.isNull() do vreqerr("STBLEFT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCTBLEFTTYPE ctblefttype

	if ctblefttype.key.isNull() do vreqerr("KEY") quit

		if vx("FINCL").exists(),ctblefttype.fincl.isNull() do vreqerr("FINCL") quit
		if vx("GLIN").exists(),ctblefttype.glin.isNull() do vreqerr("GLIN") quit
		if vx("GLOUT").exists(),ctblefttype.glout.isNull() do vreqerr("GLOUT") quit
		if vx("HLDAUTO").exists(),ctblefttype.hldauto.isNull() do vreqerr("HLDAUTO") quit
		if vx("HLDPST").exists(),ctblefttype.hldpst.isNull() do vreqerr("HLDPST") quit
		if vx("ODP").exists(),ctblefttype.odp.isNull() do vreqerr("ODP") quit
		if vx("PRTPMT").exists(),ctblefttype.prtpmt.isNull() do vreqerr("PRTPMT") quit
		if vx("RETREJ").exists(),ctblefttype.retrej.isNull() do vreqerr("RETREJ") quit
		if vx("REV").exists(),ctblefttype.rev.isNull() do vreqerr("REV") quit
		if vx("STBLEFT").exists(),ctblefttype.stbleft.isNull() do vreqerr("STBLEFT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTBLEFTTYPE","MSG",1767,"CTBLEFTTYPE."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert/Update for CTBLEFTTYPE

	do vau1

	quit

vau1 // Trigger AFTER_INSERT - After Insert/Update for CTBLEFTTYPE

	type public RecordCTBLEFTTYPE ctblefttype
	/*
	 ---- Revision History ------------------------------------------------

	 05/22/02 - SIGDAE 49389
		Added code to verify column PREAUTH.
	*/

	/*
	 Preauthorization option 2 can only be used with EFT System Type 
	 PO or SPO
	*/
	if ctblefttype.preauth=2,ctblefttype.stbleft'="PO",ctblefttype.stbleft'="SPO" do Runtime.setErrMSG("CTBLEFTTYPE",5155) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCTBLEFTTYPE ctblefttype

	if ctblefttype.key.length()>12 set vRM = $$^MSG(1076,12) do vdderr("KEY", vRM) quit
	set X = ctblefttype.ccdft if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CCDFT", vRM) quit
	set X = ctblefttype.ccode if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
	if ctblefttype.desc.length()>50 set vRM = $$^MSG(1076,50) do vdderr("DESC", vRM) quit
	set X = ctblefttype.etc if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("ETC", vRM) quit
	set X = ctblefttype.feemetdft if 'X.isNull(),'Db.isDefined("EFTFEE","X") set vRM = $$^MSG(1485,X) do vdderr("FEEMETDFT", vRM) quit
	if '("01"[ctblefttype.FINCL) set vRM=$$^MSG(742,"L") do vdderr("FINCL", vRM) quit
	set X = ctblefttype.fintras if 'X.isNull(),'Db.isDefined("STBLEFTFTROP","X") set vRM = $$^MSG(1485,X) do vdderr("FINTRAS", vRM) quit
	set X = ctblefttype.ftod if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FTOD", vRM) quit
	set X = ctblefttype.glin if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLIN", vRM) quit
	set X = ctblefttype.glinp if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLINP", vRM) quit
	set X = ctblefttype.glint if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLINT", vRM) quit
	set X = ctblefttype.glout if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLOUT", vRM) quit
	set X = ctblefttype.gloutp if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLOUTP", vRM) quit
	set X = ctblefttype.gloutt if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("GLOUTT", vRM) quit
	if '("01"[ctblefttype.HLDAUTO) set vRM=$$^MSG(742,"L") do vdderr("HLDAUTO", vRM) quit
	set X = ctblefttype.hldcode if 'X.isNull(),'Db.isDefined("UTBLPHC","X") set vRM = $$^MSG(1485,X) do vdderr("HLDCODE", vRM) quit
	set X = ctblefttype.hldmax if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDMAX", vRM) quit
	if '("01"[ctblefttype.HLDPST) set vRM=$$^MSG(742,"L") do vdderr("HLDPST", vRM) quit
	if '("01"[ctblefttype.ODP) set vRM=$$^MSG(742,"L") do vdderr("ODP", vRM) quit
	set X = ctblefttype.paymetdft if 'X.isNull(),'Db.isDefined("STBLPAYMET","X") set vRM = $$^MSG(1485,X) do vdderr("PAYMETDFT", vRM) quit
	set X = ctblefttype.percent if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,3) if 'vRM.isNull() set vRM = $$^MSG(979,"CTBLEFTTYPE.PERCENT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctblefttype.preauth if 'X.isNull(),'Db.isDefined("STBLEFTPRE","X") set vRM = $$^MSG(1485,X) do vdderr("PREAUTH", vRM) quit
	if '("01"[ctblefttype.PRTPMT) set vRM=$$^MSG(742,"L") do vdderr("PRTPMT", vRM) quit
	if '("01"[ctblefttype.RETREJ) set vRM=$$^MSG(742,"L") do vdderr("RETREJ", vRM) quit
	if '("01"[ctblefttype.REV) set vRM=$$^MSG(742,"L") do vdderr("REV", vRM) quit
	if ctblefttype.scrbr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SCRBR", vRM) quit
	if ctblefttype.scrhq.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SCRHQ", vRM) quit
	set X = ctblefttype.stbleft if 'X.isNull(),'Db.isDefined("STBLEFTTYPE","X") set vRM = $$^MSG(1485,X) do vdderr("STBLEFT", vRM) quit
	set X = ctblefttype.tries if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("TRIES", vRM) quit
	set X = ctblefttype.washgl if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("WASHGL", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTBLEFTTYPE","MSG",979,"CTBLEFTTYPE."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCTBLEFTTYPE ctblefttype

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("KEY")
	set voldkey = vux.piece("|",1),vobj(ctblefttype,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(ctblefttype,-3) = vnewkey // Copy new keys into object
	type RecordCTBLEFTTYPE vnewrec = ctblefttype.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CTBLEFTTYPE",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(ctblefttype,-3) = vux.piece("|",1)            // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
