public	RGLDARC(Date %SystemDate)
	/*
	   ORIG: HILLANBRAND - 07/22/96
	   DESC: Delinquency Asset Reclassification GL Accumulation

	   This routine finds the delinquency asset reclassification amounts
	   by looping through [DAYENDDARCB] and  G/L accounts using the
	   General ledger accounts in the file [UTBLACC], then [UTBLGLSC]
	   table. The amounts are then accumulated to appropriated GL account
	   in TGL source 7. TGL source 8 is the reversal of the previous day's
	   amounts in source 7.

	---- Revision History ------------------------------------------------

	05/15/06 - TITOVE - CR 21132
		   Modified GLACN to use correct variable when instantiating
		   LNFEEP record. Removed old revision history.

	03/29/06 - KinI - CR 20009
		   Added delete for TGL1 record to avoid Oracle “unique 
		   constraint violation” error in case of re-accumulation.
		   
	09/08/05 - TITOVE - CR 16844
		   Minor clean up as part of DBI3 project. Corrected logic
		   in FILE section. Modified DARCB section to accept a date
		   as an argument and also corrected several errors. Added
		   arguments to DTL section.

	*/
	new ACN,CO,CC,CID,CRCD,DTL,GL,GLACT,GLSC,LN,UTBL

	type public Cache %CUVAR
	type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")
	#ACCEPT DATE=12/29/03;PGM=John Carroll
        if '$D(%SystemDate) set %SystemDate=cuvar.tjd

	// Lock TJD source 7
	lock +TGL(%SystemDate,7)

	// Lock TJD source 8
	lock +TGL(%SystemDate,8)

	lock DAYEND(%SystemDate,"DARCB")

	// Delete TGL level 7
	do Db.fastDelete("TGL","TJD=:%SystemDate,SRC=7")
	do Db.fastDelete("TGL1","TDT=:%SystemDate,SRC=7")
	
	// Delete TGL level 8
	do Db.fastDelete("TGL","TJD=:%SystemDate,SRC=8")	
	do Db.fastDelete("TGL1","TDT=:%SystemDate,SRC=8")
	
	set CO=cuvar.co
	
	// Source 7 - Include detail
	set DETAIL=1

	// Find [UTBLACC] gl accounts
	do ACCGL
	
	// Loop through DAYENDDARCB
	do PROC
	
	// File source 7
	do FILE(7)
	
	set XTJD=%SystemDate-1
	set SRC=7

	if 'Db.isDefined("TGL1","TDT=:XTJD,SRC=:SRC") quit 

	// No detail for source 8
	set DETAIL=0

	// Reverse previous days entries.
	do SRC8(XTJD)

	// File reversal
	do FILE(8)

	lock -TGL(%SystemDate,7)
	lock -TGL(%SystemDate,8)
	lock -DAYEND(%SystemDate,"DARCB")

	quit


PROC	// Loop through DAYENDDARCB and get customer number.

	type ResultSet rs=Db.select("ACN,CID","DAYENDDARCB","NPDT=:%SystemDate")

	while rs.next() do {
		
		set ACN=rs.getCol("ACN")
		
		set CID=rs.getCol("CID")
		
		do LNARRY
		
		do DARCB(%SystemDate)
		}

	quit


LNARRY	// Get account fields needed for TGL

	
        type RecordLN ln=Db.getRecord("LN","CID=:CID")

	// Cost Center
	set CC=ln.cc

	// Currency Code
	set CRCD=ln.crcd

	// System Default Currency Code
	if CRCD="" set CRCD=%SystemCurrency

	// General Ledger Set Code
	set GLSC=ln.glsc

	quit


public	DARCB(Date %SystemDate)	// Get amounts from DAYENDDARCB

	// This section is also called by SCA540 report

	type public Number ACN, CID
	type public String GLSC
	
	type Number AC, AMT, CNT, DARCLS, DFEE, DINT, DLCHG, DPRIN, VALUE
	type String DARCBF, FEETYP, VAR

	set DARCBF=""

	type RecordDAYENDDARCB dayenddarcb=Db.getRecord("DAYENDDARCB","NPDT=:%SystemDate,ACN=:ACN,CID=:CID")

	// If an override set to DARCOVR else set to Delinquency Asset Risk Classification
	if dayenddarcb.suspect=1 set DARCLS=dayenddarcb.darcovr
	else  set DARCLS=dayenddarcb.darcls

	if DARCLS.isNull() quit

	set DPRIN=dayenddarcb.dprin
	set DINT=dayenddarcb.dint
	set DLCHG=dayenddarcb.dlchg
	set DFEE=dayenddarcb.dfee
	
	// Billed Fees
        type RecordDAYENDDARCBF darcbf=Db.getRecord("DAYENDDARCBF","NPDT=:%SystemDate,ACN=:ACN,CID=:CID",1)

	if darcbf.getMode() do {

		for CNT=1:2:40 do { quit:DARCBF.isNull()
			set VAR="FEETYP"_CNT
			set VALUE=darcbf.@VAR
			if 'VALUE.isNull() set $P(DARCBF,"|",CNT)=VALUE
			}
		
		if DARCBF.isNull() quit

		for CNT=2:2:40 do {
			set VAR="FEEAMT"_CNT
			set VALUE=darcbf.@VAR
			if 'VALUE.isNull() set $P(DARCBF,"|",CNT)=VALUE
			}
		}

	// Deferred Asset Classes
	for AC=1:1:5 do {

		// Billed Principal
		set VAR="DBLPC"_AC
		set AMT=dayenddarcb.@VAR if 'AMT quit

		// Debit deferred billed
        	do SUM(AMT,$$GLACN("FP","ACC",GLSC,AC),0)     

        	// Credit principal
		do SUM(AMT,$$GLACN("LGL1","*",GLSC,AC),1)
		
		// Billed Interest
		set VAR="DBLIC"_AC
		set AMT=dayenddarcb.@VAR if 'AMT quit

		// Debit deferred interest receivable
		do SUM(AMT,$$GLACN("IR","ACC",GLSC,AC),0)

		// Credit interest receivable
		do SUM(AMT,$$GLACN("LGL2","*",GLSC,AC),1)

		// Debit interest income
		do SUM(AMT,$$GLACN("LGLI","*",GLSC,AC),0)

		// Credit deferred interest income
		do SUM(AMT,$$GLACN("II","ACC",GLSC,AC),1)
		
		// Billed Fees
		set VAR="DBLFC"_AC
		set AMT=dayenddarcb.@VAR if 'AMT quit

		// Debit deferred fees receivable
		do SUM(AMT,$$GLACN("FR","ACC",GLSC,DARCLS),0)

		// Breakdown by feetype does not exist
		if DARCBF.isNull() do {
			// Credit fees receivable
			do SUM(AMT,$$GLACN("LGL5","*",GLSC,DARCLS),1)
			// Debit fee income
			do SUM(AMT,$$GLACN("LGLF","*",GLSC,DARCLS),0)	
			}
		// Credit deferred fee income
		do SUM(AMT,$$GLACN("FI","ACC",GLSC,DARCLS),1)		
		}


	// Deferred Principal
	if DPRIN do {

		// Debit deferred principal
		do SUM(DPRIN,$$GLACN("FP","ACC",GLSC,DARCLS),0)
		// Credit principal
		do SUM(DPRIN,$$GLACN("LGL1","*",GLSC,DARCLS),1)
		}

	// Deferred Interest
	if DINT do {

		// Debit deferred interest receivable
		do SUM(DINT,$$GLACN("IR","ACC",GLSC,DARCLS),0)
		// Credit interest receivable
		do SUM(DINT,$$GLACN("LGL2","*",GLSC,DARCLS),1)

		// Debit interest income
		do SUM(DINT,$$GLACN("LGLI","*",GLSC,DARCLS),0)
		// Credit deferred interest income
		do SUM(DINT,$$GLACN("II","ACC",GLSC,DARCLS),1)
		}

	// Deferred Late Charges
	if DLCHG do {

		// Debit deferred late charge receivable
		do SUM(DLCHG,$$GLACN("LR","ACC",GLSC,DARCLS),0)
		// Credit late charge receivable
		do SUM(DLCHG,$$GLACN("LGL3","*",GLSC,DARCLS),1)

		// Debit late charge income
		do SUM(DLCHG,$$GLACN("LGLL","*",GLSC,DARCLS),0)
		// Credit deferred late charge income
		do SUM(DLCHG,$$GLACN("LI","ACC",GLSC,DARCLS),1)
		}

	// Deferred Fees
	if DFEE do {

		// Debit deferred fees receivable
		do SUM(DFEE,$$GLACN("FR","ACC",GLSC,DARCLS),0)

		// Breakdown by feetype does not exist
		if DARCBF.isNull() do {
			// Credit fees receivable
			do SUM(DFEE,$$GLACN("LGL5","*",GLSC,DARCLS),1)
			// Debit fee income
			do SUM(DFEE,$$GLACN("LGLF","*",GLSC,DARCLS),0)
			}
		// Credit deferred fee income
		do SUM(DFEE,$$GLACN("FI","ACC",GLSC,DARCLS),1)
		}

	// Breakdown by feetype exists
	if 'DARCBF.isNull() for CNT=1:2 set FEETYP=DARCBF.piece("|",CNT) quit:FEETYP.isNull()  do {

		set AMT=DARCBF.piece("|",CNT+1) if 'AMT quit

		// Credit fees receivable
		do SUM(AMT,$$GLACN("LGL5",FEETYP,GLSC,DARCLS),1)
		// Debit fee income
		do SUM(AMT,$$GLACN("LGLF",FEETYP,GLSC,DARCLS),0)
		}
	quit

SUM(Number AMT,			// Reclassification Fee Amount
    Number GLACT,		// G/L Account Number
    Boolean IND)		// Credit/Debit Flag	
    
	// Accumulate to short name array TGLTOT

	type public Boolean DETAIL
	type public Number CC, CID
	type public String CRCD, TGLTOT(,,)	

	set TGLTOT = TGLTOT(CRCD,GLACT,CC).get()
	
	set TGLTOT.piece("|",(IND*2) + 1) = TGLTOT.piece("|",(IND*2) + 1) + 1
	set TGLTOT.piece("|",(IND*2) + 2) = TGLTOT.piece("|",(IND*2) + 2) + AMT
	
	set TGLTOT(CRCD,GLACT,CC) = TGLTOT
	
	if DETAIL do DTL(7,CRCD,GLACT,CC,IND,AMT,CID)
	
	quit


DTL(Number SRC,			// Source
    String CRCD,		// Currency Code
    Number GLACT,		// G/L Account Number
    Number CC,			// Cost Center
    Boolean IND,		// Credit/Debit Flag
    Number AMT,			// Reclassification Fee Amount
    Number CID)			// Account Number

	// Create G/L Transaction Summary Detail entry

	type Number SEQ

	set SEQ = Db.nextVal("TGLDTL","TJD=:%SystemDate,SRC=:SRC,CRCD=:CRCD,EFD=:%SystemDate,ACN=:GLACT,CC=:CC")

        type RecordTGLDTL tgldtl = Class.new("RecordTGLDTL")
        
        set tgldtl.tjd = %SystemDate
        set tgldtl.src = SRC
        set tgldtl.crcd = CRCD
        set tgldtl.efd = %SystemDate
        set tgldtl.acn = GLACT
        set tgldtl.cc = CC
        set tgldtl.seq = SEQ

        set tgldtl.glacn = GLACT
        set tgldtl.ccntr = CC
      	set tgldtl.trn = $S(IND:"CR",1:"DR")
        set tgldtl.tamt = AMT
        set tgldtl.cmt = CID
        
        do tgldtl.bypassSave()

	quit


FILE(Number SRC)	// File to TGL

	set (CRCD,GLACT,CC)=""

	for  set CRCD=$O(TGLTOT(CRCD)) quit:CRCD.isNull()  do {
		for  set GLACT=$O(TGLTOT(CRCD,GLACT)) quit:GLACT.isNull()  do {
			for  set CC=$O(TGLTOT(CRCD,GLACT,CC)) quit:CC.isNull()  do {
				
        			type RecordTGL tgl=Class.new("RecordTGL")
        			
				set tgl.tjd=%SystemDate
				set tgl.src=SRC 
				set tgl.crcd=CRCD
				set tgl.efd=%SystemDate
				set tgl.acn=GLACT
				set tgl.cc=CC	
				set tgl.drcnt=$P(TGLTOT(CRCD,GLACT,CC),"|",1)
				set tgl.dramt=$P(TGLTOT(CRCD,GLACT,CC),"|",2)
				set tgl.crcnt=$P(TGLTOT(CRCD,GLACT,CC),"|",3)
				set tgl.cramt=$P(TGLTOT(CRCD,GLACT,CC),"|",4)
				
				do tgl.bypassSave()
				}
			}
		}

	
        type RecordTGL1 tgl1=Class.new("RecordTGL1")
        
	set tgl1.tdt=%SystemDate
	set tgl1.src=SRC
	set tgl1.prcmp="*"
	
        do tgl1.bypassSave()

	kill TGLTOT

	quit


public	ACCGL	// User Table UTBLACC General Ledger Accounts

	type public String GL(,,)

	type String CLS = "L"
	
	type DbSet ds = Db.selectDbSet("UTBLACC","CLS=:CLS")
	
	while ds.next() do {

		type RecordUTBLACC utblacc = ds.getRecord("UTBLACC")

		// Principal
		set GL("FP","ACC",utblacc.ac) = utblacc.lgldfp

		// Interest Receivable
		set GL("IR","ACC",utblacc.ac) = utblacc.lgldir

		// Late Charge Receivable
		set GL("LR","ACC",utblacc.ac) = utblacc.lgldlr

		// Fee Receivable
		set GL("FR","ACC",utblacc.ac) = utblacc.lgldfr

		// Interest Income
		set GL("II","ACC",utblacc.ac) = utblacc.lgldii

		// Late Charge Income
		set GL("LI","ACC",utblacc.ac) = utblacc.lgldli

		// Fee Income
		set GL("FI","ACC",utblacc.ac) = utblacc.lgldfi
		}
	quit


GLACN(String ELE,		// Item to be reclassified  	/TYP=T
      String SRC,		// Original source table  	/TYP=T
      String GLSC,		// General Ledger Set Code  	/TYP=T
      Number AC)		// Asset Classification  	/TYP=N/REQ:SRC="ACC"
	
	/*
	General Ledger account to be used for item in DAYENDDARCB or 
	offset account.

	Additional notes on arguments:

	         . SRC 	This is the indicator used to select table to obtain 
	         	the general ledger account.
	    		"ACC" - [UTBLACC], then [UTBLGLSCR]
	                "*"   - [UTBLGLSC]
	                FEE   - [LNFEEP], then [UTBLGLSC]

	*/
	type public Number GL(,,,)
	type Number GLACN = ""

	// First check to see if general ledger account has been found for element

	// GL account in [UTBLACC]
	if 'GL(ELE, "ACC", AC).get().isNull() quit GL(ELE, "ACC", AC)

	// GL account in [LNFEEP]
	if 'GL(ELE, "FEE", SRC).get().isNull() quit GL(ELE, "FEE", SRC)

	// GL account in [UTBLGLSC]
	if 'GL(ELE, "*", GLSC, AC).get().isNull() quit GL(ELE, "*", GLSC, AC)

	/*
	Reclassification general ledger account for item is not in
	[UTBLACC].  The general ledger account is in [UTBLGLSCR]. If not
	found in [UTBLGLSCR] the teller suspense account will be used.
	*/
	if (SRC = "ACC") do {
		
		set GLACN = $$^UTLGLSC(GLSC, "LGLD"_ELE, "UTBLGLSCR", AC)
		
		set GL(ELE, "*", GLSC, AC) = GLACN
		}
	
	/*
	Loan general ledger accounts in [UTBLGLSC]. If not found in
	[UTBLGLSC], the teller suspense account will be used.
	*/
	else  if (SRC = "*") do {
		
		set GLACN = $$^UTLGLSC(GLSC, ELE, "UTBLGLSC")
		
		set GL(ELE, "*", GLSC, AC) = GLACN
		}

	/*
	If source is fee, first check to see if general ledger account is in
	fee plan.  If not, then use fee account from general ledger set code.
	*/
	else  if (ELE = "LGLF") ! (ELE = "LGL5") do {

		type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP = :SRC", 1)

		set GLACN = lnfeep.glfi

		if 'GLACN.isNull() set GL(ELE, "FEE", SRC) = GLACN quit

		set GLACN = $$^UTLGLSC(GLSC, ELE, "UTBLGLSC")
		
		set GL(ELE, "*", GLSC, AC) = GLACN
		}

	quit GLACN


SRC8(Date DATE)	// Source 8 Reverse out previous day source 7

	set SRC=7  // previous day's figures

	type DbSet ds=Db.selectDbSet("TGL","TJD=:DATE AND SRC=:SRC AND EFD=:DATE")
        while ds.next() do {
                type RecordTGL tgl=ds.getRecord("TGL")
                set CRCD=tgl.crcd
                set GLACT=tgl.acn
                set CC=tgl.cc
				
		//Negative Debit
		if tgl.dramt do SUM(-tgl.dramt,GLACT,0)
		// Negative Credit
		if tgl.cramt do SUM(-tgl.cramt,GLACT,1)
		}
	quit

vSIG()	quit "60400^61304^Eugene Titov^12008"	// Signature - LTD^TIME^USER^SIZE
