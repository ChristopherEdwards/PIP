V01S377(%ProcessMode,RecordLNFEEP fLNFEEP)   //PBS - LN - SID= <LNFEEPA> Loan Fee Plan Maintenance (Page 1)
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:57 - shetyes
 // This screen supports the Loan Fee Plans user table (LNFEE).  The
 // LNFEEPA screen identifies a valid loan fee plan; indicates the
 // starting date on which the plan is available for use; specifies
 // the fee basis; indicates the assessment method; specifies general
 // ledger account linkages; and identifies applicable transaction codes.
 // 
 // The user accesses the LNFEEPA screen via the Loan Fee Plan functions
 // (LNFEEP1, LNFEEP2, LNFEEP3, and LNFEEP4).
 // 
 // For further information, refer to the Loan Fee Processing Reference
 // Manual.
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="LNFEEPA",VPGM=$T(+0),VSNAME="Loan Fee Plan Maintenance (Page 1)"
 set VFSN("LNFEEP")="zfLNFEEP"
 set vPSL=1
 set KEYS(1)=fLNFEEP.FEETYP
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fLNFEEP),VDA1(.fLNFEEP),^DBSPNT()

 if '%ProcessMode do VNEW(.fLNFEEP),VPR(.fLNFEEP),VDA1(.fLNFEEP)
 if %ProcessMode do VLOD(.fLNFEEP) quit:$G(ER)  do VPR(.fLNFEEP),VDA1(.fLNFEEP)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fLNFEEP)
	quit


VNEW(RecordLNFEEP fLNFEEP) // Initialize arrays if %O=0
 
 do VDEF(.fLNFEEP)
 do VLOD(.fLNFEEP)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordLNFEEP fLNFEEP)
 if fLNFEEP.DTST="" set fLNFEEP.DTST=TJD
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordLNFEEP fLNFEEP) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordLNFEEP fLNFEEP) // Display screen prompts
 set VO="33||13|"
 set VO(0)="|0"
 set VO(1)=$C(1,12,9,0,0,0,0,0,0,0)_"01TFee Type:"
 set VO(2)=$C(3,8,13,0,0,0,0,0,0,0)_"01T Description:"
 set VO(3)=$C(5,27,27,1,0,0,0,0,0,0)_"01T Loan Fee Plan Maintenance "
 set VO(4)=$C(7,1,16,0,0,0,0,0,0,0)_"01THistory Comment:"
 set VO(5)=$C(8,54,13,0,0,0,0,0,0,0)_"01TFee Based on:"
 set VO(6)=$C(9,5,16,0,0,0,0,0,0,0)_"01TLinked to Basis:"
 set VO(7)=$C(9,48,19,1,0,0,0,0,0,0)_"01T Assessment Method:"
 set VO(8)=$C(10,3,18,0,0,0,0,0,0,0)_"01TTransaction Group:"
 set VO(9)=$C(10,50,17,0,0,0,0,0,0,0)_"01TAssess At Payoff:"
 set VO(10)=$C(11,11,10,0,0,0,0,0,0,0)_"01TFrequency:"
 set VO(11)=$C(11,41,26,0,0,0,0,0,0,0)_"01TCollect Fee w/ Assessment:"
 set VO(12)=$C(12,3,18,0,0,0,0,0,0,0)_"01TAccum G/L Offsets:"
 set VO(13)=$C(12,38,29,0,0,0,0,0,0,0)_"01TRecognize Income on Due Date:"
 set VO(14)=$C(13,9,12,0,0,0,0,0,0,0)_"01TLate Charge:"
 set VO(15)=$C(13,36,31,0,0,0,0,0,0,0)_"01TUpdate Bill Record When Assess:"
 set VO(16)=$C(14,4,17,0,0,0,0,0,0,0)_"01TReclassification:"
 set VO(17)=$C(14,56,11,0,0,0,0,0,0,0)_"01TDeductible:"
 set VO(18)=$C(16,4,23,2,0,0,0,0,0,0)_"01TTran Codes:  Assessment"
 set VO(19)=$C(16,30,8,2,0,0,0,0,0,0)_"01TDecrease"
 set VO(20)=$C(16,42,8,2,0,0,0,0,0,0)_"01TIncrease"
 set VO(21)=$C(17,29,10,2,0,0,0,0,0,0)_"01TAdjustment"
 set VO(22)=$C(17,41,10,2,0,0,0,0,0,0)_"01TAdjustment"
 set VO(23)=$C(17,55,20,2,0,0,0,0,0,0)_"01TG/L Account Linkages"
 set VO(24)=$C(18,2,16,0,0,0,0,0,0,0)_"01TCommercial Loan:"
 set VO(25)=$C(18,53,11,0,0,0,0,0,0,0)_"01TReceivable:"
 set VO(26)=$C(19,4,14,0,0,0,0,0,0,0)_"01TMortgage Loan:"
 set VO(27)=$C(19,57,7,0,0,0,0,0,0,0)_"01TIncome:"
 set VO(28)=$C(20,4,14,0,0,0,0,0,0,0)_"01TConsumer Loan:"
 set VO(29)=$C(21,2,16,0,0,0,0,0,0,0)_"01TCredit Bal Loan:"
 set VO(30)=$C(21,52,12,0,0,0,0,0,0,0)_"01TIncr Offset:"
 set VO(31)=$C(22,3,15,0,0,0,0,0,0,0)_"01TRevolving Loan:"
 set VO(32)=$C(22,52,12,0,0,0,0,0,0,0)_"01TDecr Offset:"
 set VO(33)=$C(23,6,12,0,0,0,0,0,0,0)_"01TDemand Loan:"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordLNFEEP fLNFEEP)  // Display screen data
 new V
 //
 set VO="71|34|13|"
 set VO(34)=$C(1,22,8,2,0,0,0,0,0,0)_"01T"_$E(fLNFEEP.FEETYP,1,8)
 set VO(35)=$C(3,22,30,2,0,0,0,0,0,0)_"01T"_$E(fLNFEEP.DESC,1,30)
 set VO(36)=$C(7,18,30,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.HDESC,1,30)
 set VO(37)=$C(8,68,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.BASIS,1,8)
 set VO(38)=$C(9,22,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.LFEE:"Y",1:"N")
 set VO(39)=$C(9,68,1,2,0,0,0,0,0,0)_"00N"_fLNFEEP.AMTH
 set VO(40)=$C(10,22,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.TRGRP,1,8)
 set VO(41)=$C(10,68,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.FPOFF:"Y",1:"N")
 set VO(42)=$C(11,22,12,2,0,0,0,0,0,0)_"00F"_$E(fLNFEEP.CFRE,1,12)
 set VO(43)=$C(11,68,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.CFWA:"Y",1:"N")
 set VO(44)=$C(12,22,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.GLTROP:"Y",1:"N")
 set VO(45)=$C(12,68,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.RIDD:"Y",1:"N")
 set VO(46)=$C(13,22,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.LATE:"Y",1:"N")
 set VO(47)=$C(13,68,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.APRF:"Y",1:"N")
 set VO(48)=$C(14,22,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.DARC:"Y",1:"N")
 set VO(49)=$C(14,68,1,2,0,0,0,0,0,0)_"00L"_$S(fLNFEEP.DED:"Y",1:"N")
 set VO(50)=$C(18,19,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.COMFDT,1,8)
 set VO(51)=$C(18,31,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.COMFCT,1,8)
 set VO(52)=$C(18,43,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.COMFIAT,1,8)
 set VO(53)=$C(18,65,12,2,0,0,0,0,0,0)_"00N"_fLNFEEP.GLFR
 set VO(54)=$C(19,19,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.MTGFDT,1,8)
 set VO(55)=$C(19,31,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.MTGFCT,1,8)
 set VO(56)=$C(19,43,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.MTGFIAT,1,8)
 set VO(57)=$C(19,65,12,2,0,0,0,0,0,0)_"00N"_fLNFEEP.GLFI
 set VO(58)=$C(20,19,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.LNFDT,1,8)
 set VO(59)=$C(20,31,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.LNFCT,1,8)
 set VO(60)=$C(20,43,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.LNFIAT,1,8)
 set VO(61)=$C(21,19,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.CBLFDT,1,8)
 set VO(62)=$C(21,31,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.CBLFCT,1,8)
 set VO(63)=$C(21,43,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.CBLFIAT,1,8)
 set VO(64)=$C(21,65,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.FEEICRTC,1,8)
 set VO(65)=$C(22,19,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.RCFDT,1,8)
 set VO(66)=$C(22,31,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.RCFCT,1,8)
 set VO(67)=$C(22,43,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.RCFIAT,1,8)
 set VO(68)=$C(22,65,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.FEEIDRTC,1,8)
 set VO(69)=$C(23,19,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.DMFDT,1,8)
 set VO(70)=$C(23,31,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.DMFCT,1,8)
 set VO(71)=$C(23,43,8,2,0,0,0,0,0,0)_"00T"_$E(fLNFEEP.DMFIAT,1,8)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordLNFEEP fLNFEEP)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=38,VPT=1,VPB=23,PGM=$T(+0),DLIB="SYSDEV",DFID="LNFEEP"
 set OLNTB=23043
 
 set VFSN("LNFEEP")="zfLNFEEP"
 //
 // 
	
	
 set %TAB(1)=$C(0,21,8)_"21T12401|1|[LNFEEP]FEETYP||if X?1A.AN"
 set %TAB(2)=$C(2,21,30)_"21T12401|1|[LNFEEP]DESC"
 set %TAB(3)=$C(6,17,30)_"00T12425|1|[LNFEEP]HDESC"
 set %TAB(4)=$C(7,67,8)_"00T12412|1|[LNFEEP]BASIS|TBLELMNT(||do VP1^V01S377(.fLNFEEP)|do VP2^V01S377(.fLNFEEP)"
 set %TAB(5)=$C(8,21,1)_"00L12413|1|[LNFEEP]LFEE|||do VP3^V01S377(.fLNFEEP)"
 set %TAB(6)=$C(8,67,1)_"01N12404|1|[LNFEEP]AMTH|[STBLAMTH]||do VP4^V01S377(.fLNFEEP)"
 set %TAB(7)=$C(9,21,8)_"00T12408|1|[LNFEEP]TRGRP|[UTBLTRNGRPLT]||do VP5^V01S377(.fLNFEEP)"
 set %TAB(8)=$C(9,67,1)_"00L12414|1|[LNFEEP]FPOFF|||do VP6^V01S377(.fLNFEEP)"
 set %TAB(9)=$C(10,21,12)_"00F12403|1|[LNFEEP]CFRE|||do VP7^V01S377(.fLNFEEP)"
 set %TAB(10)=$C(10,67,1)_"00L12406|1|[LNFEEP]CFWA|||do VP8^V01S377(.fLNFEEP)"
 set %TAB(11)=$C(11,21,1)_"00L12426|1|[LNFEEP]GLTROP"
 set %TAB(12)=$C(11,67,1)_"00L12421|1|[LNFEEP]RIDD|||do VP9^V01S377(.fLNFEEP)"
 set %TAB(13)=$C(12,21,1)_"00L12452|1|[LNFEEP]LATE"
 set %TAB(14)=$C(12,67,1)_"00L12407|1|[LNFEEP]APRF"
 set %TAB(15)=$C(13,21,1)_"00L12453|1|[LNFEEP]DARC"
 set %TAB(16)=$C(13,67,1)_"00L12457|1|[LNFEEP]DED"
 set %TAB(17)=$C(17,18,8)_"00T12427|1|[LNFEEP]COMFDT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""COM""""""||do VP10^V01S377(.fLNFEEP)"
 set %TAB(18)=$C(17,30,8)_"00T12433|1|[LNFEEP]COMFCT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""COM""""""||do VP11^V01S377(.fLNFEEP)"
 set %TAB(19)=$C(17,42,8)_"00T12446|1|[LNFEEP]COMFIAT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""COM""""""||do VP12^V01S377(.fLNFEEP)"
 set %TAB(20)=$C(17,64,12)_"00N12422|1|[LNFEEP]GLFR|[GLAD]"
 set %TAB(21)=$C(18,18,8)_"00T12428|1|[LNFEEP]MTGFDT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""MTG""""""||do VP13^V01S377(.fLNFEEP)"
 set %TAB(22)=$C(18,30,8)_"00T12434|1|[LNFEEP]MTGFCT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""MTG""""""||do VP14^V01S377(.fLNFEEP)"
 set %TAB(23)=$C(18,42,8)_"00T12447|1|[LNFEEP]MTGFIAT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""MTG""""""||do VP15^V01S377(.fLNFEEP)"
 set %TAB(24)=$C(18,64,12)_"00N12423|1|[LNFEEP]GLFI|[GLAD]"
 set %TAB(25)=$C(19,18,8)_"00T12429|1|[LNFEEP]LNFDT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""LN""""""||do VP16^V01S377(.fLNFEEP)"
 set %TAB(26)=$C(19,30,8)_"00T12435|1|[LNFEEP]LNFCT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""LN""""""||do VP17^V01S377(.fLNFEEP)"
 set %TAB(27)=$C(19,42,8)_"00T12448|1|[LNFEEP]LNFIAT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""LN""""""||do VP18^V01S377(.fLNFEEP)"
 set %TAB(28)=$C(20,18,8)_"00T12430|1|[LNFEEP]CBLFDT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""CBL""""""||do VP19^V01S377(.fLNFEEP)"
 set %TAB(29)=$C(20,30,8)_"00T12436|1|[LNFEEP]CBLFCT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""CBL""""""||do VP20^V01S377(.fLNFEEP)"
 set %TAB(30)=$C(20,42,8)_"00T12449|1|[LNFEEP]CBLFIAT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""CBL""""""||do VP21^V01S377(.fLNFEEP)"
 set %TAB(31)=$C(20,64,8)_"00T12454|1|[LNFEEP]FEEICRTC|[TRN]:QUERY "" [TRN]CLS=""""M"""""""
 set %TAB(32)=$C(21,18,8)_"00T12431|1|[LNFEEP]RCFDT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""RC""""""||do VP22^V01S377(.fLNFEEP)"
 set %TAB(33)=$C(21,30,8)_"00T12437|1|[LNFEEP]RCFCT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""RC""""""||do VP23^V01S377(.fLNFEEP)"
 set %TAB(34)=$C(21,42,8)_"00T12450|1|[LNFEEP]RCFIAT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""RC""""""||do VP24^V01S377(.fLNFEEP)"
 set %TAB(35)=$C(21,64,8)_"00T12455|1|[LNFEEP]FEEIDRTC|[TRN]:QUERY ""[TRN]CLS=""""M"""""""
 set %TAB(36)=$C(22,18,8)_"00T12432|1|[LNFEEP]DMFDT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""DM""""""||do VP25^V01S377(.fLNFEEP)"
 set %TAB(37)=$C(22,30,8)_"00T12438|1|[LNFEEP]DMFCT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""DM""""""||do VP26^V01S377(.fLNFEEP)"
 set %TAB(38)=$C(22,42,8)_"00T12451|1|[LNFEEP]DMFIAT|[TRN]ETC:QU ""[TRN]CLS=""""L"""" & [TRN]GRP=""""DM""""""||do VP27^V01S377(.fLNFEEP)"
 do VTBL(.fLNFEEP)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordLNFEEP fLNFEEP) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordLNFEEP fLNFEEP) //
 type public Number ER
 type public String FEETYP, X, ZBAS

 if X.isNull() quit

 // Basis element links back to itself	
 if (X = FEETYP) do Runtime.setErrSTBLER("LNFEEP","LNFEE7") quit

 type String ZBAS, ARRAY()

 set ZBAS = X
 set ARRAY(ZBAS) = ""
 set ARRAY(FEETYP) = ""

 for  do { quit:ER!ZBAS.isNull()

 	type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP = :ZBAS", 1)
   
 	set ZBAS = lnfeep.basis
   
 	if ZBAS.isNull() quit
   
 	// Basis element links back to itself	
 	if ARRAY(ZBAS).exists() do Runtime.setErrSTBLER("LNFEEP","LNFEE7") quit
   
 	set ARRAY(ZBAS) = ""
 	}

 quit
VP2(RecordLNFEEP fLNFEEP) //
 type public String TBLELMNT

 do TBL1^LNFEEU(.TBLELMNT)

 quit
VP3(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
	03/06/06 - TITOVE - CR 19949
		   Modified zLFEE1 to correctly default values from the 
		   fee plan table.

	03/03/06 - TITOVE - CR 19733
		   Replaced OLDLFEE variable with object reference.

        02/24/06 - TITOVE - CR 19776
                   Modified to properly pass object arguments.
 */
 type public String X

 if 'X do zLFEE0(.fLNFEEP) quit

 if X do zLFEE1(.fLNFEEP)

 quit


zLFEE0(RecordLNFEEP fLNFEEP)

 do UNPROT^DBSMACRO("fLNFEEP.AMTH")
 do UNPROT^DBSMACRO("fLNFEEP.CFRE")
 do UNPROT^DBSMACRO("fLNFEEP.GLTROP")
 do UNPROT^DBSMACRO("fLNFEEP.FPOFF")
 do UNPROT^DBSMACRO("fLNFEEP.CFWA")
 do UNPROT^DBSMACRO("fLNFEEP.TRGRP")
 do UNPROT^DBSMACRO("fLNFEEP.APRF")

 quit


zLFEE1(RecordLNFEEP fLNFEEP)

 type public Number ER

 // Linked fee must use BASIS element
 if fLNFEEP.BASIS.isNull() do Runtime.setErrMSG("LNFEEP",1611) quit

 if (fLNFEEP.BASIS="I")!(fLNFEEP.BASIS="P") quit

 if (%ProcessMode=1),(fLNFEEP.lfee'=1) do { quit:ER
 	 
	type ResultSet rs=Db.select("CID","LNFEE","FEETYP=:FEETYP")
	
	// Invalid. Fee plan ~p1 in use by at least one account
 	if rs.next() do Runtime.setErrMSG("LNFEEP",723,FEETYP) quit
 	}
 
 type RecordLNFEEP lnfeep=Db.getRecord("LNFEEP","FEETYP=:fLNFEEP.BASIS")	

 do DEFAULT^DBSMACRO("LNFEEP.AMTH",lnfeep.amth)
 do DEFAULT^DBSMACRO("LNFEEP.CFRE",lnfeep.cfre)
 do DEFAULT^DBSMACRO("LNFEEP.GLTROP",lnfeep.gltrop)
 do DEFAULT^DBSMACRO("LNFEEP.TRGRP","")
 do DEFAULT^DBSMACRO("LNFEEP.FPOFF",lnfeep.fpoff)
 do DEFAULT^DBSMACRO("LNFEEP.CFWA",lnfeep.cfwa)
 do DEFAULT^DBSMACRO("LNFEEP.APRF",lnfeep.aprf)
 do PROTECT^DBSMACRO("fLNFEEP.AMTH")
 do PROTECT^DBSMACRO("fLNFEEP.CFRE")
 do PROTECT^DBSMACRO("fLNFEEP.GLTROP")
 do PROTECT^DBSMACRO("fLNFEEP.TRGRP")
 do PROTECT^DBSMACRO("fLNFEEP.FPOFF")
 do PROTECT^DBSMACRO("fLNFEEP.CFWA")
 do PROTECT^DBSMACRO("fLNFEEP.APRF")
 
 quit
VP4(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        02/24/06 - TITOVE - CR 19776
                   Cleaned up and removed old revision history.
 */
 type public Number ER
 type public String X

 // Invalid. Fee plan ~p1 in use by at least one account
 if %ProcessMode=1,fLNFEEP.AMTH=0,X'=0 do { quit:ER
	type ResultSet rs=Db.select("CID","LNFEE","FEETYP=:FEETYP")
        if rs.next() do Runtime.setErrMSG("LNFEE",723,FEETYP) quit
        }

 // Invalid. Fee plan ~p1 in use by at least one account 
 if %ProcessMode=1,X=0,fLNFEEP.AMTH'=0 do { quit:ER
	type ResultSet rs=Db.select("CID","LNFEE","FEETYP=:FEETYP")
        if rs.next() do Runtime.setErrMSG("LNFEE",723,FEETYP) quit
	}

 // Cannot be changed from or to frequency method
 if %ProcessMode=1,fLNFEEP.AMTH=1,X'=1 do Runtime.setErrMSG("LNFEEP",265) quit
 if %ProcessMode=1,X=1,fLNFEEP.AMTH'=1 do Runtime.setErrMSG("LNFEEP",265) quit
 
 // Enter a basis other than I or P for this assessment method
 if ((fLNFEEP.BASIS="I")!(fLNFEEP.BASIS="P"))&((X=0)!(X=1)) do Runtime.setErrMSG("LNFEEP",250)
 if ((fLNFEEP.BASIS="I")!(fLNFEEP.BASIS="P"))&(X=2)&(fLNFEEP.LFEE=1) do Runtime.setErrMSG("LNFEE",250)

 quit
VP5(RecordLNFEEP fLNFEEP) //
 if X.isNull(),(fLNFEEP.AMTH=2) do { quit
 
   // Transaction group required with assessment method of 2
   if "I/P"[fLNFEEP.BASIS do Runtime.setErrSTBLER("LNFEEP","LNFEE1") quit
   }
 
 // Tran group only applicable when assessment equals 2
 if 'X.isNull(),fLNFEEP.AMTH'=2 do Runtime.setErrSTBLER("LNFEEP","LNFEE2") quit

 quit
VP6(RecordLNFEEP fLNFEEP) //
 // Assess at payoff only valid when calculation method is 1 or 3
 if X,fLNFEEP.AMTH'=1,fLNFEEP.AMTH'=3 do Runtime.setErrSTBLER("LNFEEP","LNFEE6") quit
 
 quit
VP7(RecordLNFEEP fLNFEEP) //
 // Assessment method requires frequency
 if X.isNull(),fLNFEEP.AMTH=1 do Runtime.setErrSTBLER("LNFEEP","LNFEE3") quit
 // Frequency not applicable with assessment method
 if 'X.isNull(),fLNFEEP.AMTH'=1 do Runtime.setErrSTBLER("LNFEEP","LNFEE4") quit

 quit
VP8(RecordLNFEEP fLNFEEP) //
 
 // If is a linked fee the APRF is protected
 if fLNFEEP.LFEE&(fLNFEEP.BASIS'="I")&(fLNFEEP.BASIS'="I") quit
 
 if X do {
    do DEFAULT^DBSMACRO("LNFEEP.APRF",0)
    do PROTECT^DBSMACRO("fLNFEEP.APRF")
    }	
 
 if 'X do UNPROT^DBSMACRO("fLNFEEP.APRF")

 quit
VP9(RecordLNFEEP fLNFEEP) //
 // Invalid.  Available for use with billing-based fees only.
 if X,fLNFEEP.AMTH'=3 do Runtime.setErrMSG("LNFEEP",1517) quit
 
 quit
VP10(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
		   message 1498.
 */
 type public String X

 if 'X.isNull() do {

	type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)

	// Invalid transaction code ~p1
	if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit

	// Transaction code for ~p1 must be a debit
	if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
	}

 quit
VP11(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }
 
 quit
 
 
VP12(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP13(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP14(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }

 quit
VP15(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP16(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP17(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }

 quit
VP18(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP19(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }

 quit
VP20(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP21(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }

 quit
VP22(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP23(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }

 quit
VP24(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP25(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
VP26(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a credit
        if 'trn.itc.extract() do Runtime.setErrMSG("TRN",2695) quit
        }

 quit
VP27(RecordLNFEEP fLNFEEP) //
 /*
  ---- Revision History ------------------------------------------------
 
        01/12/06 - TITOVE - CR 18932
                   Added third argument to Db.getRecord and error
                   message 1498.
 */
 type public String X
 
 if 'X.isNull() do {
 
        type RecordTRN trn = Db.getRecord("TRN", "ETC = :X", 1)
 
        // Invalid transaction code ~p1
        if 'trn.getMode() do Runtime.setErrMSG("TRN",1498,X) quit
 
        // Transaction code for ~p1 must be a debit
        if trn.itc.extract() do Runtime.setErrMSG("TRN",2696) quit
        }

 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordLNFEEP fLNFEEP
 do VPR(.fLNFEEP)
 do VDA1(.fLNFEEP)
 do ^DBSPNT()
 quit

VW(RecordLNFEEP fLNFEEP)
 do VDA1(.fLNFEEP)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordLNFEEP fLNFEEP)
 do VDA1(.fLNFEEP)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordLNFEEP fLNFEEP
 do VDA1(.fLNFEEP)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordLNFEEP fLNFEEP
 if sn="LNFEEP" do vSET1(.fLNFEEP,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordLNFEEP fLNFEEP,di,X)
 do fLNFEEP.setAuditFlag(1)
 set fLNFEEP.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordLNFEEP fLNFEEP
 if fid="LNFEEP" quit $$vREAD1(.fLNFEEP,di)
 quit ""
vREAD1(RecordLNFEEP fLNFEEP,di)
 quit fLNFEEP.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
