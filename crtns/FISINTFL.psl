FISINTFL(RecordUTBLFISINT utblfisint, String vpar, Boolean vparNorm) // UTBLFISINT - Fiscal Interest Calculation Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblfisint.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblfisint,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblfisint,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYPE = utblfisint.type
	type String COL = utblfisint.col

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYPE").exists()!vx("COL").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLFISINT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLFISINT","TYPE = :utblfisint.type and COL = :utblfisint.col") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYPE
	type public String COL

	type RecordUTBLFISINT utblfisint = Db.getRecord("UTBLFISINT","TYPE=:TYPE,COL=:COL")
	if (%ProcessMode = 2) do {
		do utblfisint.setMode(2)

		do FISINTFL(utblfisint,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLFISINT utblfisint

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLFISINT","TYPE = :utblfisint.type and COL = :utblfisint.col") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblfisint,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblfisint,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblfisint)) S ^UTBL("FISINT",vobj(utblfisint,-3),vobj(utblfisint,-4))=vobj(utblfisint)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLFISINT utblfisint

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblfisint,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("FISINT",vobj(utblfisint,-3),vobj(utblfisint,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLFISINT utblfisint

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLFISINT utblfisint

	if utblfisint.type.isNull() do vreqerr("TYPE") quit
	if utblfisint.col.isNull() do vreqerr("COL") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLFISINT","MSG",1767,"UTBLFISINT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - Verify class of column

	type public RecordUTBLFISINT utblfisint
	/*	
	--- Revision History ------------------------------------------------
	09/21/99 - CARROLLJ - 31126
		   Convert to PSL.

	12/14/98 - YENDAPALLIS - 28929
		   Verifies class of columns.  For deposit products, only DEP
		   columns will be filed and for loan products, only loan products
		   will be filed.
	*/
	
	new ZCLS,data
	set ZCLS=Db.getOneRow("CLS","PRODCTL","TYPE")
	set data=$P(utblfisint.col,".",1)
	if data="HIST0" quit 
	if data="LNFEE" quit 
	if ZCLS="L",data'="LN" do Runtime.setErrMSG("UTBLFISINT",8472) quit:ER 
	if ZCLS="D",data'="DEP" do Runtime.setErrMSG("UTBLFISINT",8472) quit:ER 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLFISINT utblfisint

	set X = utblfisint.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	if utblfisint.col.length()>15 set vRM = $$^MSG(1076,15) do vdderr("COL", vRM) quit
	if utblfisint.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLFISINT","MSG",979,"UTBLFISINT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLFISINT utblfisint

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TYPE").exists() set vux("TYPE") = vx("TYPE")
	if vx("COL").exists() set vux("COL") = vx("COL")
	do vkey(1) set voldkey = utblfisint.type_","_utblfisint.col // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblfisint.type_","_utblfisint.col // Copy new keys into object
	type RecordUTBLFISINT vnewrec = utblfisint.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLFISINT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLFISINT utblfisint

	if vux("TYPE").exists() set utblfisint.type = vux("TYPE").piece("|",i)
	if vux("COL").exists() set utblfisint.col = vux("COL").piece("|",i)
	quit
