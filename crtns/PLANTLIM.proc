PLANTLIM(RecordUTBLPLANTLIM utblplantlim, String vpar, Boolean vparNorm) // UTBLPLANTLIM - Plan Type Limits Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblplantlim.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblplantlim,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblplantlim,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("GRPLIM").exists()!vx("SYS").exists()!vx("TYPELIM").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPLANTLIM",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPLANTLIM","GRPLIM = :utblplantlim.grplim and SYS = :utblplantlim.sys and TYPELIM = :utblplantlim.typelim") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String GRPLIM
	type public String SYS
	type public String TYPELIM

	type RecordUTBLPLANTLIM utblplantlim = Db.getRecord("UTBLPLANTLIM","GRPLIM=:GRPLIM,SYS=:SYS,TYPELIM=:TYPELIM")
	if (%ProcessMode = 2) do {
		do utblplantlim.setMode(2)

		do PLANTLIM(utblplantlim,vpar)
	}
	else  do VINDEX(utblplantlim)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPLANTLIM utblplantlim

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPLANTLIM","GRPLIM = :utblplantlim.grplim and SYS = :utblplantlim.sys and TYPELIM = :utblplantlim.typelim") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblplantlim,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblplantlim,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblplantlim))  S ^UTBL("GRPLIMIT",vobj(utblplantlim,-3),vobj(utblplantlim,-4),vobj(utblplantlim,-5))=vobj(utblplantlim)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.utblplantlim) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPLANTLIM utblplantlim

	if vpar["/INDEX/" do VINDEX(.utblplantlim)             // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblplantlim,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("GRPLIMIT",vobj(utblplantlim,-3),vobj(utblplantlim,-4),vobj(utblplantlim,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLPLANTLIM utblplantlim

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPLANTLIM utblplantlim

	if utblplantlim.grplim.isNull() do vreqerr("GRPLIM") quit
	if utblplantlim.sys.isNull() do vreqerr("SYS") quit
	if utblplantlim.typelim.isNull() do vreqerr("TYPELIM") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPLANTLIM","MSG",1767,"UTBLPLANTLIM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPLANTLIM utblplantlim

	set X = utblplantlim.grplim if 'X.isNull(),'Db.isDefined("UTBLINSTLIM","X") set vRM = $$^MSG(1485,X) do vdderr("GRPLIM", vRM) quit
	set X = utblplantlim.sys if 'X.isNull(),'Db.isDefined("STBLFTPSYS","X") set vRM = $$^MSG(1485,X) do vdderr("SYS", vRM) quit
	if utblplantlim.typelim.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TYPELIM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPLANTLIM","MSG",979,"UTBLPLANTLIM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordUTBLPLANTLIM utblplantlim) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.utblplantlim)

	quit
	

vi1(RecordUTBLPLANTLIM utblplantlim) // Maintain GRPLIMX index entries (GROUP LIMIT)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = utblplantlim.sys
	type String v3 = utblplantlim.typelim
	type String v4 = utblplantlim.grplim

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^UTBL("GRPLIMIT",vobj(utblplantlim,-3),vobj(utblplantlim,-4),vobj(utblplantlim,-5)))#2,'$D(^XREF("GRPLIM",v2,v3,v4)) do vidxerr("GRPLIMX")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("GRPLIM",v2,v3,v4)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("GRPLIM",v2,v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("UTBLPLANTLIM")

	while ds.next() do {
		type RecordUTBLPLANTLIM utblplantlim=ds.getRecord("UTBLPLANTLIM")
		if vlist.contains("VINDEX") do VINDEX(.utblplantlim) quit
		if vlist.contains("GRPLIMX") do vi1(.utblplantlim)
	}

	quit


public VIDXBLD1(RecordUTBLPLANTLIM utblplantlim, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.utblplantlim) quit
	if vlist.contains("GRPLIMX") do vi1(.utblplantlim)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("UTBLPLANTLIM","MSG",1225,"UTBLPLANTLIM."_di)

	quit


vkchged // Access key changed

	type public RecordUTBLPLANTLIM utblplantlim

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("GRPLIM").exists() set vux("GRPLIM") = vx("GRPLIM")
	if vx("SYS").exists() set vux("SYS") = vx("SYS")
	if vx("TYPELIM").exists() set vux("TYPELIM") = vx("TYPELIM")
	do vkey(1) set voldkey = utblplantlim.grplim_","_utblplantlim.sys_","_utblplantlim.typelim // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblplantlim.grplim_","_utblplantlim.sys_","_utblplantlim.typelim // Copy new keys into object
	type RecordUTBLPLANTLIM vnewrec = utblplantlim.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPLANTLIM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLPLANTLIM utblplantlim

	if vux("GRPLIM").exists() set utblplantlim.grplim = vux("GRPLIM").piece("|",i)
	if vux("SYS").exists() set utblplantlim.sys = vux("SYS").piece("|",i)
	if vux("TYPELIM").exists() set utblplantlim.typelim = vux("TYPELIM").piece("|",i)
	quit

VIDXPGM()	quit "PLANTLIM"	// Location of index program

