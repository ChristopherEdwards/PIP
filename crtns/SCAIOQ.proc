SCAIOQ(PARAMS,PROMPT)	// Validate and allow input of queue print parameters
	/*
	       ORIG:  RUSSELL -  6 NOV 1991
	  CALLED BY:  ^SCAIO
	      CALLS:  ^%ZFUNC,^%ZQUEUE,^%ZTEXT,^UTLREAD
	       DESC:  Get parameters for printing to queues.

	              Called by ^SCAIO if a queue is specified for output.

	              Call by:  S X=$$^SCAIOQ(PARAMS,PROMPT)

	              PARAMS = list of parameters/...
	              Those specified will be validated or will be used as
	              default values on prompt screen if PROMPT=1

	              Return value is parameter list/...

	              Works in conjunction with ^%ZQUEUE, which controls
	              parameters and their characteristics related to particular
	              systems.  Changes to this routine may affect ^%ZQUEUE,
	              and vice versa.

	      INPUT:  PARAMS = parameter list
	     OUTPUT:  parameter list

	  EXT ENTRY:

	---- Revision History ------------------------------------------------

	12/29/03 - CARROLLJ - CR7658
		   Added #ACCEPT prior to xecute command.

	11/14/02 - ZWITKOWITSM - 43583
		   PSL clean-up.

	11/15/01 - ARCILLAZ - 43583
		   Converted to PSL. Removed old revision history.

	*/

	new I,INFO,N,P,QPARAMS,default,length,name,postp,prompt,required,type,variable

	set ER=0

	do SETPARAMS^%ZQUEUE(.INFO)
	do PARSE
	if ER quit ""

	if $G(PROMPT) do { quit:ER ""
		do PROMPT
		if "Q"[VFMQ set ER=1
		}

	quit $$SETPARAMS


PROMPT	// Screen to gather input if required by PROMPT=1

	set (%ProcessMode,%PG)=0
	set %PAGE=1
	set N=""
	// Print Queue Parameters
	set HDG=$$CJ^%ZTEXT($$^MSG("4823"),80)
	set %READ="@HDG/REV,"

	for  set N=$O(INFO(N)) quit:N=""  do {

		do GETINFO(INFO(N))

		new X

		set X="|"_length_"||[SCAIOQ]"_variable_"|||"_postp_"||"_type_"|"_prompt
		set %TAB(variable)=X
		set %READ=%READ_","_variable_$S(required:"/REQ",1:"")
		}

	do ^UTLREAD

	// Force DQ main screen re-display
	set vdspscr=1

	quit


SETPARAMS()	// Set parameters to return

	set (QPARAMS,N)=""

	for  set N=$O(INFO(N)) quit:N=""  do {

		do GETINFO(INFO(N))

		// Item not selected
		if '$D(@variable) quit
		if type="L" do { quit
			if @variable set QPARAMS=QPARAMS_variable_"/"
			}
		if $G(@variable)'="" set QPARAMS=QPARAMS_variable_"="_@variable_"/"
		}

	quit $E(QPARAMS,1,$L(QPARAMS)-1)


PARSE	// Break down PARAMS to verify and prepare prompting if requested

	for I=1:1 set P=$P(PARAMS,"/",I) quit:P=""  do P1 quit:ER

	if ER quit

	// Set defaults
	set N="" for  set N=$O(INFO(N)) quit:N=""  do {

		do GETINFO(INFO(N))

		if default="" quit

		// Numeric, has value
		if type="N",$G(@variable) quit

		if $G(@variable)'="" quit

		// Default value
		set @variable=default
		}

	quit


P1
	new L,P1,P2,X

	set P1=$P(P,"=",1)
	set P2=$P(P,"=",2)
	set P1=$$UPPER^%ZFUNC(P1)

	// Parameters must be at least 4 characters in length
	if $L(P1)<4 do Runtime.setErrMSG("DEP",2133) quit

	set L=$L(P1)
	set N=""
	set hit=0

	for  set N=$O(INFO(N)) quit:N=""  do { quit:ER!hit

		do GETINFO(INFO(N))

		// Not this item
		if $E(name,1,L)'=P1 quit

		set hit=1

		if type="L" set @variable=1 quit

		set X=P2

		#ACCEPT DATE=12/29/03;PGM=John Carroll
		if postp'="" xecute postp quit:ER

		// ~p1 requires numeric values
		if type="N",X'?1.N do Runtime.setErrMSG("DEP",3076,P1) quit

		// ~p1 exceeds length of ~p2
		if $L(X)>length do Runtime.setErrMSG("DEP",3037,"P1~length") quit

		set @variable=X
		}

	// Invalid parameter - ~p1
	if 'hit do Runtime.setErrMSG("DEP",1417,P1) quit

	quit


GETINFO(x)	// Break down INFO into pieces

	set name=$P(x,"|",1)
	set variable=$E(name,1,8)
	set length=$P(x,"|",2)
	set type=$P(x,"|",3)
	set default=$P(x,"|",4)
	set required=$P(x,"|",5)
	set prompt=$P(x,"|",6)
	set postp=$P(x,"|",7)

	quit

vSIG()	quit "59886^43606^Sanchez SCM Administrator^3494"	// Signature - LTD^TIME^USER^SIZE
