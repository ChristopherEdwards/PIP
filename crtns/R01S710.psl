R01S710	// YER443 - NR4 RSP Distributions Year-End Forms
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:04 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String acn
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String REPDI=CUVAR.spldir_"YER443-"_$$DAT^%ZM(%CurrentDate,"MMDD")_".PBS"
	type String VIN2="ALL"

	set RID="YER443"
	set RN="NR4 RSP Distributions Year-End Forms"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("REPDI")="|40|||[DEVICE]||||T|Report Device|||||"
	set %TAB("VIN2")="|255||[NR4DINF]ACN|[NR4DINF]ACN:DISTINCT:NOVAL||set acn=X D EXT^DBSQRY||T|Customer Number|||||"

	set %READ="IO/REQ,REPDI#1,VIN2#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String acn
	type public String REPDI,VIN2
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %BLK,%NOCLOSE,%NOOPEN,%TIM,A(),ACCNUM,ACN,ACNRELC,AD(),BOO,CAD(),CCODE,CID,CNAME,CONAM,CRCD,DATA(),DIST1,DIST2,INCD1,INCD2,MYQRY,NR4REC,NRTRN,PGM,RID,RN,RPASEQ,SEQ,SIO,SLIPCNT,TMP(),VL,VLOF,VRF(),VSTATS(),WHLD1,WHLD2,YEAR,YEAR2,fIRATYPE,fNR4DINF,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,vovc1,vovc2,vovc3,vp4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="YER443",RN="NR4 RSP Distributions Year-End Forms"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YER443","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[NR4DINF]ACN "_VIN2,SEQ=SEQ+1
		set DQQRY(SEQ)="[CIF]ACN=[NR4DINF]ACN",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("NR4DINF,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}


	// Alignment pattern
	if cuvar.alcount,IOTYP'="TRM",'VRWOPT("NOALIGN").get() do ^DBSRWALN(RID,IO,cuvar.alcount)

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vp4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"NR4DINF.ACN,NR4DINF.BOO,NR4DINF.RPASEQ,CIF.TAXID,C"
	set VSELECT=VSELECT_"IF.NRCNTRY,CIF.MAD1,CIF.MAD2,CIF.MCITY,CIF.MSTATE,"
	set VSELECT=VSELECT_"CIF.MCNTRY,CIF.MZIP,CIF.XNAME,CIF.PCNTRY,CIF.BOO"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"NR4DINF,CIF",VWHERE,"NR4DINF.ACN,NR4DINF.BOO,NR4DINF.RPASEQ","","DQMODE=1/PROTECTION=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=rwrs.getRowProt()		// Data item protection
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3
	set vovc1="",vovc2="",vovc3=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3
	set vovc1=vc1,vovc2=vc2,vovc3=vc3
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vp4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14
	set vc1=V.piece($C(9),1)			// NR4DINF.ACN
	set vc2=V.piece($C(9),2)			// NR4DINF.BOO
	set vc3=V.piece($C(9),3)			// NR4DINF.RPASEQ
	set vc4=V.piece($C(9),4)			// CIF.TAXID
	set vp4=VI.extract(4)				// Protection indicator
	set vc5=V.piece($C(9),5)			// CIF.NRCNTRY
	set vc6=V.piece($C(9),6)			// CIF.MAD1
	set vc7=V.piece($C(9),7)			// CIF.MAD2
	set vc8=V.piece($C(9),8)			// CIF.MCITY
	set vc9=V.piece($C(9),9)			// CIF.MSTATE
	set vc10=V.piece($C(9),10)			// CIF.MCNTRY
	set vc11=V.piece($C(9),11)			// CIF.MZIP
	set vc12=V.piece($C(9),12)			// CIF.XNAME
	set vc13=V.piece($C(9),13)			// CIF.PCNTRY
	set vc14=V.piece($C(9),14)			// CIF.BOO
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 type public String acn,A(),AD(),CAD(),MYQRY,YEAR2,YEAR
 type Number I,START,STOP,X

 set MYQRY=acn.translate(",","!")

 if acn'="ALL" do {
 	type Number I,EX,X
 	set EX=""
	set START=MYQRY.piece("!",1)-0.0001
	for I=1:1 do { quit:EX=1
		set X=MYQRY.piece("!",I)
		if X'="" set A(1,I)=X
		else  set EX=1
		}
	set STOP=A(1,A(1,"").order(-1))+0.0001
 	}
 else  set START=0,STOP=10000000000000000000
 
 do NR4D^NR4YER
 set YEAR2=YEAR.extract(3,4)
 quit


ZDATABLD // Build DATA array

 // Build DATA array to allow correct number of forms to be produced.
                         

 type public Number ACN,BOO,CID,RPASEQ,SEQ
 type Number CNT,DCNT,DATASEQ,INCD,PLANID,SRSPSEQ,X,X2
 type public String fIRATYPE,ACNRELC
 type public String DATA(),TMP()
 type String DI,fNR4DINF
 kill DATA
 
                         
 // Part 1 build TMP array using INCD as primary key
 set (ACNRELC,RPASEQ)="",SEQ=0,CNT=0
 set DI="RSPAP,RSPRP,RSPEA,RSPWP,RSPDP,RIFPP,RIFLS,"
 set DI=DI_"RSPAPW,RSPRPW,RSPEAW,RSPWPW,RSPDPW,RIFPPW,"
 set DI=DI_"RIFLSW,NRD,NRDW,PLANID,NEGAMT,RPASEQ,ACN"
 
 type ResultSet rs=Db.select(DI,"NR4DINF")
 if rs.isEmpty() quit
 while rs.next() do {
	set ACN=rs.getCol("ACN")
 	set RPASEQ=rs.getCol("RPASEQ")
 	set PLANID=rs.getCol("PLANID")
	set fNR4DINF=rs.getRow("|")
	kill TMP
 	if ACNRELC="" do {
		type ResultSet rs1=Db.select("CID","DEP","ACN=:ACN")
		if rs1.next() set CID=rs1.getCol("CID")
 		}
 	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
 	set ACNRELC=acn.acnrelc
	
	if rs.getCol("RIFPP")!rs.getCol("RIFPPW") do ZFRM(26,6,13)
	if rs.getCol("RIFLS")!rs.getCol("RIFLSW") do ZFRM(27,7,14)  
	if rs.getCol("RSPAP")!rs.getCol("RSPAPW") do ZFRM(28,1,8)
	if rs.getCol("RSPRP")!rs.getCol("RSPRPW") do ZFRM(29,2,9)
	if rs.getCol("RSPEA")!rs.getCol("RSPEAW") do ZFRM(30,3,10)
	// Income Code changed from 31 to 43  
	if rs.getCol("RSPWP")!rs.getCol("RSPWPW") do ZFRM(43,4,11)
	if rs.getCol("RSPDP")!rs.getCol("RSPDPW") do ZFRM(33,5,12)

 	//Part 2 Build DATA array from TMP array for correct # of forms
 	set INCD="",CNT=0
 	if SRSPSEQ.get()'=RPASEQ set SEQ=SEQ+1,DATASEQ=SEQ
 	for  set INCD=TMP(INCD).order() quit:INCD.isNull()  do {
 		set X=TMP(INCD)
 		set CNT=CNT+1
 		if CNT>1,(CNT#2) set SEQ=SEQ+1
 		set X2=DATA(SEQ).get()
 		if '(X2.isNull()) set X2=X2_"|"
 		set X2=X2_INCD_"|"_X
 		set DATA(SEQ)=X2
 		set SRSPSEQ=RPASEQ
 		}
 	// Add PLANID to DATA records for this RSP Sequence
 	set DCNT=""
	for  set DCNT=DATA(DCNT).order() quit:DCNT.isNull()  do {
		if DCNT'<DATASEQ set DATA(DCNT).piece("|",7)=PLANID
		}
 	}
 quit

ZFRM(Number INCD,Number BCK1,Number BCK2)
 type public String fNR4DINF,TMP()
 type String X
 set X=TMP(INCD).get()
 set X.piece("|",1)=X.piece("|",1)+fNR4DINF.piece("|",BCK1)
 set X.piece("|",2)=X.piece("|",2)+fNR4DINF.piece("|",BCK2)
 set TMP(INCD)=X
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=acn
	quit

VRPOST	// Report post-processor

 // This section writes slip count totals to ^TMP
 type public String %NOOPEN,%BLK,%NOCLOSE,IO,IOPAR,IOTYP,MYQRY,PGM,RID,REPDI,SIO
 type public Number SLIPCNT,vcrt
 type public Boolean VFMQ
 type Number PN

 type DbSet ds=Db.selectDbSet("NR4SUM","PID=:%ProcessID","CRCD")
 while ds.next() do {
	type RecordNR4SUM nr4sum=ds.getRecord("NR4SUM")
	set nr4sum.cnt=+SLIPCNT.get()
	do nr4sum.bypassSave()
	}

 kill SLIPCNT 
 
 // This section calls the NR4 distributions summary report.

 do CLOSE^SCAIO //close primary file
 set SIO=IO
 set IO=REPDI,%NOCLOSE=""
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set IOPAR="WRITE/APPEND"
 set IOTYP="RMS"
 set RID="YER444" do ^URID
 if PGM.length() set %BLK="/,"_REPDI do V0^@PGM
 
 
 // This section calls the NR4 distributions detail report.

 set (%NOOPEN,%NOCLOSE)=""
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set RID="YER445" do ^URID		//gfm 10/21/98
 if PGM.length() set %BLK="/,"_REPDI do V0^@PGM
 
 // This section calls the NR4 distributions Branch Summary Report.

 set %NOOPEN=""
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set RID="YER446" do ^URID
 if PGM.length() set %BLK="/,"_REPDI do ^@PGM
 set IO=SIO set %NOCLOSE=""
 
 do Db.fastDelete("NR4SUM","PID=%ProcessID")
 do Db.fastDelete("TMPRPT2","PID=%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb2!(+vovc1'=+vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(+vovc2'=+vc2) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL4	// Detail
	type public String %BLK,%NOCLOSE,%NOOPEN,A(),ACCNUM,ACN,ACNRELC,AD(),BOO,CAD(),CCODE,CID,CNAME,CRCD,DATA(),DIST1,DIST2,INCD1,INCD2,IO,IOPAR,IOSL,IOTYP,MYQRY,NR4REC,NRTRN,PGM,REPDI,RID,RPASEQ,SEQ,SIO,SLIPCNT,TMP(),V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),WHLD1,WHLD2,YEAR,YEAR2,acn,fIRATYPE,fNR4DINF,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vp4

	if VLC+22>IOSL do VHDG0 quit:VFMQ

	set VL="        "_$J(YEAR2,2)
	do VP1 quit:VFMQ!verror.get()  set V=$J(NR4REC,1)
	set VL=VL_$J("",14-VL.length())_V
	do VP2 quit:VFMQ!verror.get()  set V=$E(CCODE,1,3)
	set VL=VL_$J("",20-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(NRTRN,1,9)
	set VL=VL_$J("",25-VL.length())_V
	do VP4 quit:VFMQ!verror.get()  set V=$E(ACCNUM,1,12)
	set VL=VL_$J("",36-VL.length())_V
	set VL=VL_$J("",53-VL.length())_$S(vp4=3:"********************",1:$J(vc4,20))
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	do VP5 quit:VFMQ!verror.get()  set V=$E(INCD1,1,3) set VL="          "_V
	do VP6 quit:VFMQ!verror.get()  set V=$E(CRCD,1,3)
	set VL=VL_$J("",18-VL.length())_V
	set VL=VL_$J("",27-VL.length())_$S(+DIST1=0:$J("",12),1:$J($FN(DIST1,",",2),12))
	set VL=VL_$J("",45-VL.length())_$S(+WHLD1=0:$J("",12),1:$J($FN(WHLD1,",",2),12))
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="          "_$E(INCD2,1,3)
	do VP7 quit:VFMQ!verror.get()  set V=$E(CRCD,1,3)
	set VL=VL_$J("",18-VL.length())_V
	set VL=VL_$J("",27-VL.length())_$S(+DIST2=0:$J("",12),1:$J($FN(DIST2,",",2),12))
	set VL=VL_$J("",45-VL.length())_$S(+WHLD2=0:$J("",12),1:$J($FN(WHLD2,",",2),12))
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="      "_$E(CAD(0),1,34)
	do VOM
	set VL="      "_$E(CAD(1),1,34)
	do VP8 quit:VFMQ!verror.get()  set V=$E(CNAME,1,34)
	set VL=VL_$J("",42-VL.length())_V
	do VOM
	set VL="      "_$E(CAD(2),1,34)
	do VP9 quit:VFMQ!verror.get()  set V=$E(AD(0),1,34)
	set VL=VL_$J("",42-VL.length())_V
	do VOM
	set VL="      "_$E(CAD(3),1,34)
	set VL=VL_$J("",42-VL.length())_$E(AD(1),1,34)
	do VOM
	set VL="      "_$E(CAD(4),1,34)
	set VL=VL_$J("",42-VL.length())_$E(AD(2),1,34)
	do VOM
	set VL="      "_$E(CAD(5),1,34)
	set VL=VL_$J("",42-VL.length())_$E(AD(3),1,34)
	do VOM
	set VL="      "_$E(CAD(6),1,34)
	do VOM
	set VL="      "_$E(CAD(7),1,34)
	do VOM
	set VL="" do VOM
	set VL="    "_$E(CAD(8),1,40)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %BLK,%MSKD,%NOCLOSE,%NOOPEN,%TIM,A(),ACCNUM,ACN,ACNRELC,AD(),BOO,CAD(),CCODE,CID,CNAME,CONAM,CRCD,DATA(),DIST1,DIST2,INCD1,INCD2,IO,IOPAR,IOTYP,MYQRY,NR4REC,NRTRN,PGM,REPDI,RID,RN,RPASEQ,SEQ,SIO,SLIPCNT,TMP(),VL,WHLD1,WHLD2,YEAR,YEAR2,acn,fIRATYPE,fNR4DINF,vc1,vc10,vc11,vc12,vc13,vc14,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vp4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	use IO if 'VLC,'vcrt set $Y=1
	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: NR4REC

 /* Retrieve the recipient type from the latest account since each account
  for the customer should have the same recipient code.*/

 type public Number ACN,NR4REC
 type public String ACNRELC
 set NR4REC="" 
 do ZDATABLD
 if ACNRELC do {
 	type RecordRELCODE1 relcode1=Db.getRecord("RELCODE1","REL=:ACNRELC",1)
 	set NR4REC=relcode1.nr4rec
	}
 else  quit
	quit

VP2	// Column pre-processor - Variable: CCODE

	type public String vc1,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13
 type public Number ACN,OK,X
 type Number I
 type public String CAD(),CTRY,XCTRY,CNTRY,CCODE,COUNTRY,NCOUNTRY,LADDR,ZIP,ZAD,ZX

 if 'vc1 quit
 if vc5="" set CCODE="OMC"
 else  do {
	set CNTRY=vc5
	type RecordSTBLCNTRY stbcnty=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY")
	set CCODE=stbcnty.isoc
	}

 for I=0:1:8 set CAD(I)=""
 
 set CAD(2)=vc6
 set CAD(3)=vc7
 set CAD(4)=vc8_", "_vc9
 set XCTRY=vc10
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")

 if XCTRY=cuvar.cntry set CTRY=""
 else  if 'XCTRY.isNull() do {
	type RecordSTBLCNTRY stbcnty=Db.getRecord("STBLCNTRY","CNTRY=:XCTRY")
 	set CTRY=stbcnty.isoc
	}

 set ZIP=vc11
 set CAD(5)=ZIP_$J("",12-ZIP.length())_CTRY
 for I=0:1:5 set CAD(I)=CAD(I).extract(1,34)
 
 //find title for the primary owner

 set ZX=""
 if vc1>0 set CAD(0)=vc12
 
 // find the primary owners country code. 

 set COUNTRY="   "
 set NCOUNTRY=vc13 

 if 'NCOUNTRY.isNull() do {
	type RecordSTBLCNTRY stbcnty=Db.getRecord("STBLCNTRY","CNTRY=:NCOUNTRY")
	set COUNTRY=stbcnty.isoc
	}
	quit

VP3	// Column pre-processor - Variable: NRTRN

	type public String vc14
 type public Number BOO,NRTRN
 type public String BRCD()

 set BOO=vc14
 // Build DATA array to allow correct number of forms to be produced.
 //do ZDATABLD

 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")
 set NRTRN=utblbrcd.nrtrn
	quit

VP4	// Column pre-processor - Variable: ACCNUM

 type public String ACCNUM,DATA()
 type public Number SEQ

 set ACCNUM=DATA(SEQ).piece("|",7)
	quit

VP5	// Column pre-processor - Variable: INCD1

 type public String DATA(),DATA,INCD1,INCD2
 type public Number DIST1,DIST2,PLANID,RPASEQ,WHLD1,WHLD2

 set DATA=DATA(RPASEQ)
 set INCD1=DATA.piece("|",1)
 set DIST1=DATA.piece("|",2)
 set WHLD1=DATA.piece("|",3)
 set INCD2=DATA.piece("|",4)
 set DIST2=DATA.piece("|",5)
 set WHLD2=DATA.piece("|",6)
 set PLANID=DATA.piece("|",7)
	quit

VP6	// Column pre-processor - Variable: CRCD

 type public Number SLIPCNT
 type public String CRCD,CRCDCID,INCD1


 if INCD1="" set CRCD="" quit
 set CRCD=CRCDCID.get()
 set SLIPCNT=SLIPCNT.get()+1
	quit

VP7	// Column pre-processor - Variable: CRCD

 type public String CRCD,CRCDCID,INCD2

 if INCD2="" set CRCD="" quit
 set CRCD=CRCDCID.get()
	quit

VP8	// Column pre-processor - Variable: CNAME

 type public String CNAME

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CNAME=cuvar.cname
	quit

VP9	// Column pre-processor - Variable: AD(0)

 type Number I,J
 type public String AD(),BRCDTB,CCITY,CSTATE,CZIP,TSTAD()
 
 // Set up the AD array with the customer's institution name and address.
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR") 
 set TSTAD(0)=cuvar.cad1
 set TSTAD(1)=cuvar.cad2
 set TSTAD(2)=cuvar.cad3
 set CCITY=cuvar.ccity
 set CSTATE=cuvar.cstate
 set CZIP=cuvar.czip
 set TSTAD(3)=CCITY_", "_CSTATE_" "_CZIP
 
 /*Copy all records with information from the TSTAD array to the AD array.
 This will delete any blank lines in between the address line.*/

 set J=0
 for I=0:1:3 do {
 	set AD(I)=""
 	if '((TSTAD(I).get()).isNull()) set AD(J)=TSTAD(I),J=J+1
	}

	quit
