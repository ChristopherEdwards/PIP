MAPMPROP(RecordSYSMAPMPROPS sysmapmprops, String vpar, Boolean vparNorm) // SYSMAPMPROPS - Mapping of M properties read or set Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              01/21/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = sysmapmprops.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(sysmapmprops,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(sysmapmprops,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TARGET").exists()!vx("LABEL").exists()!vx("GLOBALREF").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SYSMAPMPROPS",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SYSMAPMPROPS","TARGET = :sysmapmprops.target and LABEL = :sysmapmprops.label and GLOBALREF = :sysmapmprops.globalref") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TARGET
	type public String LABEL
	type public String GLOBALREF

	type RecordSYSMAPMPROPS sysmapmprops = Db.getRecord("SYSMAPMPROPS","TARGET=:TARGET,LABEL=:LABEL,GLOBALREF=:GLOBALREF")
	if (%ProcessMode = 2) do {
		do sysmapmprops.setMode(2)

		do MAPMPROP(sysmapmprops,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSYSMAPMPROPS sysmapmprops

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SYSMAPMPROPS","TARGET = :sysmapmprops.target and LABEL = :sysmapmprops.label and GLOBALREF = :sysmapmprops.globalref") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(sysmapmprops)) S ^SYSMAP("DATA",vobj(sysmapmprops,-3),vobj(sysmapmprops,-4),"G",vobj(sysmapmprops,-5))=vobj(sysmapmprops)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSYSMAPMPROPS sysmapmprops


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^SYSMAP("DATA",vobj(sysmapmprops,-3),vobj(sysmapmprops,-4),"G",vobj(sysmapmprops,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordSYSMAPMPROPS sysmapmprops

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSYSMAPMPROPS sysmapmprops

	if sysmapmprops.target.isNull() do vreqerr("TARGET") quit
	if sysmapmprops.label.isNull() do vreqerr("LABEL") quit
	if sysmapmprops.globalref.isNull() do vreqerr("GLOBALREF") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SYSMAPMPROPS","MSG",1767,"SYSMAPMPROPS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSYSMAPMPROPS sysmapmprops

	if sysmapmprops.target.length()>31 set vRM = $$^MSG(1076,31) do vdderr("TARGET", vRM) quit
	if sysmapmprops.label.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LABEL", vRM) quit
	if sysmapmprops.globalref.length()>30 set vRM = $$^MSG(1076,30) do vdderr("GLOBALREF", vRM) quit
	set X = sysmapmprops.countread if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("COUNTREAD", vRM) quit
	set X = sysmapmprops.countset if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("COUNTSET", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SYSMAPMPROPS","MSG",979,"SYSMAPMPROPS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSYSMAPMPROPS sysmapmprops

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TARGET").exists() set vux("TARGET") = vx("TARGET")
	if vx("LABEL").exists() set vux("LABEL") = vx("LABEL")
	if vx("GLOBALREF").exists() set vux("GLOBALREF") = vx("GLOBALREF")
	do vkey(1) set voldkey = sysmapmprops.target_","_sysmapmprops.label_","_sysmapmprops.globalref // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = sysmapmprops.target_","_sysmapmprops.label_","_sysmapmprops.globalref // Copy new keys into object
	type RecordSYSMAPMPROPS vnewrec = sysmapmprops.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SYSMAPMPROPS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSYSMAPMPROPS sysmapmprops

	if vux("TARGET").exists() set sysmapmprops.target = vux("TARGET").piece("|",i)
	if vux("LABEL").exists() set sysmapmprops.label = vux("LABEL").piece("|",i)
	if vux("GLOBALREF").exists() set sysmapmprops.globalref = vux("GLOBALREF").piece("|",i)
	quit
