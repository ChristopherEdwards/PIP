UTLTTX	// Utility to create TTX file (test)
	/*

	---- Revision History ------------------------------------------------
	
	05/31/05 - SmithCD - CR 15902
		   Modified KEY section to default TPD to current system date.
	
	12/01/04 - JERUCHIMC - 13019
	           
	
	12/30/03 - CARROLLJ - CR7658
		   Corrected precedence errors.

	05/29/03 - GRAY - 51351
		   Converted to PSL.  Removed old revision history.

	12/02/02 - BECKERJ - 51150
	           Added code to FILE and END section to handle the
	           possibility of a user entering an EFD to T+1 into UTLTTX
	           when using transaction date of T.

	*/

	type Number BRCD,CID,ER
	type String %READ
	type String %TAB
	
	
	type String %UserID
	type String CLS
	type String DFID
	type String ET
	type String ETC
	type String GRP
	type String ITC
	type String OLNTB
	type String SVCID
	type String VFMQ
	type public String UTLO
	type public String %NOPRMT

	do SYSVAR^SCADRV0()
	quit:($$DISCLAIM^TBX()=0)

	set DFID="TTX" set SVCID=""
	do ^UTLO set %UserStation=UTLO
	do KEY
	quit


KEY	// Access keys

	type public String VFMQ
	type public String %NOPRMT
	
	type Date TPD=%SystemDate
			
	type String %READ
	type String %TAB
	type String ET
	
	set %TAB("TPD")=".XJD1/MIN="_%SystemDate
	set %TAB("BRCD")=".BRCD1"
	set %TAB("%UID")=".UID1/TBL=[SCAU]"
	set %TAB("SRC")=".SRC9/TBL=[CTBLINC]"

	set %READ="@@%FN,,,TPD/REQ,BRCD/REQ,%UID/REQ,SRC" set %NOPRMT="F"
	do ^UTLREAD if VFMQ="Q" quit

	type RecordSCAU scau=Db.getRecord("SCAU","UID=:%UserID",1)
	// Invalid user
	if 'scau.getMode() set ET="INVLDUID" do DSPBP^UTLERR do KEY quit

DTL	// Detail

	 
	type String CID
	type String CLS
	type String ER
	type String ETC
	type String GRP
	type String ITC

	set %TAB("CID")=".CID1"
	set %TAB("ETC")=".TRN1/TBL=[TRN]"
	set %TAB("TAMT")=".TAMT3"
	set %TAB("EFD")=".EFD1"
	set %TAB("TSO")=".TSO1"
	set %TAB("TCMT")=".TCMT1"

	set %READ="CID,ETC/REQ,TAMT/REQ,EFD,TSO/LEN=40,TCMT"
	do ^UTLREAD if VFMQ="Q" do END quit
	
	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
	// Invalid transaction code
	if 'trn.getMode() set ET="INVLDTC" do DSPBP^UTLERR do DTL quit

	// SYSTEM USE
	if ETC="ROCR"!(ETC="RODR") set ET=$$^MSG(5374) do DSPBP^UTLERR do DTL quit

	set CLS=trn.cls 
	set GRP=trn.grp
	set ITC=trn.itc

	if ETC="TSDR" set CID=scau.tsdr
	if ETC="TSCR" set CID=scau.tscr

	set ER=0

	// Default Account Number
	if CLS="M",CID="" set CID=trn.acn

	do VER(.trn) if ER do DSPBP^UTLERR do DTL quit

	do FILE

	do DTL
	
	quit


FILE	//

	type public Date TPD
	type Number TRC
	type public Date %EffectiveDate
	type public Number BRCD
	type public Number CID
	type public String DATE()
	type public String CRCD
	type public String ETC
	type public String ITC
	type public String SVCID()
	type public String TAMT
	type public String TCMT
	type public String TLO
	type public String TSO
	type public String %UserID

	if %EffectiveDate=%SystemDate set %EffectiveDate=""
	if %EffectiveDate>%SystemDate set TPD=%EffectiveDate

	if 'SVCID(TPD).data() set SVCID(TPD)=""

	set TRC=Db.nextVal("TTX","TJD=:TPD,BRCD=:BRCD,UID=:%UserID")

	if CID-SVCID(TPD) set TRC=(((TRC\1000)+1)*1000)+1 set SVCID(TPD)=CID
	
	type RecordTTX ttx=Class.new("RecordTTX")
	set ttx.tjd=TPD
	set ttx.brcd=BRCD
	set ttx.uid=%UserID
	set ttx.tseq=TRC

	set ttx.cid=CID
	set ttx.itc=ITC
	set ttx.etc=ETC
	set ttx.tamt=TAMT
	set ttx.efd=%EffectiveDate
	set ttx.tlo=%UserStation
	set ttx.tso=TSO
	set ttx.tcmt=TCMT
	set ttx.cdt=%CurrentDate
	set ttx.tim=%CurrentTime

	#IF CUVAR.%MCP if CRCD'=%SystemCurrency  set ttx.crcd=CRCD

	do ttx.bypassSave()

	set DATE(TPD)=""

	quit


VER(RecordTRN trn)	// Verify input
	
	type String PGM
	type public Number CID
	type public Number ER
	type public String CLS
	type public String CRCD
	type public String ET
	type public String GRP

	// Invalid account
	if CID="" set ER=1 set ET="INVLDACN" quit

	if CLS="M" do { quit
		type RecordGLAD glad=Db.getRecord("GLAD","ACN=:CID",1)
		// Invalid account
		if 'glad.getMode() set ER=1 set ET="INVLDACN" quit

		// Default currency
		#IF CUVAR.%MCP set CRCD=%SystemCurrency
		}

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	// Invalid account
	if 'acn.getMode() set ER=1 set ET="INVLDACN" quit

	// Posting Program
	set PGM=trn.pgm

	if '((CLS="*") & ("^CRTCH|^TTXHLD|^SRVADJ|^FLTCHKHD"[PGM)) do { quit:ER
		// Invalid product class
		if acn.cls'=CLS set ER=1 set ET="INVLDCLS" quit

		// Invalid product group
		if acn.grp'=GRP set ER=1 set ET="INVLDGRP" quit
		}

	#IF CUVAR.%MCP set CRCD=acn.crcd

	quit


END	//

	type Date XTJD
	type Number TRC
	type String CRCD
	type String GL
	type String ITC
	type String TAMT
	type public Date %EffectiveDate
	type public String TPD
	type public Number BRCD
	type public String %UserID
	type public String DATE()
	type public String SRC
	type public String TCMT
	type public String TSO

	set XTJD=""
	for  set XTJD=DATE(XTJD).order() quit:XTJD=""  do {
		type RecordTTXUID ttxuid=Db.getRecord("TTXUID","TJD=:XTJD,BRCD=:BRCD,UID=:%UserID",1)
		if 'ttxuid.getMode() set ttxuid.lpseq="" 
		set ttxuid.src=SRC.get()
		set TRC=(ttxuid.lpseq+1)*1000
		do ttxuid.bypassSave()
		
		type DbSet ds=Db.selectDbSet("TTX","TJD=:XTJD AND BRCD=:BRCD AND UID=:%UserID and TSEQ>:TRC")
		while ds.next() do {
			type RecordTTX ttx=ds.getRecord("TTX")
			set ITC=ttx.itc if ITC="" quit
			set TAMT=ttx.tamt if 'TAMT quit
			set CRCD=ttx.crcd if CRCD="" set CRCD=%SystemCurrency
			set GL(CRCD,ITC.extract())=GL(CRCD,ITC.extract()).get()+TAMT
			}

		set (EFD,TSO,TCMT)=""
		set TPD=XTJD

		set CRCD=""
		for  set CRCD=GL(CRCD).order() quit:CRCD=""  do {
			if GL(CRCD,0).get() set TAMT=GL(CRCD,0) do ROCR^UMSC
			if GL(CRCD,1).get() set TAMT=GL(CRCD,1) do RODR^UMSC
			}
		}
	quit

vSIG()	quit "60051^63735^Chad Smith^5411"	// Signature - LTD^TIME^USER^SIZE
