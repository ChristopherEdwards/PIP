PROCLBB		/*        
               DESC: Performs verification checks on low balance columns.
        
         EXAMPLE:
               do ALL^PROCLBB(dep.ircb,dep.ipf,dep.lbcp,dep.lbcm) quit:ER
	
	  ------------ Revision History --------------------------------------
	  
	  07/19/07 -  Anitha Chandran - CR 28313
	  	      Modified CHK2FRE section to insert a condition check
	  	      if an error is set to quit with 0 from the 'if' loop.
	  	      Also, removed "quit OK" condition at the end of 'if' 
	  	      loop.
	  	      
	  11/16/05 -  Srinivar - CR 16890
	  	      Modified the ALL section to change the scope of 
	  	      variable ER to avoid the undefined error.	
	  
	   02/01/05 - SmithCD - CR 13661
	   	      Modified to conform to current standards. Removed DEPIPF 
	   	      section, which is no longer used. Removed old revision 
	   	      history.
	
	*/

        quit
 

public	ALL(IRCB,IPF,LBCP,LBCM) // Perform all low balance checks

	type public Boolean ER
 
        do IPF(IPF,IRCB) quit:ER
        do LBCP(LBCP,IPF,IRCB) quit:ER
        do LBCM(LBCM,LBCP,IRCB,IPF) quit:ER
        
        quit

       
IPF(IPF,IRCB) // Validate Int Posting Frequency for Low Balance

	type public Boolean ER
	
	type Number AF,POS
	type String FRE
	type Date NJD
       
        if IRCB'=5,IRCB'=6 quit                // Must be low balance
 
        // Frequency required when Interest Rate Calc Base indicates low balance
        if IPF.isNull() do Runtime.setErrMSG("DEP",2128) quit:ER  
	
 
	type RecordUSRFRE usrfre=Db.getRecord("USRFRE","UFRE=:IPF",1)
	if usrfre.getMode() set FRE=usrfre.fre
	else  set FRE=IPF

        set AF=""

	/*
        User-defined frequency must be based on standard PROFILE frequency
        for low balance processing)
	*/

        // Frequency ~p1 invalid for low balance
        if FRE.isNull() do Runtime.setErrMSG("DEP",1124,IPF) quit:ER 0
 
        set AF=""

        // Validate frequency as a standard frequency
        set NJD=%SystemDate.nextFreqDate(FRE,.AF) quit:ER 0
 
        if +FRE do {
                if +FRE.extract(2) set POS=3
                else  set POS=2
                }
        else  set POS=1
 
	/*
        If period does not end on an exact day of the period, it must end on
        the last day of the period.
	*/

        // Frequency ~p1 invalid for low balance
        if 'FRE.extract(POS+2,99),(FRE.extract(POS+2,99)'="E") do Runtime.setErrMSG("DEP",1124,FRE) quit:ER
 
	/* 
        Must contain M, Q, S or Y (i.e. must be a multiple of monthly) and
        must contain A, N or P
	*/

        // Frequency ~p1 invalid for low balance
        if "M,Q,S,Y"'[FRE.extract(POS)!("A,N,P"'[FRE.extract(POS+1)) do Runtime.setErrMSG("DEP",1124,FRE) quit:ER
 
	/*
        5YAE  AF =  .2   valid frequency
        5MAE  AF = 2.4   invalid frequency
        (Posting frequency is less than a year, validate that it is a monthly
         period)
	*/

	// Frequency ~p1 invalid for low balance
        if AF>1,AF#1 do Runtime.setErrMSG("DEP",1124,FRE) quit:ER

        quit
	
	
public	PRODIPF(IPF,RecordPRODDFTD proddftd)
	// Validate Interest Posting Frequency for Low Balance (DTYPE)

	type public Boolean ER
	
	type Number POS
	type String FRE
	type Date NJD

	if proddftd.ircb'=5,proddftd.ircb'=6 quit 
	
	// Frequency required when Interest Rate Calculation Base set to 5
	if IPF.isNull() do Runtime.setErrMSG("DEP",2128) quit:ER 
	
	type RecordUSRFRE usrfre=Db.getRecord("USRFRE","UFRE=:IPF",1)
	if usrfre.getMode() set FRE=usrfre.fre
	else  set FRE=IPF

	// Frequency required when Interest Rate Calculation Base set to 5
	if FRE.isNull() do Runtime.setErrMSG("DEP",2128) quit:ER 
	
	if +FRE do {
		if +FRE.extract(2) set POS=3
		else  set POS=2
		}

	else  set POS=1
	
	// If a semiannually frequency is input, convert it to every 6M
	if FRE.extract(POS)="S",+FRE<2 set FRE="6M"_FRE.extract(POS+1,99)
	
	// Validate frequency as a standard frequency
	set NJD=%SystemDate.nextFreqDate(FRE) quit:ER
	
	// Invalid frequency
	if 'FRE.extract(POS+2,99),(FRE.extract(POS+2,99)'="E") do Runtime.setErrMSG("DEP",1353) quit:ER 

	// Invalid frequency
	if "M,Q,S,Y"'[FRE.extract(POS)!("A,N,P"'[FRE.extract(POS+1)) do Runtime.setErrMSG("DEP",1353) quit:ER 
	
	set IPF=FRE

	quit 
	
       
LBCP(LBCP,IPF,IRCB) // Low Balance Calculation Period validation

	type public Boolean ER

	type Number IPAF,LBCPAF
	type Date INP
	type String MFRE
       
        if IRCB'=5,IRCB'=6 quit                // Must be low balance
 
        // Low Balance Calculation Period and Method required for low balance
        if LBCP.isNull() do Runtime.setErrMSG("DEP",4179) quit:ER
 
        // Frequency required when Interest Rate Calc Base indicates low balance
        if IPF.isNull() do Runtime.setErrMSG("DEP",2128) quit:ER
 
        set IPAF=""
        set INP=%SystemDate.nextFreqDate(IPF,.IPAF) quit:ER
 
        set LBCPAF=$$LBCAF(LBCP)
 
        // Low Balance Calculation Period not within Interest Posting Frequency
        if IPAF>LBCPAF do Runtime.setErrMSG("DEP",2148) quit:ER

        set MFRE=$$MFRE^DEPLBB(IPF)

        //Low Balance Calculation Period not within Interest Posting Frequency
        if '$$CHK2FRE(MFRE,IPF,0) do Runtime.setErrMSG("DEP",2148) quit:ER

        //Low Balance Calculation Period not within Interest Posting Frequency
        if '$$CHK2FRE(MFRE,IPF,1) do Runtime.setErrMSG("DEP",2148) quit:ER
        
	quit

LBCM(LBCM,LBCP,IRCB,IPF) // Low Balance Calculation Method validation

	type public Boolean ER
	
	type Number LBCMAF,LBCPAF
       
        if IRCB'=5,IRCB'=6 quit                // Must be low balance
 
        // Low Balance Calculation Period and Method required for low balance
        if LBCM.isNull()!(LBCP.isNull()) do Runtime.setErrMSG("DEP",4179) quit:ER
 
        set LBCMAF=$$LBCAF(LBCM)
        set LBCPAF=$$LBCAF(LBCP)
 
        // Low Balance Calculation Method not within the Calculation Period
        if LBCPAF>LBCMAF do Runtime.setErrMSG("DEP",4177) quit:ER
        if LBCP'=3 quit
        
	/*
        Automatic "1SA15-31" for semi-monthly already checked in LBCP()
        Low Balance Calculation Period not within Interest Posting Frequency
	*/
        if '$$CHK2FRE("1SA15-31",IPF,0) do Runtime.setErrMSG("DEP",2148) quit:ER

        //Low Balance Calculation Period not within Interest Posting Frequency
        if '$$CHK2FRE("1SA15-31",IPF,1) do Runtime.setErrMSG("DEP",2148) quit:ER

        quit
 
       
public	LBCAF(LBCP) // Low Balance Calculation Period/Method Annual Factor
        
        if LBCP=0 quit 12                      // Monthly
        if LBCP=1 quit 1                       // Annually
        if LBCP=2 quit 6                       // Semi-Annually
        if LBCP=3 quit 24                      // Semi-Monthly
        if LBCP=4 quit 3                       // Quarterly
 
        quit ""                                // Other


CHK2FRE(SECFRE,MASFRE,DIR)
        /* Secondary frequencies must be a subset of master frequency
        
         ARGUMENTS:
        
               . SECFRE        Secondary frequency     /TYP=F/REQ
        
               . MASFRE        Master frequency        /TYP=F/REQ
        
               . DIR           Direction               /TYP=L/REQ
                               0 = Forward
                               1 = Backward
        
         RETURNS:
               . $$            Success flag            /TYP=L
                               0 = Problem
                              1 = OK
        */
        
        type public Boolean ER
        
        type Date END,HITDATE,NJD,START
        type Boolean OK
        
        set OK=1
        set ER=0
        set (START,NJD)=$$^SCAJD("1/1","MM/YY")   //First day of year
        if DIR do { quit:ER 0
                  set END=START-365                   //One year prior

                  //Find all date hits for secondary frequency
                  for  set NJD=NJD.nextFreqDate(SECFRE,,DIR) quit:NJD<END!ER  set HITDATE(NJD)=""
                  if ER set OK=0 quit
		  
        	  set NJD=START

        	  // Find all date hits for master frequency
        	  for  set NJD=NJD.nextFreqDate(MASFRE,,DIR) quit:NJD<END!ER  if 'HITDATE(NJD).data()  set OK=0 quit:OK
        	  if ER set OK=0 quit
		  } 
	
        set END=START+365

        //Find all date hits for secondary frequency
        for  set NJD=NJD.nextFreqDate(SECFRE) quit:NJD>END!ER.get()  set HITDATE(NJD)=""
        if ER quit 0
        
        set NJD=START

        //Find all date hits for master frequency
        for  set NJD=NJD.nextFreqDate(MASFRE) quit:NJD>END!ER.get()  if '$D(HITDATE(NJD)) set OK=0 quit
        if ER quit 0
        
        quit OK
 #OPTION ResultClass ON
Public String vSIG()	quit "60835^15930^Anitha Chandran^8388"	// Signature - LTD^TIME^USER^SIZE
