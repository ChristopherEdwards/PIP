IRATYPFL(RecordIRATYPE iratype, String vpar, Boolean vparNorm) // IRATYPE - Retirement Plan Account Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (84)             08/22/2006
	// Trigger Definition (13)                     09/21/2006
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = iratype.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(iratype,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(iratype,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = iratype.acn
	type String RPASEQ = iratype.rpaseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("RPASEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("IRATYPE",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("IRATYPE","ACN = :iratype.acn and RPASEQ = :iratype.rpaseq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String RPASEQ

	type RecordIRATYPE iratype = Db.getRecord("IRATYPE","ACN=:ACN,RPASEQ=:RPASEQ")
	if (%ProcessMode = 2) do {
		do iratype.setMode(2)

		do IRATYPFL(iratype,vpar)
	}
	else  do VINDEX(iratype)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordIRATYPE iratype

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("IRATYPE","ACN = :iratype.acn and RPASEQ = :iratype.rpaseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(iratype))  S ^IRA(vobj(iratype,-3),vobj(iratype,-4))=vobj(iratype)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL^IRATYPF0(.iratype)             // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.iratype) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordIRATYPE iratype

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.iratype)                  // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL^IRATYPF0(.iratype)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^IRA(vobj(iratype,-3),vobj(iratype,-4))            // Delete Record
	quit


vinit // Initialize default values

	type public RecordIRATYPE iratype

	// Type local variables for access keys for defaults
	type public String ACN
	type public String RPASEQ

	if iratype.autnot.isNull() set iratype.autnot = 0      // autnot
	if iratype.lock.isNull() set iratype.lock = 0          // lock
	if iratype.madsat.isNull() set iratype.madsat = 0      // madsat
	if iratype.maxpay.isNull() set iratype.maxpay = 0      // maxpay
	if iratype.minpay.isNull() set iratype.minpay = 0      // minpay
	if iratype.nonbndis.isNull() set iratype.nonbndis = 0  // nonbndis
	if iratype.rflg.isNull() set iratype.rflg = 0          // rflg
	if iratype.rspwind.isNull() set iratype.rspwind = 0    // rspwind
	if iratype.taxind.isNull() set iratype.taxind = 0      // taxind
	if iratype.yeflg.isNull() set iratype.yeflg = 0        // yeflg
	quit


vreqn // Validate required data items

	type public RecordIRATYPE iratype

	if iratype.autnot.isNull() do vreqerr("AUTNOT") quit
	if iratype.iratyp.isNull() do vreqerr("IRATYP") quit
	if iratype.lock.isNull() do vreqerr("LOCK") quit
	if iratype.madsat.isNull() do vreqerr("MADSAT") quit
	if iratype.maxpay.isNull() do vreqerr("MAXPAY") quit
	if iratype.minpay.isNull() do vreqerr("MINPAY") quit
	if iratype.nonbndis.isNull() do vreqerr("NONBNDIS") quit
	if iratype.planid.isNull() do vreqerr("PLANID") quit
	if iratype.rflg.isNull() do vreqerr("RFLG") quit
	if iratype.rspwind.isNull() do vreqerr("RSPWIND") quit
	if iratype.taxind.isNull() do vreqerr("TAXIND") quit
	if iratype.yeflg.isNull() do vreqerr("YEFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordIRATYPE iratype

	if iratype.acn.isNull() do vreqerr("ACN") quit
	if iratype.rpaseq.isNull() do vreqerr("RPASEQ") quit

		if vx("AUTNOT").exists(),iratype.autnot.isNull() do vreqerr("AUTNOT") quit
		if vx("IRATYP").exists(),iratype.iratyp.isNull() do vreqerr("IRATYP") quit
		if vx("LOCK").exists(),iratype.lock.isNull() do vreqerr("LOCK") quit
		if vx("MADSAT").exists(),iratype.madsat.isNull() do vreqerr("MADSAT") quit
		if vx("MAXPAY").exists(),iratype.maxpay.isNull() do vreqerr("MAXPAY") quit
		if vx("MINPAY").exists(),iratype.minpay.isNull() do vreqerr("MINPAY") quit
		if vx("NONBNDIS").exists(),iratype.nonbndis.isNull() do vreqerr("NONBNDIS") quit
		if vx("PLANID").exists(),iratype.planid.isNull() do vreqerr("PLANID") quit
		if vx("RFLG").exists(),iratype.rflg.isNull() do vreqerr("RFLG") quit
		if vx("RSPWIND").exists(),iratype.rspwind.isNull() do vreqerr("RSPWIND") quit
		if vx("TAXIND").exists(),iratype.taxind.isNull() do vreqerr("TAXIND") quit
		if vx("YEFLG").exists(),iratype.yeflg.isNull() do vreqerr("YEFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRATYPE","MSG",1767,"IRATYPE."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("AUTAMT").exists()!vx("RSPWCALC").exists()!vx("RSPWIND").exists()!vx("RSPWSCH").exists()!vx("WTHAMT").exists()!vx("WTHPCT").exists()!vx("STWHAMT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("BTC").exists()!vx("JTC").exists()!vx("MADSDOB").exists()!vx("PTC").exists() do vau8 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("DISMTC").exists()!vx("DISCID").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("IRATYP").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MZIP").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PLANID").exists()!vx("EMPLRCIF").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RPZIP").exists() do vau7 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordIRATYPE iratype
	if vx("").order().isNull() do AUDIT^UCUTILN(iratype,.vx(),1,"|") quit
	if vx("IRATYP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("RSPMADO").exists()!vx("MADPCT").exists()!vx("RSPMADB").exists()!vx("MADSDOB").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(iratype,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordIRATYPE iratype
	/*
	 -------------- Revision History ---------------------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Added code to validate ZIP code column associated with 
		   retirement plan.

	03/01/06 - DHANALAKSHMI R - 19826
		   Modified by replacing the condition iratype.autnot="" with 
		   'iratype.autnot since this field is a logical field and 
		   will never be null.

	10/17/05 - DHANALAKSHMI R - 16851
		   Replaced the index file XREFRPASEQ with the base file DEP.

	06/18/02 - PREMKUMARM - 48761:05
		   Modified the If condition.Now if RSPMADO is 1(US calculation)
		   then the valid age base options are 11,20,21,22,23,24,25,26,27 OR
 		   30 and if RSPMADO is 2 (Canadian calculation) then the valid age
		   base options are 0,1,2,3 or 4.
	
	02/26/02 - ANTONOVS - 46454
		   Trigger was modified to add a State Withholding amount to a
		   Federal withholding in order to compare it with automatic
		   distribution amount.

	12/11/00 - HALPINJ - 41966:01
		   Added code to require withholding parameters when the
		   withholding flag is set to Y.

	08/01/00 - ROYTENBERGG - 41334
		   Added check to allow insert PLANID for RPA Type - Keogh PSP 
		   and RPA Type - Keogh MPP. For RPA Types - Keogh PSP and
		   Keogh MPP PLANID can be the same.

	04/06/00 - HALPINJ - 36689
		   Modified trigger so that when the withholding amount and/or
		   auto distribution amount are entered when creating an RPA plan
		   it will make sure the withholding amount is not greater than 
		   or equal to the amount of the auto distribution.	

	10/05/99 - MOTENJ - 31126
		   Converted to PSL.

	05/03/99 - CARROLLJ - 31428
		   Modified check on RSPMADO to consider the eight new MAD
		   calculations.
	
	*/	

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Retirement Plan
	do ZIP^PROCZIP(iratype.rpcntry, iratype.rpstate, iratype.rpzip)
	if ER.get() do Runtime.setErrMSG("IRATYPE", 3333, RM) quit:ER

	// LIFPCT Required for IRATYPE 7
	
	if iratype.iratyp=7,iratype.lifpct="" do Runtime.setErrMSG("IRATYPE",1767," - LIFPCT") if ER quit 
	
	// RSPMADO Minimum Annual Distribution Option (optin 2 - Canadian)
	
	if iratype.rspmado=2 do { quit:ER 
		if 'iratype.madpct do Runtime.setErrMSG("IRATYPE",1767,"- MADPCT") if ER quit    	  				// Calc option required
		if iratype.rspmadb>4 do Runtime.setErrMSG("IRATYPE",934) if ER quit         				// Age calculation
		if iratype.rspmadb=4,iratype.madsdob="" do Runtime.setErrMSG("IRATYPE",1767,"- MADSDOB") if ER quit      		// Date of birth required
		}
	
	// RSPMADO Minimum Annual Distribution Option (optin 1)

	new X
	if iratype.rspmado=1 do { quit:ER 
		set X=iratype.rspmadb
		if (X=11)!(X=20)!(X=21)!(X=22)!(X=23)!(X=24)!(X=25)!(X=26)!(X=27)!(X=30) quit 
		do Runtime.setErrMSG("IRATYPE",934) if ER quit 								// Age calculation
		}
	
	// AUTFRE,AUTDND,AUTOPT Auto-distribution (single set)
	
	do { quit:ER 
		if iratype.autfre="",iratype.autdnd="",iratype.autopt="",'iratype.autnot quit 
		if iratype.autfre'="",iratype.autdnd'="",iratype.autopt'="" quit 
		do Runtime.setErrMSG("IRATYPE",1767," - AUTFRE AUTDND AUTOPT AUTNOT") if ER quit         						// Required
		}

	 
	// RSPWIND					// JMH - 12/08/00

	if iratype.rspwind=1 do { quit:ER
		// Plan set for withholding, calculation parameters required
		if iratype.rspwcalc="",iratype.wthpct="",iratype.wthamt="",iratype.rspwsch="" do Runtime.setErrMSG("IRATYPE",1109) quit:ER
		}

	// AUTAMT & DISAMT				// JMH - 04/06/00

	new AMT
	if iratype.stwhamt set AMT=iratype.stwhamt
	else  set AMT=0
	if iratype.autamt,((iratype.wthamt+AMT)'<iratype.autamt) do Runtime.setErrMSG("IRATYPE",4310,iratype.autamt) if ER quit

	// DISMTC,DISCID Only one required
	
	if iratype.autfre'="" do { quit:ER 
		if iratype.dismtc="",iratype.discid="" do Runtime.setErrMSG("IRATYPE",917) if ER quit 
		if iratype.dismtc'="",iratype.discid'="" do Runtime.setErrMSG("IRATYPE",917) if ER quit
		}
	
	// DISMTC check name, address as one group
	
	if iratype.dismtc'="" do { quit:ER 
		if iratype.name1'="",iratype.ad1'="",iratype.city'="",iratype.state'="",iratype.cntry'="" quit 
		do Runtime.setErrMSG("IRATYPE",1767," - NAME1 AD1 CITY STATE CNTRY") if ER quit 
		}
	
	// MZIP Check zip code range
	
	if iratype.cntry'="" do { quit:ER 
		do ZIP^PROCZIP(iratype.cntry,iratype.state,iratype.mzip)
		if $G(ER) do Runtime.setErrMSG("IRATYPE",3333,RM) if ER quit 
		}
	
	// RSPWIND Required at least one RSPWCALC,WTHPCT,WTHAMT,RSPWSCH
	
	do { quit:ER 
		if 'iratype.rspwind quit 
		if iratype.rspwcalc="",iratype.wthpct="",iratype.wthamt="",iratype.rspwsch="" do Runtime.setErrMSG("IRATYPE",1767," - RSPWCALC WTHPCT WTHAMT RSPWSCH") if ER quit 
		}
	
	// DISMTC Verify tran code
	
	if iratype.dismtc'="" do { quit:ER 
		new XCHKTYP,XETC,v
		set XETC=iratype.dismtc
		
		// Invalid tran code
		if 'Db.isDefined("TRN","XETC") do Runtime.setErrMSG("IRATYPE",1498,XETC)        	  
			
		set v=Db.getOneRow("ITC,CLS,ACN,CKTYP","TRN","XETC") quit:ER
 		
		// Credit and CLS=M
		// Must be a miscellaneous credit tran

		if $P(v,$C(9),1),$P(v,$C(9),2)'="M" do Runtime.setErrMSG("IRATYPE",1793)	
			
		
		// Missing G/L account
		if $P(v,$C(9),3)="" do Runtime.setErrMSG("IRATYPE",916) 		       
		set XCHKTYP=$P(v,$C(9),4)

		//Enter a miscellaneous transaction code with a retirement plan account check type	      
		set v1=Db.getOneRow("IRA","UTBLCHKS","XCHKTYP") quit:ER 
		if 'v1 do Runtime.setErrMSG("IRATYPE",919) quit  // Missing check type
		
		}

	// Mandatory Age/No auto Distribution
	if (%ProcessMode=2) do {
		new XDISAGE,XIRATYP,XAGE,XSTAT,CID,data,vcnt
		set XIRATYP=iratype.iratyp quit:'XIRATYP 
		set XDISAGE=Db.getOneRow("DISAGE","UTBLRSPDEF","XIRATYP")
	
		quit:'XDISAGE 
		set XAGE=Db.getOneRow("AGE","CIF","ACN")
		if XAGE'<XDISAGE,iratype.autfre="",iratype.rspmado'=3 do {
				new rs
	 			type ResultSet rs=Db.select("CID,STAT","DEP","IRA>0 AND ACN=:ACN")
				if rs.isEmpty() quit
				while rs.next() if rs.getCol("STAT")'=4 do Runtime.setErrMSG("IRATYPE",3096) if ER quit 
				}
			}
	
	if %ProcessMode=2 quit 
	
	/*
	   Execute this section in create mode only
	   Create XPLID entry
	*/
	new XPLANID,year,XACN,XTAXYR
	set XACN=iratype.acn 
	set XRPASEQ=iratype.rpaseq
	set XPLANID=iratype.planid
	if 'Db.isDefined("XPLID","XPLANID") do Db.insert("XPLID","PLANID",":XPLANID")
	
	// Create IRA entries for prior year and current year
	
	// Current year
	set year=$$DAT^%ZM(%SystemDate,"YEAR")

	// Prior year           
	for XTAXYR=year-1,year do Db.insert("IRA","ACN,RPASEQ,TAXYR,D1",":XACN,:XRPASEQ,:XTAXYR,0")
		
	quit 

vau1 // Trigger AU_AUTAMT_WTHAMT - After update of withhlding para & AUTAMT

	type public RecordIRATYPE iratype
	/*
			---- Revision History ------------------------------------------------

			02/26/02 - ANTONOVS - 46454
	      Trigger was modified to add a State Withholding amount to a
	      Federal withholding in order to compare it with automatic
	      distribution amount.

			12/11/00 - HALPINJ - 41966:01
	      Added code to require withholding parameters when the
	      withholding flag is set to Y.

			04/04/00 - HALPINJ - 36689
														Created trigger so that anytime the withholding amount or
														auto distribution amount are changed it will make sure
														the withholding amount is not greater than or equal to the
														amount of the auto distribution.
	
	*/

	new AMT
 if iratype.rspwind=1 do { quit:ER			// JMH - 12/11/00
	// Plan set for withholding, calculation parameters required
 	if iratype.rspwcalc="",iratype.wthpct="",iratype.wthamt="",iratype.rspwsch="" do Runtime.setErrMSG("IRATYPE",1109) quit:ER
	}
	if iratype.stwhamt set AMT=iratype.stwhamt
	else  set AMT=0
	if iratype.autamt,((iratype.wthamt+AMT)'<iratype.autamt) do Runtime.setErrMSG("IRATYPE",4310,iratype.autamt) if ER quit
	quit

vau2 // Trigger AU_AUTFRE - AFTER_UPDATE

	type public RecordIRATYPE iratype
	/*
	  ---------------- Revision History ------------------------------
	   09/24/99 - SIVCHUKA - 34775
		Created new after_update trigger.
		DISMTC,DISCID Only one required
	
	
	*/
	
	if iratype.autfre'="" do { quit:ER 
		if iratype.dismtc="",iratype.discid="" do Runtime.setErrMSG("IRATYPE",917) if ER quit 
		if iratype.dismtc'="",iratype.discid'="" do Runtime.setErrMSG("IRATYPE",917) if ER quit 
		}
	quit
	

vau3 // Trigger AU_EMPLRCIF - AFTER UPDATE EMPLOYER CIF OR PLANID

	type public RecordIRATYPE iratype
	/*
	  ---------- Revision History ---------------------------------------------------------------------------
	 06/11/02 - KESTELMANN - 50517
		 Added code to update UTBLRSPPLID record. General clean up.
	
	   04/26/99 - NGUYENP - 31683
		Added a check for Duplicate Plan ID indicator.  If
		indicator is set to Y then PLANID duplication is allowable.
		Also verify that the Employer CIF and the plan ID are accurately
		associated.n

	*/

	// Check duplicate PLANID number
	
	new XPLANID,XDUP,XTYPE,XEMPLR,vcnt
	set XPLANID=iratype.planid
	if XPLANID="" quit 
	set XTYPE=iratype.iratyp
	set XEMPLR=iratype.emplrcif
	set XDUP=Db.getOneRow("DUPPLNID","UTBLRSPDEF","XTYPE")
	
	// Duplicate name - ~p1
	if 'XDUP,Db.isDefined("XPLID","XPLANID") do Runtime.setErrMSG("IRATYPE",871," PLANID") if ER quit 
	if XDUP do { quit:ER 
		// Employer CIF required for plan
		if XEMPLR="" do Runtime.setErrMSG("IRATYPE",3914) if ER quit 
		new rs  
		type ResultSet rs=Db.select("ACN","IRATYPE","PLANID=:XPLANID AND EMPLRCIF<>:XEMPLR")
		// Employer CIF does not match duplicate plans
		if 'rs.isEmpty() do Runtime.setErrMSG("IRATYPE",3913) quit:ER 
		}
		
	// Update XPLID table if PLANID changed.
	if 'Db.isDefined("XPLID","XPLANID") do Db.insert("XPLID","PLANID",":XPLANID") quit:ER
		
	// Insert or update record in UTBLRSPPLID.
	if 'Db.isDefined("UTBLRSPPLID","XTYPE") do Db.insert("UTBLRSPPLID","KEY,PLANID",":XTYPE,:XPLANID") quit
	
	// Update UTBLRSPPLID only if new plan id is greater than plan id in UTBLRSPPLID
	// table.  UTBLRSPPLID table holds the highest used plan id number for every
	// RSP type.
	set DATA=Db.getOneRow("KEY,PLANID","UTBLRSPPLID","XTYPE")
	set NXTPLN=$P(DATA,$C(9),2)
	if iratype.planid>NXTPLN do Db.update("UTBLRSPPLID","PLANID=:XPLANID","KEY=:XTYPE")

	quit 

vau4 // Trigger AU_IRATYP - After Update IRA Type

	type public RecordIRATYPE iratype
	/*	REVISION HISTORY

	08/12/02 - BECKERJ - 51083
		   Replaced code that would update the account level RPA
		   type.  Previous code was replacing the account balance
		   of any account after the first account to be the balance
		   of the first account.
	*/

	// Change to column IRATYPE.IRATYP is not allowed (setting it to 0 or null)
	if 'iratype.iratyp do Runtime.setErrMSG("IRATYPE",412,"IRATYPE.IRATYP") if ER quit 
	
	new MAGE,MINAGE,MAXAGE,MACN,MIRATYP,MRPASEQ
	
	set MACN=iratype.acn
	set MRPASEQ=iratype.rpaseq
	set MIRATYP=iratype.iratyp
	set MAGE=Db.getOneRow("AGE","CIF","MACN") quit:ER 
	
	set MINAGE=Db.getOneRow("MINAGE","UTBLRSPDEF","MIRATYP") quit:ER 
	//Customer has not attained the minimum age
	if MINAGE,MAGE<MINAGE do Runtime.setErrXBAD("IRATYPE","RPAMINAGE",MINAGE) quit:ER 
	
	set MAXAGE=Db.getOneRow("MAXPAR","UTBLRSPDEF","MIRATYP") quit:ER 
	//Plan owner's age exceeds maximum limit
	if MAXAGE,MAGE>MAXAGE do Runtime.setErrXBAD("IRATYPE","RPAMAXAGE",MAXAGE) quit:ER 
	
	//Update all plan accounts' RPA Type field to new Plan Type
	// JMB - 51083

	type ResultSet cid=Db.select("CID","DEP","ACN=:MACN AND RPASEQ=:MRPASEQ")
	
	if cid.isEmpty()  quit
	while cid.next()  do {
		set CID=cid.getCol(1)

		new dep
		type RecordDEP dep
		set dep=Db.getRecord("DEP","CID")
	
		set dep.ira=MIRATYP

		do dep.save()
		}

	quit
	

vau5 // Trigger AU_MZIP - After Update of Zip Code for Check Address

	type public RecordIRATYPE iratype

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with 
		   Check Address.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Check Address
	do ZIP^PROCZIP(iratype.cntry, iratype.state, iratype.mzip)
	if ER.get() do Runtime.setErrMSG("IRATYPE", 3333, RM)

	quit

vau6 // Trigger AU_RPASEQ - After Update RPA Sequence

	type public RecordIRATYPE iratype
	// Change to column IRATYPE.RPASEQ not allowed
	if (iratype.rpaseq.oldVal'=iratype.rpaseq) do Runtime.setErrMSG("IRATYPE",412,"IRATYPE.RPASEQ") if ER quit
	quit
	

vau7 // Trigger AU_RPZIP - After Update of Retirement Postal Code

	type public RecordIRATYPE iratype

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with 
		   retitement plan.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Retirement Plan
	do ZIP^PROCZIP(iratype.rpcntry, iratype.rpstate, iratype.rpzip)
	if ER.get() do Runtime.setErrMSG("IRATYPE", 3333, RM)

	quit

vau8 // Trigger AU_TRMCERTN - After Update for term certains

	type public RecordIRATYPE iratype
	/*
	  ---------- Revision History ------------------------------------------
            	  
 	  09/08/99 - OYEGUNZ - 34100
		Removed line " &&SQLSELECT("BTC,JTC,MADSDOB,PTC FROM IRATYPE "
		since we are already in IRATYPE.
	
	  04/05/99 - CARROLLJ - 31428
		Created trigger to check term certain for the beneficiary
		and plan owner.
	*/
	

	/*
	  Check if Plan term certain, Beneficiary Term Certain, and Joint Term Certain
	  is greater than life expectancy of the plan owner or beneficiary
	*/
	
	new CURYR,DEC31CY,DOB,PAGE,PVMAD,SAGE
	
	set DOB=Db.getOneRow("DOB","CIF","ACN")
	set CURYR=$$YEAR^SCADAT(%SystemDate,1)
	set DEC31CY=$$DSJD^SCADAT("12/31/"_CURYR)

	// Primary Owner's date of birth as of Dec 31 of the current year

	set PAGE=$$NOY^SCADAT(DOB,DEC31CY,1)\1 
	set ER=0

	// Beneficiary's Date of birth as of Dec 31 of the current year

	set SAGE=$$NOY^SCADAT(iratype.madsdob,DEC31CY,1)\1 
	set ER=0
	set PVMAD=Db.getOneRow("PVMAD","IRA","ACN,RPASEQ,CURYR")
	
	// Check if Plan Term Certain is greater than life expectancy

	if iratype.ptc,PVMAD do { quit:ER 
		new POEXP
		set POEXP=Db.getOneRow("FACTOR","UTBLMADSL","PAGE")
		if iratype.ptc>POEXP do Runtime.setErrXBAD("IRATYPE","PLNEXP",) quit:ER 
		}
	
	// Check if Beneficiary Term Certain is greater than life expectancy

	if iratype.btc,PVMAD do { quit:ER 
		new BENEXP
		set BENEXP=Db.getOneRow("FACTOR","UTBLMADSL","SAGE")
		if iratype.btc>BENEXP do Runtime.setErrXBAD("IRATYPE","BENEXP",) quit:ER 
		}
	
	// Check if Joint Term Certain is greater than life expectancy

	if iratype.jtc,PVMAD do { quit:ER 
		new JTEXP
		set JTEXP=Db.getOneRow("FACTOR","UTBLMADJL","PAGE,SAGE")
		if iratype.jtc>JTEXP do Runtime.setErrXBAD("IRATYPE","JTEXP",) quit:ER 
		}
	quit 
	

vbd1 // Trigger BEFORE_DELETE - Before Delete Plan ID

	type public RecordIRATYPE iratype
	/*
	  ---------------------------- Revision History -------------------------------------------------------------------------------
	   04/10/99 - NGUYENP - 31683
		Allow deleting Plan ID from XPLID file only if Plan ID has not been
		assigned to another plan
	*/
	
	if iratype.planid="" quit 
	new XPLANID,CNT,XID
	set XPLANID=iratype.planid
	new rs 
	type ResultSet rs=Db.select("ACN","IRATYPE","PLANID=:XPLANID")
	set CNT=0
	if rs.isEmpty() quit
	while rs.next() do { 
		new rs 
		type ResultSet rs=Db.select("PLANID","IRATYPE","PLANID=:XPLANID") 
	    	set XID=rs.next()
	    	if rs.getCol(1) set CNT=CNT+1
		}
	if CNT<2 do Db.delete("XPLID","PLANID=:XPLANID")  
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordIRATYPE iratype
								/*
										---------- Revision History------------------------------------------

	  12/14/05 - DHANALAKSHMI R - CR16851
		Modified by removing the second settings to the DATA, which 
		overrides the value from UTBLRSPPLID.
		PSL clean up.

	  12/30/03 - CARROLLJ - CR7658
		Corrected undefined error reported by new compiler.

	  10/21/02 - Spier - 51089
		Corrected PSL syntax errors reported by new compiler
		
	  06/21/02 - KESTELMANN - 50517
		Changed code to use UTBLRSPPLID table instead of IRATYPE
		table when calculating the next available plan id number.
	
										06/11/02 - KESTELMANN - 50517
																Added code to default PLANID if not defined.
	
											05/27/99 - TITOVE - 32325
																Transfered the code that was preventing the updates to RPASEQ
																field to new trigger AU_RPASEQ.
	
											04/26/99 - NGUYENP - 31683
																Added a check for Duplicate Plan ID indicator.  If
																indicator is set to Y then PLANID duplication is allowable.
																Also verify that the Employer CIF and the plan ID areaccurately
																associated.
	
								*/
	type Number NEXTPLAN,XPLANID,XTYPE
	type String PGM

	set XTYPE=iratype.iratyp
	type RecordUTBLRSPPLID rspplid=Db.getRecord("UTBLRSPPLID","KEY=:XTYPE",1)

	if iratype.planid="" do { quit:ER
	
		/*
		If no plan id is defined, find the next available plan id number
		from XPLID table.
		This prevents front-end from having to originate a unique plan
		number.
		*/
		set PGM=CUVAR.RSPPLID

		// If a custom routine for plan id exists, call it.
		if PGM'="" do { quit:ER
			if PGM'["^" set PGM="^"_PGM
			if PGM["$$" set PGM="set X="_PGM x PGM quit
			do @PGM
			}

		// If a value is returned from the custom routine, use it and quit.
		if $G(X)'="" set iratype.planid=X  quit

		/*
		Get the plan id number from the UTBLRSPPLID table. If the entry
		in UTBLRSPPLID table does not exist or plan id for the XTYPE is
		equal to null, use 1 as plan id.  Then, get the next available
		PLANID value from the XPLID table using this plan id.
		*/

		set NEXTPLAN=rspplid.planid

		for  set NEXTPLAN=NEXTPLAN+1 quit:('Db.isDefined("XPLID","NEXTPLAN"))
		set iratype.planid=NEXTPLAN
		}
	
	
	// Check duplicate PLANID number
	
	type Number XEMPLR
	set XEMPLR=iratype.emplrcif
	set NEXTPLAN=iratype.planid
	
 	type RecordUTBLRSPDEF rspdef=Db.getRecord("UTBLRSPDEF","KEY=:XTYPE")
	type ResultSet rs=Db.select("PLANID","XPLID","PLANID=:NEXTPLAN")
	
	// Duplicate name - ~p1
	if 'rs.isEmpty(),'rspdef.dupplnid do Runtime.setErrMSG("IRATYPE",871,"PLANID") if ER quit
	if rspdef.dupplnid do { quit:ER

		// Employer CIF required for plan
		if XEMPLR="" do Runtime.setErrMSG("IRATYPE",3914) if ER quit

		type ResultSet rs1=Db.select("ACN","IRATYPE","PLANID=:NEXTPLAN AND EMPLRCIF<>:XEMPLR")

		// Employer CIF does not match duplicate plans
		if 'rs1.isEmpty() do Runtime.setErrMSG("IRATYPE",3913) if ER quit
		}
	
	/*
	Insert or update record in UTBLRSPPLID.
	Update UTBLRSPPLID only if new plan id is greater than plan id in UTBLRSPPLID	
	table.  UTBLRSPPLID table holds the highest used plan id number for every
	RSP type.
 	*/
	if ('rspplid.getMode())!(iratype.planid>rspplid.planid) do {
		set rspplid.planid=NEXTPLAN
		do rspplid.save()
		}

	quit

vbu1 // Trigger BU_IRATYP - Before Update RPA Type

	type public RecordIRATYPE iratype
	do iratype.setAuditFlag(1)
	
	new MIRATYP,MLIMIT
	
	set MIRATYP=iratype.iratyp
	
	if MIRATYP do { quit:ER 
		set MLIMIT=Db.getOneRow("LIMIT","UTBLRSPDEF","MIRATYP") quit:ER
	
		//Update Annual Contribution Limit field

		set iratype.limit=MLIMIT
		}
	quit
	

vbu2 // Trigger BU_RSPMADO - Before Update Minimum Annual Distr

	type public RecordIRATYPE iratype
	do iratype.setAuditFlag(1)
	/*
	  ---------- Revision History ------------------------------------------------------------
	  
	  06/18/02 - PREMKUMARM - 48761:05
																			Modified the If condition.Now if RSPMADO is 1(US calculation)
																			then the valid age base options are11,20,21,22,23,24,25,26,27 OR
																			30 and if RSPMADO is 2 (Canadian calculation) then the valid
		   age base options are 0,1,2,3 or 4.
	   
	  09/08/99 - OYEGUNZ - 34100
		Added list of columns relevant to update action.
	
	   05/03/99 - CARROLLJ - 31428
		Modified check on RSPMADO to consider the eight new MAD
		calculations.

	*/
	
	// RSPMADO - Minimum Annual Distribution Option (optin 2 - Canadian)
	
	if iratype.rspmado=2 do { quit:ER 
		if 'iratype.madpct do Runtime.setErrMSG("IRATYPE",1767,"-MADPCT") if ER quit    	  // Calc option
		if iratype.rspmadb>4 do Runtime.setErrMSG("IRATYPE",934) if ER quit         // Age calculation
		if iratype.rspmadb=4,iratype.madsdob="" do Runtime.setErrMSG("IRATYPE",1767,"- MADSDOB") if ER quit
		}
	
	// RSPMADO - Minimum Annual Distribution Option (optin 1)
	
	new X
								if iratype.rspmado=1 do { quit:ER
																set X=iratype.rspmadb
																if (X=11)!(X=20)!(X=21)!(X=22)!(X=23)!(X=24)!(X=25)!(X=26)!(X=27)!(X=30) quit
		do Runtime.setErrMSG("IRATYPE",934) if ER quit   					// Age calculation
		}
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordIRATYPE iratype

	set X = iratype.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = iratype.rpaseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RPASEQ", vRM) quit
	if iratype.ad1.length()>30 set vRM = $$^MSG(1076,30) do vdderr("AD1", vRM) quit
	if iratype.ad2.length()>30 set vRM = $$^MSG(1076,30) do vdderr("AD2", vRM) quit
	if iratype.ad3.length()>30 set vRM = $$^MSG(1076,30) do vdderr("AD3", vRM) quit
	set X = iratype.antchk if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.ANTCHK"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.autamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.AUTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.autdld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUTDLD", vRM) quit
	set X = iratype.autdnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUTDND", vRM) quit
	set X = iratype.autfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[IRATYPE]AUTFRE",0) if 'vRM.get().isNull() do vdderr("AUTFRE", vRM) quit
	if '("01"[iratype.AUTNOT) set vRM=$$^MSG(742,"L") do vdderr("AUTNOT", vRM) quit
	set X = iratype.autopt if 'X.isNull(),'Db.isDefined("STBLDISOPT","X") set vRM = $$^MSG(1485,X) do vdderr("AUTOPT", vRM) quit
	set X = iratype.autupd if 'X.isNull(),'Db.isDefined("STBLDISUPD","X") set vRM = $$^MSG(1485,X) do vdderr("AUTUPD", vRM) quit
	set X = iratype.ben if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BEN", vRM) quit
	set X = iratype.btc if 'X.isNull() set vRM = $$VAL^DBSVER("N",4,0,,,,,1) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.BTC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if iratype.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	set X = iratype.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	set X = iratype.condist if 'X.isNull(),'Db.isDefined("UTBLCDC","X") set vRM = $$^MSG(1485,X) do vdderr("CONDIST", vRM) quit
	if iratype.decnam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DECNAM", vRM) quit
	set X = iratype.decnum if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("DECNUM", vRM) quit
	if iratype.decplnid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("DECPLNID", vRM) quit
	set X = iratype.decseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("DECSEQ", vRM) quit
	if iratype.dectaxid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DECTAXID", vRM) quit
	set X = iratype.discid if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("DISCID", vRM) quit
	if iratype.dismtc.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DISMTC", vRM) quit
	set X = iratype.emplrcif if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("EMPLRCIF", vRM) quit
	set X = iratype.grpno if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("GRPNO", vRM) quit
	set X = iratype.iraaut if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRAAUT", vRM) quit
	set X = iratype.iraben if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("IRABEN", vRM) quit
	set X = iratype.iracon if 'X.isNull(),'Db.isDefined("UTBLIRACON","X") set vRM = $$^MSG(1485,X) do vdderr("IRACON", vRM) quit
	set X = iratype.iradis if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRADIS", vRM) quit
	set X = iratype.iraipo if 'X.isNull(),'Db.isDefined("UTBLIRADIS","X") set vRM = $$^MSG(1485,X) do vdderr("IRAIPO", vRM) quit
	set X = iratype.iratyp if 'X.isNull(),'Db.isDefined("STBLIRA","X") set vRM = $$^MSG(1485,X) do vdderr("IRATYP", vRM) quit
	set X = iratype.jtc if 'X.isNull() set vRM = $$VAL^DBSVER("N",4,0,,,,,1) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.JTC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if iratype.lifjur.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LIFJUR", vRM) quit
	set X = iratype.lifpct if 'X.isNull(),'Db.isDefined("UTBLLIFDESC","X") set vRM = $$^MSG(1485,X) do vdderr("LIFPCT", vRM) quit
	set X = iratype.limit if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.LIMIT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.limitpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.LIMITPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[iratype.LOCK) set vRM=$$^MSG(742,"L") do vdderr("LOCK", vRM) quit
	set X = iratype.madage if 'X.isNull() set vRM = $$VAL^DBSVER("N",5,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.MADAGE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.madpct if 'X.isNull(),'Db.isDefined("UTBLMADDESC","X") set vRM = $$^MSG(1485,X) do vdderr("MADPCT", vRM) quit
	if '("01"[iratype.MADSAT) set vRM=$$^MSG(742,"L") do vdderr("MADSAT", vRM) quit
	set X = iratype.madsdob if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MADSDOB", vRM) quit
	if '("01"[iratype.MAXPAY) set vRM=$$^MSG(742,"L") do vdderr("MAXPAY", vRM) quit
	set X = iratype.mf if 'X.isNull(),'Db.isDefined("UTBLMF","X") set vRM = $$^MSG(1485,X) do vdderr("MF", vRM) quit
	if '("01"[iratype.MINPAY) set vRM=$$^MSG(742,"L") do vdderr("MINPAY", vRM) quit
	if iratype.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	if iratype.name1.length()>30 set vRM = $$^MSG(1076,30) do vdderr("NAME1", vRM) quit
	if iratype.name2.length()>30 set vRM = $$^MSG(1076,30) do vdderr("NAME2", vRM) quit
	if '("01"[iratype.NONBNDIS) set vRM=$$^MSG(742,"L") do vdderr("NONBNDIS", vRM) quit
	if iratype.planid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PLANID", vRM) quit
	set X = iratype.planman if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("PLANMAN", vRM) quit
	set X = iratype.plcdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PLCDTE", vRM) quit
	set X = iratype.pldte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PLDTE", vRM) quit
	set X = iratype.ptc if 'X.isNull() set vRM = $$VAL^DBSVER("N",4,0,,,,,1) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.PTC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[iratype.RFLG) set vRM=$$^MSG(742,"L") do vdderr("RFLG", vRM) quit
	if iratype.riacn.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RIACN", vRM) quit
	set X = iratype.rirel if 'X.isNull(),'Db.isDefined("UTBLRIREL","X") set vRM = $$^MSG(1485,X) do vdderr("RIREL", vRM) quit
	if iratype.rpbph.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RPBPH", vRM) quit
	if iratype.rpcity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RPCITY", vRM) quit
	set X = iratype.rpcntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("RPCNTRY", vRM) quit
	if iratype.rpemail.length()>55 set vRM = $$^MSG(1076,55) do vdderr("RPEMAIL", vRM) quit
	if iratype.rphph.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RPHPH", vRM) quit
	if iratype.rpmad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RPMAD1", vRM) quit
	if iratype.rpmad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RPMAD2", vRM) quit
	if iratype.rpmad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RPMAD3", vRM) quit
	if iratype.rpstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("RPSTATE", vRM) quit
	if iratype.rpzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("RPZIP", vRM) quit
	set X = iratype.rspmadb if 'X.isNull(),'Db.isDefined("STBLRSPMADB","X") set vRM = $$^MSG(1485,X) do vdderr("RSPMADB", vRM) quit
	set X = iratype.rspmado if 'X.isNull(),'Db.isDefined("STBLRSPMADO","X") set vRM = $$^MSG(1485,X) do vdderr("RSPMADO", vRM) quit
	set X = iratype.rspwcalc if 'X.isNull(),'Db.isDefined("UTBLWCALC","X") set vRM = $$^MSG(1485,X) do vdderr("RSPWCALC", vRM) quit
	if '("01"[iratype.RSPWIND) set vRM=$$^MSG(742,"L") do vdderr("RSPWIND", vRM) quit
	set X = iratype.rspwsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("RSPWSCH", vRM) quit
	set X = iratype.spouseid if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("SPOUSEID", vRM) quit
	if iratype.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	set X = iratype.stplnid if 'X.isNull(),'Db.isDefined("UTBLSTATID","X") set vRM = $$^MSG(1485,X) do vdderr("STPLNID", vRM) quit
	set X = iratype.stwhamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.STWHAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.stwhcalc if 'X.isNull(),'Db.isDefined("UTBLWCALC","X") set vRM = $$^MSG(1485,X) do vdderr("STWHCALC", vRM) quit
	set X = iratype.stwhpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.STWHPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.stwhsch if 'X.isNull(),'Db.isDefined("UTBLRSPWSCH1","X") set vRM = $$^MSG(1485,X) do vdderr("STWHSCH", vRM) quit
	if '("01"[iratype.TAXIND) set vRM=$$^MSG(742,"L") do vdderr("TAXIND", vRM) quit
	set X = iratype.wthamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.WTHAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = iratype.wthpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,0,99,5) if 'vRM.isNull() set vRM = $$^MSG(979,"IRATYPE.WTHPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[iratype.YEFLG) set vRM=$$^MSG(742,"L") do vdderr("YEFLG", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRATYPE","MSG",979,"IRATYPE."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit



public VINDEX(RecordIRATYPE iratype) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("AUTDND").exists() do vi1(.iratype)
		if vx("PLANID").exists() do vi2(.iratype)
	}
	do vi1(.iratype)
	do vi2(.iratype)

	quit
	

vi1(RecordIRATYPE iratype) // Maintain AUTDND index entries (Auto-Distribution Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = iratype.autdnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = iratype.acn
	type String v4 = iratype.rpaseq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^IRA(vobj(iratype,-3),vobj(iratype,-4)))#2,'$D(^DAYEND(v1,"IRAD",v3,v4)) do vidxerr("AUTDND")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"IRAD",v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("AUTDND").exists() set v1=vx("AUTDND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"IRAD",v3,v4)
	quit

vi2(RecordIRATYPE iratype) // Maintain PLANID index entries (Plan ID)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = iratype.planid
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = iratype.acn
	type String v4 = iratype.rpaseq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^IRA(vobj(iratype,-3),vobj(iratype,-4)))#2,'$D(^XREF("PLANID",v2,v3,v4)) do vidxerr("PLANID")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("PLANID",v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PLANID").exists() set v2=vx("PLANID").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("PLANID",v2,v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("IRATYPE")

	while ds.next() do {
		type RecordIRATYPE iratype=ds.getRecord("IRATYPE")
		if vlist.contains("VINDEX") do VINDEX(.iratype) quit
		if vlist.contains("AUTDND") do vi1(.iratype)
		if vlist.contains("PLANID") do vi2(.iratype)
	}

	quit


public VIDXBLD1(RecordIRATYPE iratype, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.iratype) quit
	if vlist.contains("AUTDND") do vi1(.iratype)
	if vlist.contains("PLANID") do vi2(.iratype)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("IRATYPE","MSG",1225,"IRATYPE."_di)

	quit


vkchged // Access key changed

	type public RecordIRATYPE iratype

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("RPASEQ").exists() set vux("RPASEQ") = vx("RPASEQ")
	do vkey(1) set voldkey = iratype.acn_","_iratype.rpaseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = iratype.acn_","_iratype.rpaseq // Copy new keys into object
	type RecordIRATYPE vnewrec = iratype.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("IRATYPE",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do {
		do VAU
		if vx("RPASEQ").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordIRATYPE iratype

	if vux("ACN").exists() set iratype.acn = vux("ACN").piece("|",i)
	if vux("RPASEQ").exists() set iratype.rpaseq = vux("RPASEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordIRATYPE iratype
	type public String vpar

	type String vERRMSG

	type ResultSet rs1=Db.select("ACN,RPASEQ","DEP","ACN=:iratype.acn AND RPASEQ=:iratype.rpaseq") // Restriction on delete
	if 'rs1.isEmpty() set vERRMSG = $$^MSG(8563,"DEP(ACN,RPASEQ) -> IRATYPE(ACN,RPASEQ)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("IRA","ACN=:iratype.acn AND RPASEQ=:iratype.rpaseq",vpar) // Cascade delete

	do Db.delete("IRABEN","ACN=:iratype.acn AND RPASEQ=:iratype.rpaseq",vpar) // Cascade delete

	type ResultSet rs4=Db.select("ACN,RPASEQ","RFLGRPA","ACN=:iratype.acn AND RPASEQ=:iratype.rpaseq") // Restriction on delete
	if 'rs4.isEmpty() set vERRMSG = $$^MSG(8563,"RFLGRPA(ACN,RPASEQ) -> IRATYPE(ACN,RPASEQ)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	quit

VIDXPGM()	quit "IRATYPFL"	// Location of index program

