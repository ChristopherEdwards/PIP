BCHLIMC1 //Batch BCHLIMCALC1 - Consolidated Limits Calculations
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLIMCALC1 Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLIMCALC1")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLIMCALC1") quit
 do JOBMGR^BCHUTL(%FN,"BCHLIMCALC1",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLIMCALC1")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(EFD,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLIMCALC1","*","",EFD.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLIMCALC1",EFD.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLIMCALC1",EFD.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,EFD,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLIMCALC1","*","",EFD.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLIMCALC1",EFD.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,EFD,CID) //
	// Update Country, Industry and Sovereign Risk Limits tables for DDA 
	// with negative balance.

	new ACN,ADJ,AMT,AMTP,CNTRY,CRCD,GOVT,ODLIM,SIC,TMP
	new TOTOUTI,TOTOUTS,TOTCOM,TOTCOMC,TOTCOMI,TOTCOMS,TOTOUT,TOTOUTC

	set (AMT,AMTP,ACN,CRCD,CNTRY,SIC,GOVT)=""
	set (ODLIM,TMP,TOTCOM,TOTOUT)=0

	type RecordDEP dep=Db.getRecord("DEP","CID")
	if dep.grp="DBD" quit

	type RecordDAYENDNEG pdneg=Db.getRecord("DAYENDNEG","EFD,CID")
	set AMT=pdneg.balneg
	
	set ACN=dep.acn
	set ODLIM=dep.odlim
	set CRCD=dep.crcd
	if CRCD'=%SystemCurrency do {
		do EXC^CRCDUTL(%SystemCurrency,CRCD,AMT,0,2,11,,,1)
		set AMT=$G(EXCAMT)
		do EXC^CRCDUTL(%SystemCurrency,CRCD,AMTP,0,2,11,,,1)
		set AMTP=$G(EXCAMT)
		do EXC^CRCDUTL(%SystemCurrency,CRCD,ODLIM,0,2,11,,,1)
		set ODLIM=$G(EXCAMT)
		}

	new cif
	type RecordCIF cif=Db.getRecord("CIF","ACN")
	set CNTRY=cif.pcntry
	set SIC=cif.sic
	set GOVT=cif.govt

	if ODLIM<-AMT set TOTCOM=AMT
	else  set TOTCOM=-ODLIM
	set TOTOUT=AMT

	// Country
	do {
		type String REC
		type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:SCHPID,KEY1=:%ProcessID,KEY2=""CNTRY"",KEY3=:CNTRY",1)
		set REC=tmprpt3.data
		set REC.piece("|",1)=REC.piece("|",1)+TOTCOM
		set REC.piece("|",2)=REC.piece("|",2)+TOTOUT
		set tmprpt3.data=REC
		do tmprpt3.bypassSave()
		if 'REC.piece("|",1),'REC.piece("|",2) do Db.fastDelete("EXPCNTRY","CNTRY=:CNTRY")
		}

	// Industry
	if SIC.extract() do {
		type String REC
		type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:SCHPID,KEY1=:%ProcessID,KEY2=""IND"",KEY3=:SIC",1)
		set REC=tmprpt3.data
		set REC.piece("|",1)=REC.piece("|",1)+TOTCOM
		set REC.piece("|",2)=REC.piece("|",2)+TOTOUT
		set tmprpt3.data=REC
		do tmprpt3.bypassSave()
		if 'REC.piece("|",1),'REC.piece("|",2) do Db.fastDelete("EXPIND","IND=:SIC")
		}
		
	// Sovereign Risk
	if GOVT do {
		type String REC
		type RecordTMPRPT3 tmprpt3=Db.getRecord("TMPRPT3","PID=:SCHPID,KEY1=:%ProcessID,KEY2=""SOVR"",KEY3=:CNTRY",1)
		set REC=tmprpt3.data
		set REC.piece("|",1)=REC.piece("|",1)+TOTCOM
		set REC.piece("|",2)=REC.piece("|",2)+TOTOUT
		set tmprpt3.data=REC
		do tmprpt3.bypassSave()
		if 'REC.piece("|",1),'REC.piece("|",2) do Db.fastDelete("EXPCNSOV","CNTRY=:CNTRY")
		}
		
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,EFD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set EFD=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(EFD,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,EFD,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set SCHPID=%ProcessID
	
	do Db.fastDelete("TMPRPT3","PID=:SCHPID")
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("EFD,CID","DAYENDNEG","DAYENDNEG.EFD=(:TJD-2)")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	// Save country totals
	type ResultSet rscntry=Db.select("KEY3,DATA","TMPRPT3","PID=:SCHPID AND KEY2='CNTRY'")
	while rscntry.next() do {
		type String CNTRY,REC
		
		set CNTRY=rscntry.getCol("KEY3")
		set REC=rscntry.getCol("DATA")

		type RecordEXPCNTRY expcntry=Db.getRecord("EXPCNTRY","CNTRY=:CNTRY",1)
		
		set expcntry.totcomexp=expcntry.totcomexp+REC.piece("|",1)
		set expcntry.totoutexp=expcntry.totoutexp+REC.piece("|",2)
		do expcntry.bypassSave()
		}
	
	// Save industry totals
	type ResultSet rsind=Db.select("KEY3,DATA","TMPRPT3","PID=:SCHPID AND KEY2='IND'")
	while rsind.next() do {
		type String REC,SIC
		
		set SIC=rsind.getCol("KEY3")
		set REC=rsind.getCol("DATA")

		type RecordEXPIND expind=Db.getRecord("EXPIND","IND=:SIC",1)
		
		set expind.totcomexp=expind.totcomexp+REC.piece("|",1)
		set expind.totoutexp=expind.totoutexp+REC.piece("|",2)
		do expind.bypassSave()
		}

	// Save sovereign risk totals
	type ResultSet rssovr=Db.select("KEY3,DATA","TMPRPT3","PID=:SCHPID AND KEY2='SOVR'")
	while rssovr.next() do {
		type String CNTRY,REC
		
		set CNTRY=rssovr.getCol("KEY3")
		set REC=rssovr.getCol("DATA")

		type RecordEXPCNSOV expsovr=Db.getRecord("EXPCNSOV","CNTRY=:CNTRY",1)
		
		set expsovr.totcomexp=expsovr.totcomexp+REC.piece("|",1)
		set expsovr.totoutexp=expsovr.totoutexp+REC.piece("|",2)
		do expsovr.bypassSave()
		}
 
 	do Db.fastDelete("TMPRPT3","PID=:SCHPID")

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
