INSRECFL(RecordINSREC insrec, String vpar, Boolean vparNorm) // INSREC - Insurance Record File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (22)             11/22/2003
	// Trigger Definition (2)                      11/07/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = insrec.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(insrec,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(insrec,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = insrec.acn
	type String INSTYP = insrec.instyp
	type String SEQ = insrec.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("INSTYP").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("INSREC",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("INSREC","ACN = :insrec.acn and INSTYP = :insrec.instyp and SEQ = :insrec.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String INSTYP
	type public String SEQ

	type RecordINSREC insrec = Db.getRecord("INSREC","ACN=:ACN,INSTYP=:INSTYP,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do insrec.setMode(2)

		do INSRECFL(insrec,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordINSREC insrec

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("INSREC","ACN = :insrec.acn and INSTYP = :insrec.instyp and SEQ = :insrec.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(insrec))  S ^CIF(vobj(insrec,-3),100,vobj(insrec,-4),vobj(insrec,-5))=vobj(insrec)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordINSREC insrec


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CIF(vobj(insrec,-3),100,vobj(insrec,-4),vobj(insrec,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordINSREC insrec

	// Type local variables for access keys for defaults
	type public String ACN
	type public String INSTYP
	type public String SEQ

	if insrec.holday.isNull() set insrec.holday = 0        // holday
	if insrec.renew.isNull() set insrec.renew = 0          // renew
	if insrec.wspts.isNull() set insrec.wspts = 0          // wspts
	quit


vreqn // Validate required data items

	type public RecordINSREC insrec

	if insrec.holday.isNull() do vreqerr("HOLDAY") quit
	if insrec.renew.isNull() do vreqerr("RENEW") quit
	if insrec.solddate.isNull() do vreqerr("SOLDDATE") quit
	if insrec.wspts.isNull() do vreqerr("WSPTS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordINSREC insrec

	if insrec.acn.isNull() do vreqerr("ACN") quit
	if insrec.instyp.isNull() do vreqerr("INSTYP") quit
	if insrec.seq.isNull() do vreqerr("SEQ") quit

		if vx("HOLDAY").exists(),insrec.holday.isNull() do vreqerr("HOLDAY") quit
		if vx("RENEW").exists(),insrec.renew.isNull() do vreqerr("RENEW") quit
		if vx("SOLDDATE").exists(),insrec.solddate.isNull() do vreqerr("SOLDDATE") quit
		if vx("WSPTS").exists(),insrec.wspts.isNull() do vreqerr("WSPTS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("INSREC","MSG",1767,"INSREC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("DTERM").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert for Insurane Record

	type public RecordINSREC insrec
 /*  	Revision History 
			 

	12/20/99 - SHANL - 31126
		   Converted M reference to PSL format.                      
	
 	8/19/99 -  Pendurthi - 33755
																			Added verifiication of DTERM as valid term.
	
	*/

	// Insurance Policy Duration/Term verification.
	
	
	if insrec.dterm'="" do { quit:ER

																// First character of term may not be '0'
																if $E(insrec.dterm)=0 do Runtime.setErrMSG("DEP",1113) quit:ER

																// First character of term must be numeric
																if +insrec.dterm=0 do Runtime.setErrMSG("DEP",1114) quit:ER

																// Term must contain character D, W, M, or Y
																if insrec.dterm=+insrec.dterm do Runtime.setErrMSG("DEP",2629) quit:ER

																// Lowercase characters not allowed
																if insrec.dterm?.E1L.E do Runtime.setErrMSG("DEP",1662) quit:ER

																// Term may only contain characters D, W, M, or Y
																for I=1:1:$L(insrec.dterm) if '("DWMY"[$E(insrec.dterm,I)!($E(insrec.dterm,I)?1N)) do Runtime.setErrMSG("DEP",2628) quit:ER

																// Last character of term must be D, W, M, or Y
 	        if $E(insrec.dterm,$L(insrec.dterm))?1N do Runtime.setErrMSG("DEP",2714) quit:ER
	        }

								quit
	

vau1 // Trigger AU_DTERM - After Update - Duration/Term

	type public RecordINSREC insrec
	/*    Revision History 
	
	
	12/20/99 - SHANL - 31126
		   Converted M reference to PSL format.            	

 	8/19/99 - Pendurthi - 33755
 	          Added verifiication of DTERM as valid term.
	*/

	// Insurance Policy Duration/Term verification.
	
	if insrec.dterm'="" do { quit:ER

																// First character of term may not be '0'
																if $E(insrec.dterm)=0 do Runtime.setErrMSG("DEP",1113) quit:ER

																// First character of term must be numeric
																if +insrec.dterm=0 do Runtime.setErrMSG("DEP",1114) quit:ER

																// Term must contain character D, W, M, or Y
																if insrec.dterm=+insrec.dterm do Runtime.setErrMSG("DEP",2629) quit:ER

																// Lowercase characters not allowed
																if insrec.dterm?.E1L.E do Runtime.setErrMSG("DEP",1662) quit:ER

																// Term may only contain characters D, W, M, or Y
																for I=1:1:$L(insrec.dterm) if '("DWMY"[$E(insrec.dterm,I)!($E(insrec.dterm,I)?1N)) do Runtime.setErrMSG("DEP",2628) quit:ER

																// Last character of term must be D, W, M, or Y
																if $E(insrec.dterm,$L(insrec.dterm))?1N do Runtime.setErrMSG("DEP",2714) quit:ER
																}

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordINSREC insrec

	set X = insrec.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = insrec.instyp if 'X.isNull(),'Db.isDefined("UTBLINSTYP","X") set vRM = $$^MSG(1485,X) do vdderr("INSTYP", vRM) quit
	set X = insrec.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = insrec.cocode if 'X.isNull(),'Db.isDefined("UTBLCO","X") set vRM = $$^MSG(1485,X) do vdderr("COCODE", vRM) quit
	if insrec.comm1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COMM1", vRM) quit
	if insrec.comm2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COMM2", vRM) quit
	if insrec.dterm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("DTERM", vRM) quit
	set X = insrec.enddate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ENDDATE", vRM) quit
	if '("01"[insrec.HOLDAY) set vRM=$$^MSG(742,"L") do vdderr("HOLDAY", vRM) quit
	set X = insrec.lrendate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LRENDATE", vRM) quit
	set X = insrec.nccov if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("NCCOV", vRM) quit
	set X = insrec.noacov if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("NOACOV", vRM) quit
	if insrec.polnum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("POLNUM", vRM) quit
	set X = insrec.ppamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"INSREC.PPAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = insrec.ppfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[INSREC]PPFRE",0) if 'vRM.get().isNull() do vdderr("PPFRE", vRM) quit
	if '("01"[insrec.RENEW) set vRM=$$^MSG(742,"L") do vdderr("RENEW", vRM) quit
	set X = insrec.sdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SDATE", vRM) quit
	set X = insrec.sduty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"INSREC.SDUTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = insrec.solddate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SOLDDATE", vRM) quit
	set X = insrec.tac if 'X.isNull(),'Db.isDefined("UTBLTAC","X") set vRM = $$^MSG(1485,X) do vdderr("TAC", vRM) quit
	set X = insrec.ttprem if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"INSREC.TTPREM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[insrec.WSPTS) set vRM=$$^MSG(742,"L") do vdderr("WSPTS", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("INSREC","MSG",979,"INSREC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordINSREC insrec

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("INSTYP").exists() set vux("INSTYP") = vx("INSTYP")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = insrec.acn_","_insrec.instyp_","_insrec.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = insrec.acn_","_insrec.instyp_","_insrec.seq // Copy new keys into object
	type RecordINSREC vnewrec = insrec.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("INSREC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordINSREC insrec

	if vux("ACN").exists() set insrec.acn = vux("ACN").piece("|",i)
	if vux("INSTYP").exists() set insrec.instyp = vux("INSTYP").piece("|",i)
	if vux("SEQ").exists() set insrec.seq = vux("SEQ").piece("|",i)
	quit
