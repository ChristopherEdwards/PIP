FEESRVFL(RecordFEESRV feesrv, String vpar, Boolean vparNorm) // FEESRV - Service Fee Plan Categories Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (2)                      08/27/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = feesrv.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(feesrv,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(feesrv,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String PLAN = feesrv.plan
	type String FEEDT = feesrv.feedt
	type String FEECAT = feesrv.feecat
	type String FEETYP = feesrv.feetyp

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PLAN").exists()!vx("FEEDT").exists()!vx("FEECAT").exists()!vx("FEETYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("FEESRV",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("FEESRV","PLAN = :feesrv.plan and FEEDT = :feesrv.feedt and FEECAT = :feesrv.feecat and FEETYP = :feesrv.feetyp") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PLAN
	type public String FEEDT
	type public String FEECAT
	type public String FEETYP

	type RecordFEESRV feesrv = Db.getRecord("FEESRV","PLAN=:PLAN,FEEDT=:FEEDT,FEECAT=:FEECAT,FEETYP=:FEETYP")
	if (%ProcessMode = 2) do {
		do feesrv.setMode(2)

		do FEESRVFL(feesrv,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordFEESRV feesrv

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("FEESRV","PLAN = :feesrv.plan and FEEDT = :feesrv.feedt and FEECAT = :feesrv.feecat and FEETYP = :feesrv.feetyp") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(feesrv,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(feesrv,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(feesrv))  S ^UTBL("FEEPLN",vobj(feesrv,-3),vobj(feesrv,-4),vobj(feesrv,-5),vobj(feesrv,-6))=vobj(feesrv)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordFEESRV feesrv

	if vpar'["/NOLOG/" do ^DBSLOGIT(feesrv,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("FEEPLN",vobj(feesrv,-3),vobj(feesrv,-4),vobj(feesrv,-5),vobj(feesrv,-6)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordFEESRV feesrv

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordFEESRV feesrv

	if feesrv.plan.isNull() do vreqerr("PLAN") quit
	if feesrv.feedt.isNull() do vreqerr("FEEDT") quit
	if feesrv.feecat.isNull() do vreqerr("FEECAT") quit
	if feesrv.feetyp.isNull() do vreqerr("FEETYP") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("FEESRV","MSG",1767,"FEESRV."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("CHGOPT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Plan Definition

	type public RecordFEESRV feesrv
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
		   
		   Removed old revision history.
	----------------------------------------------------------------------
	*/
	
	if feesrv.chgopt'=2 do { quit:ER
	
		type RecordFEEPLN feepln = Db.getRecord("FEEPLN", "PLAN=:PLAN,FEEDT=:FEEDT")
	
		if (feepln.pltp = 1) do Runtime.setErrMSG("FEESRV",3135) quit:ER 
	}
	
	quit

vau1 // Trigger AU_CHGOPT - After Update Charge Option

	type public RecordFEESRV feesrv
	/*
	---- Revision History ------------------------------------------------
	08/26/05 - RussellDS - CR16911
		   Eliminate PSL deprecated features
		   
		   Removed old revision history.
	----------------------------------------------------------------------
	*/
	
	if feesrv.chgopt'=2 do { quit:ER
	
		type RecordFEEPLN feepln = Db.getRecord("FEEPLN", "PLAN=:PLAN,FEEDT=:FEEDT")
	
		if (feepln.pltp = 1) do Runtime.setErrMSG("FEESRV",3135) quit:ER 
	}
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordFEESRV feesrv

	if feesrv.plan.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PLAN", vRM) quit
	set X = feesrv.feedt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FEEDT", vRM) quit
	set X = feesrv.feecat if 'X.isNull(),'Db.isDefined("STBLFEEFC","X") set vRM = $$^MSG(1485,X) do vdderr("FEECAT", vRM) quit
	if feesrv.feetyp.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FEETYP", vRM) quit
	set X = feesrv.chgopt if 'X.isNull(),'Db.isDefined("STBLFEECO","X") set vRM = $$^MSG(1485,X) do vdderr("CHGOPT", vRM) quit
	set X = feesrv.feeamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"FEESRV.FEEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = feesrv.feeprct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,.00001,100,5) if 'vRM.isNull() set vRM = $$^MSG(979,"FEESRV.FEEPRCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if feesrv.feesch.length()>6 set vRM = $$^MSG(1076,6) do vdderr("FEESCH", vRM) quit
	set X = feesrv.feetbl if 'X.isNull(),'Db.isDefined("UTBLFEETBL","X") set vRM = $$^MSG(1485,X) do vdderr("FEETBL", vRM) quit
	set X = feesrv.maxdly if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"FEESRV.MAXDLY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("FEESRV","MSG",979,"FEESRV."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordFEESRV feesrv

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("PLAN").exists() set vux("PLAN") = vx("PLAN")
	if vx("FEEDT").exists() set vux("FEEDT") = vx("FEEDT")
	if vx("FEECAT").exists() set vux("FEECAT") = vx("FEECAT")
	if vx("FEETYP").exists() set vux("FEETYP") = vx("FEETYP")
	do vkey(1) set voldkey = feesrv.plan_","_feesrv.feedt_","_feesrv.feecat_","_feesrv.feetyp // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = feesrv.plan_","_feesrv.feedt_","_feesrv.feecat_","_feesrv.feetyp // Copy new keys into object
	type RecordFEESRV vnewrec = feesrv.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("FEESRV",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordFEESRV feesrv

	if vux("PLAN").exists() set feesrv.plan = vux("PLAN").piece("|",i)
	if vux("FEEDT").exists() set feesrv.feedt = vux("FEEDT").piece("|",i)
	if vux("FEECAT").exists() set feesrv.feecat = vux("FEECAT").piece("|",i)
	if vux("FEETYP").exists() set feesrv.feetyp = vux("FEETYP").piece("|",i)
	quit
