PATFILE(RecordPAT pat, String vpar, Boolean vparNorm) // PAT - PAT Distribution File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (23)             12/20/2005
	// Trigger Definition (2)                      12/16/2005
	// Journal File Definition (2)                 04/04/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = pat.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(pat,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(pat,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String SRC = pat.src
	type String ACN = pat.acn
	type String BATCH = pat.batch
	type String SEQ = pat.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SRC").exists()!vx("ACN").exists()!vx("BATCH").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PAT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PAT","SRC = :pat.src and ACN = :pat.acn and BATCH = :pat.batch and SEQ = :pat.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SRC
	type public String ACN
	type public String BATCH
	type public String SEQ

	type RecordPAT pat = Db.getRecord("PAT","SRC=:SRC,ACN=:ACN,BATCH=:BATCH,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do pat.setMode(2)

		do PATFILE(pat,vpar)
	}
	else  do VINDEX(pat)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPAT pat

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PAT","SRC = :pat.src and ACN = :pat.acn and BATCH = :pat.batch and SEQ = :pat.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(pat))  S ^PAT(vobj(pat,-3),vobj(pat,-4),vobj(pat,-5),vobj(pat,-6))=vobj(pat)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.pat)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.pat) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPAT pat

	if vpar["/INDEX/" do VINDEX(.pat)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.pat)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^PAT(vobj(pat,-3),vobj(pat,-4),vobj(pat,-5),vobj(pat,-6)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordPAT pat

	// Type local variables for access keys for defaults
	type public String SRC
	type public String ACN
	type public String BATCH
	type public String SEQ

	if pat.cntry.isNull() set pat.cntry = CUVAR.CNTRY      // cntry
	if pat.start.isNull() set pat.start = +$H              // start
	quit


vreqn // Validate required data items

	type public RecordPAT pat

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPAT pat

	if pat.src.isNull() do vreqerr("SRC") quit
	if pat.acn.isNull() do vreqerr("ACN") quit
	if pat.batch.isNull() do vreqerr("BATCH") quit
	if pat.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PAT","MSG",1767,"PAT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordPAT pat
	if 'pat.acn.isNull() set vfkey("^CIF("_""""_pat.acn_""""_","_1_")")="PAT(ACN) -> CIF"
	if 'pat.batch.isNull() set vfkey("^PAT("_""""_pat.src_""""_","_""""_pat.acn_""""_","_""""_pat.batch_""""_")")="PAT(SRC,ACN,BATCH) -> PAT1"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordPAT pat
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":pat.acn") set vERRMSG = $$^MSG(8563,"PAT(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("PAT1",":pat.src,:pat.acn,:pat.batch") set vERRMSG = $$^MSG(8563,"PAT(SRC,ACN,BATCH) -> PAT1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordPAT pat
	if vx("").order().isNull() do AUDIT^UCUTILN(pat,.vx(),1,"|") quit
	if vx("TRNCD").exists()!vx("CID").exists()!vx("CKNAM1").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(pat,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before insert

	type public RecordPAT pat

	/*
	------------- Revision History -------------------------------------
	
	12/14/05 - PUTTASWH - 
		   Modified to change the code to DBI Standards.
		   
	05/04/04 - RussellDS - CR9172
		   Replace reference to table UTBLSRCPAT (obsolete) with
		   UTBLSRC.	
	*/

	new ETC,TSO
	set ETC=pat.trncd
	
	// ~p1
	if ER do Runtime.setErrMSG("PAT",3333,RM) if ER quit 	
	
	// Set Gl account if not defined
	
	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
	if pat.cid="",trn.getMode() do { 		
		if "*M"'[trn.cls quit      	//If for a financial we don't want to default
		set pat.cid=trn.acn            // Default Account Number			
		}
	
	new ZCLS,ZGRP,ITC,FF
	
	type RecordPAT1 pat1=Db.getRecord("PAT1","SRC=:pat.src,ACN=:pat.acn,BATCH=:pat.batch",1)
	set STOP=pat1.stop
	set CRCD=pat1.crcd	
	
	// Multicurrency PATs, CRCD is a required field.
	if Db.isDefined("UTBLSRC","SRCTYP=""PAT"",KEY=:pat.src") do {
		// Missing required data item ~p1
		if pat.crcd="" do Runtime.setErrMSG("PAT",1767,"PAT.CRCD") quit:ER
			
		if %ProcessMode=0,CRCD="" do {
			set CRCD=pat.crcd			
			set pat1.crcd=CRCD
			do pat1.save()
			}
		}
	quit:ER
	
	// Update PAT.CRCD with the value from this account if PAT1.CRCD is null.
	
	type RecordACN acn=Db.getRecord("ACN","CID=:pat.cid",1)
	if acn.getMode() do {
		set ACNCRCD=acn.crcd
		// Missing required data item ~p1
		if pat.cid="" do Runtime.setErrMSG("PAT",1767,"CID") if ER quit
		// Update PAT1 CRCD if this is the first account and CRCD is null	
		if %ProcessMode=0,CRCD="" do {			
			set pat1.crcd=ACNCRCD
			do pat1.save()
			set CRCD=ACNCRCD
			}
		}
	
	
	// Missing required data item ~p1
	if pat.cid="" do Runtime.setErrMSG("PAT",1767,"CID") if ER quit 

	// execute processers called from screen to do verication
	do TC^PROCPAT(ETC)
	
	do PRECID^PROCPAT(ETC,.ZCLS,.ZGRP,.ITC) if ER quit
	
	do POSCID^PROCPAT(pat.cid,ETC,.ETC,STOP,"PAT",ZCLS,CRCD) if ER quit 
	
	do VAR^PROCPAT(pat.amount,pat.cid)
	
	// validate $ amount format type
	do AMOUNT^PROCPAT(pat.amount)
	
	do MISC^PROCPAT(pat.trncd,.ETC,pat.cid)
	
	// Miscellaneous field not applicable for this transaction code
	if 'FF.exists(),pat.cknam1'="" do Runtime.setErrMSG("PAT",1753) if ER quit 
	if FF.exists() do MISC1^PROCPAT(pat.cknam1,pat.cid)
	if pat.cknam2="",'(TSO.get().isNull()) set pat.cknam2=TSO
	// ~p1
	if ER do Runtime.setErrMSG("PAT",3333,RM) if ER quit
	
	quit
	

vbu1 // Trigger BEFORE_UPDATE - Before update of a PAT record

	type public RecordPAT pat
	do pat.setAuditFlag(1)
	/*
	---- Revision History -----------------------------------
	
	12/14/05 - PUTTASWH - 18157
		   Modified to change the code to DBI Standards.
		    
	05/04/04 - RussellDS - CR9172
		   Replace reference to table UTBLSRCPAT (obsolete) with
		   UTBLSRC.
	
	09/26/02 Spier 51423
		   Corrected psl syntax errors exposed by new compiler
	
	*/
 	new ETC,TSO
	set ETC=pat.trncd

	// ~p1
	if ER do Runtime.setErrMSG("PAT",3333,RM) if ER quit	
	
	new ZCLS,ZGRP,ITC,FF		
	
	type RecordPAT1 pat1=Db.getRecord("PAT1","SRC=:pat.src,ACN=:pat.acn,BATCH=:pat.batch",1)
	set STOP=pat1.stop
	set CRCD=pat1.crcd

								if Db.isDefined("UTBLSRC","SRCTYP=""PAT"",KEY=:pat.src") do { quit:ER
        	// Missing required data item ~p1
	        if pat.crcd="" do Runtime.setErrMSG("PAT",1767,"PAT.CRCD") quit:ER

		// Update PAT.CRCD with the value from the first account for PAT sources
		if pat.seq=1,pat.crcd'=CRCD do {
			set CRCD=pat.crcd			
			set pat1.crcd=CRCD
			do pat1.save()
                	}
		}	
	
	// Missing required data item ~p1
	if pat.cid="" do Runtime.setErrMSG("PAT",1767,"CID") if ER quit 
	

	// execute processers called from screen to do verication

	do TC^PROCPAT(ETC)
	
	do PRECID^PROCPAT(ETC,.ZCLS,.ZGRP,.ITC) if ER quit 
	
	do POSCID^PROCPAT(pat.cid,ETC,.ETC,STOP,"PAT",ZCLS,CRCD) if ER quit 
	
	do VAR^PROCPAT(pat.amount,pat.cid)
	
	do MISC^PROCPAT(pat.trncd,.ETC,pat.cid)
	
	// Miscellaneous field not applicable for this transaction code
	if 'FF.exists(),pat.cknam1'="" do Runtime.setErrMSG("PAT",1753) if ER quit 
	if FF.exists() do MISC1^PROCPAT(pat.cknam1,pat.cid)
	if pat.cknam2'=TSO.get(),'(TSO.get().isNull()) set pat.cknam2=TSO
	if FF.exists(),pat.cknam2'="" set pat.cknam2=""
	// ~p1
	if ER do Runtime.setErrMSG("PAT",3333,RM) if ER quit
	
	quit

	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPAT pat

	if pat.src.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SRC", vRM) quit
	set X = pat.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = pat.batch if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("BATCH", vRM) quit
	set X = pat.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if pat.amount.length()>12 set vRM = $$^MSG(1076,12) do vdderr("AMOUNT", vRM) quit
	set X = pat.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"PAT.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = pat.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if pat.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	set X = pat.ckacn if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("CKACN", vRM) quit
	if pat.ckaddr1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CKADDR1", vRM) quit
	if pat.ckaddr2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CKADDR2", vRM) quit
	if pat.ckaddr3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CKADDR3", vRM) quit
	if pat.ckmemo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CKMEMO", vRM) quit
	if pat.cknam1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CKNAM1", vRM) quit
	if pat.cknam2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CKNAM2", vRM) quit
	set X = pat.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	if pat.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	if pat.mzip.length()>9 set vRM = $$^MSG(1076,9) do vdderr("MZIP", vRM) quit
	set X = pat.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"PAT.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = pat.start if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("START", vRM) quit
	if pat.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	set X = pat.stop if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STOP", vRM) quit
	set X = pat.trncd if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("TRNCD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PAT","MSG",979,"PAT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordPAT pat)	//PAT Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="O" do {
			do vj2(.pat)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="O" do {
			do vj1(.pat)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST
			}
		}

	quit


vj1(RecordPAT pat)	// HIST  Table CIFH  Pat history jornal

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=pat.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.efd=$G(EFD)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMT^CIFFUNCS("","PAT",vdi,vold,vnew,$$^MSG(3989,pat.cid)_":"_$$^MSG(4341,pat.src))
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj2(RecordPAT pat)	// HIST_D  Table CIFH  Delete Pat journal

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=pat.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^PROCPAT("","PAT","CID",$G(EFD))
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordPAT pat) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("CID").exists() do vi1(.pat)
	}
	do vi1(.pat)

	quit
	

vi1(RecordPAT pat) // Maintain PAT index entries (Payroll account/Source)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = pat.cid
	type String v3 = pat.src
	type String v4 = pat.acn
	type String v5 = pat.batch
	type String v6 = pat.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if v2'="" if $D(^PAT(vobj(pat,-3),vobj(pat,-4),vobj(pat,-5),vobj(pat,-6)))#2,'$D(^XREF("PAT",v2,v3,v4,v5,v6)) do vidxerr("PAT")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if v2'="" if %ProcessMode<2 set ^XREF("PAT",v2,v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CID").exists() set v2=vx("CID").piece("|",1)
	if v2.isNull() quit

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("PAT",v2,v3,v4,v5,v6)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("PAT")

	while ds.next() do {
		type RecordPAT pat=ds.getRecord("PAT")
		if vlist.contains("VINDEX") do VINDEX(.pat) quit
		if vlist.contains("PAT") do vi1(.pat)
	}

	quit


public VIDXBLD1(RecordPAT pat, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.pat) quit
	if vlist.contains("PAT") do vi1(.pat)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("PAT","MSG",1225,"PAT."_di)

	quit


vkchged // Access key changed

	type public RecordPAT pat

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SRC").exists() set vux("SRC") = vx("SRC")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("BATCH").exists() set vux("BATCH") = vx("BATCH")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = pat.src_","_pat.acn_","_pat.batch_","_pat.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = pat.src_","_pat.acn_","_pat.batch_","_pat.seq // Copy new keys into object
	type RecordPAT vnewrec = pat.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PAT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordPAT pat

	if vux("SRC").exists() set pat.src = vux("SRC").piece("|",i)
	if vux("ACN").exists() set pat.acn = vux("ACN").piece("|",i)
	if vux("BATCH").exists() set pat.batch = vux("BATCH").piece("|",i)
	if vux("SEQ").exists() set pat.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "PATFILE"	// Location of index program

