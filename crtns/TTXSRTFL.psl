TTXSRTFL(RecordTTXSRT ttxsrt, String vpar, Boolean vparNorm) // TTXSRT - Teller Transaction Sort Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (37)             03/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ttxsrt.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(ttxsrt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ttxsrt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SJD").exists()!vx("BRCD").exists()!vx("UID").exists()!vx("DC").exists()!vx("CIDSRT").exists()!vx("AMT").exists()!vx("TSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("TTXSRT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("TTXSRT","SJD = :ttxsrt.sjd and BRCD = :ttxsrt.brcd and UID = :ttxsrt.uid and DC = :ttxsrt.dc and CIDSRT = :ttxsrt.cidsrt and AMT = :ttxsrt.amt and TSEQ = :ttxsrt.tseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SJD
	type public String BRCD
	type public String UID
	type public String DC
	type public String CIDSRT
	type public String AMT
	type public String TSEQ

	type RecordTTXSRT ttxsrt = Db.getRecord("TTXSRT","SJD=:SJD,BRCD=:BRCD,UID=:UID,DC=:DC,CIDSRT=:CIDSRT,AMT=:AMT,TSEQ=:TSEQ")
	if (%ProcessMode = 2) do {
		do ttxsrt.setMode(2)

		do TTXSRTFL(ttxsrt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordTTXSRT ttxsrt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("TTXSRT","SJD = :ttxsrt.sjd and BRCD = :ttxsrt.brcd and UID = :ttxsrt.uid and DC = :ttxsrt.dc and CIDSRT = :ttxsrt.cidsrt and AMT = :ttxsrt.amt and TSEQ = :ttxsrt.tseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ttxsrt)) S ^TTXSRT(vobj(ttxsrt,-3),vobj(ttxsrt,-4),vobj(ttxsrt,-5),vobj(ttxsrt,-6),vobj(ttxsrt,-7),vobj(ttxsrt,-8),vobj(ttxsrt,-9))=vobj(ttxsrt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordTTXSRT ttxsrt


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^TTXSRT(vobj(ttxsrt,-3),vobj(ttxsrt,-4),vobj(ttxsrt,-5),vobj(ttxsrt,-6),vobj(ttxsrt,-7),vobj(ttxsrt,-8),vobj(ttxsrt,-9))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordTTXSRT ttxsrt

	if ttxsrt.cdt.isNull() do vreqerr("CDT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordTTXSRT ttxsrt

	if ttxsrt.sjd.isNull() do vreqerr("SJD") quit
	if ttxsrt.brcd.isNull() do vreqerr("BRCD") quit
	if ttxsrt.uid.isNull() do vreqerr("UID") quit
	if ttxsrt.dc.isNull() do vreqerr("DC") quit
	if ttxsrt.cidsrt.isNull() do vreqerr("CIDSRT") quit
	if ttxsrt.amt.isNull() do vreqerr("AMT") quit
	if ttxsrt.tseq.isNull() do vreqerr("TSEQ") quit

		if vx("CDT").exists(),ttxsrt.cdt.isNull() do vreqerr("CDT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TTXSRT","MSG",1767,"TTXSRT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordTTXSRT ttxsrt
	if 'ttxsrt.cid.isNull() set vfkey("^ACN("_""""_ttxsrt.cid_""""_","_50_")")="TTXSRT(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordTTXSRT ttxsrt
	type public Number %O
	type String vERRMSG

	if 'ttxsrt.cid.isNull() if 'Db.isDefined("ACN",":ttxsrt.cid") set vERRMSG = $$^MSG(8563,"TTXSRT(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordTTXSRT ttxsrt

	set X = ttxsrt.sjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SJD", vRM) quit
	set X = ttxsrt.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	set X = ttxsrt.uid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("UID", vRM) quit
	if ttxsrt.dc.length()>1 set vRM = $$^MSG(1076,1) do vdderr("DC", vRM) quit
	set X = ttxsrt.cidsrt if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CIDSRT", vRM) quit
	set X = ttxsrt.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXSRT.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxsrt.tseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
	if ttxsrt.bcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BCRCD", vRM) quit
	set X = ttxsrt.brcde if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCDE", vRM) quit
	set X = ttxsrt.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXSRT.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxsrt.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
	set X = ttxsrt.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
	set X = ttxsrt.chktyp if 'X.isNull(),'Db.isDefined("STBLCHKTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CHKTYP", vRM) quit
	set X = ttxsrt.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = ttxsrt.crcd if 'X.isNull(),'Db.isDefined("UTBLCRCDX","X") set vRM = $$^MSG(1485,X) do vdderr("CRCD", vRM) quit
	set X = ttxsrt.custcd if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CUSTCD", vRM) quit
	set X = ttxsrt.effdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFFDT", vRM) quit
	if ttxsrt.etc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ETC", vRM) quit
	set X = ttxsrt.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
	if ttxsrt.ident.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDENT", vRM) quit
	if ttxsrt.itc.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ITC", vRM) quit
	if ttxsrt.msd.length()>120 set vRM = $$^MSG(1076,120) do vdderr("MSD", vRM) quit
	set X = ttxsrt.mult if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MULT", vRM) quit
	set X = ttxsrt.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXSRT.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ttxsrt.spr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
	set X = ttxsrt.sysbase if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXSRT.SYSBASE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ttxsrt.tamt.length()>60 set vRM = $$^MSG(1076,60) do vdderr("TAMT", vRM) quit
	if ttxsrt.tcmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCMT", vRM) quit
	set X = ttxsrt.tim if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIM", vRM) quit
	if ttxsrt.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	set X = ttxsrt.trc if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("TRC", vRM) quit
	set X = ttxsrt.tresref if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("TRESREF", vRM) quit
	set X = ttxsrt.tsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TTXSRT.TSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if ttxsrt.tso.length()>200 set vRM = $$^MSG(1076,200) do vdderr("TSO", vRM) quit
	if ttxsrt.uidt.length()>12 set vRM = $$^MSG(1076,12) do vdderr("UIDT", vRM) quit
	set X = ttxsrt.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
	if ttxsrt.xpdo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("XPDO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TTXSRT","MSG",979,"TTXSRT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordTTXSRT ttxsrt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SJD").exists() set vux("SJD") = vx("SJD")
	if vx("BRCD").exists() set vux("BRCD") = vx("BRCD")
	if vx("UID").exists() set vux("UID") = vx("UID")
	if vx("DC").exists() set vux("DC") = vx("DC")
	if vx("CIDSRT").exists() set vux("CIDSRT") = vx("CIDSRT")
	if vx("AMT").exists() set vux("AMT") = vx("AMT")
	if vx("TSEQ").exists() set vux("TSEQ") = vx("TSEQ")
	do vkey(1) set voldkey = ttxsrt.sjd_","_ttxsrt.brcd_","_ttxsrt.uid_","_ttxsrt.dc_","_ttxsrt.cidsrt_","_ttxsrt.amt_","_ttxsrt.tseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ttxsrt.sjd_","_ttxsrt.brcd_","_ttxsrt.uid_","_ttxsrt.dc_","_ttxsrt.cidsrt_","_ttxsrt.amt_","_ttxsrt.tseq // Copy new keys into object
	type RecordTTXSRT vnewrec = ttxsrt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("TTXSRT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordTTXSRT ttxsrt

	if vux("SJD").exists() set ttxsrt.sjd = vux("SJD").piece("|",i)
	if vux("BRCD").exists() set ttxsrt.brcd = vux("BRCD").piece("|",i)
	if vux("UID").exists() set ttxsrt.uid = vux("UID").piece("|",i)
	if vux("DC").exists() set ttxsrt.dc = vux("DC").piece("|",i)
	if vux("CIDSRT").exists() set ttxsrt.cidsrt = vux("CIDSRT").piece("|",i)
	if vux("AMT").exists() set ttxsrt.amt = vux("AMT").piece("|",i)
	if vux("TSEQ").exists() set ttxsrt.tseq = vux("TSEQ").piece("|",i)
	quit
