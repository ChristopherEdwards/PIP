DBSDFKF(RecordDBTBL1F dbtbl1f, String vpar, Boolean vparNorm) // DBTBL1F - Data Dictionary Foreign Keys Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (11)             11/22/2003
	// Trigger Definition (2)                      05/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl1f.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dbtbl1f,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dbtbl1f,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String %LIBS = dbtbl1f.%libs
	type String FID = dbtbl1f.fid
	type String FKEYS = dbtbl1f.fkeys

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("%LIBS").exists()!vx("FID").exists()!vx("FKEYS").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL1F",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL1F","%LIBS = :dbtbl1f.%libs and FID = :dbtbl1f.fid and FKEYS = :dbtbl1f.fkeys") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String %LIBS
	type public String FID
	type public String FKEYS

	type RecordDBTBL1F dbtbl1f = Db.getRecord("DBTBL1F","%LIBS=:%LIBS,FID=:FID,FKEYS=:FKEYS")
	if (%ProcessMode = 2) do {
		do dbtbl1f.setMode(2)

		do DBSDFKF(dbtbl1f,vpar)
	}
	else  do VINDEX(dbtbl1f)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL1F dbtbl1f

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL1F","%LIBS = :dbtbl1f.%libs and FID = :dbtbl1f.fid and FKEYS = :dbtbl1f.fkeys") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl1f)) S ^DBTBL(vobj(dbtbl1f,-3),19,vobj(dbtbl1f,-4),vobj(dbtbl1f,-5))=vobj(dbtbl1f)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.dbtbl1f) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL1F dbtbl1f

	if vpar["/INDEX/" do VINDEX(.dbtbl1f)                  // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DBTBL(vobj(dbtbl1f,-3),19,vobj(dbtbl1f,-4),vobj(dbtbl1f,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDBTBL1F dbtbl1f

	// Type local variables for access keys for defaults
	type public String %LIBS
	type public String FID
	type public String FKEYS

	if dbtbl1f.del.isNull() set dbtbl1f.del = 0            // del
	if dbtbl1f.rcfrmin.isNull() set dbtbl1f.rcfrmin = 0    // rcfrmin
	if dbtbl1f.rctomax.isNull() set dbtbl1f.rctomax = 1    // rctomax
	if dbtbl1f.rctomin.isNull() set dbtbl1f.rctomin = 1    // rctomin
	if dbtbl1f.upd.isNull() set dbtbl1f.upd = 0            // upd
	quit


vreqn // Validate required data items

	type public RecordDBTBL1F dbtbl1f

	if dbtbl1f.del.isNull() do vreqerr("DEL") quit
	if dbtbl1f.tblref.isNull() do vreqerr("TBLREF") quit
	if dbtbl1f.upd.isNull() do vreqerr("UPD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL1F dbtbl1f

	if dbtbl1f.%libs.isNull() do vreqerr("%LIBS") quit
	if dbtbl1f.fid.isNull() do vreqerr("FID") quit
	if dbtbl1f.fkeys.isNull() do vreqerr("FKEYS") quit

		if vx("DEL").exists(),dbtbl1f.del.isNull() do vreqerr("DEL") quit
		if vx("TBLREF").exists(),dbtbl1f.tblref.isNull() do vreqerr("TBLREF") quit
		if vx("UPD").exists(),dbtbl1f.upd.isNull() do vreqerr("UPD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL1F","MSG",1767,"DBTBL1F."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDBTBL1F dbtbl1f
	if 'dbtbl1f.fid.isNull() set vfkey("^DBTBL("_""""_dbtbl1f.%libs_""""_","_1_","_""""_dbtbl1f.fid_""""_")")="DBTBL1F(%LIBS,FID) -> DBTBL1"
	if 'dbtbl1f.tblref.isNull() set vfkey("^DBTBL("_""""_dbtbl1f.%libs_""""_","_1_","_""""_dbtbl1f.tblref_""""_")")="DBTBL1F(%LIBS,TBLREF) -> DBTBL1"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDBTBL1F dbtbl1f
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DBTBL1",":dbtbl1f.%libs,:dbtbl1f.fid") set vERRMSG = $$^MSG(8563,"DBTBL1F(%LIBS,FID) -> DBTBL1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("DBTBL1",":dbtbl1f.%libs,:dbtbl1f.tblref") set vERRMSG = $$^MSG(8563,"DBTBL1F(%LIBS,TBLREF) -> DBTBL1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDBTBL1F dbtbl1f
	if vx("").order().isNull() do AUDIT^UCUTILN(dbtbl1f,.vx(),1,"|") quit
	if vx("TBLREF").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(dbtbl1f,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Calculate PKEYS

	type public RecordDBTBL1F dbtbl1f
	/*
	----Revision History---------------------------------------------------
	04/29/04 - RussellDS - CR9172
		   Cleaned up variable scoping.  Remove getOneRow reference.
	
	10/19/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/

	// Insert referenced table access keys

	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:dbtbl1f.tblref",1)
	
	set dbtbl1f.pkeys=dbtbl1.acckeys

	quit 

vbu1 // Trigger BEFORE_UPDATE - Calculate PKEYS field value

	type public RecordDBTBL1F dbtbl1f
	do dbtbl1f.setAuditFlag(1)
	/*
	----Revision History---------------------------------------------------
	04/29/04 - RussellDS - CR9172
		   Cleaned up variable scoping.  Remove getOneRow reference.
	*/	
	
	// Insert referenced table access keys
	
	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:dbtbl1f.tblref",1)
	
	set dbtbl1f.pkeys=dbtbl1.acckeys

	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL1F dbtbl1f

	if dbtbl1f.%libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("%LIBS", vRM) quit
	if dbtbl1f.fid.length()>256 set vRM = $$^MSG(1076,256) do vdderr("FID", vRM) quit
	if dbtbl1f.fkeys.length()>60 set vRM = $$^MSG(1076,60) do vdderr("FKEYS", vRM) quit
	set X = dbtbl1f.del if 'X.isNull(),'Db.isDefined("STBLFKOPT","X") set vRM = $$^MSG(1485,X) do vdderr("DEL", vRM) quit
	if dbtbl1f.pkeys.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PKEYS", vRM) quit
	set X = dbtbl1f.rcfrmax if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RCFRMAX", vRM) quit
	set X = dbtbl1f.rcfrmin if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RCFRMIN", vRM) quit
	set X = dbtbl1f.rctomax if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RCTOMAX", vRM) quit
	set X = dbtbl1f.rctomin if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RCTOMIN", vRM) quit
	set X = dbtbl1f.tblref if 'X.isNull() set vRM = $$VAL^DBSVER("U",256,1,,"X?1A.AN!(X?1""%"".AN)!(X?.A.""_"".E)",,,0) if 'vRM.isNull() set vRM = $$^MSG(979,"DBTBL1F.TBLREF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = dbtbl1f.upd if 'X.isNull(),'Db.isDefined("STBLFKOPT","X") set vRM = $$^MSG(1485,X) do vdderr("UPD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL1F","MSG",979,"DBTBL1F."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordDBTBL1F dbtbl1f) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("TBLREF").exists() do vi1(.dbtbl1f)
	}
	do vi1(.dbtbl1f)

	quit
	

vi1(RecordDBTBL1F dbtbl1f) // Maintain FKPTR index entries (Foreign Key Pointer)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = dbtbl1f.%libs
	type String v3 = dbtbl1f.tblref
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = dbtbl1f.fid
	type String v5 = dbtbl1f.fkeys

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^DBTBL(vobj(dbtbl1f,-3),19,vobj(dbtbl1f,-4),vobj(dbtbl1f,-5)))#2,'$D(^DBINDX(v1,"FKPTR",v3,v4,v5)) do vidxerr("FKPTR")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DBINDX(v1,"FKPTR",v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TBLREF").exists() set v3=vx("TBLREF").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DBINDX(v1,"FKPTR",v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DBTBL1F")

	while ds.next() do {
		type RecordDBTBL1F dbtbl1f=ds.getRecord("DBTBL1F")
		if vlist.contains("VINDEX") do VINDEX(.dbtbl1f) quit
		if vlist.contains("FKPTR") do vi1(.dbtbl1f)
	}

	quit


public VIDXBLD1(RecordDBTBL1F dbtbl1f, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.dbtbl1f) quit
	if vlist.contains("FKPTR") do vi1(.dbtbl1f)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DBTBL1F","MSG",1225,"DBTBL1F."_di)

	quit


vkchged // Access key changed

	type public RecordDBTBL1F dbtbl1f

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("%LIBS").exists() set vux("%LIBS") = vx("%LIBS")
	if vx("FID").exists() set vux("FID") = vx("FID")
	if vx("FKEYS").exists() set vux("FKEYS") = vx("FKEYS")
	do vkey(1) set voldkey = dbtbl1f.%libs_","_dbtbl1f.fid_","_dbtbl1f.fkeys // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl1f.%libs_","_dbtbl1f.fid_","_dbtbl1f.fkeys // Copy new keys into object
	type RecordDBTBL1F vnewrec = dbtbl1f.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL1F",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL1F dbtbl1f

	if vux("%LIBS").exists() set dbtbl1f.%libs = vux("%LIBS").piece("|",i)
	if vux("FID").exists() set dbtbl1f.fid = vux("FID").piece("|",i)
	if vux("FKEYS").exists() set dbtbl1f.fkeys = vux("FKEYS").piece("|",i)
	quit

VIDXPGM()	quit "DBSDFKF"	// Location of index program

