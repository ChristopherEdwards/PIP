R01S075	// SCA002 - General Ledger Summary
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 09/10/2007 15:37 - root

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String XTJD
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number DTL
	type Date VIN3

	set RID="SCA002"
	set RN="General Ledger Summary"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("DTL")="|1|||||||L|Include Detail|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN3")="|10||[REP002]TJD|[TGL]TJD:DISTINCT||set XTJD=X||D|Transaction Date|||||"

	set %READ="IO/REQ,DTL#0,VIN3#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String XTJD
	type public Date VIN3
	type public Number DTL
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,ACNCR,ACNDR,CONAM,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,NDCR,NDDR,NET,RID,RN,TSRC,VL,VLOF,VRF(),VSTATS(),ZACN,ZCRCD,ZEFD,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA002",RN="General Ledger Summary"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA002","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[REP002]CMT#15#40,[REP002]TUID#56#9,[REP002]TRC#66#8"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE

		set VBNRINFO("PROMPTS",3)="WC1|"_"Transaction Date"_"|VIN3|"_$$DAT^%ZM(VIN3.get(),%MSKD)

		set VWHERE="REP002.PID=:%ProcessID AND REP002.TJD=:VIN3"

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="General Ledger Summary"
		set VBNRINFO("PGM")="R01S075"
		set VBNRINFO("RID")="SCA002"
		set VBNRINFO("TABLES")="REP002,TGL,GLAD"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,REP002]PID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,REP002]TJD"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,REP002]SRC"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,REP002]CRCD"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,REP002]EFD"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,REP002]ACN"
		set VBNRINFO("ORDERBY",7)="[SYSDEV,REP002]CC"
		set VBNRINFO("ORDERBY",8)="[SYSDEV,REP002]SEQ"

		set VBNRINFO("DOC",1)="The General Ledger Summary (SCA002) lists, by currency code and transaction"
		set VBNRINFO("DOC",2)="date, the total debits and credits posted to each general ledger account, cost"
		set VBNRINFO("DOC",3)="center, and currency during the processing day.  This report also lists the net"
		set VBNRINFO("DOC",4)="difference between the total debits and total credits.  Out-of-balance"
		set VBNRINFO("DOC",5)="situations occur in the general ledger when the total debits do not equal the"
		set VBNRINFO("DOC",6)="total credits per currency."
		set VBNRINFO("DOC",7)="The SCA002 report lists data by source.  Sources include:"
		set VBNRINFO("DOC",8)="*  Miscellaneous transactions from the Daily Miscellaneous Journal file [DMJ]."
		set VBNRINFO("DOC",9)="*  Account transactions from the Daily Transaction Journal file [DTJ]."
		set VBNRINFO("DOC",10)="*  Cash transactions from the cash reconciliation process."
		set VBNRINFO("DOC",11)="*  Data from the accruals process."
		set VBNRINFO("DOC",12)="*  Base currency equivalent values for transactions involving foreign"
		set VBNRINFO("DOC",13)="   currencies."
		set VBNRINFO("DOC",14)="*  Delinquency asset reclassification [DAYENDDARCB]."
		set VBNRINFO("DOC",15)="*  Delinquency asset reclassification reversal prior day."
		set VBNRINFO("DOC",16)="*  Contra interest corrections."
		set VBNRINFO("DOC",17)="*  Contra interest correction reversals."
		set VBNRINFO("DOC",18)="Optionally, users can generate the report to include detail information per"
		set VBNRINFO("DOC",19)="cost center for miscellaneous transactions.  This detail includes the user ID"
		set VBNRINFO("DOC",20)="and transaction sequence number for each applicable transaction."
		set VBNRINFO("DOC",21)="Refer to the ""System Balancing Reference Manual"" and the ""System Balancing"
		set VBNRINFO("DOC",22)="Troubleshooting Guide"" for further information concerning this report."

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:8 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:1 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("REP002.PID,REP002.TJD,REP002.SRC,REP002.CRCD,REP002.EFD,REP002.ACN,REP002.CC,REP002.SEQ,TGL.TJD,TGL.CRCD,TGL.EFD,TGL.ACN,GLAD.DESC1,TGL.CC,TGL.DRAMT,TGL.CRAMT,REP002.CMT,REP002.TUID,REP002.TRC,REP002.TRN,REP002.TAMT","REP002,TGL,GLAD","REP002.PID=:%ProcessID AND REP002.TJD=:VIN3","REP002.PID,REP002.TJD,REP002.SRC,REP002.CRCD,REP002.EFD,REP002.ACN,REP002.CC,REP002.SEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5="",vovc6="",vovc7="",vovc8=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5,vovc6,vc6,vovc7,vc7,vovc8,vc8
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5,vovc6=vc6,vovc7=vc7,vovc8=vc8
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21
	set vc1=V.piece($C(9),1)			// REP002.PID
	set vc2=V.piece($C(9),2)			// REP002.TJD
	set vc3=V.piece($C(9),3)			// REP002.SRC
	set vc4=V.piece($C(9),4)			// REP002.CRCD
	set vc5=V.piece($C(9),5)			// REP002.EFD
	set vc6=V.piece($C(9),6)			// REP002.ACN
	set vc7=V.piece($C(9),7)			// REP002.CC
	set vc8=V.piece($C(9),8)			// REP002.SEQ
	set vc9=V.piece($C(9),9)			// TGL.TJD
	set vc10=V.piece($C(9),10)			// TGL.CRCD
	set vc11=V.piece($C(9),11)			// TGL.EFD
	set vc12=V.piece($C(9),12)			// TGL.ACN
	set vc13=V.piece($C(9),13)			// GLAD.DESC1
	set vc14=V.piece($C(9),14)			// TGL.CC
	set vc15=V.piece($C(9),15)			// TGL.DRAMT
	set vc16=V.piece($C(9),16)			// TGL.CRAMT
	set vc17=V.piece($C(9),17)			// REP002.CMT
	set vc18=V.piece($C(9),18)			// REP002.TUID
	set vc19=V.piece($C(9),19)			// REP002.TRC
	set vc20=V.piece($C(9),20)			// REP002.TRN
	set vc21=V.piece($C(9),21)			// REP002.TAMT
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	//Incoming=XTJD
	type public Number CRCDCR,CRCDDR,EFDCR,EFDDR
	type public Date XTJD

	type Number ACN,CC,SEQ,SRC
	type String CRCD
	type Date EFD

	set (CRCDCR,CRCDDR)=0
	set (EFDCR,EFDDR)=0
	do Db.delete("REP002","PID=:%ProcessID")
	type DbSet ds=Db.selectDbSet("TGL","TJD=:XTJD")
	while ds.next() do {
		type RecordTGL tgl=ds.getRecord("TGL")
		set SRC=tgl.src
		set CRCD=tgl.crcd
		set EFD=tgl.efd
		set ACN=tgl.acn
		set CC=tgl.cc
		type DbSet dsdtl=Db.selectDbSet("TGLDTL","TJD=:XTJD AND SRC=:SRC AND CRCD=:CRCD AND EFD=:EFD AND ACN=:ACN AND CC=:CC")
		if dsdtl.isEmpty() do {
			type RecordREP002 rep002=Db.getRecord("REP002","PID=:%ProcessID,TJD=:XTJD,SRC=:SRC,CRCD=:CRCD,EFD=:EFD,ACN=:ACN,CC=:CC,SEQ=0",1)
			do rep002.save()
		}
		else  do {
			while dsdtl.next() do {
				type RecordTGLDTL tgldtl=dsdtl.getRecord("TGLDTL")
				set SEQ=tgldtl.seq
				type RecordREP002 rep002=Db.getRecord("REP002","PID=:%ProcessID,TJD=:XTJD,SRC=:SRC,CRCD=:CRCD,EFD=:EFD,ACN=:ACN,CC=:CC,SEQ=:SEQ",1)
				set rep002.glacn=tgldtl.glacn
				set rep002.ccntr=tgldtl.ccntr
				set rep002.trn=tgldtl.trn
				set rep002.tamt=tgldtl.tamt
				set rep002.cmt=tgldtl.cmt
				set rep002.tuid=tgldtl.uid
				set rep002.trc=tgldtl.trc
				do rep002.save()
				}
			}
		}
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=XTJD
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0,vs(8)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(5)=1,vskp(6)=1,vskp(7)=1,vskp(8)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(6).get() do VDTL6 quit:VFMQ
	if 'vskp(7).get() do VDTL7 quit:VFMQ
	if 'vskp(8).get() do VDTL8 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(8)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5,vc6,vovc6,vc7,vovc7,vc8,vovc8
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7,vb8
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7,vb8)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb4!(vovc4'=vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1,vb8=1,VH0=1
	if vb5!(vovc5'=vc5) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1,vb8=1,VH0=1
	if vb6!(+vovc6'=+vc6) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1,vb8=1
	if vb7!(+vovc7'=+vc7) set vs(8)=0,vh(8)=0,VD(7)=0,vb8=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(8) set vs(8)=1 do VSUM8 quit:VFMQ  do stat^DBSRWUTL(8)
	if 'vs(7) set vs(7)=1 do VSUM7 quit:VFMQ  do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do VSUM6 quit:VFMQ  do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do VSUM5 quit:VFMQ  do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(8)=VT(8)+1
	quit

VSUM5	// Summary
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,I,IOSL,NDCR,NDDR,NET,TSRC,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	if 'VT(5) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="                                                                             "_"================"
	set VL=VL_$J("",94-VL.length())_"================"
	set VL=VL_$J("",113-VL.length())_"=="
	set VL=VL_$J("",115-VL.length())_"================"
	do VOM
	set VL="                                         "_"Totals for currency "
	do VP1 quit:VFMQ!verror.get()  set V=$E(ZCRCD,1,3)
	set VL=VL_$J("",61-VL.length())_V
	set VL=VL_$J("",77-VL.length())_$J($FN(CRCDDR,",",2),16)
	set VL=VL_$J("",94-VL.length())_$J($FN(CRCDCR,",",2),16)
	do VP2 quit:VFMQ!verror.get()  set V=$S(NET<0:$J($FN(-NET,",",2),15)_" CR",NET>0:$J($FN(NET,",",2),15)_" DR",1:$J($FN(NET,",",2),15)_"   ") do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",113-VL.length())_V
	do VOM
	set VL="" do VOM
	quit

VDTL6	// Detail
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,IOSL,NDCR,NDDR,NET,TSRC,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	quit:VD(6)  set VD(6)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc12,VO=V do VP4 quit:VFMQ!verror.get()  set V=$J(V,12) set VL=V
	set VL=VL_$J("",14-VL.length())_$E(vc13,1,40)
	do VOM
	quit

VSUM6	// Summary
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,I,IOSL,NDCR,NDDR,NET,TSRC,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	if 'VT(6) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="                                                                             "_"----------------"
	set VL=VL_$J("",94-VL.length())_"----------------"
	set VL=VL_$J("",113-VL.length())_"------------------"
	do VOM
	set VL="                                          "_"Totals for date"
	do VP5 quit:VFMQ!verror.get()  set V=$J($$DAT^%ZM(ZEFD),10)
	set VL=VL_$J("",58-VL.length())_V
	set VL=VL_$J("",77-VL.length())_$J($FN(EFDDR,",",2),16)
	set VL=VL_$J("",94-VL.length())_$J($FN(EFDCR,",",2),16)
	do VP6 quit:VFMQ!verror.get()  set V=$S(NET<0:$J($FN(-NET,",",2),15)_" CR",NET>0:$J($FN(NET,",",2),15)_" DR",1:$J($FN(NET,",",2),15)_"   ") do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",113-VL.length())_V
	do VOM
	quit

VDTL7	// Detail
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,IOSL,NDCR,NDDR,NET,TSRC,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	quit:VD(7)  set VD(7)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc7,VO=V do VP8 quit:VFMQ!verror.get()  set V=$J(V,6) set VL="      "_V
	set V=$$VP23(vc14)				// @TBL([TGL]CC)
	set VL=VL_$J("",14-VL.length())_$E(V,1,40)
	set V=vc15,VO=V do VP9 quit:VFMQ!verror.get()  set V=$J($FN(V,",",2),16)
	set VL=VL_$J("",77-VL.length())_V		// [SYSDEV,TGL]DRAMT
	set V=vc16,VO=V do VP10 quit:VFMQ!verror.get()  set V=$J($FN(V,",",2),16)
	set VL=VL_$J("",94-VL.length())_V		// [SYSDEV,TGL]CRAMT
	do VP11 quit:VFMQ!verror.get()  set V=$S(NET<0:$J($FN(-NET,",",2),15)_" CR",NET>0:$J($FN(NET,",",2),15)_" DR",1:$J($FN(NET,",",2),15)_"   ")
	set VL=VL_$J("",113-VL.length())_V
	do VOM
	quit

VSUM7	// Summary
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,I,IOSL,NDCR,NDDR,NET,TSRC,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	if 'VT(7) quit
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="                                                                             "_"----------------"
	set VL=VL_$J("",94-VL.length())_"----------------"
	set VL=VL_$J("",113-VL.length())_"--"
	set VL=VL_$J("",115-VL.length())_"----------------"
	do VOM
	set VL="                                         "_"Totals for account "
	do VP12 quit:VFMQ!verror.get()  set V=$E(ZACN,1,12)
	set VL=VL_$J("",60-VL.length())_V
	set VL=VL_$J("",77-VL.length())_$J($FN(ACNDR,",",2),16)
	set VL=VL_$J("",94-VL.length())_$J($FN(ACNCR,",",2),16)
	do VP13 quit:VFMQ!verror.get()  set V=$S(NET<0:$J($FN(-NET,",",2),15)_" CR",NET>0:$J($FN(NET,",",2),15)_" DR",1:$J($FN(NET,",",2),15)_"   ")
	set VL=VL_$J("",113-VL.length())_V
	do VOM
	quit

VDTL8	// Detail
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,IOSL,NDCR,NDDR,NET,TSRC,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="              "_$E(vc17,1,40)
	set VL=VL_$J("",55-VL.length())_$E(vc18,1,9)
	set VL=VL_$J("",65-VL.length())_$E(vc19,1,8)
	do VP14 quit:VFMQ!verror.get()  set V=$S(+DR=0:$J("",16),1:$J($FN(DR,",",2),16))
	set VL=VL_$J("",77-VL.length())_V
	do VP15 quit:VFMQ!verror.get()  set V=$S(+CR=0:$J("",16),1:$J($FN(CR,",",2),16)) do VP16 quit:VFMQ!verror.get()
	set VL=VL_$J("",94-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM8	// Summary
	type public String %TIM,ACNCR,ACNDR,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,I,IOSL,NDCR,NDDR,NET,TSRC,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate

	if 'VT(8) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set V="---------------- ----------------" do VP17 quit:VFMQ!verror.get()  set VL="                                                                             "_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                         "_"Totals for detail entries"
	set VL=VL_$J("",77-VL.length())_$J($FN(DTLDR,",",2),16)
	set V=$J($FN(DTLCR,",",2),16) do VP18 quit:VFMQ!verror.get()
	set VL=VL_$J("",94-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                         "_"Totals for non-detailed entries"
	do VP19 quit:VFMQ!verror.get()  set V=$J($FN(NDDR,",",2),16)
	set VL=VL_$J("",77-VL.length())_V
	do VP20 quit:VFMQ!verror.get()  set V=$J($FN(NDCR,",",2),16) do VP21 quit:VFMQ!verror.get()
	set VL=VL_$J("",94-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ACNCR,ACNDR,CONAM,CR,CRCDCR,CRCDDR,DR,DTLCR,DTLDR,EFDCR,EFDDR,NDCR,NDDR,NET,RID,RN,TSRC,VL,XTJD,ZACN,ZCRCD,ZEFD,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vovc8,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+9,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",98-VL.length())_"Run Date:"
	set VL=VL_$J("",108-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",120-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",100-VL.length())_"System:"
	set VL=VL_$J("",108-VL.length())_$J($$DAT^%ZM(vc9),10)
	set VL=VL_$J("",120-VL.length())_"Page:"
	set VL=VL_$J("",126-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	set VL="Source:"
	do VP22 quit:VFMQ!verror.get()  set V=$E(TSRC,1,12)
	set VL=VL_$J("",8-VL.length())_V
	set VL=VL_$J("",24-VL.length())_"Currency Code: "
	set VL=VL_$J("",39-VL.length())_$E(vc10,1,3)
	set VL=VL_$J("",46-VL.length())_"Effective Date:  "
	set VL=VL_$J("",63-VL.length())_$J($$DAT^%ZM(vc11),10)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="     "_"Account"
	do VOM
	set VL="    "_"Cost Ctr  Description                              User ID   Sequence              Debits          Credits                  Net"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: ZCRCD

	type public String ZCRCD, vc4, vovc4
 
        if vovc4'=vc4 set ZCRCD=vovc4
        else  set ZCRCD=vc4
 
        quit
	quit

VP2	// Column pre-processor - Variable: NET

	type public Number CRCDCR,CRCDDR,NET

	set NET=CRCDDR-CRCDCR

	quit


VP3	// Column post-processor - Variable: NET

	type public Number CRCDCR,CRCDDR

	set (CRCDCR,CRCDDR)=0

        quit
	quit

VP4	// Column pre-processor - [SYSDEV,TGL]ACN

	type public Number ACNCR,ACNDR
	set (ACNCR,ACNDR)=0
	quit

VP5	// Column pre-processor - Variable: ZEFD

	type public Date ZEFD, vc5, vovc5
 
        if vovc5'=vc5 set ZEFD=vovc5
        else  set ZEFD=vc5
 
        quit
	quit

VP6	// Column pre-processor - Variable: NET

	type public Number EFDCR,EFDDR,NET

	set NET=EFDDR-EFDCR

	quit


VP7	// Column post-processor - Variable: NET

	type public Number EFDCR, EFDDR

	set (EFDCR,EFDDR)=0

	quit

VP8	// Column pre-processor - [SYSDEV,REP002]CC

	type public String DTLCR,DTLDR
	set (DTLCR,DTLDR)=0
	quit

VP9	// Column pre-processor - [SYSDEV,TGL]DRAMT

	type public String vc15
	type Public Number TMPDRAMT
	set TMPDRAMT=vc15
	quit

VP10	// Column pre-processor - [SYSDEV,TGL]CRAMT

	type public String vc16
	type Public Number TMPCRAMT
	set TMPCRAMT=vc16
	quit

VP11	// Column pre-processor - Variable: NET

	type public String vc15,vc16
        type public Number ACNCR,ACNDR,CRAMT,DRAMT,NET

	set NET=vc15-vc16
	set ACNCR=ACNCR+vc16
	set ACNDR=ACNDR+vc15

	quit

VP12	// Column pre-processor - Variable: ZACN

	type public Number ZACN, vc6, vovc6

	if vovc6'=vc6 set ZACN=vovc6
	else  set ZACN=vc6

	quit

VP13	// Column pre-processor - Variable: NET

	type public Number ACNCR,ACNDR,CRCDCR,CRCDDR,EFDCR,EFDDR,NET

	set NET=ACNDR-ACNCR

	// Currency code subtotals
	set CRCDCR=CRCDCR+ACNCR 
	set CRCDDR=CRCDDR+ACNDR        

	// Effective date subtotals
	set EFDCR=EFDCR+ACNCR 
	set EFDDR=EFDDR+ACNDR    

	quit


VP14	// Column pre-processor - Variable: DR

	type public String vc20,vc21
	type public String DR, TRN
	type public Number DTLDR, TAMT
 
	set TRN=vc20
	if TRN="DR" set DR=vc21 set DTLDR=DTLDR+DR
	else  set DR=0

	quit


VP15	// Column pre-processor - Variable: CR

	type public String vc20,vc21
	type public String CR, TRN
	type public Number DTLCR, TAMT

	set TRN=vc20
	if TRN="CR" set CR=vc21 set DTLCR=DTLCR+CR
	else  set CR=0

	quit

VP16	// Column post-processor - Variable: CR

	type public String DTL,V,VL

	if DTL=0 set (V,VL)="" quit 

	quit


VP17	// Column post-processor - ---------------- ----------------

	type public String DTL,V,VL

	if DTL=0 set (V,VL)=""

	quit


VP18	// Column post-processor - Variable: DTLCR

	type public String DTL,V,VL

	if DTL=0 set (V,VL)=""

	quit


VP19	// Column pre-processor - Variable: NDDR

	type public Number DTLDR,NDDR,TMPDRAMT

	set NDDR=TMPDRAMT-DTLDR

	quit


VP20	// Column pre-processor - Variable: NDCR

	type public Number DTLCR,NDCR,TMPCRAMT

	set NDCR=TMPCRAMT-DTLCR
	
	quit


VP21	// Column post-processor - Variable: NDCR

	type public String DTL,V,VL

	if DTL=0 set (V,VL)=""

	quit

VP22	// Column pre-processor - Variable: TSRC

	type public String vc3
	type public String TSRC
	type public Number SRC	

	set SRC=vc3
	set TSRC=$P("DTJ,DMJ,CASH,ACCRUAL,FXBASEQV,FXTAXWTH,DARCB,DARCB-REV,IC-CLR,DOVRCB,DOVRCB-REV,CONTRA,CONTRA-REV",",",SRC)

	quit

VP23(KEY1)	// @TBL([TGL]CC)

	if KEY1="" quit ""
	type Public Cache %CACHE()
	type RecordUTBLCCNTR tbl=%CACHE("UTBLCCNTR").getRecord("UTBLCCNTR","CC=:KEY1")
	quit tbl.DESC
