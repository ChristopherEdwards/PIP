HISTUTL // History Utility (Compiled by procedure UHFETCH)
 quit

Public HISTASC(ResultSet histrs,Number CID,Date BJD,Number MIN,Number MAX) // HIST ResultSet (Ascending)
 type Public ResultSet histrs=Db.select("CID,TSEQ,TJD,ITC,ETC,TAMT,EFD,TLO,TSO,TCMT,CDT,TIME,BRCD,TRC,UID,SPR,TSB,XHS16,CRCD,RATE,VDT,BEN,DIR,CHKTYP,ENDBAL,MULT,BSEAMT,CUSTCD,TRESREF,RTY,MSD,GLSC,UDPRIN,BCRCD,XPDO,SYSBASE,CMPSAV,IDENT","HIST","CID=:CID AND TJD NOT < :BJD AND TSEQ NOT < :MIN AND TSEQ NOT > :MAX","TSEQ")
 if histrs.isEmpty() quit 0
 quit 1

Public HISTDSC(ResultSet histrs,Number CID,Date BJD,Number MIN,Number MAX) // HIST ResultSet (Descending)
 type Public ResultSet histrs=Db.select("CID,TSEQ,TJD,ITC,ETC,TAMT,EFD,TLO,TSO,TCMT,CDT,TIME,BRCD,TRC,UID,SPR,TSB,XHS16,CRCD,RATE,VDT,BEN,DIR,CHKTYP,ENDBAL,MULT,BSEAMT,CUSTCD,TRESREF,RTY,MSD,GLSC,UDPRIN,BCRCD,XPDO,SYSBASE,CMPSAV,IDENT","HIST","CID=:CID AND TJD NOT < :BJD AND TSEQ NOT < :MIN AND TSEQ NOT > :MAX","TSEQ DESC")
 if histrs.isEmpty() quit 0
 quit 1

Public HISTREC(ResultSet histrs,Number CID,Number TSEQ) // HIST ResultSet (Single Record)
 type Public ResultSet histrs=Db.select("CID,TSEQ,TJD,ITC,ETC,TAMT,EFD,TLO,TSO,TCMT,CDT,TIME,BRCD,TRC,UID,SPR,TSB,XHS16,CRCD,RATE,VDT,BEN,DIR,CHKTYP,ENDBAL,MULT,BSEAMT,CUSTCD,TRESREF,RTY,MSD,GLSC,UDPRIN,BCRCD,XPDO,SYSBASE,CMPSAV,IDENT","HIST","CID=:CID AND TSEQ=:TSEQ")
 if histrs.isEmpty() quit 0
 quit 1

Public HIST0(ResultSet hist0rs,Number CID,Date JD) // HIST0 ResultSet (Single Record)
 type Public ResultSet hist0rs=Db.select("CID,JD,BAL,SEQZERO,BAOLA,LADT,HABL1,HABL2,TEB,UDBAL,IUNT,ACRAT,ACRCF,NACRAT,NACRCF,YEIRN,YEMDT","HIST0","CID=:CID AND JD=:JD")
 if hist0rs.isEmpty() quit 0
 quit 1

Public HISTDST(ResultSet histdst,Number CID,Number TSEQ) // HISTDST ResultSet
 type Public ResultSet histdst=Db.select("CID,TSEQ,DSTSEQ,ACCT,ITC,ETC,TAMT,EFD,TLO,TSO,TCMT,CDT,TIM,BRCDE,TRC,UIDT,SPR,TSB,LNERC,CRCD,RATE,VDT,CC,DIR,CHKTYP,ENDBAL,MULT,BSEAMT,CUSTCD,TRESREF,RTY,MSD,GLSC,UDPRIN,BCRCD,XPDO,SYSBASE,IDENT","HISTDST","CID=:CID AND DSTSEQ=:TSEQ")
 if histdst.isEmpty() quit 0
 quit 1

Public HISTLST(ResultSet histlst,Number CID,Number TSEQ) // HISTLST ResultSet
 type Public ResultSet histlst=Db.select("CID,SLN,SLSEQ,ACT,RSEQ,ETC,TAMT,TSO,RFLG","HISTLST","CID=:CID AND SLN=:TSEQ")
 if histlst.isEmpty() quit 0
 quit 1

Public HISTSB(ResultSet histsb,Number CID,Number TSEQ) // HISTSB ResultSet
 type Public ResultSet histsb=Db.select("CID,SLN,SLSEQ,PE01,PE02,PE03,PE04,PE05","HISTSB","CID=:CID AND SLN=:TSEQ")
 if histsb.isEmpty() quit 0
 quit 1

Public CNVHIST(Row hist) // Convert HIST currency columns
 type String ORG
 type Row euro=Class.new("Row","#$$EURO^HISTDEF")
 do euro.setDelimiter("|")
 do EURO(hist.cid)
 if euro.eurcnvd="",euro.eurevdt="" quit
 type Number DECP,RATE
 type String CRCD
 set CRCD=euro.crcd
 set RATE=euro.rate
 set DECP=euro.decp
 if hist.crcd.isNull() do {
  if hist.tjd<euro.eurcnvd set hist.crcd=euro.orgcrcd
  else  if hist.tjd<euro.eurevdt set hist.crcd=CUVAR.emucrcd
  else  set hist.crcd=CRCD
  }
 if hist.crcd=CRCD quit
 set ORG=hist.tamt_hist.crcd
 set hist.crcd=CRCD
 set hist.tamt=$$CNVTAMT(hist.tamt,CRCD,RATE,DECP)
 set hist.tso=$$CNVTSO(hist.tso,ORG,CRCD,RATE,DECP)
 if hist.etc.isNull()!(hist.etc="FM") set hist.tcmt=$$CNVTCMT(hist.tcmt,CRCD,RATE,DECP)
 if hist.xhs16'="" set hist.xhs16=$$CNVXHS16(.hist,CRCD,RATE,DECP)
 if hist.tsb set hist.tsb=$$EQVAMT(hist.tsb,CRCD,RATE,DECP)
 if hist.dir set hist.dir=$$EQVAMT(hist.dir,CRCD,RATE,DECP)
 if hist.endbal set hist.endbal=$$EQVAMT(hist.endbal,CRCD,RATE,DECP)
 if hist.bseamt set hist.bseamt=$$EQVAMT(hist.bseamt,CRCD,RATE,DECP)
 if hist.udprin set hist.udprin=$$EQVAMT(hist.udprin,CRCD,RATE,DECP)
 if hist.sysbase set hist.sysbase=$$EQVAMT(hist.sysbase,CRCD,RATE,DECP)
 quit

Public CNVHIST0(Row hist0) // Convert HIST0 currency columns
 type Row euro=Class.new("Row","#$$EURO^HISTDEF")
 do euro.setDelimiter("|")
 do EURO(hist0.cid)
 if euro.eurcnvd="",euro.eurevdt="" quit
 type Number DECP,RATE
 type String CRCD
 set CRCD=euro.crcd
 set RATE=euro.rate
 set DECP=euro.decp
 if hist0.bal set hist0.bal=$$EQVAMT(hist0.bal,CRCD,RATE,DECP)
 if hist0.baola set hist0.baola=$$EQVAMT(hist0.baola,CRCD,RATE,DECP)
 if hist0.habl1 set hist0.habl1=$$EQVAMT(hist0.habl1,CRCD,RATE,DECP)
 if hist0.habl2 set hist0.habl2=$$EQVAMT(hist0.habl2,CRCD,RATE,DECP)
 if hist0.teb set hist0.teb=$$EQVAMT(hist0.teb,CRCD,RATE,DECP)
 if hist0.udbal set hist0.udbal=$$EQVAMT(hist0.udbal,CRCD,RATE,DECP)
 if hist0.iunt set hist0.iunt=$$EQVAMT(hist0.iunt,CRCD,RATE,DECP)
 if hist0.acrat set hist0.acrat=$$EQVAMT(hist0.acrat,CRCD,RATE,DECP)
 if hist0.acrcf set hist0.acrcf=$$EQVAMT(hist0.acrcf,CRCD,RATE,DECP)
 if hist0.nacrat set hist0.nacrat=$$EQVAMT(hist0.nacrat,CRCD,RATE,DECP)
 if hist0.nacrcf set hist0.nacrcf=$$EQVAMT(hist0.nacrcf,CRCD,RATE,DECP)
 if hist0.yeirn set hist0.yeirn=$$EQVAMT(hist0.yeirn,CRCD,RATE,DECP)
 quit

Public CNVDST(Row hist,Row histdst) // Convert HISTDST currency columns
 type String ETC
 type Public Cache %CACHE()
 if histdst.acct.isNull() quit
 set ETC=histdst.etc if ETC="" quit
 type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:ETC")
 if trn.cls="M" quit
 type Row euro=Class.new("Row","#$$EURO^HISTDEF")
 do euro.setDelimiter("|")
 do EURO(histdst.acct)
 if euro.eurcnvd="",euro.eurevdt="" quit
 type Number DECP,RATE
 type String CRCD
 set CRCD=euro.crcd
 set RATE=euro.rate
 set DECP=euro.decp
 if histdst.tsb set histdst.tsb=$$EQVAMT(histdst.tsb,CRCD,RATE,DECP)
 if histdst.dir set histdst.dir=$$EQVAMT(histdst.dir,CRCD,RATE,DECP)
 if histdst.endbal set histdst.endbal=$$EQVAMT(histdst.endbal,CRCD,RATE,DECP)
 if histdst.bseamt set histdst.bseamt=$$EQVAMT(histdst.bseamt,CRCD,RATE,DECP)
 if histdst.udprin set histdst.udprin=$$EQVAMT(histdst.udprin,CRCD,RATE,DECP)
 if histdst.sysbase set histdst.sysbase=$$EQVAMT(histdst.sysbase,CRCD,RATE,DECP)
 quit

Public CNVLST(Row hist,Row histlst) // Convert HISTLST currency columns
 type Row euro=Class.new("Row","#$$EURO^HISTDEF")
 do euro.setDelimiter("|")
 do EURO(histlst.cid)
 if euro.eurcnvd="",euro.eurevdt="" quit
 type Number DECP,RATE
 type String CRCD
 set CRCD=euro.crcd
 set RATE=euro.rate
 set DECP=euro.decp
 quit

Public CNVSB(Row hist,Row histsb) // Convert HISTSB currency columns
 type Row euro=Class.new("Row","#$$EURO^HISTDEF")
 do euro.setDelimiter("|")
 do EURO(histsb.cid)
 if euro.eurcnvd="",euro.eurevdt="" quit
 type Number DECP,RATE
 type String CRCD
 set CRCD=euro.crcd
 set RATE=euro.rate
 set DECP=euro.decp
 do {
  type Number AMT
  type String STR
  set STR=histsb.pe01
  set AMT=STR.piece("#",3) if 'AMT quit
  set STR.piece("#",3)=$$EQVAMT(AMT,CRCD,RATE,DECP)
  set histsb.pe01=STR
  }
 do {
  type Number AMT
  type String STR
  set STR=histsb.pe02
  set AMT=STR.piece("#",3) if 'AMT quit
  set STR.piece("#",3)=$$EQVAMT(AMT,CRCD,RATE,DECP)
  set histsb.pe02=STR
  }
 do {
  type Number AMT
  type String STR
  set STR=histsb.pe03
  set AMT=STR.piece("#",3) if 'AMT quit
  set STR.piece("#",3)=$$EQVAMT(AMT,CRCD,RATE,DECP)
  set histsb.pe03=STR
  }
 do {
  type Number AMT
  type String STR
  set STR=histsb.pe04
  set AMT=STR.piece("#",3) if 'AMT quit
  set STR.piece("#",3)=$$EQVAMT(AMT,CRCD,RATE,DECP)
  set histsb.pe04=STR
  }
 do {
  type Number AMT
  type String STR
  set STR=histsb.pe05
  set AMT=STR.piece("#",3) if 'AMT quit
  set STR.piece("#",3)=$$EQVAMT(AMT,CRCD,RATE,DECP)
  set histsb.pe05=STR
  }
 quit

CNVTAMT(String TAMT,String CRCD,Number RATE,Number DECP) // Convert complex transaction amount
 type Number I
 for I=1:1:TAMT.length("#") if TAMT.piece("#",I) set TAMT.piece("#",I)=$$EQVAMT(TAMT.piece("#",I),CRCD,RATE,DECP)
 quit TAMT

CNVTCMT(String TCMT,String CRCD,Number RATE,Number DECP) // Convert commnent field
 type String COL,fsn(),NV,OV,X,Y
 if TCMT="" quit TCMT
 if TCMT'["[",TCMT'["]" quit TCMT
 set COL=$$di^CIFDBS(TCMT) if COL="" quit TCMT
 if $$TYP^DBSDD(COL)'="$" quit TCMT
 set X=TCMT.piece("]",1)
 set Y=TCMT.piece("]",2)
 set OV=Y.piece(":",2) // Old value
 set NV=Y.piece(":",3) // New value
 if 'OV,'NV quit TCMT
 if OV set Y.piece(":",2)=$$EQVAMT(OV,CRCD,RATE,DECP)
 if NV set Y.piece(":",3)=$$EQVAMT(NV,CRCD,RATE,DECP)
 set TCMT=X_"]"_Y
 quit TCMT

CNVTSO(String TSO,String ORG,String CRCD,Number RATE,Number DECP) // Convert transaction source field
 if TSO="" set TSO="OCUR#"_ORG
 else  do {
  type String id,tmp()
  do OUT^UTSO(.tmp,TSO)
  set id=""
  for  set id=tmp(id).order() quit:id=""  do TSO(id,.tmp,CRCD,RATE,DECP)
  set tmp("OCUR")=ORG
  do IN^UTSO(.tmp,.TSO)
  }
 quit TSO

TSO(String id,String tmp(),String CRCD,Number CNVRATE,Number CNVDECP) // Convert currency fields in TSO
 type Public Cache %CACHE()
 type Number pos
 type String del,str,typ,val
 if id="INTADJ" do { quit
  for pos=1:1:tmp(id).length("#") do {
   set val=tmp(id).piece("#",pos) if 'val quit
   set tmp(id).piece("#",pos)=$$EQVAMT(val,CRCD,CNVRATE,CNVDECP)
   }
  }
 if ",DEFINT,LNFEE,LNFEEIN,SEGA,SEGAA,SEGI,SEGP,"[(","_id_",") do { quit
  if id.extract(1,5)="LNFEE"!(id="DEFINT") set del=","
  else  set del="^"
  for pos=1:1 set str=tmp(id).piece(del,pos) quit:str=""  do {
   set val=str.piece(":",2) if 'val quit
   set str.piece(":",2)=$$EQVAMT(val,CRCD,CNVRATE,CNVDECP)
   set tmp(id).piece(del,pos)=str
   }
  }
 set val=tmp(id) if 'val quit
 if id.extract()="Z" do {
  catch ERROR {
   set typ="T"
   }
  type RecordUTBLZTSO utbl=%CACHE("UTBLZTSO").getRecord("UTBLZTSO","KEY=:id")
  set typ=utbl.typ
  }
 else  do {
  catch ERROR {
   set typ="T"
   }
  type RecordSTBLTSO stbl=%CACHE("STBLTSO").getRecord("STBLTSO","KEY=:id")
  set typ=stbl.typ
  }
 if typ="$" set tmp(id)=$$EQVAMT(val,CRCD,CNVRATE,CNVDECP)
 quit

CNVXHS16(Row hist,String CRCD,Number CNVRATE,Number CNVDECP) // Convert pieces of XHS16 based on EC posting program
 type Number I
 type Public Cache %CACHE()
 type String PGMEC,ETC,XHS16
 set XHS16=hist.xhs16
 set ETC=hist.etc if ETC="" quit XHS16
 type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:ETC")
 set PGMEC=trn.pgmec
 if PGMEC="" quit XHS16
 set PGMEC=PGMEC.piece("(",1)
 if PGMEC="EC^DEPPW" do { quit XHS16
  for I=2,20,22,23 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 if PGMEC="EC^DEPINT4" do { quit XHS16
  for I=1,8 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 if PGMEC="EC^SRVTRN" do { quit XHS16
  for I=4,5,6,7,8 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 if PGMEC="^LNPTSR" do { quit XHS16
  for I=11,30,31 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 if PGMEC="^DEPEC0" do { quit XHS16
  for I=14,15,16,17,18,20,21 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 if PGMEC="^DEPEC1" do { quit XHS16
  for I=26 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 if PGMEC.piece("(",1)="EC^DEPCL" do {  quit XHS16
  for I=1:1:6,19:1:21,26:1:28,35:1:41 if XHS16.piece("#",I) set XHS16.piece("#",I)=$$EQVAMT(XHS16.piece("#",I),CRCD,CNVRATE,CNVDECP)
  }
 quit XHS16

EQVAMT(Number AMT,String CRCD,Number RATE,Number DECP)
 type Number EQV
 if CRCD=CUVAR.emucrcd do {
  set EQV=AMT/RATE
  set EQV=EQV.roundDec(2,,0)
  }
 else  do {
  set EQV=AMT*RATE
  set EQV=EQV.roundDec(DECP,,0)
  }
 quit EQV

EURO(Number CID) // Initialize Euro conversion data
 type Public String cache(,)
 type Row euro=cache("HISTUCG","EURO").get().toRow("#$$EURO^HISTDEF",",")
 if euro.cid=CID quit
 type String CRCD
 type Number DECP,RATE
 type Date EURCNVD,EUREVDT
 type RecordACN acn=Db.getRecord("ACN","CID=:CID")
 set CRCD=acn.crcd
 set EURCNVD=acn.eurcnvd
 set EUREVDT=acn.eurevdt
 if EURCNVD="",EUREVDT="" set RATE="",DECP=""
 else  do CNVRATE(CRCD,.RATE,.DECP)
 set euro.cid=CID
 set euro.crcd=CRCD
 set euro.rate=RATE
 set euro.decp=DECP
 set euro.eurcnvd=EURCNVD
 set euro.eurevdt=EUREVDT
 if EUREVDT set euro.orgcrcd=CRCD
 else  set euro.orgcrcd=acn.orgcrcd
 set cache("HISTUCG","EURO")=euro.toString()
 quit

CNVRATE(String CRCD,Number RATE,Number DECP) // Get conversion rate/decimal precision
 type Public Cache %CACHE()
 type RecordCRCD crcd=%CACHE("CRCD").getRecord("CRCD","CO=:%CompanyName,CRCD=:CRCD")
 set RATE=crcd.fncrate
 set DECP=crcd.curdec
 quit

