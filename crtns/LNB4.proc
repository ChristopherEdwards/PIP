public LNB4
 /*
	ORIG: SCHWARTZC - 05/03/2000
	DESC: Loan Billing Statement - Commitment Billing

	---- Comments --------------------------------------------------------

	---- Revision History ------------------------------------------------

	07/31/06 - KELLYP - CR 22048
		   Modified S1 section to eliminate PRECEDENCE warning.

	08/02/05 - KUMARB - CR16684
		   Modified section S2A, S3, IRPTP, GETACCTS, changed the 
		   table name LNLCOM to LN in Db.select

	01/12/04 - CARROLLJ - CR7901
		   Remove all calls to LNB.
 */
	//I18N=QUIT: Excluded from I18N standards.

	new COMMFD
	type RecordLN ln=Db.getRecord("LN","CID")

	// Initialize data
	set COMMFD=$G(FD)

	// Initialize custom data
	set ZSUP=1 	// Suppress bank name and address print
	set:'$L($G(PO)) PO=11	//print option


	// Print Billing Information
	do S1(.ln,PO)
	do S2(.ln)
	do S3(.ln)

	quit

S1(RecordLN ln,PO)      // Section 1 - Page Header

	set PO=+$G(PO)
	set HDG="Commitment Billing Statement"
	kill LINE
	set N=(56-$L(HDG))\2
	set HDG=$J("",N-3)_HDG_$J("",N+3)

	for zz=1:1:5 if $G(NM(zz))="" set $P(NM(zz)," ",40)=" "

	// Set Address Information
	set addr(1)="   "_$E(NM(1),1,40)_"                               Page "_PG
	set addr(2)="   "_$E(NM(2),1,40)
	set addr(3)="   "_$E(NM(3),1,40)
	set addr(4)="   "_$E(NM(4),1,40)_"            CIF Number: "_ln.acn
	set addr(5)="   "_$E(NM(5),1,40)_"     Commitment Number: "_CID

	set L="" set $P(L,"=",80)=""

	quit


S2(RecordLN ln)	// Section 2 - Static Bill Date Data

	new ACCTS,IROA,IRPD,IRPP,IRRA,IYTD,ORA,RA,RAD,RP

	kill LINE


	do GETACCTS(ln.cid)		// Get all accounts linked to this comm.
	set IYTD=$$TOTIYTD()		// Calculate IYTD from all accounts

	// Get first tier accounts and display.
	do S2A(CID,ln.ircid'="",.ln)
	
	set L="" set $P(L,"=",80)=""

	do S1(.ln,0)

	quit


S2A(CCL,CIR,RecordLN ln)  // Display first-tier accounts and summaries


	/*
	This section processes, formats and displays information 
	on accounts/sub-commitments linked directly to the master 
	commitment.  It also sums data for accounts tied to the   
	sub-commitment and reports it at the sub-commitment level.

	This section also determines the Interest Reserve Data needed in
	the last section of the static account data.

	This section also determines the Revolving Summary Data needed in 
	the last section of the static account data.

	Arguments
		CCL 	Master Commitment Account Number
		CIR	Commitment interest reserve flag
				0 - No interest reserve on commitment
				1 - interest reserve at com level
		ln	Master Commitment Loan Object

	Returns
		IROA	Total interest reserve original amount
		IRPD	Interest reserve total payment amount to date
		IRPP	Interest reserve total payment amount this period
		IRRA	Total interest reserve amount remaining

		ORA	Original revolving amount
		RAD	Revolving amount advanced to date
		RP	Revolving payments
		RA	Revolving available
	*/

	new TORG,TBAL,TAVL              // Totals
	set (TORG,TBAL,TAVL)=0
	set (IROA,IRPD,IRPP,IRRA)=0
	set (ORA,RAD,RP,RA)=0


	new XCID			
	set XCID=""
	for  set XCID=$O(ACCTS(XCID)) quit:XCID=""  do {

		/*
		 This section calculates data on every loan linked directly
		 to the commitment and indirectly via the sub-commitment.
		*/

		new data,LNORG,LNBAL,LNAVL,text
		set data=Db.getOneRow("ORG,BAL,AVLBAL,IRAMTO,IRAMTR,REVF,TDR,BALCMP,IPL,PPL,UNAPF,CCL,CPF","LN","XCID") 

		// Only provide summary for first-tier loans
		if $P(data,$C(9),12)=ln.cid do {
			new SAVL,SBAL,SORG

			// Sum all loans under sub-commitment for display
			if $P(data,$C(9),13) do {
				new rs	
				set LNORG=0
				set LNBAL=0
				set LNAVL=0
				type ResultSet rs=Db.select("CID","LN","CCL=:XCID")
				if rs.isEmpty() quit
				while rs.next() do {
					new data2,SUBCID
					set SUBCID=rs.getCol(1)
					set data2=Db.getOneRow("ORG,BAL,AVLBAL","LN","SUBCID")
					set LNORG=LNORG+$P(data2,$C(9),1)
					set LNBAL=LNBAL+$P(data2,$C(9),2)
					set LNAVL=LNAVL+$P(data2,$C(9),3)
					}
				if 1		// Preserves $T
				}

			// Simple first-tier loan (Acquisition or Development)
			else  do {
				set LNORG=$P(data,$C(9),1)
				set LNBAL=$P(data,$C(9),2)
				set LNAVL=$P(data,$C(9),3)
				}
		
			// Sum Totals
			set TORG=TORG+LNORG
			set TBAL=TBAL+LNBAL
			set TAVL=TAVL+LNAVL
 
			// Format dollar amounts
			set SORG="$"_$$FN^SCARND(LNORG,",",$G(XCID))
			set SBAL="$"_$$FN^SCARND(LNBAL,",",$G(XCID))
			set SAVL="$"_$$FN^SCARND(LNAVL,",",$G(XCID))

			// Format Line
			set text=$E(BLNK,1,19-$L(XCID))_XCID
			set text=text_$E(BLNK,1,19-$L(SORG))_SORG
			set text=text_$E(BLNK,1,19-$L(SBAL))_SBAL
			set text=text_$E(BLNK,1,19-$L(SAVL))_SAVL
 
			}

		// Calculate the total fees
		type ResultSet lnfee=Db.select("FEELF","LNFEE","CID=:XCID")
		new TFEE set TFEE=0
		while lnfee.next() set TFEE=TFEE+lnfee.getCol(1)

		if $P(data,$C(9),6) do {
			set ORA=ORA+$P(data,$C(9),1)
			set RAD=RAD+$P(data,$C(9),7)
			set RP=RP+($P(data,$C(9),7)-$P(data,$C(9),8))+$P(data,$C(9),9)+$P(data,$C(9),10)+$P(data,$C(9),11)+TFEE
			}

		quit:CIR

		set IROA=IROA+$P(data,$C(9),4)
		set IRPD=IRPD+($P(data,$C(9),4)-$P(data,$C(9),5))
		set IRRA=IRRA+$P(data,$C(9),5)
		}

	// Calculate revolving available
	if RAD'=0 do {
		set ra1=ln.crlmt-RAD	//Original commitment amount - revolving advanced to date
		set ra2=ORA+RP-RAD	//Original Revolving amt + Revolving Payments - Revolving advanced to date

		if ra1<ra2 set RA=ra1
		else  set RA=ra2
		}

	// Format and Print Totals
	set TORG="$"_$$FN^SCARND(TORG,",",CCL)
	set TBAL="$"_$$FN^SCARND(TBAL,",",CCL)
	set TAVL="$"_$$FN^SCARND(TAVL,",",CCL)
 
	set text="     Total"_$E(BLNK,1,28-$L(TORG))_TORG_$E(BLNK,1,19-$L(TBAL))_TBAL_$E(BLNK,1,19-$L(TAVL))_TAVL

	if CIR do {
		set IROA=ln.iramto
		set IRPD=ln.iramto-ln.iramtr
		set IRRA=ln.iramtr
		}

	/*
	 Calculate the interest reserve payments this period for all loans
	 linked to the commitment or any of it's sub commitments.
	*/
	new TIRP set TIRP=0
	do IRPTP(CCL)
	set IRPP=TIRP

	quit

S3(RecordLN ln)	// Account History Section

	new XCCL
	set XCCL=ln.cid

	type ResultSet rs=Db.select("CID","LN","CCL=:XCCL")

	while rs.next() do {
		new XCID
		set XCID=rs.getCol(1)
		set CPF=Db.getOneRow("CPF","LN","XCID")
		if CPF do {
			new ln2
		        type RecordLN ln2=Db.getRecord("LN","XCID")
			do S3(.ln2)
			}
		do S3H(XCID)
		
		set $P(dash,"-",80)=""
		}
	quit


S3H(XCID)	// Account History Header 

	kill LINE

	do S3INIT(XCID)

	quit


S3INIT(CID)	// Init for each account
	new HISTCTF
	set HISTCTF=Db.getOneRow("HISCTF","LN","CID")
	if FD'>HISTCTF set FD=HISTCTF+1
        do INIT^UAVB(,CID,.FD,.TD,"1000000100000111") if $G(ER) quit
	set FD=COMMFD

	quit


IRPTP(XCCL)	// Caclulate interest reserve payments this period.

	new DESC,fHIST,rs3,vsql
	set DESC=1

	type ResultSet rs3=Db.select("CID","LN","CCL=:XCCL")
	while rs3.next() do {
		new XCID
		set XCID=rs3.getCol(1)
		set lndata=Db.getOneRow("CPF,BLOFF,BLDT,DIST1FRE","LN","XCID")
		if $P(lndata,$C(9),1) do IRPTP(XCID)	//Recursive call to process sub-commitment

		new bloff
		set bloff=$P(lndata,$C(9),2)
		set bldt=$P(lndata,$C(9),3)
		set FRE=$P(lndata,$C(9),4)

		// Calculate the previous billing last date
		if bloff="1P" set JD=bldt,NJD=$$NJD^UFRE(JD,FRE,,1) if 1
		else  set JD=bldt+bloff,NJD=$$NJD^UFRE(JD,FRE,,1) set NJD=NJD-bloff
		set pbldt=NJD		//previous billing last date

		new TSEQ
		set vsql=$$OPEN^UHFETCH(.exe,XCID,.TSEQ,.DESC,,1) quit:vsql=0
		for  set vsql=$$FETCH^UHFETCH(.exe,.XCID,.TSEQ,.fHIST) quit:vsql=0  do {
			set XEFD=$P(fHIST,"|",5)
			if XEFD="" set XEFD=$P(fHIST,"|",1)
			quit:(XEFD'>pbldt)!(XEFD>bldt)	

			set ITC1=$E($P(fHIST,"|",2),1)
			set TAMT=$P(fHIST,"|",4)
			set TSO=$P(fHIST,"|",7)

			quit:('ITC1)!($P(TAMT,"#",3)="")!(TSO'["LNIRCID")

			set TIRP=TIRP+$P(TAMT,"#",3)
			}
		}
	quit


GETACCTS(CCL)   // Get all CID's linked to a commitment (regardless of depth)

	/*
	 This section retrieves all accounts numbers linked to a master
	 commitment, regardless of how many tiers there are in the commitment.
	 It stores the account numbers in an array named "ACCTS" and will
	 exclude the master commitment number.
	*/

	if $G(CCL)="" quit

	new rs
	type ResultSet rs=Db.select("CID","LN","CCL=:CCL")

	if rs.isEmpty() quit

	while rs.next() do {
		new XCID,XCPF
		set XCID=rs.getCol(1)
		set XCPF=Db.getOneRow("CPF","LN","XCID")
		if XCPF do {
			set ACCTS(XCID)=""
			do GETACCTS(XCID)
			if 1 	// Preserve $T
			}
		else  set ACCTS(XCID)=""
		}
	quit	


TOTIYTD()	// Returns sum of LN.IYTD for every loan linked to commitment 

	if '$D(ACCTS) quit 0	// ACCTS array must be implicitly defined
	
	new XCID,TOTINT
	set XCID="",TOTINT=0

	for  set XCID=$O(ACCTS(XCID)) quit:XCID=""  do {
		set TOTINT=TOTINT+Db.getOneRow("IYTD","LN","XCID")
		}

	quit TOTINT

vSIG()	quit "60477^65448^Pat Kelly^8376"	// Signature - LTD^TIME^USER^SIZE
