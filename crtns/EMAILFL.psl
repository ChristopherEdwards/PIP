EMAILFL(RecordEMAIL email, String vpar, Boolean vparNorm) // EMAIL - Email Inbox/Outbox Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (13)             08/29/2006
	// Trigger Definition (1)                      08/30/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = email.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(email,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(email,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String EJD = email.ejd
	type String BOX = email.box
	type String ACN = email.acn
	type String SEQ = email.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EJD").exists()!vx("BOX").exists()!vx("ACN").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EMAIL",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EMAIL","EJD = :email.ejd and BOX = :email.box and ACN = :email.acn and SEQ = :email.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EJD
	type public String BOX
	type public String ACN
	type public String SEQ

	type RecordEMAIL email = Db.getRecord("EMAIL","EJD=:EJD,BOX=:BOX,ACN=:ACN,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do email.setMode(2)

		do EMAILFL(email,vpar)
	}
	else  do VINDEX(email)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEMAIL email

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EMAIL","EJD = :email.ejd and BOX = :email.box and ACN = :email.acn and SEQ = :email.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(email)) K:$D(vobj(email,1,1)) ^EMAIL(vobj(email,-3),vobj(email,-4),vobj(email,-5),vobj(email,-6)) S ^EMAIL(vobj(email,-3),vobj(email,-4),vobj(email,-5),vobj(email,-6))=vobj(email)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(email,1,1)) N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(email,1,1)) S vS1=vS1+1,^EMAIL(vobj(email,-3),vobj(email,-4),vobj(email,-5),vobj(email,-6),vS1)=$E(vobj(email,1,1),vS2,vS2+449)
			#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.email) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEMAIL email

	if vpar["/INDEX/" do VINDEX(.email)                    // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^EMAIL(vobj(email,-3),vobj(email,-4),vobj(email,-5),vobj(email,-6))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordEMAIL email

	// Type local variables for access keys for defaults
	type public String EJD
	type public String BOX
	type public String ACN
	type public String SEQ

	if email.locked.isNull() set email.locked = 0          // locked
	if email.lstdt.isNull() set email.lstdt = +$H          // lstdt
	if email.lsttm.isNull() set email.lsttm = $P($H,",",2) // lsttm
	type public String %UID
	if email.lstu.isNull() set email.lstu = %UID           // lstu
	quit


vreqn // Validate required data items

	type public RecordEMAIL email

	if email.locked.isNull() do vreqerr("LOCKED") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEMAIL email

	if email.ejd.isNull() do vreqerr("EJD") quit
	if email.box.isNull() do vreqerr("BOX") quit
	if email.acn.isNull() do vreqerr("ACN") quit
	if email.seq.isNull() do vreqerr("SEQ") quit

		if vx("LOCKED").exists(),email.locked.isNull() do vreqerr("LOCKED") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EMAIL","MSG",1767,"EMAIL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordEMAIL email
	if 'email.acn.isNull() set vfkey("^CIF("_""""_email.acn_""""_","_1_")")="EMAIL(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordEMAIL email
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":email.acn") set vERRMSG = $$^MSG(8563,"EMAIL(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vbi1 // Trigger BEFORE_INSERT - Before Insert Trigger

	type public RecordEMAIL email
	/*
	   ---- Revision History ----------------------------------------------

	   08/30/06 - NATRAJAH - 22508
		      Retrofit from p01dev1.
	*/
	
	type ResultSet rs
	
	set rs=Db.select("CSRFLG","UTBLSUBJ","RDEPT=:email.rdept AND SUBJECT=:email.scode")
	if rs.isEmpty() quit
	if rs.next(),+rs.getCol(1) set email.status=1
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEMAIL email

	set X = email.ejd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EJD", vRM) quit
	if email.box.length()>3 set vRM = $$^MSG(1076,3) do vdderr("BOX", vRM) quit
	set X = email.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = email.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = email.csrstat if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CSRSTAT", vRM) quit
	if email.emailaddr.length()>55 set vRM = $$^MSG(1076,55) do vdderr("EMAILADDR", vRM) quit
	if '("01"[email.LOCKED) set vRM=$$^MSG(742,"L") do vdderr("LOCKED", vRM) quit
	set X = email.lstdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSTDT", vRM) quit
	set X = email.lsttm if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LSTTM", vRM) quit
	set X = email.lstu if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("LSTU", vRM) quit
	set X = email.rdept if 'X.isNull(),'Db.isDefined("UTBLRDEPT","X") set vRM = $$^MSG(1485,X) do vdderr("RDEPT", vRM) quit
	set X = email.scode if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("SCODE", vRM) quit
	set X = email.status if 'X.isNull(),'Db.isDefined("STBLEMAILST","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EMAIL","MSG",979,"EMAIL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordEMAIL email) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("STATUS").exists() do vi2(.email)
	}
	do vi1(.email)
	do vi2(.email)

	quit
	

vi1(RecordEMAIL email) // Maintain ACN index entries (Customer Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = email.acn
	type String v3 = email.ejd
	type String v4 = email.box
	type String v5 = email.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^EMAIL(vobj(email,-3),vobj(email,-4),vobj(email,-5),vobj(email,-6)))#2,'$D(^XEMAIL("ACN",v2,v3,v4,v5)) do vidxerr("ACN")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XEMAIL("ACN",v2,v3,v4,v5)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XEMAIL("ACN",v2,v3,v4,v5)
	#ENDBYPASS
	quit

vi2(RecordEMAIL email) // Maintain STATUS index entries (Status Code)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = email.status
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = email.ejd
	type String v4 = email.box
	type String v5 = email.acn
	type String v6 = email.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^EMAIL(vobj(email,-3),vobj(email,-4),vobj(email,-5),vobj(email,-6)))#2,'$D(^XEMAIL("STATUS",v2,v3,v4,v5,v6)) do vidxerr("STATUS")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XEMAIL("STATUS",v2,v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("STATUS").exists() set v2=vx("STATUS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XEMAIL("STATUS",v2,v3,v4,v5,v6)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("EMAIL")

	while ds.next() do {
		type RecordEMAIL email=ds.getRecord("EMAIL")
		if vlist.contains("VINDEX") do VINDEX(.email) quit
		if vlist.contains("ACN") do vi1(.email)
		if vlist.contains("STATUS") do vi2(.email)
	}

	quit


public VIDXBLD1(RecordEMAIL email, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.email) quit
	if vlist.contains("ACN") do vi1(.email)
	if vlist.contains("STATUS") do vi2(.email)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("EMAIL","MSG",1225,"EMAIL."_di)

	quit


vkchged // Access key changed

	type public RecordEMAIL email

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("EJD").exists() set vux("EJD") = vx("EJD")
	if vx("BOX").exists() set vux("BOX") = vx("BOX")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = email.ejd_","_email.box_","_email.acn_","_email.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = email.ejd_","_email.box_","_email.acn_","_email.seq // Copy new keys into object
	type RecordEMAIL vnewrec = email.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EMAIL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordEMAIL email

	if vux("EJD").exists() set email.ejd = vux("EJD").piece("|",i)
	if vux("BOX").exists() set email.box = vux("BOX").piece("|",i)
	if vux("ACN").exists() set email.acn = vux("ACN").piece("|",i)
	if vux("SEQ").exists() set email.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "EMAILFL"	// Location of index program

