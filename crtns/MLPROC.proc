MLPROC ; Procedure MLPROC - Money Laundering Procedure
 ;;Copyright(c)2005 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/09/05 10:34 - spatola
 ;
 ; **** This is a DATA-QWIK generated routine (level 25) ****
 ;
  /*
ORIG: ZWITKOWITSM - 02/26/2001
DESC: Money Laundering Procedure for reports MLRPT and MLEXCRPT.

	---- Comments --------------------------------------------------------

	This procedure is responsible for the manipulating/executing of the
	Money Laundering Formulas for the Money Laundering Report (SCA801).
	This procedure also contains any field or prompt post-processor code
	for the report and the user tables it uses.  During the execution of
	the report, if a variable in one of the formulas is calculated to have
	a null value, then this procedure will build a temporary exception
	global for the Money Laundering Exception Report (SCA802).

	---- Revision History ------------------------------------------------

	12/11/03 - CARROLLJ - CR7239
		   Added #ACCEPT prior to xecute command to correct compile
		   errors.

	03/29/01 - ZWITKOWITS - 42453:1
		   New CIF in section GETVALUES to prevent irregular results
		   in report.  Values for non-computed data items from one
		   CIF account were being used in multiple accounts.  Newing
		   CIF clears the local array for each CIF account.

 */

	quit

	//----------------------------------------------------------------------
QUERY(GRP)	// Determine which queries and variables are needed
	//----------------------------------------------------------------------

	new DATA,GRPLST,FORMDESC,FORMNAME,FORMULA,I

	kill QRY,VARS,XVAR
	do Db.fastDelete("MLEXCRPT")
	do Db.fastDelete("MLEXCRPT1")
	set EXCRPT=0

	set DATA=Db.getOneRow("GRPLST,GRPDESC","UTBLMLGRP","GRP")
	set GRPLST=$P(DATA,$C(9),1)
	set GRPDESC=$P(DATA,$C(9),2)

	for I=1:1 set FORMNAME=$P(GRPLST,",",I) quit:FORMNAME=""  do {
		type ResultSet rs=Db.select("FORMDESC,FORMULA","UTBLMLFORM","FORMNAME=:FORMNAME")
		if rs.isEmpty() quit
		if rs.next()
		set FORMDESC=rs.getCol(1)
		set FORMULA=rs.getCol(2)
		set QRY(FORMNAME)=FORMDESC_"|"_FORMULA
		do VARS(FORMULA)
		}

	quit

	//----------------------------------------------------------------------
VARS(FORM)	// get variables from formula
	//----------------------------------------------------------------------

	new DATA,DESC,EXP

	for  set VARS=$P($P(FORM,"[",2),"]",1) quit:VARS=""  do {
		if 'Db.isDefined("UTBLMLVARS","VARS") quit

		set DATA=Db.getOneRow("VARDESC,VAREXP","UTBLMLVARS","VARS")
		set DESC=$P(DATA,$C(9),1)
		set EXP=$P(DATA,$C(9),2)
		set $P(VARS(VARS),"|",1)=DESC
		set $P(VARS(VARS),"|",2)=EXP

		set XVAR(FORMNAME,VARS)=""
		set FORM=$P(FORM,"]",2,999)
		}
	quit

	//----------------------------------------------------------------------
PROC(ACN)	// Process CIF
	//----------------------------------------------------------------------

	catch ERROR1 {
		new ET
		set ET=ERROR1.type
		if ET["%GTM-" do ZE^UTLERR quit
		set ET=ET_"-"_ERROR1.thrownAt
		if $G(RM)="" set RM=ERROR1.description
		do LOG^UTLEXC($T(+0),"*",$G(DESC),,$G(%ZTSEQ),$G(RM))
		}

	// initialize some variables
	new NOACCTS
	set (CRSUM,DRSUM,NETWTH)=""
	set (HISTFLG,NETWTHFG)=0
	set NOACCTS=1
	kill RPT
	set RPT=0

	// check to see if this customer needs processing
	do ACNCHK
	if NOACCTS quit

	// get the values of all the variables being used
	do GETVALUES

	// parse the formulas to include the variable values
	do PUTVALUES

	// execute queries
	do QUERYEXE

	quit

	//----------------------------------------------------------------------
ACNCHK	// check to see if this customer needs processing
	//----------------------------------------------------------------------

	type ResultSet rsx=Db.select("CID","RELCIF","ACN=:ACN")
	if rsx.isEmpty() quit	// no accounts, just exit

	while rsx.next() do { quit:'NOACCTS
		new CID,DTC,STAT

		set CID=rsx.getCol(1)

		type RecordACN acn=Db.getRecord("ACN","CID")
		set STAT=acn.stat
		set DTC=acn.dtc

		// at least 1 active account, process
		if STAT'=4 set NOACCTS=0 quit

		// closed account was active w/in report range, process
		if DTC'<SDT set NOACCTS=0 quit

		}

	quit

	//----------------------------------------------------------------------
GETVALUES	// Get values for the variables
	//----------------------------------------------------------------------

	new CIF,EXP

	set VARS=""

	for  set VARS=$O(VARS(VARS)) quit:VARS=""  do {

		set EXP=$P(VARS(VARS),"|",2)
		set $P(VARS(VARS),"|",3)=""	// initialize to null

		// data item
		if (EXP?1"[".A1"]".A)!(EXP?1A.A1".".E) set EXP=$$RETVAL^DBSDB(EXP)

		// extrinsic function call
		if EXP?2"$".E1"^".E do {
			set EXP="SET EXP="_EXP
			#ACCEPT DATE=12/11/03;PGM=John Carroll
			xecute EXP
			}

		// variable evaluated to null, log exception
		if EXP="" do EXC(ACN,VARS,2) quit

		// at this point EXP must be numeric, store it in VAR array
		set $P(VARS(VARS),"|",3)=EXP

		}

	quit

	//----------------------------------------------------------------------
PUTVALUES	// put variable values into formulas
	//----------------------------------------------------------------------

	new EXP,FORM,FORMDESC,FORMER,FORMNM,FORMULA

	set FORMNM=""
	for  set FORMNM=$O(QRY(FORMNM)) quit:FORMNM=""  do {

		set FORMULA=""
		set FORM=$P(QRY(FORMNM),"|",2)
		set FORMDESC=$P(QRY(FORMNM),"|",1)
		set FORMER=0

		for  set VARS=$P($P(FORM,"[",2),"]",1) quit:(VARS="")!(FORMER)  do {
			set FORMULA=FORMULA_$P(FORM,"[",1)
			set FORM=$P(FORM,"]",2,999)
			if '$D(VARS(VARS)) do EXC(ACN,VARS,1) quit
			set EXP=$P(VARS(VARS),"|",3)
			if EXP="" set FORMER=1 quit
			set FORMULA=FORMULA_EXP
			}

		set FORMULA="IF "_$TR(FORMULA_FORM," ","")
		set $P(QRY(FORMNM),"|",3)=$S(FORMER:"",1:FORMULA)

		}

	quit

	//----------------------------------------------------------------------
QUERYEXE	// Execute the queries
	//----------------------------------------------------------------------

	new FORMNM

	set FORMNM=""
	for  set FORMNM=$O(QRY(FORMNM)) quit:FORMNM=""  do {

		set FORM=$P(QRY(FORMNM),"|",3)
		if FORM="" quit
		#ACCEPT DATE=12/11/03;PGM=John Carroll
		xecute FORM
		if  do {
			set RPT=RPT+1
			set RPT(RPT)=FORMNM_" - "_$P(QRY(FORMNM),"|",1)
			}
		}

	quit

	//----------------------------------------------------------------------
EXC(ACN,VAR,TYPE)	// Exception report info
	//----------------------------------------------------------------------

	new RM,SEQ

	if EXCRPT=0 do {
		if $G(GRP)="" quit
		type RecordMLEXCRPT1 mlexcrpt1=Class.new("RecordMLEXCRPT1")
		set mlexcrpt1.sdt=SDT
		set mlexcrpt1.edt=EDT
		set mlexcrpt1.grpnum=GRP
		set mlexcrpt1.grpdesc=GRPDESC
		do mlexcrpt1.bypassSave()
		}

	set FORMER=1
	set EXCRPT=1

	if TYPE=1 set RM=$$^MSG(8045,VAR)
	if TYPE=2 set RM=VAR_" - "_$$^MSG(2076)

	type ResultSet rs=Db.select("SEQ","MLEXCRPT","ACN=:ACN","SEQ DESC")
	if rs.isEmpty() set SEQ=1
	if rs.next() set SEQ=rs.getCol(1)+1

	type RecordMLEXCRPT mlexcrpt=Class.new("RecordMLEXCRPT")
	set mlexcrpt.acn=ACN
	set mlexcrpt.seq=SEQ
	set mlexcrpt.msg=RM
	do mlexcrpt.bypassSave()

	quit

	//----------------------------------------------------------------------
DAYS()	// Calculate Time Period Days for this run of the report
	//----------------------------------------------------------------------

	new DAYS

	set DAYS=$G(EDT)-$G(SDT)+1

	quit DAYS

	//----------------------------------------------------------------------
CRSUM()	// Calculate sum of credits
	//----------------------------------------------------------------------

	set HISTFLG=1

	if CRSUM'="" quit CRSUM
	else  do ACCUM($G(ACN),$G(SDT),$G(EDT))

	quit CRSUM

	//----------------------------------------------------------------------
DRSUM()	// Calculate sum of debits
	//----------------------------------------------------------------------

	set HISTFLG=1

	if DRSUM'="" quit DRSUM
	else  do ACCUM($G(ACN),$G(SDT),$G(EDT))

	quit DRSUM

	//----------------------------------------------------------------------
NETWTH()	// Calculate net worth
	//----------------------------------------------------------------------

	if NETWTH'="" quit NETWTH
	else  do ACCUM($G(ACN),$G(SDT),$G(EDT))

	quit NETWTH

	//----------------------------------------------------------------------
ACCUM(ACN,SDT,EDT)	// Accumulate NETWTH, DRSUM, and CRSUM for this CIF
	//----------------------------------------------------------------------

	if (ACN="")!(SDT="")!(EDT="") quit

	type ResultSet rs=Db.select("CID,POI","RELCIF","ACN=:ACN")
	if rs.isEmpty() quit

	while rs.next() do {
		new CID,POI
		set CID=rs.getCol(1)
		set POI=rs.getCol(2)
		if 'POI quit

		type RecordACN acn=Db.getRecord("ACN","CID")
		new CLS,TRB
		set CLS=acn.cls
		set BAL=+acn.ballegr

		set TRB=acn.trb
		if TRB,BAL'=0 set NETWTH=NETWTH-BAL
		if 'TRB,BAL'=0 set NETWTH=NETWTH+BAL

		if CLS'="D" quit	// not a deposit account

		if HISTFLG do HIST(CID,SDT,EDT)

		}

	quit

	//----------------------------------------------------------------------
HIST(CID,SDT,EDT)	// Find total debits and credits from SDT to EDT
	//----------------------------------------------------------------------

	new AMT,EFD,ITC,JD,Q,X,exe,vsql

	do SELECT^UHFETCH(.Q,"",1)
	set vsql=$$OPEN^UHFETCH(.exe,CID,"",1,.Q) if vsql=0 quit
	for  set vsql=$$FETCH^UHFETCH(.exe,"","",.X) quit:vsql=0  do { quit:JD<SDT

		set JD=$P(X,"|",1)
		if JD<SDT quit

		set ITC=$E($P(X,"|",2),1)
		set AMT=+$P(X,"|",4)
		set EFD=$P(X,"|",5)
		if EFD="" set EFD=JD

		if EFD>EDT quit				// after end date
		if EFD<SDT quit				// before start date
		if AMT=0 quit				// 0 amount transaction

		if ITC set CRSUM=+CRSUM+AMT
		else  set DRSUM=+DRSUM+AMT
		}

	quit

	//----------------------------------------------------------------------
VARPP(EXP)	// Edit check the variable expression
	//----------------------------------------------------------------------

	set ER=0
	set RM=""

	// Data item edit check
	if (EXP?1"[".A1"]".A)!(EXP?1A.A1".".E) do { quit
		new Z
		set Z=$$DI^DBSDD(EXP)
		}

	// Pattern check for extrinsic function and numeric
	if '((EXP?2"$".E1"^".E)!(EXP?.P.N.P.N)) do {
		set ER=1
		set RM=$$^MSG(8045,EXP)
		}

	quit

	//----------------------------------------------------------------------
FORMPP(FORM)	// Edit check the formula for valid variables
	//----------------------------------------------------------------------

	new VAR

	set ER=0
	set RM=""

	for  set VAR=$P($P(FORM,"[",2),"]",1) quit:VAR=""  do { quit:ER

		if 'Db.isDefined("UTBLMLVARS","VAR") do { quit
			set ER=1
			set RM=$$^MSG(8045,VAR)
			}

		set FORM=$P(FORM,"]",2,999)
		}
	quit

	//----------------------------------------------------------------------
GRPPP(GRPLST)	// Edit check the group list for valid formulas
	//----------------------------------------------------------------------

	new FORMNAME,I

	set ER=0
	set RM=""

	if GRPLST[" " set (X,GRPLST)=$TR(GRPLST," ","")

	for I=1:1 set FORMNAME=$P(GRPLST,",",I) quit:FORMNAME=""  do { quit:ER

		if 'Db.isDefined("UTBLMLFORM","FORMNAME") do { quit
			set ER=1
			set RM=$$^MSG(8045,FORMNAME)
			}

		}

	quit

	//----------------------------------------------------------------------
SDTPP	// SDT prompt post-processor
	//----------------------------------------------------------------------

	if X>TJD set ER=1,RM=$$^MSG(8090) quit

	quit

	//----------------------------------------------------------------------
EDTPP	// EDT prompt post-processor
	//----------------------------------------------------------------------

	if X<SDT set ER=1,RM=$$^MSG(2216) quit
	if X>TJD set ER=1,RM=$$^MSG(8090) quit

	quit

vSIG()	quit "59886^43580^Sanchez SCM Administrator^10837"	// Signature - LTD^TIME^USER^SIZE
