ROLLFIL(RecordROLLOVR rollovr, String vpar, Boolean vparNorm) // ROLLOVR - Rollover Information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (17)             08/04/2005
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (2)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = rollovr.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(rollovr,.vxins(),10,"|")
	if %O = 1 quit:'rollovr.isChanged()  do AUDIT^UCUTILN(rollovr,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = rollovr.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ROLLOVR",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ROLLOVR","CID = :rollovr.cid")    // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordROLLOVR rollovr = Db.getRecord("ROLLOVR","CID=:CID")
	if (%ProcessMode = 2) do {
		do rollovr.setMode(2)

		do ROLLFIL(rollovr,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordROLLOVR rollovr

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ROLLOVR","CID = :rollovr.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(rollovr,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(rollovr,-3),65,n)=vobj(rollovr,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(rollovr,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(rollovr,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(rollovr,-3),65,n)=vobj(rollovr,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.rollovr)             // Create journal files
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordROLLOVR rollovr
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^ACN(vobj(rollovr,-3),65,n)) quit:n.isNull()  if 'vobj(rollovr,n).data(),^ACN(vobj(rollovr,-3),65,n).data()#2 set vobj(rollovr,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordROLLOVR rollovr

	if 'vkeychg.get(),rollovr.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/JOURNAL/" do VJOURNAL(.rollovr)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^ACN(vobj(rollovr,-3),65)                         // Delete Record
	quit


vreqn // Validate required data items

	type public RecordROLLOVR rollovr

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordROLLOVR rollovr

	if rollovr.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ROLLOVR","MSG",1767,"ROLLOVR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordROLLOVR rollovr
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(rollovr,.vx(),10,"|")
	quit


vau1 // Trigger AFTER_UPDATE - After Update trigger

	type public RecordROLLOVR rollovr
	/*
	   ---------- Revision History ------------------------------------------

	   09/17/99 - CHOK - 31126
		      Converted to PSL
	*/

	new XCID,TEMP
	set XCID=rollovr.cid
	set TEMP=%SystemDate
	do Db.update("DEP","FMLD=:TEMP","CID=:XCID","/NOJOURNAL")
	quit
	

vbi1 // Trigger BI - Before Insert

	type public RecordROLLOVR rollovr
	; Revision History
	; 12/14/99 - JERUCHIMC - 36234
	; Added code to generate SWIFT MT320 messages.
	;-----------------------------------------------------------------------------
	; Generate SWIFT MT320
	; but only if the product type is set up for MT320 processing,
	; and the account is set up to generate an MT320.
	N PTYPE,P320,MT320
	S CID=rollovr.cid
	S MT320=Db.getOneRow("MT320","DEP","CID")
	S PTYPE=Db.getOneRow("TYPE","DEP","CID") 
	S P320=Db.getOneRow("MT320","PRODDFTD","PTYPE")
	I (P320=1)&(MT320=1) D ^SW320GEN(CID,"ROLLOVER",rollovr.mdt)
	quit

vbu1 // Trigger BU - Before Update

	type public RecordROLLOVR rollovr
	do rollovr.setAuditFlag(1)
	; Revision History
	; 12/14/99 - JERUCHIMC - 36234
	; Added code to generate SWIFT MT320 messages.
	;-----------------------------------------------------------------------
	; Generate SWIFT MT320
	; but only if the product type is set up for MT320 processing,
	; and the account is set up to generate an MT320.
	N PTYPE,P320,MT320
	S CID=rollovr.cid
	S MT320=Db.getOneRow("MT320","DEP","CID")
	S PTYPE=Db.getOneRow("TYPE","DEP","CID")
	S P320=Db.getOneRow("MT320","PRODDFTD","PTYPE")
	I (P320=1)&(MT320=1) D ^SW320GEN(CID,"ROLLOVER",rollovr.mdt)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordROLLOVR rollovr

	if (%O = 2) do vload

	if vobj(rollovr,49).exists() do {

		set X = rollovr.iacm if 'X.isNull(),'Db.isDefined("STBLIACM","X") set vRM = $$^MSG(1485,X) do vdderr("IACM", vRM) quit
		set X = rollovr.minbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ROLLOVR.MINBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = rollovr.mincr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ROLLOVR.MINCR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = rollovr.pdys if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("PDYS", vRM) quit
		set X = rollovr.popt if 'X.isNull(),'Db.isDefined("STBLPOPT","X") set vRM = $$^MSG(1485,X) do vdderr("POPT", vRM) quit
	}

	if vobj(rollovr,50).exists() do {

		set X = rollovr.regd if 'X.isNull(),'Db.isDefined("STBLREGD1","X") set vRM = $$^MSG(1485,X) do vdderr("REGD", vRM) quit
		set X = rollovr.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	}

	if vobj(rollovr,53).exists() do {

		set X = rollovr.mdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDT", vRM) quit
		set X = rollovr.racn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RACN", vRM) quit
		set X = rollovr.rencd if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("RENCD", vRM) quit
		if rollovr.trm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRM", vRM) quit
	}

	if vobj(rollovr,54).exists() do {

		set X = rollovr.iopt if 'X.isNull(),'Db.isDefined("STBLIOPT","X") set vRM = $$^MSG(1485,X) do vdderr("IOPT", vRM) quit
		set X = rollovr.itrf if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ITRF", vRM) quit
	}

	if vobj(rollovr,57).exists() do {

		set X = rollovr.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ROLLOVR.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(rollovr,60).exists() do {

		set X = rollovr.ipf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[ROLLOVR]IPF",0) if 'vRM.get().isNull() do vdderr("IPF", vRM) quit
	}

	if vobj(rollovr,428).exists() do {

		set X = rollovr.prena if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ROLLOVR.PRENA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}
	set X = rollovr.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ROLLOVR","MSG",979,"ROLLOVR."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordROLLOVR rollovr)	//ROLLOVR Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.rollovr)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I
			}
		else  if TSRC="O" do {
			do vj2(.rollovr)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.rollovr)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HISTFM_U
			}
		else  if TSRC="O" do {
			do vj1(.rollovr)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HISTFM_U
			}
		}

	quit


vj1(RecordROLLOVR rollovr)	// HISTFM_U  Table HIST  History for File Maintenance

	type RecordDEP dep=Db.getRecord("DEP","CID=:rollovr.cid",1)


	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=dep.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=dep.boo
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS("","ROLLOVR",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj2(RecordROLLOVR rollovr)	// HIST_I  Table HIST  History Insert for Rollovers

	type RecordDEP dep=Db.getRecord("DEP","CID=:rollovr.cid",1)


	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=dep.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=dep.boo
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3600)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordROLLOVR rollovr

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(rollovr,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(rollovr,-3) = vnewkey // Copy new keys into object
	type RecordROLLOVR vnewrec = rollovr.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ROLLOVR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(rollovr,-3) = vux.piece("|",1)                // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
