IPOVRFL(RecordIPOVR ipovr,String vpar) // IPOVR - Override Restriction At Interest Posting Filer
	// Copyright(c)2005 Sanchez Computer Associates, Inc.  All Rights Reserved - 06/06/2005 12:05 - spatola
	// Generated from DATA-QWIK schema in: /sanchez/p04devut_gtmlx  by: /p04devut_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL  - Cascade delete
		/[NO]INDEX   - Update Indexes
		/[NO]JOURNAL - Journal update
		/[NO]TRIGAFT - After update triggers
		/[NO]TRIGBEF - Before update triggers
		/[NO]UPDATE  - Update primary table
		/[NO]VALDD   - Validate column values
		/[NO]VALFK   - Validate foreign keys
		/[NO]VALREQ  - Validate not null values
		/[NO]VALRI   - Validate transaction integrity
		/[NO]VALST   - Validate database state
	*/

	type public String verrors()

	type String vx()                                       // audit column array
	type Number %O = ipovr.getMode()                       // Processing mode
	if %O.isNull() set %O = Db.isDefined("IPOVR","IPLD = :ipovr.ipld and CID = :ipovr.cid"),vpar = vpar.get()_"/NOVALST" do ipovr.setMode(%O)
	if %O = 1 do AUDIT^UCUTILN(ipovr,.vx(),1,"|")

	set vpar = $$initPar^UCUTILN(.vpar)                    // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("IPLD").data()!vx("CID").data() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do {
			type Boolean ER = 0
			type String RM

			do VDDUX^DBSFILER("IPOVR",.vx)
			if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
		}
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("IPOVR","IPLD = :ipovr.ipld and CID = :ipovr.cid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (e.g. EXT^DBSFILER for %O = 2)

	type Public String IPLD
	type Public String CID

	type RecordIPOVR ipovr = Db.getRecord("IPOVR","IPLD=:IPLD,CID=:CID")
	do ipovr.setMode(%ProcessMode)

	do IPOVRFL(ipovr,vpar)

	quit

vexec // Execute transaction

	type Public Number %O
	type Public String vpar,vobj(),vx()

	type Public RecordIPOVR ipovr

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("IPOVR","IPLD = :ipovr.ipld and CID = :ipovr.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {


		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell
		set ^IPOVR(vobj(ipovr,-3),vobj(ipovr,-4)) = vobj(ipovr).trim(1,$C(124))
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type Public String vobj(),vpar
	type Public RecordIPOVR ipovr


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell
	ZWI ^IPOVR(vobj(ipovr,-3),vobj(ipovr,-4))              // Delete Record
	quit


vreqn // Validate required data items

	type Public RecordIPOVR ipovr

	if ipovr.cid.isNull() do vreqerr("CID") quit
	if ipovr.ipld.isNull() do vreqerr("IPLD") quit
	quit

vreqerr(di) // Required error

	type Boolean ER = 0
	type String RM
	do SETERR^DBSEXECU("IPOVR","MSG",1767,"IPOVR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type Public String vfkey(),vpar()

	type Public RecordIPOVR ipovr
	if 'ipovr.cid.isNull() set vfkey("^ACN("_""""_ipovr.cid_""""_","_50_")")="IPOVR(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type Public RecordIPOVR ipovr
	type Public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":ipovr.cid") set vERRMSG = $$^MSG(8563,"IPOVR(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type Public Number %O
	type Public String vpar(),vx()

	type String RM,X
	type Public RecordIPOVR ipovr

	set X = ipovr.ipld if 'X.isNull(),X'?1.5N set RM=$$^MSG(742,"D") do vdderr("IPLD", RM) quit
	set X = ipovr.cid if 'X.isNull(),'Db.isDefined("ACN","X") set RM = $$^MSG(1485,X) do vdderr("CID", RM) quit
	set X = ipovr.bal if 'X.isNull() set RM = $$VAL^DBSVER("$",18,0,,,,,2)
	set X = ipovr.maxbal if 'X.isNull() set RM = $$VAL^DBSVER("$",18,0,,,,,2)
	set X = ipovr.int if 'X.isNull() set RM = $$VAL^DBSVER("$",18,0,,,,,2)
	set X = ipovr.overage if 'X.isNull() set RM = $$VAL^DBSVER("$",18,0,,,,,2)
	#xecute kill dbLoad("vddver","ipovr")
	quit

vdderr(di, vRM) // Column attribute error

	do SETERR^DBSEXECU("IPOVR","MSG",979,"IPOVR."_di_" "_vRM)
	quit


vkchged // Access key changed

	type Public RecordIPOVR ipovr

	type Public String vpar,vx()

	type Boolean ER = 0
	type Number %O = 1
	type String RM,vnewkey,voldkey,vux

	if vx("IPLD").data() set vux("IPLD") = vx("IPLD")
	if vx("CID").data() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = ipovr.ipld_","_ipovr.cid      // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vreqn
	if vpar["/VALDD/" do vddver
	do vexec

	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/")
	set %O = 3 do vdelete(1)                               // Delete old record
	do vkey(2) set vnewkey = ipovr.ipld_","_ipovr.cid      // Copy new keys into object

	set %O = 0 do vexec                                    // Create new record
	set %O = 1 do CASUPD^DBSEXECU("IPOVR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	quit

vkey(Number i) // Restore access keys

	type Public String vux()
	type Public RecordIPOVR ipovr

	if vux("IPLD").data() set ipovr.ipld = vux("IPLD").piece("|",i)
	if vux("CID").data() set ipovr.cid = vux("CID").piece("|",i)
	quit
