TRTYPEFL(RecordTRTYPE trtype, String vpar, Boolean vparNorm) // TRTYPE - Escrow Transfer Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (26)             11/22/2003
	// Trigger Definition (3)                      07/07/2006
	// Journal File Definition (1)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = trtype.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(trtype,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(trtype,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = trtype.cid
	type String TYP = trtype.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("TRTYPE",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("TRTYPE","CID = :trtype.cid and TYP = :trtype.typ") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP

	type RecordTRTYPE trtype = Db.getRecord("TRTYPE","CID=:CID,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do trtype.setMode(2)

		do TRTYPEFL(trtype,vpar)
	}
	else  do VINDEX(trtype)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordTRTYPE trtype

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("TRTYPE","CID = :trtype.cid and TYP = :trtype.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(trtype)) S ^ACN(vobj(trtype,-3),210,vobj(trtype,-4))=vobj(trtype)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.trtype)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.trtype) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordTRTYPE trtype

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.trtype)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.trtype)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(trtype,-3),210,vobj(trtype,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordTRTYPE trtype

	// Type local variables for access keys for defaults
	type public String CID
	type public String TYP

	if trtype.estflg.isNull() set trtype.estflg = 0        // estflg
	if trtype.prema.isNull() set trtype.prema = 0          // prema
	if trtype.remipf.isNull() set trtype.remipf = 0        // remipf
	if trtype.roea.isNull() set trtype.roea = 0            // roea
	if trtype.saf.isNull() set trtype.saf = 0              // saf
	if trtype.spf.isNull() set trtype.spf = 0              // spf
	if trtype.srf.isNull() set trtype.srf = 0              // srf
	quit


vreqn // Validate required data items

	type public RecordTRTYPE trtype

	if trtype.estflg.isNull() do vreqerr("ESTFLG") quit
	if trtype.prema.isNull() do vreqerr("PREMA") quit
	if trtype.remipf.isNull() do vreqerr("REMIPF") quit
	if trtype.roea.isNull() do vreqerr("ROEA") quit
	if trtype.saf.isNull() do vreqerr("SAF") quit
	if trtype.spf.isNull() do vreqerr("SPF") quit
	if trtype.srf.isNull() do vreqerr("SRF") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordTRTYPE trtype

	if trtype.cid.isNull() do vreqerr("CID") quit
	if trtype.typ.isNull() do vreqerr("TYP") quit

		if vx("ESTFLG").exists(),trtype.estflg.isNull() do vreqerr("ESTFLG") quit
		if vx("PREMA").exists(),trtype.prema.isNull() do vreqerr("PREMA") quit
		if vx("REMIPF").exists(),trtype.remipf.isNull() do vreqerr("REMIPF") quit
		if vx("ROEA").exists(),trtype.roea.isNull() do vreqerr("ROEA") quit
		if vx("SAF").exists(),trtype.saf.isNull() do vreqerr("SAF") quit
		if vx("SPF").exists(),trtype.spf.isNull() do vreqerr("SPF") quit
		if vx("SRF").exists(),trtype.srf.isNull() do vreqerr("SRF") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TRTYPE","MSG",1767,"TRTYPE."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("REMLD").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordTRTYPE trtype
	if vx("").order().isNull() do AUDIT^UCUTILN(trtype,.vx(),1,"|") quit
	if vx("CREMFRE").exists()!vx("REMND").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(trtype,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - Transfer Type After Insert Trigger

	type public RecordTRTYPE trtype
	/*
	   ---------- Revision History ------------------------------------------
	   07/07/06 - SWARNALP - CR21448
	   	      .  Replaced XCID variable with the direct object.column 
	   	      reference for the column aref while getting the loan record 
	   	      as the use of XCID vairable was causing UNDEFINED errors 
	   	      during auto testing.
	   	      
	   06/30/06 - SWARNALP - CR21448
	   	      .  Removed the condition which checks for trtype.trtype="ESC" 
	   	      while setting LN.RND with "ESC1" since ESC is not a transfer 
	   	      type but is an escrow type under aggregate processing 
	   	      that represents the deposit account against which all 
	   	      escrow transactions are processed. Since trtype.trtype 
	   	      cannot satisfy the condition value of ESC at any time, 
	   	      LN.RND can never be set with the value of ESC1 and hence 
	   	      the condition is removed.
	   	      .  Cleaned up the codes to eliminate the use of depricated 
	   	      methods.
	   
	   01/13/00 - CHOK - 31126
		      Add .AF to UFRE

	   09/20/99 - CHOK - 31126
		      Converted to PSL
	*/
	
	// Transfer Type is Self Pay - No verification.	
	if trtype.spf quit
	
	// If not self pay then set LN.RND = "ESC1"
	/* 
	  This do block is maintained to indicate that if any of the conditions 
	  that are needed to set LN.RND with "ESC1" option gets failed, then quit 
	  out of the block only and continue executing the rest of the other codes 
	  that are found below the completion of this do block.
	*/
	do {
		type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE='ESC'")
	     
		// Not available for rounding
		if 'lntrs.rnd quit
		
		type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
		// No loan number
		if 'dep.aref quit
		
		type RecordLN ln = Db.getRecord("LN", "CID=:dep.aref")
		
		// Already rounding opt
		if ln.rnd'="" quit
		
		set ln.rnd="ESC1"
		do ln.save()
		}
	
	// Verification on remittance last date. Error if last remittance date is
	// greater than today by more than one half of the remittance period.
	
	type public Boolean ER
	
	type Number AF,D
	type String FRE,PAYID,TRTYPE

	set FRE=trtype.cremfre 
	set D=90
	
	if trtype.payid="" set PAYID=0
	else  set PAYID=trtype.payid

	if trtype.trtype="" set TRTYPE=0
	else  set TRTYPE=trtype.trtype

	if FRE="" do {
		type RecordLNTRS1 lntrs1 = Db.getRecord("LNTRS1","TRTYPE=:TRTYPE,PAYID=:PAYID",1)
		set FRE=lntrs1.cremfre
		}
	if FRE'="" set NJD=$$NJD^UFRE(%SystemDate,FRE,.AF) quit:ER  set D=180\AF
	if trtype.remld-D>%SystemDate do Runtime.setErrXBAD("TRTYPE",504) quit:ER 
	
	// Verification on remittance next date.
	if 'trtype.remnd do Runtime.setErrXBAD("TRTYPE",506) quit:ER 
	if trtype.remnd<%SystemDate do Runtime.setErrXBAD("TRTYPE",503) quit:ER 
	if trtype.remnd<trtype.remld do Runtime.setErrXBAD("TRTYPE",507) quit:ER 
	
	quit

vbu1 // Trigger AU_REMDT - After Update - Update RAMT for REMDT 

	type public RecordTRTYPE trtype
	do trtype.setAuditFlag(1)
	
	// Build OLD and NEW array representing dates in the RAMT file.

	new CID,ESTGLG,REMAMT,REMDT,TYP

	do RAMT^MSCFUNCS(trtype.remnd,trtype.remnd.oldVal,trtype.cid,trtype.typ,trtype.cremfre,.OLD,.NEW)

	set CID=trtype.cid
	set REMDT=""
	set TYP=trtype.typ

 	for  set REMDT=$O(OLD(REMDT)) Q:REMDT=""  do Db.delete("RAMT","CID=:CID AND TYP=:TYP AND REMDT=:REMDT")
 	for  set REMDT=$O(NEW(REMDT)) Q:REMDT=""  do {
		set ESTFLG=$P(NEW(REMDT),$C(9),2)
		set REMAMT=$P(NEW(REMDT),$C(9),1)
    		do Db.insert("RAMT","CID,TYP,REMDT,ESTFLG,REMAMT",":CID,:TYP,:REMDT,:ESTFLG,:REMAMT")
		}
	quit

vau1 // Trigger AU_REMLD - After Update RAMT for REMLD

	type public RecordTRTYPE trtype
	/*
	   ---- Revision History ------------------------------------------------

	   01/10/00 - CHOK - 31126
		      Fix host variables

	   09/20/99 - CHOK - 31126
		      Converted to PSL

	   05/26/99 - LAMY - 33195
	              Changed the INSERT to UPDATE and changed REMLD= to REMDT=
	
	*/
	
	new XTYPE,XREMLD,XOLD
	// Reset RAMT file with change to Remittance Last Date
	set XTYPE=trtype.typ
	set XREMLD=trtype.remld
	set XOLD=trtype.remld.oldVal	
	if Db.isDefined("RAMT","CID,XTYPE,XREMLD") do Db.update("RAMT","CID=:CID,TYP=:XTYPE,REMDT=:XREMLD")
	if 'Db.isDefined("RAMT","CID,XTYPE,XREMLD") do Db.insert("RAMT","CID,TYP,REMDT",":CID,:XTYPE,:XREMLD")
	if trtype.remld.oldVal'=trtype.remld do Db.delete("RAMT","CID=:CID AND TYP=:XTYPE AND REMDT=:XOLD")
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordTRTYPE trtype

	set X = trtype.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if trtype.typ.length()>6 set vRM = $$^MSG(1076,6) do vdderr("TYP", vRM) quit
	set X = trtype.acoll if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACOLL", vRM) quit
	set X = trtype.asmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRTYPE.ASMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = trtype.colseqno if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COLSEQNO", vRM) quit
	set X = trtype.cremfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[TRTYPE]CREMFRE",0) if 'vRM.get().isNull() do vdderr("CREMFRE", vRM) quit
	if trtype.escid.length()>30 set vRM = $$^MSG(1076,30) do vdderr("ESCID", vRM) quit
	if '("01"[trtype.ESTFLG) set vRM=$$^MSG(742,"L") do vdderr("ESTFLG", vRM) quit
	set X = trtype.lcod if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("LCOD", vRM) quit
	set X = trtype.ldrem if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDREM", vRM) quit
	if trtype.payid.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYID", vRM) quit
	if '("01"[trtype.PREMA) set vRM=$$^MSG(742,"L") do vdderr("PREMA", vRM) quit
	set X = trtype.ramtd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRTYPE.RAMTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = trtype.ramtp if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"TRTYPE.RAMTP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = trtype.rbmet if 'X.isNull(),'Db.isDefined("STBLRBMET","X") set vRM = $$^MSG(1485,X) do vdderr("RBMET", vRM) quit
	if '("01"[trtype.REMIPF) set vRM=$$^MSG(742,"L") do vdderr("REMIPF", vRM) quit
	set X = trtype.remld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REMLD", vRM) quit
	set X = trtype.remnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REMND", vRM) quit
	set X = trtype.remptp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRTYPE.REMPTP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = trtype.rempy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRTYPE.REMPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = trtype.remytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"TRTYPE.REMYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[trtype.ROEA) set vRM=$$^MSG(742,"L") do vdderr("ROEA", vRM) quit
	if '("01"[trtype.SAF) set vRM=$$^MSG(742,"L") do vdderr("SAF", vRM) quit
	if '("01"[trtype.SPF) set vRM=$$^MSG(742,"L") do vdderr("SPF", vRM) quit
	if '("01"[trtype.SRF) set vRM=$$^MSG(742,"L") do vdderr("SRF", vRM) quit
	if trtype.trtype.length()>6 set vRM = $$^MSG(1076,6) do vdderr("TRTYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TRTYPE","MSG",979,"TRTYPE."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordTRTYPE trtype)	//TRTYPE Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.trtype)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HISTFM_U
			}
		else  if TSRC="O" do {
			do vj1(.trtype)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HISTFM_U
			}
		}

	quit


vj1(RecordTRTYPE trtype)	// HISTFM_U  Table HIST  History for File Maintenance

	type RecordDEP dep=Db.getRecord("DEP","CID=:trtype.cid",1)


	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=dep.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=dep.boo
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(trtype.cid_","_trtype.typ,"TRTYPE",vdi,vold,vnew,"",,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordTRTYPE trtype) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("TRTYPE").exists()!vx("PAYID").exists() do vi1(.trtype)
	}
	do vi1(.trtype)

	quit
	

vi1(RecordTRTYPE trtype) // Maintain LNTRS index entries (Escrow Transfer Type X-REF )

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = trtype.trtype
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = trtype.typ
	type String v4 = trtype.payid
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = trtype.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(trtype,-3),210,vobj(trtype,-4)))#2,'$D(^XREF("LNTRS",v2,v3,v4,v5)) do vidxerr("LNTRS")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("LNTRS",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("TRTYPE").exists() set v2=vx("TRTYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("PAYID").exists() set v4=vx("PAYID").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("LNTRS",v2,v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("TRTYPE")

	while ds.next() do {
		type RecordTRTYPE trtype=ds.getRecord("TRTYPE")
		if vlist.contains("VINDEX") do VINDEX(.trtype) quit
		if vlist.contains("LNTRS") do vi1(.trtype)
	}

	quit


public VIDXBLD1(RecordTRTYPE trtype, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.trtype) quit
	if vlist.contains("LNTRS") do vi1(.trtype)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("TRTYPE","MSG",1225,"TRTYPE."_di)

	quit


vkchged // Access key changed

	type public RecordTRTYPE trtype

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = trtype.cid_","_trtype.typ     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = trtype.cid_","_trtype.typ     // Copy new keys into object
	type RecordTRTYPE vnewrec = trtype.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("TRTYPE",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordTRTYPE trtype

	if vux("CID").exists() set trtype.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set trtype.typ = vux("TYP").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordTRTYPE trtype
	type public String vpar

	do Db.delete("RAMT","CID=:trtype.cid AND TYP=:trtype.typ",vpar) // Cascade delete

	quit

VIDXPGM()	quit "TRTYPEFL"	// Location of index program

