DBTBL9FL(RecordDBTBL9 dbtbl9, String vpar, Boolean vparNorm) // DBTBL9 - Journal File Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (18)             05/15/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl9.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(dbtbl9,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dbtbl9,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("%LIBS").exists()!vx("PRITABLE").exists()!vx("JRNID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL9",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL9","%LIBS = :dbtbl9.%libs and PRITABLE = :dbtbl9.pritable and JRNID = :dbtbl9.jrnid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String %LIBS
	type public String PRITABLE
	type public String JRNID

	type RecordDBTBL9 dbtbl9 = Db.getRecord("DBTBL9","%LIBS=:%LIBS,PRITABLE=:PRITABLE,JRNID=:JRNID")
	if (%ProcessMode = 2) do {
		do dbtbl9.setMode(2)

		do DBTBL9FL(dbtbl9,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL9 dbtbl9

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL9","%LIBS = :dbtbl9.%libs and PRITABLE = :dbtbl9.pritable and JRNID = :dbtbl9.jrnid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set dbtbl9.TLD = %CurrentDate
		set dbtbl9.TIME = %CurrentTime
		set dbtbl9.USER = %UserName
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl9))  S ^DBTBL(vobj(dbtbl9,-3),9,vobj(dbtbl9,-4),vobj(dbtbl9,-5))=vobj(dbtbl9)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL9 dbtbl9


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DBTBL(vobj(dbtbl9,-3),9,vobj(dbtbl9,-4),vobj(dbtbl9,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordDBTBL9 dbtbl9

	// Type local variables for access keys for defaults
	type public String %LIBS
	type public String PRITABLE
	type public String JRNID

	if dbtbl9.seq.isNull() set dbtbl9.seq = 1              // seq
	quit


vreqn // Validate required data items

	type public RecordDBTBL9 dbtbl9

	if dbtbl9.des.isNull() do vreqerr("DES") quit
	if dbtbl9.subtable.isNull() do vreqerr("SUBTABLE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL9 dbtbl9

	if dbtbl9.%libs.isNull() do vreqerr("%LIBS") quit
	if dbtbl9.pritable.isNull() do vreqerr("PRITABLE") quit
	if dbtbl9.jrnid.isNull() do vreqerr("JRNID") quit

		if vx("DES").exists(),dbtbl9.des.isNull() do vreqerr("DES") quit
		if vx("SUBTABLE").exists(),dbtbl9.subtable.isNull() do vreqerr("SUBTABLE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL9","MSG",1767,"DBTBL9."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDBTBL9 dbtbl9
	if 'dbtbl9.pritable.isNull() set vfkey("^DBTBL("_""""_dbtbl9.%libs_""""_","_1_","_""""_dbtbl9.pritable_""""_")")="DBTBL9(%LIBS,PRITABLE) -> DBTBL1"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDBTBL9 dbtbl9
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DBTBL1",":dbtbl9.%libs,:dbtbl9.pritable") set vERRMSG = $$^MSG(8563,"DBTBL9(%LIBS,PRITABLE) -> DBTBL1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL9 dbtbl9

	if dbtbl9.%libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("%LIBS", vRM) quit
	if dbtbl9.pritable.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PRITABLE", vRM) quit
	if dbtbl9.jrnid.length()>14 set vRM = $$^MSG(1076,14) do vdderr("JRNID", vRM) quit
	if dbtbl9.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	if dbtbl9.efd.length()>5 set vRM = $$^MSG(1076,5) do vdderr("EFD", vRM) quit
	if dbtbl9.excolumn.length()>250 set vRM = $$^MSG(1076,250) do vdderr("EXCOLUMN", vRM) quit
	if dbtbl9.ifcond.length()>255 set vRM = $$^MSG(1076,255) do vdderr("IFCOND", vRM) quit
	if dbtbl9.incolumn.length()>250 set vRM = $$^MSG(1076,250) do vdderr("INCOLUMN", vRM) quit
	if dbtbl9.mode.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MODE", vRM) quit
	if dbtbl9.parfid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PARFID", vRM) quit
	if dbtbl9.query1.length()>100 set vRM = $$^MSG(1076,100) do vdderr("QUERY1", vRM) quit
	if dbtbl9.query2.length()>100 set vRM = $$^MSG(1076,100) do vdderr("QUERY2", vRM) quit
	set X = dbtbl9.seq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if dbtbl9.subtable.length()>12 set vRM = $$^MSG(1076,12) do vdderr("SUBTABLE", vRM) quit
	set X = dbtbl9.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	set X = dbtbl9.tld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TLD", vRM) quit
	if dbtbl9.trantype.length()>10 set vRM = $$^MSG(1076,10) do vdderr("TRANTYPE", vRM) quit
	if dbtbl9.user.length()>20 set vRM = $$^MSG(1076,20) do vdderr("USER", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL9","MSG",979,"DBTBL9."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL9 dbtbl9

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("%LIBS").exists() set vux("%LIBS") = vx("%LIBS")
	if vx("PRITABLE").exists() set vux("PRITABLE") = vx("PRITABLE")
	if vx("JRNID").exists() set vux("JRNID") = vx("JRNID")
	do vkey(1) set voldkey = dbtbl9.%libs_","_dbtbl9.pritable_","_dbtbl9.jrnid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl9.%libs_","_dbtbl9.pritable_","_dbtbl9.jrnid // Copy new keys into object
	type RecordDBTBL9 vnewrec = dbtbl9.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL9",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL9 dbtbl9

	if vux("%LIBS").exists() set dbtbl9.%libs = vux("%LIBS").piece("|",i)
	if vux("PRITABLE").exists() set dbtbl9.pritable = vux("PRITABLE").piece("|",i)
	if vux("JRNID").exists() set dbtbl9.jrnid = vux("JRNID").piece("|",i)
	quit
