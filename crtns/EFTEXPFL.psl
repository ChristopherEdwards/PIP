EFTEXPFL(RecordEFTEXTP eftextp, String vpar, Boolean vparNorm) // EFTEXTP - EFT External Account Process Information Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              03/28/2007
	// Trigger Definition (3)                      03/28/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = eftextp.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(eftextp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(eftextp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = eftextp.cid
	type String PCODE = eftextp.pcode

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("PCODE").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EFTEXTP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EFTEXTP","CID = :eftextp.cid and PCODE = :eftextp.pcode") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String PCODE

	type RecordEFTEXTP eftextp = Db.getRecord("EFTEXTP","CID=:CID,PCODE=:PCODE")
	if (%ProcessMode = 2) do {
		do eftextp.setMode(2)

		do EFTEXPFL(eftextp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEFTEXTP eftextp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EFTEXTP","CID = :eftextp.cid and PCODE = :eftextp.pcode") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(eftextp)) S ^EFTEXTP(vobj(eftextp,-3),vobj(eftextp,-4))=vobj(eftextp)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEFTEXTP eftextp


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^EFTEXTP(vobj(eftextp,-3),vobj(eftextp,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordEFTEXTP eftextp

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEFTEXTP eftextp

	if eftextp.cid.isNull() do vreqerr("CID") quit
	if eftextp.pcode.isNull() do vreqerr("PCODE") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFTEXTP","MSG",1767,"EFTEXTP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ACN").exists()!vx("SEQ").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert of External Acct Process

	type public RecordEFTEXTP eftextp
	/*
	---- Revision History --------------------------------------------------

	03/28/07 - KELLYP - CR 26292
		   Initial revision.
	*/


	type public Boolean ER

	// Payment external customer and sequence must both be defined
	if eftextp.acn.isNull(),('eftextp.seq.isNull()) do Runtime.setErrMSG("EFTEXTP","5235") quit:ER
	if 'eftextp.acn.isNull(),(eftextp.seq.isNull()) do Runtime.setErrMSG("EFTEXTP","5235") quit:ER

	// Regular loan payment
	if eftextp.pcode = 1 do {  quit:ER
		type RecordLN ln = Db.getRecord("LN","CID=:eftextp.cid",1)
		
		// Invalid account ~p1
		if 'ln.getMode() do Runtime.setErrMSG("EFTEXTP","1259",eftextp.cid) quit:ER

		// Collection orders not permitted for account ~p1
		if 'ln.eftreq do Runtime.setErrMSG("EFTEXTP","3810",eftextp.cid) quit:ER
		}

	if eftextp.acn.isNull() quit

	type RecordCIFEXT cifext = Db.getRecord("CIFEXT","ACN=:eftextp.acn,SEQ=:eftextp.seq",1)

	// Invalid customer number
	if 'cifext.getMode() do Runtime.setErrMSG("EFTEXTP","1295") quit:ER

	quit

vau1 // Trigger AU_CID - After Update of Account

	type public RecordEFTEXTP eftextp
	/*
	---- Revision History --------------------------------------------------

	03/28/07 - KELLYP - CR 26292
		   Initial revision.
	*/

	type public Boolean ER

	// Regular loan payment
	if eftextp.pcode = 1 do {  quit:ER
		type RecordLN ln = Db.getRecord("LN","CID=:eftextp.cid",1)

		// Invalid account ~p1
		if 'ln.getMode() do Runtime.setErrMSG("EFTEXTP","1259",eftextp.cid) quit:ER

		// Collection orders not permitted for account ~p1
		if 'ln.eftreq do Runtime.setErrMSG("EFTEXTP","3810",eftextp.cid) quit:ER
		}

	quit

vau2 // Trigger AU_EXTINFO - After Update of External Account Info

	type public RecordEFTEXTP eftextp
	/*
	---- Revision History --------------------------------------------------

	03/28/07 - KELLYP - CR 26292
		   Initial revision.
	*/

	type public Boolean ER

	// Payment external customer and sequence must both be defined
	if eftextp.acn.isNull(),('eftextp.seq.isNull()) do Runtime.setErrMSG("EFTEXTP","5235") quit:ER
	if 'eftextp.acn.isNull(),(eftextp.seq.isNull()) do Runtime.setErrMSG("EFTEXTP","5235") quit:ER

	if eftextp.acn.isNull() quit

	type RecordCIFEXT cifext = Db.getRecord("CIFEXT","ACN=:eftextp.acn,SEQ=:eftextp.seq",1)

	// Invalid customer number
	if 'cifext.getMode() do Runtime.setErrMSG("EFTEXTP","1295") quit:ER

	// Retrieve all Added and Suppressed EFT's with this PCODE on them
	// and update the institution and account info
	type DbSet ds = Db.selectDbSet("EFTPAY","CID=:eftextp.cid AND PCODE=:eftextp.pcode AND (STATUS='A' or STATUS='SUP')")
	while ds.next() do {
		type RecordEFTPAY eftpay = ds.getRecord("EFTPAY")

		set eftpay.recinst = cifext.extinst
		set eftpay.recacct = cifext.extacct

		do eftpay.bypassSave()
		}

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEFTEXTP eftextp

	set X = eftextp.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = eftextp.pcode if 'X.isNull(),'Db.isDefined("STBLEFTPCODE","X") set vRM = $$^MSG(1485,X) do vdderr("PCODE", vRM) quit
	set X = eftextp.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = eftextp.costyp if 'X.isNull(),'Db.isDefined("UTBLECOSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("COSTYP", vRM) quit
	set X = eftextp.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFTEXTP","MSG",979,"EFTEXTP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordEFTEXTP eftextp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("PCODE").exists() set vux("PCODE") = vx("PCODE")
	do vkey(1) set voldkey = eftextp.cid_","_eftextp.pcode // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = eftextp.cid_","_eftextp.pcode // Copy new keys into object
	type RecordEFTEXTP vnewrec = eftextp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EFTEXTP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do {
		do VAU
		if vx("CID").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordEFTEXTP eftextp

	if vux("CID").exists() set eftextp.cid = vux("CID").piece("|",i)
	if vux("PCODE").exists() set eftextp.pcode = vux("PCODE").piece("|",i)
	quit
