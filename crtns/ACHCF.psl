ACHCF	  /*
ORIG: satyanas - 09/06/2005
DESC: Create FILE Containing ACH Batch(s)

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------

	04/17/2006 - Satyanas - CR 20696
	      	     Modified the below sections because of getting the GTM error 
	      	     while executing the function ACHCF.

			. NXFILE  : Added the extra parenthesis for if conditon because
				    it is failing always. 
				    Added the .getMode() condition for the table ACHFIL.

			. ADDENDA : Replaced Db.select() by Db.getRecord() for the table ACHDTL.
			. GETDEST : Scoped the variable DESC as local and Added set FDEST=FDEST.extract(2,10)
				    and added the .getMode() condition for the UTBLACHRT table.
	
	09/02/05 - Satyanas - 16675
		   Converted M to PSL.
----------------------------------------------------------------------

 */

	do INIT
 	quit


INIT	
	type public Number %PAGE,%PG
	type public String VFMQ
	type Boolean FINISH
	type String %READ,%TAB
	type IO iorms = Class.new("IO")

	set (%PG,%PAGE) = 1
	set FINISH = 0
	
	
	for  do { quit:FINISH
		
		do VPG01(.iorms) if VFMQ = "Q" set FINISH  =  1 quit
		
		if "DFQ"[VFMQ do { quit
		
			do VER(.iorms)
			set FINISH = 1
			}
			
		else  set %PG = %PG + 1
		
		}	
		
	quit
	
	
VPG01( IO iorms)	// Set-up screen

	type public Boolean ER
	type public String RM,%READ,%TAB,VFMQ
	type public Date FDATE
	type String FNUM,RMS
	
	set %TAB("FDATE")=".FDATE1/TBL=VFDATE(/XPP=do GETDEST^ACHCF/XPR=do GETFD^ACHCF"
	set %TAB("DEST")=".DEST1/TBL=VDEST(FDATE,/XPP=do PRIOR^ACHCF"
	set %TAB("FNUM")=".FNUM1/XPP=do RFILE^ACHCF/XPR=do VFILE2^ACHCF"
	set %TAB("RMS")=".RMS1/XPP=set RMS=X do PP01A^ACHCF"
	
	set FDATE = %SystemDate,FNUM = "ALL"
	set %READ = "@@%FN,,,FDATE/REQ,DEST/REQ,FNUM/REQ,RMS/REQ"
	
	do ^UTLREAD if VFMQ = "Q" quit   

	set iorms.fileName = RMS
	set iorms.openParams = "NEWV/WRITE"
	set iorms.timeout = 5
	set iorms.recordSize = 94
 	
 	catch ioxcpt {
        
            	// if not an IO exception, it's not for us
	        if ioxcpt'["%PSL-E-IO" throw ioxcpt
        	set ER = 1
            	set RM =  "Unable to open RMS File"
		}
		
	do iorms.open()
	
	quit
	
	
PP01A	// RMS file name

	type public Boolean ER
	type public Number %EXT
	type public String RM,RMS,X,XRMS,Z
		
	quit:X = ""  if X.find(".") = 0 set ER = 1,RM = "RMS file only" quit
	set %EXT = 1
			
	quit
	
	
VER( IO iorms)	// Fetch records from UTBLACHRT

	type public String VFMQ
	type Number FILE,RECCNT
	type String VRTNUM(),X
	
	if VFMQ = "Q" quit
	
	type public ResultSet rs = Db.select("KEY,ONUS","UTBLACHRT")
	while rs.next() do {
		
		if rs.getCol("ONUS")="" quit
		set X = rs.getCol("KEY")
		set VRTNUM(X.extract(1,8))=""
		
	    	}
	
	set FILE=0
	set RECCNT=0
	
	do NXFILE(.iorms) 
	
	quit
	

NXFILE( IO iorms)	// Fetch next record
	
	type public Boolean FLAG
	type public Date DATA,DATE,TDATE
	type public Number FDEST
	type public String DEST,RFILE(),$ZT
	type public Time TIME,TTIME
	type Number BCHCNT,FILE,HR,MIN
	type Date SDATE
	type String REC,ZREC,X
			
 	set FLAG=0
 	
 	type ResultSet rs= Db.select("FILE,TJD,FDEST,TDATE,TTIME,RTC1,PRIO,FORIG,FIDM,RECSIZ,BLKF,FCODE,DNAME,RTC9,BCHCNT,BLKCNT,EACNT,EHASH,TDAMT,TCAMT,B5694,ONAME,RCODE","ACHFIL","TJD=:FDATE")
 	
 	for  quit:'rs.next()!(FLAG=1)  do {
	
		set FILE = rs.getCol("FILE")
		set SDATE = rs.getCol("TJD")
		if 'RFILE(FILE).exists() quit
		set FDEST = rs.getCol("FDEST")
		set X=FDEST if X.extract()=" " set X=X.extract(2,99)
		if X'=DEST quit
		set ZREC=rs.getCol("RTC1")_"|"_rs.getCol("PRIO")_"| "_rs.getCol("FDEST")_"|"_rs.getCol("FORIG")_"|"_rs.getCol("TDATE")_"|"_rs.getCol("TTIME")_"|"_rs.getCol("FIDM")_"|"_rs.getCol("RECSIZ")_"|"_rs.getCol("BLKF")_"|"_rs.getCol("FCODE")_"|"_rs.getCol("DNAME")_"|"_rs.getCol("ONAME")_"|"_rs.getCol("RCODE")
		
		if (rs.getCol("RTC9").isNull()),(rs.getCol("BCHCNT").isNull()),(rs.getCol("BLKCNT").isNull()),(rs.getCol("EACNT").isNull()),(rs.getCol("EHASH").isNull()),(rs.getCol("TDAMT").isNull()),(rs.getCol("TCAMT").isNull()),(rs.getCol("B5694").isNull()) quit
		set DATE=%CurrentDate,TIME=%CurrentTime
		set DATA=$$DATE^ACHCB(DATE,6),TDATE=DATA ; Outfile creation date
		set HR=TIME\3600,X=TIME/3600,MIN=$E((X-(HR*.6))_"00",2,3)
		set DATA=$$FILL^ACHCB(HR_MIN,4,"R",0),TTIME=DATA
		 
		type RecordACHFIL achfil=Db.getRecord("ACHFIL","TJD=:SDATE,FILE=:FILE",1)
		if achfil.getMode() do {
			set achfil.tdate=TDATE
			set achfil.ttime=TTIME
			do achfil.bypassSave() 
			}
		set $ZT=$$SETZT^%ZT("ZT^ACHCF")
		use 0 W $$MSG^%TRMVT("Begin writing records")
	        
	        set BCHCNT=0
		set REC=rs.getCol("RTC9")_"|"_rs.getCol("BCHCNT")_"|"_rs.getCol("BLKCNT")_"|"_rs.getCol("EACNT")_"|"_rs.getCol("EHASH")_"|"_rs.getCol("TDAMT")_"|"_rs.getCol("TCAMT")_"|"_rs.getCol("B5694")
		
		do NXBCH(FILE,REC,ZREC,.iorms)
		
		set FLAG=1
		
 		}
 		
 	do PADBLK(.iorms)
 	
 	do END(.iorms) 
 	 	
 	quit

      	
NXBCH( Number FILE,
       String REC,
       String ZREC,
       IO iorms)	

	type public Boolean FOR,VFLAG
	type public Number BCHCNT,RECMAT,RTC8
	type public String ZZREC
	type Number BATCH,VLDRECS
	
   	set VFLAG=0	
   	
   	type ResultSet rs= Db.select("BATCH,FOR,RTC5,SCC5,CNAME,DISCR,COID,SEC,CED,CCD,ND,B7678,OSC,BORIG5,BNUM5,RTC8,SCC8,EACNT,EHASH,TDAMT,TCAMT,COID8,B5573,B7479,BORIG8,BNUM8","ACHBCH","TJD=:FDATE AND FILE=:FILE")
   	
   	if rs.isEmpty() quit	
   	
   	for  quit:'rs.next()!(VFLAG=1)  do {
	
		set RECMAT="",BCHCNT=+BCHCNT
		set BCHCNT=RECMAT_BCHCNT
		set REC.piece("|",2)=BCHCNT
	
		do FILIO(.iorms)
	
		set BATCH=rs.getCol("BATCH")
		set FOR=rs.getCol("FOR")
		set RTC8=rs.getCol("RTC8")
		set REC=rs.getCol("RTC8")_"|"_rs.getCol("SCC8")_"|"_rs.getCol("EACNT")_"|"_rs.getCol("EHASH")_"|"_rs.getCol("TDAMT")_"|"_rs.getCol("TCAMT")_"|"_rs.getCol("COID8")_"|"_rs.getCol("B5573")_"|"_rs.getCol("B7479")_"|"_rs.getCol("BORIG8")_"|"_rs.getCol("BNUM8")
		set ZZREC=rs.getCol("RTC5")_"|"_rs.getCol("SCC5")_"|"_rs.getCol("CNAME")_"|"_rs.getCol("DISCR")_"|"_rs.getCol("COID")_"|"_rs.getCol("SEC")_"|"_rs.getCol("CED")_"|"_rs.getCol("CCD")_"|"_rs.getCol("ND")_"|"_rs.getCol("B7678")_"|"_rs.getCol("OSC")_"|"_rs.getCol("BORIG5")_"|"_rs.getCol("BNUM5")
		if 'FOR quit
		
		set VLDRECS=0
	
		do NXSEQ(BATCH,FILE,REC,ZREC,ZZREC,.iorms)
	
		set VFLAG=1
   		
   		}
   		
   	quit
   	
   	      	
NXSEQ( Number BATCH,
       Number FILE,
       String REC,	
       String ZREC,      
       String ZZREC,
       IO iorms)
      
	type public Boolean RFLAG
	type public Number BCHCNT,RECMAT,RTC8,RTNUM,VLDRECS 
	type public String ACHDTL6,FDATE,RECSAV,VRTNUM()
	type Number SEQ
	
	set RFLAG=0
    		
    	type ResultSet rs=Db.select("SEQ,RTC6,ACHTC,RTNUM,RTNUMCD,CID,TAMT,INDID,INDNAM,DISD,ADDREC,TRACE,COID,IBSTC,RPA","ACHDTL","TJD=:FDATE AND FILE=:FILE AND BATCH=:BATCH")   
    	
    	if (rs.isEmpty()),( VLDRECS > 0) quit
    	for  quit:'rs.next()!(RFLAG=1)  do {  
		set SEQ=rs.getCol("SEQ")
		set REC.piece("|",11)=BCHCNT
	
		do FILIO(.iorms)
    	
    		set ACHDTL6 = rs.getCol("RTC6")_"|"_rs.getCol("ACHTC")_"|"_rs.getCol("RTNUM")_"|"_rs.getCol("RTNUMCD")_"|"_rs.getCol("CID")_"|"_rs.getCol("TAMT")_"|"_rs.getCol("INDID")_"|"_rs.getCol("INDNAM")_"|"_rs.getCol("DISD")_"|"_rs.getCol("ADDREC")_"|"_rs.getCol("TRACE")_"|"_rs.getCol("COID")_"|"_rs.getCol("IBSTC")_"|"_rs.getCol("RPA")
		set REC = ACHDTL6.piece("|",1,11)
		set RTNUM=RTC8
		
		/* Skip over the ON-US records for creating the tape - MRR Include 
		addedum record when it exist for an entry with an offset account. */
		
		if ((REC.piece("|",2)).translate(" ","")=""),VRTNUM(RTNUM).exists() do ADDENDA(SEQ,FILE,BATCH) quit
	
		if (REC.piece("|",2)).translate(" ","")="",'VRTNUM(RTNUM).exists() quit
	
		/* If program flow gets at least to this point, the batch contains at
		   least 1 valid External transaction.  It is now OK to create a batch 
		   entry in the ACH file. */
		   
		set VLDRECS=VLDRECS+1
	
		if VLDRECS=1  do {
	
			set RECSAV=REC
			set BCHCNT=BCHCNT+1
	
			if BCHCNT=1 set REC=ZREC do FILIO(.iorms)
			set REC=ZZREC
			set RECMAT.piece("0",8-(BCHCNT.length()))=""
			set BCHCNT=RECMAT_BCHCNT
			set REC.piece("|",13)=BCHCNT
	
			do FILIO(.iorms)
	
			set REC=RECSAV
	
			}
	
		if VRTNUM(RTNUM).exists() do FILIO(.iorms)
	
		do ADDENDA(SEQ,FILE,BATCH,.iorms)  
	
		set RFLAG=1
    	
		}		
	
	quit


ADDENDA( Number SEQ, 	
         Number FILE,
         Number BATCH,
         IO iorms)
        
	type public String ACHDTL7,FDATE,REC
	
	type RecordACHDTL achdtl=Db.getRecord("ACHDTL","TJD=:FDATE,FILE=:FILE,BATCH=:BATCH,SEQ=:SEQ",1)
  	
  	if 'achdtl.getMode() quit
	
	set ACHDTL7=achdtl.rtc7_"|"_achdtl.atc_"|"_achdtl.free_"|"_achdtl.addseq_"|"_achdtl.entseq
	set REC=ACHDTL7.piece("|",1,5)
	
	do FILIO(.iorms)
	
	quit
	
	
FILIO( IO iorms)	// Write to outfile
	
	type public Number RECCNT
	type public String ACHZ(),REC,RMS
		
	set REC = REC.translate("|"),RECCNT = RECCNT + 1
	set ACHZ(RECCNT)=REC

	do iorms.write(REC)

	if RECCNT#100 = 0 use 0 write $$MSG^%TRMVT(RECCNT_" records filed")

	quit

	
PADBLK( IO iorms) 	// Pad block with '9' records

	type public Number RECCNT
	type public String REC
	type Number CNT,I
	
	// No need to pad block
	if RECCNT#10 = 0 quit  
	set REC = "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
	set CNT = 10-(RECCNT#10) for I = 1:1:CNT do FILIO(.iorms)
	
	quit
	
	
ZT	//-----------------------------------------------------------------------------

	type public Boolean ER

	do ZE^UTLERR

	set ER = 1

	quit


END( IO	iorms) //----------------------------------------------------------------------------

	type public String DEST,ER,RM
		
	set ER = "W",RM = "ACH file destination "_DEST_" completed"

	do iorms.close()

	quit


GETDEST	 // Get a list of destinations----------------------------------------

	
	type public String DEST,RM,VDEST(,),X,Z	
	type public Number NI
	type Number FDEST,NUMDEST,TDATE,TTIME
	type String DESC
	
	set NUMDEST = 0
	set DESC=""
	
	type ResultSet rs =  Db.select("FDEST,TDATE,TTIME","ACHFIL","TJD = :X")
	while rs.next() do {
		
		set FDEST  =  rs.getCol(1)
		set TDATE  =  rs.getCol(2)
		set TTIME  =  rs.getCol(3)
		
		if VDEST(X,FDEST).exists() quit
	
		type RecordUTBLACHRT utblachrt = Db.getRecord("UTBLACHRT","KEY = :FDEST",1)
		if utblachrt.getMode() set DESC = utblachrt.INAME
		set VDEST(X,FDEST) = DESC_"|"_TDATE_"|"_TTIME
		set NUMDEST = NUMDEST + 1
		}	
		
	if NUMDEST = 1 set Z = VDEST(X,"").order(),DEST = Z,RM(1) = DEST_"|"_(NI + 1)
	
	quit
	
			
GETFD	// Get list of valid dates

	type public String VFDATE()

	type ResultSet rs=Db.select("TJD","ACHFIL")

	while rs.next() do {
		
		set VFDATE(rs.getCol("TJD"))=""
		
		}
			
	quit
	
	
		
VFILE2	// Check that valid file numbers were entered

	type public String DEST,Z,VFILE()
	type Number FDEST,FILE,LIST

	set (FILE,LIST)=0
		
	type ResultSet rs=Db.select("FILE,FDEST,RTC9,BCHCNT,BLKCNT,EACNT,EHASH,TDAMT,TCAMT,B5694","ACHFIL","TJD=:FDATE")
	
	while rs.next() do {
	
		set FILE=rs.getCol("FILE")
 		set FDEST=rs.getCol("FDEST")
		set Z=FDEST 
	
		if Z.extract()=" " set Z=Z.extract(2,99)
	
		if Z'=DEST quit
	
		if rs.getCol("RTC9"),rs.getCol("BCHCNT"),rs.getCol("BLKCNT"),rs.getCol("EACNT"),rs.getCol("EHASH"),rs.getCol("TDAMT"),rs.getCol("TCAMT"),rs.getCol("B5694")="" quit
	        set VFILE(FILE)="" if LIST'="" set LIST=LIST_","
	        set LIST=LIST_FILE
	        
		}
	
	quit	
	
	
RFILE	// Check requested files versus valid files
	
	type public Boolean ER
	type public String FNUM,RFILE(),VFILE(),X,Z,LIST,RM 
	type Number I
	
	if X="ALL" do { quit

		set FNUM="ALL" 

		// Set of array of valid/requested files
		set Z=""

		for  set Z=VFILE(Z).order() quit:Z=""  do {
			set RFILE(Z)=""
			}
		}

	for I=1:1:10 do {
		
		set Z=X.piece(",",I) 
		
		if Z'="" set RFILE(Z)="" 

		if '(VFILE(Z).exists()) do {
		
			set ER=1,RM="Enter any of these files separated by commas:  "_LIST
			
			 }
		}
		
	quit
	
	
PRIOR	/* Check to see if the detail file has already been written to an Outfile
	 and provide a warning message, but allow them to continue. */
	 
	type public String DEST,FDATE,MSG,TDATE,TTIME,VDEST(,),X,Y,Z

	set DEST=X if '(VDEST(FDATE,DEST).exists()) quit		
	set TDATE=VDEST(FDATE,DEST).piece("|",2) if 'TDATE quit
	set TTIME=VDEST(FDATE,DEST).piece("|",3)
	set Y=(TDATE.extract(3,4)_"/"_TDATE.extract(5,6)_"/"_TDATE.extract(1,2))_" at"
	set Z=TTIME.extract(1,2)_":"_TTIME.extract(3,4),Z=Z_$S(Z<12:"am",1:"pm")
	set:Z>12 Z.piece(":",1)=Z-12
	set MSG=DEST_" file created on "_Y_Z

	write $$MSG^%TRMVT(MSG,0,1)

	quit
	
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60373^41792^Sethy, Satyanarayan^12062"	// Signature - LTD^TIME^USER^SIZE
