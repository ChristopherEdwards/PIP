UTBLEUR(RecordUTBLEURINT utbleurint, String vpar, Boolean vparNorm) // UTBLEURINT - Euro Interest Index Mapping Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (2)              11/22/2003
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbleurint.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utbleurint,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbleurint,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String INDEX = utbleurint.index

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("INDEX").exists() do vkchged quit               // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLEURINT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLEURINT","INDEX = :utbleurint.index") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String INDEX

	type RecordUTBLEURINT utbleurint = Db.getRecord("UTBLEURINT","INDEX=:INDEX")
	if (%ProcessMode = 2) do {
		do utbleurint.setMode(2)

		do UTBLEUR(utbleurint,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLEURINT utbleurint

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLEURINT","INDEX = :utbleurint.index") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbleurint,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbleurint,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbleurint))  S ^UTBL("EURINT",vobj(utbleurint,-3))=vobj(utbleurint)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLEURINT utbleurint

	if vpar'["/NOLOG/" do ^DBSLOGIT(utbleurint,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("EURINT",vobj(utbleurint,-3))                // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLEURINT utbleurint

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLEURINT utbleurint

	if utbleurint.index.isNull() do vreqerr("INDEX") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLEURINT","MSG",1767,"UTBLEURINT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLEURINT utbleurint
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utbleurint,.vx(),1,"|")
	quit


vbi1 // Trigger AFTER_INSERT - AFTER_INSERT

	do vad1

	quit

vbu1 // Trigger AFTER_INSERT - AFTER_INSERT

	do vad1

	quit

vai1 // Trigger AFTER_INSERT - AFTER_INSERT

	do vad1

	quit

vau1 // Trigger AFTER_INSERT - AFTER_INSERT

	do vad1

	quit

vad1 // Trigger AFTER_INSERT - AFTER_INSERT

	type public RecordUTBLEURINT utbleurint
	do utbleurint.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	12/07/99 - DOUGANM - 31126
		   Removed unnecessary rs.getCol() call, and replaced 
		   %SystemDate in Runtime.setErrMSG() call with TJD, 
		   because %SystemDate was being mistaken for a string
		   by the compiler.

	09/21/99 - CARROLLJ - 31126
		   Convert to PSL.
	
	12/01/98 - KONGJ - 30105
		   Removed the variable INDEX from the N(ew) statement. This
		   fixes the undefined variable error in the interest index
		   mapping process.
	*/
	
	new EFDEUR,INDEXEUR,rs

	set INDEX=utbleurint.index 
	set INDEXEUR=utbleurint.indexeur
	
	type ResultSet rs=Db.select("EFD","INDEX0","INDEX=:INDEX") 
	if rs.isEmpty() do Runtime.setErrMSG("UTBLEURINT",4016,"INDEX~TJD") quit:ER 
	
	new rs 
	type ResultSet rs=Db.select("EFD","INDEX0","INDEX=:INDEXEUR") 
	if rs.isEmpty() do Runtime.setErrMSG("UTBLEURINT",4016,"INDEX~TJD") quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLEURINT utbleurint

	set X = utbleurint.index if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX", vRM) quit
	set X = utbleurint.indexeur if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEXEUR", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLEURINT","MSG",979,"UTBLEURINT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLEURINT utbleurint

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("INDEX")
	set voldkey = vux.piece("|",1),vobj(utbleurint,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utbleurint,-3) = vnewkey // Copy new keys into object
	type RecordUTBLEURINT vnewrec = utbleurint.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLEURINT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(utbleurint,-3) = vux.piece("|",1)             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
