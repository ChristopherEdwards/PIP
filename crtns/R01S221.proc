R01S221	// SCA169 - Service Fee Analysis Statements
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String Q,SCND
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number HEAD=0
	type Date VIN2
	type String VIN3="ALL"
	type String VIN4="ALL"
	type String VIN5="ALL"
	type String VIN6="ALL"
	type String VIN7="ALL"

	set RID="SCA169"
	set RN="Service Fee Analysis Statements"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("HEAD")="|1|||||||L|Print Company Heading|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN2")="|10||[SRV]SCND|[SRV]SCND:DISTINCT:NOVAL||S SCND=$$^SCAJD(X)||D|Service Charge Date|||||"
	set %TAB("VIN3")="|255||[SRV]CID|[ACN]:NOVAL||D EXT^DBSQRY||T|Account Number|||||"
	set %TAB("VIN4")="|255||[DEP]GRP|[STBLGRP]:QU ""[STBLGRP]CLS=""""D"""""":NOVAL||D EXT^DBSQRY||T|Product Group|||||"
	set %TAB("VIN5")="|255||[DEP]TYPE|[PRODCTL]:NOVAL||D EXT^DBSQRY||T|Product Type|||||"
	set %TAB("VIN6")="|255||[DEP]FEEPLN|[FEEPLN]PLAN:DISTINCT:QU ""[FEEPLN]PLTP=0"":NOVAL||D EXT^DBSQRY||T|Service Fee Plan|||||"
	set %TAB("VIN7")="|255||[DEP]OFF|[UTBLOFF]:NOVAL||D EXT^DBSQRY||T|Primary Account Officer Code|||||"

	set %READ="IO/REQ,HEAD#1,VIN2#1,VIN3#0,VIN4#0,VIN5#0,VIN6#0,VIN7#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=31
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String Q,SCND
	type public Date VIN2
	type public Number HEAD
	type public String VIN3,VIN4,VIN5,VIN6,VIN7
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ADDSRV,BALEQU,BALREQ,BASECHRG,BOO,CADD(),CC,CID,CONAM,COST,COUNT4,DESC,I,IADD(),LAD,LASTCID,LINK(),LINKO(),NETFWD,NETFWDO,OEA,OFF,PLTP,RESPCT,RID,RN,TAD,UNP,VL,VLOF,VRF(),VSTATS(),VWHERE,addchg,avgccol,avgcflt,avginvs,avglbal,avlbal,balex,chg,chgwave,earnal,ernpct,intpd,laddchg,laddsrv,ladjanl,lavgcol,lavginv,lbalequ,lbase,lchg,lcrcd,lfloat,lowavg,lrsvpct,lsvcamt,netecr,netfwd,resvpct,svfeeact,vCOL,vHDG,vc1,vc2,vc3,vc4,vovc1,vovc2,vovc3,vrundate,vsysdate,x

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA169",RN="Service Fee Analysis Statements"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA169","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		set DQQRY(SEQ)="[SRV]SCND = "_$$addqts^DBSRWUTL(VIN2),SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[SRV]CID "_VIN3,SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[DEP]GRP "_VIN4,SEQ=SEQ+1
		if VIN5.get()="" set VIN5="ALL"
		if VIN5'="ALL" set DQQRY(SEQ)="[DEP]TYPE "_VIN5,SEQ=SEQ+1
		if VIN6.get()="" set VIN6="ALL"
		if VIN6'="ALL" set DQQRY(SEQ)="[DEP]FEEPLN "_VIN6,SEQ=SEQ+1
		if VIN7.get()="" set VIN7="ALL"
		if VIN7'="ALL" set DQQRY(SEQ)="[DEP]OFF "_VIN7,SEQ=SEQ+1
		set DQQRY(SEQ)="[SYSDEV,DEP]FEEPLN'=""""",SEQ=SEQ+1
		set DQQRY(SEQ)="[SYSDEV,DEP]ANLTYP=1",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("TMPRPT2") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:3 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	do VOPRE if VFMQ do VEXIT(0) quit

	set VSELECT="TMPRPT2.PID,TMPRPT2.KEY1,TMPRPT2.KEY2,TMPRPT2.DATA"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"TMPRPT2",VWHERE,"TMPRPT2.PID,TMPRPT2.KEY1,TMPRPT2.KEY2","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3
	set vovc1="",vovc2="",vovc3=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3
	set vovc1=vc1,vovc2=vc2,vovc3=vc3
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4
	set vc1=V.piece($C(9),1)			// TMPRPT2.PID
	set vc2=V.piece($C(9),2)			// TMPRPT2.KEY1
	set vc3=V.piece($C(9),3)			// TMPRPT2.KEY2
	set vc4=V.piece($C(9),4)			// TMPRPT2.DATA
	quit

	// User-defined pre/post-processor code

VOPRE	// OPEN pre-processor

	type public String VWHERE

	set VWHERE = "PID = "_%ProcessID

	quit

VPREAQ	// Pre-processor (after query)

        /*
        This code is necessary to build the TMPRPT2 table for use by
        report SCA169.  The report combines data from multiple accounts in
	the case of lead/sub accounts, but cannot do so simply using the report
	writer to try to combine them.  Therefore, this code builds the
	necessary supporting structure.
        
        The KEY2 level contains the summary information for the lead and
        any linked accounts, in order by FEECAT and FEETYP.  KEY2 = 0 will
        always exist and will contain the sums of COST and BASECHRG info
        for linked accounts.
        */

	type public Date SCND
        type public Boolean HEAD
        type public Number I, LASTCID, LINK(), LINKO(), PLTP
        type public String CADD(), IADD(), Q
        
        type String WHERE
 
        set LASTCID = ""
        for I = 1:1:15 set LINK(I) = 0
        for I = 1:1:5 set LINKO(I) = 0
	set PLTP = 0
 
        // Initialize heading -- suppress if user doesn't want it
        if 'HEAD set (IADD(1), IADD(2), IADD(3)) = ""
        else  do {
                set IADD(1) = CUVAR.CONAM
                set IADD(2) = CUVAR.CAD1
                set IADD(3) = CUVAR.CCITY_", "_CUVAR.CSTATE_"  "_CUVAR.CCNTRY_"  "_CUVAR.CZIP
        }
 
        // Build temporary sort/select table
        do Db.delete("TMPRPT2", "PID=:%ProcessID")
 
        set WHERE = "(SRV.SCND = "_SCND_" AND SRV.PLTP = 0)"
 
        if Q.data() set WHERE = WHERE_" AND ("_$$Q2SQL^SQLCONV(.Q())_")"
 
        set WHERE = WHERE_" AND DEP.CID = SRV.CID"
        
        #ACCEPT Date=08/18/05; PGM=RussellDS; CR=16911
        type ResultSet rs = Db.select("CID", "SRV,DEP", WHERE)
 
        while rs.next() do {
 
 		type Boolean CONVERT
                type Number BASECHRG, CID, COST, SEQ
                type String CRCD, FEEARRAY(,), FEECAT, FEEPLN, FEETYP, PLANCUR
                
                set (BASECHRG, COST) = 0
 
                set CID = rs.getCol("CID")
                
                type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
                
                set FEEPLN = dep.feepln
                
                // Find out the values in the lead account's service fee plan
		// Get last SRVH plan record
		type DbSet ds = Db.selectDbSet("SRVH", "FEEPLN=:FEEPLN AND SCND<=:SCND", "SCND DESC")
		type RecordSRVH srvh
		if ds.next() set srvh = ds.getRecord("SRVH")
		else  set srvh = Class.new("RecordSRVH", "FEEPLN=:FEEPLN,SCND=:SCND")
		
		set CRCD = dep.crcd
		set PLANCUR = srvh.plancur
		if PLANCUR.isNull() set PLANCUR = CRCD
		
		// See if fee plan is in the same currancy as lead account.
                // If the convert flag is not set on the fee plan, convert
		if (PLANCUR '= CRCD), 'srvh.curflag set CONVERT = 1
		else  set CONVERT = 0
 
                // Build FEEARRAY for SRVD record for charge option = 3
                
                type ResultSet rs2 = Db.select("FEECAT,FEETYP,SRVCNTA,SRVCSTA,SRVADJ", "SRVD", "CID=:CID AND PLTP=0 AND SCND=:SCND AND CHGOPT=3 AND NOT (SRVCNTA=0 AND SRVCSTA=0 AND SRVADJ=0)")
 
                while rs2.next() do {
                	
                	type Number SRVCSTA = rs2.getCol("SRVCSTA")
                	
                	if CONVERT set SRVCSTA = $$CONV^CRCDUTL(SRVCSTA, CRCD, PLANCUR, srvh.planexc, SCND)

			set COST = COST + SRVCSTA                	
                	set FEEARRAY(rs2.getCol("FEECAT"), rs2.getCol("FEETYP")) = rs2.getCol("SRVCNTA")_"|"_SRVCSTA_"|"_rs2.getCol("SRVADJ")
                }
                
	        // Now include linked accounts' data
	        type ResultSet rs3 = Db.select("CID", "DEP", "ANLCID=:CID")
        
        	while rs3.next() do {
        	
        		type Number LPLANEXC, OCID
			type String FEEPLN, LNKCRCD, LPLANCUR
		
			set OCID = rs3.getCol("CID")
		
			quit:'Db.isDefined("SRV", "CID=:OCID,PLTP=:PLTP,SCND=:SCND")
		
			type RecordDEP odep = Db.getRecord("DEP", "CID=:OCID")
		
			quit:(odep.stat = 4) & (odep.dtc '> SCND)
		
			set FEEPLN = odep.feepln
		
			quit:FEEPLN.isNull()
		
			set LNKCRCD = odep.crcd
		
			type DbSet ds = Db.selectDbSet("SRVH", "FEEPLN=:FEEPLN AND SCND<=:SCND", "SCND DESC")
			type RecordSRVH osrvh
			if ds.next() set osrvh = ds.getRecord("SRVH")
			else  set osrvh = Class.new("RecordSRVH", "FEEPLN=:FEEPLN,SCND=:SCND")
		
			set LPLANCUR = osrvh.plancur
			set LPLANEXC = osrvh.planexc
			if LPLANCUR.isNull() set LPLANCUR = LNKCRCD
		
			/* If the linked feeplan is in a diff currency from the CRCD on the link-
			   account, and the conversion flag is set to yes, convert back to linked
			   account's CRCD.
			*/
			if (LPLANCUR '= LNKCRCD), osrvh.curflag set osrvh.base = $$CONV^CRCDUTL(osrvh.base, LPLANCUR, LNKCRCD, LPLANEXC, SCND) 
	
			// If the sub account's CRCD isn't the same as the lead accounts,
			// convert to the lead account's currency.
			if (CRCD '= LPLANCUR) set osrvh.base = $$CONV^CRCDUTL(osrvh.base, CRCD, LPLANCUR, 1, SCND)
		
			// Add the base cost to the total cost and base charge totals
			if (osrvh.base <> 0) do {
				set BASECHRG = BASECHRG + osrvh.base
				set COST = COST + osrvh.base
			}
		
			/* Get all of the type 3 fees.  Add them to the FEEARRAY (an array
			   with totals for all of the sub-accounts fees.  They will eventually
			   be added to the lead's.
			*/
			type DbSet ds2 = Db.selectDbSet("SRVD", "CID=:OCID AND PLTP=:PLTP AND SCND=:SCND AND CHGOPT=3 AND NOT (SRVCNTA=0 AND SRVCSTA=0 AND SRVADJ=0)")
		
			while ds2.next() do {
			
				type RecordSRVD osrvd = ds2.getRecord("SRVD")
			
				set FEECAT = osrvd.feecat
				set FEETYP = osrvd.feetyp

				/* If the linked feeplan is in a diff currency from the CRCD
				   on the link-account, and the conversion flag is set to yes,
				   convert back to linked account's CRCD.
				*/
				if (LPLANCUR '= LNKCRCD), osrvh.curflag set osrvd.srvcsta = $$CONV^CRCDUTL(osrvd.srvcsta, LPLANCUR, LNKCRCD, LPLANEXC, SCND) 

				// Convert to lead currancy amount if account is a different Currency
				if (CRCD '= LPLANCUR) set osrvd.srvcsta = $$CONV^CRCDUTL(osrvd.srvcsta, CRCD, LPLANCUR, 1, SCND)

				// Initialize the array to zero if that level doesn't exist
				if 'FEEARRAY(FEECAT, FEETYP).exists() set FEEARRAY(FEECAT, FEETYP) = "0|0|0"
				set FEEARRAY(FEECAT, FEETYP).piece("|", 1) = FEEARRAY(FEECAT,FEETYP).piece("|", 1) + osrvd.srvcnta
				set FEEARRAY(FEECAT, FEETYP).piece("|", 2) = FEEARRAY(FEECAT,FEETYP).piece("|", 2) + osrvd.srvcsta
				set FEEARRAY(FEECAT, FEETYP).piece("|", 3) = FEEARRAY(FEECAT,FEETYP).piece("|", 3) + osrvd.srvadj
				set COST = COST + osrvd.srvcsta
			}
        	}
	
		// Save FEEARRAY info to TMPRPT2
		do settemp(CID, 0, COST_"|"_BASECHRG)
	
		set SEQ = 1
		set (FEECAT, FEETYP) = ""
		for  set FEECAT = FEEARRAY(FEECAT).order() quit:FEECAT.isNull()  do {
			for  set FEETYP = FEEARRAY(FEECAT, FEETYP).order() quit:FEETYP.isNull()  do {
				do settemp(CID, SEQ, FEECAT_"|"_FEETYP_"|"_FEEARRAY(FEECAT, FEETYP))
				set SEQ = SEQ + 1
			}
		}
        }	
 
        quit

 
settemp(String CID,
        String SEQ,
        String DATA)
 
        type RecordTMPRPT2 tmprpt2 = Class.new("RecordTMPRPT2", "PID=%ProcessID,KEY1=:CID,KEY2=:SEQ")
        
        set tmprpt2.data = DATA
 
        do tmprpt2.save()

	quit

VPREBQ	// Pre-processor (before query)

	//Incoming=Q,SCND

	type public String Q

	// Query array
	kill Q

	quit

VRPOST	// Report post-processor

	type public Number LASTCID

        // Print detail for lead and linked accounts on last record
        if 'LASTCID.isNull() do {
 
                type Number LNKDCID, PAGENO
                type String PGM, RID, VRWOPT()
 
                // determine if any linked accounts, if not, no need to do this
                type ResultSet rs = Db.select("CID", "DEP", "ANLCID=:LASTCID")
 
                if rs.isEmpty() quit
 
                set RID = "SCA169A"
                do ^URID quit:PGM.isNull()
 
                set VRWOPT("NOOPEN") = 1
                set VRWOPT("NOCLOSE") = 1
 
                // Linked accounts exist - print lead account detail first
                set LNKDCID = LASTCID
                set PAGENO = 1
                do V0^@PGM
 
                // Then pring linked accounts' detail
                while rs.next() do {
 
                        set LNKDCID = rs.getCol("CID")
                        set PAGENO = PAGENO + 1
                        do V0^@PGM
                }
	}

	do Db.delete("TMPRPT2", "PID=:%ProcessID")

	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(3)=1		// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VHDG3 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(3)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3
	type Number vb1,vb2,vb3
	set (vb1,vb2,vb3)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,VH0=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(3) set vs(3)=1 do VSUM3 quit:VFMQ  do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(3)=VT(3)+1
	quit

VHDG3	// Group Header
	type public String %MSKD,%TIM,ADDSRV,BALEQU,BALREQ,BASECHRG,BOO,CADD(),CC,CID,CONAM,COST,COUNT4,DESC,ER,HEAD,I,IADD(),IOSL,LAD,LASTCID,LINK(),LINKO(),NETFWD,NETFWDO,OEA,OFF,PLTP,Q,RESPCT,RID,RN,SCND,TAD,UNP,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,VWHERE,addchg,avgccol,avgcflt,avginvs,avglbal,avlbal,balex,chg,chgwave,earnal,ernpct,intpd,laddchg,laddsrv,ladjanl,lavgcol,lavginv,lbalequ,lbase,lchg,lcrcd,lfloat,lowavg,lrsvpct,lsvcamt,netecr,netfwd,resvpct,svfeeact,vc1,vc2,vc3,vc4,vcrt,verror,vh(),vovc1,vovc2,vovc3,vrundate,x

	quit:vh(3)  set vh(3)=1				// Print flag
	if VLC+42>IOSL do VHDG0 quit:VFMQ

	do VP1 quit:VFMQ!verror.get()  set V=$E(IADD(1),1,40) set VL=V
	do VOM
	set VL=$E(IADD(2),1,40)
	do VOM
	set VL=$E(IADD(3),1,40)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL=$E(CADD(1),1,35)
	do VOM
	set VL=$E(CADD(2),1,35)
	set VL=VL_$J("",44-VL.length())_"Analysis from:"
	set VL=VL_$J("",62-VL.length())_$E(LAD,1,15)
	do VOM
	set VL=$E(CADD(3),1,35)
	set VL=VL_$J("",55-VL.length())_"to:"
	set VL=VL_$J("",62-VL.length())_$E(TAD,1,10)
	do VOM
	set VL=$E(CADD(4),1,35)
	set VL=VL_$J("",42-VL.length())_"Account Officer:"
	set VL=VL_$J("",62-VL.length())_$E(OFF,1,6)
	do VOM
	set VL=$E(CADD(5),1,35)
	set VL=VL_$J("",51-VL.length())_"Branch:    "
	set VL=VL_$J("",62-VL.length())_$J(BOO,6)
	do VOM
	set VL=$E(CADD(6),1,35)
	set VL=VL_$J("",46-VL.length())_"Cost Center:"
	set VL=VL_$J("",62-VL.length())_$J(CC,6)
	do VOM
	set VL="================================================================================"
	do VOM
	set VL="   "_"Accounts Included in Analysis:"
	do VOM
	set VL="" do VOM
	set VL=" "_"Lead Account: "
	set VL=VL_$J("",15-VL.length())_$J(CID,12)
	do VOM
	set VL=" "_"Sub Accounts: "
	set VL=VL_$J("",15-VL.length())_$S(+LINK(1)=0:$J("",12),1:$J(LINK(1),12))
	set VL=VL_$J("",28-VL.length())_$S(+LINK(2)=0:$J("",12),1:$J(LINK(2),12))
	set VL=VL_$J("",41-VL.length())_$S(+LINK(3)=0:$J("",12),1:$J(LINK(3),12))
	set VL=VL_$J("",54-VL.length())_$S(+LINK(4)=0:$J("",12),1:$J(LINK(4),12))
	set VL=VL_$J("",67-VL.length())_$S(+LINK(5)=0:$J("",12),1:$J(LINK(5),12))
	do VOM
	set VL="               "_$S(+LINK(6)=0:$J("",12),1:$J(LINK(6),12))
	set VL=VL_$J("",28-VL.length())_$S(+LINK(7)=0:$J("",12),1:$J(LINK(7),12))
	set VL=VL_$J("",41-VL.length())_$S(+LINK(8)=0:$J("",12),1:$J(LINK(8),12))
	set VL=VL_$J("",54-VL.length())_$S(+LINK(9)=0:$J("",12),1:$J(LINK(9),12))
	set VL=VL_$J("",67-VL.length())_$S(+LINK(10)=0:$J("",12),1:$J(LINK(10),12))
	if 'VL.translate(" ").isNull() do VOM
	set VL="               "_$S(+LINK(11)=0:$J("",12),1:$J(LINK(11),12))
	set VL=VL_$J("",28-VL.length())_$S(+LINK(12)=0:$J("",12),1:$J(LINK(12),12))
	set VL=VL_$J("",41-VL.length())_$S(+LINK(13)=0:$J("",12),1:$J(LINK(13),12))
	set VL=VL_$J("",54-VL.length())_$S(+LINK(14)=0:$J("",12),1:$J(LINK(14),12))
	set VL=VL_$J("",67-VL.length())_$S(+LINK(15)=0:$J("",12),1:$J(LINK(15),12))
	if 'VL.translate(" ").isNull() do VOM
	set VL=" Other Linked:"
	set VL=VL_$J("",15-VL.length())_$S(+LINKO(1)=0:$J("",12),1:$J(LINKO(1),12))
	set VL=VL_$J("",28-VL.length())_$S(+LINKO(2)=0:$J("",12),1:$J(LINKO(2),12))
	set VL=VL_$J("",41-VL.length())_$S(+LINKO(3)=0:$J("",12),1:$J(LINKO(3),12))
	set VL=VL_$J("",54-VL.length())_$S(+LINKO(4)=0:$J("",12),1:$J(LINKO(4),12))
	set VL=VL_$J("",67-VL.length())_$S(+LINKO(5)=0:$J("",12),1:$J(LINKO(5),12))
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_"================================================================================"
	if 'VL.translate(" ").isNull() do VOM
	set VL="Account Balance Summary:"
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	do VP2 quit:VFMQ!verror.get()  set V=$E(lowavg,1,25) set VL="      "_V
	set VL=VL_$J("",61-VL.length())_$S(+avglbal=0:$J("",14),1:$J($FN(avglbal,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	do VP3 quit:VFMQ!verror.get()  set V=$E(lfloat,1,25) set VL="          "_V
	set VL=VL_$J("",61-VL.length())_$J($FN(avgcflt,",",2),14)
	do VP4 quit:VFMQ!verror.get()  set V=$E(x,1,1) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",77-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP6 quit:VFMQ!verror.get()  set V=$E(lavgcol,1,25) set VL="      "_V
	set VL=VL_$J("",61-VL.length())_$S(+avgccol=0:$J("",14),1:$J($FN(avgccol,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	do VP7 quit:VFMQ!verror.get()  set V=$E(lrsvpct,1,25) set VL="          "_V
	set VL=VL_$J("",38-VL.length())_$S(+RESPCT=0:$J("",5),1:$J(RESPCT,5,2))
	set VL=VL_$J("",61-VL.length())_$S(+resvpct=0:$J("",14),1:$J($FN(resvpct,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	do VP8 quit:VFMQ!verror.get()  set V=$E(lavginv,1,26) set VL="      "_V
	set VL=VL_$J("",61-VL.length())_$S(+avginvs=0:$J("",14),1:$J($FN(avginvs,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	set VL="          "_"Less Balance to Exclude"
	set VL=VL_$J("",61-VL.length())_$J($FN(balex,",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="      "_"Balance Available for Earnings Allowance              "
	set VL=VL_$J("",61-VL.length())_$J($FN(avlbal,",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="          "_"Earnings Allowance @ "
	set VL=VL_$J("",31-VL.length())_$J(ernpct,8,5)
	set VL=VL_$J("",40-VL.length())_"%"
	set VL=VL_$J("",65-VL.length())_$J($FN(earnal,",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="          "_"Earnings Credit or Deficit Carried Forward"
	do VP9 quit:VFMQ!verror.get()  set V=$J($FN(netfwd,",",2),14)
	set VL=VL_$J("",65-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="          "_"Less: Total Interest Paid                              "
	set VL=VL_$J("",65-VL.length())_$J($FN(intpd,",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="      "_"Net Earnings Credit"
	do VP10 quit:VFMQ!verror.get()  set V=$J($FN(netecr,",",2),14)
	set VL=VL_$J("",65-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="================================================================================="
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="Service Fee Detail"
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="                             "_"Item        Unit      Cost for         Balance"
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"Description            Count       Price      Services      Equivalent"
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"----------------------------------------------------------------------"
	if 'VL.translate(" ").isNull() do VOM
	do VP11 quit:VFMQ!verror.get()  set V=$E(lbase,1,20) set VL="     "_V
	set VL=VL_$J("",52-VL.length())_$S(+BASECHRG=0:$J("",10),1:$J($FN(BASECHRG,",",2),10))
	do VP12 quit:VFMQ!verror.get()  set V=$S(+BALEQU=0:$J("",12),1:$J($FN(BALEQU,",",2),12)) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",63-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit

VDTL3	// Detail
	type public String ADDSRV,BALEQU,BALREQ,BASECHRG,BOO,CADD(),CC,CID,COST,COUNT4,DESC,HEAD,I,IADD(),IOSL,LAD,LASTCID,LINK(),LINKO(),NETFWD,NETFWDO,OEA,OFF,PLTP,Q,RESPCT,SCND,TAD,UNP,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),VWHERE,addchg,avgccol,avgcflt,avginvs,avglbal,avlbal,balex,chg,chgwave,earnal,ernpct,intpd,laddchg,laddsrv,ladjanl,lavgcol,lavginv,lbalequ,lbase,lchg,lcrcd,lfloat,lowavg,lrsvpct,lsvcamt,netecr,netfwd,resvpct,svfeeact,vc1,vc2,vc3,vc4,verror,vh(),vovc1,vovc2,vovc3,x

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	do VP14 quit:VFMQ!verror.get()  set V=$E(DESC,1,20) set VL="     "_V
	set VL=VL_$J("",28-VL.length())_$S(+COUNT4=0:$J("",5),1:$J(COUNT4,5))
	set VL=VL_$J("",38-VL.length())_$S(+UNP=0:$J("",7),1:$J(UNP,7,2))
	set VL=VL_$J("",54-VL.length())_$S(+OEA=0:$J("",8),1:$J($FN(OEA,",",2),8))
	set V=$S(+BALREQ=0:$J("",12),1:$J($FN(BALREQ,",",2),12)) do VP15 quit:VFMQ!verror.get()
	set VL=VL_$J("",63-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM3	// Summary
	type public String ADDSRV,BALEQU,BALREQ,BASECHRG,BOO,CADD(),CC,CID,COST,COUNT4,DESC,HEAD,I,IADD(),IOSL,LAD,LASTCID,LINK(),LINKO(),NETFWD,NETFWDO,OEA,OFF,PLTP,Q,RESPCT,SCND,TAD,UNP,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VWHERE,VX(),addchg,avgccol,avgcflt,avginvs,avglbal,avlbal,balex,chg,chgwave,earnal,ernpct,intpd,laddchg,laddsrv,ladjanl,lavgcol,lavginv,lbalequ,lbase,lchg,lcrcd,lfloat,lowavg,lrsvpct,lsvcamt,netecr,netfwd,resvpct,svfeeact,vc1,vc2,vc3,vc4,verror,vh(),vovc1,vovc2,vovc3,x

	if 'VT(3) quit
	if VLC+11>IOSL do VHDG0 quit:VFMQ

	set VL="     "_"----------------------------------------------------------------------"
	do VOM
	set VL="     "_"Total Cost of Services:"
	set VL=VL_$J("",65-VL.length())_$J($FN(COST,"P"_",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="================================================================================"
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="   "_"Net Analysis Position"
	set VL=VL_$J("",65-VL.length())_$J($FN(NETFWDO,",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="   "_"Adjusted Net Analysis Position"
	set VL=VL_$J("",65-VL.length())_$J($FN(NETFWD,",",2),14)
	if 'VL.translate(" ").isNull() do VOM
	set VL="   "_$E(ladjanl,1,25)
	set VL=VL_$J("",65-VL.length())_$S(+chgwave=0:$J("",14),1:$J($FN(chgwave,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	set VL="   "_$E(laddchg,1,25)
	set VL=VL_$J("",65-VL.length())_$S(+addchg=0:$J("",14),1:$J($FN(addchg,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	do VP16 quit:VFMQ!verror.get()  set V=$E(lbalequ,1,50) set VL="   "_V
	do VP17 quit:VFMQ!verror.get()  set V=$S(+BALREQ=0:$J("",14),1:$J($FN(BALREQ,",",2),14))
	set VL=VL_$J("",65-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP18 quit:VFMQ!verror.get()  set V=$E(laddsrv,1,41) set VL="   "_V
	set VL=VL_$J("",65-VL.length())_$S(+ADDSRV=0:$J("",14),1:$J($FN(ADDSRV,",",2),14))
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="   "_$E(lsvcamt,1,25)
	set VL=VL_$J("",29-VL.length())_$E(lcrcd,1,4)
	set VL=VL_$J("",34-VL.length())_$S(+chg=0:$J("",8),1:$J($FN(chg,",",2),8))
	set VL=VL_$J("",43-VL.length())_$E(lchg,1,20)
	set VL=VL_$J("",63-VL.length())_$J(svfeeact,12)
	if 'VL.translate(" ").isNull() do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ADDSRV,BALEQU,BALREQ,BASECHRG,BOO,CADD(),CC,CID,CONAM,COST,COUNT4,DESC,HEAD,I,IADD(),LAD,LASTCID,LINK(),LINKO(),NETFWD,NETFWDO,OEA,OFF,PLTP,Q,RESPCT,RID,RN,SCND,TAD,UNP,VL,VWHERE,addchg,avgccol,avgcflt,avginvs,avglbal,avlbal,balex,chg,chgwave,earnal,ernpct,intpd,laddchg,laddsrv,ladjanl,lavgcol,lavginv,lbalequ,lbase,lchg,lcrcd,lfloat,lowavg,lrsvpct,lsvcamt,netecr,netfwd,resvpct,svfeeact,vc1,vc2,vc3,vc4,vovc1,vovc2,vovc3,vrundate,vsysdate,x
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: IADD(1)

	type public String vc2
	/* ----- Revision History ---------------------------------------------
	06/15/2006 - RussellDS - CR21785
	             Moved calculations for avgcflt, avginvs, avglbal, and
		     resvpct into this section instead of other pre-
		     processors, otherwise the values weren't available
		     when needed.

	05/30/2006 - RussellDS - CR21549
		     Moved calculations for avgccol and balex into this
		     section instead of other post-processors, otherwise
		     the values weren't available when needed.
	-----------------------------------------------------------------------
	*/

        // Load everything for this account
 
        type public Boolean ANLFPR, ER, MINACR
        type public Date SCLD, SCND
        type public Number addchg, ADDSRV, ANLIRN, ANLRCB, avgcflt, avgccol
        type public Number avginvs, avglbal, avlbal, balex, BALREQ, BASECHRG
        type public Number BOO, CC, chg, CHGOPT, chgwave, CID, COST, earnal
        type public Number ernpct, DIC, DIY, intpd, LASTCID, LINK(), LINKO()
        type public Number netecr, netfwd, NETFWD, NETFWDO, PLANEXC
        type public Number PLTP, RESPCT, resvpct, RSRV, TBALREQ
        type public String ANLACM, ANLIDX, CADD(), CRCD, FEEPLN, LAD, ladjanl
        type public String laddchg, lchg, lcrcd, lsvcamt, OFF
        type public String PLANCUR, svfeeact, TAD
 
        type Number CNT, CNTO, I, TYPE
 
        set CID = vc2
 
        type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
 
        // Print detail for lead and linked accounts
        if 'LASTCID.isNull() do {
 
		type Number LNKDCID, PAGENO
                type String PGM, RID, VRWOPT()
 
                // determine if any linked accounts, if not, no need to do this
                type ResultSet rs = Db.select("CID", "DEP", "ANLCID=:LASTCID")
 
                if rs.isEmpty() set LASTCID = CID quit
 
                set RID = "SCA169A"
                do ^URID quit:PGM.isNull()
                 
                set VRWOPT("NOOPEN") = 1
                set VRWOPT("NOCLOSE") = 1
 
                // Linked accounts exist - print lead account detail first
		set LNKDCID = LASTCID
		set PAGENO = 1
                do V0^@PGM
 
                // Then pring linked accounts' detail
                while rs.next() do {
 
			set LNKDCID = rs.getCol("CID")
                        set PAGENO = PAGENO + 1
                        do V0^@PGM
                }
	} 

        set LASTCID = CID
 
        for I = 1:1:15 set (LINK(I), LINKO(I)) = 0
        set (laddchg, ladjanl, lchg, lcrcd, lsvcamt, svfeeact) = ""
        set (addchg, chg, chgwave, earnal) =0
        set (ADDSRV, TBALREQ) = 0
        set (avgcflt, avgccol, avginvs, avglbal, avlbal, balex, netecr, resvpct) = 0
        set ANLIRN = dep.anlirn
        set CHGOPT = dep.anlchg
        set ANLACM = dep.anlacm
        set ANLRCB = dep.anlrcb
        set ANLIDX = dep.anlidx
        set FEEPLN = dep.feepln
        set ANLFPR = dep.anlfpr
        set DIY = $$DY^UIC(ANLACM, SCND)
        set MINACR = (dep.anlmba > .01)
        set BOO = dep.boo
        set CC = dep.cc
        set OFF = dep.off

	set balex = $$BALEXLD^SRVCDI(CID, 0, SCND) // Combined balance to exclude

	if (ANLRCB = 3) set avgccol = $$CBCOLLEC^SRVCDI(CID,0,SCND)	// collected balance
	else  if (ANLRCB = 5) ! (ANLRCB = 6) set avgccol = $$CBAVGCOL^SRVCDI(CID, 0, SCND)	// avg w/ float
	else  if (ANLRCB = 10) ! (ANLRCB = 11) set avgccol = $$CAVGCOLC^SRVCDI(CID, 0, SCND)	// avg w/chk
 
        /* Build array for customer mailing address - Include at least two lines of
           title, three lines of address plus CITY, STATE and ZIP.  If fewer than
           two titles, allow address to expand.
        */
        set ER = 0
        for I = 1:1:6 set CADD(I) = ""
        do ^UTLADDR(1, "CADD", 6, 2, "ACN", CID)
        if ER set CADD(3) = $$^MSG(1265)        // Invalid address
 
        // Find out the values in the lead account's service fee plan
        // Get last SRVH plan record
        type DbSet ds = Db.selectDbSet("SRVH", "FEEPLN=:FEEPLN AND SCND<=:SCND", "SCND DESC")
        type RecordSRVH srvh
        if ds.next() set srvh = ds.getRecord("SRVH")
        else  set srvh = Class.new("RecordSRVH", "FEEPLN=:FEEPLN,SCND=:SCND")
        
        type ResultSet rs2 = Db.select("MAX(SCND)", "SRV", "CID=:CID AND PLTP=:PLTP AND SCND<:SCND")
        if rs2.next() set SCLD = rs2.getCol(1)
        else  set SCLD = ""
 
        type RecordSRV0 srv0 = Db.getRecord("SRV0", "CID=:CID,PLTP=:PLTP,SCND=:SCND", 1)
 
        type RecordSRV srv = Db.getRecord("SRV", "CID=:CID,PLTP=:PLTP,SCND=:SCND")
 
        set NETFWD = srv.netfwd
        set NETFWDO = srv.netfwdo
        set chgwave = NETFWDO - NETFWD
        if (dep.anloffdy = 0), (srv.netfwdo <> srv.netfwd) set chgwave = 0
        else  do {
 
                if (srv.netfwdo < srv.netfwd) do {
                        set ladjanl = "Charges Waived"
                        set chgwave = -chgwave
                }
                else  if (srv.netfwdo > srv.netfwd) do {
                        set laddchg = "Additional Charges"
                        set addchg = chgwave
                        set chgwave = 0
                }
        }
 
        set CRCD = dep.crcd
        set PLANCUR = srvh.plancur
        if PLANCUR.isNull() set PLANCUR = CRCD
 
        if srvh.curflag, (srvh.base <> 0) do {
 
                set PLANEXC = srvh.planexc
                set srvh.base = $$CONV^CRCDUTL(srvh.base, CRCD, PLANCUR, PLANEXC, SCND)
        }
 
        // Compute Total Cost and Base Charge totals
        // Get cost info from linked accounts
        type RecordTMPRPT2 tmprpt2 = Db.getRecord("TMPRPT2", "PID=%ProcessID,KEY1=:CID,KEY2=0")
        set COST = tmprpt2.data.piece("|", 1)
        set BASECHRG = tmprpt2.data.piece("|", 2)
 
        set COST = COST + srvh.base
        set BASECHRG = BASECHRG + srvh.base
 
        // Get reserve requirement % from PRODCTL
        set TYPE = dep.type
        type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE=:TYPE")
 
        set RESPCT = prodctl.resreq
	set RSRV = RESPCT
	if ( ANLRCB '= 6), (ANLRCB '= 11) set RESPCT = 0
         
        // Check to see if there are linked accounts and build service fee array
        set (CNT, CNTO) = 1
        type ResultSet rs = Db.select("CID", "DEP", "ANLCID=:CID")
 
        while rs.next() do {
 
                type Number ANLTYP, OCID
 
                set OCID = rs.getCol("CID")
 
                quit:'Db.isDefined("SRV", "CID=:OCID,PLTP=:PLTP,SCND=:SCND")
 
                type RecordDEP odep = Db.getRecord("DEP", "CID=:OCID")
 
                quit:(odep.stat = 4) & (odep.dtc '> SCND)
                set ANLTYP = odep.anltyp
 
                /* This array is used to seperate the "sub" from the "other" linked
                   accounts and is used to print the accounts at the top of the report.
                   The CNT and CNTO limit the array to 15 for "sub" and 5 for "other"
                   respectively.
                */
 
                if (ANLTYP = 2), (CNT '> 15) do {
                        set LINK(CNT) = OCID
                        set CNT = CNT + 1
                }
                else  do { quit
                        if (CNTO '> 5) set LINKO(CNTO) = OCID
                        set CNTO = CNTO + 1
                }
        }
 
        // Compute days in cycle
        set TAD = SCND.toString()
        set LAD = SCLD
 
        if 'SCLD.isNull() do {
 
                set DIC = SCND - SCLD
                set LAD = (SCLD + 1).toString()
        }
        else  do {
 
                type Date NJD
                type Number AF
 
                set LAD = $$^MSG(6382)  // 1st Analysis
                set NJD = SCND.nextFreqDate(dep.scfre, .AF, 2)
 
                if (dep.odt > NJD) set DIC = SCND - dep.odt + 1
                else  set DIC = SCND - NJD
        }

	// Select the avglbal  based on the rate calculation base
        if (ANLRCB = 1) set avglbal = $$CBLEDGER^SRVCDI(CID, 0, SCND)   // Ledger Balance
        else  if (ANLRCB = 7) set avglbal = $$CBLOWBAL^SRVCDI(CID, 0, SCND)	// Low Balance
        else  if (ANLRCB = 5) ! (ANLRCB = 6) ! (ANLRCB = 10) ! (ANLRCB = 11) ! (ANLRCB = 4) set avglbal = $$CBAVGBAL^SRVCDI(CID, 0, SCND)

        /* Calculate Avg. Collected Balance first, to determine float for
           linked accounts.  (Average collected-Average ledger=average float).
           Save Avg. collected for next field
        */
        if ({List}"5,6,10,11").contains(ANLRCB) do {

                set avgcflt = avglbal - avgccol
                if avgcflt < 0 set avgcflt = 0
        }

	// Calculate resvpct
        if (ANLRCB '= 6), (ANLRCB '= 11) set resvpct = 0
        else  set resvpct = $$CBRSVPCT^SRVCDI(CID, 0, SCND) // reserve for all accounts

	// Calculate avginvs
        if (ANLRCB = 9) set avginvs = $$CBDAYIN^SRVCDI(CID, 0, SCND)
        else  set avginvs = 0
        if (ANLRCB = 6) ! (ANLRCB = 11) set avginvs = avgccol - resvpct

        // Balance available for Earnings allowance.
        if (ANLRCB = 3) set avlbal = avgccol - balex
        else  if (ANLRCB = 9) set avlbal = avginvs - balex
        else  set avlbal = avglbal - avgcflt - resvpct - balex
        if (dep.anlbalrm '= 0) set avlbal = $$ROUND^BCHFEEUT(avlbal, dep.anlbalrf, dep.anlbalrm)
 
        // Earnings allowance (stored in srv or the lead)
        set earnal = srv.ernall
        set ernpct = 0
        if (earnal < 0) ! earnal.isNull() set earnal = 0
 
        // If there is an index, calculate earnings allowance percentage
        if 'ANLIDX.isNull(), (avlbal > 0) do {
 
                type Date TJD
                type String DATA, DTL()
 
                // If first analysis, use opening date - 1 for sch last dt.
                if SCLD.isNull() do {
 
                        type Date NJD, ODT
 
                        set ODT = dep.odt - 1
                        set NJD = SCND.nextFreqDate(dep.scfre, , 1)
                        if (ODT '> NJD) set SCLD = ODT
                        else  set SCLD = NJD
                }
 
                set TJD = SCND
                set DATA = "|"_srv0.avgbal_"|"_srv0.avgcol_"|"_srv0.avgres_"|"_srv0.lwbal1
                set DATA = DATA_"|"_srv0.lwbal2_"|"_srv0.ledger_"|"_srv0.avgcolc
                set DATA = DATA_"|"_srv0.avgresc_"|"_srv0.balcol_"|"_srv0.dlyinv
 
                do ERNALL^BCHFEEUT(2, DATA)
                if DTL(1).exists() set ernpct = DTL(1).piece("|", 5)
                // If there isn't an index,set it equal to Earnings rate from DEP
        }
        else  set ernpct = dep.anlirn
        
        if (COST <= earnal) do {
                set BALREQ = 0
 
                if (earnal = 0), (COST = 0) set ADDSRV = avlbal
                if (ernpct <> 0), (RSRV <> 0), (COST <> 0) do {
 
                        /* Set Balance available for additional services when flat
                           monthly rate
                           (anlfpr=1):
                           (Balance available for earnings allowance)-((total cost
                           of services)/earnings rate)
                        */
                        if ANLFPR set ADDSRV = avlbal - (COST / (ernpct / 100))
 
                        /* If ANLFPR is no -
                           (Balance available for earnings allowance)-((total cost of
                           services)/earnings)*(days in year/days in period)
                        */
                        else  set ADDSRV = avlbal - ((COST / (ernpct / 100)) * (DIY / DIC))
                }
        }
        else  set BALREQ = TBALREQ - avlbal
        if (BALREQ < 0) set BALREQ = 0
        
         if (CHGOPT = 1) do {
 
                set chg = srv.netfwd
                if (chg >= 0) set chg = 0
                else  do {
                        set chg = -chg
                        set lsvcamt = "Service Charge Amount of "
                        set lchg="Charged to Account"
                        set lcrcd = dep.crcd
                        set svfeeact = dep.svcfeecid
                }
        }
 
        if dep.dedintpd set intpd = $$CBINTPD^SRVCDI(CID, 0, SCND)
        else  set intpd = 0
	quit

VP2	// Column pre-processor - Variable: lowavg

	type public Number ANLRCB
	type public String lowavg

	// Change the description based on the Analysis rate calculation base
	if (ANLRCB = 3) ! (ANLRCB = 8) ! (ANLRCB = 9) set lowavg = ""
	else  do {
		set lowavg = "Average Ledger Balance"
		if (ANLRCB = 7) set lowavg = "Lowest Ledger Balance"
		else  if (ANLRCB = 1) set lowavg = "Ledger Balance" 
	}
	quit

VP3	// Column pre-processor - Variable: lfloat

	type public Number ANLRCB
	type public String lfloat

	if (ANLRCB = 5) ! (ANLRCB = 6) ! (ANLRCB = 10) ! (ANLRCB = 11) set lfloat = "Less: Float"
	else  set lfloat = ""
	quit

VP4	// Column pre-processor - Variable: x

	type public String x

	set x = ""
	quit

VP5	// Column post-processor - Variable: x

	type public Number ANLRCB
	type public String V, VL

	if '((ANLRCB = 5) ! (ANLRCB = 6) ! (ANLRCB = 10) ! (ANLRCB = 11)) set (V, VL) = ""
	quit

VP6	// Column pre-processor - Variable: lavgcol

	// Change the description based on the Analysis rate calculation base

	type public Number ANLRCB
	type public String lavgcol

	if (ANLRCB = 5) ! (ANLRCB = 6) ! (ANLRCB = 10) ! (ANLRCB = 11) set lavgcol = "Average Collected Balance"
	else  if (ANLRCB = 3) set lavgcol = "Collected Balance"
	else  set lavgcol = ""
	quit

VP7	// Column pre-processor - Variable: lrsvpct

	// Change the description based on the Analysis rate calculation base

	type public Number ANLRCB
	type public String lrsvpct

	if (ANLRCB '= 6),(ANLRCB '= 11) set lrsvpct = ""
	else  set lrsvpct = "Less Reserve Requirement of"
	quit

VP8	// Column pre-processor - Variable: lavginv

	// Change the description based on the Analysis rate calculation base

	type public Number ANLRCB
	type public String lavginv

	if (ANLRCB = 6) ! (ANLRCB = 11) set lavginv = "Average Investable Balance"
	else  if (ANLRCB = 9) set lavginv = "Daily Investable Balance"
	else  set lavginv = ""
	quit

VP9	// Column pre-processor - Variable: netfwd

	type public String vc2
	// Get the prior period's Earnings credit.  If there isn't a
	// prior period, set it to zero.

	type public Date SCND
	type public Number netfwd, PLTP

	type Number CID

	set CID = vc2

	type ResultSet rs = Db.select("NETFWDP", "SRV", "CID=:CID AND PLTP=:PLTP AND SCND < :SCND", "SCND DESC")

	if rs.next() set netfwd = rs.getCol("NETFWDP")
	else  set netfwd = 0
	quit

VP10	// Column pre-processor - Variable: netecr

	type public Number earnal, intpd, netecr, netfwd

	set netecr = earnal + netfwd - intpd
	quit

VP11	// Column pre-processor - Variable: lbase

	type public Number BASECHRG
	type public String lbase

	if (BASECHRG > 0) set lbase = "Base Charges"
	else  set lbase = " "
	quit

VP12	// Column pre-processor - Variable: BALEQU

	/* Set balance requirement
	   ((total cost of services)/earnings rate)*365 days
	   in statment period/(1-reserve percentage) - (if ANLFPR=1)
	*/

	type public Number ANLFPR, BALEQU, BASECHRG, DIC, DIY
	type public Number ernpct, RSRV, TBALREQ

	set BALEQU = 0

	quit:(+ernpct = 0) ! (+RSRV = 0) ! (+BASECHRG = 0)

	if ANLFPR set BALEQU = (BASECHRG / (ernpct / 100)) * (1 / (1 - (RSRV / 100)))

	/* If ANLFPR is no - 
	   ((Total Cost of Services/Earnings rate)*(days in year/
	   days in service period)/1-(days in service fee period/100)
	*/

	else  set BALEQU = ((BASECHRG / (ernpct / 100)) * ((DIY / DIC) / (1 - (RSRV / 100))))

	set TBALREQ = TBALREQ + BALEQU
	quit

VP13	// Column post-processor - Variable: BALEQU

	type public Number BALEQU

	set BALEQU = 0
	quit

VP14	// Column pre-processor - Variable: DESC

	type public String vc3,vc4
	type public Boolean ANLFPR
	type public Date SCND
	type public Number BALREQ, COUNT4, DIC, DIY, ernpct, OEA, RSRV
	type public Number TBALREQ, UNP
	type public String DESC, FEEPLN

	type Number FEECAT, SRVADJ, SRVCNTA, SRVCSTA
	type String DATA, FEETYP

	// KEY2 =  0 doesn't carry detail
	if (vc3 = 0) set (DESC, COUNT4, UNP, OEA, BALREQ) = "" quit

	set DATA = vc4

	set FEECAT = DATA.piece("|", 1)
	set FEETYP = DATA.piece("|", 2)
	set SRVCNTA =  DATA.piece("|", 3)
	set SRVCSTA =  DATA.piece("|", 4)
	set SRVADJ =  DATA.piece("|", 5)


	type ResultSet rs = Db.select("MAX(FEEDT)", "FEEPLN", "PLAN=:FEEPLN AND FEEDT<=:SCND")

	if rs.next() set DESC = $$DESC^SRVPLN(FEECAT, FEETYP, rs.getCol(1))
	else  set DESC = ""

	set COUNT4 = SRVCNTA + SRVADJ
	if (COUNT4 = 0) set COUNT4 = ""

	if (SRVCNTA = 0) set UNP = SRVADJ
	set UNP = (SRVCSTA / SRVCNTA) + SRVADJ

	set OEA = SRVCSTA

	set BALREQ=0

	quit:(+SRVCSTA = 0)
	quit:(+ernpct = 0) ! (+RSRV = 0) ! (+OEA = 0)

	/* Set balance requirement
	   ((total cost of services)/earnings rate)*365 days
	   in statment period/(1-reserve percentage) - (if ANLFPR=1)
	*/

	if ANLFPR set BALREQ = (OEA / (ernpct / 100)) * (1 / (1 - (RSRV / 100)))

	/* If ANLFPR is no -
	   ((Total Cost of Services/Earnings rate)*(days in year 
	   / days in period/100)
	*/

	else  set BALREQ = ((OEA / (ernpct / 100)) * ((DIY / DIC) / (1 - (RSRV / 100))))
	
	set TBALREQ = TBALREQ + BALREQ
	quit

VP15	// Column post-processor - Variable: BALREQ

	type public String vc3
	type public Number BALREQ
	type public String V, VL

	set BALREQ = 0

	if (vc3 = 0) set (V, VL) = ""
	quit

VP16	// Column pre-processor - Variable: lbalequ

	type public Number COST, earnal
	type public String lbalequ

	if (COST > earnal) set lbalequ = "Additional Balance Required to Avoid Service Fees"
	else  set lbalequ = 0
	quit

VP17	// Column pre-processor - Variable: BALREQ

	type public Number avlbal, BALREQ, COST, earnal, TBALREQ

	if (earnal '< COST) set BALREQ = 0
	else  set BALREQ = TBALREQ - avlbal
	if (BALREQ < 0) set BALREQ = 0
	quit

VP18	// Column pre-processor - Variable: laddsrv

	type public Number COST, earnal
	type public String laddsrv

	if (earnal '< COST) set laddsrv = "Balance Available for Additional Services"
	else  set laddsrv = ""
	quit
