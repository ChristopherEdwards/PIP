DEBAUT	 /*
    ORIG: GRAY - 01/11/2000
    DESC: Debit Authorizations
    
    ---- Comments --------------------------------------------------------
    
    ---- Revision History ------------------------------------------------
 
	 12/06/01 - SIGDAE - 48608
		    Modifed sections CHECKS(2) to correct calls to 
		    EXC^CRCDUTL, which were passing and EFD=1, instead
		    of Rate Type equal to 1.

	 10/10/01 - SIGDAE - 47855
		    Modifed sections CHECKS(2) to remove line that called
		    RATE^CRCDUTL.  This line should have been removed
		    under ARQ 38039.

	 06/26/00 - JERUCHIMC - 37965:001
                    Modified CHECKS section to use getrecord instead
                    of creating a new record.
		    Created sections CHECKS2,AUTST2, and AUT2.	

	 06/22/00 - JERUCHIMC _ 37965
	            Modified section AUT to check authorization block
                    before choosing an authorization sequence.

	 04/26/00 - JERUCHIMC - 38039
                    Modified CHECKS section to call EXC^CRCDUTL instead of
                    RATE^CRCDUTL for true currency exchange.  Fixes bug
                    when base currency was EUR and payment currency was IN.
         	
	12/13/99 - GRAY - 32507
		   Removed code no longer needed due to the Elimination
		   of Teller/Branch Character Interface and placed remaining
		   code into PSL'd procedure definition.
 */
	
	quit
	
	
Public AUT(ACNTYPE,ACN,CID,INST,ogl,EFD,AMOUNT,CUSTIDOPT,CUSTID,CRCD,XER,XRM,SBED,XSEQ,DCID)	//
	
	/* Verify that Debit Authorization is set up
	
	   INPUT:  ACNTYPE - Identifies record either as a G/L or customer
		   ACN     - Either an customer number or G/L account
		   CID     - Either a customer account or a G/L account
		   INST    - Institution code
		   ogl     - Flag that determines type of acct CID is
		   EFD     - Effective date - unrequired; will default TJD
		   AMOUNT  - unrequired
		   CUSTIDOPT - flag that indicates when to check CUSTID
		   CUSTID  - unrequired - Customer ID
		   CRCD    - unrequired - currency of transaction
	 	   SBED    - unrequired - sets Block End Date to TJD
	 	   XSEQ    - unrequired - sends back the sequence number 
		   DCID    - unrequired - the account to debit

	   OUTPUT: 0       - Not authorized
	 	   1       - Authorized
	*/
	
	if $G(XER)'="" set ER=XER
	if $G(XRM)'="" set RM=XRM
	
	new DESQ,RESP,CONVERTED
	set DSEQ=""
	set RESP=0
	set CONVERTED=0
	
	for  do { quit:($G(ER))!(DSEQ="")!(RESP=1)
		quit:ACN=""
		set DSEQ=Db.nextKey("DEBAUT","ACNTYPE,ACN,INST,CID,DSEQ") quit:DSEQ=""
		
		new debaut
		set debaut=Db.getOneRow("AUTEXP,GL,CUSTID,STARTDT,LIMIT","DEBAUT","ACNTYPE,ACN,INST,CID,DSEQ")
		if debaut="" quit
		
		set RESP=$$CHECKS
		
		// Reset ER so we stay in the loop and check all sequences.
		if $G(ER)=1 set ER=0
		
		set AUTST=$$AUTST(ACNTYPE,ACN,INST,CID,DSEQ)
		
		// Debit Authorization Blocked
        	if $G(AUTST)=2 S RM=$$^MSG(3908,INST,CID),RESP=0		

		if RESP=1 set XSEQ=DSEQ
		quit:RESP=1
		quit:ER
		}

	if RESP=0 set ER=1
	if RESP=0,$G(ER)'=1 set ER=1,RM=$$^MSG(1925)
	
	// "No debit authorization"
	if $G(ER)=1,$G(RM)="" set RM=$$^MSG(1925)
	
	set XER=$G(ER)
	set XRM=$G(RM)
	
	quit RESP
	

Public AUT2(ACNTYPE,ACN,UTID,EFD,AMOUNT,CRCD,DCID)

	/*
          INPUT:  ACNTYPE - Identifies record either as a G/L or customer
                  ACN     - Either an customer number or G/L account
                  UTID     - Utility ID number
                  EFD     - Effective date - unrequired; will default TJD
                  AMOUNT  - unrequired
        	  DCID    - unrequired - account to debit
       
	-----------------------------------------------------------------------
           OUTPUT: 0       - Not authorized
                   1       - Authorized
       
	-----------------------------------------------------------------------
	*/

	new DESQ,RESP,CONVERTED
        set DSEQ=""
        set RESP=0
        set CONVERTED=0
	
	 for  do { quit:($G(ER))!(DSEQ="")!(RESP=1)
                quit:ACN=""

	        set DSEQ=Db.nextKey("DEBAUT2","ACNTYPE,ACN,UTID,DSEQ") quit:DSEQ=""	
                new debaut2
                set debaut2=Db.getOneRow("AUTEXP,CUSTID,STARTDT,LIMIT","DEBAUT2","ACNTYPE,ACN,UTID,DSEQ")
                if debaut2="" quit
 
                set RESP=$$CHECKS2
 
                // Reset ER so we stay in the loop and check all sequences.
                if $G(ER)=1 set ER=0
 
                set AUTST=$$AUTST2(ACNTYPE,ACN,UTID,DSEQ)
 
                // Debit Authorization Blocked
                if $G(AUTST)=2 S RM=$$^MSG(3908,INST,CID),RESP=0
 
                if RESP=1 set XSEQ=DSEQ
                quit:RESP=1
                quit:ER
		}

        if RESP=0 set ER=1
        if RESP=0,$G(ER)'=1 set ER=1,RM=$$^MSG(1925)
 
        // "No debit authorization"
        if $G(ER)=1,$G(RM)="" set RM=$$^MSG(1925)
 
        set XER=$G(ER)
        set XRM=$G(RM)
 
        quit RESP
	
Public CHECKS()	//
	/* Actual debit authorization checks
	
	  NODATE variable is set to 1 if EFD is not defined.  This handles
	  the case of AUT^DEBAUT being called from EFTPAY screen, recipient
	  account, where the user has not yet entered effective date,
	  and this check would prevent the user from continuing, if the
	  start date is in the future. - Claude Jeruchim
	*/
	
	set NODATE=0
	if $G(EFD)="" set EFD=TJD,NODATE=1
	if $G(ogl)="" set ogl=0
	
	// Verify if the recipient account is a G/L for TTYPE 1 or 3
	// or a Customer account for TTYPE 0 or 2

	if $G(rgl)="" do {
		// The fEFTPAY array is built and value set by ^EFTGIRO2.
		new X
		set X=fEFTPAY
		set rgl=$S($P($G(X),"|",27)=1!($P($G(X),"|",27)=3):1,1:0)
		}

	new debaut
	type RecordDEBAUT debaut=Db.getRecord("DEBAUT","ACNTYPE,ACN,INST,CID,DSEQ")

	if $G(UTID)="" if +debaut.gl'=+$G(rgl) set ER=1,RM=$$^MSG(1925) quit 0
	
	// Debit authorization has not started yet.  Only
	// issue error if NODATE not set (EFD defined).
	new stdate 
	set stdate=debaut.startdt
	if stdate>EFD&('(NODATE)) set ER=1,RJC=51,RM=$$^MSG(2390) quit 0

	; Verify account to debit
        if $G(DCID)'="",DCID'=debaut.dcid,debaut.dcid'="" set ER=1,RM=$$^MSG("1925") quit 0
 
	// Debit authorization has expired
	new autdte 
	set autdte=debaut.autexp
	if autdte'="",autdte<EFD set ER=1,RJC=51,RM=$$^MSG("247") quit 0 
	
	// Convert amount into system base.
	if $G(CRCD)'="",$G(AMOUNT)'="",CONVERTED=0 do {
		new EXCAMT,MAXRATE,MINRATE,MULTIPLY,RATE,TRESREF,VARIANCE
		do EXC^CRCDUTL(%SystemCurrency,CRCD,AMOUNT,0,1,"00",,,1)
		set AMOUNT=EXCAMT
		set CONVERTED=1			// Convert to base only once
		}

	// Check debit authorization limit
	new limit 
	set limit=debaut.limit
	if $G(AMOUNT)'="",$G(limit)'="",AMOUNT>limit set ER=1,RJC="65",RM=$$^MSG("2745") quit 0
	
	// Check customer ID.
	if $G(CUSTIDOPT)'=1 quit 1
	if $G(CUSTID)'=debaut.custid set ER=1,RJC=51,RM=$$^MSG("3140") quit 0
	quit 1

Public CHECKS2() //
        /* Actual debit authorization checks
        */
 
        set NODATE=0
        if $G(EFD)="" set EFD=TJD,NODATE=1
        if $G(ogl)="" set ogl=0
 
        // Verify if the recipient account is a G/L for TTYPE 1 or 3
        // or a Customer account for TTYPE 0 or 2
 
	if $G(rgl)="" do {
	        // The fEFTPAY array is built and value set by ^EFTGIRO2.
        	new X
        	set X=fEFTPAY
		S rgl=$S($P($G(X),"|",27)=1!($P($G(X),"|",27)=3):1,1:0)
 		}

        new debaut2
        type RecordDEBAUT2 debaut2=Db.getRecord("DEBAUT2","ACNTYPE,ACN,UTID,DSEQ")
 
        // Debit authorization has not started yet.  Only
        // issue error if NODATE not set (EFD defined).
        new stdate
        set stdate=debaut2.startdt
        if stdate>EFD&('(NODATE)) set ER=1,RJC=51,RM=$$^MSG(2390) quit 0
 
        ; Verify account to debit
        if $G(DCID)'="",DCID'=debaut2.dcid,debaut2.dcid'="" set ER=1,RM=$$^MSG("1925") quit 0
 
        // Debit authorization has expired
        new autdte
        set autdte=debaut2.autexp
        if autdte'="",autdte<EFD set ER=1,RJC=51,RM=$$^MSG("247") quit 0	
 
        // Convert amount into system base.
        if $G(CRCD)'="",$G(AMOUNT)'="",CONVERTED=0 do {
		new EXCAMT,MAXRATE,MINRATE,MULTIPLY,RATE,TRESREF,VARIANCE
		do EXC^CRCDUTL(%SystemCurrency,CRCD,AMOUNT,0,1,"00",,,1)
                set AMOUNT=EXCAMT
                set CONVERTED=1                 // Convert to base only once
                }
 
        // Check debit authorization limit
        new limit
        set limit=debaut2.limit
        if $G(AMOUNT)'="",$G(limit)'="",AMOUNT>limit set ER=1,RJC="65",RM=$$^MSG("2745") quit 0

	 // Check customer ID.
        if $G(CUSTIDOPT)'=1 quit 1
        if $G(CUSTID)'=debaut2.custid set ER=1,RJC=51,RM=$$^MSG("3140") quit 0
        quit 1
 
Public AUTST(ACNTYPE,ACN,INST,CID,DSEQ)	//
	/*
	  Authorization Block dates processing and status setting
	
	  Authorization Status: 1)=Active
				2)=Inactive
	*/
	
	new debaut
	type RecordDEBAUT debaut=Db.getRecord("DEBAUT","ACNTYPE,ACN,INST,CID,DSEQ")
	
	new BLSTDT,BLENDDT
	
	set BLSTDT=debaut.blstdt if BLSTDT="" quit 1
	
	set BLENDDT=debaut.blenddt
	if BLENDDT="" set BLENDDT=%SystemDate
	
	if (BLSTDT'>%SystemDate)&(BLENDDT'<%SystemDate) quit 2
	quit 1

Public AUTST2(ACNTYPE,ACN,UTID,DSEQ) //
        /*
          Authorization Block dates processing and status setting
 
          Authorization Status: 1)=Active
                                2)=Inactive
        */
 
        new debaut2
        type RecordDEBAUT2 debaut2=Db.getRecord("DEBAUT2","ACNTYPE,ACN,UTID,DSEQ")
 
        new BLSTDT,BLENDDT
 
        set BLSTDT=debaut2.blstdt if BLSTDT="" quit 1
 
        set BLENDDT=debaut2.blenddt
        if BLENDDT="" set BLENDDT=%SystemDate
 
        if (BLSTDT'>%SystemDate)&(BLENDDT'<%SystemDate) quit 2
        quit 1
 #OPTION ResultClass ON
Public String vSIG()	quit "59886^43506^Sanchez SCM Administrator^9392"	// Signature - LTD^TIME^USER^SIZE
