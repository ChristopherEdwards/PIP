EURPRMT	//

	/*
	ORIG: KumarSS - 11/30/2005
	DESC: Prompt screens for conversion, reverse of conversion and delete 
	      request for conversion.

	RETURNS:
		. CID        	Customer Number         /TYP=N
		. EUREFD        Euro effective date	/TYP=D

	---- Comments --------------------------------------------------------
	
	---- Revision History ------------------------------------------------

	11/30/05 - KumarSS - 16668
		   Converted to PSL.
		   Removed revision history prior to 2004
		   
	----------------------------------------------------------------------

	*/

	do INIT
	quit


	//---------------------------------------------------------------------
INIT	// Initialize variable section
	//---------------------------------------------------------------------

	type public Boolean ER
	type public String EMUCRCD
	type Boolean BADSTAT,OKACC,REJSTAT
	type Number CONVALL,REVACC,REVERSE,REVSEL,REVSINGLE,SDELREQ,SDELREV,SINGLE,STATDEL
	type String EURSEL

	set (BADSTAT,OKACC,REJSTAT)=0
	set (REVSINGLE,REVERSE,REVSEL,REVACC,SINGLE,SDELREV,CONVALL,SDELREQ,STATDEL)=""

	set EURSEL="CID,EURSTAT,CRCD,EUREFD,EURBATCH"
	set EMUCRCD=CUVAR.EMUCRCD

	do SETCRCD(EMUCRCD) quit:ER

	quit


        //---------------------------------------------------------------------
SETCRCD(String EMUCRCD)			// Euro Currency
        //----------------------------------------------------------------------

	// Function set INCRCD table with all EMU CRCD

	type Number INCRCD()

	type ResultSet rscrcd=Db.select("CRCD","CRCD","EMU=1")

	while rscrcd.next() do {

		if rscrcd.getCol("CRCD")'=EMUCRCD set INCRCD(rscrcd.getCol("CRCD"))=1
		}

	quit

	//---------------------------------------------------------------------
EURBATCH(Date EFD)			// Effective Date
        //----------------------------------------------------------------------

	// Function set next batch number for EFD in DEP/LN table

	type public Number CID

	type Number BCHNUM

	if EFD.get()="" quit 0
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	if acn.getMode() do {

		if acn.cls="D" do {

			type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

			set BCHNUM=dep.eurbatch+1
			set dep.eurbatch=BCHNUM
			do dep.save()

			set acn.eurbatch=BCHNUM
			do acn.save()
			}
		else  if acn.cls="L" do {

			type RecordLN ln=Db.getRecord("LN","CID=:CID")

			set BCHNUM=ln.eurbatch+1
			set ln.eurbatch=BCHNUM
			do ln.save()

			set acn.eurbatch=BCHNUM
			do acn.save()
			}
		}

	quit BCHNUM


        //----------------------------------------------------------------------
CNVSTAT(Number CID)			// Account Number
        //----------------------------------------------------------------------

	// Return the euro conv status of the account

	set CID=CID.get()
	
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	quit acn.eurstat


	//-------------------------------------------------------------------
INCRCD(String CRCD)			// Currency Code
        //----------------------------------------------------------------------

	// Check if an account in IN currency

	type public String %CO,CO

	if CRCD.get()="" quit 0

	if 'CO.get()="" set CO=CO
	else  if '%CO.get().isNull() set CO=%CO
	else  set CO=CUVAR.CO

	type RecordCRCD crcd=Db.getRecord("CRCD","CO=:CO,CRCD=:CRCD")

	if crcd.emu.isNull() quit 0
	
	quit crcd.emu


	//---------------------------------------------------------------------
DISPDAT(Date DATE)			// Effective Date
        //----------------------------------------------------------------------

        // Post-processor for EFD

	type public Date EFD,X
	type public Number CONVERT,OKACC,REVERSE,STATDEL
	type public String %MSKD,INF2

	if X.get()="",STATDEL.get() do GOTO^DBSMACRO("@QRY")

	quit:X=""

	// Effective date must be later than or equal to ~p1
	if X<57709 do Runtime.setErrMSG("ACN",3564,57709.toString(%MSKD.get())) quit

	set EFD=X 

	if STATDEL.get() do GOTO^DBSMACRO("@BNUM")

	// ~p1 will be converted to EUR effective ~p2
	if CONVERT.get()'="" S INF2=$$^MSG(3555,"OKACC~X.toString(%MSKD.get())")
	// ~p1 accounts will be reversed from EUR effective ~p2
	if REVERSE.get()'="" S INF2=$$^MSG(3299,"OKACC~X.toString(%MSKD.get())")

	do CNVALLAC
	do REVALLAC
	do REFRESH

	quit


	//----------------------------------------------------------------------
REFRESH // Refresh data
	//----------------------------------------------------------------------

	type public String INF1,INF2,INF3,INF4

	write $$CUPXY^%TRMVT(0,17)
	write INF1.justify(18+INF1.length()),!,INF2.justify(18+INF2.length()),!,INF3.justify(18+INF3.length()),!,INF4.justify(18+INF4.length())

	quit


        //----------------------------------------------------------------------
PRMSCR(Boolean CIDFLG,			// Account Number Flag
       Boolean EFDFLG,			// Effective Date Flag
       Boolean QRYFLG,			// Query Flag
       Number BNUM)			// Batch Number
        //----------------------------------------------------------------------

	// Display prompt screen for CID,EFD,QRY,BNUM

	type public Boolean ER
	type public Date EFD,TJD

	type String %READ,%TAB(),INF1,INF2,INF3,INF4,VFMQ

	set %READ="@@%FN,,,"
	set (INF1,INF2,INF3,INF4)=""

	if EFD.get()="" set EFD=TJD+1
	if CIDFLG.get()=1 set %TAB("CID")=".CID1/XPP=do CIDPOS^EURPRMT",%READ=%READ_"CID/REQ,"
        if QRYFLG.get()=1 set %TAB("QRY")=".QRY1/TBL=[DBTBL4]",%READ=%READ_"QRY/REQ/XPP=do SELACC^EURPRMT(X),"
	if EFDFLG.get()=1 set %TAB("EFD")=".EFD1/MIN=<<TJD+1>>/XPR=do PREEFD^EURPRMT/XPP=do DISPDAT^EURPRMT(X)",%READ=%READ_"EFD/REQ,"

	do ^UTLREAD quit:ER

	do REFRESH quit:ER

	do END

	quit VFMQ


        //----------------------------------------------------------------------
PRSCRDEL()	// Display prompt screen for deleting requests for selected accounts
        //----------------------------------------------------------------------

	// Pompts for EFD,BATCH,QUERY

	type public Boolean ER

	type String %READ,%TAB(),VFMQ

	set %READ="@@%FN,,,"

	set %TAB("EFD")=".EFD1/MIN=><<TJD+1>>/XPR=do PREEFD^EURPRMT/XPP=do DISPDAT^EURPRMT(X)",%READ=%READ_"EFD/NOREQ"
	set %TAB("BNUM")=".BATCH2/XPP=do PPBTCH^EURPRMT/TBL=[ACN]EURBATCH,",%READ=%READ_",BNUM/REQ"
	set %TAB("QRY")=".QRY1/TBL=[DBTBL4]",%READ=%READ_",QRY/REQ"

	do ^UTLREAD quit:ER

	do END

	quit VFMQ


        //----------------------------------------------------------------------
PRSDELAC()	// Display prompt screen for deleting requests for single account.
        //----------------------------------------------------------------------

        // Pompts for CID

	type public Boolean ER

	type String %READ,%TAB(),VFMQ

	set %READ="@@%FN,,,"

	set %TAB("CID")=".CID1/XPP=S %EXT=1 do ^UACN,EFDPRE^EURPRMT",%READ=%READ_"CID/REQ,"
	set %TAB("EFD")=".EFD1/PROT/XPR=do EFDPRE^EURPRMT",%READ=%READ_"EFD"

	do ^UTLREAD quit:ER

	do END

	quit VFMQ


	//----------------------------------------------------------------------
CIDPOS	// CID post-processor for request screens
 	//----------------------------------------------------------------------

	type public Boolean ER
	type public Number %EXT,CID,REVSINGLE,SINGLE,X
	type public String %MSKD,CRCD,EMUCRCD

	type Date EFD
	type Number EURSTAT

	set %EXT=1 
	do ^UACN quit:ER

	if X.get()="" quit 0

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	set EURSTAT=acn.eurstat
	set EFD=acn.eurefd

	// Conversion to EUR requested for ~p1
	if (SINGLE.get()=1),(EURSTAT=1)  do Runtime.setErrMSG("ACN",3549,EFD.toString(%MSKD.get())) quit

	if REVSINGLE.get() do {

		// Conversion not processed. Use delete function.
		if EURSTAT=1 do Runtime.setErrMSG("ACN",3489) quit
		// Reversal from EUR requested for ~p1
		if EURSTAT=3 do Runtime.setErrMSG("ACN",3550,EFD.toString(%MSKD.get())) quit

		set CRCD=acn.crcd
		// Account ~p1 not requested for conversion/reversal
		if (CRCD'=EMUCRCD)!(EURSTAT'=2),(EURSTAT'=6) do Runtime.setErrMSG("ACN",3377,CID) quit
		}

	quit


	//----------------------------------------------------------------------
PREEFD 	// Effective date pre-processor
	//---------------------------------------------------------------------

	type public Date EFD,TJD
	type public String STATDEL

	if (STATDEL.get()=""),(EFD.get()="") set EFD=TJD+1
	quit


        //----------------------------------------------------------------------
EFDPRE	// EFD Pre-Processor for deleting requests for single account.
	//----------------------------------------------------------------------

	type public Date TJD
	type public Number CID,SDELREQ,SDELREV,X

	type Date EFD
	type Number EURSTAT

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	set EFD=acn.eurefd

	if EFD.get()="" set EFD=TJD

	set EURSTAT=$$CNVSTAT(CID)

	// For already converted accounts
	
	// Conversion processed. Use reverse function.
	if (EURSTAT=2)!(EURSTAT=6) do Runtime.setErrMSG("ACN",3474) quit
	// Conversion/reversal request for account ~p1 not deleted
	if SDELREQ,EURSTAT'=1 do Runtime.setErrMSG("ACN",3403,X) quit
	// Conversion/reversal request for account ~p1 not deleted
	if SDELREV,EURSTAT'=3 do Runtime.setErrMSG("ACN",3403,X) quit

	do DISPLAY^DBSMACRO("ALL")

	quit


	//---------------------------------------------------------------------
PPBTCH	// Batch number post proccessor
	//---------------------------------------------------------------------

	type public Number STATDEL

	if STATDEL.get() do GOTO^DBSMACRO("END")

	quit


        //----------------------------------------------------------------------
FILETMP(Date EFD,			// Effective DAte
        Number EURSTAT)			// Euro Conversion Status
        //----------------------------------------------------------------------

	/*
	File accounts selected for conversion or reversion
	Routine collates through TMP(%ProcessID,1) array, reads CID and
        file account to DEP/LN file using FILEACC function.  
        */

	type public Boolean ER
	type public Date TJD
	type public Number %UID,ERRORLOG,OKACC
	type public String TMP(,,)

	type Number CID,BCHNUM
	type String RMSG

	if OKACC=0 quit
	set (BCHNUM,ERRORLOG)=""
	
	// set next batch number in dayend file
	if (EURSTAT'=5)!(EURSTAT'=6) set BCHNUM=$$EURBATCH(EFD)

	set (EURSTAT,CID)=""

	for  set CID=TMP(%ProcessID,1,CID).order() do {  quit:CID=""

		if CID="" quit

		set EURSTAT=TMP(%ProcessID,1,CID).piece("|",1)
		if (EURSTAT=5)!(EURSTAT=6) do FILEACC(CID,EURSTAT,"","","","") quit:ER
		else  do {

			type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

			if (dep.segflg=1),(EURSTAT=3) do {  quit

				// Segmented account conversions cannot be reversed
				set ER=1,RMSG=$$^MSG(4728)
				do LOG^UTLEXC(%ProcessID,"*",,CID,,RMSG)
				set ERRORLOG=ERRORLOG.get()+1
				}
			}
			if EURSTAT.get()="" set EURSTAT=1
			do FILEACC(CID,EURSTAT,TJD,BCHNUM,EFD,%UID) quit:ER
		}

	// ~p1 accounts not processed. See Exception Report for details.
	if ERRORLOG do Runtime.setErrMSG("ACN",3307,ERRORLOG) quit
	kill TMP(%ProcessID)

	quit


        //----------------------------------------------------------------------
SETTMP(Number CID,			// Account Number
       Number EURSTAT,			// Euro Conversion Status
       String CRCD,			// Currency Code
       Date EUREFD,			// Effective Date
       Number EURBATCH)			// Batch Number
	//----------------------------------------------------------------------
	
	/*
	Set data into temporary array - TMP
	
	Structure of the TMP array

		level 1: accounts for conversion
			TMP(%ProcessID,1)=123  //number of accounts for conversion
			TMP(%ProcessID,1,CID)="EURSTAT|EUREFD|CRCD"

		level 2: accounts removed from selection criteria
			TMP(%ProcessID,2)=123  //number of accounts
			TMP(%ProcessID,2,CID)="RSN|EURSTAT|EUREFD|CRCD"
        */

	type public Boolean ER
	type public Number BADSTAT,OKACC,REJSTAT,REVERSE,STATDEL,STATUS
	type public String EMUCRCD,TMP(,,)

	type Number ADD

	quit:ER
	set ADD=1

	// Misc. checks for report SCA624
	// Check if account is closed
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	if acn.stat=4 do {  quit

		set REJSTAT=REJSTAT.get()+1,ADD=0
		// Account ~p1 closed
		set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(55)
		}

	// Not reversing
	if REVERSE.get()="" do {

		// Check if account is already scheduled for conversion
		if (EURSTAT'=""),(STATUS=EURSTAT) set BADSTAT=BADSTAT.get()+1,ADD=0 do {  quit

			set REJSTAT=REJSTAT.get()+1
			// ~p1 accounts already scheduled for conversion
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(3556)
			}

		// Check if currency is an EMU currency
		if '$$INCRCD(CRCD) do {  quit

			set REJSTAT=REJSTAT.get()+1,ADD=0
			// Invalid currency code
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(1293)
			}

		// Account already converted
		if CRCD=EMUCRCD do {  quit

			set REJSTAT=REJSTAT.get()+1,ADD=0
			// Account already converted
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(52)
			}

		// delete conversion/reversal for selected accounts
		if STATDEL.get()'="",EURSTAT'=STATDEL do {  quit

			set REJSTAT=REJSTAT.get()+1,ADD=0
			// Invalid status code
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(1471)
			}
		}

	// Reverse accounts
	if REVERSE.get()'="" do {

		if CRCD'=EMUCRCD do {  quit

			set REJSTAT=REJSTAT.get()+1,ADD=0 
			// Invalid curency code
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(1293)
			}

		if (EURSTAT)="" do {  quit

			set REJSTAT=REJSTAT.get()+1,ADD=0 
			// Invalid status code
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(1471)
			}
			
		if (EURSTAT'=""),(STATUS=EURSTAT) do {  quit

			// ~p1 accounts already scheduled for reversal
			set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(3548)
			set BADSTAT=BADSTAT.get()+1,ADD=0
			set TMP(%ProcessID,2,CID).piece("|",2)=EURSTAT
			set TMP(%ProcessID,2,CID).piece("|",3)=EUREFD
			set TMP(%ProcessID,2,CID).piece("|",4)=CRCD
			}

		// Delete reversal
		if STATDEL.get()'="",EURSTAT'=STATDEL do {

			if EURSTAT'=STATDEL set REJSTAT=REJSTAT.get()+1,ADD=0 do {
			
				// Invalid status code
				set TMP(%ProcessID,2,CID).piece("|",1)=$$^MSG(1471)
				}
			}
		}

	if ADD do {

		set OKACC=OKACC.get()+1
		set EURSTAT=STATUS
		set TMP(%ProcessID,1,CID).piece("|",1)=EURSTAT
		set TMP(%ProcessID,1,CID).piece("|",2)=EUREFD
		set TMP(%ProcessID,1,CID).piece("|",3)=CRCD
		}

	// Set accounts removed from selection criteria
	// into TMP($J,2) array for report SCA624
	if ('ADD),($G(REVERSE)="") do {

		set TMP(%ProcessID,2,CID).piece("|",2)=EURSTAT
		set TMP(%ProcessID,2,CID).piece("|",3)=EUREFD
		set TMP(%ProcessID,2,CID).piece("|",4)=CRCD
		}

	quit


	//----------------------------------------------------------------------
SELACC(String QRY)			// Query
        //----------------------------------------------------------------------

	// Select accounts using QRY and set TMP array with accounts for conversion.

	type public Boolean ER
	type public Date X
	type public Number CID,CONVERT,REVERSE
	type public String %MSKD,EURSEL,INF1,INF2,INF3,INF4

	type Date EUREFD,TJD
	type Number EURSTAT,OKACC,BADSTAT,REJSTAT,TOTSQLC
	type String CRCD,PFID,TMP(,,),WHERE

	kill TMP(%ProcessID)
	
	set (OKACC,BADSTAT,REJSTAT)=0

	type RecordDBTBL4 dbtbl4=Db.getRecord("DBTBL4","LIBS=""SYSDEV"",QID=:QRY")

	set PFID=dbtbl4.pfid
	
	set ER=0,WHERE=""

	// I18N=OFF
	if PFID'="" do {

		type ResultSet dbtbl4d=Db.select("LINE","DBTBL4D","QID=:QRY AND SEQ>0")

		while dbtbl4d.next() do {

			if WHERE.get()'="" set WHERE=WHERE_" AND "_dbtbl4d.getCol("LINE")
			else  set WHERE=dbtbl4d.getCol("LINE")
			}

		#ACCEPT DATE=12/06/05; PGM=KumarSS
		type ResultSet rs=Db.select(EURSEL,PFID,WHERE)

		while rs.next() do {

			set CID=rs.getCol("CID")
			set EURSTAT=rs.getCol("EURSTAT")
			set CRCD=rs.getCol("CRCD")
			set EUREFD=rs.getCol("EUREFD")

			set TJD=CUVAR.TJD

			do SETTMP(CID,EURSTAT,CRCD,EUREFD,"")
			}
		}

	if CONVERT.get()'="" do {

		// Query ~p1 selected ~p2 accounts
		set INF1=$$^MSG(3553,QRY,TOTSQLC)
		// ~p1 will be converted to EUR effective ~p2
		set INF2=$$^MSG(3555,OKACC,X.toString(%MSKD.get()))
		// ~p1 accounts already scheduled for conversion
		set INF3=$$^MSG(3556,BADSTAT)

		// ~p1 accounts removed from selection criteria
		if REJSTAT set INF4=$$^MSG(3483,REJSTAT)
		}

	if REVERSE.get()'="" do {

		// Query ~p1 selected ~p2 accounts
		set INF1=$$^MSG(3553,QRY,TOTSQLC)
		// ~p1 accounts will be reversed from EUR effective ~p2
		set INF2=$$^MSG(3299,OKACC,X.toString(%MSKD.get()))
		// ~p1 accounts already scheduled for reversal
		set INF3=$$^MSG(3548,BADSTAT)

		// ~p1 accounts removed from selection criteria
		if REJSTAT S INF4=$$^MSG(3483,REJSTAT)
		}

	do REFRESH quit:ER

	quit


        //----------------------------------------------------------------------
SELDELAC	//
        //----------------------------------------------------------------------

	/*
	Select all accounts for delete request for conversion/reversal 
	to/from EUR and set TMP aray.
	*/

	type public Boolean ER
	type public Date EFD
	type public Number BNUM,STATDEL
	type public String EURSEL,QRY,TMP(,,,)
	
	type Date EUREFD,TJD
	type Number CID,EURSTAT
	type String CRCD,PFID,QUID1,WHERE
	
	set WHERE=""

	// Enter open parameters
	if (QRY.get()=""),(EFD.get()=""),(BNUM.get()="") do Runtime.setErrMSG("ACN",4820) quit

	kill TMP(%ProcessID)

	if QRY.get()'="" do {

		type RecordDBTBL4 dbtbl4=Db.getRecord("DBTBL4","LIBS=""SYSDEV"",QID=:QRY")

		set PFID=dbtbl4.pfid
		set ER=0,WHERE=""

		if PFID do {

			type ResultSet dbtbl4d=Db.select("LINE","DBTBL4D","QID=:QRY AND SEQ>0")

			while dbtbl4d.next() do {
	
				if WHERE.get()'="" set WHERE=WHERE_" AND "_dbtbl4d.getCol("LINE")
				else  set WHERE=dbtbl4d.getCol("LINE")
				}
	
			#ACCEPT DATE=12/06/05; PGM=KumarSS
			type ResultSet rs=Db.select(EURSEL,PFID,WHERE)
	
			while rs.next() do {
	
				set CID=rs.getCol("CID")
				set EURSTAT=rs.getCol("EURSTAT")
				set CRCD=rs.getCol("CRCD")
				set EUREFD=rs.getCol("EUREFD")
	
				set TJD=CUVAR.TJD
	
				do SETTMP(CID,EURSTAT,CRCD,EUREFD,"")
				}
			}
	        }

	if ER quit

	// I18N=OFF
	if QRY.get()="" do {

		set QUID1="EURSTAT="_STATDEL_" AND "
		set QUID1=QUID1_"EURBATCH="_BNUM_" AND "
		set QUID1=QUID1_"EUREFD="_EFD,PFID="ACN"
		set WHERE=$$WHERE^SQLCONV(.QUID1,PFID)

		#ACCEPT DATE=12/06/05; PGM=KumarSS
		type ResultSet rs=Db.select(EURSEL,"ACN",WHERE)

		while rs.next() do {

			set CID=rs.getCol("CID")
			set EURSTAT=rs.getCol("EURSTAT")
			set CRCD=rs.getCol("CRCD")
			set EUREFD=rs.getCol("EUREFD")

			set TJD=CUVAR.TJD

			do SETTMP(CID,EURSTAT,CRCD,EUREFD,"")
			}

		}
	// I18N=ON

	quit


	//----------------------------------------------------------------------
REVALLAC	// Select all accounts for reversal from EUR and set TMP array
        //----------------------------------------------------------------------

	type public Date EFD
	type public Number OKACC,REVACC
	type public String %MSKD,EMUCRCD,EURSEL,INF2,TMP(,,)

	type Date EUREFD,TJD
	type Number CID,EURSTAT
	type String CRCD

	if REVACC.get()="" quit

	kill TMP(%ProcessID)
	
	#ACCEPT DATE=12/06/05; PGM=KumarSS
	type ResultSet rs=Db.select(EURSEL,"ACN","EURSTAT=2 AND CRCD=:EMUCRCD")

	while rs.next() do {

		set CID=rs.getCol("CID")
		set EURSTAT=rs.getCol("EURSTAT")
		set CRCD=rs.getCol("CRCD")
		set EUREFD=rs.getCol("EUREFD")

		set TJD=CUVAR.TJD

		do SETTMP(CID,EURSTAT,CRCD,EUREFD,"")
		}

	// ~p1 accounts will be reversed from EUR effective ~p2
	set INF2=$$^MSG(3299,OKACC,EFD.toString(%MSKD.get()))

	quit


        //----------------------------------------------------------------------
CNVALLAC	//
        //----------------------------------------------------------------------

	/*
	Select all accounts for conversion to EUR and set TMP array.
		1. select all EMU currencies
		2. select all account with EMU currency
	*/

	type public Date X
	type public Boolean ER
	type public Number CONVALL
	type public String %MSKD,INCRCD(),INF1,INF2,INF3,INF4,TMP(,,)

	type Date EUREFD
	type Number CID,EURBATCH,EURSTAT,SQLALL,OKACC,BADSTAT,REJSTAT
	type String CRCD

	if CONVALL.get()="" quit

	set (SQLALL,OKACC,BADSTAT,REJSTAT)=0
	set CRCD=""
	kill TMP(%ProcessID)

	type ResultSet rsacn=Db.select("CID,CRCD,EURBATCH,EUREFD,EURSTAT","ACN")

	while rsacn.next() do {

		set CID=rsacn.getCol("CID")
		set CRCD=rsacn.getCol("CRCD")
		set EURBATCH=rsacn.getCol("EURBATCH")
		set EUREFD=rsacn.getCol("EUREFD")
		set EURSTAT=rsacn.getCol("EURSTAT")

		if INCRCD(CRCD).get()="" set REJSTAT=REJSTAT.get()+1,SQLALL=SQLALL.get()+1 quit

		do SETTMP(CID,EURSTAT,CRCD,EUREFD,EURBATCH) quit:ER
		set SQLALL=SQLALL.get()+1
		}

	// Convert all selected ~p1 accounts
	set INF1=$$^MSG(3375,SQLALL)
	// ~p1 will be converted to EUR effective ~p2
	set INF2=$$^MSG(3555,OKACC,X.toString(%MSKD.get()))
	// ~p1 accounts already scheduled for conversion
	set INF3=$$^MSG(3556,BADSTAT) 

	// ~p1 accounts removed from selection criteria
        if REJSTAT set INF4=$$^MSG(3483,REJSTAT)

	quit


        //----------------------------------------------------------------------
FILEACC(Number CID,			// Account Number
        Number EURSTAT,			// Euro Conversion Status
        Date EUREQDAT,			// Euro Conversion Request Date
        Number BATCH,			// Batch Number
        Date EUREFD,			// Euro Conversion Effective Date
        Number UIDREQ)			// User ID Request
        //----------------------------------------------------------------------

        // File account data for cid

	type public Boolean ER
	type public Number ERRORLOG
	type public String RM

	type Date EURCNV,DELEFD
	type String CLS,DELBATCH,DELSTAT,ORGCRCD,ORGINDEX,ORGSCH
	
	if CID.get()="" quit

	//N CLS,EURCNV,ORGCRCD,ORGINDEX

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	quit:acn.stat=4	// Do not process closed accounts

	set CLS=acn.cls
	set EURCNV=acn.eurcnvd
	set ORGCRCD=acn.orgcrcd
	set ORGINDEX=acn.orgindex
	set ORGSCH=acn.orgsch

	set %ProcessMode=1

	// Retrieve account values to delete DAYEND entry
	// for conversion delete requests.
	if EURSTAT>4 do {

		set DELBATCH=acn.eurbatch
		set DELEFD=acn.eurefd
		set DELSTAT=acn.eurstat
		}

	if CLS="D" do {

		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

		set dep.eurcnvd=EURCNV
		set dep.eurstat=EURSTAT.get()
		set dep.orgcrcd=ORGCRCD
		set dep.eurbatch=BATCH.get()
		set dep.eurudrq=UIDREQ.get()
		set dep.eurefd=EUREFD.get()
		set dep.eureqdat=EUREQDAT.get()
		set dep.orgindex=ORGINDEX
		set dep.orgsch=ORGSCH

		do dep.save()
		}

	if CLS="L" do {

		type RecordLN ln=Db.getRecord("LN","CID=:CID")

		set ln.eurcnvd=EURCNV
		set ln.eurstat=EURSTAT.get()
		set ln.orgcrcd=ORGCRCD
		set ln.eurbatch=BATCH.get()
		set ln.eurudrq=UIDREQ.get()
		set ln.eurefd=EUREFD.get()
		set ln.eureqdat=EUREQDAT.get()
		set ln.orgindex=ORGINDEX
		set ln.orgsch=ORGSCH

		do ln.save()
	}

	if ER do LOG^UTLEXC(%ProcessID,"*",,CID,,RM) set ERRORLOG=ERRORLOG.get()+1 set (ER,RM)="" quit

	quit


        //----------------------------------------------------------------------
PRNREP(Number MSGNR)			// Message Number
        //----------------------------------------------------------------------

	// Prints report SCA624
	
	type public Number REJSTAT
	type public String QRY

	type Number EURJOB
	type String RID,RM,VFMQ
	
	quit:REJSTAT=0

	set EURJOB=%ProcessID
	set RM=""
	
	// I18N=OFF
	set RM=$$^MSG(MSGNR,QRY.get())
	// I18N=ON

	set RID="SCA624" do DRV^URID if VFMQ="Q" quit
	set RM=""

	quit


	//----------------------------------------------------------------------
CNVSING	// Convert single account
	//----------------------------------------------------------------------

	type public Number CID
	type public String ER,RM

	type Number EURSTAT,INCUR,RESP,SINGLE
	type String CRCD,EMUCRCD
	
	do INIT quit:ER
	set SINGLE=1
	if $$PRMSCR(1,1)="Q" quit

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Account ~p1 closed
	if acn.stat=4 do Runtime.setErrMSG("ACN",55,CID) quit

	set CRCD=acn.crcd

	// Invalid currency code
	if CRCD=EMUCRCD do Runtime.setErrMSG("ACN",1293) quit

	//N INCUR
	set INCUR=$$INCRCD(CRCD)
	// Invalid currency code
	if INCUR'=1 do Runtime.setErrMSG("ACN",1293) quit
	set EURSTAT=$$CNVSTAT(CID)
	if EURSTAT.get()="" set EURSTAT=1
	if EURSTAT'=1,EURSTAT'=4,EURSTAT'=5,EURSTAT'=7 quit

	// Account xxx currency will not be converted to EUR
	// if user chooses 'NO'.
	// Convert account ~p1 to EUR?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3363,CID),1)
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do CNVSING2
	quit


        //----------------------------------------------------------------------
public CNVSING2	//
        //----------------------------------------------------------------------

	type public Boolean ER
	type public Date EFD,TJD
	type public Number %UID,CID,BCHNUM

	// This linetag called from MRPC.
	set BCHNUM=$$EURBATCH(EFD)
	do FILEACC(CID,1,TJD,BCHNUM,EFD,%UID) quit:ER

	quit

        //----------------------------------------------------------------------
CNVSEL  // Convert selected accounts
        //----------------------------------------------------------------------

	type public Date EFD
	type public String ER,QRY,RM

	type Number CONVERT,OPT,RESP,STATUS
	type String RES

	set RES=""

	do INIT quit:ER

	set (CONVERT,STATUS)=1

	if $$PRMSCR(0,1,1)="Q" quit

	for  set OPT=$$^DBSMBAR(187) do {  quit:(OPT'=2)!(RES="Q")

		if OPT=2 do PRNREP(3551) set RES=$$PRMSCR(0,1,1)
		// Request cancelled
		if OPT=3 set ER="W",RM=$$^MSG(3404) quit
		}
	if (OPT'=1)!(RES="Q") quit

	// Convert ~p1 accounts to EUR?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3364,QRY),1)
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILETMP(EFD,1) quit:ER

	quit


        //----------------------------------------------------------------------
CNVALL  // Convert all accounts
        //----------------------------------------------------------------------

	type public Date EFD
	type public Number CONVALL,OKACC,STATUS
	type public String ER,RM

	type Number OPT,RESP
	type String RES

	set (RES,RESP)=""

	do INIT quit:ER

	set CONVALL=1
	set STATUS=1
	if $$PRMSCR(0,1,0)="Q" quit

	// Selected ~p1 account(s)
	if OKACC=0 do Runtime.setErrMSG("ACN",3593,OKACC) quit

	for  set OPT=$$^DBSMBAR(187) do {  quit:(OPT'=2)!(RES="Q")

		if OPT=2 do PRNREP(3552) set RES=$$PRMSCR(0,1,0)
		// Request cancelled
		if OPT=3 set ER="W",RM=$$^MSG(3404) quit
		}

	if (OPT'=1)!(RES="Q") quit

	// Convert all accounts to EUR?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3365),1)
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILETMP(EFD,1) quit:ER

	quit


        //----------------------------------------------------------------------
RVSINACT	// Reverse Single Account
        //----------------------------------------------------------------------

	type public Date EFD,TJD
	type public Number %UID,BCHNUM,CID,REVSINGLE
	type public String ER,RM

	type Number EURSTAT,RESP
	type String CRCD,EMUCRCD,ORGCRCD

        do INIT quit:ER
	set REVSINGLE=1
	if $$PRMSCR(1,1)="Q" quit

	// Reject reversals of segmented accounts
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	
	// Segmented account conversions cannot be reversed
	if dep.segflg=1 do Runtime.setErrMSG("DEP",4728) quit

        set CRCD=dep.crcd
	set ORGCRCD=dep.orgcrcd
	// Invalid currency code
	if CRCD'=EMUCRCD do Runtime.setErrMSG("DEP",1293) quit
	// Account ~p1 not converted
	if ORGCRCD="" do Runtime.setErrMSG("DEP",127,CID) quit
	set EURSTAT=$$CNVSTAT(CID)
	if (EURSTAT=2)!(EURSTAT=5)!(EURSTAT=6)!(EURSTAT="") set EURSTAT=3
	// Reverse account ~p1 from EUR?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3366,CID),1) 
	// Request cancelled
        if RESP=0 set ER="W",RM=$$^MSG(3404) quit
	set BCHNUM=$$EURBATCH(EFD)

	do FILEACC(CID,3,TJD,BCHNUM,EFD,%UID) quit:ER

	quit

	//----------------------------------------------------------------------
public RVSINAC2	//
	//----------------------------------------------------------------------

	type public Boolean ER
	type public Date EFD,TJD
	type public Number %UID,BCHNUM,CID,REVSINGLE

	// Reject reversals of segmented accounts
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	
	// Segmented account conversions cannot be reversed
	if dep.segflg=1 do Runtime.setErrMSG("DEP",4728) quit

	do INIT quit:ER
	set REVSINGLE=1
	set BCHNUM=$$EURBATCH(EFD)

	do FILEACC(CID,3,TJD,BCHNUM,EFD,%UID) quit:ER
	quit


        //----------------------------------------------------------------------
RVCNVSEL	// Reverse selected accounts
        //----------------------------------------------------------------------

	type public Number REVERSE,REVSEL,STATUS
	type public String ER,RM

	type Date EFD
	type Number OPT
	type String QRY,RES,RESP

	set (QRY,EFD,RES)=""

	do INIT quit:ER
	set REVERSE=1
	set STATUS=3
	set REVSEL=1
	if $$PRMSCR(0,1,1)="Q" quit

	for  set OPT=$$^DBSMBAR(187) do {  quit:(OPT'=2)!(RES="Q")

		if OPT=2 do PRNREP(3551) set RES=$$PRMSCR(0,1,1)
		// Request cancelled
		if OPT=3 set ER="W",RM=$$^MSG(3404) quit
		}
	if (OPT'=1)!(RES="Q") quit

	// Reverse ~p1 accounts from EUR?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3367,QRY),1)
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit
	do FILETMP(EFD,3) quit:ER

	quit


        //----------------------------------------------------------------------
REVALL  // Reverse all accounts
        //----------------------------------------------------------------------

	type public Number OKACC,REVACC,REVERSE,STATUS
	type public String ER,RM

	type Date EFD
	type Number OPT
	type String RES,RESP

	set (EFD,RES)=""
        do INIT quit:ER	
	set REVACC=1
	set STATUS=3
	set REVERSE=1
	if $$PRMSCR(0,1,0)="Q" quit

	// Selected ~p1 account(s)
	if OKACC=0 do Runtime.setErrMSG("DEP",3593,OKACC) quit

	for  set OPT=$$^DBSMBAR(187) do {  quit:(OPT'=2)!(RES="Q")

		if OPT=2 do PRNREP(3541) set RES=$$PRMSCR(0,1,0)
		// Request cancelled
		if OPT=3 set ER="W",RM=$$^MSG(3404) quit
		}
	if (OPT'=1)!(RES="Q") quit
	// Reverse all accounts from EUR?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3368),1)
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILETMP(EFD,3) quit:ER

	quit
	

        //----------------------------------------------------------------------
DLREQACT	// Delete request for single account conversion
	//----------------------------------------------------------------------

	type public Date TJD
	type public Number %UID,CID,SDELREQ
	type public String ER,RM

	type Date EFD
	type String RESP

	do INIT quit:ER
	set SDELREQ=1
	if $$PRSDELAC="Q" quit

	// Delete request for account ~p1 conversion?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3369,CID),1) 
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILEACC(CID,5,TJD,"","",%UID) quit:ER

	quit


	//----------------------------------------------------------------------
public DLREQAC2
	//----------------------------------------------------------------------
	
	type public Boolean ER
	type public Date TJD
	type public Number %UID,CID,SDELREQ

	do INIT quit:ER
	set SDELREQ=1	
	do FILEACC(CID,5,TJD,"","",%UID) quit:ER

	quit


        //----------------------------------------------------------------------
DLCNVSEL	// Delete request for selected accounts conversion
        //----------------------------------------------------------------------

	type public Number OKACC,SELDELAC,STATDEL,STATUS
	type public String ER,INF1,INF2,INF3,RM

	type Date EFD
	type String QRY,RESP

	do INIT quit:ER
	set STATUS=5
	set STATDEL=1
	if $$PRSCRDEL="Q" quit

	do SELDELAC quit:ER
	if ER quit

	// Query ~p1 selected ~p2 accounts
        if (QRY.get()'=""),(OKACC.get()=0) do Runtime.setErrMSG("DEP",3553,"QRY.get()~0") quit
	// Selected ~p1 account(s)
	else  if (QRY.get()=""),(OKACC.get()=0) do Runtime.setErrMSG("DEP",3593,"0") quit

	// Query ~p1 selected ~p2 accounts
	if QRY.get()'="" set INF1=$$^MSG(3553,QRY.get(),OKACC)
	// Selected ~p1 account(s)	
	else  set INF1=$$^MSG(3593,OKACC)

	set INF2=""
	// All selected accounts will not be converted to EUR
        set INF3=$$^MSG(3546)
	do REFRESH quit:ER

	// Delete request for ~p1 accounts conversion?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3370,QRY),1) 
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILETMP("",5) quit:ER

	quit

      
        //----------------------------------------------------------------------
DLRQRVAC	// Delete request to reverse single account conversion
        //----------------------------------------------------------------------

	type public Date TJD
	type public Number %UID,CID,SDELREV
	type public String ER,RM

	type Date EFD
	type Number EURSTAT
	type String CRCD,RESP

	do INIT quit:ER
	set SDELREV=1
	if $$PRSDELAC="Q" quit

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

        set CRCD=dep.crcd
	set EURSTAT=$$CNVSTAT(CID)

	// Account ~p1 not requested for conversion/reversal
	if EURSTAT'=3 do Runtime.setErrMSG("DEP",3377,CID) quit

	// Delete request for account ~p1 reversal?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3371,CID),1)
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILEACC(CID,6,TJD,"","",%UID)

	quit


        //----------------------------------------------------------------------
public DLRQRVA2	//
	//----------------------------------------------------------------------

	type public Boolean ER
	type public Date TJD
	type public Number %UID,CID,SDELREV

	type Number EURSTAT
	type String CRCD

	do INIT quit:ER
	set SDELREV=1	

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

        set CRCD=dep.crcd
	set EURSTAT=$$CNVSTAT(CID)

	do FILEACC(CID,6,TJD,"","",%UID)

	quit


	//----------------------------------------------------------------------
DLRQRVSL	// Delete request to reverse selected accounts
	//----------------------------------------------------------------------

	type public Number OKACC,REVERSE,STATDEL,STATUS
	type public String ER,INF1,INF2,INF3,RM

	type Date EFD
	type String QRY,RESP

	do INIT quit:ER

	set STATUS=6
	set STATDEL=3
	set REVERSE=1
	if $$PRSCRDEL="Q" quit
	do SELDELAC quit:ER

	// Query ~p1 selected ~p2 accounts
	if (QRY.get()'=""),(OKACC.get()=0) do Runtime.setErrMSG("DEP",3553,"QRY.get()~0") quit
	// Selected ~p1 account(s)
	else  if (QRY.get()=""),(OKACC.get()=0) do Runtime.setErrMSG("DEP",3593,"0") quit

	// Query ~p1 selected ~p2 accounts
	if QRY.get()'="" set INF1=$$^MSG(3553,QRY.get(),OKACC)
	// Selected ~p1 account(s)
	else  set INF1=$$^MSG(3593,OKACC)

	set INF2=""
	// All selected accounts will not be reversed from EUR
	set INF3=$$^MSG(3547)

	do REFRESH quit:ER

	// Delete request for ~p1 accounts conversion?
	set RESP=$$YN^DBSMBAR("",$$^MSG(3370,QRY),1) 
	// Request cancelled
	if RESP=0 set ER="W",RM=$$^MSG(3404) quit

	do FILETMP("",6) quit:ER

	quit


	//----------------------------------------------------------------------
END	// End of processing
	//-----------------------------------------------------------------------

	type public Date EUREFD
	type public Number %MSKD,CID,CONVALL,CONVERT,MEURCNV,OKACC,REVACC,REVSEL,REVSINGLE,SDELREQ,SDELREV,SINGLE,STATDEL
	type public String ER,RM,VFMQ

	quit:ER

	if MEURCNV.get()=1 quit
	set CID=CID.get()
	set EUREFD=EUREFD.get()

	// Request cancelled
	if VFMQ="Q" set RM=$$^MSG(3404) quit
	else  do {

		// Account ~p1 currency conversion effective ~p2
		if SINGLE.get()=1 set RM=$$^MSG(3399,CID,EUREFD.toString(%MSKD.get())) quit
		// Conversion to EUR requested for ~p1
		if CONVERT.get()=1 set RM=$$^MSG(3549,EUREFD.toString(%MSKD.get())) quit
		// =Conversion to EURO of all IN account currency effective ~p1
		if CONVALL.get()=1 set RM=$$^MSG(3384,EUREFD.toString(%MSKD.get())) quit
		// Account ~p1 currency reversal effective ~p2
		if REVSINGLE.get()=1 set RM=$$^MSG(3391,CID,EUREFD.toString(%MSKD.get())) quit
		// ~p1 accounts will be reversed from EUR effective ~p2
		if REVSEL.get()=1 set RM=$$^MSG(3299,OKACC,EUREFD.toString(%MSKD.get())) quit
		// All IN account currency reversal from EUR effective ~p1
		if REVACC.get()=1 set RM=$$^MSG(3393,EUREFD.toString(%MSKD.get())) quit
		// Account ~p1 currency will not be converted to EUR effective ~p2
		if SDELREQ.get()=1 set RM=$$^MSG(3394,CID,EUREFD.toString(%MSKD.get())) quit
		// The currency of the above selected accounts will not be converted
		if STATDEL.get()=1 set RM=$$^MSG(3398) quit
		// Account ~p1 currency reversal effective ~p2
		if SDELREV.get()=1 set RM=$$^MSG(3391,CID,EUREFD.toString(%MSKD.get())) quit
		// No account currency conversion of selected accounts
		if STATDEL.get()=3 set RM=$$^MSG(3401) quit
		}
	set ER="W"

	quit

vSIG()	quit "60276^57754^Laura Hillanbrand^34786"	// Signature - LTD^TIME^USER^SIZE
