R01S134	// SCA066 - Student Loan Advance
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:43 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String TCRCD
	type Number VARB

	set RID="SCA066"
	set RN="Student Loan Advance"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("TCRCD")="|3|||[CRCD]||||T|Currency Code|||||"
	set %TAB("VARB")="|6|||TY(||||N|Product Type|||||"

	set %READ="IO/REQ,VARB#1,TCRCD#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Number VARB
	type public String TCRCD
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,ADVDT1,AMT1,APOB1,AVB1,CMT1,CNT,CONAM,LV,NDIR,NUM,NUM2,OFF1,RACR,RATE,RBAL,RCRLMT,RID,RIYTD,RN,RTDUE,SAR,SAR1,T,TACR(),TBAL(),TCNT,TCRLMT(),TIYTD(),TLEV,TOTB(),TSAR(),TTDUE(),TY(),VL,VLC,VLOF,VRF(),VSTATS(),YDIR,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA066",RN="Student Loan Advance"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA066","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[LNADV]CID#1#12"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE


		set VWHERE="LN.PCIDSTAT=1"
		set VBNRINFO("WHERE")=VWHERE

		set VBNRINFO("DESC")="Student Loan Advance"
		set VBNRINFO("PGM")="R01S134"
		set VBNRINFO("RID")="SCA066"
		set VBNRINFO("TABLES")="LNADV,LN,LNXSL"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,LNADV]CID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,LNADV]102"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,LNADV]ADV"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:3 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("LNADV.CID,LNADV.ADV,LN.LNM,LN.IDPF,LN.BAL,LN.ACR,LN.IRN,LN.CRLMT,LN.IYTD,LN.ONP,LN.DIST1ND,LN.DIST1FRE,LN.TLD,LN.TDUE,LN.SLDNUM,LN.DIRDEF,LN.RELCID,LNXSL.IDPF,LNXSL.BAL,LNXSL.ACR,LNXSL.IRN,LNXSL.CRLMT,LNXSL.IYTD,LNXSL.ONP,LNXSL.DIST1ND,LNXSL.DIST1FRE,LNXSL.TLD,LNXSL.TDUE,LNXSL.SLDNUM,LNXSL.DIRDEF","LNADV,LN,LNXSL","LN.PCIDSTAT=1","LNADV.CID,LNADV.ADV","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2
	set vovc1="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2
	set vovc1=vc1,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30
	set vc1=V.piece($C(9),1)			// LNADV.CID
	set vc2=V.piece($C(9),2)			// LNADV.ADV
	set vc3=V.piece($C(9),3)			// LN.LNM
	set vc4=V.piece($C(9),4)			// LN.IDPF
	set vc5=V.piece($C(9),5)			// LN.BAL
	set vc6=V.piece($C(9),6)			// LN.ACR
	set vc7=V.piece($C(9),7)			// LN.IRN
	set vc8=V.piece($C(9),8)			// LN.CRLMT
	set vc9=V.piece($C(9),9)			// LN.IYTD
	set vc10=V.piece($C(9),10)			// LN.ONP
	set vc11=V.piece($C(9),11)			// LN.DIST1ND
	set vc12=V.piece($C(9),12)			// LN.DIST1FRE
	set vc13=V.piece($C(9),13)			// LN.TLD
	set vc14=V.piece($C(9),14)			// LN.TDUE
	set vc15=V.piece($C(9),15)			// LN.SLDNUM
	set vc16=V.piece($C(9),16)			// LN.DIRDEF
	set vc17=V.piece($C(9),17)			// LN.RELCID
	set vc18=V.piece($C(9),18)			// LNXSL.IDPF
	set vc19=V.piece($C(9),19)			// LNXSL.BAL
	set vc20=V.piece($C(9),20)			// LNXSL.ACR
	set vc21=V.piece($C(9),21)			// LNXSL.IRN
	set vc22=V.piece($C(9),22)			// LNXSL.CRLMT
	set vc23=V.piece($C(9),23)			// LNXSL.IYTD
	set vc24=V.piece($C(9),24)			// LNXSL.ONP
	set vc25=V.piece($C(9),25)			// LNXSL.DIST1ND
	set vc26=V.piece($C(9),26)			// LNXSL.DIST1FRE
	set vc27=V.piece($C(9),27)			// LNXSL.TLD
	set vc28=V.piece($C(9),28)			// LNXSL.TDUE
	set vc29=V.piece($C(9),29)			// LNXSL.SLDNUM
	set vc30=V.piece($C(9),30)			// LNXSL.DIRDEF
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	/* ---- Revision History ---------------------------------------------
	
		11/21/06 - MBUIM - 23240
			   Scopped variables correctly to eliminate 
			   undefined errors when report is run.
	----------------------------------------------------------------------
	*/

	type public Number CNT, NDIR, NUM, NUM2, TACR(), TBAL()
	type public Number TCRLMT(), TIYTD(), TOTB(), TTDUE(), VARB 
	type public Number YDIR     

 	type Number I
	type String GROUP

	set (NUM, NUM2, CNT, YDIR, NDIR, TOTB(1), TOTB(2)) = 0
	
	do Db.fastDelete("LNXSLTS", "JOB =:%ProcessID")

	for I = 1, 2 set (TACR(I), TBAL(I), TCRLMT(I), TIYTD(I), TTDUE(I)) = 0
	
	type RecordPRODCTL prodctl = Db.getRecord("PRODCTL", "TYPE =:VARB")
	set GROUP = prodctl.grp
	quit

TYPE //

	type public String TY()

	type ResultSet rs1 = Db.select("TYPE, DES, GRP, IDPF", "PRODDFTL, PRODCTL", "IDPF > 0")
	while rs1.next() set TY(rs1.getCol("TYPE")) = rs1.getCol("DES")_"|"_rs1.getCol("GRP")



	quit

VRPOST	// Report post-processor

	type public Number CNT, LV, RATE, SAR, TLEV, TSAR()
	type public String IOTYP, VFMQ

	type Number ABAL, ACR, BAL, NUM, RID, TDUE

	type ResultSet rs = Db.select("ABAL, ACR, TDUE, BAL, NUM", "LNXSLTS", "JOB =:%ProcessID ")
	if 'CNT, 'TSAR.data() quit
	
	set LV = TSAR(LV).order() if LV = "" kill TSAR quit
	
	if IOTYP = "TRM" do VWAIT
	if VFMQ = "Q" do VEXIT() quit

	set RID = "SCA066B"
 
        type RecordLNXSLTS lnxstls = Db.getRecord("LNXSLTS", "JOB =:%ProcessID, TLEV =:TLEV, RATE =:RATE, SAR =:SAR", 1)
       
        do DRV^URID

	quit

VWAIT //

	type public Number IOSL, VLC

	type Number VL, VRG, X

	set VL = "" for X = VLC + 1:1:IOSL do VOM
	do ^DBSRWBR(2) 
	set VLC = 0
	set VRG = 0 
	quit



VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(1).get() do VDTL1 quit:VFMQ
	do VHDG3 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(3)
	type Public String vc1,vovc1,vc2,vovc2
	type Number vb1,vb2,vb3
	set (vb1,vb2,vb3)=0
	if vb1!(+vovc1'=+vc1) set vs(3)=0,vh(3)=0,VD(1)=0,vb2=1,vb3=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(3)=VT(3)+1
	quit

VDTL1	// Detail
	type public String %TIM,ADVDT1,AMT1,APOB1,AVB1,CMT1,CNT,IOSL,IOTYP,LV,NDIR,NUM,NUM2,OFF1,RACR,RATE,RBAL,RCRLMT,RIYTD,RTDUE,SAR,SAR1,T,TACR(),TBAL(),TCNT,TCRCD,TCRLMT(),TIYTD(),TLEV,TOTB(),TSAR(),TTDUE(),TY(),V,VARB,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),YDIR,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vrundate,vsysdate

	quit:VD(1)  set VD(1)=1				// Print flag
	if VLC+4>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set V=vc1,VO=V do VP1 quit:VFMQ!verror.get()  set V=$J(V,12) do VP2 quit:VFMQ!verror.get()  set VL=V
	set VL=VL_$J("",14-VL.length())_$E(vc3,1,16)
	set VL=VL_$J("",31-VL.length())_$J(vc4,1)
	set V=vc5,VO=V do VP3 quit:VFMQ!verror.get()  set V=$J(V,9,2)
	set VL=VL_$J("",33-VL.length())_V		// [SYSDEV,LN]BAL
	set VL=VL_$J("",45-VL.length())_$J(vc6,7,2)
	set VL=VL_$J("",54-VL.length())_$J(vc7,8,5)
	set VL=VL_$J("",63-VL.length())_$J(vc8,9,2)
	set VL=VL_$J("",73-VL.length())_$J(vc9,7,2)
	set VL=VL_$J("",81-VL.length())_$J(vc10,3)
	set VL=VL_$J("",85-VL.length())_$J($$DAT^%ZM(vc11),10)
	set VL=VL_$J("",96-VL.length())_$E(vc12,1,8)
	set VL=VL_$J("",105-VL.length())_$J($$DAT^%ZM(vc13),10)
	set VL=VL_$J("",116-VL.length())_$J(vc14,7,2)
	set VL=VL_$J("",124-VL.length())_$J(vc15,4)
	set VL=VL_$J("",131-VL.length())_$S(vc16:"Y",1:"N")
	do VOM
	set VL="              "_$J(vc17,12)
	set VL=VL_$J("",27-VL.length())_$J(vc18,5)
	set V=vc19,VO=V do VP4 quit:VFMQ!verror.get()  set V=$J(V,9,2)
	set VL=VL_$J("",33-VL.length())_V		// [SYSDEV,LNXSL]BAL
	set VL=VL_$J("",43-VL.length())_$J(vc20,9,2)
	set VL=VL_$J("",54-VL.length())_$J(vc21,8,5)
	set VL=VL_$J("",63-VL.length())_$J(vc22,9,2)
	set VL=VL_$J("",73-VL.length())_$J(vc23,7,2)
	set VL=VL_$J("",81-VL.length())_$J(vc24,3)
	set VL=VL_$J("",85-VL.length())_$J($$DAT^%ZM(vc25),10)
	set VL=VL_$J("",96-VL.length())_$E(vc26,1,8)
	set VL=VL_$J("",105-VL.length())_$J($$DAT^%ZM(vc27),10)
	set VL=VL_$J("",116-VL.length())_$J(vc28,7,2)
	set VL=VL_$J("",124-VL.length())_$J(vc29,4)
	set V=vc30,VO=V set V=$S(V:"Y",1:"N") do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",131-VL.length())_V		// [SYSDEV,LNXSL]DIRDEF
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	quit

VHDG3	// Group Header
	type public String %MSKD,%TIM,ADVDT1,AMT1,APOB1,AVB1,CMT1,CNT,CONAM,ER,IOSL,IOTYP,LV,NDIR,NUM,NUM2,OFF1,RACR,RATE,RBAL,RCRLMT,RID,RIYTD,RN,RTDUE,SAR,SAR1,T,TACR(),TBAL(),TCNT,TCRCD,TCRLMT(),TIYTD(),TLEV,TOTB(),TSAR(),TTDUE(),TY(),V,VARB,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,YDIR,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vrundate,vsysdate

	quit:vh(3)  set vh(3)=1				// Print flag
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="               "_"Interim Advances:     Amount   Adv Date Apvl  Allow Rt   % Of Bal   Avg Bal  Comment"
	do VOM
	quit

VDTL3	// Detail
	type public String %TIM,ADVDT1,AMT1,APOB1,AVB1,CMT1,CNT,IOSL,IOTYP,LV,NDIR,NUM,NUM2,OFF1,RACR,RATE,RBAL,RCRLMT,RIYTD,RTDUE,SAR,SAR1,T,TACR(),TBAL(),TCNT,TCRCD,TCRLMT(),TIYTD(),TLEV,TOTB(),TSAR(),TTDUE(),TY(),V,VARB,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),YDIR,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vrundate,vsysdate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc1,VO=V set V=$J(V,12) do VP6 quit:VFMQ!verror.get()  set VL=V
	do VP7 quit:VFMQ!verror.get()  set V=$J(AMT1,9,2)
	set VL=VL_$J("",34-VL.length())_V
	set VL=VL_$J("",44-VL.length())_$J($$DAT^%ZM(ADVDT1),10)
	set VL=VL_$J("",56-VL.length())_$J(OFF1,3)
	set VL=VL_$J("",61-VL.length())_$J(SAR1,8,5)
	set VL=VL_$J("",71-VL.length())_$J(APOB1,9,5)
	set VL=VL_$J("",81-VL.length())_$J(AVB1,9,2)
	set V=$E(CMT1,1,40) do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ADVDT1,AMT1,APOB1,AVB1,CMT1,CNT,CONAM,IOTYP,LV,NDIR,NUM,NUM2,OFF1,RACR,RATE,RBAL,RCRLMT,RID,RIYTD,RN,RTDUE,SAR,SAR1,T,TACR(),TBAL(),TCNT,TCRCD,TCRLMT(),TIYTD(),TLEV,TOTB(),TSAR(),TTDUE(),TY(),VARB,VL,YDIR,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_" (SCA066)"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	do VP9 quit:VFMQ!verror.get()  set V="Primary Acct  Borrower         F   Balance   Acr Int" set VL=V
	set VL=VL_$J("",54-VL.length())_"Int Rate  CR Limit Int YTD #Pmt  Next Due   Freq     Last Trn Tot Due  #Def D"
	do VOM
	set VL="              "_"Secondary Acct"
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="TYPE "_VARB
	set VL=VL_$J("",15-VL.length())_"Currency Code "_TCRCD
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,ADVDT1,AMT1,APOB1,AVB1,CMT1,CNT,IOTYP,LV,NDIR,NUM,NUM2,OFF1,RACR,RATE,RBAL,RCRLMT,RIYTD,RTDUE,SAR,SAR1,T,TACR(),TBAL(),TCNT,TCRCD,TCRLMT(),TIYTD(),TLEV,TOTB(),TSAR(),TTDUE(),TY(),VARB,YDIR,vovc1,vovc2,vrundate,vsysdate
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+13>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="" do VOM
	set VL="Report Totals"
	do VOM
	set VL="" do VOM
	set VL="Primary Accounts:"
	set VL=VL_$J("",24-VL.length())_$J(NUM,5)
	set VL=VL_$J("",34-VL.length())_$J(TBAL(1),9,2)
	set VL=VL_$J("",46-VL.length())_$J(TACR(1),7,2)
	set VL=VL_$J("",65-VL.length())_$J(TCRLMT(1),9,2)
	set VL=VL_$J("",77-VL.length())_$J(TIYTD(1),7,2)
	set VL=VL_$J("",119-VL.length())_$J(TTDUE(1),7,2)
	do VOM
	set VL="Secondary Accounts:"
	set VL=VL_$J("",24-VL.length())_$J(NUM2,5)
	set VL=VL_$J("",34-VL.length())_$J(TBAL(2),9,2)
	set VL=VL_$J("",46-VL.length())_$J(TACR(2),7,2)
	set VL=VL_$J("",65-VL.length())_$J(TCRLMT(2),9,2)
	set VL=VL_$J("",77-VL.length())_$J(TIYTD(2),7,2)
	set VL=VL_$J("",119-VL.length())_$J(TTDUE(2),7,2)
	do VOM
	set VL="                        "_"------------------------------------------------------------------------------------------------------------------------------------"
	do VOM
	set VL="Total:"
	do VP10 quit:VFMQ!verror.get()  set V=$J(TCNT,5)
	set VL=VL_$J("",24-VL.length())_V
	do VP11 quit:VFMQ!verror.get()  set V=$J(RBAL,9,2)
	set VL=VL_$J("",34-VL.length())_V
	set VL=VL_$J("",46-VL.length())_$J(RACR,7,2)
	set VL=VL_$J("",65-VL.length())_$J(RCRLMT,9,2)
	set VL=VL_$J("",77-VL.length())_$J(RIYTD,7,2)
	set VL=VL_$J("",119-VL.length())_$J(RTDUE,7,2)
	do VOM
	set VL="" do VOM
	set VL="Interim Accounts:"
	do VP12 quit:VFMQ!verror.get()  set V=$J(T,5)
	set VL=VL_$J("",24-VL.length())_V
	set VL=VL_$J("",34-VL.length())_$J(TOTB(1),9,2)
	do VOM
	set VL="Permanent Accounts:"
	do VP13 quit:VFMQ!verror.get()  set V=$J(T,5)
	set VL=VL_$J("",24-VL.length())_V
	set VL=VL_$J("",34-VL.length())_$J(TOTB(2),9,2)
	do VOM
	set VL="Direct Deferment:"
	do VP14 quit:VFMQ!verror.get()  set V=$J(T,5)
	set VL=VL_$J("",24-VL.length())_V
	set VL=VL_$J("",34-VL.length())_$J(YDIR,9,2)
	do VOM
	set VL="Indirect Deferment:"
	do VP15 quit:VFMQ!verror.get()  set V=$J(T,5)
	set VL=VL_$J("",24-VL.length())_V
	set VL=VL_$J("",34-VL.length())_$J(NDIR,9,2)
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,LNADV]CID

        type public Number NUM

	type Number PT

	set PT = 1
	set NUM = NUM + 1

	do TV1CB

	quit

TV1CB //
	type public Boolean ER
        type public Number CID, TACR(), TBAL(), TCRLMT(), TTDUE(), TIYTD(), RELCID
	type public String LNADV	

	type RecordLN ln = Db.getRecord("LN", "CID = :CID", 1)
	if ln.pcidstat do V1C quit

	set RELCID = +ln.relcid 

	if Db.isDefined("LN", "RELCID = :RELCID") set RELCID = 0

	// totals  
	set TACR(2) = TACR(2) + (+ln.acr), TACR(1) = TACR(1) + (+ln.acr)  
	set TBAL(2) = TBAL(2) + (+ln.bal), TBAL(1) = TBAL(1) + (+ln.bal)  
	set TCRLMT(2) = TCRLMT(2) + ln.crlmt, TCRLMT(1) = TCRLMT(1) + ln.crlmt  
	set TIYTD(2) = TIYTD(2) + ln.iytd, TIYTD(1) = TIYTD(1) + ln.iytd  
	set TTDUE(2) = TTDUE(2) + ln.tdue, TTDUE(1) = TTDUE(1) + ln.tdue  

	kill LNADV do ^LNSAR set ER = 0 

	quit

VP2	// Column post-processor - [SYSDEV,LNADV]CID

        type public Number CLOSE

	type Number LV, RA, SA
	
	set (LV, RA, SA) = ""
	if CLOSE do V1C 
	quit 

V1LS 	//
        type public Number LV, SAR()

	set LV = SAR(LV).exists() if LV = "" kill SAR do V1AT 
	quit

V1AS 	//
        type public Number LV, RA, SAR()

	set RA = SAR(LV, RA).exists() if RA = "" do V1LS 
	quit	

V1BS    //
        type public Number CNT, LV, RA, SA, SAR(), TSAR()

	type Number I

	set SA = SAR(LV, RA, SA).exists() if SA = "" do V1AS quit 
	if 'TSAR(LV, RA, SA).exists() set TSAR(LV, RA, SA) = 0, CNT = CNT + 1 
	for I = 1:1:5 set TSAR(LV, RA, SA).piece("|", I) = TSAR(LV, RA, SA).piece("|", I) + SAR(LV, RA, SA).piece("|", I) 
	do V1BS 
	quit

V1AT	// 
	type public Number CNT

	if CNT > 150 do V1AR 
	if CNT > 150 set CNT = 0 do V2CB 
	quit

V1LR 	//
        type public Number LV, TSAR()

	set LV = TSAR(LV).exists() if LV = "" kill TSAR 
	quit

V1AR 	//
        type public Number LV, RA, TSAR()

	set RA = TSAR(LV, RA).exists() if RA = "" do V1LR 
	quit

V1BR 	//
        type public Number JOB, LV, SA, SAR, RA, RATE, TLEV, TSAR()

	set SA = TSAR(LV, RA, SA).exists() if SA = "" do V1AR quit
	type RecordLNXSLTS lnxslts = Db.getRecord("LNXSLTS", "JOB = :JOB, TLEV = :TLEV, RATE = :RATE, SAR = :SAR", 1)
	if 'lnxslts.exists() do {
		set lnxslts.abal = lnxslts.abal + TSAR(LV, RA, SA).piece("|", 1) 
		set lnxslts.acr = lnxslts.acr + TSAR(LV, RA, SA).piece("|", 2)
		set lnxslts.tdue = lnxslts.tdue + TSAR(LV, RA, SA).piece("|", 3)
		set lnxslts.bal = lnxslts.bal + TSAR(LV, RA, SA).piece("|", 4)
		set lnxslts.num = lnxslts.num + TSAR(LV, RA, SA).piece("|", 5)
		}
	do V1BR 
	quit

V1C     //
        type public Number MAX(), TOTB(), VT()
        type public String SRC
	
	type ResultSet rs = Db.select("SRC", "PAT")
	set SRC = rs.getCol("SRC") if SRC '= ""
         
	if '(SRC]MAX(1)) do V1CB quit
        set VT(0) = VT(0) + VT(1), VT(1) = 0 do VRSUM 
	quit

V2CB    //
        type public Number ACN, MIN(), Q()

	type Number BATCH, CIF(), X

	#ACCEPT PGM = Tanuja Bhol DATE = 10/10/2005
	if 1 set X = "" for  set X = Q(2, X).exists() quit:X = ""  xecute Q(2, X) else  quit
        else  do V2C quit
	type RecordCIF cif = Db.getRecord("CIF", "ACN = :ACN", 1)
        set CIF(1) = cif.acn     
        set BATCH = MIN(3)
	quit

V1CB    //
        type public Number MIN(), Q()

	type Number ACN, VH(), VNEWHDR, X

	#ACCEPT PGM = Tanuja Bhol DATE = 10/10/2005
	if 1 set X = "" for  set X = Q(1, X).exists() quit:X = ""  xecute Q(1, X) else  quit 
        else  do V1C quit
     
        set ACN = MIN(2) 
        set VH(0) = 0, VNEWHDR = 1
	quit

V2C     //
        type public Number ACN, MAX(), VT()
	
	type ResultSet rs1 = Db.select("ACN", "PAT")
	set ACN = rs1.getCol("ACN") if ACN '= ""

        if '(ACN > MAX(2)) do V2CB quit
        set VT(1) = VT(1) + VT(2), VT(2) = 0 do V1C 

	quit



VP3	// Column pre-processor - [SYSDEV,LN]BAL

	type public Number V, Z
	type public String LN(), NDIR, TOTB(), YDIR
	
	if (Z < 3) set Z = LN(102).piece("|", 5)
	if ('Z.isNull()) do {
		set TOTB(Z).piece("|", 1) = TOTB(Z) + V
		set TOTB(Z).piece("|", 2) = TOTB(Z).piece("|", 2) + 1
		}

	if LN(102).piece("|", 5) do {
		set YDIR.piece("|", 1) = YDIR + V
		set YDIR.piece("|", 2) = YDIR.piece("|", 2) + 1
		}
	else  do {
		set NDIR.piece("|", 1) = NDIR + V	
		set NDIR.piece("|", 2) = NDIR.piece("|", 2) + 1
		}

	quit

VP4	// Column pre-processor - [SYSDEV,LNXSL]BAL

       	type public Number V, Z
	type public String LNXSL(), NDIR, TOTB(), YDIR

	if 'LNXSL(102).length() quit
	
	if (Z < 3) set Z = LNXSL(102).piece("|", 5)

	if ('Z.isNull()) do {
			set TOTB(Z).piece("|", 1) = TOTB(Z) + V
			set TOTB(Z).piece("|", 2) = TOTB(Z).piece("|", 2) + 1
			}

	if LNXSL(102).piece("|", 27) do {
		set YDIR.piece("|", 1) = YDIR.piece("|", 1) + V
		set YDIR.piece("|", 2) = YDIR.piece("|", 2) + 1
		}
	else  do {
		set NDIR.piece("|", 1) = NDIR + V
		set NDIR.piece("|", 2) = NDIR.piece("|", 2) + 1
		}
























	quit

VP5	// Column post-processor - [SYSDEV,LNXSL]DIRDEF

     	type public Number IOSL, NUM2, RELCID, %REPEAT, VLC

	type Number V, VL

	if 'RELCID set (V, VL) = ""
	else  set NUM2 = NUM2 + 1
	
	if VLC + %REPEAT + 3 > IOSL set VLC = 100















	quit

VP6	// Column post-processor - [SYSDEV,LNADV]CID

        type public Number PT

        type Number V

	if PT = 1 set V = ""
	set PT = 1





	quit

VP7	// Column pre-processor - Variable: AMT1

	type public String ADV, LNADV()
	
        type Number ADVDT1, AMT1, APOB1, AVB1, CMT1, OFF1, SAR1

	set AMT1 = LNADV(ADV).piece("|", 1)
	set ADVDT1 = LNADV(ADV).piece("|", 2)
	set SAR1 = LNADV(ADV).piece("|", 3)
	set OFF1 = LNADV(ADV).piece("|", 4)
	set APOB1 = LNADV(ADV).piece("|", 6)
	set AVB1 = LNADV(ADV).piece("|", 7)
	set CMT1 = LNADV(ADV).piece("|", 5)


	quit

VP8	// Column post-processor - Variable: CMT1

        type public Number ADV

        type Number VL

	if ADV = 0 set VL = ""


	quit

VP9	// Column pre-processor - Primary Acct  Borrower         F   Balance   Acr Int

        type Number PT

	set PT = 0
	quit

VP10	// Column pre-processor - Variable: TCNT


	/* ---- Revision History ---------------------------------------------

		11/21/06 - MBUIM - CR 23240
			   Scopped variables correctly to eliminate
			   undefined errors when report is run.
	
	----------------------------------------------------------------------
	*/

	type public Number NUM, NUM2, TCNT
 
	set TCNT = NUM + NUM2
	quit

VP11	// Column pre-processor - Variable: RBAL

	/* ---- Revision History ---------------------------------------------

		11/10/06 - MBUIM - 23240
			   Scopped variables correctly to eliminate
		 	   undefined errors when report is run.
	
	------------------------------------------------------------------
	*/

        type public Number RBAL, RACR, RCRLMT, RIYTD, RTDUE
	type public Number TACR(), TBAL(), TCRLMT(), TIYTD(), TTDUE
	
	set RBAL = TBAL(1) + TBAL(2)
	set RACR = TACR(1) + TACR(2)
	set RCRLMT = TCRLMT(1) + TCRLMT(2)
	set RIYTD = TIYTD(1) + TIYTD(2)
	set RTDUE = TTDUE(1) + TTDUE(2)




	quit

VP12	// Column pre-processor - Variable: T

	/* ---- Revision History ---------------------------------------------
	
		11/21/06 - MBUIM - CR 23240
			   Scopped variable T correctly to eliminate run 
			   time undefined error.
	----------------------------------------------------------------
	*/
	
	type public String TOTB()

	type public Number T	

	set T = TOTB(1).piece("|", 2)


	quit

VP13	// Column pre-processor - Variable: T

	/* ---- Revision History ---------------------------------------------
        
		11/21/06 - MBUIM - CR 23240
			   Scopped variable T correctly to eliminate run
			   time undefined error.
	   -------------------------------------------------------------
	*/
	type public String TOTB()

	type public Number T
	
	set T = TOTB(2).piece("|", 2)

	quit

VP14	// Column pre-processor - Variable: T

	/* ---- Revision History ---------------------------------------------
	
		11/21/06 - MBUIM - CR 23240
			   Scopped variable T correctly to eliminate run
			   time undefined error.
	   --------------------------------------------------------------
	*/
	
        type public String YDIR

	type public Number T
	
	set T = YDIR.piece("|", 2)



	quit

VP15	// Column pre-processor - Variable: T

	/* ---- Revision History --------------------------------------------
		
		11/21/06 - MBUIM - CR 23240
			   Scopped variable T correctly to eliminate run
			   time undefined error.
	   -------------------------------------------------------------
	*/

        type public String NDIR

	type public Number T
	
	set T = NDIR.piece("|", 2)




	quit
