LNLS1FL(RecordLNLS1 lnls1, String vpar, Boolean vparNorm) // LNLS1 - Loans Sold - Investor Level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              06/20/2006
	// Trigger Definition (2)                      12/21/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnls1.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnls1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnls1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String INCD = lnls1.incd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("INCD").exists() do vkchged quit                // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNLS1",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNLS1","INCD = :lnls1.incd")      // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String INCD

	type RecordLNLS1 lnls1 = Db.getRecord("LNLS1","INCD=:INCD")
	if (%ProcessMode = 2) do {
		do lnls1.setMode(2)

		do LNLS1FL(lnls1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNLS1 lnls1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNLS1","INCD = :lnls1.incd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(lnls1,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(lnls1,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnls1))  S ^UTBL("INCD",vobj(lnls1,-3))=vobj(lnls1)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNLS1 lnls1

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(lnls1,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("INCD",vobj(lnls1,-3))                       // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNLS1 lnls1

	// Type local variables for access keys for defaults
	type public String INCD

	if lnls1.grpctrl.isNull() set lnls1.grpctrl = 0        // grpctrl
	if lnls1.leadinst.isNull() set lnls1.leadinst = 0      // leadinst
	if lnls1.revcus.isNull() set lnls1.revcus = 0          // revcus
	quit


vreqn // Validate required data items

	type public RecordLNLS1 lnls1

	if lnls1.acn.isNull() do vreqerr("ACN") quit
	if lnls1.desc.isNull() do vreqerr("DESC") quit
	if lnls1.grpctrl.isNull() do vreqerr("GRPCTRL") quit
	if lnls1.leadinst.isNull() do vreqerr("LEADINST") quit
	if lnls1.revcus.isNull() do vreqerr("REVCUS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNLS1 lnls1

	if lnls1.incd.isNull() do vreqerr("INCD") quit

		if vx("ACN").exists(),lnls1.acn.isNull() do vreqerr("ACN") quit
		if vx("DESC").exists(),lnls1.desc.isNull() do vreqerr("DESC") quit
		if vx("GRPCTRL").exists(),lnls1.grpctrl.isNull() do vreqerr("GRPCTRL") quit
		if vx("LEADINST").exists(),lnls1.leadinst.isNull() do vreqerr("LEADINST") quit
		if vx("REVCUS").exists(),lnls1.revcus.isNull() do vreqerr("REVCUS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS1","MSG",1767,"LNLS1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNLS1 lnls1
	if 'lnls1.acn.isNull() set vfkey("^CIF("_""""_lnls1.acn_""""_","_1_")")="LNLS1(ACN) -> CIF"
	if 'lnls1.escwash.isNull() set vfkey("^ACN("_""""_lnls1.escwash_""""_","_50_")")="LNLS1(ESCWASH) -> DEP"
	if 'lnls1.piwash.isNull() set vfkey("^ACN("_""""_lnls1.piwash_""""_","_50_")")="LNLS1(PIWASH) -> DEP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNLS1 lnls1
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":lnls1.acn") set vERRMSG = $$^MSG(8563,"LNLS1(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'lnls1.escwash.isNull() if 'Db.isDefined("DEP",":lnls1.escwash") set vERRMSG = $$^MSG(8563,"LNLS1(ESCWASH) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'lnls1.piwash.isNull() if 'Db.isDefined("DEP",":lnls1.piwash") set vERRMSG = $$^MSG(8563,"LNLS1(PIWASH) -> DEP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNLS1 lnls1
	if vx("").order().isNull() do AUDIT^UCUTILN(lnls1,.vx(),1,"|") quit
	if vx("ACN").exists()!vx("PIWASH").exists()!vx("ESCWASH").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnls1,.vx(),1,"|")
	quit


vbi1 // Trigger BEFORE_INSERT - Before insert trigger for LNLS1 

	type public RecordLNLS1 lnls1
	/*
	----Revision History---------------------------------------------------

	12/05/05 - chhabris - CR18008
		   Replaced the deprecated methods. Also removed the revision
		   history prior to 2004.
	-----------------------------------------------------------------------

	*/
	
	type public Boolean ER
	type public Number VALUE
	type String X,XESCWASH,XPIWASH

	// CIF verification
	// Invalid CIF
	
	set X=lnls1.acn if X="" do Runtime.setErrMSG("LNLS1",1767,"LNLS1.ACN") quit:ER 
	type RecordCIF cif=Db.getRecord("CIF","ACN=:X",1)
	if cif.getMode() set VALUE=1
	else  set VALUE=0
	
	if 'VALUE do Runtime.setErrMSG("LNLS1",7575) quit:ER 

	// Prin and Int Custodial Account verification
	if lnls1.piwash'="" do { quit:ER 
		set XPIWASH=lnls1.piwash
		type RecordDEP dep=Db.getRecord("DEP","CID=:XPIWASH",1)

			// Invalid account
			if dep.cid="" do Runtime.setErrMSG("LNLS1",1259,XPIWASH) quit:ER 
			if dep.grp="ESC" do Runtime.setErrMSG("LNLS1",1368) quit:ER 
		
		}
	
	// Escrow Custodial Account verification
	if lnls1.escwash'="" do { quit:ER 
		set XESCWASH=lnls1.escwash
		type RecordDEP dep=Db.getRecord("DEP","CID=:XESCWASH",1)
		if dep.getMode() set VALUE=dep.cid
		else  set VALUE=""

		// Invalid account
		if VALUE="" do Runtime.setErrMSG("LNLS1",1259,XESCWASH) quit:ER 
		}
	quit 

vbu1 // Trigger BU_LNLS1 - Before update LNLS1

	type public RecordLNLS1 lnls1
	do lnls1.setAuditFlag(1)
	/*
	---- Revision History ------------------------------------------------
	12/05/05 - chhabris - CR18008
		   Replaced the deprecated methods. 
	----------------------------------------------------------------------
	*/
		
	type public Boolean ER
	type Number VALUE
	type String XPIWASH,XESCWASH
	
	// CIF verification
	if 'lnls1.acn.isNull() do { quit:ER 
		type RecordCIF cif=Db.getRecord("CIF","ACN=:lnls1.acn",1)
		if cif.getMode() set VALUE=1
		else  set VALUE=0
		if 'VALUE do Runtime.setErrMSG("LNLS1",7575) quit:ER 
		}

	// Prin and Int Custodial Account verification
	if lnls1.piwash'="" do { quit:ER 
		set XPIWASH=lnls1.piwash
		type RecordDEP dep=Db.getRecord("DEP","CID=:XPIWASH",1)

		if dep.getMode() do {

			// Invalid account
			if dep.cid.isNull() do Runtime.setErrMSG("LNLS1",1259,XPIWASH) quit:ER 
			if dep.grp="ESC" do Runtime.setErrMSG("LNLS1",1368) quit:ER 
			}
		}
	
	// Escrow Custodial Account verification
	if lnls1.escwash'="" do { quit:ER 
		set XESCWASH=lnls1.escwash
		type RecordDEP dep=Db.getRecord("DEP","CID=:XESCWASH",1)

		if dep.getMode() set VALUE=dep.cid
		else  set VALUE=""

		// Invalid account
		if VALUE.isNull() do Runtime.setErrMSG("LNLS1",1259,XESCWASH) quit:ER 
		}
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNLS1 lnls1

	if lnls1.incd.length()>5 set vRM = $$^MSG(1076,5) do vdderr("INCD", vRM) quit
	set X = lnls1.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	if lnls1.desc.length()>30 set vRM = $$^MSG(1076,30) do vdderr("DESC", vRM) quit
	set X = lnls1.escwash if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ESCWASH", vRM) quit
	if '("01"[lnls1.GRPCTRL) set vRM=$$^MSG(742,"L") do vdderr("GRPCTRL", vRM) quit
	set X = lnls1.invsttyp if 'X.isNull(),'Db.isDefined("UTBLINVSTTYP","X") set vRM = $$^MSG(1485,X) do vdderr("INVSTTYP", vRM) quit
	if '("01"[lnls1.LEADINST) set vRM=$$^MSG(742,"L") do vdderr("LEADINST", vRM) quit
	set X = lnls1.piwash if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PIWASH", vRM) quit
	if '("01"[lnls1.REVCUS) set vRM=$$^MSG(742,"L") do vdderr("REVCUS", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNLS1","MSG",979,"LNLS1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordLNLS1 lnls1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("INCD")
	set voldkey = vux.piece("|",1),vobj(lnls1,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(lnls1,-3) = vnewkey // Copy new keys into object
	type RecordLNLS1 vnewrec = lnls1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNLS1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(lnls1,-3) = vux.piece("|",1)                  // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordLNLS1 lnls1
	type public String vpar

	do Db.delete("LNLS2","INCD=:lnls1.incd",vpar)          // Cascade delete

	quit
