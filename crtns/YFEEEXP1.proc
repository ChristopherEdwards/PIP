public YFEEEXP1(String PLN,RecordDEP dep)	//Public;Service Fee Exemption Plans' Custom Fee Schedule Program
	/*
	   ORIG: GEISS - 08/17/95
	   DESC: Service Fee Exemption Plans' Custom Fee Schedule Program

	   KEYWORDS:

	   ARGUMENTS:
	   . PLN Exemption Plan Name /TYP=T/REQ

	   INPUTS: SRVDT

	   RETURNS:
	   . FEEAMT - service fee amount   /TYP=$

	   EXAMPLE:

	---- Revision History ------------------------------------------------
	
	11/02/06 - Hillanbrand CR 23709
	           Modified HIST section.  Set ETC=TCMT.piece(",",4)

	08/24/05 - RussellDS - CR16911
		   Add + to setting of variables from depexp.
		   
		   Fix PSL errors.
		   
		   Remove old revision history.
	  
	----------------------------------------------------------------------
	*/

	type public String PLTP

	if PLN="" quit
	
	set PLTP=+PLTP.get()

	type public String ER,FEECAT,FEEPLN,FEETYP,RM,TRNGRP
	type public Number CHGOPT,CID,FEEAMT,REMAMT,SRVSUM
	type public Date %EffectiveDate,SRVDT

	type Number BAL,BB,CAT,CAT1,CAT3,CNT,DIRECT
	type String ETC,EXPL,FB,FIB,MOC,RG,RTG,SCFRE,TG,TRN,TGROUP
	type Date SCLD,SCND,TEMDT,TREFD

	set EXPL=1
	set TREFD=$select(%EffectiveDate.get()="":%SystemDate,1:%EffectiveDate)
	set TGROUP=FEETYP

	type RecordTTX ttx=Class.new("RecordTTX")

	/* 
	 SRVDT will not always exist.  SRVDT is the effective date of the
	 service charge date that is being affective.
	*/

	if 'SRVDT.get() do {
		// Service Charge - Next Date
		set SCND=dep.scnd	
		// Service Charge - Last Date
		set SCLD=dep.scld
		}

	else  do { quit:ER
		// Service Charge Frequency
		set SCFRE=dep.scfre
		set SCND=SRVDT
		set SCLD=$$NJD^UFRE(SCND,SCFRE,,1) 
		}

	type ResultSet rs

	// For charge option 1 use transaction effective date rather than SCND
	if CHGOPT=1 do {	
		set TEMDT=TREFD+1
		set rs=Db.select("EFD","YFEEEXP","PLAN=:PLN AND EFD<:TEMDT","EFD DESC")
		}

	else  do {
		set TEMDT=SCND+1
		set rs=Db.select("EFD","YFEEEXP","PLAN=:PLN AND EFD<:TEMDT","EFD DESC")
		}

	// Exemption Plan "_PLN_" not defined"
	if rs.isEmpty() set ER=1 set RM=$$^MSG(2718,PLN) quit

	if rs.next() set %EffectiveDate=rs.getCol("EFD")

	type RecordDEPEXPLN depexp=Db.getRecord("DEPEXPLN","CID=:CID,EXMPLN=:PLN",1)
	type RecordYFEEEXP yfeeexp=Db.getRecord("YFEEEXP","PLAN=:PLN,EFD=:%EffectiveDate")

	set (CAT,CAT1,CAT3)=0
	
	type ResultSet rs1=Db.select("FTYPE","YFEEEXP1","PLAN=:PLN AND EFD=:%EffectiveDate")
	if 'rs1.isEmpty() set CAT1=1

	type ResultSet rs3=Db.select("FTYPE","YFEEEXP3","PLAN=:PLN AND EFD=:%EffectiveDate")
	if 'rs3.isEmpty() do {

		set CAT3=1

		type Date TRDATE
		type String FTYPE

		set FTYPE=""
		set TEMDT=%EffectiveDate+1

		type ResultSet rs=Db.select("TRNGRPDT,TRNCD","UTBLTRNGRP","TRNGRP=:PLN AND TRNGRPDT<:TEMDT","TRNGRPDT DESC")
		if rs.next() do {
			set TRDATE=rs.getCol("TRNGRPDT")
			set FTYPE=rs.getCol("TRNCD")
			}

		if FTYPE'="" set TGROUP=PLN
		}

	// reduce charge tran. group
	set RG=yfeeexp.rctg

	if depexp.getMode() do {
		// full exp. bal acct.
		set FB = +depexp.febal

		// balance base acct.
		set BB = +depexp.balb

		// free items acct.
		set CNT = +depexp.frits

		// free items basis acct.
		set FIB = +depexp.fritsb

		// method of calc. acct.
		set MOC = +depexp.moc
		}

	else  do {
		// full exp. balance
		set FB = +yfeeexp.febal

		// balance base
		set BB = +yfeeexp.balb

		// free items
		set CNT = +yfeeexp.frits

		// free items basis
		set FIB = +yfeeexp.fritsb

		// method of calculation
		set MOC = +yfeeexp.moc
		}

	if CAT1 set CAT=$select(CAT3:2,1:1)
	if CAT3 set CAT=$select(CAT1:2,1:3)

	// flag to indicate if cat 1 direct charge
	set DIRECT=0

	// remaining amount
	set REMAMT=0
	set FEEAMT=+FEEAMT.get()
	set ER=0

	// SRVSUM will not exist if online and not effective date S CTL="11"
	if 'SRVSUM.data() do EXT^SRVSUM(.dep,.ttx,.SRVSUM,.FEEPLN,.TRNGRP,"11",,SCND.get(),PLTP,EXPL)

	// Get balance base from SRVSUM balances. SRVSUM already holds this info
	set BAL=0

	// Average Ledger Balance
	if BB=1 set BAL=SRVSUM.piece("|",5)

	// Average Collected Balance
	else  if BB=2 set BAL=SRVSUM.piece("|",6)

	// Average Investable Balance
	else  if BB=3 set BAL=SRVSUM.piece("|",7)

	// Low Balance (Intra-Day)
	else  if BB=4 set BAL=SRVSUM.piece("|",8)

	// Low Balance (End of Day)
	else  if BB=5 set BAL=SRVSUM.piece("|",9)

	type Number REDUCE 
	set REDUCE=0

	// no fee (balance >= limit)
	if FB'=0,BAL'<FB,RG="" quit

	if FB'=0,(BAL'<FB),(RG'="") set REDUCE=1

	// determine number of free items
	if FIB'=0 set CNT=(BAL\FIB)*CNT

	if FEECAT=4 do { quit
		type RecordYFEEEXP4 yfeeexp4=Db.getRecord("YFEEEXP4","PLAN=:PLN,EFD=:%EffectiveDate,FTYPE=:FEETYP",1)	
		set FEEAMT=FEEAMT+yfeeexp4.famt
		}
	
	if CHGOPT=1 set DIRECT=1
	
	// get category 1 fee types
	if CAT<3 do CAT1

	// get category 3 items
	if CAT>1,FEECAT>1 do TRNGRP(TGROUP,.TG)
	if ER quit

	if CHGOPT=1 do DIRECT(FEECAT,.dep) quit

	// get reduce charge tran. codes
	if RG'="" do TRNGRP(RG,.RTG)
	quit:ER

	// loop thru hist and calculate feeamt
	if MOC=0 do {
		set FEEAMT=FEEAMT+$$HIST(CNT,.dep)
		}

	// average calculation method
	else  do AVG(.dep)

	quit


HIST(Number F,RecordDEP dep)	/* loop through account's history and count # of transactions for each
	  	   transaction code in group, excluding the free items
		   Parameter F - number of free items
		   returns:  fee amt|number of times items appear in history
	 	     	or if DIRECT is set returns # of free items remaining

		*/
	
	type public String HIST(),RG,RTG(),TG()
	type public Number CID,DIRECT,REDUCE,TCMT
	type public Date SCLD
	
	type String ETC
	type Number AMT,C,end,FM,I,J,SEQ
	type Date CUTOFF,FD,HJD,TD
	
	set AMT=0
	
	// History Cut-Off Date
	set CUTOFF=dep.hisctf 
	if CUTOFF set CUTOFF=CUTOFF+1
	
	set FD=$select(CUTOFF>SCLD:CUTOFF,1:(SCLD+1))
	set TD=%SystemDate
	
	// CNT=# free items, I=total count of transactions posted from group
	set SEQ="" 
	set I=0

	type DbSet ds=Db.selectDbSet("HIST","CID=:CID","TSEQ DESC")
	while ds.next() do {
		type RecordHIST hist=ds.getRecord()

		set SEQ=hist.tseq
		set HJD=hist.tjd		
		if HJD<FD!(HJD>TD) quit

		set ETC=hist.etc
		set FM=0

		if ETC="FM" set TCMT=hist.tcmt set ETC=TCMT.piece(",",4) set FM=1

		// not in group
		if ETC=""!('TG(ETC).data()) quit

		// error correct or reversal
		if hist.itc6!(hist.itc12) quit

		// exclude original ec/rev
		if Db.isDefined("HISTR","CID=:CID,TSEQ=:SEQ") quit

		set I=I+1
		set HIST(I)=ETC

		// if category 1 item get number of fees from teller comment
		if FM set C=TCMT.piece(":",3)-TCMT.piece(":",2)
		if  for C=C-1:-1:1 set I=I+1 set HIST(I)=ETC
		}

	// if called by DIRECT return # free items available (I=#used, F=#free)
	if DIRECT quit $select(I<F:F-I,1:0)

	// remove free/reduce charge items
	set end=I-F+1
	if end<1 set end=1

	/* if a reduce charge transaction group exist then number of free items
	   becomes number of reduced items.
	*/

	for J=I:-1:end set:RG'="" AMT=AMT+RTG(HIST(J)).get() kill HIST(J)

	/* if a reduce transaction group exist and the account satifies the
	   full exemption balance then use the reduce transaction group for
	   the fee amounts
	*/

	set J=""

	if REDUCE do {
		for  set J=HIST(J).order() quit:J=""  do {
			set AMT=AMT+RTG(HIST(J))
			}
		}

	else  do {
		for  set J=HIST(J).order() quit:J=""  do {  
			set AMT=AMT+TG(HIST(J))
			}
		}

	quit AMT_"|"_I


TRNGRP(String FT,String AN)	/* get transaction codes and fee amounts for transaction group
		  		   FT and place in array AN.
				*/

	type String ETC
	type Date %EffectiveDate
	type public String ER,RM
	type public Date TEMPDT,TREFD

	set ETC=""
	set TEMPDT=TREFD+1

	type ResultSet rs=Db.select("TRNGRPDT","UTBLTRNGRP","TRNGRP=:FT AND TRNGRPDT<:TEMPDT","TRNGRPDT DESC")

	// Transaction Group "_FT_" not defined.
	if rs.isEmpty() set ER=1 set RM=$$^MSG(2719,FT) quit

	if rs.next() set %EffectiveDate=rs.getCol("TRNGRPDT")

	type DbSet ds=Db.selectDbSet("UTBLTRNGRP","TRNGRP=:FT AND TRNGRPDT=:%EffectiveDate")
 	while ds.next() do {
		type RecordUTBLTRNGRP utltrn=ds.getRecord("UTBLTRNGRP")
		set ETC=utltrn.trncd
		set AN(ETC)=utltrn.feeamt
		}

	quit


CAT1	/* get category 1 transaction codes and fee amounts
	   sets up TG array with category 1 fee types
	   TG(etc)=amount|charge option
	*/

	type public String FEEPLN,FEETYP,TG
	type public Date TREFD
	type public Number DIRECT
	type Date %EffectiveDate,EFDSRV,TEMDT
	type String ETC

	set TEMDT=TREFD+1
	
	type ResultSet rs=Db.select("EFD","YFEEEXP","PLAN=:PLN AND EFD<:TEMDT","EFD DESC")
	if rs.isEmpty() quit
	if rs.next() set %EffectiveDate=rs.getCol("EFD")
	
	type ResultSet rs2=Db.select("FEEDT","FEEPLN","PLAN=:FEEPLN AND FEEDT<:TEMDT","FEEDT DESC")
	if rs2.isEmpty() quit
	if rs2.next() set EFDSRV=rs2.getCol("FEEDT")

	type DbSet ds=Db.selectDbSet("YFEEEXP1","PLAN=:PLN AND EFD=:%EffectiveDate")
	while ds.next()	do {
		type RecordYFEEEXP1 yfeeexp1=ds.getRecord("YFEEEXP1")
		set ETC=yfeeexp1.ftype
		set TG(ETC)=yfeeexp1.famt

		type RecordFEESRV feesrv=Db.getRecord("FEESRV","PLAN=:FEEPLN,FEEDT=:EFDSRV,FEECAT=1,FEETYP=:ETC",1)
		set TG(ETC).piece("|",2)=feesrv.chgopt

		/*
		if category 1 item is charge at time of service and this is
		during analysis then set fee amount for item to zero.  The
		item will still be used to determine free/reduced items but
		no charge is to be assessed
		*/
		
		if 'DIRECT set TG(ETC).piece("|",1)=0
		}

	quit


DIRECT(String FEECAT,RecordDEP dep)	//

	/* 
	 compute fee amount for category 1 and category 3 item with
	 charge option of 1- time of service or during analysis
	*/

	type public String FEETYP,PLTP,TG()
	type public Number CAT,CHGOPT,CID,CNT,FEECNT
	type public Number FEEAMT,FM,SEQ
	type public Date SCND
	type Number FCNT,TSQ,USED
	type String ETC,FREE,ITC,REC,TCMT

	/*
	 get total count of category 1 items already processed from ^SRV;  if
	 count already exceeds free item count return fee amount.
	 if only category 1 items than item is free,
	 otherwise go through history to determine if fee items have been used
	*/

	set ETC="" 
	set USED=0
	
	for  set ETC=TG(ETC).order() quit:ETC=""  do { if USED'<CNT quit
		type RecordSRVD srvd=Db.getRecord("SRVD","CID=:CID,PLTP=:PLTP,SCND=:SCND,FEECAT=:FEECAT,FEETYP=:ETC",1)
		if 'srvd.getMode() quit

		if TG(ETC).piece("|",2)=1 set USED=USED+srvd.srvcntd
		else  set USED=USED+srvd.srvcnta
		}

	set FCNT=FEECNT

	/* if free items still remain and only category 1 items are on the
	   exemption plan, return the charge less amount for count-free items
	*/
	if CAT=1,CHGOPT=2 do { quit
		if FEECNT>CNT set FEEAMT=FEEAMT+(TG(FEETYP)*(FEECNT-CNT))
		}

	
	set FREE=$$HIST(CNT,.dep)

	if FREE>FEECNT set FCNT=0
	else  set FCNT=FEECNT-FREE

	if TG(FEETYP).data() set FEEAMT=TG(FEETYP)*FCNT

	quit


AVG(RecordDEP dep)	// Compute service fee amount based on "average" formula:
	/*
	   Total service charges / # of chargeable items=avg service chg per item
	   Avg service charge x number of free items = Free item amount
	   Total service charges - free item amount = Net service charge

	*/
	type Number AMT,AVGSC,FRAMT
	type String INFO
	type public Number CHGOPT,CID,CNT,FEEAMT
	
	if CHGOPT=1 set FEEAMT=0

	set INFO=$$HIST(0,.dep)

	if INFO.piece("|",2)=0 quit

	// Total accumulated/#chargeable items
	set AVGSC=$$^SCARND(INFO.piece("|",1)/INFO.piece("|",2),,CID)

	// avg service charge * #free items
	set FRAMT=AVGSC*CNT

	// total accumulated - free amount
	set AMT=INFO-FRAMT
	
	if AMT<0 set AMT=0

	set FEEAMT=FEEAMT+AMT

	quit

vSIG()	quit "60571^61095^Laura Hillanbrand^10840"	// Signature - LTD^TIME^USER^SIZE
