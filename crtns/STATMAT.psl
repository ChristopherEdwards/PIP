STATMAT	  /*
ORIG: VETSENM - 04/25/2001
DESC: Customer Relationship Status Matrix Main

---- Comments --------------------------------------------------------

 This is the screen driver for the new STATMAT0x functions. 

---- Revision History ------------------------------------------------
	18/8/05  - SREERAM - 16682
		   Initialized Unscoped Variables for DBI3
		   Converted FILE1,FILE2,ONEDIM,TWODIM in the
		   PSL format. Modified nextKey() to Db.select().

	10/15/02 - Spier - 51089
		   Removed setting of ROW=ROW and COL=COL
	
	10/03/01 - VETSENM - 47727
                   Correct the use of %REPEAT variable.
                  
	08/14/01 - VETSENM - 46279
	           Post processor for UTBLRELMAT.MATRIX has been corrected
		   for proper displaying.            
	
	07/17/01 - VETSENM - 46279:4
	           Correct the use of %REPEAT variable to prevent 
 	           displaying the "Next" selection when running @STATMAT03
	           for a matrix without populated tiers.            

	
	07/05/01 - VETSENM - 43026
	           Correct section VPG001.             	

 */
	quit

NEW     set %ProcessMode=0 do INIT quit            //create
UPD     set %ProcessMode=1 do INIT quit            //update
INQ     set %ProcessMode=2 do INIT quit            //inquiry
DEL     set %ProcessMode=3 do INIT quit            //delete
        
INIT    //
	type String VFMQ,OLNTB
	type Number %PG,%PAGE,%REPEAT
	set %PG=-1,%PAGE=1,%REPEAT=12                    
        kill VFMQ
        kill OLNTB

VPG     //Page control
        if %PG<0 do VPG01 do VPG0 quit
        if %PG>0 do VPG001 do VPG0 quit
        if %PG=0 do VPG0 quit

VPG0    //
	type Public Boolean ER
	if ER quit

        if "DFQ"[VFMQ do VER quit
        set %PG=%PG+1
        do VPG quit

VPG01   // Set up screen for Matrix.
	type Public String VFMQ
	type String %TAB(),%READ
	type Number %OSAVE
        set %TAB("NAME")=".NAME/HLP=[UTBLRELMAT1]NAME/XPP=D PPNAME^STATMAT/TBL=[UTBLRELMAT]MATRIX/TBL=[UTBLRELMAT]"
	
        set %READ="@@%FN,,,NAME/REQ"
        set %OSAVE=%ProcessMode
        do ^UTLREAD if VFMQ="Q" quit
        quit
       
VPG001  //Screen Set Up for data entry.
	type Public Number %PG,%OSAVE,%REPEAT
	type Public Number MATROW,MATCOL,%MODS
	type public String NAME
	type String SID
	type public Boolean ER
	type RecordUTBLRELMAT2 fUTBLREL	

	type RecordUTBLRELMAT utblmat=Db.getRecord("UTBLRELMAT","MATRIX=:NAME")
	       
        //type RecordUTBLRELMAT utblmat
	type RecordUTBLRELMAT1 fUTBLREL1	
	type RecordUTBLRELMAT2 fUTBLREL2	

	set MATROW=utblmat.rowatt
	set MATCOL=utblmat.colatt

        //Two-dimensional matrices
        if MATCOL do TWODIM quit:ER              
    
        //One-dimensional matrices
        if 'MATCOL do ONEDIM quit:ER                 

	set %MODS=%PG*%REPEAT-%REPEAT+1
        set %OSAVE=%ProcessMode
	
	if MATCOL do {

		 if %ProcessMode=0 do {
		 	set utblmat=Class.new("RecordUTBLRELMAT")
	 		set utblmat.matrix=NAME
		 	set fUTBLREL2=Class.new("RecordUTBLRELMAT2")
		 	set fUTBLREL2.matrix=NAME
	 		set fUTBLREL2.matrow=MATROW
		 	set fUTBLREL2.matcol=MATCOL
		 	} 
		 else  do {
		 	set fUTBLREL2=Db.getRecord("UTBLRELMAT2","MATRIX=:NAME,MATROW=:MATROW,MATCOL=:MATCOL",1)
			}

		set SID="UTBLRELMAT2"

	        // Execute screen program 
		do DRV^USID(%ProcessMode,SID,.utblmat,.fUTBLREL2)
	        set %ProcessMode=%OSAVE                                   
	}
	else  do {
		if %ProcessMode=0 do {
		 	set utblmat=Class.new("RecordUTBLRELMAT")
	 		set utblmat.matrix=NAME
		 	set fUTBLREL1=Class.new("RecordUTBLRELMAT1")
		 	set fUTBLREL1.matrix=NAME
	 		set fUTBLREL1.matrow=MATROW
		 	} 
		 else  do {
		 	set fUTBLREL1=Db.getRecord("UTBLRELMAT1","MATRIX=:NAME,MATROW=:MATROW",1)
			}

		set SID="UTBLRELMAT1"

	        // Execute screen program 
		do DRV^USID(%ProcessMode,SID,.utblmat,.fUTBLREL1)
	        set %ProcessMode=%OSAVE  
	}                                  
 
        quit

PPNAME  //MATRIX post processor
        //Use function STATMAT02 (mauntain) if matrix has entries.
        new NAME1,ROW1,ROW2
        type Public Boolean ER
        type Public String RM,X
        type Public Number %OSAVE
        if (X="")!(%OSAVE'=0) quit
	set %ProcessMode=%OSAVE
	set NAME1=X
	new rs
        type ResultSet rs
        set rs=Db.select("MATROW","UTBLRELMAT1","MATRIX=:NAME1") quit:ER
	if rs.isEmpty() quit
        while rs.next() do {        
		set ROW1=rs.getCol("MATROW")
		//Status for matrix ~p1 already defined
       		if 'ROW1.isNull(),%ProcessMode=0 set ER=1,RM=$$^MSG(4903,NAME1) quit
		}
	new rs1
	type ResultSet rs1
        set rs1=Db.select("MATROW","UTBLRELMAT2","MATRIX=:NAME1") quit:ER
        if rs1.isEmpty() quit
        while rs1.next() do {
		set ROW2=rs1.getCol("MATROW")
		//Status for matrix ~p1 already defined
        	if 'ROW2.isNull(),%ProcessMode=0 set ER=1,RM=$$^MSG(4903,NAME1) quit	
		}
	
	quit

ONEDIM  //Set data entry for one dimensional matrix
       	type Public String SID,NAME,STATUS,MATRIX()
        new ROW,SEQ
        set SEQ=""
        set SID="UTBLRELMAT1"
        
        set ROW=""
	             
	type ResultSet rs=Db.select("MATROW,CUSTSTAT","UTBLRELMAT1","MATRIX=:NAME","MATROW")
	while rs.next() do {        	
		set SEQ=SEQ+1
		set MATRIX(SEQ)=rs.getCol("MATROW")_"||"_rs.getCol("CUSTSTAT")                 
		}
        quit  

TWODIM  //Set Data Entry for the two-dimensional matrix
       	type Public String SID,NAME,STATUS,MATRIX()
        new COL,SEQ,ROW
        set SID="UTBLRELMAT2"		
	set SEQ=""
        set ROW=""
        set COL=""
	
	type ResultSet rs=Db.select("MATROW","UTBLRELMAT2","MATRIX=:NAME","MATROW")
	while rs.next() do {
		set ROW=rs.getCol("MATROW")
		type ResultSet rs1=Db.select("MATCOL,CUSTSTAT","UTBLRELMAT2","MATRIX=:NAME and MATROW=:ROW","MATCOL")
		while rs1.next() do {
			set COL=rs1.getCol("MATCOL")
			set SEQ=SEQ+1
			set MATRIX(SEQ)=ROW_"|"_COL_"|"_rs1.getCol("CUSTSTAT")                 
			}
		}			
	
		
	quit


ERR     //Error log
	type Public Boolean ER
	type Public String VFMQ
        set ER=1 do ^UTLERR
        set VFMQ="Q"
        quit

VER     type Public Boolean ER
	type Public String VFMQ
	type Public Number MATCOL
	if (%ProcessMode=2)!(%ProcessMode=4)!(VFMQ="Q") do END quit
        if MATCOL.get() do FILE2 quit:ER
        if 'MATCOL.get() do FILE1 quit:ER
        do END
        quit

FILE1	//File data for one-dimensional matrix
        type Public String NAME,STATUS,MATRIX()
	new NEWARR,OLDARR,ROW,SEQ
        set ROW=""
        if %ProcessMode'=0 do {		   
            type ResultSet rs=Db.select("MATROW,CUSTSTAT","UTBLRELMAT1","MATRIX=:NAME","MATROW")
            while rs.next() do {
            	set OLDARR(rs.getCol("MATROW"))=rs.getCol("CUSTSTAT")
            	}
	}               
	set SEQ=""
        
        for  set SEQ=MATRIX(SEQ).order() quit:SEQ.isNull()  do {
        	set ROW=MATRIX(SEQ).piece("|",1)
                quit:ROW=""
                set NEWARR(ROW)=MATRIX(SEQ).piece("|",3)
		}
        if %ProcessMode=3 do DEL1 quit
        do DEL1
	for  set ROW=NEWARR(ROW).order() quit:ROW.isNull()  do {
		set STATUS=NEWARR(ROW)
		type RecordUTBLRELMAT1 relmat1=Class.new("RecordUTBLRELMAT1")
		set relmat1.matrix=MATRIX
		set relmat1.matrow=ROW
		set relmat1.custstat=STATUS
		do relmat1.bypassSave()
		}
	quit

DEL1    //Delete entry for one-demensional Matrix
	type Public String VFSN(),SAVEO,FID,fUTBLMT1,OLDARR()
	new ROW
        set SAVEO=%ProcessMode
	if %ProcessMode=0 quit
        set FID="UTBLRELMAT1",VFSN(FID)="",%ProcessMode=3
        set ROW=""
        for  set ROW=OLDARR(ROW).order() quit:ROW.isNull()  do {
        	set fUTBLMT1=""
                do Db.delete("UTBLRELMAT1","MATRIX=:NAME")
        	}
        set %ProcessMode=SAVEO
        
        quit

FILE2   //File data for Two-Dimensional Matrix
        type Public String NAME,MATRIX()
        type Public Number I      
        new COL,N,NEWARR,OLDARR,ROW,STATUS,Y
	set ROW=""
        set COL=""
        if %ProcessMode'=0 do {
         	type ResultSet rs=Db.select("MATROW","UTBLRELMAT2","MATRIX=:NAME","MATROW")
		while rs.next() do {
			set ROW=rs.getCol("MATROW")
			type ResultSet rs1=Db.select("MATCOL,CUSTSTAT","UTBLRELMAT2","MATRIX=:NAME and MATROW=:ROW","MATCOL")
			while rs1.next() do {
				set COL=rs1.getCol("MATCOL")
				set OLDARR(ROW,COL)=rs1.getCol("CUSTSTAT")                 
				}
			}
                	                	
        	}
        
	set I=""
        for  set I=MATRIX(I).order() quit:I.isNull()  do {
        	set COL=MATRIX(I).piece("|",2) if COL="" quit
        	set ROW=MATRIX(I).piece("|",1)
        	set STATUS=MATRIX(I).piece("|",3)
        	set NEWARR(ROW,COL)=MATRIX(I).piece("|",3)
		}        
        if %ProcessMode=3 do DEL2 quit
	do DEL2
	new N,Y
	set (N,Y)=""
	for  set N=NEWARR(N).order() quit:N.isNull()  do {
		for  set Y=NEWARR(N,Y).order() quit:Y.isNull()  do {
		set STATUS=NEWARR(N,Y)
		type RecordUTBLRELMAT2 relmat2=Class.new("RecordUTBLRELMAT2")
		set relmat2.matrix=NAME
		set relmat2.matrow=N
		set relmat2.matcol=Y
		set relmat2.custstat=STATUS
		do relmat2.bypassSave()
		}
	}

	quit

DEL2    //Delete entry for two-dimensional matrix
	type Public String VFSN(),OLDARR()
	new COL,ROW,FID,SAVEO,fUTBLMT2
        set SAVEO=%ProcessMode
	if %ProcessMode=0 quit
        set FID="UTBLMATATT2",VFSN(FID)="",%ProcessMode=3
        set COL=""
        set ROW=""
        for  set ROW=OLDARR(ROW).order() quit:ROW.isNull()  do {
        	for  set COL=OLDARR(ROW,COL).order() quit:COL.isNull()  do {
        		set fUTBLMT2=""
                        do Db.delete("UTBLRELMAT2","MATRIX=:NAME")
			}
		}
        set %ProcessMode=SAVEO
        
        quit
        
END     //End of processing
	
	type Public Boolean ER
	type Public String RM,NAME,VFMQ
        quit:$G(NAME)=""
        quit:$G(ER)!(%ProcessMode=2)!(%ProcessMode=4)
        set ER="W"
        if VFMQ="Q" do {
          	//Status for matrix ~p1 not created
        	if %ProcessMode=0 set RM=$$^MSG(4897,NAME) quit
        	//Status for matrix ~p1 not modified
      		if %ProcessMode=1 set RM=$$^MSG(4898,NAME) quit
        	//Status for matrix ~p1 not deleted
        	if %ProcessMode=3 set RM=$$^MSG(4899,NAME) quit
	}
        else  do {
		//Status for matrix ~p1 created
        	if %ProcessMode=0 set RM=$$^MSG(4900,NAME) quit
                //Status for matrix ~p1 modified
        	if %ProcessMode=1 set RM=$$^MSG(4901,NAME) quit
        	//Status for matrix ~p1 deleted
        	if %ProcessMode=3 set RM=$$^MSG(4902,NAME) quit
		}
        quit
        
 #OPTION ResultClass ON
Public String vSIG()	quit "60135^42107^Panyaram, Sreeram^10138"	// Signature - LTD^TIME^USER^SIZE
