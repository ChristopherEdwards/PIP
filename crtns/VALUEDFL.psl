VALUEDFL(RecordUTBLPRODRTDT utblprodrtdt, String vpar, Boolean vparNorm) // UTBLPRODRTDT - Product Attribute Result Set Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = utblprodrtdt.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblprodrtdt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblprodrtdt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("COLNAME").exists()!vx("RESULTSID").exists()!vx("DECISION").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLPRODRTDT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLPRODRTDT","COLNAME = :utblprodrtdt.colname and RESULTSID = :utblprodrtdt.resultsid and DECISION = :utblprodrtdt.decision") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String COLNAME
	type public String RESULTSID
	type public String DECISION

	type RecordUTBLPRODRTDT utblprodrtdt = Db.getRecord("UTBLPRODRTDT","COLNAME=:COLNAME,RESULTSID=:RESULTSID,DECISION=:DECISION")
	if (%ProcessMode = 2) do {
		do utblprodrtdt.setMode(2)

		do VALUEDFL(utblprodrtdt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLPRODRTDT utblprodrtdt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLPRODRTDT","COLNAME = :utblprodrtdt.colname and RESULTSID = :utblprodrtdt.resultsid and DECISION = :utblprodrtdt.decision") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		set utblprodrtdt.LDATE = %SystemDate
		set utblprodrtdt.LTIME = %CurrentTime
		set utblprodrtdt.LUSER = %UserID
		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrtdt,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrtdt,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblprodrtdt)) S ^UTBL("PRODRT",vobj(utblprodrtdt,-3),vobj(utblprodrtdt,-4),vobj(utblprodrtdt,-5))=vobj(utblprodrtdt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLPRODRTDT utblprodrtdt

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblprodrtdt,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("PRODRT",vobj(utblprodrtdt,-3),vobj(utblprodrtdt,-4),vobj(utblprodrtdt,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLPRODRTDT utblprodrtdt

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLPRODRTDT utblprodrtdt

	if utblprodrtdt.colname.isNull() do vreqerr("COLNAME") quit
	if utblprodrtdt.resultsid.isNull() do vreqerr("RESULTSID") quit
	if utblprodrtdt.decision.isNull() do vreqerr("DECISION") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRTDT","MSG",1767,"UTBLPRODRTDT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLPRODRTDT utblprodrtdt

	if utblprodrtdt.colname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("COLNAME", vRM) quit
	set X = utblprodrtdt.resultsid if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("RESULTSID", vRM) quit
	set X = utblprodrtdt.decision if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("DECISION", vRM) quit
	if utblprodrtdt.default.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DEFAULT", vRM) quit
	set X = utblprodrtdt.ldate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDATE", vRM) quit
	if utblprodrtdt.list.length()>100 set vRM = $$^MSG(1076,100) do vdderr("LIST", vRM) quit
	set X = utblprodrtdt.ltime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LTIME", vRM) quit
	if utblprodrtdt.luser.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LUSER", vRM) quit
	if utblprodrtdt.rangemax.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RANGEMAX", vRM) quit
	if utblprodrtdt.rangemin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RANGEMIN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLPRODRTDT","MSG",979,"UTBLPRODRTDT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLPRODRTDT utblprodrtdt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("COLNAME").exists() set vux("COLNAME") = vx("COLNAME")
	if vx("RESULTSID").exists() set vux("RESULTSID") = vx("RESULTSID")
	if vx("DECISION").exists() set vux("DECISION") = vx("DECISION")
	do vkey(1) set voldkey = utblprodrtdt.colname_","_utblprodrtdt.resultsid_","_utblprodrtdt.decision // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblprodrtdt.colname_","_utblprodrtdt.resultsid_","_utblprodrtdt.decision // Copy new keys into object
	type RecordUTBLPRODRTDT vnewrec = utblprodrtdt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLPRODRTDT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLPRODRTDT utblprodrtdt

	if vux("COLNAME").exists() set utblprodrtdt.colname = vux("COLNAME").piece("|",i)
	if vux("RESULTSID").exists() set utblprodrtdt.resultsid = vux("RESULTSID").piece("|",i)
	if vux("DECISION").exists() set utblprodrtdt.decision = vux("DECISION").piece("|",i)
	quit
