ZUCTZ1P()	// PSL Test Set, test function signatures for method with 1 parameter
	/*
	ORIG: Frans S.C. Witte - 2006-08-16
	DESC: PSL Test Set, test function signatures for method with 1 parameter

	---- Comment -----------------------------------------------------------
	See ZUCZ2P for a descrition of the general structure of the subroutines,
	and suggestions about changing the pattern text by real test values.

	---- Revision History --------------------------------------------------
	2006-08-16, Frans S.C. Witte - CR 22843
		Initial implementation
	*/
	quit

	// #####################################################################
	// Test function signatures, method with 1 parameter
	// #####################################################################

	// =====================================================================
public mtd1p()	// Validate TestClass.method1p(P1Class)
	/* ---------------------------------------------------------------------
	Procedure that validates code relating to TestClass.method1p().
	Validation values (see ZUCT for meaning of Cn and Rn):
	C0/R0: "", "P0value"
	C1/R1: absent, "", "P1value"
	calls:
	* public mtd1p()		// test TestClass.method1p( P1Class P1)
	* public mtd1p0()		// test C0.method1p(C1)
	* public mtd1p1(R0)		// test R0.method1p(C1)
	* public mtd1p2(R1)		// test C0.method1p(R1)
	* public mtd1p3(R0,R1)		// test R0.method1p(R1)
	*/
	type Primitive R0
	type Primitive R1

	do mtd1p0()
	for R0 = "", "P0value" do {
		do mtd1p1( R0)
		for R1 = "", "P1value" do {
			if R0.isNull() do mtd1p2(R1)
			do mtd1p3(R0,R1)
		}
	}
	quit

	// =====================================================================
public mtd1p0()
	// validate C0.method1p(C1)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method1p()			// C0="", C1 absent
	write "mtd1p0().EA:""P0value"".method1p(""P1value"")="_rRes,!

	set rRes = ({TestClass}"").method1p("")			// C0="", C1=""
	write "mtd1p0().EE:""P0value"".method1p(""P1value"")="_rRes,!

	set rRes = ({TestClass}"P0value").method1p("P1value")	// C0="P0value", C1="P1value"
	write "mtd1p0().VV:""P0value"".method1p(""P1value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd1p1( Primitive R0)
	// validate R0.method1p(C1)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method1p()				// C1 absent
	write "mtd1p1(R0).V:<"_R0_">.method1p(""P1value"")="_rRes,!

	set rRes = R0.method1p("")				// C1=""
	write "mtd1p1(R0).E:<"_R0_">.method1p("""")="_rRes,!

	set rRes = R0.method1p("P1value")			// C1="P1value"
	write "mtd1p1(R0).V:<"_R0_">.method1p(""P1value"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd1p2( Primitive R1)
	// =====================================================================
	// validate C0.method1p(R1)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method1p( R1)	// C0=""
	write "mtd1p2(R1).E:""P0value"".method1p(<"_R1_">)="_rRes,!

	set rRes = ({TestClass}"P0value").method1p( R1)	// C0="P0value"
	write "mtd1p2(R1).V:""P0value"".method1p(<"_R1_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd1p3( Primitive R0, Primitive R1)
	// =====================================================================
	// validate R0.method1p(R1)
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method1p( R1)
	write "mtd1p3(R0,R1):<"_R0_">.method1p(<"_R1_">)="_rRes,!
	================ end commented out ================ */
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60555^28661^Frans S.C. Witte^3706"	// Signature - LTD^TIME^USER^SIZE
