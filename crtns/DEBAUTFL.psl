DEBAUTFL(RecordDEBAUT debaut, String vpar, Boolean vparNorm) // DEBAUT - Debit Authorizations Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (20)             11/22/2003
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (5)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = debaut.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(debaut,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(debaut,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACNTYPE = debaut.acntype
	type String ACN = debaut.acn
	type String AUTINST = debaut.autinst
	type String AUTACCT = debaut.autacct
	type String SEQ = debaut.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACNTYPE").exists()!vx("ACN").exists()!vx("AUTINST").exists()!vx("AUTACCT").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEBAUT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEBAUT","ACNTYPE = :debaut.acntype and ACN = :debaut.acn and AUTINST = :debaut.autinst and AUTACCT = :debaut.autacct and SEQ = :debaut.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACNTYPE
	type public String ACN
	type public String AUTINST
	type public String AUTACCT
	type public String SEQ

	type RecordDEBAUT debaut = Db.getRecord("DEBAUT","ACNTYPE=:ACNTYPE,ACN=:ACN,AUTINST=:AUTINST,AUTACCT=:AUTACCT,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do debaut.setMode(2)

		do DEBAUTFL(debaut,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEBAUT debaut

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEBAUT","ACNTYPE = :debaut.acntype and ACN = :debaut.acn and AUTINST = :debaut.autinst and AUTACCT = :debaut.autacct and SEQ = :debaut.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(debaut)) S ^DEBAUT(vobj(debaut,-3),vobj(debaut,-4),vobj(debaut,-5),vobj(debaut,-6),vobj(debaut,-7))=vobj(debaut)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.debaut)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEBAUT debaut

	if vpar["/JOURNAL/" do VJOURNAL(.debaut)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DEBAUT(vobj(debaut,-3),vobj(debaut,-4),vobj(debaut,-5),vobj(debaut,-6),vobj(debaut,-7))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDEBAUT debaut

	// Type local variables for access keys for defaults
	type public String ACNTYPE
	type public String ACN
	type public String AUTINST
	type public String AUTACCT
	type public String SEQ

	if debaut.gl.isNull() set debaut.gl = 0                // gl
	quit


vreqn // Validate required data items

	type public RecordDEBAUT debaut

	if debaut.gl.isNull() do vreqerr("GL") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEBAUT debaut

	if debaut.acntype.isNull() do vreqerr("ACNTYPE") quit
	if debaut.acn.isNull() do vreqerr("ACN") quit
	if debaut.autinst.isNull() do vreqerr("AUTINST") quit
	if debaut.autacct.isNull() do vreqerr("AUTACCT") quit
	if debaut.seq.isNull() do vreqerr("SEQ") quit

		if vx("GL").exists(),debaut.gl.isNull() do vreqerr("GL") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEBAUT","MSG",1767,"DEBAUT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDEBAUT debaut
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(debaut,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT -  After insert trigger for DEBAUT file

	type public RecordDEBAUT debaut
	/*
	  ---- Revision History--------------------------------------------------------
	   12/27/99 - JERUCHIMC - 36228      
		      Check if the start and enddates are defined before
        	      checking if the end date is greater than the start date.

	   09/10/99 - DOUGAN - 31126
		      Converted M code into PSL
	
	   07/08/99 - KINI - 33689
	              Removed code for CIFH update.
	
	   05/03/99 - KINI - 32230
	              Modify trigger on BLSTDT and BLENDDT for DEBAUT file.
	
	   03/08/99 - LEVINTOLR - 29349
	              Create trigger AFTER_INSERT on STARTDT and AUTEXP for DEBAUT
	              file.
	
	  -----------------------------------------------------------------------------
	*/

	//Date must be today or future
	if (debaut.startdt'=""),(debaut.startdt<%SystemDate) do Runtime.setErrMSG("DEBAUT",6047) quit:ER

	//Date must be today or future	
	if (debaut.autexp'=""),(debaut.autexp<%SystemDate) do Runtime.setErrMSG("DEBAUT",6047) quit:ER

	//End Date must be greater than Start Date
	if (debaut.autexp'=""),(debaut.startdt'=""),(debaut.autexp<debaut.startdt) do Runtime.setErrMSG("DEBAUT",6160) quit:ER
	
	/*
	Debit authorization block dates processing.
	Check if No Start Date Specified
	*/
	if (debaut.blstdt=""),(debaut.blenddt'="") do Runtime.setErrMSG("DEBAUT",6791) quit:ER
	
	quit 
	

vau1 // Trigger AFTER_UPDATE - After update trigger

	type public RecordDEBAUT debaut
	/*
	  ---- Revision History -------------------------------------------------------
	
	   09/10/99 - DOUGANM - 31126
	  	      Converted M code into PSL

	   07/08/99 - KINI - 33689
	              Created trigger AFTER_UPDATE for DEBAUT file to insert new message
	              "Debit authorization block deleted" into CIFH file after debit
	              authorization block was deleted.
	
	  -----------------------------------------------------------------------------
	*/
	if debaut.blstdt="" do {
		if (debaut.blstdt.oldVal'=""),(debaut.blstdt.oldVal'=debaut.blstdt) do {
			new MSG
			//Debit authorization block deleted
			set MSG=$$^MSG(3919)
			do Db.insert("CIFH","ACN,SEQ,TCMT",":ACN,CIFH.NEXTVAL,:MSG")
			}
		}
	quit 
	

vbi1 // Trigger BEFORE_INSERT - Before Insert/Update Trigger

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before Insert/Update Trigger

	type public RecordDEBAUT debaut
	do debaut.setAuditFlag(1)
	/*
	  ---- Revision History ------------------------------------------------
 	   10/02/00 - JERUCHIMC - 41385
		      Added a check for DEBAUT.DCID to make sure
		      it is an account owned by DEBAUT.ACN.
	 
	   12/21/99 - JERUCHIMC - 33754
          	       Added code to check if the authorized account is a G/L
  	               account before verifying the status ACN.STAT.	
	   
	   10/11/99 - DOUGANM - 31126
		      Converted M code into PSL

	   08/23/99 - SCHWARTZC - 34478
	              Add code to check the decimal precision of the debaut limit
	              based on the system base currency.  System table message
	              775 (Decimal Precision Error) is displayed when the debaut
	              limit does not conform to the decimal precision of the system
	              base currency.
	
	   08/12/99 - Matt Lessig/SCHWARTZC - 34459
	              Added trigger to verify that we are not attempting to
	              file an invalid account.
	  ----------------------------------------------------------------------
	*/

	// Verify that the limit entered conforms to the decimal precision of
	// the payment currency.

	new CURDEC,DECPRS,CO,EMUMEM,CRCD

	set CO=%CompanyName
	set CRCD=%SystemCurrency
	set CURDEC=Db.getOneRow("CURDEC","CRCD","CO,CRCD") quit:ER 
	set DECPRS=.1**CURDEC
	if debaut.limit#DECPRS>0 do Runtime.setErrMSG("DEBAUT",775) quit:ER 
	
	set KEY=debaut.autinst
	set ONUS=Db.getOneRow("ONUS","UTBLEFTINST","KEY")
	if 'ONUS quit 
	
	if debaut.gl'=1 do {
		new DATA,DACID
		set DACID=debaut.autacct
		set DATA=Db.getOneRow("STAT","ACN","DACID")
		if DATA="" do Runtime.setErrMSG("DEBAUT",1259,DACID) quit:ER 
		}

	if debaut.acntype="C" do {
		new dcid,dacn
		set dcid=debaut.dcid
		if dcid="" quit
		set dacn=Db.getOneRow("ACN","ACN","dcid")
		if dacn'=debaut.acn do Runtime.setErrMSG("DEBAUT",68,ACN) quit:ER
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEBAUT debaut

	if debaut.acntype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ACNTYPE", vRM) quit
	set X = debaut.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = debaut.autinst if 'X.isNull(),'Db.isDefined("UTBLEFTINST","X") set vRM = $$^MSG(1485,X) do vdderr("AUTINST", vRM) quit
	if debaut.autacct.length()>17 set vRM = $$^MSG(1076,17) do vdderr("AUTACCT", vRM) quit
	set X = debaut.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = debaut.autexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUTEXP", vRM) quit
	set X = debaut.aututid if 'X.isNull(),'Db.isDefined("UTBLEFTINST","X") set vRM = $$^MSG(1485,X) do vdderr("AUTUTID", vRM) quit
	set X = debaut.bgtcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BGTCID", vRM) quit
	set X = debaut.bgtseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BGTSEQ", vRM) quit
	if debaut.billnbr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BILLNBR", vRM) quit
	set X = debaut.blenddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BLENDDT", vRM) quit
	set X = debaut.blstdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BLSTDT", vRM) quit
	if debaut.custid.length()>24 set vRM = $$^MSG(1076,24) do vdderr("CUSTID", vRM) quit
	set X = debaut.dcid if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("DCID", vRM) quit
	if '("01"[debaut.GL) set vRM=$$^MSG(742,"L") do vdderr("GL", vRM) quit
	set X = debaut.limit if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEBAUT.LIMIT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = debaut.rescode if 'X.isNull(),'Db.isDefined("UTBLDABRC","X") set vRM = $$^MSG(1485,X) do vdderr("RESCODE", vRM) quit
	set X = debaut.startdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STARTDT", vRM) quit
	if debaut.stat.length()>10 set vRM = $$^MSG(1076,10) do vdderr("STAT", vRM) quit
	if debaut.utilityid.length()>24 set vRM = $$^MSG(1076,24) do vdderr("UTILITYID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEBAUT","MSG",979,"DEBAUT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEBAUT debaut)	//DEBAUT Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.debaut)	// Mode=D Tran=B EFD=N Seq=1 JRNID=CIFH_D
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.debaut)	// Mode=D Tran=O EFD=N Seq=1 JRNID=CIFH_D
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.debaut)	// Mode=I Tran=B EFD=N Seq=1 JRNID=CIFH_I
				do vj3(.debaut)	// Mode=I Tran=B EFD=N Seq=1 JRNID=CIFH_IBL
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.debaut)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CIFH_I
				do vj3(.debaut)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CIFH_IBL
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj4(.debaut)	// Mode=U Tran=B EFD=N Seq=1 JRNID=CIFH_U
				do vj5(.debaut)	// Mode=U Tran=B EFD=N Seq=1 JRNID=CIFH_UBL
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj4(.debaut)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CIFH_U
				do vj5(.debaut)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CIFH_UBL
				}
			}
		}

	quit


vj1(RecordDEBAUT debaut)	// CIFH_D  Table CIFH  Customer History (delete)

	if debaut.acntype="C"
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(8631,debaut.autinst,debaut.autacct)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEBAUT debaut)	// CIFH_I  Table CIFH  Customer History (Insert)

	if debaut.acntype="C"
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(8629,debaut.autinst,debaut.autacct)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordDEBAUT debaut)	// CIFH_IBL  Table CIFH  Customer History (Insert)

	if debaut.acntype="C"
	else  quit
	if debaut.blstdt'=""
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(864)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordDEBAUT debaut)	// CIFH_U  Table CIFH  Customer History (update)

	if debaut.acntype="C"
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=debaut.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMTFM^ACNFUNCS(debaut.acn,"DEBAUT",vdi,vold,vnew)
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj5(RecordDEBAUT debaut)	// CIFH_UBL  Table CIFH  Customer History (Update)

	if debaut.acntype="C"
	else  quit
	if debaut.blstdt'=""
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String %IDENT,%UID,TJD,TLO
		type String v1,vlastkey
		set v1=debaut.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$^MSG(3908,debaut.autinst,debaut.autacct)
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordDEBAUT debaut

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACNTYPE").exists() set vux("ACNTYPE") = vx("ACNTYPE")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("AUTINST").exists() set vux("AUTINST") = vx("AUTINST")
	if vx("AUTACCT").exists() set vux("AUTACCT") = vx("AUTACCT")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = debaut.acntype_","_debaut.acn_","_debaut.autinst_","_debaut.autacct_","_debaut.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = debaut.acntype_","_debaut.acn_","_debaut.autinst_","_debaut.autacct_","_debaut.seq // Copy new keys into object
	type RecordDEBAUT vnewrec = debaut.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEBAUT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEBAUT debaut

	if vux("ACNTYPE").exists() set debaut.acntype = vux("ACNTYPE").piece("|",i)
	if vux("ACN").exists() set debaut.acn = vux("ACN").piece("|",i)
	if vux("AUTINST").exists() set debaut.autinst = vux("AUTINST").piece("|",i)
	if vux("AUTACCT").exists() set debaut.autacct = vux("AUTACCT").piece("|",i)
	if vux("SEQ").exists() set debaut.seq = vux("SEQ").piece("|",i)
	quit
