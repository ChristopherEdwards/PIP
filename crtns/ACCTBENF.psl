ACCTBENF(RecordACCTBENDTL acctbendtl, String vpar, Boolean vparNorm) // ACCTBENDTL - Account Beneficiary Details Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:12 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (22)             03/14/2007
	// Trigger Definition (2)                      03/05/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = acctbendtl.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(acctbendtl,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(acctbendtl,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = acctbendtl.cid
	type String BENSEQ = acctbendtl.benseq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("BENSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ACCTBENDTL",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACCTBENDTL","CID = :acctbendtl.cid and BENSEQ = :acctbendtl.benseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String BENSEQ

	type RecordACCTBENDTL acctbendtl = Db.getRecord("ACCTBENDTL","CID=:CID,BENSEQ=:BENSEQ")
	if (%ProcessMode = 2) do {
		do acctbendtl.setMode(2)

		do ACCTBENF(acctbendtl,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordACCTBENDTL acctbendtl

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACCTBENDTL","CID = :acctbendtl.cid and BENSEQ = :acctbendtl.benseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(acctbendtl)) S ^ACCTBEN(vobj(acctbendtl,-3),vobj(acctbendtl,-4))=vobj(acctbendtl)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordACCTBENDTL acctbendtl


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACCTBEN(vobj(acctbendtl,-3),vobj(acctbendtl,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordACCTBENDTL acctbendtl

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordACCTBENDTL acctbendtl

	if acctbendtl.cid.isNull() do vreqerr("CID") quit
	if acctbendtl.benseq.isNull() do vreqerr("BENSEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACCTBENDTL","MSG",1767,"ACCTBENDTL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordACCTBENDTL acctbendtl
	if 'acctbendtl.cid.isNull() set vfkey("^ACN("_""""_acctbendtl.cid_""""_","_50_")")="ACCTBENDTL(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordACCTBENDTL acctbendtl
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":acctbendtl.cid") set vERRMSG = $$^MSG(8563,"ACCTBENDTL(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("BENZIP").exists()!vx("BENCNTRY").exists()!vx("BENSTATE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordACCTBENDTL acctbendtl
	/*			
	        Revision History
	------------------------------------------------------------------
	02/24/07 - MBUIM - CR 25106
	           Created trigger to validate postal zip code and an 
		   integrity check for beneficiary percentage.
	
	------------------------------------------------------------------
								*/
	
	type public Boolean ER
	type public String RM
	
	type Number BENPCT

	// Validate Postal/zip code
	do ZIP^PROCZIP(acctbendtl.bencntry,acctbendtl.benstate,acctbendtl.benzip)
	if ER.get() do Runtime.setErrMSG("ACCTBENDTL",3333,RM) quit:ER
	
	// Account Beneficiary Percentage.
	if %ProcessMode = 2 do {
		type ResultSet rs=Db.select("BENPCT","ACCTBENDTL","CID=:CID AND BENPCT > 0")
			if 'rs.isEmpty() do { quit:ER
			set BENPCT = 0
			while rs.next() set BENPCT = BENPCT + rs.getCol("BENPCT")
			// Sum of percentage allocations must be 0% or 100%
			if BENPCT'=100 do Runtime.setErrMSG("ACCTBENDTL","2852")
			}
		}
	quit

vau1 // Trigger AU_BENZIP - After Update of BENZIP

	type public RecordACCTBENDTL acctbendtl
	/*
		Revision History
	------------------------------------------------------------------
	02/24/07 - MbuiM - CR 25106
		   Created trigger to validate postal zip code.
	
	------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public String RM
	
	// Validate Postal/zip code
	do ZIP^PROCZIP(acctbendtl.bencntry,acctbendtl.benstate,acctbendtl.benzip)
	if ER.get() do Runtime.setErrMSG("ACCTBENDTL",3333,RM) quit:ER
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordACCTBENDTL acctbendtl

	set X = acctbendtl.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = acctbendtl.benseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BENSEQ", vRM) quit
	if acctbendtl.benad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENAD1", vRM) quit
	if acctbendtl.benad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENAD2", vRM) quit
	if acctbendtl.benad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENAD3", vRM) quit
	if acctbendtl.bencity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENCITY", vRM) quit
	set X = acctbendtl.bencntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("BENCNTRY", vRM) quit
	if acctbendtl.bencnty.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENCNTY", vRM) quit
	if acctbendtl.benctzn.length()>2 set vRM = $$^MSG(1076,2) do vdderr("BENCTZN", vRM) quit
	set X = acctbendtl.bendob if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BENDOB", vRM) quit
	if acctbendtl.benfname.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENFNAME", vRM) quit
	if acctbendtl.benlname.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENLNAME", vRM) quit
	if acctbendtl.benmmnam.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENMMNAM", vRM) quit
	if acctbendtl.benmname.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENMNAME", vRM) quit
	set X = acctbendtl.benpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",6,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACCTBENDTL.BENPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if acctbendtl.benphone.length()>12 set vRM = $$^MSG(1076,12) do vdderr("BENPHONE", vRM) quit
	set X = acctbendtl.benrel if 'X.isNull(),'Db.isDefined("UTBLBENREL","X") set vRM = $$^MSG(1485,X) do vdderr("BENREL", vRM) quit
	if acctbendtl.benstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("BENSTATE", vRM) quit
	if acctbendtl.bentaxid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENTAXID", vRM) quit
	if acctbendtl.bentitle.length()>5 set vRM = $$^MSG(1076,5) do vdderr("BENTITLE", vRM) quit
	set X = acctbendtl.bentype if 'X.isNull(),'Db.isDefined("UTBLBENTYP","X") set vRM = $$^MSG(1485,X) do vdderr("BENTYPE", vRM) quit
	if acctbendtl.benzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("BENZIP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACCTBENDTL","MSG",979,"ACCTBENDTL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordACCTBENDTL acctbendtl

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("BENSEQ").exists() set vux("BENSEQ") = vx("BENSEQ")
	do vkey(1) set voldkey = acctbendtl.cid_","_acctbendtl.benseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = acctbendtl.cid_","_acctbendtl.benseq // Copy new keys into object
	type RecordACCTBENDTL vnewrec = acctbendtl.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ACCTBENDTL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordACCTBENDTL acctbendtl

	if vux("CID").exists() set acctbendtl.cid = vux("CID").piece("|",i)
	if vux("BENSEQ").exists() set acctbendtl.benseq = vux("BENSEQ").piece("|",i)
	quit
