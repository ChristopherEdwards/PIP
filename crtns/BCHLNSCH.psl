BCHLNSCH //Batch BCHLNSCH - Scheduled Date Roll
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNSCH Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHLNSCH",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNSCH","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNSCH","*","",CID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	
	new %BAL,%INT,flag,A,CHG,INTFACT,LT,P,PR

	type RecordLN ln=Db.getRecord("LN","CID=:CID")

	do EXTERN(.ln)

	quit


public	EXTERN(RecordLN ln)

	// External entry point
	
	type String ETC,ITC
	
	new ADJ,BAL,BALINT,BSEQ,CHG,CUES,CUIN,CUPR,DIST1ND,CRLMT
	new ET,I,IACM,IAM,ICPF,INT,IPL,IRN,IUN,JD,LD,N,ND,P
	new PMTPI,PR,SCHBAL,SCHLD,SCHND,SCHNUM,SCHSEQ,TDUE,TEB,UE,UI,UNES
	new UNIN,UNPR,UP,ZTHALT,NEXT,SAVETR,TDR,IDP
	
	if ln.stat=4 quit

	// Date already bumped. No additional restart logic needed.
	// "Billing date prior to or the same as scheduled date"
	if ln.bndt,ln.bndt<TJD do Runtime.setErrSTBLER("LN","BNDTNOTGTR") quit:ER
	if ln.schnd-TJD quit

	do ln.setAuditFlag(1)
	set IACM=ln.iacm
	set IDP=ln.idp
	set IAM=ln.iam
	set TYPE=ln.type
	set GLSC=ln.glsc
	set CRCD=ln.crcd
	set BAL=ln.bal
	set TEB=ln.teb
	set ICPA=+ln.icpa

	if '$D(ICPA(ICPA)) do {
		type RecordUTBLICPA icpa=Db.getRecord("UTBLICPA","ICPA")
		set ICPA(ICPA)=icpa.prio
		}
	set ICPA=ICPA(ICPA)

	set BALINT=ln.balint
	set CRLMT=ln.crlmt
	set IUN=ln.iun,IPL=ln.ipl
	set IRN=ln.irn
	set ICPF=ln.icpf
	set PMTPI=ln.pmtpi
	set SCHND=ln.schnd
	set SCHNUM=ln.schnum
	set SCHBAL=ln.schbal
	set SCHLD=ln.schld
	set TDUE=ln.tdue
	set CUIN=ln.cuin
	set UNIN=ln.unin
	set CUPR=ln.cupr
	set UNPR=ln.unpr
	set CUES=ln.cues
	set UNES=ln.unes
	set SCHSEQ=ln.schseq
	set DIST1ND=ln.dist1nd
	set (FRE,DIST1FRE)=ln.dist1fre
	set (AF,DIST1AF)=ln.dist1af
	set BSEQ=ln.bseq
	set SUBPLN=ln.subpln
	
	if ln.trexd set IRN=$$TEASRT^LNBLDE(.ln,SCHLD)
 	
	// Increment Scheduled Payment Number 
	set ln.schnum=SCHNUM+1
	
	set SCHSEQ=SCHSEQ+1
	set ln.schseq=SCHSEQ
	
	// Decrement Scheduled Balance
	if 'IDP,'PMTPI do { do SCHB1(.ln) quit

		set CHG=0	

		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SCHSEQ")

		if lnbil1.pe01ea="P" set CHG=lnbil1.pe01ab
		if lnbil1.pe02ea="P" set CHG=lnbil1.pe02ab
		if lnbil1.pe03ea="P" set CHG=lnbil1.pe03ab
		if lnbil1.pe04ea="P" set CHG=lnbil1.pe04ab
		if lnbil1.pe05ea="P" set CHG=lnbil1.pe05ab
		if lnbil1.pe06ea="P" set CHG=lnbil1.pe06ab
		if lnbil1.pe07ea="P" set CHG=lnbil1.pe07ab
		if lnbil1.pe08ea="P" set CHG=lnbil1.pe08ab
		if lnbil1.pe09ea="P" set CHG=lnbil1.pe09ab
		if lnbil1.pe10ea="P" set CHG=lnbil1.pe10ab
		if lnbil1.pe11ea="P" set CHG=lnbil1.pe11ab
		if lnbil1.pe12ea="P" set CHG=lnbil1.pe12ab
		if lnbil1.pe13ea="P" set CHG=lnbil1.pe13ab
		if lnbil1.pe14ea="P" set CHG=lnbil1.pe14ab
		if lnbil1.pe15ea="P" set CHG=lnbil1.pe15ab
		if lnbil1.pe16ea="P" set CHG=lnbil1.pe16ab
		if lnbil1.pe17ea="P" set CHG=lnbil1.pe17ab
		if lnbil1.pe18ea="P" set CHG=lnbil1.pe18ab
		if lnbil1.pe19ea="P" set CHG=lnbil1.pe19ab
		if lnbil1.pe20ea="P" set CHG=lnbil1.pe20ab
		}
		
	if 'PMTPI do SCHDT(.ln) quit

	if $E(IAM) set CHG=PMTPI do SCHB1(.ln) quit

	set %BAL=SCHBAL,%ND=SCHND-1,%LD=SCHLD
	set %INT=$$^UIC(%BAL,%LD,%ND,IACM,IRN,1,DIST1AF,DIST1FRE,ICPF,SCHND,SCHLD)
	set CHG=PMTPI-%INT

	do SCHB1(.ln)

	quit
	
SCHB1(RecordLN ln)
	
	set SCHBAL=$$^SCARND(SCHBAL-CHG,0,CID) set:SCHBAL<0 SCHBAL=0
	set ln.schbal=SCHBAL

	do SCHDT(.ln)

	quit

	
SCHDT(RecordLN ln)	// Roll Scheduled Dates In Account
	
	do ln.setAuditFlag(1)

	set JD=SCHND
	set ln.schld=SCHND,SCHND=$$NJD^UFRE(JD,FRE)
	set ln.schnd=SCHND
	
	// Increment The Total Due
	if 'BSEQ do FILE(.ln)
	
	type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SCHSEQ",1)
	if lnbil1.getMode() = 0 do { quit:ER
		type Date DATE
		set DATE = $$DAT^%ZM(SCHND)
		
		// Error - Bill must be created for ~p1
		do Runtime.setErrMSG("LN",351,DATE) quit:ER
		}

	set ln.tdue=TDUE+lnbil1.ctab
	
	set ln.pmt=lnbil1.ctab

	/* 
	If not any of the below possibilities, element may be a fee that 
	requires movement from receivable to income (or deferral) on the 
	scheduled payment date. 
	*/
		
	// Increment uncollected items
	set (UI,UP,UE)=0
	do {
		if lnbil1.pe01ab set A=lnbil1.pe01ab,P=lnbil1.pe01ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe02ab set A=lnbil1.pe02ab,P=lnbil1.pe02ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe03ab set A=lnbil1.pe03ab,P=lnbil1.pe03ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln) 
		if lnbil1.pe04ab set A=lnbil1.pe04ab,P=lnbil1.pe04ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe05ab set A=lnbil1.pe05ab,P=lnbil1.pe05ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe06ab set A=lnbil1.pe06ab,P=lnbil1.pe06ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe07ab set A=lnbil1.pe07ab,P=lnbil1.pe07ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe08ab set A=lnbil1.pe08ab,P=lnbil1.pe08ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe09ab set A=lnbil1.pe09ab,P=lnbil1.pe09ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe10ab set A=lnbil1.pe10ab,P=lnbil1.pe10ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe11ab set A=lnbil1.pe11ab,P=lnbil1.pe11ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe12ab set A=lnbil1.pe12ab,P=lnbil1.pe12ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe13ab set A=lnbil1.pe13ab,P=lnbil1.pe13ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe14ab set A=lnbil1.pe14ab,P=lnbil1.pe14ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe15ab set A=lnbil1.pe15ab,P=lnbil1.pe15ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe16ab set A=lnbil1.pe16ab,P=lnbil1.pe16ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe17ab set A=lnbil1.pe17ab,P=lnbil1.pe17ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe18ab set A=lnbil1.pe18ab,P=lnbil1.pe18ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe19ab set A=lnbil1.pe19ab,P=lnbil1.pe19ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)
		if lnbil1.pe20ab set A=lnbil1.pe20ab,P=lnbil1.pe20ea do UPD if flag,$$DDICHK^LNFEEU(P) do TR(P,A,.ln)

		}
	
	// Create transactions for linked fees in scheduled sequence bill.
	
	type ResultSet rs=Db.select("FEETYP","LNBIL5","CID=:CID AND SCHSEQ=:SCHSEQ AND DUEAMT=1")
	while rs.next() do {
		set P=rs.getCol(1) quit:P=""

		type RecordLNBIL5 lnbil5=Db.getRecord("LNBIL5","CID,SCHSEQ,1,P")
		
		if 'lnbil5.bfamt quit
		
		if $$DDICHK^LNFEEU(P) do TR(P,lnbil5.bfamt,.ln)
		}		
	
	set ln.cuin=UI+$S(CUIN<0:CUIN,1:0)  // Current Interest	
	set ln.cupr=UP+$S(CUPR<0:CUPR,1:0)  // Current Principal	
	set ln.cues=UE+$S(CUES<0:CUES,1:0)  // Current Escrow
	
	set (UI,UP,UE)=0
	
	type Number LASTSEQ
	
	type ResultSet rs = Db.select("SCHSEQ","LNBIL1","CID=:CID AND SCHSEQ<:SCHSEQ","SCHSEQ DESC")
	if rs.next() set LASTSEQ = rs.getCol("SCHSEQ")
	if LASTSEQ.get() do {

		type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1","CID=:CID,SCHSEQ=:LASTSEQ",1) 
		if lnbil1.getMode() = 0 quit

		if lnbil1.pe01ad set A=lnbil1.pe01ad,P=lnbil1.pe01ea do UPD
		if lnbil1.pe02ad set A=lnbil1.pe02ad,P=lnbil1.pe02ea do UPD
		if lnbil1.pe03ad set A=lnbil1.pe03ad,P=lnbil1.pe03ea do UPD
		if lnbil1.pe04ad set A=lnbil1.pe04ad,P=lnbil1.pe04ea do UPD
		if lnbil1.pe05ad set A=lnbil1.pe05ad,P=lnbil1.pe05ea do UPD
		if lnbil1.pe06ad set A=lnbil1.pe06ad,P=lnbil1.pe06ea do UPD
		if lnbil1.pe07ad set A=lnbil1.pe07ad,P=lnbil1.pe07ea do UPD
		if lnbil1.pe08ad set A=lnbil1.pe08ad,P=lnbil1.pe08ea do UPD
		if lnbil1.pe09ad set A=lnbil1.pe09ad,P=lnbil1.pe09ea do UPD
		if lnbil1.pe10ad set A=lnbil1.pe10ad,P=lnbil1.pe10ea do UPD
		if lnbil1.pe11ad set A=lnbil1.pe11ad,P=lnbil1.pe11ea do UPD
		if lnbil1.pe12ad set A=lnbil1.pe12ad,P=lnbil1.pe12ea do UPD
		if lnbil1.pe13ad set A=lnbil1.pe13ad,P=lnbil1.pe13ea do UPD
		if lnbil1.pe14ad set A=lnbil1.pe14ad,P=lnbil1.pe14ea do UPD
		if lnbil1.pe15ad set A=lnbil1.pe15ad,P=lnbil1.pe15ea do UPD
		if lnbil1.pe16ad set A=lnbil1.pe16ad,P=lnbil1.pe16ea do UPD
		if lnbil1.pe17ad set A=lnbil1.pe17ad,P=lnbil1.pe17ea do UPD
		if lnbil1.pe18ad set A=lnbil1.pe18ad,P=lnbil1.pe18ea do UPD
		if lnbil1.pe19ad set A=lnbil1.pe19ad,P=lnbil1.pe19ea do UPD
		if lnbil1.pe20ad set A=lnbil1.pe20ad,P=lnbil1.pe20ea do UPD
		}
	
	set ln.unin=UNIN+UI	// Uncollected Interest
	
	set ln.unpr=UNPR+UP	// Uncollected Principal
	
	set ln.unes=UNES+UE	// Uncollected Escrow
	
	set EXTAMT=ln.extamt	// Extensions
	
	set ADJ=0
	set BALINT=BAL-$S(IAM.extract()=1:IUN-(IPL-EXTAMT),1:0)
	if ln.aruf set BALINT=BAL-ln.udbal
	
	set TDR=ln.tdr
	if BALINT<0,IAM,'TDR set BALINT=0
	if BALINT<0,IUN set BALINT=0
	
	// Adjust BALINT for newly computed account values.
	if ICPA do ICPA(.ln)
	
	do FILE(.ln)
	
	if SUBPLN'="" do SUBPMT(.ln,.lnbil1)

	quit


UPD	

	type public Boolean flag = 0	
	type public Number A, UE, UI, UP
	type public String P

	// Escrow
	if $$ESC^LNU(P) set UE = UE + A quit
	
	// Principal
	if (P = "P") set UP = UP + A quit
	
	// Interest
	if (P = "I") set UI = UI + A quit

	// Payment element of type FEE
	set flag = 1

	quit


FILE(RecordLN ln)	// File to disk
	
	set ln.balint=BALINT
	
	do ln.bypassSave()
	
	type RecordDAYENDNEGAM denegam=Db.getRecord("DAYENDNEGAM","TJD=:%SystemDate,CID=:CID",1)
	if (ln.diu!ln.duin2)&(ln.iropt=4) do denegam.save()
	if (ln.diu!ln.duin2)&(ln.iropt=3) do {
		if %SystemDate=ln.pchnd!(%SystemDate=ln.rand) do denegam.save()
		}
	quit

	
LOGERR	// Log error in exception file

	// Loan Scheduled Date Roll
	do LOG^UTLEXC($T(+0),"*",$$^MSG(7076)_"|1",$G(CID),$G(%ZTSEQ),$G(RM),$S($G(CID):$G(BAL),1:""))

	quit

	
TR(FEE,TAMT,RecordLN ln)
	
	// Create Transaction array of fee income/receivable transactions
	
	// FEE	- Fee type
	// TAMT	- Amount 	
	
	if TAMT<0 quit
	
	type Date %EffectiveDate = ""
	
	/* 
	Debit transaction establishes the receivable.  When these amounts
	were assessed, the offsetting credit reversed the debit made to
	the receivable account as a function of the assessment. 
	*/
	
	set ETC=CUVAR.feeidrtc
	if ETC.isNull() set ETC="MDR"
	
	type RecordLNFEEP lnfeep=Db.getRecord("LNFEEP", "FEETYP = :FEE", 1)
	
	type RecordUTBLGLSC utblglsc=Db.getRecord("UTBLGLSC", "GLSC = :GLSC")
	
	set ACN=lnfeep.glfr
	if ACN.isNull() set ACN=utblglsc.lgl5
	set TCMT=CID_", "_FEE
	set OCC=ln.cc
	
	do TTX(ACN,ETC,TAMT,"",%UserStation,"",TCMT)
	
	// The Credit transaction either updates the miscellaneous income
	// G/L account or establishes the deferral record. 
	
	if lnfeep.definc do {

		type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE")

		set ETC=prodctl.crtrdi
		set TSO="LNFEEIN#"_FEE_":"_TAMT
		set ACN=CID
		set TCMT=""
		}
	else  do {
		set ETC=CUVAR.feeicrtc
		if ETC.isNull() set ETC="MCR"
		set TSO=""
		set ACN=lnfeep.glfi
		if ACN.isNull() set ACN=utblglsc.lglf
		set TCMT=CID_", "_FEE
		}
		
	do TTX(ACN,ETC,TAMT,EFD,%UserStation,TSO,TCMT)
	
	quit

	
TTX(CID,TRCD,TAMT,EFD,%UserStation,TSO,TCMT,RecordLN ln)	

	// Build transaction array 

	/* 
	CID	Customer number
	TRCD	Transaction code
	TAMT	Transaction amount
	EFD	Effective date
	TLO	Location
	TSO	Source
	TCMT	Comment 
	CRCD	Account currency code
	*/
	
	type public String CRCD
	
	type RecordTTX ttx=Class.new("RecordTTX")

	type RecordTRN trn=Db.getRecord("TRN","TRCD")

	set ttx.cid=CID 
	set ttx.itc=trn.itc
	set ttx.etc=TRCD
	set ttx.tamt=TAMT
	set ttx.efd=EFD
	set ttx.tlo=%UserStation
	set ttx.tso=TSO
	set ttx.tcmt=TCMT
	set ttx.crcd=CRCD
	
	if 'TAMT.isNull() do TRNSINGL^TRNDRV(.ttx,,TPD,BRCD,4)
	if TAMT.isNull() do TRNSINGL^TRNDRV(.ttx,.ln,TPD,BRCD,4)

	quit

	
SUBPMT(RecordLN ln,RecordLNBIL1 lnbil1)	// Subsidy payment
		
	type RecordTTX ttx=Class.new("RecordTTX")
	
	new EFD,ER,GLCID,GLINC,GLSC,GLTC,%O,OCC,TAMT,TRCD,TSO
	new BRCD,SAVETR,SCHSEQ,SPDRF,SUBFRE,SUBPLN,%UserClass,%UserID

	set ER=0
	
	do SOURCE^BCHSOURC("BOFF","LN",.%UserID,.BRCD,.%UserClass)
	// Batch teller and/or branch not defined
	if ER set RM=$$^MSG(7484) do LOGERR quit
	
	set GLSC=ln.glsc
	set SCHSEQ=ln.schseq
	set SUBPLN=ln.subpln
	
	// Credit (payment) transaction

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE")
	set TRCD=prodctl.crtrsp
	set TAMT=lnbil1.csubdue
	if TAMT="" set TAMT=ln.subamt
	if 'TAMT quit
	set EFD=""
	set TSO="SUBPMT#"_SUBPLN_"~SUBDT#"_lnbil1.cdpd

	do TTX(CID,TRCD,TAMT,EFD,%UserStation,TSO,"",.ln)
	
	// Debit offset
	set TSO="SUBCID#"_CID_"~SUBPMT#"_SUBPLN_"~SUBDT#"_lnbil1.cdpd
	set OCC=ln.cc

	type RecordUTBLLNSUB utbllnsub=Db.getRecord("UTBLLNSUB","SUBPLN")
	set GLCID=utbllnsub.glcid
	set GLTC=utbllnsub.gltrn if GLTC="" set GLTC="MDR"
	do TTX(GLCID,GLTC,TAMT,EFD,%UserStation,TSO,CID)
	
	set GLINC=utbllnsub.glinc	// agency income account
	if GLINC do GLINC(.utbllnsub)
	
	quit

	
GLINC(RecordUTBLLNSUB utbllnsub)	

	// Credit agency income, debit interest income
	
	new GLTRN,LGLI
	
	set GLTRN=utbllnsub.glinctrn if GLTRN="" set GLTRN="MCR"

	type RecordUTBLGLSC utblglsc=Db.getRecord("UTBLGLSC","GLSC")
	set LGLI=utblglsc.lgli		// Interest income account
	
	do TTX(GLINC,GLTRN,TAMT,EFD,%UserStation,TSO,CID) // Credit agency income
	do TTX(LGLI,"MDR",TAMT,EFD,%UserStation,TSO,CID)  // Debit interest income
	
	quit

	
ICPA(RecordLN ln)	// Adjust balance for interest
	
	if $E(ICPA,1) set ADJ=ADJ+ln.unin
	if $E(ICPA,2) set ADJ=ADJ-ln.unpr
	if $E(ICPA,3) set ADJ=ADJ+ln.unes
	if $E(ICPA,4) set ADJ=ADJ-ln.teb
	if $E(ICPA,5) set ADJ=ADJ+$$MCNB^LNCO3(.ln)
	if $E(ICPA,6) set ADJ=ADJ+ln.lchg
	if $E(ICPA,7),ln.cuin>0 set ADJ=ADJ+ln.cuin
	if $E(ICPA,8),ln.cupr>0 set ADJ=ADJ-ln.cupr
	if $E(ICPA,9),ln.cues>0 set ADJ=ADJ+ln.cues
	if $E(ICPA,10) set ADJ=ADJ-ln.dic+ln.narl
	if $E(ICPA,11),ln.cupr<0 set ADJ=ADJ-ln.cupr
	set BALINT=BALINT+ADJ
	if $E(ICPA,12),ln.crlmt<BALINT S BALINT=ln.crlmt

	quit

	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>100 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>100 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set ER=0,TPD=%SystemDate
	do SOURCE^BCHSOURC("MFC","ALL",.%UserID,.BRCD,.%UserClass)
	if ER set RM=$$^MSG(7484),%BatchExit=1 do LOGERR quit

	do ^TTXLOK if ER set RM="TTXLOK" set %BatchExit=1 do LOGERR quit 

	set XTJD=%SystemDate
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","LN","SCHND=:XTJD AND DIST1FRE NOT = ''")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("MFC","ALL",.%UserID,.BRCD,.%UserClass)
	
	set BRCD=Db.getOneRow("BOBR","CUVAR"),TPD=%SystemDate
	set par("IPMODE")=3
	set par("OPTION")=2
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
