COLQRYST //PBS Utility; Collection Query User Table Priority Setup
	/*

	   ORIG: CHHABRIAS - 02/28/2002
	   DESC: Collection Query User Table Setup

	   This routine will drive the user table setup for UTBLCOLLQRY.  The
	   input screen is COMQRYST.

	   KEYWORDS

	   EXAMPLE:
	   D ^COLQRYST

	  ---- Revision History------------------------------------------------
	  
	  11/09/05 - Satyanas
	  	     Converted to PSL Standards.
	  
	  02/28/02 - CHHABRIAS - 49451
		     Converted to PSL

	  ---------------------------------------------------------------------
	*/
	
	do START
	quit
	

START	//
	
	type public Boolean ER
	type public String VFMQ
	
	type RecordUTBLCOLLQRY fUTBLCOL
	do GETCLS
	if VFMQ="Q" quit

	do SETUP(.fUTBLCOL) quit:ER 
	set VFMQ=" "
	for  do ENTRY(.fUTBLCOL) quit:"DFQ"[VFMQ 

	if "DF"[VFMQ do FILE(.fUTBLCOL) quit:ER 
	
	do END
	quit 


GETCLS	// Prompt user for product class

	type public Boolean ER
	type public String %READ,%TAB,TBL(),VFMQ
		
	set %TAB("CLS")=".CLS3/TBL=TBL("
	type RecordSTBLCLS stblcls=Db.getRecord("STBLCLS","CLS='D'")
	set TBL("D")=stblcls.des
	type RecordSTBLCLS stblclsln=Db.getRecord("STBLCLS","CLS='L'")
	set TBL("L")=stblclsln.des
	set %READ="@@%FN,,,CLS/REQ"

	do ^UTLREAD

	if VFMQ="Q" set ER=1
	quit


SETUP(RecordUTBLCOLLQRY fUTBLCOL)	// Set up screen

	type public Number CNT,MAX,%PAGE,%PG
	type public String COLQRY()
	
	set %ProcessMode=1
	set %PG=0
	set MAX=15

	// Reset array if no data for class has been filed yet
	set CNT=0

	// Loop through the UTBLCOLLQRY file to create the array COLQRY
	type DbSet rs=Db.selectDbSet("UTBLCOLLQRY","CLS=:CLS")
	if rs.isEmpty() set COLQRY(1)="" quit

	while rs.next() do {
		set fUTBLCOL=rs.getRecord("UTBLCOLLQRY")
		set CNT=CNT+1
		set COLQRY(CNT)=fUTBLCOL.prio_"|"_fUTBLCOL.query_"|"_fUTBLCOL.des
		}

	set %PAGE=10
	quit


ENTRY(RecordUTBLCOLLQRY fUTBLCOL)	// Data entry

	type public Number CNT,MAX,%MODS,%PG,%REPEAT
	
	set %PG=%PG+1
	if CNT<MAX set CNT=MAX

	// Full page
	set %REPEAT=MAX

	// Starting array offset
	set %MODS=(MAX*(%PG-1))+1

	do DRV^USID(%ProcessMode,"COLQRYST",.fUTBLCOL)

	quit 


FILE(RecordUTBLCOLLQRY fUTBLCOL)	// File data

	do PREFILE

	type public Boolean ER
	type public Number PRIO
	type public String CLS,CNT,COLQRY(),QARRAY(),RM
	type String QRY

	// Loop through the COLQRY array and set each priority accordingly

	// Check for duplicate queries within the priority list
	set CNT=""
	for  set CNT=COLQRY(CNT).order() quit:CNT.isNull()!ER  do {

		set QRY=COLQRY(CNT).piece("|",2)

		// Duplicate name - ~p1
		if QARRAY(QRY).exists() do { quit
			set ER=1
			set RM=$$^MSG(871,QRY)
			}
			
		set QARRAY(QRY)=""
		}

	if ER quit

	do Db.fastDelete("UTBLCOLLQRY","CLS=:CLS")

	set CNT=""
	for  set CNT=COLQRY(CNT).order() quit:CNT.isNull()  do {

		type String DES
	

		set PRIO=+COLQRY(CNT)
		set QRY=COLQRY(CNT).piece("|",2)
		set DES=COLQRY(CNT).piece("|",3)
		if QRY.isNull() quit 

		set fUTBLCOL=Class.new("RecordUTBLCOLLQRY")
		set fUTBLCOL.cls=CLS
		set fUTBLCOL.prio=PRIO
		set fUTBLCOL.query=QRY
		set fUTBLCOL.des=DES
		do fUTBLCOL.save()
		}
	quit 


PREFILE	// Check for multiple product types with same priority

	/*
	   The main purpose of this sub-routine is to detect and handle
	   situations in which the user has assigned the same priority to
	   multiple querys.  This is not done as a screen post-processor
	   because the screen has repeating fields.  DQ executes the
	   screen post-processor after every screen instead of at filing
	   for screens with repeating fields.
	*/

	type public Number CNT
	type public String COLQRY(),LSEQ,NPRIO,ORDER(),OSEQ
	type Number REPAINT
	type String NUM

	set REPAINT=0

	// First count the number of types entered
	set CNT=0
	set NUM=""
	for  set NUM=COLQRY(NUM).order() quit:NUM.isNull()  set CNT=CNT+1

	for LSEQ=1:1:CNT do BORDER

	set OSEQ=""
	set NPRIO=0
	for  set OSEQ=ORDER(OSEQ).order() quit:OSEQ.isNull()  do RESET

	if REPAINT do DISPLAY^DBSMACRO("ALL","","0")

	quit


BORDER	// Sort priorities (Build ORDER array)

	type public Number LSEQ,PRIO
	type public String COLQRY(),ORDER(),TEMP()
		
	set PRIO=+COLQRY(LSEQ)
	if 'PRIO kill COLQRY(LSEQ) quit 

	if 'ORDER(PRIO).exists() set ORDER(PRIO)=LSEQ
	else  do {                            

		/* If same priorities are found, resequence the order array for
		   that priority based on alphabetic order of the array. 
		*/

		type String N,QRY,SEQ
		
		set QRY=COLQRY(LSEQ).piece("|",2)
		set TEMP(QRY)=LSEQ
		set N=ORDER(PRIO).order(-1)
		
		for  set N=ORDER(N).order() quit:N.isNull()!(N=(PRIO+1))  do {
			set SEQ=ORDER(N)
			set QRY=COLQRY(SEQ).piece("|",2)
			if 'TEMP(QRY).exists() set TEMP(QRY)=SEQ
			}
			
		set N=PRIO
		set QRY=""
		
		for  set QRY=TEMP(QRY).order() quit:QRY.isNull()  do {
			set ORDER(N)=TEMP(QRY)
			set N=N+.001
			}
		}

	quit


RESET	// Reset ORDER

	type public Number LSEQ,NPRIO,PRIO
	type public String COLQRY(),ORDER(),OSEQ

	set LSEQ=ORDER(OSEQ)
	set PRIO=+COLQRY(LSEQ)
	
	if PRIO.isNull() quit

	set NPRIO=NPRIO+1
	if PRIO'=NPRIO set COLQRY(LSEQ).piece("|",1)=NPRIO
	quit


END	// End processing

	type public String ER,RM,VFMQ

	// Record ~p1 not modified
	if VFMQ="Q" set RM=$$^MSG(2596,"UTBLCOLLQRY")

	// Record ~p1 modified
	else  set RM=$$^MSG(2592,"UTBLCOLLQRY")

	set ER="W"
	quit	
	 

vSIG()	quit "60219^29310^Sethy, Satyanarayan^4970"	// Signature - LTD^TIME^USER^SIZE
