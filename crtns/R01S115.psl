R01S115	// SCA042D - Escrow Analysis Disclosure History Stmt
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 09/10/2007 15:38 - root

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String ALOWBAL,ANDT,APCND,BJD,CUSH,ECID,EJD,ESC,LCID,LNESTMT(),NM(),PCNT,PGN,PPEABE
	type String CO
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ

	set RID="SCA042D"
	set RN="Escrow Analysis Disclosure History Stmt"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB

	set %READ="IO/REQ,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String ALOWBAL,ANDT,APCND,BJD,CUSH,ECID,EJD,ESC,LCID,LNESTMT(),NM(),PCNT,PGN,PPEABE
	type public String CO
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,AST,BAL,CID,CONAM,COURTMSG,CPI,CPMT,DESC,EFD,EFDS,ETC,HISTDATE,HSTMSG,ITC,OTRS,PMT,PRSTM,REMAMT,REMTOT,RID,RMT,RN,TAMT,TRTYPE,TSEQ,TSO,TT,UTBL(),UTSO(),VL,VLOF,VRF(),VSKIPREC,VSTATS(),fHIST,vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA042D",RN="Escrow Analysis Disclosure History Stmt"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA042D","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()

	set vCOL="[HIST]TJD#2#10"

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:2 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("HIST.CID,HIST.TSEQ,HIST.TJD,HIST.ITC,HIST.TSO,HIST.TAMT,HIST.EFD,HIST.ETC,HIST.ENDBAL","HIST","HIST.CID=:ECID","HIST.CID,HIST.TSEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2
	set vovc1="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2
	set vovc1=vc1,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9
	set vc1=V.piece($C(9),1)			// HIST.CID
	set vc2=V.piece($C(9),2)			// HIST.TSEQ
	set vc3=V.piece($C(9),3)			// HIST.TJD
	set vc4=V.piece($C(9),4)			// HIST.ITC
	set vc5=V.piece($C(9),5)			// HIST.TSO
	set vc6=V.piece($C(9),6)			// HIST.TAMT
	set vc7=V.piece($C(9),7)			// HIST.EFD
	set vc8=V.piece($C(9),8)			// HIST.ETC
	set vc9=V.piece($C(9),9)			// HIST.ENDBAL
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9
 type public Boolean PRSTM
 type public Date BJD,EFD,EJD,HISTDATE
 type public Number BAL,CID,REMAMT,TSEQ,VSKIPREC
 type public String AST,DESC,HSTMSG,ITC,PMT,RMT,TAMT,TSO,TRTYPE,TT
 type public String EFDS,ETC,fHIST,LNESTMT(),UTBL(),UTSO()

 set (PMT,RMT,DESC)=""

 set CID=vc1
 set TSEQ=vc2

 if TSEQ=0 set VSKIPREC=1 quit

 set HISTDATE=vc3

 if HISTDATE>EJD set VSKIPREC=1 quit
 if HISTDATE<BJD set VSKIPREC=1 quit

 set ITC=vc4
 if ITC.isNull() set VSKIPREC=1 quit
 if ITC.extract(6) set VSKIPREC=1 quit
 
 type RecordHISTR histr=Db.getRecord("HISTR","CID=:CID,TSEQ=:TSEQ",1)
 if histr.getMode(),histr.revflg set VSKIPREC=1 quit

 set TSO=vc5
 set TAMT=vc6
 if ITC.extract(5),'(TAMT.piece("#",2)) set VSKIPREC=1 quit
 
 set EFD=vc7 if 'EFD set EFD=vc3
 set EFDS=EFD.toString("MMYY")
 set ETC=vc8
 set (HSTMSG,AST,DESC)=""
 set PMT=TAMT.piece("#",2),RMT=""   
 if ETC'="" do {
        type RecordTRN trn =Db.getRecord("TRN","ETC=:ETC")
        if (trn.pcf).extract(11) do { 
 
                 set PMT="",RMT=TAMT.piece("#",2)
                 do OUT^UTSO(.UTSO,TSO)
                 set TT=(UTSO("ESC").get()).piece(":",2)
                 set TRTYPE=$$TT^LNU(TT)
                 if '(UTBL(TRTYPE).exists()) do {
                        type ResultSet rs1=Db.select("TRTYPE","LNTRS","TRTYPE=:TRTYPE")
                        set UTBL(TRTYPE)=rs1.getCol("TRTYPE")
                        }
                 type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE=:TRTYPE",1)
                 set DESC=lntrs.trdes

		 //No previous projection statement in ^LNESTMT
		 if 'PRSTM quit

		 //remittance date different than estimate
		 if '(LNESTMT(EFDS,TT).exists()) set AST="*" quit

		 set REMAMT=LNESTMT(EFDS,TT).piece("|",2)

		 //remittance amount different than estimate
		 if REMAMT'=TAMT.piece("#",2) set AST="*"
                 }
        else  do {
                 set DESC=trn.prdes 
                 if DESC="" set DESC=trn.des
                 }
        }
 set BAL=vc9
	quit

VPREAQ	// Pre-processor (after query)

 type public Boolean PRSTM
 type public Date ANDT
 type public Number ALOWBAL,CUSH,ECID,LCID
 type public String HSTMSG

 do ADDRESS^DEPDBS
 // ** No Activity for this period
 set HSTMSG=$$^MSG(8502)
 set PRSTM=0

 if ANDT do {
        type RecordLNESTMT2 lnestmt2=Db.getRecord("LNESTMT2","ANDT=:ANDT,LCID=:LCID,ECID=:ECID",1)
        if ALOWBAL>CUSH,lnestmt2.getMode() set PRSTM=1
 }
 
 if PRSTM do HRAMT^LNEASTM
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=ALOWBAL,ANDT,APCND,BJD,CUSH,ECID,EJD,ESC,LCID,LNESTMT(),NM(),PCNT
 //Incoming=PGN,PPEABE
 type public String CO
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(2).get() do VDTL2 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(2)
	type Public String vc1,vovc1,vc2,vovc2
	type Number vb1,vb2
	set (vb1,vb2)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(2)=VT(2)+1
	quit

VDTL2	// Detail
	type public String ALOWBAL,ANDT,APCND,AST,BAL,BJD,CID,CO,COURTMSG,CPI,CPMT,CUSH,DESC,ECID,EFD,EFDS,EJD,ESC,ETC,HISTDATE,HSTMSG,IOSL,ITC,LCID,LNESTMT(),NM(),OTRS,PCNT,PGN,PMT,PPEABE,PRSTM,REMAMT,REMTOT,RMT,TAMT,TRTYPE,TSEQ,TSO,TT,UTBL(),UTSO(),V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VSKIPREC,VT(),fHIST,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL=" "_$J($$DAT^%ZM(vc3),10)
	set VL=VL_$J("",14-VL.length())_$S(+PMT=0:$J("",10),1:$J($FN(PMT,",",2),10))
	set VL=VL_$J("",28-VL.length())_$S(+RMT=0:$J("",10),1:$J($FN(RMT,",",2),10))
	set VL=VL_$J("",38-VL.length())_$E(AST,1,1)
	set VL=VL_$J("",42-VL.length())_$J($FN(BAL,",",2),10)
	set VL=VL_$J("",56-VL.length())_$E(DESC,1,20)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ALOWBAL,ANDT,APCND,AST,BAL,BJD,CID,CO,CONAM,COURTMSG,CPI,CPMT,CUSH,DESC,ECID,EFD,EFDS,EJD,ESC,ETC,HISTDATE,HSTMSG,ITC,LCID,LNESTMT(),NM(),OTRS,PCNT,PGN,PMT,PPEABE,PRSTM,REMAMT,REMTOT,RID,RMT,RN,TAMT,TRTYPE,TSEQ,TSO,TT,UTBL(),UTSO(),VL,VSKIPREC,fHIST,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+37,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                                                                  "_"Page:"
	do VP1 quit:VFMQ!verror.get()  set V=$J(PGN,2) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",72-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                 "_"ESCROW ANALYSIS ACCOUNT DISCLOSURE STATEMENT"
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="     "_$E(CO(1),1,40)
	do VOM
	set VL="     "_$E(CO(2),1,60)
	do VOM
	set VL="     "_$E(CO(3),1,60)
	do VOM
	set VL="     "_$E(CO(4),1,60)
	do VOM
	set VL="     "_$E(CO(5),1,60)
	do VOM
	set VL="     "_$E(CO(6),1,60)
	do VOM
	do VP3 quit:VFMQ!verror.get()  set V=$E(COURTMSG,1,50) set VL="     "_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="     "_$E(NM(1),1,40)
	set VL=VL_$J("",47-VL.length())_"LOAN ACCOUNT: "
	set VL=VL_$J("",63-VL.length())_$J(LCID,12)
	do VOM
	set VL="     "_$E(NM(2),1,40)
	set VL=VL_$J("",47-VL.length())_"ESCROW ACCOUNT:"
	set VL=VL_$J("",63-VL.length())_$E(ESC,1,10)
	do VOM
	set VL="     "_$E(NM(3),1,40)
	do VOM
	set VL="     "_$E(NM(4),1,40)
	do VOM
	set VL="     "_$E(NM(5),1,40)
	do VOM
	set VL="" do VOM
	set VL="                 "_"ACCOUNT HISTORY FOR:"
	set VL=VL_$J("",38-VL.length())_$J($$DAT^%ZM(BJD),10)
	set VL=VL_$J("",51-VL.length())_"to "
	set VL=VL_$J("",54-VL.length())_$J($$DAT^%ZM(EJD),10)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="   "_"Mortgage Payment: $"
	do VP4 quit:VFMQ!verror.get()  set V=$FN(CPMT,",",2)_$J("",10-$L($FN(CPMT,",",2)))
	set VL=VL_$J("",23-VL.length())_V
	set VL=VL_$J("",34-VL.length())_"Principal & Interest: $"
	set VL=VL_$J("",58-VL.length())_$J($FN(CPI,",",2),9)
	do VOM
	set VL="                                                "_"Escrow: $"
	set VL=VL_$J("",58-VL.length())_$J($FN(OTRS,",",2),9)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="                 "_"Escrow                      Ending"
	do VOM
	set VL="     "_"Date        Payment    Remittance       Balance    Description"
	do VOM
	set VL=" "_"=================================================================================="
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String ALOWBAL,ANDT,AST,BAL,BJD,CID,COURTMSG,CPI,CPMT,CUSH,DESC,ECID,EFD,EFDS,EJD,ESC,ETC,HISTDATE,HSTMSG,ITC,LCID,LNESTMT(),OTRS,PGN,PMT,PRSTM,REMAMT,REMTOT,RMT,TAMT,TRTYPE,TSEQ,TSO,TT,UTBL(),UTSO(),VSKIPREC,fHIST,vovc1,vovc2
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+18>IOSL do VHDG0 quit:VFMQ

	set VL="         "_$E(HSTMSG,1,65)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="   "_"An asterisk(*) indicates a difference from a previous estimate"
	do VOM
	set VL="   "_"either in the date or the amount."
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="The Federal Law limit for the lowest monthly balance may not exceed 1/6th"
	do VOM
	set VL="of the total estimated remittance amount."
	do VOM
	set VL="" do VOM
	set VL="Last year's total anticipated remittance from your account:      $ "
	do VP5 quit:VFMQ!verror.get()  set V=$J($FN(REMTOT,",",2),9)
	set VL=VL_$J("",67-VL.length())_V
	do VOM
	set VL="State Law/mortgage contract limit for the lowest monthly balance:$"
	set VL=VL_$J("",67-VL.length())_$J($FN(CUSH,",",2),9)
	do VOM
	set VL="Actual lowest monthly balance for the period:                    $"
	set VL=VL_$J("",67-VL.length())_$J($FN(ALOWBAL,",",2),9)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="Any items with an asterisk in the Account History may explain any differences"
	do VOM
	set VL="in the lowest monthly balance. For further information, please contact us."
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: PGN

 type public Number PGN

 set PGN=PGN+1
	quit

VP2	// Column post-processor - Variable: PGN

 type public Number PCNT

 set PCNT=PCNT+1
	quit

VP3	// Column pre-processor - Variable: COURTMSG

 type public String COURTMSG

 set COURTMSG=CUVAR.courtmsg

	quit

VP4	// Column pre-processor - Variable: CPMT

 type public Date APCND
 type public Number CPI,CPMT,LCID,OTRS

 type RecordLN ln=Db.getRecord("LN","CID=:LCID")
 set CPI=ln.pmtpi

 type RecordLNAPCHG lnapchg=Db.getRecord("LNAPCHG","APCND=:APCND,CID=:LCID")
 set OTRS=lnapchg.otrs
 set CPMT=OTRS+CPI
	quit

VP5	// Column pre-processor - Variable: REMTOT

 type public Number PPEABE,REMTOT

 set REMTOT=PPEABE
 
	quit
