V01S254(%ProcessMode,)   // -  - SID= <EFTREV> Electronic Payment Review
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:53 - shetyes
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,ACCINC,EFTREV",VSID="EFTREV",VPGM=$T(+0),VSNAME="Electronic Payment Review"
 set vPSL=1
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(),VDA1(),^DBSPNT()

 if '%ProcessMode do VNEW(),VPR(),VDA1()
 if %ProcessMode do VLOD() quit:$G(ER)  do VPR(),VDA1()

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB()
	quit


VNEW() // Initialize arrays if %O=0
 
 do VDEF()
 do VLOD()
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF()
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD() // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR() // Display screen prompts
 set VO="19||13|"
 set VO(0)="|0"
 set VO(1)=$C(1,20,45,1,0,0,0,0,0,0)_"01T Review of Electronic Incoming Cancellations "
 set VO(2)=$C(4,10,14,0,0,0,0,0,0,0)_"01TDate Received:"
 set VO(3)=$C(4,46,15,0,0,0,0,0,0,0)_"01TAccount Number:"
 set VO(4)=$C(5,11,13,0,0,0,0,0,0,0)_"01TPayment Type:"
 set VO(5)=$C(5,47,14,0,0,0,0,0,0,0)_"01TAccount Title:"
 set VO(6)=$C(6,12,12,0,0,0,0,0,0,0)_"01TBranch Code:"
 set VO(7)=$C(6,40,21,0,0,0,0,0,0,0)_"01TReview File Sequence:"
 set VO(8)=$C(9,8,13,0,0,0,0,0,0,0)_"01TSending Inst:"
 set VO(9)=$C(10,8,13,0,0,0,0,0,0,0)_"01TSending Acct:"
 set VO(10)=$C(10,49,15,0,0,0,0,0,0,0)_"01TEffective Date:"
 set VO(11)=$C(13,14,7,0,0,0,0,0,0,0)_"01TAmount:"
 set VO(12)=$C(13,49,15,0,0,0,0,0,0,0)_"01TConstant Field:"
 set VO(13)=$C(14,12,9,0,0,0,0,0,0,0)_"01TCurrency:"
 set VO(14)=$C(14,49,15,0,0,0,0,0,0,0)_"01TVariable Field:"
 set VO(15)=$C(15,49,15,0,0,0,0,0,0,0)_"01TSpecific Field:"
 set VO(16)=$C(18,5,16,0,0,0,0,0,0,0)_"01TAccount Queries:"
 set VO(17)=$C(18,45,19,0,0,0,0,0,0,0)_"01T Reversal Tran Seq:"
 set VO(18)=$C(19,3,18,0,0,0,0,0,0,0)_"01TEFTPAY Seq Number:"
 set VO(19)=$C(19,54,10,1,0,0,0,0,0,0)_"01T Accepted:"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1()  // Display screen data
 new V
 s ACCINC=$G(ACCINC)
 s EFTREV=$G(EFTREV)
 s EFTRKEY=$G(EFTRKEY)
 //
 set VO="37|20|13|"
 set VO(20)=$C(4,25,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM($P($G(EFTRKEY),"|",1))
 set VO(21)=$C(4,62,12,2,0,0,0,0,0,0)_"01T"_$P($G(EFTRKEY),"|",3)
 set VO(22)=$C(5,25,3,2,0,0,0,0,0,0)_"01T"_$P($G(EFTRKEY),"|",4)
 set VO(23)=$C(5,62,19,2,0,0,0,0,0,0)_"01T"_$P($G(EFTRKEY),"|",6)
 set VO(24)=$C(6,25,6,2,0,0,0,0,0,0)_"01T"_$P($G(EFTRKEY),"|",2)
 set VO(25)=$C(6,62,3,2,0,0,0,0,0,0)_"01T"_$P($G(EFTRKEY),"|",5)
 set VO(26)=$C(9,22,12,2,0,0,0,0,0,0)_"01T"_$P($G(EFTREV),"|",2)
 set VO(27)=$C(10,22,16,2,0,0,0,0,0,0)_"01T"_$P($G(EFTREV),"|",1)
 set VO(28)=$C(10,65,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM($P($G(EFTREV),"|",8))
 set V=$P($G(EFTREV),"|",3) set VO(29)=$C(13,22,15,2,0,0,0,0,0,0)_"01$"_$S(V="":"",1:$J(V,0,2))
 set VO(30)=$C(13,65,10,2,0,0,0,0,0,0)_"01N"_$P($G(EFTREV),"|",6)
 set VO(31)=$C(14,22,3,2,0,0,0,0,0,0)_"01T"_$P($G(EFTREV),"|",4)
 set VO(32)=$C(14,65,10,2,0,0,0,0,0,0)_"01T"_$P($G(EFTREV),"|",5)
 set VO(33)=$C(15,65,10,2,0,0,0,0,0,0)_"01N"_$P($G(EFTREV),"|",7)
 set VO(34)=$C(18,22,1,2,0,0,0,0,0,0)_"00N"_$G(ACCINC)
 set VO(35)=$C(18,65,8,2,0,0,0,0,0,0)_"00N"_$P($G(EFTREV),"|",22)
 set VO(36)=$C(19,22,12,2,0,0,0,0,0,0)_"01T"_$P($G(EFTREV),"|",23)
 set VO(37)=$C(19,65,1,2,0,0,0,0,0,0)_"00L"_$S($P($G(EFTREV),"|",21):"Y",1:"N")
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB()
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=18,VPT=1,VPB=19,PGM=$T(+0),DLIB="SYSDEV",DFID=""
 set OLNTB=19065
 
 // 
	
	
 set %TAB(1)=$C(3,24,10)_"20D12401|*EFTRKEY|[*]@EFTRKEY"
 set %TAB(2)=$C(3,61,12)_"20T12403|*EFTRKEY|[*]@EFTRKEY"
 set %TAB(3)=$C(4,24,3)_"20T12404|*EFTRKEY|[*]@EFTRKEY"
 set %TAB(4)=$C(4,61,19)_"20T12406|*EFTRKEY|[*]@EFTRKEY|||||||||20"
 set %TAB(5)=$C(5,24,6)_"20T12402|*EFTRKEY|[*]@EFTRKEY"
 set %TAB(6)=$C(5,61,3)_"20T12405|*EFTRKEY|[*]@EFTRKEY"
 set %TAB(7)=$C(8,21,12)_"20T12402|*EFTREV|[*]@RECINST"
 set %TAB(8)=$C(9,21,16)_"20T12401|*EFTREV|[*]@RECACCT"
 set %TAB(9)=$C(9,64,10)_"20D12408|*EFTREV|[*]@EFTREV"
 set %TAB(10)=$C(12,21,15)_"20$12403|*EFTREV|[*]@AMT|||||||2"
 set %TAB(11)=$C(12,64,10)_"20N12406|*EFTREV|[*]@CONSTANT"
 set %TAB(12)=$C(13,21,3)_"20T12404|*EFTREV|[*]@CRCD"
 set %TAB(13)=$C(13,64,10)_"20T12405|*EFTREV|[*]@VARIABLE"
 set %TAB(14)=$C(14,64,10)_"20N12407|*EFTREV|[*]@SPECIFIC"
 set %TAB(15)=$C(17,21,1)_"00N|*ACCINC|[*]@ACCINC|||do VP1^V01S254()|do VP2^V01S254()"
 set %TAB(16)=$C(17,64,8)_"00N12422|*EFTREV|[*]@ACCSEQ|||do VP3^V01S254()"
 set %TAB(17)=$C(18,21,12)_"20T12423|*EFTREV|[*]@EFTSEQ"
 set %TAB(18)=$C(18,64,1)_"00L12421|*EFTREV|[*]@EFTREV|||do VP4^V01S254()"
 do VTBL()
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL() //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1() //
public INQTST	//
 quit:'X 
 type String KVAR
 set CID=$P(EFTRKEY,"|",3)
 if X=1 do HIST set X="" quit
 // Invalid Inquiry option ~p1.
 do Runtime.setErrMSG("EFTREV",6067,X) quit:ER

HIST	//

 type String %CODE,%CRCD,%ID,%LOGID,%READ,%TAB,EFTRKEY,EFTTYPE,I,KEY,REC,REC,TMP,VSNAME
 type Number %ODP,%PAGE,%PG,%TOKEN,%VERSN,B,BRCD,C,EXIT,FINISH,GDSP,NI,OLNTB,PFID,RECPTR,RSEQ,STATLIN,UIDLOC,V,V1,VPB

 do ^UHIS
 quit 
VP2() //
 set X=""
 do CHANGE^DBSMACRO("TBL","TMP(")
 quit

VP3() //
 // Editcheck entered transaction sequence
 type number savhist

 set savhist=V
 quit:X=V 
 if CID="ALL" set CID=$P(EFTRKEY,"|",3)

 type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:X",1)
 // Invalid History Sequence ~p1
 if 'hist.getMode() do Runtime.setErrMSG("EFTREV",3532) quit

 // Must be a financial transaction
 if '$L(hist.itc) do Runtime.setErrMSG("EFTREV",1792) quit

 // Must be a credit transaction
 if 'hist.tjd do Runtime.setErrMSG("EFTREV",1790) quit

 // Transaction already error-corrected
 if hist.tlo do Runtime.setErrMSG("EFTREV",2676) quit

 // Transaction previously reversed
 if hist.trc do Runtime.setErrMSG("EFTREV",3544) quit

 // Invalid sending institution
 if 'hist.tso[$P(EFTREV,"|",2) do Runtime.setErrMSG("EFTREV",1465) quit

 // Invalid sending account
 if 'hist.tso[$P(EFTREV,"|",1) do Runtime.setErrMSG("EFTREV",1464) quit

 // Invalid transaction amount
 if +hist.tamt'=+$P(EFTREV,"|",3) do Runtime.setErrMSG("EFTREV",6070) quit
 quit
VP4() //
 if +X=+V&(savhist=$P(EFTREV,"|",22)) do GOTO^DBSMACRO("END") quit 

 type Number accept
 set accept=X
 if 'accept do ACCTST

 // If there is a history sequence in the record go to ACCTST
 if $L($P(EFTREV,"|",22)) do ACCTST

 // History Sequence Number must be entered
 set ER="W" do Runtime.setErrMSG("EFTREV",6071) quit:ER
 set X=0
 do GOTO^DBSMACRO("@ACCSEQ") quit 
 quit 

ACCTST	//
 /*
   ESTAT is the status of the POCVAL that we created previously.  If this is a
   new review item, there will be no EFTPAY sequnce number in position 23,
   otherwise there should be a value there.
 */
 type Number ECID,ESEQ

 if $P(EFTREV,"|",23)="" set ESTAT=""
 else  do {
 	set ECID=$P(EFTRKEY,"|",3)
 	set ESEQ=$P(EFTREV,"|",23)
	type RecordEFTPAY eftpay=Db.getRecord("EFTPAY","CID=:ECID,SEQ=:ESEQ")
	set ESTAT=eftpay.status
	}
 /*
   The FILSTAT variable stores 2 pieces of information:
         1: The %O value the the EFTREV record will be filed as
         2: The %O value that the EFTPAY record will be filed as
 */

 kill FILESTAT(RECPTR)

 // Check if POC may be accepted
 if accept do { 
	//New -> create new rec
 	if $P(EFTREV,"|",23)="" set FILESTAT(RECPTR)="1|0" quit
	//Already exists -> modify record
 	if $P(EFTREV,"|",23)'=""&(ESTAT="A"!(ESTAT="Y")) set FILESTAT(RECPTR)="1|1" quit
 	}
 if 'accept,((ESTAT="A")!(ESTAT="Y")) do {
 	set FILESTAT(RECPTR)="1|3"
 	do DELETE^DBSMACRO("@ACCSEQ","1","0")
 	do DELETE^DBSMACRO("@EFTSEQ","1","0")
 	}
 // Payment order cancellation (value) already completed
 if 'accept,((ESTAT'="A")&(ESTAT'="Y")) do Runtime.setErrMSG("EFTREV",2162) quit:ER  quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 do VPR()
 do VDA1()
 do ^DBSPNT()
 quit

VW()
 do VDA1()
 do ^DBSPNT(10)
 quit

VDAPNT()
 do VDA1()
 do ^DBSPNT(0,2)
 quit

VDA
 do VDA1()
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 quit ""
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
