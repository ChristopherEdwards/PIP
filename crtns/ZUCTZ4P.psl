ZUCTZ4P()	// PSL Test Set, test function signatures for method with 4 parameters
	/*
	ORIG: Frans S.C. Witte - 2006-08-16
	DESC: PSL Test Set, test function signatures for method with 4 parameters

	---- Comment -----------------------------------------------------------
	See ZUC2P for a descrition of the general structure of the subroutines,
	and suggestions about changing the pattern text by real test values.

	---- Revision History --------------------------------------------------
	2006-08-16, Frans S.C. Witte - CR 22843
		Initial, partial, implementation
	*/
	quit

	// #####################################################################
	// Test function signatures, method with 4 parameters
	// #####################################################################

	// =====================================================================
public mtd4p()	// Validate TestClass.method4p(P1Class,P2Class,P3Class,P4Class)
	/* ---------------------------------------------------------------------
	Procedure that validates code relating to TestClass.method4p().
	Validation values (see ZUCT for meaning of Cn and Rn):
	C0/R0: "", "P0valid", "P0wrong"
	C1/R1: absent, "", "P1valid", "P1wrong"
	C2/R2: absent, "", "P2valid", "P2wrong"
	C3/R3: absent, "", "P3valid", "P3wrong"
	C4/R4: absent, "", "P4valid", "P4wrong"
	calls:
	* public mtd4p00()		// validate C0.method4p(C1,C2,C3,C4)
	* public mtd4p01(R0)		// validate R0.method4p(C1,C2,C3,C4)
	* public mtd4p02(R1)		// validate C0.method4p(R1,C2,C3,C4)
	* public mtd4p03(R2)		// validate C0.method4p(C1,R2,C3,C4)
	* public mtd4p04(R3)		// validate C0.method4p(C1,C2,R3,C4)
	* public mtd4p05(R4)		// validate C0.method4p(C1,C2,C3,R4)
	* public mtd4p06(R0,R1)		// validate R0.method4p(R1,C2,C3,C4)
	* public mtd4p07(R0,R2)		// validate R0.method4p(C1,R2,C3,C4)
	* public mtd4p08(R0,R3)		// validate R0.method4p(C1,C2,R3,C4)
	* public mtd4p09(R0,R4)		// validate R0.method4p(C1,C2,C3,R4)
	* public mtd4p10(R1,R2)		// validate C0.method4p(R1,R2,C3,C4)
	* public mtd4p11(R1,R3)		// validate C0.method4p(R1,C2,R3,C4)
	* public mtd4p12(R1,R4)		// validate C0.method4p(R1,C2,C3,R4)
	* public mtd4p13(R2,R3)		// validate C0.method4p(C1,R2,R3,C4)
	* public mtd4p14(R2,R4)		// validate C0.method4p(C1,R2,C3,R4)
	* public mtd4p15(R3,R4)		// validate C0.method4p(C1,C2,R3,R4)
	* public mtd4p16(R0,R1,R2)	// validate R0.method4p(R1,R2,C3,C4)
	* public mtd4p17(R0,R1,R3)	// validate R0.method4p(R1,C2,R3,C4)
	* public mtd4p18(R0,R1,R4)	// validate R0.method4p(R1,C2,C3,R4)
	* public mtd4p19(R0,R2,R3)	// validate R0.method4p(C1,R2,R3,C4)
	* public mtd4p20(R0,R2,R4)	// validate R0.method4p(C1,R2,C3,R4)
	* public mtd4p21(R0,R3,R4)	// validate R0.method4p(C1,C2,R3,R4)
	* public mtd4p22(R1,R2,R3)	// validate C0.method4p(R1,R2,R3,C4)
	* public mtd4p23(R1,R2,R4)	// validate C0.method4p(R1,R2,C3,R4)
	* public mtd4p24(R1,R3,R4)	// validate C0.method4p(R1,C2,R3,R4)
	* public mtd4p25(R2,R3,R4)	// validate C0.method4p(C1,R2,R3,R4)
	* public mtd4p26(R0,R1,R2,R3)	// validate R0.method4p(R1,R2,R3,C4)
	* public mtd4p27(R0,R1,R2,R4)	// validate R0.method4p(R1,R2,C3,R4)
	* public mtd4p28(R0,R1,R3,R4)	// validate R0.method4p(R1,C2,R3,R4)
	* public mtd4p29(R0,R2,R3,R4)	// validate R0.method4p(C1,R2,R3,R4)
	* public mtd4p30(R1,R2,R3,R4)	// validate C0.method4p(R1,R2,R3,R4)
	* public mtd4p31(R0,R1,R2,R3,R4) // validate R0.method4p(R1,R2,R3,R4)
	*/
	type Primitive R0
	type Primitive R1
	type Primitive R2
	type Primitive R3
	type Primitive R4

	do mtd4p00()
	for R0 = "", "P0valid" do {
		do mtd4p01( R0)
		for R1 = "", "P1valid" do {
			if R0.isNull() do mtd4p02(R1)
			do mtd4p06(R0,R1)
			for R2 = "", "P2valid" do {
				if R0.isNull(),R1.isNull() do mtd4p03(R2)
				if R1.isNull() do mtd4p07(R0,R2)
				if R0.isNull() do mtd4p10(R1,R2)
				do mtd4p16(R0,R1,R2)
				for R3 = "", "P3valid" do {
					if R0.isNull(),R1.isNull(),R2.isNull() do mtd4p04(R3)
					if R1.isNull(),R2.isNull() do mtd4p08(R0,R3)
					if R0.isNull(),R2.isNull() do mtd4p11(R1,R3)
					if R0.isNull(),R1.isNull() do mtd4p13(R2,R3)
					if R2.isNull() do mtd4p17(R0,R1,R3)
					if R1.isNull() do mtd4p19(R0,R2,R3)
					if R0.isNull() do mtd4p22(R1,R2,R3)
					do mtd4p26(R0,R1,R2,R3)
					for R4 = "", "P4valid" do {
						if R0.isNull(),R1.isNull(),R2.isNull(),R3.isNull() do mtd4p05(R4)
						if R1.isNull(),R2.isNull(),R3.isNull() do mtd4p09(R0,R4)
						if R0.isNull(),R2.isNull(),R3.isNull() do mtd4p12(R1,R4)
						if R0.isNull(),R1.isNull(),R3.isNull() do mtd4p14(R2,R4)
						if R0.isNull(),R1.isNull(),R2.isNull() do mtd4p15(R3,R4)
						if R2.isNull(),R3.isNull() do mtd4p18(R0,R1,R4)
						if R1.isNull(),R3.isNull() do mtd4p20(R0,R2,R4)
						if R1.isNull(),R2.isNull() do mtd4p21(R0,R3,R4)
						if R0.isNull(),R3.isNull() do mtd4p23(R1,R2,R4)
						if R0.isNull(),R2.isNull() do mtd4p24(R1,R3,R4)
						if R0.isNull(),R1.isNull() do mtd4p25(R2,R3,R4)
						if R3.isNull() do mtd4p27(R0,R1,R2,R4)
						if R2.isNull() do mtd4p28(R0,R1,R3,R4)
						if R1.isNull() do mtd4p29(R0,R2,R3,R4)
						if R0.isNull() do mtd4p30(R1,R2,R3,R4)
						do mtd4p31(R0,R1,R2,R3,R4)
					}
				}
			}
		}
	}
	quit

	// =====================================================================
public mtd4p00()
	// =====================================================================
	// validate ({TestClass}C0).method4p(C1,C2,C3,C4) -- 3 * 4 * 4 * 4 * 4 = 768 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p01( Primitive R0)
	// validate R0.method4p(C1,C2,C3,C4) -- 4 * 4 * 4 * 4 = 256 combinations
	//
	type Primitive rRes
  
	/* ================ begin commented out ================
	set rRes = R0.method4p()			// C1 absent, C2 absent, C3 absent, C4 absent
	write "mtd4p01(R0).AAAA:<"_R0_">.method4p()="_rRes,!

	set rRes = R0.method4p(,,,"")	// C1 absent, C2 absent, C3 absent, C4=""
	write "mtd4p01(R0).AAAE:<"_R0_">.method4p(,,,"""")="_rRes,!

	set rRes = R0.method4p(,,,"P4valid")	// C1 absent, C2 absent, C3 absent, C4="P4valid"
	write "mtd4p01(R0).AAAV:<"_R0_">.method4p(,,,""P4valid"")="_rRes,!

	set rRes = R0.method4p(,,,"P4wrong")	// C1 absent, C2 absent, C3 absent, C4="P4wrong"
	write "mtd4p01(R0).AAAW:<"_R0_">.method4p(,,,""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,,"")	// C1 absent, C2 absent, C3="", C4 absent
	write "mtd4p01(R0).AAEA:<"_R0_">.method4p(,,"""")="_rRes,!

	set rRes = R0.method4p(,,"","")	// C1 absent, C2 absent, C3="", C4=""
	write "mtd4p01(R0).AAEE:<"_R0_">.method4p(,,"""","""")="_rRes,!

	set rRes = R0.method4p(,,"","P4valid")	// C1 absent, C2 absent, C3="", C4="P4valid"
	write "mtd4p01(R0).AAEV:<"_R0_">.method4p(,,"""",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,,"","P4wrong")	// C1 absent, C2 absent, C3="", C4="P4wrong"
	write "mtd4p01(R0).AAEW:<"_R0_">.method4p(,,"""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,,"P3valid")	// C1 absent, C2 absent, C3="P3valid", C4 absent
	write "mtd4p01(R0).AAVA:<"_R0_">.method4p(,,""P3valid"")="_rRes,!

	set rRes = R0.method4p(,,"P3valid","")	// C1 absent, C2 absent, C3="P3valid", C4=""
	write "mtd4p01(R0).AAVE:<"_R0_">.method4p(,,""P3valid"","""")="_rRes,!

	set rRes = R0.method4p(,,"P3valid","P4valid")	// C1 absent, C2 absent, C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).AAVV:<"_R0_">.method4p(,,""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,,"P3valid","P4wrong")	// C1 absent, C2 absent, C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).AAVW:<"_R0_">.method4p(,,""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,,"P3wrong")	// C1 absent, C2 absent, C3="P3wrong", C4 absent
	write "mtd4p01(R0).AAWA:<"_R0_">.method4p(,,""P3wrong"")="_rRes,!

	set rRes = R0.method4p(,,"P3wrong","")	// C1 absent, C2 absent, C3="P3wrong", C4=""
	write "mtd4p01(R0).AAWE:<"_R0_">.method4p(,,""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p(,,"P3wrong","P4valid")	// C1 absent, C2 absent, C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).AAWV:<"_R0_">.method4p(,,""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,,"P3wrong","P4wrong")	// C1 absent, C2 absent, C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).AAWW:<"_R0_">.method4p(,,""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"")	// C1 absent, C2="", C3 absent, C4 absent
	write "mtd4p01(R0).AEAA:<"_R0_">.method4p(,"""")="_rRes,!

	set rRes = R0.method4p(,"",,"")	// C1 absent, C2="", C3 absent, C4=""
	write "mtd4p01(R0).AEAE:<"_R0_">.method4p(,"""",,"""")="_rRes,!

	set rRes = R0.method4p(,"",,"P4valid")	// C1 absent, C2="", C3 absent, C4="P4valid"
	write "mtd4p01(R0).AEAV:<"_R0_">.method4p(,"""",,""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"",,"P4wrong")	// C1 absent, C2="", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).AEAW:<"_R0_">.method4p(,"""",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"","")	// C1 absent, C2="", C3="", C4 absent
	write "mtd4p01(R0).AEEA:<"_R0_">.method4p(,"""","""")="_rRes,!

	set rRes = R0.method4p(,"","","")	// C1 absent, C2="", C3="", C4=""
	write "mtd4p01(R0).AEEE:<"_R0_">.method4p(,"""","""","""")="_rRes,!

	set rRes = R0.method4p(,"","","P4valid")	// C1 absent, C2="", C3="", C4="P4valid"
	write "mtd4p01(R0).AEEV:<"_R0_">.method4p(,"""","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"","","P4wrong")	// C1 absent, C2="", C3="", C4="P4wrong"
	write "mtd4p01(R0).AEEW:<"_R0_">.method4p(,"""","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"","P3valid")	// C1 absent, C2="", C3="P3valid", C4 absent
	write "mtd4p01(R0).AEVA:<"_R0_">.method4p(,"""",""P3valid"")="_rRes,!

	set rRes = R0.method4p(,"","P3valid","")	// C1 absent, C2="", C3="P3valid", C4=""
	write "mtd4p01(R0).AEVE:<"_R0_">.method4p(,"""",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p(,"","P3valid","P4valid")	// C1 absent, C2="", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).AEVV:<"_R0_">.method4p(,"""",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"","P3valid","P4wrong")	// C1 absent, C2="", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).AEVW:<"_R0_">.method4p(,"""",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"","P3wrong")	// C1 absent, C2="", C3="P3wrong", C4 absent
	write "mtd4p01(R0).AEWA:<"_R0_">.method4p(,"""",""P3wrong"")="_rRes,!

	set rRes = R0.method4p(,"","P3wrong","")	// C1 absent, C2="", C3="P3wrong", C4=""
	write "mtd4p01(R0).AEWE:<"_R0_">.method4p(,"""",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p(,"","P3wrong","P4valid")	// C1 absent, C2="", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).AEWV:<"_R0_">.method4p(,"""",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"","P3wrong","P4wrong")	// C1 absent, C2="", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).AEWW:<"_R0_">.method4p(,"""",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2valid")	// C1 absent, C2="P2valid", C3 absent, C4 absent
	write "mtd4p01(R0).AVAA:<"_R0_">.method4p(,""P2valid"")="_rRes,!

	set rRes = R0.method4p(,"P2valid",,"")	// C1 absent, C2="P2valid", C3 absent, C4=""
	write "mtd4p01(R0).AVAE:<"_R0_">.method4p(,""P2valid"",,"""")="_rRes,!

	set rRes = R0.method4p(,"P2valid",,"P4valid")	// C1 absent, C2="P2valid", C3 absent, C4="P4valid"
	write "mtd4p01(R0).AVAV:<"_R0_">.method4p(,""P2valid"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2valid",,"P4wrong")	// C1 absent, C2="P2valid", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).AVAW:<"_R0_">.method4p(,""P2valid"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2valid","")	// C1 absent, C2="P2valid", C3="", C4 absent
	write "mtd4p01(R0).AVEA:<"_R0_">.method4p(,""P2valid"","""")="_rRes,!

	set rRes = R0.method4p(,"P2valid","","")	// C1 absent, C2="P2valid", C3="", C4=""
	write "mtd4p01(R0).AVEE:<"_R0_">.method4p(,""P2valid"","""","""")="_rRes,!

	set rRes = R0.method4p(,"P2valid","","P4valid")	// C1 absent, C2="P2valid", C3="", C4="P4valid"
	write "mtd4p01(R0).AVEV:<"_R0_">.method4p(,""P2valid"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2valid","","P4wrong")	// C1 absent, C2="P2valid", C3="", C4="P4wrong"
	write "mtd4p01(R0).AVEW:<"_R0_">.method4p(,""P2valid"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2valid","P3valid")	// C1 absent, C2="P2valid", C3="P3valid", C4 absent
	write "mtd4p01(R0).AVVA:<"_R0_">.method4p(,""P2valid"",""P3valid"")="_rRes,!

	set rRes = R0.method4p(,"P2valid","P3valid","")	// C1 absent, C2="P2valid", C3="P3valid", C4=""
	write "mtd4p01(R0).AVVE:<"_R0_">.method4p(,""P2valid"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p(,"P2valid","P3valid","P4valid")	// C1 absent, C2="P2valid", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).AVVV:<"_R0_">.method4p(,""P2valid"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2valid","P3valid","P4wrong")	// C1 absent, C2="P2valid", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).AVVW:<"_R0_">.method4p(,""P2valid"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2valid","P3wrong")	// C1 absent, C2="P2valid", C3="P3wrong", C4 absent
	write "mtd4p01(R0).AVWA:<"_R0_">.method4p(,""P2valid"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p(,"P2valid","P3wrong","")	// C1 absent, C2="P2valid", C3="P3wrong", C4=""
	write "mtd4p01(R0).AVWE:<"_R0_">.method4p(,""P2valid"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p(,"P2valid","P3wrong","P4valid")	// C1 absent, C2="P2valid", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).AVWV:<"_R0_">.method4p(,""P2valid"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2valid","P3wrong","P4wrong")	// C1 absent, C2="P2valid", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).AVWW:<"_R0_">.method4p(,""P2valid"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2wrong")	// C1 absent, C2="P2wrong", C3 absent, C4 absent
	write "mtd4p01(R0).AWAA:<"_R0_">.method4p(,""P2wrong"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong",,"")	// C1 absent, C2="P2wrong", C3 absent, C4=""
	write "mtd4p01(R0).AWAE:<"_R0_">.method4p(,""P2wrong"",,"""")="_rRes,!

	set rRes = R0.method4p(,"P2wrong",,"P4valid")	// C1 absent, C2="P2wrong", C3 absent, C4="P4valid"
	write "mtd4p01(R0).AWAV:<"_R0_">.method4p(,""P2wrong"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong",,"P4wrong")	// C1 absent, C2="P2wrong", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).AWAW:<"_R0_">.method4p(,""P2wrong"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2wrong","")	// C1 absent, C2="P2wrong", C3="", C4 absent
	write "mtd4p01(R0).AWEA:<"_R0_">.method4p(,""P2wrong"","""")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","","")	// C1 absent, C2="P2wrong", C3="", C4=""
	write "mtd4p01(R0).AWEE:<"_R0_">.method4p(,""P2wrong"","""","""")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","","P4valid")	// C1 absent, C2="P2wrong", C3="", C4="P4valid"
	write "mtd4p01(R0).AWEV:<"_R0_">.method4p(,""P2wrong"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","","P4wrong")	// C1 absent, C2="P2wrong", C3="", C4="P4wrong"
	write "mtd4p01(R0).AWEW:<"_R0_">.method4p(,""P2wrong"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2wrong","P3valid")	// C1 absent, C2="P2wrong", C3="P3valid", C4 absent
	write "mtd4p01(R0).AWVA:<"_R0_">.method4p(,""P2wrong"",""P3valid"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","P3valid","")	// C1 absent, C2="P2wrong", C3="P3valid", C4=""
	write "mtd4p01(R0).AWVE:<"_R0_">.method4p(,""P2wrong"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","P3valid","P4valid")	// C1 absent, C2="P2wrong", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).AWVV:<"_R0_">.method4p(,""P2wrong"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","P3valid","P4wrong")	// C1 absent, C2="P2wrong", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).AWVW:<"_R0_">.method4p(,""P2wrong"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p(,"P2wrong","P3wrong")	// C1 absent, C2="P2wrong", C3="P3wrong", C4 absent
	write "mtd4p01(R0).AWWA:<"_R0_">.method4p(,""P2wrong"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","P3wrong","")	// C1 absent, C2="P2wrong", C3="P3wrong", C4=""
	write "mtd4p01(R0).AWWE:<"_R0_">.method4p(,""P2wrong"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","P3wrong","P4valid")	// C1 absent, C2="P2wrong", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).AWWV:<"_R0_">.method4p(,""P2wrong"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p(,"P2wrong","P3wrong","P4wrong")	// C1 absent, C2="P2wrong", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).AWWW:<"_R0_">.method4p(,""P2wrong"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("")			// C1="", C2 absent, C3 absent, C4 absent
	write "mtd4p01(R0).EAAA:<"_R0_">.method4p("""")="_rRes,!

	set rRes = R0.method4p("",,,"")	// C1="", C2 absent, C3 absent, C4=""
	write "mtd4p01(R0).EAAE:<"_R0_">.method4p("""",,,"""")="_rRes,!

	set rRes = R0.method4p("",,,"P4valid")	// C1="", C2 absent, C3 absent, C4="P4valid"
	write "mtd4p01(R0).EAAV:<"_R0_">.method4p("""",,,""P4valid"")="_rRes,!

	set rRes = R0.method4p("",,,"P4wrong")	// C1="", C2 absent, C3 absent, C4="P4wrong"
	write "mtd4p01(R0).EAAW:<"_R0_">.method4p("""",,,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("",,"")	// C1="", C2 absent, C3="", C4 absent
	write "mtd4p01(R0).EAEA:<"_R0_">.method4p("""",,"""")="_rRes,!

	set rRes = R0.method4p("",,"","")	// C1="", C2 absent, C3="", C4=""
	write "mtd4p01(R0).EAEE:<"_R0_">.method4p("""",,"""","""")="_rRes,!

	set rRes = R0.method4p("",,"","P4valid")	// C1="", C2 absent, C3="", C4="P4valid"
	write "mtd4p01(R0).EAEV:<"_R0_">.method4p("""",,"""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("",,"","P4wrong")	// C1="", C2 absent, C3="", C4="P4wrong"
	write "mtd4p01(R0).EAEW:<"_R0_">.method4p("""",,"""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("",,"P3valid")	// C1="", C2 absent, C3="P3valid", C4 absent
	write "mtd4p01(R0).EAVA:<"_R0_">.method4p("""",,""P3valid"")="_rRes,!

	set rRes = R0.method4p("",,"P3valid","")	// C1="", C2 absent, C3="P3valid", C4=""
	write "mtd4p01(R0).EAVE:<"_R0_">.method4p("""",,""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("",,"P3valid","P4valid")	// C1="", C2 absent, C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).EAVV:<"_R0_">.method4p("""",,""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("",,"P3valid","P4wrong")	// C1="", C2 absent, C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).EAVW:<"_R0_">.method4p("""",,""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("",,"P3wrong")	// C1="", C2 absent, C3="P3wrong", C4 absent
	write "mtd4p01(R0).EAWA:<"_R0_">.method4p("""",,""P3wrong"")="_rRes,!

	set rRes = R0.method4p("",,"P3wrong","")	// C1="", C2 absent, C3="P3wrong", C4=""
	write "mtd4p01(R0).EAWE:<"_R0_">.method4p("""",,""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("",,"P3wrong","P4valid")	// C1="", C2 absent, C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).EAWV:<"_R0_">.method4p("""",,""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("",,"P3wrong","P4wrong")	// C1="", C2 absent, C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).EAWW:<"_R0_">.method4p("""",,""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","")	// C1="", C2="", C3 absent, C4 absent
	write "mtd4p01(R0).EEAA:<"_R0_">.method4p("""","""")="_rRes,!

	set rRes = R0.method4p("","",,"")	// C1="", C2="", C3 absent, C4=""
	write "mtd4p01(R0).EEAE:<"_R0_">.method4p("""","""",,"""")="_rRes,!

	set rRes = R0.method4p("","",,"P4valid")	// C1="", C2="", C3 absent, C4="P4valid"
	write "mtd4p01(R0).EEAV:<"_R0_">.method4p("""","""",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("","",,"P4wrong")	// C1="", C2="", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).EEAW:<"_R0_">.method4p("""","""",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","","")	// C1="", C2="", C3="", C4 absent
	write "mtd4p01(R0).EEEA:<"_R0_">.method4p("""","""","""")="_rRes,!

	set rRes = R0.method4p("","","","")	// C1="", C2="", C3="", C4=""
	write "mtd4p01(R0).EEEE:<"_R0_">.method4p("""","""","""","""")="_rRes,!

	set rRes = R0.method4p("","","","P4valid")	// C1="", C2="", C3="", C4="P4valid"
	write "mtd4p01(R0).EEEV:<"_R0_">.method4p("""","""","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","","","P4wrong")	// C1="", C2="", C3="", C4="P4wrong"
	write "mtd4p01(R0).EEEW:<"_R0_">.method4p("""","""","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","","P3valid")	// C1="", C2="", C3="P3valid", C4 absent
	write "mtd4p01(R0).EEVA:<"_R0_">.method4p("""","""",""P3valid"")="_rRes,!

	set rRes = R0.method4p("","","P3valid","")	// C1="", C2="", C3="P3valid", C4=""
	write "mtd4p01(R0).EEVE:<"_R0_">.method4p("""","""",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("","","P3valid","P4valid")	// C1="", C2="", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).EEVV:<"_R0_">.method4p("""","""",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","","P3valid","P4wrong")	// C1="", C2="", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).EEVW:<"_R0_">.method4p("""","""",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","","P3wrong")	// C1="", C2="", C3="P3wrong", C4 absent
	write "mtd4p01(R0).EEWA:<"_R0_">.method4p("""","""",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("","","P3wrong","")	// C1="", C2="", C3="P3wrong", C4=""
	write "mtd4p01(R0).EEWE:<"_R0_">.method4p("""","""",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("","","P3wrong","P4valid")	// C1="", C2="", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).EEWV:<"_R0_">.method4p("""","""",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","","P3wrong","P4wrong")	// C1="", C2="", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).EEWW:<"_R0_">.method4p("""","""",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2valid")	// C1="", C2="P2valid", C3 absent, C4 absent
	write "mtd4p01(R0).EVAA:<"_R0_">.method4p("""",""P2valid"")="_rRes,!

	set rRes = R0.method4p("","P2valid",,"")	// C1="", C2="P2valid", C3 absent, C4=""
	write "mtd4p01(R0).EVAE:<"_R0_">.method4p("""",""P2valid"",,"""")="_rRes,!

	set rRes = R0.method4p("","P2valid",,"P4valid")	// C1="", C2="P2valid", C3 absent, C4="P4valid"
	write "mtd4p01(R0).EVAV:<"_R0_">.method4p("""",""P2valid"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2valid",,"P4wrong")	// C1="", C2="P2valid", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).EVAW:<"_R0_">.method4p("""",""P2valid"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2valid","")	// C1="", C2="P2valid", C3="", C4 absent
	write "mtd4p01(R0).EVEA:<"_R0_">.method4p("""",""P2valid"","""")="_rRes,!

	set rRes = R0.method4p("","P2valid","","")	// C1="", C2="P2valid", C3="", C4=""
	write "mtd4p01(R0).EVEE:<"_R0_">.method4p("""",""P2valid"","""","""")="_rRes,!

	set rRes = R0.method4p("","P2valid","","P4valid")	// C1="", C2="P2valid", C3="", C4="P4valid"
	write "mtd4p01(R0).EVEV:<"_R0_">.method4p("""",""P2valid"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2valid","","P4wrong")	// C1="", C2="P2valid", C3="", C4="P4wrong"
	write "mtd4p01(R0).EVEW:<"_R0_">.method4p("""",""P2valid"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2valid","P3valid")	// C1="", C2="P2valid", C3="P3valid", C4 absent
	write "mtd4p01(R0).EVVA:<"_R0_">.method4p("""",""P2valid"",""P3valid"")="_rRes,!

	set rRes = R0.method4p("","P2valid","P3valid","")	// C1="", C2="P2valid", C3="P3valid", C4=""
	write "mtd4p01(R0).EVVE:<"_R0_">.method4p("""",""P2valid"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("","P2valid","P3valid","P4valid")	// C1="", C2="P2valid", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).EVVV:<"_R0_">.method4p("""",""P2valid"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2valid","P3valid","P4wrong")	// C1="", C2="P2valid", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).EVVW:<"_R0_">.method4p("""",""P2valid"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2valid","P3wrong")	// C1="", C2="P2valid", C3="P3wrong", C4 absent
	write "mtd4p01(R0).EVWA:<"_R0_">.method4p("""",""P2valid"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("","P2valid","P3wrong","")	// C1="", C2="P2valid", C3="P3wrong", C4=""
	write "mtd4p01(R0).EVWE:<"_R0_">.method4p("""",""P2valid"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("","P2valid","P3wrong","P4valid")	// C1="", C2="P2valid", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).EVWV:<"_R0_">.method4p("""",""P2valid"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2valid","P3wrong","P4wrong")	// C1="", C2="P2valid", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).EVWW:<"_R0_">.method4p("""",""P2valid"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2wrong")	// C1="", C2="P2wrong", C3 absent, C4 absent
	write "mtd4p01(R0).EWAA:<"_R0_">.method4p("""",""P2wrong"")="_rRes,!

	set rRes = R0.method4p("","P2wrong",,"")	// C1="", C2="P2wrong", C3 absent, C4=""
	write "mtd4p01(R0).EWAE:<"_R0_">.method4p("""",""P2wrong"",,"""")="_rRes,!

	set rRes = R0.method4p("","P2wrong",,"P4valid")	// C1="", C2="P2wrong", C3 absent, C4="P4valid"
	write "mtd4p01(R0).EWAV:<"_R0_">.method4p("""",""P2wrong"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2wrong",,"P4wrong")	// C1="", C2="P2wrong", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).EWAW:<"_R0_">.method4p("""",""P2wrong"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2wrong","")	// C1="", C2="P2wrong", C3="", C4 absent
	write "mtd4p01(R0).EWEA:<"_R0_">.method4p("""",""P2wrong"","""")="_rRes,!

	set rRes = R0.method4p("","P2wrong","","")	// C1="", C2="P2wrong", C3="", C4=""
	write "mtd4p01(R0).EWEE:<"_R0_">.method4p("""",""P2wrong"","""","""")="_rRes,!

	set rRes = R0.method4p("","P2wrong","","P4valid")	// C1="", C2="P2wrong", C3="", C4="P4valid"
	write "mtd4p01(R0).EWEV:<"_R0_">.method4p("""",""P2wrong"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2wrong","","P4wrong")	// C1="", C2="P2wrong", C3="", C4="P4wrong"
	write "mtd4p01(R0).EWEW:<"_R0_">.method4p("""",""P2wrong"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2wrong","P3valid")	// C1="", C2="P2wrong", C3="P3valid", C4 absent
	write "mtd4p01(R0).EWVA:<"_R0_">.method4p("""",""P2wrong"",""P3valid"")="_rRes,!

	set rRes = R0.method4p("","P2wrong","P3valid","")	// C1="", C2="P2wrong", C3="P3valid", C4=""
	write "mtd4p01(R0).EWVE:<"_R0_">.method4p("""",""P2wrong"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("","P2wrong","P3valid","P4valid")	// C1="", C2="P2wrong", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).EWVV:<"_R0_">.method4p("""",""P2wrong"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2wrong","P3valid","P4wrong")	// C1="", C2="P2wrong", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).EWVW:<"_R0_">.method4p("""",""P2wrong"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("","P2wrong","P3wrong")	// C1="", C2="P2wrong", C3="P3wrong", C4 absent
	write "mtd4p01(R0).EWWA:<"_R0_">.method4p("""",""P2wrong"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("","P2wrong","P3wrong","")	// C1="", C2="P2wrong", C3="P3wrong", C4=""
	write "mtd4p01(R0).EWWE:<"_R0_">.method4p("""",""P2wrong"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("","P2wrong","P3wrong","P4valid")	// C1="", C2="P2wrong", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).EWWV:<"_R0_">.method4p("""",""P2wrong"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("","P2wrong","P3wrong","P4wrong")	// C1="", C2="P2wrong", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).EWWW:<"_R0_">.method4p("""",""P2wrong"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid")			// C1="P1valid", C2 absent, C3 absent, C4 absent
	write "mtd4p01(R0).VAAA:<"_R0_">.method4p(""P1valid"")="_rRes,!

	set rRes = R0.method4p("P1valid",,,"")	// C1="P1valid", C2 absent, C3 absent, C4=""
	write "mtd4p01(R0).VAAE:<"_R0_">.method4p(""P1valid"",,,"""")="_rRes,!

	set rRes = R0.method4p("P1valid",,,"P4valid")	// C1="P1valid", C2 absent, C3 absent, C4="P4valid"
	write "mtd4p01(R0).VAAV:<"_R0_">.method4p(""P1valid"",,,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid",,,"P4wrong")	// C1="P1valid", C2 absent, C3 absent, C4="P4wrong"
	write "mtd4p01(R0).VAAW:<"_R0_">.method4p(""P1valid"",,,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid",,"")	// C1="P1valid", C2 absent, C3="", C4 absent
	write "mtd4p01(R0).VAEA:<"_R0_">.method4p(""P1valid"",,"""")="_rRes,!

	set rRes = R0.method4p("P1valid",,"","")	// C1="P1valid", C2 absent, C3="", C4=""
	write "mtd4p01(R0).VAEE:<"_R0_">.method4p(""P1valid"",,"""","""")="_rRes,!

	set rRes = R0.method4p("P1valid",,"","P4valid")	// C1="P1valid", C2 absent, C3="", C4="P4valid"
	write "mtd4p01(R0).VAEV:<"_R0_">.method4p(""P1valid"",,"""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid",,"","P4wrong")	// C1="P1valid", C2 absent, C3="", C4="P4wrong"
	write "mtd4p01(R0).VAEW:<"_R0_">.method4p(""P1valid"",,"""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid",,"P3valid")	// C1="P1valid", C2 absent, C3="P3valid", C4 absent
	write "mtd4p01(R0).VAVA:<"_R0_">.method4p(""P1valid"",,""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1valid",,"P3valid","")	// C1="P1valid", C2 absent, C3="P3valid", C4=""
	write "mtd4p01(R0).VAVE:<"_R0_">.method4p(""P1valid"",,""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1valid",,"P3valid","P4valid")	// C1="P1valid", C2 absent, C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).VAVV:<"_R0_">.method4p(""P1valid"",,""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid",,"P3valid","P4wrong")	// C1="P1valid", C2 absent, C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).VAVW:<"_R0_">.method4p(""P1valid"",,""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid",,"P3wrong")	// C1="P1valid", C2 absent, C3="P3wrong", C4 absent
	write "mtd4p01(R0).VAWA:<"_R0_">.method4p(""P1valid"",,""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1valid",,"P3wrong","")	// C1="P1valid", C2 absent, C3="P3wrong", C4=""
	write "mtd4p01(R0).VAWE:<"_R0_">.method4p(""P1valid"",,""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1valid",,"P3wrong","P4valid")	// C1="P1valid", C2 absent, C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).VAWV:<"_R0_">.method4p(""P1valid"",,""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid",,"P3wrong","P4wrong")	// C1="P1valid", C2 absent, C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).VAWW:<"_R0_">.method4p(""P1valid"",,""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","")	// C1="P1valid", C2="", C3 absent, C4 absent
	write "mtd4p01(R0).VEAA:<"_R0_">.method4p(""P1valid"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","",,"")	// C1="P1valid", C2="", C3 absent, C4=""
	write "mtd4p01(R0).VEAE:<"_R0_">.method4p(""P1valid"","""",,"""")="_rRes,!

	set rRes = R0.method4p("P1valid","",,"P4valid")	// C1="P1valid", C2="", C3 absent, C4="P4valid"
	write "mtd4p01(R0).VEAV:<"_R0_">.method4p(""P1valid"","""",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","",,"P4wrong")	// C1="P1valid", C2="", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).VEAW:<"_R0_">.method4p(""P1valid"","""",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","","")	// C1="P1valid", C2="", C3="", C4 absent
	write "mtd4p01(R0).VEEA:<"_R0_">.method4p(""P1valid"","""","""")="_rRes,!

	set rRes = R0.method4p("P1valid","","","")	// C1="P1valid", C2="", C3="", C4=""
	write "mtd4p01(R0).VEEE:<"_R0_">.method4p(""P1valid"","""","""","""")="_rRes,!

	set rRes = R0.method4p("P1valid","","","P4valid")	// C1="P1valid", C2="", C3="", C4="P4valid"
	write "mtd4p01(R0).VEEV:<"_R0_">.method4p(""P1valid"","""","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","","","P4wrong")	// C1="P1valid", C2="", C3="", C4="P4wrong"
	write "mtd4p01(R0).VEEW:<"_R0_">.method4p(""P1valid"","""","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","","P3valid")	// C1="P1valid", C2="", C3="P3valid", C4 absent
	write "mtd4p01(R0).VEVA:<"_R0_">.method4p(""P1valid"","""",""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","","P3valid","")	// C1="P1valid", C2="", C3="P3valid", C4=""
	write "mtd4p01(R0).VEVE:<"_R0_">.method4p(""P1valid"","""",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","","P3valid","P4valid")	// C1="P1valid", C2="", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).VEVV:<"_R0_">.method4p(""P1valid"","""",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","","P3valid","P4wrong")	// C1="P1valid", C2="", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).VEVW:<"_R0_">.method4p(""P1valid"","""",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","","P3wrong")	// C1="P1valid", C2="", C3="P3wrong", C4 absent
	write "mtd4p01(R0).VEWA:<"_R0_">.method4p(""P1valid"","""",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1valid","","P3wrong","")	// C1="P1valid", C2="", C3="P3wrong", C4=""
	write "mtd4p01(R0).VEWE:<"_R0_">.method4p(""P1valid"","""",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","","P3wrong","P4valid")	// C1="P1valid", C2="", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).VEWV:<"_R0_">.method4p(""P1valid"","""",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","","P3wrong","P4wrong")	// C1="P1valid", C2="", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).VEWW:<"_R0_">.method4p(""P1valid"","""",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2valid")	// C1="P1valid", C2="P2valid", C3 absent, C4 absent
	write "mtd4p01(R0).VVAA:<"_R0_">.method4p(""P1valid"",""P2valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid",,"")	// C1="P1valid", C2="P2valid", C3 absent, C4=""
	write "mtd4p01(R0).VVAE:<"_R0_">.method4p(""P1valid"",""P2valid"",,"""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid",,"P4valid")	// C1="P1valid", C2="P2valid", C3 absent, C4="P4valid"
	write "mtd4p01(R0).VVAV:<"_R0_">.method4p(""P1valid"",""P2valid"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid",,"P4wrong")	// C1="P1valid", C2="P2valid", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).VVAW:<"_R0_">.method4p(""P1valid"",""P2valid"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2valid","")	// C1="P1valid", C2="P2valid", C3="", C4 absent
	write "mtd4p01(R0).VVEA:<"_R0_">.method4p(""P1valid"",""P2valid"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","","")	// C1="P1valid", C2="P2valid", C3="", C4=""
	write "mtd4p01(R0).VVEE:<"_R0_">.method4p(""P1valid"",""P2valid"","""","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","","P4valid")	// C1="P1valid", C2="P2valid", C3="", C4="P4valid"
	write "mtd4p01(R0).VVEV:<"_R0_">.method4p(""P1valid"",""P2valid"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","","P4wrong")	// C1="P1valid", C2="P2valid", C3="", C4="P4wrong"
	write "mtd4p01(R0).VVEW:<"_R0_">.method4p(""P1valid"",""P2valid"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2valid","P3valid")	// C1="P1valid", C2="P2valid", C3="P3valid", C4 absent
	write "mtd4p01(R0).VVVA:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","P3valid","")	// C1="P1valid", C2="P2valid", C3="P3valid", C4=""
	write "mtd4p01(R0).VVVE:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","P3valid","P4valid")	// C1="P1valid", C2="P2valid", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).VVVV:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","P3valid","P4wrong")	// C1="P1valid", C2="P2valid", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).VVVW:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2valid","P3wrong")	// C1="P1valid", C2="P2valid", C3="P3wrong", C4 absent
	write "mtd4p01(R0).VVWA:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","P3wrong","")	// C1="P1valid", C2="P2valid", C3="P3wrong", C4=""
	write "mtd4p01(R0).VVWE:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","P3wrong","P4valid")	// C1="P1valid", C2="P2valid", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).VVWV:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2valid","P3wrong","P4wrong")	// C1="P1valid", C2="P2valid", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).VVWW:<"_R0_">.method4p(""P1valid"",""P2valid"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2wrong")	// C1="P1valid", C2="P2wrong", C3 absent, C4 absent
	write "mtd4p01(R0).VWAA:<"_R0_">.method4p(""P1valid"",""P2wrong"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong",,"")	// C1="P1valid", C2="P2wrong", C3 absent, C4=""
	write "mtd4p01(R0).VWAE:<"_R0_">.method4p(""P1valid"",""P2wrong"",,"""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong",,"P4valid")	// C1="P1valid", C2="P2wrong", C3 absent, C4="P4valid"
	write "mtd4p01(R0).VWAV:<"_R0_">.method4p(""P1valid"",""P2wrong"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong",,"P4wrong")	// C1="P1valid", C2="P2wrong", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).VWAW:<"_R0_">.method4p(""P1valid"",""P2wrong"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2wrong","")	// C1="P1valid", C2="P2wrong", C3="", C4 absent
	write "mtd4p01(R0).VWEA:<"_R0_">.method4p(""P1valid"",""P2wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","","")	// C1="P1valid", C2="P2wrong", C3="", C4=""
	write "mtd4p01(R0).VWEE:<"_R0_">.method4p(""P1valid"",""P2wrong"","""","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","","P4valid")	// C1="P1valid", C2="P2wrong", C3="", C4="P4valid"
	write "mtd4p01(R0).VWEV:<"_R0_">.method4p(""P1valid"",""P2wrong"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","","P4wrong")	// C1="P1valid", C2="P2wrong", C3="", C4="P4wrong"
	write "mtd4p01(R0).VWEW:<"_R0_">.method4p(""P1valid"",""P2wrong"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2wrong","P3valid")	// C1="P1valid", C2="P2wrong", C3="P3valid", C4 absent
	write "mtd4p01(R0).VWVA:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","P3valid","")	// C1="P1valid", C2="P2wrong", C3="P3valid", C4=""
	write "mtd4p01(R0).VWVE:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","P3valid","P4valid")	// C1="P1valid", C2="P2wrong", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).VWVV:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","P3valid","P4wrong")	// C1="P1valid", C2="P2wrong", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).VWVW:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1valid","P2wrong","P3wrong")	// C1="P1valid", C2="P2wrong", C3="P3wrong", C4 absent
	write "mtd4p01(R0).VWWA:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","P3wrong","")	// C1="P1valid", C2="P2wrong", C3="P3wrong", C4=""
	write "mtd4p01(R0).VWWE:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","P3wrong","P4valid")	// C1="P1valid", C2="P2wrong", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).VWWV:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1valid","P2wrong","P3wrong","P4wrong")	// C1="P1valid", C2="P2wrong", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).VWWW:<"_R0_">.method4p(""P1valid"",""P2wrong"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong")			// C1="P1wrong", C2 absent, C3 absent, C4 absent
	write "mtd4p01(R0).WAAA:<"_R0_">.method4p(""P1wrong"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,,"")	// C1="P1wrong", C2 absent, C3 absent, C4=""
	write "mtd4p01(R0).WAAE:<"_R0_">.method4p(""P1wrong"",,,"""")="_rRes,!

	set rRes = R0.method4p("P1wrong",,,"P4valid")	// C1="P1wrong", C2 absent, C3 absent, C4="P4valid"
	write "mtd4p01(R0).WAAV:<"_R0_">.method4p(""P1wrong"",,,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,,"P4wrong")	// C1="P1wrong", C2 absent, C3 absent, C4="P4wrong"
	write "mtd4p01(R0).WAAW:<"_R0_">.method4p(""P1wrong"",,,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong",,"")	// C1="P1wrong", C2 absent, C3="", C4 absent
	write "mtd4p01(R0).WAEA:<"_R0_">.method4p(""P1wrong"",,"""")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"","")	// C1="P1wrong", C2 absent, C3="", C4=""
	write "mtd4p01(R0).WAEE:<"_R0_">.method4p(""P1wrong"",,"""","""")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"","P4valid")	// C1="P1wrong", C2 absent, C3="", C4="P4valid"
	write "mtd4p01(R0).WAEV:<"_R0_">.method4p(""P1wrong"",,"""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"","P4wrong")	// C1="P1wrong", C2 absent, C3="", C4="P4wrong"
	write "mtd4p01(R0).WAEW:<"_R0_">.method4p(""P1wrong"",,"""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong",,"P3valid")	// C1="P1wrong", C2 absent, C3="P3valid", C4 absent
	write "mtd4p01(R0).WAVA:<"_R0_">.method4p(""P1wrong"",,""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"P3valid","")	// C1="P1wrong", C2 absent, C3="P3valid", C4=""
	write "mtd4p01(R0).WAVE:<"_R0_">.method4p(""P1wrong"",,""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"P3valid","P4valid")	// C1="P1wrong", C2 absent, C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).WAVV:<"_R0_">.method4p(""P1wrong"",,""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"P3valid","P4wrong")	// C1="P1wrong", C2 absent, C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).WAVW:<"_R0_">.method4p(""P1wrong"",,""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong",,"P3wrong")	// C1="P1wrong", C2 absent, C3="P3wrong", C4 absent
	write "mtd4p01(R0).WAWA:<"_R0_">.method4p(""P1wrong"",,""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"P3wrong","")	// C1="P1wrong", C2 absent, C3="P3wrong", C4=""
	write "mtd4p01(R0).WAWE:<"_R0_">.method4p(""P1wrong"",,""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"P3wrong","P4valid")	// C1="P1wrong", C2 absent, C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).WAWV:<"_R0_">.method4p(""P1wrong"",,""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong",,"P3wrong","P4wrong")	// C1="P1wrong", C2 absent, C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).WAWW:<"_R0_">.method4p(""P1wrong"",,""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","")	// C1="P1wrong", C2="", C3 absent, C4 absent
	write "mtd4p01(R0).WEAA:<"_R0_">.method4p(""P1wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","",,"")	// C1="P1wrong", C2="", C3 absent, C4=""
	write "mtd4p01(R0).WEAE:<"_R0_">.method4p(""P1wrong"","""",,"""")="_rRes,!

	set rRes = R0.method4p("P1wrong","",,"P4valid")	// C1="P1wrong", C2="", C3 absent, C4="P4valid"
	write "mtd4p01(R0).WEAV:<"_R0_">.method4p(""P1wrong"","""",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","",,"P4wrong")	// C1="P1wrong", C2="", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).WEAW:<"_R0_">.method4p(""P1wrong"","""",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","","")	// C1="P1wrong", C2="", C3="", C4 absent
	write "mtd4p01(R0).WEEA:<"_R0_">.method4p(""P1wrong"","""","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","","","")	// C1="P1wrong", C2="", C3="", C4=""
	write "mtd4p01(R0).WEEE:<"_R0_">.method4p(""P1wrong"","""","""","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","","","P4valid")	// C1="P1wrong", C2="", C3="", C4="P4valid"
	write "mtd4p01(R0).WEEV:<"_R0_">.method4p(""P1wrong"","""","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","","","P4wrong")	// C1="P1wrong", C2="", C3="", C4="P4wrong"
	write "mtd4p01(R0).WEEW:<"_R0_">.method4p(""P1wrong"","""","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","","P3valid")	// C1="P1wrong", C2="", C3="P3valid", C4 absent
	write "mtd4p01(R0).WEVA:<"_R0_">.method4p(""P1wrong"","""",""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","","P3valid","")	// C1="P1wrong", C2="", C3="P3valid", C4=""
	write "mtd4p01(R0).WEVE:<"_R0_">.method4p(""P1wrong"","""",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","","P3valid","P4valid")	// C1="P1wrong", C2="", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).WEVV:<"_R0_">.method4p(""P1wrong"","""",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","","P3valid","P4wrong")	// C1="P1wrong", C2="", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).WEVW:<"_R0_">.method4p(""P1wrong"","""",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","","P3wrong")	// C1="P1wrong", C2="", C3="P3wrong", C4 absent
	write "mtd4p01(R0).WEWA:<"_R0_">.method4p(""P1wrong"","""",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1wrong","","P3wrong","")	// C1="P1wrong", C2="", C3="P3wrong", C4=""
	write "mtd4p01(R0).WEWE:<"_R0_">.method4p(""P1wrong"","""",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","","P3wrong","P4valid")	// C1="P1wrong", C2="", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).WEWV:<"_R0_">.method4p(""P1wrong"","""",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","","P3wrong","P4wrong")	// C1="P1wrong", C2="", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).WEWW:<"_R0_">.method4p(""P1wrong"","""",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2valid")	// C1="P1wrong", C2="P2valid", C3 absent, C4 absent
	write "mtd4p01(R0).WVAA:<"_R0_">.method4p(""P1wrong"",""P2valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid",,"")	// C1="P1wrong", C2="P2valid", C3 absent, C4=""
	write "mtd4p01(R0).WVAE:<"_R0_">.method4p(""P1wrong"",""P2valid"",,"""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid",,"P4valid")	// C1="P1wrong", C2="P2valid", C3 absent, C4="P4valid"
	write "mtd4p01(R0).WVAV:<"_R0_">.method4p(""P1wrong"",""P2valid"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid",,"P4wrong")	// C1="P1wrong", C2="P2valid", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).WVAW:<"_R0_">.method4p(""P1wrong"",""P2valid"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2valid","")	// C1="P1wrong", C2="P2valid", C3="", C4 absent
	write "mtd4p01(R0).WVEA:<"_R0_">.method4p(""P1wrong"",""P2valid"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","","")	// C1="P1wrong", C2="P2valid", C3="", C4=""
	write "mtd4p01(R0).WVEE:<"_R0_">.method4p(""P1wrong"",""P2valid"","""","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","","P4valid")	// C1="P1wrong", C2="P2valid", C3="", C4="P4valid"
	write "mtd4p01(R0).WVEV:<"_R0_">.method4p(""P1wrong"",""P2valid"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","","P4wrong")	// C1="P1wrong", C2="P2valid", C3="", C4="P4wrong"
	write "mtd4p01(R0).WVEW:<"_R0_">.method4p(""P1wrong"",""P2valid"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2valid","P3valid")	// C1="P1wrong", C2="P2valid", C3="P3valid", C4 absent
	write "mtd4p01(R0).WVVA:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","P3valid","")	// C1="P1wrong", C2="P2valid", C3="P3valid", C4=""
	write "mtd4p01(R0).WVVE:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","P3valid","P4valid")	// C1="P1wrong", C2="P2valid", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).WVVV:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","P3valid","P4wrong")	// C1="P1wrong", C2="P2valid", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).WVVW:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2valid","P3wrong")	// C1="P1wrong", C2="P2valid", C3="P3wrong", C4 absent
	write "mtd4p01(R0).WVWA:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","P3wrong","")	// C1="P1wrong", C2="P2valid", C3="P3wrong", C4=""
	write "mtd4p01(R0).WVWE:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","P3wrong","P4valid")	// C1="P1wrong", C2="P2valid", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).WVWV:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2valid","P3wrong","P4wrong")	// C1="P1wrong", C2="P2valid", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).WVWW:<"_R0_">.method4p(""P1wrong"",""P2valid"",""P3wrong"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2wrong")	// C1="P1wrong", C2="P2wrong", C3 absent, C4 absent
	write "mtd4p01(R0).WWAA:<"_R0_">.method4p(""P1wrong"",""P2wrong"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong",,"")	// C1="P1wrong", C2="P2wrong", C3 absent, C4=""
	write "mtd4p01(R0).WWAE:<"_R0_">.method4p(""P1wrong"",""P2wrong"",,"""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong",,"P4valid")	// C1="P1wrong", C2="P2wrong", C3 absent, C4="P4valid"
	write "mtd4p01(R0).WWAV:<"_R0_">.method4p(""P1wrong"",""P2wrong"",,""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong",,"P4wrong")	// C1="P1wrong", C2="P2wrong", C3 absent, C4="P4wrong"
	write "mtd4p01(R0).WWAW:<"_R0_">.method4p(""P1wrong"",""P2wrong"",,""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2wrong","")	// C1="P1wrong", C2="P2wrong", C3="", C4 absent
	write "mtd4p01(R0).WWEA:<"_R0_">.method4p(""P1wrong"",""P2wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","","")	// C1="P1wrong", C2="P2wrong", C3="", C4=""
	write "mtd4p01(R0).WWEE:<"_R0_">.method4p(""P1wrong"",""P2wrong"","""","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","","P4valid")	// C1="P1wrong", C2="P2wrong", C3="", C4="P4valid"
	write "mtd4p01(R0).WWEV:<"_R0_">.method4p(""P1wrong"",""P2wrong"","""",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","","P4wrong")	// C1="P1wrong", C2="P2wrong", C3="", C4="P4wrong"
	write "mtd4p01(R0).WWEW:<"_R0_">.method4p(""P1wrong"",""P2wrong"","""",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2wrong","P3valid")	// C1="P1wrong", C2="P2wrong", C3="P3valid", C4 absent
	write "mtd4p01(R0).WWVA:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","P3valid","")	// C1="P1wrong", C2="P2wrong", C3="P3valid", C4=""
	write "mtd4p01(R0).WWVE:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3valid"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","P3valid","P4valid")	// C1="P1wrong", C2="P2wrong", C3="P3valid", C4="P4valid"
	write "mtd4p01(R0).WWVV:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3valid"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","P3valid","P4wrong")	// C1="P1wrong", C2="P2wrong", C3="P3valid", C4="P4wrong"
	write "mtd4p01(R0).WWVW:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3valid"",""P4wrong"")="_rRes,!



	set rRes = R0.method4p("P1wrong","P2wrong","P3wrong")	// C1="P1wrong", C2="P2wrong", C3="P3wrong", C4 absent
	write "mtd4p01(R0).WWWA:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3wrong"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","P3wrong","")	// C1="P1wrong", C2="P2wrong", C3="P3wrong", C4=""
	write "mtd4p01(R0).WWWE:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3wrong"","""")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","P3wrong","P4valid")	// C1="P1wrong", C2="P2wrong", C3="P3wrong", C4="P4valid"
	write "mtd4p01(R0).WWWV:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3wrong"",""P4valid"")="_rRes,!

	set rRes = R0.method4p("P1wrong","P2wrong","P3wrong","P4wrong")	// C1="P1wrong", C2="P2wrong", C3="P3wrong", C4="P4wrong"
	write "mtd4p01(R0).WWWW:<"_R0_">.method4p(""P1wrong"",""P2wrong"",""P3wrong"",""P4wrong"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p02( Primitive R1)
	// =====================================================================
	// validate C0.method4p(R1,C2,C3,C4) -- 3 * 4 * 4 * 4 = 192 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p03( Primitive R2)
	// =====================================================================
	// validate C0.method4p(C1,R2,C3,C4) -- 3 * 4 * 4 * 4 = 192 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p04( Primitive R3)
	// =====================================================================
	// validate C0.method4p(C1,C2,R3,C4) -- 3 * 4 * 4 * 4 = 192 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p05( Primitive R4)
	// =====================================================================
	// validate C0.method4p(C1,C2,C3,R4) -- 3 * 4 * 4 * 4 = 192 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// ====================================================================
public mtd4p06( Primitive R0, Primitive R1)
	// ====================================================================
	// validate R0.method4p(R1,C2,C3,C4) -- 4 * 4 * 4 = 64 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p07( Primitive R0, Primitive R2)
	// =====================================================================
	// validate R0.method4p(C1,R2,C3,C4) -- 4 * 4 * 4 = 64 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p08( Primitive R0, Primitive R3)
	// =====================================================================
	// validate R0.method4p(C1,C2,R3,C4) -- 4 * 4 * 4 = 64 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p09( Primitive R0, Primitive R4)
	// =====================================================================
	// validate R0.method4p(C1,C2,C3,R4) -- 4 * 4 * 4 = 64 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p10( Primitive R1, Primitive R2)
	// =====================================================================
	// validate C0.method4p(R1,R2,C3,C4) -- 3 * 4 * 4 = 48 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p11( Primitive R1, Primitive R3)
	// =====================================================================
	// validate C0.method4p(R1,C2,R3,C4) -- 3 * 4 * 4 = 48 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p12( Primitive R1, Primitive R4)
	// =====================================================================
	// validate C0.method4p(R1,C2,C3,R4) -- 3 * 4 * 4 = 48 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p13( Primitive R2, Primitive R3)
	// =====================================================================
	// validate C0.method4p(C1,R2,R3,C4) -- 3 * 4 * 4 = 48 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
mtd4p14( Primitive R2, Primitive R4)
	// =====================================================================
	// validate C0.method4p(C1,R2,C3,R4) -- 3 * 4 * 4 = 48 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p15( Primitive R3, Primitive R4)
	// =====================================================================
	// validate C0.method4p(C1,C2,R3,R4) -- 3 * 4 * 4 = 48 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p16( Primitive R0, Primitive R1, Primitive R2)
	// =====================================================================
	// validate R0.method4p(R1,R2,C3,C4) -- 4 * 4 = 16 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p17( Primitive R0, Primitive R1, Primitive R3)
	// =====================================================================
	// validate R0.method4p(R1,C2,R3,C4) -- 4 * 4 = 16 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p18( Primitive R0, Primitive R1, Primitive R4)
	// =====================================================================
	// validate R0.method4p(R1,C2,C3,R4) -- 4 * 4 = 16 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p19( Primitive R0, Primitive R2, Primitive R3)
	// =====================================================================
	// validate R0.method4p(C1,R2,R3,C4) -- 4 * 4 = 16 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p20( Primitive R0, Primitive R2, Primitive R4)
	// =====================================================================
	// validate R0.method4p(C1,R2,C3,R4) -- 4 * 4 = 16 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p21( Primitive R0, Primitive R3, Primitive R4)
	// =====================================================================
	// validate R0.method4p(C1,C2,R3,R4) -- 4 * 4 = 16 combinations
	//
	type Primitive rRes

	/* to be done */

	quit

	// =====================================================================
public mtd4p22( Primitive R1, Primitive R2, Primitive R3)
	// =====================================================================
	// validate C0.method4p(R1,R2,R3,C4) -- 3 * 4 = 12 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method4p( R1, R2, R3)	// C0="", C4 absent
	write "mtd4p22(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, R3)	// C0="P0valid", C4 absent
	write "mtd4p22(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, R3)	// C0="P0wrong", C4 absent
	write "mtd4p22(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, R2, R3, "")	// C0="", C4=""
	write "mtd4p22(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,<"_R3_">,"""")="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, R3, "")	// C0="P0valid", C4=""
	write "mtd4p22(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,"""")="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, R3, "")	// C0="P0wrong", C4=""
	write "mtd4p22(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,"""")="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, R2, R3, "P4valid")	// C0="", C4="P4valid"
	write "mtd4p22(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4valid"")="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, R3, "P4valid")	// C0="P0valid", C4="P4valid"
	write "mtd4p22(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4valid"")="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, R3, "P4valid")	// C0="P0wrong", C4="P4valid"
	write "mtd4p22(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4valid"")="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, R2, R3, "P4wrong")	// C0="", C4="P4wrong"
	write "mtd4p22(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4wrong"")="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, R3, "P4wrong")	// C0="P0valid", C4="P4wrong"
	write "mtd4p22(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4wrong"")="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, R3, "P4wrong")	// C0="P0wrong", C4="P4wrong"
	write "mtd4p22(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4wrong"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p23( Primitive R1, Primitive R2, Primitive R4)
	// =====================================================================
	// validate C0.method4p(R1,R2,C3,R4) -- 3 * 4 = 12 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method4p( R1, R2, , R4)	// C0="", C3 absent
	write "mtd4p23(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, , R4)	// C0="P0valid", C3 absent
	write "mtd4p23(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, , R4)	// C0="P0wrong", C3 absent
	write "mtd4p23(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, R2, "", R4)	// C0="", C3=""
	write "mtd4p23(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,"""",<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, "", R4)	// C0="P0valid", C3=""
	write "mtd4p23(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,"""",<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, "", R4)	// C0="P0wrong", C3=""
	write "mtd4p23(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,"""",<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, R2, "P3valid", R4)	// C0="", C3="P3valid"
	write "mtd4p23(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,""P3valid"",<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, "P3valid", R4)	// C0="P0valid", C3="P3valid"
	write "mtd4p23(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,""P3valid"",<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, "P3valid", R4)	// C0="P0wrong", C3="P3valid"
	write "mtd4p23(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,""P3valid"",<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, P2, "P3wrong", R4)	// C0="", C3="P3wrong"
	write "mtd4p23(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,""P3wrong"",<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, P2, "P3wrong", R4)	// C0="P0valid", C3="P3wrong"
	write "mtd4p23(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,""P3wrong"",<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, P2, "P3wrong", R4)	// C0="P0wrong", C3="P3wrong"
	write "mtd4p23(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,""P3wrong"",<"_R4_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p24( Primitive R1, Primitive R3, Primitive R4)
	// =====================================================================
	// validate C0.method4p(R1,C2,R3,R4) -- 3 * 4 = 12 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method4p( R1, , R3, R4)	// C0="", C2 absent
	write "mtd4p24(R1,R2,R3,R4):"""".method4p(<"_R1_">,,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, , R3, R4)	// C0="P0valid", C2 absent
	write "mtd4p24(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, , R3, R4)	// C0="P0wrong", C2 absent
	write "mtd4p24(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,,<"_R3_">,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, "", R3, R4)	// C0="", C2=""
	write "mtd4p24(R1,R2,R3,R4):"""".method4p(<"_R1_">,"""",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, "", R3, R4)	// C0="P0valid", C2=""
	write "mtd4p24(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,"""",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, "", R3, R4)	// C0="P0wrong", C2=""
	write "mtd4p24(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,"""",<"_R3_">,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, "P2valid", R3, R4)	// C0="", C2="P2valid"
	write "mtd4p24(R1,R2,R3,R4):"""".method4p(<"_R1_">,""P2valid"",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, "P2valid", R3, R4)	// C0="P0valid", C2="P2valid"
	write "mtd4p24(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,""P2valid"",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, "P2valid", R3, R4)	// C0="P0wrong", C2="P2valid"
	write "mtd4p24(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,""P2valid"",<"_R3_">,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( R1, "P2wrong", R3, R4)	// C0="", C2="P2wrong"
	write "mtd4p24(R1,R2,R3,R4):"""".method4p(<"_R1_">,""P2wrong"",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, "P2wrong", R3, R4)	// C0="P0valid", C2="P2wrong"
	write "mtd4p24(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,""P2wrong"",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, "P2wrong", R3, R4)	// C0="P0wrong", C2="P2wrong"
	write "mtd4p24(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,""P2wrong"",<"_R3_">,<"_R4_">)="_rRes,!
	================ end commented out ================ */

	quit

	// =====================================================================
public mtd4p25( Primitive R2, Primitive R3, Primitive R4)
	// =====================================================================
	// validate C0.method4p(C1,R2,R3,R4) -- 3 * 4 = 12 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method4p( , R2, R3, R4)	// C0="", C1 absent
	write "mtd4p25(R1,R2,R3,R4):"""".method4p(,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( , R2, R3, R4)	// C0="P0valid", C1 absent
	write "mtd4p25(R1,R2,R3,R4):""P0valid"".method4p(,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( , R2, R3, R4)	// C0="P0wrong", C1 absent
	write "mtd4p25(R1,R2,R3,R4):""P0wrong"".method4p(,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( "", R2, R3, R4)	// C0="", C1=""
	write "mtd4p25(R1,R2,R3,R4):"""".method4p("""",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( "", R2, R3, R4)	// C0="P0valid", C1=""
	write "mtd4p25(R1,R2,R3,R4):""P0valid"".method4p("""",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( "", R2, R3, R4)	// C0="P0wrong", C1=""
	write "mtd4p25(R1,R2,R3,R4):""P0wrong"".method4p("""",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( "P1valid", R2, R3, R4)	// C0="", C1="P1valid"
	write "mtd4p25(R1,R2,R3,R4):"""".method4p(""P1valid"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( "P1valid", R2, R3, R4)	// C0="P0valid", C1="P1valid"
	write "mtd4p25(R1,R2,R3,R4):""P0valid"".method4p(""P1valid"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( "P1valid", R2, R3, R4)	// C0="P0wrong", C1="P1valid"
	write "mtd4p25(R1,R2,R3,R4):""P0wrong"".method4p(""P1valid"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!



	set rRes = ({TestClass}"").method4p( "P1wrong", R2, R3, R4)	// C0="", C1="P1wrong"
	write "mtd4p25(R1,R2,R3,R4):"""".method4p(""P1wrong"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( "P1wrong", R2, R3, R4)	// C0="P0valid", C1="P1wrong"
	write "mtd4p25(R1,R2,R3,R4):""P0valid"".method4p(""P1wrong"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( "P1wrong", R2, R3, R4)	// C0="P0wrong", C1="P1wrong"
	write "mtd4p25(R1,R2,R3,R4):""P0wrong"".method4p(""P1wrong"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p26( Primitive R0, Primitive R1, Primitive R2, Primitive R3)
	// =====================================================================
	// validate R0.method4p(R1,R2,R3,C4) -- 4 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method4p( R1, R2, R3)	// C4 absent
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,<"_R3_">)="_rRes,!

	set rRes = R0.method4p( R1, R2, R3, "")	// C4=""
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,<"_R3_">,"""")="_rRes,!

	set rRes = R0.method4p( R1, R2, R3, "P4valid")	// C4="P4valid"
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4valid"")="_rRes,!

	set rRes = R0.method4p( R1, R2, R3, "P4wromg")	// C4="P4wrong"
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,<"_R3_">,""P4wrong"")="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p27( Primitive R0, Primitive R1, Primitive R2, Primitive R4)
	// =====================================================================
	// validate R0.method4p(R1,R2,C3,R4) -- 4 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method4p( R1, R2, , R4)	// C3 absent
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( R1, R2, "", R4)	// C3=""
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,"""",<"_R4_">)="_rRes,!

	set rRes = R0.method4p( R1, R2, "P3valid", R4)	// C3="P3valid"
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,""P3valid"",<"_R4_">)="_rRes,!

	set rRes = R0.method4p( R1, R2, "P3wrong", R4)	// C3="P3wrong"
	write "mtd4p27(R0,R1,R2,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,""P3wrong"",<"_R4_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p28( Primitive R0, Primitive R1, Primitive R3, Primitive R4)
	// =====================================================================
	// validate R0.method4p(R1,C2,R3,R4) -- 4 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method4p( R1, , R3, R4)	// C2 absent
	write "mtd4p28(R0,R1,R3,R4).A:<"_R0_">.method4p(<"_R1_">,,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( R1, "", R3, R4)	// C2=""
	write "mtd4p28(R0,R1,R3,R4).E:<"_R0_">.method4p(<"_R1_">,"""",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( R1, "P2valid", R3, R4)	// C2="P2valid"
	write "mtd4p28(R0,R1,R3,R4).V:<"_R0_">.method4p(<"_R1_">,""P2valid"",<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( R1, "P2wrong", R3, R4)	// C2="P2wrong"
	write "mtd4p28(R0,R1,R3,R4).W:<"_R0_">.method4p(<"_R1_">,""P2wrong"",<"_R3_">,<"_R4_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p29( Primitive R0, Primitive R2, Primitive R3, Primitive R4)
	// =====================================================================
	// validate R0.method4p(C1,R2,R3,R4) -- 4 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method4p( , R2, R3, R4)	// C1 absent
	write "mtd4p29(R0,R2,R3,R4).A:<"_R0_">.method4p(,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( "", R2, R3, R4)	// C1=""
	write "mtd4p29(R0,R2,R3,R4).E:<"_R0_">.method4p("""",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( "P1valid", R2, R3, R4)	// C1="P0valid"
	write "mtd4p29(R0,R2,R3,R4).V:<"_R0_">.method4p(""P1valid"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = R0.method4p( "P1wrong", R2, R3, R4)	// C1="P0wrong"
	write "mtd4p29(R0,R2,R3,R4).W:<"_R0_">.method4p(""P1wrong"",<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p30( Primitive R1, Primitive R2, Primitive R3, Primitive R4)
	// =====================================================================
	// validate C0.method4p(R1,R2,R3,R4) -- 3 combinations
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = ({TestClass}"").method4p( R1, R2, R3, R4)	// C0=""
	write "mtd4p30(R1,R2,R3,R4):"""".method4p(<"_R1_">,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0valid").method4p( R1, R2, R3, R4)	// C0="P0valid"
	write "mtd4p30(R1,R2,R3,R4):""P0valid"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!

	set rRes = ({TestClass}"P0wrong").method4p( R1, R2, R3, R4)	// C0="P0wrong"
	write "mtd4p30(R1,R2,R3,R4):""P0wrong"".method4p(<"_R1_">,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!
	================ end commented out ================ */
	quit

	// =====================================================================
public mtd4p31( Primitive R0, Primitive R1, Primitive R2, Primitive R3, Primitive R4)
	// =====================================================================
	// validate R0.method4p(R1,R2,R3,R4) -- 1 "combination"
	//
	type Primitive rRes

	/* ================ begin commented out ================
	set rRes = R0.method4p( R1, R2, R3, R4)
	write "mtd4p31(R0,R1,R2,R3,R4):<"_R0_">.method4p(<"_R1_">,<"_R2_">,<"_R3_">,<"_R4_">)="_rRes,!
	================ end commented out ================ */

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60507^25788^Frans S.C. Witte^72601"	// Signature - LTD^TIME^USER^SIZE
