public UTRN	//;PBS - U - V3.1 - Transaction Code Maintenence
	/*
	       DESC:

	  ---- Revision History ------------------------------------------------

	   01/12/06 - KELLYP - CR 18989
	   	      Modified LNKTRN section to quit on error when the trancode
	   	      entered is invalid (wasn't quitting before so it wasn't 
	   	      displaying the proper error message).

	   09/19/05 - KELLYP - CR 17231
	   	      Modified LNKTRN section to allow entry of "DR" or CR" 
	   	      in the linked transaction code field (TRN.LNKETC).  The
	   	      code previously allowed this but was returning a "invalid
	   	      transaction code" error because the DR/CR check was 
	   	      placed after the isDefined check, and should have been
	   	      placed before it.

	   04/21/05 - KELLYP - CR 13667
	   	      Modified LNKTRN section to return an appropriate error
	   	      when TRN.LNKETC (X) is not a valid transaction code.
	   	      Also modified the FILEC section to set the mode of the
	   	      trnaut record properly when copying authorizations
	   	      from one transaction code to another.  Also modified
		      the PROT, PP00, and PP00B sections to use Runtime
		      for setting error messages and removed ERR section.

	   01/13/05 - KELLYP - CR 13667
	   	      Changed trn.bypassSave commands to trn.save to ensure
	   	      that the filers are called correctly (e.g., for building
	   	      trn.pcf).

	   01/11/05 - KELLYP - CR 10372
	   	      Reconverted procedure to resolve issues with prior
	   	      conversion and to adhere to current PSL standards.

	   12/30/03 - CARROLLJ - CR 7658
		      Added #ACCEPT prior to xecute command.

	  ----------------------------------------------------------------------
	*/

	do NEW
	
	quit

public NEW 	// Create transaction code
	do INIT(0)

	quit


public UPD 	// Modify transaction code
	do INIT(1)

	quit


public INQ 	// Transaction code listing
	do INIT(2)

	quit


public DEL	// Delete transaction code
	do INIT(3)

	quit


INIT(Number %ProcessMode)	//

	type String CLS,ET,ETC,IO,%NOPRMT,OLNTB,PGM,%READ,SID,%TAB(),VFMQ
	type Public String ER,RM
	type RecordTRN trn

	if %ProcessMode=0 do {
		set %TAB("CLS")=".TRCLS/TBL=[STBLTRNCLS]/XPP=S $P(trn(0),$C(124),3)=X"
		set %TAB("ETC")=".TRN1/XPP=D PP00^UTRN"
		}

	if %ProcessMode do {
		set %TAB("ETC")=".TRN1/TBL=[TRN]/XPP=D PP00^UTRN"
		if %ProcessMode=2 set %TAB("IO")=$$IO^SCATAB($I)
		}

	set %READ="@@%FN,,,ETC/REQ" 
	set %NOPRMT="F"

	if %ProcessMode=0 set %READ=%READ_",CLS/REQ"
	if %ProcessMode=2 set %READ=%READ_",IO/REQ"

	do ^UTLREAD if VFMQ="Q" quit

	if %ProcessMode=2,IO'=$I do OPEN^SCAIO if ER set VFMQ="Q" quit

	if %ProcessMode=3,%Library'="SYSDEV" do PROT if ER quit

	set trn=Db.getRecord("TRN","ETC=:ETC",1)
	if '%ProcessMode do {
		set trn.cls=CLS
		set trn.etc=ETC
		}

	set SID=$S(trn.cls="D":"TRND",trn.cls="L":"TRNL",trn.cls="M":"TRNM",1:"TRN")
	
	do DRV^USID(%ProcessMode,SID,.trn)

	if VFMQ="Q" do END quit

	if %ProcessMode=2!(%ProcessMode=4) do END quit

	if %ProcessMode=3 do VER(.trn)

	do VER(.trn)

	quit


VER(RecordTRN trn)	// Journal updates
	do FILE(.trn)

	do END

	quit


FILE(RecordTRN trn)	// File data

	type Public String DEL,ETC,PCF,%SCRID

	if %ProcessMode=3 do {
		do Db.delete("TRN","ETC=:ETC")
		}
	
	if (%ProcessMode=0)!(%ProcessMode=1) do {
		do trn.save()
		}

	kill %SCRID,DEL,PCF

	quit


PP00	// Post-processor

	type Number TRNDEF

	type Public Boolean ER	
	type Public Number %OSAVE
	type Public String X

	if X.isNull() quit  
	
	set TRNDEF=0

	if Db.isDefined("TRN","ETC=:X") set TRNDEF=1

	// Record already on file
	if '%OSAVE,TRNDEF do Runtime.setErrSTBLER("TRN","RECOF") quit:ER

	if %OSAVE,TRNDEF do TRNPROT quit

	if '%OSAVE do TRNPROT

	quit


STRIP	// Strip trailing zeroes
	type String I
	type Public String X

	for I=X.length():-1:2 quit:X.extract(I)'=0  set X=X.extract(1,I-1)

	quit


PROT	// System required tran codes

	type Public Boolean ER
	type Public String ETC

	if "|CI|CO|CK|CKNH|CH|MDR|MCR|TSDR|TSCR|RODR|ROCR|"'[("|"_ETC_"|") quit

	// Transaction code cannot be deleted
	do Runtime.setErrSTBLER("TRN","TRNPROT") quit:ER

	quit


public COPY	// Copy transaction code

	type String OLNTB,%READ,%TAB(),VFMQ

	set %ProcessMode=5
	set %TAB("FTC")=".FTC1/TBL=[TRN]/XPP=D PP00A^UTRN"
	set %TAB("TTC")=".TTC1/XPP=D PP00B^UTRN"
	set %TAB("TGRP")=".TRNGRP2/TBL=[TRN]GRP:DISTINCT:QU ""[TRN]CLS=<<FCLS>>"""

	set %READ="@@%FN,,,FTC/REQ,TTC/REQ,TGRP/REQ"
	do ^UTLREAD if VFMQ="Q" do END quit

 	do FILEC

	do END

	quit


PP00A	// From tran code post-processor (copy)

	type Public String FCLS,X

	if X.isNull() quit

	type RecordTRN trn=Db.getRecord("TRN","ETC=:X",1)
        set FCLS=trn.cls

	quit


PP00B	// To tran code post-processor (copy)

	type Public Boolean ER
	type Public String X

	if X.isNull() quit

	// Record already on file
	if Db.isDefined("TRN","ETC=:X") do Runtime.setErrSTBLER("TRN","RECOF") quit:ER

	do TRNPROT

	quit


TRNPROT	// Protect lower case tran codes

	type Public Number %OSAVE
	type Public String ER,X

	if %OSAVE=2!(%OSAVE=4) quit

	// Lowercase transaction codes protected
	if X?.E1L.E do Runtime.setErrMSG("TRN",1663) quit:ER

	quit


FILEC	// File section for the COPY function

	type Public String CLS,DEL,ETC,FTC,TGRP,TTC

	// "From" transaction code
	type RecordTRN trnF=Db.getRecord("TRN","ETC=:FTC")

	// "To" transaction code
	type RecordTRN trnT=trnF.copy()
	
	do trnT.setMode(0)

	// Redefine trancode and group
	set trnT.etc=TTC
	set trnT.grp=TGRP
	
	// Save the new trancode
	do trnT.save()
	
	type DbSet rs=Db.selectDbSet("TRNAUT","ETC=:FTC","UCLS")
	while rs.next() do {	// Copy the transaction authorizations
		type RecordTRNAUT trnautF=rs.getRecord("TRNAUT")

		type RecordTRNAUT trnautT=trnautF.copy()

		do trnautT.setMode(0)

		set trnautT.etc=TTC
		
		do trnautT.bypassSave()
		}
	
	kill CLS,DEL

	quit


public LNKTRN	// Post-processor to ensure tran codes are not linked to each other

	type Boolean O
	type String C,K(),N,S()
	
	type Public String ER,ETC,X

	if X.isNull() quit	

	// Cannot link a transaction code to itself
	if X=ETC do Runtime.setErrMSG("TRN",460) quit:ER

	// Lowercase transaction codes protected
	if X?.E1L.E do Runtime.setErrMSG("TRN",1663) quit:ER

	if "DR*,CR*"[X do {
		set O=X="CR*" do L2 if 1
		}
	else  do { quit:ER
		// Invalid transaction code ~p1
		if 'Db.isDefined("TRN","ETC=:X") do Runtime.setErrMSG("TRN",1498,X) quit:ER

		set (S(X),K(X))=""
		}

	set N="" 
	for  set N=S(N).order() quit:N.isNull()  if N=ETC set ER=1 quit

	// ~p1 contains ~p2
	if ER do Runtime.setErrMSG("TRN",3027,"X~ETC") quit:ER

	for  set N=K("").order() quit:N.isNull()  do { quit:ER 
		type RecordTRN trn=Db.getRecord("TRN","ETC=:N",1)
		set C=trn.lnketc 

		kill K(N)

		if C.isNull() quit
		if C=ETC do LNKERR quit

		if "DR*,CR*"[C do { quit:ER
			set O=C="CR*" do L2
			set N="" 
			for  set N=S(N).order() quit:N.isNull()  if N=ETC do LNKERR quit
			}
		}
	quit


L2	// Collate through DRTRGP and CRTRGP when DR* or CR* is used in LNKETC

	type String TMPETC
	
	type Public Boolean O
	type Public String K(),S()

	type ResultSet rs=Db.select("DRTRGP,CRTRGP","PRODCTL","CLS='L' OR CLS='D'","CLS,GRP")
	while rs.next() do {

		if 'O set TMPETC=rs.getCol(1)
		else  set TMPETC=rs.getCol(2)
		
		if 'TMPETC.isNull(),'S(TMPETC).data() set (S(TMPETC),K(TMPETC),TMPETC)=""
                }

	quit


LNKERR	// Linkage error

	type Public String ER

	// Transaction code selected is linked to the one being edited
	do Runtime.setErrMSG("TRN",2702) quit:ER

	quit


END	// End of Processing
	type Public String ER,ETC,FTC,RM,TTC,VFMQ

	if ER!(%ProcessMode=2)!(%ProcessMode=4) quit

	set ER="W"

	if VFMQ="Q" do {

		// Transaction code ~p1 not created
		if %ProcessMode=0 set RM=$$^MSG(2707,ETC) quit

		// Transaction code ~p1 not modified
		if %ProcessMode=1 set RM=$$^MSG(2709,ETC) quit

		// Transaction code ~p1 not deleted
		if %ProcessMode=3 set RM=$$^MSG(2708,ETC) quit

		// Transaction code not copied
		set RM=$$^MSG(2512)
		}
	else  do {

		// Transaction code ~p1 created
		if %ProcessMode=0 set RM=$$^MSG(2703,ETC) quit

		// Transaction code ~p1 modified
		if %ProcessMode=1 set RM=$$^MSG(2706,ETC) quit

		// Transaction code ~p1 deleted
		if %ProcessMode=3 set RM=$$^MSG(2704,ETC) quit

		// Transaction code ~p1 copied to transaction code ~p2
		set RM=$$^MSG(2513,FTC,TTC)
		}

	quit

vSIG()	quit "60277^53987^Pat Kelly^7915"	// Signature - LTD^TIME^USER^SIZE
