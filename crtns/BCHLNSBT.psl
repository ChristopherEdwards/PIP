BCHLNSBT //Batch BCHLNSBT - Small Balance Threshold Processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNSBT Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNSBT")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNSBT") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNSBT",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNSBT")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNSBT","*","",TJD.get()_","_CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNSBT",TJD.get()_","_CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNSBT",TJD.get()_","_CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNSBT","*","",TJD.get()_","_CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNSBT",TJD.get()_","_CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,CID) //
	new ER
	set ER=0
	do EXEC(CID,1)
	if $G(ER) do EXC
	quit
 
PUBLIC EXEC(CID,CTL)   // Public  Process one account
	/*
	ARGUMENTS:
 
		. CID   Account Number	  /TYPE=N/REQ/MECH=VAL
 
			Profile/IBS Account Number
 
		. CTL   Control Variable	/TYPE=N/NOREQ/MECH=VAL
 
			Control Variable
			Position 1: 0 - do not file to disk (update %A array
					FSN, and TR array if applicable)
				    1 - file to disk (^ACN, ^TTX and other
					supporting files
 
	*/
 
	new PAMT,CC,CRCD
	type RecordLN ln
	set ln=Db.getRecord("LN","CID")

	if ln.stat=4 quit	// Account is already closed
	set BAL=ln.bal	  // Ledger Balance
	set PAMT=0	      // Payoff Amt
	set CC=ln.cc	    // Cost Center
	set CRCD=ln.crcd	// Currency Code
 
	// do not process if not within thresholds
	if '$$CHKPOFF(CID,.ln) quit     
 
	new ts,CRTRCI,DRTRCI
	type RecordPRODCTL prodtype
	set prodtype=Db.getRecord("PRODCTL","TYPE=:TYPE")
	set CRTRCI=prodtype.crtrci      // CR Closeout Tran Code
	set DRTRCI=prodtype.drtrci      // DR Closeout Tran Code
	type TranSet ts
	set ts=Class.new("TranSet")
 
	// G/L and loan charge-off transactions
	if PAMT>0 do {
		if 'ln.trb do {
			do SETTR(DRTRCI,0,CID,PAMT,$$^MSG(3773,CID),.ts)
			do SETTR("MCR",1,GLSBO,PAMT,$$^MSG(3773,CID),.ts)
			} // MSG 3773="Small Balance Threshold Payoff"
		else  do {
			do SETTR(CRTRCI,1,CID,PAMT,$$^MSG(3773,CID),.ts)
			do SETTR("MDR",0,GLSBO,PAMT,$$^MSG(3773,CID),.ts)
			}
		}
	else  do {
		if 'ln.trb do {
			do SETTR(CRTRCI,1,CID,-PAMT,$$^MSG(3773,CID),.ts)
			do SETTR("MDR",0,GLSBO,-PAMT,$$^MSG(3773,CID),.ts)
			}
		else  do {
			do SETTR(DRTRCI,0,CID,-PAMT,$$^MSG(3773,CID),.ts)
			do SETTR("MCR",1,GLSBO,-PAMT,$$^MSG(3773,CID),.ts)
			}
		}
	if $E(CTL) do POST(.ts)
	quit
 
SETTR(ETC,ITC,CID,TAMT,TCMT,TranSet ts)  // Private Create Transaction Set
 
	/* Create closeoff transactions Build Transaction object
 
	  ARGUMENTS:
 
		.ETC    External transaction code  /TYP=T/REQ/MECH=VAL
 
		.ITC    Internal transaction code  /TYP=T/REQ/MECH=VAL
 
		.CID    Account number	     /TYP=N/REQ/MECH=VAL
 
		.TAMT   Transaction amount	 /TYP=$/REQ/MECH=VAL
 
		.TCMT   Transaction comment	/TYP=T/NOREQ/MECH=VAL
 
	  RETURNS:
 
		 ttx()     Transaction object				
	*/
 
	type RecordTTX ttx
	set ttx=Class.new("RecordTTX")
	set ttx.cid=CID
	set ttx.itc=ITC
	set ttx.etc=ETC
	set ttx.tamt=TAMT
	set ttx.efd=%SystemDate
	set ttx.tlo=%UserStation
	set ttx.tcmt=TCMT
	set ttx.cc=CC
	#if CUVAR.%MCP set ttx.crcd=CRCD
	set x=ts.copyTran(ttx)
	quit
 
POST(TranSet ts)
	new par
	set par("IPMODE")=3
	set par("OPTION")=2
	do ts.postTSet(TPD,BRCD,.par)
	quit
 
EXC     // Log error to DAYEND
 
	if $G(ET)="" set ET=$G(RM)
	set CID=$G(CID)
	if CID="" set BAL=0
	// MSG 3773 "Small balance threshold processing"
	do LOG^UTLEXC($T(+0),"*",$$^MSG(3773),CID,$G(%ZTSEQ),$G(ET),BAL)
	kill ET,%ZTSEQ
	quit
 
Public CHKPOFF(CID,RecordLN ln)	// determines whether loan is near payoff 

	// check if nearing a payoff prior to calling into EXEC^LNTCP1
	set PAMT=ln.bal+ln.acr-ln.unapf
	if ln.aruf set PAMT=PAMT-ln.udbal
	if '$$PAYOFF(PAMT,.ln) quit 0

	Type RecordTTX ttx=Class.new("RecordTTX")
	// determine payoff amount
	set PAMT=$$EXEC^LNTCP1(.ln,.ttx) quit:ER 0
	quit $$PAYOFF(PAMT,.ln)

PAYOFF(PAMT,RecordLN ln)	// Is balance less than threshold amounts.
 
	new NOPAYOFF
	set NOPAYOFF=""
	if ln.trb do {
		if ln.dbt&(PAMT>ln.dbt) set NOPAYOFF=1 quit
		if ln.cbt&(PAMT<0)&((-PAMT)>ln.cbt) set NOPAYOFF=1 quit
		}
	else  do {
		if ln.cbt&(PAMT>ln.cbt) set NOPAYOFF=1 quit
		if ln.dbt&(PAMT<0)&(-PAMT>ln.dbt) set NOPAYOFF=1 quit
		}
 
	if NOPAYOFF quit 0
	quit 1
 

Public EXT(CID)
	type RecordLN ln
	set ln=Db.getRecord("LN","CID")

	set return=$$CHKPOFF(CID,.ln)
	quit return

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,TJD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set TJD=vRECORD.piece($C(9),1)
 set CID=vRECORD.piece($C(9),2)
 do vPROC(TJD,CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,TJD,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+24>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	set ER=0,TPD=%SystemDate
	do SOURCE^BCHSOURC("BOFF","SBT",.%UserID,.BRCD,.%UserClass)
 
	if ER set %BatchExit=1 do EXC quit
	// Lock ^TTX file
	do ^TTXLOK if ER set:$G(ET)="" ET="TTXLOK" set %BatchExit=1 do EXC quit
 
	set XTJD=%SystemDate

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,CID","DAYENDSBT","DAYENDSBT.TJD=:XTJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set (EFD,TPD)=%SystemDate	   // Init EFD to TJD
	do SOURCE^BCHSOURC("BOFF","SBT",.%UserID,.BRCD,.%UserClass)
 
	type RecordCUVAR cuvar
	set cuvar=Db.getRecord("CUVAR")
 
	set GLSBO=cuvar.glsbo
	if GLSBO="" set GLSBO=cuvar.glts

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
