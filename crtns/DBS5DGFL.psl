DBS5DGFL(RecordDBTBL5DGC dbtbl5dgc, String vpar, Boolean vparNorm) // DBTBL5DGC - Report Definition (Group Control) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl5dgc.getMode()                   // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dbtbl5dgc,.vxins(),10,"|")
	if %O = 1 quit:'dbtbl5dgc.isChanged()  do AUDIT^UCUTILN(dbtbl5dgc,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("LIBS").exists()!vx("RID").exists()!vx("GRP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL5DGC",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL5DGC","LIBS = :dbtbl5dgc.libs and RID = :dbtbl5dgc.rid and GRP = :dbtbl5dgc.grp") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String LIBS
	type public String RID
	type public String GRP

	type RecordDBTBL5DGC dbtbl5dgc = Db.getRecord("DBTBL5DGC","LIBS=:LIBS,RID=:RID,GRP=:GRP")
	if (%ProcessMode = 2) do {
		do dbtbl5dgc.setMode(2)

		do DBS5DGFL(dbtbl5dgc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL5DGC dbtbl5dgc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL5DGC","LIBS = :dbtbl5dgc.libs and RID = :dbtbl5dgc.rid and GRP = :dbtbl5dgc.grp") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(dbtbl5dgc,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^DBTBL(vobj(dbtbl5dgc,-3),5,vobj(dbtbl5dgc,-4),vobj(dbtbl5dgc,-5),n)=vobj(dbtbl5dgc,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(dbtbl5dgc,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(dbtbl5dgc,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^DBTBL(vobj(dbtbl5dgc,-3),5,vobj(dbtbl5dgc,-4),vobj(dbtbl5dgc,-5),n)=vobj(dbtbl5dgc,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordDBTBL5DGC dbtbl5dgc
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^DBTBL(vobj(dbtbl5dgc,-3),5,vobj(dbtbl5dgc,-4),vobj(dbtbl5dgc,-5),n)) quit:n=""  if '$D(vobj(dbtbl5dgc,n)),$D(^DBTBL(vobj(dbtbl5dgc,-3),5,vobj(dbtbl5dgc,-4),vobj(dbtbl5dgc,-5),n))#2 set vobj(dbtbl5dgc,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL5DGC dbtbl5dgc

	if 'vkeychg.get(),dbtbl5dgc.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DBTBL(vobj(dbtbl5dgc,-3),5,vobj(dbtbl5dgc,-4),vobj(dbtbl5dgc,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordDBTBL5DGC dbtbl5dgc

	// Type local variables for access keys for defaults
	type public String LIBS
	type public String RID
	type public String GRP

	if dbtbl5dgc.udrc.isNull() set dbtbl5dgc.udrc = 0      // udrc
	if dbtbl5dgc.udrpp.isNull() set dbtbl5dgc.udrpp = 0    // udrpp
	if dbtbl5dgc.udrra.isNull() set dbtbl5dgc.udrra = 0    // udrra
	if dbtbl5dgc.udsc.isNull() set dbtbl5dgc.udsc = 0      // udsc
	if dbtbl5dgc.udspp.isNull() set dbtbl5dgc.udspp = 0    // udspp
	if dbtbl5dgc.udsra.isNull() set dbtbl5dgc.udsra = 0    // udsra
	quit


vreqn // Validate required data items

	type public RecordDBTBL5DGC dbtbl5dgc

	if dbtbl5dgc.udrc.isNull() do vreqerr("UDRC") quit
	if dbtbl5dgc.udrpp.isNull() do vreqerr("UDRPP") quit
	if dbtbl5dgc.udrra.isNull() do vreqerr("UDRRA") quit
	if dbtbl5dgc.udsc.isNull() do vreqerr("UDSC") quit
	if dbtbl5dgc.udspp.isNull() do vreqerr("UDSPP") quit
	if dbtbl5dgc.udsra.isNull() do vreqerr("UDSRA") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL5DGC dbtbl5dgc

	if dbtbl5dgc.libs.isNull() do vreqerr("LIBS") quit
	if dbtbl5dgc.rid.isNull() do vreqerr("RID") quit
	if dbtbl5dgc.grp.isNull() do vreqerr("GRP") quit

	if 'vobj(dbtbl5dgc,-100,28,"").order().isNull() do {
		if vx("UDRC").exists(),dbtbl5dgc.udrc.isNull() do vreqerr("UDRC") quit
		if vx("UDSC").exists(),dbtbl5dgc.udsc.isNull() do vreqerr("UDSC") quit
		if vx("UDRRA").exists(),dbtbl5dgc.udrra.isNull() do vreqerr("UDRRA") quit
		if vx("UDSRA").exists(),dbtbl5dgc.udsra.isNull() do vreqerr("UDSRA") quit
		if vx("UDRPP").exists(),dbtbl5dgc.udrpp.isNull() do vreqerr("UDRPP") quit
		if vx("UDSPP").exists(),dbtbl5dgc.udspp.isNull() do vreqerr("UDSPP") quit
	}
		if vx("UDRC").exists(),dbtbl5dgc.udrc.isNull() do vreqerr("UDRC") quit
		if vx("UDRPP").exists(),dbtbl5dgc.udrpp.isNull() do vreqerr("UDRPP") quit
		if vx("UDRRA").exists(),dbtbl5dgc.udrra.isNull() do vreqerr("UDRRA") quit
		if vx("UDSC").exists(),dbtbl5dgc.udsc.isNull() do vreqerr("UDSC") quit
		if vx("UDSPP").exists(),dbtbl5dgc.udspp.isNull() do vreqerr("UDSPP") quit
		if vx("UDSRA").exists(),dbtbl5dgc.udsra.isNull() do vreqerr("UDSRA") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL5DGC","MSG",1767,"DBTBL5DGC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL5DGC dbtbl5dgc

	if (%O = 2) do vload

	if vobj(dbtbl5dgc,0).exists() do {

		if dbtbl5dgc.reginfo.length()>20 set vRM = $$^MSG(1076,20) do vdderr("REGINFO", vRM) quit
	}

	if vobj(dbtbl5dgc,25).exists() do {

		set X = dbtbl5dgc.rptcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RPTCNT", vRM) quit
		set X = dbtbl5dgc.rptfrom if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RPTFROM", vRM) quit
		set X = dbtbl5dgc.rptsize if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RPTSIZE", vRM) quit
		set X = dbtbl5dgc.rptto if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RPTTO", vRM) quit
	}

	if vobj(dbtbl5dgc,26).exists() do {

		if dbtbl5dgc.blnksupr.length()>80 set vRM = $$^MSG(1076,80) do vdderr("BLNKSUPR", vRM) quit
	}

	if vobj(dbtbl5dgc,27).exists() do {

		if dbtbl5dgc.lfsupr.length()>80 set vRM = $$^MSG(1076,80) do vdderr("LFSUPR", vRM) quit
	}

	if vobj(dbtbl5dgc,28).exists() do {

		if '("01"[dbtbl5dgc.UDRC) set vRM=$$^MSG(742,"L") do vdderr("UDRC", vRM) quit
		if '("01"[dbtbl5dgc.UDRPP) set vRM=$$^MSG(742,"L") do vdderr("UDRPP", vRM) quit
		if '("01"[dbtbl5dgc.UDRRA) set vRM=$$^MSG(742,"L") do vdderr("UDRRA", vRM) quit
		if '("01"[dbtbl5dgc.UDSC) set vRM=$$^MSG(742,"L") do vdderr("UDSC", vRM) quit
		if '("01"[dbtbl5dgc.UDSPP) set vRM=$$^MSG(742,"L") do vdderr("UDSPP", vRM) quit
		if '("01"[dbtbl5dgc.UDSRA) set vRM=$$^MSG(742,"L") do vdderr("UDSRA", vRM) quit
	}
	if dbtbl5dgc.libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("LIBS", vRM) quit
	if dbtbl5dgc.rid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RID", vRM) quit
	if dbtbl5dgc.grp.length()>33 set vRM = $$^MSG(1076,33) do vdderr("GRP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL5DGC","MSG",979,"DBTBL5DGC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL5DGC dbtbl5dgc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("LIBS").exists() set vux("LIBS") = vx("LIBS")
	if vx("RID").exists() set vux("RID") = vx("RID")
	if vx("GRP").exists() set vux("GRP") = vx("GRP")
	do vkey(1) set voldkey = dbtbl5dgc.libs_","_dbtbl5dgc.rid_","_dbtbl5dgc.grp // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl5dgc.libs_","_dbtbl5dgc.rid_","_dbtbl5dgc.grp // Copy new keys into object
	type RecordDBTBL5DGC vnewrec = dbtbl5dgc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL5DGC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL5DGC dbtbl5dgc

	if vux("LIBS").exists() set dbtbl5dgc.libs = vux("LIBS").piece("|",i)
	if vux("RID").exists() set dbtbl5dgc.rid = vux("RID").piece("|",i)
	if vux("GRP").exists() set dbtbl5dgc.grp = vux("GRP").piece("|",i)
	quit
