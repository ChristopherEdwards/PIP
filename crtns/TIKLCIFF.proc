TIKLCIFF(RecordTIKLCIF tiklcif, String vpar, Boolean vparNorm) // TIKLCIF - Tickler Entry (Customer) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (12)             11/22/2003
	// Trigger Definition (2)                      04/20/2005
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = tiklcif.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(tiklcif,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(tiklcif,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = tiklcif.acn
	type String TKS = tiklcif.tks

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("TKS").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("TIKLCIF",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("TIKLCIF","ACN = :tiklcif.acn and TKS = :tiklcif.tks") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String TKS

	type RecordTIKLCIF tiklcif = Db.getRecord("TIKLCIF","ACN=:ACN,TKS=:TKS")
	if (%ProcessMode = 2) do {
		do tiklcif.setMode(2)

		do TIKLCIFF(tiklcif,vpar)
	}
	else  do VINDEX(tiklcif)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordTIKLCIF tiklcif

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("TIKLCIF","ACN = :tiklcif.acn and TKS = :tiklcif.tks") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set tiklcif.LDU = %SystemDate
		set tiklcif.UID = %UserID
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(tiklcif))  S ^TIKL("CIF",vobj(tiklcif,-3),vobj(tiklcif,-4))=vobj(tiklcif)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.tiklcif)             // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.tiklcif) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordTIKLCIF tiklcif

	if vpar["/INDEX/" do VINDEX(.tiklcif)                  // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.tiklcif)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^TIKL("CIF",vobj(tiklcif,-3),vobj(tiklcif,-4))     // Delete Record
	quit


vreqn // Validate required data items

	type public RecordTIKLCIF tiklcif

	if tiklcif.arnd.isNull() do vreqerr("ARND") quit
	if tiklcif.rrc.isNull() do vreqerr("RRC") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordTIKLCIF tiklcif

	if tiklcif.acn.isNull() do vreqerr("ACN") quit
	if tiklcif.tks.isNull() do vreqerr("TKS") quit

		if vx("ARND").exists(),tiklcif.arnd.isNull() do vreqerr("ARND") quit
		if vx("RRC").exists(),tiklcif.rrc.isNull() do vreqerr("RRC") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TIKLCIF","MSG",1767,"TIKLCIF."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordTIKLCIF tiklcif
	if 'tiklcif.acn.isNull() set vfkey("^CIF("_""""_tiklcif.acn_""""_","_1_")")="TIKLCIF(ACN) -> CIF"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordTIKLCIF tiklcif
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":tiklcif.acn") set vERRMSG = $$^MSG(8563,"TIKLCIF(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ARND").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordTIKLCIF tiklcif
	/*
	Revision History
	
	04/20/05 - Balaji Gopalakrishnan - CR 15268
		   Modified the code TIKL to TIKLCIF in setErrXBAD.
		   
	01/12/04 - RussellDS - CR 7514
		   Moved from table TIKL (obsoleted) to here
	
	09/17/99 - CHOK - 31126
		   Converted to PSL
	*/

	// Next tickler date in the past
								if (tiklcif.expd>%SystemDate!(tiklcif.expd=""))&(tiklcif.arnd<%SystemDate) do Runtime.setErrXBAD("TIKLCIF",83) quit:ER

	quit

vau1 // Trigger AU_ARND - After update next action date

	type public RecordTIKLCIF tiklcif

	/*
	Revision History
	
	04/20/05 - Balaji Gopalakrishnan - CR 15268
		   Modified the code TIKL to TIKLCIF in setErrXBAD.   
	*/
	
	// Next tickler date in the past
	if tiklcif.arnd<%SystemDate do Runtime.setErrXBAD("TIKLCIF",83) quit:ER
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordTIKLCIF tiklcif

	set X = tiklcif.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = tiklcif.tks if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TKS", vRM) quit
	set X = tiklcif.arf if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[TIKLCIF]ARF",0) if 'vRM.get().isNull() do vdderr("ARF", vRM) quit
	set X = tiklcif.arld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ARLD", vRM) quit
	set X = tiklcif.arnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ARND", vRM) quit
	set X = tiklcif.expd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPD", vRM) quit
	if tiklcif.ft1.length()>30 set vRM = $$^MSG(1076,30) do vdderr("FT1", vRM) quit
	if tiklcif.ft2.length()>30 set vRM = $$^MSG(1076,30) do vdderr("FT2", vRM) quit
	if tiklcif.ft3.length()>30 set vRM = $$^MSG(1076,30) do vdderr("FT3", vRM) quit
	set X = tiklcif.ldu if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDU", vRM) quit
	set X = tiklcif.rrc if 'X.isNull(),'Db.isDefined("UTBLRRCC","X") set vRM = $$^MSG(1485,X) do vdderr("RRC", vRM) quit
	if tiklcif.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("TIKLCIF","MSG",979,"TIKLCIF."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordTIKLCIF tiklcif)	//TIKLCIF Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if TSRC="B" do {
		do vj1(.tiklcif)	// Mode=I,U,D Tran=B EFD=N,E Seq=1 JRNID=ACN_HIST
		}
	else  if TSRC="O" do {
		do vj1(.tiklcif)	// Mode=I,U,D Tran=O EFD=N,E Seq=1 JRNID=ACN_HIST
		}

	quit


vj1(RecordTIKLCIF tiklcif)	// ACN_HIST  Table CIFH  Customer History

	type Public String EFD,%IDENT,%O,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=tiklcif.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG($S(%O=0:5764,%O=1:5765,%O=3:5766),tiklcif.tks)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordTIKLCIF tiklcif) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("ARND").exists() do vi1(.tiklcif)
	}
	do vi1(.tiklcif)

	quit
	

vi1(RecordTIKLCIF tiklcif) // Maintain ARND index entries (Next Occurrence (Customer))

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = tiklcif.arnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = tiklcif.acn
	type String v4 = tiklcif.tks

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^TIKL("CIF",vobj(tiklcif,-3),vobj(tiklcif,-4)))#2,'$D(^DAYEND(v1,"ARFCIF",v3,v4)) do vidxerr("ARND")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"ARFCIF",v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("ARND").exists() set v1=vx("ARND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"ARFCIF",v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("TIKLCIF")

	while ds.next() do {
		type RecordTIKLCIF tiklcif=ds.getRecord("TIKLCIF")
		if vlist.contains("VINDEX") do VINDEX(.tiklcif) quit
		if vlist.contains("ARND") do vi1(.tiklcif)
	}

	quit


public VIDXBLD1(RecordTIKLCIF tiklcif, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.tiklcif) quit
	if vlist.contains("ARND") do vi1(.tiklcif)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("TIKLCIF","MSG",1225,"TIKLCIF."_di)

	quit


vkchged // Access key changed

	type public RecordTIKLCIF tiklcif

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("TKS").exists() set vux("TKS") = vx("TKS")
	do vkey(1) set voldkey = tiklcif.acn_","_tiklcif.tks   // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = tiklcif.acn_","_tiklcif.tks   // Copy new keys into object
	type RecordTIKLCIF vnewrec = tiklcif.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("TIKLCIF",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordTIKLCIF tiklcif

	if vux("ACN").exists() set tiklcif.acn = vux("ACN").piece("|",i)
	if vux("TKS").exists() set tiklcif.tks = vux("TKS").piece("|",i)
	quit

VIDXPGM()	quit "TIKLCIFF"	// Location of index program

