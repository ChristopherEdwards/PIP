R01S228	// SCA178 - Retirement Tax Year Verification Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String TYR
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number VIN1
	type String VIN2="ALL"
	type String VIN3="ALL"

	set RID="SCA178"
	set RN="Retirement Tax Year Verification Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|4||[IRA]TAXYR|[IRA]TAXYR:DISTINCT||set TYR=X||N|Tax Year is equal to|||||"
	set %TAB("VIN2")="|255||[IRA]ACN|[CIF]:NOVAL||if X'=""ALL"" set %EXT=1 do ^UCIF if 'ER do EXT^DBSQRY D EXT^DBSQRY||T|Customer Number|||||"
	set %TAB("VIN3")="|255||[IRA]RPASEQ|[IRA]RPASEQ:DISTINCT||D EXT^DBSQRY||T|RPA Sequence|||||"

	set %READ="IO/REQ,VIN1#1,VIN2#0,VIN3#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String TYR
	type public Number VIN1
	type public String VIN2,VIN3
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ACN,ACNCNT(),BEG,CID,CONAM,DIF,END,FINISH,LINE,LPCTR,QREC,RID,RN,RPASEQ,TAXYR,TEMP,TREC,U(),VAR(),VL,VLOF,VREC,VRF(),VSKIPREC,VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vovc1,vovc2,vovc3,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA178",RN="Retirement Tax Year Verification Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA178","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		set DQQRY(SEQ)="[IRA]TAXYR = "_$$addqts^DBSRWUTL(VIN1),SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[IRA]ACN "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[IRA]RPASEQ "_VIN3,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("IRA,IRATYPE,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC1|"_"Tax Year is equal to"_"|VIN1|"_VIN1.get()
		set VBNRINFO("PROMPTS",2)="WC2|"_"Customer Number"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC2|"_"RPA Sequence"_"|VIN3|"_VIN3.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Retirement Tax Year Verification Report"
		set VBNRINFO("PGM")="R01S228"
		set VBNRINFO("RID")="SCA178"
		set VBNRINFO("TABLES")="IRA,IRATYPE,CIF"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,IRA]ACN"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,IRA]RPASEQ"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,IRA]TAXYR"

		set VBNRINFO("DOC",1)="/*"
		set VBNRINFO("DOC",2)="  ---------- Revision History --------------------------------------------"
		set VBNRINFO("DOC",3)="    12/28/05 - SWARNALP - 17293"
		set VBNRINFO("DOC",4)="              Converted to PSL "
		set VBNRINFO("DOC",5)="  ------------------------------------------------------------------------"
		set VBNRINFO("DOC",6)="*/"

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:3 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"IRA.ACN,IRA.RPASEQ,IRA.TAXYR,IRATYPE.IRATYP,IRATYP"
	set VSELECT=VSELECT_"E.PLANID,CIF.TAXID,CIF.NAM"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"IRA,IRATYPE,CIF",VWHERE,"IRA.ACN,IRA.RPASEQ,IRA.TAXYR","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3
	set vovc1="",vovc2="",vovc3=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3
	set vovc1=vc1,vovc2=vc2,vovc3=vc3
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7
	set vc1=V.piece($C(9),1)			// IRA.ACN
	set vc2=V.piece($C(9),2)			// IRA.RPASEQ
	set vc3=V.piece($C(9),3)			// IRA.TAXYR
	set vc4=V.piece($C(9),4)			// IRATYPE.IRATYP
	set vc5=V.piece($C(9),5)			// IRATYPE.PLANID
	set vc6=V.piece($C(9),6)			// CIF.TAXID
	set vc7=V.piece($C(9),7)			// CIF.NAM
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2,vc3
 type public Date BEG,END
 type public Number ACN,ACNCNT(),CID,RPASEQ,FINISH,LPCTR,QREC,TAXYR,TREC,U(),VREC,VSKIPREC
 type public String LINE,VAR()
                      
 type Number CTR,I,J,IRATYP,X,NOW,NUM,OPT,V1,V2,VAL
 type String ACT(),CIRA(),CIRAPT1,CIRAPT2,DES,DI,LOAD(),VAR1()
                         
 kill VAR
 set ACN=vc1
 set RPASEQ=vc2
 set TAXYR=vc3

 set QREC=QREC+1
 
 if 'ACNCNT(ACN).exists() do {
   set ACNCNT(ACN)=1
   set TREC=TREC+1
   }
                         
 type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
 while rs.next()  do {
   type RecordIRA ira=Db.getRecord("IRA","ACN=:ACN,RPASEQ=:RPASEQ,TAXYR=:TAXYR",1)
   if ira.getMode()=0 quit
   set CID=rs.getCol("CID")
   type ResultSet rs2=Db.select("ACN,IRA,RPASEQ","DEP","CID=:CID")
   if rs2.next() if (rs2.getCol("ACN")'=ACN)!(rs2.getCol("RPASEQ")'=RPASEQ) quit
                         
   do ACT
                         
   type ResultSet rs1=Db.select("TJD,EFD,TAMT,ITC1,TSO,ETC,ITC6,ITC12","HIST","CID=:CID","TSEQ")
                         
   while rs1.next() do {
     type Date HISTDATE
     type Number AMT,ETC,ITC,K,ZD
     type String PCF,TAMT,TSO,UTSO()
                         
     set HISTDATE=rs1.getCol("TJD")
     if '(rs1.getCol("EFD").isNull()) set HISTDATE=rs1.getCol("EFD")
     if (HISTDATE<BEG) ! (HISTDATE>END) quit
                         
     set TAMT=rs1.getCol("TAMT")
                         
     if TAMT["#" set AMT=TAMT.piece("#",2)+TAMT.piece("#",3)-TAMT.piece("#",4)
     else  set AMT=+TAMT
                         
     set ITC=rs1.getCol("ITC1")
     set TSO=rs1.getCol("TSO")
     set ETC=rs1.getCol("ETC")
              		
     do OUT^UTSO(.UTSO,.TSO)
              
     if ITC=0 set TSO=UTSO("IRAD").get()
     if ITC=1 set TSO=UTSO("IRAC").get()
              
     if ETC'="" do {
       type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
       set PCF=trn.pcf
       if (PCF.extract(4)) do {
         // all withholdings are associated w/debits
         if ITC=1,TSO="" set TSO=UTSO("IRAD").get()
                         
         // withh tran codes don't have principal in TAMT
         if AMT=0 set AMT=+TAMT
                         
         // if debit be sure amt will be subtracted from bucket total
         if ITC=0 set AMT=AMT*(-1)
                         
         // must be able to check for dist codes in U(ITC,TSO)
         set ITC=0
         }
       }
                         
                         
     if (TSO.isNull()) !('AMT) ! ('(AMT-TAMT.piece("#",3))) ! ('(U(ITC,TSO).exists())) ! (rs1.getCol("ITC6")) ! (rs1.getCol("ITC12")) quit
                         
     set K=U(ITC,TSO)
     set ZD=HISTDATE.toString("YEAR")
                         
     if (LOAD(ZD,"").order().isNull()) for I=0,1,2,4  set LOAD(ZD,I)=""
                         
     if '(PCF.extract(4)) set LOAD(ZD,ITC).piece("|",K)=LOAD(ZD,ITC).piece("|",K)+AMT
                         		
     set AMT=TAMT.piece("#",3)
     if AMT set X=CUVAR.iraint,K=U(1,X),LOAD(ZD,1).piece("|",K)=LOAD(ZD,1).piece("|",K)+AMT
     set AMT=TAMT.piece("#",4)
     if AMT set X=CUVAR.irapen,K=U(0,X),LOAD(ZD,0).piece("|",K)=LOAD(ZD,0).piece("|",K)+AMT
                         
     set AMT=TAMT.piece("#",5)
     if AMT set K=U(ITC,TSO),LOAD(ZD,2).piece("|",K)=LOAD(ZD,2).piece("|",K)+AMT
     }
   }
                         
 kill VAR1
 set NOW=1
 if LOAD(TAXYR,"").order().isNull() do {
   set ACT(1)=$$^MSG(6396)
   for OPT=0,1,2,4 set LOAD(TAXYR,OPT)=""
 }
 
 for OPT=0,1,2,4 set CIRA(OPT)=""
                         
 type ResultSet rs1 = Db.select("D1,D2,D3,D4,D5,D6,D7,D8,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,D34,D35,D36,D37,D38,D39,D43,D44,D45,D46,D47,D48,D49,D50,D51,D52,D53,D54,D55,D56,D57,D58,D59,D60,D61,D62,D63,D64,D65,D66,D67,D68,D69,D70,D71,D72,D73,D74,D75,D76,D77,D78,D79,D80,D81,D82,D83,D84,D85,D86,D87,D88,D89,D94,D95,D96,D97,D98,D99","IRA","ACN=:ACN AND RPASEQ=:RPASEQ AND TAXYR=:TAXYR")
 if rs1.next() do {
   set CIRA(0)=rs1.getRow("|")
   set CIRA(0)=CIRA(0).piece("|",1,8)_"||"_CIRA(0).piece("|",9,28)_"|||||"_CIRA(0).piece("|",29,34)_"||||"_CIRA(0).piece("|",35,81)_"|||||"_CIRA(0).piece("|",82,87)
   }
                         
                         
 type ResultSet rs2 = Db.select("C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16","IRA","ACN=:ACN AND RPASEQ=:RPASEQ AND TAXYR=:TAXYR")
 if rs2.next() set CIRA(1)=rs2.getRow("|")
                         
 type ResultSet rs3 = Db.select("W1,W2,W3,W4,W5,W6,W7,W8,W9,W10,W11,W12,W13,W14,W15,W16,W17,W18,W19,W20,W21,W22,W23,W24,W25,W26,W27,W28,W29,W34,W35,W36,W37,W38,W39,W43,W44,W45,W47,W48,W49,W50,W51,W52,W53,W54,W55,W56,W57,W58,W59,W60,W61,W62,W63,W64,W65,W66,W67,W68,W69,W70,W71,W72,W73,W74,W75,W76,W77,W78,W79,W80,W81,W82,W83,W84,W85,W86,W87,W88,W89,W94,W95,W96,W97,W98,W99","IRA","ACN=:ACN AND RPASEQ=:RPASEQ AND TAXYR=:TAXYR")
 if rs3.next() do {
   set CIRA(2)=rs3.getRow("|")
   set CIRA(2)=CIRA(2).piece("|",1,29)_"|||||"_CIRA(2).piece("|",30,35)_"||||"_CIRA(2).piece("|",36,38)_"||"_CIRA(2).piece("|",39,81)_"|||||"_CIRA(2).piece("|",82,87)
   }
                         
 type ResultSet rs4 = Db.select("SW1,SW2,SW3,SW4,SW5,SW6,SW7,SW8,SW10,SW11,SW12,SW13,SW14,SW15,SW16,SW17,SW18,SW19,SW20,SW21,SW22,SW23,SW24,SW25,SW26,SW27,SW28,SW29,SW34,SW35,SW36,SW37,SW38,SW39,SW43,SW44,SW45","IRA","ACN=:ACN AND RPASEQ=:RPASEQ AND TAXYR=:TAXYR")
 if rs4.next() do {
   set CIRAPT1=rs4.getRow("|")
   set CIRA(4)=CIRAPT1.piece("|",1,8)_"||"_CIRAPT1.piece("|",9,28)_"|||||"_CIRAPT1.piece("|",29,34)_"||||"_CIRAPT1.piece("|",35,37)
   }
                         
 type ResultSet rs5 = Db.select("SW47,SW48,SW49,SW50,SW51,SW52,SW53,SW54,SW55,SW56,SW57,SW58,SW59,SW60,SW61,SW62,SW63,SW64,SW65,SW66,SW67,SW68,SW69,SW70,SW71,SW72,SW73,SW74,SW75,SW76,SW77,SW78,SW79,SW80,SW81,SW82,SW83,SW84,SW85,SW86,SW87,SW88,SW89,SW94,SW95,SW96,SW97,SW98,SW99","IRA","ACN=:ACN AND RPASEQ=:RPASEQ AND TAXYR=:TAXYR")
 if rs5.next() do {
   set CIRAPT2=rs5.getRow("|")
   set CIRA(4)=CIRA(4)_"||"_CIRAPT2.piece("|",1,43)_"|||||"_CIRAPT2.piece("|",48,53)
   }
                         
 for OPT=0,1,2,4  do {
 	if LOAD(TAXYR,OPT).order().isNull() quit
 	// Set up VAR1 after comparison check
 	if OPT=0 do {
  		for I=1:1:29 do {
 		    set V2=+LOAD(TAXYR,OPT).piece("|",I)
 		    set V1=+CIRA(OPT).piece("|",I)
 		    if V1'=V2 set VAR1(NOW)="D"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		    }
 		for I=34:1:39 do {
 		    set V2=+LOAD(TAXYR,OPT).piece("|",I)
                    set V1=+CIRA(OPT).piece("|",I)
 		    if V1'=V2 set VAR1(NOW)="D"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		    }
 		for I=43:1:89 do {
 		    set V2=+LOAD(TAXYR,OPT).piece("|",I)
 		    set V1=+CIRA(OPT).piece("|",I)
 		    if V1'=V2 set VAR1(NOW)="D"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		    }
 		for I=94:1:99 do {
 		    set V2=+LOAD(TAXYR,OPT).piece("|",I)
 		    set V1=+CIRA(OPT).piece("|",I)
 		    if V1'=V2 set VAR1(NOW)="D"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		    }
 		}
 	
        if OPT=1 do {
                         
 		for I=1:1:16 do {
 		    set V2=+LOAD(TAXYR,OPT).piece("|",I)
 		    set V1=+CIRA(OPT).piece("|",I)
 		    if V1'=V2 set VAR1(NOW)="C"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		    }
 		}
 	if OPT=2 do {
 		for I=1:1:89,94,95,96,97,98,99 do {
 		    set V2=+LOAD(TAXYR,OPT).piece("|",I)    
 		    set V1=+CIRA(OPT).piece("|",I)
 		    if V1'=V2 set VAR1(NOW)="W"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		    }
 		}
 	if OPT=4 do {   
 		for I=1:1:89,94,95,96,97,98,99 do {
 		     set V2=+LOAD(TAXYR,OPT).piece("|",I)
                     set V1=+CIRA(OPT).piece("|",I)        
 		     if V1'=V2 set VAR1(NOW)="SW"_I_"|"_V1_"|"_V2,NOW=NOW+1
 		     }
 		}
 	}
 if VAR1("").order().isNull() kill ACT set VSKIPREC=1
 else  do {
 	set VAL=""
 	for I=1:1 set VAL=VAR1(VAL).order() quit:VAL=""  do {
                         
	   set DI=VAR1(VAL).piece("|",1)
                         
	   type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID='IRA',DI=:DI")
	   set DES=dbtbl1d.des
                         
	   set VAR1(VAL).piece("|",1)=DES
	   for J=2,3 do {
	     set NUM=+VAR1(VAL).piece("|",J)
	     set NUM=$$FN^SCARND(NUM,",",CID.get()).justify(14),VAR1(VAL).piece("|",J)=NUM
	     }
	   }
	 set CTR=11,VREC=VREC+1
	 // I18N=OFF
	 set VAR(CTR)="---------- CONTRIBUTING ACCOUNTS --------------------------------"
	 set CTR=CTR+1
                         
	 // I18N=ON
	 set VAR(CTR)="  ",CTR=CTR+1
	 set VAR(CTR)="ACCOUNT NUMBER       GROUP        TYPE| BEGIN HISTORY|   END HISTORY"
	 set CTR=CTR+1
	 set VAR(CTR)=LINE,CTR=CTR+1
                         
	 for I=1:1 set VAL=ACT(VAL).order() quit:VAL=""  do {
	   set VAR(CTR)=ACT(VAL)
	   set CTR=CTR+1
	   }

                         
	 for I=1,2 do {
	   set VAR(CTR)="     "
	   set CTR=CTR+1
	   }
	 // I18N=OFF
	 set VAR(CTR)="----------------- VARIANCES ----------------------------------------"
	 set CTR=CTR+1
	 // I18N=ON
	 set VAR(CTR)="DATA ITEM      |  SUMMARY DATA|  HISTORY DATA"
	 set CTR=CTR+1
	 set VAR(CTR)=LINE,CTR=CTR+1
                         
	 for I=1:1 set VAL=VAR1(VAL).order() quit:VAL=""  do {
	   set VAR(CTR)=VAR1(VAL)
	   set CTR=CTR+1
	   }	
                   
	 set LPCTR=10
	 set FINISH=CTR-1
	 }
	quit

VPREAQ	// Pre-processor (after query)

 type Public Date BEG,END
 type Public Number DIF,QREC,TREC,TYR,U(),VREC
 type Public String LINE
                         
 type Number NYR
                         
 type ResultSet rsdis=Db.select("KEY,RSN","UTBLIRADIS")
 if 'rsdis.isEmpty() do {
   while rsdis.next()  do {
     set U(0,rsdis.getCol("KEY"))=rsdis.getCol("RSN")
     }
   }
                         
 type ResultSet rscon=Db.select("KEY,RSN","UTBLIRACON")
 if 'rscon.isEmpty() do {
   while rscon.next()  do {
     set U(1,rscon.getCol("KEY"))=rscon.getCol("RSN")
     }
   }
                         
 set (QREC,TREC,VREC)=0
 //set X4=CUVAR.IRAINT,X5=CUVAR.IRAPEN
                         
 // Difference=current year-reporting year	   
 set DIF=%SystemDate.year()-TYR
                         
 /*
  Calculate beginning of tax year.
  Need to get the first day of the tax year that was entered by user,
  by starting with today's date in the loop and getting the beginning of tax
  year.  Each consecutive pass through the loop will take the current
  beginning of tax year and subtracting one to get end of prior tax year and 
  use this date to get beginning of tax year for that year.
  Here is an example of how the below loop will work for current date
  1/1/02 when trying to get the beginning of tax year for year 2000 where tax
  years start on 1/1.
  DIF=2.  Before loop set BEG=TJD+1=1/2/02.  First time through loop,
  set back to 1/1/02 find beginning of tax year (BOTY) which is 1/1/2002.
  Second time through loop, BEG=BEG-1=12/31/01 using this date to get BOTY
  which will be 1/1/2001.  Third and last time through the loop,
  BEG=BEG-1=12/31/2000 using this date to get BOTY which will be 1/1/2000.
 */
                         
 set BEG=TJD+1
 for NYR=1:1:DIF+1 do {
   set BEG=BEG-1
   set BEG=$$BOTY^SCADAT(BEG,1)
   }
 // end of reporting tax year
 set END=$$EOTY^SCADAT(BEG,1)
                         
 set LINE="======================================================================================="
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=TYR

	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(3)=1		// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(3)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3
	type Number vb1,vb2,vb3
	set (vb1,vb2,vb3)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,VH0=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(3)=VT(3)+1
	quit

VDTL3	// Detail
	type public String %TIM,ACN,ACNCNT(),BEG,CID,DIF,END,FINISH,IOSL,LINE,LPCTR,QREC,RPASEQ,TAXYR,TEMP,TREC,TYR,U(),V,VAR(),VD(),VFMQ,VL,VLC,VO,VOFFLG,VREC,VRG,VSKIPREC,VT(),vc1,vc2,vc3,vc4,vc5,vc6,vc7,verror,vh(),vovc1,vovc2,vovc3,vrundate,vsysdate

	if VLC+5>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="Customer Number"
	set VL=VL_$J("",20-VL.length())_"Retirement Type"
	set VL=VL_$J("",45-VL.length())_"Plan ID"
	set VL=VL_$J("",63-VL.length())_"TIN/SIN"
	set VL=VL_$J("",80-VL.length())_"Customer Name"
	do VOM
	set VL="   "_$J(vc1,12)
	set VL=VL_$J("",16-VL.length())_$J(vc4,19)
	set VL=VL_$J("",45-VL.length())_$E(vc5,1,12)
	set VL=VL_$J("",63-VL.length())_$E(vc6,1,11)
	set VL=VL_$J("",80-VL.length())_$E(vc7,1,40)
	do VOM
	set VL="" do VOM
	do VP1 quit:VFMQ!verror.get()  set V=$E(TEMP,1,80) set VL="              "_V
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ACN,ACNCNT(),BEG,CID,CONAM,DIF,END,FINISH,LINE,LPCTR,QREC,RID,RN,RPASEQ,TAXYR,TEMP,TREC,TYR,U(),VAR(),VL,VREC,VSKIPREC,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vovc1,vovc2,vovc3,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+5,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	set VL="Includes Exception Accounts for Tax Year "_TYR
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,ACN,ACNCNT(),BEG,CID,DIF,END,FINISH,LINE,LPCTR,QREC,RPASEQ,TAXYR,TEMP,TREC,TYR,U(),VAR(),VREC,VSKIPREC,vovc1,vovc2,vovc3,vrundate,vsysdate
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	do VHDG0 quit:VFMQ				// <<#>>
	do VOM
	set VL="     "_"Total Customer Accounts Reviewed              Total Plans Satisfying Queries           Total Exceptions Reported"
	do VOM
	set VL="                             "_$J($FN(TREC,",",0),8)
	set VL=VL_$J("",73-VL.length())_$J($FN(QREC,",",0),8)
	set VL=VL_$J("",109-VL.length())_$J($FN(VREC,",",0),8)
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: TEMP

 type public String TEMP,VAR(),V,VL
 type public Number LPCTR,FINISH
 set TEMP=""

 type Number I,J
 set J=LPCTR+1
 for J=J:1:FINISH do {
	type String VAL,VAR1,VAR2,VAR3
	for I=1:1:3 set VAL="VAR"_I,@VAL=VAR(J).piece("|",I)
	set V=VAR1.extract(1,40) set VL="              "_V
	set V=VAR2.extract(1,14) set VL=VL_"".justify(63-VL.length())_V
	set V=VAR3.extract(1,14) set VL=VL_"".justify(87-VL.length())_V
	do VOM
	}
 quit

ACT // SET ACT ARRAY FOR EACH ACCOUNT CONTRIBUTING
 type public Date BEG,END,BH,EH
 type public Number CID,TAXYR
 type public String ACT(),LOAD()

 quit:ACT(CID).exists()

 type ResultSet rsbh=Db.select("TSEQ,TJD","HIST","CID=:CID","TSEQ")
 if rsbh.isEmpty() set BH=$$^MSG(6397),EH="" do ACT1 quit
 if rsbh.next() set BH=rsbh.getCol("TJD")

 type ResultSet rseh=Db.select("TSEQ,TJD","HIST","CID=:CID","TSEQ DESC")
 if rseh.next() set EH=rseh.getCol("TJD")

 if BH>END set BH=$$^MSG(6398,TAXYR),EH="" do ACT1 quit
 if EH<BEG set BH=$$^MSG(6398,TAXYR),EH="" do ACT1 quit
 if BH<BEG set BH=BEG
 if EH>END set EH=END
 set BH=BH.toString(),EH=EH.toString()
 do ACT1
 quit
 
ACT1
 type public Date BH,EH
 type public Number CID,TAXYR
 type public String ACT(),LOAD()
 
 type Number I,TYP
 type String GRP
 
 if (LOAD(TAXYR,"").order().isNull()) for I=0,1,2,4 set LOAD(TAXYR,I)=""
 type ResultSet rs=Db.select("GRP,TYPE","ACN","CLS='D' AND CID=:CID")
 if rs.isEmpty() quit
 if rs.next() set GRP=rs.getCol("GRP"),TYP=rs.getCol("TYPE")
 set ACT(CID)="".justify(14-{String}CID.length())_CID_"  "_"".justify(10-GRP.length())_GRP_"  "_"".justify(10-{String}TYP.length())_TYP
 if BH'["/" set ACT(CID)=ACT(CID)_BH quit
 set ACT(CID)=ACT(CID)_"|"_"".justify(14-{String}BH.length())_BH_"|"_"".justify(14-{String}EH.length())_EH

	quit
