R01S133	// SCA065 - Insufficient Funds Notice
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:42 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String TJD
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1="ALL"
	type String VIN2="ALL"
	type String VIN3="ALL"
	type String VIN4="ALL"

	set RID="SCA065"
	set RN="Insufficient Funds Notice"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[RET]TJD|[RET]TJD:DISTINCT:NOVAL||D EXT^DBSQRY||T|Transaction Date|||||"
	set %TAB("VIN2")="|255||[RET]BRCD|[UTBLBRCD]:NOVAL||D EXT^DBSQRY||T|Branch Code|||||"
	set %TAB("VIN3")="|255||[RET]CID|[RET]CID:DISTINCT:NOVAL||D EXT^DBSQRY||T|Account Number|||||"
	set %TAB("VIN4")="|255||[RET]UID|[RET]UID:DISTINCT:NOVAL||D EXT^DBSQRY||T|User ID|||||"

	set %READ="IO/REQ,VIN1#0,VIN2#0,VIN3#0,VIN4#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String TJD
	type public String VIN1,VIN2,VIN3,VIN4
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,BAL,BR,CONAM,CONT,FEEPLN,INC,RID,RN,TELLER,TITLE1,TOT,UID,UID(),VL,VLOF,VRF(),VSTATS(),X,vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA065",RN="Insufficient Funds Notice"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA065","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[RET]TJD "_VIN1,SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[RET]BRCD "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[RET]CID "_VIN3,SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[RET]UID "_VIN4,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("RET,DEP") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}


	// Alignment pattern
	if cuvar.alcount,IOTYP'="TRM",'VRWOPT("NOALIGN").get() do ^DBSRWALN(RID,IO,cuvar.alcount)

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:5 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"RET.TJD,RET.BRCD,RET.CID,RET.UID,RET.TSEQ,DEP.FEEP"
	set VSELECT=VSELECT_"LN,DEP.BAL,DEP.TITLE1,DEP.CID"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"RET,DEP",VWHERE,"RET.TJD,RET.BRCD,RET.CID,RET.UID,RET.TSEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9
	set vc1=V.piece($C(9),1)			// RET.TJD
	set vc2=V.piece($C(9),2)			// RET.BRCD
	set vc3=V.piece($C(9),3)			// RET.CID
	set vc4=V.piece($C(9),4)			// RET.UID
	set vc5=V.piece($C(9),5)			// RET.TSEQ
	set vc6=V.piece($C(9),6)			// DEP.FEEPLN
	set vc7=V.piece($C(9),7)			// DEP.BAL
	set vc8=V.piece($C(9),8)			// DEP.TITLE1
	set vc9=V.piece($C(9),9)			// DEP.CID
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 type public Number CONT

 set CONT=0
 /* Load in the tellers and posting branches from common table INC
  into UID array.  If the branch code in ^RET is the account's
  branch of origin (based on [CUVAR]RETOPT), then the posting
  branch is found in this table. */

 do {
        type public Number BR,INC,UID()
	type public String TELLER,UID,X

	set UID=""

 	type ResultSet rs=Db.select("BRCD,TELLER","CTBLINC")
	while rs.next() do {
		set BR=rs.getCol("BRCD")
		set X=rs.getCol("TELLER")
 		if 'X.isNull() set UID(X)=BR
		}
    }

	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=TJD
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(2).get() do VDTL2 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(5)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5
	type Number vb1,vb2,vb3,vb4,vb5
	set (vb1,vb2,vb3,vb4,vb5)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,VH0=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,VH0=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,VH0=1
	if vb4!(vovc4'=vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(5)=VT(5)+1
	quit

VDTL2	// Detail
	type public String BAL,BR,CONT,FEEPLN,INC,IOSL,TELLER,TITLE1,TJD,TOT,UID,UID(),V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),X,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	quit:VD(2)  set VD(2)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc2,VO=V set V=$J(V,6) do VP1 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit

VDTL4	// Detail
	type public String BAL,BR,CONT,FEEPLN,INC,IOSL,TELLER,TITLE1,TJD,TOT,UID,UID(),V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),X,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	quit:VD(4)  set VD(4)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc4,VO=V set V=$E(V,1,20) do VP2 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM4	// Summary
	type public String BAL,BR,CONT,FEEPLN,I,INC,IOSL,TELLER,TITLE1,TJD,TOT,UID,UID(),V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),X,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	if 'VT(4) quit
	if VLC+16>IOSL do VHDG0 quit:VFMQ

	set VL=$E(CONAM,1,40)
	do VOM
	set VL="Insufficient Funds Notice"
	do VOM
	set VL="" do VOM
	set VL="     "_"Account:"
	set V=vc9,VO=V do VP3 quit:VFMQ!verror.get()  set V=$E(V,1,20) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",14-VL.length())_V
	set VL=VL_$J("",42-VL.length())_"Date:"
	set VL=VL_$J("",56-VL.length())_$J($$DAT^%ZM(vc1),10)
	do VOM
	set VL="    "_"Fee Plan:"
	set VL=VL_$J("",14-VL.length())_$E(vc6,1,5)
	set VL=VL_$J("",37-VL.length())_"Total Fee:"
	do VP5 quit:VFMQ!verror.get()  set V=$J($FN(TOT,",",2),16)
	set VL=VL_$J("",48-VL.length())_V
	do VOM
	set VL="                                       "_"Balance:"
	set VL=VL_$J("",52-VL.length())_$J($FN(vc7,",",2),12)
	do VOM
	set VL="" do VOM
	set VL="Item/Amount:"
	set VL=VL_$J("",17-VL.length())_$E(CHK(1),1,20)
	set VL=VL_$J("",38-VL.length())_$E(CHK(2),1,20)
	set VL=VL_$J("",60-VL.length())_"( ) Returned item(s) circle in red."
	do VOM
	set VL="                 "_$E(CHK(3),1,20)
	set VL=VL_$J("",38-VL.length())_$E(CHK(4),1,20)
	do VOM
	set VL="                 "_$E(CHK(5),1,20)
	set VL=VL_$J("",38-VL.length())_$E(CHK(6),1,20)
	set VL=VL_$J("",60-VL.length())_"( ) Paid item(s) as a courtesy to you."
	do VOM
	set VL="                 "_$E(CHK(7),1,20)
	set VL=VL_$J("",38-VL.length())_$E(CHK(8),1,20)
	set VL=VL_$J("",64-VL.length())_"Please make a deposit to cover"
	do VOM
	set VL="                                                                "_"this overdraft."
	do VOM
	set VL=$E(vc8,1,40)
	do VOM
	set VL=$E(AD(1),1,40)
	do VOM
	set VL=$E(AD(2),1,40)
	do VOM
	set VL=$E(AD(3),1,40)
	do VOM
	set VL=$E(AD(4),1,40)
	do VOM
	quit

VDTL5	// Detail
	type public String BAL,BR,CONT,FEEPLN,INC,IOSL,TELLER,TITLE1,TJD,TOT,UID,UID(),V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),X,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set V=vc5,VO=V set V=$J(V,12) do VP6 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BAL,BR,CONAM,CONT,FEEPLN,INC,RID,RN,TELLER,TITLE1,TJD,TOT,UID,UID(),VL,X,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	use IO if 'VLC,'vcrt set $Y=1
	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - [SYSDEV,RET]BRCD

 type public Number CONT
 type public String V

 set V=""
 set CONT=0
	quit

VP2	// Column post-processor - [SYSDEV,RET]UID

 type public Number CONT
 type public String SAVTSEQ,TSEQ,V

 set V=""
 if CONT.get() set TSEQ=SAVTSEQ
	quit

VP3	// Column pre-processor - [SYSDEV,RET]CID

V3C	//

 type public Number BRCD,CID,CONT,GETSKIPREC,I,NOCHK,NUM,TOT,VS(),VH()
 type public String CHK(),DEP(),Q(,),SAVTSEQ,TSEQ,UID,X

 set I=0
 if CONT do {
	type ResultSet rs=Db.select("UID,TSEQ","RET","TJD=:%SystemDate AND BRCD=:BRCD AND CID=:CID","UID DESC")
	while rs.next() do {
		set UID=rs.getCol("UID")
		set TSEQ=rs.getCol("TSEQ")
		}
	}

 set (NUM,TOT,VS(3),VH(0))=0
 for I=1:1:8 set CHK(I)=""
 do V4C quit

 // Modified to correct an Undefined when specifying values 
 // on the prompt screen DP 07/16/99 

 set NOCHK=0
 for I=1:1:8 set CHK(I)=""

 type ResultSet rs1=Db.select("CID","RET","TJD=:%SystemDate AND BRCD=:BRCD")
 while rs1.next() do {
	set CID=rs1.getCol("CID")
	if CID do {
		type ResultSet rs2=Db.select("CID,TYPE,BAL","DEP","CID=:CID")
		while rs2.next() do {
			set DEP(1)=rs2.getCol("CID")
			set DEP(50)=rs2.getCol("TYPE")
			set DEP(51)=rs2.getCol("BAL")
			}
		}
		quit
	}

 for I=1:1:8 if '(CHK(I).isNull()) set NOCHK=1
 if 'NOCHK set VD(2)=1

V4C	//
 
 set GETSKIPREC=1
 type ResultSet rs2=Db.select("UID","RET","TJD=:%SystemDate AND BRCD=:BRCD AND CID=:CID")
 while rs2.next() do {
	 set UID=rs2.getCol("UID")
 	 }
 
	quit

VP4	// Column post-processor - [SYSDEV,RET]CID

	type public String vc9,vc7
 type public Number CID,FEENSF,I,NUM
 type public String BAL,CHK(),DEP(),FEETYP

 set CID=vc9
 set DEP(51)=vc7

 if DEP(51).isNull() do V3C quit	
 //	26/01 jcl
 set (NUM,FEENSF)=0 
 set BAL=+DEP(51)
 for I=1:1:8 set CHK(I)=""

 type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
 if dep.getMode() set FEETYP="LDG" if dep.nsflim set FEETYP="LIM"
 do ^UTLADDR(,"AD",5,0,"ACN",CID)
	quit

VP5	// Column pre-processor - Variable: TOT

	type public String vc1
 type public Number CID,FEEAMT,TOT
 type public String FEEPGM,FEEPLN,FEETYP,PGM

 set FEEAMT=0
 type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
 if dep.getMode() set FEEPLN=dep.feepln
 if 'FEEPLN.length() set TOT=0 quit

 // Find correct posting program
 set FEEPGM=$$FEEPGM^UFID(FEEPLN,vc1)
 if FEEPGM.isNull() set TOT=0 quit
 do FEE("LIM")
 if 'FEEAMT do FEE("LDG")
 set TOT=$S(FEEAMT.get():FEEAMT,1:0)
 quit

FEE(FEETYP)

 set PGM="^"_FEEPGM_"(2,"""_FEETYP_""",NUM,1)"
 do @PGM
	quit

VP6	// Column post-processor - [SYSDEV,RET]TSEQ

	type public String vc2,vc5,vc4,vc3
 type public Number BR,BRCD,CID,CONT,NUM,SAVTSEQ,TSEQ
 type public String CHK(),SAVUID,UID,V

 set V=""
 set NUM=0

 set NUM=NUM+1,CONT=0
 set BR=UID(UID).get() if BR.isNull() set BR=0 

 // Changed BR to BRCD in the following line.  Rgw branch number in EXC "should" the same as the one in the RET file. //
 set BRCD=vc2
 set TSEQ=vc5
 set UID=vc4
 set CID=vc3
 
 type RecordEXC exc=Db.getRecord("EXC","TJD=:%SystemDate,BRCD=:BRCD,UID=:UID,TSEQ=:TSEQ",1)
 if exc.getMode() set CHK(NUM)=$J(exc.tso,6)_" "_(exc.tamt).roundDec(12,CID.get())
 if NUM<8 quit

 type ResultSet rs=Db.select("TSEQ","RET","TJD=:%SystemDate AND BRCD=:BRCD AND CID=:CID AND UID=:UID")
	while rs.next() do {
		set TSEQ=rs.getCol("TSEQ")
		}

 type ResultSet rs1=Db.select("UID","RET","TJD=:%SystemDate AND BRCD=:BRCD AND CID=:CID")
	 while rs1.next() do {
		set UID=rs1.getCol("UID")
		} 	

 set SAVTSEQ=TSEQ
 
 type ResultSet rs2=Db.select("TSEQ,UID","RET","TJD=:%SystemDate AND BRCD=:BRCD AND CID=:CID AND UID=:UID AND TSEQ=:TSEQ","TSEQ DESC AND UID DESC")
 set TSEQ=rs2.getCol("TSEQ")
 set UID=rs2.getCol("UID")
 set SAVUID=UID
	quit
