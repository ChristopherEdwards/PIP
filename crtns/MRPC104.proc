MRPC104(RET,VERSN,CLASSNUM,INTRFACE,DATA,DEL)

	/*
	   Procedure ID: 104
	   DESC: eFunds Integreat Interface
	   ORIG: Gregory Yurkovic

	   This RPC is a public RPC to send an eFunds Integreat message to the
	   eFunds server.  Please see the "eFunds Integreat Interface Technical
	   Specification."
	
	   This RPC will accept data that is specific to an eFunds Integreat
	   class and pass the data along to the eFunds server. eFunds will
	   process the data and return a reply message.  When the reply has been
	   received, the RPC will process the message and return a response
	   to the client.
	
	   Each eFunds class that is supported by this MRPC has its own
	   assigned Class Number.  That class number will be used to determine
	   which pre-processing section will be called prior to the wrapping
	   of the message.  Likewise, the class number will determine which
	   post-processing will be called after the reply message has been
	   received and unwrapped.  Finally, a class specific cleanup function
	   will be called (if necessary.)  This process allows the core
	   functions of wrapping, exchanging, and unwrapping of messages
	   to be standardized and used by every class.
	
	   If any customization is needed, copy MRPC104 to ZMRPC104.  Add 
	   custom code to ZMRPC104 and then compile it.  Then recompile
	   MRPC104.  ZMRPC104 will be called directly from MRPC104 if it 
	   exists.  There is no need to modify the entries in the M Remote 
	   Procedures Call Table (SCATBL5).
	
	   When adding a new class and assigning a new class number, remember
	   to create pre and post processing sections for that class, as well
	   as a cleanup section if necessary.  Follow the naming convention
	   of PREPROCx, PSTPROCx, and CLEANUPx where x is the newly assigned
	   class number.  The pre-processing section should include, among
	   other setup, the creation of extra tags in the PREDATA and POSTDATA
	   variables.
	
	   This RPC relies on information in the External Interface table
	   (UTBLEXTINT.)  By looking at the parameters for the interface
	   that is specified in the INTRFACE argument, the RPC determines how
	   to communicate, what information to send, and how to process the 
	   reply message.
	
	   The input string is in the format PROPERTY=VALUE,PROPERTY=VALUE where
	   PROPERTY is the eFunds property to be set.  The PROPERTY names
	   must correspond to the properties defined in the "Communications
	   Specifications for Integreat from eFunds Coporation" which eFunds
	   can provide.
	
	   Be careful when using the comma character in the Input field.  Since
	   it is used as the default delimiter, it should not be used in the
	   name-value pairs as actual data.  If the comma will be passed in as
	   part of the data, consider using an alternate delimiter for the input
	   string.  Also use caution with the | (pipe) character in the Input
	   data: eFunds does not allow this character to be passed into the
	   JavaBean.  Finally, make sure that quote characters, whether
	   single ' or double ", are always paired up.  Passing in a quote
	   character by itself should be avoided.

	   KEYWORDS: RPC, EFUNDS
	
	   ARGUMENTS:

		. RET      Return Value                      /TYP=T

		. VERSN    Version Number                    /TYP=N/REQ/MECH=VAL
			   current version=1

		. CLASSNUM Class Number                      /TYP=N/REQ
			   1 = IntegreatInquiry
			   2 = IntegreatSecretPassword
			   3 = IntegreatFunding

		. INTRFACE Interface Name                    /TYP=T/DFT="EFUNDS"

		. DATA     Input Data                       /TYP=T/REQ
			   name1=value1,name2=value2,...,nameN=valueN

		. DEL      Delimiter                         /TYP=T/DFT=","
			   Character used to separate name-value
			   pairs in DATA
	
	   RETURNS:
	  
		. $$       Response                          /TYP=T
	     
	   CALLS: ^%MTAPI,^%ZFUNC,^%ZT,^UTLMRPC
	
	   EXT ENTRY: ^MRPC104
		       SPODCB^MRPC104

	  --------------------------------------------------------------------

	    IntegreatInquiry EXAMPLE (using Required fields only):
	      S DATA="TERMS=T,PFNAME=Giancuca,PLNAME=Trojani,PSSN1=220,PSSN2=28,"
	      S DATA=DATA_"PSSN3=3733,PDOBMM=04,PDOBDD=30,PDOBCCYY=1956,"
	      S DATA=DATA_"PIDTYPE=0,PIDNUM=T300000000008,PIDSTATE=MD,"
	      S DATA=DATA_"PIDEXPIREMM=04,PIDEXPIREDD=30,PIDEXPIRECCYY=2003,"
	      S DATA=DATA_"PEMPNAME=ConED,POCCUPATION=Engineer,"
	      S DATA=DATA_"PADDRESS=111494 BCS LS MC,PCITY=CITY,PSTATE=MN,"
	      S DATA=DATA_"PPCODE=44444,PYRADDR=11,PMOADDR=1,PHPHONEAC=651,"
	      S DATA=DATA_"PHPHONEPRE=456,PHPHONE=7894"
	      S ER=$$^MRPC104(.RET,1,1,"EFUNDS",DATA)
	
	  ------------------  Revision History  -------------------------

	  01/30/06 Radhika - CR 17423
		 .Eliminated PSL deprecated features and warnings.
		 .Removed revision history prior to 2004.

	  ---------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM,%SVCNTXT()
	
	// Check for Custom Routine and call it if it exists.
	#if $$VALID^%ZRTNS("ZMRPC104")
	do START^ZMRPC104
	#else
	do START
	#endif

	// If an error occurred, save it in the %SVCNTXT variable
	if ER.get() do {  quit $$ERRMSG^PBSUTL(RM)
		set RM=RM.get()
		set %SVCNTXT("ER")=ER		// Save ER error code
		set %SVCNTXT=RM			// Save Error Message
		do LOG(DATA,RM)			// Log Data and Error Message
		}
	do LOG(DATA,RET)			// Log Both Messages
	set RET=$$V2LV^MSG(RET)
	quit ""
	

START
	type public Number CLASSNUM,ER,%SVCNTXT(),VERSN
	type public String DATA,DEL,RM
	type String  cltype,id,mtname,REC,RET,REQ,REPLY,timeout,X
	
	set ER=0
	set RM=""
	set RET=""

	// Version number of client message is not compatible with server
	if VERSN.get()'=1 do Runtime.setErrMSG("EFUNDS",2951) quit

	// Data Required
	if DATA.get().isNull() do Runtime.setErrMSG("EFUNDS",741) quit
	// Default Delimiter is comma: ","
	if DEL.get().isNull() set DEL=$C(44)

	// Main Initialization Section
	do INIT quit:ER

	// Determine which pre-processing section to run.
	if CLASSNUM=1 do PREPROC1 quit:ER	// IntegreatInquiry
	if CLASSNUM=2 do PREPROC2 quit:ER	// IntegreatSecretPassword
	if CLASSNUM=3 do PREPROC3 quit:ER	// IntegreatFunding
	set REQ=$$GETMSG(DATA)

	// Check if TRESTART has occurred and, if so, use %SVCNTXT saved data.
	// If in TRESTART and a Reply was previously received or an error 
	// occurred, then we do not want to resend the message.
	if $TRESTART do {  if ('REPLY.isNull())!(ER)
		set ER=+%SVCNTXT("ER").get()		// Restore error code
		if ER set RM=%SVCNTXT.get() quit	// Restore error message or 
		set REPLY=%SVCNTXT.get()		// original Reply message
		}
	else  do {  quit:ER
		set X=$$CLCNCT^%MTAPI(.id,cltype,mtname)
		// Connection to MQSeries failed
		if 'X.isNull() do Runtime.setErrMSG("EFUNDS",4329) do COMERROR(4329) quit

		set X=$$EXCHMSG^%MTAPI(.REQ,.REPLY,cltype,.id,timeout)
		// Save Reply Message in case of TRESTART
		set %SVCNTXT=REPLY
		// Message exchange with MQSeries failed
		if 'X.isNull() do Runtime.setErrMSG("EFUNDS",4330) do COMERROR(4330)

		set X=$$CLDSCNCT^%MTAPI(.id)
		}

	set REC=$$STRIPXML(REPLY)

	// Determine which post-processing & cleanup sections to run
	if CLASSNUM=1 do PSTPROC1,CLEANUP1 quit
	if CLASSNUM=2 do PSTPROC2,CLEANUP2 quit
	if CLASSNUM=3 do PSTPROC3,CLEANUP3 quit
	quit


INIT 	// Initialize variables and retrieve interface data.

	type public String INTRFACE,POSTDATA,PREDATA,REC,REPLY,REQ
	type public Number CLASSNUM,CLASS
	type String cltype,mtname
	type Number timeout
	
	set (POSTDATA,PREDATA,REC,REPLY,REQ)=""
	
	if INTRFACE.get().isNull() set INTRFACE="EFUNDS"       // Default Interface
	
	// Set %MTAPI variables for accessing MQSeries
	type RecordUTBLEXTINT extint=Db.getRecord("UTBLEXTINT","INTRFACE=:INTRFACE")
	set cltype=extint.misc1
	if cltype.isNull() do Runtime.setErrMSG("UTBLEXTINT",2510) quit

	// %MTAPI Identification Variables
	set mtname="MQ"
	set timeout=40
	
	set CLASSNUM=+CLASSNUM.get()
	if CLASSNUM=1 set CLASS="com.efunds.integreat.IntegreatInquiry" quit 
	if CLASSNUM=2 set CLASS="com.efunds.integreat.IntegreatSecretPassword" quit
	if CLASSNUM=3 set CLASS="com.efunds.integreat.IntegreatFunding" quit 
	// Class Error
	do Runtime.setErrMSG("UTBLEXTINT",552)
	quit 
	

GETMSG(String DATA) // Generates XML Message including headers

	/*
	  This function will construct the XML message that will be sent
	  through the queue.  The message will include the following:
	    o Customer Number
	    o Subscriber Code
	    o Personal Signer Message Components.  This is the actual
	      signer data sent to eFunds, such as First Name, Last Name, etc.
	  That message will be wrapped in MessageExecuteRequest and class tags
	  so that it will be identifiable by the daemon.
	*/

	type public String POSTDATA,PREDATA
	type public Number CLASS
	type String msg
	
	set msg="<?xml version='1.0' encoding='us-ascii'?>"
	set msg=msg_"<MessageExecuteRequest Type=""EFUNDS"">"
	set msg=msg_"<class name="_$C(34)_CLASS_$C(34)_">"
	set msg=msg_PREDATA_$$BUILDXML(DATA)_POSTDATA
	set msg=msg_"</class></MessageExecuteRequest>"
	quit msg
	

BUILDXML(String DATA) // Builds Personal Signer Message Component in XML format.
	
	type public String DEL
	type String return,tok,v,z
	type Number i,n
	
	if DATA.isNull() quit ""                     // No data contained
	
	set n=DATA.length(DEL) if n<1 quit ""      // Find number of elements
	set return=""                          // contained in DATA.

	if DATA["'" set DATA=$$TOKEN^%ZS(DATA,.tok,"'")
	if DATA["""" set DATA=$$TOKEN^%ZS(DATA,.tok)
	
	F i=1:1:n do {
		set z=DATA.piece(DEL,i),v=z.piece("=",2,999),z=z.piece("=",1) if z.isNull() quit
		if v.extract()="(" set v=v.extract(2,v.length()-1)
		if v[$C(0) set v=$$UNTOK^%ZS(v,.tok) if "'"""[v.extract() set v=$$QSUB^%ZS(v,v.extract())
		set return=return_$$WRAPXML("set"_z,v)
		}
	
	quit return
	

WRAPXML(String fld,String val,Number flag) // Construct XML item
	
	/*
	  ARGUMENTS
	    fld       tag name                    /TYP=T/REQ
	    val       content                     /TYP=T/NOREQ
	    flag      no content flag		  /TYP=N/NOREQ
	*/

	type String return
	if fld.get().isNull() quit ""		// if no tag name, then quit
	set flag=+flag.get()			// Is no content flag set?
	set val=val.get()
	if 'flag,val.isNull() quit ""		// quit if required value is ""

	set return="<procedure><name>"_fld_"</name>"
	set return=return_"<parameter>"_val_"</parameter></procedure>"
	quit return
	

STRIPXML(String MSG) //  Strip off XML Headers from Reply Message

	/*
	  This function will remove the XML headers that are wrapped around
	  the response message.  The XML headers will not be returned to the
	  client.
	*/

	type Number end,start

	// Quit if no <RESPONSE>
	set start=MSG.find("<RESPONSE>") if start=0 quit ""      

	// Find end of reply data
	set end=MSG.find("</RESPONSE>")-12 if end<1 quit ""      

	// Quit with reply msg
	quit MSG.extract(start,end)
	

PREPROC1 // Pre-processor for IntegreatInquiry Messages
	
	type public Number RSPMTHD
	type public String DATA,INTRFACE,POSTDATA,RSPRTN
	
	// Required Identification inquiry message components
	type RecordUTBLEXTINT sqldata=Db.getRecord("UTBLEXTINT","INTRFACE=:INTRFACE")
	set RSPMTHD=sqldata.rspmthd	      // Response Code Method
	set RSPRTN=sqldata.rsprtn             // Response Routine Name
	
	set DATA=$$UPPER^%ZFUNC(DATA)          // Uppercase entire stream
	
	// Add message processing methods to end of message by populating
	// POSTDATA with XML tags.
	set POSTDATA=$$WRAPXML("doRequest",,1)_$$WRAPXML("getResponseString",,1)
	quit 
	

PSTPROC1 // Post-processor for IntegreatInquiry Messages
	
	type public Number RSPMTHD
	type public String REC,RSPRTN
	type String RET,RET,PGM
	
	// Reply message contains no data
	if REC.isNull() do Runtime.setErrMSG("EFUNDS",4331) quit
	if RSPMTHD=0 set RET=REC quit 
	if RSPMTHD=1 set RET=$$STNDRSP1(REC) quit 
	
	// Custom Response with RSPMTHD=2
	if RSPRTN.isNull() do Runtime.setErrMSG("EFUNDS",5425) quit         // No Routine
	set PGM="S RET=$$^"_RSPRTN_"(REC)"
	#ACCEPT DATE=12/12/03;PGM=John Carroll
	xecute PGM
	quit 
	

CLEANUP1 // Cleanup section for IntegreatInquiry Messages

	quit 
	

STNDRSP1(String REC) // Process Standard SCA Response for eFunds Suite Only

	type String j,p
	set (j,p)=""
	if REC["PAcctAccept" set p=REC.extract(REC.find("PAcctAccept")-11,99999).piece("&",1)
	if REC["JAcctAccept" set j=REC.extract(REC.find("JAcctAccept")-11,99999).piece("&",1)
	if 'j.isNull() quit p_"&"_j
	quit p


PREPROC2 // Pre-processor for IntegreatSecretPassword Messages
	
	type public String DATA,POSTDATA
	
	set DATA=$$UPPER^%ZFUNC(DATA)          // Uppercase entire stream
	
	// Add message processing methods to end of message by populating
	// POSTDATA with XML tags.
	set POSTDATA=$$WRAPXML("doRequest",,1)_$$WRAPXML("getResponseString",,1)
	quit


PSTPROC2 // Post-processor for IntegreatSecretPassword Messages

	type public String REC,RET
	
	// Reply message contains no data
	if REC.isNull() do Runtime.setErrMSG("EFUNDS",4331) quit
	set RET=REC quit 


CLEANUP2 // Cleanup section for IntegreatSecretPassword Messages

	quit


PREPROC3 // Pre-processor for IntegreatFunding Messages

	type public Number RSPMTHD
	type public String DATA,DEL,EXT,INTRFACE,POSTDATA,RSPRTN
	type public String AMT,CID

	set (AMT,CID)=""
	
	type RecordUTBLEXTINT sqldt=Db.getRecord("UTBLEXTINT","INTRFACE=:INTRFACE")
	set RSPMTHD=sqldt.rspmthd	      // Response Code Method
	set RSPRTN=sqldt.rsprtn             // Response Routine Name

	set DATA=$$UPPER^%ZFUNC(DATA)          // Uppercase entire stream

	set EXT=DATA.piece("FUNDAMT=",2),AMT=EXT.piece(DEL,1)
	if AMT.extract()="'" set AMT=AMT.piece(2,AMT.length()-1)
	if AMT.isNull() do Runtime.setErrMSG("EFUNDS",283) quit

	set EXT=DATA.piece("NEWACCTNO=",2),CID=EXT.piece(DEL,1)
	if CID.extract()="'" set CID=CID.extract(2,CID.length()-1)
	if CID.isNull() do Runtime.setErrMSG("EFUNDS",7774) quit

	// Add message processing methods to end of message by populating
	// POSTDATA with XML tags.
	set POSTDATA=$$WRAPXML("doRequest",,1)_$$WRAPXML("getResponseString",,1)
	quit 

	
PSTPROC3 // Post-processor for IntegreatFunding Messages
	
	type public String REC,RSPRTN
	type public Number RSPMTHD
	type String PGM,RET
	
	// Reply message contains no data
	if REC.isNull() do Runtime.setErrMSG("EFUNDS",4331) quit
	if RSPMTHD=0 set RET=REC quit 
	if RSPMTHD=1 set RET=$$STNDRSP3(REC) quit 
	
	// Custom Response with RSPMTHD=2
	if RSPRTN.isNull() do Runtime.setErrMSG("EFUNDS",5425) quit         // No Routine
	set PGM="set RET=$$^"_RSPRTN_"(REC)"
	#ACCEPT DATE=12/12/03;PGM=John Carroll
	xecute PGM
	quit 


CLEANUP3 // Cleanup section for IntegreatFunding Messages
	
	type public Number CID,AMT
	
	kill CID,AMT
	quit


STNDRSP3(String REC)  //

	type public Number AMT,CID
	type Date DT
	type String EXT,ID,STAT
	
	// Set Data, Item ID, and Status for EFUNDS table.
	// CID and AMT were previously extracted from Input DATA string.
	set DT=%SystemDate 
	set EXT=REC.piece("ITEMID=",2),ID=EXT.piece("&",1)
	set STAT="A"

	type RecordEFUNDS efund=Class.new("RecordEFUNDS")
	set efund.dt=DT
	set efund.id=ID
	set efund.cid=CID
	set efund.amt=AMT
	set efund.status=STAT	
	do efund.save()
		
	quit REC


LOG(String REQ,String REP) 

	/*
	  Log Messages to EFNDSMSG table

	  ARGUMENTS
	    REQ       Request Message             /TYP=T/NOREQ
	    REP       Reply Message               /TYP=T/NOREQ

	  This function will log both the request and reply messages to the 
	  EFNDSMSG table. This log is used for audit purposes. The messages 
	  will be logged according to the following values:
	    + Date
	    + eFunds Class Number
	    + Message Type
	    + Sequence Number
          where Message Type is 0 for request messages and 1 for reply messages
	  and the sequence number is a unique sequential key. 
	*/
	
	type public Number CLASSNUM
	type public String RM,MSG
	type Date LOGDATE,LOGTIME
	type Number MSGTYPE,SRVID,SEQ
	type String SAVRM
	
	if CLASSNUM.isNull() quit			// Need to Protect Primary Key
	if REQ.isNull() quit

	set SAVRM=RM.get()

	// Setup Column Values
	set LOGDATE=%CurrentDate			// Date Stamp
	set MSGTYPE=0					// RESPONSE indicator
	set SEQ=$$GET^NXTSEQ("EFNDSMSG",12)		// Unique Sequence Num
	set LOGTIME=%CurrentTime			// Time Stamp
	set SRVID=%ProcessID
 	//Set message type to indicate REPLY message

	// Insert REQUEST message into table
	type RecordEFNDSMSG efnmsg=Class.new("RecordEFNDSMSG")
	set efnmsg.logdate=LOGDATE
	set efnmsg.class=CLASSNUM
	set efnmsg.msgtype=MSGTYPE
	set efnmsg.seq=SEQ
	set efnmsg.logtime=LOGTIME
	set efnmsg.srvid=SRVID
	set efnmsg.msg=REQ
	do efnmsg.save()
	
	if REP.isNull() set RM=SAVRM quit
	
	set MSGTYPE=1				// Server ID
	set efnmsg.logdate=LOGDATE
	set efnmsg.class=CLASSNUM
	set efnmsg.msgtype=MSGTYPE
	set efnmsg.seq=SEQ
	set efnmsg.logtime=LOGTIME
	set efnmsg.srvid=SRVID
	set efnmsg.msg=REQ
	do efnmsg.save()
	quit

COMERROR(String xmsg) // Communications Error Handling
	
	type public String ET,RM,X
	type public Boolean ER
	type String SAVRM
	
	set ER=1
	set SAVRM=RM.get()                       // Protect RM message
	if X="CS_MTMLOG" set X="CS_TIMEOUTNC"  // Connect Error
	else  set X="CS_MTERROR"               // Mesg. Exchange Error
	do EVNTLOG^%ZFUNC(xmsg,"STBLMSG")      // Call Alerts
	
	if ET.get().isNull() set ET=X
	do ^UTLERR                             // Log Error in ^SCAER
	kill ET set RM=SAVRM                   // Restore RM
	quit 
	

ZTEND // Error trap

	type public String ET
	type public Number %ZTHALT
	type public String %ZTSEQ
	
	set %ZTHALT=0
	do ZE^UTLERR
	if %ZTSEQ.exists() set %ZTSEQ="Error Log Sequence #"_%ZTSEQ
	if ET.get().isNull() set ET="M error not processed"
	//D EXC
	quit 
	

SPODBC(Number VERSN,Number CLASS,String INTRFACE,String DATA,String DEL) // Stored Procedure/ODBC entry point
	
	/*
	  This function is intended to provide a capability to invoke a
	  true MRPC from the EXECUTE procedure facility within the PROFILE
	  ODBC driver.  This is needed in order to get the normal response
	  argument that is part of the MRPC structure returned to the calling
	  ODBC client.
	*/
	
	type public String RM
	type public Boolean ER
	type String RET
			
	set RET=""

	// Check for Custom Routine and call it if it exists.
	#if $$VALID^%ZRTNS("ZMRPC104")
	do START^ZMRPC104
	#else
	do START
	#endif

	if 'RET.get().isNull() quit RET
	set ER=1 set RM=RM.get()
	quit ""


TEST()	// Simple IntegreatInquiry Test Message
	/* This function allows a simple test of the eFunds Integreat Interface
	   by sending a test IntegreatInquiry message.  
	*/
	
	type public Boolean ER
	type String DATA,RET
	
	set DATA="CSCUSNUM=10000000,QFSUBCODE=TEST,TERMS=T,PFNAME=Giancuca,"
	set DATA=DATA_"PLNAME=Trojani,PSSN1=220,PSSN2=28,PSSN3=3733,PDOBMM=04,"
	set DATA=DATA_"PDOBDD=30,PDOBCCYY=1956,PIDTYPE=0,PIDNUM=T300000000008,"
	set DATA=DATA_"PIDSTATE=MD,PIDEXPIREMM=04,PIDEXPIREDD=30,"
	set DATA=DATA_"PIDEXPIRECCYY=2003,PEMPNAME=ConED,POCCUPATION=Engineer,"
	set DATA=DATA_"PADDRESS=111494 BCS LSMC,PCITY=CITY,PSTATE=MN,"
	set DATA=DATA_"PPCODE=44444,PYRADDR=11,PMOADDR=1,PHPHONEAC=651,"
	set DATA=DATA_"PHPHONEPRE=456,PHPHONE=7894"
	set ER=$$^MRPC104(.RET,1,1,"EFUNDS",DATA)
	
	if ('RET.isNull()) quit RET
	quit ER

vSIG()	quit "60295^29442^Radhika Panchanathan^18593"	// Signature - LTD^TIME^USER^SIZE
