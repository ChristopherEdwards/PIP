COLFILE(RecordCOL col, String vpar, Boolean vparNorm) // COL - Collateral File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (105)            06/20/2006
	// Trigger Definition (9)                      09/21/2006
	// Journal File Definition (1)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = col.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(col,.vxins(),10,"|")
	if %O = 1 quit:'col.isChanged()  do AUDIT^UCUTILN(col,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String COLL = col.coll

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("COLL").exists() do vkchged quit                // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("COL",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("COL","COLL = :col.coll")          // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String COLL

	type RecordCOL col = Db.getRecord("COL","COLL=:COLL")
	if (%ProcessMode = 2) do {
		do col.setMode(2)

		do COLFILE(col,vpar)
	}
	else  do VINDEX(col)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCOL col

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("COL","COLL = :col.coll") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(col,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^COL(vobj(col,-3),n)=vobj(col,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(col,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(col,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^COL(vobj(col,-3),n)=vobj(col,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.col)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.col) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordCOL col
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^COL(vobj(col,-3),n)) quit:n.isNull()  if 'vobj(col,n).data(),^COL(vobj(col,-3),n).data()#2 set vobj(col,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCOL col

	if 'vkeychg.get(),col.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.col)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.col)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^COL(vobj(col,-3))                                // Delete Record
	quit


vinit // Initialize default values

	type public RecordCOL col

	// Type local variables for access keys for defaults
	type public String COLL

	if col.aof.isNull() set col.aof = 0                    // aof
	if col.avrsl.isNull() set col.avrsl = 0                // avrsl
	if col.caof.isNull() set col.caof = 0                  // caof
	if col.clbl.isNull() set col.clbl = 0                  // clbl
	if col.contract.isNull() set col.contract = 0          // contract
	if col.ctrepopt.isNull() set col.ctrepopt = 0          // ctrepopt
	if col.cvbl.isNull() set col.cvbl = 0                  // cvbl
	if col.omdt.isNull() set col.omdt = 0                  // omdt
	if col.orgnosh.isNull() set col.orgnosh = 0            // orgnosh
	if col.ownocc.isNull() set col.ownocc = 0              // ownocc
	if col.perage.isNull() set col.perage = 0              // perage
	if col.pof.isNull() set col.pof = 0                    // pof
	if col.secr.isNull() set col.secr = 0                  // secr
	if col.title.isNull() set col.title = 0                // title
	quit


vreqn // Validate required data items

	type public RecordCOL col

	if col.aof.isNull() do vreqerr("AOF") quit
	if col.avrsl.isNull() do vreqerr("AVRSL") quit
	if col.caof.isNull() do vreqerr("CAOF") quit
	if col.clbl.isNull() do vreqerr("CLBL") quit
	if col.contract.isNull() do vreqerr("CONTRACT") quit
	if col.crcd.isNull() do vreqerr("CRCD") quit
	if col.ctrepopt.isNull() do vreqerr("CTREPOPT") quit
	if col.cvbl.isNull() do vreqerr("CVBL") quit
	if col.omdt.isNull() do vreqerr("OMDT") quit
	if col.orgnosh.isNull() do vreqerr("ORGNOSH") quit
	if col.ownocc.isNull() do vreqerr("OWNOCC") quit
	if col.perage.isNull() do vreqerr("PERAGE") quit
	if col.pof.isNull() do vreqerr("POF") quit
	if col.scolcd.isNull() do vreqerr("SCOLCD") quit
	if col.secr.isNull() do vreqerr("SECR") quit
	if col.title.isNull() do vreqerr("TITLE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCOL col

	if col.coll.isNull() do vreqerr("COLL") quit

	if 'vobj(col,-100,1,"").order().isNull() do {
		if vx("SECR").exists(),col.secr.isNull() do vreqerr("SECR") quit
	}
	if 'vobj(col,-100,2,"").order().isNull() do {
		if vx("TITLE").exists(),col.title.isNull() do vreqerr("TITLE") quit
		if vx("SCOLCD").exists(),col.scolcd.isNull() do vreqerr("SCOLCD") quit
		if vx("AVRSL").exists(),col.avrsl.isNull() do vreqerr("AVRSL") quit
		if vx("CRCD").exists(),col.crcd.isNull() do vreqerr("CRCD") quit
		if vx("OMDT").exists(),col.omdt.isNull() do vreqerr("OMDT") quit
		if vx("ORGNOSH").exists(),col.orgnosh.isNull() do vreqerr("ORGNOSH") quit
	}
	if 'vobj(col,-100,5,"").order().isNull() do {
		if vx("AOF").exists(),col.aof.isNull() do vreqerr("AOF") quit
		if vx("POF").exists(),col.pof.isNull() do vreqerr("POF") quit
		if vx("CAOF").exists(),col.caof.isNull() do vreqerr("CAOF") quit
		if vx("CLBL").exists(),col.clbl.isNull() do vreqerr("CLBL") quit
		if vx("CVBL").exists(),col.cvbl.isNull() do vreqerr("CVBL") quit
		if vx("PERAGE").exists(),col.perage.isNull() do vreqerr("PERAGE") quit
	}
	if 'vobj(col,-100,7,"").order().isNull() do {
		if vx("CONTRACT").exists(),col.contract.isNull() do vreqerr("CONTRACT") quit
	}
	if 'vobj(col,-100,8,"").order().isNull() do {
		if vx("OWNOCC").exists(),col.ownocc.isNull() do vreqerr("OWNOCC") quit
		if vx("CTREPOPT").exists(),col.ctrepopt.isNull() do vreqerr("CTREPOPT") quit
	}
		if vx("AOF").exists(),col.aof.isNull() do vreqerr("AOF") quit
		if vx("AVRSL").exists(),col.avrsl.isNull() do vreqerr("AVRSL") quit
		if vx("CAOF").exists(),col.caof.isNull() do vreqerr("CAOF") quit
		if vx("CLBL").exists(),col.clbl.isNull() do vreqerr("CLBL") quit
		if vx("CONTRACT").exists(),col.contract.isNull() do vreqerr("CONTRACT") quit
		if vx("CRCD").exists(),col.crcd.isNull() do vreqerr("CRCD") quit
		if vx("CTREPOPT").exists(),col.ctrepopt.isNull() do vreqerr("CTREPOPT") quit
		if vx("CVBL").exists(),col.cvbl.isNull() do vreqerr("CVBL") quit
		if vx("OMDT").exists(),col.omdt.isNull() do vreqerr("OMDT") quit
		if vx("ORGNOSH").exists(),col.orgnosh.isNull() do vreqerr("ORGNOSH") quit
		if vx("OWNOCC").exists(),col.ownocc.isNull() do vreqerr("OWNOCC") quit
		if vx("PERAGE").exists(),col.perage.isNull() do vreqerr("PERAGE") quit
		if vx("POF").exists(),col.pof.isNull() do vreqerr("POF") quit
		if vx("SCOLCD").exists(),col.scolcd.isNull() do vreqerr("SCOLCD") quit
		if vx("SECR").exists(),col.secr.isNull() do vreqerr("SECR") quit
		if vx("TITLE").exists(),col.title.isNull() do vreqerr("TITLE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("COL","MSG",1767,"COL."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("COLACN").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("COLVAL").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ID").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MZIP").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PLDGCB").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCOL col
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() do AUDIT^UCUTILN(col,.vx(),10,"|") quit
	if vx("REVFRE").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(col,.vx(),10,"|")
	quit


vai1 // Trigger AFTER_INSERT - After insert

	type public RecordCOL col

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Added code to validate ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(col.cntry, col.state, col.mzip)
	if ER.get() do Runtime.setErrMSG("COL", 3333, RM) quit:ER

	// Add record to CUSIP file
	if col.cusip'="" do {
		if %ProcessMode=2 quit 
		if Db.isDefined("UTBLSVAL","col.cusip") quit 
		new XCUSIP,XCNAM,XPVAL,XDATE,XUID
		set XCUSIP=col.cusip
		set XCNAM=col.cnam
		set XPVAL=col.pval
		set XDATE=%SystemDate
		set XUID=%UserID
		do Db.insert("UTBLSVAL","CUSIP,DES,VAL,EFD,SRC",":XCUSIP,:XCNAM,:XPVAL,:XDATE,:XUID")
		}
	
	quit
	

vau1 // Trigger AFTER_UPDATE - After Update ID

	type public RecordCOL col
	//---- Revision History ------------------------------------------------
	//
	// 10/30/00 - LAMY - 42537
	//            Modified to define the CID which corrected an Undefined
	//	      error.  Also added code to get all records involved.
	//----------------------------------------------------------------------
	//

	new COLCD,COLTYP,GRP,CID,VID

	set COLCD=col.colcd
	set VID=col.id

	if COLCD="" quit

	new rs
	type ResultSet rs=Db.select("CID","LNCOL","COLL=:COLL")

	if rs.isEmpty() quit

	while rs.next() do {
		set CID=rs.getCol(1)

		set GRP=Db.getOneRow("GRP","ACN","CID")

		for  set COLTYP=Db.getOneRow("TYPE","UTBLCOLCD","GRP,VID") do {
			if COLTYP'=30 quit
			do Db.update("LNCOL","ID=:VID","COLL=:COLL AND CID=:CID")
			}

		quit
		}

	quit
	

vau2 // Trigger AU_COLACN - After Update Pledged Account Number

	type public RecordCOL col
	
	// Can not change COLACN to null if there are amounts securing the loan.
	if 'col.colacn,(col.fpldg!col.pctpldg) do { quit:ER 
		new XCOLTYP
	
		new rs 
		type ResultSet rs=Db.select("COLTYP","LNCOL","COLL=:COLL") 
		if rs.isEmpty() quit
		set XCOLTYP=rs.next()
		set XCOLTYP=rs.getCol(1)
	
		if XCOLTYP=70 do Runtime.setErrMSG("COL",3537) quit:ER 
		}
	
	quit
	

vau3 // Trigger AU_COLVAL - After Update Collteral Value Trigger 

	type public RecordCOL col
	/*
	-----------Revision History-------------------------------------------

	11/11/05 - ARPAVC - 18183
		   Changed reference from LNCOLC to LNCOL
		   
	06/06/01 - LAMY - 45567
		   Added set x-rs.next() after if rs.isEmpty()

	05/08/01 - Lamy - 44146-01
		   Added if rs.isEmpty() quit after DB.select

	03/14/01 - LAMY - 44146
		   Added an equal sign "=" to "CID=:XCOLACN" in Db.Update in
		   a couple of places.

	12/19/00 - RAJARAMD - 42288
		   Created this trigger. Added code to this trigger to check ifthe
		   collateral record being updated is for a loan, this new trigger
		   will recalculate Loan's Collateral Credit limit if the loan's
		   Adjust Collateral Credit Limit flag is enabled. It will also
		   update a loan's Withdrawl Limit if the loan's Collateral Credit
		   Limit processing flag is enabled. The Withdrawl Limit will be
		   changed to the lesser of the loan's Credit Limit and the loan's
		   Collateral Credit Limit.            
	
	*/
	
	new rs,xcls,XCOLACN,xadjcol,xcollimpr,XCOLLIM,xcrlmt,XWDLMT,totamt
	set XCOLACN=col.colacn
	I XCOLACN="" do { 
		new XCOLL,rs
		set XCOLL=col.coll
		type ResultSet rs=Db.select("CID","LNCOL","COLL=:XCOLL")
		if rs.isEmpty() quit
		set x=rs.next()
		set XCOLACN=rs.getCol(1)
		}
	I XCOLACN="" quit
	type ResultSet rs=Db.select("CLS","ACN","CID=:XCOLACN")
	if rs.isEmpty() quit
	set x=rs.next()
	set xcls=rs.getCol(1)
	I xcls="L" do { quit:ER
		new rs
		type ResultSet rs=Db.select("ADJCOL,COLLIMPR,CRLMT","LN","CID=:XCOLACN")
		if rs.isEmpty() quit
		set x=rs.next()
		set xadjcol=rs.getCol(1)
		set xcollimpr=rs.getCol(2)
		set xcrlmt=rs.getCol(3)
		if xadjcol do { 
			new rs,xamt,XDATA
			set totamt=0
			type ResultSet rs=Db.select("PLDGAMT","LNCOL","CID=:XCOLACN")			
			if rs.isEmpty() quit
			while rs.next() do { quit:ER
				set xamt=rs.getCol(1)
				set totamt=totamt+xamt
				}
			set XDATA=totamt
			do Db.update("LN","COLLIM=:XDATA","CID=:XCOLACN") quit:ER
			}
		set XCOLLIM=$g(totamt)
		if xcollimpr do { quit:ER
			if (XCOLLIM<xcrlmt) set XWDLMT=XCOLLIM
			else  set XWDLMT=xcrtmt
			do Db.update("LN","WDLMT=:XWDLMT","CID=:XCOLACN")
			}
		}
	quit

vau4 // Trigger AU_MZIP - After Update of ZIP Code

	type public RecordCOL col

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	do ZIP^PROCZIP(col.cntry, col.state, col.mzip)
	if ER.get() do Runtime.setErrMSG("COL", 3333, RM)

	quit

vau5 // Trigger AU_PLDGCB - After Update Pledged Calculation

	type public RecordCOL col
	/*
	----------------- Revision History ------------------------
	07/19/05 - RussellDS - CR16614
		   Remove reference to vpar("SYSTEM".
		   
		   Cleaned up PSL
	*/
	
	type Number XCID, XPLDGCB, XSEQ
	type String XCOMP
	
	set XPLDGCB = col.pldgcb
	set XCOMP = $S(XPLDGCB=2:"%PAVL", XPLDGCB=1:"%PCOL", 1:"%BAL")

	type ResultSet rs = Db.select("PHLDSEQ,PLDGACN","LNCOL","COLL=:COLL AND PCTPLDG IS NOT NULL AND PHLDSEQ IS NOT NULL")
	while rs.next() do { 
		
		set XSEQ=rs.getCol("PHLDSEQ")
		set XCID=rs.getCol("PLDGACN")
		
		type RecordPHLD phld = Db.getRecord("PHLD", "CID=:XCID,SEQ=:XSEQ", 1)
		
		if (phld.getMode() > 0) do {
		
			set phld.comp = XCOMP
		
			do phld.save("FRMFILER")
		}
	}
	
	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert

	type public RecordCOL col
	/*
	---------- Revision History ------------------------------------------
	
	02/22/99 - CARROLLJ - 31925
		   Change the call to UFRE to use the correct syntax of $$NJD^UFRE.
		   Also passed in the collateral review frequency instead of the loan
		   frequency.
	
	02/05/99 - JERUCHIMC - 31670
		   Make sure record that has a collateral review frequency
		   gets next review date.
	-----------------------------------------------------------------------
	*/

	/*	
	Make sure record that has a collateral review frequency gets
	next review date.
	*/
	if col.revfre'="" do {
		set CFRE=col.revfre
		if col.colrvnd quit 
		set NJD=$$NJD^UFRE(%SystemDate,CFRE) quit:ER
		set col.colrvnd=NJD
		}
	
	set col.ocolval=col.colval
	new LEN
	set LEN=$L(col.cusip)
	if LEN'=0,(LEN<8!(LEN>9)) do Runtime.setErrMSG("COL",691) quit:ER 
	if col.crcd="" set col.crcd=%SystemCurrency
	
	if col.colacn,col.acty="" do { quit:ER 
		new XACTY,XCOLACN
		set XCOLACN=col.colacn
		set XACTY=Db.getOneRow("TYPE","ACN","XCOLACN") quit:ER 
		set col.acty=XACTY
		}
	quit

vbu1 // Trigger BU_CUSIP - Before Update of Cusip

	type public RecordCOL col
	do col.setAuditFlag(1)
	new LEN
	set LEN=$L(col.cusip)
	if LEN'=0,(LEN<8!(LEN>9)) do Runtime.setErrMSG("COL",691) quit:ER 
	quit
	

vbu2 // Trigger BU_REVFRE - Before Update Review Frequency

	type public RecordCOL col
	do col.setAuditFlag(1)
	/*
	---------- Revision History ------------------------------------------	
	09/09/99 - CARROLLJ - 33890
		   Convert to PSL.

	JERUCHIMC - 31670
	Make sure update on collateral review frequency updates
	next review date.
	----------------------------------------------------------------------
	*/

	/*
	Make sure update on collateral review frequency updates
	next review date.
	*/

	if col.revfre="" quit
	set CFRE=col.revfre
	set JD=%SystemDate

	/*
	If there is a last review date, use that to get next date.
	Keep calculating until next review date is in the future.
	*/
	if col.colrvld'="" set JD=col.colrvld
	
	set NJD=$$NJD^UFRE(JD,CFRE) quit:ER
	while col.colrvnd<%SystemDate do { quit:ER
		set JD=NJD,NJD=$$NJD^UFRE(JD,CFRE) quit:ER
		set col.colrvnd=NJD
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCOL col

	if (%O = 2) do vload

	if vobj(col,1).exists() do {

		if col.centr.length()>7 set vRM = $$^MSG(1076,7) do vdderr("CENTR", vRM) quit
		if col.cntcd.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CNTCD", vRM) quit
		set X = col.cntyp if 'X.isNull(),'Db.isDefined("UTBLCNTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CNTYP", vRM) quit
		set X = col.colcd if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("COLCD", vRM) quit
		set X = col.colseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COLSEQ", vRM) quit
		set X = col.ctcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("CTCD", vRM) quit
		set X = col.fccls if 'X.isNull(),'Db.isDefined("STBLFCCLS","X") set vRM = $$^MSG(1485,X) do vdderr("FCCLS", vRM) quit
		if col.fcpnam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FCPNAM", vRM) quit
		set X = col.insca if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.INSCA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if col.lot.length()>10 set vRM = $$^MSG(1076,10) do vdderr("LOT", vRM) quit
		set X = col.mloff if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MLOFF", vRM) quit
		set X = col.nunit if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NUNIT", vRM) quit
		set X = col.prloc if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PRLOC", vRM) quit
		if '("01"[col.SECR) set vRM=$$^MSG(742,"L") do vdderr("SECR", vRM) quit
		set X = col.stcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("STCD", vRM) quit
	}

	if vobj(col,2).exists() do {

		set X = col.aba if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.ABA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.abmo if 'X.isNull(),'Db.isDefined("STBLABMC","X") set vRM = $$^MSG(1485,X) do vdderr("ABMO", vRM) quit
		set X = col.apdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("APDT", vRM) quit
		set X = col.apval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.APVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.arod if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("AROD", vRM) quit
		if '("01"[col.AVRSL) set vRM=$$^MSG(742,"L") do vdderr("AVRSL", vRM) quit
		if col.coldes.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLDES", vRM) quit
		if col.coldes2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("COLDES2", vRM) quit
		set X = col.colpct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.COLPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.colrvld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("COLRVLD", vRM) quit
		set X = col.colrvnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("COLRVND", vRM) quit
		set X = col.colval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.COLVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if col.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		if col.fmb.length()>20 set vRM = $$^MSG(1076,20) do vdderr("FMB", vRM) quit
		set X = col.hins if 'X.isNull(),'Db.isDefined("UTBLINS","X") set vRM = $$^MSG(1485,X) do vdderr("HINS", vRM) quit
		if col.lvr.length()>4 set vRM = $$^MSG(1076,4) do vdderr("LVR", vRM) quit
		set X = col.mtgamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.MTGAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.ocolval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.OCOLVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[col.OMDT) set vRM=$$^MSG(742,"L") do vdderr("OMDT", vRM) quit
		set X = col.orgnosh if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("ORGNOSH", vRM) quit
		if col.parc.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PARC", vRM) quit
		set X = col.ppsh if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,4) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.PPSH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.price if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.PRICE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.propcd if 'X.isNull(),'Db.isDefined("UTBLPROPCD","X") set vRM = $$^MSG(1485,X) do vdderr("PROPCD", vRM) quit
		if col.purcd.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PURCD", vRM) quit
		set X = col.revfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[COL]REVFRE",0) if 'vRM.get().isNull() do vdderr("REVFRE", vRM) quit
		set X = col.rlsamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.RLSAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if col.scolcd.length()>6 set vRM = $$^MSG(1076,6) do vdderr("SCOLCD", vRM) quit
		set X = col.smsa if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("SMSA", vRM) quit
		if '("01"[col.TITLE) set vRM=$$^MSG(742,"L") do vdderr("TITLE", vRM) quit
		set X = col.valper if 'X.isNull() set vRM = $$VAL^DBSVER("$",9,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.VALPER"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.ward if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("WARD", vRM) quit
	}

	if vobj(col,4).exists() do {

		if col.cltyp.length()>10 set vRM = $$^MSG(1076,10) do vdderr("CLTYP", vRM) quit
		set X = col.clyr if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("CLYR", vRM) quit
		if col.dlrstno.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DLRSTNO", vRM) quit
		if col.id.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ID", vRM) quit
		if col.make.length()>20 set vRM = $$^MSG(1076,20) do vdderr("MAKE", vRM) quit
		if col.model.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MODEL", vRM) quit
		if col.tnum.length()>25 set vRM = $$^MSG(1076,25) do vdderr("TNUM", vRM) quit
	}

	if vobj(col,5).exists() do {

		set X = col.ackdt1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACKDT1", vRM) quit
		set X = col.ackdt2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACKDT2", vRM) quit
		if col.acty.length()>10 set vRM = $$^MSG(1076,10) do vdderr("ACTY", vRM) quit
		set X = col.agedt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AGEDT", vRM) quit
		if '("01"[col.AOF) set vRM=$$^MSG(742,"L") do vdderr("AOF", vRM) quit
		if '("01"[col.CAOF) set vRM=$$^MSG(742,"L") do vdderr("CAOF", vRM) quit
		if '("01"[col.CLBL) set vRM=$$^MSG(742,"L") do vdderr("CLBL", vRM) quit
		if col.cnam.length()>25 set vRM = $$^MSG(1076,25) do vdderr("CNAM", vRM) quit
		if col.cnum.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CNUM", vRM) quit
		set X = col.colacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("COLACN", vRM) quit
		if col.cusip.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CUSIP", vRM) quit
		set X = col.cval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.CVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[col.CVBL) set vRM=$$^MSG(742,"L") do vdderr("CVBL", vRM) quit
		set X = col.dtd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTD", vRM) quit
		set X = col.dued if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DUED", vRM) quit
		set X = col.nsh if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("NSH", vRM) quit
		if col.owner.length()>25 set vRM = $$^MSG(1076,25) do vdderr("OWNER", vRM) quit
		set X = col.pamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.PAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[col.PERAGE) set vRM=$$^MSG(742,"L") do vdderr("PERAGE", vRM) quit
		set X = col.pldgcb if 'X.isNull(),'Db.isDefined("STBLBBO","X") set vRM = $$^MSG(1485,X) do vdderr("PLDGCB", vRM) quit
		if '("01"[col.POF) set vRM=$$^MSG(742,"L") do vdderr("POF", vRM) quit
		set X = col.powers if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("POWERS", vRM) quit
		set X = col.pval if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"COL.PVAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = col.recdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RECDT", vRM) quit
		set X = col.rendt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RENDT", vRM) quit
		set X = col.renfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[COL]RENFRE",0) if 'vRM.get().isNull() do vdderr("RENFRE", vRM) quit
	}

	if vobj(col,6).exists() do {

		if col.ad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD1", vRM) quit
		if col.ad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD2", vRM) quit
		if col.ad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD3", vRM) quit
		if col.ad4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD4", vRM) quit
		if col.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
		set X = col.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
		if col.loc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LOC", vRM) quit
		if col.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
		if col.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	}

	if vobj(col,7).exists() do {

		if col.bldlot.length()>9 set vRM = $$^MSG(1076,9) do vdderr("BLDLOT", vRM) quit
		set X = col.bpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BPDT", vRM) quit
		set X = col.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
		if '("01"[col.CONTRACT) set vRM=$$^MSG(742,"L") do vdderr("CONTRACT", vRM) quit
		if col.pname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PNAME", vRM) quit
		set X = col.solddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SOLDDT", vRM) quit
		set X = col.surveydt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SURVEYDT", vRM) quit
		if col.tcocont.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCOCONT", vRM) quit
		if col.tconame.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCONAME", vRM) quit
		if col.tcophone.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TCOPHONE", vRM) quit
	}

	if vobj(col,8).exists() do {

		if '("01"[col.CTREPOPT) set vRM=$$^MSG(742,"L") do vdderr("CTREPOPT", vRM) quit
		set X = col.ctreptyp if 'X.isNull(),'Db.isDefined("UTBLCENTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CTREPTYP", vRM) quit
		if '("01"[col.OWNOCC) set vRM=$$^MSG(742,"L") do vdderr("OWNOCC", vRM) quit
	}

	if vobj(col,9).exists() do {

		if col.legal1.length()>480 set vRM = $$^MSG(1076,480) do vdderr("LEGAL1", vRM) quit
	}

	if vobj(col,10).exists() do {

		if col.legal2.length()>480 set vRM = $$^MSG(1076,480) do vdderr("LEGAL2", vRM) quit
	}
	set X = col.coll if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("COLL", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("COL","MSG",979,"COL."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCOL col)	//COL Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.col)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj1(.col)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordCOL col)	// HIST_UPDATE  Table HIST  History on update of COL

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=$$COLCID^LNFUNCS(col.coll)
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS($$COLCID^LNFUNCS(col.coll),"COL",vdi,vold,vnew,$G(EFD),$$^MSG(8388,col.coll),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordCOL col) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("COLRVND").exists() do vi1(.col)
		if vx("CUSIP").exists() do vi2(.col)
		if vx("COLACN").exists() do vi3(.col)
		if vx("CNTRY").exists()!vx("STATE").exists()!vx("MZIP").exists()!vx("CITY").exists()!vx("AD1").exists()!vx("AD2").exists() do vi4(.col)
	}
	do vi1(.col)
	do vi2(.col)
	do vi3(.col)
	do vi4(.col)

	quit
	

vi1(RecordCOL col) // Maintain COLREV index entries (Collateral Review)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = col.colrvnd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = col.coll

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^DAYEND(v1,"COLREV",v3)) do vidxerr("COLREV")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"COLREV",v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("COLRVND").exists() set v1=vx("COLRVND").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"COLREV",v3)
	quit

vi2(RecordCOL col) // Maintain CUSIP index entries (CUSIP Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = col.cusip
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = col.coll

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("CUSIP",v2,v3)) do vidxerr("CUSIP")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("CUSIP",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CUSIP").exists() set v2=vx("CUSIP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("CUSIP",v2,v3)
	quit

vi3(RecordCOL col) // Maintain DEPSCL index entries (Deposit Secured Loan)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = col.colacn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = col.coll

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("DEPSCL",v2,v3)) do vidxerr("DEPSCL")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("DEPSCL",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("COLACN").exists() set v2=vx("COLACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("DEPSCL",v2,v3)
	quit

vi4(RecordCOL col) // Maintain MADDR index entries (Address Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = col.cntry
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = col.state
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = col.mzip
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = col.city
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = col.ad1
	if v6.isNull() set v6=(PSL.maxCharValue-1).char()
	type String v7 = col.ad2
	if v7.isNull() set v7=(PSL.maxCharValue-1).char()
	type String v8 = col.coll

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XADDR("COL",v2,v3,v4,v5,v6,v7,v8)) do vidxerr("MADDR")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XADDR("COL",v2,v3,v4,v5,v6,v7,v8)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CNTRY").exists() set v2=vx("CNTRY").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("STATE").exists() set v3=vx("STATE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("MZIP").exists() set v4=vx("MZIP").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("CITY").exists() set v5=vx("CITY").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()
	if vx("AD1").exists() set v6=vx("AD1").piece("|",1) set:v6.isNull() v6=(PSL.maxCharValue-1).char()
	if vx("AD2").exists() set v7=vx("AD2").piece("|",1) set:v7.isNull() v7=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XADDR("COL",v2,v3,v4,v5,v6,v7,v8)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("COL")

	while ds.next() do {
		type RecordCOL col=ds.getRecord("COL")
		if vlist.contains("VINDEX") do VINDEX(.col) quit
		if vlist.contains("COLREV") do vi1(.col)
		if vlist.contains("CUSIP") do vi2(.col)
		if vlist.contains("DEPSCL") do vi3(.col)
		if vlist.contains("MADDR") do vi4(.col)
	}

	quit


public VIDXBLD1(RecordCOL col, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.col) quit
	if vlist.contains("COLREV") do vi1(.col)
	if vlist.contains("CUSIP") do vi2(.col)
	if vlist.contains("DEPSCL") do vi3(.col)
	if vlist.contains("MADDR") do vi4(.col)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("COL","MSG",1225,"COL."_di)

	quit


vkchged // Access key changed

	type public RecordCOL col

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("COLL")
	set voldkey = vux.piece("|",1),vobj(col,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(col,-3) = vnewkey  // Copy new keys into object
	type RecordCOL vnewrec = col.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("COL",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(col,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordCOL col
	type public String vpar

	do Db.delete("LNCOL","COLL=:col.coll",vpar)            // Cascade delete

	quit

VIDXPGM()	quit "COLFILE"	// Location of index program

