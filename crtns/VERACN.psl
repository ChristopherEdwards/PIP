public	VERACN	// Verify account balance integrity
	/*
	  ORIG: Frank R. Sanchez

	  ---- Revision History ------------------------------------------------
	  
	  02/15/07 - RussellDS - CR25382
		   Eliminated use of obsoleted routine DBSQRYA.

	   06/12/06 - KELLYP - CR 21711
	   	      Made the following changes to prevent RDBSAVEFAIL errors
	   	      when running the @VERACN funtion:
	   	       . Modified top level to delete temporary VERACN1 & VERACN2
		         records.
		       . Modified top level to add a distinct clause on CID to 
		         the DTJ RS (consistent with prior version).
		       . Modified PNTHIST section to use hist.tseq instead of 
		         SEQ when setting VERACN2.TSEQ and SEQ (consistent with 
		         prior version.
		      Also changed DTJ section to use DTJ.TSO instead of DTJ.CORES
		      which was causing invalid integrity errors to appear on the
		      report.  Also removed pre-2004 revision history.

	   03/23/06 - RussellDS - CR 16892
	   	      Changed table look-up from obsolete TYPE table to PRODCTL.
	   	      
	   	      Fixed non-scope PSL warning.

	   03/03/05 - TITOVE - CR 13728
	   	      Modified as part of DBI2 project.
	*/

	type public Number %MCP, ER
	type public String %MSKD

	type Date %ED, %SystemDate, QI1
	type Number CID, OLNTB, PID1, TYP
	type String %READ, %TAB, CLS, GRP, I, OTYP, QI(), VFMQ
	
	set PID1 = %ProcessID
	
	do Db.delete("TMPRPT2", "PID = :PID1")
	do Db.delete("VERACN1", "PID = :PID1")
	do Db.delete("VERACN2", "PID = :PID1")

	#ACCEPT DATE=12/30/03;PGM=John Carroll;CR=Unknown
	set %SystemDate = Db.currVal("DTJ")

	set %ED = $$DAT^%ZM(%SystemDate,%MSKD.get()) 
	set OTYP = "" 
	set QI(1) = %SystemDate

	for I = "BRCD","CID","CLS","GRP","TYP" set QI(I) = "ALL"

	set %TAB("QI(1)") = ".XJD1/HLP=[DTJ]OPT/TBL=[DTJ]TJD:DISTINCT:QU "
	set %TAB("QI(""CLS"")") = ".A7/TBL=[STBLCLS]/XPP=D EXT^VERACN"
	set %TAB("QI(""GRP"")") = ".A8/XPR=D EXT^VERACN"
	set %TAB("QI(""TYP"")") = ".QI1/TBL=[PRODCTL]/XPP=D QTYPE^VERACN"
	set %TAB("QI(""CID"")") = ".ACCOUNTS1/HLP=[DTJ]CID/XPP=D EXT^DBSQRY"
	set %TAB("IO") = $$IO^SCATAB($I) 
	set %TAB("IO") = %TAB("IO")_"/XPP=D PPIO^VERACN"

	set %READ = "@@%FN,,,IO/REQ,QI(1)/REQ,QI(""CLS"")/REQ,QI(""GRP"")/REQ,QI(""TYP"")/REQ,QI(""CID"")/REQ"

	do ^UTLREAD if VFMQ="Q" kill QI quit

	set OTYP = ""
	
	do OPEN^SCAIO 

	if ER do END quit

	set QI1 = QI(1)
	
	set WHERE = "TJD=:QI1"
	if (QI("CID") '= "ALL") do {
	
		type String DQQRY()
		
		set DQQRY(1) = "[DTJ]CID "_QI("CID")
		set WHERE = WHERE_" AND "_$$WHERE^SQLCONV(.DQQRY(), "DTJ")
	}

	#ACCEPT Date=02/16/07; Pgm=RussellDS; CR=25356; Group=Dynamic
	type ResultSet rs = Db.select("DISTINCT CID", "DTJ", WHERE, "CID")

	while rs.next() do {
		
		set CID = rs.getCol("CID")

		type RecordACN acn = Db.getRecord("ACN","CID = :CID", 1)
		if 'acn.getMode() quit

		set TYP = acn.type 
		set CLS = acn.cls 
		set GRP = acn.grp
		
		if 'QI("TYP").isNull() , QI("TYP") '= "ALL" , QI("TYP") '= TYP quit

		if 'QI("CLS").isNull() , QI("CLS") '= "ALL" , QI("CLS") '= CLS quit

		if 'QI("GRP").isNull() , QI("GRP") '= "ALL" , QI("GRP") '= GRP quit

		do EXEC(.acn) 
		}

	do END

	quit
	

EXEC(RecordACN acn)	//
	
	type public Number CID, ER, TYP
	type public String CLS, GRP
	
	type Number BAL, EB, HB, PNT
	
	set BAL = +acn.bal
	
	set (PNT,ER) = 0

	do HIST

	if BAL - EB set ER = 1
	else  do DTJ quit:ER = 0

	set HB = EB do DISP

	quit	

QTYPE	// Post processor on type

	type public String I(), X
	
	if X.isNull() ! (X = "ALL") set I(3) = ""
	
	quit
	

PPIO	// Device Post-processor
	
	type Number %EXT
	
	set %EXT = 1
	
	do ^SCAIO
	
	quit
	

HIST	//

	type public Number CID, EB, ER, PNT, TYP
	type public String CLS, GRP
	
	type Number BB, SEQ
	type String AMT, ETC, ITC, P, X

 	type ResultSet rs = Db.select("JD", "HIST0", "CID = :CID", "JD")
 	
	if rs.isEmpty() set (BB,EB,SEQ) = 0

	if rs.next() do {
		
		set X = rs.getCol(1)

		type RecordHIST0 hist0 = Db.getRecord("HIST0", "CID = :CID, JD = :X")

		set (BB,EB) = +hist0.bal
		
		set SEQ = hist0.seqzero
		}

	type ResultSet rs1 = Db.select("TSEQ", "HIST", "CID = :CID AND TSEQ NOT < :SEQ")
	if rs1.isEmpty() quit
	while rs1.next() do {

		set X = rs1.getCol(1)

		type RecordHIST hist = Db.getRecord("HIST", "CID = :CID, TSEQ = :X")

		set ITC=hist.itc
		set ETC=hist.etc 
		set AMT=hist.tamt

		if (+AMT = 0) ! (ITC = "") quit

		set P = AMT
		if P["#" set P = P.piece("#",2)
	
		if CLS = "L" set EB = BB + $S(ITC.extract(1):-P,1:P)	
		else  set EB = BB + $S(ITC.extract(1):P,1:-P)
	
		if PNT do PNTHIST(.hist)

		set BB = EB
		}
	quit


DTJ	// Check Daily transaction file
	
	type public String QI()
	type public Number CID, ER

	type Date QI1
	type Number DATETIME, TSEQ
	type String DATA, X
	
	if QI(1).isNull() quit
		
	set QI1 = QI(1)
	
	type ResultSet rs = Db.select("TSEQ,DATETIME", "DTJ", "TJD = :QI1 AND CID = :CID")
	while rs.next() do { quit:ER
		set TSEQ = rs.getCol(1)
		set DATETIME = rs.getCol(2)
		type RecordDTJ dtj = Db.getRecord("DTJ", "TJD = :QI1, DATETIME = :DATETIME, CID = :CID, TSEQ = :TSEQ")
		set X = "|"_dtj.itc_"|"_dtj.etc_"|"_dtj.tamt_"|"_dtj.efd_"|"
		set X = X_dtj.tlo_"|"_dtj.tso_"|"_dtj.tcmt
	
		set TSEQ = dtj.tseq

		type RecordHIST hist = Db.getRecord("HIST", "CID = :CID, TSEQ = :TSEQ",1)
		if 'hist.getMode() set ER = 2 quit
		
		set DATA = "|"_hist.itc_"|"_hist.etc_"|"_hist.tamt_"|"
		set DATA = DATA_hist.efd_"|"_hist.tlo_"|"_hist.tso_"|"_hist.tcmt

		if X.piece("|",2,8) = DATA.piece("|",2,8) = 0 set ER = 3 quit
		}

	quit
	

DISP	//
	
	set PNT=1 
	do PNTACN 

	do HIST 

	if ER=1 do DTJ

	quit

PNTACN	//
	
	new MSG,QI1
	
	set QI1=QI(1)	
	set MSG=""

	// History and account out-of-balance
	if ER=1 set MSG=$$^MSG(5399)

	// Transaction not in history or account
	if ER=2 set MSG=$$^MSG(5401)

	// Integrity error between history and daily transactions
	if ER=3 set MSG=$$^MSG(5400)

	type RecordVERACN1 veracn1=Class.new("RecordVERACN1")

	set veracn1.pid=%ProcessID
	set veracn1.tjd=QI1
	set veracn1.cid=CID
	set veracn1.bal=BAL
	set veracn1.hb=HB
	set veracn1.lhb=BAL-HB
	set veracn1.err=MSG
	set veracn1.cls=CLS
	set veracn1.grp=GRP
	set veracn1.typ=TYP
	
	do veracn1.bypassSave()	

	quit

PNTHIST(RecordHIST hist)	//

	new QI1
	set QI1=QI(1)
	
	type RecordVERACN2 veracn2=Class.new("RecordVERACN2")
	
	set veracn2.pid=%ProcessID
	set veracn2.tjd=QI1
	set veracn2.cid=CID
	set veracn2.seq=hist.tseq
	set veracn2.date=hist.tjd
	set veracn2.tseq=hist.tseq
	set veracn2.trn=hist.etc
	set veracn2.dc=$S($E(ITC,1):"CR",1:"DR")
	set veracn2.bbal=BB
	set veracn2.pbal=P
	set veracn2.ebal=EB
	set veracn2.boo=hist.brcd
	set veracn2.user=hist.uid
	set veracn2.teseq=hist.trc

	do veracn2.bypassSave()
	
	quit

END	//

	type public Number %NOOPEN, ER, PID1, SAVER

	type Boolean FLAG = 0
	type String PGM, RID
	
	set SAVER = ER
	
	set ER = 0
	
	type ResultSet rs = Db.select("PID", "VERACN1", "PID = :PID1")
	if rs.next() set FLAG = 1

	type ResultSet rs1 = Db.select("PID", "VERACN2", "PID = :PID1")
	if rs1.next() set FLAG = 1
	
	if 'FLAG quit
	
	set RID = "VERACN"
	
	do ^URID if PGM = "" quit

	set %NOOPEN = 1 do ^@PGM

	do Db.delete("VERACN1", "PID = :PID1")
	do Db.delete("VERACN2", "PID = :PID1")
	
	set ER = SAVER
	
	quit

EXT	//
	if X=""!(X="ALL") set I(3)=""
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60712^46302^Dan Russell^6861"	// Signature - LTD^TIME^USER^SIZE
