STOP2FL(RecordSTOP2 stop2, String vpar, Boolean vparNorm) // STOP2 - Account Stops Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (12)             03/02/2005
	// Trigger Definition (4)                      05/23/2007
	// Journal File Definition (2)                 05/23/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stop2.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stop2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stop2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = stop2.cid
	type String SEQ = stop2.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOP2",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOP2","CID = :stop2.cid and SEQ = :stop2.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ

	type RecordSTOP2 stop2 = Db.getRecord("STOP2","CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do stop2.setMode(2)

		do STOP2FL(stop2,vpar)
	}
	else  do VINDEX(stop2)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOP2 stop2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOP2","CID = :stop2.cid and SEQ = :stop2.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set stop2.DP = %SystemDate
		if %O = 0  set stop2.TIME = %CurrentTime
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stop2)) S ^STOP(2,vobj(stop2,-3),vobj(stop2,-4))=vobj(stop2)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.stop2)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.stop2) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOP2 stop2

	if vpar["/INDEX/" do VINDEX(.stop2)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.stop2)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^STOP(2,vobj(stop2,-3),vobj(stop2,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSTOP2 stop2

	// Type local variables for access keys for defaults
	type public String CID
	type public String SEQ

	type public String TJD
	if stop2.dp.isNull() set stop2.dp = TJD                // dp
	if stop2.stcon.isNull() set stop2.stcon = 0            // stcon
	if stop2.time.isNull() set stop2.time = $P($H,",",2)   // time
	quit


vreqn // Validate required data items

	type public RecordSTOP2 stop2

	if stop2.act.isNull() do vreqerr("ACT") quit
	if stop2.dp.isNull() do vreqerr("DP") quit
	if stop2.stcon.isNull() do vreqerr("STCON") quit
	if stop2.time.isNull() do vreqerr("TIME") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOP2 stop2

	if stop2.cid.isNull() do vreqerr("CID") quit
	if stop2.seq.isNull() do vreqerr("SEQ") quit

		if vx("ACT").exists(),stop2.act.isNull() do vreqerr("ACT") quit
		if vx("DP").exists(),stop2.dp.isNull() do vreqerr("DP") quit
		if vx("STCON").exists(),stop2.stcon.isNull() do vreqerr("STCON") quit
		if vx("TIME").exists(),stop2.time.isNull() do vreqerr("TIME") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP2","MSG",1767,"STOP2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordSTOP2 stop2
	if 'stop2.cid.isNull() set vfkey("^ACN("_""""_stop2.cid_""""_","_50_")")="STOP2(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordSTOP2 stop2
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":stop2.cid") set vERRMSG = $$^MSG(8563,"STOP2(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("FEECID").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordSTOP2 stop2
	if vx("").order().isNull() do AUDIT^UCUTILN(stop2,.vx(),1,"|") quit
	if vx("EXP").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(stop2,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT_UPD - After insert or update trigger

	do vau1

	quit

vau1 // Trigger AFTER_INSERT_UPD - After insert or update trigger

	type public RecordSTOP2 stop2
	/*
	---------- Revision History ------------------------------------------

	03/22/07 - KumarSS - 25618
		   Added code to update Account Sequence and FMLD in 
		   DEP and LN tables, based on the account class.

	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up.
	
	09/29/05 - RussellDS - CR16911
		   Move charging of stop fee before update of dep record,
		   otherwise fee logic takes into account that there's an
		   entry already in DEP.STP.
		   
		   Removed old revision history.
	*/
	
	// Verify mode	
	quit:(%ProcessMode = 2)
	
	type public Number ER
	
	type Number FEECID2, STOPCID
	type String msg, src
	
	set STOPCID = stop2.cid
	set FEECID2 = stop2.feecid		// Stop fee charge account
	
	// Stop payment - type - seq
	if (%ProcessMode = 0) set msg = $$^MSG(6701)
	else  if (%ProcessMode = 1) set msg = $$^MSG(6702)
	else  if (%ProcessMode = 3) set msg = $$^MSG(6700) 

	//Sequence ~p1
	set msg = msg_"2 - "_$$^MSG(6742, stop2.seq) 
	set src = stop2.src

	// CIF ~P1 stop, sequence ~p2
	if 'src.piece(",", 2).isNull() set msg = msg_", "_$$^MSG(1060, src.piece(",",2), src.piece(",",3)) 
	
	type RecordACN acn = Db.getRecord("ACN", "CID=:STOPCID", 1)

	// History
	do HISTBLD^ACNFUNCS(msg,acn.boo)
	
	// Charge fee - do this before update DEP.STP, other wise will consider this
	if 'FEECID2.isNull() do { quit:ER
	
		type RecordDEP dep = Db.getRecord("DEP", "CID=:FEECID2", 1)
		
		// Service charge fee account must be a deposit account
		if (dep.getMode() = 0) do Runtime.setErrMSG("STOP2",803) quit:ER

		// Service charge fee account ~p1 is closed.
		if (dep.stat = 4) do Runtime.setErrMSG("STOP2",457,"FEECID2") quit:ER
		
		do ^SRVSTP(FEECID2, 2, 2, "STP")	// Assess stop type 2 fee
	} 
	
	// Update account sequence and FMLD
	// Create mode
	if (%ProcessMode = 0) do {
		
		if (acn.cls = "D") do {
				
			type RecordDEP dep = {RecordDEP}acn
				
			set dep.stp2 = dep.stp2 + 1
			set dep.fmld = %SystemDate
			
			do dep.save("/NOJOURNAL")
		}
			
		if (acn.cls = "L") do {
				
			type RecordLN ln = {RecordLN}acn
				
			set ln.stp2 = ln.stp2 + 1
			set ln.fmld = %SystemDate
				
			do ln.save("/NOJOURNAL")
		}
	}
	
	quit

vau2 // Trigger AFTER_UPDATE_FEECID - Modify fee charge account

	type public RecordSTOP2 stop2
	if %ProcessMode'=1 quit     // 1 = Update
	set FEECID2=stop2.feecid
	if (stop2.feecid.oldVal'=stop2.feecid) do Runtime.setErrMSG("STOP2",412,"FEECID2") quit:ER
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete trigger

	type public RecordSTOP2 stop2
	/* ----- Revision History ---------------------------------------------

	05/23/07 - KinI - CR 27256
		   Modified to move STOPLOGA logic to STOP2 DELETE journal to
		   avoid filer error when deleting STOP2 record and trying to 
		   insert single space key in STOPLOGA (STOPLOGA.KEY2=" ").
		   
	03/10/06 - RussellDS - CR20024
		   Eliminated ACN.STP* references since now only exist in
		   DEP or LN.
		   
		   PSL code clean-up.
	*/
	
	type Number LSEQ, STPCID, STPSEQ
	type String msg, src

	// Stop payment - type - seq
	//Delete stop pmt -
	set msg = $$^MSG(6700)

	//Sequence ~p1
	set msg = msg_"2 - "_$$^MSG(6742, stop2.seq) 
	set STPCID = stop2.cid
	set STPSEQ = stop2.seq
	
	set src = stop2.src
	if 'src.piece(",", 2).isNull() set msg = msg_", "_$$^MSG(1060,src.piece(",", 2), src.piece(",",3)) //CIF ~P1 stop, sequence ~p2

	type RecordACN acn = Db.getRecord("ACN", "CID=:STPCID", 1)

	// Account history
	do HISTBLD^ACNFUNCS(msg, acn.boo) 
	
	// Remove Territories before deleting the stop
	do Db.delete("STOP2A", "CID=:STPCID AND SEQ=:STPSEQ")
	
	if (stop2.exp.isNull() ! (stop2.exp > %SystemDate)) do {
		
		if (acn.cls = "D") do {
			
			type RecordDEP dep = {RecordDEP}acn
			
			set dep.stp2 = dep.stp2 - 1
			if 'stop2.src.isNull() set dep.stp1 = dep.stp1 - 1
			
			do dep.save("/NOJOURNAL")
		}
		
		if (acn.cls = "L") do {
			
			type RecordLN ln = {RecordLN}acn
			
			set ln.stp2 = ln.stp2 - 1
			
			do ln.save("/NOJOURNAL")
		}
	}

	quit

vbu1 // Trigger BU_EXP - Before Update of Expiration Date

	type public RecordSTOP2 stop2
	do stop2.setAuditFlag(1)
	/* ---- Revision History ------------------------------------------------
	
	03/12/02 - BECKERJ - 49316
		   Add trigger to flag an error message when trying to change
		   the expiration date of a stop that has already expired.
	
				----------------------------------------------------------------------
	*/
	// Cannot modify expiration date. Stop has already expired.
	if (stop2.exp.oldVal'>%SystemDate) do Runtime.setErrMSG("STOP2",5148)
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOP2 stop2

	set X = stop2.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = stop2.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stop2.act if 'X.isNull(),'Db.isDefined("STBLSTOP","X") set vRM = $$^MSG(1485,X) do vdderr("ACT", vRM) quit
	if stop2.cmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMT", vRM) quit
	set X = stop2.dp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DP", vRM) quit
	set X = stop2.exp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXP", vRM) quit
	set X = stop2.feecid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("FEECID", vRM) quit
	if stop2.src.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SRC", vRM) quit
	if '("01"[stop2.STCON) set vRM=$$^MSG(742,"L") do vdderr("STCON", vRM) quit
	set X = stop2.stpwhy if 'X.isNull(),'Db.isDefined("UTBLSTPWHY","X") set vRM = $$^MSG(1485,X) do vdderr("STPWHY", vRM) quit
	set X = stop2.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if stop2.who.length()>40 set vRM = $$^MSG(1076,40) do vdderr("WHO", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOP2","MSG",979,"STOP2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSTOP2 stop2)	//STOP2 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj2(.stop2)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=DELETE
			}
		else  if TSRC="O" do {
			do vj2(.stop2)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.stop2)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=ACTION
			}
		else  if TSRC="O" do {
			do vj1(.stop2)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=ACTION
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.stop2)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=ACTION
			}
		else  if TSRC="O" do {
			do vj1(.stop2)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=ACTION
			}
		}

	quit


vj1(RecordSTOP2 stop2)	// ACTION  Table STOPLOGA  Action file

	type Public String %O,TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=2
	set v3=stop2.cid
	set v4=" "
	set v5=stop2.seq
	set vlastkey=Db.nextVal("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5")
	type RecordSTOPLOGA stoploga=Db.getRecord("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5,LSEQ=:vlastkey",1)
	set stoploga.actflg=%O
	set stoploga.dp=stop2.dp

	do stoploga.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordSTOP2 stop2)	// DELETE  Table STOPLOGA  Action File Delete Entry

	type Public String %O,TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=2
	set v3=stop2.cid
	set v4=" "
	set v5=stop2.seq
	set vlastkey=Db.nextVal("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5")
	type RecordSTOPLOGA stoploga=Db.getRecord("STOPLOGA","TJD=:v1,STPTYP=:v2,KEY1=:v3,KEY2=:v4,SEQ=:v5,LSEQ=:vlastkey",1)
	set stoploga.actflg=%O
	set stoploga.dp=stop2.dp

	do stoploga.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordSTOP2 stop2) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("EXP").exists() do vi1(.stop2)
	}
	do vi1(.stop2)

	quit
	

vi1(RecordSTOP2 stop2) // Maintain DAYEND index entries (Dayend Expiration Index File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = stop2.exp
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v4 = stop2.cid
	type String v6 = stop2.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^STOP(2,vobj(stop2,-3),vobj(stop2,-4)))#2,'$D(^DAYEND(v1,"STPEXP",2,v4," ",v6)) do vidxerr("DAYEND")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"STPEXP",2,v4," ",v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EXP").exists() set v1=vx("EXP").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"STPEXP",2,v4," ",v6)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("STOP2")

	while ds.next() do {
		type RecordSTOP2 stop2=ds.getRecord("STOP2")
		if vlist.contains("VINDEX") do VINDEX(.stop2) quit
		if vlist.contains("DAYEND") do vi1(.stop2)
	}

	quit


public VIDXBLD1(RecordSTOP2 stop2, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.stop2) quit
	if vlist.contains("DAYEND") do vi1(.stop2)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("STOP2","MSG",1225,"STOP2."_di)

	quit


vkchged // Access key changed

	type public RecordSTOP2 stop2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = stop2.cid_","_stop2.seq       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stop2.cid_","_stop2.seq       // Copy new keys into object
	type RecordSTOP2 vnewrec = stop2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOP2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOP2 stop2

	if vux("CID").exists() set stop2.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set stop2.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "STOP2FL"	// Location of index program

