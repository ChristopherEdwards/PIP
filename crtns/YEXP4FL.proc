YEXP4FL(RecordYFEEEXP4 yfeeexp4, String vpar, Boolean vparNorm) // YFEEEXP4 - Exemption Plan Cat4 Items Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (4)              11/22/2003
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = yfeeexp4.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(yfeeexp4,.vxins(),11,"|")
	if %O = 1 quit:'yfeeexp4.isChanged()  do AUDIT^UCUTILN(yfeeexp4,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String PLAN = yfeeexp4.plan
	type String EFD = yfeeexp4.efd
	type String FTYPE = yfeeexp4.ftype

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("PLAN").exists()!vx("EFD").exists()!vx("FTYPE").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("YFEEEXP4",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("YFEEEXP4","PLAN = :yfeeexp4.plan and EFD = :yfeeexp4.efd and FTYPE = :yfeeexp4.ftype") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String PLAN
	type public String EFD
	type public String FTYPE

	type RecordYFEEEXP4 yfeeexp4 = Db.getRecord("YFEEEXP4","PLAN=:PLAN,EFD=:EFD,FTYPE=:FTYPE")
	if (%ProcessMode = 2) do {
		do yfeeexp4.setMode(2)

		do YEXP4FL(yfeeexp4,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordYFEEEXP4 yfeeexp4

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("YFEEEXP4","PLAN = :yfeeexp4.plan and EFD = :yfeeexp4.efd and FTYPE = :yfeeexp4.ftype") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp4,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp4,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(yfeeexp4,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBL("YFEEEXP",vobj(yfeeexp4,-3),vobj(yfeeexp4,-4),4,vobj(yfeeexp4,-5),n)=vobj(yfeeexp4,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(yfeeexp4,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(yfeeexp4,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBL("YFEEEXP",vobj(yfeeexp4,-3),vobj(yfeeexp4,-4),4,vobj(yfeeexp4,-5),n)=vobj(yfeeexp4,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(yfeeexp4))  S ^UTBL("YFEEEXP",vobj(yfeeexp4,-3),vobj(yfeeexp4,-4),4,vobj(yfeeexp4,-5))=vobj(yfeeexp4)
		#ENDBYPASS
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordYFEEEXP4 yfeeexp4
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^UTBL("YFEEEXP",vobj(yfeeexp4,-3),vobj(yfeeexp4,-4),4,vobj(yfeeexp4,-5),n)) quit:n.isNull()  if 'vobj(yfeeexp4,n).data(),^UTBL("YFEEEXP",vobj(yfeeexp4,-3),vobj(yfeeexp4,-4),4,vobj(yfeeexp4,-5),n).data()#2 set vobj(yfeeexp4,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordYFEEEXP4 yfeeexp4

	if 'vkeychg.get(),yfeeexp4.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar'["/NOLOG/" do ^DBSLOGIT(yfeeexp4,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^UTBL("YFEEEXP",vobj(yfeeexp4,-3),vobj(yfeeexp4,-4),4,vobj(yfeeexp4,-5)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordYFEEEXP4 yfeeexp4

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordYFEEEXP4 yfeeexp4

	if yfeeexp4.plan.isNull() do vreqerr("PLAN") quit
	if yfeeexp4.efd.isNull() do vreqerr("EFD") quit
	if yfeeexp4.ftype.isNull() do vreqerr("FTYPE") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("YFEEEXP4","MSG",1767,"YFEEEXP4."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordYFEEEXP4 yfeeexp4
	if 'yfeeexp4.efd.isNull() set vfkey("^UTBL("_"""YFEEEXP"""_","_""""_yfeeexp4.plan_""""_","_""""_yfeeexp4.efd_""""_")")="YFEEEXP4(PLAN,EFD) -> YFEEEXP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordYFEEEXP4 yfeeexp4
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("YFEEEXP",":yfeeexp4.plan,:yfeeexp4.efd") set vERRMSG = $$^MSG(8563,"YFEEEXP4(PLAN,EFD) -> YFEEEXP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Exemption Plan Category 4

	type public RecordYFEEEXP4 yfeeexp4
	/*
	   Revision History

	   10/07/99 - CHOK - 31126
		      Converted to PSL
	*/

	type RecordYFEEEXP yfeeexp=Db.getRecord("YFEEEXP","PLAN,EFD")

	// Category 4 and calculation method of a 1 can not be used together
	if yfeeexp.moc=1 do Runtime.setErrMSG("YFEEEXP4",2740,4) quit:ER 
	
	// Full Exemption Balance equal to zero
	if +(yfeeexp.febal)=0 do Runtime.setErrMSG("YFEEEXP4",2723) quit:ER 
	
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordYFEEEXP4 yfeeexp4

	if (%O = 2) do vload
	if yfeeexp4.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = yfeeexp4.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
	if yfeeexp4.ftype.length()>8 set vRM = $$^MSG(1076,8) do vdderr("FTYPE", vRM) quit

	if vobj(yfeeexp4).exists() ! 'vobj(yfeeexp4,"").order().isNull() do {

		set X = yfeeexp4.famt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"YFEEEXP4.FAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("YFEEEXP4","MSG",979,"YFEEEXP4."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordYFEEEXP4 yfeeexp4

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("PLAN").exists() set vux("PLAN") = vx("PLAN")
	if vx("EFD").exists() set vux("EFD") = vx("EFD")
	if vx("FTYPE").exists() set vux("FTYPE") = vx("FTYPE")
	do vkey(1) set voldkey = yfeeexp4.plan_","_yfeeexp4.efd_","_yfeeexp4.ftype // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = yfeeexp4.plan_","_yfeeexp4.efd_","_yfeeexp4.ftype // Copy new keys into object
	type RecordYFEEEXP4 vnewrec = yfeeexp4.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("YFEEEXP4",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordYFEEEXP4 yfeeexp4

	if vux("PLAN").exists() set yfeeexp4.plan = vux("PLAN").piece("|",i)
	if vux("EFD").exists() set yfeeexp4.efd = vux("EFD").piece("|",i)
	if vux("FTYPE").exists() set yfeeexp4.ftype = vux("FTYPE").piece("|",i)
	quit
