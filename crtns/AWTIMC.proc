AWTIMC	 	/*
	ORIG: SCHWARTZA - 10/04/2001
	DESC: Accrued Withholding Tax Mass Index Change

	During a back dated mass change, this procedure will drive 
	processing that re-computes tax withholding and posts interest 
	adjustments on accounts associated with the tax index that has 
	been changed.
		
	Note there is no restart capability for mass tax index changes, 
	as there is for mass interest index changes, nor is there linked 
	tax indexed.

	---- Revision History ------------------------------------------------
	
	03/06/06 - Sreeram P - CR 19872
		   Added one parameter %EffectiveDate to VER^RECALC call.
	
	02/23/06 - SmithCD - CR 19168
	   	   . Removed code to file through TTXP1 (not feasible due to 
	   	     p04 architecture, and simplifies the code)
	   	   . Added account status check into account select statements 
	   	     for better efficiency
	   	   . Added processing for anticipating changes
	   	   . Added error trapping

	11/07/05 - Sreeram Panyaram
		   Initialized Unscoped Variables for DBI3.
		   
	05/24/05 - RussellDS - CR16071
		   Change TP method from "CS" to "BA".
		   
		   Removed old revision history.
	*/

INIT	
	
	type public Date BEGDT, ENDDT, MODDT
	type public Boolean ANT
	type public String RM

	type Number %UID
	type Number BRCD, TSEQ
	type Date TPD
	
	// Mass Index Change (Anticipated)
	if ANT set RM = $$^MSG(5639)	    
	
	// Mass Index Change (Live)
	else  set RM = $$^MSG(5640)
	
	set BEGDT = MODDT
	set ENDDT = %SystemDate

	do SOURCE^BCHSOURC("BOFF", "AWTI", .%UserID, .BRCD)
	
	// Teller Posting Date
	type RecordTPCTRL tpctrl = Db.getRecord("TPCTRL", "BRCD=:BRCD,UID=:%UserID,TPD=:%SystemDate", 1)

	set TPD = tpctrl.pmdate
	if TPD.isNull() set TPD = %SystemDate

	do CID

	quit


CID	// Find all CID's linked to the index and process them through recalc

	type public String ER
	type public Number BRCD, CID, %UID
	type public Date BEGDT, TPD
	type public Boolean ANT
	
	// Retrieves all accounts that have a tax index defined.
	type ResultSet rs = Db.select("CID", "DEP", "AWTI=:AWTI AND STAT<4")
	set %EffectiveDate = BEGDT

	while rs.next() do {
		do EXEC(rs.getCol("CID"))
		if ER do LOGERR quit
		}
	
	quit
	

EXEC(CID)

	// Calls RECALC with DTL set to 10 (Effective dated tax index change)
	
	type public String ET, RM
	type public Boolean ANT, ER

	catch error {
		type String %ZTHALT = 0
		
		set ET = error.type
		set RM = error.description

		// Log MUMPS error
		do ZE^UTLERR
	
		// Error in account, not processed
       		set ET = $$^MSG(3511)	       
		do LOGERR
		set ER = 0
		}
		
	type RecordDEP dep = Db.getRecord("DEP", "CID=:CID")
	
	do Runtime.start("BA", "", "SAVPTR")

	// Recalculate int/div accrual/posting adjustments
	do VER^RECALC(.dep, 10, %EffectiveDate)
		
	// Error in recalculation of account accrual or interest
	if ER do { quit 
		type String SAVERM = RM
		do Runtime.setErrSTBLER("DEP", "EFDINDX1")
		set RM = SAVERM
		}

	if ANT ! (ER) do Runtime.rollback("SAVPTR") quit

	do Runtime.commit()
	
	quit


LOGERR  // Log error in exception file

	type public String AWTI, ER, ET, RM, %ZTSEQ
	type public Number CID
	
	type String SORT
	
	set SORT = AWTI_" "_%EffectiveDate.get().toString()
	
	// Make sure error descriptions will fit into exception file
	set ET = ET.get().extract(1, 60)
	set RM = RM.get().extract(1, 60)
	
        if ET.get().isNull() set ET = RM, RM = ""

        do LOG^UTLEXC(%RoutineName, SORT, RM, CID.get(), RM, ET)

	// Move on to next account with clean slate
	set (ET, ER, RM) = ""

        quit

vSIG()	quit "60331^16709^Panyaram, Sreeram^3363"	// Signature - LTD^TIME^USER^SIZE
