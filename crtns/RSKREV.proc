RSKREV		/*
	Reverse/Error Correct Risk Analysis Holds
	This section will determine if the transaction is being reversed or error
	corrected
	---- Revision History ------------------------------------------------
	
	08/28/06 - KUMARB - CR 22464
		   Modify in the begining of the section FDHLD8 to suppress 
		   the Check Hold record creation if Check Hold is not defined 
		   in Available Calculation Formula for the account.
	
	05/30/06 - DESHPANDE S K - CR 20748
		   Replaced public variable %TRNSEQ with procedure parameters 
		   in subroutines REV(), DCLREV(), GCRREV(), SECREV().
	
	11/29/05 - NATRAJAH - 13734
	  	   General DBI3 Cleanup.
	  	   
	01/27/00 - CARROLLJ - 31126
		Copied TR and %A array's that are by in by DEPPO into objects.
		This needs to be changed once DEPPO is PSL'd.  Record Dep and 
		Record TTX need to passed in and the code that is commented out
		needs to be uncommented.  This is documented in each section a 
		change is needed.

	09/03/99 - CARROLLJ - 33890
		Convert to PSL.

	12/09/98 - CARROLLJ - 30522
		Removed the resetting of A in section DON51 to correct the
		undefined error that was received when accessing the DATABASE
		option on the teller screen.
	
	10/22/98 - CARROLLJ - 49816:001
		Added DCLRSK to be subtracted from the recipient account.
	
	*/
	
	quit

public	REV(RecordDEP dep,RecordTTX ttx,PTRNSEQ)
	
	type Number RAMT
	type Public Number CID
	type String HLD8,UTSO

	
	set RAMT=+ttx.tamt                     // Transaction Amount
	do OUT^UTSO(.UTSO,ttx.tso)             // Transaction Source of Funds
	if UTSO("SDFUN").exists() set dep.sdavl=dep.sdavl+(UTSO("SDFUN"))   // GCR Same Day Available
	
	// Get Check Hold Table
	type ResultSet rs=Db.select("EXPDT,AMT,TOTAMT,ALCAMT","HLD8","CID=:CID AND EXPDT >=:%SystemDate")
	if rs.isEmpty() quit
	while rs.next() set HLD8(rs.getCol(1))=rs.getCol(2)_"|"_rs.getCol(3)_"|"_rs.getCol(4)


	// Collate through risk detail file
	type Number DCID,HLDAMT,HLDTYP,REV,RSKSEQ
	type Boolean REVFLG
	type Date EXPDT
	
	type ResultSet rs=Db.select("DCID,EXPDT,HLDTYP,HLDAMT,REVFLG,RSKSEQ","RSKHD","CID=:CID AND TRNSEQ=:PTRNSEQ AND EXPDT>=:%SystemDate")
	if rs.isEmpty() quit
	while rs.next() do { 
		set DCID=rs.getCol(1)
		set EXPDT=rs.getCol(2)
		if EXPDT<%SystemDate quit 
		set HLDTYP=rs.getCol(3)
		set HLDAMT=rs.getCol(4)           // Converted amount in Donor Currency
		set REVFLG=rs.getCol(5)
		if REVFLG=1 quit 
		set RSKSEQ=rs.getCol(6)
		set REVFLG=1
		if HLDTYP=10 do DCLREV(.dep, PTRNSEQ)
		if HLDTYP=11 do GCRREV(.dep, PTRNSEQ)
		if HLDTYP=12 do SECREV(.dep, PTRNSEQ)
		}
	quit 


GCRREV(RecordDEP dep, Number PTRNSEQ)
     
       // GCR risk holds will be REV/EC'd in this section
	
	type Public String HLD,RSKHD
	type Public Number CID,HLD11,HLDAMT,RSKSEQ
	type Public Date EXPDT
	type Public Boolean REVFLG
	
	// Get allocated amount from check hold
	do FDHLD8(HLDAMT)
	
	// Update FSN for GCR hold
	if 'HLD11(11,CID,EXPDT).exists() do {
		type ResultSet rs1=Db.select("GCRHLD","HLD11","CID=:CID AND EXPDT=:EXPDT")
		if 'rs1.isEmpty() if rs1.next() set HLD(11,CID,EXPDT)=rs1.getCol("GCRHLD")

		type RecordHLD11 hld11
		set hld11=Db.getRecord("HLD11","CID,EXPDT")
                set hld11.cid=CID
                set hld11.expdt=EXPDT
		set hld11.gcrhld=HLD11
		do hld11.bypassSave()
		}

	set HLD(11,CID,EXPDT).piece("|",1)=HLD(11,CID,EXPDT).piece("|",1)-HLDAMT
	
	// Update FSN for Detail
	set RSKHD(%SystemDate,CID,PTRNSEQ,RSKSEQ)="|"_EXPDT_"|11|"_HLDAMT_"|"_REVFLG

	type RecordRSKHD rskhd
	set rskhd=Db.getRecord("RSKHD","%SystemDate,CID,PTRNSEQ,RSKSEQ")
	set rskhd.tjd=%SystemDate
	set rskhd.cid=CID
	set rskhd.trnseq=PTRNSEQ
	set rskhd.rskseq=Db.nextVal("RSKHD","%SystemDate,CID,PTRNSEQ")
	set rskhd.expdt=EXPDT
	set rskhd.hldtyp=11
	set rskhd.hldamt=HLDAMT
	do rskhd.bypassSave()


	// Update GCR hold on account
	set dep.gcrrsk=dep.gcrrsk-HLDAMT       // Total GCR Risk Hold
	
	quit 


DCLREV(RecordDEP dep, Number PTRNSEQ) 
       
       // DCL risk holds will be REV/EC'd in this section
	
	type String DCRCD
	type Number CHAMT,RSKAMT
	type Public Number CID,DCID,DCLACN,HLD10,HLDAMT,RCID,RSKSEQ
	type Public Date EXPDT
	type Public Boolean REVFLG
	type Public String HLD,RSKHD
	type ResultSet rs1=Db.select("CRCD","ACN","CID=:DCID")
	if 'rs1.isEmpty() if rs1.next() set DCRCD=rs1.getCol("CRCD")

	/*	
	If different currency, convert hold amount back into DCL's currency to
	place the risk hold on the donor account.
	*/

	set CHAMT=HLDAMT
	if dep.crcd'=DCRCD do CAMT^CRCDUTL(DCRCD,dep.crcd,.CHAMT)
	
	do FDHLD8(CHAMT)                       // Hold amount in Receipient currency
	
	// Update FSN for DCL hold
	if 'HLD10(10,DCID,EXPDT,CID).exists() do {
		type ResultSet rs2=Db.select("RSKAMT","HLD10","CID=:DCID AND EXPDT=:EXPDT AND RCID=:CID")
		set RSKAMT=rs2.getCol("RSKAMT")
		set HLD(10,DCID,EXPDT,CID)=RSKAMT

		type RecordHLD10 hld10
		set hld10=Db.getRecord("HLD10","CID,EXPDT,RCID")
		set hld10.cid=DCID
		set hld10.expdt=EXPDT
		set hld10.rcid=CID		
		set hld10.rskamt=RSKAMT
		do hld10.bypassSave()
		}

	set HLD(10,DCID,EXPDT,CID).piece("|",1)=HLD(10,DCID,EXPDT,CID).piece("|",1)-HLDAMT
	
	// Update FSN for Detail
	set RSKHD(%SystemDate,CID,PTRNSEQ,RSKSEQ)=DCID_"|"_EXPDT_")|10|"_HLDAMT_"|"_REVFLG

	type RecordRSKHD rskhd
	set rskhd=Db.getRecord("RSKHD","%SystemDate,CID,PTRNSEQ,RSKSEQ")
	set rskhd.tjd=%SystemDate
	set rskhd.cid=CID
	set rskhd.trnseq=PTRNSEQ
	set rskhd.rskseq=Db.nextVal("RSKHD","%SystemDate,CID,PTRNSEQ")
	set rskhd.expdt=EXPDT
	set rskhd.hldtyp=10
	set rskhd.hldamt=HLDAMT
	do rskhd.bypassSave()

	// Update risk hold on donor account - DEPPO will build correct %A
	set DCLACN(DCID,"DONRSK")=-HLDAMT
	set dep.dclrsk=dep.dclrsk-HLDAMT       // DCL Risk
	
	quit 


SECREV(RecordDEP dep, Number PTRNSEQ) 
        
        // SEC risk holds will be REV/EC'd in this section
	
	type Public Number CID,HLDAMT,HLD12,RSKSEQ
	type Public Date EXPDT
	type Public Boolean REVFLG
	type Public String HLD,RSKHD
		
	// Get allocated amount from check hold
	do FDHLD8(HLDAMT)
	
	// Update FSN for SEC hold
	if 'HLD12(12,CID,EXPDT).exists() do {
		type ResultSet rs1=Db.select("SECHLD","HLD12","CID=:CID AND EXPDT=:EXPDT")
		if 'rs1.isEmpty() if rs1.next() set HLD12=rs1.getCol("SECHLD")
		set HLD(12,CID,EXPDT)=HLD12

		type RecordHLD12 hld12
		set hld12=Db.getRecord("HLD12","CID,EXPDT")
                set hld12.cid=CID
                set hld12.expdt=EXPDT
                set hld12.sechld=HLD12
                do hld12.bypassSave()

		}

	set HLD(12,CID,EXPDT).piece("|",1)=HLD(12,CID,EXPDT).piece("|",1)-HLDAMT
	
	// Update FSN for Detail
	set RSKHD(%SystemDate,CID,PTRNSEQ,RSKSEQ)="|"_EXPDT_")|12|"_HLDAMT_"|"_REVFLG

	type RecordRSKHD rskhd
	set rskhd=Db.getRecord("RSKHD","%SystemDate,CID,PTRNSEQ,RSKSEQ")
	set rskhd.tjd=%SystemDate
	set rskhd.cid=CID
	set rskhd.trnseq=PTRNSEQ
        set rskhd.rskseq=Db.nextVal("RSKHD","%SystemDate,CID,PTRNSEQ")
	set rskhd.expdt=EXPDT
	set rskhd.hldtyp=12
	set rskhd.hldamt=HLDAMT
	do rskhd.bypassSave()	


	// Update SEC hold on account
	set dep.secrsk=dep.secrsk-HLDAMT       // Total Security Risk Hold
	quit 


FDHLD8(HLDAMT,RecordDEP	dep) //      HLDAMT    Amount of hold being taken off of the account

	type Public Number CID
	type Public Date EXPDT
	type Public String HLD8,HLD
	
	type String BALAVLCALCFO

	set BALAVLCALCFO = $$BALAVLFO^DEPCDI(CID)
	
	// Suppress check hold if Available Balance Calculation Formula
	// does not include check holds
	if BALAVLCALCFO.extract(4)'=1 quit
	
	// Update allocated check hold
	set HLD8(EXPDT).piece("|",3)=HLD8(EXPDT).piece("|",3)-HLDAMT
	set HLD(8,CID,EXPDT)=HLD8(EXPDT)

	type RecordHLD8 hld8
	set hld8=Db.getRecord("HLD8","CID,EXPDT")
	set hld8.cid=CID
	set hld8.expdt=EXPDT
	set hld8.amt=HLD8(EXPDT).piece("|",1)
	set hld8.totamt=HLD8(EXPDT).piece("|",2)
	set hld8.alcamt=HLD8(EXPDT).piece("|",3)
	do hld8.bypassSave()

	quit
	

vSIG()	quit "60523^966^Balasubramonian Sankar^7600"	// Signature - LTD^TIME^USER^SIZE
