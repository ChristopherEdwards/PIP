R01S497	// SCA553 - RSP Account File Purge
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:59 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number NOKIL=1
	type String VIN2="ALL"
	type String VIN3="ALL"

	set RID="SCA553"
	set RN="RSP Account File Purge"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("NOKIL")="|1|||||||L|Anticipated|||||"
	set %TAB("VIN2")="|255||[IRATYPE]ACN|[CIF]:NOVAL||D EXT^DBSQRY||T|Customer Number|||||"
	set %TAB("VIN3")="|255||[IRATYPE]RPASEQ|[IRATYPE]RPASEQ:DISTINCT:NOVAL||D EXT^DBSQRY||T|RSP Sequence|||||"

	set %READ="IO/REQ,NOKIL#1,VIN2#0,VIN3#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Number NOKIL
	type public String VIN2,VIN3
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ACN,CONAM,DIR,ET,OPEN,OUT,RECORD,RID,RN,RPASEQ,T1,V,VL,VLOF,VRF(),VSTATS(),X,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81
	type String vc82,vc83,vc84,vc85,vc9,vovc1,vovc2,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA553",RN="RSP Account File Purge"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA553","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[IRATYPE]ACN "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[IRATYPE]RPASEQ "_VIN3,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("IRATYPE,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",2)="WC2|"_"Customer Number"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC2|"_"RSP Sequence"_"|VIN3|"_VIN3.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="RSP Account File Purge"
		set VBNRINFO("PGM")="R01S497"
		set VBNRINFO("RID")="SCA553"
		set VBNRINFO("TABLES")="IRATYPE,CIF"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,IRATYPE]ACN"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,IRATYPE]RPASEQ"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc80,vc81,vc82,vc83,vc84,vc85)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:2 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"IRATYPE.ACN,IRATYPE.RPASEQ,IRATYPE.PLANID,IRATYPE."
	set VSELECT=VSELECT_"LIMIT,IRATYPE.IRACON,IRATYPE.IRADIS,IRATYPE.AUTFRE"
	set VSELECT=VSELECT_",IRATYPE.AUTDND,IRATYPE.AUTDLD,IRATYPE.AUTAMT,IRAT"
	set VSELECT=VSELECT_"YPE.AUTOPT,IRATYPE.AUTNOT,IRATYPE.IRAAUT,IRATYPE.D"
	set VSELECT=VSELECT_"ISMTC,IRATYPE.DISCID,IRATYPE.NAME1,IRATYPE.NAME2,I"
	set VSELECT=VSELECT_"RATYPE.AD1,IRATYPE.AD2,IRATYPE.AD3,IRATYPE.CITY,IR"
	set VSELECT=VSELECT_"ATYPE.STATE,IRATYPE.MZIP,IRATYPE.WTHAMT,IRATYPE.WT"
	set VSELECT=VSELECT_"HPCT,IRATYPE.ANTCHK,IRATYPE.CNTRY,IRATYPE.BEN,IRAT"
	set VSELECT=VSELECT_"YPE.TAXIND,IRATYPE.IRABEN,IRATYPE.RSPWIND,IRATYPE."
	set VSELECT=VSELECT_"RSPWSCH,IRATYPE.GRPNO,IRATYPE.MADAGE,IRATYPE.RSPMA"
	set VSELECT=VSELECT_"DO,IRATYPE.MADSDOB,IRATYPE.RSPMADB,IRATYPE.AUTUPD,"
	set VSELECT=VSELECT_"IRATYPE.MADSAT,IRATYPE.YEFLG,IRATYPE.SPOUSEID,IRAT"
	set VSELECT=VSELECT_"YPE.PLDTE,IRATYPE.PLCDTE,IRATYPE.IRATYP,IRATYPE.RS"
	set VSELECT=VSELECT_"PWCALC,IRATYPE.PLANMAN,IRATYPE.MADPCT,IRATYPE.LIFP"
	set VSELECT=VSELECT_"CT,IRATYPE.LIFJUR,IRATYPE.LOCK,IRATYPE.MINPAY,IRAT"
	set VSELECT=VSELECT_"YPE.MAXPAY,IRATYPE.IRAIPO,IRATYPE.RPMAD1,IRATYPE.R"
	set VSELECT=VSELECT_"PMAD2,IRATYPE.RPMAD3,IRATYPE.RPCITY,IRATYPE.RPCNTR"
	set VSELECT=VSELECT_"Y,IRATYPE.RPSTATE,IRATYPE.RPZIP,IRATYPE.RPHPH,IRAT"
	set VSELECT=VSELECT_"YPE.RPBPH,IRATYPE.RPEMAIL,IRATYPE.DECNUM,IRATYPE.D"
	set VSELECT=VSELECT_"ECNAM,IRATYPE.DECTAXID,IRATYPE.DECSEQ,IRATYPE.DECP"
	set VSELECT=VSELECT_"LNID,IRATYPE.MF,IRATYPE.PTC,IRATYPE.BTC,IRATYPE.JT"
	set VSELECT=VSELECT_"C,IRATYPE.EMPLRCIF,IRATYPE.CONDIST,IRATYPE.RFLG,IR"
	set VSELECT=VSELECT_"ATYPE.LIMITPY,IRATYPE.STWHCALC,IRATYPE.STWHSCH,IRA"
	set VSELECT=VSELECT_"TYPE.STWHAMT,IRATYPE.STWHPCT,IRATYPE.STPLNID,IRATY"
	set VSELECT=VSELECT_"PE.NONBNDIS,IRATYPE.PLANBAL,IRATYPE.TYPDESC,CIF.NA"
	set VSELECT=VSELECT_"M"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"IRATYPE,CIF",VWHERE,"IRATYPE.ACN,IRATYPE.RPASEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2
	set vovc1="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2
	set vovc1=vc1,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc80,vc81,vc82,vc83,vc84,vc85
	set vc1=V.piece($C(9),1)			// IRATYPE.ACN
	set vc2=V.piece($C(9),2)			// IRATYPE.RPASEQ
	set vc3=V.piece($C(9),3)			// IRATYPE.PLANID
	set vc4=V.piece($C(9),4)			// IRATYPE.LIMIT
	set vc5=V.piece($C(9),5)			// IRATYPE.IRACON
	set vc6=V.piece($C(9),6)			// IRATYPE.IRADIS
	set vc7=V.piece($C(9),7)			// IRATYPE.AUTFRE
	set vc8=V.piece($C(9),8)			// IRATYPE.AUTDND
	set vc9=V.piece($C(9),9)			// IRATYPE.AUTDLD
	set vc10=V.piece($C(9),10)			// IRATYPE.AUTAMT
	set vc11=V.piece($C(9),11)			// IRATYPE.AUTOPT
	set vc12=V.piece($C(9),12)			// IRATYPE.AUTNOT
	set vc13=V.piece($C(9),13)			// IRATYPE.IRAAUT
	set vc14=V.piece($C(9),14)			// IRATYPE.DISMTC
	set vc15=V.piece($C(9),15)			// IRATYPE.DISCID
	set vc16=V.piece($C(9),16)			// IRATYPE.NAME1
	set vc17=V.piece($C(9),17)			// IRATYPE.NAME2
	set vc18=V.piece($C(9),18)			// IRATYPE.AD1
	set vc19=V.piece($C(9),19)			// IRATYPE.AD2
	set vc20=V.piece($C(9),20)			// IRATYPE.AD3
	set vc21=V.piece($C(9),21)			// IRATYPE.CITY
	set vc22=V.piece($C(9),22)			// IRATYPE.STATE
	set vc23=V.piece($C(9),23)			// IRATYPE.MZIP
	set vc24=V.piece($C(9),24)			// IRATYPE.WTHAMT
	set vc25=V.piece($C(9),25)			// IRATYPE.WTHPCT
	set vc26=V.piece($C(9),26)			// IRATYPE.ANTCHK
	set vc27=V.piece($C(9),27)			// IRATYPE.CNTRY
	set vc28=V.piece($C(9),28)			// IRATYPE.BEN
	set vc29=V.piece($C(9),29)			// IRATYPE.TAXIND
	set vc30=V.piece($C(9),30)			// IRATYPE.IRABEN
	set vc31=V.piece($C(9),31)			// IRATYPE.RSPWIND
	set vc32=V.piece($C(9),32)			// IRATYPE.RSPWSCH
	set vc33=V.piece($C(9),33)			// IRATYPE.GRPNO
	set vc34=V.piece($C(9),34)			// IRATYPE.MADAGE
	set vc35=V.piece($C(9),35)			// IRATYPE.RSPMADO
	set vc36=V.piece($C(9),36)			// IRATYPE.MADSDOB
	set vc37=V.piece($C(9),37)			// IRATYPE.RSPMADB
	set vc38=V.piece($C(9),38)			// IRATYPE.AUTUPD
	set vc39=V.piece($C(9),39)			// IRATYPE.MADSAT
	set vc40=V.piece($C(9),40)			// IRATYPE.YEFLG
	set vc41=V.piece($C(9),41)			// IRATYPE.SPOUSEID
	set vc42=V.piece($C(9),42)			// IRATYPE.PLDTE
	set vc43=V.piece($C(9),43)			// IRATYPE.PLCDTE
	set vc44=V.piece($C(9),44)			// IRATYPE.IRATYP
	set vc45=V.piece($C(9),45)			// IRATYPE.RSPWCALC
	set vc46=V.piece($C(9),46)			// IRATYPE.PLANMAN
	set vc47=V.piece($C(9),47)			// IRATYPE.MADPCT
	set vc48=V.piece($C(9),48)			// IRATYPE.LIFPCT
	set vc49=V.piece($C(9),49)			// IRATYPE.LIFJUR
	set vc50=V.piece($C(9),50)			// IRATYPE.LOCK
	set vc51=V.piece($C(9),51)			// IRATYPE.MINPAY
	set vc52=V.piece($C(9),52)			// IRATYPE.MAXPAY
	set vc53=V.piece($C(9),53)			// IRATYPE.IRAIPO
	set vc54=V.piece($C(9),54)			// IRATYPE.RPMAD1
	set vc55=V.piece($C(9),55)			// IRATYPE.RPMAD2
	set vc56=V.piece($C(9),56)			// IRATYPE.RPMAD3
	set vc57=V.piece($C(9),57)			// IRATYPE.RPCITY
	set vc58=V.piece($C(9),58)			// IRATYPE.RPCNTRY
	set vc59=V.piece($C(9),59)			// IRATYPE.RPSTATE
	set vc60=V.piece($C(9),60)			// IRATYPE.RPZIP
	set vc61=V.piece($C(9),61)			// IRATYPE.RPHPH
	set vc62=V.piece($C(9),62)			// IRATYPE.RPBPH
	set vc63=V.piece($C(9),63)			// IRATYPE.RPEMAIL
	set vc64=V.piece($C(9),64)			// IRATYPE.DECNUM
	set vc65=V.piece($C(9),65)			// IRATYPE.DECNAM
	set vc66=V.piece($C(9),66)			// IRATYPE.DECTAXID
	set vc67=V.piece($C(9),67)			// IRATYPE.DECSEQ
	set vc68=V.piece($C(9),68)			// IRATYPE.DECPLNID
	set vc69=V.piece($C(9),69)			// IRATYPE.MF
	set vc70=V.piece($C(9),70)			// IRATYPE.PTC
	set vc71=V.piece($C(9),71)			// IRATYPE.BTC
	set vc72=V.piece($C(9),72)			// IRATYPE.JTC
	set vc73=V.piece($C(9),73)			// IRATYPE.EMPLRCIF
	set vc74=V.piece($C(9),74)			// IRATYPE.CONDIST
	set vc75=V.piece($C(9),75)			// IRATYPE.RFLG
	set vc76=V.piece($C(9),76)			// IRATYPE.LIMITPY
	set vc77=V.piece($C(9),77)			// IRATYPE.STWHCALC
	set vc78=V.piece($C(9),78)			// IRATYPE.STWHSCH
	set vc79=V.piece($C(9),79)			// IRATYPE.STWHAMT
	set vc80=V.piece($C(9),80)			// IRATYPE.STWHPCT
	set vc81=V.piece($C(9),81)			// IRATYPE.STPLNID
	set vc82=V.piece($C(9),82)			// IRATYPE.NONBNDIS
	set vc83=V.piece($C(9),83)			// IRATYPE.PLANBAL
	set vc84=V.piece($C(9),84)			// IRATYPE.TYPDESC
	set vc85=V.piece($C(9),85)			// CIF.NAM
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc80,vc81,vc82,vc83,vc84
 type public Number ACN,OPEN,RPASEQ
 type public String OUT,RECORD,V,VL
 type public Boolean NOKIL

 set ACN=vc1
 set RPASEQ=vc2
 type ResultSet rs=Db.select("CID","DEP","ACN=:ACN AND RPASEQ=:RPASEQ")
 if rs.isEmpty() set V="",VL="" quit

 if ('NOKIL),OPEN do {

	set RECORD=vc1_"|"_vc2_"|"
	set RECORD=RECORD_vc3_"|"_vc4_"|"
	set RECORD=RECORD_vc5_"|"_vc6_"|"
	set RECORD=RECORD_vc7_"|"_vc8_"|"
	set RECORD=RECORD_vc9_"|"_vc10_"|"
	set RECORD=RECORD_vc11_"|"_vc12_"|"
	set RECORD=RECORD_vc13_"|"_vc14_"|"
	set RECORD=RECORD_vc15_"|"_vc16_"|"
	set RECORD=RECORD_vc17_"|"_vc18_"|"
	set RECORD=RECORD_vc19_"|"_vc20_"|"
	set RECORD=RECORD_vc21_"|"_vc22_"|"
	set RECORD=RECORD_vc23_"|"_vc24_"|"
	set RECORD=RECORD_vc25_"|"_vc26_"|"
	set RECORD=RECORD_vc27_"|"_vc28_"|"
	set RECORD=RECORD_vc29_"|"_vc30_"|"
	set RECORD=RECORD_vc31_"|"_vc32_"|"
	set RECORD=RECORD_vc33_"|"_vc34_"|"
	set RECORD=RECORD_vc35_"|"_vc36_"|"
	set RECORD=RECORD_vc37_"|"_vc38_"|"
	set RECORD=RECORD_vc39_"|"_vc40_"|"
	set RECORD=RECORD_vc41_"|"_vc42_"|"
	set RECORD=RECORD_vc43_"|"_vc44_"|"
	set RECORD=RECORD_vc45_"|"_vc46_"|"
	set RECORD=RECORD_vc47_"|"_vc48_"|"
	set RECORD=RECORD_vc49_"|"_vc50_"|"
	set RECORD=RECORD_vc51_"|"_vc52_"|"
	set RECORD=RECORD_vc53_"|"_vc54_"|"
	set RECORD=RECORD_vc55_"|"_vc56_"|"
	set RECORD=RECORD_vc57_"|"_vc58_"|"
	set RECORD=RECORD_vc59_"|"_vc60_"|"
	set RECORD=RECORD_vc61_"|"_vc62_"|"
	set RECORD=RECORD_vc63_"|"_vc64_"|"
	set RECORD=RECORD_vc65_"|"_vc66_"|"

	set RECORD=RECORD_vc67_"|"_vc68_"|"
	set RECORD=RECORD_vc69_"|"_vc70_"|"
	set RECORD=RECORD_vc71_"|"_vc72_"|"
	set RECORD=RECORD_vc73_"|"_vc74_"|"
	set RECORD=RECORD_vc75_"|"_vc76_"|"
	set RECORD=RECORD_vc77_"|"_vc78_"|"
	set RECORD=RECORD_vc79_"|"_vc80_"|"
	set RECORD=RECORD_vc81_"|"_vc82_"|"
	set RECORD=RECORD_vc83_"|"_vc84	

	use OUT
	write RECORD,!	
	do Db.delete("IRATYPE","ACN=:ACN AND RPASEQ=:RPASEQ")
	}
	quit

VPREAQ	// Pre-processor (after query)

 type public Boolean NOKIL

 if NOKIL quit

 type public String DIR,ET,IO,OUT,V,VL,X
 type public Number ER,OPEN

 use 0 
 if IO=$I set ER=1,ET="LNPURGE" do DSP22^UTLERR quit

 set DIR=CUVAR.spldir
 set OUT=DIR.piece(":",1)_$S(DIR'="":":",1:"")_DIR.piece(":",2)_"SAVE.RSP"
 set OPEN=0
 set X=$$FILE^%ZOPEN(OUT,"WRITE/NEWV",1)
 
 if '(+X) do { quit

	// Error opening ~p1. Process aborted.
	do Runtime.setErrMSG("",988)
	do DSP^UTLERR
	kill OUT
	set V="",VL=""
	}

 // Writing deleted files to ~p1
 write $$^MSG(6969,OUT) do ^%T write ! hang 2
 set OPEN=1
	quit

VRPOST	// Report post-processor

 type public String OUT
 type public Boolean NOKIL

 if 'NOKIL,(OUT.exists()) use OUT write "$$EOF",!,"",! close OUT quit

	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(2)
	type Public String vc1,vovc1,vc2,vovc2
	type Number vb1,vb2
	set (vb1,vb2)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(2)=VT(2)+1
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ACN,CONAM,DIR,ET,IO,NOKIL,OPEN,OUT,RECORD,RID,RN,RPASEQ,T1,VL,X,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84
	type public String vc85,vc9,vovc1,vovc2,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+9,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,40)
	set VL=VL_$J("",48-VL.length())_"Run Date:"
	set VL=VL_$J("",58-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",70-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",50-VL.length())_"System:"
	set VL=VL_$J("",58-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",70-VL.length())_"Page:"
	set VL=VL_$J("",76-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	do VP1 quit:VFMQ!verror.get()  set V=$E(T1,1,20) set VL=V
	do VOM
	set VL="" do VOM
	set VL="Customer Number  Name                       RSP Sequence Plan Type Plan ID"
	do VOM
	set VL="================================================================================"
	do VOM
	set VL="" do VOM
	set VL="   "_$J(vc1,12)
	set VL=VL_$J("",17-VL.length())_$E(vc85,1,25)
	set VL=VL_$J("",44-VL.length())_$J(vc2,12)
	set VL=VL_$J("",60-VL.length())_$J(vc44,2)
	set VL=VL_$J("",67-VL.length())_$E(vc3,1,12)
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: T1

 type public String T1
 type public Boolean NOKIL

 if NOKIL set T1="Anticipated"
 else  set T1="Actual"
	quit
