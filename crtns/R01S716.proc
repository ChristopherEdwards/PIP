R01S716	// YER449 - T5 Year-End Magnetic Tape Reporting
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:55 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type String %NOOPEN,TAPETBL()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String IO2
	type Number TAPETYPE
	type Number VIN3

	set RID="YER449"
	set RN="T5 Year-End Magnetic Tape Reporting"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("IO2")="|40|||[DEVICE]||S %EXT=1,IO=X D ^SCAIO S:IOTYP=""RMS"" RECSIZ=672,IOPAR=IOPAR_""/FIXED""|S:IO2="""" (V,X,IO2)=$I|T|Device|||||"
	set %TAB("TAPETYPE")="|1|||TAPETBL(||||N|Tape Type|||||"
	set %TAB("VIN3")="|1||[T5INF]RC|[T5INF]RC:DISTINCT:NOVAL||||N|Report Code is equal to|||||"

	set %READ="IO/REQ,IO2#1,TAPETYPE#1,VIN3#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String %NOOPEN,TAPETBL()
	type public Number TAPETYPE,VIN3
	type public String IO2
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,ACN,BRTOT(),CAC,CAD1,CAD2,CCITY,CCODE,CNAME,CONAM,CONTACT,CORPID,CSTATE,CTELE,CZIP,FCODE,IAD1,IAD2,ICITY,INAME,INAME2,ISTATE,IZIP,LNM,LNM2,MAD1,MAD2,MCITY,MSTATE,MZIP,NAM,NAM2,RATNO,RC,RCODE,RID,RN,RT,SBI,SUMCNT,T5FID,T5RECTYP,T5TRN,TAXID,TCC,TRI,VL,VLOF,VRF(),VSTATS(),YEAR,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="YER449",RN="T5 Year-End Magnetic Tape Reporting"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YER449","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=673")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("T5INF.RC,T5INF.BOO,T5INF.ACN,T5INF.CID,CIF.LNM,CIF.NAM,CIF.TAXID,CIF.MAD1,CIF.MAD2,CIF.MCITY,CIF.MSTATE,CIF.MZIP,NR4EINF.ACN,CIF.PERS,CIF.MCNTRY,CUVAR.ICNTRY,CUVAR.CCNTRY,CUVAR.RT","T5INF,CIF,CUVAR,NR4EINF","T5INF.RC=:VIN3","T5INF.RC,T5INF.BOO,T5INF.ACN,T5INF.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18
	set vc1=V.piece($C(9),1)			// T5INF.RC
	set vc2=V.piece($C(9),2)			// T5INF.BOO
	set vc3=V.piece($C(9),3)			// T5INF.ACN
	set vc4=V.piece($C(9),4)			// T5INF.CID
	set vc5=V.piece($C(9),5)			// CIF.LNM
	set vc6=V.piece($C(9),6)			// CIF.NAM
	set vc7=V.piece($C(9),7)			// CIF.TAXID
	set vc8=V.piece($C(9),8)			// CIF.MAD1
	set vc9=V.piece($C(9),9)			// CIF.MAD2
	set vc10=V.piece($C(9),10)			// CIF.MCITY
	set vc11=V.piece($C(9),11)			// CIF.MSTATE
	set vc12=V.piece($C(9),12)			// CIF.MZIP
	set vc13=V.piece($C(9),13)			// NR4EINF.ACN
	set vc14=V.piece($C(9),14)			// CIF.PERS
	set vc15=V.piece($C(9),15)			// CIF.MCNTRY
	set vc16=V.piece($C(9),16)			// CUVAR.ICNTRY
	set vc17=V.piece($C(9),17)			// CUVAR.CCNTRY
	set vc18=V.piece($C(9),18)			// CUVAR.RT
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 type public Boolean ER
 type public Number BRTOT(),YEAR
 type Number I
 use 0 do OPEN^SCAIO quit:ER
 set YEAR=$$YEAR^SCADAT(%SystemDate)-1
 Kill BRTOT
 for I=0:1:6 set BRTOT(I)=0
	quit

VPREBQ	// Pre-processor (before query)

 type public String %NOOPEN,TAPETBL()
 type String IO2
 set TAPETBL(1)="Original Run"
 set TAPETBL(2)="Test Run"
 set TAPETBL(3)="Replacement Run"
 set %NOOPEN="",IO2=$I
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,VH0=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,VH0=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VSUM4	// Summary
	type public String %NOOPEN,ACN,BRTOT(),CAC,CAD1,CAD2,CCITY,CCODE,CNAME,CONTACT,CORPID,CSTATE,CTELE,CZIP,ER,FCODE,I,IAD1,IAD2,ICITY,INAME,INAME2,IOSL,ISTATE,IZIP,LNM,LNM2,MAD1,MAD2,MCITY,MSTATE,MZIP,NAM,NAM2,RATNO,RC,RCODE,RT,SBI,SUMCNT,T5FID,T5RECTYP,T5TRN,TAPETBL(),TAPETYPE,TAXID,TCC,TRI,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),YEAR,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4

	if 'VT(4) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ

	set VL="180"
	set V=vc5,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(V,1,20)
	set VL=VL_$J("",3-VL.length())_V
	set V=vc6,VO=V do VP2 quit:VFMQ!verror.get()  set V=$E(V,1,12)
	set VL=VL_$J("",23-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(LNM2,1,20)
	set VL=VL_$J("",36-VL.length())_V
	set VL=VL_$J("",56-VL.length())_$E(NAM2,1,12)
	set V=vc7,VO=V do VP4 quit:VFMQ!verror.get()  set V=$J(V,9)
	set VL=VL_$J("",69-VL.length())_V
	set V=vc7,VO=V do VP5 quit:VFMQ!verror.get()  set V=$J(V,9)
	set VL=VL_$J("",78-VL.length())_V
	set V=vc6,VO=V do VP6 quit:VFMQ!verror.get()  set V=$E(V,1,30)
	set VL=VL_$J("",87-VL.length())_V
	set VL=VL_$J("",148-VL.length())_$E(vc8,1,30)
	set VL=VL_$J("",178-VL.length())_$E(vc9,1,30)
	set VL=VL_$J("",208-VL.length())_$E(vc10,1,28)
	set V=vc11,VO=V do VP7 quit:VFMQ!verror.get()  set V=$E(V,1,2)
	set VL=VL_$J("",236-VL.length())_V
	do VP8 quit:VFMQ!verror.get()  set V=$E(RCODE,1,3)
	set VL=VL_$J("",238-VL.length())_V
	set VL=VL_$J("",241-VL.length())_$E(vc12,1,10)
	do VP9 quit:VFMQ!verror.get()  set V=$E(T5FID,1,9)
	set VL=VL_$J("",251-VL.length())_V
	do VP10 quit:VFMQ!verror.get()  set V=$E(RATNO,1,8)
	set VL=VL_$J("",260-VL.length())_V
	set VL=VL_$J("",268-VL.length())_$J(vc13,12)
	set VL=VL_$J("",280-VL.length())_$E(10E30_0,3+$L(0),99)
	set VL=VL_$J("",310-VL.length())_$E(10E30_0,30+$L(0),99)
	do VP11 quit:VFMQ!verror.get()  set V=$E(10E30_TRI,20+$L(TRI),99)
	set VL=VL_$J("",313-VL.length())_V
	set VL=VL_$J("",326-VL.length())_$E(10E30_0,3+$L(0),99)
	set VL=VL_$J("",356-VL.length())_$E(10E30_0,3+$L(0),99)
	set VL=VL_$J("",386-VL.length())_$E(10E30_0,16+$L(0),99)
	set VL=VL_$J("",403-VL.length())_$J(vc1,1)
	do VP12 quit:VFMQ!verror.get()  set V=$E(10E30_T5RECTYP,32+$L(T5RECTYP),99)
	set VL=VL_$J("",404-VL.length())_V
	set VL=VL_$J("",405-VL.length())_$E("CAD",1,3)
	set VL=VL_$J("",648-VL.length())_$J(0,11)
	set VL=VL_$J("",659-VL.length())_$E(10E30_0,22+$L(0),99)
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%NOOPEN,%TIM,ACN,BRTOT(),CAC,CAD1,CAD2,CCITY,CCODE,CNAME,CONAM,CONTACT,CORPID,CSTATE,CTELE,CZIP,FCODE,IAD1,IAD2,ICITY,INAME,INAME2,ISTATE,IZIP,LNM,LNM2,MAD1,MAD2,MCITY,MSTATE,MZIP,NAM,NAM2,RATNO,RC,RCODE,RID,RN,RT,SBI,SUMCNT,T5FID,T5RECTYP,T5TRN,TAPETBL(),TAPETYPE,TAXID,TCC,TRI,VL,YEAR,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+1,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL="905"
	set VL=VL_$J("",3-VL.length())_$E(10E30_TAPETYPE,32+$L(TAPETYPE),99)
	do VP13 quit:VFMQ!verror.get()  set V=$E(TCC,1,8)
	set VL=VL_$J("",4-VL.length())_V
	do VP14 quit:VFMQ!verror.get()  set V=$E(10E30_SBI,32+$L(SBI),99)
	set VL=VL_$J("",12-VL.length())_V
	do VP15 quit:VFMQ!verror.get()  set V=$E(10E30_SUMCNT,27+$L(SUMCNT),99)
	set VL=VL_$J("",13-VL.length())_V
	do VP16 quit:VFMQ!verror.get()  set V=$E(INAME,1,30)
	set VL=VL_$J("",19-VL.length())_V
	do VP17 quit:VFMQ!verror.get()  set V=$E(INAME2,1,30)
	set VL=VL_$J("",49-VL.length())_V
	do VP18 quit:VFMQ!verror.get()  set V=$E(IAD1,1,30)
	set VL=VL_$J("",79-VL.length())_V
	do VP19 quit:VFMQ!verror.get()  set V=$E(IAD2,1,30)
	set VL=VL_$J("",109-VL.length())_V
	do VP20 quit:VFMQ!verror.get()  set V=$E(ICITY,1,28)
	set VL=VL_$J("",139-VL.length())_V
	do VP21 quit:VFMQ!verror.get()  set V=$E(ISTATE,1,2)
	set VL=VL_$J("",167-VL.length())_V
	do VP22 quit:VFMQ!verror.get()  set V=$E(CCODE,1,3)
	set VL=VL_$J("",169-VL.length())_V
	do VP23 quit:VFMQ!verror.get()  set V=$E(IZIP,1,10)
	set VL=VL_$J("",172-VL.length())_V
	do VP24 quit:VFMQ!verror.get()  set V=$E(CONTACT,1,22)
	set VL=VL_$J("",182-VL.length())_V
	do VP25 quit:VFMQ!verror.get()  set V=$E(10E30_CAC,30+$L(CAC),99)
	set VL=VL_$J("",204-VL.length())_V
	do VP26 quit:VFMQ!verror.get()  set V=$E(10E30_CTELE,26+$L(CTELE),99)
	set VL=VL_$J("",207-VL.length())_V
	set VL=VL_$J("",214-VL.length())_$E("E",1,1)
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String ACN,BRTOT(),CAC,CAD1,CAD2,CCITY,CCODE,CNAME,CONTACT,CORPID,CSTATE,CTELE,CZIP,ER,FCODE,IAD1,IAD2,ICITY,INAME,INAME2,ISTATE,IZIP,LNM,LNM2,MAD1,MAD2,MCITY,MSTATE,MZIP,NAM,NAM2,RATNO,RC,RCODE,RT,SBI,SUMCNT,T5FID,T5RECTYP,T5TRN,TAPETYPE,TAXID,TCC,TRI,YEAR,vc1,vc10,vc11,vc12,vc13,vc18,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="381"
	do VP27 quit:VFMQ!verror.get()  set V=$E(T5FID,1,9)
	set VL=VL_$J("",3-VL.length())_V
	do VP28 quit:VFMQ!verror.get()  set V=$E(CNAME,1,30)
	set VL=VL_$J("",12-VL.length())_V
	do VP29 quit:VFMQ!verror.get()  set V=$E(CAD1,1,30)
	set VL=VL_$J("",102-VL.length())_V
	do VP30 quit:VFMQ!verror.get()  set V=$E(CAD2,1,30)
	set VL=VL_$J("",132-VL.length())_V
	do VP31 quit:VFMQ!verror.get()  set V=$E(CCITY,1,28)
	set VL=VL_$J("",162-VL.length())_V
	do VP32 quit:VFMQ!verror.get()  set V=$E(CSTATE,1,2)
	set VL=VL_$J("",190-VL.length())_V
	do VP33 quit:VFMQ!verror.get()  set V=$E(FCODE,1,3)
	set VL=VL_$J("",192-VL.length())_V
	do VP34 quit:VFMQ!verror.get()  set V=$E(CZIP,1,10)
	set VL=VL_$J("",195-VL.length())_V
	do VP35 quit:VFMQ!verror.get()  set V=$E(CONTACT,1,22)
	set VL=VL_$J("",205-VL.length())_V
	do VP36 quit:VFMQ!verror.get()  set V=$J(CAC,3)
	set VL=VL_$J("",227-VL.length())_V
	do VP37 quit:VFMQ!verror.get()  set V=$J(CTELE,7)
	set VL=VL_$J("",230-VL.length())_V
	set V=vc18,VO=V do VP38 quit:VFMQ!verror.get()  set V=$E(V,1,8)
	set VL=VL_$J("",237-VL.length())_V
	set VL=VL_$J("",245-VL.length())_$E(10E30_YEAR,29+$L(YEAR),99)
	set VL=VL_$J("",249-VL.length())_$E(10E30_0,3+$L(0),99)
	set VL=VL_$J("",279-VL.length())_$E(10E30_0,24+$L(0),99)
	set VL=VL_$J("",288-VL.length())_$E(10E30_BRTOT(1),18+$L(BRTOT(1)),99)
	set VL=VL_$J("",303-VL.length())_$E(10E30_0,3+$L(0),99)
	set VL=VL_$J("",333-VL.length())_$E(10E30_0,3+$L(0),99)
	set VL=VL_$J("",363-VL.length())_$E(10E30_0,2+$L(0),99)
	set V=$E(10E30_BRTOT(0),26+$L(BRTOT(0)),99) do VP39 quit:VFMQ!verror.get()
	set VL=VL_$J("",394-VL.length())_V
	do VP40 quit:VFMQ!verror.get()  set V=$E(T5TRN,1,9)
	set VL=VL_$J("",401-VL.length())_V
	do VP41 quit:VFMQ!verror.get()  set V=$J(CORPID,8)
	set VL=VL_$J("",410-VL.length())_V
	do VOM
	quit

VOM	// Output print line
	type Public Number VLC
	type Public String IO,VL

	use IO
	write VL_$J("",672-VL.length()),!
	set VL="",VLC=VLC+1
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,CIF]LNM

	type public String vc14
 type public String V
 
 if vc14=1 set V=""
	quit

VP2	// Column pre-processor - [SYSDEV,CIF]NAM

	type public String vc14
 type public String V
 type Number B,E
 type String X
 if vc14=1 set V="" quit

 /*Set V to first name only. Find 1st non blank character then find 1st blank
  character. set V to everything from 1st non-blank to 1st blank after - 1.*/

 set X=V,V=""
 for B=1:1:X.length() quit:X.extract(B)'=" "
 for E=B:1:X.length() quit:X.extract(E)=" "
 set V=X.extract(B,E-1)
	quit

VP3	// Column pre-processor - Variable: LNM2

	type public String vc14
 type public String LNM2,NAM2
 type Number B,E
 type String X
 set (LNM2,NAM2)=""
 if vc14=1 quit
 type ResultSet rs=Db.select("NAM,LNM","CIF",,"ACN DESC")
 if rs.next() do {
	 set NAM2=rs.getCol("NAM")
	 set LNM2=rs.getCol("LNM")
	 }
 /*Set NAM2 to first name only. Find 1st non blank character then find 1st blank
 character. set NAM2 to everything from 1st non-blank to 1st blank after - 1*/
 set X=NAM2,NAM2=""
 for B=1:1:X.length() quit:X.extract(B)'=" "
 for E=B:1:X.length() quit:X.extract(E)=" "
 set NAM2=X.extract(B,E-1)
	quit

VP4	// Column pre-processor - [SYSDEV,CIF]TAXID

	type public String vc14
 type public String V
 if vc14=1 set V="" quit
 
 // strip out all nonnumeric characters
 type Number I
 type String X
 set X=V,V=""
 for I=1:1:X.length() if X.extract(I)?1N set V=V_X.extract(I)
	quit

VP5	// Column pre-processor - [SYSDEV,CIF]TAXID

	type public String vc14
 type public String V
 if vc14'=1 set V="" quit
 
 // strip out all nonnumeric characters
 type Number I
 type String X
 set X=V,V=""
 for I=1:1:X.length() if X.extract(I)?1N set V=V_X.extract(I)
	quit

VP6	// Column pre-processor - [SYSDEV,CIF]NAM

	type public String vc14
 type public String V
 if vc14'=1 set V=""
	quit

VP7	// Column pre-processor - [SYSDEV,CIF]MSTATE

	type public String vc15
 type public String V

 if (vc15="US")!(vc15="CA") quit
 set V="ZZ"
	quit

VP8	// Column pre-processor - Variable: RCODE

	type public String vc15
 type public String RCODE
 type String CNTRY
 set RCODE="   "
 set CNTRY=vc15
 if 'CNTRY.isNull() do {
 	type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY",1)
	set RCODE=cntry.isoc
	}
	quit

VP9	// Column pre-processor - Variable: T5FID

 type public String T5FID,V
 type Number G
 type String X1,X2

 // T5FID must pattern to 2A7N the A may be blank.
 if V.length()>8 quit
 set (X1,X2)=""
 for G=1:1:V.length() quit:V.extract(G)=""  quit:V.extract(G)?1N  set X1=X1_V.extract(G)
 set X2=V.extract(G,99)
 set X1="  ".extract(1,2-X1.length())_X1
 if X1.length()>2 set X1=X1.extract(X1.length()-1,X1.length())
 set X2="0000000".extract(1,7-X2.length())_X2
 if X2.length()>7 set X2=X2.extract(X2.length()-6,X2.length())
 set V=X1_X2

	quit

VP10	// Column pre-processor - Variable: RATNO

	type public String vc2
 type public String RATNO
 type public Number BOO
 set BOO=vc2
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")
 set RATNO=(utblbrcd.RATNO1).extract(1,8)
	quit

VP11	// Column pre-processor - Variable: TRI

 type public Number BRTOT,TRI
 set BRTOT(0)=BRTOT(0)+1
 set BRTOT(1)=BRTOT(1)+TRI.get()
 set TRI=0
	quit

VP12	// Column pre-processor - Variable: T5RECTYP

	type public String vc4
  /* retrieve the recipient type from the latest account, since all of the
  accounts for the customer should have the same recipient type.*/

 type public String ACNRELC,T5RECTYP
 type Number CID
 set CID=vc4
 type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
 set ACNRELC=dep.ACNRELC
 type RecordRELCODE1 relcode1=Db.getRecord("RELCODE1","REL=:ACNRELC",1)
 set T5RECTYP=relcode1.t5rectype
	quit

VP13	// Column pre-processor - Variable: TCC

 type public String TCC,V
 type Number G
 type String X1,X2

 // TCC must pattern to 2A4N the A may be blank.

 if V.length()>7 quit
 set (X1,X2)=""
 for G=1:1:V.length() quit:V.extract(G)=""  quit:V.extract(G)?1N  set X1=X1_V.extract(G)
 set X2=V.extract(G,99)
 set X1="  ".extract(1,2-X1.length())_X1
 if X1.length()>2 set X1=X1.extract(X1.length()-1,X1.length())
 set X2="000000".extract(1,6-X2.length())_X2
 if X2.length()>6 set X2=X2.extract(X2.length()-5,X2.length())
 set V=X1_X2
	quit

VP14	// Column pre-processor - Variable: SBI

 type public Number SBI
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set SBI=cuvar.sbi
	quit

VP15	// Column pre-processor - Variable: SUMCNT

	type public String vc13
 type public Number ACN,SUMCNT

 set SUMCNT=0
 set ACN=vc13
 type ResultSet rs=Db.select("BOO","NR4EINF","ACN=:ACN","BOO")
 while rs.next() do {
	set SUMCNT=SUMCNT+1
	}
	quit

VP16	// Column pre-processor - Variable: INAME

 type public String INAME

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set INAME=cuvar.iname
	quit

VP17	// Column pre-processor - Variable: INAME2

 type public String INAME2

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set INAME2=cuvar.iname2
	quit

VP18	// Column pre-processor - Variable: IAD1

 type public String IAD1

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set IAD1=cuvar.iad1
	quit

VP19	// Column pre-processor - Variable: IAD2

 type public String IAD2
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set IAD2=cuvar.iad2
	quit

VP20	// Column pre-processor - Variable: ICITY

 
 type public String ICITY
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set ICITY=cuvar.icity
	quit

VP21	// Column pre-processor - Variable: ISTATE

 type public String ISTATE

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set ISTATE=cuvar.istate
	quit

VP22	// Column pre-processor - Variable: CCODE

	type public String vc16
 type public String CCODE
 type String CNTRY
 set CCODE="   "
 set CNTRY=vc16
 if 'CNTRY.isNull() do {
 	type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY",1)
 	set CCODE=cntry.isoc
	}
	quit

VP23	// Column pre-processor - Variable: IZIP

 type public String IZIP
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set IZIP=cuvar.izip
	quit

VP24	// Column pre-processor - Variable: CONTACT

 type public String CONTACT

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CONTACT=cuvar.contact
	quit

VP25	// Column pre-processor - Variable: CAC

 type public Number CAC
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CAC=cuvar.cac
	quit

VP26	// Column pre-processor - Variable: CTELE

 type public Number CTELE

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CTELE=cuvar.ctele

	quit

VP27	// Column pre-processor - Variable: T5FID

 type public String T5FID,V
 type Number G
 type String X1,X2

 // T5FID must pattern to 2A7N the A may be blank.
 if V.length()>8 quit
 set (X1,X2)=""
 for G=1:1:V.length() quit:V.extract(G)=""  quit:V.extract(G)?1N  set X1=X1_V.extract(G)
 set X2=V.extract(G,99)
 set X1="  ".extract(1,2-X1.length())_X1
 if X1.length()>2 set X1=X1.extract(X1.length()-1,X1.length())
 set X2="0000000".extract(1,7-X2.length())_X2
 if X2.length()>7 set X2=X2.extract(X2.length()-6,X2.length())
 set V=X1_X2
	quit

VP28	// Column pre-processor - Variable: CNAME

 type public String CNAME

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CNAME=cuvar.cname
	quit

VP29	// Column pre-processor - Variable: CAD1

 type public String CAD1

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CAD1=cuvar.cad1
	quit

VP30	// Column pre-processor - Variable: CAD2

 type public String CAD2
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CAD2=cuvar.cad2
	quit

VP31	// Column pre-processor - Variable: CCITY

 type public String CCITY
 
 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CCITY=cuvar.ccity
	quit

VP32	// Column pre-processor - Variable: CSTATE

 type public String CSTATE

 set CSTATE=CUVAR.CSTATE
	quit

VP33	// Column pre-processor - Variable: FCODE

	type public String vc17
 type public String FCODE
 type String CNTRY

 set FCODE="   "
 set CNTRY=vc17
 if 'CNTRY.isNull() do {
 	type RecordSTBLCNTRY cntry=Db.getRecord("STBLCNTRY","CNTRY=:CNTRY",1)
	set FCODE=cntry.isoc
	}
	quit

VP34	// Column pre-processor - Variable: CZIP

 type public String CZIP
 
 set CZIP=CUVAR.CZIP
	quit

VP35	// Column pre-processor - Variable: CONTACT

 type public String CONTACT

 set CONTACT=CUVAR.CONTACT
	quit

VP36	// Column pre-processor - Variable: CAC

 type public Number CAC
 set CAC=CUVAR.CAC
	quit

VP37	// Column pre-processor - Variable: CTELE

 type public Number CTELE
 set CTELE=CUVAR.CTELE
	quit

VP38	// Column pre-processor - Variable: RT

	type public String vc18
 type public String RT

 set RT=vc18
 if RT.length()>8 set RT=RT.extract(2,9)
	quit

VP39	// Column post-processor - Variable: BRTOT(0)

 type public String X

 set X=X.translate(" ",0)
	quit

VP40	// Column pre-processor - Variable: T5TRN

 type public String T5TRN
 set T5TRN=CUVAR.T5TRN
	quit

VP41	// Column pre-processor - Variable: CORPID

 type public Number CORPID
 set CORPID=CUVAR.CORPID
	quit
