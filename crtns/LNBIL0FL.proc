LNBIL0FL(RecordLNBIL0 lnbil0, String vpar, Boolean vparNorm) // LNBIL0 - Internal Bill Control Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (141)            11/04/2005
	// Trigger Definition (3)                      05/12/2006
	// Journal File Definition (3)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnbil0.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnbil0,.vxins(),10,"|")
	if %O = 1 quit:'lnbil0.isChanged()  do AUDIT^UCUTILN(lnbil0,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnbil0.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNBIL0",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNBIL0","CID = :lnbil0.cid")      // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordLNBIL0 lnbil0 = Db.getRecord("LNBIL0","CID=:CID")
	if (%ProcessMode = 2) do {
		do lnbil0.setMode(2)

		do LNBIL0FL(lnbil0,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNBIL0 lnbil0

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNBIL0","CID = :lnbil0.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(lnbil0,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^BIL(vobj(lnbil0,-3),n)=vobj(lnbil0,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(lnbil0,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(lnbil0,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^BIL(vobj(lnbil0,-3),n)=vobj(lnbil0,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.lnbil0)              // Create journal files
	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordLNBIL0 lnbil0
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^BIL(vobj(lnbil0,-3),n)) quit:n.isNull()  if 'vobj(lnbil0,n).data(),^BIL(vobj(lnbil0,-3),n).data()#2 set vobj(lnbil0,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNBIL0 lnbil0

	if 'vkeychg.get(),lnbil0.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/JOURNAL/" do VJOURNAL(.lnbil0)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^BIL(vobj(lnbil0,-3))                             // Delete Record
	quit


vreqn // Validate required data items

	type public RecordLNBIL0 lnbil0

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNBIL0 lnbil0

	if lnbil0.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNBIL0","MSG",1767,"LNBIL0."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNBIL0 lnbil0
	if 'lnbil0.cid.isNull() set vfkey("^ACN("_""""_lnbil0.cid_""""_","_50_")")="LNBIL0(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNBIL0 lnbil0
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lnbil0.cid") set vERRMSG = $$^MSG(8563,"LNBIL0(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PE01EA").exists()!vx("PE02EA").exists()!vx("PE03EA").exists()!vx("PE04EA").exists()!vx("PE05EA").exists()!vx("PE06EA").exists()!vx("PE07EA").exists()!vx("PE08EA").exists()!vx("PE09EA").exists()!vx("PE10EA").exists()!vx("PE11EA").exists()!vx("PE12EA").exists()!vx("PE13EA").exists()!vx("PE14EA").exists()!vx("PE15EA").exists()!vx("PE16EA").exists()!vx("PE17EA").exists()!vx("PE18EA").exists()!vx("PE19EA").exists()!vx("PE20EA").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After insert

	type public RecordLNBIL0 lnbil0
	/*
	---------- Revision History ------------------------------------------
	03/10/06 - AlagarsamyS - 20036
		   Modified the code to avoid undefined error in the section BILCHK.
	
	03/09/06 - AlagarsamyS - 19088
		   Modified code to avoid undefined error.

	05/26/05 - KinI - 15524
		   Modified BILCHK section to check lastseq before referring
		   to lnbil1() array since this variable existence guarantees 
		   lnbil1 level data.

	04/17/03 - CARROLLJ - 51349
		   Remove to array and passed lnbil1 object to LNPTS3

	02/04/03 - CARROLLJ - 51349
		   Removed dead code that called LNBLDE.
	
	10/03/02 - CARROLLJ - 43583
		   Changed BILFUNCS call to call linetag BILSEQ of BILFUNCS.

	
	*/
	
	type RecordLN ln=Db.getRecord("LN","CID")

	new data,elmnt,fre,BIL,XCID
	set XCID=lnbil0.cid

	if ln.dist1fre'="*" do {
		new distno
		if lnbil0.pe01ea="I" set distno=lnbil0.pe01pf quit 
		if lnbil0.pe02ea="I" set distno=lnbil0.pe02pf quit 
		if lnbil0.pe03ea="I" set distno=lnbil0.pe03pf quit 
		if lnbil0.pe04ea="I" set distno=lnbil0.pe04pf quit 
		if lnbil0.pe05ea="I" set distno=lnbil0.pe05pf quit 
		if lnbil0.pe06ea="I" set distno=lnbil0.pe06pf quit 
		if lnbil0.pe07ea="I" set distno=lnbil0.pe07pf quit 
		if lnbil0.pe08ea="I" set distno=lnbil0.pe08pf quit 
		if lnbil0.pe09ea="I" set distno=lnbil0.pe09pf quit 
		if lnbil0.pe10ea="I" set distno=lnbil0.pe10pf quit 
		if lnbil0.pe11ea="I" set distno=lnbil0.pe11pf quit 
		if lnbil0.pe12ea="I" set distno=lnbil0.pe12pf quit 
		if lnbil0.pe13ea="I" set distno=lnbil0.pe13pf quit 
		if lnbil0.pe14ea="I" set distno=lnbil0.pe14pf quit 
		if lnbil0.pe15ea="I" set distno=lnbil0.pe15pf quit 
		if lnbil0.pe16ea="I" set distno=lnbil0.pe16pf quit 
		if lnbil0.pe17ea="I" set distno=lnbil0.pe17pf quit 
		if lnbil0.pe18ea="I" set distno=lnbil0.pe18pf quit 
		if lnbil0.pe19ea="I" set distno=lnbil0.pe19pf quit 
		if lnbil0.pe20ea="I" set distno=lnbil0.pe20pf quit 
		set distno=1
		}

	set fre=ln.dist1fre
	if "*"'[fre do {
		new njd,XAF,XCID
		set njd=$$NJD^UFRE(%SystemDate,fre,.XAF) quit:ER
		set XCID=lnbil0.cid
		if %ProcessMode'=2 do Db.update("LN","DIST1AF=:XAF","CID=:XCID","/NOJOURNAL")
		}
	
	// Checks are for verify mode only
	if %ProcessMode'=2 quit 
	
	// Ensure that escrow accounts point to loan record
	do { quit:ER 
		new pe,pmtelem,XESCCID
		do PMTELEM^LNFUNCS(lnbil0.cid,.pmtelem)
		set pe="" for  set pe=$O(pmtelem(pe)) quit:pe=""  do { quit:ER 
			new aref
			set XESCCID=$P(pmtelem(pe),"#",2)
			if 'XESCCID quit
			set aref=Db.getOneRow("AREF","DEP","XESCCID") quit:ER 
			// Escrow Acct has Invalid Loan Acct Linkage
			if $G(aref)'=lnbil0.cid do Runtime.setErrXBAD("LNBIL0",120) quit:ER 
			}
		}
	
	// Perform various checks against file consistency between LNBIL0, LNBIL1, & LN
	do { quit:ER 
		new altval,col,n,oldval,xbad
		do BILCHK(.lnbil0,.ln)
		// Move errors in xbad
		set n=""
		for  set n=$O(xbad(n)) quit:n=""  do { quit:ER 
			set col=$P(xbad(n),"|",1) 
			set oldval=$P(xbad(n),"|",2) 
			set altval=$P(xbad(n),"|",3)
			if col="" do Runtime.setErrXBAD("LNBIL0",n) quit:ER 
			if col'="" do Runtime.setErrXBAD("LNBIL0",n,col,oldval,altval) quit:ER 
			}
		}
	quit 
	


BILCHK(RecordLNBIL0 lnbil0,RecordLN ln)
	
	// Return errors in the form of xbad(err_num)=column|old_value|alt_value
	
	new BL,BLCID,LNBIL1,QUIT,amtleft,curesc,curint,curesc,curprn,elem,firstseq,i,lastdate,lastseq
	new lstschdt,oldunsat,outstndg,partpmt,pmtamtdu,pmtduedt,schseq,seq,sseq,totdue,tmp1,uncolesc
	new uncolprn,uncolint
	
	if 'Db.isDefined("LNBIL0","lnbil0.cid") do Runtime.setErrXBAD("LNBIL0",30) quit 
	
	// Get elements from BL(cid,0)
	set BLCID="|"_lnbil0.pe01_"|"_lnbil0.pe02_"|"_lnbil0.pe03_"|"_lnbil0.pe04_"|"_lnbil0.pe05_"|"_lnbil0.pe06_"|"
	set BLCID=BLCID_lnbil0.pe07_"|"_lnbil0.pe08_"|"_lnbil0.pe09_"|"_lnbil0.pe10_"|"_lnbil0.pe11_"|"_lnbil0.pe12_"|"
	set BLCID=BLCID_lnbil0.pe13_"|"_lnbil0.pe14_"|"_lnbil0.pe15_"|"_lnbil0.pe16_"|"_lnbil0.pe17_"|"_lnbil0.pe18_"|"
	set BLCID=BLCID_lnbil0.pe19_"|"_lnbil0.pe20
	for i=2:1 set elem=$P(BLCID,"|",i) quit:elem=""  do {
		set elem(i)=$P(elem,"#",1)
		if elem(i)="I" set elem("I")=+$P(elem,"#",4) quit 
		if elem(i)="P" set elem("P")=+$P(elem,"#",4) quit 
		}
	
	set (lstschdt,pmtduedt,oldunsat)=""
	set (curesc,curint,curprn,uncolesc,uncolint,uncolprn)=0
	set (lastdate,outstndg,partpmt,pmtamtdu,totdue)=0

	type RecordLNBIL1 lnbil1()
	set lastseq=$$BILSEQ^BILFUNCS(.lnbil1(),CID,.firstseq,.LNBIL1)
	
	set seq=""
	if lastseq for  set seq=$O(LNBIL1(seq)) q:seq=""  do BILCHK1(.lnbil1(),.ln)
	
	if 'oldunsat set oldunsat=lastseq+1
	set QUIT=0
	set seq=""
	if lastseq  for sseq=firstseq:1:lastseq do { quit:QUIT 
		set seq=sseq
		set pmtamtdu=lnbil1(sseq).ctab
		if partpmt<pmtamtdu set QUIT=1 quit 
		set partpmt=partpmt-pmtamtdu
		if partpmt=0,sseq=lastseq set seq=""
		}
		
	if seq>0 set pmtamtdu=lnbil1(seq).ctab
	else  set seq=lastseq+1 set pmtamtdu=0       
	
	/*
	Check error conditions and set up xbad
	Last bill sequence inconsistent with internal bill
	*/
	if +lastseq'=+ln.bseq set xbad(2)="LN.BSEQ|"_ln.bseq_"|"_lastseq
	
	if ln.dist1fre'="" do {
		new dseq,duedate,err
		set dseq=ln.dseq
		if (lastseq) , (ln.dseq '> ln.bseq) set duedate=lnbil1(dseq).cdpd
		else  set duedate=ln.schnd if lastseq>ln.schseq,ln.lbdd'="" do {
			set njd=$$NJD^UFRE(ln.lbdd,ln.dist1fre) quit:ER
			if njd>duedate set duedate=njd
			}
		if duedate=ln.dist1nd quit 
		if ln.dist1nd set err=1
		// Not payment schedule loan
		else  do { quit 
			new data,XJD,XCID
			if ln.dist1fre'="*" set err=1 quit 
			set XJD=%SystemDate
			set XCID=cid
	
			type ResultSet rs=Db.select("PDD","LNPS1","CID=:XCID AND PDD>:XJD") 
	    		if rs.isEmpty() quit
	    		set data=rs.next(),data=rs.getCol(1)
			if $G(data)'="" set err=1
			}
		// Next due date inconsistent with internal bill
		if $G(err) set xbad(5)="LN.DIST1ND|"_ln.dist1nd_"|"_duedate
		}
	
	if seq>1 do {
		new pmtduedt,prev
		set prev=$O(LNBIL1(seq),-1) quit:prev="" 

		// Payment Due Date
		set pmtduedt=lnbil1(prev).cdpd
		// Last due date inconsistent with internal bill
		if pmtduedt'=ln.dist1ld set xbad(11)="LN.DIST1LD|"_ln.dist1ld_"|"_pmtduedt
		}
	
	// Seq number of next due date not supported by bills
	if seq'=ln.dseq set xbad(24)="LN.DSEQ|"_ln.dseq_"|"_seq
	
	// Last bill due date inconsistent with internal bill
	if pmtduedt'=ln.lbdd set xbad(3)="LN.LBDD|"_ln.lbdd_"|"_pmtduedt
	
	// Partial payment balance inconsistent with internal bill
	if partpmt'=ln.ppa set xbad(6)="LN.PPA|"_ln.ppa_"|"_partpmt
	
	// Pmt amt for next due date inconsistent with bills
	if pmtamtdu,pmtamtdu'=ln.dpmt set xbad(25)="LN.DPMT|"_ln.dpmt_"|"_pmtamtdu
	
	// Last scheduled payment date is invalid
	if lstschdt&(lstschdt'=ln.schld) set xbad(18)="LN.SCHLD|"_ln.schld_"|"_lstschdt
	else  if %SystemDate'<ln.dfp,ln.schld>%SystemDate,ln.dist1fre'="" set xbad(18)="LN.SCHLD|"_ln.schld
	
	// Scheduled due seq number not supported by bill
	set schseq=ln.schseq
	if (ln.schseq) , (lastseq) do {
		if lnbil1(schseq).exists() set tmp1=lnbil1(schseq).cdpd
		if tmp1.get()'=lstschdt set xbad(31)="LN.SCHSEQ|"_ln.schseq
		}
	if ('ln.schseq) , (lastseq) do {
		new seq1
		set seq1=1
		if lnbil1(1).cdpd'>lstschdt set xbad(31)="LN.SCHSEQ|"_ln.schseq
		}
	
	// Total amount due inconsistent with internal bills
	if totdue'=ln.tdue set xbad(26)="LN.TDUE|"_ln.tdue_"|"_totdue
	
	// Total bill amount inconsistent with internal bill
	if outstndg'=ln.tba set xbad(19)="LN.TBA|"_ln.tba_"|"_outstndg
	
	// Oldest unsatisfied bill not supported by bills
	if oldunsat'=ln.oseq set xbad(20)="LN.OSEQ|"_ln.oseq_"|"_oldunsat
	
	// Uncollected prin not supported by internal bills
	if uncolprn'=ln.unpr set xbad(21)="LN.UNPR|"_ln.unpr_"|"_uncolprn
	
	// Uncollected int not supported by internal bills
	if uncolint'=ln.unin set xbad(22)="LN.UNIN|"_ln.unin_"|"_uncolint
	
	// Uncollected escrow not supported by internal bills
	if uncolesc'=ln.unes set xbad(23)="LN.UNES|"_ln.unes_"|"_uncolesc
	
	// CURRENT PRINCIPAL Not Supported by Bills
	if curprn'=ln.cupr set xbad(40)="LN.CUPR|"_ln.cupr_"|"_curprn
	
	// CURRENT INTEREST Not Supported by Bills
	if curint'=ln.cuin set xbad(41)="LN.CUIN|"_ln.cuin_"|"_curint
	
	// Current Escrow not supported by Bills
	if curesc'=ln.cues set xbad(42)="LN.CUES|"_ln.cues_"|"_curesc
	quit 


	
BILCHK1(RecordLNBIL1 lnbil1(),RecordLN ln) // Check individual bill record


	new advance,bilcid,bildamts,bildrem,cpib,cpid,i,origpi,pmtelem
	new rec,rempi,uncoll,xfee,BLINFO,SEQ

	// Uncollected
	set uncoll=seq<ln.schseq

	// Advance
	set advance=seq>ln.schseq         
	set amtleft=lnbil1(seq).casd
	set pmtduedt=lnbil1(seq).cdpd
	set pmtamtdu=lnbil1(seq).ctab
	if pmtduedt'>%SystemDate set lstschdt=pmtduedt
	
	set (pmtelem,bildamts,bildrem,origpi,rempi)=0
	set bilcid="|"_lnbil1(seq).pe01_"|"_lnbil1(seq).pe02_"|"_lnbil1(seq).pe03_"|"_lnbil1(seq).pe04_"|"
	set bilcid=bilcid_lnbil1(seq).pe05_"|"_lnbil1(seq).pe06_"|"_lnbil1(seq).pe07_"|"_lnbil1(seq).pe08_"|"
	set bilcid=bilcid_lnbil1(seq).pe09_"|"_lnbil1(seq).pe10_"|"_lnbil1(seq).pe11_"|"_lnbil1(seq).pe12_"|"
	set bilcid=bilcid_lnbil1(seq).pe13_"|"_lnbil1(seq).pe14_"|"_lnbil1(seq).pe15_"|"_lnbil1(seq).pe16_"|"
	set bilcid=bilcid_lnbil1(seq).pe17_"|"_lnbil1(seq).pe18_"|"_lnbil1(seq).pe19_"|"_lnbil1(seq).pe20_"|"
	for i=2:1 set pmtelem=$P(bilcid,"|",i) quit:pmtelem=""  do BILPE
	set SEQ=seq
	new rs type ResultSet rs=Db.select("BFAMT,BRFAMT","LNBIL5","CID=:CID AND SCHSEQ=:SEQ AND DUEAMT=1")		
	if 'rs.isEmpty() while rs.next() do {
		set bildamts=bildamts+rs.getCol(1)
		set bildrem=bildrem+rs.getCol(2)
		set totdue=totdue+rs.getCol(2)
		if advance set totdue=totdue-rs.getCol(1)
		}
	
	// If int determined at pymt, use P&I amounts from ^BIL piece 1
	// Total P&I still due
	set cpid=+lnbil1(seq).cpid

	// Total P&I billed
	set cpib=+lnbil1(seq).cpib
	if $$IDP^LNPTS3(lnbil1(seq)) do {
		set bildamts=bildamts+cpib
		set bildrem=bildrem+cpid
		set totdue=totdue+$S(advance:cpid-cpib,1:cpid)
		}
	else  do {
		// Value of Original P&I in Bill Record Unsupported
		if origpi'=cpib set xbad(48)="LNBIL1.CPIB|"_cpib_"|"_origpi

		// Value of Remaining P&I in Bill Record Unsupported
		if rempi'=cpid set xbad(49)="LNBIL1.CPID|"_cpid_"|"_rempi
		}
	
	// Billed pmt element amts do not equal bill total
	if pmtamtdu-bildamts set xbad(12)="LNBIL1.CPIB|"_pmtamtdu_"|"_bildamts
	
	// Bill amounts remaining do not equal bill total
	if amtleft-bildrem set xbad(13)="LNBIL1.CPID|"_amtleft_"|"_bildrem
	
	// Bills Not Dated Consecutively in Bill File
	if pmtduedt'>lastdate set xbad(4)="LNBIL1.SCHSEQ|"_seq
	set lastdate=pmtduedt
	
	if 'oldunsat,amtleft set oldunsat=seq
	
	// Total applied
	set partpmt=partpmt+pmtamtdu-amtleft
	
	// Total bill file outstanding
	set outstndg=outstndg+amtleft
	quit 


	
BILPE	// Look at each payment element


	new amt,billed,due,type
	set type=$P(pmtelem,"#",1) 
	set billed=$P(pmtelem,"#",3) 
	set due=$P(pmtelem,"#",4)
	set bildamts=bildamts+billed
	set bildrem=bildrem+due
	set amt=due
	if advance set amt=due-billed
	
	// Pmt element not in Internal Bill Control file
	if '$D(elem(i)) set xbad(27)="LNBIL1.SCHSEQ|"_seq

	// Pmt elements at control and detail levels differ
	else  if type'=elem(i) set xbad(28)="LNBIL1.SCHSEQ|"_seq
	
	set totdue=totdue+amt
	if $$ESC^LNU(type) do {
		if uncoll set uncolesc=uncolesc+amt
		else  set curesc=curesc+amt quit 
		}
	else  if type="P" do {
		set origpi=origpi+billed set rempi=rempi+due
		if uncoll set uncolprn=uncolprn+amt
		else  set curprn=curprn+amt
		}
	else  if type="I" do {
		set origpi=origpi+billed set rempi=rempi+due
		if uncoll set uncolint=uncolint+amt
		else  set curint=curint+amt
		}
	quit 

vau1 // Trigger AU_EA - After update PEnnEA columns

	type public RecordLNBIL0 lnbil0
	/*
	If any of the escrow acronym columns change, the change must be propogated
	to the records in LNBIL1
	*/
	
	new order
	set order=lnbil0.pe01ea_"-"_lnbil0.pe02ea_"-"
	set order=order_lnbil0.pe03ea_"-"_lnbil0.pe04ea_"-"_lnbil0.pe05ea_"-"
	set order=order_lnbil0.pe06ea_"-"_lnbil0.pe07ea_"-"_lnbil0.pe08ea_"-"
	set order=order_lnbil0.pe09ea_"-"_lnbil0.pe10ea_"-"_lnbil0.pe11ea_"-"
	set order=order_lnbil0.pe12ea_"-"_lnbil0.pe13ea_"-"_lnbil0.pe14ea_"-"
	set order=order_lnbil0.pe15ea_"-"_lnbil0.pe16ea_"-"_lnbil0.pe17ea_"-"
	set order=order_lnbil0.pe18ea_"-"_lnbil0.pe19ea_"-"_lnbil0.pe20ea_"-"
	
	do LNBIL1^LNFUNCS(lnbil0.cid,order) quit:ER 
	quit

vbi1 // Trigger BEFORE_INSERT - Before insert LNBIL0

	type public RecordLNBIL0 lnbil0
	/*
	---------- Revision History ------------------------------------------

	05/09/06 - SANTHUMS - CR 20797
		   Modified to ensure that LN.DISPPI should store in 
		   LNBIL0 table as a lump amount if LN.ODIO=1 and LN.DISPPI
		   contains amount.
	
	05/05/05 - KinI - 15524
		   Modified to directly update PE0*LA sub-fields rather then
		   PE0* master field pieces per DBI standards.
		   Eliminated PE0*, Payment Element update since it's treated
		   as a special kind of computed column.
		   
	08/24/00 - APPLEYARDM - 39574
		   Modified placement of lump amount in BL0.  Amount should be
		   placed in subfield 5 of payment element per the file 
		   definition for LNBIL0, not subfield 3. 

	09/14/99 - CARROLLJ - 31126
		   Convert to PSL.
	

	If LN record already exists, add odd days interest to first bill's 
	interest. If LNBIL0 is set up first, this will happen in LN before 
	update trigger.
	*/
	
	type RecordLN ln = Db.getRecord("LN","CID=:lnbil0.cid",1)
	if ln.getMode() = 0 quit	// No loan yet

	if ('ln.disppi)!('ln.odio) quit
	
	do {
		if lnbil0.pe01ea="I" set lnbil0.pe01la=ln.disppi quit
		if lnbil0.pe02ea="I" set lnbil0.pe02la=ln.disppi quit
		if lnbil0.pe03ea="I" set lnbil0.pe03la=ln.disppi quit
		if lnbil0.pe04ea="I" set lnbil0.pe04la=ln.disppi quit
		if lnbil0.pe05ea="I" set lnbil0.pe05la=ln.disppi quit
		if lnbil0.pe06ea="I" set lnbil0.pe06la=ln.disppi quit
		if lnbil0.pe07ea="I" set lnbil0.pe07la=ln.disppi quit
		if lnbil0.pe08ea="I" set lnbil0.pe08la=ln.disppi quit
		if lnbil0.pe09ea="I" set lnbil0.pe09la=ln.disppi quit
		if lnbil0.pe10ea="I" set lnbil0.pe10la=ln.disppi quit
		if lnbil0.pe11ea="I" set lnbil0.pe11la=ln.disppi quit
		if lnbil0.pe12ea="I" set lnbil0.pe12la=ln.disppi quit
		if lnbil0.pe13ea="I" set lnbil0.pe13la=ln.disppi quit
		if lnbil0.pe14ea="I" set lnbil0.pe14la=ln.disppi quit
		if lnbil0.pe15ea="I" set lnbil0.pe15la=ln.disppi quit
		if lnbil0.pe16ea="I" set lnbil0.pe16la=ln.disppi quit
		if lnbil0.pe17ea="I" set lnbil0.pe17la=ln.disppi quit
		if lnbil0.pe18ea="I" set lnbil0.pe18la=ln.disppi quit
		if lnbil0.pe19ea="I" set lnbil0.pe19la=ln.disppi quit
		if lnbil0.pe20ea="I" set lnbil0.pe20la=ln.disppi quit
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNBIL0 lnbil0

	if (%O = 2) do vload

	if vobj(lnbil0,0).exists() do {

		if lnbil0.pe01.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE01", vRM) quit
		set X = lnbil0.pe01da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE01DA", vRM) quit
		if lnbil0.pe01ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE01EA", vRM) quit
		set X = lnbil0.pe01la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE01LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe01na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE01NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe01pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE01PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe01pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE01PF", vRM) quit
		if lnbil0.pe02.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE02", vRM) quit
		set X = lnbil0.pe02da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE02DA", vRM) quit
		if lnbil0.pe02ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE02EA", vRM) quit
		set X = lnbil0.pe02la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE02LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe02na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE02NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe02pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE02PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe02pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE02PF", vRM) quit
		if lnbil0.pe03.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE03", vRM) quit
		set X = lnbil0.pe03da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE03DA", vRM) quit
		if lnbil0.pe03ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE03EA", vRM) quit
		set X = lnbil0.pe03la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE03LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe03na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE03NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe03pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE03PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe03pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE03PF", vRM) quit
		if lnbil0.pe04.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE04", vRM) quit
		set X = lnbil0.pe04da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE04DA", vRM) quit
		if lnbil0.pe04ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE04EA", vRM) quit
		set X = lnbil0.pe04la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE04LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe04na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE04NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe04pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE04PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe04pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE04PF", vRM) quit
		if lnbil0.pe05.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE05", vRM) quit
		set X = lnbil0.pe05da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE05DA", vRM) quit
		if lnbil0.pe05ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE05EA", vRM) quit
		set X = lnbil0.pe05la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE05LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe05na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE05NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe05pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE05PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe05pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE05PF", vRM) quit
		if lnbil0.pe06.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE06", vRM) quit
		set X = lnbil0.pe06da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE06DA", vRM) quit
		if lnbil0.pe06ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE06EA", vRM) quit
		set X = lnbil0.pe06la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE06LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe06na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE06NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe06pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE06PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe06pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE06PF", vRM) quit
		if lnbil0.pe07.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE07", vRM) quit
		set X = lnbil0.pe07da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE07DA", vRM) quit
		if lnbil0.pe07ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE07EA", vRM) quit
		set X = lnbil0.pe07la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE07LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe07na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE07NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe07pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE07PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe07pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE07PF", vRM) quit
		if lnbil0.pe08.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE08", vRM) quit
		set X = lnbil0.pe08da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE08DA", vRM) quit
		if lnbil0.pe08ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE08EA", vRM) quit
		set X = lnbil0.pe08la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE08LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe08na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE08NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe08pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE08PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe08pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE08PF", vRM) quit
		if lnbil0.pe09.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE09", vRM) quit
		set X = lnbil0.pe09da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE09DA", vRM) quit
		if lnbil0.pe09ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE09EA", vRM) quit
		set X = lnbil0.pe09la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE09LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe09na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE09NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe09pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE09PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe09pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE09PF", vRM) quit
		if lnbil0.pe10.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE10", vRM) quit
		set X = lnbil0.pe10da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE10DA", vRM) quit
		if lnbil0.pe10ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE10EA", vRM) quit
		set X = lnbil0.pe10la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE10LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe10na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE10NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe10pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE10PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe10pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE10PF", vRM) quit
		if lnbil0.pe11.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE11", vRM) quit
		set X = lnbil0.pe11da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE11DA", vRM) quit
		if lnbil0.pe11ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE11EA", vRM) quit
		set X = lnbil0.pe11la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE11LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe11na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE11NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe11pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE11PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe11pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE11PF", vRM) quit
		if lnbil0.pe12.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE12", vRM) quit
		set X = lnbil0.pe12da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE12DA", vRM) quit
		if lnbil0.pe12ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE12EA", vRM) quit
		set X = lnbil0.pe12la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE12LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe12na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE12NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe12pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE12PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe12pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE12PF", vRM) quit
		if lnbil0.pe13.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE13", vRM) quit
		set X = lnbil0.pe13da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE13DA", vRM) quit
		if lnbil0.pe13ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE13EA", vRM) quit
		set X = lnbil0.pe13la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE13LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe13na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE13NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe13pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE13PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe13pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE13PF", vRM) quit
		if lnbil0.pe14.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE14", vRM) quit
		set X = lnbil0.pe14da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE14DA", vRM) quit
		if lnbil0.pe14ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE14EA", vRM) quit
		set X = lnbil0.pe14la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE14LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe14na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE14NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe14pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE14PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe14pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE14PF", vRM) quit
		if lnbil0.pe15.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE15", vRM) quit
		set X = lnbil0.pe15da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE15DA", vRM) quit
		if lnbil0.pe15ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE15EA", vRM) quit
		set X = lnbil0.pe15la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE15LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe15na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE15NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe15pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE15PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe15pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE15PF", vRM) quit
		if lnbil0.pe16.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE16", vRM) quit
		set X = lnbil0.pe16da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE16DA", vRM) quit
		if lnbil0.pe16ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE16EA", vRM) quit
		set X = lnbil0.pe16la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE16LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe16na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE16NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe16pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE16PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe16pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE16PF", vRM) quit
		if lnbil0.pe17.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE17", vRM) quit
		set X = lnbil0.pe17da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE17DA", vRM) quit
		if lnbil0.pe17ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE17EA", vRM) quit
		set X = lnbil0.pe17la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE17LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe17na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE17NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe17pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE17PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe17pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE17PF", vRM) quit
		if lnbil0.pe18.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE18", vRM) quit
		set X = lnbil0.pe18da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE18DA", vRM) quit
		if lnbil0.pe18ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE18EA", vRM) quit
		set X = lnbil0.pe18la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE18LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe18na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE18NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe18pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE18PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe18pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE18PF", vRM) quit
		if lnbil0.pe19.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE19", vRM) quit
		set X = lnbil0.pe19da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE19DA", vRM) quit
		if lnbil0.pe19ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE19EA", vRM) quit
		set X = lnbil0.pe19la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE19LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe19na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE19NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe19pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE19PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe19pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE19PF", vRM) quit
		if lnbil0.pe20.length()>60 set vRM = $$^MSG(1076,60) do vdderr("PE20", vRM) quit
		set X = lnbil0.pe20da if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PE20DA", vRM) quit
		if lnbil0.pe20ea.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PE20EA", vRM) quit
		set X = lnbil0.pe20la if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE20LA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe20na if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE20NA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe20pa if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNBIL0.PE20PA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = lnbil0.pe20pf if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("PE20PF", vRM) quit
	}
	set X = lnbil0.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNBIL0","MSG",979,"LNBIL0."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNBIL0 lnbil0)	//LNBIL0 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			quit:'vx.data()
			for vdi="PE01PA","PE02PA","PE03PA","PE04PA","PE05PA","PE06PA","PE07PA","PE08PA","PE09PA","PE10PA","PE11PA","PE12PA","PE13PA","PE14PA","PE15PA","PE16PA","PE17PA","PE18PA","PE19PA","PE20PA" if vx(vdi).data() do vj1(.lnbil0,vdi)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U_CURRPMT
			for vdi="PE01LA","PE02LA","PE03LA","PE04LA","PE05LA","PE06LA","PE07LA","PE08LA","PE09LA","PE10LA","PE11LA","PE12LA","PE13LA","PE14LA","PE15LA","PE16LA","PE17LA","PE18LA","PE19LA","PE20LA" if vx(vdi).data() do vj2(.lnbil0,vdi)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U_LUMPPMT
			for vdi="PE01NA","PE02NA","PE03NA","PE04NA","PE05NA","PE06NA","PE07NA","PE08NA","PE09NA","PE10NA","PE11NA","PE12NA","PE13NA","PE14NA","PE15NA","PE16NA","PE17NA","PE18NA","PE19NA","PE20NA" if vx(vdi).data() do vj3(.lnbil0,vdi)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U_NEXTCHG
			}
		else  if TSRC="O" do {
			quit:'vx.data()
			for vdi="PE01PA","PE02PA","PE03PA","PE04PA","PE05PA","PE06PA","PE07PA","PE08PA","PE09PA","PE10PA","PE11PA","PE12PA","PE13PA","PE14PA","PE15PA","PE16PA","PE17PA","PE18PA","PE19PA","PE20PA" if vx(vdi).data() do vj1(.lnbil0,vdi)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U_CURRPMT
			for vdi="PE01LA","PE02LA","PE03LA","PE04LA","PE05LA","PE06LA","PE07LA","PE08LA","PE09LA","PE10LA","PE11LA","PE12LA","PE13LA","PE14LA","PE15LA","PE16LA","PE17LA","PE18LA","PE19LA","PE20LA" if vx(vdi).data() do vj2(.lnbil0,vdi)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U_LUMPPMT
			for vdi="PE01NA","PE02NA","PE03NA","PE04NA","PE05NA","PE06NA","PE07NA","PE08NA","PE09NA","PE10NA","PE11NA","PE12NA","PE13NA","PE14NA","PE15NA","PE16NA","PE17NA","PE18NA","PE19NA","PE20NA" if vx(vdi).data() do vj3(.lnbil0,vdi)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U_NEXTCHG
			}
		}

	quit


vj1(RecordLNBIL0 lnbil0,String vdi)	// HIST_U_CURRPMT  Table HIST  LNBIL0 update - current pmt amounts

	type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey

	type String vold,vnew

	set vold=vx(vdi).piece("|",1)
	set vnew=vx(vdi).piece("|",2)

	set v1=lnbil0.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL5^PROCLNBL("update",lnbil0.cid,0,"LNBIL0",vdi,vold,vnew,,$$^MSG(2119))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNBIL0 lnbil0,String vdi)	// HIST_U_LUMPPMT  Table HIST  LNBIL0 update - lump pmt amounts

	type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey

	type String vold,vnew

	set vold=vx(vdi).piece("|",1)
	set vnew=vx(vdi).piece("|",2)

	set v1=lnbil0.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL5^PROCLNBL("update",lnbil0.cid,0,"LNBIL0",vdi,vold,vnew,,$$^MSG(2117))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNBIL0 lnbil0,String vdi)	// HIST_U_NEXTCHG  Table HIST  LNBIL0 update - next change amounts

	type Public String vx(),EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey

	type String vold,vnew

	set vold=vx(vdi).piece("|",1)
	set vnew=vx(vdi).piece("|",2)

	set v1=lnbil0.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$JRNL5^PROCLNBL("update",lnbil0.cid,0,"LNBIL0",vdi,vold,vnew,,$$^MSG(2122))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordLNBIL0 lnbil0

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(lnbil0,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(lnbil0,-3) = vnewkey // Copy new keys into object
	type RecordLNBIL0 vnewrec = lnbil0.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNBIL0",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	set vobj(lnbil0,-3) = vux.piece("|",1)                 // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
