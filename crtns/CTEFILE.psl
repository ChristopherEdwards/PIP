CTEFILE(RecordCUSTTOEVENTS custtoevents, String vpar, Boolean vparNorm) // CUSTTOEVENTS - Customer to Events Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (2)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = custtoevents.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(custtoevents,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(custtoevents,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("EVENTSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CUSTTOEVENTS",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CUSTTOEVENTS","ACN = :custtoevents.acn and EVENTSEQ = :custtoevents.eventseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String EVENTSEQ

	type RecordCUSTTOEVENTS custtoevents = Db.getRecord("CUSTTOEVENTS","ACN=:ACN,EVENTSEQ=:EVENTSEQ")
	if (%ProcessMode = 2) do {
		do custtoevents.setMode(2)

		do CTEFILE(custtoevents,vpar)
	}
	else  do VINDEX(custtoevents)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCUSTTOEVENTS custtoevents

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CUSTTOEVENTS","ACN = :custtoevents.acn and EVENTSEQ = :custtoevents.eventseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(custtoevents)) S ^EVENTREL("C",vobj(custtoevents,-3),vobj(custtoevents,-4))=vobj(custtoevents)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.custtoevents) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCUSTTOEVENTS custtoevents

	if vpar["/INDEX/" do VINDEX(.custtoevents)             // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^EVENTREL("C",vobj(custtoevents,-3),vobj(custtoevents,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordCUSTTOEVENTS custtoevents

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCUSTTOEVENTS custtoevents

	if custtoevents.acn.isNull() do vreqerr("ACN") quit
	if custtoevents.eventseq.isNull() do vreqerr("EVENTSEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CUSTTOEVENTS","MSG",1767,"CUSTTOEVENTS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCUSTTOEVENTS custtoevents
	if 'custtoevents.acn.isNull() set vfkey("^CIF("_""""_custtoevents.acn_""""_","_1_")")="CUSTTOEVENTS(ACN) -> CIF"
	if 'custtoevents.eventseq.isNull() set vfkey("^EVENTS("_""""_custtoevents.eventseq_""""_")")="CUSTTOEVENTS(EVENTSEQ) -> EVENTS"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCUSTTOEVENTS custtoevents
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CIF",":custtoevents.acn") set vERRMSG = $$^MSG(8563,"CUSTTOEVENTS(ACN) -> CIF") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if 'Db.isDefined("EVENTS",":custtoevents.eventseq") set vERRMSG = $$^MSG(8563,"CUSTTOEVENTS(EVENTSEQ) -> EVENTS") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCUSTTOEVENTS custtoevents

	set X = custtoevents.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = custtoevents.eventseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EVENTSEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CUSTTOEVENTS","MSG",979,"CUSTTOEVENTS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordCUSTTOEVENTS custtoevents) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.custtoevents)

	quit
	

vi1(RecordCUSTTOEVENTS custtoevents) // Maintain EVENTSEQ index entries (Event Seuquence to Customer)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = custtoevents.eventseq
	type String v3 = custtoevents.acn

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^EVENTREL("C",vobj(custtoevents,-3),vobj(custtoevents,-4)))#2,'$D(^EVENTIDX("CUSTREL",v2,v3)) do vidxerr("EVENTSEQ")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^EVENTIDX("CUSTREL",v2,v3)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^EVENTIDX("CUSTREL",v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CUSTTOEVENTS")

	while ds.next() do {
		type RecordCUSTTOEVENTS custtoevents=ds.getRecord("CUSTTOEVENTS")
		if vlist.contains("VINDEX") do VINDEX(.custtoevents) quit
		if vlist.contains("EVENTSEQ") do vi1(.custtoevents)
	}

	quit


public VIDXBLD1(RecordCUSTTOEVENTS custtoevents, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.custtoevents) quit
	if vlist.contains("EVENTSEQ") do vi1(.custtoevents)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CUSTTOEVENTS","MSG",1225,"CUSTTOEVENTS."_di)

	quit


vkchged // Access key changed

	type public RecordCUSTTOEVENTS custtoevents

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("EVENTSEQ").exists() set vux("EVENTSEQ") = vx("EVENTSEQ")
	do vkey(1) set voldkey = custtoevents.acn_","_custtoevents.eventseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = custtoevents.acn_","_custtoevents.eventseq // Copy new keys into object
	type RecordCUSTTOEVENTS vnewrec = custtoevents.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CUSTTOEVENTS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCUSTTOEVENTS custtoevents

	if vux("ACN").exists() set custtoevents.acn = vux("ACN").piece("|",i)
	if vux("EVENTSEQ").exists() set custtoevents.eventseq = vux("EVENTSEQ").piece("|",i)
	quit

VIDXPGM()	quit "CTEFILE"	// Location of index program

