LETTERU		/*

	  5/2000  - Walton

	  	    This procedure is a utility package for producing
		    standardize letters to be packaged in a daily export.
		    The functions are called from generated routines base
		    on entries made in the tables UTBLFORMBCH, UTBLFORM,
		    UTBLFORM0, and UTBLFORMVAR.

	  	    FILE    - generates the entry into the table LETTER.
		    TRN	    - is the HEADER for each DocuCorp letter.
		    TRIGGER - creates the entire letter for one true test.
		    FILESTM - generates the entry into the table LETSTMT.
		    GETCO   - returns the Company Code
	  	    See procedure LETTERCOM for more details.

	---Revision History----------------------------------------------
	08/06/2007 - VANITHAK - CR 28476
		Modified TRN section to replace %MASK with %MSKD so that 
		the current system date will be extracted into the 
		statment file.
		
	04/10/2007 - SHANKK - CR26568
		Fixed undefined error from section GETCO when XCO was not
		defined.  Removed changes from CR25917.
	
	03/19/07 - SHANKK - CR25917
		In section FILESTM, changed letstmt.record length to 500 max
	
	12/21/06 - PUTTASWH - CR 24538
		   Modified to remove compilation warnings.
		   
	01/30/06 Radhika - CR 17423
		 .Eliminated PSL deprecated features and warnings.
		 .Removed revision history prior to 2004.

	*/
	

	quit

public FILE(Number XACN,
	Number XCID,
	String XFORM,
	String XCO,
	Number XVAR,
	Number XRECTYPE,
	Number XSEQ,
	String XREC)	
	
	set XACN=+XACN.get()
	set XCID=+XCID.get()
	set XFORM=XFORM.get("") 
	if XFORM.isNull() set XFORM=" "
	set XCO=XCO.get("*") 
	if XCO.isNull() set XCO="*"
	set XVAR=+XVAR.get()
	set XRECTYPE=XRECTYPE.get()
	if XRECTYPE.isNull() set XRECTYPE=" "
	set XSEQ=+XSEQ.get()

	type RecordLETTER letter=Class.new("RecordLETTER")

	set letter.sjd=%SystemDate
	set letter.acn=XACN
	set letter.cid=XCID
	set letter.form=XFORM
	set letter.co=XCO
	set letter.var=XVAR
	set letter.rectype=XRECTYPE
	set letter.seq=+XSEQ
	set letter.record=XREC

	// 48604 - Call Filer for TRN records
        if XRECTYPE#1000=1 do letter.save()
        else  do letter.bypassSave()

	quit
	

public TRN(Number XCID,
	Number XACN,
	Number AFLG,
	String XFORM,
	Number XVAR)	
	
	type public String AGRP,CO,%MSKD
	type Boolean FIX
	type Date DATE,SDATE,XDATE
	type Number ABOO,BOO,CNTRYFLG,MF,XKEY
	type String d,NAM,OMR,REC,TITLE1,TITLE2,TJDVAL,XCUVCO,XCO
	type String CITY,CNTRY,MZIP,MAD1,MAD2,MAD3,MAD4,STATE

	set XCID=+XCID.get()
	set XACN=+XACN.get()
	set AFLG=+AFLG.get()
	set XFORM=XFORM.get()
	if XFORM.isNull() set XFORM=" "
	set XVAR=+XVAR.get()

	set FIX=CUVAR.letfix

	if FIX set d=""
	else  set d=$C(126)

	set CNTRYFLG=0
	// myersk 11/15/00 use TJD from CUVAR instead of %SystemDate
	set XCUVCO=CUVAR.co
	set (DATE,SDATE)=%SystemDate
	set DATE=DATE.toString(%MSKD.get("MM/DD/YEAR"))
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:XACN")
	
	if CO.get().isNull() set CO=cif.co 
	if CO.isNull() set CO=XCUVCO

	set BOO=cif.boo

	// myersk 04/30/02 use AGRP instead of CO as key to UTBLFORMVAR	
	type RecordUTBLFORMVAR fvar=Db.getRecord("UTBLFORMVAR","CO=:AGRP,FORM=:XFORM,VAR=:XVAR")
	set OMR=fvar.omr
	set TJDVAL=fvar.tjdval

	set NAM=cif.nam

	set (TITLE1,TITLE2)=""

	if 'XCID.get().isNull() do {
		type RecordACN ac=Db.getRecord("ACN","CID=:XCID")
		set TITLE1=ac.title1
		set TITLE2=ac.title2
		}

	if AFLG=1,'XCID.get().isNull() do {
	
		type RecordACNADDR addr=Db.getRecord("ACNADDR","CID=:XCID")
		set MAD1=addr.ad1
		set MAD2=addr.ad2
		set MAD3=addr.ad3
		set MAD4=addr.ad4
		set CITY=addr.city
		set STATE=addr.state
		set MZIP=addr.mzip
		set CNTRY=addr.cntry
		}

	if AFLG=0 do {
		set MAD1=cif.mad1
		set MAD2=cif.mad2
		set MAD3=cif.mad3
		set MAD4=cif.mad4
		set CITY=cif.mcity
		set STATE=cif.mstate
		set MZIP=cif.mzip
		set CNTRY=cif.mcntry
		}

	if AFLG=2!(AFLG=3) do {
		set XDATE=SDATE+TJDVAL.piece("T",2)

		if AFLG=2 set XKEY=5
		else  set XKEY=XCID.get()

		type RecordDTJADDRCHG dtjaddr=Db.getRecord("DTJADDRCHG","XDATE,XACN,XKEY")

		set MAD1=dtjaddr.oad1
		set MAD2=dtjaddr.oad2
		set MAD3=dtjaddr.oad3
		set MAD4=dtjaddr.oad4
		set CITY=dtjaddr.ocity
		set STATE=dtjaddr.ostate
		set MZIP=dtjaddr.ozip
		set CNTRY=dtjaddr.ocntry
		}

	if CNTRY'="US" set CNTRYFLG=1

	if 'XCID.get() set XCID=""

        set MF=cif.mf
        type RecordACN acn1=Db.getRecord("ACN","CID=:XCID")
        set ABOO=acn1.boo

        // 48835 - Use N(ewed) variable XCO for blank-filling - not CO
	set XCO=CO

	if FIX do {
		set XCUVCO=$$BLK^FIL(XCUVCO,6)
		set XCO=$$BLK^FIL(CO,12)
		set BOO=$$ZERO^FIL(BOO,7)
        	set XFORM=$$BLK^FIL(XFORM,12)
        	set XVAR=$$ZERO^FIL(XVAR,3)
        	set XACN=$$ZERO^FIL(XACN,12)
        	set NAM=$$BLK^FIL(NAM,40)
        	set TITLE1=$$BLK^FIL(TITLE1,40)
        	set TITLE2=$$BLK^FIL(TITLE2,40)
		set MAD1=$$BLK^FIL(MAD1,40)
        	set MAD2=$$BLK^FIL(MAD2,40)
        	set MAD3=$$BLK^FIL(MAD3,40)
        	set MAD4=$$BLK^FIL(MAD4,40)
        	set CITY=$$BLK^FIL(CITY,20)
        	set STATE=$$BLK^FIL(STATE,2)
        	set MZIP=$$BLK^FIL(MZIP,10)
		set XCID=$$ZERO^FIL(XCID,12)
        	set OMR=$$BLK^FIL(OMR,9)
	        set CNTRY=$$BLK^FIL(CNTRY,2)
		set MF=$$BLK^FIL(MF,1)
		set ABOO=$$BLK^FIL(ABOO,6)
		}

	set REC="TRN"_d_XCUVCO_d_XCO_d_BOO_d_XFORM_d_XVAR_d_DATE_d_XACN_d
	set REC=REC_NAM_d_TITLE1_d_TITLE2_d_MAD1_d_MAD2_d_MAD3_d_MAD4_d
	set REC=REC_CITY_d_STATE_d_MZIP_d_XCID_d_OMR_d_CNTRY_d_CNTRYFLG_d
	set REC=REC_MF_d_ABOO

	quit $S(FIX:$$BLK^FIL(REC,416),1:REC)

TRIGGER(String AGRP,String FORM,Number VAR)	

	type public Number ACN,LETTJD,XCID
	type public String cflg()
	type Number AFLG,CID,CONCID,cnt,i,IRECTYPE,seq,SCNT,SKIP,XCNT,xi
	type String CLS,CONFLG,DDATA,LDATA,pkeys,RECORDS,REC,SCD,XREC
	type String recseq,x

	if FORM="NEWCUSTOMER" set CID=0

	set (seq,SCNT,SKIP)=""
	if CID.get().isNull() set CID=0

	type RecordUTBLFORMVAR fmvar=Db.getRecord("UTBLFORMVAR","CO=:AGRP,FORM=:FORM,VAR=:VAR")
	set RECORDS=fmvar.rectypes
	set AFLG=fmvar.addrflg

	set CONFLG=fmvar.conflg
	if 'CONFLG.isNull() for xi=1:1:CONFLG.length(",") set cflg(CONFLG.piece(",",xi))=""

	// if consolidation is allowed set SKIP=1 when TRN is defined
	// for same new accounts, only check TRN for customer number
	set CONCID=0			// 50672 myersk
	if '(cflg.order()).isNull() do {
		if $S(CONFLG["300":1,CONFLG["301":1,CONFLG["400":1,CONFLG["401":1,1:0) do {  quit
			if 'Db.currVal("LETTER","LETTJD,AGRP,FORM,VAR,ACN").isNull() set SKIP=1
			set CONCID=1	// 50672 myersk - Consolidting on CID
			}
		type RecordLETTER lt=Db.getRecord("LETTER","SJD=:LETTJD,CO=:AGRP,FORM=:FORM,VAR=:VAR,ACN=:ACN,CID=:CID,RECTYPE=1,SEQ=1",1)
		if lt.getMode() set SKIP=1
		}

	// myersk 43751: added logic to increment XCNT by units of 1000.
	// This allows multiple TRANSACTION letters to get created.
        set XCNT=0
        if 'SKIP do {
                set REC=$$TRN(CID.get(),ACN.get(),AFLG,FORM,VAR)
             	type RecordLETTER ltr=Db.getRecord("LETTER","SJD=:LETTJD,CO=:AGRP,FORM=:FORM,VAR=:VAR,ACN=:ACN,CID=:CID,RECTYPE=1,SEQ=1",1)
                if 'ltr.getMode() set XCNT=0
                else  set XCNT=((Db.currVal("LETTER","LETTJD,AGRP,FORM,VAR,ACN,CID")\1000)+1)*1000

		// myersk - 50672: File TRN record for Consolidated Letters under CID 0
		if CONCID do FILE(ACN.get(),0,FORM,AGRP,VAR,XCNT+1,1,REC) I 1
                else  do FILE(ACN.get(),CID.get(0),FORM,AGRP,VAR,XCNT+1,1,REC)
        	}
 	if CID.get()'=0 do {
 		type RecordACN an=Db.getRecord("ACN","CID=:XCID")
		set CLS=an.cls
		if CLS="D" do {
			set SCD=$$XDEP08^DEPCDI(CID)
			set DDATA=SCD.piece("|",1)_$C(9)_SCD.piece("|",2)_$C(9)_SCD.piece("|",3)
			}
		else  do {  
			set SCD=$$XLN14^LNCDI(CID)
                        set LDATA=SCD.piece("|",1)_$C(9)_SCD.piece("|",2)_$C(9)_SCD.piece("|",3)	
			}
		}	
	set i=""
	for cnt=1:1:RECORDS.length(",") set XREC(RECORDS.piece(",",cnt))=""
	for  set i=XREC(i).order() quit:i.isNull()  do {
		if i=625 quit	// kph 9/6/00

		// myersk 50672 - File 890 Record for Consolidated Letters under CID 0
		if i=890,CONCID do 890^LETTERU2(0) quit
		if i=890 do 890^LETTERU2(CID) quit

		if i=650 do 650^LETTERU2(CID) quit	// burnsm 09/13/2000

		if SKIP,'cflg(i).exists() quit  // can not condense record type
		type RecordUTBLFORM0 frm=Db.getRecord("UTBLFORM0","RECTYPE=:i")
		set pkeys=frm.acckeys

		// myersk - 43751: use XCNT+i as LETTER.RECTYPE
                set IRECTYPE=XCNT+i
		if $S(i=201:1,i=202:1,i=211:1,1:0) do {  quit
			if i=201 set SCNT=SCNT+1
			if CLS.get()="D" set pkeys=DDATA.piece($C(9),SCNT)
			else  set pkeys=(LDATA.get()).piece($C(9),SCNT)
			if pkeys.isNull() quit
			if i=201 set seq=seq+1
			set x="set REC=$$"_i_"^LETTERF("_pkeys_")"
			#ACCEPT DATE=12/08/03;PGM=John Carroll
			xecute x
			// myersk - 43751: use XCNT+i as LETTER.RECTYPE
			do FILE(ACN.get(),CID.get(0),FORM,AGRP,VAR,IRECTYPE,seq,REC)
			} 
		if ((i=300)!(i=301)),CLS.get()'="D" quit
		// myersk - 42264: quit if i=402 and CLS'=L
		if ((i=400)!(i=401)!(i=402)),CLS.get()'="L" quit
		// myersk - 43751: use XCNT+i as LETTER.RECTYPE
		set x="set REC=$$"_i_"^LETTERF("_pkeys_")"
		#ACCEPT DATE=12/08/03;PGM=John Carroll
		xecute x
		set recseq=Db.nextVal("LETTER","LETTJD,AGRP,FORM,VAR,ACN,CID,IRECTYPE")
		if recseq.isNull() set recseq=1
		// myersk - 43751: use XCNT+i as LETTER.RECTYPE
		// myersk - 50672: File 100 Record for Consolidated Letters under CID 0
		if i=100,CONCID do FILE(ACN.get(),0,FORM,AGRP,VAR,IRECTYPE,recseq,REC) I 1
		else  do FILE(ACN.get(),CID.get(0),FORM,AGRP,VAR,IRECTYPE,recseq,REC)
		}
	quit

public FILESTM(Number XACN,
	Number XCID,
	String XFORM,
	String XCO,
	Number XVAR,
	String XRECTYPE,
	Number XSEQ,
	Number XSTMGRP,
	String XREC)  

        set XACN=+XACN.get()
        set XCID=+XCID.get()
        set XFORM=XFORM.get(" ")
        set XCO=XCO.get("*")
        set XVAR=+XVAR.get()
        set XRECTYPE=XRECTYPE.get(" ")
        set XSEQ=+XSEQ.get()
        set XSTMGRP=+XSTMGRP.get()

        type RecordLETSTMT letstmt=Class.new("RecordLETSTMT")
 
        set letstmt.sjd=%SystemDate
        set letstmt.acn=XACN
        set letstmt.cid=XCID
        set letstmt.form=XFORM
        set letstmt.co=XCO
        set letstmt.var=XVAR
        set letstmt.rectype=XRECTYPE
        set letstmt.seq=+XSEQ
        set letstmt.stmgrp=XSTMGRP
        set letstmt.record=XREC.extract(1,416) 
 
	// 48604 - Call Filer for TRN Records
        if XRECTYPE#1000=1 do letstmt.save()
        else  do letstmt.bypassSave()
 
        quit 

public GETCO(Number XACN,
	Number XCID)

	/* Returns the Company Code by checking the account
	     if null, checks the CIF
	     if still null, returns [CUVAR]CO
	*/
	type String XCO,XCLS
	type RecordCIF cif
		
	set XCO=""
	set XACN=+XACN.get()
	set XCID=+XCID.get()
	if XCID do {
		type RecordACN acnno=Db.getRecord("ACN","CID=:XCID")
		set XCLS=acnno.cls
		
		if XCLS="L" do {
			type RecordLN ln=Db.getRecord("LN","CID=:XCID")
			set XCO=ln.co
			}
		
		if XCLS="D" do {
			type RecordDEP dept=Db.getRecord("DEP","CID=:XCID")
			set XCO=dept.co
			}
		
		if XCO.isNull(),XACN=0 set XACN=acnno.acn 
	}
	// CR26568
	if XCO.isNull(),XACN do {
		if 'Db.isDefined("CIF","ACN=:XACN") quit
		type RecordCIF cif=Db.getRecord("CIF","ACN=:XACN")
		set XCO=cif.co
		}
	
	if XCO.isNull() set XCO=CUVAR.co
	quit XCO
 #OPTION ResultClass ON
Public String vSIG()	quit "60848^40635^Vanitha Krishnasamy^10841"	// Signature - LTD^TIME^USER^SIZE
