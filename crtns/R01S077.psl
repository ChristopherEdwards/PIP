R01S077	// SCA005 - Chronological Activity Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 09/10/2007 15:37 - root

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1=$$DAT^%ZM(TJD)
	type String VIN10="ALL"
	type String VIN11="ALL"
	type String VIN12="ALL"
	type String VIN2=$S($D(BRCD):BRCD,1:"ALL")
	type String VIN3=$S($D(UID):UID,1:"ALL")
	type String VIN4="ALL"
	type String VIN5="ALL"
	type String VIN6="ALL"
	type String VIN7="ALL"
	type String VIN8="ALL"
	type String VIN9="ALL"

	set RID="SCA005"
	set RN="Chronological Activity Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[TTX]TJD|[TTX]TJD:DISTINCT:NOVAL||D EXT^DBSQRY||T|Balancing Date|||||"
	set %TAB("VIN10")="|255||[TTX]TLO|||D EXT^DBSQRY||T|Transaction Location|||||"
	set %TAB("VIN11")="|255||[TTX]TSO|||D EXT^DBSQRY||T|Transaction Source of Funds|||||"
	set %TAB("VIN12")="|255||[TTX]TCMT|||D EXT^DBSQRY||T|Transaction Comment|||||"
	set %TAB("VIN2")="|255||[TTX]BRCD|[UTBLBRCD]:NOVAL||D EXT^DBSQRY||T|Branch Code|||||"
	set %TAB("VIN3")="|255||[TTX]UID|[TTX]UID:DISTINCT:NOVAL||D EXT^DBSQRY||T|User ID|||||"
	set %TAB("VIN4")="|255||[TTX]TSEQ|[TTX]TSEQ:DISTINCT:NOVAL||S TSEQ=X D EXT^DBSQRY||T|Transaction Sequence|||||"
	set %TAB("VIN5")="|255||[TTX]CLS|[STBLTRNCLS]:NOVAL||S CLS=X D EXT^DBSQRY||T|Transaction Class|||||"
	set %TAB("VIN6")="|255||[TTX]GRP|||D EXT^DBSQRY||T|Transaction Group|||||"
	set %TAB("VIN7")="|255||[TTX]ETC|[TRN]||D EXT^DBSQRY||T|Transaction Code|||||"
	set %TAB("VIN8")="|255||[TTX]TAMT|||D EXT^DBSQRY||T|Transaction Amount|||||"
	set %TAB("VIN9")="|255||[TTX]TIM|||D EXT^DBSQRY||T|Clock Time|||||"

	set %READ="IO/REQ,VIN1#0,VIN2#0,VIN3#0,VIN4#0,VIN5#0,VIN6#0,VIN7#0,VIN8#0,VIN9#0,VIN10#0,VIN11#0,VIN12#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String VIN1,VIN2,VIN3,VIN4,VIN5,VIN6,VIN7,VIN8,VIN9,VIN10,VIN11,VIN12
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,BRCD,CID,CONAM,FEPSEQ,RID,RN,SAVSEQ,TSO1,UID,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA005",RN="Chronological Activity Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA005","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[TTX]TJD "_VIN1,SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[TTX]BRCD "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[TTX]UID "_VIN3,SEQ=SEQ+1
		if VIN4.get()="" set VIN4="ALL"
		if VIN4'="ALL" set DQQRY(SEQ)="[TTX]TSEQ "_VIN4,SEQ=SEQ+1
		if VIN5.get()="" set VIN5="ALL"
		if VIN5'="ALL" set DQQRY(SEQ)="[TTX]CLS "_VIN5,SEQ=SEQ+1
		if VIN6.get()="" set VIN6="ALL"
		if VIN6'="ALL" set DQQRY(SEQ)="[TTX]GRP "_VIN6,SEQ=SEQ+1
		if VIN7.get()="" set VIN7="ALL"
		if VIN7'="ALL" set DQQRY(SEQ)="[TTX]ETC "_VIN7,SEQ=SEQ+1
		if VIN8.get()="" set VIN8="ALL"
		if VIN8'="ALL" set DQQRY(SEQ)="[TTX]TAMT "_VIN8,SEQ=SEQ+1
		if VIN9.get()="" set VIN9="ALL"
		if VIN9'="ALL" set DQQRY(SEQ)="[TTX]TIM "_VIN9,SEQ=SEQ+1
		if VIN10.get()="" set VIN10="ALL"
		if VIN10'="ALL" set DQQRY(SEQ)="[TTX]TLO "_VIN10,SEQ=SEQ+1
		if VIN11.get()="" set VIN11="ALL"
		if VIN11'="ALL" set DQQRY(SEQ)="[TTX]TSO "_VIN11,SEQ=SEQ+1
		if VIN12.get()="" set VIN12="ALL"
		if VIN12'="ALL" set DQQRY(SEQ)="[TTX]TCMT "_VIN12,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("TTX,TRN") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC2|"_"Balancing Date"_"|VIN1|"_VIN1.get()
		set VBNRINFO("PROMPTS",2)="WC2|"_"Branch Code"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC2|"_"User ID"_"|VIN3|"_VIN3.get()
		set VBNRINFO("PROMPTS",4)="WC2|"_"Transaction Sequence"_"|VIN4|"_VIN4.get()
		set VBNRINFO("PROMPTS",5)="WC2|"_"Transaction Class"_"|VIN5|"_VIN5.get()
		set VBNRINFO("PROMPTS",6)="WC2|"_"Transaction Group"_"|VIN6|"_VIN6.get()
		set VBNRINFO("PROMPTS",7)="WC2|"_"Transaction Code"_"|VIN7|"_VIN7.get()
		set VBNRINFO("PROMPTS",8)="WC2|"_"Transaction Amount"_"|VIN8|"_VIN8.get()
		set VBNRINFO("PROMPTS",9)="WC2|"_"Clock Time"_"|VIN9|"_VIN9.get()
		set VBNRINFO("PROMPTS",10)="WC2|"_"Transaction Location"_"|VIN10|"_VIN10.get()
		set VBNRINFO("PROMPTS",11)="WC2|"_"Transaction Source of Funds"_"|VIN11|"_VIN11.get()
		set VBNRINFO("PROMPTS",12)="WC2|"_"Transaction Comment"_"|VIN12|"_VIN12.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Chronological Activity Report"
		set VBNRINFO("PGM")="R01S077"
		set VBNRINFO("RID")="SCA005"
		set VBNRINFO("TABLES")="TTX,TRN"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TTX]TJD"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TTX]BRCD"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TTX]UID"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TTX]TSEQ"

		set VBNRINFO("DOC",1)="The Chonological Activity Report provides a chronological listing of the"
		set VBNRINFO("DOC",2)="transactions processed on a specific teller balancing date.  The user may"
		set VBNRINFO("DOC",3)="specify a variety of query values.  In addition to displaying the above"
		set VBNRINFO("DOC",4)="information, this report identifies the transaction as a debit or credit;"
		set VBNRINFO("DOC",5)="indicates if the transaction is PMed, posted off-line, or caused a passbook"
		set VBNRINFO("DOC",6)="update; and lists any comments associated with the transaction."
		set VBNRINFO("DOC",7)=""
		set VBNRINFO("DOC",8)="This version of the Chronological Activity report is only generated in a single"
		set VBNRINFO("DOC",9)="currency database."
		set VBNRINFO("DOC",10)=""
		set VBNRINFO("DOC",11)="For further information, refer to the ""Teller/Branch Balancing Reference"
		set VBNRINFO("DOC",12)="Manual."""

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"TTX.TJD,TTX.BRCD,TTX.UID,TTX.TSEQ,TRN.CLS,TRN.GRP,"
	set VSELECT=VSELECT_"TRN.ETC,TTX.CID,TTX.TAMT,TTX.TIM,TTX.ITC,TTX.TCMT,"
	set VSELECT=VSELECT_"TTX.TRC,TTX.EFD,TTX.TLO,TTX.ITC1,TTX.TSO"

	#ACCEPT DATE=09/10/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"TTX,TRN",VWHERE,"TTX.TJD,TTX.BRCD,TTX.UID,TTX.TSEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17
	set vc1=V.piece($C(9),1)			// TTX.TJD
	set vc2=V.piece($C(9),2)			// TTX.BRCD
	set vc3=V.piece($C(9),3)			// TTX.UID
	set vc4=V.piece($C(9),4)			// TTX.TSEQ
	set vc5=V.piece($C(9),5)			// TRN.CLS
	set vc6=V.piece($C(9),6)			// TRN.GRP
	set vc7=V.piece($C(9),7)			// TRN.ETC
	set vc8=V.piece($C(9),8)			// TTX.CID
	set vc9=V.piece($C(9),9)			// TTX.TAMT
	set vc10=V.piece($C(9),10)			// TTX.TIM
	set vc11=V.piece($C(9),11)			// TTX.ITC
	set vc12=V.piece($C(9),12)			// TTX.TCMT
	set vc13=V.piece($C(9),13)			// TTX.TRC
	set vc14=V.piece($C(9),14)			// TTX.EFD
	set vc15=V.piece($C(9),15)			// TTX.TLO
	set vc16=V.piece($C(9),16)			// TTX.ITC1
	set vc17=V.piece($C(9),17)			// TTX.TSO
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 /*
  ---- Revision History ------------------------------------------------
 
        05/05/05 - TITOVE - CR 14192
		   Converted into PSL.

 */

 type public Number BRCD, SAVSEQ
 type public String UID

 set (BRCD,SAVSEQ,UID) = ""
	quit

VRPOST	// Report post-processor

 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public Number CID

 set CID = ""
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,VH0=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,VH0=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL4	// Detail
	type public String %TIM,BRCD,CID,FEPSEQ,IOSL,SAVSEQ,TSO1,UID,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if VLC+4>IOSL do VHDG0 quit:VFMQ

	set V=vc4,VO=V do VP1 quit:VFMQ!verror.get()  set V=$J(V,6) set VL=" "_V
	set VL=VL_$J("",9-VL.length())_$E(vc5,1,1)
	set VL=VL_$J("",12-VL.length())_$E(vc6,1,6)
	set VL=VL_$J("",19-VL.length())_$E(vc7,1,12)
	set VL=VL_$J("",32-VL.length())_$E(vc8,1,12)
	set VL=VL_$J("",46-VL.length())_$J(vc9,12)
	set V="DRCR" do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",59-VL.length())_V
	set VL=VL_$J("",66-VL.length())_$J($$TIM^%ZM(vc10),11)
	do VP3 quit:VFMQ!verror.get()  set V=$E(TSO1,1,18)
	set VL=VL_$J("",75-VL.length())_V
	set V=vc11,VO=V set V=$E(V,1,3) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",94-VL.length())_V		// [SYSDEV,TTX]ITC
	set VL=VL_$J("",99-VL.length())_$E(vc12,1,32)
	do VOM
	set V=vc13,VO=V do VP5 quit:VFMQ!verror.get()  set V=$J(V,6) set VL=" "_V
	set V=vc14,VO=V set V=$J($$DAT^%ZM(V),10) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",64-VL.length())_V		// [SYSDEV,TTX]EFD
	set VL=VL_$J("",75-VL.length())_$E(TSO(1),1,18)
	set VL=VL_$J("",99-VL.length())_$E(vc15,1,20)
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                                                           "_$E(TSO(2),1,18)
	if 'VL.translate(" ").isNull() do VOM
	set VL="                                                                           "_$E(TSO(3),1,18)
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BRCD,CID,CONAM,FEPSEQ,RID,RN,SAVSEQ,TSO1,UID,VL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_" [ "_vc2_"-"_vc3_" ] { "_RID_" }"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="Balancing Date"
	set VL=VL_$J("",16-VL.length())_$J($$DAT^%ZM(vc1),10)
	do VOM
	set VL="" do VOM
	set VL="    "_"Seq     Group  Tran         Account             Amount          Time   Source             POU  Comment"
	do VOM
	do VP7 quit:VFMQ!verror.get()  set V=$E(FEPSEQ,1,7) set VL=V
	set VL=VL_$J("",65-VL.length())_"Effective                         Location"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,TTX]TSEQ

 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public Number SAVSEQ,TSEQ
 type public String VL

 if 'TSEQ.isNull(),(TSEQ\1000 '= (SAVSEQ\1000)) set VL = "" do VOM

 set SAVSEQ = TSEQ
	quit

VP2	// Column post-processor - DRCR

	type public String vc16,vc11
 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public String V

 set V = $S(vc16=1:"CR",vc11=0:"DR",1:"")
	quit

VP3	// Column pre-processor - Variable: TSO1

	type public String vc17
 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public String TSO(), TSO1

 set TSO1 = vc17
 
 // Break TSO data into 3 separate fields
 do TSO^HISTP(.TSO1,.TSO,3,18)
	quit

VP4	// Column post-processor - [SYSDEV,TTX]ITC

 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public String V, VO

 set V = $S(VO.extract(8):"P",1:" ")

 set V = V_$S(VO.extract(10):"O",1:" ")

 set V = V_$S(VO.extract(11):"U",1:" ")
	quit

VP5	// Column pre-processor - [SYSDEV,TTX]TRC

 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public String V, ZDDP

 if ZDDP = "REMOTE" set V = ""
	quit

VP6	// Column post-processor - [SYSDEV,TTX]EFD

 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public Date V, VO

 if VO = %SystemDate set V = ""
	quit

VP7	// Column pre-processor - Variable: FEPSEQ

 /*
  ---- Revision History ------------------------------------------------
 
	05/05/05 - TITOVE - CR 14192
		  Converted into PSL.
 
 */

 type public String FEPSEQ, ZDDP

 type String DDPLIT = "DDP"

 set (FEPSEQ,ZDDP) = ""

 type ResultSet rs = Db.select("DDPSYS","DDPCTL","DDPLIT=:DDPLIT")

 if rs.next() set ZDDP = rs.getCol("DDPSYS")

 //I18N=OFF

 if ZDDP = "HOST" set FEPSEQ = "Trace #"

 //I18N=ON
	quit
