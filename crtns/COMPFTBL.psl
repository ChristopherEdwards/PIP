COMPFTBL //Batch BCHCOMPFTBAL - Commission Portfolio Balance Calculation
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHCOMPFTBAL Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHCOMPFTBAL",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(AGENT) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHCOMPFTBAL","*","",AGENT.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,AGENT)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHCOMPFTBAL","*","",AGENT.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,AGENT) //
	new PFT,TPD,MON,BCRCD

	set TPD=%SystemDate
	do SOURCE^BCHSOURC("BOFF","COMM",.%UserID,.BRCD,.%UserClass)

	// get the last month
	set MON=$$MON^SCADAT(TPD,1)
	set MON=(MON-1)
	If MON=0 set MON=12

	// Agent Information
	type RecordAGENT agnt=Db.getRecord("AGENT","AGENT")
	set BCRCD=agnt.crcd			// Set the base currency

	// Loop through the agent/portfolio balances file
	type ResultSet rs=Db.select("PFT","AGENTPFT","AGENT=:AGENT")
	while rs.next() do {
		set PFT=rs.getCol(1)
		do PFTCAL(.agnt)
		}

	quit
	
PFTCAL(RecordAGENT agnt)	// Calculate balances for a single portfolio

	new HBAL,HBALDT,MEBALLM,QEBALLQ,YEBALLY
	new AVBLM,AVBLQ,AVBLY,QRYBAL,QUERY,WPFT
	
	// Load Portfolio information
	type RecordUTBLCOMPFT pft=Db.getRecord("UTBLCOMPFT","PFT")

	/*
	If no query, check weighted portfolio field and set the weighted 
	portfolio name here if weighted and queries - will need to have 
	this properly defined before entering PROCCID
	*/

	set QUERY=pft.query		// Portfolio Query
	set WPFT=pft.wpft		// Weighted Portfolio

	// do agent calc and set the balance variables
	do AGNTCALC

	// file any balances
	do FILE

	quit

AGNTCALC   // Calculate balances for an agent	

	type Number CID

	// Initialize all balances to 0

	set HBAL=0			// High Monthly Balance - Life
	set MEBALLM=0			// Month End Balance - Last Month
	set QEBALLQ=0			// Quarter End Balance - Last Quarter
	set YEBALLY=0			// Year End Balance - Last Year
	set AVBLM=0			// Average Balance - Last Month
	set AVBLQ=0			// Average Balance - Last Quarter
	set AVBLY=0			// Average Balance - Last Year

	// Get all accounts in the cross reference file
	type ResultSet rs=Db.select("CID","ACN","BOO=:AGENT")
	while rs.next() do {
		set CID=rs.getCol("CID")
		do PROCCID
		}

	quit
	
PROCCID	  // Process one account
 	new rply
	new AGOVWF,AVB,CRCD,MEBAL,NONPERF,PGM,WF,WPQRYNAM,WPQRYNUM

	/*
	Here we need to loop through queries for each account to determine 
	the first true query, and when query is true is it a weighted 
	portfolio/weighting factor. Also check if there is an Override 
	weighing factor on AGENT and use it in calculations - ARQ 40339.
	*/
	
	// Test for looping through weighted porfolio queries
	set WF=""

        if WPFT'="" do { quit:'$G(rply)	 // No WP queries true, get next CID
                set wqry=""
                type ResultSet rswp=Db.select("WPQRYNAM,WPQRYNUM","UTBLWPFTQ","WPFT=:WPFT")
                if rswp.isEmpty() quit	// No portfolios tied to agent

		/*
	 	Quit for first rply that is true or let it loop through all.
		The assumption here is an account will only be part of 1 
		query within the weighted portfolio.
		*/

		for  quit:'rswp.next()!$G(rply)  do {
			set WPQRYNAM=rswp.getCol(1)
			set WPQRYNUM=rswp.getCol(2)
			set PGM="S rply=$$"_WPQRYNAM_"^COMPFT1()"
			#accept pgm=spier;date=12/8/03
			xecute PGM
			}

		if $G(rply) do {
			// Query true, get appropriate WF for query
			set WF=Db.getOneRow("WFCT","UTBLWPFTQ","WPFT,WPQRYNUM")

			/* 
			If there is an override weighing factor defined
			at the agent level use that instead of the weighing
			factor defined at the portfolio level
			*/
			
			set AGOVWF=Db.getOneRow("WPAGNFAC","AGENTPFTQ","AGENT,PFT,WPFT,WPQRYNUM")
			if AGOVWF'="" set WF=AGOVWF
			}
		}

	if QUERY'="" do {  if 'rply quit	// Not in query - invalid acct
		set PGM="S rply=$$"_QUERY_"^COMPFT1()"
		#accept pgm=spier;date=12/8/03
		xecute PGM
		}
	
	type RecordACN acn=Db.getRecord("ACN","CID")
	
	set NONPERF=0

	// Based on class, get the average balances
	if acn.cls="L" do {
		set NONPERF=Db.getOneRow("NONPERF","LN","CID")
		if NONPERF quit
		set AVB=$$AVB^LNCDI(CID,1)
		set MEBAL=$$MEBAL^LNCDI(CID,1)
		}
	else  do {
	        set AVB=$$AVB^DEPCDI(CID,1)
                set MEBAL=$$MEBAL^DEPCDI(CID,1)
		}
	
	if NONPERF quit

	if WF do {
		// Apply weighing factor
		set AVB=AVB*(WF/100)
		set MEBAL=MEBAL*(WF/100)
		}

	// Check to see if a currency conversion is needed
	set CRCD=acn.crcd
	if CRCD'=BCRCD do {
		do EXC^CRCDUTL(CRCD,BCRCD,AVB,1,1,00)
		set AVB=EXCAMT
		do EXC^CRCDUTL(CRCD,BCRCD,MEBAL,1,1,00)
        	set MEBAL=EXCAMT
		}

	set AVB=$$^SCARND(AVB,0,,BCRCD)
	set MEBAL=$$^SCARND(MEBAL,0,,BCRCD)
	
	set MEBALLM=MEBALLM+MEBAL
	set AVBLM=AVBLM+AVB
	set HBAL=HBAL+MEBAL

	// Check for Quarter end and Year end
	if (MON=3)!(MON=6)!(MON=9)!(MON=12) do {
		set QEBALLQ=QEBALLQ+MEBAL
		if $G(WPQRYNUM) set QRYBAL(WPQRYNUM)=$G(QRYBAL(WPQRYNUM))+MEBAL
		set AVBLQ=AVBLQ+AVB
		}

	if MON=12 do {
		set YEBALLY=YEBALLY+MEBAL
		set AVBLY=AVBLY+AVB
		}
	quit

FILE	// File the balances to the Agent Portfolio Balances file

	new BAL,LUPD,WPQRYNUM
	
	type RecordAGENTPFT agntpft=Db.getRecord("AGENTPFT","AGENT,PFT")

	// Move last month's data to the previous months 
	set LUPD=agntpft.lupd
	if LUPD'="",(MON+1)'=$$MON^SCADAT(LUPD,1) do {
		set agntpft.mebalpm=agntpft.meballm
		set agntpft.avbpm=agntpft.avblm
		set agntpft.hmballm=agntpft.hbal
		set agntpft.hmballmd=agntpft.hbaldt
		}

	// Update last month's data
	set agntpft.meballm=MEBALLM
	set agntpft.avblm=AVBLM

	if HBAL>agntpft.hbal do {
		// Set new high balance
		set agntpft.hbal=HBAL
		set agntpft.hbaldt=TPD
		}


	if (MON=3)!(MON=6)!(MON=9)!(MON=12) do {
		if LUPD'="",(MON+1)'=$$MON^SCADAT(LUPD,1) do {
			// move last quarters data to the previous quarters
			set agntpft.qebalpq=agntpft.qeballq
			set agntpft.avbpq=agntpft.avblq
			set agntpft.hqballq=agntpft.hqbal
			set agntpft.hqballqd=agntpft.hqbald
			}

		// update last quarter's data
		set agntpft.qeballq=QEBALLQ
		set agntpft.avblq=AVBLQ

		If HBAL>agntpft.hqbal do {
                	// Set new high balance
                	set agntpft.hqbal=HBAL
			set agntpft.hqbald=TPD
			}
		}

	if (MON=12) do {
		// Move last years data to the previous years
		set agntpft.yebalpy=agntpft.yebally
		set agntpft.avbpy=agntpft.avbly

		// Update last year's balance
		set agntpft.yebally=YEBALLY
		set agntpft.avbly=AVBLY
		}

	// Store the last update time
	set agntpft.lupd=TPD
	
	// Store the data to disk
	do agntpft.bypassSave()

	set WPQRYNUM=""
	for  set WPQRYNUM=$O(QRYBAL(WPQRYNUM)) quit:WPQRYNUM=""  do {
		set BAL=QRYBAL(WPQRYNUM)
		do Db.update("AGENTPFTQ","QRYBAL=:BAL","AGENT=:AGENT AND PFT=:PFT AND WPFT=:WPFT AND WPQRYNUM=:WPQRYNUM")
		}

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,AGENT
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set AGENT=vRECORD.piece($C(9),1)
 do vPROC(AGENT)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,AGENT
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+7>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	// Set the compftbl global with the current job number
	
	do SETJOB^COMPFTST
	   
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("AGENT","AGENT","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
	// delete the job number

	do REMJOB^COMPFTST
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
