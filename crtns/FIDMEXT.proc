FIDMEXT	      	/* ---- Revision History -----------------------------------------------
      	
	03/15/06 - SWARNALATHAP - CR20023
		   Modified section FULL and MATCH to update field position 360 
		   with the Account Status Indicator while updating the B Record.
		   Modified UPDATE section to check the Accout Status in DEP and 
		   assign values for FIDMALL.ACCTIND and update the field 
		   position 360 with the Account Status Indicator while updating 
		   the B Record.
		   
	09/08/05 - SWARNALATHAP - CR16734
		   Changes made to reference the base table LNCOL in place of 
		   index table LNCOLC
		   
		   Retrofitted the following change made in CR 17183 in Profile 01
		   .	Modified FULL,UPDATE and MATCH section to set CIDTYPE="06" 
		   for Collateral Account.
		   
		   Modified the following changes with respect to DBI3 Project 
		   - "US Regulatory" System Area.
		   .	Modified the START section and corrected the calling of 
		   	the label inside SCAJD.PROC from CalcYear^SCAJD to 
		   	CALCYEAR^SCAJD
		   .	Retrofitted the changes made in Profile 01 for the 
		   	project "Financial Institute Data Match Enhancement" 
		   	whose changes are in sections FULL,UPDATE and MATCH to 
		   	modify the "io" attribute to support various operating 
		   	system like UNIX, VMS.  
		   	FULL and MATCH section has been modified as follows
      		   	1. To support All Account Extract, condition 
      		   	"NOT DEP.STAT=4" has been removed in the recordset for 
      		   	table DEP.
      		   	2. New lines of code has been added to set the value to 
      		      	FIDMALL.ACCTIND field.
      		   	3. New lines of code has been added after the comment 
      		      	"define account type" to determine whether the account 
      		      	is pledged to secure a loan account.	 
		   
	09/08/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also remove pre-2002 history
		   and modified FULL section to bring it in-line with current PSL
		   standards.
	
	07/29/02 - KINI - 50572:01
		   Roll forward changes from v5.3:
		   Modified FULL and UPDATE section to use $G for the SECOWNER
		   variable. Added "N"ewing for SECOWNER in UPDATE section to
		   correctly reset it for the next reported customer.
	
	05/27/02 - KINI - 50572
		   Roll forward changes from v5.3:
		   Modified MATCH section to exclude closed accounts from the   
         	   reporting.
		   Modified FULL, UPDATE and MATCH sections
		   - to report year part of DOB in "YYYY" format;
		   - to report secondary account owners under the TITLE if
		   there is more than one account owner.
	
	-----------------------------------------------------------------------

	*/

	/*
	  When the FIDMEXT Extract File function (@FIDMEXT) is executed, 
	  the user has the option of specifying a file type (STBLFIDM).
	  The option chosen will determine the processing that occurs in the
	  creation of the extract file:
	
	  (0) Full File - an extract file will include all open deposit accounts
	
	  (1) Update File - an extract file will include only deposit accounts
	      that have been updated since the last full extract file was 
	      created
	
	  (2) Matched File - an extract file will include only those persons
	      that match the the State provided inquiry file
	
	  The FIDMALL file will be populated by the data needed for the 
	  FIDM All Accounts Audit Report (@FIDMALL) if option 0 or 1 is selected.
	 
	  The FIDMMTCH file will be populated by the data needed for the
	  FIDM Matched Accounts Audit Report (@FIDMMTCH) if option 2 is selected.
	
	  RELATED:
	        . FIDMINQ - FIDM Inquiry File Import procedure
	*/


START	// Start creation of the FIDM Extract file

	new XTJD,DATE,YEAR,CN
	
	set XTJD=Db.getOneRow("TJD","CUVAR")
	set DATE=$$DAT^%ZM(XTJD,"YYMM")
	do CALCYEAR^SCAJD
	set CN=$P(((YEAR/100)+1),".",1)	; define century
	set DATE=CN_DATE		; CCYYMM format
	
PROMPT	// Prompt for the Device/File name - External entry call	

	new %TAB,%READ
	set %TAB("IO")=".IO4"
	set %TAB("REPTYPE")="[STBLFIDM]REPTYPE/TBL=""[STBLFIDM]"""
	set %TAB("TEST")=".TEST"
	set %TAB("TAPE")=".TAPE"
	set %READ="@@%FN,,IO/REQ,REPTYPE/REQ,TEST,TAPE"
	do ^UTLREAD quit:VFMQ="Q"

	// catching a GT.M error

	catch vERROR {
		new ET,RM
		set ET=vERROR.type
		if ET["%GTM-" do ZE^UTLERR quit
		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description
		do ^UTLERR
		}

	if REPTYPE=0 do FULL	// create All accounts extract
	if REPTYPE=1 do UPDATE	// create Updated accounts extract
	if REPTYPE=2 do MATCH	// create Matched account extract
	
	// "FIDM Extract File Complete"
	if 'ER set ER="W" set RM=$$^MSG(4744)
	quit
	
AREC(IO io)	// Create "A" Record	
	
	new cuvdata,AREC
	new EIN,CNAME,CAD1,CCITY,CZIP,DT,DMIND,TPIND,TIND
	new SBINSTNO,IEIN,INAME,IAD1,IAD2,IAD3,ICITY,ISTATE,IZIP,SBIND,IADDR
	
	// values of CCNTRY and CSTATE are needed for MATCH section,
	// so they are not new'ed here
	
	set cuvdata=Db.getOneRow("EIN,CNAME,CAD1,CCITY,CSTATE,CZIP,SBINSTNO,IEIN,INAME,IAD1,IAD2,IAD3,ICITY,ISTATE,IZIP,CCNTRY","CUVAR")
	set EIN=$P(cuvdata,$C(9),1)	  // employer ID number
	set CNAME=$P(cuvdata,$C(9),2)	  // institution name
	set CAD1=$P(cuvdata,$C(9),3)	  // customer address 1
	set CCITY=$P(cuvdata,$C(9),4)	  // customer city
	set CSTATE=$P(cuvdata,$C(9),5)    // customer state
	set CZIP=$P(cuvdata,$C(9),6)      // customer zip code
	set SBINSTNO=$P(cuvdata,$C(9),7)  // serv bureau inst number
	set IEIN=$P(cuvdata,$C(9),8)	  // transmitter ID number
	set INAME=$P(cuvdata,$C(9),9)	  // 1099 inst name
	set IAD1=$P(cuvdata,$C(9),10)	  // 1099 inst addr 1
	set IAD2=$P(cuvdata,$C(9),11)	  // 1099 inst addr 2
	set IAD3=$P(cuvdata,$C(9),12)	  // 1099 inst addr 3
	set ICITY=$P(cuvdata,$C(9),13)	  // 1099 inst city
	set ISTATE=$P(cuvdata,$C(9),14)	  // 1099 inst state
	set IZIP=$P(cuvdata,$C(9),15)	  // 1099 inst zip
	set CCNTRY=$P(cuvdata,$C(9),16)	  // customer country	

	if REPTYPE=2 do {
		new rs
		type ResultSet rs=Db.select("DT","FIDMINQ")
		if rs.isEmpty() quit
		for  quit:'rs.next()  do {
			set DT=rs.getCol(1)
			}
		}
	else  set DT=DATE    // for the REPTYPE=0,1 use TJD 
	
	set DMIND=$S(REPTYPE=0:"A",REPTYPE=1:"U",REPTYPE=2:"M")  // data match ind
	set TPIND=$S(TAPE="1":"LS",1:"  ")   // magnetic tape indicator	
	set TIND=$S(TEST="1":"T",1:" ")	     //test file indicator
	
	// format serv. bureau information
	if $G(SBINSTNO)>1 do {
		set SBIND="I"		     // serv. bureau ind. 	
		set IEIN=$TR(IEIN,"- ","")   // transm. ID
		set IEIN=$E(IEIN,1,9)
		set IEIN=$$BLKFIL(IEIN,9)
		set INAME=$$BLKFIL(INAME,71) // transm. name
		set IADDR=IAD1_" "_IAD2_" "_IAD3
		set IADDR=$E(IADDR,1,40)
		set IADDR=$$BLKFIL(IADDR,40)
		set ICITY=$E(ICITY,1,29)	
		set ICITY=$$BLKFIL(ICITY,29) // transm. street addr.
		set IZIP=$TR(IZIP,"- ","")   // zip - no blanks or hyphens char.
		set IZIP=$$BLKFIL(IZIP,9)
		}
	else  do {
		set SBIND=" "
		set IEIN=$$BLKFIL("",9)
		set INAME=$$BLKFIL("",71)
		set IADDR=$$BLKFIL("",40)
		set ICITY=$$BLKFIL("",29)
		set ISTATE=$$BLKFIL("",2)
		set IZIP=$$BLKFIL("",9)
		}

	// format data to required length 
	set EIN=$TR(EIN,"- ","")	// no blanks or hyphens char.
	set EIN=$$BLKFIL(EIN,9)
	set CNAME=$$BLKFIL(CNAME,40)
	set CAD1=$$BLKFIL(CAD1,40)
	set CCITY=$E(CCITY,1,29)
	set CCITY=$$BLKFIL(CCITY,29)
	set CZIP=$TR(CZIP,"- ","")	// no blanks or hyphens char.
	set CZIP=$$BLKFIL(CZIP,9)
	
	set AREC="A"_$$BLKFIL("",5)_EIN_$$BLKFIL("",4)_DT_$$BLKFIL("",6)
	set AREC=AREC_TIND_SBIND_$$BLKFIL("",8)_TPIND_$$BLKFIL("",6)
	set AREC=AREC_CNAME_$$BLKFIL("",41)_CAD1_CCITY_CSTATE_CZIP
	set AREC=AREC_IEIN_INAME_IADDR_ICITY_ISTATE_IZIP_DMIND_$$BLKFIL("",49)
	
	do io.write(.AREC)
	
	quit
	
FULL	// Full File extract - "B" Record
	
	type Public Boolean TEST
	type Public Date DATE,XTJD
	type Public String ER,IO,REPTYPE
	
	// delete files for today
	do Db.delete("FIDMALL","REPDATE=:XTJD AND REPTYPE=0")
	do Db.delete("FIDMALLTOT","REPDATE=:XTJD AND REPTYPE=0")	
 
	type IO io=Class.new("IO")
	set io.fileName=IO
	set io.recordSize=420
	set io.openParams="WRITE/NEWV"

	do io.open()

	do AREC(io)	// create "A" record required for all file types
	
	// reset counters
	type Number CNT,IRACNT,TOTBAL,TRCNT
	
	set CNT=0
	set IRACNT=0
	set TOTBAL=0
	set TRCNT=0
	
	type ResultSet rs=Db.select("CID,ACN,GRP,BAL,TITLE1,TITLE2,TITLE3,TITLE4,ESC,AREF,FMLD,IRA,REGD,STAT","DEP")
	if rs.isEmpty() do io.close() quit

	for  quit:'rs.next()  do {
		type Date FMLD
		type Number AREF,BAL,BALIND,COLL,COLTYP,IRA,LNCID,REGD,SECACN,STAT,TRUSTIND,XACN,XBAL,XCID,XSTAT,XXCID
		type String ADDR,CIDTYPE,ESC,GRP,LNGRP,SCOLCD,SECOWNER,STAXID,TITLE,TITLE1,TITLE2,TITLE3,TITLE4,XSECOWNR,XTITLE1
		
		set XCID=rs.getCol(1)
		set XACN=rs.getCol(2)
		set GRP=rs.getCol(3)
		set BAL=rs.getCol(4)
		set TITLE1=rs.getCol(5)
		set TITLE2=rs.getCol(6)
		set TITLE3=rs.getCol(7)
		set TITLE4=rs.getCol(8)
		set ESC=rs.getCol(9)		
		set AREF=rs.getCol(10)	   // loan account number
		if (ESC'=""),(AREF'="") do {
			set TRUSTIND=3
			set TRCNT=TRCNT+1	
			}
		else  set TRUSTIND=6       // trust fund indicator
		set FMLD=rs.getCol(11)	   // file maintenance last date
		set IRA=rs.getCol(12)
		set REGD=rs.getCol(13)
		set STAT=rs.getCol(14)

		if STAT=0 set XSTAT=0
		if ((STAT=4)!(STAT=5)) set XSTAT=1
		if ((STAT=1)!(STAT=2)!(STAT=3)) set XSTAT=2

		if IRA.get()>0 set CIDTYPE="12" set IRACNT=IRACNT+1  // total RPA's reported
		else  do {
			if (REGD=0)!(REGD=1)!(REGD=2) set CIDTYPE="18"
			if REGD=3 set CIDTYPE="04"
			if REGD=4 set CIDTYPE="01"
			if REGD=5 set CIDTYPE="11"  
			if REGD=6 set CIDTYPE="05"
			
			// define account type

			type ResultSet rs4=Db.select("COLL,SCOLCD","COL","COLACN=:XCID")
			while rs4.next()  quit:ER  do {				
				set COLL=rs4.getCol("COLL")
				set SCOLCD=rs4.getCol("SCOLCD")						
				type ResultSet rs6=Db.select("CID","LNCOL","COLL=:COLL")
				if rs6.next() do {
					set LNCID=rs6.getCol("CID")
					type ResultSet rs7=Db.select("GRP","LN","CID=:LNCID")
					if rs7.next() do {
						set LNGRP=rs7.getCol("GRP")						
						type ResultSet rs5=Db.select("TYPE","UTBLCOLCD","KEY=:SCOLCD AND GRP=:LNGRP")
						if rs5.next() do {
						set COLTYP=rs5.getCol("TYPE")
						if ((COLTYP=50)!(COLTYP=70)) set CIDTYPE="06"
							}
						}
					}
				}
			}
		if 'CIDTYPE.exists() set CIDTYPE="18"

		// review primary/secondary account ownership
		// get secondary account owner SSN

		// 11982 - Replaced RELACN with RELCIF
		type ResultSet rs1=Db.select("ACN","RELCIF","CID=:XCID AND NOT ACN=:XACN")
		for  quit:'rs1.next()  do {
			set SECACN=rs1.getCol(1) quit
			}
			
		if SECACN.exists() do {
			type ResultSet rs2=Db.select("TAXID","CIF","ACN=:SECACN")
			if rs2.isEmpty() set STAXID=""
			else  if rs2.next() set STAXID=rs2.getCol(1)
			}
		else  set STAXID=""

		type Date DOB
		type String LNM,NAM,PAD1,PCITY,PCNTRY,PCNTRYIN,PSTATE,PZIP,TAXID

		type RecordCIF cif=Db.getRecord("CIF","XACN")

		set TAXID=cif.taxid
		if TAXID="" set TAXID=" "
		set PCNTRY=cif.pcntry
		set PAD1=cif.pad1
		set PCITY=cif.pcity
		set PSTATE=cif.pstate
		set PZIP=cif.pzip
		set DOB=cif.dob
		set NAM=cif.nam
		set LNM=cif.lnm

		set LNM=$$BLKFIL(LNM,4)
		set PCNTRYIN=$S(PCNTRY'="US":1,1:" ")   // foreign country ind

		if DOB="" set DOB=$$BLKFIL("",8)
		else  set DOB=$$DAT^%ZM(DOB,"YEARMMDD")  // CCYYMMDD format

		// get SSN required format for the primary/sec account owners
		type String SSN,SSSN
		
		set SSN=$TR(TAXID,"- ","")
		if (TAXID=" ")!(TAXID.isNull()) set SSN=$$BLKFIL("",9)
		if STAXID.data() set SSSN=$TR(STAXID,"- ","")
		else  set SSSN=$$BLKFIL("",9)	
	
		set XXCID=XCID	// save for FIDMALL file update/length 12
	
		// validate length of reported data according to the requirements
		set XCID=$$BLKFIL(XCID,20)
		
		set TITLE=TITLE1
		// avoid setting extra spaces if nothing but TITLE1 exists	
		if 'TITLE2.isNull() set TITLE=TITLE_" "_TITLE2,SECOWNER=TITLE2
		if 'TITLE3.isNull() set TITLE=TITLE_" "_TITLE3,SECOWNER=SECOWNER.get()_" "_TITLE3
		if 'TITLE4.isNull() set TITLE=TITLE_" "_TITLE4,SECOWNER=SECOWNER.get()_" "_TITLE4

		set TITLE=TITLE.extract(1,100)
		set TITLE=$$BLKFIL(TITLE,100)
		set XTITLE1=$$BLKFIL(TITLE1,40)

		set SECOWNER=SECOWNER.get().extract(1,40)
		set XSECOWNR=$$BLKFIL(SECOWNER,40)
	
		set PZIP=$TR(PZIP,"- ","")	// no blanks or hyphens char.
		set PAD1=$$BLKFIL(PAD1,40)
		set PCITY=$$BLKFIL(PCITY,29)
		set PZIP=$$BLKFIL(PZIP,9)
		set ADDR=PAD1_PCITY_PSTATE_PZIP
	
		/* 
		     validate balance format:
		  - report the account balance or value in whole dollars only 
		     with the sign trailing (positive/negative);
		  - for closed accounts or where the information is unavailable,
		    fill with zeroes;
		  - for accounts with balances greater than 9,999,999, 
		    enter "9,999,999"
		*/
		set BALIND=2	// account balance indicator
		set BAL=$$^SCARND(BAL,0,0,0,0),XBAL=BAL
		if 'BAL.get() set (BAL,XBAL)="0000000"
		if BAL.get()["." set XBAL=$P(BAL,".") 
		if BAL.length()>7 set XBAL="9999999"
		else  set XBAL=$$ZEROFIL(BAL,7)	
		set TOTBAL=TOTBAL+BAL
	
 		// use date from "A" record for the REC second position
		type String REC
		set REC="B"_DATE_LNM_$$BLKFIL("",3)_SSN_XCID_$$BLKFIL("",17)_TITLE
		set REC=REC_PCNTRYIN_XTITLE1_XSECOWNR_ADDR_$$BLKFIL("",29)_XBAL
		set REC=REC_$$BLKFIL("",1)_TRUSTIND_XSTAT_BALIND_$$BLKFIL("",1)
		set REC=REC_DOB_$$BLKFIL("",10)_CIDTYPE_$$BLKFIL("",28)_SSSN
	
		set CNT=CNT+1	// total number of accounts reported

		do io.write(.REC)
		
		// update FIDMALL with the data needed for the FIDM
		// All Accounts Audit Report
		type RecordFIDMALL fidmall=Class.new("RecordFIDMALL")
		set fidmall.repdate=XTJD
		set fidmall.reptype=REPTYPE
		set fidmall.taxidpr=TAXID
		set fidmall.cid=XXCID
		set fidmall.acn=XACN
		set fidmall.prowner=TITLE1
		set fidmall.secowner=SECOWNER
		set fidmall.taxidsec=STAXID
		set fidmall.bal=BAL
		set fidmall.trustind=TRUSTIND
		set fidmall.cidtype=CIDTYPE
		set fidmall.acctind=XSTAT
		
		do fidmall.bypassSave()
		if ER do EXC
	}	

	// update FIDMDATE file with TJD - full extract creation date if this is
	// not a test run
	if 'TEST,('Db.isDefined("FIDMDATE","XTJD")) do {
		type RecordFIDMDATE fidmdate=Class.new("RecordFIDMDATE")
		set fidmdate.fidmdt=XTJD
		do fidmdate.bypassSave()
		if ER do EXC
		}

	do TOTAL(io)       // create Total record	
	
	do io.close()

	quit

UPDATE	// Update File extract
	
	// delete files for today
	do Db.delete("FIDMALL","REPDATE=:XTJD AND REPTYPE=1")
	do Db.delete("FIDMALLTOT","REPDATE=:XTJD AND REPTYPE=1")

	// reset counters
	set (CNT,TRCNT,TOTBAL,IRACNT,CLCNT,NEWCNT,MCNT)=0
	
	// select last All accounts extract date
	new rs,FIDMDT
	type ResultSet rs=Db.select("FIDMDT","FIDMDATE")

	// "No Previous Extract File Found", do full accounts report
	if rs.isEmpty() set ER=1 set RM=$$^MSG("4742") quit
	for  quit:'rs.next()  set FIDMDT=rs.getCol(1)  quit:ER

	type IO io=Class.new("IO")
	set io.fileName=IO
	set io.recordSize=420
	set io.openParams="WRITE/NEWV"

	do io.open()

	do AREC(io)  // create "A" record required for all file types

	new rs
	type ResultSet rs=Db.select("CID,ACN,GRP,BAL,TITLE1,TITLE2,TITLE3,TITLE4,ESC,AREF,FMLD,IRA,REGD,ODT,DTC,FMLD,STAT","DEP","ODT>:FIDMDT OR DTC>:FIDMDT OR FMLD>:FIDMDT")
	if rs.isEmpty() quit

	for  quit:'rs.next()  quit:ER  do {
		type Number COLL,COLTYP,LNCID,XSTAT
		type String LNGRP,SCOLCD
		
		new XCID,XACN,GRP,BAL,TITLE1,TITLE2,TITLE3,TITLE4
		new ESC,AREF,FMLD,IRA,REGD,ODT,DTC,FMLD,STAT
		new UPDIND,TRUSTIND,SECOWNER,CIDTYPE,XBAL

		set XCID=rs.getCol(1)
		set XACN=rs.getCol(2)
		set GRP=rs.getCol(3)
		set BAL=rs.getCol(4)
		set TITLE1=rs.getCol(5)
		set TITLE2=rs.getCol(6)
		set TITLE3=rs.getCol(7)
		set TITLE4=rs.getCol(8)
		set ESC=rs.getCol(9)               
		set AREF=rs.getCol(10)       // loan account number
		if (ESC'=""),(AREF'="") set TRUSTIND=3,TRCNT=TRCNT+1   
		else  set TRUSTIND=6         // trust fund indicator
		set FMLD=rs.getCol(11)       // acct maintenance last date
		set IRA=rs.getCol(12)
		set REGD=rs.getCol(13)
		set ODT=rs.getCol(14)
		set DTC=rs.getCol(15)
		set FMLD=rs.getCol(16)
		set STAT=rs.getCol(17)

		if STAT=0 set XSTAT=0
		if ((STAT=4)!(STAT=5)) set XSTAT=1
		if ((STAT=1)!(STAT=2)!(STAT=3)) set XSTAT=2
		
		// define account type
		if IRA>0 set CIDTYPE="12",IRACNT=IRACNT+1  // total RPA's reported
		else  do {
			if (REGD=0)!(REGD=1)!(REGD=2) set CIDTYPE="18"
			if REGD=3 set CIDTYPE="04"
			if REGD=4 set CIDTYPE="01"
			if REGD=5 set CIDTYPE="11"
			if REGD=6 set CIDTYPE="05"
			
			// define account type

			type ResultSet rs4=Db.select("COLL,SCOLCD","COL","COLACN=:XCID")
			while rs4.next()  quit:ER  do {				
				set COLL=rs4.getCol("COLL")
				set SCOLCD=rs4.getCol("SCOLCD")						
				type ResultSet rs6=Db.select("CID","LNCOL","COLL=:COLL")
				if rs6.next() do {
					set LNCID=rs6.getCol("CID")
					type ResultSet rs7=Db.select("GRP","LN","CID=:LNCID")
					if rs7.next() do {
						set LNGRP=rs7.getCol("GRP")						
						type ResultSet rs5=Db.select("TYPE","UTBLCOLCD","KEY=:SCOLCD AND GRP=:LNGRP")
						if rs5.next() do {
						set COLTYP=rs5.getCol("TYPE")
						if ((COLTYP=50)!(COLTYP=70)) set CIDTYPE="06"
							}
						}
					}
				}
			}
		if '$G(CIDTYPE) set CIDTYPE="18"

		// account update file indicator
		// closed acct
		if DTC>FIDMDT set UPDIND=0,CLCNT=CLCNT+1 
		// opened acct, has no subsequent file maintenance after opening
		if (ODT>FIDMDT),(ODT'<FMLD),('$G(DTC)) set UPDIND=1,NEWCNT=NEWCNT+1   
		// modified acct, file maintained after opening
		if (FMLD>FIDMDT),(ODT<FMLD),('$G(DTC)!(FMLD>DTC)) set UPDIND=2,MCNT=MCNT+1

		// review primary/secondary account ownership
		new rs1,rcifdata,SECACN,STAXID
		type ResultSet rs1=Db.select("ACN","RELCIF","CID=:XCID AND NOT ACN=:XACN")
		for  quit:'rs1.next()  do {
			set SECACN=rs1.getCol(1) quit
			}
		// get secondary account owner SSN
		if $G(SECACN) set rcifdata=Db.getOneRow("TAXID","CIF","SECACN") set STAXID=$P(rcifdata,$C(9),1)
		else  set STAXID=""

		new cifdata,TAXID,PCNTRY,PAD1,PCITY,PSTATE,PZIP,DOB,NAM,LNM,PCNTRYIND
		set cifdata=Db.getOneRow("TAXID,PCNTRY,PAD1,PCITY,PSTATE,PZIP,DOB,NAM,LNM","CIF","XACN")
		set TAXID=$P(cifdata,$C(9),1)
		if TAXID="" set TAXID=" "
		set PCNTRY=$P(cifdata,$C(9),2)
		set PAD1=$P(cifdata,$C(9),3)
		set PCITY=$P(cifdata,$C(9),4)
		set PSTATE=$P(cifdata,$C(9),5)
		set PZIP=$P(cifdata,$C(9),6)
		set DOB=$P(cifdata,$C(9),7)
		set NAM=$P(cifdata,$C(9),8)
		set LNM=$P(cifdata,$C(9),9)

		set LNM=$$BLKFIL(LNM,4)   
		set PCNTRYIND=$S(PCNTRY'="US":1,1:" ")   // foreign country ind

		if DOB="" set DOB=$$BLKFIL("",8)
		else  set DOB=$$DAT^%ZM(DOB,"YEARMMDD")  // CCYYMMDD format

		// get SSN required format for the primary/sec account owners
		new SSN,SSSN
		set SSN=$TR(TAXID,"- ","")
		if (TAXID=" ")!('$G(TAXID)) set SSN=$$BLKFIL("",9)
		if $D(STAXID) set SSSN=$TR(STAXID,"- ","")
		else  set SSSN=$$BLKFIL("",9)

		set XXCID=XCID   // save for FIDMALL file update/length 12
	
		// validate length of reported data according to the requirements
		set XCID=$$BLKFIL(XCID,20)
		
		set TITLE=TITLE1
		// avoid setting extra spaces if nothing but TITLE1 exists
		if $G(TITLE2)'="" set TITLE=TITLE_" "_TITLE2,SECOWNER=TITLE2
		if $G(TITLE3)'="" set TITLE=TITLE_" "_TITLE3,SECOWNER=$G(SECOWNER)_" "_TITLE3
		if $G(TITLE4)'="" set TITLE=TITLE_" "_TITLE4,SECOWNER=$G(SECOWNER)_" "_TITLE4
		set TITLE=$E(TITLE,1,100)
		set TITLE=$$BLKFIL(TITLE,100)
		set XTITLE1=$$BLKFIL(TITLE1,40)
	
		set SECOWNER=$E($G(SECOWNER),1,40)
		set XSECOWNER=$$BLKFIL(SECOWNER,40)
	
		set PZIP=$TR(PZIP,"- ","")	// no blanks or hyphens char.
		set PAD1=$$BLKFIL(PAD1,40)
		set PCITY=$$BLKFIL(PCITY,29)
		set PZIP=$$BLKFIL(PZIP,9)
		set ADDR=PAD1_PCITY_PSTATE_PZIP

		/*
		    validate balance format:
		  - report the account balance or value in whole dollars only 
		    with the sign trailing (positive/negative);
		  - for closed accounts or where the information is unavailable
		    fill with zeroes;
		  - for accounts with balances greater than 9,999,999 
		    enter "9,999,999"
		*/
		set BALIND=2	; account balance indicator
		set BAL=$$^SCARND(BAL,0,0,0,0),XBAL=BAL
		if (STAT=4)!('$G(BAL)) set (BAL,XBAL)="0000000"
		if $G(BAL)["." set XBAL=$P(BAL,".")
		if $L(BAL)>7 set XBAL="9999999"
		if $L(BAL)'>7 set XBAL=$$ZEROFIL(BAL,7)
		set TOTBAL=TOTBAL+BAL
	
		// use date from "A" record for the REC second position
		new REC
		set REC="B"_DATE_LNM_$$BLKFIL("",3)_SSN_XCID_$$BLKFIL("",17)_TITLE
		set REC=REC_PCNTRYIND_XTITLE1_XSECOWNER_ADDR_$$BLKFIL("",29)_XBAL
		set REC=REC_$$BLKFIL("",1)_TRUSTIND_XSTAT_BALIND_UPDIND_DOB
		set REC=REC_$$BLKFIL("",10)_CIDTYPE_$$BLKFIL("",28)_SSSN
	
		set CNT=CNT+1   // total number of accounts reported

		do io.write(.REC)

		// populate FIDMALL file with the data needed for the FIDM 
		// All Accounts Audit Report
		new fidmall
		type RecordFIDMALL fidmall=Class.new("RecordFIDMALL")
		set fidmall.repdate=XTJD
		set fidmall.reptype=REPTYPE
		set fidmall.taxidpr=TAXID
		set fidmall.cid=XXCID
		set fidmall.acn=XACN
		set fidmall.prowner=TITLE1
		set fidmall.secowner=SECOWNER
		set fidmall.taxidsec=STAXID
		set fidmall.bal=BAL
		set fidmall.trustind=TRUSTIND
		set fidmall.cidtype=CIDTYPE
		set fidmall.acctind=XSTAT
		set fidmall.updind=UPDIND

		do fidmall.bypassSave()
		if ER do EXC
		}

	/* 
	  update FIDMDATE file with TJD - extract creation date if this is not
	  a test run
	*/
	if 'TEST,('Db.isDefined("FIDMDATE","XTJD")) do {
		new fidmdate
		type RecordFIDMDATE fidmdate=Class.new("RecordFIDMDATE")
		set fidmdate.fidmdt=XTJD
		do fidmdate.bypassSave()
		if ER do EXC
		}

	do TOTAL(io)        // create Total record

	do io.close()	
	
	quit

MATCH	// Matched File extract

	/* 
	  perform a check for the State provided inquiry file that should be
	  loaded into the FIDMINQ file
	*/

	// delete files for today
	do Db.delete("FIDMMTCH","REPDATE=:XTJD")
	do Db.delete("FIDMMTCHTOT","REPDATE=:XTJD")
	
	// reset counters
	set (CNT,TRCNT,TOTBAL,IRACNT,CLCNT,NEWCNT,MCNT,CIFCNT,MFLCNT)=0
	
	new rs
	type ResultSet rs=Db.select("DT,TAXID,SPBINF,INQLNAM,INQFNAM,CPBINF,ADSPBINF","FIDMINQ")
	if rs.isEmpty() set ER=1 set RM=$$^MSG("4743") quit
	// "FIDM inquiry file not located"

	// If FIDMINQ is located, perform a match process

	type IO io=Class.new("IO")
	set io.fileName=IO
	set io.recordSize=420
	set io.openParams="WRITE/NEWV"

	do io.open()

	do AREC(io)  	// create "A" record required for all file types
	
	for  quit:'rs.next()  quit:ER  do {	
		new IDT,SSN,SPBINF,INQLNAM,INQFNAM,CPBINF,ADSPBINF
		set IDT=rs.getCol(1)	     // inquiry date
		set SSN=rs.getCol(2)	     // TIN/SIN
		set SPBINF=rs.getCol(3)	     // state pass-back info
		set INQLNAM=rs.getCol(4)     // inquiry last name
		set INQFNAM=rs.getCol(5)     // inquiry first name
		set CPBINF=rs.getCol(6)	     // case pass-back info
		set ADSPBINF=rs.getCol(7)    // addtnl state pass-back info
	
		set HSSN=$E(SSN,1,3)_"-"_$E(SSN,4,5)_"-"_$E(SSN,6,9) // hyphens SSN
		set BSSN=$TR(HSSN,"-","  ")  // SSN with blanks char.
	
		new rs1
		type ResultSet rs1=Db.select("ACN,TAXID,PCNTRY,PAD1,PCITY,PSTATE,PZIP,DOB,NAM,LNM","CIF","TAXID=:SSN OR TAXID=:HSSN OR TAXID=:BSSN")
		for  quit:'rs1.next()  do {
			new XACN,TAXID,PCNTRY,PAD1,PCITY,PSTATE,PZIP,DOB,NAM,LNM,PCNTRYIND
			set XACN=rs1.getCol(1)
			set TAXID=rs1.getCol(2)
			if TAXID="" quit
			set PCNTRY=rs1.getCol(3)
			set PAD1=rs1.getCol(4)
			set PCITY=rs1.getCol(5)
			set PSTATE=rs1.getCol(6)
			set PZIP=rs1.getCol(7)
			set DOB=rs1.getCol(8)
			set NAM=rs1.getCol(9)
			set LNM=rs1.getCol(10)
	
			set CIFCNT=CIFCNT+1
			set TAXID=$TR(TAXID,"- ","")
	
			if DOB="" set DOB=$$BLKFIL("",8)
			else  set DOB=$$DAT^%ZM(DOB,"YEARMMDD")  // "CCYYMMDD"
			
			new rs2
			type ResultSet rs2=Db.select("GRP,TITLE1,TITLE2,TITLE3,TITLE4,BAL,ESC,AREF,IRA,REGD,STAT,SC1,SC2,SC3,CID,ACN","DEP","ACN=:XACN OR SC1=:XACN OR SC2=:XACN OR SC3=:XACN")
			for  quit:'rs2.next()  do {
			
				type Number AREF,BAL,COLL,COLTYP,IRA,LNCID,REGD,SC1,SC2,SC3,STAT,TRUSTIND,XCID,XSTAT,XXACN
				type String CIDTYPE,ESC,GRP,LNGRP,SCOLCD,TITLE1,TITLE2,TITLE3,TITLE4,XNAM

				set GRP=rs2.getCol(1)
				set TITLE1=rs2.getCol(2)
				set TITLE2=rs2.getCol(3)
				set TITLE3=rs2.getCol(4)
				set TITLE4=rs2.getCol(5)
				set BAL=rs2.getCol(6)
				set ESC=rs2.getCol(7)
				set AREF=rs2.getCol(8)
				set IRA=rs2.getCol(9)
				set REGD=rs2.getCol(10)
				set STAT=rs2.getCol(11)
				set SC1=rs2.getCol(12)
				set SC2=rs2.getCol(13)
				set SC3=rs2.getCol(14)
				set XCID=rs2.getCol(15)
				set XXACN=rs2.getCol(16)
				
				if STAT=0 set XSTAT=0
				if ((STAT=4)!(STAT=5)) set XSTAT=1
				if ((STAT=1)!(STAT=2)!(STAT=3)) set XSTAT=2

				if (ESC'=""),(AREF'="") set TRUSTIND=3,TRCNT=TRCNT+1  
				else  set TRUSTIND=6	     // trust fund indicator
	
				if IRA>0 set CIDTYPE="12",IRACNT=IRACNT+1 // total RPA's reported
				else  do {
					if (REGD=0)!(REGD=1)!(REGD=2) set CIDTYPE="18"
					if REGD=3 set CIDTYPE="04"
					if REGD=4 set CIDTYPE="01"
					if REGD=5 set CIDTYPE="11"
					if REGD=6 set CIDTYPE="05"
					
					// define account type code

					type ResultSet rs4=Db.select("COLL,SCOLCD","COL","COLACN=:XCID")
					while rs4.next()  quit:ER  do {				
						set COLL=rs4.getCol("COLL")
						set SCOLCD=rs4.getCol("SCOLCD")						
						type ResultSet rs6=Db.select("CID","LNCOL","COLL=:COLL")
						if rs6.next() do {
							set LNCID=rs6.getCol("CID")
							type ResultSet rs7=Db.select("GRP","LN","CID=:LNCID")
							if rs7.next() do {
								set LNGRP=rs7.getCol("GRP")						
								type ResultSet rs5=Db.select("TYPE","UTBLCOLCD","KEY=:SCOLCD AND GRP=:LNGRP")
								if rs5.next() do {
								set COLTYP=rs5.getCol("TYPE")
								if ((COLTYP=50)!(COLTYP=70)) set CIDTYPE="06"
									}
								}
							}
						}
					}
				if '$G(CIDTYPE) set CIDTYPE="18"
	
				// review primary/secondary account ownership
				new SECOWNER,STAXID,PIND,SECACN
				if '$G(SC1),'$G(SC2),'$G(SC3) set (SECOWNER,STAXID)="" set PIND=0  // sole acct owner
				else  do {
					set SC1=$G(SC1),SC2=$G(SC2),SC3=$G(SC3)
					// XACN - secondary acct owner, XXACN - primary acct owner
					if (XACN=SC1)!(XACN=SC2)!(XACN=SC3) set SECACN=XXACN,PIND=1 
					// XACN - primary acct owner, need secondary one
					if (XACN'=SC1),(XACN'=SC2),(XACN'=SC3) set SECACN=$S(SC1:SC1,SC2:SC2,SC3:SC3),PIND=2 
					new rcifdata
					set rcifdata=Db.getOneRow("TAXID,NAM","CIF","SECACN")
					set STAXID=$P(rcifdata,$C(9),1)
					set STAXID=$TR(STAXID,"- ","")
					set SECOWNER=$P(rcifdata,$C(9),2)
					}

				new SSSN,TITLE,ADDR,PSSN

				// if the match person is a secondary account
				// owner, report primary owner SSN in positions 402-410
				if PIND=1 set PSSN=STAXID
				else  set PSSN=$$BLKFIL("",9)

				// if the match person is the primary account
				// owner, report secondary owner SSN in positions 411-419
				if (PIND=2),($D(STAXID)) set SSSN=STAXID
				else  set SSSN=$$BLKFIL("",9)

				// format reported data
				set LNM=$E(LNM,1,4)    // only first 4 char. to be reported
				// names comparison should case insensitive 
				if $$UPPER^%ZFUNC($E(INQLNAM,1,4))=$$UPPER^%ZFUNC(LNM) set MFL=1,MFLCNT=MFLCNT+1 
				else  set MFL=2
				set LNM=$$BLKFIL(LNM,4)
	
				set XXCID=XCID    // save for FIDMALL update/length 12
				set XCID=$$BLKFIL(XCID,20)
				
				set TITLE=TITLE1	
				// avoid setting extra spaces if nothing but TITLE1 exists
				if $G(TITLE2)'="" set TITLE=TITLE_" "_TITLE2
				if $G(TITLE3)'="" set TITLE=TITLE_" "_TITLE3
				if $G(TITLE4)'="" set TITLE=TITLE_" "_TITLE4
				set TITLE=$E(TITLE,1,100)
				set TITLE=$$BLKFIL(TITLE,100)
	
				set PCNTRYIND=$S(PCNTRY'="US":1,1:" ") // foreign country ind
				set XNAM=$$BLKFIL(NAM,40)
				set XSECOWNER=$$BLKFIL(SECOWNER,40)
	
				set PZIP=$TR(PZIP,"- ","") // no blanks or hyphens char.
				set PAD1=$$BLKFIL(PAD1,40)
				set PCITY=$$BLKFIL(PCITY,29)
				set PZIP=$$BLKFIL(PZIP,9)
				set ADDR=PAD1_PCITY_PSTATE_PZIP
		
				// FIPSCPBINF -  FIPS code pass-back info
				// should include the state/territory where the Institution's 
				// headquarter is located
				new rs3,FIPSCPBINF,XFIPSCPBINF
				type ResultSet rs3=Db.select("FIPSCODE","STBLFIPS","STATE=:CSTATE OR STATE=:CCNTRY")
				for  quit:'rs3.next()  do {
					set FIPSCPBINF=rs3.getCol(1)
					}
				set XFIPSCPBINF=$$BLKFIL(FIPSCPBINF,5) 

				set XADSPBINF=$$BLKFIL(ADSPBINF,23)    
				set XSPBINF=$$BLKFIL(SPBINF,10)	    
				set XCPBINF=$$BLKFIL(CPBINF,15)	    
	
				set BALIND=2	// acct balance ind
				set BAL=$$^SCARND(BAL,0,0,0,0),XBAL=BAL
				if (STAT=4)!('$G(BAL)) set (BAL,XBAL)="0000000"
				if $G(BAL)["." set XBAL=$P(BAL,".")
				if $L(BAL)>7 set XBAL="9999999"
				if $L(BAL)'>7 set XBAL=$$ZEROFIL(BAL,7)
				set TOTBAL=TOTBAL+BAL

				new REC
				set REC="B"_IDT_LNM_$$BLKFIL("",3)_SSN_XCID_$$BLKFIL("",17)_TITLE
				set REC=REC_PCNTRYIND_XNAM_XSECOWNER_ADDR_XFIPSCPBINF_XADSPBINF
				set REC=REC_$$BLKFIL("",1)_XBAL_MFL_TRUSTIND_XSTAT
				set REC=REC_BALIND_$$BLKFIL("",1)_DOB_XSPBINF_CIDTYPE
				set REC=REC_XCPBINF_$$BLKFIL("",3)_PIND_PSSN_SSSN
	
				set CNT=CNT+1   // total number of accounts reported

				do io.write(.REC)

				/* 
				  update ^FIDMMTCH global with the data needed for the 
				  FIDM Matched Accounts Audit Report
				*/
				new fidmmtch
				type RecordFIDMMTCH fidmmtch=Class.new("RecordFIDMMTCH")
				set fidmmtch.repdate=XTJD
				set fidmmtch.reptype=REPTYPE
				set fidmmtch.taxidpr=TAXID
				set fidmmtch.cid=XXCID
				set fidmmtch.acn=XACN
				set fidmmtch.mfl=MFL
				set fidmmtch.prowner=NAM
				set fidmmtch.secowner=SECOWNER
				set fidmmtch.taxidsec=STAXID
				set fidmmtch.pind=PIND
				set fidmmtch.bal=BAL
				set fidmmtch.trustind=TRUSTIND
				set fidmmtch.cidtype=CIDTYPE
				set fidmmtch.fipscpbinf=FIPSCPBINF
				set fidmmtch.cpbinf=CPBINF
				set fidmmtch.spbinf=SPBINF
				set fidmmtch.adspbinf=ADSPBINF
				set fidmmtch.acctind=XSTAT
				
				do fidmmtch.bypassSave()
				if ER do EXC
				}
			}
		}


	do TOTAL(io)	// create Total record
	
	do io.close()
	
	quit


TOTAL(IO io)	// Totals Record

	set RECTYPE="T"
	if $L(TOTBAL)>9 set TOTBAL="999999999"
	
	// update files for the reports totals info
	if REPTYPE=0 do {
		new fidmalltot
		type RecordFIDMALLTOT fidmalltot=Class.new("RecordFIDMALLTOT")
		set fidmalltot.repdate=XTJD
		set fidmalltot.reptype=REPTYPE
		set fidmalltot.rectype=RECTYPE
		set fidmalltot.totacct=CNT
		set fidmalltot.totacctira=IRACNT
		set fidmalltot.totaccttr=TRCNT
		set fidmalltot.totamt=TOTBAL

		do fidmalltot.bypassSave()
		if ER do EXC
		}

	if REPTYPE=1 do {
		new fidmalltot
		type RecordFIDMALLTOT fidmalltot=Class.new("RecordFIDMALLTOT")
		set fidmalltot.repdate=XTJD
		set fidmalltot.reptype=REPTYPE
		set fidmalltot.rectype=RECTYPE
		set fidmalltot.totacct=CNT
		set fidmalltot.totacctira=IRACNT
		set fidmalltot.totamt=TOTBAL
		set fidmalltot.totacctcl=CLCNT
		set fidmalltot.totacctm=MCNT
		set fidmalltot.totacctn=NEWCNT
		set fidmalltot.totaccttr=TRCNT

		do fidmalltot.bypassSave()
		if ER do EXC
		}

	if REPTYPE=2 do {
		new fidmmtchtot
		type RecordFIDMMTCHTOT fidmmtchtot=Class.new("RecordFIDMMTCHTOT")
		set fidmmtchtot.repdate=XTJD
		set fidmmtchtot.rectype=RECTYPE
		set fidmmtchtot.totacct=CNT
		set fidmmtchtot.totacctc=CIFCNT
		set fidmmtchtot.totacctira=IRACNT
		set fidmmtchtot.totacctmt=MFLCNT
		set fidmmtchtot.totaccttr=TRCNT
		set fidmmtchtot.totamt=TOTBAL

		do fidmmtchtot.bypassSave()
		if ER do EXC
		}

	// format reported data according to the requirements

	if $L(CNT)>9 set CNT="999999999"
	else  set CNT=$$ZEROFIL(CNT,9)

	if $L(TRCNT)>9 set TRCNT="999999999"
	else  set TRCNT=$$ZEROFIL(TRCNT,9)

	if $L(IRACNT)>9 set IRACNT="999999999"
	else  set IRACNT=$$ZEROFIL(IRACNT,9)

	if $L(TOTBAL)<9 set TOTBAL=$$ZEROFIL(TOTBAL,9)
	
	if REPTYPE=0 do {
		set TOT=RECTYPE_CNT_$$BLKFIL("",9)_"000000000"_TRCNT_$$BLKFIL("",36)
		set TOT=TOT_"000000000"_TOTBAL_IRACNT_$$BLKFIL("",320)
		}

	if REPTYPE=1 do {
		if $L(CLCNT)>9 set CLCNT="999999999"
		else  set CLCNT=$$ZEROFIL(CLCNT,9)

		if $L(NEWCNT)>9 set NEWCNT="999999999"
		else  set NEWCNT=$$ZEROFIL(NEWCNT,9)

		if $L(MCNT)>9 set MCNT="999999999"		
		else  set MCNT=$$ZEROFIL(MCNT,9)

		set TOT="T"_CNT_CLCNT_"000000000"_TRCNT_NEWCNT_$$BLKFIL("",9)_MCNT
		set TOT=TOT_$$BLKFIL("",9)_"000000000"_TOTBAL_IRACNT
		set TOT=TOT_$$BLKFIL("",320)
		}

	if REPTYPE=2 do {
		if $L(MFLCNT)>9 set MFLCNT="999999999"
		else  set MFLCNT=$$ZEROFIL(MFLCNT,9)

		if $L(CIFCNT)>9 set CIFCNT="999999999"
		else  set CIFCNT=$$ZEROFIL(CIFCNT,9)

		set TOT="T"_CNT_"000000000"_MFLCNT_TRCNT_"000000000"_$$BLKFIL("",9)
		set TOT=TOT_"000000000"_$$BLKFIL("",9)_CIFCNT_TOTBAL_IRACNT_$$BLKFIL("",320)
		}
	
	do io.write(.TOT)

	quit
 
BLKFIL(VAL,N)	// Blank fill left justified
        
	// VAL - value to be buffered with blanks
	// N - length of returned value

	set VAL=$G(VAL)
	if $L(VAL)>N quit $E(VAL,1,N)
	quit VAL_$E($J(" ",N),1,N-$L(VAL))


ZEROFIL(VAL,N)	// Zero fill right justified

	// VAL - value to be buffered with leading zeros
	// N - length of returned value

	new X,I,SIGN
	set VAL=$G(VAL)
	for I=1:1:N set X=$G(X)_0
	if VAL<0 set SIGN="-",VAL=VAL*-1,RES=$E(X,1,N-($L(VAL)+1))_VAL_SIGN
	else  set RES=$E(X,1,N-$L(VAL))_VAL
	quit RES


EXC	// Log error to DAYEND

	set RM=$$^MSG(4797)	// "FIDM extract file"
	do LOG^UTLEXC("FIDMEXT","*",RM,$G(XCID),$G(%ZTSEQ),$G(ET))
	kill ET,%ZTSEQ
	quit
	

vSIG()	quit "60339^36115^P.R. Swarnalatha^32215"	// Signature - LTD^TIME^USER^SIZE
