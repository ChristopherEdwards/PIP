STPLOGTF(RecordSTOPLOGT stoplogt, String vpar, Boolean vparNorm) // STOPLOGT - Stop Log Action File (Territories level) Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stoplogt.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(stoplogt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(stoplogt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJD").exists()!vx("STPTYP").exists()!vx("KEY1").exists()!vx("KEY2").exists()!vx("SEQ").exists()!vx("LSEQ").exists()!vx("TER").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STOPLOGT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STOPLOGT","TJD = :stoplogt.tjd and STPTYP = :stoplogt.stptyp and KEY1 = :stoplogt.key1 and KEY2 = :stoplogt.key2 and SEQ = :stoplogt.seq and LSEQ = :stoplogt.lseq and TER = :stoplogt.ter") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJD
	type public String STPTYP
	type public String KEY1
	type public String KEY2
	type public String SEQ
	type public String LSEQ
	type public String TER

	type RecordSTOPLOGT stoplogt = Db.getRecord("STOPLOGT","TJD=:TJD,STPTYP=:STPTYP,KEY1=:KEY1,KEY2=:KEY2,SEQ=:SEQ,LSEQ=:LSEQ,TER=:TER")
	if (%ProcessMode = 2) do {
		do stoplogt.setMode(2)

		do STPLOGTF(stoplogt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTOPLOGT stoplogt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STOPLOGT","TJD = :stoplogt.tjd and STPTYP = :stoplogt.stptyp and KEY1 = :stoplogt.key1 and KEY2 = :stoplogt.key2 and SEQ = :stoplogt.seq and LSEQ = :stoplogt.lseq and TER = :stoplogt.ter") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(stoplogt))  S ^STOPLOG("ACT",vobj(stoplogt,-3),vobj(stoplogt,-4),vobj(stoplogt,-5),vobj(stoplogt,-6),vobj(stoplogt,-7),vobj(stoplogt,-8),vobj(stoplogt,-9))=vobj(stoplogt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTOPLOGT stoplogt


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^STOPLOG("ACT",vobj(stoplogt,-3),vobj(stoplogt,-4),vobj(stoplogt,-5),vobj(stoplogt,-6),vobj(stoplogt,-7),vobj(stoplogt,-8),vobj(stoplogt,-9)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordSTOPLOGT stoplogt

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTOPLOGT stoplogt

	if stoplogt.tjd.isNull() do vreqerr("TJD") quit
	if stoplogt.stptyp.isNull() do vreqerr("STPTYP") quit
	if stoplogt.key1.isNull() do vreqerr("KEY1") quit
	if stoplogt.key2.isNull() do vreqerr("KEY2") quit
	if stoplogt.seq.isNull() do vreqerr("SEQ") quit
	if stoplogt.lseq.isNull() do vreqerr("LSEQ") quit
	if stoplogt.ter.isNull() do vreqerr("TER") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOPLOGT","MSG",1767,"STOPLOGT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTOPLOGT stoplogt

	set X = stoplogt.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = stoplogt.stptyp if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("STPTYP", vRM) quit
	if stoplogt.key1.length()>16 set vRM = $$^MSG(1076,16) do vdderr("KEY1", vRM) quit
	if stoplogt.key2.length()>16 set vRM = $$^MSG(1076,16) do vdderr("KEY2", vRM) quit
	set X = stoplogt.seq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = stoplogt.lseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("LSEQ", vRM) quit
	set X = stoplogt.ter if 'X.isNull(),'Db.isDefined("UTBLTER","X") set vRM = $$^MSG(1485,X) do vdderr("TER", vRM) quit
	if stoplogt.actflg.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ACTFLG", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STOPLOGT","MSG",979,"STOPLOGT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordSTOPLOGT stoplogt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("STPTYP").exists() set vux("STPTYP") = vx("STPTYP")
	if vx("KEY1").exists() set vux("KEY1") = vx("KEY1")
	if vx("KEY2").exists() set vux("KEY2") = vx("KEY2")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	if vx("LSEQ").exists() set vux("LSEQ") = vx("LSEQ")
	if vx("TER").exists() set vux("TER") = vx("TER")
	do vkey(1) set voldkey = stoplogt.tjd_","_stoplogt.stptyp_","_stoplogt.key1_","_stoplogt.key2_","_stoplogt.seq_","_stoplogt.lseq_","_stoplogt.ter // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stoplogt.tjd_","_stoplogt.stptyp_","_stoplogt.key1_","_stoplogt.key2_","_stoplogt.seq_","_stoplogt.lseq_","_stoplogt.ter // Copy new keys into object
	type RecordSTOPLOGT vnewrec = stoplogt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STOPLOGT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTOPLOGT stoplogt

	if vux("TJD").exists() set stoplogt.tjd = vux("TJD").piece("|",i)
	if vux("STPTYP").exists() set stoplogt.stptyp = vux("STPTYP").piece("|",i)
	if vux("KEY1").exists() set stoplogt.key1 = vux("KEY1").piece("|",i)
	if vux("KEY2").exists() set stoplogt.key2 = vux("KEY2").piece("|",i)
	if vux("SEQ").exists() set stoplogt.seq = vux("SEQ").piece("|",i)
	if vux("LSEQ").exists() set stoplogt.lseq = vux("LSEQ").piece("|",i)
	if vux("TER").exists() set stoplogt.ter = vux("TER").piece("|",i)
	quit
