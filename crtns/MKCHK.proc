MKCHK(RecordUTBLMKCHK utblmkchk, String vpar, Boolean vparNorm) // UTBLMKCHK - Domestic Payment Maker-Checker Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblmkchk.getMode()                   // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblmkchk,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblmkchk,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String EFTYPE = utblmkchk.eftype
	type String UCLS = utblmkchk.ucls
	type String AMTTYPE = utblmkchk.amttype
	type String AMT = utblmkchk.amt

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EFTYPE").exists()!vx("UCLS").exists()!vx("AMTTYPE").exists()!vx("AMT").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLMKCHK",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLMKCHK","EFTYPE = :utblmkchk.eftype and UCLS = :utblmkchk.ucls and AMTTYPE = :utblmkchk.amttype and AMT = :utblmkchk.amt") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EFTYPE
	type public String UCLS
	type public String AMTTYPE
	type public String AMT

	type RecordUTBLMKCHK utblmkchk = Db.getRecord("UTBLMKCHK","EFTYPE=:EFTYPE,UCLS=:UCLS,AMTTYPE=:AMTTYPE,AMT=:AMT")
	if (%ProcessMode = 2) do {
		do utblmkchk.setMode(2)

		do MKCHK(utblmkchk,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLMKCHK utblmkchk

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLMKCHK","EFTYPE = :utblmkchk.eftype and UCLS = :utblmkchk.ucls and AMTTYPE = :utblmkchk.amttype and AMT = :utblmkchk.amt") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblmkchk,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblmkchk,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblmkchk))  S ^UTBL("MKCHK",vobj(utblmkchk,-3),vobj(utblmkchk,-4),vobj(utblmkchk,-5),vobj(utblmkchk,-6))=vobj(utblmkchk)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLMKCHK utblmkchk

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblmkchk,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("MKCHK",vobj(utblmkchk,-3),vobj(utblmkchk,-4),vobj(utblmkchk,-5),vobj(utblmkchk,-6)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordUTBLMKCHK utblmkchk

	// Type local variables for access keys for defaults
	type public String EFTYPE
	type public String UCLS
	type public String AMTTYPE
	type public String AMT

	if utblmkchk.ver.isNull() set utblmkchk.ver = 0        // ver
	quit


vreqn // Validate required data items

	type public RecordUTBLMKCHK utblmkchk

	if utblmkchk.ver.isNull() do vreqerr("VER") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLMKCHK utblmkchk

	if utblmkchk.eftype.isNull() do vreqerr("EFTYPE") quit
	if utblmkchk.ucls.isNull() do vreqerr("UCLS") quit
	if utblmkchk.amttype.isNull() do vreqerr("AMTTYPE") quit
	if utblmkchk.amt.isNull() do vreqerr("AMT") quit

		if vx("VER").exists(),utblmkchk.ver.isNull() do vreqerr("VER") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMKCHK","MSG",1767,"UTBLMKCHK."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After_insert Maker-Checker Function.

	type public RecordUTBLMKCHK utblmkchk
	/*
	---------- Revision History ------------------------------------------
	09/22/99 - CARROLLJ - 31126
		   Convert to PSL
	

	06/10/99 - MALTEPESA 32231
		   Added an edit check to not allow to file w\o Sight Ver or 
		   Fields Ver
	05/11/99 - MALTEPESA 32231
		   Added new error messages to restrict user from filing records in
		   the table with sight and re-key verification checked all together.
	*/
	
	if '(utblmkchk.ver),(utblmkchk.flds)="" do Runtime.setErrMSG("UTBLMKCHK",4037) quit:ER 
	if (utblmkchk.ver=1),(utblmkchk.flds)'="" do Runtime.setErrMSG("UTBLMKCHK",4037) quit:ER 
	if (utblmkchk.flds'=""),(utblmkchk.flds[" ") do Runtime.setErrMSG("UTBLMKCHK",3924) quit:ER 
	quit
	

vau1 // Trigger AFTER_UPDATE - After update trigger

	type public RecordUTBLMKCHK utblmkchk
	/*
	---------- Revision History ------------------------------------------
	06/10/99 - MALTEPESA 32231
		   Added an edit check to not allow to file w\o Sight Ver or 
		   Fields Ver
	
	05/11/99 - MALTEPESA 32231
		   Added new error messages to restrict user from filing records in
		   the table with sight and re-key verification checked all together.
	*/


	if '(utblmkchk.ver),(utblmkchk.flds)="" do Runtime.setErrMSG("UTBLMKCHK",4037) quit:ER 
	if (utblmkchk.ver=1),(utblmkchk.flds)'="" do Runtime.setErrMSG("UTBLMKCHK",4037) quit:ER 
	if (utblmkchk.flds'=""),(utblmkchk.flds[" ") do Runtime.setErrMSG("UTBLMKCHK",3924) quit:ER 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLMKCHK utblmkchk

	set X = utblmkchk.eftype if 'X.isNull(),'{List}"CO,PO,SCO,SPO,DD".contains(X) set vRM = $$^MSG(1485,X) do vdderr("EFTYPE", vRM) quit
	set X = utblmkchk.ucls if 'X.isNull(),'Db.isDefined("SCAU0","X") set vRM = $$^MSG(1485,X) do vdderr("UCLS", vRM) quit
	set X = utblmkchk.amttype if 'X.isNull(),'Db.isDefined("STBLAMTTYP","X") set vRM = $$^MSG(1485,X) do vdderr("AMTTYPE", vRM) quit
	set X = utblmkchk.amt if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,1,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLMKCHK.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utblmkchk.flds.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FLDS", vRM) quit
	if '("01"[utblmkchk.VER) set vRM=$$^MSG(742,"L") do vdderr("VER", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMKCHK","MSG",979,"UTBLMKCHK."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLMKCHK utblmkchk

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("EFTYPE").exists() set vux("EFTYPE") = vx("EFTYPE")
	if vx("UCLS").exists() set vux("UCLS") = vx("UCLS")
	if vx("AMTTYPE").exists() set vux("AMTTYPE") = vx("AMTTYPE")
	if vx("AMT").exists() set vux("AMT") = vx("AMT")
	do vkey(1) set voldkey = utblmkchk.eftype_","_utblmkchk.ucls_","_utblmkchk.amttype_","_utblmkchk.amt // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblmkchk.eftype_","_utblmkchk.ucls_","_utblmkchk.amttype_","_utblmkchk.amt // Copy new keys into object
	type RecordUTBLMKCHK vnewrec = utblmkchk.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLMKCHK",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLMKCHK utblmkchk

	if vux("EFTYPE").exists() set utblmkchk.eftype = vux("EFTYPE").piece("|",i)
	if vux("UCLS").exists() set utblmkchk.ucls = vux("UCLS").piece("|",i)
	if vux("AMTTYPE").exists() set utblmkchk.amttype = vux("AMTTYPE").piece("|",i)
	if vux("AMT").exists() set utblmkchk.amt = vux("AMT").piece("|",i)
	quit
