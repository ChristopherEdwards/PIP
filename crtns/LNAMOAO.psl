public LNAMOAO
  /*
ORIG: satyanas - 09/09/2005
DESC: Dayend Processing For Add-ons And Dealer

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------
 
 07/05/07 - Nagarjuna P R - CR 27884
 	    Modified TR section to set correct value to X (i.e ITC).
 
 04/17/07 - RussellDS - CR26387
 	    Eliminated use of UHFETCH.

 07/31/06 - KELLYP - CR 22048
 	    Modified TR section to eliminate PRECEDENCE warning.

 05/18/05 - GIRIDHAL - 21297
 	    Removed references to .sdphld. Replaced it with zero.
 	    
 09/09/05 - Satyanas - 16994
	    Converted the M to PSL.

 */
 	
 	// Dayend Processing For Add-ons And Dealers

 	type public Boolean ER
 	type public Date TPD
 	type public Number BRCD,TRC
 	type public String ET,ERRM()
  	
       	type ResultSet rs=Db.select("NCD","DAYENDAOAMO","NXADT=:%SystemDate")
	if rs.isEmpty() quit
        
        set ER=0
        set ET=""
        
        // Add-on Amortization teller is not defined.
        set ERRM(1)=$$^MSG("3815")
        
	// Add-on Teller is not set up in user table.
	set ERRM(2)=$$^MSG("3816")
	
	// Account Locked By Another User, Not Processed
	set ERRM(3)=$$^MSG("4011")
	
	// Amount Processed Equal to Zero
	set ERRM(6)=$$^MSG("3819")
	
	// Amortization Method Undefined, Account Not Processed
	set ERRM(7)=$$^MSG("3818") 
	
	// Posting Branch Not Defined
	set ERRM(8)=$$^MSG("3823")
	
	// Posting Tran Code Not Defined - Posting Halted
	set ERRM(9)=$$^MSG("3825")
	
	// Posting Offset Account Not Defined - Posting Halted
	set ERRM(10)=$$^MSG("3824")
	
	// Payee Collection Rate Not Defined, Account Not Processed
 	set ERRM(11)=$$^MSG("3822") 
	
	// Payee Collection % of Bal Not Defined, Account Not Processed
	set ERRM(12)=$$^MSG("3821")
	
	// Error in account, not processed
	set ERRM(13)=$$^MSG("3511")
	
	// Zero interest rate, not processed
	set ERRM(14)=$$^MSG("3827")
	
	// Amortization Frequency Undefined, Account Not Processed
	set ERRM(15)=$$^MSG("3817") 
	
	type RecordUTBLSRC src=Db.getRecord("UTBLSRC","SRCTYP='AOAMO',KEY='ALL'",1)
	set BRCD=src.brcd 

	if 'BRCD.length() do { quit
		set ET=ERRM(8)
		do CATCHERR
		}	

	set %UserID=src.uid 
	if '(%UserID.length()) do { quit
		set ET=ERRM(2)
		do CATCHERR
		}	
	
	type RecordSCAU scau=Db.getRecord("SCAU","UID=:%UserID",1)
	if 'scau.getMode() do { quit
		set ET=ERRM(1)
		do CATCHERR
		}
	set %UserClass=scau.%ucls
	
	type RecordTPCTRL tp=Db.getRecord("TPCTRL","BRCD=:BRCD,UID=:%UserID,TPD=:%SystemDate",1)
	set TPD=tp.pmdate if TPD="" set TPD=%SystemDate
	
	type ResultSet ttx=Db.select("TSEQ","TTX","TJD=:%SystemDate AND BRCD=:BRCD AND UID=:%UserID","TSEQ DESC")
	if ttx.next() do {
		set TRC=ttx.getCol("TSEQ")
		set TRC=((TRC\1000)*1000)+1001
		do ^TTXLOK
		}	
	if ER do { quit
		set:'ET.get() ET="TTXLOK" 
		do CATCHERR
		}

	do ST
	
	quit
	
	
ST	//To get the Type from DAYENDAOAMO Table

	type public Boolean GLC,GLD,ER,RCM
	type public Number DBF
	type public String CITC,CTC,CGL,DESC,DGL,DITC,DTC,ERRM(),ET,%MSKD,PAYEE,PLAN,TRN(),TYPE
	          
	type ResultSet rs=Db.select("TYP","DAYENDAOAMO","NXADT=:%SystemDate")
	if rs.isEmpty() do POSD quit
	while rs.next() do {
		set TYPE=rs.getCol("TYP")

		type ResultSet rs1=Db.select("PAYEE","DAYENDAOAMO","NXADT=:%SystemDate AND TYP=:TYPE")
		while rs1.next() do {
			set PAYEE=rs1.getCol("PAYEE")

			type ResultSet rs2=Db.select("PLAN","DAYENDAOAMO","NXADT=:%SystemDate AND TYP=:TYPE AND PAYEE=:PAYEE")
			while rs2.next() do {
				set PLAN=rs2.getCol("PLAN")
		
				type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:TYPE,PAYEE=:PAYEE,PLAN=:PLAN",1)
				set CTC = aoamo.ctran
				set DTC = aoamo.dtran
							
				if 'aoamo.dtran.length() do { quit
					set ET=ERRM(9)
					do CATCHERR
					}

				set DGL=aoamo.dgl	

				if 'aoamo.dgl.length() do { quit
					set ET=ERRM(10)
					do CATCHERR
					}	
					
				set GLD=aoamo.gld
							
				if 'aoamo.ctran.length() do { quit
					set ET=ERRM(9)
					do CATCHERR
					}	
				
				set CGL=aoamo.cgl	
								
				if 'aoamo.cgl.length() do { quit
					set ET=ERRM(10)
					do CATCHERR
					}	
							
				set GLC=aoamo.glc
							
				type RecordTRN trn
				if 'TRN(aoamo.dtran).exists() do {
					set trn=Db.getRecord("TRN","ETC=:aoamo.dtran",1)
					set DITC=trn.feepln
					do TR(.DITC)
					}

				if 'TRN(aoamo.ctran).exists() do {
					set trn=Db.getRecord("TRN","ETC=:aoamo.ctran",1)
					set CITC=trn.feepln
					do TR(.CITC)
					}
									
				set DBF=+(aoamo.decline)
				set DESC= %CurrentDate.toString(%MSKD.get())_" "_TYPE_" "_PAYEE
				set RCM=aoamo.rcm
				do CID(.aoamo)
				}
			}
		}	
		
	quit
	
			
CID( RecordAOAMO aoamo)	//-----------------------------------------------		
	
	type public Boolean ER,RCM
	type public Number AO,AOB,AOTD,%AMT,ACN(),CC,CID,DBF,NEG
	type public String AOC,AOI,AOT,CID50,CID51,CID54,CID57,CRCD,ERRM(),ET,FRE,PAYEE,PLAN,%SI,%SO,TYPE,TTYPE
	type Date JD,NJD
										
	type ResultSet rs3=Db.select("CID","DAYENDAOAMO","NXADT=:%SystemDate AND TYP=:TYPE AND PAYEE=:PAYEE AND PLAN=:PLAN")
     	while rs3.next() do {
		set CID=rs3.getCol("CID")
				     		
		type RecordDAYENDAOAMO dayendaoamo=Db.getRecord("DAYENDAOAMO","NXADT=:%SystemDate,TYP=:TYPE,PAYEE=:PAYEE,PLAN=:PLAN,CID=:CID",1)
				
		lock +ACN(CID):2 else  do {
			set ET=ERRM(3)
			do CATCHERR
			do NX
			}
				     
     		type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
					
		set CC=ln.cc
		set CRCD=ln.crcd
									
		//account closed
		if ln.stat=4 do NX quit
			
		// To get the entire record from the LN table only for the 50th Node.
		set CID50=ln.type_"|"_ln.cls_"|"_ln.grp_"|"_ln.acngrp_"|"_ln.ccode_"|"_ln.lnm_"|"_ln.cc
		set CID50=CID50_"|"_ln.pers_"|"_ln.regd_"|"_ln.atn_"||"_ln.crcd_"|"_ln.mf_"|"_ln.secgrp
		set CID50=CID50_"|"_ln.feepln_"|"_ln.anlsys_"|"_ln.comm_"|"_ln.regcc_"|"_ln.regccexc
		set CID50=CID50_"|"_ln.regccexp_"|"_ln.glsc_"|"_ln.lfpc_"|"_ln.lfsc_"|"_ln.subcd
		set CID50=CID50_"|"_ln.custom1_"|"_ln.custom2_"|"_ln.custom3_"|"_ln.highvol_"|"_ln.emplben
		set CID50=CID50_"|"_ln.fldstaff_"|"_ln.emplno_"|"_ln.aomcode
	        
		// To get the entire record from the LN table only for the 51st Node.
		set CID51=ln.bal_"|"_ln.tld_"||"_ln.rflg_"|"_ln.cntdr_"|"_ln.cntcr_"|"_ln.balcol_"|"_ln.chkhld
		set CID51=CID51_"|"_ln.phld_"|"_ln.ccl_"|"_ln.revf_"|"_ln.stp_"|"_ln.udbal_"|"_ln.fmld
		set CID51=CID51_"|"_ln.pbi_"|"_ln.odd_"||"_ln.teb_"|"_ln.icpa_"|"_ln.ccld_"|"_ln.stat
		set CID51=CID51_"|"_ln.balint_"|"_ln.lpdt_"||"_ln.habl1_"|"_ln.habl2_"|"_ln.flttbl
		set CID51=CID51_"|"_ln.hldtbl_"|"_ln.adf_"|"_ln.entf_"|"_ln.coa_"|"_ln.rec_"||"
		set CID51=CID51_ln.lnsa_"||||"_ln.rskopt_"|||||||"_ln.donrsk_"||"_0_"|"_ln.stfnet
		
		// To get the entire record from the LN table only for the 54th Node.
		set CID54=ln.acr_"||"_ln.acs_"|"_ln.iun_"||"_ln.iytd_"|"_ln.ipy_"|"_ln.ipl_"|||||"_ln.iplcf
		set CID54=CID54_"|"_ln.daa_"||"_ln.intdef_"|"_ln.nai_"|"_ln.negacr_"|"_ln.ipnd_"||"_ln.trexd
		set CID54=CID54_ln.trate_"|"_ln.coytd_"|"_ln.copy_"|"_ln.recytd_"|"_ln.recpy_"|"_ln.negiytd
		set CID54=CID54_ln.negipy_"|"_ln.negipl_"||||||||||"_ln.prefint_"|"_ln.refint_"|||"_ln.negacrun
		set CID54=CID54_"||||||||||||||||||||||||"_ln.proind_"|"_ln.probal
	                	
		// To get the entire record from the LN table only for the 57th Node.
	        set CID57=ln.irn_"|"_ln.idf_"|"_ln.ichnd_"|"_ln.ichld_"|"_ln.intmx_"|"_ln.intmn_"|"_ln.intmno
		set CID57=CID57_"||"_ln.sch_"|"_ln.icpf_"|"_ln.eod_"|"_ln.eirn_"|"_ln.irsexm_"|"_ln.diu
		set CID57=CID57_"|"_ln.dic_"|"_ln.irf_"|"_ln.iacf_"|"_ln.diaa_"|"_ln.diand_"|"_ln.diald
		set CID57=CID57_"|"_ln.dimxb_"|"_ln.dimxy_"|"_ln.dimxl_"|"_ln.aniro_"|"_ln.anirnd_"|"_ln.anirld
		set CID57=CID57_"|"_ln.rpidc_"|"_ln.aniriv_"|"_ln.invl_"|"_ln.narl_"|"_ln.namxb_"|"_ln.idefly
		set CID57=CID57_"|"_ln.ditgacn_"|"_ln.dirfre_"|"_ln.dirnd_"|"_ln.dirld_"|||"_ln.intramt1
		set CID57=CID57_"|"_ln.intrrat1_"|"_ln.intrexp1_"|"_ln.intramt2_"|"_ln.intrrat2_"|"_ln.intrexp2
		set CID57=CID57_"|"_ln.intramt3_"|"_ln.intrrat3_"|"_ln.intrexp3_"|"_ln.air_"|"_ln.nalpB_"|"_ln.flat_"|"_ln.intdeftytd_"|"_ln.intdefpty      	
				
	        set ER=0
	        	
		if TYPE.extract()="P" do {
					       	        						       			        			
			type String SOSIPTS
        		type RecordLNCYCPTS lncycpts=Db.getRecord("LNCYCPTS","CID=:CID,TYP=:TYPE",1)
        			
			// To get the entire Record from the Table LNCYCPTS.
        		set SOSIPTS=lncycpts.caltd_"|"_lncycpts.nxadt_"|"_lncycpts.lsadt_"|"_lncycpts.cntr
			set SOSIPTS=SOSIPTS_"|"_lncycpts.term_"|"_lncycpts.freq_"|"_lncycpts.amt_"|"_lncycpts.rate
	        	set SOSIPTS=SOSIPTS_"|"_lncycpts.payee_"|"_lncycpts.pdby_"|"_lncycpts.apr_"|"_lncycpts.mben
			set SOSIPTS=SOSIPTS_"|"_lncycpts.itrm_"|"_lncycpts.reb_"|"_lncycpts.dcp_"|"_lncycpts.rcm
        		set SOSIPTS=SOSIPTS_"|"_lncycpts.plan_"|"_lncycpts.cipl_"|"_lncycpts.oipl_"|"_lncycpts.cacr
			set SOSIPTS=SOSIPTS_"|"_lncycpts.cbal_"|"_lncycpts.cseq_"|"_lncycpts.ramt_"|"_lncycpts.rynd
        		set SOSIPTS=SOSIPTS_"|"_lncycpts.ryfre_"|"_lncycpts.ryld_"|"_lncycpts.npda_"|"_lncycpts.nsip
			set SOSIPTS=SOSIPTS_"|"_lncycpts.nyld_"|"_lncycpts.deldol_"|"_lncycpts.efd_"|"_lncycpts.gcd
	        	set SOSIPTS=SOSIPTS_"|"_lncycpts.gfd_"|"_lncycpts.nfee_"|"_lncycpts.ninv_"|"_lncycpts.rbal_"|"_lncycpts.xnetbal
        		set (%SO,%SI)=SOSIPTS
        		}
		
		if TYPE.extract()="M" do {
				        		        				
			type String SOSIMSC
			type RecordLNCYCMSC msc=Db.getRecord("LNCYCMSC","CID=:CID,TYP=:TYPE",1)
				        	
	        	set SOSIMSC=msc.caltd_"|"_msc.nxadt_"|"_msc.lsadt_"|"_msc.cntr_"|"_msc.term_"|"_msc.freq
	        	set SOSIMSC=SOSIMSC_"|"_msc.amt_"|"_msc.rate_"|"_msc.payee_"|"_msc.pdby_"|"_msc.apr
			set SOSIMSC=SOSIMSC_"|||"_msc.itrm_"|"_msc.reb_"||"_msc.drc_"|"_msc.dcp_"|"_msc.rcm_"|"_msc.plan
	        	set SOSIMSC=SOSIMSC_"|"_msc.pbal_"||||"_msc.cipl_"|"_msc.oipl_"|"_msc.cacr_"|"_msc.cbal_"|"_msc.cseq
			set SOSIMSC=SOSIMSC_"|"_msc.ramt_"|"_msc.rynd_"|"_msc.ryfre_"|"_msc.ryld_"|||"_msc.npda
			set SOSIMSC=SOSIMSC_"|||"_msc.nsip_"|"_msc.nyld
			set (%SO,%SI)=SOSIMSC
			}
			
		if TYPE.extract()="I" do {	
					       
		        type RecordLNCYCINS ins=Db.getRecord("LNCYCINS","CID=:CID,TYP=:TYPE",1)
        			
			// To get the entire Record from the Table LNCYCINS.
        			
        		type String SOSIINS
        			
			set SOSIINS=ins.caltd_"|"_ins.nxadt_"|"_ins.lsadt_"|"_ins.cntr_"|"_ins.term_"|"_ins.freq_"|"_ins.amt
        		set SOSIINS=SOSIINS_"|"_ins.rate_"|"_ins.payee_"|"_ins.pdby_"|"_ins.apr_"|"_ins.cnum_"|"_ins.mben
			set SOSIINS=SOSIINS_"|"_ins.itrm_"|"_ins.reb_"|"_ins.iamt_"|"_ins.drc_"|"_ins.dcp_"|"_ins.rcm_"|"_ins.plan
        		set SOSIINS=SOSIINS_"|"_ins.pbal_"|||"_ins.irla_"|"_ins.cipl_"|"_ins.oipl_"|"_ins.cacr_"|"_ins.cbal
			set SOSIINS=SOSIINS_"|"_ins.cseq_"|"_ins.ramt_"|"_ins.rynd_"|"_ins.ryfre_"|"_ins.ryld_"|||"_ins.npda
        		set SOSIINS=SOSIINS_"|||"_ins.nsip_"|"_ins.nyld
        		set (%SO,%SI)=SOSIINS		
        		}	

		if TYPE.extract()="D" do {
			type RecordLNCYCDLD dld=Db.getRecord("LNCYCDLD","CID=:CID,TYP=:TYPE",1)
        		
        		// To get the entire Record from the Table LNCYCDLD.
        			
        		type String SOSIDLD
        			        			
			set SOSIDLD=dld.caltd_"|"_dld.nxadt_"|"_dld.lsadt_"|"_dld.cntr_"|"_dld.term_"|"_dld.freq_"|"_dld.amt
        		set SOSIDLD=SOSIDLD_"|"_dld.rate_"|"_dld.payee_"|"_dld.pdby_"|"_dld.apr_"|||"_dld.itrm_"|"_dld.reb
			set SOSIDLD=SOSIDLD_"||"_dld.drc_"|"_dld.dcp_"|"_dld.rcm_"|"_dld.plan_"|"_dld.pbal_"|"_dld.drcp_"|"_dld.drcdd
        		set SOSIDLD=SOSIDLD_"||"_dld.cipl_"|"_dld.oipl_"|"_dld.cacr_"|"_dld.cbal_"|"_dld.cseq
			set SOSIDLD=SOSIDLD_"|"_dld.ramt_"|"_dld.rynd_"|"_dld.ryfre_"|"_dld.ryld_"|||"_dld.npda
        		set SOSIDLD=SOSIDLD_"|||"_dld.nsip_"|"_dld.nyld
        		set (%SO,%SI)=SOSIDLD
        		}		

				//account already cycled	
		if %SI.piece("|",2)'=%SystemDate do NX quit  
		
		set AOTD=+(%SI.piece("|",1))
		set AOC=%SI.piece("|",4)
		set AOT=%SI.piece("|",5)

		//Fully amortized
		if AOT=AOC do NX  quit
		set FRE=%SI.piece("|",6)
					
		if 'FRE.length() set FRE=ln.dist1fre
     					
     		set AO=%SI.piece("|",7)

		// Cycling a negative amount 
		set NEG=AO<0 if NEG set AO=-AO 
		
		set AOI=%SI.piece("|",8) 
					
		if 'AOI set AOI=+CID57
		
		if 'AOI,((aoamo.met="ACT")!(RCM>0)) do { quit
			set ET=ERRM(14)
			do CATCHERR
			do NX
			}	  
			
		//AOB=amort balance (what is left) 
	
		set AOB=AO-AOTD 
		set JD=%SI.piece("|",2)
		set NJD=JD.nextFreqDate(FRE)

		if ER do { quit
			set ET=ERRM(15)
			do CATCHERR
			do NX
			}
        	        	
		set %SO.piece("|",3)=%SI.piece("|",2)
		set %SO.piece("|",2)=NJD
		set (%AMT,ER)=0

		if RCM do RCM(.ln) do A1(.dayendaoamo) quit
		if aoamo.met="SL" do SL do A1(.dayendaoamo) quit
		if aoamo.met="R78" do R78 do A1(.dayendaoamo) quit
		if aoamo.met="ACT" do ACT do A1(.dayendaoamo) quit
		if aoamo.met="DB" do DB do A1(.dayendaoamo) quit
					
		set ER=1
		set ET=ERRM(7)
		do CATCHERR
		do NX
		}
		
	quit


A1( RecordDAYENDAOAMO dayendaoamo)
       
  	type public Boolean ER,RCM
  	type public Number %AMT,AOTD,NEG
  	type public String CID51,CID54,ET,ERRM(),KEY,%SI,%SO 
  
	if ER do { quit
		set ET=ERRM(13)
		do CATCHERR
		do NX
		}	
	
	if NEG set %AMT=-%AMT
	
	set KEY=dayendaoamo.typ_","_dayendaoamo.payee_","_dayendaoamo.plan

	set %SO.piece("|",1)=AOTD+%AMT
	set %SO.piece("|",4)=%SI.piece("|",4)+1
	set %SO.piece("|",26)=%SI.piece("|",25)
	set %SO.piece("|",25)=CID54.piece("|",8)
	set %SO.piece("|",27)=+CID54
	set %SO.piece("|",28)=+CID51
	set %SO.piece("|",29)=Db.nextVal("HIST", "CID=:dayendaoamo.cid")
	set %SO.piece("|",30)=%AMT

	if (dayendaoamo.ncd).length() set %SO.piece("|",2)=dayendaoamo.ncd
	
	if (dayendaoamo.typ).extract()="P" do { 
	        type RecordLNCYCPTS pts=Db.getRecord("LNCYCPTS","CID=:dayendaoamo.cid,TYP=:dayendaoamo.typ",1)
	        set pts.caltd=%SO.piece("|",1)
	        set pts.nxadt=%SO.piece("|",2)
	        set pts.lsadt=%SO.piece("|",3)
		set pts.cntr=%SO.piece("|",4)        
		set pts.oipl=%SO.piece("|",26)
		set pts.cacr=%SO.piece("|",27)
		set pts.cbal=%SO.piece("|",28)
		set pts.cseq=%SO.piece("|",29)
		set pts.ramt=%SO.piece("|",30)
		do pts.save()
	        }
	        
	if (dayendaoamo.typ).extract()="D"  do {
		type RecordLNCYCDLD dld=Db.getRecord("LNCYCDLD","CID=:dayendaoamo.cid,TYP=:dayendaoamo.typ",1)
		set dld.caltd=%SO.piece("|",1)
	        set dld.nxadt=%SO.piece("|",2)
	        set dld.lsadt=%SO.piece("|",3)
		set dld.cntr=%SO.piece("|",4)        
		set dld.oipl=%SO.piece("|",26)
		set dld.cacr=%SO.piece("|",27)
		set dld.cbal=%SO.piece("|",28)
		set dld.cseq=%SO.piece("|",29)
		set dld.ramt=%SO.piece("|",30)
		do dld.save()
		}

	if (dayendaoamo.typ).extract()="M" do {
		type RecordLNCYCMSC msc=Db.getRecord("LNCYCMSC","CID=:dayendaoamo.cid,TYP=:dayendaoamo.typ",1)	
		set msc.caltd=%SO.piece("|",1)
	        set msc.nxadt=%SO.piece("|",2)
	        set msc.lsadt=%SO.piece("|",3)
		set msc.cntr=%SO.piece("|",4)        
		set msc.oipl=%SO.piece("|",26)
		set msc.cacr=%SO.piece("|",27)
		set msc.cbal=%SO.piece("|",28)
		set msc.cseq=%SO.piece("|",29)
		set msc.ramt=%SO.piece("|",30)
		do msc.save()
		}

	if (dayendaoamo.typ).extract()="I" do {		
		type RecordLNCYCINS ins=Db.getRecord("LNCYCINS","CID=:dayendaoamo.cid,TYP=:dayendaoamo.typ",1)
		set ins.caltd=%SO.piece("|",1)
	        set ins.nxadt=%SO.piece("|",2)
	        set ins.lsadt=%SO.piece("|",3)
		set ins.cntr=%SO.piece("|",4)        
		set ins.oipl=%SO.piece("|",26)
		set ins.cacr=%SO.piece("|",27)
		set ins.cbal=%SO.piece("|",28)
		set ins.cseq=%SO.piece("|",29)
		set ins.ramt=%SO.piece("|",30)
		do ins.save()
		}
		
	type Date NXADT=%SO.piece("|",2)
	
	type RecordDAYENDAOAMO dayendaoamo1=Db.getRecord("DAYENDAOAMO","NXADT=:NXADT,TYP=:dayendaoamo.typ,PAYEE=:dayendaoamo.payee,PLAN=:dayendaoamo.plan,CID=:dayendaoamo.cid",1)
	set dayendaoamo1.ncd=""
	do dayendaoamo1.save()
	
	if 'NEG,%AMT'<.005 do A2 quit
	
	if NEG,%AMT'>-.005 do A2 quit
	
	if 'NEG,'RCM do { quit
		set ER=1
		set ET=ERRM(16)
		do CATCHERR
		do NX
		}	
	
	if 'NEG do NX quit
	
	if NEG,'RCM do { quit
		set ER=1
		set ET=ERRM(6)
		do CATCHERR
		do NX
		}	
	
	if NEG do NX 
	
	quit

	
A2	// file into TTX if detailed or accumulate totals for payee
	
	type public Boolean GLD
	type public Number %AMT,CC
	type public String CRCD,KEY,TOT(),TOTD()
	
	if GLD,'TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC).exists() do TOTINI
	if GLD set TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC,0)=TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC,0)+%AMT do A3 quit
	if 'TOTD(CRCD,KEY,CC).exists() do TOTDINI
	set TOTD(CRCD,KEY,CC,0)=TOTD(CRCD,KEY,CC,0)+%AMT

	do A3
	quit

	
A3	// file into TTX if detailed or accumulate totals for payee

	type public Boolean GLC
        type public Number %AMT,CC
	type public String CRCD,KEY,TOT(),TOTD()
		
  	if GLC,'TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC).exists() do TOTINI
	if GLC set TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC,1)=TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC,1)+%AMT do NX quit
	if 'TOTD(CRCD,KEY,CC).exists() do TOTDINI
	set TOTD(CRCD,KEY,CC,1)=TOTD(CRCD,KEY,CC,1)+%AMT
        
        do NX
        quit 
   
             	
NX	// To kill the variables	

	type public Number %AMT,%ORG,%REM
	type public String %SI,%SO	
		
	kill %AMT,%ORG,%REM,%SI,%SO

	quit


POSD	//Post Deposit transactions

	type public Number TRC
	type public String CGL,CTC,DGL,DESC,DTC,KEY,TAMT,TOTD()
	type public Number I
	type String CC,CRCD,X
		
	set CRCD=""
	
	for  set CRCD=TOTD(CRCD).order() quit:CRCD.isNull()   do {
		set KEY=""

		for  set KEY=TOTD(CRCD,KEY).order() quit:KEY.isNull()   do {
			set CC=""

			for  set CC=TOTD(CRCD,KEY,CC).order() quit:CC.isNull()   do {
				set X=TOTD(CRCD,KEY,CC)
				set DGL=X.piece("|",1),DTC=X.piece("|",2)
				set CGL=X.piece("|",3),CTC=X.piece("|",4)
				set DESC=X.piece("|",6)
				
				//To get the TAMT from TOTD array
				for I=0:1:I>1 do {
					set TAMT=TOTD(CRCD,KEY,CC,I)
					if 'TAMT quit
					if 'I do P4
					if I do P5
					set TRC=((TRC\1000)*1000)+1001
					}
				}
			}
		}			

	do TTX
	quit


P4	// file into TTX if detailed or accumulate totals for payee

	type public Number BRCD,%MCP,TRC
	type public String CRCD,DESC,DITC,DGL,DTC,TAMT,TLO,X

	set X=DGL_"|"_DITC_"|"_DTC_"|"_TAMT_"|"_%SystemDate_"|"_TLO
	set X=X_"||"_DESC_"|"_+$H_"|"_$H.piece(",",2)_"|"_BRCD_"|"_TRC_"|"_%UserID
	
	if %MCP set X.piece("|",17)=CRCD
	
   	type RecordTTX ttx=Db.getRecord("TTX","TJD=:%SystemDate,BRCD=:BRCD,UID=:%UserID,TSEQ=:TRC",1)

	set ttx.cid=DGL
	set ttx.itc=DITC
	set ttx.etc=DTC
	set ttx.tamt=TAMT
	set ttx.efd=%SystemDate
	set ttx.tlo=TLO
	set ttx.tcmt=DESC
	set ttx.cdt=+$H
	set ttx.tim=$H.piece(",",2)
	set ttx.brcde=BRCD
	set ttx.trc=TRC
	set ttx.uidt=%UserID

	if %MCP set ttx.crcd=CRCD

	do ttx.save()
   		
	quit
	
	
	//Setting Data to TTX table
	
P5		
	type public Number BRCD,%MCP,TRC
	type public String CGL,CITC,CRCD,CTC,DESC,TAMT,TLO,X
	
	set X=CGL_"|"_CITC_"|"_CTC_"|"_TAMT_"|"_%SystemDate_"|"_TLO
	set X=X_"||"_DESC_"|"_+$H_"|"_$H.piece(",",2)_"|"_BRCD_"|"_TRC_"|"_%UserID
	
	if %MCP set X.piece("|",17)=CRCD
	
	type RecordTTX ttx=Db.getRecord("TTX","TJD=:%SystemDate,BRCD=:BRCD,UID=:%UserID,TSEQ=:TRC",1)

	set ttx.cid=CGL
	set ttx.itc=CITC
	set ttx.etc=CTC
	set ttx.tamt=TAMT
	set ttx.efd=%SystemDate
	set ttx.tlo=TLO
	set ttx.tcmt=DESC
	set ttx.cdt=+$H
	set ttx.tim=$H.piece(",",2)
	set ttx.brcde=BRCD
	set ttx.trc=TRC
	set ttx.uidt=%UserID

	if %MCP set ttx.crcd=CRCD

	do ttx.save()
		
	quit

	
TTX	//Post transactions

	type public Boolean ER
	type public Date TPD
	type public Number BRCD
	type public String ET
	type String TOT
	
	//Post miscellaneous transactions
	
	set TOT="TOT"
	
	do OFFSET^UMSC(TPD,BRCD,%UserID,.TOT,0)
	
	if Db.isDefined("TTXUID","%SystemDate,BRCD,%UserID") lock  do EXIT quit
	
	do ^TTXP1 
	if ER do { quit
		// Error in account, not processed
		set:'ET.get() ET=$$^MSG("3511") 
		do CATCHERR
		}
			
	quit	
	
	
EXIT	//Kill System Variabls	

	type public String %REPEAT,%SI,%SO 
	
	kill %REPEAT,%SI,%SO 

	quit
	
	
TR(X)	//Setting the PMing indicator	

	type public Date TPD
	
	if (TPD-%SystemDate) set X=(X.extract(1,7)_("0000000").extract(1,7-X.length()))_1_X.extract(9,99)

	quit


TOTINI	//Initialize TOT (G/L)		

	type public Boolean GLC,GLD
	type public Number CC
	type public String CGL,CTC,DGL,DTC,KEY,TOT(),X
	type String A,B,C,CRCD

	//TYPE ~p1 PAYEE ~p2 PLAN ~p3 CC ~p4
	set X=$$^MSG("3826",KEY.piece(",",1),KEY.piece(",",2),KEY.piece(",",3),CC)
	set A=DGL_"|"_DTC_"|",B=CGL_"|"_CTC_"|",C="|"_X
	
	if GLC,GLD set TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC)=A_B_C do T1 quit
	if 'GLD set TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC)="||"_B_C do T1 quit
	if 'GLC set TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC)=A_"||"_C do T1
	
	quit
	

TOTDINI		//Initialize TOTD (Deposit)		

	type public Boolean GLC,GLD
	type public Number CC
	type public String CGL,CTC,DGL,DTC,KEY,TOTD(),X
	type String A,B,C,CRCD

	// TYPE ~p1 PAYEE ~p2 PLAN ~p3 CC ~p4
	set X=$$^MSG("3826",KEY.piece(",",1),KEY.piece(",",2),KEY.piece(",",3),CC)
	set A=DGL_"|"_DTC_"|",B=CGL_"|"_CTC_"|",C="|"_X

	if 'GLC,'GLD S TOTD(CRCD,KEY,CC)=A_B_C do T2 quit
	if 'GLD S TOTD(CRCD,KEY,CC)=A_"||"_C do T2 quit
	if 'GLC S TOTD(CRCD,KEY,CC)="||"_B_C do T2

	quit


T1	//To set TOT array as null

	type public String CRCD,KEY,TOT()
	type public Number CC
	type Number I
	
	for I=0,1 set TOT(CRCD,KEY.piece(",",1),KEY.piece(",",2,3),CC,I)=""
	
	quit
	
		
T2	//To set TOTD array as null

	type public Number CC
	type public String CRCD,KEY,TOTD()
	type Number I
	
	for I=0,1 set TOTD(CRCD,KEY,CC,I)=""

	quit
	

SL	//Straight line calculation method

	type public Number AO,AOAOT,AOB,AOC,AOT,%AMT,CID,NEG,NR
	type public String CALC
			
	if 'AOT quit

	//If amort counter (AOC) > amort term (AOT), set add-on amt = 0
	
	if CALC.exists() do { quit  
		set NR=AOT-AOC
	
		if NR<0 set %AMT=0  quit
		set AOAOT=(AO/AOT)*NR
		set %AMT=AOAOT.roundDec() 
	
		}
	set AOAOT=AO/AOT
	set %AMT=AOAOT.roundDec() if NEG set %AMT=-%AMT

	if %AMT>AOB set %AMT=AOB
	if AOT=AOC set %AMT=AOB,AOB=0
	if AOB set AOB=AOB-%AMT

	quit


R78	//Rule of 78ths calculation method

	type public Number AO,AOB,AOC,AOT,%AMT,CID,NEG
	type public String CALC
	type Number AONR,BOT,NR
	
	set NR=AOT-AOC if NR<0 set %AMT=0 quit
	set BOT=(AOT/2)*(AOT+1) if 'BOT quit
	
	set AONR=AO*(NR/2*(NR+1))/BOT
	
	if CALC.exists() set %AMT=AONR.roundDec() quit

	set AONR=AO*(NR/BOT)
	
	set %AMT=AONR.roundDec() if NEG set %AMT=-%AMT

	if %AMT>AOB set %AMT=AOB
	if AOT=AOC set %AMT=AOB,AOB=0
	if AOB set AOB=AOB-%AMT

	quit

	
ACT	//Actuarial calculation method 

	type public Number AF,AO,AOB,AOC,AOI,AONF,AOT,%AMT,CID,DF,IR,NEG,NF,NR,%REM,%ORG,X
	type public String CALC
	
	set NR=AOT-AOC,IR=AOI/(AF*100)
	if NR<0 set %AMT=0 kill %REM,DF,NF,%ORG,IR,NR quit 
	
	if 'CALC.exists() set NR=NR-1
	set X=$$LNX^%ZFUNC(1+IR)*NR,%REM=$$EXP^%ZFUNC(X)
	set X=$$LNX^%ZFUNC(1+IR)*AOT,%ORG=$$EXP^%ZFUNC(X)

	if '%ORG set %AMT=0 kill %REM,DF,NF,%ORG,IR,NR quit

	set NF=((1/%REM)+(IR*NR))-1,DF=((1/%ORG)+(IR*AOT))-1

	if 'DF S %AMT=0 kill %REM,DF,NF,%ORG,IR,NR quit
	
	set AONF=AO*(NF/DF)
	
	if CALC.exists() set %AMT=AONF.roundDec() set:NEG %AMT=-%AMT kill %REM,DF,NF,%ORG,IR,NR quit
	
	set AONF=AOB-(AO*(NF/DF))
	set %AMT=AONF.roundDec() if NEG S %AMT=-%AMT

	if %AMT>AOB set %AMT=AOB
	if AOT=AOC set %AMT=AOB,AOB=0
	if AOB set AOB=AOB-%AMT

	kill %REM,DF,NF,%ORG,IR,NR

	quit
	
	
DB	//Declining Balance Method  

	type public Number AO,AOB,AOBD,AOC,AOT,%AMT,CID,DBF,NEG,NR
	type public String CALC
	type Number I

	if 'CALC.exists() do DB1 quit
	
	if 'DBF.exists() set DBF=100
	
	set NR=AOT-AOC if NR<0 set %AMT=0 quit
	set AOB=AO if 'AOT quit
	
	set AOBD=(AOB*(DBF/100))/AOT
	for I=1:1:NR set AOB=AOB-AOBD.roundDec()
	
	set %AMT=AOB set:NEG %AMT=-%AMT 

	quit
	
	
DB1	// Amount as calculated

	type public Number AO,AOB,AOBDB,AOC,AOT,%AMT,CID,DBF,NEG
		
	set AOBDB=(AOB*(DBF/100))/AOT
	set %AMT=AOBDB.roundDec() if NEG set %AMT=-%AMT

	if %AMT>AOB set %AMT=AOB
	if AOT=AOC set %AMT=AOB,AOB=0
	if AOB set AOB=AOB-%AMT

	quit
	
	
RCM( RecordLN ln)	//Remittance as collected 

	type public Boolean ER
	type public Number %AMT,AMTDC,AOI,CID,DCP,PBAL
	type public String CID54,ERRM(),ET,%SI
		
	set %AMT=ln.ipl-(%SI.piece("|",25))
	set DCP=%SI.piece("|",18) if 'DCP.length() set ER=1,ET=ERRM(11) quit
	set PBAL=%SI.piece("|",21) if 'PBAL set ER=1,ET=ERRM(12) quit
	
	set AMTDC=(%AMT*DCP/AOI*PBAL)/100
	set %AMT=+AMTDC.roundDec()

	quit
	
	
CATCHERR	// Catch Error

	type public String ET
	type String CONTEXT
	
	catch Error {
		set CONTEXT=Error.context
		if ET.find("%GTM") do ZE^UTLERR quit
		set ET=ET_"-"_Error.description_"-"_Error.thrownAt
		do ^UTLERR
	} 	        	
        	
        quit	
 #OPTION ResultClass ON
Public String vSIG()	quit "60816^10873^Nagarjuna Pesalaparthi Rajeswarareddy^23889"	// Signature - LTD^TIME^USER^SIZE
