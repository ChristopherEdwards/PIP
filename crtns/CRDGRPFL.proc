CRDGRPFL(RecordCRDGRP crdgrp, String vpar, Boolean vparNorm) // CRDGRP - Accounts Linked to a Card Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              11/22/2003
	// Trigger Definition (5)                      02/17/2006
	// Journal File Definition (3)                 12/07/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = crdgrp.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(crdgrp,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(crdgrp,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CRDTYP = crdgrp.crdtyp
	type String CRDNUM = crdgrp.crdnum
	type String GRP = crdgrp.grp
	type String CID = crdgrp.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CRDTYP").exists()!vx("CRDNUM").exists()!vx("GRP").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CRDGRP",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CRDGRP","CRDTYP = :crdgrp.crdtyp and CRDNUM = :crdgrp.crdnum and GRP = :crdgrp.grp and CID = :crdgrp.cid") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CRDTYP
	type public String CRDNUM
	type public String GRP
	type public String CID

	type RecordCRDGRP crdgrp = Db.getRecord("CRDGRP","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM,GRP=:GRP,CID=:CID")
	if (%ProcessMode = 2) do {
		do crdgrp.setMode(2)

		do CRDGRPFL(crdgrp,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCRDGRP crdgrp

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CRDGRP","CRDTYP = :crdgrp.crdtyp and CRDNUM = :crdgrp.crdnum and GRP = :crdgrp.grp and CID = :crdgrp.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(crdgrp))  S ^CARD(vobj(crdgrp,-3),vobj(crdgrp,-4),"C",vobj(crdgrp,-5),vobj(crdgrp,-6))=vobj(crdgrp)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.crdgrp)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCRDGRP crdgrp

	if vpar["/JOURNAL/" do VJOURNAL(.crdgrp)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CARD(vobj(crdgrp,-3),vobj(crdgrp,-4),"C",vobj(crdgrp,-5),vobj(crdgrp,-6)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordCRDGRP crdgrp

	// Type local variables for access keys for defaults
	type public String CRDTYP
	type public String CRDNUM
	type public String GRP
	type public String CID

	if crdgrp.primcrd.isNull() set crdgrp.primcrd = 0      // primcrd
	quit


vreqn // Validate required data items

	type public RecordCRDGRP crdgrp

	if crdgrp.primcrd.isNull() do vreqerr("PRIMCRD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCRDGRP crdgrp

	if crdgrp.crdtyp.isNull() do vreqerr("CRDTYP") quit
	if crdgrp.crdnum.isNull() do vreqerr("CRDNUM") quit
	if crdgrp.grp.isNull() do vreqerr("GRP") quit
	if crdgrp.cid.isNull() do vreqerr("CID") quit

		if vx("PRIMCRD").exists(),crdgrp.primcrd.isNull() do vreqerr("PRIMCRD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDGRP","MSG",1767,"CRDGRP."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCRDGRP crdgrp
	if 'crdgrp.crdnum.isNull() set vfkey("^CARD("_""""_crdgrp.crdtyp_""""_","_""""_crdgrp.crdnum_""""_")")="CRDGRP(CRDTYP,CRDNUM) -> CRD"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCRDGRP crdgrp
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("CRD",":crdgrp.crdtyp,:crdgrp.crdnum") set vERRMSG = $$^MSG(8563,"CRDGRP(CRDTYP,CRDNUM) -> CRD") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("").order().isNull() quit
	if vx("PRIMCRD").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After delete of CRDGRP

	type public RecordCRDGRP crdgrp
	/*
	---- Revision History --------------------------------------------------------

	 12/12/05 - SPR - 18555
	 	    Card Management - General DBI3 system area cleanup.
	------------------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public Number ACN,CID,NEXTSEQ,SVAC
	type public String CRDTYP,CRDNUM
	type Number AC
	type String DTTIME
	
	/*
	delete related files, these are almost index files but are
	missing the key GRP. If this is ever modified, please review the
	after_insert and after_update triggers also.
	*/	
	
	do Db.delete("ACNCRD","CARDNUM=:crdgrp.crdnum AND CARDTYPE=:crdgrp.crdtyp AND CID=:crdgrp.cid")
	
	quit:CUVAR.cmsacopt'=1
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	if ACN.get().isNull() do { quit:ER
		type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		if crd.getMode() set ACN=crd.acn 
		}
		
	if NEXTSEQ.get().isNull() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}

	set AC=0 

	if AC'=SVAC.get() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	if AC=SVAC.get() quit
	
	set SVAC=AC
	
	type RecordCMSACT cmsact1=Class.new("RecordCMSACT") 
	set cmsact1.seq=NEXTSEQ
	set cmsact1.crdtyp=CRDTYP
	set cmsact1.crdnum=CRDNUM
	set cmsact1.acn=ACN
	set cmsact1.ac=0
	set cmsact1.dttime=DTTIME
	do cmsact1.save()	
		
	if crdgrp.primcrd=1 do {
		set DTTIME=%SystemDate_" "_%CurrentTime
		if ACN.get().isNull() do { quit:ER 
			type RecordCRD crdacn=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crdacn.getMode() set ACN=crdacn.acn
			}  

		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		set AC=3 

		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			} 

		if AC=SVAC.get() quit

		set SVAC=AC
				
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT") 
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CRDTYP
		set cmsact1.crdnum=CRDNUM
		set cmsact1.acn=ACN
		set cmsact1.cid=CID
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.save()	
		}
		
	quit 
	
	

vai1 // Trigger AFTER_INSERT - After Insert of CRDGRP

	type public RecordCRDGRP crdgrp
	/*
	---- Revision History --------------------------------------------------------
	 12/12/05 - SPR - 18555
	 	    Card Management - General DBI3 system area cleanup.
	------------------------------------------------------------------------------
	*/
	

	/*
	insert related files, these are almost index files but are
	missing the key GRP. If this is ever modified, please review the
	after_delete and after_update triggers also.
	*/

	type public Boolean ER,NOACT
	type public Number ACN,CID,NEXTSEQ,SVAC
	type public String CRDTYP,CRDNUM
	type Number AC,XCID
	type String DTTIME,XCRDTYP,XCRDNUM
	
	set XCID=crdgrp.cid 
	set XCRDTYP=crdgrp.crdtyp 
	set XCRDNUM=crdgrp.crdnum
		
	type RecordACNCRD acncrd=Class.new("RecordACNCRD")
	set acncrd.cardnum=XCRDNUM
	set acncrd.cardtype=XCRDTYP
	set acncrd.cid=XCID
	do acncrd.save()
		
	if NOACT.get()=1 quit
	
	set DTTIME=%SystemDate_" "_%CurrentTime
	
	if ACN.get().isNull() do { quit:ER

		 type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
		 if crd.getMode() set ACN=crd.acn
		}

	if NEXTSEQ.get().isNull() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	set AC=0 
	if AC'=SVAC.get() do { quit:ER
		type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
		if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
		else  set NEXTSEQ=1
		}
		
	if AC=SVAC.get() quit
	
	type RecordCMSACT cmsact=Class.new("RecordCMSACT") 
	set cmsact.seq=NEXTSEQ
	set cmsact.crdtyp=CRDTYP
	set cmsact.crdnum=CRDNUM
	set cmsact.acn=ACN
	set cmsact.ac=AC
	set cmsact.dttime=DTTIME
	do cmsact.save()
	
	if crdgrp.primcrd=1 do {
		quit:CUVAR.cmsacopt'=1
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		if ACN.get().isNull() do { quit:ER
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			}
			
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
		set AC=2 

		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
	
		if AC=SVAC.get() quit
	
		set SVAC=AC
				
		type RecordCMSACT cmsact1=Class.new("RecordCMSACT") 
		set cmsact1.seq=NEXTSEQ
		set cmsact1.crdtyp=CRDTYP
		set cmsact1.crdnum=CRDNUM
		set cmsact1.acn=ACN
		set cmsact1.cid=CID
		set cmsact1.ac=AC
		set cmsact1.dttime=DTTIME
		do cmsact1.save()
		}
		
		set SVAC=AC
		
	quit 
	
	

vau1 // Trigger AU_ALL - After Update of any column

	type public RecordCRDGRP crdgrp
	
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
	 	    Card Management - General DBI3 system area cleanup.
	 	    
	------------------------------------------------------------------------------
	*/
	
	/*
	Delete related files, these are almost index files but are
	missing the key GRP. If this is ever modified, please review the
	after_insert and after_delete triggers also.
	*/
	
	type Number XCID
	type String XCRDTYP,XCRDNUM
	
	set XCID=crdgrp.cid
	set XCRDTYP=crdgrp.crdtyp
	set XCRDNUM=crdgrp.crdnum
	
	if (crdgrp.cid.oldVal'=crdgrp.cid) set XCID=crdgrp.cid.oldVal
	if (crdgrp.crdtyp.oldVal'=crdgrp.crdtyp) set XCRDTYP=crdgrp.crdtyp.oldVal
	if (crdgrp.crdnum.oldVal'=crdgrp.crdnum) set XCRDNUM=crdgrp.crdnum.oldVal
	
	do Db.delete("ACNCRD","CARDNUM=:XCRDNUM AND CARDTYPE=:XCRDTYP AND CID=:XCID")
		
	set XCID=crdgrp.cid 
	set XCRDTYP=crdgrp.crdtyp 
	set XCRDNUM=crdgrp.crdnum
	
	type RecordACNCRD acncrd=Class.new("RecordACNCRD") 
	set acncrd.cardnum=XCRDNUM
	set acncrd.cardtype=XCRDTYP
	set acncrd.cid=XCID
	do acncrd.save()
		
	quit
	
	

vau2 // Trigger AU_PRIMCRD - AFTER_UPDATE Primary Card

	type public RecordCRDGRP crdgrp
	/*
	---- Revision History --------------------------------------------------------
	
	 12/12/05 - SPR - 18555
	 	    Card Management - General DBI3 system area cleanup.
	 	    
	------------------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public Number ACN,CID,NEXTSEQ,SVAC
	type public String CRDTYP,CRDNUM
	type Number AC
	type String DTTIME
	
	if crdgrp.primcrd=1 do {
		quit:CUVAR.cmsacopt'=1
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		if ACN.get().isNull() do { quit:ER
			
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn 
			}
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
		
		set AC=2 
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if AC=SVAC.get() quit
		
		type RecordCMSACT cmsact=Class.new("RecordCMSACT") 
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CRDTYP
		set cmsact.crdnum=CRDNUM
		set cmsact.oprimcid=CID
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.save()	
		}
		
	if crdgrp.primcrd=0 do {
		quit:CUVAR.cmsacopt'=1		
		set DTTIME=%SystemDate_" "_%CurrentTime
		
		if NEXTSEQ.get().isNull() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if ACN.get().isNull() do { quit:ER
			type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
			if crd.getMode() set ACN=crd.acn
			}
			
		set AC=3
		if AC'=SVAC.get() do { quit:ER
			type ResultSet rscmsact=Db.select("SEQ","CMSACT",,"SEQ DESC")
			if rscmsact.next() set NEXTSEQ=rscmsact.getCol("SEQ")+1
			else  set NEXTSEQ=1
			}
			
		if AC=SVAC.get() quit
				
		type RecordCMSACT cmsact=Class.new("RecordCMSACT") 
		set cmsact.seq=NEXTSEQ
		set cmsact.crdtyp=CRDTYP
		set cmsact.crdnum=CRDNUM
		set cmsact.oprimcid=CID
		set cmsact.acn=ACN
		set cmsact.ac=AC
		set cmsact.dttime=DTTIME
		do cmsact.save()
		}
		
	set SVAC=AC
	quit 
	
	

vbi1 // Trigger BEFORE_INSERT - Before Insert of a card group

	type public RecordCRDGRP crdgrp
	/*

	---- Revision History ------------------------------------------------
	
	02/17/06- SPR - 19590
		  Modified this trigger to change the atmopt in CUVAR set 
		  to "0" and create another ard for the same cif. It will 
		  throw the error message " Customer/Account number already 
		  linked to card number".
	
	 12/12/05 - SPR - 18555
	 	    Card Management - General DBI3 system area cleanup.
	 	    
	----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type Number ATMOPT,XCID
	type String XNUM,XTYP
	
	type ResultSet rs=Db.select("ATMOPT","CUVAR")
	if rs.next() set ATMOPT=rs.getCol("ATMOPT")
	set XCID=crdgrp.cid
	
	if ATMOPT=0 do { quit:ER
				
		/*Since ATM opt is set to 0, the existance of any card records for
		this CIF indicates that we should not allow another entry. 	*/
		
		type ResultSet rs=Db.select("CARDTYPE,CARDNUM","ACNCRD","CID=:XCID") 
		if rs.next() do {
			set XTYP=rs.getCol("CARDTYPE")
			set XNUM=rs.getCol("CARDNUM")
			
			// Customer/Account ~p1 already linked to card ~p2 ~p3
			do Runtime.setErrMSG("CRDGRP",8387,"XCID~XTYP~XNUM") quit 
			}
		}
	
	type RecordACN acn=Db.getRecord("ACN","CID=:XCID",1)
	if 'acn.getMode() do { quit:ER
		
		// Invalid account ~p1
		do Runtime.setErrMSG("CRDGRP",1259)
		}
	
	if crdgrp.lnm.isNull() do {
		type RecordACN acn=Db.getRecord("ACN","CID=:XCID",1)
		if acn.getMode() set crdgrp.lnm=acn.lnm
		}
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCRDGRP crdgrp

	if crdgrp.crdtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CRDTYP", vRM) quit
	if crdgrp.crdnum.length()>20 set vRM = $$^MSG(1076,20) do vdderr("CRDNUM", vRM) quit
	if crdgrp.grp.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GRP", vRM) quit
	set X = crdgrp.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	if crdgrp.lnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNM", vRM) quit
	set X = crdgrp.numgrp if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("NUMGRP", vRM) quit
	if '("01"[crdgrp.PRIMCRD) set vRM=$$^MSG(742,"L") do vdderr("PRIMCRD", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CRDGRP","MSG",979,"CRDGRP."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCRDGRP crdgrp)	//CRDGRP Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="O" do {
			if EFD.get() do {
				do vj1(.crdgrp)	// Mode=D Tran=O EFD=E Seq=1 JRNID=HIST_D
				}
			else  do {
				do vj1(.crdgrp)	// Mode=D Tran=O EFD=N Seq=1 JRNID=HIST_D
				do vj3(.crdgrp)	// Mode=D Tran=O EFD=N Seq=1 JRNID=MPSREC1CID
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="O" do {
			if EFD.get() do {
				do vj2(.crdgrp)	// Mode=I Tran=O EFD=E Seq=1 JRNID=HIST_I
				}
			else  do {
				do vj2(.crdgrp)	// Mode=I Tran=O EFD=N Seq=1 JRNID=HIST_I
				do vj3(.crdgrp)	// Mode=I Tran=O EFD=N Seq=1 JRNID=MPSREC1CID
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="O" do {
			if 'EFD.get() do {
				do vj3(.crdgrp)	// Mode=U Tran=O EFD=N Seq=1 JRNID=MPSREC1CID
				}
			}
		}

	quit


vj1(RecordCRDGRP crdgrp)	// HIST_D  Table CIFH  Crd group Insert journal record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crdgrp.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","CRDGRP","CID",crdgrp.cid,$$^MSG(805)_":"_crdgrp.crdtyp_"-"_crdgrp.crdnum)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCRDGRP crdgrp)	// HIST_I  Table CIFH  Crd group Insert journal record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=crdgrp.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.efd=$G(EFD)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$TCMT^CIFFUNCS("","CRDGRP","CID",crdgrp.cid,$$^MSG(1735)_":"_crdgrp.crdtyp_"-"_crdgrp.crdnum)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordCRDGRP crdgrp)	// MPSREC1CID  Table MPSREC1  MPS Account Record

	if crdgrp.mpsjrnl'=""
	else  quit

	type Public String %O,TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=$$EXTDT^MPSRECU(TJD,crdgrp.crdtyp,crdgrp.crdnum)
	set v2=crdgrp.crdtyp
	set v3=$$GETCO1^MPSRECU(crdgrp.acn,%CompanyName)
	set v4=crdgrp.crdnum
	set v5=crdgrp.cid
	set vlastkey=%O
	type RecordMPSREC1 mpsrec1=Db.getRecord("MPSREC1","PROCDATE=:v1,CRDTYP=:v2,CO=:v3,CRDNUM=:v4,CID=:v5,MODE=:vlastkey",1)
	set mpsrec1.grp=crdgrp.grp
	set mpsrec1.primcrd=$$GORDER^MPSRECU(crdgrp.crdtyp,crdgrp.crdnum,crdgrp.grp)

	do mpsrec1.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



vkchged // Access key changed

	type public RecordCRDGRP crdgrp

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CRDTYP").exists() set vux("CRDTYP") = vx("CRDTYP")
	if vx("CRDNUM").exists() set vux("CRDNUM") = vx("CRDNUM")
	if vx("GRP").exists() set vux("GRP") = vx("GRP")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = crdgrp.crdtyp_","_crdgrp.crdnum_","_crdgrp.grp_","_crdgrp.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = crdgrp.crdtyp_","_crdgrp.crdnum_","_crdgrp.grp_","_crdgrp.cid // Copy new keys into object
	type RecordCRDGRP vnewrec = crdgrp.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CRDGRP",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCRDGRP crdgrp

	if vux("CRDTYP").exists() set crdgrp.crdtyp = vux("CRDTYP").piece("|",i)
	if vux("CRDNUM").exists() set crdgrp.crdnum = vux("CRDNUM").piece("|",i)
	if vux("GRP").exists() set crdgrp.grp = vux("GRP").piece("|",i)
	if vux("CID").exists() set crdgrp.cid = vux("CID").piece("|",i)
	quit
