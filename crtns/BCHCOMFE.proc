BCHCOMFE //Batch BCHCOMMFEE - DDA Commitment Fee
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:44 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHCOMMFEE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHCOMMFEE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHCOMMFEE") quit
 do JOBMGR^BCHUTL(%FN,"BCHCOMMFEE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHCOMMFEE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHCOMMFEE","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHCOMMFEE",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHCOMMFEE",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHCOMMFEE","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHCOMMFEE",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	type Boolean PHLD
	type Number BAL,BALAVL,CHKHLD,COMMFEE,ODLIM,UNUSEDBL
	type Public String %LOGID
	// Call standard utility to load account data from global ^ACN so that
	// information is in local variables and disk reads are minimal
	set %LOGID=$$LOGID^SCADRV

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	// Load specific nodes for this process that DTL does not
	set ODLIM=dep.odlim				//o/d limit
	set BAL=dep.bal					//balance
	set CHKHLD=dep.chkhld				//check hold amount
	set PHLD=dep.phld				//perm hold indicator
	set COMMFEE=dep.commfee

	// Get "standard" available balance amount (see BALAVL^DEPCDI)
	set BALAVL=BAL-CHKHLD-dep.donrsk+dep.stfnet
 	if PHLD set BALAVL=BALAVL-$$^UHLD(CID,BAL,dep.crcd)
	

	// UNUSEDBL is the portion of the authorized overdraft limit that has
	// not been used.  For negative or zero balance, this is the difference
	// between ODLIM and the available balance.

	if (BALAVL<0)!(BALAVL=0) set UNUSEDBL=ODLIM+BALAVL		


	// Otherwise, it is the overdraft limit.
	if BALAVL>0 set UNUSEDBL=ODLIM

	// Now that all data is loaded, determine the fee amount
	set COMMFEE=$$FEE(.dep,CID)

	// Finally, set the updated commitment fee into the account
	set dep.commfee=COMMFEE
	do dep.bypassSave()			//abv bypassSave instead of save
	quit


FEE(RecordDEP dep,CID)	//

	/*
	 Determine the commitment fee based upon whether or not an effective
	 dated transaction has been posted against the account today.  This
	 is stored in the account.
	*/
	
	type Number COMMFEE
	type Date COMMEFD
	set COMMEFD=dep.commefd					//effective date

	if COMMEFD="" set COMMFEE=$$CALC(.dep,CID)		//normal calculation
	if COMMEFD'="" set COMMFEE=$$RECALC(.dep,CID,COMMEFD)	//recalculation

	quit COMMFEE

CALC(RecordDEP dep,CID)	//
	// Actual Commitment Fee Calculation

	// Calculate daily fee
	type Number COMMFEE,COMMFPER,DIY,DLYFEE
	type String IACM
	type Public String RECALC
	type Public Number RECALPER,UNUSEDBL
	
	
	set IACM=dep.iacm
	set DIY=$$DY^UIC(IACM,%SystemDate) 
	set COMMFPER=dep.commfper/100 			//commitment fee %

	//  If coming from RECALC the COMMFPER has been set

	if $G(RECALC) set COMMFPER=RECALPER
	set DLYFEE=(UNUSEDBL*COMMFPER)/DIY
	set DLYFEE=$$^SCARND(DLYFEE,0,CID)

	// Set Committment Fee to increment by the daily fee
	set COMMFEE=dep.commfee+DLYFEE
	quit COMMFEE
	
	
RECALC(RecordDEP dep,CID,EFD)	//

	// Recalculation of Commitment Fee based upon EFD

	type Number NEWBAL,COMMFEE
	type Date JD
	type Public String WIRN()
	type Public Number UNUSEDBL,ODLIM


	// Call the standard average balance utility, which will return
	// the WIRN local array
	do dep.setAuditFlag(1)
	set COMMFEE=0
	set dep.commfee=0

	do INIT^UAVB(.dep,CID,EFD,%SystemDate,1)
	//
	set JD=""
	for  set JD=$O(WIRN(JD)) quit:JD=""  do {
		// Check to see if ODLIM or COMMFPER has been changed
		// by ordering through the WIRN array 
		type Date DT
		type Number RECALC
		set RECALC=""
		do ODLIM,COMMFPER(.dep)
	  	set NEWBAL=$P(WIRN(JD),"|",2)
		if (NEWBAL<0)!(NEWBAL=0) set UNUSEDBL=ODLIM+NEWBAL
		if NEWBAL>0 set UNUSEDBL=ODLIM
		set COMMFEE=$$CALC(.dep,CID)
		set dep.commefd=""				//reset COMMEFD to NULL
		if EFD=JD set dep.commfee=dep.commfee+COMMFEE  	//update Comm Fee
		set dep.commfee=COMMFEE
		}

	// Reset effective date to null for the next day
	set dep.commefd=""
	quit dep.commfee

ODLIM   // Check to see if the ODLIM has been modified

	type Number OLDLIM,NEWLIM
	type String SEQ
	type Public String WIRN()
	type Public Number ODLIM,RECALC
	type Public Date DT,JD
	
	set SEQ=""
	set (NEWLIM,OLDLIM)=0
	for DT=JD:1:%SystemDate do {
		for  set SEQ=$O(WIRN(DT,SEQ)) quit:SEQ=""  do {
		 	if SEQ="ODLIM" do {
				set OLDLIM=$P(WIRN(DT,SEQ),"|",1)
				set NEWLIM=$P(WIRN(DT,SEQ),"|",2)
				set RECALC=1
				set ODLIM=NEWLIM
				if JD<$G(DT) set ODLIM=OLDLIM
				}
			}
		}
	quit

COMMFPER(RecordDEP dep)   // Check to see if the COMMFPER has been modified

	type Number OLDPER,NEWPER,RECALPER
	type String SEQ
	type Public String WIRN()
	type Public Number RECALC
	type Public Date DT,JD
	
	set SEQ=""
	set (NEWPER,OLDPER)=0
	set RECALPER=dep.commfper/100
	for DT=JD:1:%SystemDate do {
		for  set SEQ=$O(WIRN(DT,SEQ)) quit:SEQ=""  do {
		 	if SEQ="COMMFPER" D {
				set OLDPER=$P(WIRN(DT,SEQ),"|",1)
				set NEWPER=$P(WIRN(DT,SEQ),"|",2)
				set RECALC=1
				set RECALPER=NEWPER
				if JD<$G(DT) set RECALPER=OLDPER/100
				}
			}
		}
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","DEP","DEP.GRP='DDA' AND DEP.COMMFPER IS NOT NULL")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type Public String TLO
	if '$D(TLO) set TLO=$$TLO^UTLO
	set %UserID="BATCH"

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
