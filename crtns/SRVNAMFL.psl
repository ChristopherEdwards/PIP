SRVNAMFL(RecordCTBLSRVNAM ctblsrvnam, String vpar, Boolean vparNorm) // CTBLSRVNAM - Service Names Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:14 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ctblsrvnam.getMode()                  // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(ctblsrvnam,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ctblsrvnam,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SRVCAT").exists()!vx("SERVICE").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CTBLSRVNAM",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CTBLSRVNAM","SRVCAT = :ctblsrvnam.srvcat and SERVICE = :ctblsrvnam.service") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SRVCAT
	type public String SERVICE

	type RecordCTBLSRVNAM ctblsrvnam = Db.getRecord("CTBLSRVNAM","SRVCAT=:SRVCAT,SERVICE=:SERVICE")
	if (%ProcessMode = 2) do {
		do ctblsrvnam.setMode(2)

		do SRVNAMFL(ctblsrvnam,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCTBLSRVNAM ctblsrvnam

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CTBLSRVNAM","SRVCAT = :ctblsrvnam.srvcat and SERVICE = :ctblsrvnam.service") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(ctblsrvnam,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(ctblsrvnam,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ctblsrvnam)) K:$D(vobj(ctblsrvnam,1,1)) ^CTBL("SERVICE",vobj(ctblsrvnam,-3),vobj(ctblsrvnam,-4)) S ^CTBL("SERVICE",vobj(ctblsrvnam,-3),vobj(ctblsrvnam,-4))=vobj(ctblsrvnam)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(ctblsrvnam,1,1)) N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(ctblsrvnam,1,1)) S vS1=vS1+1,^CTBL("SERVICE",vobj(ctblsrvnam,-3),vobj(ctblsrvnam,-4),vS1)=$E(vobj(ctblsrvnam,1,1),vS2,vS2+449)
			#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCTBLSRVNAM ctblsrvnam

	if vpar'["/NOLOG/" do ^DBSLOGIT(ctblsrvnam,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^CTBL("SERVICE",vobj(ctblsrvnam,-3),vobj(ctblsrvnam,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordCTBLSRVNAM ctblsrvnam

	// Type local variables for access keys for defaults
	type public String SRVCAT
	type public String SERVICE

	if ctblsrvnam.bankprod.isNull() set ctblsrvnam.bankprod = 0 // bankprod
	quit


vreqn // Validate required data items

	type public RecordCTBLSRVNAM ctblsrvnam

	if ctblsrvnam.acckeydef.isNull() do vreqerr("ACCKEYDEF") quit
	if ctblsrvnam.bankprod.isNull() do vreqerr("BANKPROD") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCTBLSRVNAM ctblsrvnam

	if ctblsrvnam.srvcat.isNull() do vreqerr("SRVCAT") quit
	if ctblsrvnam.service.isNull() do vreqerr("SERVICE") quit

		if vx("ACCKEYDEF").exists(),ctblsrvnam.acckeydef.isNull() do vreqerr("ACCKEYDEF") quit
		if vx("BANKPROD").exists(),ctblsrvnam.bankprod.isNull() do vreqerr("BANKPROD") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTBLSRVNAM","MSG",1767,"CTBLSRVNAM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCTBLSRVNAM ctblsrvnam

	set X = ctblsrvnam.srvcat if 'X.isNull(),'Db.isDefined("STBLSRVCAT","X") set vRM = $$^MSG(1485,X) do vdderr("SRVCAT", vRM) quit
	if ctblsrvnam.service.length()>20 set vRM = $$^MSG(1076,20) do vdderr("SERVICE", vRM) quit
	if ctblsrvnam.acckeydef.length()>60 set vRM = $$^MSG(1076,60) do vdderr("ACCKEYDEF", vRM) quit
	if '("01"[ctblsrvnam.BANKPROD) set vRM=$$^MSG(742,"L") do vdderr("BANKPROD", vRM) quit
	if ctblsrvnam.contact.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CONTACT", vRM) quit
	if ctblsrvnam.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	if ctblsrvnam.homepage.length()>80 set vRM = $$^MSG(1076,80) do vdderr("HOMEPAGE", vRM) quit
	if ctblsrvnam.hours.length()>60 set vRM = $$^MSG(1076,60) do vdderr("HOURS", vRM) quit
	if ctblsrvnam.phone.length()>18 set vRM = $$^MSG(1076,18) do vdderr("PHONE", vRM) quit
	if ctblsrvnam.register.length()>120 set vRM = $$^MSG(1076,120) do vdderr("REGISTER", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTBLSRVNAM","MSG",979,"CTBLSRVNAM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCTBLSRVNAM ctblsrvnam

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SRVCAT").exists() set vux("SRVCAT") = vx("SRVCAT")
	if vx("SERVICE").exists() set vux("SERVICE") = vx("SERVICE")
	do vkey(1) set voldkey = ctblsrvnam.srvcat_","_ctblsrvnam.service // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ctblsrvnam.srvcat_","_ctblsrvnam.service // Copy new keys into object
	type RecordCTBLSRVNAM vnewrec = ctblsrvnam.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CTBLSRVNAM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCTBLSRVNAM ctblsrvnam

	if vux("SRVCAT").exists() set ctblsrvnam.srvcat = vux("SRVCAT").piece("|",i)
	if vux("SERVICE").exists() set ctblsrvnam.service = vux("SERVICE").piece("|",i)
	quit
