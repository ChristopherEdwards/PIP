DEBAUT2F(RecordDEBAUT2 debaut2, String vpar, Boolean vparNorm) // DEBAUT2 - Debit Authorizations by Utility ID Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (16)             11/22/2003
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (6)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = debaut2.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(debaut2,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(debaut2,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACNTYPE = debaut2.acntype
	type String ACN = debaut2.acn
	type String AUTUTID = debaut2.aututid
	type String SEQ = debaut2.seq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACNTYPE").exists()!vx("ACN").exists()!vx("AUTUTID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DEBAUT2",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DEBAUT2","ACNTYPE = :debaut2.acntype and ACN = :debaut2.acn and AUTUTID = :debaut2.aututid and SEQ = :debaut2.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACNTYPE
	type public String ACN
	type public String AUTUTID
	type public String SEQ

	type RecordDEBAUT2 debaut2 = Db.getRecord("DEBAUT2","ACNTYPE=:ACNTYPE,ACN=:ACN,AUTUTID=:AUTUTID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do debaut2.setMode(2)

		do DEBAUT2F(debaut2,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDEBAUT2 debaut2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DEBAUT2","ACNTYPE = :debaut2.acntype and ACN = :debaut2.acn and AUTUTID = :debaut2.aututid and SEQ = :debaut2.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(debaut2))  S ^DEBAUT2(vobj(debaut2,-3),vobj(debaut2,-4),vobj(debaut2,-5),vobj(debaut2,-6))=vobj(debaut2)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.debaut2)             // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDEBAUT2 debaut2

	if vpar["/JOURNAL/" do VJOURNAL(.debaut2)              // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DEBAUT2(vobj(debaut2,-3),vobj(debaut2,-4),vobj(debaut2,-5),vobj(debaut2,-6)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordDEBAUT2 debaut2

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDEBAUT2 debaut2

	if debaut2.acntype.isNull() do vreqerr("ACNTYPE") quit
	if debaut2.acn.isNull() do vreqerr("ACN") quit
	if debaut2.aututid.isNull() do vreqerr("AUTUTID") quit
	if debaut2.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEBAUT2","MSG",1767,"DEBAUT2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordDEBAUT2 debaut2
	do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(debaut2,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT_ - After insert trigger for DEBAUT2 file

	type public RecordDEBAUT2 debaut2
	/*
	---- Revision History -----------------------------------------------------
	12/26/99 - JERUCHIMC - 36228
	           Check for values for start and end date before comparing
		   them.

	09/20/99 - CARROLLJ - 33890
		   Convert to PSL.
	
	05/03/99 - KINI - 32230
		   Create trigger AFTER_INSERT on dates processing for DEBAUT2
		   file.
	*/

	// Have to check that date entered is not less than today.
	
	//Date must be today or future
	if (debaut2.startdt'=""),(debaut2.startdt<%SystemDate) do Runtime.setErrMSG("DEBAUT2",6047) quit:ER       

	//Date must be today or future	
	if (debaut2.autexp'=""),(debaut2.autexp<%SystemDate) do Runtime.setErrMSG("DEBAUT2",6047) quit:ER

	//End Date must be greater than Start Date
	if (debaut2.autexp'=""),(debaut2.startdt'=""),(debaut2.autexp<debaut2.startdt) do Runtime.setErrMSG("DEBAUT2",6160) quit:ER
	
	// Block end date can't be processed without block start date
	//No Start Date Specified	
	if (debaut2.blstdt=""),(debaut2.blenddt'="") do Runtime.setErrMSG("DEBAUT2",6791) quit:ER
	quit 

vau1 // Trigger AFTER_UPDATE - AFTER UPDATE trigger

	type public RecordDEBAUT2 debaut2
	/*
	---- Revision History -------------------------------------------------------
	
	07/08/99 - KINI - 33689
		   Created trigger AFTER_UPDATE for DEBAUT2 file to insert new message
		   "Debit authorization block deleted" into CIFH file after debit
		   authorization block was deleted.
	*/

	if debaut2.blstdt="" do {
		if (debaut2.blstdt.oldVal'=""),(debaut2.blstdt.oldVal'=debaut2.blstdt) do {
			new MSG
			//Debit authorization block deleted
			set MSG=$$^MSG(3919)               
			do Db.insert("CIFH","ACN,SEQ,TCMT",":ACN,CIFH.NEXTVAL,:MSG")
			}
		}
	quit 

vbi1 // Trigger BEFORE_INSERT - Before Insert/Update

	do vbu1

	quit

vbu1 // Trigger BEFORE_INSERT - Before Insert/Update

	type public RecordDEBAUT2 debaut2
	do debaut2.setAuditFlag(1)

	  /*
										---- Revision History ------------------------------------------------
											10/02/00 - JERUCHIMC - 41385
																						Added a check for DEBAUT.DCID to make sure
																						it is an account owned by DEBAUT.ACN.
 	  */

	  if debaut2.acntype="C" do {
																new dcid,dacn
																set dcid=debaut2.dcid
																if dcid="" quit
																set dacn=Db.getOneRow("ACN","ACN","dcid")
																if dacn'=debaut2.acn do Runtime.setErrMSG("DEBAUT2",68,ACN) quit:ER
																}
								quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDEBAUT2 debaut2

	if debaut2.acntype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ACNTYPE", vRM) quit
	set X = debaut2.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	if debaut2.aututid.length()>24 set vRM = $$^MSG(1076,24) do vdderr("AUTUTID", vRM) quit
	set X = debaut2.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	set X = debaut2.autexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("AUTEXP", vRM) quit
	set X = debaut2.bgtcid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BGTCID", vRM) quit
	set X = debaut2.bgtseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BGTSEQ", vRM) quit
	if debaut2.billnbr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BILLNBR", vRM) quit
	set X = debaut2.blenddt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BLENDDT", vRM) quit
	set X = debaut2.blstdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("BLSTDT", vRM) quit
	if debaut2.custid.length()>24 set vRM = $$^MSG(1076,24) do vdderr("CUSTID", vRM) quit
	set X = debaut2.dcid if 'X.isNull(),X'?1.15N,X'?1"-"1.14N set vRM=$$^MSG(742,"N") do vdderr("DCID", vRM) quit
	set X = debaut2.limit if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"DEBAUT2.LIMIT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if debaut2.rescode.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RESCODE", vRM) quit
	set X = debaut2.startdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STARTDT", vRM) quit
	if debaut2.stat.length()>12 set vRM = $$^MSG(1076,12) do vdderr("STAT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DEBAUT2","MSG",979,"DEBAUT2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordDEBAUT2 debaut2)	//DEBAUT2 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.debaut2)	// Mode=D Tran=B EFD=N Seq=1 JRNID=CIFH_D
				do vj2(.debaut2)	// Mode=D Tran=B EFD=N Seq=1 JRNID=CIFH_DBL
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.debaut2)	// Mode=D Tran=O EFD=N Seq=1 JRNID=CIFH_D
				do vj2(.debaut2)	// Mode=D Tran=O EFD=N Seq=1 JRNID=CIFH_DBL
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj3(.debaut2)	// Mode=I Tran=B EFD=N Seq=1 JRNID=CIFH_I
				do vj4(.debaut2)	// Mode=I Tran=B EFD=N Seq=1 JRNID=CIFH_IBL
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj3(.debaut2)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CIFH_I
				do vj4(.debaut2)	// Mode=I Tran=O EFD=N Seq=1 JRNID=CIFH_IBL
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj5(.debaut2)	// Mode=U Tran=B EFD=N Seq=1 JRNID=CIFH_U
				do vj6(.debaut2)	// Mode=U Tran=B EFD=N Seq=1 JRNID=CIFH_UBL
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj5(.debaut2)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CIFH_U
				do vj6(.debaut2)	// Mode=U Tran=O EFD=N Seq=1 JRNID=CIFH_UBL
				}
			}
		}

	quit


vj1(RecordDEBAUT2 debaut2)	// CIFH_D  Table CIFH  Customer History (delete)

	if debaut2.acntype="C"
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut2.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(5108,debaut2.aututid)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordDEBAUT2 debaut2)	// CIFH_DBL  Table CIFH  Customer History (Delete)

	if debaut2.acntype="C"
	else  quit
	if debaut2.blstdt'=""
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut2.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(3919,debaut2.aututid)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordDEBAUT2 debaut2)	// CIFH_I  Table CIFH  Customer History (Insert)

	if debaut2.acntype="C"
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut2.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(5110,debaut2.aututid)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordDEBAUT2 debaut2)	// CIFH_IBL  Table CIFH  Customer History (Insert)

	if debaut2.acntype="C"
	else  quit
	if debaut2.blstdt'=""
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=debaut2.acn
	set vlastkey=Db.nextVal("CIFH","ACN=:v1")
	type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
	set cifh.hdate=+$H
	set cifh.htime=$P($H,",",2)
	set cifh.ident=%IDENT
	set cifh.tcmt=$$^MSG(5111,debaut2.aututid)
	set cifh.tjd=TJD
	set cifh.tlo=TLO
	set cifh.uid=%UID

	do cifh.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj5(RecordDEBAUT2 debaut2)	// CIFH_U  Table CIFH  Customer History (update)

	if debaut2.acntype="C"
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%IDENT,%UID,TJD,TLO
		type String v1,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=debaut2.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$TCMTFM^ACNFUNCS(debaut2.acn,"DEBAUT2",vdi,vold,vnew)
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj6(RecordDEBAUT2 debaut2)	// CIFH_UBL  Table CIFH  Customer History (Update)

	if debaut2.acntype="C"
	else  quit
	if debaut2.blstdt'=""
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String %IDENT,%UID,TJD,TLO
		type String v1,vlastkey
		set v1=debaut2.acn
		set vlastkey=Db.nextVal("CIFH","ACN=:v1")
		type RecordCIFH cifh=Db.getRecord("CIFH","ACN=:v1,SEQ=:vlastkey",1)
		set cifh.hdate=+$H
		set cifh.htime=$P($H,",",2)
		set cifh.ident=%IDENT
		set cifh.tcmt=$$^MSG(5111,debaut2.aututid)
		set cifh.tjd=TJD
		set cifh.tlo=TLO
		set cifh.uid=%UID

		do cifh.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordDEBAUT2 debaut2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACNTYPE").exists() set vux("ACNTYPE") = vx("ACNTYPE")
	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("AUTUTID").exists() set vux("AUTUTID") = vx("AUTUTID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = debaut2.acntype_","_debaut2.acn_","_debaut2.aututid_","_debaut2.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = debaut2.acntype_","_debaut2.acn_","_debaut2.aututid_","_debaut2.seq // Copy new keys into object
	type RecordDEBAUT2 vnewrec = debaut2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DEBAUT2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDEBAUT2 debaut2

	if vux("ACNTYPE").exists() set debaut2.acntype = vux("ACNTYPE").piece("|",i)
	if vux("ACN").exists() set debaut2.acn = vux("ACN").piece("|",i)
	if vux("AUTUTID").exists() set debaut2.aututid = vux("AUTUTID").piece("|",i)
	if vux("SEQ").exists() set debaut2.seq = vux("SEQ").piece("|",i)
	quit
