LETSTINI	 /*

ORIG: ofaltr - 08/03/2000
DESC: Statement Extract Init and APY process

	---- Comments --------------------------------------------------------
	
        ---- Revision History------------------------------------------------
        
        12/21/06 - PUTTASWH - CR 24538
		   Modified to fix the compilation warnings.
		   
        01/30/06 Radhika - CR 17423
		 .Eliminated PSL deprecated features and warnings.
		 .Removed revision history prior to 2004.
		
		 02/20/04 RussellDS - CR8468
        	 Remove references to table DAYENDSTM (obsoleted).  Was not
        	 being used.
 */

	quit
        
public SUMM(Number ACN,Number STMGRP,String CTL,Date BJD,Date EJD,Number IRASTGRP)

	/*
	Collate through all accounts that will have a statement printed
	and accumulate all necessary totals.  Store each history record in
	the local array SORT.
	*/
	
	type public Date XBJD
	type public String FRE,SFRE
	type Date JD
	type Number CID
	type String CLS,FTNT,GRP,STMT(),X

		
	set (BJD,XBJD)=BJD.get(),EJD=EJD.get(),CTL=CTL.get()
	if EJD.isNull() set EJD=%SystemDate
	set (STMT,FTNT)=""
	set CID=""

	type RecordCMBGRP SFR=Db.getRecord("CMBGRP","ACN=:ACN,STMGRP=:STMGRP")
	set IRASTGRP=SFR.irastgrp
	set SFRE=SFR.sfre

	if CTL.extract() set STMT(ACN).piece("|",2)=BJD
	else  set JD=EJD,FRE="-"_SFRE,STMT(ACN).piece("|",2)=$$NJD^UFRE(JD,FRE)+1
        
	set CID="" do SUMM1
        
	/*
	Reset the beginning statement date (BJD) for the statement group as
	the oldest beginning date of all accounts that will be reflected on
	the statement.
	*/
	set (BJD,CLS,GRP,CID)=""
	for  set CLS=STMT(ACN,CLS).order() quit:CLS.isNull()  do {
		for  set GRP=STMT(ACN,CLS,GRP).order() quit:GRP.isNull()  do {
			for  set CID=STMT(ACN,CLS,GRP,CID).order() quit:CID.isNull()  do {
				set X=STMT(ACN,CLS,GRP,CID).piece("|",3)
				if BJD.isNull() set BJD=X quit
				if X<BJD set BJD=X
				}        
			}
		}

	if BJD.isNull() set BJD=STMT(ACN).piece("|",2)
	quit


SUMM1	//

	type public Date XBJD
	type public Number ACN,CID,IRASTGRP
	type public String CLS,CTL,FRE,GRP,SFRE
	type Date BJD,EJD,JD,ODT,SLTD,STPR
	type Boolean CUMUL,ER,SUMRY
	type Number CNT,DEC,INC,TYPE,TRB,QFLAG,SEQ
	type String BBAL,FTNT(),LNBBAL,N,PNA,STMLCC,STAMT,STMT(),UAVB(),WIRN(),XWIRN(),XBAL(),X

	set CUMUL=CUVAR.stmtcumul

	type ResultSet rs=Db.select("CID,SLTD,STPR,SUMRY","CMBSTM","STMGRP=:STMGRP AND ACN=:ACN")
	if rs.isEmpty() quit
	while rs.next()  do {
		set BJD=XBJD
		set CID=rs.getCol("CID")
		set SLTD=rs.getCol("SLTD")
		set STPR=rs.getCol("STPR")
		set SUMRY=rs.getCol("SUMRY")

		type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
		if 'acn.getMode() quit

		set TYPE=acn.type
		set CLS=acn.cls
		set GRP=acn.grp
		set ODT=acn.odt
		set TRB=acn.trb

		#ACCEPT DATE=12/08/03;PGM=John Carroll
		for I=1:1 quit:'Q(1,I).order().isNull()  xecute Q(1,I) else  quit
	
		if ODT>EJD quit
		if STMLCC do STMLCC^STMDBS quit:ER

		if 'CTL.extract() do {
			if EJD-SLTD=0 set BJD=STPR+1
			else  set FRE="-"_SFRE,JD=EJD,BJD=$$NJD^UFRE(JD,FRE)+1
			}

		//ofaltr - 02/27/02 set BJD to beginning of the year if CUVAR.STMTCUMUL
		if IRASTGRP,CUMUL set BJD=$$BOYJD^SCADAT(%SystemDate,1)

		if 'PNA,(acn.tld<BJD) quit
		if acn.stat=4,acn.dtc<BJD quit

		if ODT>BJD set BJD=ODT 
		if acn.hisctf'<BJD set BJD=acn.hisctf+1

		//ofaltr - 02/27/02
		set QFLAG=0
		do IRAGRP quit:QFLAG

		do INIT^UAVB(.acn,CID,BJD,BJD,"10000010010011100010") quit:ER		

		if (TRB)!(CLS="L") set DEC=8,INC=9
		else  set INC=8,DEC=9
		set X=""

		set BBAL=UAVB(1).piece("|",19)
		set LNBBAL=UAVB(1).piece("|",21)	// psg 11/29/00

		// kph 4/10/01 Changed piece 3 of control to 1
		do INIT^UAVB(.acn,CID,BJD,EJD,"10100010010011100011") quit:ER
        
		set X.piece("|",1)=SUMRY
		set X.piece("|",2)=BBAL
		set X.piece("|",3)=BJD
		set X.piece("|",4)=UAVB(1).piece("|",14)
		set X.piece("|",5)=UAVB(1).piece("|",DEC+2)
		set X.piece("|",6)=UAVB(1).piece("|",DEC)
		set X.piece("|",7)=UAVB(1).piece("|",INC+2)
		set X.piece("|",8)=UAVB(1).piece("|",INC)
		set X.piece("|",9)=UAVB(1).piece("|",12)
		set X.piece("|",10)=UAVB(1).piece("|",16)
		set X.piece("|",11)=UAVB(1).piece("|",17)
		set X.piece("|",12)=UAVB(1).piece("|",18)
		set X.piece("|",13)=UAVB(1).piece("|",15)
		set X.piece("|",14)=UAVB(2).piece("|",12)
		set X.piece("|",15)=UAVB(2).piece("|",13)
		set X.piece("|",16)=UAVB(2).piece("|",1)
		set X.piece("|",17)=LNBBAL    
		set X.piece("|",18)=UAVB(1).piece("|",22)               

		set X.piece("|",25)=UAVB(1).piece("|",1)	//Average Ledger Balance
		set X.piece("|",26)=UAVB(2).piece("|",3)	//Average Collected Balance
	
		// Average balance for interest (Average BALINT)
		set X.piece("|",27)=UAVB(1).piece("|",20)

		set STMT(ACN,CLS,GRP,CID)=X
		set STAMT=STAMT+X.piece("|",9)

		if X set FTNT(CID)="*",FTNT("*")=""
		else  if X.piece("|",13)-X.piece("|",4)<0 set FTNT(CID)="#",FTNT("#")=""
        
		// Load interest rate summary
		set N="",SEQ=1,CNT=0
		for  set N=WIRN(N).order() quit:N.isNull()  set XWIRN(CID,N)=WIRN(N)
		set N=""
		for  set N=X(N).order() quit:N.isNull()  set XBAL(CID,N)=X(N)

		}
        quit
	

   
public APY(Number CID,Number AEIA,Date SLDT,Date SNDT,Number AVBAL) // Calculate Annual Percentage Yield
	/*
        Returns the Annual Percentage Yield for Deposit Accounts
        Per Government Regulations
        *** DO NOT CHANGE THE FORMULA UNLESS THE GOVERNMENT
        REGULATIONS CHANGE***
		
       	Inputs -
                CID - 	Account Number  /REQ
                AEIA -	Actual Earned Interest Amount AEIA will bw
			calculated if not Passed in. This requires a lot
			of processing.
                AVBAL - Average Balance
                        If IRCB=1 - avg ledger balance
                        if IRCB=3 - avg collected balance
        Returns -
                APY - Annual Percentage Yield
	*/
        
        type Date FD,JD,NJD,TD
        type Number ACN,APY,BASE,DAYS,EXP,SGRP,TYPE,TOT
        type String XDEP03

	type RecordACN  ACNDATA = Db.getRecord("ACN","CID=:CID")
	set ACN=ACNDATA.acn
	set TYPE=ACNDATA.type
	
        if AEIA.get().isNull() set AEIA=$$AEIA^DEPDI(CID,"",SLDT,SNDT)

	// Return statement information
	if SLDT.get().isNull() do STM^DEPDI,STMCHK^DEPDI  

	// Number of days in period
        set DAYS=SNDT-SLDT+1
        if DAYS<1 do Runtime.setErrMSG("ACNDATA",7828) quit

        set XDEP03=""
        set TD=SNDT,FD=SLDT
        set:TD>%SystemDate TD=%SystemDate

	type RecordCMBCID SG = Db.getRecord("CMBCID","CID=:CID,ACN=:ACN")
	set SGRP=SG.stmgrp
        set AVBAL=AVBAL.get()

	/*
         Calculate APY
         FORMULA:
                                       (365/DAYS)
          APY = 100 * (((1+AEIA)/AVBAL)          ) - 1)
	*/

        set EXP=365/DAYS
        if 'AVBAL quit 0
        set BASE=1+(AEIA/AVBAL)
	// Exponentials
        set TOT=$$EXP^%ZFUNC($$LNX^%ZFUNC(BASE)*EXP)-1
        set APY=100*TOT
        if APY<0 quit CID.roundDec()
        quit APY.roundDec()
        
        
public GETAEIA(Number XCID,Date BDT,Date EDT)	// Calculates the Effective Dated Accrued Interest
	/*

	Inputs
		XCID - Account Number
		BDT - Beginning Date of Statement Period
		EDT - Ending Date of Statement Period
	
	The array IRNARR must be defined prior to calling this function.
	IRRACN(date)=rate|balance, where date is the effective date of a
	rate change or balance change.

	Returns
		ACR - Effective Dated Accrued Interest

	*/

	type public String IRNARR()
	type Date DT,DIFF,START
	type Number AMT,ACR,BAL,IRN,HIT
	type String IACM,ICF,OPT
	
	if IRNARR(BDT).order() set DT=BDT
	else  set DT=IRNARR(BDT).order(-1)
	set START=BDT
	set BAL=+$P(IRNARR(DT).get(),"|",2)
	set IRN=+IRNARR(DT).get()

	// myersk - 43728
	// if Interest Calculation Frequency is 1DA set Compounding Option
	// to "01" for call into $$^UIC
	type RecordDEP dep = Db.getRecord("DEP","CID=:XCID")
	set IACM=dep.iacm
	set ICF=dep.icf
	
	set OPT=0_$S(ICF="1DA":1,1:0)

	set (ACR,HIT)=0
	for  set DT=IRNARR(DT).order() quit:HIT=1  do {

	// myersk 09/25/00 - changed second condition from DT'<EDT to DT>EDT
		if ((DT.isNull())!(DT>EDT)) set DT=EDT+1,HIT=1
		set DIFF=DT-START
		// myersk - 43728 
		// change parameters for call into UIC for compounding
		// and make sure we don't accrue on negative balances
		set AMT=$$^UIC(BAL,START,DT-1,IACM,IRN,OPT)
		set ACR=ACR+$S(AMT>0:AMT,1:0)
		quit:HIT
		set BAL=IRNARR(DT).piece("|",2)
		// myersk - 43728 if compounding add the accrual to the balance
		set:+OPT BAL=BAL+ACR
		set IRN=+IRNARR(DT)
		set START=DT
	}
	quit ACR

IRAGRP	//

	type public Date EJD
	type public Number ACN,CID,IRASTGRP,IRAARY()
	type public String CLS
	type String DESC,%FN,GRP,IRA
	type Number QFLAG,RPASEQ,RPA
	type Date TXYEAR
	
	if CLS="D" do {
		type RecordDEP ir = Db.getRecord("DEP","CID=:CID")
		set IRA=ir.ira
		set RPASEQ =ir.rpaseq
		}
	else  set IRA=0
	
	//IRA account in non-IRA statement group
	if 'IRASTGRP,IRA do {  quit
		set DESC=$$^MSG(5135)
                do LOG^UTLEXC($T(+0),ACN,%FN,CID,,DESC)
		set QFLAG=1
		}

	quit:'IRASTGRP
	//From here on we have an IRA Statement Group

	// Log Error, Non-IRA Account in an IRA Statement Group.
	if 'IRA	do {  quit
		set DESC=$$^MSG(5133)
		do LOG^UTLEXC($T(+0),ACN,%FN,CID,,DESC)
		set QFLAG=1
		}

	//Log Error, Accounts IRA type does not match IRA Statement Group.
	if Db.isDefined("STBLIRA","IRASTGRP") do {
		if IRA=IRASTGRP quit
		set DESC=$$^MSG(5134)
		do LOG^UTLEXC($T(+0),ACN,%FN,CID,,DESC)			
		set QFLAG=1
		}

	if 'IRAARY(ACN,IRA,RPA).exists() do {
		type Date date=EJD
		set TXYEAR=date.year()
		type ResultSet rs=Db.select("C1,C2","IRA","ACN=:ACN AND RPASEQ=:RPA AND TAXYR=:TXYEAR") 
		if rs.next() do {
			set IRAARY(ACN,IRA,RPA)=rs.getCol("C1")_"|"_rs.getCol("C2")			
			}
		}

	set GRP=IRA
	quit

vSIG()	quit "60627^20502^Hema Puttaswamy^9365"	// Signature - LTD^TIME^USER^SIZE
