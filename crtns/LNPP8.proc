LNPP8	// INPUT PURCHASED LOANS REMITTANCES
	/*
	       ORIG:  Kathie Jalbuena (7070) - 07/01/87
	------ Revision History ------------------------------------------------

	11/24/05 - chhabris - CR18008
		   Replaced depricated methods. Also, removed the revision 
		   history prior to 2004.

	-------------------------------------------------------------------------

	*/

	quit
	

public FILE(RecordLNPP8 lnpp8())	// File data

	// This label is called from MRPC061.

	if $G(%REPOST) do PROCESS(.lnpp8()) quit

	do ^TTXLOK if ER quit
	
	set TRC=(((Db.currVal("TTX","TJD=:TPD,BRCD=:BRCD,UID=%UserID")\1000)+1)*1000)+1

	type RecordLNPP2 lnpp2=Db.getRecord("LNPP2","SLCD=:SLCD,PL=:PL",1)
	if lnpp2.getMode() do {
		set RMOP=lnpp2.fecd
		set PETC=lnpp2.rmop
		}	
	else  set (RMOP,FETC)=""
	do PROCESS(.lnpp8())

	quit


PROCESS(RecordLNPP8 lnpp8())	//

	new PRODCTL
	set SQ=""

	for I=1:1 quit:('lnpp8(I).exists())  do {
                if lnpp8(I).cid="" quit
                do ACCOUNTS(.lnpp8(I))
		}

	if $G(%REPOST) quit

	// Set miscellaneous debits in ^TTX
	set TOT="TOT" set TOTF="TOTF"
	do OFFSET^UMSC(TPD,BRCD,%UserID,.TOT,0)
	do OFFSET^UMSC(TPD,BRCD,%UserID,.TOTF,0)

	// Post loan credits
	do ^TTXP1

	quit


ACCOUNTS(RecordLNPP8 lnpp8)	//

	// Create LP,DAYEND,TTX entries for every fLNPP8(I)

	set ER=0 
	set RM=""
	set CID=lnpp8.cid

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if ln.getMode() do {
		set CRCD=ln.crcd
		set GLSC=ln.glsc
		set BALCMP=ln.crcd
		}
		
	else  set (CRCD,GLSC,BALCMP)=""
	
	if ln.aruf set BALCMP=BALCMP-ln.udbal
	
	//do not process account with errors
	if ER set RETURNX(I)=$G(RM) quit

	set TYP=ln.type
	set CC=ln.cc

	if RMOP=2 do {

		/* 
		Check satifies date. If before next due, move P & I amounts
		to principal and interest only amounts
		*/

		if lnpp8.sfth'<(ln.dist1nd).piece(7) quit

		set lnpp8.prino=lnpp8.prin 
		set lnpp8.prin=0
		set lnpp8.into=lnpp8.int 
		set lnpp8.int=0
		}

	// Update loan purchase status
	type RecordLNPP6 lnpp6=Db.getRecord("LNPP6","CID=:CID")

	set lnpp6.plspb=BALCMP-lnpp8.prin-lnpp8.prino
	set lnpp6.plrir=lnpp8.int+lnpp8.into
	set lnpp6.plrpr=lnpp8.prin+lnpp8.prino
	set lnpp6.plrfr=lnpp8.fee
	set lnpp6.lifpr=lnpp6.lifpr+lnpp6.plrpr
	set lnpp6.ytdpr=lnpp6.ytdpr+lnpp6.plrpr
	set lnpp6.lifsf=lnpp6.lifsf+lnpp8.fee
	set lnpp6.ytdsf=lnpp6.ytdsf+lnpp8.fee
	set lnpp6.lifin=lnpp6.lifin+lnpp6.plrir
	set lnpp6.ytdin=lnpp6.ytdin+lnpp6.plrir

	do lnpp6.save()

	// Update purchase pool file
	type RecordLNPP2 lnpp2=Db.getRecord("LNPP2","SLCD=:SLCD,PL=:PL")

	set lnpp2.cip=lnpp8.int+lnpp8.into
	set lnpp2.prlr=lnpp8.prin+lnpp8.prino
	set lnpp2.iytd=+lnpp8.fee
	set lnpp2.reppb=lnpp2.reppb-lnpp8.prin-lnpp8.prino
	set lnpp2.ipl=lnpp2.ipl+lnpp2.cip
	set lnpp2.iytd=lnpp2.iytd+lnpp2.cip
	set lnpp2.spl=lnpp2.spl+lnpp2.scp
	set lnpp2.sytd=lnpp2.sytd+lnpp2.scp
	set lnpp2.prl=lnpp2.prl+lnpp2.prlr
	set lnpp2.prytd=lnpp2.prytd+lnpp2.prlr

	do lnpp2.save()

	type RecordLNPPD lnppd=Class.new("RecordLNPPD")

	set lnppd.efd=%SystemDate
	set lnppd.slcd=SLCD
	set lnppd.pl=PL
	set lnppd.cid=CID
	
	type ResultSet rs=Db.select("SEQ","LNPPD","EFD=:%SystemDate AND SLCD=:SLCD AND PL=:PL AND CID>:CID","SEQ")
	if rs.next() set SQ=rs.getCol("SEQ")
	
	// SQ is referenced in transaction rec
	set lnppd.seq=SQ
	set lnppd.sfth=lnpp8.sfth
	set lnppd.ptpmt=lnpp8.ptpmt
	set lnppd.prin=lnpp8.prin
	set lnppd.int=lnpp8.int
	set lnppd.fee=lnpp8.fee
	set lnppd.prino=lnpp8.prino
	set lnppd.into=lnpp8.into
	set lnppd.remt=lnpp8.remt

	do lnppd.bypassSave()

	if '$G(%REPOST) do GLUPDATE(.lnpp8)

	quit


GLUPDATE(RecordLNPP8 lnpp8)	
	
	if '$D(PRODCTL(TYP)) do {
		type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYP",1)
		if prodctl.getMode() set PRODCTL(TYP)=prodctl.drtrgp_$C(9)_prodctl.crtrpr_$C(9)_prodctl.crtrin_$C(9)_prodctl.crtrpp
		}
	
	if lnpp8.prin<0 do NEG(.lnpp8) if 1
	else  set TAMT=lnpp8.prin+lnpp8.int 

	set ETC=$P(PRODCTL(TYP),$C(9),4) 

	if TAMT do SET

	if TOT(CRCD,TYP,GLSC,CC).exists() do TOTINI

	set TOT(CRCD,TYP,GLSC,CC,0)=TOT(CRCD,TYP,GLSC,CC,0)+(+lnpp8.remt)
	set TOTF(CRCD,TYP,GLSC,CC,0)=TOTF(CRCD,TYP,GLSC,CC,0)+(+lnpp8.fee)

	// Create TTX entry for PRIN and INT only
	set TAMT=+lnpp8.prino

	if TAMT set ETC=$S(TAMT<0:$P(PRODCTL(TYP),$C(9),1),1:$P(PRODCTL(TYP),$C(9),2)) 

	if TAMT<0 set TAMT=-TAMT

	if TAMT do SET

	set TAMT=+lnpp8.into if TAMT set ETC=$P(PRODCTL(TYP),$C(9),3) do SET

	set TRC=(((TRC\1000)+1)*1000)+1

	quit


NEG(RecordLNPP8 lnpp8)	// Negative prin or int

	set TAMT=+lnpp8.prin
	set ETC=$S(TAMT<0:$P(PRODCTL(TYP),$C(9),1),1:$P(PRODCTL(TYP),$C(9),2))

	if TAMT<0 set TAMT=-TAMT do SET

	set TAMT=+lnpp8.int 
	if TAMT set ETC=$P(PRODCTL(TYP),$C(9),3) do SET

	quit


SET	//
	
	type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
	set ITC=trn.etc

	if TPD-%SystemDate set ITC=$E(ITC,1,7)_$E("0000000",1,7-$L(ITC))_1_$E(ITC,9,99)

	type RecordTTX ttx=Class.new("RecordTTX")

	set ttx.tjd=TPD
	set ttx.brcd=BRCD
	set ttx.uid=%UserID
	set ttx.tseq=TRC
	
	set ttx.cid=CID
	set ttx.itc=ITC
	set ttx.etc=ETC
	set ttx.tamt=TAMT
	set ttx.tlo=%UserStation
	set TCMT=SLCD_","_PL_","_CID_","_SQ
	set ttx.tcmt=TCMT
	set ttx.cdt=%CurrentDate
	set ttx.tim=%CurrentTime
	set ttx.brcde=BRCD
	set ttx.trc=TRC
	set ttx.uidt=%UserID
	if CRCD'="" set ttx.crcd=CRCD

	do ttx.bypassSave()

	set TRC=TRC+1

	quit

TOTINI	// Create TTX entry for total fee and remittance

	// Total Fees
	type RecordTRN petc=Db.getRecord("TRN","ETC=:PETC")

	// Total Remittance
	type RecordTRN off=Db.getRecord("TRN","ETC=:OFF")

	set DCID=petc.acn
	set CCID=off.acn

	set TOT(CRCD,TYP,GLSC,CC)=CCID_"|"_OFF_"||||"
	for X=0,1 set TOT(CRCD,TYP,GLSC,CC,X)=0

	set TOTF(CRCD,TYP,GLSC,CC)=DCID_"|"_PETC_"||||"
	for X=0,1 set TOTF(CRCD,TYP,GLSC,CC,X)=0

	quit


Public PP	// Post processor for offset prompt
	// This label is called from MRPC061 to validate the offset tran code.

	new DATA
	type RecordTRN trn=Db.getRecord("TRN","ETC=:X",1)
	if trn.getMode() set DATA=trn.cls_$C(9)_trn.itc_$C(9)_trn.etc_$C(9)_trn.acn
	else  set DATA=""

	// Transaction code does not exist
	if (DATA.piece($C(9),3)).isNull() set ER=1 set RM=$$^MSG(2692) quit

	// Offset must be miscellaneous transaction code
	if '(DATA.piece($C(9),1)["M") set ER=1 set RM=$$^MSG(2091) quit

	// Offset must be a debit transaction code
	if (DATA.piece($C(9),2)).extract(1,1) set ER=1 set RM=$$^MSG(2090) quit

	// Transaction code entered must be linked to a specific G/L account
	if (DATA.piece($C(9),4)).isNull() set ER=1 set RM=$$^MSG(2693)
	quit

vSIG()	quit "60253^40404^Sanjay Chhrabria^6169"	// Signature - LTD^TIME^USER^SIZE
