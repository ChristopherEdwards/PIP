DFTCIFFL(RecordPRODDFTC proddftc, String vpar, Boolean vparNorm) // PRODDFTC - Customer Type Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              08/09/2006
	// Trigger Definition (2)                      04/04/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = proddftc.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(proddftc,.vxins(),10,"|")
	if %O = 1 quit:'proddftc.isChanged()  do AUDIT^UCUTILN(proddftc,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYPE = proddftc.type

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYPE").exists() do vkchged quit                // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("PRODDFTC",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("PRODDFTC","TYPE = :proddftc.type") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYPE

	type RecordPRODDFTC proddftc = Db.getRecord("PRODDFTC","TYPE=:TYPE")
	if (%ProcessMode = 2) do {
		do proddftc.setMode(2)

		do DFTCIFFL(proddftc,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordPRODDFTC proddftc

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("PRODDFTC","TYPE = :proddftc.type") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(proddftc,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(proddftc,%O,.vx())

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(proddftc,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLDFTC(vobj(proddftc,-3),n)=vobj(proddftc,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(proddftc,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(proddftc,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^UTBLDFTC(vobj(proddftc,-3),n)=vobj(proddftc,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordPRODDFTC proddftc
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^UTBLDFTC(vobj(proddftc,-3),n)) quit:n=""  if '$D(vobj(proddftc,n)),$D(^UTBLDFTC(vobj(proddftc,-3),n))#2 set vobj(proddftc,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordPRODDFTC proddftc

	if 'vkeychg.get(),proddftc.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(proddftc,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^UTBLDFTC(vobj(proddftc,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordPRODDFTC proddftc

	// Type local variables for access keys for defaults
	type public String TYPE

	if proddftc.cls.isNull() set proddftc.cls = "*"        // cls
	if proddftc.grp.isNull() set proddftc.grp = "CIF"      // grp
	quit


vreqn // Validate required data items

	type public RecordPRODDFTC proddftc

	if proddftc.grp.isNull() do vreqerr("GRP") quit
	if proddftc.pers.isNull() do vreqerr("PERS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordPRODDFTC proddftc

	if proddftc.type.isNull() do vreqerr("TYPE") quit

	if 'vobj(proddftc,-100,50,"").order().isNull() do {
		if vx("GRP").exists(),proddftc.grp.isNull() do vreqerr("GRP") quit
		if vx("PERS").exists(),proddftc.pers.isNull() do vreqerr("PERS") quit
	}
		if vx("GRP").exists(),proddftc.grp.isNull() do vreqerr("GRP") quit
		if vx("PERS").exists(),proddftc.pers.isNull() do vreqerr("PERS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODDFTC","MSG",1767,"PRODDFTC."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - Delete PRODCTL after removal of product

	type public RecordPRODDFTC proddftc
	/*
	 ----------------- Revision History ----------------------------------
	
	  09/28/99 - MOTENJ - 31126
	             Converted to PSL.
	
	  01/12/99 - SPIER - 31401
	             Added this trigger to remove corresponding prodctl table

	*/

	new XTYPE
	set XTYPE=proddftc.type
	do Db.delete("PRODCTL","TYPE=:XTYPE")
	quit
	

vbd1 // Trigger BEFORE_DELETE - CIF Product BEFORE DELETE Trigger

	type public RecordPRODDFTC proddftc

	/*
	  ---- Revision History ------------------------------------------------
	
	  04/04/06 - KELLYP - CR 20569
	  	Added this trigger to ensure that no customers exist with the
	  	product type that is about to be deleted.            	   
	*/
		
	type public Boolean ER
	
	type ResultSet rs=Db.select("ACN","CIF","TYPE=:proddftc.type")

	// Accounts exist with this product type. Cannot delete
	if 'rs.isEmpty() do Runtime.setErrMSG("PRODDFTC",2981) quit:ER

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordPRODDFTC proddftc

	if (%O = 2) do vload

	if vobj(proddftc,13).exists() do {

		set X = proddftc.priv if 'X.isNull(),'Db.isDefined("STBLCIFPRIV","X") set vRM = $$^MSG(1485,X) do vdderr("PRIV", vRM) quit
		set X = proddftc.sol if 'X.isNull(),'Db.isDefined("STBLCIFSOL","X") set vRM = $$^MSG(1485,X) do vdderr("SOL", vRM) quit
	}

	if vobj(proddftc,50).exists() do {

		set X = proddftc.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
		if proddftc.crcd.length()>4 set vRM = $$^MSG(1076,4) do vdderr("CRCD", vRM) quit
		if proddftc.grp.length()>3 set vRM = $$^MSG(1076,3) do vdderr("GRP", vRM) quit
		set X = proddftc.pers if 'X.isNull(),'Db.isDefined("STBLPERS","X") set vRM = $$^MSG(1485,X) do vdderr("PERS", vRM) quit
	}

	if vobj(proddftc,85).exists() do {

		set X = proddftc.mts if 'X.isNull(),'Db.isDefined("UTBLMTSO","X") set vRM = $$^MSG(1485,X) do vdderr("MTS", vRM) quit
	}

	if vobj(proddftc,94).exists() do {

		set X = proddftc.relmat if 'X.isNull(),'Db.isDefined("UTBLRELMAT","X") set vRM = $$^MSG(1485,X) do vdderr("RELMAT", vRM) quit
	}
	set X = proddftc.type if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("TYPE", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("PRODDFTC","MSG",979,"PRODDFTC."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordPRODDFTC proddftc

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("TYPE")
	set voldkey = vux.piece("|",1),vobj(proddftc,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(proddftc,-3) = vnewkey // Copy new keys into object
	type RecordPRODDFTC vnewrec = proddftc.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("PRODDFTC",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(proddftc,-3) = vux.piece("|",1)               // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordPRODDFTC proddftc
	type public String vpar

	type String vERRMSG

	if Db.isDefined("CIF","TYPE=:proddftc.type") set vERRMSG = $$^MSG(8563,"CIF(TYPE) -> PRODDFTC(TYPE)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	quit
