EFTINSFL(RecordUTBLEFTINST utbleftinst, String vpar, Boolean vparNorm) // UTBLEFTINST - EFT Institutions Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             11/22/2003
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utbleftinst.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utbleftinst,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utbleftinst,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("KEY").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLEFTINST",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLEFTINST","KEY = :utbleftinst.key") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String KEY

	type RecordUTBLEFTINST utbleftinst = Db.getRecord("UTBLEFTINST","KEY=:KEY")
	if (%ProcessMode = 2) do {
		do utbleftinst.setMode(2)

		do EFTINSFL(utbleftinst,vpar)
	}
	else  do VINDEX(utbleftinst)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLEFTINST utbleftinst

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLEFTINST","KEY = :utbleftinst.key") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utbleftinst,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utbleftinst,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utbleftinst)) S ^UTBL("EFTINST",vobj(utbleftinst,-3))=vobj(utbleftinst)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.utbleftinst) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLEFTINST utbleftinst

	if vpar["/INDEX/" do VINDEX(.utbleftinst)              // Delete index entries
	if vpar'["/NOLOG/" do ^DBSLOGIT(utbleftinst,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("EFTINST",vobj(utbleftinst,-3))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordUTBLEFTINST utbleftinst

	// Type local variables for access keys for defaults
	type public String KEY

	if utbleftinst.finan.isNull() set utbleftinst.finan = 1 // finan
	if utbleftinst.onus.isNull() set utbleftinst.onus = 0  // onus
	quit


vreqn // Validate required data items

	type public RecordUTBLEFTINST utbleftinst

	if utbleftinst.finan.isNull() do vreqerr("FINAN") quit
	if utbleftinst.onus.isNull() do vreqerr("ONUS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLEFTINST utbleftinst

	if utbleftinst.key.isNull() do vreqerr("KEY") quit

		if vx("FINAN").exists(),utbleftinst.finan.isNull() do vreqerr("FINAN") quit
		if vx("ONUS").exists(),utbleftinst.onus.isNull() do vreqerr("ONUS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLEFTINST","MSG",1767,"UTBLEFTINST."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLEFTINST utbleftinst

	if utbleftinst.key.length()>12 set vRM = $$^MSG(1076,12) do vdderr("KEY", vRM) quit
	if utbleftinst.addr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDR", vRM) quit
	set X = utbleftinst.brcd if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("BRCD", vRM) quit
	set X = utbleftinst.chklim if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"UTBLEFTINST.CHKLIM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if utbleftinst.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	if '("01"[utbleftinst.FINAN) set vRM=$$^MSG(742,"L") do vdderr("FINAN", vRM) quit
	if utbleftinst.nam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NAM", vRM) quit
	if utbleftinst.nfinan.length()>24 set vRM = $$^MSG(1076,24) do vdderr("NFINAN", vRM) quit
	if '("01"[utbleftinst.ONUS) set vRM=$$^MSG(742,"L") do vdderr("ONUS", vRM) quit
	if utbleftinst.pstlcd.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PSTLCD", vRM) quit
	set X = utbleftinst.region if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("REGION", vRM) quit
	set X = utbleftinst.retry if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("RETRY", vRM) quit
	if utbleftinst.shnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("SHNM", vRM) quit
	if utbleftinst.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	if utbleftinst.utilityid.length()>24 set vRM = $$^MSG(1076,24) do vdderr("UTILITYID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLEFTINST","MSG",979,"UTBLEFTINST."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordUTBLEFTINST utbleftinst) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NAM").exists() do vi1(.utbleftinst)
	}
	do vi1(.utbleftinst)

	quit
	

vi1(RecordUTBLEFTINST utbleftinst) // Maintain NAM index entries (Institution Name)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = utbleftinst.nam.upperCase()
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v4 = utbleftinst.key.upperCase()

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^UTBL("EFTINST",vobj(utbleftinst,-3)))#2,'$D(^XUTBL("NAM",v2,"EFTINST",v4)) do vidxerr("NAM")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XUTBL("NAM",v2,"EFTINST",v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NAM").exists() set v2=vx("NAM").piece("|",1).upperCase()  set:v2.isNull() v2=(PSL.maxCharValue-1).char() set:v2'=vx("NAM").piece("|",2).upperCase() vdelete=1
	quit:'vdelete                                          // Only case has changed

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XUTBL("NAM",v2,"EFTINST",v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("UTBLEFTINST")

	while ds.next() do {
		type RecordUTBLEFTINST utbleftinst=ds.getRecord("UTBLEFTINST")
		if vlist.contains("VINDEX") do VINDEX(.utbleftinst) quit
		if vlist.contains("NAM") do vi1(.utbleftinst)
	}

	quit


public VIDXBLD1(RecordUTBLEFTINST utbleftinst, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.utbleftinst) quit
	if vlist.contains("NAM") do vi1(.utbleftinst)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("UTBLEFTINST","MSG",1225,"UTBLEFTINST."_di)

	quit


vkchged // Access key changed

	type public RecordUTBLEFTINST utbleftinst

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("KEY")
	set voldkey = vux.piece("|",1),vobj(utbleftinst,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utbleftinst,-3) = vnewkey // Copy new keys into object
	type RecordUTBLEFTINST vnewrec = utbleftinst.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLEFTINST",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utbleftinst,-3) = vux.piece("|",1)            // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VIDXPGM()	quit "EFTINSFL"	// Location of index program

