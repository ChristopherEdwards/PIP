public	LNPTSR3(RecordLN ln,		// Loan account			/REF:RW
		RecordTTX ttx,		// Transaction			/REF:R
		RecordTRN trn)		// Transaction code		/REF:R
	
	/*
	Loan Late and Miscellaneous Charge Error Correct

	---- Revision History ------------------------------------------------
	
	05/25/06 - DESHPANDE S K - CR 20748
		   Added a parameter to section LNFEE3 to replace public variable
		   %TRNMODE with call to ttx.getStoredValue("TranMode").
	
	04/13/06 - SmithCD - CR 20574
		   Added TRNMODE check to avoid processing involving 
		   lnfeep.aprf in LNFEE3 section to make load fee reversal 
		   consistent with loan fee assessment in LNPTS8. Prevents 
		   "Transaction may not be reversed.  Bill record due amount 
		   will be negative." error from occurring on back-dated loan 
		   disbursement. Further cleaned up code.

	02/04/06 - TITOVE - CR 19182
	 	   Modified LNFEE3 section to instantiate LNBIL5 record
	 	   taking into account that it might not be defined.
	 	   Performed minor PSL standards clean-up.

	02/03/06 - KELLYP - CR 19343
	 	   Modified LNFEE2 section to plus ln.bseq.  This prevents
	 	   an "insufficient values" Oracle API error when BSEQ="".

	05/05/05 - KinI - 15524
		   Modified BL1 section to replace lnbil1.bp1 pieces with 
		   direct lnbil1 sub-fields update per DBI standards.

	04/19/05 - KELLYP - CR 13667
	 	   Modified top-level of procedure to accept a trn object as
	 	   the third parameter and to pass it to ^LNPTSR.  Also 
	 	   removed pre-2003 revision history.

	*/

	type public Number ER
		
	type Number CID = ln.cid

	do LNFEE(.ln, .ttx) quit:ER
	
	// Transaction - Last Date
	set ln.tld = %SystemDate
	
	do ^LNPTSR(.ln, .ttx, .trn)

	quit
	

LNFEE(RecordLN ln,		// Loan account			/REF:RW
      RecordTTX ttx)		// Transaction			/REF:R

	// Reverse loan fee assessments

	type public Number ER
	
	type Number FEEAMT, PC
	type String FEE, FEETSO, X

	// Reverse fee amounts in TSO
	do REVTSO^LNPTSR(.ttx)

	set FEETSO = $$FIELD^UTSO(ttx.tso, "LNFEE")

	// Get fee and amount from the transaction
	for PC = 1:1 quit:FEETSO.piece(",", PC).isNull()  do { quit:ER
		
		set X = FEETSO.piece(",", PC) 
		set FEE = X.piece(":", 1) 
		set FEEAMT = X.piece(":", 2)
		
		do LNFEE2(.ln, .ttx, FEE, FEEAMT) quit:ER
		
		do LNFEE3(FEE, FEEAMT, ttx.getStoredValue("TranMode"))
		}

	quit


LNFEE2(RecordLN ln,			// Loan account			/REF:RW
       RecordTTX ttx,			// Transaction			/REF:R
       String FEE,			// Fee type
       Number FEEAMT)			// Fee amount

	// Reverse fees in payment (bill) file
	
	type public Boolean ER
	
	type Number ADJ, DIFF, ND75, POS, PRVBIL
	type Date BD1, BD2, ORGTJD
	type String DATA, STR
	type Boolean DUEFLG

	set (BD1, BD2, ND75, PRVBIL) = 0

	do FINDFEE^LNFEEU(ln.cid, FEE, .STR, .POS)

	type DbSet ds = Db.selectDbSet("LNBIL1", "CID=:CID AND SCHSEQ>=:ln.oseq AND SCHSEQ<=:(+ln.bseq)")

	while ds.next() do { quit:ER
		type RecordLNBIL1 lnbil1 = ds.getRecord("LNBIL1")
	
		// Payment due date of the oldest Unsatisfied Bill
        	if lnbil1.schseq = ln.oseq set BD1 = lnbil1.cdpd

		// Payment due date for the last date
        	if lnbil1.schseq = (+ln.bseq) set BD2 = lnbil1.cdpd

		// Amount Still Due (fee is in the string).
		if STR set PRVBIL = PRVBIL + $$AMTDUE^BILFUNCS(.lnbil1, (POS + 1))

		if 'STR do { 
			type ResultSet rs = Db.select("BRFAMT", "LNBIL5", "CID=:CID AND SCHSEQ=:lnbil1.schseq AND FEETYP=:FEE")

		        //Amount Still Due
		        while rs.next() set PRVBIL=PRVBIL + rs.getCol("BRFAMT")
			}
		}

	// Get Remaining Fee Amount from the LNFEE table
	type RecordLNFEE lnfee = Db.getRecord("LNFEE", "CID=:ln.cid,FEETYP=:FEE", 1)
	if lnfee.getMode() = 1 set ND75 = lnfee.feerem

	set DIFF = ND75 - PRVBIL
	if DIFF '< FEEAMT quit

	// ADJ is amount to reduce billed fee by
	set ADJ = FEEAMT - DIFF

	// Find transaction date
	if ttx.itc6 set ORGTJD = %SystemDate
	// Get ORGTJD if reversal	
	else  set ORGTJD = $$HSEQ^LNPTSR(.ttx)	
	
	if BD1 '> ORGTJD, BD2 > ORGTJD quit
	
	// loop thru the bills to reduce amounts

	type DbSet ds1 = Db.selectDbSet("LNBIL1", "CID=:ln.cid AND SCHSEQ<=:(+ln.bseq)")

        while ds1.next() do { quit:ER ! ('ADJ)
		type RecordLNBIL1 lnbil1 = ds1.getRecord("LNBIL1")
	
		if STR do {
			set DATA = $$GETFIELD^BILFUNCS((POS + 1), .lnbil1)
			set DIFF = DATA.piece("#", 3) - DATA.piece("#", 4)
			if DIFF > ADJ set DIFF = ADJ
			set DATA.piece("#", 3) = DATA.piece("#", 3) - DIFF
			set DATA.piece("#", 4) = DATA.piece("#", 4) - DIFF
			
			do SETELMT^BILFUNCS(.lnbil1, POS, DATA)
			
			set ADJ = ADJ - DIFF
			}

		if 'STR do {      
			for DUEFLG = 0, 1 do {
				type RecordLNBIL5 lnbil5 = Db.getRecord("LNBIL5", "CID=:ln.cid,SCHSEQ=:lnbil1.schseq,DUEAMT=:DUEFLG,FEETYP=:FEE", 1)
				if 'lnbil5.getMode() quit
				
				if lnbil5.brfamt > ADJ set DIFF = ADJ
				else  set DIFF = lnbil5.brfamt
				set lnbil5.brfamt = lnbil5.brfamt - DIFF
				set lnbil5.bfamt = lnbil5.bfamt - DIFF
				
				do lnbil5.bypassSave()
				
				set ADJ = ADJ - DIFF

				// do not include fee
				if DUEFLG = 0 set DIFF = 0
				}
			}
		// Adjust total billed/remaining
		if DIFF do BL1(.lnbil1, -DIFF)
		}

	// Unable to reverse fee ~p1 assessed in payment file.
	// Fee already satisfied.
	if ADJ do Runtime.setErrMSG("LNBIL1", 2805, FEE)

	quit


LNFEE3(String FEE,			// Fee
       Number AMT,			// Fee amount
       Number TRNMD)			// Transaction Mode
       
	// Reduce payment record by assessment amount if field

	type public Number CID
	type public Boolean ER
	
	type Date SAVEFD
	type Number BSEQ = 0, POS
	type String PMTELMNT

	type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP=:FEE", 1)
	if lnfeep.getMode() = 0 quit

	if (lnfeep.aprf) , (TRNMD = 1) do {

		// Define EFD as TJD if current value is null
		set SAVEFD = %EffectiveDate
		if SAVEFD.isNull() set SAVEFD = %SystemDate

		/*
		Determine which payment record was either created or updated
		when the fee was first assessed. It is the record with a
		due date equal to the effective date of the transaction.
		*/

		type ResultSet rs = Db.select("SCHSEQ", "LNBIL1", "CID=:CID AND CDPD=:SAVEFD", "SCHSEQ DESC")

		if rs.isEmpty() quit
			   
		if rs.next() set BSEQ = rs.getCol("SCHSEQ")

		type RecordLNBIL1 lnbil1 = Db.getRecord("LNBIL1", "CID=:CID,SCHSEQ=:BSEQ")
		
		do FINDFEE^LNFEEU(CID, FEE, , .POS)

		/*
		Decrement payment record original and due amount by
		assessment amount. AMT is negative at this point.
		We will therefore add AMT to the current values.
		*/

		if POS do { quit:ER
			
			set PMTELMNT = $$GETFIELD^BILFUNCS(POS + 1, .lnbil1)

			set PMTELMNT.piece("#", 3) = PMTELMNT.piece("#", 3) + AMT
			
			// Transaction may not be reversed.  Bill record due amount will be negative.
			if (PMTELMNT.piece("#", 3) < 0) do Runtime.setErrMSG("LNBIL1", 2727) quit

			set PMTELMNT.piece("#", 4) = PMTELMNT.piece("#", 4) + AMT
			
			// Transaction may not be reversed.  Bill record due amount will be negative.
			if (PMTELMNT.piece("#", 4) < 0) do Runtime.setErrMSG("LNBIL1", 2727) quit

			do SETELMT^BILFUNCS(.lnbil1, POS, PMTELMNT)
			}
		else  do { quit:ER
			
			type RecordLNBIL5 lnbil5 = Db.getRecord("LNBIL5", "CID=:CID,SCHSEQ=:BSEQ,DUEAMT=1,FEETYP=:FEE", 1)
			
			if 'lnbil5.getMode() quit

			set lnbil5.brfamt = lnbil5.brfamt + AMT
			
			// Transaction may not be reversed.  Bill record due amount will be negative.
			if (lnbil5.brfamt < 0) do Runtime.setErrMSG("LNBIL5", 2727) quit

			set lnbil5.bfamt = lnbil5.bfamt + AMT
			
			// Transaction may not be reversed.  Bill record due amount will be negative.
			if (lnbil5.bfamt < 0) do Runtime.setErrMSG("LNBIL5", 2727) quit
 
			
			do lnbil5.bypassSave()
			}

		// Adjust total billed/remaining
		if AMT do BL1(.lnbil1, AMT)
		}
	
	quit
	

BL1(RecordLNBIL1 lnbil1,		// Bill				/REF:R
    Number AMT)				// Amount

	// Adjust total billed/remaining

	set lnbil1.casd = lnbil1.casd + AMT
	set lnbil1.ctab = lnbil1.ctab + AMT
	
	do lnbil1.bypassSave()

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60460^57737^Shriram Deshpande^7586"	// Signature - LTD^TIME^USER^SIZE
