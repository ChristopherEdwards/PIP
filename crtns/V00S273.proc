V00S273(%ProcessMode,RecordLNCONBIL LNCONBIL())   // -  - SID= <LNCONBIL> Manual Internal Bill Conversion
 ;;Copyright(c)2006 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/24/2006 11:29 - kini
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="LNCONBIL",VPGM=$T(+0),VSNAME="Manual Internal Bill Conversion"
 set VFSN("LNCONBIL")="zLNCONBIL"
 set vPSL=1
 set KEYS(1)=LNCONBIL(1).CID.get()
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=20 do VPR(.LNCONBIL()),VDA1(.LNCONBIL()),V5^DBSPNT quit

 if '%ProcessMode do VNEW(.LNCONBIL()),VPR(.LNCONBIL()),VDA1(.LNCONBIL())
 if %ProcessMode do VLOD(.LNCONBIL()) quit:$G(ER)  do VPR(.LNCONBIL()),VDA1(.LNCONBIL())

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.LNCONBIL())
 type Number ptr
 set ptr=""
 for  set ptr = LNCONBIL(ptr).order() quit:ptr.isNull()  do {
     if LNCONBIL(ptr).CID="" kill LNCONBIL(ptr)
     }
	quit


VNEW(RecordLNCONBIL LNCONBIL()) // Initialize arrays if %O=0
 
 do VLOD(.LNCONBIL())
 do VDEF(.LNCONBIL())
 do VLOD(.LNCONBIL())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordLNCONBIL LNCONBIL())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VNEWDQ(RecordLNCONBIL LNCONBIL()) // Original VNEW section
 
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VLOD(RecordLNCONBIL LNCONBIL()) // User defined access section
 //
 if '$D(%REPEAT) set %REPEAT=20
 if '$D(%MODS) set %MODS=1
 ;
 #ACCEPT date=11/05/03;pgm=Screen compiler
 quit
VLODDQ(RecordLNCONBIL LNCONBIL()) //Original VLOD section
 
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordLNCONBIL LNCONBIL()) // Display screen prompts
 set VO="2||13|"
 set VO(0)="|0"
 set VO(1)=$C(1,1,40,2,0,0,0,0,0,0)_"01TBill Date Due    Tot Billed      Tot Due"
 set VO(2)=$C(2,59,19,2,0,0,0,0,0,0)_"01TBilled          Due"
 if '$D(%MODS) set %MODS=1
 set DY=3 for I=%MODS:1:%REPEAT+%MODS-1 do VRPR(.LNCONBIL())
 set VO=(+VO)_"|"_(VO+1)_"|13" quit  // BOD pointer
 
VRPR(RecordLNCONBIL LNCONBIL())  // Display prompts %REPEAT times
 
 set VO(VO+1)=$C(DY,42,10,1,0,0,0,0,0,0)_"01T Interest:"
 set VO(VO+2)=$C(DY+1,41,11,1,0,0,0,0,0,0)_"01T Principal:"
 set VO(VO+3)=$C(DY+2,1,1,0,0,0,0,0,0,0)_"01T "
 set VO=VO+3,DY=DY+3
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordLNCONBIL LNCONBIL())  // Display screen data
 new V
 //
 set VX=$P(VO,"|",2)
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+-1,DY=3 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.LNCONBIL())
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordLNCONBIL LNCONBIL())  // Display data %REPEAT times
 //instantiate new object if necessary
  if 'LNCONBIL(I).getPointer() do {
     set LNCONBIL(I)=Class.new("RecordLNCONBIL","")
     }
 set VO(VX+1)=$C(DY,2,2,2,0,0,0,0,0,0)_"01N"_LNCONBIL(I).NUM
 set VO(VX+2)=$C(DY,5,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM(LNCONBIL(I).DUE)
 set V=$S(LNCONBIL(I).TDUE="":"",1:$J(LNCONBIL(I).TDUE,0,2)) set VO(VX+3)=$C(DY,16,12,2,0,0,0,0,0,0)_"00$"_$S(LNCONBIL(I).TDUE="":"",1:$J(LNCONBIL(I).TDUE,0,2))
 set V=$S(LNCONBIL(I).TREM="":"",1:$J(LNCONBIL(I).TREM,0,2)) set VO(VX+4)=$C(DY,29,12,2,0,0,0,0,0,0)_"00$"_$S(LNCONBIL(I).TREM="":"",1:$J(LNCONBIL(I).TREM,0,2))
 set V=$S(LNCONBIL(I).BLD="":"",1:$J(LNCONBIL(I).BLD,0,2)) set VO(VX+5)=$C(DY,53,12,2,0,0,0,0,0,0)_"00$"_$S(LNCONBIL(I).BLD="":"",1:$J(LNCONBIL(I).BLD,0,2))
 set V=$S(LNCONBIL(I).REM="":"",1:$J(LNCONBIL(I).REM,0,2)) set VO(VX+6)=$C(DY,66,12,2,0,0,0,0,0,0)_"00$"_$S(LNCONBIL(I).REM="":"",1:$J(LNCONBIL(I).REM,0,2))
 set V=$S(LNCONBIL(I).PDUE="":"",1:$J(LNCONBIL(I).PDUE,0,2)) set VO(VX+7)=$C(DY+1,53,12,2,0,0,0,0,0,0)_"00$"_$S(LNCONBIL(I).PDUE="":"",1:$J(LNCONBIL(I).PDUE,0,2))
 set V=$S(LNCONBIL(I).PREM="":"",1:$J(LNCONBIL(I).PREM,0,2)) set VO(VX+8)=$C(DY+1,66,12,2,0,0,0,0,0,0)_"00$"_$S(LNCONBIL(I).PREM="":"",1:$J(LNCONBIL(I).PREM,0,2))
 set DY=DY+3,VX=VX+8
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordLNCONBIL LNCONBIL())
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=3
 set %MODOFF=0,%MOD=8,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=1,VPB=2+(%REPEAT*3),BLKSIZ=(84*%REPEAT)+0,PGM=$T(+0),DLIB="SYSDEV",DFID="LNCONBIL"
 set OLNTB=VPB*1000
 
 set VFSN("LNCONBIL")="zLNCONBIL"
 //
 for I=9:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(2,1,2)_"20N12409|1|[LNCONBIL]NUM"
 set %TAB(2)=$C(2,4,10)_"20D12404|1|[LNCONBIL]DUE"
 set %TAB(3)=$C(2,15,12)_"00$12405|1|[LNCONBIL]TDUE|||do VP1^V00S273(.LNCONBIL)||||2"
 set %TAB(4)=$C(2,28,12)_"00$12406|1|[LNCONBIL]TREM|||do VP2^V00S273(.LNCONBIL)||||2"
 set %TAB(5)=$C(2,52,12)_"00$12402|1|[LNCONBIL]BLD|||do VP3^V00S273(.LNCONBIL)||||2"
 set %TAB(6)=$C(2,65,12)_"00$12403|1|[LNCONBIL]REM|||do VP4^V00S273(.LNCONBIL)||||2"
 set %TAB(7)=$C(3,52,12)_"00$12407|1|[LNCONBIL]PDUE|||do VP5^V00S273(.LNCONBIL)||||2"
 set %TAB(8)=$C(3,65,12)_"00$12408|1|[LNCONBIL]PREM|||do VP6^V00S273(.LNCONBIL)||||2"
 do VTBL(.LNCONBIL())
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordLNCONBIL LNCONBIL()) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordLNCONBIL LNCONBIL()) //
 /*
 
   ---- Revision History------------------------------------------------
 
        02/17/05 - KELLYP - CR 14452
                Converted to PSL
 
   ---------------------------------------------------------------------
 
 */

 type Public String X

 // Data required
 if 'LNCONBIL(I(1)).due.isNull(),X.isNull() do Runtime.setErrMSG("LNCONBIL","741") quit:ER
VP2(RecordLNCONBIL LNCONBIL()) //
 /*
 
   ---- Revision History------------------------------------------------
 
	02/16/05 - KELLYP - CR 14452
		Converted to PSL
 
   ---------------------------------------------------------------------
 
 */

 type Public String X

 // Data required
 if 'LNCONBIL(I(1)).due.isNull(),X.isNull() do Runtime.setErrMSG("LNCONBIL","741") quit:ER

 // Total due must be less than or equal to the total billed
 if X>LNCONBIL(I(1)).tdue do Runtime.setErrMSG("LNCONBIL","2672") quit:ER
VP3(RecordLNCONBIL LNCONBIL()) //
 /*
 
   ---- Revision History------------------------------------------------
 
        02/16/05 - KELLYP - CR 14452
                Converted to PSL
 
   ---------------------------------------------------------------------
 
 */

 type Public String X

 // Data required
 if 'LNCONBIL(I(1)).due.isNull(),X.isNull() do Runtime.setErrMSG("LNCONBIL","741") quit:ER

 // Amount must be greater than or equal to zero
 if X<0 do Runtime.setErrMSG("LNCONBIL","278") quit:ER
VP4(RecordLNCONBIL LNCONBIL()) //
 /*
 
   ---- Revision History------------------------------------------------
 
        02/16/05 - KELLYP - CR 14452
                Converted to PSL
 
   ---------------------------------------------------------------------
 
 */

 type Public String X

 // Data required
 if 'LNCONBIL(I(1)).due.isNull(),X.isNull() do Runtime.setErrMSG("LNCONBIL","741") quit:ER

 // Amount must be greater than or equal to zero
 if X<0 do Runtime.setErrMSG("LNCONBIL","278") quit:ER

 // Interest due must be less than or equal to the interest billed
 if X>LNCONBIL(I(1)).bld do Runtime.setErrMSG("LNCONBIL","1251") quit:ER
VP5(RecordLNCONBIL LNCONBIL()) //
 /*
 
   ---- Revision History------------------------------------------------
 
        02/16/05 - KELLYP - CR 14452
                Converted to PSL
 
   ---------------------------------------------------------------------
 
 */

 type Public String X

 // Data required
 if 'LNCONBIL(I(1)).due.isNull(),X.isNull() do Runtime.setErrMSG("LNCONBIL","741") quit:ER

 // Amount must be greater than or equal to zero
 if X<0 do Runtime.setErrMSG("LNCONBIL","278") quit:ER

 if X+LNCONBIL(I(1)).bld-LNCONBIL(I(1)).tdue=0 quit

 // Interest billed plus principal billed does not equal total billed
 do Runtime.setErrMSG("LNCONBIL","1248") quit:ER
VP6(RecordLNCONBIL LNCONBIL()) //
 /*
 
   ---- Revision History------------------------------------------------
 
        02/16/05 - KELLYP - CR 14452
                Converted to PSL
 
   ---------------------------------------------------------------------
 
 */

 type Public String X

 // Data required
 if 'LNCONBIL(I(1)).due.isNull(),X.isNull() do Runtime.setErrMSG("LNCONBIL","741") quit:ER

 // Amount must be greater than or equal to zero
 if X<0 do Runtime.setErrMSG("LNCONBIL","278") quit:ER

 // Principal due must be less than or equal to the principal billed
 if X>LNCONBIL(I(1)).pdue do Runtime.setErrMSG("LNCONBIL","2225") quit:ER

 if X+LNCONBIL(I(1)).rem-LNCONBIL(I(1)).trem=0 quit

 // Interest due plus principal due does not equal total due
 do Runtime.setErrMSG("LNCONBIL","1252") quit:ER
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordLNCONBIL LNCONBIL()
 do VPR(.LNCONBIL())
 do VDA1(.LNCONBIL())
 do ^DBSPNT()
 quit

VW(RecordLNCONBIL LNCONBIL())
 do VDA1(.LNCONBIL())
 do ^DBSPNT(10)
 quit

VDAPNT(RecordLNCONBIL LNCONBIL())
 do VDA1(.LNCONBIL())
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordLNCONBIL LNCONBIL()
 do VDA1(.LNCONBIL())
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordLNCONBIL LNCONBIL()
 if sn="LNCONBIL" do vSET1(LNCONBIL(I(1)),di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordLNCONBIL LNCONBIL,di,X)
 do LNCONBIL.setAuditFlag(1)
 set LNCONBIL.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordLNCONBIL LNCONBIL()
 if fid="LNCONBIL" quit $$vREAD1(LNCONBIL(I(1)),di)
 quit ""
vREAD1(RecordLNCONBIL LNCONBIL,di)
 quit LNCONBIL.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
