COMMPO	  /*
ORIG: KELLYP - 04/27/2000
DESC: Commitment Payoff Functions

---- Comments --------------------------------------------------------

	This procedure contains several functions related to miscellaneous
 	payoff aspects of Builder Loans (please see spec, 35505TS.DOC).  These
	extrinsic functions are intended for use in a transaction set (or sets)
	defined by the institution.

	Principal Amount at Payoff
	  (PRAMTCID,PRAMTETC,PRAMT sections)
	    This amount is a principal amount due for the principal amount
	    at payoff target account field (LN.PRAMTCID) of the account
	    associated with the transaction set's base transaction.  The
	    principal amount due and the target account are both defined 
	    on this account's record.  PRAMTCID retrieves the target account's
	    account number, PRAMTETC retrieves the general credit transaction
	    code for the target account's type, and PRAMT retrieves the 
	    principal amount due.

	Percent at Payoff
	  (PRCNTCID,PRCNTETC,PRCNTAMT sections)
	    This amount is a percentage of the total disbursement (LN.TDR) of
	    the percent at payoff target account which is due when the account
	    associated with the transaction set's base transaction is being 	
	    paid off.  PRCNTCID retrieves the target account's account number 
	    (account to be credited with a percentage of it's total 
	    disbursement), PRCNTETC retrieves the general credit transaction 
	    code for the target account's type, and PRCNTAMT calculates and
	    returns the percentage (in a dollar amount) of the target account's
	    total disbursement due.

	Interest Reserve Withdrawals
	  (IRPCID, IRPETC, IRPAMT sections)
	    Interest Reserve accounts can be set up to pay off interest as it
	    becomes due on a commimtment or loan(s).  If a loan that uses
	    an interest reserve account is paid off, the amount of funds in 
	    that account which pertain to that loan (multiple loans may share
	    an interest reserve account) must be withdrawn from the I.R. 
	    account.  The IRPCID section retrieves the interest reserve account
	    number which the base transaction's account number uses, IRPETC
	    returns the general debit (DR) transaction code for the interest
	    reserve account's type, and IRPAMT returns the amount of funds 
	    remaining in the interest reserve account which this loan uses.
	  
	Miscellaneous Credits for Interest Reserve
	  (MISCAMT section)
	    The funds remaining in an interest reserve account may be taken in
	    by the institution as a miscellaneous fee when a loan which uses
	    that I.R. account is paid off.  The MISCAMT section calculates
	    the amount to be taken in this event.  (Please see this section
	    of code below for further explanation of the calculation of the 
	    fee amount) Note that the account number and transaction code 
	    associated with this miscellaneous credit amount must be hardcoded 
	    into the transaction set.

	Commitment Payoffs
	  (COMMCID,COMMETC,COMMAMT, COMMREP sections)
	    When paying off an entire commitment (or sub-commitment) these
	    sections handle the calculations necessary in determining the
	    payoffs for each individual loan tied to the commitment.  The
	    COMMREP section must be used in the "Times to Repeat" section
	    of the transaction set as it sets up and populates a local	
	    array with information related to each individual loan's payoff.
	    The COMMCID section retrieves the next loan account number (tied
	    to the commitment) which has not been processed yet.  The COMMETC
	    section retrieves the default payoff transaction code from the 
	    local array for the loan accouny number being processed.  The 
	    COMMAMT section calculates and returns the payoff amount required
	    for the loan being processed based upon the payoff transaction code
	    being used.

	---- Revision History ------------------------------------------------
	08/02/05 - KUMARB - CR16684
		Modified section GETACCTS, changed the table name LNLCOM 
		to LN in Db.select
	
	
	12/02/03 - CARROLLJ - CR7239
		   Added object ttx to PRAMTETC section.

	06/16/03 - CARROLLJ - 51349
		   Removed the use of the TR array and passed ttx opbject
		   around.


 */

 quit


Public PRAMTCID(RecordTTX ttx)	// Principle Amount at Payoff Target Account Number

	new BASECID,TRGT

        set BASECID=ttx.cid
	if BASECID="" quit ""
 
        set TRGT=Db.getOneRow("PRAMTCID","LN","BASECID")
 
        quit TRGT

Public PRAMTETC(RecordTTX ttx)	// Principle Amount at Payoff Target Account Tran Code

        new PETC,PTYP,TRGT
 
        set TRGT=$$PRAMTCID(.ttx)
	if TRGT="" quit ""

        set PTYP=Db.getOneRow("TYPE","LN","TRGT")        // Target Type
        set PETC=Db.getOneRow("CRTRGP","PRODCTL","PTYP") // Target ETC
 
        quit PETC

Public PRAMT(RecordTTX ttx) 		// Principle Amount at Payoff 
 
        new BASECID,PRAMT,TRGT
 
        set BASECID=ttx.cid
        set TRGT=$$PRAMTCID(.ttx)
 
        if TRGT="" quit 0
 
        set PRAMT=Db.getOneRow("PRAMT","LN","BASECID")
 
        quit PRAMT


Public PRCNTCID(RecordTTX ttx)	// Percent at Payoff Target Account

        new BASECID,TRGT
 
        set BASECID=ttx.cid
	if BASECID="" quit ""

	set TRGT=Db.getOneRow("PRCNTCID","LN","BASECID")

	quit TRGT 

Public PRCNTETC(RecordTTX ttx)	// Percent at Payoff Transaction Code

	new PETC,PTYP,TRGT

	set TRGT=$$PRCNTCID(.ttx)
	if TRGT="" quit ""

	set PTYP=Db.getOneRow("TYPE","LN","TRGT")	 // Target Type
	set PETC=Db.getOneRow("CRTRGP","PRODCTL","PTYP") // Target ETC

	quit PETC	

Public PRCNTAMT(RecordTTX ttx)	// Percent at Payoff Amount
	
	new AMT,BASECID,PRCNT,TDR,TRGT
 
        set BASECID=ttx.cid
	set TRGT=$$PRCNTCID(.ttx)

	if TRGT="" quit 0

	set PRCNT=Db.getOneRow("PRCNTAP","LN","BASECID")
	set TDR=Db.getOneRow("TDR","LN","TRGT")
	set AMT=(PRCNT/100)*TDR
	
	set AMT=$$^SCARND(AMT,,,,2)

	quit AMT


Public IRPCID(RecordTTX ttx)	// Interest Reserve Account Number

        new BASECID,IRCID
 
        set BASECID=ttx.cid
	if BASECID="" quit ""

	set IRCID=Db.getOneRow("IRCID","LN","BASECID")
	if IRCID="" quit ""
	if 'Db.isDefined("DEP","IRCID") quit ""	

	quit IRCID

Public IRPETC(RecordTTX ttx)  // Interest Reserve Account Number Tran Code

	new DTYPE,IRCID,DRETC

	set IRCID=$$IRPCID(.ttx)
	if IRCID="" quit ""

	set DTYPE=Db.getOneRow("TYPE","DEP","IRCID")
	set DRETC=Db.getOneRow("DRTRGP","PRODCTL","DTYPE")	

	quit DRETC

Public IRPAMT(RecordTTX ttx)	// Interest Reserve Amount 

	new BASECID,IRCID,LNCID,TAMT

	set IRCID=$$IRPCID(.ttx)

	if IRCID="" quit 0

	/* 
	If IRCID is the only account that uses this account for interest
	reserve processing, this section returns the full amount available.  If
	not, it returns the interest reserve amount remaining for the 
	BASECID (the loan).
	*/
	
        set BASECID=ttx.cid
	if BASECID="" quit 0

	set LNCID=""
	set LNCID=Db.nextKey("RELIR","IRCID,LNCID")	// Get first acct linked
	set LNCID=Db.nextKey("RELIR","IRCID,LNCID")	// Get next one (if any)

	if LNCID'="" set TAMT=Db.getOneRow("IRAMTR","LN","BASECID")
	else  set TAMT=Db.getOneRow("BALAVL","DEP","IRCID")

	quit TAMT

Public MISCAMT(method,RecordTTX ttx)  // For miscellaneous fee credit of interest reserve funds

	/*
	   The method parameter determines how much of an interest reserve 
	   account's remaining funds should be returned by this procedure to 
	   be used as a miscellaneous credit to a G/L Fee account. (This assumes
	   that there is already a sequence in the transet which withdraws
	   all of the funds from the I.R. account) 

	   Method   Description
		1 - Return total amount in interest reserve for this account
		2 - If Accrued Interest >= Interest Reserve, return 0
		    If Accrued Interest < Interest Reserve, return differemce

	   Default value returned is 0.
	*/

	new ACR,AMT,BASECID,IRAMTR

	set BASECID=ttx.cid
	if BASECID="" quit 0

	set IRAMTR=$$IRPAMT(.ttx)
	if IRAMTR="" quit 0

	
	if $G(method)=1 quit IRAMTR
	if $G(method)'=2 quit 0		// No method defined, quit returning 0

	set ACR=Db.getOneRow("ACR","LN","BASECID")
	
	set ACR=$$^SCARND(ACR,,,,2)

	if (ACR'<IRAMTR) quit 0
	if (ACR<IRAMTR) set AMT=IRAMTR-ACR

	quit AMT


Public COMMCID(RecordTTX ttx)

	new BASECID,done,NXTCID 
	
	set BASECID=ttx.cid
	if BASECID="" quit ""
	if '$D(ACCTS(BASECID)) quit ""

	set NXTCID="",done=0
	for  set NXTCID=$O(ACCTS(BASECID,NXTCID)) quit:done  do {
		if NXTCID="" set (done,alldone)=1 quit
		if $P(ACCTS(BASECID,NXTCID),"|",1)=1 quit
		else  set done=1,POCID=NXTCID,$P(ACCTS(BASECID,NXTCID),"|",1)=1
		}
        quit POCID
 
Public COMMETC(RecordTTX ttx)
	new POETC

	if POCID="" quit ""
	set BASECID=ttx.cid
	if BASECID="" quit ""	

	set POETC=$P(ACCTS(BASECID,POCID),"|",2) 	

        quit POETC

Public COMMAMT(RecordTTX ttx)
	new AMT,ETC
	
	if $G(alldone)=1 quit 0	// From COMMCID

	if POCID="" quit 0
	set BASECID=ttx.cid
	set ETC=$$COMMETC(.ttx)
	if ETC="" quit 0
	set CID=POCID

	d LF1^LNTCP1(0)		// Calculate Payoff amount for this CID & ETC 

	set AMT=$G(DFT("AMT"))
	if AMT="" quit 0

	quit AMT	

Public COMMREP(RecordTTX ttx)  // Times to repeat this transaction set sequence for the comm.
	
	/*
	 This section calculates various information related to the payoffs of
	 the individual loans linked to the commitment (which should be the
	 account number associated with the base transaction of the tran set).  
	 The local ACCTS array is populated with the account number and default
	 payoff transaction code of every account linked to the commitment
	 (either directly or via a sub-commitment) that does not have a closed
	 status (LN.STAT'=4).  This section will then return the total number
	 of accounts in the ACCTS array via the rept variable (which is the 
	 number of times that this transaction set sequence should be repeated).
	*/	

        new BASECID,CPF,rpt,NXTCID,XCCL
 
        set BASECID=ttx.cid
        set CPF=Db.getOneRow("CPF","LN","BASECID")
        if 'CPF quit 0   // Not a commitment
 
	// Get all accts (& their payoff trancodes) linked to this commitment
	set ACCTS="",XCCL=BASECID
	do GETACCTS(.ACCTS,XCCL)
 
        set NXTCID=""
        for  set NXTCID=$O(ACCTS(BASECID,NXTCID)) quit:NXTCID=""  set rpt=rpt+1

        quit rpt


Public GETACCTS(ACCTS,ZCCL)
        /*
         This section uses recursion to get all accounts linked to a commitment
         no matter how many levels deep it may go.  Current system restriction
         is 5 levels.  The accts parameter should initially be set to null
         before calling this section and should be passed in by reference
 
         EXAMPLE:
                do GETACCTS^COMMPO(.ACCTS,XCCL)
 
         Will return the ACCTS global with the structure:
                ACCTS(Commitment #, Account Number 1)=""
                                    Account Number 2)=""
                                    Account Number 3)=""

	 Also note that XCCL, the master commitment acct number, must be
	 passed in as the second parameter.
        */
 
        new rs
        type ResultSet rs=Db.select("CID","LN","CCL=:ZCCL")
 
        if rs.isEmpty() quit

        while rs.next() do {    // Add account to ACCTS var
                new DATA,POETC,TYP,XCID,XCPF
                set XCID=rs.getCol(1)
		if 'Db.isDefined("LN","XCID") quit
                
		set DATA=Db.getOneRow("STAT,CPF,TYPE","LN","XCID")
		if $P(DATA,$C(9),1)=4 quit 		 // Exclude closed accts
		
		set TYP=$P(DATA,$C(9),3)			 // Product type
		if 'Db.isDefined("PRODCTL","TYP") quit
		set POETC=Db.getOneRow("CRTACN1","PRODCTL","TYP") // PO Trancode
                set ACCTS(XCCL,XCID)="0|"_POETC

		set XCPF=$P(DATA,$C(9),2)	  // Sub-commitment?
                if XCPF do GETACCTS(.ACCTS,XCID)  // Recursive Call
                }
        quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60114^38637^Balasubramonian Sankar^11366"	// Signature - LTD^TIME^USER^SIZE
