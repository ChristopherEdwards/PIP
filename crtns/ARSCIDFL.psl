ARSCIDFL(RecordARSCID arscid, String vpar, Boolean vparNorm) // ARSCID - Account Reconciliation Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (7)              11/22/2003
	// Trigger Definition (4)                      11/23/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = arscid.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(arscid,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(arscid,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = arscid.cid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ARSCID",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ARSCID","CID = :arscid.cid")      // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordARSCID arscid = Db.getRecord("ARSCID","CID=:CID")
	if (%ProcessMode = 2) do {
		do arscid.setMode(2)

		do ARSCIDFL(arscid,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordARSCID arscid

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ARSCID","CID = :arscid.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(arscid)) S ^ARS(vobj(arscid,-3))=vobj(arscid)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordARSCID arscid

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ARS(vobj(arscid,-3))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordARSCID arscid

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordARSCID arscid

	if arscid.cid.isNull() do vreqerr("CID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ARSCID","MSG",1767,"ARSCID."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordARSCID arscid
	if 'arscid.cid.isNull() set vfkey("^ACN("_""""_arscid.cid_""""_","_50_")")="ARSCID(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordARSCID arscid
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":arscid.cid") set vERRMSG = $$^MSG(8563,"ARSCID(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordARSCID arscid
	if vx("").order().isNull() do AUDIT^UCUTILN(arscid,.vx(),1,"|") quit
	if vx("ARSFRE").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(arscid,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - After Delete of ARSCID.

	type public RecordARSCID arscid
	/*
	----Revision History---------------------------------------------------
	09/23/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/

	new X
	set X=arscid.cid
	do Db.update("DEP","ARS=0","CID=:X")
	quit 
	

vai1 // Trigger AFTER_INSERT - After Insert of ARSCID

	type public RecordARSCID arscid

	/*
	----Revision History---------------------------------------------------

	04/25/06 - KinI - 20743
		   Re-wrote the trigger. Need to call CID^ARSUTL to update
		   ARSB record once any account is setup for reconciliation.
		   Before it was done only by ARS dayend function. 		   
	*/
	
	do CID^ARSUTL(.arscid)
	
	quit 
	

vbi1 // Trigger BEFORE_INSERT - Before Insert of ARSCID

	type public RecordARSCID arscid
	/*
	----Revision History---------------------------------------------------

	11/22/06 - PUTTASWH - 22137
		   Modified to update the Account Reconciliation Last End Date
		   based on the value of Account Reconciliation Next End Date
		   and the Reconciliation Frequency.
		   
	05/02/06 - KinI - 20743
		   Cleaned-up the trigger.

	----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	
	if 'arscid.arsfre.isNull() set arscid.arsndt=%SystemDate.nextFreqDate(arscid.arsfre) quit:ER

	if arscid.arsldt.isNull() set arscid.arsldt=arscid.arsndt.nextFreqDate(arscid.arsfre,,1) 
	
	quit 
	

vbu1 // Trigger BU_ARSFRE - Before Update of ARSFRE

	type public RecordARSCID arscid
	do arscid.setAuditFlag(1)
	if arscid.arsfre'="" do {
		set NJD=$$NJD^UFRE(%SystemDate,arscid.arsfre) quit:ER 
		set arscid.arsndt=NJD
		}
	quit 
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordARSCID arscid

	set X = arscid.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = arscid.arsfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[ARSCID]ARSFRE",0) if 'vRM.get().isNull() do vdderr("ARSFRE", vRM) quit
	set X = arscid.arsldt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ARSLDT", vRM) quit
	set X = arscid.arsndt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ARSNDT", vRM) quit
	set X = arscid.arsofst if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("ARSOFST", vRM) quit
	set X = arscid.arspdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ARSPDT", vRM) quit
	set X = arscid.cksout if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ARSCID.CKSOUT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ARSCID","MSG",979,"ARSCID."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordARSCID arscid

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(arscid,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(arscid,-3) = vnewkey // Copy new keys into object
	type RecordARSCID vnewrec = arscid.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ARSCID",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(arscid,-3) = vux.piece("|",1)                 // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordARSCID arscid
	type public String vpar

	do Db.delete("ARS","CID=:arscid.cid",vpar)             // Cascade delete

	quit
