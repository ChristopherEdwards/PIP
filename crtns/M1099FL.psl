M1099FL(RecordM1099 m1099, String vpar, Boolean vparNorm) // M1099 - Manual 1099s Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:19 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (48)             11/08/2006
	// Trigger Definition (6)                      11/08/2006
	// Journal File Definition (3)                 04/19/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = m1099.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(m1099,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(m1099,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TAXID = m1099.taxid
	type String SEQ = m1099.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TAXID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("M1099",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("M1099","TAXID = :m1099.taxid and SEQ = :m1099.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TAXID
	type public String SEQ

	type RecordM1099 m1099 = Db.getRecord("M1099","TAXID=:TAXID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do m1099.setMode(2)

		do M1099FL(m1099,vpar)
	}
	else  do VINDEX(m1099)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordM1099 m1099

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("M1099","TAXID = :m1099.taxid and SEQ = :m1099.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set m1099.ODAT = %SystemDate
		if %O = 1  set m1099.UPDT = %SystemDate
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(m1099)) S ^M1099(vobj(m1099,-3),vobj(m1099,-4))=vobj(m1099)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.m1099)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.m1099) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordM1099 m1099

	if vpar["/INDEX/" do VINDEX(.m1099)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.m1099)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^M1099(vobj(m1099,-3),vobj(m1099,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordM1099 m1099

	// Type local variables for access keys for defaults
	type public String TAXID
	type public String SEQ

	if m1099.bankrup.isNull() set m1099.bankrup = 0        // bankrup
	if m1099.bliab.isNull() set m1099.bliab = 0            // bliab
	if m1099.cntry.isNull() set m1099.cntry = CUVAR.CNTRY  // cntry
	if m1099.mf.isNull() set m1099.mf = 1                  // mf
	if m1099.prinres.isNull() set m1099.prinres = 0        // prinres
	if m1099.recoth.isNull() set m1099.recoth = 0          // recoth
	quit


vreqn // Validate required data items

	type public RecordM1099 m1099

	if m1099.bankrup.isNull() do vreqerr("BANKRUP") quit
	if m1099.bliab.isNull() do vreqerr("BLIAB") quit
	if m1099.prinres.isNull() do vreqerr("PRINRES") quit
	if m1099.recoth.isNull() do vreqerr("RECOTH") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordM1099 m1099

	if m1099.taxid.isNull() do vreqerr("TAXID") quit
	if m1099.seq.isNull() do vreqerr("SEQ") quit

		if vx("BANKRUP").exists(),m1099.bankrup.isNull() do vreqerr("BANKRUP") quit
		if vx("BLIAB").exists(),m1099.bliab.isNull() do vreqerr("BLIAB") quit
		if vx("PRINRES").exists(),m1099.prinres.isNull() do vreqerr("PRINRES") quit
		if vx("RECOTH").exists(),m1099.recoth.isNull() do vreqerr("RECOTH") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("M1099","MSG",1767,"M1099."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("INTPAB").exists()!vx("INT").exists()!vx("TYPE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("MZIP").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("NAM").exists()!vx("LNAM").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordM1099 m1099
	if vx("").order().isNull() do AUDIT^UCUTILN(m1099,.vx(),1,"|") quit
	if vx("NAM").exists()!vx("LNAM").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(m1099,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordM1099 m1099
	/*
	-- Revision History -----------------------------------------------

								10/27/06 - SWARNALP - CR23635
																			Added code to check whether the amount is defined 
		   in Int on Pvt Activity Bonds when the transaction
																			type is 10 and is not greater than Interest Paid
																			amount.

	08/21/06 - KumarSS - 22169
		   Added code to validate ZIP code column.

	10/04/05 - HAILEYM - CR17143
		   Updated to DBI Standards. 
		   Removed logic that creates DAYENDM1099 entries. This is now
		   handled by journal M1099/DAYENDM1099_I.
	
	01/07/03 - CARROLLJ - CR7658
			Removed tostring method.

	06/17/02 - ANTONOVS - 48920
		   Added Customer Last Name verification.

	*/

	type public Boolean ER
	type public String RM
	
	type String V,XX

	// Validate ZIP code
	do ZIP^PROCZIP(m1099.cntry, m1099.state, m1099.mzip)
	if ER.get() do Runtime.setErrMSG("M1099", 3333, RM) quit:ER

	// Customer Last Name verification	
	set XX=m1099.lnam.upperCase()
	set V=m1099.nam.upperCase()
	// Last name is not part of full name
	if " "[XX!(V'[XX) do Runtime.setErrMSG("M1099",1593) quit:ER

								// Data required in Data Item ~p1
								if (m1099.type=10),((m1099.intpab).isNull()) do Runtime.setErrMSG("M1099", 7531, "Int on Pvt Act Bonds") quit

								// Amount entered in Int on Pvt Act Bonds exceeds Interest Paid amount
								if (m1099.type=10),(m1099.intpab>m1099.int) do Runtime.setErrMSG("M1099", 5477) quit

	quit
	

vau1 // Trigger AU_INTPAB - After Update of INTPAB, INT and TYPE

	type public RecordM1099 m1099
								/*
								---- Revision History -----------------------------------------

								10/27/06 - SWARNALP - CR 23635
																			Added code to check whether the amount is defined 
		   in Int on Pvt Activity Bonds when the transaction 
		   type is 10 and is not greater than Interest Paid 
		   amount

								*/

	// Data required in Data Item ~p1
	if (m1099.type=10),((m1099.intpab).isNull()) do Runtime.setErrMSG("M1099", 7531, "Int on Pvt Act Bonds") quit

	// Amount entered in Int on Pvt Act Bonds exceeds Interest Paid amount
								if (m1099.type=10),(m1099.intpab>m1099.int) do Runtime.setErrMSG("M1099", 5477) quit
	quit

vau2 // Trigger AU_MZIP - After Update of ZIP Code

	type public RecordM1099 m1099

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code
	do ZIP^PROCZIP(m1099.cntry, m1099.state, m1099.mzip)
	if ER.get() do Runtime.setErrMSG("M1099", 3333, RM)

	quit

vau3 // Trigger AU_NAM - After Update Customer Name

	type public RecordM1099 m1099
	/*
	-- Revision History -----------------------------------------------
	
	10/04/05 - HAILEYM - CR17143
		   Updated to DBI Standards.
		   
	*/
	
	// Customer Last Name verification
	
	type public Boolean ER

	type String V,XX

	set XX=m1099.lnam.upperCase()
	set V=m1099.nam.upperCase()
	// Last name is not part of full name
	if " "[XX!(V'[XX) do Runtime.setErrMSG("M1099",1593) quit:ER

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert M1099

	type public RecordM1099 m1099
	/*
	-- Revision History -----------------------------------------------
	
	10/04/05 - HAILEYM - CR17143
		Updated to DBI Standards. 
		Removed setting of ODAT and UPDT. This is handled by the Audit
		Information fields defined on the file definition.
	
	06/17/02 - ANTONOVS - 48920
		Added Customer Last Name defaulting.
	
	01/13/00 - SHANL - 31126
		Fixed errors.
	 
	*/

	type public Number ACN
	
	type String LN,V
	
	// Customer Last Name defaulting
	set V=m1099.nam
	if 'ACN.get() set ACN=""
	if m1099.lnam.length() quit
	
	do FBL^XALPHA
	set m1099.lnam=$E($P(LN,",",1),1,20)

	quit
	

vbu1 // Trigger BU_NAM - Before Update Customer Name

	type public RecordM1099 m1099
	do m1099.setAuditFlag(1)
	/*
	-- Revision History -----------------------------------------------
	
	10/04/05 - HAILEYM - CR17143
		Updated to DBI Standards.
	
	*/

	type public Number ACN
	
	type String LN,V
	
	// Customer Last Name defaulting
	set V=m1099.nam
	if 'ACN.get() set ACN=""
	if m1099.lnam.length() quit
	
	do FBL^XALPHA
	set m1099.lnam=$E($P(LN,",",1),1,20)

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordM1099 m1099

	if m1099.taxid.length()>11 set vRM = $$^MSG(1076,11) do vdderr("TAXID", vRM) quit
	set X = m1099.seq if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if m1099.ad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD1", vRM) quit
	if m1099.ad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD2", vRM) quit
	if m1099.ad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("AD3", vRM) quit
	if '("01"[m1099.BANKRUP) set vRM=$$^MSG(742,"L") do vdderr("BANKRUP", vRM) quit
	if '("01"[m1099.BLIAB) set vRM=$$^MSG(742,"L") do vdderr("BLIAB", vRM) quit
	set X = m1099.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
	set X = m1099.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if m1099.city.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITY", vRM) quit
	set X = m1099.cntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRY", vRM) quit
	set X = m1099.cofee if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.COFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.coint if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.COINT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.coprin if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.COPRIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.cropins if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.CROPINS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.debtout if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.DEBTOUT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.debtsat if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.DEBTSAT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if m1099.desc.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DESC", vRM) quit
	if m1099.desc2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DESC2", vRM) quit
	if m1099.desc3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("DESC3", vRM) quit
	set X = m1099.fedinc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.FEDINC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.fishboat if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.FISHBOAT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.fmktv if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.FMKTV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.formtyp if 'X.isNull(),'Db.isDefined("STBLM1099T","X") set vRM = $$^MSG(1485,X) do vdderr("FORMTYP", vRM) quit
	set X = m1099.goldpara if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.GOLDPARA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.gppls if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.GPPLS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.int if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.INT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.intpab if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.INTPAB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.intwh if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.INTWH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if m1099.lnam.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNAM", vRM) quit
	set X = m1099.medpymnt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.MEDPYMNT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.mf if 'X.isNull(),'Db.isDefined("UTBLMF","X") set vRM = $$^MSG(1485,X) do vdderr("MF", vRM) quit
	if m1099.mzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("MZIP", vRM) quit
	if m1099.nam.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NAM", vRM) quit
	set X = m1099.odat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODAT", vRM) quit
	set X = m1099.orddiv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.ORDDIV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.othinc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.OTHINC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[m1099.PRINRES) set vRM=$$^MSG(742,"L") do vdderr("PRINRES", vRM) quit
	if '("01"[m1099.RECOTH) set vRM=$$^MSG(742,"L") do vdderr("RECOTH", vRM) quit
	set X = m1099.relacn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("RELACN", vRM) quit
	set X = m1099.rent if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.RENT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.retax if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.RETAX"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.royalty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.ROYALTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if m1099.state.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATE", vRM) quit
	set X = m1099.subpay if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"M1099.SUBPAY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = m1099.td if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TD", vRM) quit
	set X = m1099.type if 'X.isNull(),'Db.isDefined("STBLM1099","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	set X = m1099.updt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("UPDT", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("M1099","MSG",979,"M1099."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordM1099 m1099)	//M1099 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.m1099)	// Mode=D Tran=B EFD=N Seq=1 JRNID=DAYENDM1099_D
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.m1099)	// Mode=D Tran=O EFD=N Seq=1 JRNID=DAYENDM1099_D
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.m1099)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=DAYENDM1099_I
			}
		else  if TSRC="O" do {
			do vj2(.m1099)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=DAYENDM1099_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj3(.m1099)	// Mode=U Tran=B EFD=N Seq=1 JRNID=DAYENDM1099_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj3(.m1099)	// Mode=U Tran=O EFD=N Seq=1 JRNID=DAYENDM1099_U
				}
			}
		}

	quit


vj1(RecordM1099 m1099)	// DAYENDM1099_D  Table DAYENDM1099  DAYEND Entry for M1099 Account Deletion

	type Public String %O,%UID,TJD
	type String v1,v2,v3,vlastkey
	set v1=TJD
	set v2=m1099.taxid
	set v3=m1099.seq
	set vlastkey=Db.nextVal("DAYENDM1099","TJD=:v1,TAXID=:v2,SEQ=:v3")
	type RecordDAYENDM1099 dayendm1099=Db.getRecord("DAYENDM1099","TJD=:v1,TAXID=:v2,SEQ=:v3,TSEQ=:vlastkey",1)
	set dayendm1099."%O"=%O
	set dayendm1099.data=$$GETNPK^M1099(m1099.taxid,m1099.seq)
	set dayendm1099.uid=%UID
	set dayendm1099.update=m1099.updt

	do dayendm1099.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordM1099 m1099)	// DAYENDM1099_I  Table DAYENDM1099  DAYEND Entry for New M1099 Account

	type Public String %O,%UID,TJD
	type String v1,v2,v3,vlastkey
	set v1=TJD
	set v2=m1099.taxid
	set v3=m1099.seq
	set vlastkey=Db.nextVal("DAYENDM1099","TJD=:v1,TAXID=:v2,SEQ=:v3")
	type RecordDAYENDM1099 dayendm1099=Db.getRecord("DAYENDM1099","TJD=:v1,TAXID=:v2,SEQ=:v3,TSEQ=:vlastkey",1)
	set dayendm1099."%O"=%O
	set dayendm1099.data=$$GETNPK^M1099(m1099.taxid,m1099.seq)
	set dayendm1099.uid=%UID
	set dayendm1099.update=m1099.updt

	do dayendm1099.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordM1099 m1099)	// DAYENDM1099_U  Table DAYENDM1099  DAYEND Entry for M1099 Account Updates

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if vdi'="UPDT" do {
		type Public String vx(),EFD,%O,%UID,TJD
		type String v1,v2,v3,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=TJD
		set v2=m1099.taxid
		set v3=m1099.seq
		set vlastkey=Db.nextVal("DAYENDM1099","TJD=:v1,TAXID=:v2,SEQ=:v3")
		type RecordDAYENDM1099 dayendm1099=Db.getRecord("DAYENDM1099","TJD=:v1,TAXID=:v2,SEQ=:v3,TSEQ=:vlastkey",1)
		set dayendm1099."%O"=%O
		set dayendm1099.data=$$TCMTFM^ACNFUNCS("","M1099",vdi,vold,vnew,$G(EFD))
		set dayendm1099.uid=%UID
		set dayendm1099.update=m1099.updt

		do dayendm1099.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordM1099 m1099) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("FORMTYP").exists() do vi1(.m1099)
	}
	do vi1(.m1099)

	quit
	

vi1(RecordM1099 m1099) // Maintain M1099X index entries (M1099 X-REF File)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = m1099.formtyp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = m1099.taxid
	type String v4 = m1099.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^M1099(vobj(m1099,-3),vobj(m1099,-4)))#2,'$D(^XREF("M1099",v2,v3,v4)) do vidxerr("M1099X")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("M1099",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("FORMTYP").exists() set v2=vx("FORMTYP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("M1099",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("M1099")

	while ds.next() do {
		type RecordM1099 m1099=ds.getRecord("M1099")
		if vlist.contains("VINDEX") do VINDEX(.m1099) quit
		if vlist.contains("M1099X") do vi1(.m1099)
	}

	quit


public VIDXBLD1(RecordM1099 m1099, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.m1099) quit
	if vlist.contains("M1099X") do vi1(.m1099)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("M1099","MSG",1225,"M1099."_di)

	quit


vkchged // Access key changed

	type public RecordM1099 m1099

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("TAXID").exists() set vux("TAXID") = vx("TAXID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = m1099.taxid_","_m1099.seq     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = m1099.taxid_","_m1099.seq     // Copy new keys into object
	type RecordM1099 vnewrec = m1099.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("M1099",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordM1099 m1099

	if vux("TAXID").exists() set m1099.taxid = vux("TAXID").piece("|",i)
	if vux("SEQ").exists() set m1099.seq = vux("SEQ").piece("|",i)
	quit

VIDXPGM()	quit "M1099FL"	// Location of index program

