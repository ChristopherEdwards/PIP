IRSUPDFL(RecordIRSUPD irsupd, String vpar, Boolean vparNorm) // IRSUPD - IRS Correction Reporting Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (6)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = irsupd.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(irsupd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(irsupd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TJD = irsupd.tjd
	type String FTYPE = irsupd.ftype
	type String MISCSEQ = irsupd.miscseq
	type String BSEQ = irsupd.bseq

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJD").exists()!vx("FTYPE").exists()!vx("MISCSEQ").exists()!vx("BSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("IRSUPD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("IRSUPD","TJD = :irsupd.tjd and FTYPE = :irsupd.ftype and MISCSEQ = :irsupd.miscseq and BSEQ = :irsupd.bseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJD
	type public String FTYPE
	type public String MISCSEQ
	type public String BSEQ

	type RecordIRSUPD irsupd = Db.getRecord("IRSUPD","TJD=:TJD,FTYPE=:FTYPE,MISCSEQ=:MISCSEQ,BSEQ=:BSEQ")
	if (%ProcessMode = 2) do {
		do irsupd.setMode(2)

		do IRSUPDFL(irsupd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordIRSUPD irsupd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("IRSUPD","TJD = :irsupd.tjd and FTYPE = :irsupd.ftype and MISCSEQ = :irsupd.miscseq and BSEQ = :irsupd.bseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(irsupd))  S ^IRSUPD(vobj(irsupd,-3),vobj(irsupd,-4),vobj(irsupd,-5),vobj(irsupd,-6))=vobj(irsupd)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordIRSUPD irsupd


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^IRSUPD(vobj(irsupd,-3),vobj(irsupd,-4),vobj(irsupd,-5),vobj(irsupd,-6)) // Delete Record
	quit


vreqn // Validate required data items

	type public RecordIRSUPD irsupd

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordIRSUPD irsupd

	if irsupd.tjd.isNull() do vreqerr("TJD") quit
	if irsupd.ftype.isNull() do vreqerr("FTYPE") quit
	if irsupd.miscseq.isNull() do vreqerr("MISCSEQ") quit
	if irsupd.bseq.isNull() do vreqerr("BSEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRSUPD","MSG",1767,"IRSUPD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("ONAME").exists()!vx("OLNAM").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordIRSUPD irsupd
	if vx("").order().isNull() do AUDIT^UCUTILN(irsupd,.vx(),1,"|") quit
	if vx("CCODE").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("OCIF").exists() do vbu3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("ONAME").exists()!vx("OLNAM").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(irsupd,.vx(),1,"|")
	quit


vai1 // Trigger AFTER_INSERT - After Insert Miscellaneous record

	type public RecordIRSUPD irsupd
	new V,XX
	set XX=$$UPPER^%ZFUNC(irsupd.olnam)
	set V=$$UPPER^%ZFUNC(irsupd.oname)
	// Last name is not part of full name
	if " "[XX!(V'[XX) do Runtime.setErrMSG("IRSUPD",1593) quit:ER

	quit

vau1 // Trigger AU_NAM - After Update Customer Name

	type public RecordIRSUPD irsupd
	new V,XX
	set XX=$$UPPER^%ZFUNC(irsupd.olnam)
	set V=$$UPPER^%ZFUNC(irsupd.oname)
	// Last name is not part of full name
	if " "[XX!(V'[XX) do Runtime.setErrMSG("IRSUPD",1593) quit:ER
	
	quit

vbi1 // Trigger BEFORE_INSERT - Before insert trigger for IRSUPD.

	type public RecordIRSUPD irsupd
	/*
	   Revision History

	   01/28/04 - CARROLLJ - CR7997
		      Corrected compile error.

	   06/18/02 - ANTONOVS - 48920
		      Added Customer Last Name defaulting.	

	   09/12/00 - KESTELMANN - 36850
	              Added code to show message "Change of TIN/SIN not
																						allowed for form ~p1" if CCODE=2 and FTYPE=14            
	
	   09/14/99 - CHOK - 31126
		      Converted to PSL.
	*/	

	new ZCLS,XCIF,%EXT,IRA
	if Db.isDefined("IRSUPD","TJD,FTYPE,MISCSEQ,BSEQ") do Runtime.setErrXBAD("IRSUPD","IRSUPD") quit:ER 

	// CID
	if (FTYPE=1)!(FTYPE=4)!(FTYPE=5) do {
		if FTYPE=1 kill ZCLS
		else  set ZCLS=$S(FTYPE=5:"L",1:"D")
		if '$D(ZCLS) set ZCLS=Db.getOneRow("CLS","ACN","MISCSEQ")
		if ZCLS="L" quit
		set IRA=Db.getOneRow("IRA","DEP","MISCSEQ")
		if ZCLS="D",((FTYPE'=5)!(FTYPE'=11)),IRA do Runtime.setErrXBAD("IRSUPD","IRSUPD1") quit:ER 
		}
	
	// ACN
	if (FTYPE=3)!(FTYPE=6)!(FTYPE=7) do { quit:ER
		new rs
		type ResultSet rs=Db.select("RPASEQ","IRA","ACN=:MISCSEQ")
		if rs.isEmpty() do Runtime.setErrXBAD("IRSUPD","IRSUPD2") quit:ER
		}
	
	// MISC
	if (FTYPE=2)!(FTYPE=9)!(FTYPE=10)!(FTYPE=11)!(FTYPE=12) do { quit:ER
		if MISCSEQ'?3N1"-"2N1"-"4N&(MISCSEQ'?2N1"-"7N) do Runtime.setErrXBAD("IRSUPD","IRSUPD3") quit:ER 
	
		new MFORM,TYPE,FFORM,TAXID
		if 'Db.isDefined("M1099","MISCSEQ,BSEQ") do Runtime.setErrMSG("IRSUPD",2341,BSEQ) quit:ER 
		set MFORM=Db.getOneRow("FORMTYP","M1099","MISCSEQ,BSEQ")
		set TYPE=Db.getOneRow("DESC","STBLM1099T","MFORM")
		set TYPE=$P(TYPE," ",1)
		set FFORM=Db.getOneRow("DESC","STBLIRSFORM2","FTYPE")
		if $P(FFORM,"-",1,2)'=TYPE do Runtime.setErrXBAD("IRSUPD","IRSUPD4") quit:ER 
		}
	
	if irsupd.ftype=2!(irsupd.ftype=9)!(irsupd.ftype=10)!(irsupd.ftype=12)!(irsupd.ftype=14),irsupd.ccode=2 do { quit:ER
		new TEMP
		set TEMP=Db.getOneRow("DESC","STBLIRSFORM","FTYPE")
		do Runtime.setErrMSG("IRSUPD",512,"TEMP") quit:ER 
		}
	
	if irsupd.ocif="" quit 
	set XCIF=irsupd.ocif
	if 'Db.isDefined("CIF","XCIF") do Runtime.setErrMSG("IRSUPD",7575) quit:ER 
	if irsupd.ccode'=2 do {
		set irsupd.otin=Db.getOneRow("TAXID","CIF","XCIF")
		set irsupd.oname=Db.getOneRow("NAM","CIF","XCIF")
		}

	// Defaulting Customer Last Name

	new V
	set V=irsupd.oname
	if '$G(ACN) set ACN=""
	if '$L(irsupd.olnam) do {
		do FBL^XALPHA
		set irsupd.olnam=$E($P(LN,",",1),1,20)
		}

	quit 
	

vbu1 // Trigger BU_CCODE - Before Update for CCODE.

	type public RecordIRSUPD irsupd
	do irsupd.setAuditFlag(1)
	if irsupd.ftype=2!(irsupd.ftype=9)!(irsupd.ftype=10)!(irsupd.ftype=12),irsupd.ccode=2 do { quit:ER 
		new TEMP
		new rs 
		type ResultSet rs=Db.select("DESC","STBLIRSFORM2","FORMNAME=:FTYPE") 
		if rs.isEmpty() set TEMP=""
		else  set TEMP=rs.next(),TEMP=rs.getCol(1)
		do Runtime.setErrMSG("IRSUPD",512,"TEMP") quit:ER 
		}
	if irsupd.ccode=2 if irsupd.otin=irsupd.otin.oldVal do Runtime.setErrMSG("IRSUPD",2114) quit:ER 
	quit 
	

vbu2 // Trigger BU_NAM - Before Update Customer Name

	type public RecordIRSUPD irsupd
	do irsupd.setAuditFlag(1)
	// Defaulting Customer Last Name
	
	new V
	set V=irsupd.oname
	if '$G(ACN) set ACN=""
	if '$L(irsupd.olnam) do {
		do FBL^XALPHA
		set irsupd.olnam=$E($P(LN,",",1),1,20)
		}

	quit

vbu3 // Trigger BU_OCIF - Before Update for OCIF.

	type public RecordIRSUPD irsupd
	do irsupd.setAuditFlag(1)
	new DATA,XCIF
	if irsupd.ocif=irsupd.ocif.oldVal!(irsupd.ocif="") quit 
	set XCIF=irsupd.ocif
	if 'Db.isDefined("CIF","XCIF") do Runtime.setErrMSG("IRSUPD",7575) quit:ER 
	set irsupd.otin=Db.getOneRow("TAXID","CIF","XCIF")
	set irsupd.oname=Db.getOneRow("NAM","CIF","XCIF")
	quit 
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordIRSUPD irsupd

	set X = irsupd.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	set X = irsupd.ftype if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FTYPE", vRM) quit
	if irsupd.miscseq.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MISCSEQ", vRM) quit
	set X = irsupd.bseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BSEQ", vRM) quit
	set X = irsupd.ccode if 'X.isNull(),'Db.isDefined("STBLIRSCHG","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
	set X = irsupd.obseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("OBSEQ", vRM) quit
	if irsupd.ocif.length()>12 set vRM = $$^MSG(1076,12) do vdderr("OCIF", vRM) quit
	if irsupd.olnam.length()>20 set vRM = $$^MSG(1076,20) do vdderr("OLNAM", vRM) quit
	if irsupd.oname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ONAME", vRM) quit
	if irsupd.otin.length()>11 set vRM = $$^MSG(1076,11) do vdderr("OTIN", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRSUPD","MSG",979,"IRSUPD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordIRSUPD irsupd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("TJD").exists() set vux("TJD") = vx("TJD")
	if vx("FTYPE").exists() set vux("FTYPE") = vx("FTYPE")
	if vx("MISCSEQ").exists() set vux("MISCSEQ") = vx("MISCSEQ")
	if vx("BSEQ").exists() set vux("BSEQ") = vx("BSEQ")
	do vkey(1) set voldkey = irsupd.tjd_","_irsupd.ftype_","_irsupd.miscseq_","_irsupd.bseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = irsupd.tjd_","_irsupd.ftype_","_irsupd.miscseq_","_irsupd.bseq // Copy new keys into object
	type RecordIRSUPD vnewrec = irsupd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("IRSUPD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordIRSUPD irsupd

	if vux("TJD").exists() set irsupd.tjd = vux("TJD").piece("|",i)
	if vux("FTYPE").exists() set irsupd.ftype = vux("FTYPE").piece("|",i)
	if vux("MISCSEQ").exists() set irsupd.miscseq = vux("MISCSEQ").piece("|",i)
	if vux("BSEQ").exists() set irsupd.bseq = vux("BSEQ").piece("|",i)
	quit
