STFFILE(RecordSTFHOST stfhost, String vpar, Boolean vparNorm) // STFHOST - Host Store and Forward File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (30)             06/27/2007
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = stfhost.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(stfhost,.vxins(),10,"|")
	if %O = 1 quit:'stfhost.isChanged()  do AUDIT^UCUTILN(stfhost,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String STFSEQ = stfhost.stfseq
	type String TRSEQ = stfhost.trseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("STFSEQ").exists()!vx("TRSEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("STFHOST",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("STFHOST","STFSEQ = :stfhost.stfseq and TRSEQ = :stfhost.trseq") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String STFSEQ
	type public String TRSEQ

	type RecordSTFHOST stfhost = Db.getRecord("STFHOST","STFSEQ=:STFSEQ,TRSEQ=:TRSEQ")
	if (%ProcessMode = 2) do {
		do stfhost.setMode(2)

		do STFFILE(stfhost,vpar)
	}
	else  do VINDEX(stfhost)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSTFHOST stfhost

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("STFHOST","STFSEQ = :stfhost.stfseq and TRSEQ = :stfhost.trseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(stfhost,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^STFHOST(vobj(stfhost,-3),vobj(stfhost,-4),n)=vobj(stfhost,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(stfhost,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(stfhost,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^STFHOST(vobj(stfhost,-3),vobj(stfhost,-4),n)=vobj(stfhost,n)
			#ENDBYPASS
		}

	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.stfhost) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordSTFHOST stfhost
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^STFHOST(vobj(stfhost,-3),vobj(stfhost,-4),n)) quit:n=""  if '$D(vobj(stfhost,n)),$D(^STFHOST(vobj(stfhost,-3),vobj(stfhost,-4),n))#2 set vobj(stfhost,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSTFHOST stfhost

	if 'vkeychg.get(),stfhost.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.stfhost)                  // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^STFHOST(vobj(stfhost,-3),vobj(stfhost,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSTFHOST stfhost

	// Type local variables for access keys for defaults
	type public String STFSEQ
	type public String TRSEQ

	if stfhost.primary.isNull() set stfhost.primary = 0    // primary
	quit


vreqn // Validate required data items

	type public RecordSTFHOST stfhost

	if stfhost.primary.isNull() do vreqerr("PRIMARY") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSTFHOST stfhost

	if stfhost.stfseq.isNull() do vreqerr("STFSEQ") quit
	if stfhost.trseq.isNull() do vreqerr("TRSEQ") quit

	if 'vobj(stfhost,-100,10,"").order().isNull() do {
		if vx("PRIMARY").exists(),stfhost.primary.isNull() do vreqerr("PRIMARY") quit
	}
		if vx("PRIMARY").exists(),stfhost.primary.isNull() do vreqerr("PRIMARY") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STFHOST","MSG",1767,"STFHOST."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - AFTER_DELETE

	type public RecordSTFHOST stfhost

	/*
	   ---------- Revision History -----------------------------------------

	   03/12/02 - YURKOVICG - 49298
		      Changed "if 'rs.isEmpty()" to "if rs.isEmpty()" to reflect
		      proper logic when deciding whether to delete STF records.

	   03/06/00 - JOYNER - 36638
		      convert to psl

	   ---------------------------------------------------------------------
	*/
	
	/*
	 If after this delete there are no more TRSEQ entries left
	 then delete the STFHSEQ, and STFHOST2 records.
	*/

	new ER,RM,NET,STFSEQ
	type ResultSet rs
	type RecordACN acn

	set STFSEQ=stfhost.stfseq
	set rs=Db.select("TRSEQ","STFHOST","STFSEQ=:STFSEQ")
	if rs.isEmpty() do {				// YURKOVICG - 49298
		do Db.delete("STFHSEQ","STFSEQ=:STFSEQ")
		do Db.delete("STFHOST2","STFSEQ=:STFSEQ")
		}

	/*
	 Check the current STF sequence number in STFHOST2. If it does
	 not exist then the value of TRNET must be subtracted from
	 ACN.STFNET because this sequence is unposted.
	*/

	set rs=Db.select("STFSEQ","STFHOST2","STFSEQ=:STFSEQ")
	if 'rs.isEmpty() quit	// posted

	set acn=Db.getRecord("ACN",":CID")
	set acn.stfnet=acn.stfnet-TRNET
	do acn.save()
	
	quit

vbd1 // Trigger BEFORE_DELETE - Before Delete

	type public RecordSTFHOST stfhost
	S CID=stfhost.cid
	S TRNET=stfhost.trnet
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSTFHOST stfhost

	if (%O = 2) do vload

	if vobj(stfhost,10).exists() do {

		set X = stfhost.ben if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BEN", vRM) quit
		set X = stfhost.bseamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.BSEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = stfhost.cdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CDT", vRM) quit
		set X = stfhost.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
		set X = stfhost.cmpsav if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.CMPSAV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if stfhost.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		if stfhost.custcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CUSTCD", vRM) quit
		set X = stfhost.dir if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.DIR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = stfhost.endbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.ENDBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if stfhost.etc.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ETC", vRM) quit
		if stfhost.glsc.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GLSC", vRM) quit
		if stfhost.itc.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ITC", vRM) quit
		set X = stfhost.mult if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("MULT", vRM) quit
		if '("01"[stfhost.PRIMARY) set vRM=$$^MSG(742,"L") do vdderr("PRIMARY", vRM) quit
		set X = stfhost.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = stfhost.spr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SPR", vRM) quit
		set X = stfhost.stfefd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STFEFD", vRM) quit
		set X = stfhost.sysbase if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.SYSBASE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if stfhost.tamt.length()>60 set vRM = $$^MSG(1076,60) do vdderr("TAMT", vRM) quit
		if stfhost.tcmt.length()>510 set vRM = $$^MSG(1076,510) do vdderr("TCMT", vRM) quit
		if stfhost.trc.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TRC", vRM) quit
		set X = stfhost.tresref if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("TRESREF", vRM) quit
		set X = stfhost.tsb if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.TSB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = stfhost.udprin if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.UDPRIN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = stfhost.vdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("VDT", vRM) quit
		if stfhost.xhs16.length()>40 set vRM = $$^MSG(1076,40) do vdderr("XHS16", vRM) quit
	}

	if vobj(stfhost,20).exists() do {

		if stfhost.tso.length()>300 set vRM = $$^MSG(1076,300) do vdderr("TSO", vRM) quit
	}

	if vobj(stfhost,30).exists() do {

		set X = stfhost.trnet if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"STFHOST.TRNET"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}
	set X = stfhost.stfseq if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("STFSEQ", vRM) quit
	set X = stfhost.trseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TRSEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("STFHOST","MSG",979,"STFHOST."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordSTFHOST stfhost) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("CID").exists() do vi1(.stfhost)
	}
	do vi1(.stfhost)

	quit
	

vi1(RecordSTFHOST stfhost) // Maintain CID index entries (Account Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = stfhost.cid
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = stfhost.stfseq
	type String v3 = stfhost.trseq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^STFXREF(v1,v2,v3)) do vidxerr("CID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^STFXREF(v1,v2,v3)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CID").exists() set v1=vx("CID").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^STFXREF(v1,v2,v3)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("STFHOST")

	while ds.next() do {
		type RecordSTFHOST stfhost=ds.getRecord("STFHOST")
		if vlist.contains("VINDEX") do VINDEX(.stfhost) quit
		if vlist.contains("CID") do vi1(.stfhost)
	}

	quit


public VIDXBLD1(RecordSTFHOST stfhost, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.stfhost) quit
	if vlist.contains("CID") do vi1(.stfhost)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("STFHOST","MSG",1225,"STFHOST."_di)

	quit


vkchged // Access key changed

	type public RecordSTFHOST stfhost

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("STFSEQ").exists() set vux("STFSEQ") = vx("STFSEQ")
	if vx("TRSEQ").exists() set vux("TRSEQ") = vx("TRSEQ")
	do vkey(1) set voldkey = stfhost.stfseq_","_stfhost.trseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = stfhost.stfseq_","_stfhost.trseq // Copy new keys into object
	type RecordSTFHOST vnewrec = stfhost.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("STFHOST",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSTFHOST stfhost

	if vux("STFSEQ").exists() set stfhost.stfseq = vux("STFSEQ").piece("|",i)
	if vux("TRSEQ").exists() set stfhost.trseq = vux("TRSEQ").piece("|",i)
	quit

VIDXPGM()	quit "STFFILE"	// Location of index program

