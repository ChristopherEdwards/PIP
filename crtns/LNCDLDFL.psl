LNCDLDFL(RecordLNCYCDLD lncycdld, String vpar, Boolean vparNorm) // LNCYCDLD - Loan Cycled Items - Dlr Discnts Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:18 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (34)             11/22/2003
	// Trigger Definition (4)                      03/15/2007
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lncycdld.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(lncycdld,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lncycdld,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lncycdld.cid
	type String TYP = lncycdld.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNCYCDLD",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNCYCDLD","CID = :lncycdld.cid and TYP = :lncycdld.typ") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP

	type RecordLNCYCDLD lncycdld = Db.getRecord("LNCYCDLD","CID=:CID,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do lncycdld.setMode(2)

		do LNCDLDFL(lncycdld,vpar)
	}
	else  do VINDEX(lncycdld)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNCYCDLD lncycdld

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNCYCDLD","CID = :lncycdld.cid and TYP = :lncycdld.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lncycdld)) S ^LNCYC("DLD",vobj(lncycdld,-3),vobj(lncycdld,-4))=vobj(lncycdld)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lncycdld)            // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lncycdld) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNCYCDLD lncycdld

	if vpar["/INDEX/" do VINDEX(.lncycdld)                 // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lncycdld)             // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^LNCYC("DLD",vobj(lncycdld,-3),vobj(lncycdld,-4))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordLNCYCDLD lncycdld

	// Type local variables for access keys for defaults
	type public String CID
	type public String TYP

	if lncycdld.apr.isNull() set lncycdld.apr = 0          // apr
	if lncycdld.pbal.isNull() set lncycdld.pbal = 100      // pbal
	if lncycdld.rcm.isNull() set lncycdld.rcm = 0          // rcm
	quit


vreqn // Validate required data items

	type public RecordLNCYCDLD lncycdld

	if lncycdld.apr.isNull() do vreqerr("APR") quit
	if lncycdld.rcm.isNull() do vreqerr("RCM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNCYCDLD lncycdld

	if lncycdld.cid.isNull() do vreqerr("CID") quit
	if lncycdld.typ.isNull() do vreqerr("TYP") quit

		if vx("APR").exists(),lncycdld.apr.isNull() do vreqerr("APR") quit
		if vx("RCM").exists(),lncycdld.rcm.isNull() do vreqerr("RCM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCDLD","MSG",1767,"LNCYCDLD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNCYCDLD lncycdld
	if 'lncycdld.cid.isNull() set vfkey("^ACN("_""""_lncycdld.cid_""""_","_50_")")="LNCYCDLD(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNCYCDLD lncycdld
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lncycdld.cid") set vERRMSG = $$^MSG(8563,"LNCYCDLD(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("NXADT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete LNCYCDLD

	type public RecordLNCYCDLD lncycdld
	/* 
	---------- Revision History ------------------------------------------ 

	11/18/05 - Satyanas - CR16994            
		   Added the Code to delete the data from the 
		   DAYENDAOAMO table.

	-----------------------------------------------------------------------
	*/

	// To Delete the the data from the DAYENDAOAMO table.

	type public Boolean ER
	
	if Db.isDefined("DAYENDAOAMO","NXADT=:lncycdld.nxadt AND TYP=:lncycdld.typ AND PAYEE=:lncycdld.payee AND PLAN=:lncycdld.plan AND CID=:lncycdld.cid") do { quit:ER
		do Db.delete("DAYENDAOAMO","NXADT=:lncycdld.nxadt AND TYP=:lncycdld.typ AND PAYEE=:lncycdld.payee AND PLAN=:lncycdld.plan AND CID=:lncycdld.cid")
		}
	
	quit

vai1 // Trigger AFTER_INSERT - After Insert LNCYCDLD

	type public RecordLNCYCDLD lncycdld
	/*
	---------- Revision History ------------------------------------------

	03/15/07 - KumarSS - CR 25177
		   Removed Invalid Unicode Characters.

	01/27/07 - SENTHIL J. KUMAR - CR 24983
		   Moved DAYENDAOAMO record creation above %ProcessMode check
		   that was quitting in create mode.  Ensures DAYENDAOAMO
		   records are created properly so the cycled item amortizes.

	10/30/06 - KELLYP - CR 23814
		   Removed the setting of the audit flag for loan column 
		   changes.  This prevents a fatal integ from appearing on
		   the account after an account is opened with financed
		   cycled items and a backdated disbursement is processed.
	
	10/27/06 - KELLYP - CR 23304
		   Added edit checks on beginning/end dates defined in the
		   cycled item's corresponding AOAMO record.  Also removed
		   pre-2003 revision history.
	
	01/21/06 - MBUIM - 19700
	   	   Replaced column aoamo.count with column aoamo.cnt. COUNT 
	   	   is an oracle reserve word and was process issues 
	   	   e.g error returned in DBSLOAD when running function 
	   	   @DDPXFR - manual transfers to FEPS.
	   	      
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
	*/

	type public Boolean ER

	type RecordLN ln = Db.getRecord("LN","CID=:lncycdld.cid",1)

	if %ProcessMode'=2 do { quit:ER
		
		type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP='DLD',PAYEE=:lncycdld.payee,PLAN=:lncycdld.plan",1)
		
		// Payee ended on ~p1
		if (aoamo.pldate),(%SystemDate > aoamo.pldate) do Runtime.setErrMSG("LNCYCDLD","2151",aoamo.pldate.toString()) quit:ER
		
		// Payee does not begin until ~p1
		if (aoamo.pbdate),(%SystemDate < aoamo.pbdate) do Runtime.setErrMSG("LNCYCDLD","2150",aoamo.pbdate.toString()) quit:ER
		
		// Update loan credit limit for insurance premiums
		if lncycdld.amt,lncycdld.pdby do {
			
			type RecordSTBLIPDBY sipdby=Db.getRecord("STBLIPDBY","KEY=:lncycdld.pdby",1)
			
			if 'sipdby.add quit

			// Recalculate payment and disclosure information
			do PROC^LNCYCPRO(.ln)

			set ln.crlmt=ln.crlmt+lncycdld.amt
			set ln.udbal=ln.udbal+lncycdld.amt
			set ln.aoamtorg=ln.aoamtorg+lncycdld.amt
			}
	
		// Update flags in loan record
		set ln.dlrp=1
	
		do ln.save()

		//  Missing required data item ~p1
		if lncycdld.payee.isNull() do Runtime.setErrMSG("LNCYCDLD",1767,"PAYEE") quit:ER 
		if lncycdld.plan.isNull() do Runtime.setErrMSG("LNCYCDLD",1767,"PLAN") quit:ER 
		
		// Update Dealer/Ins/Def Fee User Table COUNT
		set aoamo.cnt=aoamo.cnt+1
		do aoamo.save()
		
		// Create DAENDAOAMO record for cycled item amortizations
		type RecordDAYENDAOAMO daoamo=Db.getRecord("DAYENDAOAMO","NXADT=:lncycdld.nxadt,TYP=:lncycdld.typ,PAYEE=:lncycdld.payee,PLAN=:lncycdld.plan,CID=:lncycdld.cid",1)
		if 'daoamo.getMode() do daoamo.bypassSave()

		}
	
	// Remaining only occurs if in VerifyMode
	if %ProcessMode'=2 quit 
	
	// Verify Dealer Discount and Misc Add-on Information
	if lncycdld.cntr'<lncycdld.term quit 
	if lncycdld.caltd,+lncycdld.caltd=+lncycdld.amt quit 
	if ln.stat'=4 quit 

	// Closed Account with Non-Performing Fee Balance
	if lncycdld.npda'=0 do Runtime.setErrXBAD("LNCYCDLD",94) quit:ER 

	// Closed Account with Deferred Fee Balance
	if lncycdld.amt-lncycdld.caltd-lncycdld.npda do Runtime.setErrXBAD("LNCYCDLD",93) quit:ER 

	quit

vau1 // Trigger AU_NXADT - After Update Next Action Date

	type public RecordLNCYCDLD lncycdld
	/*
	---------- Revision History ------------------------------------------

	12/21/06 - KELLYP - CR 24622
		   Added this new trigger to delete the old DAYENDAOAMO record
		   and create a new one when the Next Action Date on the cycled 
		   item is modified.

	-----------------------------------------------------------------------
	*/

	type Date OLDDT

	set OLDDT = lncycdld.nxadt.oldVal

	do Db.delete("DAYENDAOAMO","NXADT=:OLDDT AND TYP=:lncycdld.typ AND PAYEE=:lncycdld.payee AND PLAN=:lncycdld.plan AND CID=:lncycdld.cid")

	type RecordDAYENDAOAMO daoamo = Db.getRecord("DAYENDAOAMO","NXADT=:lncycdld.nxadt,TYP=:lncycdld.typ,PAYEE=:lncycdld.payee,PLAN=:lncycdld.plan,CID=:lncycdld.cid",1)

	if daoamo.getMode() quit

	do daoamo.bypassSave()

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert LNCYCDLD

	type public RecordLNCYCDLD lncycdld
	/*
								---------- Revision History ------------------------------------------
	
	01/10/06 - KELLYP - CR 24662
		   Modified to remove DAYENDAOAMO record creation.  This is
		   already handled by the after insert trigger.  Also modified
		   to use a scratch variable when appending an "A" onto itrm
		   to prevent the original value from being overwritten and 
		   removed pre-2004 revision history.
	
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
	*/

	/*
	 Calculate insurance premium if not already calculated
	 set defaults if the fields have not been provided
	*/
	
	type public Boolean ER
	type public Number FA

	type Date ENDDT,NJD
	type Number FANP,NP
	type String FRE,STOP
	
	if lncycdld.typ.isNull()!lncycdld.payee.isNull()!lncycdld.plan.isNull() quit
	
	type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP='DLD',PAYEE=:lncycdld.payee,PLAN=:lncycdld.plan",1)

	if 'aoamo.getMode() quit	

	type RecordLN ln=Db.getRecord("LN","CID=:lncycdld.cid",1)	
		
	set lncycdld.caltd=0
	set lncycdld.cntr=0

	if lncycdld.freq.isNull() set lncycdld.freq=aoamo.fre
	if lncycdld.freq.isNull() set lncycdld.freq=ln.dist1fre
	if 'lncycdld.rate.isNull(),aoamo.met'="ACT" set lncycdld.rate=""
	if lncycdld.rate.isNull(),aoamo.met="ACT" set lncycdld.rate=ln.irn
	if 'lncycdld.apr set lncycdld.apr=aoamo.apr
	if 'lncycdld.rcm set lncycdld.rcm=aoamo.rcm
	if 'lncycdld.dcp set lncycdld.dcp=aoamo.dcp
	
	if lncycdld.nxadt.isNull() do {
	
		set NJD=(ln.odt).nextFreqDate(lncycdld.freq) quit:ER
		set lncycdld.nxadt=NJD
		}
	if lncycdld.drcp.isNull() set lncycdld.drcp=aoamo.drcp
	if lncycdld.drcdd.isNull() set lncycdld.drcdd=aoamo.drcdd
	if lncycdld.pdby.isNull() set lncycdld.pdby=aoamo.paidby
	
	if lncycdld.itrm.isNull() set lncycdld.itrm=ln.trm 
	if lncycdld.itrm.isNull() quit 
	
	set FRE = lncycdld.itrm
	
	if (FRE.length()-(+FRE).length())=1 set FRE = FRE_"A"
	
	//  ~p1
	set NJD=ln.odd.nextFreqDate(FRE) if ER.get() do Runtime.setErrMSG("LNCYCDLD",3333,"RM") quit:ER 
	set ENDDT=NJD 
	set STOP=""
	
	for NP=1:1 set NJD=(ln.odd).nextFreqDate(lncycdld.freq) quit:ER  do { quit:STOP 
		if NJD'<ENDDT set STOP=1 quit 
		set ln.odd=NJD
		}
	if ER.get() quit 
	set FA=NP#1 
	
	set FANP=$S(FA:NP+.5,1:NP)
	set NP=FANP.roundDec(0,"","")
	set lncycdld.term=NP

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNCYCDLD lncycdld

	set X = lncycdld.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if lncycdld.typ.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TYP", vRM) quit
	set X = lncycdld.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycdld.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
	set X = lncycdld.cacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.CACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.caltd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.CALTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.cbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.CBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.cipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.CIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.cntr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CNTR", vRM) quit
	set X = lncycdld.cseq if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CSEQ", vRM) quit
	set X = lncycdld.dcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.DCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycdld.drc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DRC", vRM) quit
	set X = lncycdld.drcdd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DRCDD", vRM) quit
	set X = lncycdld.drcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.DRCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCDLD]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	if lncycdld.itrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ITRM", vRM) quit
	set X = lncycdld.lsadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSADT", vRM) quit
	set X = lncycdld.npda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.NPDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.nsip if 'X.isNull(),'Db.isDefined("STBLNSIP","X") set vRM = $$^MSG(1485,X) do vdderr("NSIP", vRM) quit
	set X = lncycdld.nxadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NXADT", vRM) quit
	set X = lncycdld.nyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.NYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.oipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.OIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycdld.payee.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYEE", vRM) quit
	set X = lncycdld.pbal if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.PBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.pdby if 'X.isNull(),'Db.isDefined("STBLIPDBY","X") set vRM = $$^MSG(1485,X) do vdderr("PDBY", vRM) quit
	if lncycdld.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = lncycdld.ramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.RAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycdld.RCM) set vRM=$$^MSG(742,"L") do vdderr("RCM", vRM) quit
	set X = lncycdld.reb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCDLD.REB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycdld.ryfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCDLD]RYFRE",0) if 'vRM.get().isNull() do vdderr("RYFRE", vRM) quit
	set X = lncycdld.ryld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYLD", vRM) quit
	set X = lncycdld.rynd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYND", vRM) quit
	set X = lncycdld.term if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("TERM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCDLD","MSG",979,"LNCYCDLD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNCYCDLD lncycdld)	//LNCYCDLD Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lncycdld)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lncycdld)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lncycdld)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lncycdld)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}

	quit


vj1(RecordLNCYCDLD lncycdld)	// HIST_DELETE  Table HIST  History for deletion of the record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycdld.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5084","DLD",lncycdld.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNCYCDLD lncycdld)	// HIST_INSERT  Table HIST  History for creation of new record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycdld.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$LNAMOJRN^LNFUNCS("DLD",lncycdld.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNCYCDLD lncycdld) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NXADT").exists()!vx("PAYEE").exists()!vx("PLAN").exists() do vi1(.lncycdld)
		if vx("PAYEE").exists()!vx("PLAN").exists() do vi2(.lncycdld)
	}
	do vi1(.lncycdld)
	do vi2(.lncycdld)

	quit
	

vi1(RecordLNCYCDLD lncycdld) // Maintain AOAMODLD index entries (Dealer Discount - Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lncycdld.nxadt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lncycdld.typ
	type String v4 = lncycdld.payee
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycdld.plan
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = lncycdld.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("DLD",vobj(lncycdld,-3),vobj(lncycdld,-4)))#2,'$D(^DAYEND(v1,"AOAMO",v3,v4,v5,v6)) do vidxerr("AOAMODLD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^DAYEND(v1,"AOAMO",v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NXADT").exists() set v1=vx("NXADT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("PAYEE").exists() set v4=vx("PAYEE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v5=vx("PLAN").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^DAYEND(v1,"AOAMO",v3,v4,v5,v6)
	#ENDBYPASS
	quit

vi2(RecordLNCYCDLD lncycdld) // Maintain LNXAMOD index entries (Payee, Plan, CID X-Ref)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lncycdld.typ
	type String v3 = lncycdld.payee
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = lncycdld.plan
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycdld.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^LNCYC("DLD",vobj(lncycdld,-3),vobj(lncycdld,-4)))#2,'$D(^XREF("LNCYCDLD",v2,v3,v4,v5)) do vidxerr("LNXAMOD")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("LNCYCDLD",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PAYEE").exists() set v3=vx("PAYEE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v4=vx("PLAN").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("LNCYCDLD",v2,v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNCYCDLD")

	while ds.next() do {
		type RecordLNCYCDLD lncycdld=ds.getRecord("LNCYCDLD")
		if vlist.contains("VINDEX") do VINDEX(.lncycdld) quit
		if vlist.contains("AOAMODLD") do vi1(.lncycdld)
		if vlist.contains("LNXAMOD") do vi2(.lncycdld)
	}

	quit


public VIDXBLD1(RecordLNCYCDLD lncycdld, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lncycdld) quit
	if vlist.contains("AOAMODLD") do vi1(.lncycdld)
	if vlist.contains("LNXAMOD") do vi2(.lncycdld)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNCYCDLD","MSG",1225,"LNCYCDLD."_di)

	quit


vkchged // Access key changed

	type public RecordLNCYCDLD lncycdld

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = lncycdld.cid_","_lncycdld.typ // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lncycdld.cid_","_lncycdld.typ // Copy new keys into object
	type RecordLNCYCDLD vnewrec = lncycdld.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNCYCDLD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNCYCDLD lncycdld

	if vux("CID").exists() set lncycdld.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set lncycdld.typ = vux("TYP").piece("|",i)
	quit

VIDXPGM()	quit "LNCDLDFL"	// Location of index program

