COMQRY		/*
	PROCEDURE:  COMQRY
	ORIG: Vince Arpa - 09 JUL 1998
	DESC: Commission Plan Query Compiler
 
	---- Comments --------------------------------------------------------
	This routine will compile two routines to be used during Commission
	processing  The compiled routines are COMQRY1 and COMPFT1.

	LIBRARY:
		. EXT	External call to compile  both routines
		. PFT	Compile only COMPFT1
		. QRY	Compile only COMQRY1

	
	---- Revision History ------------------------------------------------
        	 
	10/26/05 - SPR - CR17008
			Agent/Commission - General DBI3 system area cleanup.	
			
	----------------------------------------------------------------------
	*/
	
	// I18N=OFF

	
	do EXT
	
	quit
	

EXT	// Public - External line tag to compile querys, portfolios, and routines

	type Public Boolean ER=0

	do PFT				// Compile portfolios into COMPFT1
	if 'ER do QRY   	// Compile querys into COMQRY1 

	quit


	
PFT	// Public - External line tag to compile commission portfolio data

	type Public Boolean ER=0
	type Public String %MSKC,%MSKD,QRYLIST,QUERY,RM,%UserID
	
	type String CODE(),TAB
	
	catch error {
		do ZE^UTLERR
		set ER=1
		}

	set TAB=$CHAR(9)
	
	do addcode("public COMPFT1"_TAB_"// Commission Plan Query (Portfolio) Compiled Program")
	do addcode(TAB_"// Last compiled:  "_$$DAT^%ZM(%CurrentDate,$G(%MSKD))_" "_$$TIM^%ZM_" - "_$G(%UserID))
	do addcode("")
	do addcode(TAB_"// THIS IS A COMPILED ROUTINE.  Compiled by procedure COMQRY")
	do addcode("")
	do addcode(TAB_"quit   // Cannot access from top")
	
	// Loop through Commission Portfolio User Table and find all queries that are defined.
	
	type ResultSet rs1=Db.select("DISTINCT QUERY","UTBLCOMPFT","QUERY IS NOT NULL")

	while rs1.next() set QRYLIST(rs1.getCol("QUERY"))=""
	
	type ResultSet rs2=Db.select("DISTINCT WPQRYNAM","UTBLWPFTQ","WPQRYNAM IS NOT NULL")
	
	while rs2.next() set QRYLIST(rs2.getCol("WPQRYNAM"))=""
	
	quit:'QRYLIST.data()
	
	set QUERY=""

	for  set QUERY=QRYLIST(QUERY).order() quit:QUERY=""  do bldquery(QUERY) quit:ER

	if 'ER do BLDRTN(.CODE,"COMPFT1")
	
	quit


QRY	// Public - External line tag to compile commission query data

	type Public Boolean ER=0
	type Public String %MSKC,%MSKD,RM,%UserID
	
	type String CODE(),QRYLIST(),QUERY,TAB
	
	catch error {
		do ZE^UTLERR
		set ER=1
		}

	set TAB=$CHAR(9)
	
	do addcode("public COMQRY1(String QUERY)"_TAB_"// Commission Plan Query Compiled Program")
	do addcode(TAB_"// Last compiled:  "_$$DAT^%ZM(%CurrentDate,$G(%MSKD))_" "_$$TIM^%ZM_" - "_$G(%UserID))
	do addcode("")
	do addcode(TAB_"// THIS IS A COMPILED ROUTINE.  Compiled by procedure COMQRY")
	do addcode("")
	
	// Loop through Commission Portfolio User Table and find all queries that are defined.
	
	type DbSet ds=Db.selectDbSet("UTBLCOMPLN","QUERY IS NOT NULL OR INTQUERY IS NOT NULL")
	
	quit:ds.isEmpty()

	while ds.next() do {
		type RecordUTBLCOMPLN compln=ds.getRecord("UTBLCOMPLN")
		if compln.query'="" set QRYLIST(compln.query)=""
		if compln.intquery'="" set QRYLIST(compln.query)=""
		}

	set QUERY=""
	for  set QUERY=QRYLIST(QUERY).order() quit:QUERY=""  do addcode(TAB_"if QUERY="""_QUERY_""" quit $$"_QUERY)
		
	do addcode("")
	do addcode(TAB_"quit")
	do addcode("")
	
	set QUERY=""
	for  set QUERY=QRYLIST(QUERY).order() quit:QUERY=""  do bldquery(QUERY) quit:ER
	
	if 'ER do BLDRTN(.CODE,"COMQRY1")
	
	quit


bldquery(String QUERY)	// Build query code

	type Public Boolean ER
	type Public String RM
	type Number N
	type String PSLOBJ,PSLQRY,RECTYP,TAB,TABLE
	
	if QUERY.length()>8 do { quit
		set ER=1
		// Query exceeds length of 8
		set RM=$$^MSG(3037,$$^MSG(7165),8)
		}
	
	set TAB=$CHAR(9)

	// Convert code line into PSL code for loading necessary objects and build query.

	do addcode("")
	do addcode("public "_QUERY_"()"_TAB_"// Compiled Query")
	do addcode("")
	do addcode(TAB_"type Public Number CID")
	do addcode(TAB_"type Public Number TJD")
	do addcode("")

	do ^UCQRYBLD(QUERY,,,.PSLOBJ,.PSLQRY)
	quit:ER
	
	// Validate tables
	set N=""
	for  set N=PSLOBJ(N).order() quit:N=""  do { quit:ER
		
		
		set TABLE=PSLOBJ(N).piece("|",1)
		if '("/ACN/CIF/DEP/LN/ZCIF/ZDEP/ZLN/"[("/"_TABLE_"/")) do {
			set ER=1
			// Invalid table name - ~p1
			set RM=$$^MSG(1484,TABLE)
			// Query
			set RM=RM_".  "_$$^MSG(7165)_" = "_QUERY
			}
		}
	quit:ER
	
	set N=""
	// Insert lines to instantiate new objects
	for  set N=PSLOBJ(N).order() quit:N=""  do addcode(TAB_PSLOBJ(N,1))
	
	// Insert the query lines
	for  set N=PSLQRY(N).order() quit:N=""  do {
		do addcode(TAB_"if "_PSLQRY(N))
		do addcode(TAB_"else  quit 0")
		}

	do addcode(TAB_"quit 1")

	do addcode("")

	quit 

	
addcode(String LINE)	// Add new line to CODE arry

	type Public String CODE()

	set CODE(CODE("").order(-1)+1)=LINE
	
	quit
        
        
BLDRTN(String CODE(),	// Private - Build compiled routine
       String NAME)

	type Public Boolean ER
	type Public String %MSKC,RM
	type Number N
	type String CMPERR

	do BUILDRTN^UCGM(.CODE,NAME,.CMPERR)
	if CMPERR.exists() do {
		set N=""

		for  set N=CMPERR(N).order() quit:N=""  do {
			if 'ER set ER=1,RM=CMPERR(N)
			write CMPERR(N),!
		}
	}
	
	//Completed at ~p1
	if 'ER set ER="W",RM=$$^MSG(591,$$TIM^%ZM(%CurrentTime,$G(%MSKC)))

	quit 
	

vSIG()	quit "60206^36142^Renga SP^4975"	// Signature - LTD^TIME^USER^SIZE
