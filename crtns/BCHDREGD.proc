BCHDREGD //Batch BCHDEPREGD - Regulation D Processing
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHDEPREGD Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHDEPREGD")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHDEPREGD") quit
 do JOBMGR^BCHUTL(%FN,"BCHDEPREGD",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHDEPREGD")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHDEPREGD","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHDEPREGD",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHDEPREGD",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHDEPREGD","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHDEPREGD",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	new dep
	type RecordDEP dep
	set dep=Db.getRecord("DEP","CID")

	// Define variables

	set MMDA4=dep.mmda4
	do CALCPRIOR(.dep)
	do SDIRND(%SystemDate,.dep)
	if $G(ER)  do EXC quit
	quit
	
CALCPRIOR(RecordDEP dep)	//Reset prior period buckets
	
 	set dep.mmdac12=dep.mmdac11
	set dep.mmdac11=dep.mmdac10
	set dep.mmdac10=dep.mmdac9
	set dep.mmdac9=dep.mmdac8
	set dep.mmdac8=dep.mmdac7
	set dep.mmdac7=dep.mmdac6
	set dep.mmdac6=dep.mmdac5
	set dep.mmdac5=dep.mmdac4
	set dep.mmdac4=dep.mmdac3
        set dep.mmdac3=dep.mmdac2
        set dep.mmdac2=dep.mmdac1
        set dep.mmdac1=dep.mmda1
	set dep.mmda1=0
	set dep.mmdat12=dep.mmdat11
	set dep.mmdat11=dep.mmdat10
	set dep.mmdat10=dep.mmdat9
	set dep.mmdat9=dep.mmdat8
	set dep.mmdat8=dep.mmdat7
	set dep.mmdat7=dep.mmdat6
	set dep.mmdat6=dep.mmdat5
	set dep.mmdat5=dep.mmdat4
	set dep.mmdat4=dep.mmdat3
	set dep.mmdat3=dep.mmdat2
	set dep.mmdat2=dep.mmdat1
	set dep.mmdat1=dep.mmda2
	set dep.mmda2=0

	quit
	
SDIRND(EFD,RecordDEP dep)	// Calculate next regulation change date - set new Dayend and account file

	S NJD=$$NJD^UFRE(EFD,MMDA4) quit:ER	
	set dep.mmda3=NJD
	do dep.bypassSave()

	quit

	
EXC	// Log error in exception file
	// Regulation D Processing 
	new DESC
	set DESC=$$^MSG(7115)_"|1"
	do LOG^UTLEXC($T(+0),"*",DESC,$G(CID),$G(%ZTSEQ),$G(ET),$S($G(CID):+$G(BAL),1:""))
	kill ET,%ZTSEQ
	quit


 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	do SOURCE^BCHSOURC("BOFF","REGD",.%UserID,.BRCD,.UCLS)
	if ER set %BatchExit=1
	// Regulation D teller not defined
	if $G(BRCD)="",$G(%UserID)="" set ER=1,RM=$$^MSG("3974") quit
	
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("DISTINCT CID","DEP","DEP.MMDA3=:TJD AND DEP.REGD='5'")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	do SOURCE^BCHSOURC("BOFF","REGD",.%UserID,.BRCD,.UCLS)
	set TPD=%SystemDate

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
