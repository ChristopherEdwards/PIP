DBSINDXF(RecordDBTBL8 dbtbl8, String vpar, Boolean vparNorm) // DBTBL8 - Index File Definition Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             05/04/2004
	// Trigger Definition (2)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dbtbl8.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(dbtbl8,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dbtbl8,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String %LIBS = dbtbl8.%libs
	type String FID = dbtbl8.fid
	type String INDEXNM = dbtbl8.indexnm

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("%LIBS").exists()!vx("FID").exists()!vx("INDEXNM").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DBTBL8",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DBTBL8","%LIBS = :dbtbl8.%libs and FID = :dbtbl8.fid and INDEXNM = :dbtbl8.indexnm") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String %LIBS
	type public String FID
	type public String INDEXNM

	type RecordDBTBL8 dbtbl8 = Db.getRecord("DBTBL8","%LIBS=:%LIBS,FID=:FID,INDEXNM=:INDEXNM")
	if (%ProcessMode = 2) do {
		do dbtbl8.setMode(2)

		do DBSINDXF(dbtbl8,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDBTBL8 dbtbl8

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DBTBL8","%LIBS = :dbtbl8.%libs and FID = :dbtbl8.fid and INDEXNM = :dbtbl8.indexnm") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set dbtbl8.LTD = %CurrentDate
		set dbtbl8.TIME = %CurrentTime
		set dbtbl8.USER = %UserName
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dbtbl8))  S ^DBTBL(vobj(dbtbl8,-3),8,vobj(dbtbl8,-4),vobj(dbtbl8,-5))=vobj(dbtbl8)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDBTBL8 dbtbl8


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^DBTBL(vobj(dbtbl8,-3),8,vobj(dbtbl8,-4),vobj(dbtbl8,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordDBTBL8 dbtbl8

	// Type local variables for access keys for defaults
	type public String %LIBS
	type public String FID
	type public String INDEXNM

	if dbtbl8.nullflg.isNull() set dbtbl8.nullflg = 0      // nullflg
	if dbtbl8.savflg.isNull() set dbtbl8.savflg = 0        // savflg
	if dbtbl8.upcase.isNull() set dbtbl8.upcase = 0        // upcase
	quit


vreqn // Validate required data items

	type public RecordDBTBL8 dbtbl8

	if dbtbl8.idxdesc.isNull() do vreqerr("IDXDESC") quit
	if dbtbl8.nullflg.isNull() do vreqerr("NULLFLG") quit
	if dbtbl8.savflg.isNull() do vreqerr("SAVFLG") quit
	if dbtbl8.upcase.isNull() do vreqerr("UPCASE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDBTBL8 dbtbl8

	if dbtbl8.%libs.isNull() do vreqerr("%LIBS") quit
	if dbtbl8.fid.isNull() do vreqerr("FID") quit
	if dbtbl8.indexnm.isNull() do vreqerr("INDEXNM") quit

		if vx("IDXDESC").exists(),dbtbl8.idxdesc.isNull() do vreqerr("IDXDESC") quit
		if vx("NULLFLG").exists(),dbtbl8.nullflg.isNull() do vreqerr("NULLFLG") quit
		if vx("SAVFLG").exists(),dbtbl8.savflg.isNull() do vreqerr("SAVFLG") quit
		if vx("UPCASE").exists(),dbtbl8.upcase.isNull() do vreqerr("UPCASE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL8","MSG",1767,"DBTBL8."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDBTBL8 dbtbl8
	if 'dbtbl8.fid.isNull() set vfkey("^DBTBL("_""""_dbtbl8.%libs_""""_","_1_","_""""_dbtbl8.fid_""""_")")="DBTBL8(%LIBS,FID) -> DBTBL1"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDBTBL8 dbtbl8
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DBTBL1",":dbtbl8.%libs,:dbtbl8.fid") set vERRMSG = $$^MSG(8563,"DBTBL8(%LIBS,FID) -> DBTBL1") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After delete

	type public RecordDBTBL8 dbtbl8
	/*
	-----Revision History--------------------------------------------------
	04/29/04 - RussellDS - CR9172
		   Cleaned up variable scoping
		   
	10/20/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/

	/*
	Check super type file
	Remove this index from descendant files
	*/
	
	type String ZFID,IDXNM,SUBFID
	
	set ZFID=dbtbl8.fid
								set IDXNM=dbtbl8.indexnm
	 
								type ResultSet rs=Db.select("FID","DBTBL1","%LIBS='SYSDEV' AND PARFID=:ZFID")
	if rs.isEmpty() quit
	while rs.next() do { 
																set SUBFID=rs.getCol(1)
																do Db.delete("DBTBL8","%LIBS='SYSDEV' AND FID=:SUBFID AND INDEXNM=:IDXNM")
																}
	quit 

vai1 // Trigger AFTER_UPDATE - After insert/update

	do vau1

	quit

vau1 // Trigger AFTER_UPDATE - After insert/update

	type public RecordDBTBL8 dbtbl8
	/*
	Super type file
	Copy this index to descendants
	*/
	
	/*
	-----Revision History--------------------------------------------------
	04/29/04 - RussellDS - CR9172
		   Cleaned up variable scoping

	*/
	
	type String ZFID,IDXNM,subfid
	
	set ZFID=dbtbl8.fid
	set IDXNM=dbtbl8.indexnm

	// Copy super type index information into sub type file

	type RecordDBTBL8 sub=dbtbl8.copy()
 	
	type ResultSet rs=Db.select("FID","DBTBL1","%LIBS='SYSDEV' AND PARFID=:ZFID") 
	if rs.isEmpty() quit
	while rs.next() do {
        	set subfid=rs.getCol(1)
        	set sub.fid=subfid
        	do sub.save()
		}
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDBTBL8 dbtbl8

	if dbtbl8.%libs.length()>12 set vRM = $$^MSG(1076,12) do vdderr("%LIBS", vRM) quit
	if dbtbl8.fid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("FID", vRM) quit
	if dbtbl8.indexnm.length()>16 set vRM = $$^MSG(1076,16) do vdderr("INDEXNM", vRM) quit
	if dbtbl8.global.length()>40 set vRM = $$^MSG(1076,40) do vdderr("GLOBAL", vRM) quit
	if dbtbl8.idxdesc.length()>29 set vRM = $$^MSG(1076,29) do vdderr("IDXDESC", vRM) quit
	set X = dbtbl8.ltd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LTD", vRM) quit
	if '("01"[dbtbl8.NULLFLG) set vRM=$$^MSG(742,"L") do vdderr("NULLFLG", vRM) quit
	if dbtbl8.orderby.length()>120 set vRM = $$^MSG(1076,120) do vdderr("ORDERBY", vRM) quit
	if dbtbl8.parfid.length()>8 set vRM = $$^MSG(1076,8) do vdderr("PARFID", vRM) quit
	if dbtbl8.qry1.length()>60 set vRM = $$^MSG(1076,60) do vdderr("QRY1", vRM) quit
	if dbtbl8.qry2.length()>60 set vRM = $$^MSG(1076,60) do vdderr("QRY2", vRM) quit
	if '("01"[dbtbl8.SAVFLG) set vRM=$$^MSG(742,"L") do vdderr("SAVFLG", vRM) quit
	set X = dbtbl8.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
	if '("01"[dbtbl8.UPCASE) set vRM=$$^MSG(742,"L") do vdderr("UPCASE", vRM) quit
	if dbtbl8.user.length()>20 set vRM = $$^MSG(1076,20) do vdderr("USER", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DBTBL8","MSG",979,"DBTBL8."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordDBTBL8 dbtbl8

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("%LIBS").exists() set vux("%LIBS") = vx("%LIBS")
	if vx("FID").exists() set vux("FID") = vx("FID")
	if vx("INDEXNM").exists() set vux("INDEXNM") = vx("INDEXNM")
	do vkey(1) set voldkey = dbtbl8.%libs_","_dbtbl8.fid_","_dbtbl8.indexnm // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dbtbl8.%libs_","_dbtbl8.fid_","_dbtbl8.indexnm // Copy new keys into object
	type RecordDBTBL8 vnewrec = dbtbl8.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DBTBL8",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDBTBL8 dbtbl8

	if vux("%LIBS").exists() set dbtbl8.%libs = vux("%LIBS").piece("|",i)
	if vux("FID").exists() set dbtbl8.fid = vux("FID").piece("|",i)
	if vux("INDEXNM").exists() set dbtbl8.indexnm = vux("INDEXNM").piece("|",i)
	quit
