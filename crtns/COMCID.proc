COMCID
	/*
	   ORIG: ARPAV - 06/30/98

	   DESC: Commission Processing - Single Account
	   The purpose of this routine is to calculate the commission amount
	   a given account, agent, commission plan, and effective date.  The
	   commissions will be calculated based on the commission plan setup
	   in the user table UTBLCOMPLN.  All commission amounts will be
	   calculated and returned in the currency of the account being
	   evaluated.

	   EXAMPLE:
	   D EXT^COMCID(CPLAN,CID,AGENT,EFD,INDEX,CRATE)

	---- Revision History ------------------------------------------------

	07/28/06 - KELLYP - CR 22048
		Modified INCR section to eliminate PRECEDENCE warning.

	11/09/05 - SPR - CR17008
		Modified section EXT to consider the commission plan 
		currency code which is not defined in the commission plan.
		The commission plan currency code is required only if a 
		commission amount is defined on the commission plan.
	
	----------------------------------------------------------------------
	*/

	quit


Public EXT(CPLAN,CID,AGENT,TEFD,INDEX,CRATE,AGNCYIND,AGNCYRT)	// External Line Tag
	/*
	Arguments:
	   . CPLAN - Commission Plan	/TYP=T/REQ/MECH=VAL
	    This variable defines the commission plan being used
	    in the  calculations.  The details of the plan will be
	    loaded in from the table UTBLCOMPLN.

	   . CID - Account Number	/TYP=N/REQ/MECH=VAL

	   . AGENT - Agent		/TYP=N/NOREQ/MECH=VAL
	    This variable is the number which defines the agent.
	    This will be used to determine the settlement
	    account which the commission amount will be posted.

	   . EFD - Effective Date	/TYP=D/NOREQ/MECH=VAL
	    The effective date will be used to determine which
	    average or end of month balances will be used.

	   . INDEX - Commission Index	/TYP=T/NOREQ/MECH=REF
	    The commission index which will actually be
	    used to calculate the commissions.

	   . CRATE - Commission Rate	/TYP=N/NOREQ/MECH=REF
	    The commission rate which was used to calculate
	    commissions

	Returns:
	   . COMAMT  - Calculated Commission Amount
	    The amount of the commission that was calculated.
	    The COMAMT field will actually return two values.
	    Piece one will be the calculated commission amount
	    for the agent.  Piece two will be the calculated
	    commission amount for the agency.
	*/

	new AGNCYAMT,CAMT,CBAL,COMAMT,MON,XBAL

	type RecordACN acn=Db.getRecord("ACN","CID")
	type RecordAGENT agent=Db.getRecord("AGENT","AGENT")
	type RecordAGENTCOM agentcom=Db.getRecord("AGENTCOM","AGENT,CPLAN")
	type RecordCOMPLNCID compln=Db.getRecord("COMPLNCID","CID,CPLAN")
	type RecordUTBLCOMPLN ucompln=Db.getRecord("UTBLCOMPLN","CPLAN")

	// If this a nonperforming account, quit
	if acn.cls="L",$$NONPERF^LNCDI(CID) quit 0

	// Load in current month's data
	set MON=$$MON^SCADAT(TEFD,1)

	set AGNCYRT=""
	set AGNCYIND=""

	if agent.agnum'="" do {

		new AGENT

		set AGENT=agent.agnum

		type RecordAGENTCOM agentcom=Db.getRecord("AGENTCOM","AGENT,CPLAN")

		set AGNCYRT=agentcom.agcyrate
		set AGNCYIND=agentcom.agyindex
		}

	set CBAL=0

	/*
	  If the reset rate review period is set and the next change date
	  has passed, then call subroutine to evaluate the new rate
	*/
	if ucompln.rrp do RATEREV(.agentcom,.compln,.ucompln)

	// Initialize commission amount
	set CAMT=$S(ucompln.camt'="":ucompln.camt,1:0)
	
	// Commission plan ~p1 has no currency code specified
	if (CAMT>0),ucompln.crcd="" set ER=1,ET=$$^MSG(5164,CPLAN) D EXC Q 0
	
	/*
	  If there is a commission amount, check for conversion.  Convert to
	  account's currency code
	*/
	if CAMT,acn.crcd'=ucompln.crcd do {
		new EXCAMT
		do EXC^CRCDUTL(ucompln.crcd,acn.crcd,CAMT,1,1,00)
		set CAMT=$$^SCARND(EXCAMT,0,,acn.crcd)
		}

	// Determine Balance Type
	set XBAL=$G(TAMT)
	if ucompln.baltyp=0 set XBAL=$$AVB(.acn,0)
	if ucompln.baltyp=1 set XBAL=$$AVB(.acn,1)
	if ucompln.baltyp=2 set XBAL=$$AVB(.acn,2)
	if ucompln.baltyp=3 set XBAL=$$MEBAL(.acn,-1)
	if ucompln.baltyp=4 set XBAL=$$QEBAL(.acn,-1)
	if ucompln.baltyp=5 set XBAL=acn.mebal12
	if ucompln.baltyp=6 set XBAL=$$MEBAL(.acn,-1)-$$MEBAL(.acn,-2)
	if ucompln.baltyp=7 set XBAL=$$QEBAL(.acn,-1)-$$QEBAL(.acn,-4)

	/*
 	 If this transaction is an effective dated transaction, set
 	 either the rate or the index according to the commissions
 	 that have already been paid.
	*/
	if TEFD<%SystemDate do EFD(.agent)

	// Check for an expected growth table.
	if ucompln.gtbl'="" set CBAL=$$EXPGR(.acn,ucompln.gtbl,XBAL,XBAL)
	else  set CBAL=XBAL

	/*
 	 If a commission routine is defined, then call the routine to
 	 get the commission amount.  The routine should set COMAMT as the
 	 commission amount.
	*/
	if ucompln.fcall'="" do {
		new PGM
		set PGM=ucompln.fcall
		if PGM'["^" set PGM="^"_PGM
		do @PGM
		set CAMT=CAMT+COMAMT
		}
	if ER quit 0

	// Check for a predefined Commission Calculation formula
	if ucompln.comcalc'="" do COMCALC(CPLAN)

	// Get Rate or Commission Amount
	if '$G(CRATE) do CRATE(.acn,.agentcom,.compln,.ucompln)

	/*
 	 If a rate is returned, then check for a service margin and apply
 	 Commission margins apply as follows:
 		ucompln.cmarg:		Commission Margin on the plan level
 		agentcom.margin:	Service Margin on the agent level
 		agentcom.smargin:	Supplimental Margin on the agent level
 		compln.margin:		Service Margin on the account level
	*/
	set CRATE=CRATE+ucompln.cmarg+agentcom.margin+compln.margin+agentcom.smargin

	// Calculate commission based on rate and balance
	if CRATE set CAMT=CAMT+(CRATE*CBAL*.01)

	// Calculate the agency commission amount if one exists for the agent
	set AGNCYAMT=0

	if agent.agnum'="" do AGNCYCAL(.acn,.agentcom)

	if CAMT+AGNCYAMT=0 quit 0

	set CAMT=$$^SCARND(CAMT,0,,agent.crcd)
	set AGNCYAMT=$$^SCARND(AGNCYAMT,0,,agent.crcd)
	set COMAMT=CAMT_"|"_AGNCYAMT_"|"_CRATE

	quit COMAMT


EXPGR(RecordACN acn,GTBL,AMT,XBAL)	// Load commission balance from expected growth table
	/*
	   Description:
	   This routine will look up the balance passed in as XBAL and
	   return the corresponding expected growth balance as defined
	   in the expected growth table.

	   Arguments:
	   AMT :  Temporary balance used to determine the
	          commission calculation balance CBAL.
	   GTBL : Expected Growth Table
	   XBAL : Balance

	   Returns:
	   CBAL : Commission Calculation Balance
	*/

	new TBAL

	type RecordUTBLEXPGRTHT expgrtht=Db.getRecord("UTBLEXPGRTHT","GTBL")

	set TBAL=0

	if acn.crcd'=expgrtht.crcd set AMT=$$MC(AMT,acn.crcd,expgrtht.crcd)

	type ResultSet rs=Db.select("EOPBAL,EXPGRTH","UTBLEXPGRTH","GTBL=:GTBL AND EOPBAL NOT >:XBAL")

	while rs.next() do {

		if AMT>rs.getCol(1) set TBAL=AMT-rs.getCol(1)-rs.getCol(2)
		}

	if acn.crcd'=expgrtht.crcd set TBAL=$$MC(TBAL,expgrtht.crcd,acn.crcd)

	quit TBAL


EFD(RecordAGENT agent)	// Effective Dated Transaction
	/*
	 This subroutine will search through the dayend commission posting
	 global for any commissions that were posted for this account.
	*/

	type ResultSet rs=Db.select("RATE,INDEX","DAYENDCOMPST","PSTDT=:TEFD AND AGENT=:AGENT AND CPLAN=:CPLAN AND CID=:CID")

	while rs.next() do {
		set INDEX=rs.getCol(2)
		if INDEX="" set CRATE=rs.getCol(1)
		}

	/*
	  Check for a transaction from the agency.  If there is one, then get
 	  the rate from the agency.
	*/
	if agent.agnum="" quit

	new AGNCY

	set AGNCY=agent.agnum

	type ResultSet rs1=Db.select("RATE,INDEX","DAYENDCOMPST","PSTDT=:TEFD AND AGENT=:AGNCY AND CPLAN=:CPLAN AND CID=:CID")

	while rs1.next() do {
		set AGNCYIND=rs.getCol(2)
		if AGNCYRT="" set CRATE=rs.getCol(1)
		}

	quit


CRATE(RecordACN acn,RecordAGENTCOM agentcom,RecordCOMPLNCID compln,RecordUTBLCOMPLN ucompln)
	/*
	  Check to see which level the rate or index is defined on.
	  Check the account level first, agent second, and plan last.
	*/

	set CRATE=0

	// If the index is already valued, use that index.
	if ucompln.rcindx'="" do RATECOMP(.acn,.ucompln) quit
	if $G(INDEX)'="" do INDEX(.acn,INDEX,CBAL,TEFD) quit
	if compln.ovrrate'="" set CRATE=compln.ovrrate quit
	if compln.ovrindex'="" do INDEX(.acn,compln.ovrindex,CBAL,TEFD) set INDEX=compln.ovrindex quit
	if agentcom.ovrrate'="" set CRATE=agentcom.ovrrate quit
	if agentcom.ovrindex'="" do INDEX(.acn,agentcom.ovrindex,CBAL,TEFD) set INDEX=agentcom.ovrindex quit
	if ucompln.cindex'="" do INDEX(.acn,ucompln.cindex,CBAL,TEFD) set INDEX=ucompln.cindex quit

	set INDEX=""

	// otherwise, set it to the plan rate
	set CRATE=ucompln.rate

	quit


RATECOMP(RecordACN acn,RecordUTBLCOMPLN ucompln)	// Compare Rates
	/*
	Description:
		This routine will calculate the commission rate using
		the difference between a linked index rate and an
		account nominal interest rate.

	Returns:
		. CRATE -  Commission  Rate
			This calculated commission rate will be used as the
			commission rate in the commission calculation for
			the commission plan.
	*/

	new COMPRATE,IRN,RCINDX

	set RCINDX=ucompln.rcindx

	type RecordUTBLRCINDX urcindx=Db.getRecord("UTBLRCINDX","RCINDX")

	if urcindx.rtindx="" quit

	// Comparison rate
	set COMPRATE=0
	set IRN=acn.irn

	if ucompln.fsav do FIXSAV(.acn,urcindx.rtindx,.COMPRATE)
	if 'ucompln.fsav do VARSAV(.acn,urcindx.rtindx,.COMPRATE,.IRN)

	// Comparison rate - nominal int/div rate - Cost percentage / 2
	set CRATE=(COMPRATE-IRN-urcindx.cpct)/2

	// Add Rate Floor for commission rate
	set CRATE=CRATE+urcindx.rtf

	// Up to Rate Ceiling
	if CRATE>urcindx.rtc set CRATE=urcindx.rtc

	// Comm rate expressed as monthly rate
	set CRATE=CRATE/12

	quit


FIXSAV(RecordACN acn,RTINDX,COMPRATE)	// Fixed Savings
	/*
	Arguments:
		. RTINDX - Rate Comparison Index          /TYP=T/REQ/MECH=VAL
			This variable defines the rate index used to calculate
			the commission rate.

	Returns:
		. COMPRATE - Comparison Rate
			This variable defines average business-day Comparison
			Rate for prior month.
	*/

	new PAR,RATE

	set PAR("INDEX")=RTINDX

	do CTL^UINDX(.acn,acn.odt,0,.PAR)
	if ER quit

	// Comparison rate
	set COMPRATE=RATE

	quit


VARSAV(RecordACN acn,RTINDX,COMPRATE,IRN)     // Variable Savings
	/*
	Arguments:
		. RTINDX - Rate Comparison Index          /TYP=T/REQ/MECH=VAL
			This variable links the rate index, Rate Floor, and
			Rate Ceiling to the commission plan.

	Returns:
		. COMPRATE - Comparison Rate
			This variable defines average business-day Comparison
			Rate for prior month.

		. IRN - Nominal Interest /Dividend Rate
			This varibale defines the average business-day Nominal
			Interest/Dividend Rate for prior month.
	*/
	new BEGDAT,BUSDAY,BUSDAYS,DAT,DAY,DAYRATE,ENDAT,FMIRN,FMIRNDT,LBD,PAR,RATE,TEFD,TOTRATE

	// Prior month
	set DAT=$$ADDMJD^SCADAT(%SystemDate,-1)
	// Beg. of prior month
	set BEGDAT=$$BOMJD^SCADAT(DAT,1)
	// End of prior month
	set ENDAT=$$EOMJD^SCADAT(DAT,1)

	set (BUSDAYS,TOTRATE)=0
	set (LBD,TEFD)=BEGDAT-1
	set PAR("INDEX")=RTINDX

	for  do { if ER!(TEFD'<ENDAT) quit

		set TEFD=TEFD+1
		set TEFD=$$NBD^UNBD(TEFD,1,0,acn.nbdc)
		if ER quit

		// Out of range
		if TEFD>ENDAT quit

		set BUSDAY(TEFD)=""
		set BUSDAYS=BUSDAYS+1

		do CTL^UINDX(.acn,TEFD,0,.PAR)
		if ER quit

		set TOTRATE=TOTRATE+RATE
		set LBD=TEFD
		}

	// Average business-day comparison rate for prior month
	set COMPRATE=TOTRATE/BUSDAYS

	type ResultSet rs=Db.select("TJD,ITC,TAMT,EFD,TCMT","HIST","CID=:CID AND TJD NOT <:BEGDAT","TSEQ DESC")

	if rs.isEmpty() quit

	new AMT,DI,FID,ITC,TCMT

	while rs.next() do { quit:ER

		set TEFD=rs.getCol(4)

		if TEFD="" set TEFD=rs.getCol(1)

		// Ignore transactions before beg date
		if TEFD<BEGDAT quit

		// Ignore transactions after end date
		if TEFD>ENDAT quit

		set ITC=rs.getCol(2)
		set AMT=rs.getCol(3)
		set TCMT=rs.getCol(5)

		// Not a file maintenance entry
		if AMT,ITC'="" quit

		set FID=$P($P(TCMT,"]",1),"[",2)
		if FID["," set FID=$P(FID,",",2)

		// Only concerned about DEP file maint
		if FID'="DEP" quit

		set DI=$P($P(TCMT,":",1),"]",2)

		// Only concerned about IRN file maint
		if DI'="IRN" quit

		// Record int rate change on next bus day
		set FMIRN(TEFD)=$P(TCMT,":",2,3)
		}

	set TOTRATE=0
	set DAY=""
	for  set DAY=$O(BUSDAY(DAY)) quit:DAY=""  do {

		set FMIRNDT=$O(FMIRN(DAY))

		// If future IRN change, use old value from future change record
		if FMIRNDT'="" set DAYRATE=+FMIRN(FMIRNDT)

		else  do {
			// If no future IRN change, check for current or prior
			set FMIRNDT=$O(FMIRN(DAY+1),-1)

			// If current or prior IRN change exists, use new value
			// from ocurrent or prior change record
			if FMIRNDT'="" set DAYRATE=$P(FMIRN(FMIRNDT),":",2)

			// If no current or prior IRN change, use current IRN
			if FMIRNDT="" set DAYRATE=IRN
			}

		set TOTRATE=TOTRATE+DAYRATE
		}

	// Average business-day nominal int/div rate for prior month
	set IRN=TOTRATE/BUSDAYS

	quit


INDEX(RecordACN acn,IND,CBAL,TEFD)	// Given the index and the balance, return the rate
	/*
	   Description:
	   Given the commission index and the balance, this routine will
	   return the rate associated with the tiered balance in the
	   commission index.

	   Arguments:
	   IND : Commission Index
	   CBAL : Commission Balance
	   EFD : Effective Date

	   Returns:
	   CRATE : The rate associated with the tier level.
	   COMAMT : The predefined commission amount
	*/

	new TMPEFD,TMPXBAL,XBAL

	type RecordUTBLCOMINDX ucomindx=Db.getRecord("UTBLCOMINDX","IND")

	// Check for multicurreccy
	set XBAL=CBAL

	if acn.crcd'=ucomindx.crcd set XBAL=$$MC(CBAL,acn.crcd,ucomindx.crcd)

	set (CRATE,COMAMT)=0
	set TMPEFD=TEFD+.1
	set TMPXBAL=XBAL+.00001

	type ResultSet rs=Db.select("AMT,RATE","UTBLCOMINDX1","CINDEX=:IND AND EFD<:TMPEFD AND MTIER<:TMPXBAL","EFD DESC,MTIER DESC")

	if rs.isEmpty() quit

	if rs.next()

	// fixed amount
	if ucomindx.comtype do { quit

		if ucomindx.indtyp="I" do {
			// blocked "do" to preserve $T
			set COMAMT=$$INCR(IND,XEFD,XBAL,1)
			}
		else  set COMAMT=rs.getCol(1)

		if acn.crcd'=ucomindx.crcd set COMAMT=$$MC(COMAMT,ucomindx.crcd,acn.crcd)

		set CAMT=$G(CAMT)+COMAMT
		}

	// rate
	if ucomindx.indtyp="I" set CRATE=$$INCR(IND,XEFD,XBAL,0) quit

	set CRATE=+rs.getCol(2)

	quit


INCR(IND,XEFD,XBAL,FXD)	// Calculate incremental rate or amount
	/*
	   Description:
	         Given the commission index and the balance, this extrinsic
	         routine will return either the blended rate associated with
	         the tiered balance in the commission index, or the accumulation
	         of the fixed amount values.

	   Arguments:
	         IND : Commission Index
	         XEFD : Effective Date
		 XBAL : Commission Balance
		 FXD : Fixed amount flag

	   $$Returns:
	         The blended rate caluclated for the amount
	   -OR-
	         The commission amount
	*/

	new AMT,BASE,COMANT,CUMAMT,CURDEC,FRSTPASS,PTIER,XCAMT,XRATE

	set FXD=$G(FXD)
	set CURDEC=$$curdec^CRCDUTL(BCRCD)
	set BASE=10**CURDEC
	set DECMIN=1/BASE
	set (XRATE,XCAMT,CUMAMT,COMAMT)=0
	set FRSTPASS=1

	type ResultSet rs=Db.select("MTIER,AMT,RATE","UTBLCOMINDX1","CINDEX=:IND AND EFD=:XEFD")

	while rs.next() do { quit:CUMAMT=XBAL

		if FRSTPASS do {
			set PTIER=rs.getCol(1)
			if FXD set COMAMT=rs.getCol(2)
			else  set XRATE=rs.getCol(3)
			set FRSTPASS=0
			}

		if XBAL'<rs.getCol(1) set AMT=rs.getCol(1)-PTIER-DECMIN

		else  do { if FXD quit
			set AMT=XBAL-CUMAMT
			if FXD set CUMAMT=XBAL
			}

		set CUMAMT=CUMAMT+AMT
		set PTIER=rs.getCol(1)

		if FXD set COMAMT=COMAMT+rs.getCol(2) quit

		set XCAMT=XCAMT+(AMT*XRATE)
		set XRATE=+rs.getCol(3)
		}

	// quit with the commission amount if using fixed amounts
	if FXD quit COMAMT

	// apply the remaining amount at the last rate
	if (XBAL-CUMAMT) set XCAMT=XCAMT+((XBAL-CUMAMT)*XRATE)

	// return the rate
	if 'XCAMT!('XBAL) quit 0
	quit $$^SCARND(XCAMT/XBAL,,,,5)


AGNCYCAL(RecordACN acn,RecordAGENTCOM agentcom)	// Agency Calculation Routine

	// First get the rate at the agency level.
	if AGNCYRT'="" set AGNCYAMT=AGNCYRT*CBAL*.01

	else  if AGNCYIND'="" do {
		new SAVRATE

		set SAVRATE=CRATE

		do INDEX(.acn,AGNCYIND,CBAL,%SystemDate)

		set AGNCYRT=CRATE
		set AGNCYAMT=AGNCYRT*CBAL*.01
		set CRATE=SAVRATE
		}

	//  If there is no amount, quit
	if 'AGNCYAMT quit

	/*
 	 Now check the skip payment flag.  If it is true, then pay the
 	 full amount to the agency.  If not, calculate the difference
 	 and pay only the difference to the agency.
	*/
	if 'agentcom.skppmt do {
		new DIFF

		set DIFF=AGNCYAMT-CAMT
		if DIFF<0 set DIFF=0
		set AGNCYAMT=DIFF
		}

	quit


COMCALC(CPLAN)	// Calculate Commission based on predefined formula.
	/*
	   All of the commission calculatyions have been compiled into the
	   routine ^COMRTN1.M.  The line tag to call is the same as the
	   commission plan being evaluated.  This subprogram calls that
	   routine and sets the variable camt to the computed amount.
	*/

	do ^COMRTN1(CPLAN)

	set CAMT=CAMT+COMAMT

	quit


MEBAL(RecordACN acn,OFF)	// Returns the month end balance for the month of the offset

	new ADJMON

	// Get the julian date for the previous month, 0 is December
	set ADJMON=MON+OFF

	if ADJMON=0 quit acn.mebal12
	if ADJMON=1 quit acn.mebal1
	if ADJMON=2 quit acn.mebal2
	if ADJMON=3 quit acn.mebal3
	if ADJMON=4 quit acn.mebal4
	if ADJMON=5 quit acn.mebal5
	if ADJMON=6 quit acn.mebal6
	if ADJMON=7 quit acn.mebal7
	if ADJMON=8 quit acn.mebal8
	if ADJMON=9 quit acn.mebal9
	if ADJMON=10 quit acn.mebal10
	if ADJMON=11 quit acn.mebal11
	if ADJMON=12 quit acn.mebal12

	quit ""


QEBAL(RecordACN acn,OFF)	// Returns the quarter end balance for the quarter of the offset

	new ADJMON,QMON

	// Get the julian date for the month
	set ADJMON=MON+OFF
	if ADJMON=0 set ADJMON=12

	// This returns the month of the last quarter, 0 is December
	set QMON=(ADJMON\3)*3
	if QMON=0 set QMON=12

	if QMON=3 quit +acn.mebal3
	if QMON=6 quit +acn.mebal6
	if QMON=9 quit +acn.mebal9
	if QMON=12 quit +acn.mebal12

	quit 0


AVB(RecordACN acn,OPT)	// Average Balance
	/*
	   Returns the average balance for the previous month, quarter, and year
	   opt values:
	   0 - return avb for previous month
	   1 - return avb for previous quarter
	   2 - return avb for previous year
	*/

	new AVB,DAT,DDBAL,DIM,XMON

	if OPT=0 do {
		// Get the julian date for the desired month
		set XMON=MON-1
		if XMON=0 set XMON=12

		if $G(DIMPREV)>0 set DIM=DIMPREV quit

		set DAT=$$ADDMJD^SCADAT(TEFD,-1)

		// Set the month and the days in that month
		set DIM=$$NODM^SCADAT(DAT,1)
		}

	if OPT=1 do {
		/*
		 Get the previous quarter end month and days in that month
		 based on the current month.  The quarter end months are:
		 March, June, September, December
		*/
		if MON>9 set DIM=30 set XMON=9 quit
		if MON>6 set DIM=30 set XMON=6 quit
		if MON>3 set DIM=31 set XMON=3 quit
		set DIM=31 set XMON=12 quit
		}

	if OPT=2 do {
		set XMON=12
		set DIM=31
		}

	// Get the actual dollar days balance and calculate the average balance
	if XMON=1 set DDBAL=acn.ddbal1
	if XMON=2 set DDBAL=acn.ddbal2
	if XMON=3 set DDBAL=acn.ddbal3
	if XMON=4 set DDBAL=acn.ddbal4
	if XMON=5 set DDBAL=acn.ddbal5
	if XMON=6 set DDBAL=acn.ddbal6
	if XMON=7 set DDBAL=acn.ddbal7
	if XMON=8 set DDBAL=acn.ddbal8
	if XMON=9 set DDBAL=acn.ddbal9
	if XMON=10 set DDBAL=acn.ddbal10
	if XMON=11 set DDBAL=acn.ddbal11
	if XMON=12 set DDBAL=acn.ddbal12

	// Dollar Days Balance / Days in Month
	set AVB=DDBAL/DIM
	if AVB'=0 set AVB=$$^SCARND(AVB,0,,acn.crcd)

	quit AVB


RATEREV(RecordAGENTCOM agentcom,RecordCOMPLNCID compln,RecordUTBLCOMPLN ucompln)	// Review rate at account level
	/*
	   If the rate at the account level or agent level is different from
	   the rate at the plan level and the rate review is set to be
	   changed, then update the rate at the account level.
	*/

	new NJD,NEWRATE

	// Quit if change is not due
	if (compln.ncngdt'<%SystemDate)!(compln.ncngdt="") quit

	// Quit if there are no rates
	if ucompln.rate="",agentcom.ovrrate="" quit

	if agentcom.ovrrate'="" set NEWRATE=agentcom.ovrrate
	else  set NEWRATE=ucompln.rate

	// Quit if there is no change
	if NEWRATE=compln.rate quit

	// Get the next change date
	set NJD=$$NJD^UFRE(compln.ncngdt,ucompln.rrfre)
	if ER quit

	// Override Rate
	set compln.ovrrate=NEWRATE

	// Last Rate change Date
	set compln.lcngdt=%SystemDate

	// Next Rate Change Date
	set compln.ncngdt=NJD

	// File the changes
	do compln.bypassSave()

	quit


MC(AMT,BCRCD,CRCD)	// Multicurrency Calculation
	/*
	   This routine will convert the given amount in the given currency
	   code (BCRCD) to an amount in another given currency code (CRCD).
	   The routine will return the new amount.

	   Arguments:
	          AMT : The amount to be exchanged.
	          BCRCD : The currency that the amount is currently in.
	          CRCD: The currency code that the amount will be converted to.

	   Returns:
	          NAMT : The converted amount.
	*/

	new NAMT

	if BCRCD=CRCD quit AMT

	do EXC^CRCDUTL(BCRCD,CRCD,AMT,1,1,00)

	set NAMT=$$^SCARND(EXCAMT,0,,CRCD)

	quit NAMT


Public TOTTBP(AGENT,CPLAN)
	/*
	   This function will return the total unposted amount from the dayend
	   commission posting file for a given plan and agent.  The amount
	   returned will be in the currency code of the agent.
	*/

	new AMT,TOTAMT

	type RecordAGENT agent=Db.getRecord("AGENT","AGENT")

	set TOTAMT=0

	// Loop through the dayend compst file and get each record
	type ResultSet rs=Db.select("AMT,CRCD","DAYENDCOMPST","AGENT=:AGENT AND CPLAN=:CPLAN AND POSTED NOT=1")

	if rs.isEmpty() quit TOTAMT

	while rs.next() do {

		set AMT=rs.getCol(1)

		if rs.getCol(2)'=agent.crcd set AMT=$$MC(AMT,rs.getCol(2),agent.crcd)

		set TOTAMT=TOTAMT+AMT
		}

	quit TOTAMT
	
EXC	// File Dayend exceptions
       
        do LOG^UTLEXC($T(+0),"*",ET,$G(LCID),$G(%ZTSEQ),ET,"")
        quit      

vSIG()	quit "60477^65443^Pat Kelly^20785"	// Signature - LTD^TIME^USER^SIZE
