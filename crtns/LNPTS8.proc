public	LNPTS8(RecordLN ln,
	       RecordTTX ttx)	// Miscellaneous Charge Assessment

	/*
	       ORIG: Tom Locke

	---- Revision History ------------------------------------------------

	05/25/06 - DESHPANDE S K - CR 20748
		   Replaced public variable %TRNMODE with call to 
		   ttx.getStoredValue("TranMode").
		   
	03/06/06 - TITOVE - CR 19949
		   Modified PRBLN to call POST^LNTRB with correct arguments
		   and make sure CRCD is set.

	02/26/06 - TITOVE - CR 19733
		   . Modified PRBLN to call GL^LNPTSU with correct arguments.
		   . Re-wrote logic in CURRCID to get data with one select.
		   . Removed PENFLG from PEN section - not used anywhere.
		   . Brought up to standards and removed old revision history.

	08/16/05 - KELLYP - CR 16906
		   Modified INIT section and removed set lnfee.setAuditFlag(1)
		   change from previous fix.  This generates file maintenance
		   entries in HIST for all of the LNFEE record changes which
		   should not be filed during transaction processing.  Also
		   removed pre-2003 revision history.

	05/02/05 - Georges - CR13136
		   Modified INIT section to set lnfee.setAuditFlag(1).
		   	
	*/

	// Not an adjustment transaction - pass Adjustment flag set to 0
	do INIT(.ln, .ttx, 0)

	quit


INIT(RecordLN ln,
     RecordTTX ttx,
     Number CTL)	// Initialization

	type public Number CUVAR2, ZAMT
	
	type Number FIN1, TAX1, TAXYEOFF, YEOFF
	type String FEE, FEEPLN, ICPA, TSO, UTSO

	if 'CUVAR2.exists() set CUVAR2 = %SystemDate
	
	if %EffectiveDate.isNull() set %EffectiveDate = %SystemDate

	type RecordUTBLICPA utblicpa = Db.getRecord("UTBLICPA", "KEY = :ln.icpa")
	
	set ICPA = utblicpa.prio	// Priorities

	do OUT^UTSO(.UTSO, ttx.tso)
	
	if UTSO("LNFEEIN").get().isNull() do {
		
		if 'UTSO("LNFEE").get().isNull() set UTSO("LNFEEIN") = UTSO("LNFEE").piece(":",1)_":" quit
		
		// The "*" special character used as a Fee Type normally indicates a
		// misc. charge posted to the account that has no associated fee plan
		set UTSO("LNFEEIN") = "*:"
		}
		
	set FEE = UTSO("LNFEEIN").piece(":",1)
	
	set UTSO("LNFEEIN").piece(":",2) = ZAMT
	set UTSO("LNFEE") = UTSO("LNFEEIN")
	
	do IN^UTSO(.UTSO, .TSO)
	
	set ttx.tso = TSO

	do GL^LNPTSU(.ttx, ZAMT, 6)
	
	// Miscellaneous Charge Due
	if ICPA.extract(5) set ln.balint = ln.balint + ZAMT

	do %HSEQ^LNPTSU(.ttx, "*#"_FEE_"#"_ZAMT)
	
	do HSEQ^LNPTSU(.ttx)

	type RecordLNFEE lnfee = Db.getRecord("LNFEE", "CID = :ln.cid, FEETYP=:FEE", 1)

	set lnfee.feerem = lnfee.feerem + ZAMT 

	type RecordLNFEEP lnfeep = Db.getRecord("LNFEEP", "FEETYP = :FEE", 1)

	set FIN1 = $$BOFY^SCADAT(CUVAR2, 1) 
	set TAX1 = $$BOTY^SCADAT(CUVAR2, 1)

	/*
	   If effective date is in current year, update current year bucket.
	   If in first prior year, update prior year bucket.
	   If before, update neither bucket.
	   Always update assessed life buckets.
	*/

	set YEOFF = CUVAR.YEOFF
	set TAXYEOFF = CUVAR.TAXYEOFF

	if (YEOFF)&(%EffectiveDate < FIN1)&(CUVAR2 '> (FIN1 + YEOFF - 1)) do {
	
		set lnfee.aspy = lnfee.aspy + ZAMT
		
		// Deductible
		if lnfeep.ded set ln.dafpy = ln.dafpy + ZAMT
		else  set ln.ndafpy = ln.ndafpy + ZAMT
		}
	else  do {
		
		set lnfee.asytd = lnfee.asytd + ZAMT
		
		// Deductible
		if lnfeep.ded set ln.dafyd = ln.dafyd + ZAMT
		else  set ln.ndafyd = ln.ndafyd + ZAMT
		}
	// Tax year; Fee Assessment - Prior Year and Year To Date
	if (TAXYEOFF)&(%EffectiveDate < TAX1)&(CUVAR2 '> (TAX1 + TAXYEOFF - 1)) do {
	
		set lnfee.aspty = lnfee.aspty + ZAMT
		
		// Deductible
		if lnfeep.ded set ln.dafpty = ln.dafpty + ZAMT
		else  set ln.ndafpty = ln.ndafpty + ZAMT
		}
	else  do {
		
		set lnfee.astytd = lnfee.astytd + ZAMT
		
		// Deductible
		if lnfeep.ded set ln.daftytd = ln.daftytd + ZAMT
		else  set ln.ndaftytd = ln.ndaftytd + ZAMT
		}

	set lnfee.aslf = lnfee.aslf + ZAMT
 
 	do lnfee.save()

	/*
	  If directed to do so by fee plan, create bill record for assessment.
	  Do not proceed if adjustment transactions.  We only want to create bill
	  if new assessment.  Not only it ensures that users have a means to 
	  either create a bill (assess) or not (adjust), but also it ensures 
	  that the bill record maintenance process (which creates adjustment
	  transactions) will not update a bill within the LNUFS* series routines
	  and here when the transaction is posted.
	*/

	if lnfeep.aprf,'CTL  do {
		
		// Do not proceed if billing-based fee unless on-line transaction
		if (lnfeep.amth = 3) , (ttx.getStoredValue("TranMode") '= 1) quit

		// Do not proceed if assessment will be satisfied immediately.
		// ([LNFEEP]CFWA flag is turned on.)
		if lnfeep.cfwa quit

		/*
		   Proceed only if element is in the payment string. This is
		   true if either:
		   1. We find the element in the "0" level of the payment file
		   2. It is a fee linked to a fee found in the "0" level
		*/
		if '$$CHECKFEE(.lnfeep, ln.cid, FEE) quit
		
		// All conditions met to create or update a payment record			
		do NEWBIL^LNUBIL1(.ln, %EffectiveDate, FEE, ZAMT)
		}
		
	do FILE(.ln, .ttx, .lnfeep, FEE, CTL) 

	quit

CHECKFEE(RecordLNFEEP lnfeep,
	 Number CID,
	 String FEE)
	 
	// Scan through payment elements' acronyms in LNBIL0 table,
	// to determine whether our FEE is among them

	type Boolean Q = 0
	type Number N
	type String LNBIL0, PMTACR

	// If this is a linked fee, check for basis fee
	if lnfeep.lfee set FEE = lnfeep.basis

	type RecordLNBIL0 lnbil0 = Db.getRecord("LNBIL0", "CID = :CID", 1)
	
	if 'lnbil0.getMode() quit Q

	set LNBIL0 = $$ELEMENT^BILFUNCS(.lnbil0).translate($C(9),"|")

	// Determine whether or not appropriate fee is in string
	for N = 1:1:LNBIL0.length("|") do { quit:Q
		
		set PMTACR = LNBIL0.piece("|",N)
		
		if (PMTACR.piece("#",1) = FEE) set Q = 1
		}

	quit Q
	

FILE(RecordLN ln,
     RecordTTX ttx,
     RecordLNFEEP lnfeep,
     String FEE,
     Number CTL)
     
     	type public Number ZAMT

	type Boolean FLG =  +ttx.tso.getSub("DAYEND","~","#")
	type String TSO, UTSO
	
	// Remove DAYEND flag from transaction.  Don't need it anymore.
	if FLG do {

		set TSO = ttx.tso
		do OUT^UTSO(.UTSO, TSO)
		
		kill UTSO("DAYEND")
		
		set TSO = ""
		do IN^UTSO(.UTSO, .TSO)

		set ttx.tso = TSO
		}

	if 'CTL do {
	
		do LNKFEE^LNBLDE(ln.cid)
		
		do BASIS^LNFEEU(.ln,.ttx,ln.cid,%EffectiveDate,ZAMT,FEE,110_FLG,,,,ttx.etc)
		}

	set ZAMT = 0
	
	// Problem Account Open Indicator
	if (ln.paoi = 1) do PRBLN(.ln,.ttx,.lnfeep)

	quit


public	PEN(RecordLN ln,
	    RecordTTX ttx)	// Assess misc charge for early prin payments

	// Pass Adjustment flag set to 0
	do INIT(.ln, .ttx, 0)

	quit
	

public	ADJ(RecordLN ln,
	    RecordTTX ttx)	// Fee adjustment entrance line tag

	// Pass Adjustment flag set to 1
	do INIT(.ln, .ttx, 1)
	
	quit
	

PRBLN(RecordLN ln,
      RecordTTX ttx,
      RecordLNFEEP lnfeep)
      
	// Apply Fee to linked current sub-account for problem loan
	
	type public Cache %CACHE()
	type public Number TAMT, ZAMT
	type public String FEEPLN

	type Number CURRCID, OCID, TYPE
	type String CRCD, GLSC, LTC, OTC, SUBTLO, TSO, TSOVAL

	set CURRCID = $$CURRCID(ln.cid,%EffectiveDate)
   
	quit:'CURRCID

	// Proper general ledgers are defined on the fee plan.  Do not apply
	// to current sub-account.
	if lnfeep.glfr ! lnfeep.glfi ! lnfeep.glfdi quit
	
	set FEEPLN = CUVAR.PLFEE

      	// Problem sub-account fee plan must be defined in institution variables
	if FEEPLN.isNull() do Runtime.setErrMSG("CUVAR",4376) quit

	set OTC = CUVAR.FEEICRTC
	
	// Misc credit for fees
	if OTC.isNull() set OTC = "MCR"

	set TSOVAL = FEEPLN_":"_TAMT
	
	type RecordLN xln = Db.getRecord("LN", "CID = :CURRCID")

	set TYPE = xln.type
	set GLSC = xln.glsc
	set CRCD = xln.crcd
	
	if CRCD.isNull() set CRCD = %SystemCurrency

	type RecordPRODCTL prodctl = %CACHE("PRODCTL").getRecord("PRODCTL", "TYPE = :TYPE")

	// DRTRMFI - Misc Fee Increase Adj
	set LTC = prodctl.drtrmfi

	// DRTRMI - Misc Income
	if LTC.isNull() set LTC = prodctl.drtrmi
	
	// Misc Income GL
	type RecordUTBLGLSC utblglsc = Db.getRecord("UTBLGLSC", "GLSC = :GLSC")
	
	set OCID = utblglsc.lglf

	if 'TSO.exists() set TSO = ""
	
	set TSO = $$FIELDIN^UTSO(TSO, "LNFEEIN", TSOVAL)

	if %UserStation.exists() set SUBTLO = %UserStation
	else  set SUBTLO = $$TLO^UTLO

	do POST^LNTRB(.ttx, CURRCID, LTC, TAMT, %EffectiveDate, SUBTLO, TSO, , CRCD)

	set ZAMT = TAMT

	// Update proper transaction amount piece for fees
	do GL^LNPTSU(.ttx, ZAMT, 6)

	// Offsetting transaction
	do POST^LNTRB(.ttx, OCID, OTC, TAMT, %EffectiveDate, SUBTLO, TSO, , CRCD)
	
	type RecordLNFEE lnfee = Db.getRecord("LNFEE","CURRCID,FEEPLN")

	set lnfee.feerem = lnfee.feerem + ZAMT 
	set lnfee.asytd = lnfee.asytd + ZAMT
	set lnfee.aslf = lnfee.aslf + ZAMT 
	set lnfee.astytd = lnfee.astytd + ZAMT
	
	do lnfee.save()

	set ZAMT = 0

	quit
	

public	CURRCID(Number CID,
	        Date %EffectiveDate)	

	/*
	   Returns linked sub-account (problem loan account to apply the fee) if:
	   - its Problem Account Status is Current Problem Sub-Account
	   - its Account Status is Open
	   - Effective Date is more or equal to Original Disbursement Date 
	*/
	type Number CURRCID = 0

	type ResultSet rs = Db.select("CID", "LN", "CVCID=:CID AND PCIDSTAT=1 AND STAT=0 AND ODD<:%EffectiveDate+1")

	if rs.next() set CURRCID = rs.getCol("CID")

	quit CURRCID
	

vSIG()	quit "60457^32856^Shriram Deshpande^8862"	// Signature - LTD^TIME^USER^SIZE
