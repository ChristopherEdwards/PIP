SWFILE(RecordSWIFT swift, String vpar, Boolean vparNorm) // SWIFT - SWIFT Messages Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:20 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (295)            01/17/2006
	// Journal File Definition (6)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = swift.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(swift,.vxins(),10,"|")
	if %O = 1 quit:'swift.isChanged()  do AUDIT^UCUTILN(swift,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("SWDIRECT").exists()!vx("TRREFNO").exists()!vx("MSG").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("SWIFT",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("SWIFT","SWDIRECT = :swift.swdirect and TRREFNO = :swift.trrefno and MSG = :swift.msg") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String SWDIRECT
	type public String TRREFNO
	type public String MSG

	type RecordSWIFT swift = Db.getRecord("SWIFT","SWDIRECT=:SWDIRECT,TRREFNO=:TRREFNO,MSG=:MSG")
	if (%ProcessMode = 2) do {
		do swift.setMode(2)

		do SWFILE(swift,vpar)
	}
	else  do VINDEX(swift)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordSWIFT swift

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("SWIFT","SWDIRECT = :swift.swdirect and TRREFNO = :swift.trrefno and MSG = :swift.msg") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(swift,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^SWIFT(vobj(swift,-3),vobj(swift,-4),vobj(swift,-5),n)=vobj(swift,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(swift,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(swift,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^SWIFT(vobj(swift,-3),vobj(swift,-4),vobj(swift,-5),n)=vobj(swift,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.swift)               // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.swift) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordSWIFT swift
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	for  set n=$order(^SWIFT(vobj(swift,-3),vobj(swift,-4),vobj(swift,-5),n)) quit:n=""  if '$D(vobj(swift,n)),$D(^SWIFT(vobj(swift,-3),vobj(swift,-4),vobj(swift,-5),n))#2 set vobj(swift,n)=^(n)
	#ENDBYPASS
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordSWIFT swift

	if 'vkeychg.get(),swift.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/INDEX/" do VINDEX(.swift)                    // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.swift)                // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SWIFT(vobj(swift,-3),vobj(swift,-4),vobj(swift,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordSWIFT swift

	// Type local variables for access keys for defaults
	type public String SWDIRECT
	type public String TRREFNO
	type public String MSG

	if swift.repntflg.isNull() set swift.repntflg = 0      // repntflg
	quit


vreqn // Validate required data items

	type public RecordSWIFT swift

	if swift.repntflg.isNull() do vreqerr("REPNTFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordSWIFT swift

	if swift.swdirect.isNull() do vreqerr("SWDIRECT") quit
	if swift.trrefno.isNull() do vreqerr("TRREFNO") quit
	if swift.msg.isNull() do vreqerr("MSG") quit

	if 'vobj(swift,-100,0,"").order().isNull() do {
		if vx("REPNTFLG").exists(),swift.repntflg.isNull() do vreqerr("REPNTFLG") quit
	}
		if vx("REPNTFLG").exists(),swift.repntflg.isNull() do vreqerr("REPNTFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SWIFT","MSG",1767,"SWIFT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordSWIFT swift

	if (%O = 2) do vload

	if vobj(swift,0).exists() do {

		set X = swift.date if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DATE", vRM) quit
		if swift.ercd.length()>4 set vRM = $$^MSG(1076,4) do vdderr("ERCD", vRM) quit
		set X = swift.freeptr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("FREEPTR", vRM) quit
		if swift.inseq.length()>6 set vRM = $$^MSG(1076,6) do vdderr("INSEQ", vRM) quit
		set X = swift.lineno if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("LINENO", vRM) quit
		if swift.noint.length()>6 set vRM = $$^MSG(1076,6) do vdderr("NOINT", vRM) quit
		if swift.outseq.length()>6 set vRM = $$^MSG(1076,6) do vdderr("OUTSEQ", vRM) quit
		if '("01"[swift.REPNTFLG) set vRM=$$^MSG(742,"L") do vdderr("REPNTFLG", vRM) quit
		if swift.sess.length()>4 set vRM = $$^MSG(1076,4) do vdderr("SESS", vRM) quit
		set X = swift.status if 'X.isNull(),'Db.isDefined("STBLSWSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
		if swift.strefno.length()>24 set vRM = $$^MSG(1076,24) do vdderr("STREFNO", vRM) quit
		set X = swift.time if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIME", vRM) quit
		if swift.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	}

	if vobj(swift,1).exists() do {

		if swift.crsum.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CRSUM", vRM) quit
		set X = swift.datetime if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("DATETIME", vRM) quit
		if swift.msgreq.length()>12 set vRM = $$^MSG(1076,12) do vdderr("MSGREQ", vRM) quit
	}

	if vobj(swift,2).exists() do {

		set X = swift.crthr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SWIFT.CRTHR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if swift.drsum.length()>15 set vRM = $$^MSG(1076,15) do vdderr("DRSUM", vRM) quit
	}

	if vobj(swift,3).exists() do {

		set X = swift.drthr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"SWIFT.DRTHR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = swift.swftdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SWFTDT", vRM) quit
	}

	if vobj(swift,10).exists() do {

		if swift.priority.length()>12 set vRM = $$^MSG(1076,12) do vdderr("PRIORITY", vRM) quit
		if swift.rcvr.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR", vRM) quit
		if swift.rcvr1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR1", vRM) quit
		if swift.rcvr2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR2", vRM) quit
		if swift.rcvr3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR3", vRM) quit
		if swift.rcvr4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR4", vRM) quit
		if swift.rcvr5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR5", vRM) quit
		if swift.rcvr6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVR6", vRM) quit
		if swift.sndr.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDR", vRM) quit
	}

	if vobj(swift,11).exists() do {

		if swift.origdt.length()>6 set vRM = $$^MSG(1076,6) do vdderr("ORIGDT", vRM) quit
		if swift.origmt.length()>3 set vRM = $$^MSG(1076,3) do vdderr("ORIGMT", vRM) quit
	}

	if vobj(swift,15).exists() do {

		if swift.seqnumber.length()>1 set vRM = $$^MSG(1076,1) do vdderr("SEQNUMBER", vRM) quit
	}

	if vobj(swift,17).exists() do {

		if swift.bltdin.length()>1 set vRM = $$^MSG(1076,1) do vdderr("BLTDIN", vRM) quit
		if swift.spliti.length()>1 set vRM = $$^MSG(1076,1) do vdderr("SPLITI", vRM) quit
	}

	if vobj(swift,20).exists() do {

		if swift.trnofmt.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TRNOFMT", vRM) quit
	}

	if vobj(swift,21).exists() do {

		if swift.brokref.length()>16 set vRM = $$^MSG(1076,16) do vdderr("BROKREF", vRM) quit
		if swift.relref.length()>20 set vRM = $$^MSG(1076,20) do vdderr("RELREF", vRM) quit
	}

	if vobj(swift,22).exists() do {

		if swift.cmnref.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CMNREF", vRM) quit
		if swift.typeop.length()>4 set vRM = $$^MSG(1076,4) do vdderr("TYPEOP", vRM) quit
	}

	if vobj(swift,23).exists() do {

		if swift.bankop.length()>4 set vRM = $$^MSG(1076,4) do vdderr("BANKOP", vRM) quit
	}

	if vobj(swift,24).exists() do {

		if swift.dlmeth.length()>39 set vRM = $$^MSG(1076,39) do vdderr("DLMETH", vRM) quit
	}

	if vobj(swift,25).exists() do {

		if swift.acctid.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCTID", vRM) quit
	}

	if vobj(swift,26).exists() do {

		if swift.cntpref.length()>16 set vRM = $$^MSG(1076,16) do vdderr("CNTPREF", vRM) quit
		if swift.trntypcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("TRNTYPCD", vRM) quit
	}

	if vobj(swift,28).exists() do {

		if swift.stnum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("STNUM", vRM) quit
	}

	if vobj(swift,29).exists() do {

		if swift.contact1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CONTACT1", vRM) quit
		if swift.contact2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CONTACT2", vRM) quit
		if swift.contact3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CONTACT3", vRM) quit
		if swift.contact4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CONTACT4", vRM) quit
	}

	if vobj(swift,30).exists() do {

		if swift.tdt.length()>10 set vRM = $$^MSG(1076,10) do vdderr("TDT", vRM) quit
		if swift.vdate.length()>10 set vRM = $$^MSG(1076,10) do vdderr("VDATE", vRM) quit
	}

	if vobj(swift,31).exists() do {

		set X = swift.mdtdep if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDTDEP", vRM) quit
	}

	if vobj(swift,32).exists() do {

		if swift.crcdamtb.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CRCDAMTB", vRM) quit
		if swift.f32opt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("F32OPT", vRM) quit
		if swift.vcab.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VCAB", vRM) quit
		if swift.vcas2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VCAS2", vRM) quit
	}

	if vobj(swift,33).exists() do {

		if swift.f33opt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("F33OPT", vRM) quit
		if swift.origamt.length()>18 set vRM = $$^MSG(1076,18) do vdderr("ORIGAMT", vRM) quit
		if swift.vcas.length()>40 set vRM = $$^MSG(1076,40) do vdderr("VCAS", vRM) quit
	}

	if vobj(swift,34).exists() do {

		if swift.idopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("IDOPT", vRM) quit
		if swift.nidd.length()>40 set vRM = $$^MSG(1076,40) do vdderr("NIDD", vRM) quit
	}

	if vobj(swift,36).exists() do {

		if swift.rate.length()>15 set vRM = $$^MSG(1076,15) do vdderr("RATE", vRM) quit
	}

	if vobj(swift,37).exists() do {

		if swift.ifopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("IFOPT", vRM) quit
		if swift.interest.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTEREST", vRM) quit
		if swift.intfldb.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTFLDB", vRM) quit
		if swift.intfldc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTFLDC", vRM) quit
		if swift.intfldd.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTFLDD", vRM) quit
		if swift.intflde.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTFLDE", vRM) quit
		if swift.intfldf.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTFLDF", vRM) quit
	}

	if vobj(swift,50).exists() do {

		if swift.ord.length()>11 set vRM = $$^MSG(1076,11) do vdderr("ORD", vRM) quit
		if swift.ord1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD1", vRM) quit
		if swift.ord2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD2", vRM) quit
		if swift.ord3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD3", vRM) quit
		if swift.ord4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD4", vRM) quit
		if swift.ordacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDACC", vRM) quit
		if swift.ordtyp.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ORDTYP", vRM) quit
	}

	if vobj(swift,51).exists() do {

		if swift.sendinst.length()>11 set vRM = $$^MSG(1076,11) do vdderr("SENDINST", vRM) quit
		if swift.sendtyp.length()>1 set vRM = $$^MSG(1076,1) do vdderr("SENDTYP", vRM) quit
		if swift.sndracc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDRACC", vRM) quit
	}

	if vobj(swift,52).exists() do {

		if swift.ordinacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINACC", vRM) quit
		if swift.ordinst.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST", vRM) quit
		if swift.ordinst1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST1", vRM) quit
		if swift.ordinst2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST2", vRM) quit
		if swift.ordinst3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST3", vRM) quit
		if swift.ordinst4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST4", vRM) quit
		if swift.ordtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ORDTYPE", vRM) quit
	}

	if vobj(swift,53).exists() do {

		if swift.sndcracc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDCRACC", vRM) quit
		if swift.sndrcorr.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDRCORR", vRM) quit
		if swift.sndrcorr1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SNDRCORR1", vRM) quit
		if swift.sndrcorr2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SNDRCORR2", vRM) quit
		if swift.sndrcorr3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SNDRCORR3", vRM) quit
		if swift.sndrcorr4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SNDRCORR4", vRM) quit
		if swift.sndrcorr5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SNDRCORR5", vRM) quit
		if swift.sndrtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("SNDRTYPE", vRM) quit
	}

	if vobj(swift,54).exists() do {

		if swift.rcvcracc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVCRACC", vRM) quit
		if swift.rcvrc1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RCVRC1", vRM) quit
		if swift.rcvrc2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RCVRC2", vRM) quit
		if swift.rcvrc3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RCVRC3", vRM) quit
		if swift.rcvrc4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RCVRC4", vRM) quit
		if swift.rcvrc5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RCVRC5", vRM) quit
		if swift.rcvrcorr.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVRCORR", vRM) quit
		if swift.rcvrtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("RCVRTYPE", vRM) quit
	}

	if vobj(swift,55).exists() do {

		if swift.tri.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRI", vRM) quit
		if swift.triadd1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD1", vRM) quit
		if swift.triadd2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD2", vRM) quit
		if swift.triadd3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD3", vRM) quit
		if swift.triadd4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD4", vRM) quit
		if swift.trib.length()>11 set vRM = $$^MSG(1076,11) do vdderr("TRIB", vRM) quit
		if swift.trityp.length()>1 set vRM = $$^MSG(1076,1) do vdderr("TRITYP", vRM) quit
	}

	if vobj(swift,56).exists() do {

		if swift.intb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTB", vRM) quit
		if swift.intb1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTB1", vRM) quit
		if swift.intb2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTB2", vRM) quit
		if swift.intb3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTB3", vRM) quit
		if swift.intb4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTB4", vRM) quit
		if swift.intb5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTB5", vRM) quit
		if swift.intbacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTBACC", vRM) quit
		if swift.intbtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("INTBTYPE", vRM) quit
	}

	if vobj(swift,57).exists() do {

		if swift.accbacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCBACC", vRM) quit
		if swift.accbtype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ACCBTYPE", vRM) quit
		if swift.recv.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV", vRM) quit
		if swift.recv1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RECV1", vRM) quit
		if swift.recv2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RECV2", vRM) quit
		if swift.recv3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RECV3", vRM) quit
		if swift.recv4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("RECV4", vRM) quit
	}

	if vobj(swift,58).exists() do {

		if swift.beninacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINACC", vRM) quit
		if swift.beninst.length()>11 set vRM = $$^MSG(1076,11) do vdderr("BENINST", vRM) quit
		if swift.beninst1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENINST1", vRM) quit
		if swift.beninst2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENINST2", vRM) quit
		if swift.beninst3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENINST3", vRM) quit
		if swift.beninst4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENINST4", vRM) quit
		if swift.beninst5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENINST5", vRM) quit
		if swift.benopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("BENOPT", vRM) quit
	}

	if vobj(swift,59).exists() do {

		if swift.ben.length()>11 set vRM = $$^MSG(1076,11) do vdderr("BEN", vRM) quit
		if swift.benad1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD1", vRM) quit
		if swift.benad2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD2", vRM) quit
		if swift.benad3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD3", vRM) quit
		if swift.benad4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD4", vRM) quit
		if swift.bentyp.length()>1 set vRM = $$^MSG(1076,1) do vdderr("BENTYP", vRM) quit
		if swift.bnfcry.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BNFCRY", vRM) quit
	}

	if vobj(swift,60).exists() do {

		if swift.obal.length()>25 set vRM = $$^MSG(1076,25) do vdderr("OBAL", vRM) quit
		if swift.obopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("OBOPT", vRM) quit
	}

	if vobj(swift,61).exists() do {

		if swift.f61data1.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA1", vRM) quit
	}

	if vobj(swift,61.001).exists() do {

		if swift.f61data2.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA2", vRM) quit
	}

	if vobj(swift,61.002).exists() do {

		if swift.f61data3.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA3", vRM) quit
	}

	if vobj(swift,61.003).exists() do {

		if swift.f61data4.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA4", vRM) quit
	}

	if vobj(swift,61.004).exists() do {

		if swift.f61data5.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA5", vRM) quit
	}

	if vobj(swift,61.005).exists() do {

		if swift.f61data6.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA6", vRM) quit
	}

	if vobj(swift,61.006).exists() do {

		if swift.f61data7.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA7", vRM) quit
	}

	if vobj(swift,61.007).exists() do {

		if swift.f61data8.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA8", vRM) quit
	}

	if vobj(swift,61.008).exists() do {

		if swift.f61data9.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA9", vRM) quit
	}

	if vobj(swift,61.009).exists() do {

		if swift.f61data10.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA10", vRM) quit
	}

	if vobj(swift,61.01).exists() do {

		if swift.f61data11.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA11", vRM) quit
	}

	if vobj(swift,61.011).exists() do {

		if swift.f61data12.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA12", vRM) quit
	}

	if vobj(swift,61.012).exists() do {

		if swift.f61data13.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA13", vRM) quit
	}

	if vobj(swift,61.013).exists() do {

		if swift.f61data14.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA14", vRM) quit
	}

	if vobj(swift,61.014).exists() do {

		if swift.f61data15.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F61DATA15", vRM) quit
	}

	if vobj(swift,62).exists() do {

		if swift.clbal.length()>25 set vRM = $$^MSG(1076,25) do vdderr("CLBAL", vRM) quit
		if swift.clbopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("CLBOPT", vRM) quit
	}

	if vobj(swift,64).exists() do {

		if swift.clabal.length()>25 set vRM = $$^MSG(1076,25) do vdderr("CLABAL", vRM) quit
	}

	if vobj(swift,70).exists() do {

		if swift.dtlpmt1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DTLPMT1", vRM) quit
		if swift.dtlpmt2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DTLPMT2", vRM) quit
		if swift.dtlpmt3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DTLPMT3", vRM) quit
		if swift.dtlpmt4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DTLPMT4", vRM) quit
	}

	if vobj(swift,71).exists() do {

		if swift.brokcm.length()>18 set vRM = $$^MSG(1076,18) do vdderr("BROKCM", vRM) quit
		if swift.dtlchgs.length()>10 set vRM = $$^MSG(1076,10) do vdderr("DTLCHGS", vRM) quit
		if swift.rcvrchg.length()>18 set vRM = $$^MSG(1076,18) do vdderr("RCVRCHG", vRM) quit
	}

	if vobj(swift,72).exists() do {

		if swift.by1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BY1", vRM) quit
		if swift.by2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BY2", vRM) quit
		if swift.by3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BY3", vRM) quit
		if swift.by4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BY4", vRM) quit
		if swift.by5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BY5", vRM) quit
		if swift.by6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BY6", vRM) quit
	}

	if vobj(swift,77).exists() do {

		if swift.cocrcda.length()>18 set vRM = $$^MSG(1076,18) do vdderr("COCRCDA", vRM) quit
		if swift.cond1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("COND1", vRM) quit
		if swift.cond2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("COND2", vRM) quit
		if swift.cond3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("COND3", vRM) quit
		if swift.cond4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("COND4", vRM) quit
		if swift.cond5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("COND5", vRM) quit
		if swift.cond6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("COND6", vRM) quit
		if swift.efmdt.length()>10 set vRM = $$^MSG(1076,10) do vdderr("EFMDT", vRM) quit
		if swift.expydtl.length()>24 set vRM = $$^MSG(1076,24) do vdderr("EXPYDTL", vRM) quit
		if swift.fsdt.length()>10 set vRM = $$^MSG(1076,10) do vdderr("FSDT", vRM) quit
		if swift.furid.length()>16 set vRM = $$^MSG(1076,16) do vdderr("FURID", vRM) quit
		if swift.prmpmtp.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PRMPMTP", vRM) quit
		if swift.prmpmtyp.length()>1 set vRM = $$^MSG(1076,1) do vdderr("PRMPMTYP", vRM) quit
		if swift.prmprce.length()>18 set vRM = $$^MSG(1076,18) do vdderr("PRMPRCE", vRM) quit
		if swift.regrep1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("REGREP1", vRM) quit
		if swift.regrep2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("REGREP2", vRM) quit
		if swift.regrep3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("REGREP3", vRM) quit
		if swift.stlmntyp.length()>9 set vRM = $$^MSG(1076,9) do vdderr("STLMNTYP", vRM) quit
		if swift.strkprce.length()>12 set vRM = $$^MSG(1076,12) do vdderr("STRKPRCE", vRM) quit
		if swift.ucrcdamt.length()>18 set vRM = $$^MSG(1076,18) do vdderr("UCRCDAMT", vRM) quit
	}

	if vobj(swift,79).exists() do {

		if swift.f79data1.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA1", vRM) quit
	}

	if vobj(swift,79.001).exists() do {

		if swift.f79data2.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA2", vRM) quit
	}

	if vobj(swift,79.002).exists() do {

		if swift.f79data3.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA3", vRM) quit
	}

	if vobj(swift,79.003).exists() do {

		if swift.f79data4.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA4", vRM) quit
	}

	if vobj(swift,79.004).exists() do {

		if swift.f79data5.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA5", vRM) quit
	}

	if vobj(swift,79.005).exists() do {

		if swift.f79data6.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA6", vRM) quit
	}

	if vobj(swift,79.006).exists() do {

		if swift.f79data7.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA7", vRM) quit
	}

	if vobj(swift,79.007).exists() do {

		if swift.f79data8.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA8", vRM) quit
	}

	if vobj(swift,79.008).exists() do {

		if swift.f79data9.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA9", vRM) quit
	}

	if vobj(swift,79.009).exists() do {

		if swift.f79data10.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA10", vRM) quit
	}

	if vobj(swift,79.01).exists() do {

		if swift.f79data11.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA11", vRM) quit
	}

	if vobj(swift,79.011).exists() do {

		if swift.f79data12.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA12", vRM) quit
	}

	if vobj(swift,79.012).exists() do {

		if swift.f79data13.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA13", vRM) quit
	}

	if vobj(swift,79.013).exists() do {

		if swift.f79data14.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA14", vRM) quit
	}

	if vobj(swift,79.014).exists() do {

		if swift.f79data15.length()>98 set vRM = $$^MSG(1076,98) do vdderr("F79DATA15", vRM) quit
	}

	if vobj(swift,82).exists() do {

		if swift.partya.length()>11 set vRM = $$^MSG(1076,11) do vdderr("PARTYA", vRM) quit
		if swift.partya1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYA1", vRM) quit
		if swift.partya2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYA2", vRM) quit
		if swift.partya3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYA3", vRM) quit
		if swift.partya4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYA4", vRM) quit
		if swift.partya5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYA5", vRM) quit
		if swift.partyaacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PARTYAACC", vRM) quit
		if swift.partyaopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("PARTYAOPT", vRM) quit
	}

	if vobj(swift,83).exists() do {

		if swift.fobcus.length()>11 set vRM = $$^MSG(1076,11) do vdderr("FOBCUS", vRM) quit
		if swift.fobcus1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FOBCUS1", vRM) quit
		if swift.fobcus2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FOBCUS2", vRM) quit
		if swift.fobcus3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FOBCUS3", vRM) quit
		if swift.fobcus4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FOBCUS4", vRM) quit
		if swift.fobcus5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FOBCUS5", vRM) quit
		if swift.fobcusacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("FOBCUSACC", vRM) quit
		if swift.fobcusopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("FOBCUSOPT", vRM) quit
	}

	if vobj(swift,84).exists() do {

		if swift.dlbrpya.length()>11 set vRM = $$^MSG(1076,11) do vdderr("DLBRPYA", vRM) quit
		if swift.dlbrpya1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYA1", vRM) quit
		if swift.dlbrpya2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYA2", vRM) quit
		if swift.dlbrpya3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYA3", vRM) quit
		if swift.dlbrpya4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYA4", vRM) quit
		if swift.dlbrpya5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYA5", vRM) quit
		if swift.dlbrpyaacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DLBRPYAACC", vRM) quit
		if swift.dlbrpyaopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("DLBRPYAOPT", vRM) quit
	}

	if vobj(swift,85).exists() do {

		if swift.dlbrpyb.length()>11 set vRM = $$^MSG(1076,11) do vdderr("DLBRPYB", vRM) quit
		if swift.dlbrpyb1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYB1", vRM) quit
		if swift.dlbrpyb2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYB2", vRM) quit
		if swift.dlbrpyb3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYB3", vRM) quit
		if swift.dlbrpyb4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYB4", vRM) quit
		if swift.dlbrpyb5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DLBRPYB5", vRM) quit
		if swift.dlbrpybacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DLBRPYBACC", vRM) quit
		if swift.dlbrpybopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("DLBRPYBOPT", vRM) quit
	}

	if vobj(swift,86).exists() do {

		if swift.infoac.length()>100 set vRM = $$^MSG(1076,100) do vdderr("INFOAC", vRM) quit
	}

	if vobj(swift,87).exists() do {

		if swift.partyb.length()>11 set vRM = $$^MSG(1076,11) do vdderr("PARTYB", vRM) quit
		if swift.partyb1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYB1", vRM) quit
		if swift.partyb2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYB2", vRM) quit
		if swift.partyb3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYB3", vRM) quit
		if swift.partyb4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYB4", vRM) quit
		if swift.partyb5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PARTYB5", vRM) quit
		if swift.partybacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("PARTYBACC", vRM) quit
		if swift.partybopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("PARTYBOPT", vRM) quit
	}

	if vobj(swift,88).exists() do {

		if swift.brokid.length()>11 set vRM = $$^MSG(1076,11) do vdderr("BROKID", vRM) quit
		if swift.brokid1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BROKID1", vRM) quit
		if swift.brokid2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BROKID2", vRM) quit
		if swift.brokid3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BROKID3", vRM) quit
		if swift.brokid4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BROKID4", vRM) quit
		if swift.brokid5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BROKID5", vRM) quit
		if swift.brokidacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BROKIDACC", vRM) quit
		if swift.brokidopt.length()>1 set vRM = $$^MSG(1076,1) do vdderr("BROKIDOPT", vRM) quit
	}

	if vobj(swift,94).exists() do {

		if swift.scopop.length()>4 set vRM = $$^MSG(1076,4) do vdderr("SCOPOP", vRM) quit
	}

	if vobj(swift,153).exists() do {

		if swift.delivb.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DELIVB", vRM) quit
		if swift.delivb1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DELIVB1", vRM) quit
		if swift.delivb2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DELIVB2", vRM) quit
		if swift.delivb3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DELIVB3", vRM) quit
		if swift.delivb4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DELIVB4", vRM) quit
		if swift.delivb5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DELIVB5", vRM) quit
		if swift.delivbacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("DELIVBACC", vRM) quit
		if swift.delivbopt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DELIVBOPT", vRM) quit
	}

	if vobj(swift,156).exists() do {

		if swift.ints.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTS", vRM) quit
		if swift.ints1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTS1", vRM) quit
		if swift.ints2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTS2", vRM) quit
		if swift.ints3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTS3", vRM) quit
		if swift.ints4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTS4", vRM) quit
		if swift.ints5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTS5", vRM) quit
		if swift.intsacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTSACC", vRM) quit
		if swift.intstype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("INTSTYPE", vRM) quit
	}

	if vobj(swift,157).exists() do {

		if swift.accsacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ACCSACC", vRM) quit
		if swift.accstype.length()>1 set vRM = $$^MSG(1076,1) do vdderr("ACCSTYPE", vRM) quit
		if swift.send.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SEND", vRM) quit
		if swift.send1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SEND1", vRM) quit
		if swift.send2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SEND2", vRM) quit
		if swift.send3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SEND3", vRM) quit
		if swift.send4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SEND4", vRM) quit
		if swift.send5.length()>40 set vRM = $$^MSG(1076,40) do vdderr("SEND5", vRM) quit
	}

	if vobj(swift,256).exists() do {

		if swift.intc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTC", vRM) quit
		if swift.intc1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTC1", vRM) quit
		if swift.intc2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTC2", vRM) quit
		if swift.intc3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTC3", vRM) quit
		if swift.intc4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INTC4", vRM) quit
	}

	if vobj(swift,257).exists() do {

		if swift.send1c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SEND1C", vRM) quit
		if swift.send2c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SEND2C", vRM) quit
		if swift.send3c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SEND3C", vRM) quit
		if swift.send4c.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SEND4C", vRM) quit
		if swift.sendc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SENDC", vRM) quit
	}

	if vobj(swift,500).exists() do {

		if swift.itsmsg.length()>490 set vRM = $$^MSG(1076,490) do vdderr("ITSMSG", vRM) quit
	}
	if swift.swdirect.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SWDIRECT", vRM) quit
	if swift.trrefno.length()>19 set vRM = $$^MSG(1076,19) do vdderr("TRREFNO", vRM) quit
	if swift.msg.length()>14 set vRM = $$^MSG(1076,14) do vdderr("MSG", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("SWIFT","MSG",979,"SWIFT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordSWIFT swift)	//SWIFT Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.swift)	// Mode=D Tran=B EFD=N Seq=1 JRNID=SWAUD_D
				do vj4(.swift)	// Mode=D Tran=B EFD=N Seq=1 JRNID=SWHIST_D
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.swift)	// Mode=D Tran=O EFD=N Seq=1 JRNID=SWAUD_D
				do vj4(.swift)	// Mode=D Tran=O EFD=N Seq=1 JRNID=SWHIST_D
				}
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj2(.swift)	// Mode=I Tran=B EFD=N Seq=1 JRNID=SWAUD_I
				do vj5(.swift)	// Mode=I Tran=B EFD=N Seq=1 JRNID=SWHIST_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj2(.swift)	// Mode=I Tran=O EFD=N Seq=1 JRNID=SWAUD_I
				do vj5(.swift)	// Mode=I Tran=O EFD=N Seq=1 JRNID=SWHIST_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj3(.swift)	// Mode=U Tran=B EFD=N Seq=1 JRNID=SWAUD_U
				do vj6(.swift)	// Mode=U Tran=B EFD=N Seq=1 JRNID=SWHIST_U
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj3(.swift)	// Mode=U Tran=O EFD=N Seq=1 JRNID=SWAUD_U
				do vj6(.swift)	// Mode=U Tran=O EFD=N Seq=1 JRNID=SWHIST_U
				}
			}
		}

	quit


vj1(RecordSWIFT swift)	// SWAUD_D  Table SWAUD  SWIFT Audit (Delete)

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,vlastkey
	set v1=TJD
	set v2=swift.trrefno
	set v3=swift.msg
	set vlastkey=Db.nextVal("SWAUD","TJD=:v1,TRREFNO=:v2,MSG=:v3")
	type RecordSWAUD swaud=Db.getRecord("SWAUD","TJD=:v1,TRREFNO=:v2,MSG=:v3,ASEQ=:vlastkey",1)
	set swaud.cdt=+$H
	set swaud.swdirect=swift.swdirect
	set swaud.tcmt=$$^MSG(8286,swift.msg,TJD)
	set swaud.time=$P($H,",",2)
	set swaud.tlo=TLO
	set swaud.uid=%UID

	do swaud.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordSWIFT swift)	// SWAUD_I  Table SWAUD  SWIFT Audit (Insert)

	type Public String %UID,TJD,TLO
	type String v1,v2,v3,vlastkey
	set v1=TJD
	set v2=swift.trrefno
	set v3=swift.msg
	set vlastkey=Db.nextVal("SWAUD","TJD=:v1,TRREFNO=:v2,MSG=:v3")
	type RecordSWAUD swaud=Db.getRecord("SWAUD","TJD=:v1,TRREFNO=:v2,MSG=:v3,ASEQ=:vlastkey",1)
	set swaud.cdt=+$H
	set swaud.swdirect=swift.swdirect
	set swaud.tcmt=$$^MSG(8288,swift.msg,TJD)
	set swaud.time=$P($H,",",2)
	set swaud.tlo=TLO
	set swaud.uid=%UID

	do swaud.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordSWIFT swift)	// SWAUD_U  Table SWAUD  SWIFT Audit (Update)

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%UID,TJD,TLO
		type String v1,v2,v3,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=TJD
		set v2=swift.trrefno
		set v3=swift.msg
		set vlastkey=Db.nextVal("SWAUD","TJD=:v1,TRREFNO=:v2,MSG=:v3")
		type RecordSWAUD swaud=Db.getRecord("SWAUD","TJD=:v1,TRREFNO=:v2,MSG=:v3,ASEQ=:vlastkey",1)
		set swaud.cdt=+$H
		set swaud.swdirect=swift.swdirect
		set swaud.tcmt=$$TCMTFM^ACNFUNCS("","SWIFT",vdi,vold,vnew,$G(EFD))
		set swaud.time=$P($H,",",2)
		set swaud.tlo=TLO
		set swaud.uid=%UID

		do swaud.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj4(RecordSWIFT swift)	// SWHIST_D  Table SWHIST  SWIFT Message History (Delete)

	type Public String %UID,TJD,TLO
	type String v1,v2,vlastkey
	set v1=swift.trrefno
	set v2=swift.msg
	set vlastkey=Db.nextVal("SWHIST","TRREFNO=:v1,MSG=:v2")
	type RecordSWHIST swhist=Db.getRecord("SWHIST","TRREFNO=:v1,MSG=:v2,SEQ=:vlastkey",1)
	set swhist.cdt=+$H
	set swhist.swdirect=swift.swdirect
	set swhist.tcmt=$$^MSG(8286,swift.msg,TJD)
	set swhist.time=$P($H,",",2)
	set swhist.tjd=TJD
	set swhist.tlo=TLO
	set swhist.uid=%UID

	do swhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj5(RecordSWIFT swift)	// SWHIST_I  Table SWHIST  SWIFT Message History (Insert)

	type Public String %UID,TJD,TLO
	type String v1,v2,vlastkey
	set v1=swift.trrefno
	set v2=swift.msg
	set vlastkey=Db.nextVal("SWHIST","TRREFNO=:v1,MSG=:v2")
	type RecordSWHIST swhist=Db.getRecord("SWHIST","TRREFNO=:v1,MSG=:v2,SEQ=:vlastkey",1)
	set swhist.cdt=+$H
	set swhist.swdirect=swift.swdirect
	set swhist.tcmt=$$^MSG(8288,swift.msg,TJD)
	set swhist.time=$P($H,",",2)
	set swhist.tjd=TJD
	set swhist.tlo=TLO
	set swhist.uid=%UID

	do swhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj6(RecordSWIFT swift)	// SWHIST_U  Table SWHIST  SWIFT Message History (Update)

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%UID,TJD,TLO
		type String v1,v2,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=swift.trrefno
		set v2=swift.msg
		set vlastkey=Db.nextVal("SWHIST","TRREFNO=:v1,MSG=:v2")
		type RecordSWHIST swhist=Db.getRecord("SWHIST","TRREFNO=:v1,MSG=:v2,SEQ=:vlastkey",1)
		set swhist.cdt=+$H
		set swhist.swdirect=swift.swdirect
		set swhist.tcmt=$$TCMTFM^ACNFUNCS("","SWIFT",vdi,vold,vnew,$G(EFD))
		set swhist.time=$P($H,",",2)
		set swhist.tjd=TJD
		set swhist.tlo=TLO
		set swhist.uid=%UID

		do swhist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordSWIFT swift) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("SWFTDT").exists() do vi1(.swift)
		if vx("STATUS").exists()!vx("DATE").exists() do vi2(.swift)
		if vx("STATUS").exists()!vx("DATE").exists() do vi3(.swift)
		if vx("SWFTDT").exists() do vi4(.swift)
	}
	do vi1(.swift)
	do vi2(.swift)
	do vi3(.swift)
	do vi4(.swift)

	quit
	

vi1(RecordSWIFT swift) // Maintain SWDTX index entries (SWIFTs by Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = swift.swftdt
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = swift.swdirect
	type String v4 = swift.trrefno
	type String v5 = swift.msg

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^SWIFTX("SWFTDT",v2,v3,v4,v5)) do vidxerr("SWDTX")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^SWIFTX("SWFTDT",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SWFTDT").exists() set v2=vx("SWFTDT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SWIFTX("SWFTDT",v2,v3,v4,v5)
	#ENDBYPASS
	quit

vi2(RecordSWIFT swift) // Maintain SWMSG index entries (SWIFTs by message type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = swift.msg
	type String v3 = swift.status
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = swift.date
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = swift.trrefno
	type String v6 = swift.swdirect

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^SWIFTX("MSG",v2,v3,v4,v5,v6)) do vidxerr("SWMSG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^SWIFTX("MSG",v2,v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("STATUS").exists() set v3=vx("STATUS").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("DATE").exists() set v4=vx("DATE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SWIFTX("MSG",v2,v3,v4,v5,v6)
	#ENDBYPASS
	quit

vi3(RecordSWIFT swift) // Maintain SWSTATX index entries (SWIFTs by Status)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = swift.status
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = swift.date
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = swift.swdirect
	type String v5 = swift.trrefno
	type String v6 = swift.msg

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^SWIFTX("STAT",v2,v3,v4,v5,v6)) do vidxerr("SWSTATX")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^SWIFTX("STAT",v2,v3,v4,v5,v6)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("STATUS").exists() set v2=vx("STATUS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("DATE").exists() set v3=vx("DATE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SWIFTX("STAT",v2,v3,v4,v5,v6)
	#ENDBYPASS
	quit

vi4(RecordSWIFT swift) // Maintain SWTREF index entries (SWIFTs by Trans Reference Num)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = swift.trrefno
	type String v3 = swift.swftdt
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = swift.swdirect
	type String v5 = swift.msg

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if '$D(^SWIFTX("TRREFNO",v2,v3,v4,v5)) do vidxerr("SWTREF")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^SWIFTX("TRREFNO",v2,v3,v4,v5)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("SWFTDT").exists() set v3=vx("SWFTDT").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^SWIFTX("TRREFNO",v2,v3,v4,v5)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("SWIFT")

	while ds.next() do {
		type RecordSWIFT swift=ds.getRecord("SWIFT")
		if vlist.contains("VINDEX") do VINDEX(.swift) quit
		if vlist.contains("SWDTX") do vi1(.swift)
		if vlist.contains("SWMSG") do vi2(.swift)
		if vlist.contains("SWSTATX") do vi3(.swift)
		if vlist.contains("SWTREF") do vi4(.swift)
	}

	quit


public VIDXBLD1(RecordSWIFT swift, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.swift) quit
	if vlist.contains("SWDTX") do vi1(.swift)
	if vlist.contains("SWMSG") do vi2(.swift)
	if vlist.contains("SWSTATX") do vi3(.swift)
	if vlist.contains("SWTREF") do vi4(.swift)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("SWIFT","MSG",1225,"SWIFT."_di)

	quit


vkchged // Access key changed

	type public RecordSWIFT swift

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("SWDIRECT").exists() set vux("SWDIRECT") = vx("SWDIRECT")
	if vx("TRREFNO").exists() set vux("TRREFNO") = vx("TRREFNO")
	if vx("MSG").exists() set vux("MSG") = vx("MSG")
	do vkey(1) set voldkey = swift.swdirect_","_swift.trrefno_","_swift.msg // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = swift.swdirect_","_swift.trrefno_","_swift.msg // Copy new keys into object
	type RecordSWIFT vnewrec = swift.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("SWIFT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordSWIFT swift

	if vux("SWDIRECT").exists() set swift.swdirect = vux("SWDIRECT").piece("|",i)
	if vux("TRREFNO").exists() set swift.trrefno = vux("TRREFNO").piece("|",i)
	if vux("MSG").exists() set swift.msg = vux("MSG").piece("|",i)
	quit

VIDXPGM()	quit "SWFILE"	// Location of index program

