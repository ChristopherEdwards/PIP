public	LNPTS12(RecordLN ln,		// Loan account		/REF:RW
		RecordTTX ttx)		// Transaction		/REF:RW

	/*
	Pay Late Charge
	
	---- Revision History -------------------------------------------------
	
	07/24/07 - PUTTASWH - CR 28332
		   Modified POSTADJ section to use the same transaction code
		   to process Late Charge and VAT on Late Charge transactions
		   instead of using MDR only for VAT on Late Charge transaction.
		   This is because VAT is assessed for the assessed Late Charge
		   amount and the GL account has to be credited during the 
		   assessment.	Also modified INIT and POSTADJ section to delete
		   the changes where the VAT on late charge record is picked 
		   from the internal bill file - LNBIL5 since the records are not
		   present in this file. 
	
	06/28/06 - PUTTASWH - CR 27530
		   Modified POSTADJ to insert record in LNBIL5 file for VAT
		   on Late Charge transaction. Modified UPDVAT section to 
		   update LNBIL5 record during VAT On Late Charge payments.
		   Modified INIT section to pick the VAT on Late Charge amount
		   from Fee Amount Still Due column from LNBIL5 table.
		   
	05/21/06 - PUTTASWH - CR 27130
		   Modified INIT section to invoke PROVATPMT^LNPTSU to pay late
		   Charges and VAT on Late Charges proportionally, if 
		   applicable. Deleted VATPROC section.		   
	
	03/25/07 - PUTTASWH / SmithCD - CR 24945
		   Added VATPROC section for VAT processing during loan
		   payments. Modified INIT section to invoke VATPROC.
		   
	03/19/07 - SENTHIL J. KUMAR - CR 24945
		   Modified POSTADJ section to calculate VAT for Late charge.
		   Also Modified the POSTADJ section to store different value
		   for the TSO variable.	
	
	03/04/07 - SmithCD - CR 24945
		   Enhanced for VAT on Late Charge processing. Added public 
		   VATPMT tag, to be called by Loan payment, and Payment of 
		   tax on late charge transaction codes.Brought code to 
		   standards.		   
	
	11/13/06 - KELLYP - CR 23888
		   Modified POSTADJ to properly set up the TSO fields for the
		   late charge adjustment transactions with the "OFFST" value
		   for reversing the late charge.  This enables the offset to
		   the adjustment to be reversed by LNUEFD which fixes an OOB.
		   
	09/15/06 - KELLYP - CR 23117
		   Modified POSTADJ to protect the %EffectiveDate reference
		   to prevent an UNDEFINED error.  Also modified the POSTADJ
		   section to return a more descriptive error message if a 
		   late charge trancode is missing from the product definition.
	
	01/27/06 - SmithCD - CR 19343 (16890)
		   Removed %NOREV references, which is no longer used and is 
		   invalid for late charges. Late charges should be reversed 
		   on subsequent backdated transactions. Removed initilization 
		   and passing of ttxpri to POST^LNTRB (ttx is the primary 
		   transaction in the context of ^LNTRB).
	*/

	do INIT(.ln, .ttx)

	quit


public	INIT(RecordLN ln,		// Loan account		/REF:RW
	     RecordTTX ttx)		// Transaction		/REF:RW

	// Initialization
	// Called externally by ^LNPTS26
	
	type public Date CUVAR2
	type public Boolean ER
	type public Number TRNSEQ,ZAMT
	type public String LTC	
	
	type Number ACTLCHG, %LCHG, LCHG, VATAMT
	type String POPT
	
	// Late charge effective date amount, specified by teller
	set LCHG = $$FIELD^UTSO(ttx.tso, "LCEFDAMT")
	
	if LCHG.isNull() set LCHG = ln.lchg	
	
	// If the late charge amount is 0, and this is a regular payment,
        // pay down any VAT on late charges assessed that remain.
                
	if ('LCHG)&('LTC.get().isNull())&(ttx.etc'=LTC) do { quit		
		
		set VATAMT = ln.vatlchgdue		
		if 'VATAMT quit
		
		// Apply payment to Late Charges and VAT on Late Charges 
		// proportionally, if applicable
		do PROVATPMT^LNPTSU(.ln, .ttx, 0, .VATAMT)
		
		// Update VAT on Late Charges
		do UPDVAT(.ln, .ttx, VATAMT)
		} 	
	if 'LCHG quit
	
	/*
	The POPT section might adjust the late charge amount by
	interrogating the minimum and maximum values and generating
	transactions to increase or decrease LCHG. The variable %LCHG
	will be the late charge value after any adustments.
	*/

	set %LCHG = LCHG
	if 'ln.popt.isNull() do POPT(.ln, .ttx, .%LCHG) quit:ER 

	set ACTLCHG = $select(ZAMT < %LCHG:ZAMT, 1:%LCHG)
	if 'ACTLCHG set ln.lchg = ln.lchg - (LCHG - %LCHG) quit 	
	
	// Regular payment, not a direct "only" transaction
	if ('LTC.get().isNull())&(ttx.etc'=LTC) do {
		
		// Process VAT on Late Charges		
		set VATAMT = ln.vatlchgdue
		if 'VATAMT quit
		
		// Apply payment to Late Charges and VAT on Late Charges 
		// proportionally, if applicable
		do PROVATPMT^LNPTSU(.ln, .ttx, .ACTLCHG, .VATAMT)
		
		// Update VAT on Late Charges
		do UPDVAT(.ln, .ttx, VATAMT)
		}
	
	// Update Tran Detail: D:Penalty L:Late Charge (ttx.penalty)
	do GL^LNPTSU(.ttx, ACTLCHG, 4)
	
	set %LCHG = %LCHG - ACTLCHG
	
	// Pay down late charge fee level on bill file
	do REDUCBL^LNPTS13(.ln, .ttx, "L", ACTLCHG)
	
	set ZAMT = ZAMT - ACTLCHG
	set ln.ppl = ln.ppl + ACTLCHG

	// Update Penalty ytd / Prior Financial Year
	#IF CUVAR.YEOFF
		type Date FIN1 = $$BOFY^SCADAT(CUVAR2, 1)
		if (%EffectiveDate < FIN1) & (CUVAR2 '> (FIN1 + CUVAR.YEOFF - 1)) set ln.ppy = ln.ppy + ACTLCHG
		else  set ln.pytd = ln.pytd + ACTLCHG
	#ELSE
		set ln.pytd = ln.pytd + ACTLCHG
	#ENDIF

	// Update Penalty YTD / Prior Tax Year	
	#IF CUVAR.TAXYEOFF
		type Date TAX1 = $$BOTY^SCADAT(CUVAR2, 1)
		if (%EffectiveDate < TAX1) & (CUVAR2 '> (TAX1 + CUVAR.TAXYEOFF - 1)) set ln.penpty = ln.penpty + ACTLCHG
		else  set ln.pentytd = ln.pentytd + ACTLCHG
	#ELSE
		set ln.pentytd = ln.pentytd + ACTLCHG
	#ENDIF

	// Interest Calc Principal Adjustments
	type RecordUTBLICPA utblicpa = Db.getRecord("UTBLICPA", "KEY=:ln.icpa")
	if utblicpa.prio.extract(6) set ln.balint = ln.balint - ACTLCHG
	
	// Add late charge entry into History of bills for satisfied (HISTSB)
	do %HSEQ^LNPTSU(.ttx, "*#L#"_ACTLCHG)
	
	set ln.lchg = ln.lchg - (LCHG - %LCHG)

	quit 

	
public	POPT(RecordLN ln,	// Loan account			/REF:RW
	     RecordTTX ttx,	// Transaction			/REF:RW
	     Number LCHG)	// Late charge amount		/REF:RW

	// Process Penalty Option
	// Called externally by ^LNPTS23

	type Number LCHGADJ, TAMT
	
	// Calculate min/max adjustment
	set LCHGADJ = $$LCHGADJ^LNPO2(.ln, ln.cid, LCHG)
	set TAMT = LCHGADJ - LCHG
	if 'TAMT quit
	
	set LCHG = LCHG + TAMT

	// Make account late charge adj
	do POSTADJ(.ln, .ttx, TAMT)

	quit 

	
public	POSTADJ(RecordLN ln,	// Loan account			/REF:RW
		RecordTTX ttx,	// Transaction			/REF:RW
		String TAMT)	// Transaction amount

	// Post late charge adjustment
	// Called externally by ^LNUEFD, ^UANTICLN
	
	type public Boolean ER
	type public Cache %CACHE()
	
	type Boolean DRCR
	type String COL,GLTC,SAVOFFST,TC,TSO
	type Number VATAMT = ""
	
	if %EffectiveDate.get().isNull() set %EffectiveDate = %SystemDate	
	
	type RecordPRODCTL prodctl = %CACHE("PRODCTL").getRecord("PRODCTL", "TYPE=:ln.type")
	
	type RecordLNPOPT lnpopt = %CACHE("LNPOPT").getRecord("LNPOPT", "GRP=:ln.grp,POPT=:ln.popt")

	// DR Late Charge Tran Code
	if TAMT > 0 do {							
		set TC = prodctl.drtrpe 		
		set COL = "DRTRPE"		// Needed for error below
		}
	// CR Late Charge Reduction Tran	
	else  if TAMT < 0 do {		
		set TC = prodctl.crtlcr
		set TAMT = -TAMT		
		set COL = "CRTLCR"		// Needed for error below
		}

        // Product ~p1 missing transaction code - ~p2        
	if TC.isNull() do ETCERR^TTXEXT(ln.type, COL)
	
	if lnpopt.subtovat do {
		type RecordUTBLBRCD utblbrcd = %CACHE("UTBLBRCD").getRecord("UTBLBRCD", "BRCD=:ln.boo")
		if utblbrcd.vatpct.isNull() quit
		
		set VATAMT = (TAMT * (utblbrcd.vatpct / 100)).roundCur(ln.crcd)

		// Tran Detail: D:Penalty L:Late Charge (ttx.penalty)
		set TAMT.piece("#", 4) = TAMT
		// Tran Detail: L:Val Tax Lchg (ttx.vatlchg)
		set TAMT.piece("#", 17) = VATAMT
		// Total transaction amount (ttx.tot)
		set TAMT.piece("#", 1) = TAMT + VATAMT
		}

	set TSO = "LCHGADJ#"

	type RecordTRN trn = %CACHE("TRN").getRecord("TRN","ETC = :TC")
	set DRCR = trn.dc
	
	if 'DRCR set GLTC = $select(ln.trb:"MCR", 1:"MDR")
	else  set GLTC = $select(ln.trb:"MDR", 1:"MCR")
	
	type RecordUTBLGLSC utblglsc = %CACHE("UTBLGLSC").getRecord("UTBLGLSC", "GLSC=:ln.glsc")
	
	// Set OFFST info into Late Charge transaction
	set SAVOFFST = GLTC_":"_utblglsc.lgll		
	if VATAMT set SAVOFFST = SAVOFFST_","_GLTC_":"_utblglsc.lglvatlchgi
	set TSO = $$FIELDIN^UTSO(TSO, "OFFST", SAVOFFST)
	
	// Process Late Charge transaction
	do POST^LNTRB(.ttx, ln.cid, TC, TAMT, %EffectiveDate, %UserStation, TSO, "", ln.crcd) quit:ER	
	
	/*
	 Save dummy OFFST value to offset transaction so HIS4^LNPTS1 doesn't 
	 create a HISTLST record. Reversing the late charge adjustment will
	 reverse the offset (LNUEFD processing) instead of reversing these
	 as true secondaries (REVSEC^LNPTSR processing).
	*/
	
	set TSO = ""
	
	if VATAMT set TSO=$$FIELDIN^UTSO(TSO, "OFFST", "LCHGOFFSET"_","_GLTC_":"_utblglsc.lglvatlchgi)	
	set TSO = $$FIELDIN^UTSO(TSO, "OFFST", "LCHGOFFSET")
	
	// Process Late Charge Income G/L transaction (Loan G/L # (Late Charge Inc))
	do POST^LNTRB(.ttx, utblglsc.lgll, GLTC, (TAMT - VATAMT), %EffectiveDate, %UserStation, TSO, "", ln.crcd) quit:ER
	
	// Process VAT on Late Charge G/L transaction (Loan G/L # (VAT Income))
	if VATAMT do POST^LNTRB(.ttx, utblglsc.lglvatlchgi, GLTC, VATAMT, %EffectiveDate, %UserStation, TSO, "", ln.crcd) quit:ER         	
              
	quit
		

public	VATPMT(RecordLN ln,	// Loan account			/REF:RW
       	       RecordTTX ttx,	// Transaction			/REF:RW
               RecordTRN trn)	// Transaction code		/REF:R

	/*
	Pay Value Added Tax on Late Charges

	Called externally by Payment of tax on late charge transaction 
	codes.
	*/
	
	type public Number ZAMT

	type Number VATAMT = ln.vatlchgdue
	
	set VATAMT = $select(ZAMT < VATAMT:ZAMT, 1:VATAMT)
	
	do UPDVAT(.ln, .ttx, VATAMT)
	
	quit
	
	
UPDVAT(RecordLN ln,		// Loan account			/REF:RW
       RecordTTX ttx,		// Transaction			/REF:RW
       Number VATAMT)	        // Value added tax amount

	type public Number ZAMT

	// Update Tran Detail: L:Val Tax Lchg (ttx.vatlchg)
	do GL^LNPTSU(.ttx, VATAMT, 17)

	// Pay down VAT on late charge fee level on bill file
	do REDUCBL^LNPTS13(.ln, .ttx, "VL", VATAMT)
		
	// Add VAT on late charge entry into History of bills for 
	// satisfied (HISTSB)
	do %HSEQ^LNPTSU(.ttx, "*#VL#"_VATAMT)
	
	set ln.vatlchgdue = ln.vatlchgdue - VATAMT
	set ln.vatlchgpd = ln.vatlchgpd + VATAMT
	
	set ZAMT = ZAMT - VATAMT
	
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60841^21263^Hema Puttaswamy^10051"	// Signature - LTD^TIME^USER^SIZE
