CTFPLNFL(RecordCTFPLNCID ctfplncid, String vpar, Boolean vparNorm) // CTFPLNCID - The Account CTF plan level Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             11/22/2003
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (1)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ctfplncid.getMode()                   // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ctfplncid,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(ctfplncid,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = ctfplncid.cid
	type String CTFPLN = ctfplncid.ctfpln

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("CTFPLN").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CTFPLNCID",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CTFPLNCID","CID = :ctfplncid.cid and CTFPLN = :ctfplncid.ctfpln") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String CTFPLN

	type RecordCTFPLNCID ctfplncid = Db.getRecord("CTFPLNCID","CID=:CID,CTFPLN=:CTFPLN")
	if (%ProcessMode = 2) do {
		do ctfplncid.setMode(2)

		do CTFPLNFL(ctfplncid,vpar)
	}
	else  do VINDEX(ctfplncid)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCTFPLNCID ctfplncid

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CTFPLNCID","CID = :ctfplncid.cid and CTFPLN = :ctfplncid.ctfpln") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(ctfplncid))  S ^ACN(vobj(ctfplncid,-3),"123",vobj(ctfplncid,-4))=vobj(ctfplncid)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.ctfplncid)           // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.ctfplncid) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCTFPLNCID ctfplncid

	if vpar["/INDEX/" do VINDEX(.ctfplncid)                // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.ctfplncid)            // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACN(vobj(ctfplncid,-3),"123",vobj(ctfplncid,-4))  // Delete Record
	quit


vinit // Initialize default values

	type public RecordCTFPLNCID ctfplncid

	// Type local variables for access keys for defaults
	type public String CID
	type public String CTFPLN

	if ctfplncid.active.isNull() set ctfplncid.active = 0  // active
	quit


vreqn // Validate required data items

	type public RecordCTFPLNCID ctfplncid

	if ctfplncid.active.isNull() do vreqerr("ACTIVE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCTFPLNCID ctfplncid

	if ctfplncid.cid.isNull() do vreqerr("CID") quit
	if ctfplncid.ctfpln.isNull() do vreqerr("CTFPLN") quit

		if vx("ACTIVE").exists(),ctfplncid.active.isNull() do vreqerr("ACTIVE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTFPLNCID","MSG",1767,"CTFPLNCID."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCTFPLNCID ctfplncid
	if 'ctfplncid.cid.isNull() set vfkey("^ACN("_""""_ctfplncid.cid_""""_","_50_")")="CTFPLNCID(CID) -> ACN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCTFPLNCID ctfplncid
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("ACN",":ctfplncid.cid") set vERRMSG = $$^MSG(8563,"CTFPLNCID(CID) -> ACN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("DAYCALC").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCTFPLNCID ctfplncid
	if vx("").order().isNull() do AUDIT^UCUTILN(ctfplncid,.vx(),1,"|") quit
	if vx("DAYCALC").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(ctfplncid,.vx(),1,"|")
	quit


vau1 // Trigger AFTER_UPDATE - After update trigger

	type public RecordCTFPLNCID ctfplncid
	/*
	--------------Revision History------------------------

 	07/25/01 - KESTELMANN - 46257
        	After_update trigger was deleted.
	*/
	quit

vbd1 // Trigger BEFORE_DELETE - Before delete

	type public RecordCTFPLNCID ctfplncid
	/*
	 ---- Revision History--------------------------------------
	07/11/01 - KESTELMANN - 46116
		   Created.
		   The BEFORE_DELETE trigger will check if all the dollar 
		   fields on the  plan are 0 or null. If not, the record 
		   can not be deleted. 	 
	*/
	
	new CTFPLN,DAYCALC,DAYCALCF,PLIF,PPYR,PYTD,XCID
		
	set CTFPLN=ctfplncid.ctfpln
	set DAYCALC=ctfplncid.daycalc
	set DAYCALCF=ctfplncid.daycalcf
	set PLIF=ctfplncid.plif
	set PPYR=ctfplncid.ppyr
	set PYTD=ctfplncid.pytd
	set XCID=ctfplncid.cid
	
	if DAYCALC!DAYCALCF!PLIF!PPYR!PYTD set ER=1

	// ~p1 for account ~p2 not deleted 
	if ER do Runtime.setErrMSG("CTFPLNCID",5991,"CTFPLN~XCID") quit

	quit

vbu1 // Trigger BEFORE_UPDATE - The CTF Plan Account Level Before Update

	type public RecordCTFPLNCID ctfplncid
	do ctfplncid.setAuditFlag(1)
	/* 
	03/30/01 - STATTOND - 43390

	Assesment method on commission/tax/fee plan must be
	equal to 2 (dayend) to update DAYCALC field. 
	
	*/

	set CTFPLN=ctfplncid.ctfpln

	new method
	set method=Db.getOneRow("AMTH","UTBLCTFPLN","CTFPLN")
	if method'=2 set ER=1,RM=$$^MSG(4876) quit:ER  
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCTFPLNCID ctfplncid

	set X = ctfplncid.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = ctfplncid.ctfpln if 'X.isNull(),'Db.isDefined("UTBLCTFPLN","X") set vRM = $$^MSG(1485,X) do vdderr("CTFPLN", vRM) quit
	if '("01"[ctfplncid.ACTIVE) set vRM=$$^MSG(742,"L") do vdderr("ACTIVE", vRM) quit
	set X = ctfplncid.daycalc if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.DAYCALC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctfplncid.daycalcf if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.DAYCALCF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctfplncid.dccfoa if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.DCCFOA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctfplncid.dcoa if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.DCOA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctfplncid.plif if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.PLIF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctfplncid.ppyr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.PPYR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = ctfplncid.pytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTFPLNCID.PYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTFPLNCID","MSG",979,"CTFPLNCID."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCTFPLNCID ctfplncid)	//CTFPLNCID Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj1(.ctfplncid)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=EXEMPTTSO
			}
		else  if TSRC="O" do {
			do vj1(.ctfplncid)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=EXEMPTTSO
			}
		}

	quit


vj1(RecordCTFPLNCID ctfplncid)	// EXEMPTTSO  Table HIST  CTF plan Exempt Misc Tax Status TSO data

	type String VQ1

	set VQ1=$$JNLQRY^BCHCTFCI(ctfplncid.ctfpln,ctfplncid.cid)

	if VQ1="1"
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String EFD,%IDENT,%UID,TJD,TLO
		type String v1,vlastkey
		set v1=ctfplncid.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$^MSG(5090,ctfplncid.ctfpln)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.tso=$$JNLTSO^BCHCTFCI(ctfplncid.ctfpln)
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordCTFPLNCID ctfplncid) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.ctfplncid)

	quit
	

vi1(RecordCTFPLNCID ctfplncid) // Maintain XCTFPLNCID index entries (Account CTF plan level X-REF)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = ctfplncid.ctfpln
	type String v3 = ctfplncid.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^ACN(vobj(ctfplncid,-3),"123",vobj(ctfplncid,-4)))#2,'$D(^XREF("XCTFPLN",v2,v3)) do vidxerr("XCTFPLNCID")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("XCTFPLN",v2,v3)="" quit
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("XCTFPLN",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("CTFPLNCID")

	while ds.next() do {
		type RecordCTFPLNCID ctfplncid=ds.getRecord("CTFPLNCID")
		if vlist.contains("VINDEX") do VINDEX(.ctfplncid) quit
		if vlist.contains("XCTFPLNCID") do vi1(.ctfplncid)
	}

	quit


public VIDXBLD1(RecordCTFPLNCID ctfplncid, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.ctfplncid) quit
	if vlist.contains("XCTFPLNCID") do vi1(.ctfplncid)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("CTFPLNCID","MSG",1225,"CTFPLNCID."_di)

	quit


vkchged // Access key changed

	type public RecordCTFPLNCID ctfplncid

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("CTFPLN").exists() set vux("CTFPLN") = vx("CTFPLN")
	do vkey(1) set voldkey = ctfplncid.cid_","_ctfplncid.ctfpln // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ctfplncid.cid_","_ctfplncid.ctfpln // Copy new keys into object
	type RecordCTFPLNCID vnewrec = ctfplncid.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CTFPLNCID",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCTFPLNCID ctfplncid

	if vux("CID").exists() set ctfplncid.cid = vux("CID").piece("|",i)
	if vux("CTFPLN").exists() set ctfplncid.ctfpln = vux("CTFPLN").piece("|",i)
	quit

VIDXPGM()	quit "CTFPLNFL"	// Location of index program

