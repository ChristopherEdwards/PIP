private LNCAL20

	/*

	Loan Activity Modeling Utility


	   ORIG:  KANE - 24 MAY 1993

	   DESC: Derive Scheduled Activity

	   Collate through the CSHARRAY array, searching for transactions that
	   have the first pieces equal to the Customer # (CID).  When found,
	   break txns down into 2 Catagories;  1 - Payments and Disbursals,
	   2 - Fees assessed,  and store these in a Temporary Global.

	---- Revision History ------------------------------------------------
	13/03/06 - SANTHUMS - CR 19947
		   Made LNCAL20	label as private 

	03/07/06 - S.Krishnan - CR 19711
		   . In the section FILLIT, where the set to the variable TRNDTE
		     is modified to use ttx.tjd instead of ttx.lnerc.
		   . Modified the section GTDTSEQ to use getMode() method.
		   
	02/28/06 - SANTHUMS - CR 19710
		   Modified to use the TMPRPT4 table instead of TMPRPT3
		   Modified RDESC section to remove the if loop which is
		   not required.

	10/28/05 - S.Krishnan - CR16885
		   Modified to always use the TMPRPT3 table instead of TMP(,,).
		   Added 'quit DESC' to bottom of RDESC.
		   Converted all the '$P' to PSL format.

	02/13/02 - ARCILLAZ - 43583
		   Converted to PSL. Removed old revision history.

	*/

	quit


Public CALCBAL(BALANCE,PIECE,RECORD)	// Calculate Balance

	if RECORD.piece("|",(PIECE-1))'="" do {
		if $E(RECORD.piece("|",PIECE)) do {
			// Principal debit
			set BALANCE=BALANCE-$P(RECORD,"|",(PIECE-1))
			}
		else  do {
			// Principal credit
			set BALANCE=BALANCE+$P(RECORD,"|",(PIECE-1))
			}
		}
	set RECORD.piece("|",PIECE)=BALANCE
	quit


Public FILLIT(RecordLN ln,RecordTTX ttx,DATATYPE,BALCMP)	//  Fill Temp global w/ data from UANTIC/HIST


	new IAM,PAC,TAMT

	if DATATYPE="ACTUAL"!(DATATYPE="FORCASTED") set POFF=2
	else  set POFF=1

	/*
	The UANTIC utility returns an array which differs from the standard
	history record with regard to effective and default dates.  In
	the account history, the effective date is located in piece 5.  If
	the transaction was not effective dated, we instead use the posting
	date found in piece 1.  UANTIC returns the effective date in piece
	16 and the defualt date is in piece 5.
	*/


	// Get different pieces from History than Uantic.
	if DATATYPE="ACTUAL" do {

		// History effective date
		set TRNDTE=ttx.efd

		// System accounting date
		if TRNDTE="" set TRNDTE=%SystemDate
		}
	else  do {
		// Check Piece 5 (EFD Date) for valid date OR Piece 1 if Null.
		// Effective Date.
		set TRNDTE=ttx.efd

		// Payment Satisfied Date
		if TRNDTE="" set TRNDTE=ttx.tjd
		}


	// Transaction code
	set ETC=ttx.etc

	if ETC'="" do {
		Type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC")
		// Posting Action Control
		set PAC=trn.pac
		if $E(PAC,1)="^" set PAC=PAC.piece("^",2)

		set TAMT=ttx.tamt
		if TRNDTE'<BEGDATE do {

			// Ignore undisbursed processing transactions
			if PAC="LNPTS4A" quit
			if PAC="LNPTS7A" quit

			// Ignore fee assessment transactions
			if PAC="LNPTS8" quit

			// Ignore interest accrual transactions
			// Restrict Cash Withd for Non-Matured Prin
			if trn.pcfl20 quit

			// Ignore deferred interest transactions
			if TAMT.piece("#",13) quit

			// Payment amount
			set TXNPMT=(TAMT.piece("#",2))+(TAMT.piece("#",3))+(TAMT.piece("#",5))+TAMT.piece("#",8)

			// Interest
			set IAM=ln.iam
			if IAM>0 set TXNINT=TAMT.piece("#",3)
			else  set TXNINT=TAMT.piece("#",3)+TAMT.piece("#",8)

			// Principal
			set TXNPRN=TAMT.piece("#",2)+TAMT.piece("#",5)

			set TXNTYP=$E(ttx.itc)

			//  If date is same as last txn add 1 to date Sequence
			set SEQ=$$GTDTSEQ(TXNPMT,ETC,TRNDTE)

			// Store payment/disbursement amounts
			if TXNPMT do {
				set TXNREC=TXNPMT_"|"_TXNINT_"|"_TXNPRN_"|"_TXNTYP
				
				// If subsidy pmt set flag=1
				if $$FIELD^UTSO(ttx.tso,"SUBPMT")'="" set TXNREC.piece("|",5)=1
					
				type RecordTMPRPT4 tmprpt4=Class.new("RecordTMPRPT4","PID=:%ProcessID,KEY1=:CID,KEY2=:TRNDTE,KEY3=:SEQ,KEY4=:ETC")
				set tmprpt4.data=TXNREC							
				do tmprpt4.save()
				}
			set SEQ=SEQ-1
 			
			kill ARRAY
			do OUT^UTSO(.ARRAY,ttx.tso)

			// Bump date sequence if fee amounts found in TSO
			if $D(ARRAY("LNFEE")) do {
				set SEQ=SEQ+1

				// Create one record per fee
				for I=1:1 set FEETYPE=ARRAY("LNFEE").piece(",",I) quit:FEETYPE=""  do {

					set FEECODE=FEETYPE.piece(":",1)
					set FEEAMT=FEETYPE.piece(":",2)

					type String A

				  	type RecordTMPRPT4 tmprpt31=Db.getRecord("TMPRPT4","PID=%ProcessID,KEY1=:CID,KEY2=:TRNDTE,KEY3=:SEQ,KEY4=:FEECODE",1)

					set A=tmprpt31.data
					set A.piece("|",1)=FEEAMT
					set tmprpt31.data=A
					do tmprpt31.save()
					quit
					}
				}
			}
	}	

	set SEQ=0
	quit


GTDTSEQ(TXNPMT,ETC,TRNDTE)	//     get date sequence number

	new FOUND

	set FOUND=0
	for I=1:1 do { quit:I'<$G(LASTSEQ(TRNDTE))!(FOUND)

		  type RecordTMPRPT4 tmprpt32=Db.getRecord("TMPRPT4","PID=%ProcessID,KEY1=:CID,KEY2=:TRNDTE,KEY3=:I,KEY4=:ETC",1)
		  if tmprpt32.getMode()=0 quit
		  if tmprpt32.data=""!(tmprpt32.data="*") set FOUND=1
	    	  }

	if FOUND set RETVAL=I
	else  do {
		set RETVAL=$G(LASTSEQ(TRNDTE))+1
		set LASTSEQ(TRNDTE)=RETVAL
		}
	quit RETVAL


Public TRDESC(RecordTRN trn,ETC)	// Returns transaction description for modeling reports

	if $G(ETC)="" quit ""
	
	if $D(TRDESC(ETC)) quit TRDESC(ETC)

	new DESC

	set DESC=$E($$RDESC(.trn),1,35)

	set TRDESC(ETC)=DESC

	quit DESC


RDESC(RecordTRN trn)

	// Transaction Description
	type String DESC

        set DESC=trn.des

        if 'DESC.isNull() quit DESC         

	type RecordSTBLGLDESCL gldescl=Db.getRecord("STBLGLDESCL","KEY=:+ETC",1)
	set DESC=gldescl.desc
	if DESC'="" quit DESC

	type RecordLNFEEP lnfeep=Db.getRecord("LNFEEP","FEETYP=:ETC",1)
	set DESC=lnfeep.desc
	if DESC'="" quit DESC

	type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE=:ETC",1)
	set DESC=lntrs.trdes
	if DESC'="" quit DESC
	set DESC=ETC

	quit DESC
	
 #OPTION ResultClass ON
Public String vSIG()	quit "60337^9885^Sunitha Santhumayor^5603"	// Signature - LTD^TIME^USER^SIZE
