SCHFEE	  /*
	ORIG: ESTERLYP - 12/06/2000
	DESC: Cumulative Deposit Late Fees

	---- Comments --------------------------------------------------------
 
 	This procedure computes late fees for cumulative deposits.


	---- Revision History ------------------------------------------------
	
	12/29/03 - CARROLLJ - CR7658
		   Corrected parameter mismatch errors.

	05/08/03 - CARROLLJ - 51349
		   Removed the use of %A and A array's.

	----------------------------------------------------------------------
 */
	quit


Public FEE(RecordDEP dep,CID,EFD,CUMFEE,TOTFEE,TOTFEEOV,TOTAMTOV,CTL)

 /*	 
        This procedure is used when computing late fees for inquiries and when
        computing late fees for close outs. It will compute late fees for each
        scheduled deposit that was satisfied, but was satisfied after the end
        of the calendar month in which it was due.
	
	Arguments:
		CID		Account Number		/TYP=N/REQ/MECH=VAL/
							 TABLE=[ACN]
		EFD		Effective Date		/TYP=D/REQ/MECH=VAL

		CTL		Control Variable	/TYP=N/NOREQ/MECH=VAL
				0 - Do not add in premature closure fee
				1 - Add in premature closure fee

	Returns:
		. CUMFEE	Cumulative Fee array
				CUMFEE(NUM,SCHDEPND)=DSCHDEPS|FEE
				NUM	 Sched Deposit Number #	/TYP=N/REQ
				SCHDEPND Sched Deposit Due Date	/TYP=D/REQ
				EFDDS	 Effective Date Sched	/TYP=D
					 Deposit Satisfied
				FEE	 Late Fee		/TYP=N/MECH=VAL

		. TOTFEE	Total Fee Deposits Satisfied	/TYP=N/MECH=VAL
	
		. TOTFEEOV	Total Fee Deposits not Satisfied/TYP=N/MECH=VAL

		. TOTAMTOV	Total Amount Due Deposits not 	/TYP=N/MECH=VAL
				Satisfied

	Example:
		do FEE^SCHFEE(CID,EFD,.CUMFEE,.TOTFEE,.TOTFEEOV,.TOTAMTOV,1)
	
 */

	new DEPNUM,FEEDT,FRE,LFEEPR,NXTDT,ODT,SCHDEPA,TOTNODSP

        // Valid scheduled deposit processing account must be defined
        if 'Db.isDefined("DEP","CID") set ER=1,RM=$$^MSG(4663) quit
 
	do INIT(.dep)

	// Valid scheduled deposit processing account must be defined
	if 'SCHPROC set ER=1,RM=$$^MSG(4663) quit

	kill CUMFEE

	 // first scheduled is always opening date
	set (FEEDT,NXTDT)=ODT
	set CUMFEE(1,ODT)=""

	// build deposit number, due date array
  	for DEPNUM=2:1:TOTNOSDP do {
		set NXTDT=$$NJD^UFRE(NXTDT,FRE)

		// get end of month for calendar month
		if CUM set FEEDT=$$EOMJD^SCADAT(NXTDT,1)		
		
		if 'CUM set FEEDT=NXTDT
		// set in array
		set CUMFEE(DEPNUM,FEEDT)=""
		}

	// find deposit satisfied dates, insert in array

	new depdt,ACTDT,AMT,DEPDT,DEPS,FEE,FEEDT,FEEMO,MO,N
  	set (DEPNUM,TOTFEE)=0

	type ResultSet depdt=Db.select("CID,DEPDT","DEPSCH","CID=:CID")
	
	while depdt.next() do {
		set DEPDT=depdt.getCol(2)
		new depsch
		type RecordDEPSCH depsch=Db.getRecord("DEPSCH","CID,DEPDT")
		set AMT=depsch.schdepa
		
		// nothing deposited
		quit:'AMT
	
		// can't divide by non-existent deposit amount
		quit:'SCHDEPA

		// find out how many deposits this transaction satisfied
		set DEPS=AMT\SCHDEPA

		// less than a full deposit amount
		quit:DEPS<1
		
		for N=1:1:DEPS do {
			set DEPNUM=DEPNUM+1
	
			if '$d(CUMFEE(DEPNUM)) set DEPNUM=DEPNUM-1 quit 

			set NXTDT=""
			set NXTDT=$O(CUMFEE(DEPNUM,NXTDT))
			quit:NXTDT=""

			set CUMFEE(DEPNUM,NXTDT)=DEPDT_"|"
			
			// late fee?
			set FEE=""
			if DEPDT>NXTDT do SLATEFEE

			}
		}
		
		// find TOTFEEOV - total fees for deposits not satisfied
		// and TOTAMTOV - total amount of deposits not satisfed 
		set (TOTFEEOV,TOTAMTOV)=0

		for  set DEPNUM=$O(CUMFEE(DEPNUM)) quit:DEPNUM=""  do {
			set NXTDT=""
			set NXTDT=$O(CUMFEE(DEPNUM,NXTDT))
			quit:NXTDT=""
		
			// if there's data, it was satisfied
			quit:CUMFEE(DEPNUM,NXTDT)'=""
	
			// not satisfied, find late fee
			if EFD>NXTDT do NLATEFEE
			}			

	// Add in premature closure fee if indicated
	if CTL set TOTFEE=TOTFEE+dep.prclfee
	
	// Remove dates that are beyond next payment, unless they've been paid
	set (DEPNUM,NXTDT)=""

	for  set DEPNUM=$O(CUMFEE(DEPNUM)) quit:DEPNUM=""  do {
		set NXTDT=""
		new NFEEDT

		// get next due date for this effective date
		if CUM set NFEEDT=$$EOMJD^SCADAT(EFD,1)
		if 'CUM set NFEEDT=$$NJD^UFRE(EFD,FRE)

		for  set NXTDT=$O(CUMFEE(DEPNUM,NXTDT)) quit:NXTDT=""  do {

			// get next due date
			if CUM set FEEDT=$$EOMJD^SCADAT(NXTDT,1)
			if 'CUM set FEEDT=NXTDT

			// remove unpaid entries that are beyond next due date
			if FEEDT>NFEEDT,CUMFEE(DEPNUM,NXTDT)="" kill CUMFEE(DEPNUM,NXTDT)
			}
		}

	quit


INIT(RecordDEP dep)

	if $G(TJD)="" set TJD=EFD

	set CTL=$G(CTL)
	set CUM=dep.cumdep
	set ODT=dep.odt
	set FRE=dep.schdepf
	set SCHDEPA=dep.schdepa
	set SCHPROC=dep.schproc
	set TOTNOSDP=dep.totnosdp
	set LFEEPR=dep.lfeepr

	quit


SLATEFEE	// Track late fee for satisfied deposits

	// FEEDT is actual or EOM, depending on CUM
	set (ACTDT,FEEDT)=NXTDT
				
	// set EOM date back to actual due date
	if CUM set ACTDT=$$NJD^UFRE(NXTDT,FRE,"",1)
				
	// how many months late
	set MO=0
	for  do { quit:FEEDT>DEPDT  quit:FEEDT=DEPDT
		set MO=MO+1
		set ACTDT=$$NJD^UFRE(ACTDT,FRE)
		if CUM set FEEDT=$$EOMJD^SCADAT(ACTDT,1)
		if 'CUM set FEEDT=ACTDT
		}
				
	// calculate fee per month
	set FEEMO=SCHDEPA*(LFEEPR/100)
	set FEEMO=$$^SCARND(FEEMO,0,CID)

	// calculate total fee
	set FEE=FEEMO*MO
	set FEE=$$^SCARND(FEE,0,CID)

	set CUMFEE(DEPNUM,NXTDT)=CUMFEE(DEPNUM,NXTDT)_FEE
	
	// TOTFEE is total fees for deposits satisfied
	set TOTFEE=TOTFEE+FEE

	quit


NLATEFEE	// Track late fee for deposits not yet satisfied

	// FEEDT is actual or EOM, depending on CUM
	set (ACTDT,FEEDT)=NXTDT

	// set EOM date back to actual due date
	if CUM set ACTDT=$$NJD^UFRE(NXTDT,FRE,"",1)

	// how many months late
	set MO=0
	for  do { quit:FEEDT>EFD  quit:FEEDT=EFD
		set MO=MO+1
		set ACTDT=$$NJD^UFRE(ACTDT,FRE)
		if CUM set FEEDT=$$EOMJD^SCADAT(ACTDT,1)
		if 'CUM set FEEDT=ACTDT
		}
				
	// calculate fee per month
	set FEEMO=SCHDEPA*(LFEEPR/100)
	set FEEMO=$$^SCARND(FEEMO,0,CID)

	// calculate total fee
	set FEE=FEEMO*MO
	set FEE=$$^SCARND(FEE,0,CID)

	// add to totals
	set TOTFEEOV=TOTFEEOV+FEE
	set TOTAMTOV=TOTAMTOV+SCHDEPA

	quit


Public	CUMCLFEE		// Cumulative account closeout fees
 /*
        This procedure is used when computing late fees for close outs. It will
	not include premature closure fees.
 
        Required:
                CID             Account Number          /TYP=N/REQ/MECH=VAL/
                                                         TABLE=[ACN]
                EFD (optional)  Effective Date          /TYP=D/REQ/MECH=VAL
 
        Updates:		FEECNT - Number of fees
				
				FEEAMT - Amount of fees
    
        Example:
                do CUMCLFEE^SCHFEE
 
 */
	new CUMFEE,TEFD,TOTFEE,TOTFEEOV,TOTAMTOV

	set TEFD=$G(EFD)
	if TEFD="" set TEFD=TJD

	set (TOTFEE,TOTFEEOV)=0
	Type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	do FEE(.dep,CID,TEFD,.CUMFEE,.TOTFEE,.TOTFEEOV,.TOTAMTOV,0)
	// For service fee call
	set FEECNT=1
	set FEEAMT=TOTFEE

	quit


Public	CUMPFEE		// Cumulative account premature closure fee
 /*
        This procedure is used when computing late fees for close outs. It will
        compute late fees and premature closure fees.
 
        Required:
                CID             Account Number          /TYP=N/REQ/MECH=VAL/
                                                         TABLE=[ACN]
                EFD (optional)  Effective Date          /TYP=D/REQ/MECH=VAL
 
        Updates:                FEECNT - Number of fees
 
                                FEEAMT - Amount of fees
 
        Example:
                do CUMPFEE^SCHFEE
 
 */

	new CUMFEE,TEFD,TOTFEE,TOTFEEOV,TOTAMTOV

	set TEFD=$G(EFD)
	if TEFD="" set TEFD=TJD

	set (TOTFEE,TOTFEEOV)=0
	Type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
	do FEE(.dep,CID,TEFD,.CUMFEE,.TOTFEE,.TOTFEEOV,.TOTAMTOV,1)

	// For service fee call
	set FEECNT=1
	set FEEAMT=TOTFEE

	quit

vSIG()	quit "60122^61133^Chad Smith^7436"	// Signature - LTD^TIME^USER^SIZE
