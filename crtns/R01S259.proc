R01S259	// SCA243 - Monthly Effective Rate Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:46 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Date VIN1

	set RID="SCA243"
	set RN="Monthly Effective Rate Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|10||[TTL]TJD|[TTL]TJD:DISTINCT:NOVAL||D EOM^URSCH||D|For month ending|||||"

	set %READ="IO/REQ,VIN1#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date VIN1
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,CLS,CONAM,DESC,GRP,RID,RN,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA243",RN="Monthly Effective Rate Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA243","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[TTL]TYPE#1#4,[TTL]CC#9#6,[TTL]OPEN#20#8,[TTL]BAL#31#15,[TTL]BALADJ#50#15,[TTL]BALCMP#69#15,[TTL]AVGBALM#87#15,[TTL]EFFRATEM#105#8,[TTL]PROJEARN#115#15"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE

		set VBNRINFO("PROMPTS",1)="WC1|"_"For month ending"_"|VIN1|"_$$DAT^%ZM(VIN1.get(),%MSKD)

		set VWHERE="TTL.TJD=:VIN1"

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Monthly Effective Rate Report"
		set VBNRINFO("PGM")="R01S259"
		set VBNRINFO("RID")="SCA243"
		set VBNRINFO("TABLES")="TTL"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TTL]TJD"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TTL]CRCD"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TTL]CLS"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TTL]GRP"
		set VBNRINFO("ORDERBY",5)="[SYSDEV,TTL]TYPE"
		set VBNRINFO("ORDERBY",6)="[SYSDEV,TTL]GLSC"
		set VBNRINFO("ORDERBY",7)="[SYSDEV,TTL]CC"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:7 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:7 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("TTL.CLS,TTL.GRP,TTL.TJD,TTL.CRCD,TTL.TYPE,TTL.GLSC,TTL.CC,TTL.OPEN,TTL.BAL,TTL.BALADJ,TTL.BALCMP,TTL.AVGBALM,TTL.EFFRATEM,TTL.PROJEARN,TTL.BALRATEM","TTL","TTL.TJD=:VIN1","TTL.TJD,TTL.CRCD,TTL.CLS,TTL.GRP,TTL.TYPE,TTL.GLSC,TTL.CC","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc3,vovc4,vovc1,vovc2,vovc5,vovc6,vovc7
	set vovc3="",vovc4="",vovc1="",vovc2="",vovc5="",vovc6="",vovc7=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc3,vc3,vovc4,vc4,vovc1,vc1,vovc2,vc2,vovc5,vc5,vovc6,vc6,vovc7,vc7
	set vovc3=vc3,vovc4=vc4,vovc1=vc1,vovc2=vc2,vovc5=vc5,vovc6=vc6,vovc7=vc7
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15
	set vc1=V.piece($C(9),1)			// TTL.CLS
	set vc2=V.piece($C(9),2)			// TTL.GRP
	set vc3=V.piece($C(9),3)			// TTL.TJD
	set vc4=V.piece($C(9),4)			// TTL.CRCD
	set vc5=V.piece($C(9),5)			// TTL.TYPE
	set vc6=V.piece($C(9),6)			// TTL.GLSC
	set vc7=V.piece($C(9),7)			// TTL.CC
	set vc8=V.piece($C(9),8)			// TTL.OPEN
	set vc9=V.piece($C(9),9)			// TTL.BAL
	set vc10=V.piece($C(9),10)			// TTL.BALADJ
	set vc11=V.piece($C(9),11)			// TTL.BALCMP
	set vc12=V.piece($C(9),12)			// TTL.AVGBALM
	set vc13=V.piece($C(9),13)			// TTL.EFFRATEM
	set vc14=V.piece($C(9),14)			// TTL.PROJEARN
	set vc15=V.piece($C(9),15)			// TTL.BALRATEM
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2
 type Public String CLS,GRP
 set CLS=vc1
 set GRP=vc2
	quit

VPREAQ	// Pre-processor (after query)

 
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0,vs(6)=0,vs(7)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1,vskp(6)=1,vskp(7)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(7).get() do VDTL7 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(7)
	type Public String vc3,vovc3,vc4,vovc4,vc1,vovc1,vc2,vovc2,vc5,vovc5,vc6,vovc6,vc7,vovc7
	type Number vb1,vb2,vb3,vb4,vb5,vb6,vb7
	set (vb1,vb2,vb3,vb4,vb5,vb6,vb7)=0
	if vb1!(vovc3'=vc3) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,VH0=1
	if vb2!(vovc4'=vc4) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1,vb6=1,vb7=1,VH0=1
	if vb3!(vovc1'=vc1) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1,vb6=1,vb7=1,VH0=1
	if vb4!(vovc2'=vc2) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1,vb6=1,vb7=1,VH0=1
	if vb5!(+vovc5'=+vc5) set vs(6)=0,vh(6)=0,VD(5)=0,vb6=1,vb7=1
	if vb6!(vovc6'=vc6) set vs(7)=0,vh(7)=0,VD(6)=0,vb7=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(7) set vs(7)=1 do VSUM7 quit:VFMQ  do stat^DBSRWUTL(7)
	if 'vs(6) set vs(6)=1 do VSUM6 quit:VFMQ  do stat^DBSRWUTL(6)
	if 'vs(5) set vs(5)=1 do VSUM5 quit:VFMQ  do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),vc12,vc9,vc10,vc11,vc15,vc8,vc14
	type Public String VSTATS

	set VT(7)=VT(7)+1
	set VT(7,1,1)=VT(7,1,1)+vc12			// @TOT([TTL]AVGBALM)
	set VT(7,2,1)=VT(7,2,1)+vc9			// @TOT([TTL]BAL)
	set VT(7,3,1)=VT(7,3,1)+vc10			// @TOT([TTL]BALADJ)
	set VT(7,4,1)=VT(7,4,1)+vc11			// @TOT([TTL]BALCMP)
	set VT(7,5,1)=VT(7,5,1)+vc15			// @TOT([TTL]BALRATEM)
	set VT(7,6,1)=VT(7,6,1)+vc8			// @TOT([TTL]OPEN)
	set VT(7,7,1)=VT(7,7,1)+vc14			// @TOT([TTL]PROJEARN)
	quit

VSUM4	// Summary
	type public String %TIM,CLS,DESC,GRP,I,IOSL,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	if 'VT(4) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=$E($S(CLS="D":"DEPOSIT",CLS="L":"LOAN"),1,7)
	set VL=VL_$J("",8-VL.length())_"Total:"
	set V=VT(4,6,1)					// @TOT([TTL]OPEN,)
	set VL=VL_$J("",19-VL.length())_$J(V,8)
	set V=VT(4,2,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",30-VL.length())_$J($FN(V,",",2),15)
	set V=VT(4,3,1)					// @TOT([TTL]BALADJ,)
	set VL=VL_$J("",49-VL.length())_$J($FN(V,",",2),15)
	set V=VT(4,4,1)					// @TOT([TTL]BALCMP,)
	set VL=VL_$J("",68-VL.length())_$J($FN(V,",",2),15)
	set V=VT(4,1,1)					// @TOT([TTL]AVGBALM,)
	set VL=VL_$J("",86-VL.length())_$J($FN(V,",",2),15)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(4,5,1)/VT(4,1,1)		// @TOT([TTL]BALRATEM)/@TOT([TTL]AVGBALM,)
		}
	set VL=VL_$J("",104-VL.length())_$J(V,8,5)
	set V=VT(4,7,1)					// @TOT([TTL]PROJEARN,)
	set VL=VL_$J("",114-VL.length())_$J($FN(V,",",2),15)
	do VOM
	set VL="" do VOM
	quit

VSUM5	// Summary
	type public String %TIM,CLS,DESC,GRP,I,IOSL,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	if 'VT(5) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=$E(vc2,1,4)
	set VL=VL_$J("",8-VL.length())_"Total:"
	set V=VT(5,6,1)					// @TOT([TTL]OPEN,)
	set VL=VL_$J("",19-VL.length())_$J(V,8)
	set V=VT(5,2,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",30-VL.length())_$J($FN(V,",",2),15)
	set V=VT(5,3,1)					// @TOT([TTL]BALADJ,)
	set VL=VL_$J("",49-VL.length())_$J($FN(V,",",2),15)
	set V=VT(5,4,1)					// @TOT([TTL]BALCMP,)
	set VL=VL_$J("",68-VL.length())_$J($FN(V,",",2),15)
	set V=VT(5,1,1)					// @TOT([TTL]AVGBALM,)
	set VL=VL_$J("",86-VL.length())_$J($FN(V,",",2),15)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(5,5,1)/VT(5,1,1)		// @TOT([TTL]BALRATEM)/@TOT([TTL]AVGBALM,)
		}
	set VL=VL_$J("",104-VL.length())_$J(V,8,5)
	set V=VT(5,7,1)					// @TOT([TTL]PROJEARN,)
	set VL=VL_$J("",114-VL.length())_$J($FN(V,",",2),15)
	do VOM
	set VL="" do VOM
	quit

VSUM6	// Summary
	type public String %TIM,CLS,DESC,GRP,I,IOSL,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	if 'VT(6) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=$E(vc5,1,4)
	set VL=VL_$J("",8-VL.length())_"Total:"
	set V=VT(6,6,1)					// @TOT([TTL]OPEN,)
	set VL=VL_$J("",19-VL.length())_$J(V,8)
	set V=VT(6,2,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",30-VL.length())_$J($FN(V,",",2),15)
	set V=VT(6,3,1)					// @TOT([TTL]BALADJ,)
	set VL=VL_$J("",49-VL.length())_$J($FN(V,",",2),15)
	set V=VT(6,4,1)					// @TOT([TTL]BALCMP,)
	set VL=VL_$J("",68-VL.length())_$J($FN(V,",",2),15)
	set V=VT(6,1,1)					// @TOT([TTL]AVGBALM,)
	set VL=VL_$J("",86-VL.length())_$J($FN(V,",",2),15)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(6,5,1)/VT(6,1,1)		// @TOT([TTL]BALRATEM)/@TOT([TTL]AVGBALM,)
		}
	set VL=VL_$J("",104-VL.length())_$J(V,8,5)
	set V=VT(6,7,1)					// @TOT([TTL]PROJEARN,)
	set VL=VL_$J("",114-VL.length())_$J($FN(V,",",2),15)
	do VOM
	set VL="" do VOM
	quit

VDTL7	// Detail
	type public String %TIM,CLS,DESC,GRP,IOSL,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL=$E(vc5,1,4)
	set VL=VL_$J("",5-VL.length())_$J(vc7,9)
	set VL=VL_$J("",15-VL.length())_$J(vc8,12)
	set VL=VL_$J("",30-VL.length())_$J($FN(vc9,",",2),15)
	set VL=VL_$J("",49-VL.length())_$J($FN(vc10,",",2),15)
	set VL=VL_$J("",68-VL.length())_$J($FN(vc11,",",2),15)
	set VL=VL_$J("",86-VL.length())_$J($FN(vc12,",",2),15)
	set VL=VL_$J("",104-VL.length())_$J(vc13,8,5)
	set VL=VL_$J("",114-VL.length())_$J($FN(vc14,",",2),15)
	do VOM
	quit

VSUM7	// Summary
	type public String %TIM,CLS,DESC,GRP,I,IOSL,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate

	if 'VT(7) quit
	if VLC+2>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=$E(vc6,1,4)
	set VL=VL_$J("",8-VL.length())_"Total:"
	set V=VT(7,6,1)					// @TOT([TTL]OPEN,)
	set VL=VL_$J("",19-VL.length())_$J(V,8)
	set V=VT(7,2,1)					// @TOT([TTL]BAL,)
	set VL=VL_$J("",30-VL.length())_$J($FN(V,",",2),15)
	set V=VT(7,3,1)					// @TOT([TTL]BALADJ,)
	set VL=VL_$J("",49-VL.length())_$J($FN(V,",",2),15)
	set V=VT(7,4,1)					// @TOT([TTL]BALCMP,)
	set VL=VL_$J("",68-VL.length())_$J($FN(V,",",2),15)
	set V=VT(7,1,1)					// @TOT([TTL]AVGBALM,)
	set VL=VL_$J("",86-VL.length())_$J($FN(V,",",2),15)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=VT(7,5,1)/VT(7,1,1)		// @TOT([TTL]BALRATEM)/@TOT([TTL]AVGBALM,)
		}
	set VL=VL_$J("",104-VL.length())_$J(V,8,5)
	set V=VT(7,7,1)					// @TOT([TTL]PROJEARN,)
	set VL=VL_$J("",114-VL.length())_$J($FN(V,",",2),15)
	do VOM
	set VL="" do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CLS,CONAM,DESC,GRP,RID,RN,VL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vovc5,vovc6,vovc7,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+11,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL=$E($S(CLS="D":"Deposit",1:"   Loan"),1,7)
	set VL=VL_$J("",8-VL.length())_$E("Group "_GRP,1,10)
	do VOM
	do VP1 quit:VFMQ!verror.get()  set V="CURRENCY CODE "_vc4_" - "_DESC do VP2 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL="                   "_"----------------------- As of Month-end ------------------------"
	do VOM
	set VL="         "_"Cost        Open                                                                              Effective     Projected"
	do VOM
	set VL="Type    Center     Accounts    Record Balance        Adjustments     Actual Balance   Average Balance     Rate    Annual Earnings"
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - CURRENCY CODE <<CRCD>> - <<DESC>>

	type public String vc4
 type public String CRCD,DESC

 set CRCD=vc4
 type ResultSet rs=Db.select("DESC","CRCD","CO=:CUVAR.CO AND CRCD=:CRCD")
 if rs.next() set DESC=rs.getCol("DESC")
	quit

VP2	// Column post-processor - CURRENCY CODE <<CRCD>> - <<DESC>>

 type Public String V,VL
 if '(CUVAR.%MCP) set (V,VL)=""
 

	quit
