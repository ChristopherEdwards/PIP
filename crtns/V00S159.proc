V00S159(%ProcessMode,RecordUTBLDENOM fUTBLDEN)   //PBS -  - SID= <DENOM> Denomination Breakdown Window
 ;;Copyright(c)2006 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/24/2006 11:17 - kini
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,CNT,MUTCNT",VSID="DENOM",VPGM=$T(+0),VSNAME="Denomination Breakdown Window"
 set vPSL=1
 set KEYS(1)=fUTBLDEN.CRCD
 set KEYS(2)=fUTBLDEN.CSEQ
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=17 do VPR(.fUTBLDEN),VDA1(.fUTBLDEN),V5^DBSPNT quit

 set ER=0 do VSCRPRE(.fUTBLDEN) if ER quit  // Screen Pre-Processor
 
 // Display Pre-Processor
 //
 if '%ProcessMode do VNEW(.fUTBLDEN),VDSPPRE(.fUTBLDEN) quit:$G(ER)  do VPR(.fUTBLDEN),VDA1(.fUTBLDEN)
 if %ProcessMode do VLOD(.fUTBLDEN) quit:$G(ER)  do VDSPPRE(.fUTBLDEN) quit:$G(ER)  do VPR(.fUTBLDEN),VDA1(.fUTBLDEN)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLDEN)
	quit


VNEW(RecordUTBLDENOM fUTBLDEN) // Initialize arrays if %O=0
 
 do VDEF(.fUTBLDEN)
 do VLOD(.fUTBLDEN)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordUTBLDENOM fUTBLDEN)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordUTBLDENOM fUTBLDEN) // Load data from disc - %O = (1-5)
 if '$D(%REPEAT) set %REPEAT=17
 if '$D(%MODS) set %MODS=1
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLDENOM fUTBLDEN) // Display screen prompts
 set VO="10||13|0"
 set VO(0)="1|0"
 set VO(1)=$C(1,31,18,0,0,0,0,0,0,0)_"01TDenomination Entry"
 set VO(2)=$C(2,8,14,0,0,0,0,0,0,0)_"01TCurrency Code:"
 set VO(3)=$C(3,3,19,0,0,0,0,0,0,0)_"01TTransaction Amount:"
 set VO(4)=$C(3,46,13,0,0,0,0,0,0,0)_"01TTotal Amount:"
 set VO(5)=$C(4,29,10,0,0,0,0,0,0,0)_"01TCirculated"
 set VO(6)=$C(4,43,9,0,0,0,0,0,0,0)_"01TMutilated"
 set VO(7)=$C(5,10,12,0,0,0,0,0,0,0)_"01TDenomination"
 set VO(8)=$C(5,31,5,0,0,0,0,0,0,0)_"01TCount"
 set VO(9)=$C(5,45,5,0,0,0,0,0,0,0)_"01TCount"
 set VO(10)=$C(5,61,6,0,0,0,0,0,0,0)_"01TAmount"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordUTBLDENOM fUTBLDEN)  // Display screen data
 new V
 s CALCAMT=$G(CALCAMT)
 s CNT=$G(CNT)
 s CRCD=$G(CRCD)
 s DESC=$G(DESC)
 s MUTCNT=$G(MUTCNT)
 s TAMT=$G(TAMT)
 s TOTAL=$G(TOTAL)
 //
 set VO="13|11|13|0"
 set VO(11)=$C(2,23,3,2,0,0,0,0,0,0)_"01T"_$G(CRCD)
 set VO(12)=$C(3,23,12,2,0,0,0,0,0,0)_"01$"_$S($G(TAMT)="":"",1:$J($G(TAMT),0,2))
 set VO(13)=$C(3,60,12,2,0,0,0,0,0,0)_"01$"_$S($G(TOTAL)="":"",1:$J($G(TOTAL),0,2))
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+2,DY=6 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLDEN)
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLDENOM fUTBLDEN)  // Display data %REPEAT times
 //instantiate new object if necessary
 if %ProcessMode=5 new v4,v2,v1,v3
 if  set (v4,v2,v1,v3)=""
 else  new v4,v2,v1,v3
 else  set (v4,CALCAMT(I))=$G(CALCAMT(I)),(v2,CNT(I))=$G(CNT(I)),(v1,DESC(I))=$G(DESC(I)),(v3,MUTCNT(I))=$G(MUTCNT(I))
 
 set VO(VX+1)=$C(DY,9,15,2,0,0,0,0,0,0)_"01T"_v1
 set VO(VX+2)=$C(DY,31,5,2,0,0,0,0,0,0)_"00N"_v2
 set VO(VX+3)=$C(DY,45,5,2,0,0,0,0,0,0)_"00N"_v3
 set VO(VX+4)=$C(DY,58,12,2,0,0,0,0,0,0)_"01$"_$S(v4="":"",1:$J(v4,0,2))
 set DY=DY+1,VX=VX+4
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordUTBLDENOM fUTBLDEN)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=1
 set %MODOFF=3,%MOD=4,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=1,VPB=5+%REPEAT,BLKSIZ=(37*%REPEAT)+27,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLDENOM",VSCRPP=1,VSCRPP=1
 set OLNTB=VPB*1000
 
 for I=8:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(1,22,3)_"20T|*CRCD|[*]@CRCD"
 set %TAB(2)=$C(2,22,12)_"20$|*TAMT|[*]@TAMT|||||||2"
 set %TAB(3)=$C(2,59,12)_"20$|*TOTAL|[*]@TOTAL|||||||2"
 set %TAB(4)=$C(5,8,15)_"20T|*DESC(1)|[*]@DESC"
 set %TAB(5)=$C(5,30,5)_"00N|*CNT(1)|[*]@CNT|||do VP1^V00S159(.fUTBLDEN)||0"
 set %TAB(6)=$C(5,44,5)_"00N|*MUTCNT(1)|[*]@MUTCNT|||do VP2^V00S159(.fUTBLDEN)||0"
 set %TAB(7)=$C(5,57,12)_"20$|*CALCAMT(1)|[*]@CALCAMT|||||||2"
 do VTBL(.fUTBLDEN)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordUTBLDENOM fUTBLDEN) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VSPP   // screen post proc
 type Public RecordUTBLDENOM fUTBLDEN
 do VSPP1(.fUTBLDEN)
 #ACCEPT Date=11/05/03; pgm=Screen Compilerxxx
 quit
VSPP1(RecordUTBLDENOM fUTBLDEN)
 // Calculated amount must equal transaction amount 
 if TAMT,(+TOTAL'=+TAMT),VFMQ="F" set ER=1 set RM=$$^MSG(8680)  
 quit

 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordUTBLDENOM fUTBLDEN) //
 if '(X?.N) quit 
 if +V=+X quit 
 if +X<0 quit 
 new MULT,INDX,CSEQ,DESC,DIFF
 set INDX=(%PG-1)*%REPEAT
 if $G(MAST(INDX+z1))="",X set X="" quit 
 set MAST=$G(MAST(INDX+z1))
 set XAMT=$G(CALCAMT(z1))
 set MUTCNT=$G(MUTCNT(z1))
 quit:MAST="" 
 set CSEQ=$P(MAST,"|",1)
 set DESC=$P(MAST,"|",2)
 set MULT=$P(MAST,"|",4)
 set DIFF=X-V
 
 set MIN=$P(ACTCASH(CRCD,CSEQ),"|",3) set MAX=$P(ACTCASH(CRCD,CSEQ),"|",4)
 set TMP=($P(ACTCASH(CRCD,CSEQ),"|",1)+$S('DC:+X,1:-X))+($P(ACTCASH(CRCD,CSEQ),"|",2)+$G(MUTCNT))
 
 //Check to see if this transaction takes the denonimation count  negative
 if ($P(ACTCASH(CRCD,CSEQ),"|",1)+$S('DC:+X,1:-X))<0 set ER=1 set RM=$$^MSG(8682,0,DESC,CRCD) quit      // Below minimum count of ~p1 for ~p2 in ~p3
 
 //Check to see if this transaction causes the denomination count to exceed the limits
 // Below minimum count of ~p1 for ~p2 in ~p3
 if MIN'="",TMP<MIN set ER="W" set RM=$$^MSG(8682,MIN,DESC,CRCD)
       
 // Above maximum count of ~p1 for ~p2 in ~p3
 if MAX'="",TMP>MAX set ER="W" set RM=$$^MSG(8683,MAX,DESC,CRCD) 
 
 set DIFF=DIFF*MULT
 do DEFAULT^DBSMACRO("@CALCAMT",XAMT+DIFF,"1","0","0")
 do DEFAULT^DBSMACRO("@TOTAL",TOTAL+DIFF,"1","0","0")
 quit

VP2(RecordUTBLDENOM fUTBLDEN) //
 
 //not numeric
 if '(X?.N) quit
 
 //no change                 
 if +V=+X quit                          
 if +X<0 quit 
 new MULT,INDX,CSEQ,DESC,DIFF
 set INDX=(%PG-1)*%REPEAT
 if $G(MAST(INDX+z1))="",X set X="" quit 
 set MAST=$G(MAST(INDX+z1))
 set XAMT=$G(CALCAMT(z1))
 set CNT=$G(CNT(z1))
 quit:MAST="" 
 set CSEQ=$P(MAST,"|",1)
 set DESC=$P(MAST,"|",2)
 set MULT=$P(MAST,"|",4)
 set DIFF=X-V
 
 set MIN=$P(ACTCASH(CRCD,CSEQ),"|",3) set MAX=$P(ACTCASH(CRCD,CSEQ),"|",4)
 set TMP=($P(ACTCASH(CRCD,CSEQ),"|",1)+$G(CNT))+($P(ACTCASH(CRCD,CSEQ),"|",2)+$S('DC:+X,1:-X))
 
 //Check if this trans. takes count below zero
 if ($P(ACTCASH(CRCD,CSEQ),"|",2)+$S('DC:+X,1:-X))<0 set ER=1 set RM=$$^MSG(8682,0,DESC,CRCD) quit      // Below minimum count of ~p1 for ~p2 in ~p3
 
 //Check to see if this transaction takes the denonimation count  negative
 // Below minimum count of ~p1 for ~p2 in ~p3
 if $G(MIN)'="",TMP<MIN set ER="W" set RM=$$^MSG(8682,MIN,DESC,CRCD)    

 // Above maximum count of ~p1 for ~p2 in ~p3
 if $G(MAX)'="",TMP>MAX set ER="W" set RM=$$^MSG(8683,MAX,DESC,CRCD)    
 
 set DIFF=DIFF*MULT
 do DEFAULT^DBSMACRO("@CALCAMT",XAMT+DIFF,"1","0","0")
 do DEFAULT^DBSMACRO("@TOTAL",TOTAL+DIFF,"1","0","0")
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLDENOM fUTBLDEN
 do VPR(.fUTBLDEN)
 do VDA1(.fUTBLDEN)
 do ^DBSPNT()
 quit

VW(RecordUTBLDENOM fUTBLDEN)
 do VDA1(.fUTBLDEN)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLDENOM fUTBLDEN)
 do VDA1(.fUTBLDEN)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLDENOM fUTBLDEN
 do VDA1(.fUTBLDEN)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLDENOM fUTBLDEN
 if sn="UTBLDENOM" do vSET1(.fUTBLDEN,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordUTBLDENOM fUTBLDEN,di,X)
 do fUTBLDEN.setAuditFlag(1)
 set fUTBLDEN.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordUTBLDENOM fUTBLDEN
 if fid="UTBLDENOM" quit $$vREAD1(.fUTBLDEN,di)
 quit ""
vREAD1(RecordUTBLDENOM fUTBLDEN,di)
 quit fUTBLDEN.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 //
VSCRPRE(RecordUTBLDENOM fUTBLDEN)  // Screen Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //

 #ACCEPT date=11/05/03;PGM=Screen Compiler
 quit
 //
VDSPPRE(RecordUTBLDENOM fUTBLDEN)  // Display Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
 set TAMT=SAVAMT
 quit

 #ACCEPT date=11/05/03;PGM=Screen Compiler
 quit
