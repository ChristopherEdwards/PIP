R01S422	// SCA455 - Job Queue Statistics
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:49 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String FDT,TDT
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String EVENT
	type Date VIN2
	type Date VIN3

	set RID="SCA455"
	set RN="Job Queue Statistics"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("EVENT")="|12|||[UTBLEVENT]||||T|Event Name|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN2")="|10||[QUEUEHD]TJD|[QUEUEHD]TJD:DISTINCT:NOVAL||S FDT=$$^SCAJD(X,$G(%MSKD))||D|From Date|||||"
	set %TAB("VIN3")="|10||[QUEUEHD]TJD|[QUEUEHD]TJD:DISTINCT:NOVAL||S TDT=$$^SCAJD(X,$G(%MSKD)) I TDT<FDT S ER=1,RM=$$^MSG(6680)||D|Through Date|||||"

	set %READ="IO/REQ,EVENT#1,VIN2#1,VIN3#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String FDT,TDT
	type public Date VIN2,VIN3
	type public String EVENT
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,BATCHES(),CONAM,ELAPSED,FDTDSP,FUNDSC,N,RID,RN,TDTDSP,VL,VLOF,VRF(),VSTATS(),XXX,vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA455",RN="Job Queue Statistics"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA455","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:5 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:1 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("QUEUEHD.BCHNUM,QUEUEHD.JOBNUM,QUEUEHD.FUN,QUEUEHD.TJD,QUEUEHD.SEQ,QUEUEHD.STIM,QUEUEHD.CTIM","QUEUEHD","QUEUEHD.TJD NOT <:VIN2 AND QUEUEHD.TJD NOT >:VIN3 AND QUEUEHD.CMT='Successful completion'","QUEUEHD.BCHNUM,QUEUEHD.JOBNUM,QUEUEHD.FUN,QUEUEHD.TJD,QUEUEHD.SEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7
	set vc1=V.piece($C(9),1)			// QUEUEHD.BCHNUM
	set vc2=V.piece($C(9),2)			// QUEUEHD.JOBNUM
	set vc3=V.piece($C(9),3)			// QUEUEHD.FUN
	set vc4=V.piece($C(9),4)			// QUEUEHD.TJD
	set vc5=V.piece($C(9),5)			// QUEUEHD.SEQ
	set vc6=V.piece($C(9),6)			// QUEUEHD.STIM
	set vc7=V.piece($C(9),7)			// QUEUEHD.CTIM
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	type public Date FDT, TDT
	type public String BATCHES(), EVENT, FDTDSP, N, TDTDSP

	set FDTDSP = FDT.toString()
	set TDTDSP = TDT.toString()

	// Get list of batches in this event to be used by query
	kill BATCHES

	type ResultSet rs = Db.select("BATCH", "UTBLEBCH", "EVENT=:EVENT")
	while rs.next() set BATCHES(rs.getCol("BATCH")) = ""
	quit

VPREBQ	// Pre-processor (before query)

	//Incoming=FDT,TDT
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(1).get() do VDTL1 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(5)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5
	type Number vb1,vb2,vb3,vb4,vb5
	set (vb1,vb2,vb3,vb4,vb5)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1
	if vb4!(vovc4'=vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),ELAPSED
	type Public String VSTATS

	set VT(5)=VT(5)+1
	set VT(5,1,1)=VT(5,1,1)+ELAPSED			// @AVG(<<ELAPSED>>)
	if VT(5,1,2)=""!(ELAPSED>VT(5,1,2)) set VT(5,1,2)=+ELAPSED	// @MAX(<<ELAPSED>>)
	if VT(5,1,3)=""!(ELAPSED<VT(5,1,3)) set VT(5,1,3)=+ELAPSED	// @MIN(<<ELAPSED>>)
	quit

VDTL1	// Detail
	type public String %TIM,BATCHES(),ELAPSED,EVENT,FDT,FDTDSP,FUNDSC,IOSL,N,TDT,TDTDSP,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),XXX,vc1,vc2,vc3,vc4,vc5,vc6,vc7,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	quit:VD(1)  set VD(1)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	do VP1 quit:VFMQ!verror.get()  set V=$E(XXX,1,1) set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM4	// Summary
	type public String %TIM,BATCHES(),ELAPSED,EVENT,FDT,FDTDSP,FUNDSC,I,IOSL,N,TDT,TDTDSP,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),XXX,vc1,vc2,vc3,vc4,vc5,vc6,vc7,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	if 'VT(4) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ

	set VL=$J(vc1,7)
	set VL=VL_$J("",9-VL.length())_$J(vc2,3)
	set V=vc3,VO=V set V=$E(V,1,20) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",14-VL.length())_V
	set VL=VL_$J("",36-VL.length())_$E(FUNDSC,1,40)
	set V=VT(4,1,3)					// @MIN(<<ELAPSED>>,)
	set V=$E(V,1,8) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",81-VL.length())_V		// @MIN(<<ELAPSED>>,)
	set V=VT(4,1,2)					// @MAX(<<ELAPSED>>,)
	set V=$E(V,1,8) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",93-VL.length())_V		// @MAX(<<ELAPSED>>,)
	do {
		// Continue with V="" if divide by zero error
		catch error {
			if '(error.type["DIV"&(error.type["ZERO")) throw error
			set V=""
			}
		set V=$S(VT(4):VT(4,1,1)/VT(4),1:0)	// @AVG(<<ELAPSED>>,)
		}
	set V=$E(V,1,8) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",105-VL.length())_V		// @AVG(<<ELAPSED>>,)
	set V=VT(4)					// @CNT(,N,3)
	set V=$J(V,3) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",124-VL.length())_V		// @CNT(,N,3)
	if 'VL.translate(" ").isNull() do VOM
	quit

VDTL5	// Detail
	type public String %TIM,BATCHES(),ELAPSED,EVENT,FDT,FDTDSP,FUNDSC,IOSL,N,TDT,TDTDSP,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),XXX,vc1,vc2,vc3,vc4,vc5,vc6,vc7,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	do VP7 quit:VFMQ!verror.get()  set V=$E(ELAPSED,1,8) do VP8 quit:VFMQ!verror.get()  set VL="                                                                                 "_V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BATCHES(),CONAM,ELAPSED,EVENT,FDT,FDTDSP,FUNDSC,N,RID,RN,TDT,TDTDSP,VL,XXX,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="Event "
	set VL=VL_$J("",6-VL.length())_$E(EVENT,1,12)
	set VL=VL_$J("",19-VL.length())_"For Period "
	set VL=VL_$J("",30-VL.length())_$J($$DAT^%ZM(FDT),10)
	set VL=VL_$J("",41-VL.length())_"through "
	set VL=VL_$J("",49-VL.length())_$J($$DAT^%ZM(TDT),10)
	do VOM
	set VL="                                                                                  "_"------- Time (hh:mm:ss) -------"
	do VOM
	set VL="  "_"Batch  Job  Function              Function Description                          Minimum     Maximum     Average   Occurrences"
	do VOM
	set VL="================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: XXX

	type public String vc1
	// Force a blank line between batch numbers

	// If batch not in this event, make blank for blank line suppress

	type public String BATCHES(), XXX, V, VL

	if BATCHES(vc1).data() set XXX = $C(9)
	else  set (XXX, V, VL) = ""
	quit

VP2	// Column post-processor - [SYSDEV,QUEUEHD]FUN

	type public String FUNDSC, V

	type RecordSCATBL scatbl = Db.getRecord("SCATBL", "FN=:V", 1)

	set FUNDSC = scatbl.desc
	quit

VP3	// Column post-processor - @MIN(<<ELAPSED>>,,T,8)

	type public String V

	set V = $$TIME(V)

	quit


TIME(Number SECONDS) // Convert seconds to hh:mm:ss for this report
	quit $$FMT(SECONDS \ 3600)_":"_$$FMT((SECONDS # 3600) \ 60)_":"_$$FMT(SECONDS # 60)


FMT(Number X) // Format to 2 positions with leading zero

	quit (100 + X).extract(2, 3)

VP4	// Column post-processor - @MAX(<<ELAPSED>>,,T,8)

	type public String V

	set V = $$TIME(V)
	quit

VP5	// Column post-processor - @AVG(<<ELAPSED>>,,T,8)

	type public String V

	set V = $$TIME(V)
	quit

VP6	// Column post-processor - @CNT(,N,3)

	type public String vc1
	type public String BATCHES(), V, VL

	if 'BATCHES(vc1).data() set (V, VL) = ""
	quit

VP7	// Column pre-processor - Variable: ELAPSED

	type public String vc6,vc7
	// Calculate elapsed time in seconds

	type public Number ELAPSED

	type Number END, START

	set START = vc6
	set END = vc7


	if (START > END) set END = END + 86400 // Add one day

	set ELAPSED = END-START
	quit

VP8	// Column post-processor - Variable: ELAPSED

	type public String V, VL

	set (V,VL) = ""
	quit
