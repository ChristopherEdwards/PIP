public LNEASTM	// DBS - REP - 4.2 - ESCROW ANALYSIS DISCLOSURE STATEMENT DRIVER
	/*

	  ---- Revision History -------------------------------------------------
	
	07/31/06 - KELLYP - CR 22048
		   Modified VQUERY9 section to eliminate DYNAMIC warning.
	  
	04/22/06 - RussellDS - CR20861
		   Modify to eliminate the use of DBSQRYA and simply use WHERE
		   clause to handle queries and use a join on LNAPCHG and LN
		   to select the records.  Eliminate MIN/MAX usage as well.
		   
		   NOTE:  Query for BOO was not being used.  It is now used.
	  
	02/09/06 - SWARNALP - 18338
		   Deleted APD section which builds the date and included the 
		   lookup directly while setting %TAB for APCND.
		   Modified LCID section to save the fields TYPE and BOO for 
		   loan records since the same is referred later in the reports.
		   Modified ECID section 
		   	1.  to save the field REMTOT from LNAPCHGE to be used in 
		   	the reports later if APCLD is not Null and 
		   	2.  to correct the code to increment the statement count 
		   	if only the selected record in LNAPCHGE is empty.
		   	3.  to pass the LNAPCHGE object as one of the parameter 
		   	to PROSTM section in order to pass the same to EXEC section  
		   	while calling LNEA procedure.
		   Modified PROSTM, HISTSTM, ANSTM, PRANSTM to correct the report 
		   calling functionality.
		   Modified VQUERY9 section to initialize LCID with a negative 
		   value if LCID is null to avoid the "Insufficient Values" oracle 
		   error while fetching records from LNAPCHG with CID greater 
		   than LCID.

	12/10/03 - CARROLLJ - CR7239
		   Added #ACCEPT prior execute command to correct compile
		   errors.

	09/24/03 - CARROLLJ - 51630
		   Modified ECID section to remove toArray.

	11/08/02 - Diana Shvachkina - 49794
		   Converted to PSL.


	*/

	do VQUERY
	
	quit

VQUERY	// User Defined Run-Time Query

	kill %TAB,Q,QI,OLNTB
	new APD
	type Number PGN
	
	type Number IO

	set RERUN=""
	set OLNTB=31
	#ACCEPT DATE=12/10/03;PGM=John Carroll
	if '$D(%InputTmeOut) set %InputTimeOut=300 
	if '$D(%LIBS) set %LIBS="SYSDEV"
	set QI(1)="" 
	set QI(4)="ALL"

	set SEQBY="[SYSDEV,LNAPCHG]APCND|[SYSDEV,LNAPCHG]CID|[SYSDEV,LNAPCHGE]CID|"

	set %TAB("QI(1)")=".APCND2/HLP=[LNAPCHG]APCND/TBL=[LNAPCHG]APCND:DISTINCT/XPP=D EXT^DBSQRY"
	set %TAB("QI(2)")=".A5/HLP=[LN]BOO/XPP=D EXT^DBSQRY"
	set %TAB("QI(3)")=".QI1/HLP=[LN]TYPE/XPP=D EXT^DBSQRY"
	set %TAB("QI(4)")=".ACCOUNTS1/HLP=[LNAPCHG]CID/XPP=D EXT^DBSQRY"
	set %TAB("IO")=$$IO^SCATAB 
	if '$D(IO) set IO=$I

	set %READ="@@%FN,,,QI(1)/REQ,QI(2)/REQ,QI(3)/REQ,QI(4)/REQ,IO"
	if $D(%NOOPEN) set %READ=$P(%READ,",",2,99)
	if $G(%MODE)="B",%READ="IO#1"
	do ^UTLREAD
	kill zRN
	if VFMQ="Q" quit
	do VQUERY9
	quit

VQUERY9	//

	type public String Q(,)

	type String WHERE
	
	set WHERE = $$Q2SQL^SQLCONV(.Q())
	
	set WHERE = "("_WHERE_") AND (LNAPCHG.CID=LN.CID)"
	
	do OPEN^SCAIO quit:ER  use IO

	set (STCNT,PCNT)=0
	
	#ACCEPT DATE=07/31/06;PGM=KELLYP;CR=unknown
	type ResultSet rs = Db.select("CID,APCND", "LNAPCHG,LN", WHERE, "CID ASC")
	
	while rs.next() do {
		
		type Number LCID
		
		set LCID = rs.getCol("CID")
		set APCND = rs.getCol("APCND")
		if (APCND < %SystemDate) set RERUN = 1
		
		set DATE = APCND
		
		do LCID
	}

	do VEXITZ
	
	quit
	

LCID	// Process loan accounts

	type public Date APCND
	type public Number LCID

	type RecordLN ln=Db.getRecord("LN","CID=:LCID")
		
	for I=1:1:5 set NM(I)=""
	set NM="NM"
	do ^UTLADDR(,.NM,5,2,"ACN",LCID)

	// P&I Payment Change Next Date
	set PCHND=ln.pchnd
	// Analysis Frequency
	set ANFRE=ln.anfre
	// Analysis Payment Change Last Date
	set APCLD=ln.apcld
	// Escrow Analysis Pmt Change Next Date
	set ANADT=ln.apcnd-1
	// Escrow Analysis Change in Process
	set EACIP=ln.eacip
	set PGN=0
	do ECID(.ln)

	quit

ECID(RecordLN ln)	// Process escrow accounts
	/*

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF

	*/	
 	type ResultSet lnapchgers=Db.select("ECID","LNAPCHGE","APCND=:APCND AND CID=:LCID") 
	if 'lnapchgers.isEmpty() while lnapchgers.next() do {
		set CID=lnapchgers.getCol(1)
		// All transfer types are self-pay
		if $$ESCSPF^LNU(CID) quit

		type RecordLNAPCHG lnapchg=Db.getRecord("LNAPCHG","APCND=:APCND,CID=:LCID")
		type RecordLNAPCHGE lnapchge=Db.getRecord("LNAPCHGE","APCND=:APCND,CID=:LCID,ECID=:CID")
		
		if APCLD'="" do {
			type RecordLNAPCHGE lnapchge1=Db.getRecord("LNAPCHGE","APCND=:APCLD,CID=:LCID,ECID=:CID")
			set PPEABE=lnapchge1.remtot
			}
		else  set PPEABE=""

		if 'Db.isDefined("DEP","CID") quit
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		if dep.stat=4 quit      // Closed account
		
		type ResultSet lners=Db.select("ECID","LNAPCHGE","APCND=:APCND AND CID=:LCID AND ECID>:CID")
		if lners.isEmpty() set STCNT=STCNT+1

		// Dates for the history statement
		set BJD=""
		if 'RERUN set BJD=APCLD
		if 'BJD do { quit:ER
			set BJD=$$NJD^UFRE(APCND,ANFRE,,1) quit:ER
			if BJD<dep.odt set BJD=dep.odt
			}
		set EJD=APCND-1
		// Escrow Priority Type
		set ESC=lnapchge.ept
		//  Escrow - New Payment
		set ADJEPMT=lnapchge.epmt
		// Actual Low Balance
		set LOWBALA=lnapchge.lowbala
		// Cushion Amount
		set CUSH=lnapchge.cush

		kill LNESTMT

		if RERUN set ANDT=dep.anpdt
		else  if APCND>%SystemDate,EACIP=1 set ANDT=dep.anpdt
		else  set ANDT=dep.andt

		do PROSTM(.ln,.lnapchge)
		set HSTMT=0 
		do HISTSTM(.ln)
		do ANSTM(.ln,.dep,.lnapchge)
		do PRANSTM
		}
	quit

PROSTM(RecordLN ln,RecordLNAPCHGE lnapchge)	// Escrow Analysis Statements report
	/*

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF
		
	*/

	type Public Cache %CUVAR
	
	type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")

	set SAVCID=CID
	set SAVLCID=LCID
	set ECID=CID
	set CTL="02"
	do EXEC^LNEA(.ln,.lnapchge,LCID,.LNEAM,ESC,.APCND,.TD,CTL,.DATA)
	// Report expects CID to be loan account's CID
	set CID=$G(LCID)
	set %NOCLOSE=""
	set %BLK="/,"_IO
	set RID=cuvar.eaps
	if RID="" set RID="SCA042A"
	do DRV^URID 
	if PGM="" do { quit
		set ER=1
		set ET="INVLDRPT"
		do ^UTLERR
		}

	set CID=SAVCID
	set LCID=SAVLCID
	if 'RERUN do LNESTMT
	do Db.delete("LNEAM")
	kill LNEAM,RAMT

	quit

HISTSTM(RecordLN ln)	// Escrow Account History Statement
	/*
	  If the date of the lowest balance from the previous projection is
	  greater than the date of the offcycle, the history statement SCA042C
	  will be produced which shows history only.

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF


	*/

	type public Cache %CUVAR
	
	type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")

	// Escrow Analysis Pmt Change Next Date
	if DATE'=ln.apcnd do LOWBAL
	if 'HSTMT quit
	if ln.hisctf>BJD set BJD=ln.hisctf
	set ECID=SAVCID
	set %NOCLOSE=""
	set %BLK="/,"_IO_","_CID
	set RID=cuvar.ehds 
	if RID="" set RID="SCA042C"
	do DRV^URID 
	if PGM="" do { quit
		set ER=1
		set ET="INVLDRPT"
		do ^UTLERR
		}

	set CID=SAVCID 
	set LCID=SAVLCID

	kill HST
	quit

ANSTM(RecordLN ln,RecordDEP dep,RecordLNAPCHGE lnapchge)	
	/*
	  Print Escrow Analysis Disclosure statement.

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF

		. dep	Deposit Account Object	TYP=RecordDEP/REQ/MECH=REF

	*/

	/*
	  If HSTMT is set to a 1, then the history only statement printed
	  and there is no need for the history information report to print
	*/
	
	if HSTMT=1 quit

	type Public Cache %CUVAR
	type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")
	set ECID=SAVCID
	set %NOCLOSE=""
	set APCND=DATE

	// Calculate cushion values for SCA042D report
	do CUSHO(.ln,.dep,.lnapchge)
	// Calculate ALOWBAL value for report
	do ALOWBAL

	set %BLK="/,"_IO_","_CID
	set RID=cuvar.eadhs 
	if RID="" set RID="SCA042D"
	do DRV^URID
	if PGM="" do { quit
		set ER=1
		set ET="INVLDRPT"
		do ^UTLERR
		}

	set CID=SAVCID
	set LCID=SAVLCID

	kill HST
	quit

PRANSTM	// Print Prior Analysis projection

	type Public Cache %CUVAR
	
	type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")
	set ECID=SAVCID
	// No previous projection
	if 'ANDT quit
	if 'Db.isDefined("LNESTMT2","ANDT=:ANDT,LCID=:LCID,ECID=:ECID") quit
	set %NOCLOSE=""
	set %BLK="/,"_IO_","_ANDT_","_LCID_","_ECID
	set RID=cuvar.eapps 
	if RID="" set RID="SCA042B"
	do DRV^URID
	if PGM="" do { quit
		set ER=1
		set ET="INVLDRPT"
		do ^UTLERR
		}

	set CID=SAVCID
	set LCID=SAVLCID

	quit

LNESTMT	// Create LNESTMT* records to save projections for next analysis

	// Most of the variables and array LNEAM were built in LNEA procedure
	type RecordLNESTMT lnestmt=Class.new("RecordLNESTMT")
	set lnestmt.andt=APCND
	set lnestmt.lcid=LCID
	set lnestmt.thrudt=TD
	set lnestmt.pmt=MPMT
	set lnestmt.pmtpi=CPI
	set lnestmt.pmttrs=NTRS
	do lnestmt.bypassSave()

	type RecordLNESTMT2 lnestmt2=Class.new("RecordLNESTMT2")
	set lnestmt2.andt=APCND
	set lnestmt2.lcid=LCID
	set lnestmt2.ecid=CID
	set lnestmt2.remtot=""
	set lnestmt2.cush=CUSH
	// Added the $TR to make sure that no coma's are filed.  12/12/96 jcl
	set lnestmt2.ovg=$TR(OVG,",","")
	set lnestmt2.sht=$TR(SHTG,",","")
	set lnestmt2.def=$TR(DEF,",","")
	set lnestmt2.inidep=INIDEP
	set lnestmt2.begbal=BEGBAL
	set lnestmt2.odm=ODM
	set lnestmt2.sdm=SDM
	set lnestmt2.ddm=DDM
	set lnestmt2.adjepmt=ADJEPMT
	do lnestmt2.bypassSave()
			
	new ACTJD
	set ACTJD="" 
	for  set ACTJD=$O(LNEAM(ACTJD)) quit:ACTJD=""  do {
		type RecordLNESTMT3 lnestmt3=Class.new("RecordLNESTMT3")
		set lnestmt3.andt=APCND
		set lnestmt3.lcid=LCID
		set lnestmt3.ecid=CID
		set lnestmt3.actjd=ACTJD
		set lnestmt3.escpmt=$P(LNEAM(ACTJD),"|",1)
		set lnestmt3.remant=$P(LNEAM(ACTJD),"|",2)
		set lnestmt3.bal=$P(LNEAM(ACTJD),"|",3)
		set lnestmt3.desc=$P(LNEAM(ACTJD),"|",4)
		do lnestmt3.bypassSave()
		}
	quit


Public HRAMT	// Build History Remittance Amount per Effective Date from BJD thru EJD

	// This section is only called from SCA042D report
	if Db.isDefined("LNESTMT2","ANDT=:ANDT,LCID=:LCID,ECID=:ECID") do {
		new DATE,TT
		type DbSet lnestmt3ds=Db.selectDbSet("LNESTMT3","ANDT=:ANDT AND LCID=:LCID AND ECID=:ECID")
		while lnestmt3ds.next() do {
			type RecordLNESTMT3 lnestmt3=lnestmt3ds.getRecord()
			set DATE=$$DAT^%ZM(lnestmt3.actjd,"MMYY")
			set TT=lnestmt3.trtype
			if TT="" quit
			set LNESTMT(DATE,TT)=lnestmt3.escpmt_"|"_lnestmt3.remant_"|"_lnestmt3.bal_"|"_lnestmt3.desc
			}
		}
	quit

VEXITZ	// Processing finished

	//       I18N=OFF:       Excluded from I18N Standards
	set ER=0
	write #!!!!!,$$^MSG("4992"),STCNT
	write !,$$^MSG("4991"),PCNT,# do CLOSE^SCAIO
	kill %NOOPEN,%NOCLOSE,%NOSORT,%ALTFID,%BPSTOCT,VBPSTOCT,VTOTREC
	//       I18N=ON:        Included to I18N Standards
	quit


LOWBAL	// Check if lowest monthly projected balance falls within short period
	/*
	   If the date of the lowest balance from the previous projection is
	   greater than the date of the offcycle, the history statement SCA041C
	   will be produced which shows history only.
	*/
	new LOWBAL
	if RERUN,APCLD=DATE quit
	set EJD=DATE-1
	if 'ANDT set HSTMT=1 quit
	if $G(ECID)="" set ECID=SAVCID

	if 'Db.isDefined("LNESTMT2","ANDT=:ANDT,LCID=:LCID,ECID=:ECID") set HSTMT=1 quit
	
	type DbSet lne3ds=Db.selectDbSet("LNESTMT3","ANDT=:ANDT AND LCID=:LCID AND ECID=:ECID")
	while lne3ds.next() do {
		type RecordLNESTMT3 lnestmt3=lne3ds.getRecord()
		if '$D(LOWBAL) do {
			set LOWBAL=lnestmt3.bal
			set LOWDATE=lnestmt3.actjd
			}
		else  if lnestmt3.bal<LOWBAL do {
			set LOWBAL=lnestmt3.bal
			set LOWDATE=lnestmt3.actjd
			}
		}

	if LOWDATE>DATE set HSTMT=1
	quit

CUSHO(RecordLN ln,RecordDEP dep,RecordLNAPCHGE lnapchge)
	/*
	 Calculate actual cushion for history statement.

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF

		. dep	Deposit Account Object	TYP=RecordDEP/REQ/MECH=REF
	*/

	set TOTREM=lnapchge.remtot
	set CUSHO=""
	// Cushion option
	set CUSHO=$$VAL(.ln,.dep,1)
	// Option=0 - cushion is percentage of total annual remittance
	if 'CUSHO set CUSH=$$^SCARND($$VAL(.ln,.dep,3)*TOTREM,0,CID)
	// Option=1 - cushion is flat amount
	if CUSHO=1 set CUSH=$$VAL(.ln,.dep,2) 
	quit

VAL(RecordLN ln,RecordDEP dep,IND)	
	/*
	 Returns cushion values for escrow, if defined, otherwise loan account.

	ARGUMENTS:
		. ln	Loan Account Object	TYP=RecordLN/REQ/MECH=REF

		. dep	Deposit Account Object	TYP=RecordDEP/REQ/MECH=REF	 

		. IND	Value Indicator		TYP=N/REQ/MECH=VAL
		  1  - Cushion Option
		  2  - Cushion Amount
		  3  - Cushion Factor
	*/                  

	new CUSHVAL
	set CUSHVAL=""
	if IND=1 do {
		set CUSHVAL=dep.cusho
		if CUSHVAL="" set CUSHVAL=ln.cusho
		}

	if IND=2 do {
		set CUSHVAL=dep.cusha
		if CUSHVAL="" set CUSHVAL=ln.cusha
		}		

	if IND=3 do {
		set CUSHVAL=dep.cushf
		if CUSHVAL="" set CUSHVAL=ln.cushf
		}

	quit CUSHVAL

ALOWBAL	// Find actual low balance in history period

	set ALOWBAL=""
	type ResultSet histrs=Db.select("ENDBAL","HIST","CID=:CID AND ITC IS NOT NULL AND ITC6<>1 AND ENDBAL IS NOT NULL AND TJD BETWEEN :BJD AND :EJD")
	if 'histrs.isEmpty() while histrs.next() do {
		new ENDBAL
		set ENDBAL=histrs.getCol(1)
		if ALOWBAL="" set ALOWBAL=ENDBAL quit
		if ENDBAL<ALOWBAL set ALOWBAL=ENDBAL
		}
	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "60477^65452^Pat Kelly^12361"	// Signature - LTD^TIME^USER^SIZE
