AOAMOFL(RecordAOAMO aoamo, String vpar, Boolean vparNorm) // AOAMO - Dealer/Ins/Def Fee User Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (47)             04/04/2007
	// Trigger Definition (2)                      03/12/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = aoamo.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(aoamo,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(aoamo,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TYP = aoamo.typ
	type String PAYEE = aoamo.payee
	type String PLAN = aoamo.plan

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TYP").exists()!vx("PAYEE").exists()!vx("PLAN").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("AOAMO",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("AOAMO","TYP = :aoamo.typ and PAYEE = :aoamo.payee and PLAN = :aoamo.plan") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TYP
	type public String PAYEE
	type public String PLAN

	type RecordAOAMO aoamo = Db.getRecord("AOAMO","TYP=:TYP,PAYEE=:PAYEE,PLAN=:PLAN")
	if (%ProcessMode = 2) do {
		do aoamo.setMode(2)

		do AOAMOFL(aoamo,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordAOAMO aoamo

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("AOAMO","TYP = :aoamo.typ and PAYEE = :aoamo.payee and PLAN = :aoamo.plan") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(aoamo,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(aoamo,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(aoamo)) S ^UTBL("AOAMO",vobj(aoamo,-3),vobj(aoamo,-4),vobj(aoamo,-5))=vobj(aoamo)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordAOAMO aoamo

	if vpar'["/NOLOG/" do ^DBSLOGIT(aoamo,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("AOAMO",vobj(aoamo,-3),vobj(aoamo,-4),vobj(aoamo,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordAOAMO aoamo

	// Type local variables for access keys for defaults
	type public String TYP
	type public String PAYEE
	type public String PLAN

	if aoamo.apr.isNull() set aoamo.apr = 0                // apr
	if aoamo.bef.isNull() set aoamo.bef = 0                // bef
	if aoamo.bes.isNull() set aoamo.bes = 0                // bes
	if aoamo.glc.isNull() set aoamo.glc = 0                // glc
	if aoamo.gld.isNull() set aoamo.gld = 0                // gld
	if aoamo.iflg.isNull() set aoamo.iflg = 0              // iflg
	if aoamo.rcm.isNull() set aoamo.rcm = 0                // rcm
	if aoamo.rdtl.isNull() set aoamo.rdtl = 0              // rdtl
	if aoamo.rypc.isNull() set aoamo.rypc = 0              // rypc
	if aoamo.spp.isNull() set aoamo.spp = 0                // spp
	quit


vreqn // Validate required data items

	type public RecordAOAMO aoamo

	if aoamo.apr.isNull() do vreqerr("APR") quit
	if aoamo.bef.isNull() do vreqerr("BEF") quit
	if aoamo.bes.isNull() do vreqerr("BES") quit
	if aoamo.glc.isNull() do vreqerr("GLC") quit
	if aoamo.gld.isNull() do vreqerr("GLD") quit
	if aoamo.iflg.isNull() do vreqerr("IFLG") quit
	if aoamo.rcm.isNull() do vreqerr("RCM") quit
	if aoamo.rdtl.isNull() do vreqerr("RDTL") quit
	if aoamo.rypc.isNull() do vreqerr("RYPC") quit
	if aoamo.spp.isNull() do vreqerr("SPP") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordAOAMO aoamo

	if aoamo.typ.isNull() do vreqerr("TYP") quit
	if aoamo.payee.isNull() do vreqerr("PAYEE") quit
	if aoamo.plan.isNull() do vreqerr("PLAN") quit

		if vx("APR").exists(),aoamo.apr.isNull() do vreqerr("APR") quit
		if vx("BEF").exists(),aoamo.bef.isNull() do vreqerr("BEF") quit
		if vx("BES").exists(),aoamo.bes.isNull() do vreqerr("BES") quit
		if vx("GLC").exists(),aoamo.glc.isNull() do vreqerr("GLC") quit
		if vx("GLD").exists(),aoamo.gld.isNull() do vreqerr("GLD") quit
		if vx("IFLG").exists(),aoamo.iflg.isNull() do vreqerr("IFLG") quit
		if vx("RCM").exists(),aoamo.rcm.isNull() do vreqerr("RCM") quit
		if vx("RDTL").exists(),aoamo.rdtl.isNull() do vreqerr("RDTL") quit
		if vx("RYPC").exists(),aoamo.rypc.isNull() do vreqerr("RYPC") quit
		if vx("SPP").exists(),aoamo.spp.isNull() do vreqerr("SPP") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("AOAMO","MSG",1767,"AOAMO."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PLDATE").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert Trigger

	type public RecordAOAMO aoamo
	/*
	---- Revision History ------------------------------------------------	

	03/12/07 - KumarSS - 25678
		   Modified to enforce this edit check only if the ending date
		   is defined.

	11/15/06 - GIRIDHAL - CR 23280
		   Trigger created to check end date not lesser than beginning
		   date.

	----------------------------------------------------------------------
	*/

	// Ending date must be after beginning date
	if aoamo.pldate,(aoamo.pldate < aoamo.pbdate) do Runtime.setErrMSG("AOAMO",896) quit
	
	quit

vau1 // Trigger AFTER_UPDATE - After Update Trigger

	type public RecordAOAMO aoamo
	/*
	---- Revision History ------------------------------------------------	

	03/12/07 - KumarSS - 25678
		   Modified to enforce this edit check only if the ending date
		   is defined.

	11/15/06 - GIRIDHAL - CR 23280
		   Trigger created to check end date not lesser than beginning
		   date.

	----------------------------------------------------------------------
	*/

	// Ending date must be after beginning date
	if aoamo.pldate,(aoamo.pldate < aoamo.pbdate) do Runtime.setErrMSG("AOAMO",896) quit
	
	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordAOAMO aoamo

	set X = aoamo.typ if 'X.isNull(),'Db.isDefined("STBLAOTYP","X") set vRM = $$^MSG(1485,X) do vdderr("TYP", vRM) quit
	if aoamo.payee.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYEE", vRM) quit
	if aoamo.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	if '("01"[aoamo.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
	if '("01"[aoamo.BEF) set vRM=$$^MSG(742,"L") do vdderr("BEF", vRM) quit
	if '("01"[aoamo.BES) set vRM=$$^MSG(742,"L") do vdderr("BES", vRM) quit
	set X = aoamo.cgl if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CGL", vRM) quit
	set X = aoamo.cif if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CIF", vRM) quit
	set X = aoamo.cmet if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CMET", vRM) quit
	set X = aoamo.cnagl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("CNAGL", vRM) quit
	if aoamo.cnatr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CNATR", vRM) quit
	set X = aoamo.cnt if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CNT", vRM) quit
	set X = aoamo.ctran if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("CTRAN", vRM) quit
	set X = aoamo.dcp if 'X.isNull() set vRM = $$VAL^DBSVER("$",8,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AOAMO.DCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = aoamo.decline if 'X.isNull(),X'?1.8N,X'?1"-"1.7N set vRM=$$^MSG(742,"N") do vdderr("DECLINE", vRM) quit
	set X = aoamo.dgl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DGL", vRM) quit
	set X = aoamo.dnagl if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("DNAGL", vRM) quit
	if aoamo.dnatr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("DNATR", vRM) quit
	set X = aoamo.drcdd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DRCDD", vRM) quit
	set X = aoamo.drcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"AOAMO.DRCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if aoamo.drcs.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DRCS", vRM) quit
	set X = aoamo.dtran if 'X.isNull(),'Db.isDefined("TRN","X") set vRM = $$^MSG(1485,X) do vdderr("DTRAN", vRM) quit
	set X = aoamo.fmet if 'X.isNull(),'Db.isDefined("STBLFMET","X") set vRM = $$^MSG(1485,X) do vdderr("FMET", vRM) quit
	set X = aoamo.fre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[AOAMO]FRE",0) if 'vRM.get().isNull() do vdderr("FRE", vRM) quit
	if '("01"[aoamo.GLC) set vRM=$$^MSG(742,"L") do vdderr("GLC", vRM) quit
	if '("01"[aoamo.GLD) set vRM=$$^MSG(742,"L") do vdderr("GLD", vRM) quit
	if '("01"[aoamo.IFLG) set vRM=$$^MSG(742,"L") do vdderr("IFLG", vRM) quit
	set X = aoamo.met if 'X.isNull(),'Db.isDefined("STBLAOAMO","X") set vRM = $$^MSG(1485,X) do vdderr("MET", vRM) quit
	set X = aoamo.mxage if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("MXAGE", vRM) quit
	set X = aoamo.mxamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AOAMO.MXAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = aoamo.mxmnben if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AOAMO.MXMNBEN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = aoamo.mxtrm if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MXTRM", vRM) quit
	set X = aoamo.npdy if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("NPDY", vRM) quit
	set X = aoamo.oprf if 'X.isNull(),'Db.isDefined("STBLOPRF","X") set vRM = $$^MSG(1485,X) do vdderr("OPRF", vRM) quit
	set X = aoamo.paidby if 'X.isNull(),'Db.isDefined("STBLIPDBY","X") set vRM = $$^MSG(1485,X) do vdderr("PAIDBY", vRM) quit
	set X = aoamo.pbdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PBDATE", vRM) quit
	if aoamo.pdes.length()>30 set vRM = $$^MSG(1076,30) do vdderr("PDES", vRM) quit
	set X = aoamo.pldate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PLDATE", vRM) quit
	if '("01"[aoamo.RCM) set vRM=$$^MSG(742,"L") do vdderr("RCM", vRM) quit
	if '("01"[aoamo.RDTL) set vRM=$$^MSG(742,"L") do vdderr("RDTL", vRM) quit
	set X = aoamo.rfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[AOAMO]RFRE",0) if 'vRM.get().isNull() do vdderr("RFRE", vRM) quit
	set X = aoamo.rpd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"AOAMO.RPD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = aoamo.ryfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[AOAMO]RYFRE",0) if 'vRM.get().isNull() do vdderr("RYFRE", vRM) quit
	if '("01"[aoamo.RYPC) set vRM=$$^MSG(742,"L") do vdderr("RYPC", vRM) quit
	if '("01"[aoamo.SPP) set vRM=$$^MSG(742,"L") do vdderr("SPP", vRM) quit
	if aoamo.tes.length()>10 set vRM = $$^MSG(1076,10) do vdderr("TES", vRM) quit
	set X = aoamo.vfrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,8) if 'vRM.isNull() set vRM = $$^MSG(979,"AOAMO.VFRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("AOAMO","MSG",979,"AOAMO."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordAOAMO aoamo

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	if vx("PAYEE").exists() set vux("PAYEE") = vx("PAYEE")
	if vx("PLAN").exists() set vux("PLAN") = vx("PLAN")
	do vkey(1) set voldkey = aoamo.typ_","_aoamo.payee_","_aoamo.plan // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = aoamo.typ_","_aoamo.payee_","_aoamo.plan // Copy new keys into object
	type RecordAOAMO vnewrec = aoamo.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("AOAMO",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordAOAMO aoamo

	if vux("TYP").exists() set aoamo.typ = vux("TYP").piece("|",i)
	if vux("PAYEE").exists() set aoamo.payee = vux("PAYEE").piece("|",i)
	if vux("PLAN").exists() set aoamo.plan = vux("PLAN").piece("|",i)
	quit
