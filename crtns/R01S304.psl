R01S304	// SCA303 - Account Balances Report by G/L Set Code
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:56 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1="ALL"

	set RID="SCA303"
	set RN="Account Balances Report by G/L Set Code"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[UTBLGLSC]GLSC|[UTBLGLSC]GLSC:DISTINCT:NOVAL||D EXT^DBSQRY||T|G/L Set Code|||||"

	set %READ="IO/REQ,VIN1#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String VIN1
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,CONAM,PD,RID,RN,STBL,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vovc1,vovc2,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA303",RN="Account Balances Report by G/L Set Code"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA303","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[UTBLGLSC]GLSC "_VIN1,SEQ=SEQ+1
		set DQQRY(SEQ)="[UTBLGLSC]CLS=L OR [UTBLGLSC]CLS=D",SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("UTBLGLSC") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC2|"_"G/L Set Code"_"|VIN1|"_VIN1.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Account Balances Report by G/L Set Code"
		set VBNRINFO("PGM")="R01S304"
		set VBNRINFO("RID")="SCA303"
		set VBNRINFO("TABLES")="UTBLGLSC"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,UTBLGLSC]""GLSC"""
		set VBNRINFO("ORDERBY",2)="[SYSDEV,UTBLGLSC]CLS"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,UTBLGLSC]GLSC"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:3 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT="UTBLGLSC.CLS,UTBLGLSC.GLSC"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"UTBLGLSC",VWHERE,"UTBLGLSC.CLS,UTBLGLSC.GLSC","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2
	set vovc1="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2
	set vovc1=vc1,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2
	set vc1=V.piece($C(9),1)			// UTBLGLSC.CLS
	set vc2=V.piece($C(9),2)			// UTBLGLSC.GLSC
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	/*
	---- Revision History ------------------------------------------------

            06/05/07 - SENTHIL.J KUMAR - CR 27355
                       Modified to display VAT on late charges
		       as well as VAT on loan fees

	    01/17/05 - KINI - CR13991
		       Converted to PSL.
	*/

	type Public String PD,STBL
	type String CLS,GLSC,X,di
	type Number CID,I


	// G/L description
	for I = 2:1:18 set PD(I) = ""
	
	for I = 2:1:18 do {
		type RecordSTBLGLDESCD stblgld = Db.getRecord("STBLGLDESCD","KEY=:I",1)
 		set STBL("D",I) = stblgld.sdesc_"|"_stblgld.baldi_"|"_stblgld.gldi

                type RecordSTBLGLDESCL stblgldl = Db.getRecord("STBLGLDESCL","KEY=:I",1)
		set STBL("L",I) = stblgldl.sdesc_"|"_stblgldl.baldi_"|"_stblgldl.gldi
		}

	type ResultSet rs = Db.select("CID,GLSC,CLS","ACN","GLSC IS NOT NULL AND CLS IS NOT NULL")
	while rs.next() do {
		set CID = rs.getCol(1)
		set GLSC = rs.getCol(2)
		set CLS = rs.getCol(3)

		for I = 2:1:18 do {
			set di = STBL(CLS,I).piece("|",2)
			set X = "P"_I_"("""_GLSC_""")"			
			set @X = @X.get()

			// Only if BALDI field is set, calculate amount
			if di.length() do ADD(CID,CLS,GLSC,I,X,di)
			}
		}       		
	quit

ADD(Number CID,		// Account Number
    String CLS,		// Account Class
    String GLSC,	// G/L Set Code
    Number I,		// Amount Field Increment
    String X,		// Amount Field Variable 
    String di)		// ACN Balance Column Name

	// Add balance sorted by GLSC	

	type Number BAL

	if (CLS = "L") do {
		
		type RecordLN ln = Db.getRecord("LN",":CID",1)	

		set BAL = ln.@di	

		if (I = 2) & (BAL < 0) do {

			/* Make sure that in STBLGLDESCL key 14 stands for
			the Negative Principal Balance
			*/			

			// Negative Principal Balance
			set X = "P14"_"("""_GLSC_""")"
			set @X = @X.get() 
			}

		set @X = @X+BAL
		}

	if (CLS = "D") do {
			
		type RecordDEP dep = Db.getRecord("DEP",":CID",1)

		set BAL = dep.@di
	
		if (I = 2)&(BAL < 0) do {

			/* Make sure that in STBLGLDESCD key 12 stands for the
		   	   Negative Principal Balance and key 13 - for the
		   	   Unauthorized Negative Principal Balance.
			*/

			// ODLIM expired
			if dep.odexp < %SystemDate do {

				// Negative Principal Balance
				set X = "P12"_"("""_GLSC_""")"
				set @X = @X.get() 
				set @X = @X + BAL  
				}

			else  do {
				// Within Auth Limit
				if BAL '< dep.odlim do {
					set X = "P12"_"("""_GLSC_""")" 
					set @X = @X.get()
					set @X = @X + BAL
					}
				}

			else  do {
				set X = "P12"_"("""_GLSC_""")" 
				set @X = @X.get() 
				set @X = @X + dep.odlim

				// Unauthorized Negative Principal Balance
				set X = "P13"_"("""_GLSC_""")" 
				set @X = @X.get() 
				set @X = @X + BAL - dep.odlim
				}
			}

		else  set @X = @X + BAL
		}

	quit 

VPRNT	// PRINT pre-processor

	type public String vc1
	/*
        ---- Revision History ------------------------------------------------

        06/05/07 - SENTHIL.J KUMAR - CR 27355
                   Modified to display VAT on late charges
                   as well as VAT on loan fees

	01/17/05 - KINI - CR13991
		   Created to display G/L Account Description.	    
 	*/

	type Public String PD,STBL
	type Number I

	if (vc1 = "D") do {
		for I = 4:1:18  set PD(I) = (STBL("D",I)).piece("|",1)
		}

        else  for I = 4:1:17 set PD(I) = (STBL("L",I)).piece("|",1)
 
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	do VPRNT quit:VFMQ				// Print pre-processor
	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(3)
	type Public String vc1,vovc1,vc2,vovc2
	type Number vb1,vb2,vb3
	set (vb1,vb2,vb3)=0
	if vb2!(vovc1'=vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(3)=VT(3)+1
	quit

VDTL3	// Detail
	type public String %TIM,IOSL,PD,STBL,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc2,verror,vh(),vovc1,vovc2,vrundate,vsysdate

	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set V=vc2,VO=V set V=$E(V,1,4) do VP1 quit:VFMQ!verror.get()  set VL=V
	set VL=VL_$J("",6-VL.length())_"Amount"
	set VL=VL_$J("",13-VL.length())_$J($FN(P2(GLSC),",",2),16)
	set VL=VL_$J("",30-VL.length())_$J($FN(P3(GLSC),",",2),14)
	set V=$J($FN(P4(GLSC),",",2),14) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",45-VL.length())_V
	set V=$J($FN(P5(GLSC),",",2),14) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",60-VL.length())_V
	set V=$J($FN(P6(GLSC),",",2),14) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",75-VL.length())_V
	set V=$J($FN(P7(GLSC),",",2),14) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V
	set VL=VL_$J("",106-VL.length())_$J(GL(7),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(7),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	do VOM
	set VL="       "_"G/L #"
	set VL=VL_$J("",13-VL.length())_$J(GL(2),16)
	set VL=VL_$J("",30-VL.length())_$J(GL(3),14)
	set VL=VL_$J("",47-VL.length())_$J(GL(4),12)
	set VL=VL_$J("",62-VL.length())_$J(GL(5),12)
	set VL=VL_$J("",77-VL.length())_$J(GL(6),12)
	set V=$J($FN(P8(GLSC),",",2),14) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V
	set VL=VL_$J("",106-VL.length())_$J(GL(8),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(8),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	do VOM
	set V=$J($FN(P9(GLSC),",",2),14) do VP7 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(9),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(9),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P10(GLSC),",",2),14) do VP8 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(10),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(10),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P11(GLSC),",",2),14) do VP9 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(11),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(11),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P12(GLSC),",",2),14) do VP10 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(12),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(12),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P13(GLSC),",",2),14) do VP11 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(13),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(13),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P14(GLSC),",",2),14) do VP12 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(14),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(14),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P15(GLSC),",",2),14) do VP13 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(15),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(15),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	if 'VL.translate(" ").isNull() do VOM
	set V=$J($FN(P16(GLSC),",",2),14) do VP14 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(16),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(16),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	do VOM
	set V=$J($FN(P17(GLSC),",",2),14) do VP15 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(17),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(17),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	do VOM
	set V=$J($FN(P18(GLSC),",",2),14) do VP16 quit:VFMQ!verror.get()  set VL="                                                                                          "_V
	set VL=VL_$J("",106-VL.length())_$J(GL(18),12)
	set VL=VL_$J("",120-VL.length())_$E(PD(18),1,11)
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	do VOM
	if VLC+3>IOSL do VHDG0 quit:VFMQ
	set VL="" do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CONAM,PD,RID,RN,STBL,VL,vc1,vc2,vovc1,vovc2,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",122-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	do VP17 quit:VFMQ!verror.get()  set V=$E(vsysdate,1,10)
	set VL=VL_$J("",110-VL.length())_V
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	set VL="Class "_vc1
	do VOM
	set VL="                                                                                                "_"------------- Other --------------"
	do VOM
	set VL="GLSC                Principal        Int/Div"
	set VL=VL_$J("",51-VL.length())_$E(PD(4),1,8)
	set VL=VL_$J("",66-VL.length())_$E(PD(5),1,8)
	set VL=VL_$J("",81-VL.length())_$E(PD(6),1,8)
	set VL=VL_$J("",98-VL.length())_"Amount         G/L #"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - [SYSDEV,UTBLGLSC]GLSC

	type public String vc1,vc2
	/*
	 ---- Revision History ------------------------------------------------
	
            06/05/07 - SENTHIL.J KUMAR - CR 27355
                       Modified to display VAT on late charges
                       as well as VAT on loan fees

	    01/17/05 - KINI - CR13991
		       Converted to PSL.
	*/

	type Public String GLSC,GL,PD,STBL
	type Public String P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16,P17,P18
	type String CLS	
	type Number I

	set CLS = vc1
        set GLSC = vc2

        if '$D(P2(GLSC)) set (P2(GLSC),P3(GLSC),P4(GLSC),P5(GLSC),P6(GLSC),P7(GLSC),P8(GLSC),P9(GLSC),P10(GLSC),P11(GLSC),P12(GLSC),P13(GLSC),P14(GLSC),P15(GLSC),P16(GLSC),P17(GLSC),P18(GLSC))=""
 
        // G/L number
        for I = 2:1:18 set GL(I) = ""

	// utblglsc object is needed for indirection method below
	type RecordUTBLGLSC utblglsc = Db.getRecord("UTBLGLSC",":GLSC",1)

	for I = 2:1:18 do {
	
		type Number glcid
		type String gldi

		// Column in UTBLGLSC for G/L number
        	set gldi = STBL(CLS,I).piece("|",3)
		if 'gldi.isNull() set glcid = utblglsc.@gldi

		set GL(I) = glcid.get()
	        }

        // Suppress print if amount is zero or null

        for I = 18:-1:8 do {
		type String A,B,X
		type Number J		
                set X = "P"_(I-1)_"("""_GLSC_""")"

                if '@X for J = I-1:1:14 do {

			// Suppress Amount
                        set A = "P"_J_"("""_GLSC_""")"
                        set B = "P"_(J+1)_"("""_GLSC_""")"

                        set @A = @B
			set @B = ""

			// Suppress G/L number
                        set GL(J) = GL(J+1)
                        set GL(J+1) = ""

			// Suppress G/L description
			set PD(J) = PD(J+1)
			set PD(J+1) = ""

                        }
                }
	quit


VP2	// Column post-processor - Variable: P4(GLSC)

	type Public String PD,V

	if '(PD(4).length()) set V=""
	quit

VP3	// Column post-processor - Variable: P5(GLSC)

	type Public String PD,V

	if '(PD(5).length()) set V=""
	quit

VP4	// Column post-processor - Variable: P6(GLSC)

	type Public String PD,V

	if '(PD(6).length()) set V=""
	quit

VP5	// Column post-processor - Variable: P7(GLSC)

	type Public String GL,GLSC,P7,PD,V

	if '(PD(7).length())!(P7(GLSC)=0)!'(P7(GLSC).length()) set (P7(GLSC),GL(7),PD(7),V)=""
	quit

VP6	// Column post-processor - Variable: P8(GLSC)

	type Public String GL,GLSC,P8,PD,V

	if '(PD(8).length())!(P8(GLSC)=0)!'(P8(GLSC).length()) set (P8(GLSC),PD(8),GL(8),V)=""	
	quit

VP7	// Column post-processor - Variable: P9(GLSC)

	type Public String GL,GLSC,P9,PD,V

	if '(PD(9).length())!(P9(GLSC)=0)!'(P9(GLSC).length()) set (P9(GLSC),PD(9),GL(9),V)=""
	quit

VP8	// Column post-processor - Variable: P10(GLSC)

	type Public String GL,GLSC,P10,PD,V

	if '(PD(10).length())!(P10(GLSC)=0)!'(P10(GLSC).length()) set (P10(GLSC),PD(10),GL(10),V)=""
	quit

VP9	// Column post-processor - Variable: P11(GLSC)

	type Public String GL,GLSC,P11,PD,V

	if '(PD(11).length())!(P11(GLSC)=0)!'(P11(GLSC).length()) set (P11(GLSC),PD(11),GL(11),V)=""
	quit

VP10	// Column post-processor - Variable: P12(GLSC)

	type Public String GL,GLSC,P12,PD,V

	if '(PD(12).length())!(P12(GLSC)=0)!'(P12(GLSC).length()) set (P12(GLSC),PD(12),GL(12),V)=""
	quit

VP11	// Column post-processor - Variable: P13(GLSC)

	type Public String GL,GLSC,P13,PD,V

	if '(PD(13).length())!(P13(GLSC)=0)!'(P13(GLSC).length()) set (P13(GLSC),PD(13),GL(13),V)=""
	quit

VP12	// Column post-processor - Variable: P14(GLSC)

	type Public String GL,GLSC,P14,PD,V

	if '(PD(14).length())!(P14(GLSC)=0)!'(P14(GLSC).length()) set (P14(GLSC),PD(14),GL(14),V)=""
	quit

VP13	// Column post-processor - Variable: P15(GLSC)

	type Public String GL,GLSC,P15,PD,V

	if '(PD(15).length())!(P15(GLSC)=0)!'(P15(GLSC).length()) set (P15(GLSC),PD(15),GL(15),V)=""
	quit

VP14	// Column post-processor - Variable: P16(GLSC)

	type Public String GL,GLSC,P16,PD,V

	if '(PD(16).get().length())!(P16(GLSC)=0)!'(P16(GLSC).length()) set (P16(GLSC),PD(16),GL(16),V)=""
	quit

VP15	// Column post-processor - Variable: P17(GLSC)

	type Public String GL,GLSC,P17,PD,V
 
	if '(PD(17).get().length())!(P17(GLSC)=0)!'(P17(GLSC).length()) set (P17(GLSC),PD(17),GL(17),V)=""
	quit

VP16	// Column post-processor - Variable: P18(GLSC)

	type Public String GL,GLSC,P18,PD,V
	if '(PD(18).get().length())!(P18(GLSC)=0)!'(P18(GLSC).length()) set (P18(GLSC),PD(18),GL(18),V)=""

	quit

VP17	// Column pre-processor - Variable: vsysdate


	quit
