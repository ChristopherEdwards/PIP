R01S619	// SCA727 - Currency Transaction Magnetic File
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:53 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String PRSLCD
	type Date VIN1

	set RID="SCA727"
	set RN="Currency Transaction Magnetic File"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("PRSLCD")="|255|||[STBLRSLCD]||||T|Resolution Code|||||"
	set %TAB("VIN1")="|10||[CTR]TJDATE|[CTR]TJDATE:DISTINCT:NOVAL||||D|System Date|||||"

	set %READ="IO/REQ,VIN1#1,PRSLCD#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date VIN1
	type public String PRSLCD
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CONAM,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,ISCP1,ISCP2,ISCP3,ISP1,ISP2,ISP3,L4A,L4A2
	type String L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PZIP1,PZIP2,PZIP3,RID,RN,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,VL,VLOF,VRF(),VSTATS(),XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vCOL,vHDG,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14,vc140,vc141,vc15,vc16,vc17,vc18,vc19
	type String vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA727",RN="Currency Transaction Magnetic File"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA727","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=221")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,vc100)=""
	set (vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc140,vc141)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:5 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("CTR.TJDATE,CTR.BRCD,CTR.NCIND,CTR.ID,CTR.SEQ,UTBLBRCD.DESC,UTBLBRCD.BRCITY,UTBLBRCD.BRSTATE,UTBLBRCD.OFFTITLE,UTBLBRCD.OFFNAME,CTR.OTRTYP,CTR.PREPNAME,UTBLBRCD.BRCONT,CTR.DCN,CTR.CID1,CTR.CID2,CTR.CID3,CTR.DBAP1,CTR.DBAP2,CTR.DBAP3,UTBLBRCD.BRAD2,UTBLBRCD.BRAD1,UTBLBRCD.BRZIP,CTR.CRCD,CTR.WT,CTR.NIP,CTR.NIC,CTR.CE,CTR.DW,CTR.CI,CTR.CO,CTR.EFDATE,CTR.LNCP1,CTR.LNCP2,CTR.LNCP3,CTR.LNP1,CTR.LNP2,CTR.LNP3,CTR.ACS,CTR.DEPOSIT,CTR.TRANS,CTR.MT,CTR.OWNB,CTR.APR,CTR.MP,UTBLBRCD.BRTEL,CTR.FCI,CTR.FCO,CTR.FNCP1,CTR.MICP1,CTR.ADDRCP1,CTR.CITYCP1,CTR.STATECP1,CTR.PZIPCP1,CTR.CNTRYCP1,CTR.TAXIDCP1,CTR.IDINDCP1,CTR.PINDCP1,CTR.ARINDCP1,CTR.OINDCP1,CTR.ISSCP1,CTR.IDNUMCP1,CTR.DOBCP1,CTR.FNCP2,CTR.MICP2,CTR.ADDRCP2,CTR.CITYCP2,CTR.STATECP2,CTR.PZIPCP2,CTR.CNTRYCP2,CTR.TAXIDCP2,CTR.IDINDCP2,CTR.PINDCP2,CTR.ARINDCP2,CTR.OINDCP2,CTR.ISSCP2,CTR.IDNUMCP2,CTR.DOBCP2,CTR.FNCP3,CTR.MICP3,CTR.ADDRCP3,CTR.CITYCP3,CTR.STATECP3,CTR.PZIPCP3,CTR.CNTRYCP3,CTR.TAXIDCP3,CTR.IDINDCP3,CTR.PINDCP3,CTR.ARINDCP3,CTR.OINDCP3,CTR.ISSCP3,CTR.IDNUMCP3,CTR.DOBCP3,CTR.FNP1,CTR.MIP1,CTR.ADDRP1,CTR.CITYP1,CTR.STATEP1,CTR.PZIPP1,CTR.CNTRYP1,CTR.TAXIDP1,CTR.OCCP1,CTR.IDINDP1,CTR.PINDP1,CTR.ARINDP1,CTR.OINDP1,CTR.ISSP1,CTR.IDNUMP1,CTR.DOBP1,CTR.FNP2,CTR.MIP2,CTR.ADDRP2,CTR.CITYP2,CTR.STATEP2,CTR.PZIPP2,CTR.CNTRYP2,CTR.TAXIDP2,CTR.OCCP2,CTR.IDINDP2,CTR.PINDP2,CTR.ARINDP2,CTR.OINDP2,CTR.ISSP2,CTR.IDNUMP2,CTR.DOBP2,CTR.FNP3,CTR.MIP3,CTR.ADDRP3,CTR.CITYP3,CTR.STATEP3,CTR.PZIPP3,CTR.CNTRYP3,CTR.TAXIDP3,CTR.OCCP3,CTR.IDINDP3,CTR.PINDP3,CTR.ARINDP3,CTR.OINDP3,CTR.ISSP3,CTR.IDNUMP3,CTR.DOBP3","CTR,UTBLBRCD","CTR.TJDATE=:VIN1","CTR.TJDATE,CTR.BRCD,CTR.NCIND,CTR.ID,CTR.SEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4,vovc5
	set vovc1="",vovc2="",vovc3="",vovc4="",vovc5=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4,vovc5,vc5
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4,vovc5=vc5
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,vc100
	type Public String vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc140,vc141
	set vc1=V.piece($C(9),1)			// CTR.TJDATE
	set vc2=V.piece($C(9),2)			// CTR.BRCD
	set vc3=V.piece($C(9),3)			// CTR.NCIND
	set vc4=V.piece($C(9),4)			// CTR.ID
	set vc5=V.piece($C(9),5)			// CTR.SEQ
	set vc6=V.piece($C(9),6)			// UTBLBRCD.DESC
	set vc7=V.piece($C(9),7)			// UTBLBRCD.BRCITY
	set vc8=V.piece($C(9),8)			// UTBLBRCD.BRSTATE
	set vc9=V.piece($C(9),9)			// UTBLBRCD.OFFTITLE
	set vc10=V.piece($C(9),10)			// UTBLBRCD.OFFNAME
	set vc11=V.piece($C(9),11)			// CTR.OTRTYP
	set vc12=V.piece($C(9),12)			// CTR.PREPNAME
	set vc13=V.piece($C(9),13)			// UTBLBRCD.BRCONT
	set vc14=V.piece($C(9),14)			// CTR.DCN
	set vc15=V.piece($C(9),15)			// CTR.CID1
	set vc16=V.piece($C(9),16)			// CTR.CID2
	set vc17=V.piece($C(9),17)			// CTR.CID3
	set vc18=V.piece($C(9),18)			// CTR.DBAP1
	set vc19=V.piece($C(9),19)			// CTR.DBAP2
	set vc20=V.piece($C(9),20)			// CTR.DBAP3
	set vc21=V.piece($C(9),21)			// UTBLBRCD.BRAD2
	set vc22=V.piece($C(9),22)			// UTBLBRCD.BRAD1
	set vc23=V.piece($C(9),23)			// UTBLBRCD.BRZIP
	set vc24=V.piece($C(9),24)			// CTR.CRCD
	set vc25=V.piece($C(9),25)			// CTR.WT
	set vc26=V.piece($C(9),26)			// CTR.NIP
	set vc27=V.piece($C(9),27)			// CTR.NIC
	set vc28=V.piece($C(9),28)			// CTR.CE
	set vc29=V.piece($C(9),29)			// CTR.DW
	set vc30=V.piece($C(9),30)			// CTR.CI
	set vc31=V.piece($C(9),31)			// CTR.CO
	set vc32=V.piece($C(9),32)			// CTR.EFDATE
	set vc33=V.piece($C(9),33)			// CTR.LNCP1
	set vc34=V.piece($C(9),34)			// CTR.LNCP2
	set vc35=V.piece($C(9),35)			// CTR.LNCP3
	set vc36=V.piece($C(9),36)			// CTR.LNP1
	set vc37=V.piece($C(9),37)			// CTR.LNP2
	set vc38=V.piece($C(9),38)			// CTR.LNP3
	set vc39=V.piece($C(9),39)			// CTR.ACS
	set vc40=V.piece($C(9),40)			// CTR.DEPOSIT
	set vc41=V.piece($C(9),41)			// CTR.TRANS
	set vc42=V.piece($C(9),42)			// CTR.MT
	set vc43=V.piece($C(9),43)			// CTR.OWNB
	set vc44=V.piece($C(9),44)			// CTR.APR
	set vc45=V.piece($C(9),45)			// CTR.MP
	set vc46=V.piece($C(9),46)			// UTBLBRCD.BRTEL
	set vc47=V.piece($C(9),47)			// CTR.FCI
	set vc48=V.piece($C(9),48)			// CTR.FCO
	set vc49=V.piece($C(9),49)			// CTR.FNCP1
	set vc50=V.piece($C(9),50)			// CTR.MICP1
	set vc51=V.piece($C(9),51)			// CTR.ADDRCP1
	set vc52=V.piece($C(9),52)			// CTR.CITYCP1
	set vc53=V.piece($C(9),53)			// CTR.STATECP1
	set vc54=V.piece($C(9),54)			// CTR.PZIPCP1
	set vc55=V.piece($C(9),55)			// CTR.CNTRYCP1
	set vc56=V.piece($C(9),56)			// CTR.TAXIDCP1
	set vc57=V.piece($C(9),57)			// CTR.IDINDCP1
	set vc58=V.piece($C(9),58)			// CTR.PINDCP1
	set vc59=V.piece($C(9),59)			// CTR.ARINDCP1
	set vc60=V.piece($C(9),60)			// CTR.OINDCP1
	set vc61=V.piece($C(9),61)			// CTR.ISSCP1
	set vc62=V.piece($C(9),62)			// CTR.IDNUMCP1
	set vc63=V.piece($C(9),63)			// CTR.DOBCP1
	set vc64=V.piece($C(9),64)			// CTR.FNCP2
	set vc65=V.piece($C(9),65)			// CTR.MICP2
	set vc66=V.piece($C(9),66)			// CTR.ADDRCP2
	set vc67=V.piece($C(9),67)			// CTR.CITYCP2
	set vc68=V.piece($C(9),68)			// CTR.STATECP2
	set vc69=V.piece($C(9),69)			// CTR.PZIPCP2
	set vc70=V.piece($C(9),70)			// CTR.CNTRYCP2
	set vc71=V.piece($C(9),71)			// CTR.TAXIDCP2
	set vc72=V.piece($C(9),72)			// CTR.IDINDCP2
	set vc73=V.piece($C(9),73)			// CTR.PINDCP2
	set vc74=V.piece($C(9),74)			// CTR.ARINDCP2
	set vc75=V.piece($C(9),75)			// CTR.OINDCP2
	set vc76=V.piece($C(9),76)			// CTR.ISSCP2
	set vc77=V.piece($C(9),77)			// CTR.IDNUMCP2
	set vc78=V.piece($C(9),78)			// CTR.DOBCP2
	set vc79=V.piece($C(9),79)			// CTR.FNCP3
	set vc80=V.piece($C(9),80)			// CTR.MICP3
	set vc81=V.piece($C(9),81)			// CTR.ADDRCP3
	set vc82=V.piece($C(9),82)			// CTR.CITYCP3
	set vc83=V.piece($C(9),83)			// CTR.STATECP3
	set vc84=V.piece($C(9),84)			// CTR.PZIPCP3
	set vc85=V.piece($C(9),85)			// CTR.CNTRYCP3
	set vc86=V.piece($C(9),86)			// CTR.TAXIDCP3
	set vc87=V.piece($C(9),87)			// CTR.IDINDCP3
	set vc88=V.piece($C(9),88)			// CTR.PINDCP3
	set vc89=V.piece($C(9),89)			// CTR.ARINDCP3
	set vc90=V.piece($C(9),90)			// CTR.OINDCP3
	set vc91=V.piece($C(9),91)			// CTR.ISSCP3
	set vc92=V.piece($C(9),92)			// CTR.IDNUMCP3
	set vc93=V.piece($C(9),93)			// CTR.DOBCP3
	set vc94=V.piece($C(9),94)			// CTR.FNP1
	set vc95=V.piece($C(9),95)			// CTR.MIP1
	set vc96=V.piece($C(9),96)			// CTR.ADDRP1
	set vc97=V.piece($C(9),97)			// CTR.CITYP1
	set vc98=V.piece($C(9),98)			// CTR.STATEP1
	set vc99=V.piece($C(9),99)			// CTR.PZIPP1
	set vc100=V.piece($C(9),100)			// CTR.CNTRYP1
	set vc101=V.piece($C(9),101)			// CTR.TAXIDP1
	set vc102=V.piece($C(9),102)			// CTR.OCCP1
	set vc103=V.piece($C(9),103)			// CTR.IDINDP1
	set vc104=V.piece($C(9),104)			// CTR.PINDP1
	set vc105=V.piece($C(9),105)			// CTR.ARINDP1
	set vc106=V.piece($C(9),106)			// CTR.OINDP1
	set vc107=V.piece($C(9),107)			// CTR.ISSP1
	set vc108=V.piece($C(9),108)			// CTR.IDNUMP1
	set vc109=V.piece($C(9),109)			// CTR.DOBP1
	set vc110=V.piece($C(9),110)			// CTR.FNP2
	set vc111=V.piece($C(9),111)			// CTR.MIP2
	set vc112=V.piece($C(9),112)			// CTR.ADDRP2
	set vc113=V.piece($C(9),113)			// CTR.CITYP2
	set vc114=V.piece($C(9),114)			// CTR.STATEP2
	set vc115=V.piece($C(9),115)			// CTR.PZIPP2
	set vc116=V.piece($C(9),116)			// CTR.CNTRYP2
	set vc117=V.piece($C(9),117)			// CTR.TAXIDP2
	set vc118=V.piece($C(9),118)			// CTR.OCCP2
	set vc119=V.piece($C(9),119)			// CTR.IDINDP2
	set vc120=V.piece($C(9),120)			// CTR.PINDP2
	set vc121=V.piece($C(9),121)			// CTR.ARINDP2
	set vc122=V.piece($C(9),122)			// CTR.OINDP2
	set vc123=V.piece($C(9),123)			// CTR.ISSP2
	set vc124=V.piece($C(9),124)			// CTR.IDNUMP2
	set vc125=V.piece($C(9),125)			// CTR.DOBP2
	set vc126=V.piece($C(9),126)			// CTR.FNP3
	set vc127=V.piece($C(9),127)			// CTR.MIP3
	set vc128=V.piece($C(9),128)			// CTR.ADDRP3
	set vc129=V.piece($C(9),129)			// CTR.CITYP3
	set vc130=V.piece($C(9),130)			// CTR.STATEP3
	set vc131=V.piece($C(9),131)			// CTR.PZIPP3
	set vc132=V.piece($C(9),132)			// CTR.CNTRYP3
	set vc133=V.piece($C(9),133)			// CTR.TAXIDP3
	set vc134=V.piece($C(9),134)			// CTR.OCCP3
	set vc135=V.piece($C(9),135)			// CTR.IDINDP3
	set vc136=V.piece($C(9),136)			// CTR.PINDP3
	set vc137=V.piece($C(9),137)			// CTR.ARINDP3
	set vc138=V.piece($C(9),138)			// CTR.OINDP3
	set vc139=V.piece($C(9),139)			// CTR.ISSP3
	set vc140=V.piece($C(9),140)			// CTR.IDNUMP3
	set vc141=V.piece($C(9),141)			// CTR.DOBP3
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	type public Number BRCI,BRCO,BR3A,BR4A,BR5A,BR3E,BSA
	type public Number FI9A,FI3A,FI3E,FI4A,FI5A,FICI,FICO,MICR,Z9
	type public String CCITY, CSTATE, CZIP, TCC

	set (BRCI,BRCO,BR3A,BR4A,BR5A,BR3E)=0
	set (Z9,FI9A,FI3A,FI3E,FI4A,FI5A,FICI,FICO)=0
	set BSA = CUVAR.BSA
	set CCITY = CUVAR.CCITY
	set CSTATE = CUVAR.CSTATE
	set CZIP = CUVAR.CZIP
	set MICR = CUVAR.MICR
	set TCC = CUVAR.TCC

	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0,vs(5)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1,vskp(5)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VHDG2 quit:VFMQ
	do VHDG3 quit:VFMQ
	if 'vskp(5).get() do VDTL5 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(5)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4,vc5,vovc5
	type Number vb1,vb2,vb3,vb4,vb5
	set (vb1,vb2,vb3,vb4,vb5)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,vb5=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,vb5=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,vb5=1
	if vb4!(+vovc4'=+vc4) set vs(5)=0,vh(5)=0,VD(4)=0,vb5=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(5) set vs(5)=1 do stat^DBSRWUTL(5)
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do VSUM3 quit:VFMQ  do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do VSUM2 quit:VFMQ  do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(5)=VT(5)+1
	quit

VHDG2	// Group Header
	type public String %MSKD,%TIM,ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CONAM,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,ER,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,IOSL,ISCP1,ISCP2,ISCP3,ISP1,ISP2
	type public String ISP3,L4A,L4A2,L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RID,RN,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14
	type public String vc140,vc141,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,vcrt,verror,vh(),vovc1,vovc2
	type public String vovc3,vovc4,vovc5,vrundate

	quit:vh(2)  set vh(2)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="2A"
	set VL=VL_$J("",2-VL.length())_$J(BSA,1)
	set VL=VL_$J("",3-VL.length())_$E(CONAM,1,35)
	do VP1 quit:VFMQ!verror.get()  set V=$E(FIADR,1,35)
	set VL=VL_$J("",38-VL.length())_V
	set VL=VL_$J("",73-VL.length())_$E(CCITY,1,27)
	set VL=VL_$J("",100-VL.length())_$E(CSTATE,1,2)
	do VP2 quit:VFMQ!verror.get()  set V=$E(CUCZIP,1,9)
	set VL=VL_$J("",102-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(CUEIN,1,9)
	set VL=VL_$J("",111-VL.length())_V
	set VL=VL_$J("",120-VL.length())_$J(MICR,9)
	set VL=VL_$J("",129-VL.length())_$E(TCC,1,8)
	do VOM
	quit

VSUM2	// Summary
	type public String ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,I,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,IOSL,ISCP1,ISCP2,ISCP3,ISP1,ISP2,ISP3,L4A,L4A2
	type public String L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14,vc140,vc141,vc15,vc16,vc17,vc18
	type public String vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	if 'VT(2) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ

	set VL="9B"
	set VL=VL_$J("",2-VL.length())_$J(FI9A,7)
	set VL=VL_$J("",9-VL.length())_$J(FI3A,10)
	set VL=VL_$J("",19-VL.length())_$J(FI3E,10)
	set VL=VL_$J("",29-VL.length())_$J(FI4A,10)
	set VL=VL_$J("",39-VL.length())_$J(FI5A,10)
	set V=$J(FICI,12) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",49-VL.length())_V
	set V=$J(FICO,12) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",61-VL.length())_V
	do VOM
	quit

VHDG3	// Group Header
	type public String %MSKD,%TIM,ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CONAM,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,ER,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,IOSL,ISCP1,ISCP2,ISCP3,ISP1,ISP2
	type public String ISP3,L4A,L4A2,L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RID,RN,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14
	type public String vc140,vc141,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,vcrt,verror,vh(),vovc1,vovc2
	type public String vovc3,vovc4,vovc5,vrundate

	quit:vh(3)  set vh(3)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="2B"
	do VP6 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	set VL=VL_$J("",9-VL.length())_$J(BSA,1)
	set VL=VL_$J("",10-VL.length())_$E(vc6,1,35)
	do VP7 quit:VFMQ!verror.get()  set V=$E(BRADR,1,35)
	set VL=VL_$J("",45-VL.length())_V
	set VL=VL_$J("",80-VL.length())_$E(vc7,1,27)
	set VL=VL_$J("",107-VL.length())_$E(vc8,1,2)
	do VP8 quit:VFMQ!verror.get()  set V=$E(UBRCDZIP,1,9)
	set VL=VL_$J("",109-VL.length())_V
	do VP9 quit:VFMQ!verror.get()  set V=$E(CUVEIN,1,9)
	set VL=VL_$J("",118-VL.length())_V
	set VL=VL_$J("",127-VL.length())_$J(MICR,9)
	set VL=VL_$J("",136-VL.length())_$E(vc9,1,20)
	set VL=VL_$J("",156-VL.length())_$E(vc10,1,35)
	set VL=VL_$J("",191-VL.length())_$J(PRSLCD,1)
	do VOM
	quit

VSUM3	// Summary
	type public String ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,I,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,IOSL,ISCP1,ISCP2,ISCP3,ISP1,ISP2,ISP3,L4A,L4A2
	type public String L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14,vc140,vc141,vc15,vc16,vc17,vc18
	type public String vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	if 'VT(3) quit
	if VLC+0>IOSL do VHDG0 quit:VFMQ

	set VL="9A"
	do VP10 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7) do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",2-VL.length())_V
	set V=$J(BR3A,10) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",9-VL.length())_V
	set V=$J(BR3E,10) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",19-VL.length())_V
	set V=$J(BR4A,10) do VP14 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(BR5A,10) do VP15 quit:VFMQ!verror.get()
	set VL=VL_$J("",39-VL.length())_V
	do VP16 quit:VFMQ!verror.get()  set V=$J(BRCI,12) do VP17 quit:VFMQ!verror.get()
	set VL=VL_$J("",49-VL.length())_V
	do VP18 quit:VFMQ!verror.get()  set V=$J(BRCO,12) do VP19 quit:VFMQ!verror.get()
	set VL=VL_$J("",61-VL.length())_V
	do VOM
	quit

VDTL5	// Detail
	type public String ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,IOSL,ISCP1,ISCP2,ISCP3,ISP1,ISP2,ISP3,L4A,L4A2,L4A3
	type public String L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14,vc140,vc141,vc15,vc16,vc17,vc18
	type public String vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,verror,vh(),vovc1,vovc2,vovc3,vovc4,vovc5

	if VLC+11>IOSL do VHDG0 quit:VFMQ

	set VL="3A"
	do VP20 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP21 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP22 quit:VFMQ!verror.get()  set V=$J(CTRCRCD,1)
	set VL=VL_$J("",14-VL.length())_V
	do VP23 quit:VFMQ!verror.get()  set V=$J(CTRWT,1)
	set VL=VL_$J("",15-VL.length())_V
	do VP24 quit:VFMQ!verror.get()  set V=$J(CTRNIP,1)
	set VL=VL_$J("",16-VL.length())_V
	do VP25 quit:VFMQ!verror.get()  set V=$J(CTRNIC,1)
	set VL=VL_$J("",17-VL.length())_V
	do VP26 quit:VFMQ!verror.get()  set V=$J(CTRCE,1)
	set VL=VL_$J("",18-VL.length())_V
	do VP27 quit:VFMQ!verror.get()  set V=$J(CTRDW,1)
	set VL=VL_$J("",19-VL.length())_V
	do VP28 quit:VFMQ!verror.get()  set V=$J(CTROTRTYP,1)
	set VL=VL_$J("",20-VL.length())_V
	set VL=VL_$J("",21-VL.length())_$E(vc11,1,24)
	do VP29 quit:VFMQ!verror.get()  set V=$E(CNTRY,1,2)
	set VL=VL_$J("",45-VL.length())_V
	do VP30 quit:VFMQ!verror.get()  set V=$E(CTRCI,1,10)
	set VL=VL_$J("",47-VL.length())_V
	do VP31 quit:VFMQ!verror.get()  set V=$E(CTRCO,1,10)
	set VL=VL_$J("",57-VL.length())_V
	do VP32 quit:VFMQ!verror.get()  set V=$E(CTREFD,1,8)
	set VL=VL_$J("",67-VL.length())_V
	do VP33 quit:VFMQ!verror.get()  set V=$E(N3E,1,3)
	set VL=VL_$J("",75-VL.length())_V
	do VP34 quit:VFMQ!verror.get()  set V=$E(N4A,1,3)
	set VL=VL_$J("",78-VL.length())_V
	do VP35 quit:VFMQ!verror.get()  set V=$E(N5A,1,3)
	set VL=VL_$J("",81-VL.length())_V
	do VP36 quit:VFMQ!verror.get()  set V=$E(CTRACS,1,1)
	set VL=VL_$J("",84-VL.length())_V
	do VP37 quit:VFMQ!verror.get()  set V=$E(CTRDEP,1,1)
	set VL=VL_$J("",85-VL.length())_V
	do VP38 quit:VFMQ!verror.get()  set V=$E(CTRTRANS,1,1)
	set VL=VL_$J("",86-VL.length())_V
	do VP39 quit:VFMQ!verror.get()  set V=$E(CTRMT,1,1)
	set VL=VL_$J("",87-VL.length())_V
	do VP40 quit:VFMQ!verror.get()  set V=$E(CTROWNB,1,1)
	set VL=VL_$J("",88-VL.length())_V
	do VP41 quit:VFMQ!verror.get()  set V=$E(CTRAPR,1,1)
	set VL=VL_$J("",89-VL.length())_V
	do VP42 quit:VFMQ!verror.get()  set V=$E(CTRMP,1,1)
	set VL=VL_$J("",90-VL.length())_V
	do VP43 quit:VFMQ!verror.get()  set V=$E(CTRMT2,1,1)
	set VL=VL_$J("",91-VL.length())_V
	set VL=VL_$J("",92-VL.length())_$E(vc12,1,35)
	set VL=VL_$J("",127-VL.length())_$E(vc13,1,35)
	do VP44 quit:VFMQ!verror.get()  set V=$E(AREA,1,3)
	set VL=VL_$J("",162-VL.length())_V
	do VP45 quit:VFMQ!verror.get()  set V=$E(PHONE,1,7)
	set VL=VL_$J("",165-VL.length())_V
	set VL=VL_$J("",172-VL.length())_$E(10E30_vc14,19+$L(vc14),99)
	do VP46 quit:VFMQ!verror.get()  set V=$E(XFCI,1,10)
	set VL=VL_$J("",190-VL.length())_V
	do VP47 quit:VFMQ!verror.get()  set V=$E(XFCO,1,10)
	set VL=VL_$J("",200-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP48 quit:VFMQ!verror.get()  set V=$E(RT3E,1,2) set VL=V
	do VP49 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP50 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP51 quit:VFMQ!verror.get()  set V=$J(CNTNCA,1)
	set VL=VL_$J("",14-VL.length())_V
	set VL=VL_$J("",15-VL.length())_$E(vc15,1,24)
	set VL=VL_$J("",39-VL.length())_$E(vc16,1,24)
	set VL=VL_$J("",63-VL.length())_$E(vc17,1,24)
	if 'VL.translate(" ").isNull() do VOM
	do VP52 quit:VFMQ!verror.get()  set V=$E(L4A,1,2) set VL=V
	do VP53 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP54 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP55 quit:VFMQ!verror.get()  set V=$E(CTRLNCP1,1,35)
	set VL=VL_$J("",14-VL.length())_V
	do VP56 quit:VFMQ!verror.get()  set V=$E(CTRADCP1,1,35)
	set VL=VL_$J("",49-VL.length())_V
	do VP57 quit:VFMQ!verror.get()  set V=$E(CTYCP1,1,27)
	set VL=VL_$J("",84-VL.length())_V
	do VP58 quit:VFMQ!verror.get()  set V=$E(STCP1,1,2)
	set VL=VL_$J("",111-VL.length())_V
	do VP59 quit:VFMQ!verror.get()  set V=$E(ZIPCP1,1,9)
	set VL=VL_$J("",113-VL.length())_V
	do VP60 quit:VFMQ!verror.get()  set V=$E(CNTRY1,1,2)
	set VL=VL_$J("",122-VL.length())_V
	do VP61 quit:VFMQ!verror.get()  set V=$E(TAXCP1,1,9)
	set VL=VL_$J("",124-VL.length())_V
	do VP62 quit:VFMQ!verror.get()  set V=$E(CPMID,1,1)
	set VL=VL_$J("",133-VL.length())_V
	do VP63 quit:VFMQ!verror.get()  set V=$E(ISCP1,1,2)
	set VL=VL_$J("",134-VL.length())_V
	do VP64 quit:VFMQ!verror.get()  set V=$E(IDCP1,1,22)
	set VL=VL_$J("",136-VL.length())_V
	do VP65 quit:VFMQ!verror.get()  set V=$E(DBCP1,1,8)
	set VL=VL_$J("",158-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP66 quit:VFMQ!verror.get()  set V=$E(L4A2,1,2) set VL=V
	do VP67 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP68 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP69 quit:VFMQ!verror.get()  set V=$E(CTRLNCP2,1,35)
	set VL=VL_$J("",14-VL.length())_V
	do VP70 quit:VFMQ!verror.get()  set V=$E(CTRADCP2,1,35)
	set VL=VL_$J("",49-VL.length())_V
	do VP71 quit:VFMQ!verror.get()  set V=$E(CTYCP2,1,27)
	set VL=VL_$J("",84-VL.length())_V
	do VP72 quit:VFMQ!verror.get()  set V=$E(STCP2,1,2)
	set VL=VL_$J("",111-VL.length())_V
	do VP73 quit:VFMQ!verror.get()  set V=$E(ZIPCP2,1,9)
	set VL=VL_$J("",113-VL.length())_V
	do VP74 quit:VFMQ!verror.get()  set V=$E(CNTRY2,1,2)
	set VL=VL_$J("",122-VL.length())_V
	do VP75 quit:VFMQ!verror.get()  set V=$E(TAXCP2,1,9)
	set VL=VL_$J("",124-VL.length())_V
	do VP76 quit:VFMQ!verror.get()  set V=$E(CPMID2,1,1)
	set VL=VL_$J("",133-VL.length())_V
	do VP77 quit:VFMQ!verror.get()  set V=$E(ISCP2,1,2)
	set VL=VL_$J("",134-VL.length())_V
	do VP78 quit:VFMQ!verror.get()  set V=$E(IDCP2,1,22)
	set VL=VL_$J("",136-VL.length())_V
	do VP79 quit:VFMQ!verror.get()  set V=$E(DBCP2,1,8)
	set VL=VL_$J("",158-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP80 quit:VFMQ!verror.get()  set V=$E(L4A3,1,2) set VL=V
	do VP81 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP82 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP83 quit:VFMQ!verror.get()  set V=$E(CTRLNCP3,1,35)
	set VL=VL_$J("",14-VL.length())_V
	do VP84 quit:VFMQ!verror.get()  set V=$E(CTRADCP3,1,35)
	set VL=VL_$J("",49-VL.length())_V
	do VP85 quit:VFMQ!verror.get()  set V=$E(CTYCP3,1,27)
	set VL=VL_$J("",84-VL.length())_V
	do VP86 quit:VFMQ!verror.get()  set V=$E(STCP3,1,2)
	set VL=VL_$J("",111-VL.length())_V
	do VP87 quit:VFMQ!verror.get()  set V=$E(ZIPCP3,1,9)
	set VL=VL_$J("",113-VL.length())_V
	do VP88 quit:VFMQ!verror.get()  set V=$E(CNTRY3,1,2)
	set VL=VL_$J("",122-VL.length())_V
	do VP89 quit:VFMQ!verror.get()  set V=$E(TAXCP3,1,9)
	set VL=VL_$J("",124-VL.length())_V
	do VP90 quit:VFMQ!verror.get()  set V=$E(CPMID3,1,1)
	set VL=VL_$J("",133-VL.length())_V
	do VP91 quit:VFMQ!verror.get()  set V=$E(ISCP3,1,2)
	set VL=VL_$J("",134-VL.length())_V
	do VP92 quit:VFMQ!verror.get()  set V=$E(IDCP3,1,22)
	set VL=VL_$J("",136-VL.length())_V
	do VP93 quit:VFMQ!verror.get()  set V=$E(DBCP3,1,8)
	set VL=VL_$J("",158-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP94 quit:VFMQ!verror.get()  set V=$E(L5A,1,2) set VL=V
	do VP95 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP96 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP97 quit:VFMQ!verror.get()  set V=$E(DBP1,1,1)
	set VL=VL_$J("",14-VL.length())_V
	do VP98 quit:VFMQ!verror.get()  set V=$E(DBLNP1,1,35)
	set VL=VL_$J("",15-VL.length())_V
	do VP99 quit:VFMQ!verror.get()  set V=$E(ADP1,1,35)
	set VL=VL_$J("",50-VL.length())_V
	do VP100 quit:VFMQ!verror.get()  set V=$E(CTYP1,1,27)
	set VL=VL_$J("",85-VL.length())_V
	do VP101 quit:VFMQ!verror.get()  set V=$E(STATP1,1,2)
	set VL=VL_$J("",112-VL.length())_V
	do VP102 quit:VFMQ!verror.get()  set V=$E(PZIP1,1,9)
	set VL=VL_$J("",114-VL.length())_V
	do VP103 quit:VFMQ!verror.get()  set V=$E(CTRYP1,1,2)
	set VL=VL_$J("",123-VL.length())_V
	do VP104 quit:VFMQ!verror.get()  set V=$E(TAXP1,1,9)
	set VL=VL_$J("",125-VL.length())_V
	do VP105 quit:VFMQ!verror.get()  set V=$E(OCP1,1,35)
	set VL=VL_$J("",134-VL.length())_V
	do VP106 quit:VFMQ!verror.get()  set V=$E(MID,1,1)
	set VL=VL_$J("",169-VL.length())_V
	do VP107 quit:VFMQ!verror.get()  set V=$E(ISP1,1,2)
	set VL=VL_$J("",170-VL.length())_V
	do VP108 quit:VFMQ!verror.get()  set V=$E(IDP1,1,24)
	set VL=VL_$J("",172-VL.length())_V
	do VP109 quit:VFMQ!verror.get()  set V=$E(DBP1,1,8)
	set VL=VL_$J("",196-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP110 quit:VFMQ!verror.get()  set V=$E(DBA1,1,2) set VL=V
	do VP111 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP112 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP113 quit:VFMQ!verror.get()  set V=$E(DBA91,1,1)
	set VL=VL_$J("",14-VL.length())_V
	set VL=VL_$J("",15-VL.length())_$E(vc18,1,35)
	if 'VL.translate(" ").isNull() do VOM
	do VP114 quit:VFMQ!verror.get()  set V=$E(L5A2,1,2) set VL=V
	do VP115 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP116 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP117 quit:VFMQ!verror.get()  set V=$E(DBP2,1,1)
	set VL=VL_$J("",14-VL.length())_V
	do VP118 quit:VFMQ!verror.get()  set V=$E(DBLNP2,1,35)
	set VL=VL_$J("",15-VL.length())_V
	do VP119 quit:VFMQ!verror.get()  set V=$E(ADP2,1,35)
	set VL=VL_$J("",50-VL.length())_V
	do VP120 quit:VFMQ!verror.get()  set V=$E(CTYP2,1,27)
	set VL=VL_$J("",85-VL.length())_V
	do VP121 quit:VFMQ!verror.get()  set V=$E(STATP2,1,2)
	set VL=VL_$J("",112-VL.length())_V
	do VP122 quit:VFMQ!verror.get()  set V=$E(PZIP2,1,9)
	set VL=VL_$J("",114-VL.length())_V
	do VP123 quit:VFMQ!verror.get()  set V=$E(CTRYP2,1,2)
	set VL=VL_$J("",123-VL.length())_V
	do VP124 quit:VFMQ!verror.get()  set V=$E(TAXP2,1,9)
	set VL=VL_$J("",125-VL.length())_V
	do VP125 quit:VFMQ!verror.get()  set V=$E(OCP2,1,35)
	set VL=VL_$J("",134-VL.length())_V
	do VP126 quit:VFMQ!verror.get()  set V=$E(MID2,1,1)
	set VL=VL_$J("",169-VL.length())_V
	do VP127 quit:VFMQ!verror.get()  set V=$E(ISP2,1,2)
	set VL=VL_$J("",170-VL.length())_V
	do VP128 quit:VFMQ!verror.get()  set V=$E(IDP2,1,24)
	set VL=VL_$J("",172-VL.length())_V
	do VP129 quit:VFMQ!verror.get()  set V=$E(DBP2,1,8)
	set VL=VL_$J("",196-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP130 quit:VFMQ!verror.get()  set V=$E(DBA2,1,2) set VL=V
	do VP131 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP132 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP133 quit:VFMQ!verror.get()  set V=$E(DBA92,1,1)
	set VL=VL_$J("",14-VL.length())_V
	set VL=VL_$J("",15-VL.length())_$E(vc19,1,35)
	if 'VL.translate(" ").isNull() do VOM
	do VP134 quit:VFMQ!verror.get()  set V=$E(L5A3,1,2) set VL=V
	do VP135 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP136 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP137 quit:VFMQ!verror.get()  set V=$E(DBP3,1,1)
	set VL=VL_$J("",14-VL.length())_V
	do VP138 quit:VFMQ!verror.get()  set V=$E(DBLNP3,1,35)
	set VL=VL_$J("",15-VL.length())_V
	do VP139 quit:VFMQ!verror.get()  set V=$E(ADP3,1,35)
	set VL=VL_$J("",50-VL.length())_V
	do VP140 quit:VFMQ!verror.get()  set V=$E(CTYP3,1,27)
	set VL=VL_$J("",85-VL.length())_V
	do VP141 quit:VFMQ!verror.get()  set V=$E(STATP3,1,2)
	set VL=VL_$J("",112-VL.length())_V
	do VP142 quit:VFMQ!verror.get()  set V=$E(PZIP3,1,9)
	set VL=VL_$J("",114-VL.length())_V
	do VP143 quit:VFMQ!verror.get()  set V=$E(CTRYP3,1,2)
	set VL=VL_$J("",123-VL.length())_V
	do VP144 quit:VFMQ!verror.get()  set V=$E(TAXP3,1,9)
	set VL=VL_$J("",125-VL.length())_V
	do VP145 quit:VFMQ!verror.get()  set V=$E(OCP3,1,35)
	set VL=VL_$J("",134-VL.length())_V
	do VP146 quit:VFMQ!verror.get()  set V=$E(MID3,1,1)
	set VL=VL_$J("",169-VL.length())_V
	do VP147 quit:VFMQ!verror.get()  set V=$E(ISP3,1,2)
	set VL=VL_$J("",170-VL.length())_V
	do VP148 quit:VFMQ!verror.get()  set V=$E(IDP3,1,24)
	set VL=VL_$J("",172-VL.length())_V
	do VP149 quit:VFMQ!verror.get()  set V=$E(DBP3,1,8)
	set VL=VL_$J("",196-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP150 quit:VFMQ!verror.get()  set V=$E(DBA3,1,2) set VL=V
	do VP151 quit:VFMQ!verror.get()  set V=$E(CTRBRCD,1,7)
	set VL=VL_$J("",2-VL.length())_V
	do VP152 quit:VFMQ!verror.get()  set V=$E(CTRSEQ,1,5)
	set VL=VL_$J("",9-VL.length())_V
	do VP153 quit:VFMQ!verror.get()  set V=$E(DBA93,1,1)
	set VL=VL_$J("",14-VL.length())_V
	set VL=VL_$J("",15-VL.length())_$E(vc20,1,35)
	if 'VL.translate(" ").isNull() do VOM
	quit

VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,ISCP1,ISCP2,ISCP3,ISP1,ISP2,ISP3,L4A,L4A2,L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vovc1,vovc2,vovc3,vovc4,vovc5
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="9Z"
	do VP154 quit:VFMQ!verror.get()  set V=$J(Z9,10)
	set VL=VL_$J("",2-VL.length())_V
	set VL=VL_$J("",12-VL.length())_$J(FI9A,10)
	set VL=VL_$J("",22-VL.length())_$J(FI3A,10)
	set VL=VL_$J("",32-VL.length())_$J(FI3E,10)
	set VL=VL_$J("",42-VL.length())_$J(FI4A,10)
	set VL=VL_$J("",52-VL.length())_$J(FI5A,10)
	set V=$J(FICI,12) do VP155 quit:VFMQ!verror.get()
	set VL=VL_$J("",62-VL.length())_V
	set V=$J(FICO,12) do VP156 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ADP1,ADP2,ADP3,AREA,BR3A,BR3E,BR4A,BR5A,BRADR,BRCI,BRCO,BSA,CCITY,CNTNCA,CNTRY,CNTRY1,CNTRY2,CNTRY3,CONAM,CPMID,CPMID2,CPMID3,CSTATE,CTRACS,CTRADCP1,CTRADCP2,CTRADCP3,CTRAPR,CTRBRCD,CTRCE,CTRCI,CTRCO,CTRCRCD,CTRDEP,CTRDW,CTREFD,CTRLNCP1,CTRLNCP2,CTRLNCP3,CTRMP,CTRMT,CTRMT2,CTRNIC,CTRNIP,CTROTRTYP,CTROWNB,CTRSEQ,CTRTRANS,CTRWT,CTRYP1,CTRYP2,CTRYP3,CTYCP1,CTYCP2,CTYCP3,CTYP1,CTYP2,CTYP3,CUCZIP,CUEIN,CUVEIN,CZIP,DBA1,DBA2,DBA3,DBA91,DBA92,DBA93,DBCP1,DBCP2,DBCP3,DBLNP1,DBLNP2,DBLNP3,DBP1,DBP2,DBP3,FI3A,FI3E,FI4A,FI5A,FI9A,FIADR,FICI,FICO,IDCP1,IDCP2,IDCP3,IDP1,IDP2,IDP3,ISCP1,ISCP2,ISCP3,ISP1,ISP2,ISP3,L4A
	type public String L4A2,L4A3,L5A,L5A2,L5A3,MICR,MID,MID2,MID3,N3E,N4A,N5A,OCP1,OCP2,OCP3,PHONE,PRSLCD,PZIP1,PZIP2,PZIP3,RID,RN,RT3E,STATP1,STATP2,STATP3,STCP1,STCP2,STCP3,TAXCP1,TAXCP2,TAXCP3,TAXP1,TAXP2,TAXP3,TCC,UBRCDZIP,VL,XFCI,XFCO,Z9,ZIPCP1,ZIPCP2,ZIPCP3,vc1,vc10,vc100,vc101,vc102,vc103,vc104,vc105,vc106,vc107,vc108,vc109,vc11,vc110,vc111,vc112,vc113,vc114,vc115,vc116,vc117,vc118,vc119,vc12,vc120,vc121,vc122,vc123,vc124,vc125,vc126,vc127,vc128,vc129,vc13,vc130,vc131,vc132,vc133,vc134,vc135,vc136,vc137,vc138,vc139,vc14,vc140,vc141,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21
	type public String vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc66,vc67,vc68,vc69,vc7,vc70,vc71,vc72,vc73,vc74,vc75,vc76,vc77,vc78,vc79,vc8,vc80,vc81,vc82,vc83,vc84,vc85,vc86,vc87,vc88,vc89,vc9,vc90,vc91,vc92,vc93,vc94,vc95,vc96,vc97,vc98,vc99,vovc1,vovc2,vovc3,vovc4,vovc5,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number VLC
	type Public String IO,VL

	use IO
	write VL_$J("",220-VL.length()),!
	set VL="",VLC=VLC+1
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: FIADR

 type Public String FIADR
 type String CAD2

 set CAD2 = CUVAR.CAD2
 if CAD2 '= "" set FIADR = CAD2
 else  set FIADR = CUVAR.CAD1
	quit

VP2	// Column pre-processor - Variable: CUCZIP

 type Public String CUCZIP
 
 set CUCZIP = CUVAR.CZIP
 set CUCZIP = CUCZIP.translate("-","")

	quit

VP3	// Column pre-processor - Variable: CUEIN

 type Public String CUEIN

 set CUEIN = CUVAR.EIN
 set CUEIN = CUEIN.translate("-","")
	quit

VP4	// Column post-processor - Variable: FICI

 type Public Number V

 // Pad to 12 and zero fill
 set V = V.justify(12).translate(" ",0)

	quit

VP5	// Column post-processor - Variable: FICO

 type Public Number V

 // Pad to 12 and zero fill
 set V = V.justify(12).translate(" ",0)

	quit

VP6	// Column pre-processor - Variable: CTRBRCD

	type public String vc2
 type Public Number CTRBRCD

 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")
	quit

VP7	// Column pre-processor - Variable: BRADR

	type public String vc21,vc22
 type Public String BRADR
 type String BRAD2
 
 set BRAD2 = vc21
 if BRAD2 '= "" set BRADR = BRAD2
 else  set BRADR = vc22
	quit

VP8	// Column pre-processor - Variable: UBRCDZIP

	type public String vc23
 type Public String UBRCDZIP

 set UBRCDZIP = vc23
 set UBRCDZIP = UBRCDZIP.translate("-","")

	quit

VP9	// Column pre-processor - Variable: CUVEIN

 type Public String CUVEIN 

 set CUVEIN = CUVAR.EIN
 set CUVEIN = CUVEIN.translate("-","")
	quit

VP10	// Column pre-processor - Variable: CTRBRCD

	type public String vc2
 type Public Number CTRBRCD

 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP11	// Column post-processor - Variable: CTRBRCD

 type Public Number FI9A

 set FI9A = FI9A + 1

	quit

VP12	// Column post-processor - Variable: BR3A

 type Public Number BR3A,FI3A
 
 set FI3A=FI3A+BR3A
 set BR3A=0

	quit

VP13	// Column post-processor - Variable: BR3E

 type Public Number BR3E,FI3E

 set FI3E=FI3E+BR3E
 set BR3E=0

	quit

VP14	// Column post-processor - Variable: BR4A

 type Public Number BR4A,FI4A

 set FI4A = FI4A + BR4A
 set BR4A = 0

	quit

VP15	// Column post-processor - Variable: BR5A

 type Public Number BR5A,FI5A

 set FI5A = FI5A + BR5A
 set BR5A = 0

	quit

VP16	// Column pre-processor - Variable: BRCI

 type Public Number BRCI
 
 // Pad to 12 and zero fill
 set BRCI = (BRCI.justify(12)).translate(" ",0)

	quit

VP17	// Column post-processor - Variable: BRCI

 type Public Number BRCI,FICI

 set FICI = FICI + BRCI
 // Reset
 set BRCI = 0
	quit

VP18	// Column pre-processor - Variable: BRCO

 type Public Number BRCO

 // Pad to 12 and zero fill
 set BRCO = (BRCO.justify(12)).translate(" ",0)
	quit

VP19	// Column post-processor - Variable: BRCO

 type Public Number BRCO,FICO 

 set FICO = FICO + BRCO
 // Reset
 set BRCO = 0

	quit

VP20	// Column pre-processor - Variable: CTRBRCD

	type public String vc2
 type Public Number BR3A,CTRBRCD

 set BR3A = BR3A + 1
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")
	quit

VP21	// Column pre-processor - Variable: CTRSEQ

	type public String vc5
 type Public Number CTRSEQ

 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP22	// Column pre-processor - Variable: CTRCRCD

	type public String vc24
 type Public Number CTRCRCD

 set CTRCRCD = vc24
 if CTRCRCD '= "" set CTRCRCD = 1
 else  set CTRCRCD = ""

	quit

VP23	// Column pre-processor - Variable: CTRWT

	type public String vc25
 type Public Number CTRWT

 set CTRWT = vc25
 if CTRWT set CTRWT = 2
 else  set CTRWT = ""
	quit

VP24	// Column pre-processor - Variable: CTRNIP

	type public String vc26
 type Public Number CTRNIP
 
 set CTRNIP = vc26
 if CTRNIP set CTRNIP = 3
 else  set CTRNIP = ""

	quit

VP25	// Column pre-processor - Variable: CTRNIC

	type public String vc27
 type Public Number CTRNIC

 set CTRNIC = vc27
 if CTRNIC set CTRNIC = 4
 else  set CTRNIC = ""

	quit

VP26	// Column pre-processor - Variable: CTRCE

	type public String vc28
 type Public Number CTRCE

 set CTRCE = vc28
 if CTRCE set CTRCE = 5
 else  set CTRCE=""
	quit

VP27	// Column pre-processor - Variable: CTRDW

	type public String vc29
 type Public Number CTRDW

 set CTRDW = vc29
 if CTRDW set CTRDW = 6
 else  set CTRDW = ""

	quit

VP28	// Column pre-processor - Variable: CTROTRTYP

	type public String vc11
 type Public Number CTROTRTYP
 
 set CTROTRTYP = vc11
 if CTROTRTYP '= "" set CTROTRTYP = 7
 else  set CTROTRTYP = ""

	quit

VP29	// Column pre-processor - Variable: CNTRY

	type public String vc24
 type Public String CO,CRCD,CNTRY

 set CRCD = vc24
 set CO = CUVAR.CO
 set CNTRY = ""

 // Get the country code for this currency
 if (CO '= ""),(CRCD '= "") do {
	
	type RecordCRCD crcd = Db.getRecord("CRCD","CO,CRCD")
 	set CNTRY = crcd.cntry
 }

	quit

VP30	// Column pre-processor - Variable: CTRCI

	type public String vc30

 type Public Number BRCI,CTRCI

 set CTRCI = vc30

 // Add rounded up amount to branch code total
 set BRCI = BRCI + $$^SCARND(CTRCI,"","","",0,"+")

 // Format rounded amount to 10
 set CTRCI = $$^SCARND(CTRCI,10,"","",0,"+",0)

 // Zero fill
 set CTRCI = CTRCI.translate(" ","0")
	quit

VP31	// Column pre-processor - Variable: CTRCO

	type public String vc31
 type Public Number BRCO,CTRCO

 set CTRCO = vc31

 // Add rounded up amount to branch code total
 set BRCO = BRCO + $$^SCARND(CTRCO,"","","",0,"+")

 // Format rounded amount to 10
 set CTRCO = $$^SCARND(CTRCO,10,"","",0,"+",0)

 // Zero fill
 set CTRCO = CTRCO.translate(" ","0")

	quit

VP32	// Column pre-processor - Variable: CTREFD

	type public String vc32
 type Public Date CTREFD

 set CTREFD = vc32 
 set CTREFD = $$DAT^%ZM(CTREFD,"YEARMMDD")
	quit

VP33	// Column pre-processor - Variable: N3E

 type Public String N3E

 set N3E = "001"

	quit

VP34	// Column pre-processor - Variable: N4A

	type public String vc33,vc34,vc35
 type Public Number N4A
 
 set N4A=0

 // Only reporting records if last name is present
 if vc33 '= "" set N4A = N4A + 1
 if vc34 '= "" set N4A = N4A + 1
 if vc35 '= "" set N4A = N4A + 1
 set N4A="00"_N4A

	quit

VP35	// Column pre-processor - Variable: N5A

	type public String vc36,vc37,vc38
 type Public Number N5A 

 set N5A = 0

 ; Only reporting records if last name is present
 if vc36 '= "" set N5A = N5A + 1
 if vc37 '= "" set N5A = N5A + 1
 if vc38 '= "" set N5A = N5A + 1

 set N5A = "00"_N5A
	quit

VP36	// Column pre-processor - Variable: CTRACS

	type public String vc39
 type Public String CTRACS

 set CTRACS = vc39
 if CTRACS = 1 set CTRACS = "A"

	quit

VP37	// Column pre-processor - Variable: CTRDEP

	type public String vc40
 type Public String CTRDEP

 set CTRDEP = vc40
 if CTRDEP = 1 set CTRDEP = "B"

	quit

VP38	// Column pre-processor - Variable: CTRTRANS

	type public String vc41
 type Public String CTRTRANS

 set CTRTRANS = vc41
 if CTRTRANS = 1 set CTRTRANS = "C"

	quit

VP39	// Column pre-processor - Variable: CTRMT

	type public String vc42
 type Public String CTRMT
 
 set CTRMT = vc42
 if CTRMT = 1 set CTRMT = "D"

	quit

VP40	// Column pre-processor - Variable: CTROWNB

	type public String vc43
 type Public String CTROWNB

 set CTROWNB = vc43
 if CTROWNB = 1 set CTROWNB = "E"

	quit

VP41	// Column pre-processor - Variable: CTRAPR

	type public String vc44
 type Public String CTRAPR

 set CTRAPR = vc44
 if CTRAPR = 1 set CTRAPR = "A"

	quit

VP42	// Column pre-processor - Variable: CTRMP

	type public String vc45
 type Public String CTRMP

 set CTRMP = vc45
 if CTRMP = 1 set CTRMP = "B"

	quit

VP43	// Column pre-processor - Variable: CTRMT2

	type public String vc42
 type Public String CTRMT2

 set CTRMT2 = vc42
 if CTRMT2 = 1 set CTRMT2 = "C"

	quit

VP44	// Column pre-processor - Variable: AREA

	type public String vc46
 type Public String AREA

 set AREA = vc46
 set AREA = AREA.translate("-","")
 if AREA.length() > 7 set AREA = AREA.extract(1,3)
 else  set AREA = ""

	quit

VP45	// Column pre-processor - Variable: PHONE

	type public String vc46
 type Public String PHONE

 set PHONE = vc46
 set PHONE = PHONE.translate("-","")
 if PHONE.length() > 7 set PHONE = PHONE.extract(4,10)

	quit

VP46	// Column pre-processor - Variable: XFCI

	type public String vc47
 type Public Number XFCI
                          
 set XFCI = vc47
 set XFCI = $$^SCARND(XFCI,10,"","",0,"+",0)
 set XFCI = XFCI.translate(" ",0)

	quit

VP47	// Column pre-processor - Variable: XFCO

	type public String vc48
 type Public Number XFCO
 
 set XFCO = vc48
 set XFCO = $$^SCARND(XFCO,10,"","",0,"+",0)
 set XFCO = XFCO.translate(" ",0)

	quit

VP48	// Column pre-processor - Variable: RT3E

	type public String vc15
 type Public Number BR3E
 type Public String RT3E

 set RT3E = ""
 if vc15 '= "" set RT3E = "3E", BR3E = BR3E + 1
	quit

VP49	// Column pre-processor - Variable: CTRBRCD

	type public String vc15,vc2
 type Public Number CTRBRCD

 if vc15 = "" set CTRBRCD = "" quit
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP50	// Column pre-processor - Variable: CTRSEQ

	type public String vc15,vc5
 type Public Number CTRSEQ

 if vc15 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")
	quit

VP51	// Column pre-processor - Variable: CNTNCA

	type public String vc15,vc16,vc17
 type Public Number CNTNCA 

 set CNTNCA = ""

 if vc15 '= "" set CNTNCA = CNTNCA + 1
 if vc16 '= "" set CNTNCA = CNTNCA + 1
 if vc17 '= "" set CNTNCA = CNTNCA + 1
	quit

VP52	// Column pre-processor - Variable: L4A

	type public String vc33
 type Public Number BR4A
 type Public String L4A

 set L4A=""

 if vc33 '= "" set L4A = "4A",BR4A = BR4A + 1
	quit

VP53	// Column pre-processor - Variable: CTRBRCD

	type public String vc33,vc2
 type Public Number CTRBRCD 

 if vc33 = "" set CTRBRCD = "" quit
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP54	// Column pre-processor - Variable: CTRSEQ

	type public String vc33,vc5
 type Public Number CTRSEQ

 if vc33 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")
	quit

VP55	// Column pre-processor - Variable: CTRLNCP1

	type public String vc33,vc49,vc50
 type Public String CTRLNCP1
 
 type String CTRFNCP1

 set CTRLNCP1 = vc33 
 if CTRLNCP1 = "" quit
 set CTRFNCP1 = vc49
 if CTRFNCP1 '= "" set CTRLNCP1 = CTRLNCP1_","_CTRFNCP1
 set CTRLNCP1 = CTRLNCP1_" "_vc50
 set CTRLNCP1 = CTRLNCP1.extract(1,35)
	quit

VP56	// Column pre-processor - Variable: CTRADCP1

	type public String vc33,vc51
 type Public String CTRADCP1
			
 if vc33 = "" set CTRADCP1 = "" quit
 set CTRADCP1 = vc51
	quit

VP57	// Column pre-processor - Variable: CTYCP1

	type public String vc33,vc52
 type Public String CTYCP1
			
 if vc33 = "" set CTYCP1 = "" quit
 set CTYCP1 = vc52

	quit

VP58	// Column pre-processor - Variable: STCP1

	type public String vc33,vc53
 type Public String STCP1
 
 if vc33 = "" set STCP1 = "" quit
 set STCP1 = vc53

	quit

VP59	// Column pre-processor - Variable: ZIPCP1

	type public String vc33,vc54
 type Public String ZIPCP1

 if vc33 = "" set ZIPCP1="" quit
 set ZIPCP1 = vc54
 set ZIPCP1 = ZIPCP1.translate("-","")

	quit

VP60	// Column pre-processor - Variable: CNTRY1

	type public String vc33,vc55
 type Public String CNTRY1
 
 if vc33 = "" set CNTRY1 = "" quit
 set CNTRY1 = vc55

	quit

VP61	// Column pre-processor - Variable: TAXCP1

	type public String vc33,vc56
 type Public String TAXCP1

 if vc33 = "" set TAXCP1 = "" quit
 set TAXCP1 = vc56
 set TAXCP1 = TAXCP1.translate("-","")

	quit

VP62	// Column pre-processor - Variable: CPMID

	type public String vc33,vc57,vc58,vc59,vc60
 type Public String CPMID
 
 if vc33 = "" set CPMID = "" quit

 // Report code or Other -"D"
 if vc57 set CPMID = "A" quit
 if vc58 set CPMID = "B" quit
 if vc59 set CPMID = "C" quit
 if vc60 set CPMID = "D" quit
 set CPMID = "D"

	quit

VP63	// Column pre-processor - Variable: ISCP1

	type public String vc33,vc61
 type Public String ISCP1

 if vc33 = "" set ISCP1 = "" quit
 set ISCP1 = vc61

	quit

VP64	// Column pre-processor - Variable: IDCP1

	type public String vc33,vc62
 type Public String IDCP1

 if vc33 = "" set IDCP1 = "" quit
 set IDCP1 = vc62

	quit

VP65	// Column pre-processor - Variable: DBCP1

	type public String vc33,vc63
 type Public Date DBCP1

 if vc33 = "" set DBCP1 = "" quit
 set DBCP1 = vc63
 set DBCP1 =DBCP1.toString("YEARMMDD")

	quit

VP66	// Column pre-processor - Variable: L4A2

	type public String vc34
 type Public Number BR4A
 type Public String L4A2

 set L4A2 = ""
 if vc34 '= "" set L4A2 = "4A", BR4A = BR4A + 1
	quit

VP67	// Column pre-processor - Variable: CTRBRCD

	type public String vc2,vc34
 type Public Number CTRBRCD
 
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")
 if vc34 = "" set CTRBRCD = ""

	quit

VP68	// Column pre-processor - Variable: CTRSEQ

	type public String vc34,vc5
 type Public Number CTRSEQ
                         
 if vc34 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP69	// Column pre-processor - Variable: CTRLNCP2

	type public String vc34,vc64,vc65
 type Public String CTRLNCP2
                          
 type String CTRFNCP2
 
 set CTRLNCP2 = vc34
 if CTRLNCP2 = "" quit
 set CTRFNCP2 = vc64
 if CTRFNCP2 '= "" set CTRLNCP2 = CTRLNCP2_","_CTRFNCP2
 set CTRLNCP2 = CTRLNCP2_" "_vc65
 set CTRLNCP2 = CTRLNCP2.extract(1,35)
	quit

VP70	// Column pre-processor - Variable: CTRADCP2

	type public String vc34,vc66
 type Public String CTRADCP2

 if vc34 = "" set CTRADCP2 = "" quit
 set CTRADCP2 = vc66

	quit

VP71	// Column pre-processor - Variable: CTYCP2

	type public String vc34,vc67
 type Public String CTYCP2

 if vc34 = "" set CTYCP2 = "" quit
 set CTYCP2 = vc67

	quit

VP72	// Column pre-processor - Variable: STCP2

	type public String vc34,vc68
 type Public String STCP2
 
 if vc34 = "" set STCP2 = "" quit
 set STCP2 = vc68

	quit

VP73	// Column pre-processor - Variable: ZIPCP2

	type public String vc34,vc69
 type Public String ZIPCP2

 if vc34 = "" set ZIPCP2 = "" quit
 set ZIPCP2 = vc69
 set ZIPCP2 = ZIPCP2.translate("-","")

	quit

VP74	// Column pre-processor - Variable: CNTRY2

	type public String vc34,vc70
 type Public String CNTRY2 

 if vc34 = "" set CNTRY2 = "" quit
 set CNTRY2 = vc70
 
	quit

VP75	// Column pre-processor - Variable: TAXCP2

	type public String vc34,vc71
 type Public String TAXCP2
 
 if vc34 = "" set TAXCP2 = "" quit
 set TAXCP2 = vc71
 set TAXCP2 = TAXCP2.translate("-","")

	quit

VP76	// Column pre-processor - Variable: CPMID2

	type public String vc34,vc72,vc73,vc74,vc75
 type Public String CPMID2
 
 if vc34 = "" set CPMID2 = "" quit
 
 ; Report code or Other -"D"
 if vc72 set CPMID2 = "A" quit
 if vc73 set CPMID2 = "B" quit
 if vc74 set CPMID2 = "C" quit
 if vc75 set CPMID2 = "D" quit
 set CPMID2 = "D"
	quit

VP77	// Column pre-processor - Variable: ISCP2

	type public String vc34,vc76
 type Public String ISCP2
 
 if vc34 = "" set ISCP2 = "" quit
 set ISCP2 = vc76

	quit

VP78	// Column pre-processor - Variable: IDCP2

	type public String vc34,vc77
 type Public String IDCP2

 if vc34 = "" set IDCP2 = "" quit
 set IDCP2 = vc77

	quit

VP79	// Column pre-processor - Variable: DBCP2

	type public String vc34,vc78
 type Public Date DBCP2

 if vc34 = "" set DBCP2 = "" quit
 set DBCP2 = vc78
 set DBCP2 = DBCP2.toString("YEARMMDD")

	quit

VP80	// Column pre-processor - Variable: L4A3

	type public String vc35
 type Public Number BR4A
 type Public String L4A3

 set L4A3 = ""
 if vc35 '="" set L4A3 = "4A", BR4A = BR4A + 1

	quit

VP81	// Column pre-processor - Variable: CTRBRCD

	type public String vc2,vc35
 type Public Number CTRBRCD
                         
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0") 
 if vc35 = "" set CTRBRCD = ""

	quit

VP82	// Column pre-processor - Variable: CTRSEQ

	type public String vc35,vc5
 type Public Number CTRSEQ
                         
 if vc35 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP83	// Column pre-processor - Variable: CTRLNCP3

	type public String vc35,vc79,vc80
 type Public String CTRLNCP3

 type String CTRFNCP3
 
 set CTRLNCP3 = vc35
 if CTRLNCP3 = "" quit
 set CTRFNCP3 = vc79
 if CTRFNCP3 '= "" set CTRLNCP3 = CTRLNCP3_","_CTRFNCP3
 set CTRLNCP3 = CTRLNCP3_" "_vc80
 set CTRLNCP3 = CTRLNCP3.extract(1,35)

	quit

VP84	// Column pre-processor - Variable: CTRADCP3

	type public String vc35,vc81
 type Public String CTRADCP3

 if vc35 = "" set CTRADCP3 = "" quit
 set CTRADCP3 = vc81

	quit

VP85	// Column pre-processor - Variable: CTYCP3

	type public String vc35,vc82
 type Public String CTYCP3

 if vc35 = "" set CTYCP3 = "" quit
 set CTYCP3 = vc82

	quit

VP86	// Column pre-processor - Variable: STCP3

	type public String vc35,vc83
 type Public String STCP3
 
 if vc35 = "" set STCP3 = "" quit
 set STCP3 = vc83

	quit

VP87	// Column pre-processor - Variable: ZIPCP3

	type public String vc35,vc84
 type Public String ZIPCP3

 if vc35 = "" set ZIPCP3 = "" quit
 set ZIPCP3 = vc84
 set ZIPCP3 = ZIPCP3.translate("-","")

	quit

VP88	// Column pre-processor - Variable: CNTRY3

	type public String vc35,vc85
 type Public String CNTRY3 

 if vc35 = "" set CNTRY3 = "" quit
 set CNTRY3 = vc85

	quit

VP89	// Column pre-processor - Variable: TAXCP3

	type public String vc35,vc86
 type Public String TAXCP3
 
 if vc35 = "" set TAXCP3 = "" quit
 set TAXCP3 = vc86
 set TAXCP3 = TAXCP3.translate("-","")

	quit

VP90	// Column pre-processor - Variable: CPMID3

	type public String vc35,vc87,vc88,vc89,vc90
 type Public String CPMID3
 
 if vc35 = "" set CPMID3 = "" quit

 ; Report code or Other -"D"
 if vc87 set CPMID3 = "A" quit
 if vc88 set CPMID3 = "B" quit
 if vc89 set CPMID3 = "C" quit
 if vc90 set CPMID3 = "D" quit
 set CPMID3 = "D"

	quit

VP91	// Column pre-processor - Variable: ISCP3

	type public String vc35,vc91
 type Public String ISCP3
 
 if vc35 = "" set ISCP3 = "" quit
 set ISCP3 = vc91

	quit

VP92	// Column pre-processor - Variable: IDCP3

	type public String vc35,vc92
 type Public String IDCP3

 if vc35 = "" set IDCP3 = "" quit
 set IDCP3 = vc92

	quit

VP93	// Column pre-processor - Variable: DBCP3

	type public String vc35,vc93
 type Public Date DBCP3

 if vc35 = "" set DBCP3 = "" quit
 set DBCP3 = vc93
 set DBCP3 = DBCP3.toString("YEARMMDD")

	quit

VP94	// Column pre-processor - Variable: L5A

	type public String vc36
 type Public Number BR5A
 type Public String L5A
 
 set L5A = ""
 
 // Don't report this line if no Last name
 if vc36 '= "" set L5A = "5A", BR5A = BR5A + 1

	quit

VP95	// Column pre-processor - Variable: CTRBRCD

	type public String vc36,vc2
 type Public Number CTRBRCD
  
 if vc36 = "" set CTRBRCD = "" quit                       
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP96	// Column pre-processor - Variable: CTRSEQ

	type public String vc36,vc5
 type Public Number CTRSEQ
                         
 if vc36 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP97	// Column pre-processor - Variable: DBP1

	type public String vc36,vc18
 type Public Number DBP1 

 if vc36 = "" set DBP1 = "" quit
 set DBP1 = ""
 if vc18 '= "" set DBP1 = 1

	quit

VP98	// Column pre-processor - Variable: DBLNP1

	type public String vc36,vc94,vc95
 type Public String DBLNP1
 
 set DBLNP1 = vc36
 if DBLNP1 = "" quit
 if vc94 '= "" set DBLNP1 = DBLNP1_","_vc94
 set DBLNP1 = DBLNP1_" "_vc95
 set DBLNP1 = DBLNP1.extract(1,35)
	quit

VP99	// Column pre-processor - Variable: ADP1

	type public String vc36,vc96
 type Public String ADP1

 if vc36 set ADP1 = "" quit
 set ADP1 = vc96

	quit

VP100	// Column pre-processor - Variable: CTYP1

	type public String vc36,vc97
 type Public String CTYP1

 if vc36 = "" set CTYP1 = "" quit
 set CTYP1 = vc97

	quit

VP101	// Column pre-processor - Variable: STATP1

	type public String vc36,vc98
 type Public String STATP1
 
 if vc36 = "" set STATP1 = "" quit
 set STATP1 = vc98

	quit

VP102	// Column pre-processor - Variable: PZIP1

	type public String vc36,vc99
 type Public String PZIP1

 if vc36 = "" set PZIP1 = "" quit
 set PZIP1 = vc99
 set PZIP1 = PZIP1.translate("-","")

	quit

VP103	// Column pre-processor - Variable: CTRYP1

	type public String vc36,vc100
 type Public String CTRYP1

 if vc36 = "" set CTRYP1 = "" quit
 set CTRYP1 = vc100

	quit

VP104	// Column pre-processor - Variable: TAXP1

	type public String vc36,vc101
 type Public String TAXP1

 if vc36 = "" set TAXP1 = "" quit
 set TAXP1 = vc101
 set TAXP1 = TAXP1.translate("-","")

	quit

VP105	// Column pre-processor - Variable: OCP1

	type public String vc36,vc102
 type Public String OCP1

 if vc36 = "" set OCP1 = "" quit
 set OCP1 = vc102
  
 if OCP1 '= "" do {

	type RecordUTBLOC utbloc=Db.getRecord("UTBLOC","OCC=:OCP1",1)
 	if utbloc.getMode() set OCP1=utbloc.desc
 }

	quit

VP106	// Column pre-processor - Variable: MID

	type public String vc36,vc103,vc104,vc105,vc106
 type Public String MID

 // Report code or Other="D"
 if vc36 = "" set MID="" quit
 if vc103 = 1 set MID = "A" quit
 if vc104 = 1 set MID = "B" quit
 if vc105 = 1 set MID = "C" quit
 if vc106 = 1 set MID = "D" quit
 set MID = "D"

	quit

VP107	// Column pre-processor - Variable: ISP1

	type public String vc36,vc107
 type Public String ISP1

 if vc36 = "" set ISP1 = "" quit
 set ISP1=vc107

	quit

VP108	// Column pre-processor - Variable: IDP1

	type public String vc36,vc108
 type Public String IDP1
 
 if vc36 = "" set IDP1 = "" quit
 set IDP1=vc108

	quit

VP109	// Column pre-processor - Variable: DBP1

	type public String vc36,vc109
 type Public Date DBP1
 
 if vc36 = "" set DBP1 = "" quit
 set DBP1 = vc109
 set DBP1 = DBP1.toString("YEARMMDD")

	quit

VP110	// Column pre-processor - Variable: DBA1

	type public String vc18
 type Public String DBA1
 
 set DBA1 = ""
 if vc18 '= "" set DBA1="5A"

	quit

VP111	// Column pre-processor - Variable: CTRBRCD

	type public String vc18,vc2
 type Public Number CTRBRCD
  
 if vc18 = "" set CTRBRCD = "" quit                       
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0") 

	quit

VP112	// Column pre-processor - Variable: CTRSEQ

	type public String vc18,vc5
 type Public Number CTRSEQ
                         
 if vc18 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP113	// Column pre-processor - Variable: DBA91

	type public String vc18
 type Public Number DBA91

 set DBA91 = ""
 if vc18 '= "" set DBA91 = 9

	quit

VP114	// Column pre-processor - Variable: L5A2

	type public String vc37
 type Public Number BR5A
 type Public String L5A2
 
 set L5A2 = ""
 if vc37 '= "" set L5A2 = "5A", BR5A = BR5A + 1

	quit

VP115	// Column pre-processor - Variable: CTRBRCD

	type public String vc37,vc2
 type Public Number CTRBRCD
 
 if vc37 = "" set CTRBRCD = "" quit
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP116	// Column pre-processor - Variable: CTRSEQ

	type public String vc37,vc5
 type Public Number CTRSEQ
                         
 if vc37 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP117	// Column pre-processor - Variable: DBP2

	type public String vc37,vc19
 type Public Number DBP2

 if vc37 = "" set DBP2 = "" quit
 set DBP2 = ""
 if vc19 '= "" set DBP2 = 1

	quit

VP118	// Column pre-processor - Variable: DBLNP2

	type public String vc37,vc110,vc111
 type Public String DBLNP2
 
 type String CTRFNP2

 set DBLNP2 = vc37
 if DBLNP2 = "" quit
 set CTRFNP2 = vc110
 if CTRFNP2 '= "" set DBLNP2 = DBLNP2_","_CTRFNP2
 set DBLNP2 = DBLNP2_" "_vc111
 set DBLNP2 = DBLNP2.extract(1,35)

	quit

VP119	// Column pre-processor - Variable: ADP2

	type public String vc37,vc112
 type Public String ADP2
 
 if vc37 set ADP2 = "" quit
 set ADP2 = vc112

	quit

VP120	// Column pre-processor - Variable: CTYP2

	type public String vc37,vc113
 type Public String CTYP2
 
 if vc37 = "" set CTYP2 = "" quit
 set CTYP2 = vc113

	quit

VP121	// Column pre-processor - Variable: STATP2

	type public String vc37,vc114
 type Public String STATP2

 if vc37 = "" set STATP2 = "" quit
 set STATP2 = vc114

	quit

VP122	// Column pre-processor - Variable: PZIP2

	type public String vc37,vc115
 type Public String PZIP2
 
 if vc37 = "" set PZIP2 = "" quit
 set PZIP2 = vc115
 set PZIP2 = PZIP2.translate("-","")

	quit

VP123	// Column pre-processor - Variable: CTRYP2

	type public String vc37,vc116
 type Public String CTRYP2

 if vc37 = "" set CTRYP2 = "" quit
 set CTRYP2 = vc116

	quit

VP124	// Column pre-processor - Variable: TAXP2

	type public String vc37,vc117
 type Public String TAXP2
 
 if vc37 = "" set TAXP2 = "" quit
 set TAXP2 = vc117
 set TAXP2 = TAXP2.translate("-","")

	quit

VP125	// Column pre-processor - Variable: OCP2

	type public String vc37,vc118
 type Public String OCP2

 if vc37 = "" set OCP2 = "" quit
 set OCP2 = vc118
 if OCP2 '= "" do {

	type RecordUTBLOC utbloc = Db.getRecord("UTBLOC","OCC=:OCP2",1)
 	if utbloc.getMode() set OCP2 = utbloc.desc
 }

	quit

VP126	// Column pre-processor - Variable: MID2

	type public String vc37,vc119,vc120,vc121,vc122
 type Public String MID2

 // Report code or Other="D"
 if vc37 = "" set MID2 = "" quit
 if vc119 = 1 set MID2 = "A" quit
 if vc120 = 1 set MID2 = "B" quit
 if vc121 = 1 set MID2 = "C" quit
 if vc122 = 1 set MID2 = "D" quit
 set MID2 = "D"

	quit

VP127	// Column pre-processor - Variable: ISP2

	type public String vc37,vc123
 type Public String ISP2
 
 if vc37 = "" set ISP2 = "" quit
 set ISP2 = vc123

	quit

VP128	// Column pre-processor - Variable: IDP2

	type public String vc37,vc124
 type Public String IDP2 

 if vc37 = "" set IDP2 = "" quit
 set IDP2 = vc124

	quit

VP129	// Column pre-processor - Variable: DBP2

	type public String vc37,vc125
 type Public Date DBP2
 
 if vc37 = "" set DBP2 = "" quit
 set DBP2 = vc125
 set DBP2 = DBP2.toString("YEARMMDD")

	quit

VP130	// Column pre-processor - Variable: DBA2

	type public String vc19
 type Public String DBA2

 set DBA2 = ""
 if vc19 '= "" set DBA2 = "5A"

	quit

VP131	// Column pre-processor - Variable: CTRBRCD

	type public String vc19,vc2
 type Public Number CTRBRCD
 
 if vc19 = "" set CTRBRCD = "" quit
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP132	// Column pre-processor - Variable: CTRSEQ

	type public String vc19,vc5
 type Public Number CTRSEQ
                         
 if vc19 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP133	// Column pre-processor - Variable: DBA92

	type public String vc19
 type Public Number DBA92

 set DBA92 = ""
 if vc19 '= "" set DBA92 = 9

	quit

VP134	// Column pre-processor - Variable: L5A3

	type public String vc38
 type Public Number BR5A
 type Public String L5A3

 set L5A3 = ""
 if vc38 '= "" set L5A3 = "5A", BR5A = BR5A + 1

	quit

VP135	// Column pre-processor - Variable: CTRBRCD

	type public String vc38,vc2
 type Public Number CTRBRCD
 
 if vc38 = "" set CTRBRCD = "" quit
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP136	// Column pre-processor - Variable: CTRSEQ

	type public String vc38,vc5
 type Public Number CTRSEQ
                         
 if vc38 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP137	// Column pre-processor - Variable: DBP3

	type public String vc38,vc20
 type Public Number DBP3
                         
 if vc38 = "" set DBP3 = "" quit
 set DBP3 = ""
 if vc20 '= "" set DBP3 = 1

	quit

VP138	// Column pre-processor - Variable: DBLNP3

	type public String vc38,vc126,vc127
 type Public String DBLNP3
 
 type String CTRFNP3
 
 set DBLNP3=vc38
 if DBLNP3="" quit
 set CTRFNP3 = vc126
 if CTRFNP3 '="" set DBLNP3 = DBLNP3_","_CTRFNP3
 set DBLNP3 = DBLNP3_" "_vc127
 set DBLNP3 = DBLNP3.extract(1,35)
	quit

VP139	// Column pre-processor - Variable: ADP3

	type public String vc38,vc128
 type Public String ADP3

 if vc38 set ADP3 = "" quit
 set ADP3 = vc128

	quit

VP140	// Column pre-processor - Variable: CTYP3

	type public String vc38,vc129
 type Public String CTYP3

 if vc38 = "" set CTYP3 = "" quit
 set CTYP3 = vc129

	quit

VP141	// Column pre-processor - Variable: STATP3

	type public String vc38,vc130
 type Public String STATP3
 
 if vc38 = "" set STATP3 = "" quit
 set STATP3 = vc130

	quit

VP142	// Column pre-processor - Variable: PZIP3

	type public String vc38,vc131
 type Public String PZIP3

 if vc38 = "" set PZIP3 = "" quit
 set PZIP3 = vc131
 set PZIP3 = PZIP3.translate("-","")

	quit

VP143	// Column pre-processor - Variable: CTRYP3

	type public String vc38,vc132
 type Public String CTRYP3

 if vc38 = "" set CTRYP3 = "" quit
 set CTRYP3 = vc132

	quit

VP144	// Column pre-processor - Variable: TAXP3

	type public String vc38,vc133
 type Public String TAXP3

 if vc38 = "" set TAXP3 = "" quit
 set TAXP3 = vc133
 set TAXP3 = TAXP3.translate("-","")

	quit

VP145	// Column pre-processor - Variable: OCP3

	type public String vc38,vc134
 type Public String OCP3

 if vc38 = "" set OCP3 = "" quit
 set OCP3 = vc134
 if OCP3 '= "" do {
	type RecordUTBLOC utbloc = Db.getRecord("UTBLOC","OCC=:OCP3",1)
 	if utbloc.getMode() set OCP3 = utbloc.desc
 }

	quit

VP146	// Column pre-processor - Variable: MID3

	type public String vc38,vc135,vc136,vc137,vc138
 type Public String MID3 

 // Report code or Other="D"
 if vc38 = "" set MID3 = "" quit
 if vc135 = 1 set MID3 = "A" quit
 if vc136 = 1 set MID3 = "B" quit
 if vc137 = 1 set MID3 = "C" quit
 if vc138 = 1 set MID3 = "D" quit
 set MID3 = "D"

	quit

VP147	// Column pre-processor - Variable: ISP3

	type public String vc38,vc139
 type Public String ISP3
 
 if vc38 = "" set ISP3 = "" quit
 set ISP3 = vc139

	quit

VP148	// Column pre-processor - Variable: IDP3

	type public String vc38,vc140
 type Public String IDP3
 
 if vc38 = "" set IDP3 = "" quit
 set IDP3 = vc140

	quit

VP149	// Column pre-processor - Variable: DBP3

	type public String vc38,vc141
 type Public Date DBP3

 if vc38 = "" set DBP3 = "" quit
 set DBP3 = vc141
 set DBP3 = DBP3.toString("YEARMMDD")

	quit

VP150	// Column pre-processor - Variable: DBA3

	type public String vc20
 type Public String DBA3
 
 set DBA3 = ""
 if vc20 '= "" set DBA3 = "5A"

	quit

VP151	// Column pre-processor - Variable: CTRBRCD

	type public String vc20,vc2
 type Public Number CTRBRCD
 
 if vc20 = "" set CTRBRCD = "" quit
 set CTRBRCD = vc2
 set CTRBRCD = (CTRBRCD.justify(7,0)).translate(" ","0")

	quit

VP152	// Column pre-processor - Variable: CTRSEQ

	type public String vc20,vc5
 type Public Number CTRSEQ
                         
 if vc20 = "" set CTRSEQ = "" quit
 set CTRSEQ = vc5
 set CTRSEQ = (CTRSEQ.justify(5,0)).translate(" ","0")

	quit

VP153	// Column pre-processor - Variable: DBA93

	type public String vc20
 type Public Number DBA93

 set DBA93 = ""
 if vc20 '= "" set DBA93 = 9

	quit

VP154	// Column pre-processor - Variable: Z9

 type Public Number Z9

 // Only one company in the database, thus only one parent record
 set Z9 = 1
	quit

VP155	// Column post-processor - Variable: FICI

 type Public Number V

 // Pad to 12 and zero fill
 set V = (V.justify(12)).translate(" ",0)

	quit

VP156	// Column post-processor - Variable: FICO

 type Public Number V

 // Pad to 12 and zero fill
 set V = (V.justify(12)).translate(" ",0)

	quit
