BCHCRDAV //Batch BCHCRDANV - Card Anniversary Date Routine
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHCRDANV Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHCRDANV")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHCRDANV") quit
 do JOBMGR^BCHUTL(%FN,"BCHCRDANV",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHCRDANV")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CRDTYP,CRDNUM) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHCRDANV","*","",CRDTYP.get()_","_CRDNUM.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHCRDANV",CRDTYP.get()_","_CRDNUM.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHCRDANV",CRDTYP.get()_","_CRDNUM.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CRDTYP,CRDNUM)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHCRDANV","*","",CRDTYP.get()_","_CRDNUM.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHCRDANV",CRDTYP.get()_","_CRDNUM.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CRDTYP,CRDNUM) //
	type public Boolean ER
	type Date ANVDT,EFD,LASTDT,SCND
	type Number CID,DGLF,FEEAMT,FEECAT,FEECNT,FEEGL,NOTFSN,TAMT
	type String FEEPLN,FEETYP,GLSC,PGM,PRODTYP,USPL,TR16,TMPSRV
	
	set (PGM,SCND,EFD,PRODTYP,FEEGL,GLSC,DGLF,FEECNT,FEEPLN,ANVDT)=""

	set FEETYP="CRD"
	set NOTFSN=0
	set FEECAT=2
	set ER=0
	set (FEEAMT,TAMT)=0
	set (TMPSRV,TR16)=""
	
	type RecordCRD crd=Db.getRecord("CRD","CRDTYP=:CRDTYP,CRDNUM=:CRDNUM",1)
	if 'crd.getMode() quit

	// Check to see if the card is cancelled
	if crd.stat=5 quit	
	
	set CID=crd.feecid quit:CID=""

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	do SFEEGL(.dep)
	
	// Check to see if fee should be waived
	if crd.feewaive do { quit
		// Update anniversary date for card
		do REVANV 
		do CRDEXEC(CRDTYP,CRDNUM,.crd)
		if ER.get() do EXC quit
		}
	
	// Service Fee Plan
	set FEEPLN=dep.feepln	
	if FEEPLN'="" do GETPGM(EFD,FEEPLN,.dep)
	if FEEAMT do BUILDTR(.dep)

	set USPL=dep.uspl
	if USPL'="" do GETPGM(EFD,USPL,.dep)
	
	// Update anniversary date for card
	do REVANV 	
	do CRDEXEC(CRDTYP,CRDNUM,.crd)
	if ER.get() do EXC quit
	quit


GETPGM(EFD,FEEPLN,RecordDEP dep)	// Get fee posting program
	
	type public Date SCND
	type public Number FEEAMT,NOTFSN,RETURN
	type public String CRDTYP,FEETYP,PGM
	type Date LASTDT
	type String CARDTYPE
		
	if EFD.get()="" set EFD=%SystemDate
	set LASTDT=EFD+1

	type ResultSet rsfee=Db.select("FEEDT","FEEPLN","PLAN=:FEEPLN and FEEDT<:LASTDT","FEEDT DESC")

	set RETURN=rsfee.next()
	set SCND=rsfee.getCol("FEEDT")
	set PGM=$$FEEPGM^UFID(FEEPLN,SCND)
	
	// Service fee program not compiled
	if PGM="" do Runtime.setErrMSG("FEEPLN",2481,FEEPLN) do EXC quit
	set PGM="^"_PGM_"(.dep,2,"""_FEETYP_""",1,"_NOTFSN_")"
	set CARDTYPE=CRDTYP

	kill FEEAMT do @PGM set FEEAMT=FEEAMT.get()
	
	quit
	
	
CRDEXEC(CRDTYP,CRDNUM,RecordCRD crd) 
	
	/*
	Used to update the anniversary date.
	 ARGUMENTS:
		
	    . CRDTYP	Card Type		/TYPE=T/REQ/MECH=VAL
	
	    . CRDNUM	Card Number		/TYPE=N/REQ/MECH=VAL
		
	*/
	type public Date ANVDT
	
	do crd.setAuditFlag(1)
	set crd.anvdt=ANVDT
	do crd.save()
	
	quit
	
	
BUILDTR(RecordDEP dep) // Build TTX transaction array
	
	/*
	  GPCT -->> General Purpose Credit Trancode
	  TSO  -->> Transaction source
	  TCMT -->> Teller comment
	*/
	
	type public Date EFD,TPD
	type public Number FEEAMT
	type public String BRCD,CID,CRDNUM,ETC,CRCD,PRODTYP,TR16
	type Number par(),ttxseqno
	type String TTXBLD(),x
	 
	// Define TranSet and TTX objects
	type TranSet ts=Class.new("TranSet")
	type RecordTTX ttx
	
	set ttxseqno=0
	set (ETC,CRCD)=""
	
 	// Debitor
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:PRODTYP")
	
	set ETC=$$FINDETC^BCHFEEUT(.prodctl,"CRD") 

	// set array containing values of transaction to be posted.
	set TTXBLD("CID")=CID
	set TTXBLD("ETC")=ETC
	set TTXBLD("TAMT")=FEEAMT
	set TTXBLD("EFD")=EFD
	set TTXBLD("TSO")=""
	set TTXBLD("TCMT")=$$^MSG(2621)_CRDNUM.get()
	set TTXBLD("CRCD")=dep.crcd
	set TTXBLD("TLO")=%UserStation

	// set M++ parameters for transaction record
	set ttx=Class.new("RecordTTX")
	set x=ts.copyTran(ttx,.TTXBLD)

	//update lnerc since copyTran does not account for this field.
	if 'TR16.get().isNull() set ttx.lnerc=TR16

	// System generated
	set par("IPMODE")=3
	// Process transactions; update database			
	set par("OPTION")=2		
	// Set up offset before posting to prevent redefinition of the amount
	do BLDOFF(.dep,.prodctl)	
	do ts.postTSet(TPD,BRCD,.par)
	
	quit
	
	
BLDOFF(RecordDEP dep,RecordPRODCTL prodctl)	
	// Build offset global to include the amounts posted to each individual account
	
	/* 
	   Build a new entry for offset global if it does not exist
	   if it does exist, then skip down and add the amount to what 
	   has already been saved and file.
	*/
	
	type public Date TJD
	type public Number FEEAMT,FEEGL
	type Number CC,JOB	
	type String BCHID,CRCD,ETC,GLSC,TCMT,TYPE
	
	set TJD=%SystemDate
	set BCHID="CRDANV"
	set JOB=%ProcessID
	set CRCD=dep.crcd
	set TYPE=dep.type
	set GLSC=dep.glsc
	set CC=dep.cc

	type RecordTMPBCHOFF tmpbchoff=Db.getRecord("TMPBCHOFF","TJD,BCHID,JOB,""inc"",CRCD,TYPE,GLSC,CC",1)
	if 'tmpbchoff.getMode() do {
		set ETC=prodctl.odtc1
		set TCMT=$$^MSG(2621)
		if ETC="" set ETC=prodctl.dda
		do BDOFFSET^BCHSOURC("CRDANV","inc",CRCD,TYPE,GLSC,CC,FEEGL,FEEGL,"MDR","MCR",TCMT)
		}

	// update a existing entry with the offset amount from this transaction
	do UPOFFSET^BCHSOURC("CRDANV","inc",CRCD,TYPE,GLSC,CC,1,FEEAMT)
	
	quit
	
	
REVANV  // Update anniversary date. Set date to end of the month plus one year.
	
	type public Date ANVDT
	type Date JD1
	
	// Set date to end of month.
	set JD1=$$EOMJD^SCADAT(%SystemDate,1)	
	// Advance date by one year.
	set ANVDT=$$ADDMJD^SCADAT(JD1,12,1)
		
	quit
	
	
SFEEGL(RecordDEP dep)  // Determine GL Account or the Service Fee Income general ledger account
		       // defined in the account's general ledger set code.

	type public Number FEEGL	
	type public String CRDTYP,PRODTYP

	
	set PRODTYP=dep.type

	type RecordCRDTYP crdtype=Db.getRecord("CRDTYP","CARDTYPE=:CRDTYP")

	if 'crdtype.feegl.isNull() set FEEGL=crdtype.feegl
	else  do {
	
		type RecordUTBLGLSC utblglsc=Db.getRecord("UTBLGLSC","GLSC=:dep.glsc") // General Ledger Set Code
	
		if 'utblglsc.dglf.isNull() do {
			//Dep G/L # (Fee Income)
			set FEEGL=utblglsc.dglf
			}
		// General Ledger Suspense Account Number
		else  set FEEGL=CUVAR.glts
		}

	quit
	
	
EXC	// Log error to DAYEND
	
	type public Boolean ER
	type public String CRDNUM,ET,RM
	type public Number %ZTSEQ
	
	set ER=0
	do LOG^UTLEXC($T(+0),"*",RM.get(),CRDNUM.get(),%ZTSEQ.get(),ET.get())
	kill ET,%ZTSEQ
	
	quit
	
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CRDTYP,CRDNUM
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CRDTYP=vRECORD.piece($C(9),1)
 set CRDNUM=vRECORD.piece($C(9),2)
 do vPROC(CRDTYP,CRDNUM)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CRDTYP,CRDNUM
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+34>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CRDTYP,CRDNUM","CRD","CRD.ANVDT=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Date TPD
	type public String BRCD
	type Number JOB
	
 	set %ProcessMode=1
	
	//Determine BRCD from the batch teller
	do SOURCE^BCHSOURC("FEE","FEE",.%UserID,.BRCD,.%UserClass)
	
	set TPD=%SystemDate
 	
 	if '$$BD^UNBD(TPD,"") set TPD=$$NBD^UNBD(TPD,7,0,"")
	set JOB=%ProcessID
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type public String BRCD
	
	//Determine BRCD from the batch teller
	do SOURCE^BCHSOURC("FEE","FEE",.%UserID,.BRCD,.%UserClass)

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	
	type Date TPD
	type public String BRCD
	set TPD=%SystemDate
	
	// Post the offsets using routine OFFSET^UMSC
	do OFFSET^TTXBLD(%SystemDate,BRCD,%UserID,"CRDANV")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
