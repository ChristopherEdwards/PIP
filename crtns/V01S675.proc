V01S675(%ProcessMode,RecordUTBLRTH fUTBLRTH())   //PBS - DEP - SID= <UTBLHLD> Check/Float Hold Input 
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:55 - shetyes
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="UTBLHLD",VPGM=$T(+0),VSNAME="Check/Float Hold Input "
 set VFSN("UTBLRTH")="zfUTBLRTH"
 set vPSL=1
 set KEYS(1)=fUTBLRTH(1).NUM.get()
 set KEYS(2)=fUTBLRTH(1).BRCD.get()
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=15 do VPR(.fUTBLRTH()),VDA1(.fUTBLRTH()),V5^DBSPNT quit

 if '%ProcessMode do VNEW(.fUTBLRTH()),VPR(.fUTBLRTH()),VDA1(.fUTBLRTH())
 if %ProcessMode do VLOD(.fUTBLRTH()) quit:$G(ER)  do VPR(.fUTBLRTH()),VDA1(.fUTBLRTH())

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLRTH())
 type Number ptr
 set ptr=""
 for  set ptr = fUTBLRTH(ptr).order() quit:ptr.isNull()  do {
     if fUTBLRTH(ptr).BRCD="" kill fUTBLRTH(ptr)
     }
	quit


VNEW(RecordUTBLRTH fUTBLRTH()) // Initialize arrays if %O=0
 
 do VLOD(.fUTBLRTH())
 do VDEF(.fUTBLRTH())
 do VLOD(.fUTBLRTH())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordUTBLRTH fUTBLRTH())
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VNEWDQ(RecordUTBLRTH fUTBLRTH()) // Original VNEW section
 
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
VLOD(RecordUTBLRTH fUTBLRTH()) // User defined access section
 //
 if '$D(%REPEAT) set %REPEAT=15
 if '$D(%MODS) set %MODS=1
	type Public Number VAL
	type ResultSet rs1=Db.select("KEY","UTBLRTTBL","KEY<999999999","KEY DESC")
	if rs1.next() set VAL=rs1.getCol("KEY")
 #ACCEPT date=11/05/03;pgm=Screen compiler
 quit
VLODDQ(RecordUTBLRTH fUTBLRTH()) //Original VLOD section
 
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLRTH fUTBLRTH()) // Display screen prompts
 set VO="3||13|0"
 set VO(0)="|0"
 set VO(1)=$C(5,3,7,0,0,0,0,0,0,0)_"01TRoute &"
 set VO(2)=$C(6,2,9,0,0,0,0,0,0,0)_"01TTransit #"
 set VO(3)=$C(6,25,44,0,0,0,0,0,0,0)_"01T#1    #2    #3    #4    #5    #6    #7    #8"
 if '$D(%MODS) set %MODS=1
 set DY=8 for I=%MODS:1:%REPEAT+%MODS-1 do VRPR(.fUTBLRTH())
 set VO=(+VO)_"|"_(VO+1)_"|13" quit  // BOD pointer
 
VRPR(RecordUTBLRTH fUTBLRTH())  // Display prompts %REPEAT times
 
 set VO(VO+1)=$C(DY+1,14,9,0,0,0,0,0,0,0)_"01TFloat hld"
 set VO(VO+2)=$C(DY+1,71,6,0,0,0,0,0,0,0)_"01T(days)"
 set VO(VO+3)=$C(DY+2,9,14,0,0,0,0,0,0,0)_"01TReg CC Chk hld"
 set VO(VO+4)=$C(DY+2,71,6,0,0,0,0,0,0,0)_"01T(days)"
 set VO(VO+5)=$C(DY+3,5,18,0,0,0,0,0,0,0)_"01TNon-Reg CC Chk hld"
 set VO(VO+6)=$C(DY+3,71,6,0,0,0,0,0,0,0)_"01T(days)"
 set VO=VO+6,DY=DY+4
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordUTBLRTH fUTBLRTH())  // Display screen data
 new V
 if %ProcessMode=5 new BRCD
 if  set (BRCD)=""
 else  set BRCD=$G(BRCD)
 
 //
 set VX=$P(VO,"|",2)
 set VO(VX+0)=$C(2,32,0,2,0,0,0,0,0,0)_"01T"_"Check/Float Hold "_$S(%O=2:"Inquiry",1:"Maintenance")
 set VO(VX+1)=$C(4,35,0,0,0,0,0,0,0,0)_"01T"_"Hold Table - Branch "_BRCD
 set VO(VX+2)=$C(7,23,0,2,0,0,0,0,0,0)_"01T"_$J("",49)
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+2,DY=8 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLRTH())
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLRTH fUTBLRTH())  // Display data %REPEAT times
 //instantiate new object if necessary
  if 'fUTBLRTH(I).getPointer() do {
     set fUTBLRTH(I)=Class.new("RecordUTBLRTH","$G(KEYS(1))")
     }
 set VO(VX+1)=$C(DY,2,15,2,0,0,0,0,0,0)_"00T"_$E(fUTBLRTH(I).NUM,1,15)
 set VO(VX+2)=$C(DY+1,25,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT1
 set VO(VX+3)=$C(DY+1,31,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT2
 set VO(VX+4)=$C(DY+1,37,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT3
 set VO(VX+5)=$C(DY+1,43,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT4
 set VO(VX+6)=$C(DY+1,49,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT5
 set VO(VX+7)=$C(DY+1,55,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT6
 set VO(VX+8)=$C(DY+1,61,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT7
 set VO(VX+9)=$C(DY+1,67,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).FLT8
 set VO(VX+10)=$C(DY+2,25,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC1
 set VO(VX+11)=$C(DY+2,31,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC2
 set VO(VX+12)=$C(DY+2,37,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC3
 set VO(VX+13)=$C(DY+2,43,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC4
 set VO(VX+14)=$C(DY+2,49,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC5
 set VO(VX+15)=$C(DY+2,55,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC6
 set VO(VX+16)=$C(DY+2,61,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC7
 set VO(VX+17)=$C(DY+2,67,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).RCC8
 set VO(VX+18)=$C(DY+3,25,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD1
 set VO(VX+19)=$C(DY+3,31,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD2
 set VO(VX+20)=$C(DY+3,37,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD3
 set VO(VX+21)=$C(DY+3,43,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD4
 set VO(VX+22)=$C(DY+3,49,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD5
 set VO(VX+23)=$C(DY+3,55,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD6
 set VO(VX+24)=$C(DY+3,61,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD7
 set VO(VX+25)=$C(DY+3,67,2,2,0,0,0,0,0,0)_"00N"_fUTBLRTH(I).HLD8
 set DY=DY+4,VX=VX+25
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordUTBLRTH fUTBLRTH())
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %REPREQ=25 set %MODGRP=4
 set %MODOFF=0,%MOD=25,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=2,VPB=7+(%REPEAT*4),BLKSIZ=(63*%REPEAT)+0,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLRTH"
 set OLNTB=VPB*1000
 
 set VFSN("UTBLRTH")="zfUTBLRTH"
 //
 for I=26:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(7,1,15)_"00T12401|1|[UTBLRTH]NUM|[UTBLRT]||do VP1^V01S675(.fUTBLRTH)|do VP2^V01S675(.fUTBLRTH)"
 set %TAB(2)=$C(8,24,2)_"00N12401|1|[UTBLRTH]FLT1|||do VP3^V01S675(.fUTBLRTH)"
 set %TAB(3)=$C(8,30,2)_"00N12404|1|[UTBLRTH]FLT2|||do VP4^V01S675(.fUTBLRTH)"
 set %TAB(4)=$C(8,36,2)_"00N12407|1|[UTBLRTH]FLT3|||do VP5^V01S675(.fUTBLRTH)"
 set %TAB(5)=$C(8,42,2)_"00N12410|1|[UTBLRTH]FLT4|||do VP6^V01S675(.fUTBLRTH)"
 set %TAB(6)=$C(8,48,2)_"00N12413|1|[UTBLRTH]FLT5|||do VP7^V01S675(.fUTBLRTH)"
 set %TAB(7)=$C(8,54,2)_"00N12416|1|[UTBLRTH]FLT6|||do VP8^V01S675(.fUTBLRTH)"
 set %TAB(8)=$C(8,60,2)_"00N12419|1|[UTBLRTH]FLT7|||do VP9^V01S675(.fUTBLRTH)"
 set %TAB(9)=$C(8,66,2)_"00N12422|1|[UTBLRTH]FLT8|||do VP10^V01S675(.fUTBLRTH)"
 set %TAB(10)=$C(9,24,2)_"00N12402|1|[UTBLRTH]RCC1|||do VP11^V01S675(.fUTBLRTH)"
 set %TAB(11)=$C(9,30,2)_"00N12405|1|[UTBLRTH]RCC2|||do VP12^V01S675(.fUTBLRTH)"
 set %TAB(12)=$C(9,36,2)_"00N12408|1|[UTBLRTH]RCC3|||do VP13^V01S675(.fUTBLRTH)"
 set %TAB(13)=$C(9,42,2)_"00N12411|1|[UTBLRTH]RCC4|||do VP14^V01S675(.fUTBLRTH)"
 set %TAB(14)=$C(9,48,2)_"00N12414|1|[UTBLRTH]RCC5|||do VP15^V01S675(.fUTBLRTH)"
 set %TAB(15)=$C(9,54,2)_"00N12417|1|[UTBLRTH]RCC6|||do VP16^V01S675(.fUTBLRTH)"
 set %TAB(16)=$C(9,60,2)_"00N12420|1|[UTBLRTH]RCC7|||do VP17^V01S675(.fUTBLRTH)"
 set %TAB(17)=$C(9,66,2)_"00N12423|1|[UTBLRTH]RCC8|||do VP18^V01S675(.fUTBLRTH)"
 set %TAB(18)=$C(10,24,2)_"00N12403|1|[UTBLRTH]HLD1|||do VP19^V01S675(.fUTBLRTH)"
 set %TAB(19)=$C(10,30,2)_"00N12406|1|[UTBLRTH]HLD2|||do VP20^V01S675(.fUTBLRTH)"
 set %TAB(20)=$C(10,36,2)_"00N12409|1|[UTBLRTH]HLD3|||do VP21^V01S675(.fUTBLRTH)"
 set %TAB(21)=$C(10,42,2)_"00N12412|1|[UTBLRTH]HLD4|||do VP22^V01S675(.fUTBLRTH)"
 set %TAB(22)=$C(10,48,2)_"00N12415|1|[UTBLRTH]HLD5|||do VP23^V01S675(.fUTBLRTH)"
 set %TAB(23)=$C(10,54,2)_"00N12418|1|[UTBLRTH]HLD6|||do VP24^V01S675(.fUTBLRTH)"
 set %TAB(24)=$C(10,60,2)_"00N12421|1|[UTBLRTH]HLD7|||do VP25^V01S675(.fUTBLRTH)"
 set %TAB(25)=$C(10,66,2)_"00N12424|1|[UTBLRTH]HLD8|||do VP26^V01S675(.fUTBLRTH)"
 do VTBL(.fUTBLRTH()),VDEPRE(.fUTBLRTH()) if $G(ER) quit
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordUTBLRTH fUTBLRTH()) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDEPRE(RecordUTBLRTH fUTBLRTH())  // Data Entry Pre-processor
 
 if %ProcessMode,%IPMODE.get()'["NOINT" do PROTECT^DBSMACRO("[UTBLRTH]RT")
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordUTBLRTH fUTBLRTH()) //
        type Public String RM,X
        type Public Boolean ER

	// This validation is only for the first R&T number and the other
	// entries are handled by post-processors of the hold days.
	// Data required
        if I(1)=1,(fUTBLRTH(1).num.isNull()),(X.isNull()) do Runtime.setErrMSG("UTBLRTH",741) quit

        if X'="",'Db.isDefined("UTBLRT","NUM=:X") do { quit

                // Define routing and transit number first
                do Runtime.setErrMSG("UTBLRT",4997)
                }

        if '%ProcessMode,X'="",Db.isDefined("UTBLRTH","NUM=:X,BRCD=:BRCD") do { quit

                // Record already exists
                do Runtime.setErrMSG("UTBLRTH",2327)
                set X=""
                }
	
	if %ProcessMode,fUTBLRTH(I(1)).num'=X do { quit

               // R & T number protected
               do Runtime.setErrMSG("UTBLRTH",2304)
               }

       if '%ProcessMode,X'="" set fUTBLRTH(I(1)).num = X

       quit
VP2(RecordUTBLRTH fUTBLRTH()) //
 if %ProcessMode do PROTECT^DBSMACRO("[UTBLRTH]NUM")
VP3(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>1 quit

 do PROTECT^DBSMACRO("[UTBLRTH]HLD2")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD3")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD4")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD5")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD6")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD7")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT2")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT3")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT4")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT5")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT6")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT7")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC2")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC3")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC4")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC5")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC6")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC7")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP4(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>2 quit
 do PROTECT^DBSMACRO("[UTBLRTH]HLD3")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD4")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD5")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD6")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD7")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT3")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT4")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT5")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT6")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT7")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC3")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC4")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC5")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC6")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC7")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP5(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL,X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>3 quit
 do PROTECT^DBSMACRO("[UTBLRTH]HLD4")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD5")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD6")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD7")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT4")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT5")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT6")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT7")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC4")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC5")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC6")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC7")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP6(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL,X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>4 quit

 do PROTECT^DBSMACRO("[UTBLRTH]HLD5")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD6")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD7")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT5")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT6")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT7")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC5")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC6")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC7")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP7(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL,X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>5 quit

 do PROTECT^DBSMACRO("[UTBLRTH]HLD6")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD7")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT6")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT7")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC6")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC7")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP8(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL,X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>6 quit

 do PROTECT^DBSMACRO("[UTBLRTH]HLD7")
 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT7")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC7")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP9(RecordUTBLRTH fUTBLRTH()) //
 type Public Number VAL,X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997) quit

 if VAL>7 quit

 do PROTECT^DBSMACRO("[UTBLRTH]HLD8")
 do PROTECT^DBSMACRO("[UTBLRTH]FLT8")
 do PROTECT^DBSMACRO("[UTBLRTH]RCC8")
VP10(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
VP11(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP12(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first 
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
VP13(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP14(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP15(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP16(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP17(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP18(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP19(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP20(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP21(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
VP22(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
VP23(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)

VP24(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
VP25(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
VP26(RecordUTBLRTH fUTBLRTH()) //
 type Public Number X

 // Define routing and transit number first
 if (fUTBLRTH(I(1)).num.isNull()),('X.isNull()) do Runtime.setErrMSG("UTBLRT",4997)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLRTH fUTBLRTH()
 do VPR(.fUTBLRTH())
 do VDA1(.fUTBLRTH())
 do ^DBSPNT()
 quit

VW(RecordUTBLRTH fUTBLRTH())
 do VDA1(.fUTBLRTH())
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLRTH fUTBLRTH())
 do VDA1(.fUTBLRTH())
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLRTH fUTBLRTH()
 do VDA1(.fUTBLRTH())
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLRTH fUTBLRTH()
 if sn="UTBLRTH" do vSET1(fUTBLRTH(I(1)),di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordUTBLRTH fUTBLRTH,di,X)
 do fUTBLRTH.setAuditFlag(1)
 set fUTBLRTH.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordUTBLRTH fUTBLRTH()
 if fid="UTBLRTH" quit $$vREAD1(fUTBLRTH(I(1)),di)
 quit ""
vREAD1(RecordUTBLRTH fUTBLRTH,di)
 quit fUTBLRTH.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
