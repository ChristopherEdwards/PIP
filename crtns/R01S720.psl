R01S720	// YVBMDTL - VBM Acct Summary and Trans Detail File
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:04 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String BANKID="BLUESHIFT"
	type Date VIN1=%SystemDate-1

	set RID="YVBMDTL"
	set RN="VBM Acct Summary and Trans Detail File"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("BANKID")="|12|||||||T|Bank ID|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|10||[DTJ]TJD|[DTJ]TJD:DISTINCT:NOVAL||||D|Processing Date|||||"

	set %READ="IO/REQ,VIN1#1,BANKID#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public Date VIN1
	type public String BANKID
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,APYLST,BALAVL,CONAM,DETAIL,DYSINCYC,LSTSTMT,PSTDATE,RECCNT,RID,RN,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	set CONAM=CUVAR.conam
	set ER=0,RID="YVBMDTL",RN="VBM Acct Summary and Trans Detail File"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YVBMDTL","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=221")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[DTJ]CID#2#32,[ACN]BAL#46#14"

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("DTJ.TJD,DTJ.CID,DTJ.TSEQ,DTJ.DATETIME,ACN.BAL,ACN.CLS,ACN.IRN,DEP.ACN,DEP.CID,DEP.IPLD,DEP.ODT,DEP.INP,ACN.CRCD,DTJ.TYPE,DTJ.TAMT,DTJ.ETC,DTJ.TSO,DTJ.EFD,DTJ.ITC1,DTJ.ITC12,DTJ.TLO","DTJ,ACN,DEP,LN,HISTR","DTJ.TJD=:VIN1 AND DTJ.ITC6=0 AND DTJ.ETC IS NOT NULL AND DTJ.ITC IS NOT NULL AND DTJ.TAMT IS NOT NULL AND +HISTR.REVFLG NOT =1","DTJ.TJD,DTJ.CID,DTJ.TSEQ,DTJ.DATETIME","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21
	set vc1=V.piece($C(9),1)			// DTJ.TJD
	set vc2=V.piece($C(9),2)			// DTJ.CID
	set vc3=V.piece($C(9),3)			// DTJ.TSEQ
	set vc4=V.piece($C(9),4)			// DTJ.DATETIME
	set vc5=V.piece($C(9),5)			// ACN.BAL
	set vc6=V.piece($C(9),6)			// ACN.CLS
	set vc7=V.piece($C(9),7)			// ACN.IRN
	set vc8=V.piece($C(9),8)			// DEP.ACN
	set vc9=V.piece($C(9),9)			// DEP.CID
	set vc10=V.piece($C(9),10)			// DEP.IPLD
	set vc11=V.piece($C(9),11)			// DEP.ODT
	set vc12=V.piece($C(9),12)			// DEP.INP
	set vc13=V.piece($C(9),13)			// ACN.CRCD
	set vc14=V.piece($C(9),14)			// DTJ.TYPE
	set vc15=V.piece($C(9),15)			// DTJ.TAMT
	set vc16=V.piece($C(9),16)			// DTJ.ETC
	set vc17=V.piece($C(9),17)			// DTJ.TSO
	set vc18=V.piece($C(9),18)			// DTJ.EFD
	set vc19=V.piece($C(9),19)			// DTJ.ITC1
	set vc20=V.piece($C(9),20)			// DTJ.ITC12
	set vc21=V.piece($C(9),21)			// DTJ.TLO
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 type public Number RECCNT

 set RECCNT=0
	quit

VPREBQ	// Pre-processor (before query)

 type public String IO  
 
 set IO=(%SystemDate-1).toString("MMDD")_".DTL"
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(2).get() do VDTL2 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(vovc1'=vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL2	// Detail
	type public String APYLST,BALAVL,BANKID,DETAIL,DYSINCYC,IOSL,LSTSTMT,PSTDATE,RECCNT,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4

	quit:VD(2)  set VD(2)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="A"
	set V=vc2,VO=V do VP1 quit:VFMQ!verror.get()  set V=$E(V,1,32)
	set VL=VL_$J("",1-VL.length())_V		// [SYSDEV,DTJ]CID
	do VP2 quit:VFMQ!verror.get()  set V=$J(BALAVL,12)
	set VL=VL_$J("",33-VL.length())_V
	set V=vc5,VO=V do VP3 quit:VFMQ!verror.get()  set V=$J(V,14)
	set VL=VL_$J("",45-VL.length())_V		// [SYSDEV,ACN]BAL
	do VP4 quit:VFMQ!verror.get()  set V=$J(APYLST,6)
	set VL=VL_$J("",59-VL.length())_V
	do VP5 quit:VFMQ!verror.get()  set V=$E(LSTSTMT,1,9)
	set VL=VL_$J("",65-VL.length())_V
	do VP6 quit:VFMQ!verror.get()  set V=$E(DYSINCYC,1,3)
	set VL=VL_$J("",90-VL.length())_V
	do VOM
	quit

VDTL3	// Detail
	type public String APYLST,BALAVL,BANKID,DETAIL,DYSINCYC,IOSL,LSTSTMT,PSTDATE,RECCNT,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4

	quit:VD(3)  set VD(3)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	do VP7 quit:VFMQ!verror.get()  set V=$E(DETAIL,1,220) set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,APYLST,BALAVL,BANKID,CONAM,DETAIL,DYSINCYC,LSTSTMT,PSTDATE,RECCNT,RID,RN,VL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+1,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL="H"
	do VP8 quit:VFMQ!verror.get()  set V=$E(BANKID,1,12)
	set VL=VL_$J("",1-VL.length())_V
	do VP9 quit:VFMQ!verror.get()  set V=$E(PSTDATE,1,10)
	set VL=VL_$J("",13-VL.length())_V
	set VL=VL_$J("",23-VL.length())_$E(10E30_0000,29+$L(0000),99)
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String APYLST,BALAVL,BANKID,DETAIL,DYSINCYC,LSTSTMT,PSTDATE,RECCNT,vovc1,vovc2,vovc3,vovc4
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="T"
	set VL=VL_$J("",1-VL.length())_$J(RECCNT,11)
	do VOM
	quit

VOM	// Output print line
	type Public Number VLC
	type Public String IO,VL

	use IO
	write VL_$J("",220-VL.length()),!
	set VL="",VLC=VLC+1
	quit

	// Pre/post-processors

VP1	// Column pre-processor - [SYSDEV,DTJ]CID

	type public String vc2
 /* Get first financial transaction to identify Initial Deposit
   Assumption -	First transaction with ETC'="" and ITC'="" and TAMT'=""
   must be the initial deposit or disbursement.
 */
 	            
 type public Number CID,INITSEQ,RECCNT
 		
 set RECCNT=RECCNT+1
 set CID=vc2
 set INITSEQ=""
 type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID AND ITC NOT = '' AND ETC NOT = '' AND TAMT NOT = ''")
 if rs.next() set INITSEQ=rs.getCol("TSEQ")
	quit

VP2	// Column pre-processor - Variable: BALAVL

	type public String vc2,vc6
 type public Number BALAVL,CID
 
 type String DETAIL
 
 set CID=vc2
 if vc6="D" set BALAVL=$$BALAVL^DEPCDI(CID)
 if vc6="L" set BALAVL=$$AVLBAL^LNCDI(CID)
 set BALAVL=(BALAVL*100)\1
 set DETAIL=""
 do FM(0,12,BALAVL,"N")
 set BALAVL=DETAIL
	quit

VP3	// Column pre-processor - [SYSDEV,ACN]BAL

 type public Number V
 type String DETAIL
 
 set V=(V*100)\1
 set DETAIL=""
 do FM(0,14,V,"N")
 set V=DETAIL
	quit

VP4	// Column pre-processor - Variable: APYLST

	type public String vc7
 type public Number APYLST
 
 set APYLST=vc7
 set APYLST=(APYLST*100)\1
	quit

VP5	// Column pre-processor - Variable: LSTSTMT

	type public String vc8,vc9
 type public Boolean ER
 type public Number ACN,CID
 type public String LSTSTMT
 
 type Date BOY,JJJ,JUL
 		
 set (LSTSTMT,JUL)=""
 set ACN=vc8
 set CID=vc9
 if ACN.isNull() quit
 type ResultSet rs=Db.select("SLTD","CMBSTM","ACN=:ACN AND CID=:CID")
 if ER quit
 if rs.next() set JUL=rs.getCol("SLTD")
 if JUL.isNull() quit
 set LSTSTMT=JUL.toString("MMDDYY")
 set BOY=$$BOYJD^SCADAT(JUL)
 set JJJ=JUL-BOY+1
 set LSTSTMT=LSTSTMT_JJJ
	quit

VP6	// Column pre-processor - Variable: DYSINCYC

	type public String vc10,vc11,vc12
 type public String DYSINCYC
 
 type Date IPLD,INP
 			
 set DYSINCYC="000"
 set IPLD=vc10
 if IPLD.isNull() set IPLD=vc11
 set INP=vc12
 if INP.isNull() quit
 set DYSINCYC=INP-IPLD
 if DYSINCYC<0 set DYSINCYC=0
 set DYSINCYC="000".extract(1,3-DYSINCYC.length())_DYSINCYC
	quit

VP7	// Column pre-processor - Variable: DETAIL

	type public String vc6,vc13,vc2,vc14,vc15,vc16,vc17,vc18,vc1,vc19,vc20,vc21,vc3
 type public Date DTJTJD,EFD
 type public Number AMT,CID,INITSEQ,RECCNT,TYPE,TSEQ
 type public String CLS,CRCD,DETAIL,DMASK,ETC,N,RECTYPE,SERIAL,SHRTDESC,SPC,TAMT,TRANTYPE,TRB,TSO
 			
 // Generate detail record
 set CLS=vc6
 set CRCD=vc13
 set CID=vc2
 set TYPE=vc14
 set TAMT=vc15
 set ETC=vc16
 set TSO=vc17
 set EFD=vc18
 set DTJTJD=vc1
 set DETAIL="",TRB="",RECTYPE="D",N="N",SPC="",DMASK="MMDDYEAR"
 if TSEQ=INITSEQ set RECTYPE="I"
 
 type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE",1)
 set TRB=prodctl.trb
 
 set AMT=$S(TAMT["#":TAMT.piece("#",2),1:+TAMT)
 set AMT=(AMT*100)\1
 if AMT=0 quit
 if EFD.isNull() set EFD=DTJTJD
 set TRANTYPE=$S((vc19-TRB=0):"D",1:"C")
 if vc20=1 set TRANTYPE="R"
 if 'ETC(ETC).exists() do LOADETC^TTXEXT(.ETC)
 set SHRTDESC=(ETC(ETC).get()).piece("|",6)
 set SERIAL=$$FIELD^UTSO(TSO,"CK")
 
 set DETAIL=RECTYPE,RECCNT=RECCNT+1
 do FM(1,32,CID)		// Account Number
 do FM(33,1,TRANTYPE)	// Trantype C,D,R
 do FM(34,5,ETC,N)	// Tran Code
 do FM(39,11,AMT,N)	// Transaction Amount
 do FM(50,11,SERIAL,N)	// Check Number
 do FM(61,20,SHRTDESC)	// Tran Code Description
 do FM(81,18,SHRTDESC)	// Tran Code Description
 do FM(99,18,vc21)	// Terminal Number
 do FM(117,18,SPC)	// Desc 3
 do FM(135,18,SPC)	// Desc 4
 do FM(153,18,SPC)	// Desc 5 /Card Number
 do FM(171,18,vc3)	// Trans Sequence Number
 do FM(189,8,$$DAT^%ZM(DTJTJD,DMASK))
 do FM(197,8,$$DAT^%ZM(EFD,DMASK))
 do FM(205,15,SPC)	// Filler
 
 quit
 
FM(OFF,LEN,FLD,FMT,ADD,FILL,JUS) //
 /*
   This function will format fields based on parameters supplied
   and place the results into the local varaible DETAIL at the specified
   location and length. If FMT=N and FLD is negative the negative sign will
   be placed to the left of the leftmost non-blank character.
   EX: -21(LEN=5) = -0021
                            
   OFF = Offset into DETAIL (0 based number) Byte 1 = offset 0
   LEN = Length of field
   FLD = Data to work with
   FMT = Format, Alpha or Numeric. DEF="A".
   ADD = Add only field, ""=ignore 0=(set FLD="") 1=(Process normally)
   FILL= Fill character. Default=(FMT=A:" ", FMT="N":"0")
   JUS = Justify Left or Right. DEF=(FMT="N":"R", FMT="A":"L")
 */

 type public String BUF,DETAIL  
 
 type Number NEXT,STOP,STRT
 type String REPLY,SGN,X
 
 set REPLY="",SGN=""
 if (LEN.get()).isNull() set LEN=FLD.length()
 // If ADD=0 then this is a modify and this field should be blanked out.
 if ADD.get()=0 set FLD="",FMT="A",FILL=" "
 set STRT=OFF+1
 set STOP=STRT+LEN-1
 set NEXT=STOP+1
 if (FMT.get()).isNull() set FMT="A"
 if (FILL.get()).isNull() set FILL=$S(FMT="A":" ",1:"0")
 if (JUS.get()).isNull() set JUS=$S(FMT="A":"L",1:"R")
 set BUF.piece(FILL,LEN+1)=""
 
 if (FMT="N"),(JUS="R"),(FILL'=" "),(FLD<0) set SGN="-",FLD=(-1)*FLD,LEN=LEN-1
 
 if JUS="L" set REPLY=FLD.extract(1,LEN)_BUF.extract(1,LEN-FLD.length())
 else  set REPLY=SGN_BUF.extract(1,LEN-FLD.length())_FLD.extract(1,LEN)
 
 set X=DETAIL
 set DETAIL=X.extract(1,OFF)_$J("",OFF-X.length())_REPLY_X.extract(NEXT,X.length())

 quit
	quit

VP8	// Column pre-processor - Variable: BANKID

 type public String BANKID	
 
 if (BANKID.get()).isNull() set BANKID="CITILITE"
	quit

VP9	// Column pre-processor - Variable: PSTDATE

 type public Date TJD
 type public String PSTDATE	
 
 set PSTDATE=TJD.toString("YEAR-MM-DD")
	quit
