MSEGDFIL(RecordUTBLMARSEGDT utblmarsegdt, String vpar, Boolean vparNorm) // UTBLMARSEGDT - Market Segment Detail Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:21 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (8)              11/22/2003
	// Trigger Definition (1)                      12/26/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblmarsegdt.getMode()                // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(utblmarsegdt,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblmarsegdt,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String MARSEG = utblmarsegdt.marseg
	type String SEGID = utblmarsegdt.segid

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("MARSEG").exists()!vx("SEGID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLMARSEGDT",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLMARSEGDT","MARSEG = :utblmarsegdt.marseg and SEGID = :utblmarsegdt.segid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String MARSEG
	type public String SEGID

	type RecordUTBLMARSEGDT utblmarsegdt = Db.getRecord("UTBLMARSEGDT","MARSEG=:MARSEG,SEGID=:SEGID")
	if (%ProcessMode = 2) do {
		do utblmarsegdt.setMode(2)

		do MSEGDFIL(utblmarsegdt,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLMARSEGDT utblmarsegdt

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLMARSEGDT","MARSEG = :utblmarsegdt.marseg and SEGID = :utblmarsegdt.segid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		set utblmarsegdt.LDATE = %SystemDate
		set utblmarsegdt.LTIME = %CurrentTime
		set utblmarsegdt.LUSER = %UserID
		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblmarsegdt,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblmarsegdt,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblmarsegdt)) S ^UTBL("MARSEG",vobj(utblmarsegdt,-3),vobj(utblmarsegdt,-4))=vobj(utblmarsegdt)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLMARSEGDT utblmarsegdt

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar'["/NOLOG/" do ^DBSLOGIT(utblmarsegdt,3)

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^UTBL("MARSEG",vobj(utblmarsegdt,-3),vobj(utblmarsegdt,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordUTBLMARSEGDT utblmarsegdt

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLMARSEGDT utblmarsegdt

	if utblmarsegdt.marseg.isNull() do vreqerr("MARSEG") quit
	if utblmarsegdt.segid.isNull() do vreqerr("SEGID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMARSEGDT","MSG",1767,"UTBLMARSEGDT."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordUTBLMARSEGDT utblmarsegdt
	if 'utblmarsegdt.marseg.isNull() set vfkey("^UTBL("_"""MARSEG"""_","_""""_utblmarsegdt.marseg_""""_")")="UTBLMARSEGDT(MARSEG) -> UTBLMARSEG"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordUTBLMARSEGDT utblmarsegdt
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("UTBLMARSEG",":utblmarsegdt.marseg") set vERRMSG = $$^MSG(8563,"UTBLMARSEGDT(MARSEG) -> UTBLMARSEG") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PARSEG").exists()!vx("PARSEGID").exists() do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PARSEG").exists()!vx("PARSEGID").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - Validate Parent Segment

	do vau1

	quit

vau1 // Trigger AFTER_INSERT - Validate Parent Segment

	type public RecordUTBLMARSEGDT utblmarsegdt
	/*
	---- Revision History ------------------------------------------------

	12/14/05 - KumarSS - 16671
		   Edited to comply with DBI standards.

	09/21/99 - CARROLLJ - 31126
		   Convert to PSL
	*/

	
	// Validate parent segment

	type public Boolean ER

	type Number PMARSEG,ZMARSEG,ZSEGID

	set ZMARSEG=utblmarsegdt.marseg

	// Top level
	if ZMARSEG=99 do { quit

		// Parent segment or segment ID not allowed for segment 99
		if utblmarsegdt.parseg'=""!(utblmarsegdt.parsegid'="") do Runtime.setErrMSG("UTBLMARSEGDT",3688) quit:ER
		}

	// Locate the next level
	type ResultSet rs=Db.select("MARSEG","UTBLMARSEGDT","MARSEG>:ZMARSEG") 

	if rs.isEmpty() quit

	if rs.next() set PMARSEG=rs.getCol("MARSEG")

	// Parent segment should be ~p1
	if PMARSEG'=utblmarsegdt.parseg do Runtime.setErrMSG("UTBLMARSEGDT",3690,PMARSEG) quit:ER

	// validate PARSEG,PARSEGID -> MARSEG,SEGID
	set ZMARSEG=utblmarsegdt.parseg
	set ZSEGID=utblmarsegdt.parsegid

	type RecordUTBLMARSEGDT marsegdt=Db.getRecord("UTBLMARSEGDT","MARSEG=:ZMARSEG,SEGID=:ZSEGID",1)
	
	// Parent segment or ID not defined for ~p1, ~p2
	if 'marsegdt.getMode() do Runtime.setErrMSG("UTBLMARSEGDT",3691,"ZMARSEG~ZSEGID") quit:ER

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLMARSEGDT utblmarsegdt

	set X = utblmarsegdt.marseg if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("MARSEG", vRM) quit
	set X = utblmarsegdt.segid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEGID", vRM) quit
	if utblmarsegdt.des.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DES", vRM) quit
	set X = utblmarsegdt.ldate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LDATE", vRM) quit
	set X = utblmarsegdt.ltime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("LTIME", vRM) quit
	if utblmarsegdt.luser.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LUSER", vRM) quit
	set X = utblmarsegdt.parseg if 'X.isNull(),'Db.isDefined("UTBLMARSEG","X") set vRM = $$^MSG(1485,X) do vdderr("PARSEG", vRM) quit
	set X = utblmarsegdt.parsegid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PARSEGID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLMARSEGDT","MSG",979,"UTBLMARSEGDT."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLMARSEGDT utblmarsegdt

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("MARSEG").exists() set vux("MARSEG") = vx("MARSEG")
	if vx("SEGID").exists() set vux("SEGID") = vx("SEGID")
	do vkey(1) set voldkey = utblmarsegdt.marseg_","_utblmarsegdt.segid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = utblmarsegdt.marseg_","_utblmarsegdt.segid // Copy new keys into object
	type RecordUTBLMARSEGDT vnewrec = utblmarsegdt.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLMARSEGDT",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordUTBLMARSEGDT utblmarsegdt

	if vux("MARSEG").exists() set utblmarsegdt.marseg = vux("MARSEG").piece("|",i)
	if vux("SEGID").exists() set utblmarsegdt.segid = vux("SEGID").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordUTBLMARSEGDT utblmarsegdt
	type public String vpar

	do Db.delete("UTBLPRODLNK","MARSEG=:utblmarsegdt.marseg AND SEGID=:utblmarsegdt.segid",vpar) // Cascade delete

	do Db.delete("UTBLPRODRL","MARSEG=:utblmarsegdt.marseg AND SEGID=:utblmarsegdt.segid",vpar) // Cascade delete

	quit
