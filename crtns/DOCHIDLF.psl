DOCHIDLF(RecordDOCHISTIDLINK dochistidlink, String vpar, Boolean vparNorm) // DOCHISTIDLINK - Document History Linkage Relationship Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:16 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (3)              04/03/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = dochistidlink.getMode()               // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(dochistidlink,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(dochistidlink,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("HISTID").exists()!vx("LINKIDTYPE").exists()!vx("LINKID").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("DOCHISTIDLINK",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("DOCHISTIDLINK","HISTID = :dochistidlink.histid and LINKIDTYPE = :dochistidlink.linkidtype and LINKID = :dochistidlink.linkid") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String HISTID
	type public String LINKIDTYPE
	type public String LINKID

	type RecordDOCHISTIDLINK dochistidlink = Db.getRecord("DOCHISTIDLINK","HISTID=:HISTID,LINKIDTYPE=:LINKIDTYPE,LINKID=:LINKID")
	if (%ProcessMode = 2) do {
		do dochistidlink.setMode(2)

		do DOCHIDLF(dochistidlink,vpar)
	}
	else  do VINDEX(dochistidlink)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordDOCHISTIDLINK dochistidlink

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("DOCHISTIDLINK","HISTID = :dochistidlink.histid and LINKIDTYPE = :dochistidlink.linkidtype and LINKID = :dochistidlink.linkid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(dochistidlink)) S ^DOCHISTL(vobj(dochistidlink,-3),vobj(dochistidlink,-4),vobj(dochistidlink,-5))=vobj(dochistidlink)
		#ENDBYPASS
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.dochistidlink) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordDOCHISTIDLINK dochistidlink

	if vpar["/INDEX/" do VINDEX(.dochistidlink)            // Delete index entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^DOCHISTL(vobj(dochistidlink,-3),vobj(dochistidlink,-4),vobj(dochistidlink,-5))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordDOCHISTIDLINK dochistidlink

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordDOCHISTIDLINK dochistidlink

	if dochistidlink.histid.isNull() do vreqerr("HISTID") quit
	if dochistidlink.linkidtype.isNull() do vreqerr("LINKIDTYPE") quit
	if dochistidlink.linkid.isNull() do vreqerr("LINKID") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DOCHISTIDLINK","MSG",1767,"DOCHISTIDLINK."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordDOCHISTIDLINK dochistidlink
	if 'dochistidlink.histid.isNull() set vfkey("^DOCHIST("_""""_dochistidlink.histid_""""_")")="DOCHISTIDLINK(HISTID) -> DOCHIST"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordDOCHISTIDLINK dochistidlink
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("DOCHIST",":dochistidlink.histid") set vERRMSG = $$^MSG(8563,"DOCHISTIDLINK(HISTID) -> DOCHIST") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordDOCHISTIDLINK dochistidlink

	set X = dochistidlink.histid if 'X.isNull(),'Db.isDefined("DOCHIST","X") set vRM = $$^MSG(1485,X) do vdderr("HISTID", vRM) quit
	set X = dochistidlink.linkidtype if 'X.isNull(),'Db.isDefined("STBLDOCHISTIDTYPE","X") set vRM = $$^MSG(1485,X) do vdderr("LINKIDTYPE", vRM) quit
	set X = dochistidlink.linkid if 'X.isNull(),X'?1.22N,X'?1"-"1.21N set vRM=$$^MSG(742,"N") do vdderr("LINKID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("DOCHISTIDLINK","MSG",979,"DOCHISTIDLINK."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


public VINDEX(RecordDOCHISTIDLINK dochistidlink) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
	}
	do vi1(.dochistidlink)

	quit
	

vi1(RecordDOCHISTIDLINK dochistidlink) // Maintain LINKID index entries (Document History Link Id)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = dochistidlink.linkidtype
	type String v3 = dochistidlink.linkid
	type String v4 = dochistidlink.histid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^DOCHISTL(vobj(dochistidlink,-3),vobj(dochistidlink,-4),vobj(dochistidlink,-5)))#2,'$D(^XDOC("HLINKID",v2,v3,v4)) do vidxerr("LINKID")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XDOC("HLINKID",v2,v3,v4)="" quit
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XDOC("HLINKID",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("DOCHISTIDLINK")

	while ds.next() do {
		type RecordDOCHISTIDLINK dochistidlink=ds.getRecord("DOCHISTIDLINK")
		if vlist.contains("VINDEX") do VINDEX(.dochistidlink) quit
		if vlist.contains("LINKID") do vi1(.dochistidlink)
	}

	quit


public VIDXBLD1(RecordDOCHISTIDLINK dochistidlink, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.dochistidlink) quit
	if vlist.contains("LINKID") do vi1(.dochistidlink)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("DOCHISTIDLINK","MSG",1225,"DOCHISTIDLINK."_di)

	quit


vkchged // Access key changed

	type public RecordDOCHISTIDLINK dochistidlink

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("HISTID").exists() set vux("HISTID") = vx("HISTID")
	if vx("LINKIDTYPE").exists() set vux("LINKIDTYPE") = vx("LINKIDTYPE")
	if vx("LINKID").exists() set vux("LINKID") = vx("LINKID")
	do vkey(1) set voldkey = dochistidlink.histid_","_dochistidlink.linkidtype_","_dochistidlink.linkid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = dochistidlink.histid_","_dochistidlink.linkidtype_","_dochistidlink.linkid // Copy new keys into object
	type RecordDOCHISTIDLINK vnewrec = dochistidlink.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("DOCHISTIDLINK",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordDOCHISTIDLINK dochistidlink

	if vux("HISTID").exists() set dochistidlink.histid = vux("HISTID").piece("|",i)
	if vux("LINKIDTYPE").exists() set dochistidlink.linkidtype = vux("LINKIDTYPE").piece("|",i)
	if vux("LINKID").exists() set dochistidlink.linkid = vux("LINKID").piece("|",i)
	quit

VIDXPGM()	quit "DOCHIDLF"	// Location of index program

