public	MRPC036(String return,		// return data (see below)	/REF:W
		Number versn,		// MRPC036 version number
		Number ACN,		// Customer Number
		String select,		// Select column list
		String group,		// Group by column list
		String where,		// Where Clause (other than ACN)
		Date enddt,		// Last Date in Period		/DFT=TJD-1MAE
		Date fromdt,		// First Date in Period 	/DFT=enddt-1MA1
		Boolean primary,	// Primary relationship only 	/DFT=0
		String hhtyp,		// Houshold TYPE   		/TBL=HHLD
		Boolean morerec)	// Flag used when version=2

	/*
	   ORIG:  FSANCHEZ - 11 JUN 1996

	   Return selected aggregate data from accounts linked to a customer.
	   Heavily linked to UAVB, mapping keywords defined here into the
	   UAVB record structure.

	   Additional notes on arguments:	   

	   . versn  ^MRPC036 version number 
	     Current version = 1, new version = 2

	   . group  Group by column list
	     For grouping results in return array, for example:
	     group="CLS,GRP,TYPE,CRCD,CID"  
	     In this case:
	     return="D|DDA|400|USD|40012345"_$C(9)_10234.75_$C(13,10)

	   . morerec When the string of information being passed exceeds 32K.
	             0 -- no more record to be returned
	             1 -- more records to be returned

	   RETURNS:
	   . $$ 	Error message
	    		Null = no error

	   return 	Externally Formatted Output record
	    		CRLF separated records with each record containing
	    		GRP and the requested fields, separated by tabs, in
	    		the order indicated in the select statement.
	                In version 2, it will contain 0/1 at the beginning
	                of the string being passed back.

	   	Name  		Value

	     	AVGBAL  	Average balance
	     	HBALITD  	High balance (intra-day)
	     	HBALEOD  	High balance (end-of-day)
	     	HBALEDT  	High balance (end-of-day date)
	     	LBALITD  	Low balance (intra-day)
	     	LBALEOD  	Low balance (end-of-day)
	     	LBALEDT  	Low balance (end-of-day date)
	     	SUMCR  		Total credits ($$$)
	     	SUMDR  		Total debits ($$$)
	     	NUMCR  		Number of credits
	     	NUMDR 	 	Number of debits
	     	ENDBAL  	Ending balance (date TD)
	     	ENDBALCOL 	Ending collected balance (date TD)
	     	BEGTSEQ  	Beginning TSEQ
	     	ENDTSEQ  	Ending TSEQ
	     	CNTENC  	# Enclosures
	     	SUMFEE  	Total fee transactions
	     	SUMINT  	Total interest transactions
	     	BEGBAL  	Beginning balance
	     	AVGBALINT 	Average balance for interest (Average BALINT)
	     	YIELD  		Average Yield
	     	WGTINT  	Weighted interest rate
	     	SUMREGZ  	Sum of Reg Z loan tran charges
	     	AVGBALCOL 	Average collected balance
	     	SUMPMT  	Total payments ($$$)
	     	NUMPMT  	Number of payments
	     	SUMDISB  	Total disbursements ($$$)
	     	NUMDISB  	Number of disbursements
	     	NUMDAYZERO 	Number of days with 0 or negative balance
	     	NUMDAYCONZERO 	Number of consecutive days with 0 or negative balance
	     	AVGAVLBAL 	Average available balance

	   Example of use: Average Balance by Account report in Customer App - PFW.  

	  ---- Revision History ------------------------------------------------
	  
	   07/20/06 - RussellDS - CR22121
		      Modified length checking against 31000 to consider bytes,
		      not characters to be Unicode compliant

	   07/13/06 - PUTTASWH - CR 22091
	   	      Modified UAVB1 section to interchange LBALEDT and HBALEDT
	   	      to display at the appropriate location.
	   	      
	   06/09/06 - TITOVE - CR 21656
	   	      Modified EXEC section to prevent indirect references to 
	   	      ACN columns with null name values (e.g. VAR variable="").
	   	      Performed minor clean up.

	   05/16/06 - KinI - CR 20978
	   	      Modified SYSEQV section to resolve undefined AMT. 

	   06/03/06 - SANTHUMS - 19906
		      Modified section EXEC to set CTL.
		      
	   12/31/05 - TITOVE - CR 18758
	   	      Modified to initialize grpsel variable to prevent undefined
	   	      error and brought up to latest standards. Corrected logic 
	   	      to enable it to work as originally designed.

	   05/17/05 - KinI - 15524
	   	      Modified INIT^UAVB call in EXEC section to pass CID as
	   	      the second parameter instead of third.

	  --------------------------------------------------------------------------
	*/
	type public Number ER
	
	type Number avgbal(), grplen, nod, pos, version, yieldpc, AMT, CID, I
	type Number LNUM, RACN, SEQ, TMPSEQ
	type String code(), expr, grpsel, str1, str2, AVG(), CDSTR, CRCD, DI, GRP, HH()
	type String SEC, SELECT, STR, TMP, WHERE

	if (morerec.get() = 1) do MORE(.return, .morerec) quit ""

	set version = versn

	// Version number of client message is not compatible with server
	if (version '= 1), (version '= 2) quit $$ERRMSG^PBSUTL($$^MSG(2951))

	set ER = 0
	set return = ""
	
	if enddt.get().isNull() set enddt = %SystemDate.nextFreqDate("1MAE", , 1) quit:ER ""
	if fromdt.get().isNull() set fromdt = enddt.nextFreqDate("1MA1", , 1) quit:ER ""
	
	// Default group by CID
	if group.get().isNull() set group = ""
	
	// No. of columns in group by
	set grplen = group.length(",")

	set str1 = $$UAVB1 
	set str2 = $$UAVB2 
	set LNUM = 0

	for I = 1:1:select.length(",") do { quit:ER

		set DI = select.piece(",",I) 
		set LNUM = LNUM + 1
		set CDSTR = "$P(AVG(GRP),$C(9),"_I_")"
		set CDSTR = "S "_CDSTR_"="_CDSTR_"+"

		if (DI = "YIELD") do { quit
	
			// Rate * Bal
			set code(LNUM) = CDSTR_"(UAVB(2)*UAVB(1))"
			set code(LNUM) = code(LNUM)_",avgbal(GRP)=$G(avgbal(GRP))+UAVB(1)"
			set yieldpc = I
			}

		set pos = str1.piece(DI, 1).length(",") 
		set nod = 1
		
		if pos.isNull() do {
			
			set pos = str2.piece(DI, 1).length(",") 
			set nod = 2
			}

		// Invalid column expression ~p1
		if pos.isNull() do Runtime.setErrMSG("ACN", 4246, DI) quit
		
		set code(LNUM) = CDSTR_"$P(UAVB("_nod_"),""|"","_pos_")"
		}
 
	if ER quit ""

	type RecordCIF cif = Db.getRecord("CIF", "ACN = :ACN")

	set SEC = cif.crcd 
	if SEC.isNull() set SEC = %SystemCurrency

	set grpsel = ""
	for I = 1:1 set STR = group.piece(",", I) quit:STR.isNull()  set grpsel = grpsel_",ACN."_STR
	
	set WHERE = ""
	
	//I18N=OFF
	set SELECT = "ACN.CID,ACN.CRCD"_grpsel
	if 'where.get().isNull() set WHERE = where_" AND "
	if primary.exists() set WHERE = WHERE_"ACN.ACN=:ACN AND "
	set WHERE = WHERE_"RELCIF.ACN=:ACN AND RELCIF.CID=ACN.CID"
	//I18N=ON
	
	#ACCEPT Date=12/31/2005;PGM=Eugene Titov;CR=18758
	type ResultSet rs = Db.select(SELECT, "RELCIF,ACN", WHERE)
	
	while rs.next() do {
		
		set CID = rs.getCol("ACN.CID")
		
		type RecordACN acn = Db.getRecord("ACN", "CID = :CID")
	
		set CRCD = acn.crcd
	
		do EXEC(.acn)
		}

	if 'hhtyp.get().isNull() do HH(SELECT, hhtyp)

	// Delete temporary tables' data	
	do Db.delete("TMPRPC36", "TOKEN=:%SessionID")	
	do Db.delete("TMPRPC36D", "TOKEN=:%SessionID")

	set GRP = ""
	set TMPSEQ = 0

	for  set GRP = AVG(GRP).order() quit:(GRP.isNull()!AVG(GRP).isNull())  do {

		if yieldpc.exists() do {

			set AMT = AVG(GRP).piece($char(9), yieldpc)
			
			if 'avgbal(GRP) set AVG(GRP).piece($char(9), yieldpc) = 0
			else  set AVG(GRP).piece($char(9), yieldpc) = (AMT / avgbal(GRP)).roundDec(5, , 0)
			}
	
		set TMP = GRP_$char(9)_AVG(GRP)_$char(13,10)
		
		set TMPSEQ = TMPSEQ + 1
	
		if (version '= 1) do {
		
			type RecordTMPRPC36D tmp36d = Class.new("RecordTMPRPC36D")
			set tmp36d.token = %SessionID
			set tmp36d.lastseq = TMPSEQ
			set tmp36d.rec = TMP 
			do tmp36d.save()
			}
			
		if (version = 1) set return = return_GRP_$char(9)_AVG(GRP)_$char(13,10)
		}

	// No data found to satisfy request
	if (version = 1),return.isNull() quit $$ERRMSG^PBSUTL($$^MSG(1122))
	
	if (version = 1) set return = $$V2LV^MSG(return) quit ""

	do MORE(.return, .morerec)

	// No data found to satisfy request
	if return.isNull() quit $$ERRMSG^PBSUTL($$^MSG(1122))

	quit ""


MORE(String return,
     Number morerec)
     
	// Build return records
	   
	type Number flag, last, mxlength, SEQ, TSEQ
	type String record

	// Sign for more records needed to be returned
	set (flag,morerec,SEQ) = 0

	set return = ""

	// Maximum string less than 32K
	set mxlength = 31000

	// Get the last sequence number
	type RecordTMPRPC36 tmprpc36 = Db.getRecord("TMPRPC36", "TOKEN = :%SessionID", 1)

	set TSEQ = +tmprpc36.lastseq
	
	set last = TSEQ
	
	type DbSet ds = Db.selectDbSet("TMPRPC36D", "TOKEN=:%SessionID AND LASTSEQ>:TSEQ", "LASTSEQ")

	while ds.next() do { quit:flag = -1

		type RecordTMPRPC36D tmp36d = ds.getRecord("TMPRPC36D")
		
		set SEQ = tmp36d.lastseq
		set record = tmp36d.rec

		// More records
		if ((return.toByteString().length() + record.toByteString().length()) > mxlength) set morerec = 1 set flag = -1 quit
		
		set return = return_record
		
		set last = +SEQ
		}
	
	set tmprpc36.lastseq = last
	
	do tmprpc36.save()

	if SEQ.isNull() do {
		
		do Db.delete("TMPRPC36", "TOKEN=:%SessionID")
	        do Db.delete("TMPRPC36D", "TOKEN=:%SessionID")	
		}	
		
	if return.isNull() quit
	
	set return = $$V2LV^MSG(morerec_return)

	quit
	

HH(String SELECT,
   String hhtyp)

	type Number CID, MACN
	type String CRCD

	type ResultSet rs1 = Db.select("MACN", "CIFHH0", "ACN=:ACN AND HHTYP=:hhtyp")
		
	while rs1.next() do {
		
		set MACN = rs1.getCol("MACN")
		
		#ACCEPT Date=12/31/2005;PGM=Eugene Titov;CR=18758
		type ResultSet rs2 = Db.select(SELECT, "RELCIF,ACN", "RELCIF.CID=ACN.CID AND RELCIF.ACN=:MACN")
		
		while rs2.next() do {
			
			set CID = rs2.getCol("ACN.CID")
				
			type RecordACN acn = Db.getRecord("ACN", "CID = :CID")
				
			set CRCD = acn.crcd
				
			do EXEC(.acn)
			}
		}

	quit
	

EXEC(RecordACN acn)	// Processing for single account

	type public Date enddt, fromdt
	type public Number grplen, CID, LNUM, ER
	type public String code(), grpsel, AVG(), CRCD, GRP, SEC
	
	type Number CC, I
	type String CTL, SVFRE(), UAVB(), VAR, WIRN()

	set GRP = ""

	for I = 2:1:grplen + 1 do {
		
		set VAR = grpsel.piece(",", I) quit:VAR.isNull()		
		
		if VAR["." set VAR = VAR.piece(".", 2)

		if (I = 2) set GRP = acn.@VAR
		else  set GRP = GRP_$char(9)_acn.@VAR
		}

	if GRP.isNull() set GRP = $char(254)
	if CRCD.isNull() set CRCD = %SystemCurrency
	
	if (acn.cls = "D") set CTL = "001"
	else  set CTL = "1001100"

	do INIT^UAVB(.acn, CID, fromdt, enddt, CTL)
	
	if ER quit

	// Convert UAVB to CIF or SYSTEM currency
	if (SEC '= CRCD) do SYSEQV

	if 'AVG(GRP).exists() set AVG(GRP) = ""

	#ACCEPT DATE=12/12/03;PGM=John Carroll;CR=7239
	for I = 1:1:LNUM xecute code(I)
	
	quit
                                                     

SYSEQV	// Convert needed values of UAVB to the customer's or system's currency

	type public Number CID
	type public String CRCD, SEC, UAVB()

	type Number AMT, I
	
	for I = 1,12,13 do {
		
		set AMT = +UAVB(1).piece("|", I) quit:'AMT
		
		do CAMT^CRCDUTL(CRCD, SEC, .AMT)
		
		set UAVB(1).piece("|", I) = AMT.roundCur(CRCD, , 1)
		}
	
	set AMT = +UAVB(2).piece("|", 3)
	
	if AMT do {
		
		do CAMT^CRCDUTL(CRCD, SEC, .AMT)
		
		set UAVB(2).piece("|", 3) = AMT.roundCur(CRCD, , 1)
		}
	
	quit
	

UAVB1()	quit "AVGBAL,HBALITD,HBALEOD,LBALEDT,LBALITD,LBALEOD,HBALEDT,SUMCR,SUMDR,NUMCR,NUMDR,ENDBAL,ENDBALCOL,BEGTSEQ,ENDTSEQ,CNTENC,SUMFEE,SUMINT,BEGBAL,AVGBALINT"
UAVB2()	quit "WGTINT,SUMREGZ,AVGBALCOL,SUMPMT,NNUMPMT,SUMDISB,NUMDISB,NUMDAYZRO,NUMDAYCZRO,AVGAVLBAL"

vSIG()	quit "60472^45704^Dan Russell^10769"	// Signature - LTD^TIME^USER^SIZE
