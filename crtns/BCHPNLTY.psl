BCHPNLTY //Batch BCHPNLTYBAL - Penalty Event & Balance Tracking
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHPNLTYBAL Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHPNLTYBAL")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHPNLTYBAL") quit
 do JOBMGR^BCHUTL(%FN,"BCHPNLTYBAL",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHPNLTYBAL")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHPNLTYBAL","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHPNLTYBAL",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHPNLTYBAL",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHPNLTYBAL","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHPNLTYBAL",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
PROC	// Penalty Event and Balance Tracking Calculations for ODCC Loans

	/*
	 This batch definition calculates Event Balances 1 through 4 for
	 Overdraft/Cash Credi Accounts.  It also calculates the next Penalty
	 Balance cutoff date when TJD=LN.PBNXTDT.  It also determines whether
	 or not to enable and ODCC loan's Out of Compliance flag (LN.OOC) when
	 the loan has reached maturity.
	*/

	new ln,BALCMP,DIST1ND,DUIN,FSOVRDUE,LCHG,MDT,OOC,PBFRE,PBLSTDT,PBNXTDT
	new RACLC,RACLF,RENCD,SIBF,TFEE,WDLMT
	
	type RecordLN ln=Db.getRecord("LN","CID")

	if ln.pbfre="" quit             // No Penalty Bal Review Freq defined
	if ln.stat=4 quit		// Loan Closed

	do ln.setAuditFlag(1)		// to create UX entries
	
	set BALCMP=ln.balcmp            // Balance (Computed)
	set DIST1ND=ln.dist1nd          // Distribution 1 Next Due
	set DUIN=ln.duin                // Total Interest Due
	set FSOVRDUE=ln.fsovrdue        // Financial Statements Overdue
	set LCHG=ln.lchg                // Late Charge Due
	set MDT=ln.mdt                  // Account Maturity Date
	set OOC=ln.ooc                  // Out of Compliance
	set PBFRE=ln.pbfre              // Penalty Balance Review Frequency
	set PBLSTDT=ln.pblstdt          // Penalty Balance Last Cutoff Date
	set PBNXTDT=ln.pbnxtdt          // Penalty Balance Next Cutoff Date
	set RACLC=ln.raclc              // Reduce Avail CR by Late Chrg Outstanding
	set RACLF=ln.raclf              // Reduce Avail CR by Loan Fees Outstanding
	set RENCD=ln.rencd              // Maturity Renewal Code
	set SIBF=ln.sibf                // Subtract Int Billed from Available
	set TFEE=ln.pofees              // Fees Due
	set WDLMT=ln.wdlmt              // Loan Withdrawal Limit
	
	set (EVBAL1,EVBAL2,EVBAL3,EVBAL4,PENBAL,EVCODE)=""
	
	do GETBAL(.BALCMP)
	
	do BAL1(.EVBAL1)
	set PENBAL=EVBAL1,EVCODE=1
	
	do BAL2(.EVBAL2)
	if EVBAL2>PENBAL set PENBAL=EVBAL2,EVCODE=2
	
	do BAL3(.EVBAL3)
	if EVBAL3>PENBAL set PENBAL=EVBAL3,EVCODE=3
	
	do BAL4(.EVBAL4,.ln)
	if EVBAL4>PENBAL set PENBAL=EVBAL4,EVCODE=4

	if PENBAL=0 set EVCODE=""
	
	do FILE				// Save ^PNLTYEVENT Info

	do OOC				// Update LN.OOC
	do PBNXT			// Update LN.PBNXTDT

	set ln.ooc=OOC
	set ln.pbnxtdt=PBNXTDT
	set ln.pblstdt=PBLSTDT

	do ln.save()			// Save updates to LN
	
	quit

	
BAL1(EVBAL1)
	
	/*
	ARGUMENTS:
	
	        . EVBAL1  Event 1 Balance          /TYPE=N/REQ/MECH=VAL
	
	                The portion of the loan's ending daily balance that
	                exceeds the Loan Withdrawal Limit (LN.WDLMT).
	
	*/

	if BALCMP<WDLMT set EVBAL1=0 quit
	set EVBAL1=BALCMP-WDLMT
	quit
	 
BAL2(EVBAL2)
	
	/*
	ARGUMENTS:
	
		. EVBAL2  Event 2 Balance          /TYPE=N/REQ/MECH=VAL
	
		        The loan's ending daily balance when the loan's
		        Financial Statements Overdue flag is set to "Y".

	*/
	
	if 'FSOVRDUE set EVBAL2=0 quit
	set EVBAL2=BALCMP
	quit
	
BAL3(EVBAL3)
	
	/*
	ARGUMENTS:
	
		. EVBAL3  Event 3 Balance          /TYPE=N/REQ/MECH=VAL
	 
	        The loan's ending daily balance when the loan's Out of
	        Compliance flag is set to "Y".
	
	*/
	
	if 'OOC set EVBAL3=0 quit
	set EVBAL3=BALCMP
	quit
	
BAL4(EVBAL4,RecordLN ln)
	
	/*
	ARGUMENTS:
	
	        . EVBAL4  Event 4 Balance          /TYPE=N/REQ/MECH=VAL
		
		The total amount of interest and fees that have been billed but
		have not been paid.  If the loan is still within it's payment
		grace period, the current interest and fee amounts billed are
		not included in the total.
			
	*/

	new BSEAMT,CURAMT,CURDAYS,FEECUR,FEETOT,FEES
	set (BSEAMT,CURAMT,FEETOT)=0
	
        // CURDAY is the number of days between TJD and the last pmt due date
        set CURDAY=(%SystemDate-(ln.bldt+ln.bloff))

  	set FEES=$$GETFEES(ln.cid,ln.oseq,ln.bldt)
	set FEETOT=$P(FEES,"|",1)	// Total of all billed/unpaid fees
	set FEECUR=$P(FEES,"|",2)	// Current billed/unpaid fees

	// BSEAMT is interest & fees billed but unpaid (exlcuding current bill)
	set BSEAMT=ln.unin+(FEETOT-FEECUR)

	// Still within grace period, don't include current bill
	if (CURDAY<(+(ln.pmtgrc))) set EVBAL4=BSEAMT quit

	// CURAMT is the amount billed but unpaid only on the current bill
	set CURAMT=ln.cuin+FEECUR

	set EVBAL4=BSEAMT+CURAMT

	do GREXP(.ln)
	quit

GETFEES(CID,OSEQ,BDT)	// Calculate billed/unpiad fees
	
	/*
	 This section calculates billed but unpaid fees that are included in
	 the loan's payment application string.
	*/	

	if 'OSEQ quit			// No bills generated yet

	new CURFEE,SEQ,TOTFEE
	set SEQ=OSEQ-1
	set (TOTFEE,CURFEE)=0

	for  set SEQ=Db.nextKey("LNBIL1","CID,SEQ") quit:SEQ=""  do {
		new CBCD,lnbil1
		type RecordLNBIL1 lnbil1=Db.getRecord("LNBIL1","CID,SEQ")		
	
		set CBCD=lnbil1.cbcd
		
		do FEES(lnbil1.pe01,lnbil1.pe01ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe02,lnbil1.pe02ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe03,lnbil1.pe03ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe04,lnbil1.pe04ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe05,lnbil1.pe05ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe06,lnbil1.pe06ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe07,lnbil1.pe07ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe08,lnbil1.pe08ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe09,lnbil1.pe09ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe10,lnbil1.pe10ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe11,lnbil1.pe11ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe12,lnbil1.pe12ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe13,lnbil1.pe13ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe14,lnbil1.pe14ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe15,lnbil1.pe15ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe16,lnbil1.pe16ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe17,lnbil1.pe17ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe18,lnbil1.pe18ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe19,lnbil1.pe19ad,CBCD,.TOTFEE,.CURFEE,BDT)
		do FEES(lnbil1.pe20,lnbil1.pe20ad,CBCD,.TOTFEE,.CURFEE,BDT)
		}
	quit TOTFEE_"|"_CURFEE

FEES(ELMNT,AMT,BDT,TOTFEE,CURFEE,LSTBDT)

	// Only looking for loan fees (not interest and not principal)
	set PMTEL=$P(ELMNT,"#",1)
	if (PMTEL="")!(PMTEL="I")!(PMTEL="P") quit

	set TOTFEE=TOTFEE+AMT
	if BDT=LSTBDT set CURFEE=CURFEE+AMT

	quit


GREXP(RecordLN ln)	// Grace Period Expiration

	/* 
	 If today is the payment grace period expiration day, we need to 
	 go back and add CURAMT to each PNLTYEVENT.EVBAL4 entry from
	 the last payment date through yesterday (TJD-1).
	*/

	if (CURDAY=+(ln.pmtgrc))&(CURAMT>0) do {
		new DT,END,STRT
		set STRT=%SystemDate-CURDAY,END=%SystemDate
		for DT=STRT:1:END do {
			if 'Db.isDefined("PNLTYEVENT","CID,DT") quit
			new rec
			type RecordPNLTYEVENT rec=Db.getRecord("PNLTYEVENT","CID,DT")
			set rec.evbal4=rec.evbal4+CURAMT
			if (rec.evbal4>rec.evbal1)&(rec.evbal4>rec.evbal2)&(rec.evbal4>rec.evbal3) do {
				set rec.evcode=4,rec.penbal=rec.evbal4
				}
			do rec.save()
			}
		}
	quit
	
GETBAL(BAL)
	
	if SIBF=1 set BAL=BAL+DUIN
	if RACLF=1 set BAL=BAL+TFEE
	if RACLC=1 set BAL=BAL+LCHG
	
	quit
	

OOC	// Set LN.OOC=1 if necessary

	/*
	Determine whether a loan's Out of Compliance option should be
	automatically selected when a loan with it's Collateral Credit Limit
	Processing option selected reaches its maturity date.
	*/
	
	new rs,QUITNOW
	
	If MDT'=%SystemDate quit
	If RENCD=0 quit
	 
	type ResultSet rs=Db.select("COLL","LNCOL","CID=:CID")
	
	if rs.isEmpty() quit
	
	set QUITNOW=0
	while rs.next() quit:QUITNOW  do {
		new COLNUM,COLTYP
		set COLNUM=rs.getCol(1)
		set COLTYP=Db.getOneRow("COLCD","COL","COLNUM")
		if COLTYP=70 set QUITNOW=1 quit
		}
	
	If 'QUITNOW set OOC=1

	quit

PBNXT	// Compute LN.PBNXTDT if necessary
	
	/*
	Reset the Penalty Balance Next Cutoff Date and Penalty Balance Last
	Cutoff Date, based on the Penalty Balance Review Frequency.
	*/

	if '(PBNXTDT=%SystemDate) quit

	new NXTDT
	set PBLSTDT=PBNXTDT
	set PBNXTDT=$$NJD^UFRE(PBLSTDT,PBFRE,,0)

	quit
		 
FILE
	
	new pnltyevent
	type RecordPNLTYEVENT pnltyevent=Class.new("RecordPNLTYEVENT")
	
	set pnltyevent.cid=CID
	set pnltyevent.pdt=%SystemDate
	set pnltyevent.evbal1=EVBAL1
	set pnltyevent.evbal2=EVBAL2
	set pnltyevent.evbal3=EVBAL3
	set pnltyevent.evbal4=EVBAL4
	set pnltyevent.penbal=PENBAL
	set pnltyevent.evcode=EVCODE
	
	do pnltyevent.save()      // File data
	
	quit
	
	

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","LN","LN.COLLIMPR=1")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	set %UserID="BATCH"

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
