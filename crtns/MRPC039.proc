MRPC039(String return,Number versn,String ln)	//Public;Loan Payment Modeler Utility
	/*
	   ORIG: Mark Spier - 1/13/96

	   This extrinsic function returns a single data item and the new value
	   for that field. That field may be one of 4 fields used in loan
	   modeling function lnc001.

	   [SCATBL5]RPCID=39

	   KEYWORDS: Client/Server, Loan Utilities

	   ARGUMENTS:
	  	 . return	 Data (see below)		 /TYP=T/REQ
	        						 /MECH=REFNAM:W

	  	 . versn 	 ^MRPC039 version number 	 /TYP=N/REQ
	    			 Current version = 1 		 /MECH=VAL

	  	 . ln 		 Partial SQL syntax for LN info  /TYP=T/REQ
	    			 (col,...) VALUES (val,...)	 /MECH=VAL

	   RETURNS:
	  	 . $$		 Error message  		 /TYP=T
	   			 Null = No error

	   RELATED:
	  	 . $$^PBSMRPC - MRPC Service Class Driver


	  ---- Revision History ------------------------------------------------

           07/26/05 - SkariahV- CR16679
	              Removed #WARN and #OPTIMIZE directives.
	              
	   09/15/03 - GRAY - 51349
		      Corrected use of indirection when collating through data
		      array.

	   03/26/03 - GRAY - 51351
		      Modified for DBI phase 2 development for loan modeling.

	   05/28/02 - SRIVASTAVAN - 49794
		      Converted to PSL

	   09/19/00 - SIVCHUKA - 41756
	              Modified call to LNCALP from D SEND^LNCALP Q:ER ""
	       	      to D SEND^LNCALP Q:ER $$ERRMSG^PBSUTL($G(RM),$G(ET)), to
	       	      correct error message problem.

	   01/07/00 - SIVCHUKA - 35969
	              Add Interest Amortization Method (LN.IAM) to reply string.
	              This is  to determine (in PFW) if it's Add-on or
	              Discount loan.
	              IAM values from 10-14 is Add-On,and 20-24 Discount loans.
	              If $E(IAM)'=2,it's mean Add-On or any different types
	              of loans, and If $E(IAM)=2, - Discount loan.
			


	*/

	type Number %ProcessMode,CID,ER,JD,OPT,TYPE
	type String data(),fld(),n,ndfrec
	type String CRCD,ET,FRE,RM,X

	// Version number of client message is not compatible with server
	if versn.get()'=1 quit $$ERRMSG^PBSUTL($$^MSG(2951))
	set (ER,%ProcessMode)=0 
	set (ndfrec,return)=""	

	// Load info in ln into data array by name
	do getinfo(ln,.data)

	// Determine loan type and currency from the values passed
	set TYPE=data("TYPE").get()
	set CRCD=data("CRCD").get()
	
	// Invalid product type
	if TYPE="" quit $$ERRMSG^PBSUTL($$^MSG(1503))
	
	// Invalid product type
	if 'Db.isDefined("PRODCTL","TYPE=:TYPE") quit $$ERRMSG^PBSUTL($$^MSG(1503))

	//Setup ln object with defaults from the product
	type RecordLN ln=Class.new("RecordLN")

	set CID=999999999999
	set ln.cid=CID

	do ln.default("TYPE")
	
	/*
	Ensure that requested fourth value is null, not ignored.  This is
	important to ensure that the column does not assume the value from
	the product.
	*/

	set data("IRN")=data("IRN").get()
	set data("AMTREQ")=data("AMTREQ").get()
	set data("TRM")=data("TRM").get()
	set data("PMTPI")=data("PMTPI").get()
	set data("BALLAMT")=data("BALLAMT").get()
	
	set OPT=1
	do VPG00^LNCALC(.ln)
	
	if ER quit ""
	do SETUP^LNCALC(.ln)

	// Insert user entered data
	set n=""
	for  set n=data(n).order() quit:n=""  do {
		type String X
		set X=data(n).get()
		set ln.@n=X
		}

	// Update dist1nd based on frequency and interest pre-paid date
	// Distribution 1 Next Due
	if ln.dist1nd="" do {
		// Distribution 1 Frequency
		set X=ln.dist1fre
		// Original Disbursement Date
		set JD=ln.odd
		set FRE=X
		do PMTF^LNPPC1(.ln)
		}

	// Determine AMODT if not provided
	// Interest Prepaid Date
	if ln.amodt="" do { quit:ER

		type Boolean ppif,quit
		type Date amodt,dist1nd,temp
		type String dist1fre

		// Distribution 1 Next Due
		if ln.dist1nd="" quit
		set quit=""

		// Original Disbursement Date
		set amodt=ln.odd

		// Distribution 1 Frequency
		set dist1fre=ln.dist1fre

		// Distribution 1 Next Due
		set dist1nd=ln.dist1nd

		type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE")
		set ppif=prodctl.ppif

		if ppif for  do { quit:quit  quit:ER
			set temp=$$NJD^UFRE(amodt,dist1fre) quit:ER
			if temp'<dist1nd set quit=1 quit
			set amodt=temp
			}

		// Interest Prepaid Date
		set ln.amodt=amodt
		}

	do SEND^LNCALP(.ln) quit:ER $$ERRMSG^PBSUTL(RM.get(),ET.get())

	do DIS^LNCALC(.ln)

	// LN.AMTREQ Amount Requested
	set fld(1)=ln.amtreq

	// LN.TRM Term
	set fld(2)=ln.trm 

	// LN.IRN Interest Rate
	set fld(3)=ln.irn

	// LN.PMTPI P&I Payment Amount
	set fld(4)=ln.pmtpi

	// LN.DISPPID Number of odd days
	set fld(5)=ln.disppid

	// LN.DISPPI Odd days int amount
	set fld(6)=ln.disppi

	// LN.DISPMP Prepaid mtg insurance
	set fld(7)=ln.dispmp

	// LN.ORGFA Origination fees
	set fld(8)=ln.orgfa

	// LN.SCHBAL Maturity Balance
	set fld(9)=ln.schbal

	// LN.DISAPR Annual Percentage Rate
	set fld(10)=ln.disapr

	// LN.DISAMF Total amount financed
	set fld(11)=ln.disamf

	// LN.DISTINT Total interest amount
	set fld(12)=ln.distint

	// LN.COMFA Commitment fee
	set fld(13)=ln.comfa

	// LN.BALLAMT
	set fld(14)=ln.ballamt

	// LN.IAM        Interest Amortization Method
	set fld(15)=ln.iam

	set return=$$V2LV^MSG(.fld)
	quit ""


getinfo(String in,String out)	//Private; Parse input strings into out array

	type String c,columns,values
	type Number i

	set in=$$UPPER^%ZFUNC(in)
	set columns=in.piece("VALUES",1) 
	set values=in.piece("VALUES",2)
	set columns=columns.piece("(",2).piece(")",1)
	set values=values.piece("(",2).piece(")",1)
	for i=1:1 set c=columns.piece(",",i) quit:c=""  set out(c)=values.piece(",",i).translate("'")

	quit

vSIG()	quit "60107^17668^Viji Skariah^5220"	// Signature - LTD^TIME^USER^SIZE
