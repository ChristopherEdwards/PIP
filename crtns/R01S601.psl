R01S601	// SCA680 - Commitment Trial Balance Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:02 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String GDSP
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number VIN1

	set RID="SCA680"
	set RN="Commitment Trial Balance Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|12||[SCA680A]LPTYPE|[PRODDFTL]:NOVAL||set GDSP=X||N|Loan Product Type is equal to|||||"

	set %READ="IO/REQ,VIN1#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=32
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String GDSP
	type public Number VIN1
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,CONAM,RID,RN,VL,VLOF,VRF(),VSTATS(),ZCPF,ZT,ZTYPE,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA680",RN="Commitment Trial Balance Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA680","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[SCA680B]CID#3#12,[SCA680B]ORG#17#18,[SCA680B]BAL#38#18,[SCA680B]DAA#60#15,[SCA680B]NAINT#77#18,[SCA680B]DUPR#97#18,[SCA680B]MDT#120#10\[SCA680B]STAT#14#1,[SCA680B]AVLBAL#17#18,[SCA680B]ACR#60#15,[SCA680B]UNIN#77#18,[SCA680B]UNPR#97#18,[SCA680B]SCHND#120#10"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE

		set VBNRINFO("PROMPTS",1)="WC1|"_"Loan Product Type is equal to"_"|VIN1|"_VIN1.get()

		set VWHERE="SCA680A.LPTYPE=:VIN1"

		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Commitment Trial Balance Report"
		set VBNRINFO("PGM")="R01S601"
		set VBNRINFO("RID")="SCA680"
		set VBNRINFO("TABLES")="SCA680B,SCA680A"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,SCA680B]PID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,SCA680B]LPTYPE"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,SCA680B]CCL"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,SCA680B]CID"

		set VBNRINFO("DOC",1)="This Commitment Trial Balance report (SCA680) is run via function @REP680 and "
		set VBNRINFO("DOC",2)="will provide institutions with information on a commitment's principal and "
		set VBNRINFO("DOC",3)="interest balances, past due amounts, funds advanced from the commitment, "
		set VBNRINFO("DOC",4)="commitment funds unused and due dates.  It uses the SCA680 procedure to "
		set VBNRINFO("DOC",5)="populate the SCA680A and SCA680B temporary tables and then reads the "
		set VBNRINFO("DOC",6)="information from these tables to produce the report.  "

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("SCA680B.PID,SCA680B.LPTYPE,SCA680B.CCL,SCA680B.CID,SCA680A.CCL,SCA680A.NAME,SCA680A.STAT,SCA680A.COMMAMT,SCA680A.PRBAL,SCA680A.IRN,SCA680A.DAA,SCA680A.NAINT,SCA680A.COMPRDUE,SCA680A.LPDT,SCA680A.OFF,SCA680A.POAM,SCA680A.ACR,SCA680A.PDI,SCA680A.PDP,SCA680A.SCHND,SCA680B.ORG,SCA680B.BAL,SCA680B.DAA,SCA680B.NAINT,SCA680B.DUPR,SCA680B.MDT,SCA680B.STAT,SCA680B.AVLBAL,SCA680B.ACR,SCA680B.UNIN,SCA680B.UNPR,SCA680B.SCHND","SCA680B,SCA680A","SCA680A.LPTYPE=:VIN1","SCA680B.PID,SCA680B.LPTYPE,SCA680B.CCL,SCA680B.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32
	set vc1=V.piece($C(9),1)			// SCA680B.PID
	set vc2=V.piece($C(9),2)			// SCA680B.LPTYPE
	set vc3=V.piece($C(9),3)			// SCA680B.CCL
	set vc4=V.piece($C(9),4)			// SCA680B.CID
	set vc5=V.piece($C(9),5)			// SCA680A.CCL
	set vc6=V.piece($C(9),6)			// SCA680A.NAME
	set vc7=V.piece($C(9),7)			// SCA680A.STAT
	set vc8=V.piece($C(9),8)			// SCA680A.COMMAMT
	set vc9=V.piece($C(9),9)			// SCA680A.PRBAL
	set vc10=V.piece($C(9),10)			// SCA680A.IRN
	set vc11=V.piece($C(9),11)			// SCA680A.DAA
	set vc12=V.piece($C(9),12)			// SCA680A.NAINT
	set vc13=V.piece($C(9),13)			// SCA680A.COMPRDUE
	set vc14=V.piece($C(9),14)			// SCA680A.LPDT
	set vc15=V.piece($C(9),15)			// SCA680A.OFF
	set vc16=V.piece($C(9),16)			// SCA680A.POAM
	set vc17=V.piece($C(9),17)			// SCA680A.ACR
	set vc18=V.piece($C(9),18)			// SCA680A.PDI
	set vc19=V.piece($C(9),19)			// SCA680A.PDP
	set vc20=V.piece($C(9),20)			// SCA680A.SCHND
	set vc21=V.piece($C(9),21)			// SCA680B.ORG
	set vc22=V.piece($C(9),22)			// SCA680B.BAL
	set vc23=V.piece($C(9),23)			// SCA680B.DAA
	set vc24=V.piece($C(9),24)			// SCA680B.NAINT
	set vc25=V.piece($C(9),25)			// SCA680B.DUPR
	set vc26=V.piece($C(9),26)			// SCA680B.MDT
	set vc27=V.piece($C(9),27)			// SCA680B.STAT
	set vc28=V.piece($C(9),28)			// SCA680B.AVLBAL
	set vc29=V.piece($C(9),29)			// SCA680B.ACR
	set vc30=V.piece($C(9),30)			// SCA680B.UNIN
	set vc31=V.piece($C(9),31)			// SCA680B.UNPR
	set vc32=V.piece($C(9),32)			// SCA680B.SCHND
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

	// Converted to PSL by CNV70RW
	type Public String ER,GDSP,RM,ZCPF,ZT,ZTYPE

	// Initialize vars
	set ZTYPE=$G(GDSP)                     // Product Type from Query
	
	//check whether product type exist or not
	type ResultSet rs=Db.select("TYPE","PRODDFTL","TYPE=:ZTYPE") set ZT='rs.isEmpty()
	if 'ZT set ER=1 set RM=$$^MSG(1503) quit       //Invalid product type
	
	do { 
	    type ResultSet rs=Db.select("CPF","PRODDFTL","TYPE=:ZTYPE") 
	    set ZCPF="" if 'rs.next()  quit
	    set ZCPF=rs.getRow()
	   } 
	
	
	if ZCPF'=1 set ER=1 set RM=$$^MSG(4317) quit   //Commitment processing flag must be enabled for selected product type
	
	do PROC^SCA680(ZTYPE,%ProcessID)             // Populate SCA680A and SCA680B globals
	
	quit 

VPREBQ	// Pre-processor (before query)

	//Incoming=GDSP
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(3).get() do VDTL3 quit:VFMQ
	do VHDG4 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1,VH0=1
	if vb2!(+vovc2'=+vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1,VH0=1
	if vb3!(+vovc3'=+vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL3	// Detail
	type public String %TIM,ER,GDSP,IOSL,RM,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),ZCPF,ZT,ZTYPE,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	quit:VD(3)  set VD(3)=1				// Print flag
	if VLC+10>IOSL do VHDG0 quit:VFMQ

	set VL="  "_"Commitment Number: "
	set VL=VL_$J("",21-VL.length())_$J(vc5,12)
	do VOM
	set VL="      "_"Customer Name:"
	set VL=VL_$J("",21-VL.length())_$E(vc6,1,40)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="  "_"Stat"
	set VL=VL_$J("",16-VL.length())_"Commitment"
	set VL=VL_$J("",29-VL.length())_"Principal Balance"
	set VL=VL_$J("",48-VL.length())_"Int Rate"
	set VL=VL_$J("",61-VL.length())_"Daily Accrual"
	set VL=VL_$J("",78-VL.length())_"Stopped Interest"
	set VL=VL_$J("",98-VL.length())_"Billed Principal"
	set VL=VL_$J("",116-VL.length())_"Last Pmt Date"
	do VOM
	set VL="  "_"Offr"
	set VL=VL_$J("",20-VL.length())_"Amount"
	set VL=VL_$J("",36-VL.length())_"Net Payoff"
	set VL=VL_$J("",58-VL.length())_"Accrued Interest"
	set VL=VL_$J("",77-VL.length())_"Past Due Interest"
	set VL=VL_$J("",96-VL.length())_"Past Due Principal"
	set VL=VL_$J("",116-VL.length())_"Next Due Date"
	do VOM
	set VL=" "_"=================================================================================================================================="
	do VOM
	set VL="     "_$J(vc7,1)
	set VL=VL_$J("",8-VL.length())_$J($FN(vc8,",",2),18)
	set VL=VL_$J("",28-VL.length())_$J($FN(vc9,",",2),18)
	set VL=VL_$J("",48-VL.length())_$J(vc10,8,5)
	set VL=VL_$J("",59-VL.length())_$J(vc11,15,5)
	set VL=VL_$J("",76-VL.length())_$J($FN(vc12,",",2),18)
	set VL=VL_$J("",96-VL.length())_$J($FN(vc13,",",2),18)
	set VL=VL_$J("",119-VL.length())_$J($$DAT^%ZM(vc14),10)
	do VOM
	set VL="  "_$E(vc15,1,4)
	set VL=VL_$J("",28-VL.length())_$J($FN(vc16,",",2),18)
	set VL=VL_$J("",59-VL.length())_$J(vc17,15,5)
	set VL=VL_$J("",76-VL.length())_$J($FN(vc18,",",2),18)
	set VL=VL_$J("",96-VL.length())_$J($FN(vc19,",",2),18)
	set VL=VL_$J("",119-VL.length())_$J($$DAT^%ZM(vc20),10)
	do VOM
	set VL="" do VOM
	quit

VHDG4	// Group Header
	type public String %MSKD,%TIM,CONAM,ER,GDSP,IOSL,RID,RM,RN,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,ZCPF,ZT,ZTYPE,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	quit:vh(4)  set vh(4)=1				// Print flag
	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL="   "_"Account Nbr         Loan Amount    Principal Balance      Daily Accrual    Stopped Interest    Billed Principal      Exp. Date"
	do VOM
	set VL="          "_"Stat    Available Credit                        Accrued Interest   Past Due Interest  Past Due Principal  Next Due Date"
	do VOM
	set VL=" "_"=================================================================================================================================="
	do VOM
	quit

VDTL4	// Detail
	type public String %TIM,ER,GDSP,IOSL,RM,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),ZCPF,ZT,ZTYPE,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if VLC+3>IOSL do VHDG0 quit:VFMQ  set vh(4)=0 do VHDG4 quit:VFMQ

	set VL="  "_$J(vc4,12)
	set VL=VL_$J("",16-VL.length())_$J($FN(vc21,",",2),18)
	set VL=VL_$J("",37-VL.length())_$J($FN(vc22,",",2),18)
	set VL=VL_$J("",59-VL.length())_$J(vc23,15,5)
	set VL=VL_$J("",76-VL.length())_$J($FN(vc24,",",2),18)
	set VL=VL_$J("",96-VL.length())_$J($FN(vc25,",",2),18)
	set VL=VL_$J("",119-VL.length())_$J($$DAT^%ZM(vc26),10)
	do VOM
	set VL="             "_$J(vc27,1)
	set VL=VL_$J("",16-VL.length())_$J($FN(vc28,",",2),18)
	set VL=VL_$J("",59-VL.length())_$J(vc29,15,5)
	set VL=VL_$J("",76-VL.length())_$J($FN(vc30,",",2),18)
	set VL=VL_$J("",96-VL.length())_$J($FN(vc31,",",2),18)
	set VL=VL_$J("",119-VL.length())_$J($$DAT^%ZM(vc32),10)
	do VOM
	set VL="" do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,CONAM,GDSP,RID,RM,RN,VL,ZCPF,ZT,ZTYPE,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+3,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors
