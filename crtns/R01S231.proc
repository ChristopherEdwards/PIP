R01S231	// SCA182 - Transaction Code Listing Summary
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:45 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String VIN1="ALL"
	type String VIN2="ALL"
	type String VIN3="ALL"

	set RID="SCA182"
	set RN="Transaction Code Listing Summary"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("VIN1")="|255||[TRN]ETC|[TRN]ETC:DISTINCT:NOVAL||D EXT^DBSQRY||T|Transaction Code|||||"
	set %TAB("VIN2")="|255||[TRN]CLS|[STBLTRNCLS]:NOVAL||D EXT^DBSQRY||T|Transaction Class|||||"
	set %TAB("VIN3")="|255||[TRN]GRP|[STBLLIBS]:NOVAL||D EXT^DBSQRY||T|Transaction Group|||||"

	set %READ="IO/REQ,VIN1#0,VIN2#0,VIN3#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String VIN1,VIN2,VIN3
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ADJ,CONAM,RID,RN,VAR,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc7,vc8,vc9,vovc1,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA182",RN="Transaction Code Listing Summary"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA182","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN1.get()="" set VIN1="ALL"
		if VIN1'="ALL" set DQQRY(SEQ)="[TRN]ETC "_VIN1,SEQ=SEQ+1
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[TRN]CLS "_VIN2,SEQ=SEQ+1
		if VIN3.get()="" set VIN3="ALL"
		if VIN3'="ALL" set DQQRY(SEQ)="[TRN]GRP "_VIN3,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("TRN") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",1)="WC2|"_"Transaction Code"_"|VIN1|"_VIN1.get()
		set VBNRINFO("PROMPTS",2)="WC2|"_"Transaction Class"_"|VIN2|"_VIN2.get()
		set VBNRINFO("PROMPTS",3)="WC2|"_"Transaction Group"_"|VIN3|"_VIN3.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Transaction Code Listing Summary"
		set VBNRINFO("PGM")="R01S231"
		set VBNRINFO("RID")="SCA182"
		set VBNRINFO("TABLES")="TRN"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TRN]ETC"

		set VBNRINFO("DOC",1)="This report provides a list of all attributes associated with valid transaction"
		set VBNRINFO("DOC",2)="codes.  These attributes include:"
		set VBNRINFO("DOC",3)=""
		set VBNRINFO("DOC",4)="*  Description data"
		set VBNRINFO("DOC",5)=""
		set VBNRINFO("DOC",6)="*  Posting programs"
		set VBNRINFO("DOC",7)=""
		set VBNRINFO("DOC",8)="*  Associated miscellaneous fields and their attributes"
		set VBNRINFO("DOC",9)=""
		set VBNRINFO("DOC",10)="*  Linked transaction codes"
		set VBNRINFO("DOC",11)=""
		set VBNRINFO("DOC",12)="*  Default values that appear on the transaction posting screen"
		set VBNRINFO("DOC",13)=""
		set VBNRINFO("DOC",14)="*  Userclasses permitted to use the transaction codes for specific types of"
		set VBNRINFO("DOC",15)="   transactions"
		set VBNRINFO("DOC",16)=""
		set VBNRINFO("DOC",17)="For further information, refer to the ""Transaction Code Maintenance Reference"
		set VBNRINFO("DOC",18)="Manual."""

		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:1 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"TRN.ETC,TRN.CLS,TRN.GRP,TRN.DC,TRN.DES,TRN.PGM,TRN"
	set VSELECT=VSELECT_".TRMAX,TRN.PRDES,TRN.PGMEC,TRN.CKTYP,TRN.PAC,TRN.P"
	set VSELECT=VSELECT_"PF,TRN.POPF,TRN.MFF,TRN.ENC,TRN.VOUCHER,TRN.DTL,TR"
	set VSELECT=VSELECT_"N.SKPP,TRN.STPNT,TRN.SGT,TRN.RECEIPT,TRN.ACN,TRN.A"
	set VSELECT=VSELECT_"MT,TRN.DFTCC,TRN.MFVAR1,TRN.MFDSC1,TRN.MFREQ1,TRN."
	set VSELECT=VSELECT_"MFDFT1,TRN.MFTBL1,TRN.MFQRY1,TRN.MFHLP1,TRN.MFPRE1"
	set VSELECT=VSELECT_",TRN.MFPP1,TRN.MFVAR2,TRN.MFDSC2,TRN.MFREQ2,TRN.MF"
	set VSELECT=VSELECT_"DFT2,TRN.MFTBL2,TRN.MFQRY2,TRN.MFHLP2,TRN.MFPRE2,T"
	set VSELECT=VSELECT_"RN.MFPP2,TRN.MFVAR3,TRN.MFDSC3,TRN.MFREQ3,TRN.MFDF"
	set VSELECT=VSELECT_"T3,TRN.MFTBL3,TRN.MFQRY3,TRN.MFHLP3,TRN.MFPRE3,TRN"
	set VSELECT=VSELECT_".MFPP3,TRN.MFVAR4,TRN.MFDSC4,TRN.MFREQ4,TRN.MFDFT4"
	set VSELECT=VSELECT_",TRN.MFTBL4,TRN.MFQRY4,TRN.MFHLP4,TRN.MFPRE4,TRN.M"
	set VSELECT=VSELECT_"FPP4,TRN.LNKETC,TRN.LNKCID,TRN.LNKAMT,TRN.LNKCMT,T"
	set VSELECT=VSELECT_"RN.PCF"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"TRN",VWHERE,"TRN.ETC","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1
	set vovc1=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1
	set vovc1=vc1
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc60,vc61,vc62,vc63,vc64,vc65
	set vc1=V.piece($C(9),1)			// TRN.ETC
	set vc2=V.piece($C(9),2)			// TRN.CLS
	set vc3=V.piece($C(9),3)			// TRN.GRP
	set vc4=V.piece($C(9),4)			// TRN.DC
	set vc5=V.piece($C(9),5)			// TRN.DES
	set vc6=V.piece($C(9),6)			// TRN.PGM
	set vc7=V.piece($C(9),7)			// TRN.TRMAX
	set vc8=V.piece($C(9),8)			// TRN.PRDES
	set vc9=V.piece($C(9),9)			// TRN.PGMEC
	set vc10=V.piece($C(9),10)			// TRN.CKTYP
	set vc11=V.piece($C(9),11)			// TRN.PAC
	set vc12=V.piece($C(9),12)			// TRN.PPF
	set vc13=V.piece($C(9),13)			// TRN.POPF
	set vc14=V.piece($C(9),14)			// TRN.MFF
	set vc15=V.piece($C(9),15)			// TRN.ENC
	set vc16=V.piece($C(9),16)			// TRN.VOUCHER
	set vc17=V.piece($C(9),17)			// TRN.DTL
	set vc18=V.piece($C(9),18)			// TRN.SKPP
	set vc19=V.piece($C(9),19)			// TRN.STPNT
	set vc20=V.piece($C(9),20)			// TRN.SGT
	set vc21=V.piece($C(9),21)			// TRN.RECEIPT
	set vc22=V.piece($C(9),22)			// TRN.ACN
	set vc23=V.piece($C(9),23)			// TRN.AMT
	set vc24=V.piece($C(9),24)			// TRN.DFTCC
	set vc25=V.piece($C(9),25)			// TRN.MFVAR1
	set vc26=V.piece($C(9),26)			// TRN.MFDSC1
	set vc27=V.piece($C(9),27)			// TRN.MFREQ1
	set vc28=V.piece($C(9),28)			// TRN.MFDFT1
	set vc29=V.piece($C(9),29)			// TRN.MFTBL1
	set vc30=V.piece($C(9),30)			// TRN.MFQRY1
	set vc31=V.piece($C(9),31)			// TRN.MFHLP1
	set vc32=V.piece($C(9),32)			// TRN.MFPRE1
	set vc33=V.piece($C(9),33)			// TRN.MFPP1
	set vc34=V.piece($C(9),34)			// TRN.MFVAR2
	set vc35=V.piece($C(9),35)			// TRN.MFDSC2
	set vc36=V.piece($C(9),36)			// TRN.MFREQ2
	set vc37=V.piece($C(9),37)			// TRN.MFDFT2
	set vc38=V.piece($C(9),38)			// TRN.MFTBL2
	set vc39=V.piece($C(9),39)			// TRN.MFQRY2
	set vc40=V.piece($C(9),40)			// TRN.MFHLP2
	set vc41=V.piece($C(9),41)			// TRN.MFPRE2
	set vc42=V.piece($C(9),42)			// TRN.MFPP2
	set vc43=V.piece($C(9),43)			// TRN.MFVAR3
	set vc44=V.piece($C(9),44)			// TRN.MFDSC3
	set vc45=V.piece($C(9),45)			// TRN.MFREQ3
	set vc46=V.piece($C(9),46)			// TRN.MFDFT3
	set vc47=V.piece($C(9),47)			// TRN.MFTBL3
	set vc48=V.piece($C(9),48)			// TRN.MFQRY3
	set vc49=V.piece($C(9),49)			// TRN.MFHLP3
	set vc50=V.piece($C(9),50)			// TRN.MFPRE3
	set vc51=V.piece($C(9),51)			// TRN.MFPP3
	set vc52=V.piece($C(9),52)			// TRN.MFVAR4
	set vc53=V.piece($C(9),53)			// TRN.MFDSC4
	set vc54=V.piece($C(9),54)			// TRN.MFREQ4
	set vc55=V.piece($C(9),55)			// TRN.MFDFT4
	set vc56=V.piece($C(9),56)			// TRN.MFTBL4
	set vc57=V.piece($C(9),57)			// TRN.MFQRY4
	set vc58=V.piece($C(9),58)			// TRN.MFHLP4
	set vc59=V.piece($C(9),59)			// TRN.MFPRE4
	set vc60=V.piece($C(9),60)			// TRN.MFPP4
	set vc61=V.piece($C(9),61)			// TRN.LNKETC
	set vc62=V.piece($C(9),62)			// TRN.LNKCID
	set vc63=V.piece($C(9),63)			// TRN.LNKAMT
	set vc64=V.piece($C(9),64)			// TRN.LNKCMT
	set vc65=V.piece($C(9),65)			// TRN.PCF
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public Number ADJ

 set ADJ=0
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1		// Skip detail
	do VBREAK

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(1).get() do VDTL1 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(1)
	type Public String vc1,vovc1
	type Number vb1
	set (vb1)=0
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(1)=VT(1)+1
	quit

VDTL1	// Detail
	type public String %TIM,ADJ,IOSL,V,VAR,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc7,vc8,vc9,verror,vh(),vovc1,vrundate,vsysdate

	if VLC+38>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL=$E(vc1,1,12)
	set V=vc2,VO=V set V=$E(V,1,1) do VP1 quit:VFMQ!verror.get()
	set VL=VL_$J("",16-VL.length())_V		// [SYSDEV,TRN]CLS
	set VL=VL_$J("",20-VL.length())_$E(vc3,1,6)
	set V=vc4,VO=V set V=$E(V,1,2) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",28-VL.length())_V		// [SYSDEV,TRN]DC
	set VL=VL_$J("",33-VL.length())_$E(vc5,1,35)
	set VL=VL_$J("",69-VL.length())_"1:"
	do VP3 quit:VFMQ!verror.get()  set V=$E(PF(1),1,1)
	set VL=VL_$J("",71-VL.length())_V
	set VL=VL_$J("",75-VL.length())_"2:"
	set VL=VL_$J("",77-VL.length())_$E(PF(2),1,1)
	set VL=VL_$J("",81-VL.length())_"3:"
	set VL=VL_$J("",83-VL.length())_$E(PF(3),1,1)
	set VL=VL_$J("",87-VL.length())_"4:"
	set VL=VL_$J("",89-VL.length())_$E(PF(4),1,1)
	set VL=VL_$J("",93-VL.length())_"5:"
	set VL=VL_$J("",95-VL.length())_$E(PF(5),1,1)
	set VL=VL_$J("",99-VL.length())_"6:"
	set VL=VL_$J("",101-VL.length())_$E(PF(6),1,1)
	set VL=VL_$J("",105-VL.length())_"7:"
	set VL=VL_$J("",107-VL.length())_$E(PF(7),1,1)
	set VL=VL_$J("",111-VL.length())_"8:"
	set VL=VL_$J("",113-VL.length())_$E(PF(8),1,1)
	set VL=VL_$J("",117-VL.length())_"9:"
	set VL=VL_$J("",119-VL.length())_$E(PF(9),1,1)
	set VL=VL_$J("",122-VL.length())_"10:"
	set VL=VL_$J("",125-VL.length())_$E(PF(10),1,1)
	set VL=VL_$J("",128-VL.length())_"11:"
	set VL=VL_$J("",131-VL.length())_$E(PF(11),1,1)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(vc6,1,12)
	set VL=VL_$J("",19-VL.length())_$S(+vc7=0:$J("",12),1:$J(vc7,12,2))
	set VL=VL_$J("",33-VL.length())_$E(vc8,1,30)
	set VL=VL_$J("",68-VL.length())_"12:"
	set VL=VL_$J("",71-VL.length())_$E(PF(12),1,1)
	set VL=VL_$J("",74-VL.length())_"13:"
	set VL=VL_$J("",77-VL.length())_$E(PF(13),1,1)
	set VL=VL_$J("",80-VL.length())_"14:"
	set VL=VL_$J("",83-VL.length())_$E(PF(14),1,1)
	set VL=VL_$J("",86-VL.length())_"15:"
	set VL=VL_$J("",89-VL.length())_$E(PF(15),1,1)
	set VL=VL_$J("",92-VL.length())_"16:"
	set VL=VL_$J("",95-VL.length())_$E(PF(16),1,1)
	set VL=VL_$J("",98-VL.length())_"17:"
	set VL=VL_$J("",101-VL.length())_$E(PF(17),1,1)
	set VL=VL_$J("",104-VL.length())_"18:"
	set VL=VL_$J("",107-VL.length())_$E(PF(18),1,1)
	set VL=VL_$J("",110-VL.length())_"19:"
	set VL=VL_$J("",113-VL.length())_$E(PF(19),1,1)
	set VL=VL_$J("",116-VL.length())_"20:"
	set VL=VL_$J("",119-VL.length())_$E(PF(20),1,1)
	set VL=VL_$J("",122-VL.length())_"21:"
	set VL=VL_$J("",125-VL.length())_$E(PF(21),1,1)
	set VL=VL_$J("",128-VL.length())_"22:"
	set VL=VL_$J("",131-VL.length())_$E(PF(22),1,1)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(vc9,1,12)
	set VL=VL_$J("",20-VL.length())_$E(vc10,1,6)
	set VL=VL_$J("",33-VL.length())_$E(vc11,1,20)
	set VL=VL_$J("",69-VL.length())_"A:"
	set V=vc12,VO=V set V=$S(V:"Y",1:"N") do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",71-VL.length())_V		// [SYSDEV,TRN]PPF
	set VL=VL_$J("",75-VL.length())_"B:"
	set V=vc13,VO=V set V=$S(V:"Y",1:"N") do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",77-VL.length())_V		// [SYSDEV,TRN]POPF
	set VL=VL_$J("",81-VL.length())_"C:"
	set V=vc14,VO=V set V=$S(V:"Y",1:"N") do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V		// [SYSDEV,TRN]MFF
	set VL=VL_$J("",87-VL.length())_"D:"
	set V=vc15,VO=V set V=$S(V:"Y",1:"N") do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",89-VL.length())_V		// [SYSDEV,TRN]ENC
	set VL=VL_$J("",92-VL.length())_" E:"
	set V=vc16,VO=V set V=$S(V:"Y",1:"N") do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",95-VL.length())_V		// [SYSDEV,TRN]VOUCHER
	set VL=VL_$J("",99-VL.length())_"F:"
	set V=vc17,VO=V set V=$S(V:"Y",1:"N") do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V		// [SYSDEV,TRN]DTL
	set VL=VL_$J("",105-VL.length())_"G:"
	set V=vc18,VO=V set V=$S(V:"Y",1:"N") do VP10 quit:VFMQ!verror.get()
	set VL=VL_$J("",107-VL.length())_V		// [SYSDEV,TRN]SKPP
	set VL=VL_$J("",111-VL.length())_"H:"
	set VL=VL_$J("",113-VL.length())_$E(vc19,1,1)
	set VL=VL_$J("",117-VL.length())_"I:"
	set V=vc20,VO=V set V=$S(V:"Y",1:"N") do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",119-VL.length())_V		// [SYSDEV,TRN]SGT
	set VL=VL_$J("",123-VL.length())_"J:"
	set V=vc21,VO=V set V=$S(V:"Y",1:"N") do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",125-VL.length())_V		// [SYSDEV,TRN]RECEIPT
	if 'VL.translate(" ").isNull() do VOM
	do VP13 quit:VFMQ!verror.get()  set V=$E(VAR,1,1) do VP14 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"Default Account"
	set VL=VL_$J("",27-VL.length())_"Default Amount"
	set V="Default Cost Center" do VP15 quit:VFMQ!verror.get()
	set VL=VL_$J("",48-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"---------------"
	set VL=VL_$J("",27-VL.length())_"--------------"
	set V="-------------------" do VP16 quit:VFMQ!verror.get()
	set VL=VL_$J("",48-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="        "_$J(vc22,12)
	set VL=VL_$J("",29-VL.length())_$S(+vc23=0:$J("",12),1:$J(vc23,12,2))
	set V=vc24,VO=V set V=$J(V,25) do VP17 quit:VFMQ!verror.get()
	set VL=VL_$J("",42-VL.length())_V		// [SYSDEV,TRN]DFTCC
	if 'VL.translate(" ").isNull() do VOM
	do VP18 quit:VFMQ!verror.get()  set V=$E(VAR,1,1) do VP19 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"Field"
	set VL=VL_$J("",12-VL.length())_"Variable"
	set VL=VL_$J("",22-VL.length())_"Description"
	set VL=VL_$J("",37-VL.length())_"Req"
	set VL=VL_$J("",42-VL.length())_"Default"
	set VL=VL_$J("",68-VL.length())_"Table"
	set V="Query ID" do VP20 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V
	set VL=VL_$J("",104-VL.length())_"Help Data Item"
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"-----"
	set VL=VL_$J("",12-VL.length())_"--------"
	set VL=VL_$J("",22-VL.length())_"-----------"
	set VL=VL_$J("",37-VL.length())_"---"
	set VL=VL_$J("",42-VL.length())_"-------"
	set VL=VL_$J("",68-VL.length())_"-----"
	set V="--------" do VP21 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V
	set VL=VL_$J("",104-VL.length())_"--------------"
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"#1"
	set VL=VL_$J("",12-VL.length())_$E(vc25,1,6)
	set VL=VL_$J("",22-VL.length())_$E(vc26,1,15)
	set VL=VL_$J("",39-VL.length())_$S(vc27:"Y",1:"N")
	set VL=VL_$J("",42-VL.length())_$E(vc28,1,24)
	set VL=VL_$J("",68-VL.length())_$E(vc29,1,20)
	set V=vc30,VO=V set V=$E(V,1,12) do VP22 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V		// [SYSDEV,TRN]MFQRY1
	set VL=VL_$J("",104-VL.length())_$E(vc31,1,24)
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pre:"
	set V=vc32,VO=V set V=$E(V,1,65) do VP23 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPRE1
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pst:"
	set V=vc33,VO=V set V=$E(V,1,65) do VP24 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPP1
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"#2"
	set VL=VL_$J("",12-VL.length())_$E(vc34,1,6)
	set VL=VL_$J("",22-VL.length())_$E(vc35,1,15)
	set VL=VL_$J("",39-VL.length())_$S(vc36:"Y",1:"N")
	set VL=VL_$J("",42-VL.length())_$E(vc37,1,24)
	set VL=VL_$J("",68-VL.length())_$E(vc38,1,20)
	set V=vc39,VO=V set V=$E(V,1,12) do VP25 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V		// [SYSDEV,TRN]MFQRY2
	set VL=VL_$J("",104-VL.length())_$E(vc40,1,24)
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pre:"
	set V=vc41,VO=V set V=$E(V,1,65) do VP26 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPRE2
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pst:"
	set V=vc42,VO=V set V=$E(V,1,65) do VP27 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPP2
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"#3"
	set VL=VL_$J("",12-VL.length())_$E(vc43,1,6)
	set VL=VL_$J("",22-VL.length())_$E(vc44,1,15)
	set VL=VL_$J("",39-VL.length())_$S(vc45:"Y",1:"N")
	set VL=VL_$J("",42-VL.length())_$E(vc46,1,24)
	set VL=VL_$J("",68-VL.length())_$E(vc47,1,20)
	set V=vc48,VO=V set V=$E(V,1,12) do VP28 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V		// [SYSDEV,TRN]MFQRY3
	set VL=VL_$J("",104-VL.length())_$E(vc49,1,24)
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pre:"
	set V=vc50,VO=V set V=$E(V,1,65) do VP29 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPRE3
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pst:"
	set V=vc51,VO=V set V=$E(V,1,65) do VP30 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPP3
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"#4"
	set VL=VL_$J("",12-VL.length())_$E(vc52,1,6)
	set VL=VL_$J("",22-VL.length())_$E(vc53,1,15)
	set VL=VL_$J("",39-VL.length())_$S(vc54:"Y",1:"N")
	set VL=VL_$J("",42-VL.length())_$E(vc55,1,24)
	set VL=VL_$J("",68-VL.length())_$E(vc56,1,20)
	set V=vc57,VO=V set V=$E(V,1,12) do VP31 quit:VFMQ!verror.get()
	set VL=VL_$J("",90-VL.length())_V		// [SYSDEV,TRN]MFQRY4
	set VL=VL_$J("",104-VL.length())_$E(vc58,1,24)
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pre:"
	set V=vc59,VO=V set V=$E(V,1,65) do VP32 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPRE4
	if 'VL.translate(" ").isNull() do VOM
	set VL="            "_"Pst:"
	set V=vc60,VO=V set V=$E(V,1,65) do VP33 quit:VFMQ!verror.get()
	set VL=VL_$J("",17-VL.length())_V		// [SYSDEV,TRN]MFPP4
	if 'VL.translate(" ").isNull() do VOM
	do VP34 quit:VFMQ!verror.get()  set V=$E(VAR,1,1) do VP35 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"Linked Tran Code"
	set VL=VL_$J("",26-VL.length())_"Default Account"
	set VL=VL_$J("",46-VL.length())_"Amount"
	set V="Comment" do VP36 quit:VFMQ!verror.get()
	set VL=VL_$J("",68-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"----------------"
	set VL=VL_$J("",26-VL.length())_"---------------"
	set VL=VL_$J("",46-VL.length())_"------"
	set V="-------" do VP37 quit:VFMQ!verror.get()
	set VL=VL_$J("",68-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(vc61,1,12)
	set VL=VL_$J("",26-VL.length())_$E(vc62,1,12)
	set VL=VL_$J("",46-VL.length())_$E(vc63,1,12)
	set V=vc64,VO=V set V=$E(V,1,40) do VP38 quit:VFMQ!verror.get()
	set VL=VL_$J("",68-VL.length())_V		// [SYSDEV,TRN]LNKCMT
	if 'VL.translate(" ").isNull() do VOM
	do VP39 quit:VFMQ!verror.get()  set V=$E(VAR,1,1) set VL=V
	if 'VL.translate(" ").isNull() do VOM
	do VP40 quit:VFMQ!verror.get()  set V=$E(UCLS(1),1,132) set VL="     "_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(2),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(3),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(4),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(5),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(6),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(7),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(8),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(9),1,132)
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_$E(UCLS(10),1,132)
	if 'VL.translate(" ").isNull() do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ADJ,CONAM,RID,RN,VAR,VL,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc21,vc22,vc23,vc24,vc25,vc26,vc27,vc28,vc29,vc3,vc30,vc31,vc32,vc33,vc34,vc35,vc36,vc37,vc38,vc39,vc4,vc40,vc41,vc42,vc43,vc44,vc45,vc46,vc47,vc48,vc49,vc5,vc50,vc51,vc52,vc53,vc54,vc55,vc56,vc57,vc58,vc59,vc6,vc60,vc61,vc62,vc63,vc64,vc65,vc7,vc8,vc9,vovc1,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="Code          Cls   Group DR/CR  Transaction Description"
	do VOM
	set VL="     "_"Posting Prog  Max Tran Amt  Statement Description            .................  Process Control Parameters ................."
	do VOM
	set VL="     "_"Error-Correct  Type of Chk  Posting Action Control                           (See last page for descriptions)"
	do VOM
	set VL="===================================================================================================================================="
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,ADJ,VAR,VPN,vovc1,vrundate,vsysdate
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+71>IOSL do VHDG0 quit:VFMQ

	do VHDG0 quit:VFMQ				// <<#>>
	do VOM
	set VL="                                            "_"PROCESS CONTROL PARAMETER VALUES"
	do VOM
	set VL="" do VOM
	set VL="                   "_"DEPOSIT TRAN CODES                                               LOAN TRAN CODES"
	do VOM
	set VL="                   "_"------------------                                               ---------------"
	do VOM
	set VL="" do VOM
	set VL=" #  Value                                Considerations    #  Value                                             Considerations"
	do VOM
	set VL="" do VOM
	set VL=" "_"1  Update Tran Code Counter                               1  Reserved for Future Use"
	do VOM
	set VL=" "_"2  Update Last Customer Contact Date                      2  Update Last Customer Contact Date"
	do VOM
	set VL=" "_"3  Consider MMDA Limitations            Debit tran        3  Ignore Neg Am Fields When Reducing Principal"
	do VOM
	set VL=" "_"4  W/H Adj (Interest and RPA Dist)                        4  Update Counters, Amounts & Consider Restrictions  Disbursment codes"
	do VOM
	set VL=" "_"5  Close Acct and Prohibit Further Proc Debit tran        5  Close Acct and Prohibit Further Proc              Payoff codes"
	do VOM
	set VL=" "_"6  Do Not Calc Penalty on Notice Accts  Debit tran        6  Display Restriction if Misc Charge Ignored        Payment codes"
	do VOM
	set VL=" "_"7  Prompt for Check Number              Debit tran        7  Display Restriction if Late Charge Ignored        Payment codes"
	do VOM
	set VL=" "_"8  Reserved for Future Use                                8  Reserved for Future Use"
	do VOM
	set VL=" "_"9  Reserved for Future Use                                9  Update Last Payment Date Field"
	do VOM
	set VL="10  Reserved for Future Use                               10  Restrict Tran if Entered Amt Differs from Calc    Payoff codes"
	do VOM
	set VL="11  Reserved for Future Use                               11  Affects Escrow Remittances                        Escrow w/drawals"
	do VOM
	set VL="12  Reserved for Future Use                               12  Updates Principal Variance                        Prin codes"
	do VOM
	set VL="13  Reserved for Future Use                               13  Updates Interest Adjustment                       Prin codes"
	do VOM
	set VL="14  Reserved for Future Use                               14  Apply to Single Payment Element                   Payment codes"
	do VOM
	set VL="15  Reserved for Future Use                               15  Collect Interest to Extent of Accrual Balance     Int only codes"
	do VOM
	set VL="16  Reserved for Future Use                               16  Increase Capped & Decrease Uncapped Deferred Int  Int adj codes"
	do VOM
	set VL="17  Reserved for Future Use                               17  Force Vertical Payment Application                Payment codes"
	do VOM
	set VL="18  Reserved for Future Use                               18  Affect Unapplied Funds Balance                    Payment codes"
	do VOM
	set VL="19  Reserved for Future Use                               19  Include in Periodic APR Statement Calculations    Loan fees"
	do VOM
	set VL="20  Reserved for Future Use                               20  Ignore Interest Paid Fields                       Interest portion"
	do VOM
	set VL="21  Reserved for Future Use                               21  Prompt for Budget Code (if appropriate for loan)  Prin codes"
	do VOM
	set VL="22  Reserved for Future Use                               22  Reserved for Future Use"
	do VOM
	set VL="" do VOM
	set V="COMMON TO ALL TRAN CODES" do VP41 quit:VFMQ!verror.get()  set VL="                                                     "_V
	do VOM
	set VL="                                                     "_"------------------------"
	do VOM
	set VL="" do VOM
	set VL="                                            "_"      #  Value"
	do VOM
	set VL="" do VOM
	set VL="                                                  "_"A  Pre-Processor Flag"
	do VOM
	set VL="                                                  "_"B  Post-Processor Flag"
	do VOM
	set VL="                                                  "_"C  Miscellaneous Field Flag"
	do VOM
	set VL="                                                  "_"D  Enclosure Flag"
	do VOM
	set VL="                                                  "_"E  Print Voucher"
	do VOM
	set VL="                                                  "_"F  Detail G/L Transfer"
	do VOM
	set VL="                                                  "_"G  Skip Statement Print"
	do VOM
	set VL="                                                  "_"H  Statement Print Option"
	do VOM
	set VL="                                                  "_"I  Prohibit Teller Use"
	do VOM
	set VL="                                                  "_"J  Print Receipt"
	do VOM
	set VL="" do VOM
	set VL="                                            "_"VALID STATEMENT PRINT OPTIONS"
	do VOM
	set VL="" do VOM
	set VL="                                                  "_"0  No Fields"
	do VOM
	set VL="                                                  "_"A  Location Field"
	do VOM
	set VL="                                                  "_"B  Source Field "
	do VOM
	set VL="                                                  "_"C  Location and Source Fields  "
	do VOM
	set VL="                                                  "_"D  Comment Field"
	do VOM
	set VL="                                                  "_"E  Location and Comment Fields"
	do VOM
	set VL="                                                  "_"F  Source and Comment Fields"
	do VOM
	set VL="                                                  "_"G  Location, Source, and Comment Fields"
	do VOM
	set VL="                                                  "_"H  Spray Number Field"
	do VOM
	set VL="                                                  "_"I  Location and Spray Number Fields"
	do VOM
	set VL="                                                  "_"J  Source and Spray Number Fields"
	do VOM
	set VL="                                                  "_"K  Location, Source, and Spray Number Fields"
	do VOM
	set VL="                                                  "_"L  Comment and Spray Number Fields"
	do VOM
	set VL="                                                  "_"M  Location, Comment, and Spray Number Fields"
	do VOM
	set VL="                                                  "_"N  Source, Comment, and Spray Number Fields"
	do VOM
	set VL="                                                  "_"O  Location, Source, Comment, and Spray Number Fields"
	do VOM
	set VL="" do VOM
	set VL="VALID USERCLASSES:                                Example:  UCLS=xyz"
	do VOM
	set VL="" do VOM
	set VL="                                                  "_"where x=Book transaction"
	do VOM
	set VL="                                                        "_"y=No-book transaction"
	do VOM
	set VL="                                                        "_"z=Reversal transaction"
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column post-processor - [SYSDEV,TRN]CLS

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String CLS,V

 set CLS=V

	quit

VP2	// Column post-processor - [SYSDEV,TRN]DC

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V

 if V="" quit

 set V=$S(V:"CR",1:"DR")

 quit
	quit

VP3	// Column pre-processor - Variable: PF(1)

	type public String vc65
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String PF()
 type Number I
 type String PCF

 set PCF=vc65

 for I=1:1:22 set PF(I)=$S(PCF.extract(I):"Y",1:"")
	quit

VP4	// Column post-processor - [SYSDEV,TRN]PPF

 I V="N" S V=""
	quit

VP5	// Column post-processor - [SYSDEV,TRN]POPF

 I V="N" S V=""
	quit

VP6	// Column post-processor - [SYSDEV,TRN]MFF

 I V="N" S V=""
	quit

VP7	// Column post-processor - [SYSDEV,TRN]ENC

 I V="N" S V=""
	quit

VP8	// Column post-processor - [SYSDEV,TRN]VOUCHER

 I V="N" S V=""
	quit

VP9	// Column post-processor - [SYSDEV,TRN]DTL

 I V="N" S V=""
	quit

VP10	// Column post-processor - [SYSDEV,TRN]SKPP

 I V="N" S V=""
	quit

VP11	// Column post-processor - [SYSDEV,TRN]SGT

 I V="N" S V=""
	quit

VP12	// Column post-processor - [SYSDEV,TRN]RECEIPT

 I V="N" S V=""
	quit

VP13	// Column pre-processor - Variable: VAR

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String VAR

 set VAR=$C(1)
	quit

VP14	// Column post-processor - Variable: VAR

	type public String vc22,vc23,vc24
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL,VAR

 type Number ACN,AMT,DFTCC

 set ACN=vc22
 set AMT=vc23
 set DFTCC=vc24

 if AMT="",ACN="",DFTCC="" set (V,VL,VAR)=""
	quit

VP15	// Column post-processor - Default Cost Center

	type public String vc22,vc23,vc24
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type Number ACN,AMT,DFTCC
 
 set ACN=vc22
 set AMT=vc23
 set DFTCC=vc24
 
 if AMT="",ACN="",DFTCC="" set (V,VL)=""
	quit

VP16	// Column post-processor - -------------------

	type public String vc22,vc23,vc24
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type Number ACN,AMT,DFTCC
 
 set ACN=vc22
 set AMT=vc23
 set DFTCC=vc24
 
 if AMT="",ACN="",DFTCC="" set (V,VL)=""
	quit

VP17	// Column post-processor - [SYSDEV,TRN]DFTCC

	type public String vc22,vc23,vc24
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type Number ACN,AMT,DFTCC
 
 set ACN=vc22
 set AMT=vc23
 set DFTCC=vc24
 
 if AMT="",ACN="",DFTCC="" set (V,VL)=""
	quit

VP18	// Column pre-processor - Variable: VAR

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */
 
 type Public String VAR

 set VAR=$C(1)
	quit

VP19	// Column post-processor - Variable: VAR

	type public String vc25
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL,VAR

 type String MFVAR1

 set MFVAR1=vc25

 if MFVAR1="" set (V,VL,VAR)=""
	quit

VP20	// Column post-processor - Query ID

	type public String vc25
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFVAR1
 
 set MFVAR1=vc25
 
 if MFVAR1="" set (V,VL)=""

	quit

VP21	// Column post-processor - --------

	type public String vc25
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */
 
 type Public String V,VL

 type String MFVAR1
 
 set MFVAR1=vc25
 
 if MFVAR1="" set (V,VL)=""
	quit

VP22	// Column post-processor - [SYSDEV,TRN]MFQRY1

	type public String vc25
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFVAR1
 
 set MFVAR1=vc25
 
 if MFVAR1="" set (V,VL)=""

	quit

VP23	// Column post-processor - [SYSDEV,TRN]MFPRE1

	type public String vc25,vc32
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPRE1,MFVAR1
 
 set MFVAR1=vc25
 set MFPRE1=vc32

 if MFVAR1="" set (V,VL)="" quit
 if MFPRE1="" set (V,VL)=""
	quit

VP24	// Column post-processor - [SYSDEV,TRN]MFPP1

	type public String vc25,vc33
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPP1,MFVAR1
 
 set MFVAR1=vc25
 set MFPP1=vc33 

 if MFVAR1="" set (V,VL)="" quit
 if MFPP1="" set (V,VL)=""
	quit

VP25	// Column post-processor - [SYSDEV,TRN]MFQRY2

	type public String vc34
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFVAR2
 
 set MFVAR2=vc34
 
 if MFVAR2="" set (V,VL)="" quit
	quit

VP26	// Column post-processor - [SYSDEV,TRN]MFPRE2

	type public String vc34,vc41
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */
 
 type Public String V,VL

 type String MFPRE2,MFVAR2
 
 set MFVAR2=vc34
 set MFPRE2=vc41
 
 if MFVAR2="" set (V,VL)="" quit
 if MFPRE2="" set (V,VL)=""
	quit

VP27	// Column post-processor - [SYSDEV,TRN]MFPP2

	type public String vc34,vc42
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPP2,MFVAR2
 
 set MFVAR2=vc34
 set MFPP2=vc42 

 if MFVAR2="" set (V,VL)="" quit
 if MFPP2="" set (V,VL)=""
	quit

VP28	// Column post-processor - [SYSDEV,TRN]MFQRY3

	type public String vc43
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFVAR3
 
 set MFVAR3=vc43
 
 if MFVAR3="" set (V,VL)=""
	quit

VP29	// Column post-processor - [SYSDEV,TRN]MFPRE3

	type public String vc43,vc50
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPRE3,MFVAR3
 
 set MFVAR3=vc43
 set MFPRE3=vc50
 
 if MFVAR3="" set (V,VL)="" quit
 if MFPRE3="" set (V,VL)=""
	quit

VP30	// Column post-processor - [SYSDEV,TRN]MFPP3

	type public String vc43,vc51
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPP3,MFVAR3
 
 set MFVAR3=vc43
 set MFPP3=vc51 

 if MFVAR3="" set (V,VL)="" quit
 if MFPP3="" set (V,VL)=""
	quit

VP31	// Column post-processor - [SYSDEV,TRN]MFQRY4

	type public String vc52
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFVAR4
 
 set MFVAR4=vc52
 
 if MFVAR4="" set (V,VL)=""
	quit

VP32	// Column post-processor - [SYSDEV,TRN]MFPRE4

	type public String vc52,vc59
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPRE4,MFVAR4
 
 set MFVAR4=vc52
 set MFPRE4=vc59 

 if MFVAR4="" set (V,VL)="" quit
 if MFPRE4="" set (V,VL)=""
	quit

VP33	// Column post-processor - [SYSDEV,TRN]MFPP4

	type public String vc52,vc60
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String MFPP4,MFVAR4
 
 set MFVAR4=vc52
 set MFPP4=vc60 

 if MFVAR4="" set (V,VL)="" quit
 if MFPP4="" set (V,VL)=""
	quit

VP34	// Column pre-processor - Variable: VAR

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String VAR

 set VAR=$C(1)
	quit

VP35	// Column post-processor - Variable: VAR

	type public String vc61
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL,VAR

 type String LNKETC

 set LNKETC=vc61

 if LNKETC="" set (V,VL,VAR)=""
	quit

VP36	// Column post-processor - Comment

	type public String vc61
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String LNKETC

 set LNKETC=vc61

 if LNKETC="" set (V,VL)="" 
	quit

VP37	// Column post-processor - -------

	type public String vc61
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String LNKETC

 set LNKETC=vc61

 if LNKETC="" set (V,VL)=""
	quit

VP38	// Column post-processor - [SYSDEV,TRN]LNKCMT

	type public String vc61
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String V,VL

 type String LNKETC

 set LNKETC=vc61

 if LNKETC="" set (V,VL)=""
	quit

VP39	// Column pre-processor - Variable: VAR

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public String VAR

 set VAR=$C(1)
	quit

VP40	// Column pre-processor - Variable: UCLS(1)

	type public String vc1
 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Number CTR,I,LCTR
 type String ETC,HDR,ZUCLS

 type Public String UCLS()

 for I=1:1:10 set UCLS(I)=""
 set CTR=1,LCTR=1,HDR="Userclasses",UCLS="",ZUCLS="*"
 set ETC=vc1

 type ResultSet rs=Db.select("BNR,BOOK,NOBOOK,REVERSAL","TRNAUT","ETC=:ETC AND UCLS=:ZUCLS")

 // ~p1 - ALL
 if 'rs.isEmpty() set UCLS(1)=$$^MSG(6402,HDR) quit

 set UCLS(1)=HDR_" - "

 type ResultSet rs2=Db.select("UCLS,BNR","TRNAUT","ETC=:ETC AND UCLS>:UCLS")

 if rs2.isEmpty() quit

 while rs2.next() do {
	if UCLS(LCTR).length()>110 set LCTR=LCTR+1,CTR=1
	if LCTR>10 quit
	set UCLS(LCTR)=UCLS(LCTR)_$S(CTR<1:", ",1:"")_rs2.getCol(1)_"="_rs2.getCol(2)
	set CTR=CTR+1
	} 

 quit
	quit

VP41	// Column post-processor - COMMON TO ALL TRAN CODES

 /*
   ---- Revision History------------------------------------------------
 
        12/28/04 - KELLYP - CR 13667
                Converted to PSL
   ---------------------------------------------------------------------
 */

 type Public Number VLC

 set VLC=5
	quit
