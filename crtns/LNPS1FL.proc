LNPS1FL(RecordLNPS1 lnps1, String vpar, Boolean vparNorm) // LNPS1 - Loan Account Payment Schedule Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:27 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              11/22/2003
	// Trigger Definition (9)                      05/31/2006
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lnps1.getMode()                       // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lnps1,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lnps1,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lnps1.cid
	type String PDD = lnps1.pdd

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("PDD").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNPS1",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNPS1","CID = :lnps1.cid and PDD = :lnps1.pdd") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String PDD

	type RecordLNPS1 lnps1 = Db.getRecord("LNPS1","CID=:CID,PDD=:PDD")
	if (%ProcessMode = 2) do {
		do lnps1.setMode(2)

		do LNPS1FL(lnps1,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNPS1 lnps1

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNPS1","CID = :lnps1.cid and PDD = :lnps1.pdd") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lnps1))  S ^ACN(vobj(lnps1,-3),64,vobj(lnps1,-4))=vobj(lnps1)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lnps1)               // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNPS1 lnps1

	if vpar["/JOURNAL/" do VJOURNAL(.lnps1)                // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^ACN(vobj(lnps1,-3),64,vobj(lnps1,-4))             // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNPS1 lnps1

	// Type local variables for access keys for defaults
	type public String CID
	type public String PDD

	if lnps1.d2f.isNull() set lnps1.d2f = 0                // d2f
	if lnps1.d3f.isNull() set lnps1.d3f = 0                // d3f
	if lnps1.d4f.isNull() set lnps1.d4f = 0                // d4f
	quit


vreqn // Validate required data items

	type public RecordLNPS1 lnps1

	if lnps1.d2f.isNull() do vreqerr("D2F") quit
	if lnps1.d3f.isNull() do vreqerr("D3F") quit
	if lnps1.d4f.isNull() do vreqerr("D4F") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNPS1 lnps1

	if lnps1.cid.isNull() do vreqerr("CID") quit
	if lnps1.pdd.isNull() do vreqerr("PDD") quit

		if vx("D2F").exists(),lnps1.d2f.isNull() do vreqerr("D2F") quit
		if vx("D3F").exists(),lnps1.d3f.isNull() do vreqerr("D3F") quit
		if vx("D4F").exists(),lnps1.d4f.isNull() do vreqerr("D4F") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPS1","MSG",1767,"LNPS1."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("D2F").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("D3F").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("D4F").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FPC").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordLNPS1 lnps1
	if vx("").order().isNull() do AUDIT^UCUTILN(lnps1,.vx(),1,"|") quit
	if vx("D2F").exists()!vx("D3F").exists()!vx("D4F").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("FPC").exists() do vbu2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(lnps1,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - After delete trigger

	type public RecordLNPS1 lnps1
	/*
	-----Revision History--------------------------------------------------
	10/25/99 - CARROLLJ - 31126
		   Convert to PSL.
	*/

	// Call shared procedure routine PROCLNPS
	do DELETE^PROCLNPS(lnps1.pdd,.lnps1)
	
	quit

vai1 // Trigger AFTER_INSERT - After insert trigger

	type public RecordLNPS1 lnps1
	/*
		11/07/00 - VETSENM - 40359
		Insert values into the DAYENDLNNOT if LN.GENPRJREP="Y"
	*/               


	// Call shared procedure routine PROCLNPS
	do INSERT^PROCLNPS(lnps1.pdd,.lnps1)
	quit

vau1 // Trigger AU_D2F - After Update trigger for column D2F

	type public RecordLNPS1 lnps1
	/*---------- Revision History------------------------------------------

		05/09/06 - Dhanalakshmi R - 21105
																						Modified to use Db.getRecord with getmode instead
																						of Db.insert.
	
		11/07/00 - VETSENM - 40359
																						If LN.GENPRJREP is set to "Yes" than an entry will be set
																						into the table DAYENDLNNOT.

		12/11/00 - VETSENM- 43111
		Replaced getrecord method with getOneRow method           
	*/	


	type public RecordLNPS1 lnps1
	type RecordLN ln=Db.getRecord("LN","CID=:lnps1.cid")

	if ln.genprjrep=1 do {

		type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnps1.cid,ID=4",1)

		if 'lnnot.getMode() do lnnot.bypassSave()
	}
	quit

vau2 // Trigger AU_D3F - After Update trigger for column D3F

	type public RecordLNPS1 lnps1
	/*---------- Revision History-------------------------------------

	05/09/06 - Dhanalakshmi R - 21105
		Modified to use Db.getRecord with getmode instead
		of Db.insert.
	
	11/07/00 - VETSENM - 40359
		Insert values into the DAYENDLNNOT if LN.GENPRJREP="Y" 
	*/           	

	type public RecordLNPS1 lnps1
	type RecordLN ln=Db.getRecord("LN","CID=:lnps1.cid")

	if ln.genprjrep=1 do {

		type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnps1.cid,ID=4",1)

		if 'lnnot.getMode() do lnnot.bypassSave()
	}
	quit

vau3 // Trigger AU_D4F - After Update trigger for column D4F

	type public RecordLNPS1 lnps1
	/*---------- Revision History------------------------------------------

								05/09/06 - Dhanalakshmi R - 21105
		Modified to use Db.getRecord with getmode instead of Db.insert.
	
								11/07/00 - VETSENM - 40359
		Insert values into the DAYENDLNNOT if LN.GENPRJREP="Y"
								*/


	type public RecordLNPS1 lnps1
	type RecordLN ln=Db.getRecord("LN","CID=:lnps1.cid")

	if ln.genprjrep=1 do {

		type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnps1.cid,ID=4",1)

		if 'lnnot.getMode() do lnnot.bypassSave()
	}
	quit

vau4 // Trigger AU_FPC - After Update trigger for the FPC column

	type public RecordLNPS1 lnps1
	/*---------- Revision History ------------------------------------------	
	
	05/09/06 - Dhanalakshmi R - 21105
		Modified to use Db.getRecord with getmode instead of Db.insert.
	
	11/07/00 - VETSENM - 40359
		Insert values into the DAYENDLNNOT if LN.GENPRJREP="Y"
								*/


	type public RecordLNPS1 lnps1
	type RecordLN ln=Db.getRecord("LN","CID=:lnps1.cid")

	if ln.genprjrep=1 do {

		type RecordDAYENDLNNOT lnnot=Db.getRecord("DAYENDLNNOT","DT=:%SystemDate,CID=:lnps1.cid,ID=4",1)

		if 'lnnot.getMode() do lnnot.bypassSave()
	}
	quit

vau5 // Trigger AU_PDD - After update - PDD.

	type public RecordLNPS1 lnps1
							/*--------Revision History---------------------------------------
	05/25/00 - LUS - 39859
																			Moved the code from Trigger BU_PDD.
	-----------------------------------------------------------------*/
	/*
								A LNPS1.PDD update is really two things.  It is a delete of the old
								date and an insert of the new date.  We must therefore call into
								PROCLNPS twice.
								Delete the old value
								*/
	
								do DELETE^PROCLNPS(lnps1.pdd.oldVal,.lnps1)
	
								// Insert the new value
								do INSERT^PROCLNPS(lnps1.pdd,.lnps1)
								quit
	

vbu1 // Trigger BU_DIST_FLAGS - Before update ditribution flags

	type public RecordLNPS1 lnps1
	do lnps1.setAuditFlag(1)
	// Make sure at least one element flagged
	if '(lnps1.d2f!lnps1.d3f!lnps1.d4f) do { quit:ER 
	
		new datedisp
		set datedisp=$$DAT^%ZM(lnps1.pdd,%MSKD)
	
		// Indicate elements to collect for payment dated MM/DD/YY
		do Runtime.setErrMSG("LNPS1",1352,datedisp) quit:ER 
		}
	
	// Verify next scheduled date not before the first due date.
	
	if lnps1.d2f'=lnps1.d2f.oldVal do {
		new rs,FDD	
		type ResultSet rs=Db.select("PDD","LNPS1","CID=:CID AND D2F=1") 
		if rs.isEmpty() quit
		set FDD=rs.next(),FDD=rs.getCol(1)
		}	
	
	if lnps1.d3f'=lnps1.d3f.oldVal do {
		new rs,FDD 
		type ResultSet rs=Db.select("PDD","LNPS1","CID=:CID AND D3F=1") 
		if rs.isEmpty() quit
		set FDD=rs.next(),FDD=rs.getCol(1)
		}
	

	if lnps1.d4f'=lnps1.d4f.oldVal do {
		new rs,FDD 
		type ResultSet rs=Db.select("PDD","LNPS1","CID=:CID AND D4F=1") 
		if rs.isEmpty() quit
		set FDD=rs.next(),FDD=rs.getCol(1)
		}	
	
	if PDD<FDD do Runtime.setErrSTBLER("LNPS1","DUEDFP") quit:ER 
	quit

vbu2 // Trigger BU_FPC - Before update - FPC

	type public RecordLNPS1 lnps1
	do lnps1.setAuditFlag(1)
	new I,ROW,XCID
	set XCID=lnps1.cid
	
	new rs 
	new v set v="" 
	set v=v_"PE01EA,PE01PF,PE02EA,PE02PF,PE03EA,PE03PF,PE04EA,PE04PF,PE05EA," 
	set v=v_"PE05PF,PE06EA,PE06PF,PE07EA,PE07PF,PE08EA,PE08PF,PE09EA,PE09PF," 
	set v=v_"PE10EA,PE10PF,PE11EA,PE11PF,PE12EA,PE12PF,PE13EA,PE13PF," 
	set v=v_"PE14EA,PE14PF,PE15EA,PE15PF,PE16EA,PE16PF,PE17EA,PE17PF," 
	set v=v_"PE18EA,PE18PF,PE19EA,PE19PF,PE20EA,PE20PF" 
	set ROW=Db.getOneRow(v,"LNBIL0","XCID")
	
	set FOUND=0
	// determine where the principal element is located
	for I=1:2:39 if $P(ROW,$C(9),I)="P"!($P(ROW,$C(9),I)["-P") set FOUND=$P(ROW,$C(9),I+1) quit 
	if FOUND do {
		if FOUND=2,lnps1.d2f=1 quit 
		if FOUND=3,lnps1.d3f=1 quit 
		if FOUND=4,lnps1.d4f=1 quit 
		set FOUND=0
		}
	if 'FOUND do Runtime.setErrMSG("LNPS1",1975) quit:ER 
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNPS1 lnps1

	set X = lnps1.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = lnps1.pdd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PDD", vRM) quit
	if '("01"[lnps1.D2F) set vRM=$$^MSG(742,"L") do vdderr("D2F", vRM) quit
	if '("01"[lnps1.D3F) set vRM=$$^MSG(742,"L") do vdderr("D3F", vRM) quit
	if '("01"[lnps1.D4F) set vRM=$$^MSG(742,"L") do vdderr("D4F", vRM) quit
	set X = lnps1.fpc if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNPS1.FPC"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNPS1","MSG",979,"LNPS1."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNPS1 lnps1)	//LNPS1 Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lnps1)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lnps1)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lnps1)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lnps1)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.lnps1)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.lnps1)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordLNPS1 lnps1)	// HIST_DELETE  Table HIST  History for record deletion

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnps1.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(4141,$$DAT^%ZM(lnps1.pdd))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNPS1 lnps1)	// HIST_INSERT  Table HIST  History for new record in LNPS1

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lnps1.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(4140,$$DAT^%ZM(lnps1.pdd))
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordLNPS1 lnps1)	// HIST_UPDATE  Table HIST  History on update of LNPS1

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=lnps1.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(lnps1.cid_","_lnps1.pdd,"LNPS1",vdi,vold,vnew,$G(EFD),$$DAT^%ZM(lnps1.pdd),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordLNPS1 lnps1

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("PDD").exists() set vux("PDD") = vx("PDD")
	do vkey(1) set voldkey = lnps1.cid_","_lnps1.pdd       // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lnps1.cid_","_lnps1.pdd       // Copy new keys into object
	type RecordLNPS1 vnewrec = lnps1.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNPS1",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do {
		do VAU
		if vx("PDD").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNPS1 lnps1

	if vux("CID").exists() set lnps1.cid = vux("CID").piece("|",i)
	if vux("PDD").exists() set lnps1.pdd = vux("PDD").piece("|",i)
	quit
