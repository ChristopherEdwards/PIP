CTRFL(RecordCTR ctr, String vpar, Boolean vparNorm) // CTR - Currency Transaction Report Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (140)            08/11/2005
	// Trigger Definition (7)                      09/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = ctr.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(ctr,.vxins(),10,"|")
	if %O = 1 quit:'ctr.isChanged()  do AUDIT^UCUTILN(ctr,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String TJDATE = ctr.tjdate
	type String BRCD = ctr.brcd
	type String NCIND = ctr.ncind
	type String ID = ctr.id
	type String SEQ = ctr.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("TJDATE").exists()!vx("BRCD").exists()!vx("NCIND").exists()!vx("ID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CTR",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CTR","TJDATE = :ctr.tjdate and BRCD = :ctr.brcd and NCIND = :ctr.ncind and ID = :ctr.id and SEQ = :ctr.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String TJDATE
	type public String BRCD
	type public String NCIND
	type public String ID
	type public String SEQ

	type RecordCTR ctr = Db.getRecord("CTR","TJDATE=:TJDATE,BRCD=:BRCD,NCIND=:NCIND,ID=:ID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do ctr.setMode(2)

		do CTRFL(ctr,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCTR ctr

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CTR","TJDATE = :ctr.tjdate and BRCD = :ctr.brcd and NCIND = :ctr.ncind and ID = :ctr.id and SEQ = :ctr.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(ctr,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CTR(vobj(ctr,-3),vobj(ctr,-4),vobj(ctr,-5),vobj(ctr,-6),vobj(ctr,-7),n)=vobj(ctr,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(ctr,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(ctr,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^CTR(vobj(ctr,-3),vobj(ctr,-4),vobj(ctr,-5),vobj(ctr,-6),vobj(ctr,-7),n)=vobj(ctr,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordCTR ctr
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^CTR(vobj(ctr,-3),vobj(ctr,-4),vobj(ctr,-5),vobj(ctr,-6),vobj(ctr,-7),n)) quit:n.isNull()  if 'vobj(ctr,n).data(),^CTR(vobj(ctr,-3),vobj(ctr,-4),vobj(ctr,-5),vobj(ctr,-6),vobj(ctr,-7),n).data()#2 set vobj(ctr,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCTR ctr

	if 'vkeychg.get(),ctr.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^CTR(vobj(ctr,-3),vobj(ctr,-4),vobj(ctr,-5),vobj(ctr,-6),vobj(ctr,-7)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordCTR ctr

	// Type local variables for access keys for defaults
	type public String TJDATE
	type public String BRCD
	type public String NCIND
	type public String ID
	type public String SEQ

	if ctr.acs.isNull() set ctr.acs = 0                    // acs
	if ctr.apr.isNull() set ctr.apr = 0                    // apr
	if ctr.arindcp1.isNull() set ctr.arindcp1 = 0          // arindcp1
	if ctr.arindcp2.isNull() set ctr.arindcp2 = 0          // arindcp2
	if ctr.arindcp3.isNull() set ctr.arindcp3 = 0          // arindcp3
	if ctr.arindp1.isNull() set ctr.arindp1 = 0            // arindp1
	if ctr.arindp2.isNull() set ctr.arindp2 = 0            // arindp2
	if ctr.arindp3.isNull() set ctr.arindp3 = 0            // arindp3
	if ctr.ce.isNull() set ctr.ce = 0                      // ce
	if ctr.deposit.isNull() set ctr.deposit = 0            // deposit
	if ctr.dw.isNull() set ctr.dw = 0                      // dw
	if ctr.idindcp1.isNull() set ctr.idindcp1 = 0          // idindcp1
	if ctr.idindcp2.isNull() set ctr.idindcp2 = 0          // idindcp2
	if ctr.idindcp3.isNull() set ctr.idindcp3 = 0          // idindcp3
	if ctr.idindp1.isNull() set ctr.idindp1 = 0            // idindp1
	if ctr.idindp2.isNull() set ctr.idindp2 = 0            // idindp2
	if ctr.idindp3.isNull() set ctr.idindp3 = 0            // idindp3
	if ctr.mp.isNull() set ctr.mp = 0                      // mp
	if ctr.mt.isNull() set ctr.mt = 0                      // mt
	if ctr.mt2.isNull() set ctr.mt2 = 0                    // mt2
	if ctr.ncind.isNull() set ctr.ncind = 0                // ncind
	if ctr.nic.isNull() set ctr.nic = 0                    // nic
	if ctr.nip.isNull() set ctr.nip = 0                    // nip
	if ctr.oindcp1.isNull() set ctr.oindcp1 = 0            // oindcp1
	if ctr.oindcp2.isNull() set ctr.oindcp2 = 0            // oindcp2
	if ctr.oindcp3.isNull() set ctr.oindcp3 = 0            // oindcp3
	if ctr.oindp1.isNull() set ctr.oindp1 = 0              // oindp1
	if ctr.oindp2.isNull() set ctr.oindp2 = 0              // oindp2
	if ctr.oindp3.isNull() set ctr.oindp3 = 0              // oindp3
	if ctr.ownb.isNull() set ctr.ownb = 0                  // ownb
	if ctr.pindcp1.isNull() set ctr.pindcp1 = 0            // pindcp1
	if ctr.pindcp2.isNull() set ctr.pindcp2 = 0            // pindcp2
	if ctr.pindcp3.isNull() set ctr.pindcp3 = 0            // pindcp3
	if ctr.pindp1.isNull() set ctr.pindp1 = 0              // pindp1
	if ctr.pindp2.isNull() set ctr.pindp2 = 0              // pindp2
	if ctr.pindp3.isNull() set ctr.pindp3 = 0              // pindp3
	if ctr.trans.isNull() set ctr.trans = 0                // trans
	if ctr.wt.isNull() set ctr.wt = 0                      // wt
	quit


vreqn // Validate required data items

	type public RecordCTR ctr

	if ctr.acs.isNull() do vreqerr("ACS") quit
	if ctr.apr.isNull() do vreqerr("APR") quit
	if ctr.arindcp1.isNull() do vreqerr("ARINDCP1") quit
	if ctr.arindcp2.isNull() do vreqerr("ARINDCP2") quit
	if ctr.arindcp3.isNull() do vreqerr("ARINDCP3") quit
	if ctr.arindp1.isNull() do vreqerr("ARINDP1") quit
	if ctr.arindp2.isNull() do vreqerr("ARINDP2") quit
	if ctr.arindp3.isNull() do vreqerr("ARINDP3") quit
	if ctr.ce.isNull() do vreqerr("CE") quit
	if ctr.deposit.isNull() do vreqerr("DEPOSIT") quit
	if ctr.dw.isNull() do vreqerr("DW") quit
	if ctr.idindcp1.isNull() do vreqerr("IDINDCP1") quit
	if ctr.idindcp2.isNull() do vreqerr("IDINDCP2") quit
	if ctr.idindcp3.isNull() do vreqerr("IDINDCP3") quit
	if ctr.idindp1.isNull() do vreqerr("IDINDP1") quit
	if ctr.idindp2.isNull() do vreqerr("IDINDP2") quit
	if ctr.idindp3.isNull() do vreqerr("IDINDP3") quit
	if ctr.mp.isNull() do vreqerr("MP") quit
	if ctr.mt.isNull() do vreqerr("MT") quit
	if ctr.mt2.isNull() do vreqerr("MT2") quit
	if ctr.nic.isNull() do vreqerr("NIC") quit
	if ctr.nip.isNull() do vreqerr("NIP") quit
	if ctr.oindcp1.isNull() do vreqerr("OINDCP1") quit
	if ctr.oindcp2.isNull() do vreqerr("OINDCP2") quit
	if ctr.oindcp3.isNull() do vreqerr("OINDCP3") quit
	if ctr.oindp1.isNull() do vreqerr("OINDP1") quit
	if ctr.oindp2.isNull() do vreqerr("OINDP2") quit
	if ctr.oindp3.isNull() do vreqerr("OINDP3") quit
	if ctr.ownb.isNull() do vreqerr("OWNB") quit
	if ctr.pindcp1.isNull() do vreqerr("PINDCP1") quit
	if ctr.pindcp2.isNull() do vreqerr("PINDCP2") quit
	if ctr.pindcp3.isNull() do vreqerr("PINDCP3") quit
	if ctr.pindp1.isNull() do vreqerr("PINDP1") quit
	if ctr.pindp2.isNull() do vreqerr("PINDP2") quit
	if ctr.pindp3.isNull() do vreqerr("PINDP3") quit
	if ctr.trans.isNull() do vreqerr("TRANS") quit
	if ctr.wt.isNull() do vreqerr("WT") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCTR ctr

	if ctr.tjdate.isNull() do vreqerr("TJDATE") quit
	if ctr.brcd.isNull() do vreqerr("BRCD") quit
	if ctr.ncind.isNull() do vreqerr("NCIND") quit
	if ctr.id.isNull() do vreqerr("ID") quit
	if ctr.seq.isNull() do vreqerr("SEQ") quit

	if 'vobj(ctr,-100,1,"").order().isNull() do {
		if vx("APR").exists(),ctr.apr.isNull() do vreqerr("APR") quit
		if vx("MP").exists(),ctr.mp.isNull() do vreqerr("MP") quit
		if vx("MT").exists(),ctr.mt.isNull() do vreqerr("MT") quit
	}
	if 'vobj(ctr,-100,2,"").order().isNull() do {
		if vx("IDINDP1").exists(),ctr.idindp1.isNull() do vreqerr("IDINDP1") quit
		if vx("PINDP1").exists(),ctr.pindp1.isNull() do vreqerr("PINDP1") quit
		if vx("ARINDP1").exists(),ctr.arindp1.isNull() do vreqerr("ARINDP1") quit
		if vx("OINDP1").exists(),ctr.oindp1.isNull() do vreqerr("OINDP1") quit
	}
	if 'vobj(ctr,-100,3,"").order().isNull() do {
		if vx("ACS").exists(),ctr.acs.isNull() do vreqerr("ACS") quit
		if vx("DEPOSIT").exists(),ctr.deposit.isNull() do vreqerr("DEPOSIT") quit
		if vx("TRANS").exists(),ctr.trans.isNull() do vreqerr("TRANS") quit
		if vx("MT2").exists(),ctr.mt2.isNull() do vreqerr("MT2") quit
		if vx("OWNB").exists(),ctr.ownb.isNull() do vreqerr("OWNB") quit
	}
	if 'vobj(ctr,-100,4,"").order().isNull() do {
		if vx("IDINDCP1").exists(),ctr.idindcp1.isNull() do vreqerr("IDINDCP1") quit
		if vx("PINDCP1").exists(),ctr.pindcp1.isNull() do vreqerr("PINDCP1") quit
		if vx("ARINDCP1").exists(),ctr.arindcp1.isNull() do vreqerr("ARINDCP1") quit
		if vx("OINDCP1").exists(),ctr.oindcp1.isNull() do vreqerr("OINDCP1") quit
	}
	if 'vobj(ctr,-100,6,"").order().isNull() do {
		if vx("IDINDP2").exists(),ctr.idindp2.isNull() do vreqerr("IDINDP2") quit
		if vx("PINDP2").exists(),ctr.pindp2.isNull() do vreqerr("PINDP2") quit
		if vx("ARINDP2").exists(),ctr.arindp2.isNull() do vreqerr("ARINDP2") quit
		if vx("OINDP2").exists(),ctr.oindp2.isNull() do vreqerr("OINDP2") quit
	}
	if 'vobj(ctr,-100,8,"").order().isNull() do {
		if vx("IDINDCP2").exists(),ctr.idindcp2.isNull() do vreqerr("IDINDCP2") quit
		if vx("PINDCP2").exists(),ctr.pindcp2.isNull() do vreqerr("PINDCP2") quit
		if vx("ARINDCP2").exists(),ctr.arindcp2.isNull() do vreqerr("ARINDCP2") quit
		if vx("OINDCP2").exists(),ctr.oindcp2.isNull() do vreqerr("OINDCP2") quit
	}
	if 'vobj(ctr,-100,10,"").order().isNull() do {
		if vx("IDINDP3").exists(),ctr.idindp3.isNull() do vreqerr("IDINDP3") quit
		if vx("PINDP3").exists(),ctr.pindp3.isNull() do vreqerr("PINDP3") quit
		if vx("ARINDP3").exists(),ctr.arindp3.isNull() do vreqerr("ARINDP3") quit
		if vx("OINDP3").exists(),ctr.oindp3.isNull() do vreqerr("OINDP3") quit
	}
	if 'vobj(ctr,-100,12,"").order().isNull() do {
		if vx("IDINDCP3").exists(),ctr.idindcp3.isNull() do vreqerr("IDINDCP3") quit
		if vx("PINDCP3").exists(),ctr.pindcp3.isNull() do vreqerr("PINDCP3") quit
		if vx("ARINDCP3").exists(),ctr.arindcp3.isNull() do vreqerr("ARINDCP3") quit
		if vx("OINDCP3").exists(),ctr.oindcp3.isNull() do vreqerr("OINDCP3") quit
	}
	if 'vobj(ctr,-100,13,"").order().isNull() do {
		if vx("WT").exists(),ctr.wt.isNull() do vreqerr("WT") quit
		if vx("NIP").exists(),ctr.nip.isNull() do vreqerr("NIP") quit
		if vx("NIC").exists(),ctr.nic.isNull() do vreqerr("NIC") quit
		if vx("CE").exists(),ctr.ce.isNull() do vreqerr("CE") quit
		if vx("DW").exists(),ctr.dw.isNull() do vreqerr("DW") quit
	}
		if vx("ACS").exists(),ctr.acs.isNull() do vreqerr("ACS") quit
		if vx("APR").exists(),ctr.apr.isNull() do vreqerr("APR") quit
		if vx("ARINDCP1").exists(),ctr.arindcp1.isNull() do vreqerr("ARINDCP1") quit
		if vx("ARINDCP2").exists(),ctr.arindcp2.isNull() do vreqerr("ARINDCP2") quit
		if vx("ARINDCP3").exists(),ctr.arindcp3.isNull() do vreqerr("ARINDCP3") quit
		if vx("ARINDP1").exists(),ctr.arindp1.isNull() do vreqerr("ARINDP1") quit
		if vx("ARINDP2").exists(),ctr.arindp2.isNull() do vreqerr("ARINDP2") quit
		if vx("ARINDP3").exists(),ctr.arindp3.isNull() do vreqerr("ARINDP3") quit
		if vx("CE").exists(),ctr.ce.isNull() do vreqerr("CE") quit
		if vx("DEPOSIT").exists(),ctr.deposit.isNull() do vreqerr("DEPOSIT") quit
		if vx("DW").exists(),ctr.dw.isNull() do vreqerr("DW") quit
		if vx("IDINDCP1").exists(),ctr.idindcp1.isNull() do vreqerr("IDINDCP1") quit
		if vx("IDINDCP2").exists(),ctr.idindcp2.isNull() do vreqerr("IDINDCP2") quit
		if vx("IDINDCP3").exists(),ctr.idindcp3.isNull() do vreqerr("IDINDCP3") quit
		if vx("IDINDP1").exists(),ctr.idindp1.isNull() do vreqerr("IDINDP1") quit
		if vx("IDINDP2").exists(),ctr.idindp2.isNull() do vreqerr("IDINDP2") quit
		if vx("IDINDP3").exists(),ctr.idindp3.isNull() do vreqerr("IDINDP3") quit
		if vx("MP").exists(),ctr.mp.isNull() do vreqerr("MP") quit
		if vx("MT").exists(),ctr.mt.isNull() do vreqerr("MT") quit
		if vx("MT2").exists(),ctr.mt2.isNull() do vreqerr("MT2") quit
		if vx("NIC").exists(),ctr.nic.isNull() do vreqerr("NIC") quit
		if vx("NIP").exists(),ctr.nip.isNull() do vreqerr("NIP") quit
		if vx("OINDCP1").exists(),ctr.oindcp1.isNull() do vreqerr("OINDCP1") quit
		if vx("OINDCP2").exists(),ctr.oindcp2.isNull() do vreqerr("OINDCP2") quit
		if vx("OINDCP3").exists(),ctr.oindcp3.isNull() do vreqerr("OINDCP3") quit
		if vx("OINDP1").exists(),ctr.oindp1.isNull() do vreqerr("OINDP1") quit
		if vx("OINDP2").exists(),ctr.oindp2.isNull() do vreqerr("OINDP2") quit
		if vx("OINDP3").exists(),ctr.oindp3.isNull() do vreqerr("OINDP3") quit
		if vx("OWNB").exists(),ctr.ownb.isNull() do vreqerr("OWNB") quit
		if vx("PINDCP1").exists(),ctr.pindcp1.isNull() do vreqerr("PINDCP1") quit
		if vx("PINDCP2").exists(),ctr.pindcp2.isNull() do vreqerr("PINDCP2") quit
		if vx("PINDCP3").exists(),ctr.pindcp3.isNull() do vreqerr("PINDCP3") quit
		if vx("PINDP1").exists(),ctr.pindp1.isNull() do vreqerr("PINDP1") quit
		if vx("PINDP2").exists(),ctr.pindp2.isNull() do vreqerr("PINDP2") quit
		if vx("PINDP3").exists(),ctr.pindp3.isNull() do vreqerr("PINDP3") quit
		if vx("TRANS").exists(),ctr.trans.isNull() do vreqerr("TRANS") quit
		if vx("WT").exists(),ctr.wt.isNull() do vreqerr("WT") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTR","MSG",1767,"CTR."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("PZIPCP1").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIPCP2").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIPCP3").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIPP1").exists() do vau4 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIPP2").exists() do vau5 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	if vx("PZIPP3").exists() do vau6 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code columns.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Cond. Person 1
	do ZIP^PROCZIP(ctr.cntrycp1, ctr.statecp1, ctr.pzipcp1)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM) quit:ER

	// Validate ZIP code - Cond. Person 2
	do ZIP^PROCZIP(ctr.cntrycp2, ctr.statecp2, ctr.pzipcp2)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM) quit:ER

	// Validate ZIP code - Cond. Person 3
	do ZIP^PROCZIP(ctr.cntrycp3, ctr.statecp3, ctr.pzipcp3)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM) quit:ER

	// Validate ZIP code - Bem. Person 1
	do ZIP^PROCZIP(ctr.cntryp1, ctr.statep1, ctr.pzipp1)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM) quit:ER

	// Validate ZIP code - Ben. Person 2
	do ZIP^PROCZIP(ctr.cntryp2, ctr.statep2, ctr.pzipp2)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM) quit:ER

	// Validate ZIP code - Ben. Person 3
	do ZIP^PROCZIP(ctr.cntryp3, ctr.statep3, ctr.pzipp3)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM) quit:ER

	quit

vau1 // Trigger AU_PZIPCP1 - After Update of Postal Code Cond. Person 1

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with first
		   customer conducting the reportable transaction.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Cond. Person 1
	do ZIP^PROCZIP(ctr.cntrycp1, ctr.statecp1, ctr.pzipcp1)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM)

	quit

vau2 // Trigger AU_PZIPCP2 - After Update of Postal Code Cond. Person 2

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with second
		   customer conducting the reportable transaction.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Cond. Person 2
	do ZIP^PROCZIP(ctr.cntrycp2, ctr.statecp2, ctr.pzipcp2)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM)

	quit

vau3 // Trigger AU_PZIPCP3 - After Update of Postal Code Cond. Person 3

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with third
		   customer conducting the reportable transaction.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Cond. Person 3
	do ZIP^PROCZIP(ctr.cntrycp3, ctr.statecp3, ctr.pzipcp3)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM)

	quit

vau4 // Trigger AU_PZIPP1 - After Update of Postal Code Ben. Person 1

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with first
		   customer benefiting from the reportable transaction.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Ben. Person 1
	do ZIP^PROCZIP(ctr.cntryp1, ctr.statep1, ctr.pzipp1)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM)

	quit

vau5 // Trigger AU_PZIPP2 - After Update of Postal Code Ben. Person 2

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with second
		   customer benefiting from the reportable transaction.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Ben. Person 2
	do ZIP^PROCZIP(ctr.cntryp2, ctr.statep2, ctr.pzipp2)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM)

	quit

vau6 // Trigger AU_PZIPP3 - After Update of Postal Code Ben. Person 3

	type public RecordCTR ctr

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with third
		   customer benefiting from the reportable transaction.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Ben. Person 3
	do ZIP^PROCZIP(ctr.cntryp3, ctr.statep3, ctr.pzipp3)
	if ER.get() do Runtime.setErrMSG("CTR", 3333, RM)

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCTR ctr

	if (%O = 2) do vload

	if vobj(ctr,1).exists() do {

		if ctr.addrp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDRP1", vRM) quit
		if '("01"[ctr.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
		if ctr.cityp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITYP1", vRM) quit
		set X = ctr.cntryp1 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRYP1", vRM) quit
		if ctr.dbap1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DBAP1", vRM) quit
		set X = ctr.dcn if 'X.isNull(),X'?1.14N,X'?1"-"1.13N set vRM=$$^MSG(742,"N") do vdderr("DCN", vRM) quit
		set X = ctr.dobp1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOBP1", vRM) quit
		if ctr.fnp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FNP1", vRM) quit
		if ctr.lnp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LNP1", vRM) quit
		if ctr.mip1.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MIP1", vRM) quit
		if '("01"[ctr.MP) set vRM=$$^MSG(742,"L") do vdderr("MP", vRM) quit
		if '("01"[ctr.MT) set vRM=$$^MSG(742,"L") do vdderr("MT", vRM) quit
		set X = ctr.occp1 if 'X.isNull(),'Db.isDefined("UTBLOC","X") set vRM = $$^MSG(1485,X) do vdderr("OCCP1", vRM) quit
		if ctr.pzipp1.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIPP1", vRM) quit
		if ctr.statep1.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATEP1", vRM) quit
		if ctr.taxidp1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXIDP1", vRM) quit
	}

	if vobj(ctr,2).exists() do {

		if '("01"[ctr.ARINDP1) set vRM=$$^MSG(742,"L") do vdderr("ARINDP1", vRM) quit
		if '("01"[ctr.IDINDP1) set vRM=$$^MSG(742,"L") do vdderr("IDINDP1", vRM) quit
		if ctr.idnump1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDNUMP1", vRM) quit
		if ctr.idtypp1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDTYPP1", vRM) quit
		if ctr.issp1.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ISSP1", vRM) quit
		if '("01"[ctr.OINDP1) set vRM=$$^MSG(742,"L") do vdderr("OINDP1", vRM) quit
		if '("01"[ctr.PINDP1) set vRM=$$^MSG(742,"L") do vdderr("PINDP1", vRM) quit
	}

	if vobj(ctr,3).exists() do {

		if '("01"[ctr.ACS) set vRM=$$^MSG(742,"L") do vdderr("ACS", vRM) quit
		if ctr.addrcp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDRCP1", vRM) quit
		if ctr.citycp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITYCP1", vRM) quit
		set X = ctr.cntrycp1 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRYCP1", vRM) quit
		if '("01"[ctr.DEPOSIT) set vRM=$$^MSG(742,"L") do vdderr("DEPOSIT", vRM) quit
		set X = ctr.dobcp1 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOBCP1", vRM) quit
		if ctr.fncp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FNCP1", vRM) quit
		if ctr.lncp1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LNCP1", vRM) quit
		if ctr.micp1.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MICP1", vRM) quit
		if '("01"[ctr.MT2) set vRM=$$^MSG(742,"L") do vdderr("MT2", vRM) quit
		if '("01"[ctr.OWNB) set vRM=$$^MSG(742,"L") do vdderr("OWNB", vRM) quit
		if ctr.pzipcp1.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIPCP1", vRM) quit
		if ctr.statecp1.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATECP1", vRM) quit
		if ctr.taxidcp1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXIDCP1", vRM) quit
		if '("01"[ctr.TRANS) set vRM=$$^MSG(742,"L") do vdderr("TRANS", vRM) quit
	}

	if vobj(ctr,4).exists() do {

		if '("01"[ctr.ARINDCP1) set vRM=$$^MSG(742,"L") do vdderr("ARINDCP1", vRM) quit
		if '("01"[ctr.IDINDCP1) set vRM=$$^MSG(742,"L") do vdderr("IDINDCP1", vRM) quit
		if ctr.idnumcp1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDNUMCP1", vRM) quit
		if ctr.idtypcp1.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDTYPCP1", vRM) quit
		if ctr.isscp1.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ISSCP1", vRM) quit
		if '("01"[ctr.OINDCP1) set vRM=$$^MSG(742,"L") do vdderr("OINDCP1", vRM) quit
		if '("01"[ctr.PINDCP1) set vRM=$$^MSG(742,"L") do vdderr("PINDCP1", vRM) quit
	}

	if vobj(ctr,5).exists() do {

		if ctr.addrp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDRP2", vRM) quit
		if ctr.cityp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITYP2", vRM) quit
		set X = ctr.cntryp2 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRYP2", vRM) quit
		if ctr.dbap2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DBAP2", vRM) quit
		set X = ctr.dobp2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOBP2", vRM) quit
		if ctr.fnp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FNP2", vRM) quit
		if ctr.lnp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LNP2", vRM) quit
		if ctr.mip2.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MIP2", vRM) quit
		set X = ctr.occp2 if 'X.isNull(),'Db.isDefined("UTBLOC","X") set vRM = $$^MSG(1485,X) do vdderr("OCCP2", vRM) quit
		if ctr.pzipp2.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIPP2", vRM) quit
		if ctr.statep2.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATEP2", vRM) quit
		if ctr.taxidp2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXIDP2", vRM) quit
	}

	if vobj(ctr,6).exists() do {

		if '("01"[ctr.ARINDP2) set vRM=$$^MSG(742,"L") do vdderr("ARINDP2", vRM) quit
		if '("01"[ctr.IDINDP2) set vRM=$$^MSG(742,"L") do vdderr("IDINDP2", vRM) quit
		if ctr.idnump2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDNUMP2", vRM) quit
		if ctr.idtypp2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDTYPP2", vRM) quit
		if ctr.issp2.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ISSP2", vRM) quit
		if '("01"[ctr.OINDP2) set vRM=$$^MSG(742,"L") do vdderr("OINDP2", vRM) quit
		if '("01"[ctr.PINDP2) set vRM=$$^MSG(742,"L") do vdderr("PINDP2", vRM) quit
	}

	if vobj(ctr,7).exists() do {

		if ctr.addrcp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDRCP2", vRM) quit
		if ctr.citycp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITYCP2", vRM) quit
		set X = ctr.cntrycp2 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRYCP2", vRM) quit
		set X = ctr.dobcp2 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOBCP2", vRM) quit
		if ctr.fncp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FNCP2", vRM) quit
		if ctr.lncp2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LNCP2", vRM) quit
		if ctr.micp2.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MICP2", vRM) quit
		if ctr.pzipcp2.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIPCP2", vRM) quit
		if ctr.statecp2.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATECP2", vRM) quit
		if ctr.taxidcp2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXIDCP2", vRM) quit
	}

	if vobj(ctr,8).exists() do {

		if '("01"[ctr.ARINDCP2) set vRM=$$^MSG(742,"L") do vdderr("ARINDCP2", vRM) quit
		if '("01"[ctr.IDINDCP2) set vRM=$$^MSG(742,"L") do vdderr("IDINDCP2", vRM) quit
		if ctr.idnumcp2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDNUMCP2", vRM) quit
		if ctr.idtypcp2.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDTYPCP2", vRM) quit
		if ctr.isscp2.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ISSCP2", vRM) quit
		if '("01"[ctr.OINDCP2) set vRM=$$^MSG(742,"L") do vdderr("OINDCP2", vRM) quit
		if '("01"[ctr.PINDCP2) set vRM=$$^MSG(742,"L") do vdderr("PINDCP2", vRM) quit
	}

	if vobj(ctr,9).exists() do {

		if ctr.addrp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDRP3", vRM) quit
		if ctr.cityp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITYP3", vRM) quit
		set X = ctr.cntryp3 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRYP3", vRM) quit
		if ctr.dbap3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DBAP3", vRM) quit
		set X = ctr.dobp3 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOBP3", vRM) quit
		if ctr.fnp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FNP3", vRM) quit
		if ctr.lnp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LNP3", vRM) quit
		if ctr.mip3.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MIP3", vRM) quit
		set X = ctr.occp3 if 'X.isNull(),'Db.isDefined("UTBLOC","X") set vRM = $$^MSG(1485,X) do vdderr("OCCP3", vRM) quit
		if ctr.pzipp3.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIPP3", vRM) quit
		if ctr.statep3.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATEP3", vRM) quit
		if ctr.taxidp3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXIDP3", vRM) quit
	}

	if vobj(ctr,10).exists() do {

		if '("01"[ctr.ARINDP3) set vRM=$$^MSG(742,"L") do vdderr("ARINDP3", vRM) quit
		if '("01"[ctr.IDINDP3) set vRM=$$^MSG(742,"L") do vdderr("IDINDP3", vRM) quit
		if ctr.idnump3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDNUMP3", vRM) quit
		if ctr.idtypp3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDTYPP3", vRM) quit
		if ctr.issp3.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ISSP3", vRM) quit
		if '("01"[ctr.OINDP3) set vRM=$$^MSG(742,"L") do vdderr("OINDP3", vRM) quit
		if '("01"[ctr.PINDP3) set vRM=$$^MSG(742,"L") do vdderr("PINDP3", vRM) quit
	}

	if vobj(ctr,11).exists() do {

		if ctr.addrcp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("ADDRCP3", vRM) quit
		if ctr.citycp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CITYCP3", vRM) quit
		set X = ctr.cntrycp3 if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("CNTRYCP3", vRM) quit
		set X = ctr.dobcp3 if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DOBCP3", vRM) quit
		if ctr.fncp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("FNCP3", vRM) quit
		if ctr.lncp3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("LNCP3", vRM) quit
		if ctr.micp3.length()>2 set vRM = $$^MSG(1076,2) do vdderr("MICP3", vRM) quit
		if ctr.pzipcp3.length()>10 set vRM = $$^MSG(1076,10) do vdderr("PZIPCP3", vRM) quit
		if ctr.statecp3.length()>2 set vRM = $$^MSG(1076,2) do vdderr("STATECP3", vRM) quit
		if ctr.taxidcp3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("TAXIDCP3", vRM) quit
	}

	if vobj(ctr,12).exists() do {

		if '("01"[ctr.ARINDCP3) set vRM=$$^MSG(742,"L") do vdderr("ARINDCP3", vRM) quit
		if '("01"[ctr.IDINDCP3) set vRM=$$^MSG(742,"L") do vdderr("IDINDCP3", vRM) quit
		if ctr.idnumcp3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDNUMCP3", vRM) quit
		if ctr.idtypcp3.length()>20 set vRM = $$^MSG(1076,20) do vdderr("IDTYPCP3", vRM) quit
		if ctr.isscp3.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ISSCP3", vRM) quit
		if '("01"[ctr.OINDCP3) set vRM=$$^MSG(742,"L") do vdderr("OINDCP3", vRM) quit
		if '("01"[ctr.PINDCP3) set vRM=$$^MSG(742,"L") do vdderr("PINDCP3", vRM) quit
	}

	if vobj(ctr,13).exists() do {

		if '("01"[ctr.CE) set vRM=$$^MSG(742,"L") do vdderr("CE", vRM) quit
		set X = ctr.ci if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTR.CI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = ctr.cid1 if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID1", vRM) quit
		set X = ctr.cid2 if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID2", vRM) quit
		set X = ctr.cid3 if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID3", vRM) quit
		set X = ctr.co if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTR.CO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if ctr.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		if '("01"[ctr.DW) set vRM=$$^MSG(742,"L") do vdderr("DW", vRM) quit
		set X = ctr.efdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFDATE", vRM) quit
		set X = ctr.fci if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTR.FCI"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = ctr.fco if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"CTR.FCO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[ctr.NIC) set vRM=$$^MSG(742,"L") do vdderr("NIC", vRM) quit
		if '("01"[ctr.NIP) set vRM=$$^MSG(742,"L") do vdderr("NIP", vRM) quit
		if ctr.otrtyp.length()>20 set vRM = $$^MSG(1076,20) do vdderr("OTRTYP", vRM) quit
		if '("01"[ctr.WT) set vRM=$$^MSG(742,"L") do vdderr("WT", vRM) quit
	}

	if vobj(ctr,14).exists() do {

		if ctr.instaddr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("INSTADDR", vRM) quit
		if ctr.prepname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("PREPNAME", vRM) quit
		set X = ctr.signdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SIGNDATE", vRM) quit
	}
	set X = ctr.tjdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJDATE", vRM) quit
	set X = ctr.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
	if '("01"[ctr.NCIND) set vRM=$$^MSG(742,"L") do vdderr("NCIND", vRM) quit
	set X = ctr.id if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ID", vRM) quit
	set X = ctr.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CTR","MSG",979,"CTR."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordCTR ctr

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("TJDATE").exists() set vux("TJDATE") = vx("TJDATE")
	if vx("BRCD").exists() set vux("BRCD") = vx("BRCD")
	if vx("NCIND").exists() set vux("NCIND") = vx("NCIND")
	if vx("ID").exists() set vux("ID") = vx("ID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = ctr.tjdate_","_ctr.brcd_","_ctr.ncind_","_ctr.id_","_ctr.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = ctr.tjdate_","_ctr.brcd_","_ctr.ncind_","_ctr.id_","_ctr.seq // Copy new keys into object
	type RecordCTR vnewrec = ctr.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CTR",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCTR ctr

	if vux("TJDATE").exists() set ctr.tjdate = vux("TJDATE").piece("|",i)
	if vux("BRCD").exists() set ctr.brcd = vux("BRCD").piece("|",i)
	if vux("NCIND").exists() set ctr.ncind = vux("NCIND").piece("|",i)
	if vux("ID").exists() set ctr.id = vux("ID").piece("|",i)
	if vux("SEQ").exists() set ctr.seq = vux("SEQ").piece("|",i)
	quit
