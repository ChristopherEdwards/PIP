ZPROSAIN		/*
	 Procedure Id: ZPROSAIN
	 DESC: Custom PROSA Processing Service Hold
	 ORIG: Brandon Rickards
	 DATE: 01-Mar-2007

	 ---- Comments --------------------------------------------------------

	 ---- Revision History ------------------------------------------------

	07/06/07 - Brandon Rickards - CR 28011
		o Modified section EXCLOG to log additional data in the Z325EXC
		  log for exception reporting.

	06/23/07 - Brandon Rickards - CR 27864
		o Modified section REC6 to replace getMode with Db.isDefined
		o Added section EXCLOG to log the 325 exceptions along with
		  a description of the exception.
		o Added Authorization Number to be logged in Matched/Unmatched
		  Hold table.

	06/14/07 - Brandon Rickards - CR 27626
		o Modified section REC6 to pull the ZUTBLPROSAETC record
		  using the Card BIN number and generate Offset transaction
		  using the proper offset tran code from ZUTBLPROSAETC

	05/25/07 - Brandon Rickards - CR 27311
		o If transaction has already been processed file exception in
		  table Z325EXC for reporting.

	05/11/07 - Brandon Rickards - CR 27068
		o Converted routine ZVISAIN to PSL

			THIS ROUTINE IS TO BE COMPILED WITH TTXFMT
			DO NOT RUN THIS ROUTINE STANDALONE
	*/

RECCALL
	// Record menu section
	if RECTYPE="H" do REC1 quit
	if RECTYPE'="T",(RECTYPE'="") do REC6 quit
	if RECTYPE="T"!(RECTYPE="") do REC9 quit
	set ERR=10 do RECERR(1)
	quit

ALLREC
	// All records section
	if RECCNT=1,RECTYPE'="H" set ERR=11 do RECERR(1)
	quit

UFILINIT
	// File intialization
	type Number BLOCK,RECORD
	type String EBCASC,KEY,LABEL

	set (CARDCNT,CREDCNT,DEBCNT,DTLCNT,PAYCNT,REFCNT,SALECNT,UTILCNT,WITHCNT)=0
	set (CARDTOT,CREDTOT,DEBTOT,PAYTOT,REFTOT,SALETOT,UTILTOT,WITHTOT)=0

	type RecordUTBLTAPEFMT tapefmt

	set KEY="ACH.INC"

	set tapefmt=Db.getRecord("UTBLTAPEFMT","KEY=:KEY",1)
	if tapefmt.getMode()=0 quit
	set (RECORD,TREC)=tapefmt.rsiz
	set (BLOCK,TBLCK)=tapefmt.bsiz
	if tapefmt.lab="L" set LABEL="LABEL"
	else  set LABEL="UNLABEL"
	if tapefmt.dtype="A" set EBCASC="ASCII"
	else  set EBCASC="EBCDIC"
	set TFMT=EBCASC_"/FIXED/"_LABEL_"/RECORD="_RECORD_"/BLOCK="_BLOCK
	quit

REC1
	// File header record

	// Get date of file
	set TRANDATE=%SystemDate

	//if ORECTYPE'=1 set ERR=51 do RECERR(1)
	do INT^%DIR set %INST=%DIR

	set EFD=$$^SCAJD(TRANDATE,"YYMMDD")
	if EFD<0 set ERR=52 do RECERR(1)
	// Company ID
	set BCHID=REC.extract(33,51)

	do BCHINIT
	set BCHEFD=""
	quit

REC6
	// Detail record
	type Number AUTCODE,BIN,MATCH,QFLG
	type String CRDTYP,DESC,EXTCODE,INTRFACE,MMDD,TRCD,TRNDAT,TRTYPE,UTSO,XTSO
	type public String ETC

	type ResultSet rs1,rs2,rs3,rs4
	type RecordZMTCHHLD zmtchhld
	type RecordACN acn
	type RecordUTBLEXTTRN1 uexttrn1
	type RecordZUTBLPROSAETC prosaetc

	// Increment Counters
	set FILCNT=FILCNT+1,BCHCNT=BCHCNT+1,DTLCNT=DTLCNT+1
	set (CID,MATCH,QFLG)=0
	set (DESC,MMDD,REF,XTSO)=""

	//Card Number
	set CRDNUM=+REC.extract(5,20)

	// Authorization Number
	set AUTCODE=+REC.extract(210,215)

	//Transaction Amount
	set TAMT=+REC.extract(39,51)

	// TAMT with 2 decimal positions
	set TAMT=TAMT/100

	// Transaction Date
	set TRNDAT=REC.extract(82,87)
	set MMDD=TRNDAT.extract(3,6)

	set RFC=REC.extract(326,338)

	// Transaction Reference
	set REF=REC.extract(142,164)

	// Use Card Number to determine Account Number
	set rs1=Db.select("CID","CRDGRP","CRDNUM=:CRDNUM")
	if 'rs1.isEmpty(),rs1.next() do {
		set CID=rs1.getCol("CID")
	}

	set acn=Db.getRecord("ACN","CID=:CID",1)

	// Default TSO Hold Amount
	set UTSO("HOLDAMT")=0
	set UTSO("ACCTSTAT")=acn.stat

	set rs2=Db.select("SEQ,AMT,EXPDT,TSO","PHLD","CID=:CID AND AUTCODE=:AUTCODE")
	if 'rs2.isEmpty(),rs2.next() do {

		set UTSO("HOLDAMT")=rs2.getCol("AMT")
		set UTSO("HLDSEQ")=rs2.getCol("SEQ")
		set UTSO("REAPPLY")=0

		set XTSO=rs2.getCol("TSO")

		set (ITC13,MATCH)=1

		// Create entry in Match/Unmatched Hold table as a Match
		set zmtchhld=Class.new("RecordZMTCHHLD")
		set zmtchhld.date=%SystemDate
		set zmtchhld.crdnum=CRDNUM
		set zmtchhld.seq=Db.nextVal("ZMTCHHLD","%SystemDate,CRDNUM")
		set zmtchhld.match=MATCH
		set zmtchhld.expdt=rs2.getCol("EXPDT")
		set zmtchhld.holdamt=rs2.getCol("AMT")
		set zmtchhld.hldseq=rs2.getCol("SEQ")
		set zmtchhld.tamt=TAMT
		set zmtchhld.autcode=AUTCODE
		do zmtchhld.bypassSave()
	}
	// Create entry in Match/Unmatched Hold table as Unmatched
	if MATCH=0 do {
		set zmtchhld=Class.new("RecordZMTCHHLD")
		set zmtchhld.date=%SystemDate
		set zmtchhld.crdnum=CRDNUM
		set zmtchhld.seq=Db.nextVal("ZMTCHHLD","%SystemDate,CRDNUM")
		set zmtchhld.match=MATCH
		set zmtchhld.tamt=TAMT
		set zmtchhld.autcode=AUTCODE
		do zmtchhld.bypassSave()
	}

	do IN^UTSO(.UTSO,.TSO)

	// Required Data for Statements
	set TCMT="CRDNUM#"_CRDNUM_"~RFC#"_RFC_"~REF#"_REF

	// Debit/Credit Indicator
	set TRTYPE=REC.extract(37,38)
	if TRTYPE="01"!(TRTYPE="02") set ZDRCR="D"
	else  set ZDRCR="C"

	// Transaction=Sales
	if TRTYPE="01" do {
		set SALECNT=SALECNT+1
		set SALETOT=SALETOT+TAMT
		set BCHDR=BCHDR+TAMT,FILDR=FILDR+TAMT
	}
	// Transaction=Withdrawal
	if TRTYPE="02" do {
		set WITHCNT=WITHCNT+1
		set WITHTOT=WITHTOT+TAMT
		set BCHDR=BCHDR+TAMT,FILDR=FILDR+TAMT
	}
	// Transaction=Payment
	if TRTYPE="20" do {
		set PAYCNT=PAYCNT+1
		set PAYTOT=PAYTOT+TAMT
		set BCHCR=BCHCR+TAMT,FILCR=FILCR+TAMT
	}
	// Transaction=Refund
	if TRTYPE="21" do {
		set REFCNT=REFCNT+1
		set REFTOT=REFTOT+TAMT
		set BCHCR=BCHCR+TAMT,FILCR=FILCR+TAMT
	}

	set BIN=CRDNUM.extract(1,6)

	set rs3=Db.select("CARDTYPE","CRDTYP","BIN=:BIN")
	if 'rs3.isEmpty(),rs3.next() set CRDTYP=rs3.getCol("CARDTYPE")

	/*
	Determine if Transaction already processed
	325 file may contain 0200 and 0220 messages which were already
	processed as completions online. If [ZAUTHDTL]HLDCMP=1, the message
	was already processed and must not be posted.
	*/
	set rs4=Db.select("HLDCMP","ZAUTHDTL","CRDNUM=:CRDNUM AND AUTCODE=:AUTCODE AND LTD=:MMDD")
	if 'rs4.isEmpty() while rs4.next() do { quit:QFLG
		// Transaction has already been processed Online
		if rs4.getCol("HLDCMP")=1 do {
			set QFLG=1
			set DESC="TRAN COMPLETADA EN LINEA"
			do EXCLOG
		}
	}

	// Don't post if transaction was already processed online 
	if QFLG=1 quit

	// Loan Return
	if CRDTYP["PF",(ZDRCR="C") set DESC="DEVOLUCION PF" do EXCLOG

	// Determine Batch Transaction Codes using the Card BIN number
	set prosaetc=Db.getRecord("ZUTBLPROSAETC","BIN=:BIN")
	if MATCH do {
		// Determine external transaction code used in Online message
		do OUT^UTSO(.UTSO,.XTSO)
		set EXTCODE=UTSO("TRXCD").get()

		if EXTCODE="" quit

		set INTRFACE="ISOATM"
		set uexttrn1=Db.getRecord("UTBLEXTTRN1","INTRFACE,EXTCODE",1)

		set KEY3="*"
		if ZDRCR="D" set ETC=uexttrn1.dretc
		else  set ETC=uexttrn1.cretc
		set CRETC=prosaetc.cretc
		set DRETC=prosaetc.dretc
	}
	// No match found online
	else  do {
		set KEY3="SUSP"
		if ZDRCR="D" set ETC=prosaetc.brcretc
		else  set ETC=prosaetc.brdretc
		set CRETC=prosaetc.cretc
		set DRETC=prosaetc.dretc
		// Log exception but still process transaction
		set DESC="TRAN SOLO EN ARCHIVO"
		do EXCLOG
	}

	if ETC=""!(CRETC="")!(DRETC="") set ERR=62 do RECERR(0) quit

	type RecordTRN trndr=Db.getRecord("TRN","ETC=:DRETC")
	type RecordTRN trncr=Db.getRecord("TRN","ETC=:CRETC")

	// Cost Center
	set OCC=acn.cc

	set KEY2=BIN

	// Build OFFSET array using DEBIT/CREDIT tran codes from ZUTBLPROSAETC
	if 'OFFSET(%CRCD,KEY2,KEY3,OCC).exists() set OFFSET(%CRCD,KEY2,KEY3,OCC)=trndr.acn_"|"_DRETC_"|"_trncr.acn_"|"_CRETC

	do TTXFILE

	quit

REC9
	// File control record
	type RecordZ325DTL z325dtl=Class.new("RecordZ325DTL")

	set z325dtl.date=%SystemDate
        set z325dtl.seq=Db.nextVal("Z325DTL","%SystemDate")

	// Sales Transactions
	set z325dtl.dsalecnt=SALECNT
	set z325dtl.dsaletot=SALETOT
	set z325dtl.tsalecnt=+REC.extract(18,23)
	set z325dtl.tsaletot=(+REC.extract(25,39)/100)

	// Withdrawal Transactions
	set z325dtl.dwithcnt=WITHCNT
	set z325dtl.dwithtot=WITHTOT
	set z325dtl.twithcnt=+REC.extract(41,46)
	set z325dtl.twithtot=(+REC.extract(48,62)/100)

	// Debit Transactions
	set z325dtl.ddebcnt=DEBCNT
	set z325dtl.ddebtot=DEBTOT
	set z325dtl.tdebcnt=+REC.extract(64,69)
	set z325dtl.tdebtot=(+REC.extract(71,85)/100)

	// Card Charges Transactions
	set z325dtl.dcardcnt=CARDCNT
	set z325dtl.dcardtot=CARDTOT
	set z325dtl.tcardcnt=+REC.extract(87,92)
	set z325dtl.tcardtot=(+REC.extract(94,108)/100)

	// Utility Payments Transactions
	set z325dtl.dutilcnt=UTILCNT
	set z325dtl.dutiltot=UTILTOT
	set z325dtl.tutilcnt=+REC.extract(110,115)
	set z325dtl.tutiltot=(+REC.extract(117,131)/100)

	// Payment Transactions
	set z325dtl.dpaycnt=PAYCNT
	set z325dtl.dpaytot=PAYTOT
	set z325dtl.tpaycnt=+REC.extract(133,138)
	set z325dtl.tpaytot=(+REC.extract(140,154)/100)

	// Refund Transactions
	set z325dtl.drefcnt=REFCNT
	set z325dtl.dreftot=REFTOT
	set z325dtl.trefcnt=+REC.extract(156,161)
	set z325dtl.treftot=(+REC.extract(163,177)/100)

	// Credit Transactions
	set z325dtl.dcredcnt=CREDCNT
	set z325dtl.dcredtot=CREDTOT
	set z325dtl.tcredcnt=+REC.extract(179,184)
	set z325dtl.tcredtot=(+REC.extract(186,200)/100)
	do z325dtl.bypassSave()

	// Compare Trailer Totals with Detail Totals
	if +REC.extract(9,16)'=DTLCNT set ERR=90 do RECERR(1)
	if +REC.extract(18,23)'=SALECNT set ERR=91 do RECERR(1)
	if (+REC.extract(25,39)/100)'=SALETOT set ERR=91 do RECERR(1)
	if +REC.extract(41,46)'=WITHCNT set ERR=93 do RECERR(1)
	if (+REC.extract(48,62)/100)'=WITHTOT set ERR=93 do RECERR(1)
	if +REC.extract(133,138)'=PAYCNT set ERR=95 do RECERR(1)
	if (+REC.extract(140,154)/100)'=PAYTOT set ERR=95 do RECERR(1)
	if +REC.extract(156,161)'=REFCNT set ERR=97 do RECERR(1)
	if (+REC.extract(163,177)/100)'=REFTOT set ERR=97 do RECERR(1)

	set EOT=1
	quit

EXCLOG
	//Log exceptions for reporting purposes
	type RecordZ325EXC z325exc=Class.new("RecordZ325EXC")
	set z325exc.date=%SystemDate
	set z325exc.seq=Db.nextVal("Z325EXC","%SystemDate")
	set z325exc.crdnum=CRDNUM.get()
	set z325exc.tamt=TAMT.get()
	set z325exc.autcode=AUTCODE.get()
	set z325exc.trtype=TRTYPE.get()
	set z325exc.desc=DESC.get()

	set z325exc.ref=REF.get()
	set z325exc.trndat=TRNDAT.get()
	set z325exc.cid=CID.get()

	do z325exc.bypassSave()

	quit

RECERR(ABORT)
	// Record error
	set ABORT=ABORT.get()

	// Invalid record type code
	if ERR=10 set ERRMSG=$$^MSG("5136")
	// Missing file header record
	if ERR=11 set ERRMSG=$$^MSG("3038")
	// Invalid batch effective date
	if ERR=52 set ERRMSG=$$^MSG("5139")
	// Invalid transaction code ~p1
	if ERR=62 set ERRMSG=$$^MSG("1498",ETC)

	// Record count does not match trailer
	if ERR=90 set ERRMSG=$$^MSG("207")
	// File Item Count Does Not Match Control Record: Sales
	if ERR=91 set ERRMSG=$$^MSG("5144")_": Ventas"
	// File Item Count Does Not Match Control Record: Withdrawals
	if ERR=93 set ERRMSG=$$^MSG("5144")_": Retiros"
	// File Item Count Does Not Match Control Record: Payments
	if ERR=95 set ERRMSG=$$^MSG("5144")_": Pagos"
	// File Item Count Does Not Match Control Record: Refunds
	if ERR=97 set ERRMSG=$$^MSG("5144")_": Devolucion"

	// Process error
	if ABORT do ABORT^TPINERR quit
	do ^TPINERR
	quit

UBCHINIT	// User batch intialization
	quit

UBCHEND		// User batch end
	quit
PREOPEN
	quit 
POSTREAD	
	quit 

%STOPLOD	// Stop %ZRTNLOD from this point on down
BCHINIT		// Dummy line reference for GT.M
BCHEND		// Dummy line reference for GT.M
TTXFILE		// Dummy line reference for GT.M
 #OPTION ResultClass ON
Public String vSIG()	quit "60821^41178^Brandon Rickards^10952"	// Signature - LTD^TIME^USER^SIZE
