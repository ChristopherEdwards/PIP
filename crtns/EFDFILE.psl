EFDFILE(RecordEFD efd, String vpar, Boolean vparNorm) // EFD - Effective-Dated History File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 11/09/2007 15:13 - chenardp
	// Generated from DATA-QWIK schema in: /profile/v72framework_gtm  by: /v72framework_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (10)             09/28/2005
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type Public Number ER = 0
	type Public String RM

	type public String verrors()

	catch fERROR {
		if fERROR.type="%PSL-E-DBFILER" do {
			set ER = 1
			set RM = fERROR.description
		}
		else  throw fERROR
	}
	type String vx(), vxins()                              // audit column array
	type Number %O = efd.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(efd,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(efd,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("EFDATE").exists()!vx("BUFF").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EFD",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EFD","EFDATE = :efd.efdate and BUFF = :efd.buff and SEQ = :efd.seq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String EFDATE
	type public String BUFF
	type public String SEQ

	type RecordEFD efd = Db.getRecord("EFD","EFDATE=:EFDATE,BUFF=:BUFF,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do efd.setMode(2)

		do EFDFILE(efd,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEFD efd

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EFD","EFDATE = :efd.efdate and BUFF = :efd.buff and SEQ = :efd.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set efd.TJD = %SystemDate
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(efd)) K:$D(vobj(efd,1,1)) ^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5)) S ^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5))=vobj(efd)
		#ENDBYPASS
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
			if $D(vobj(efd,1,1)) N vS1,vS2 S vS1=0 F vS2=1:450:$L(vobj(efd,1,1)) S vS1=vS1+1,^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5),vS1)=$E(vobj(efd,1,1),vS2,vS2+449)
			#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEFD efd


	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^EFD(vobj(efd,-3),vobj(efd,-4),vobj(efd,-5))
	#ENDBYPASS
	quit


vinit // Initialize default values

	type public RecordEFD efd

	// Type local variables for access keys for defaults
	type public String EFDATE
	type public String BUFF
	type public String SEQ

	if efd.curdate.isNull() set efd.curdate = +$H          // curdate
	if efd.curtime.isNull() set efd.curtime = $P($H,",",2) // curtime
	type public String TLO
	if efd.tlo.isNull() set efd.tlo = TLO                  // tlo
	type public String %UID
	if efd.uid.isNull() set efd.uid = %UID                 // uid
	quit


vreqn // Validate required data items

	type public RecordEFD efd

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEFD efd

	if efd.efdate.isNull() do vreqerr("EFDATE") quit
	if efd.buff.isNull() do vreqerr("BUFF") quit
	if efd.seq.isNull() do vreqerr("SEQ") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFD","MSG",1767,"EFD."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEFD efd

	set X = efd.efdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFDATE", vRM) quit
	set X = efd.buff if 'X.isNull(),X'?1.16N,X'?1"-"1.15N set vRM=$$^MSG(742,"N") do vdderr("BUFF", vRM) quit
	set X = efd.seq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit
	if efd.akey.length()>20 set vRM = $$^MSG(1076,20) do vdderr("AKEY", vRM) quit
	set X = efd.curdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CURDATE", vRM) quit
	set X = efd.curtime if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("CURTIME", vRM) quit
	if efd.table.length()>12 set vRM = $$^MSG(1076,12) do vdderr("TABLE", vRM) quit
	set X = efd.tjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TJD", vRM) quit
	if efd.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if efd.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFD","MSG",979,"EFD."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordEFD efd

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("EFDATE").exists() set vux("EFDATE") = vx("EFDATE")
	if vx("BUFF").exists() set vux("BUFF") = vx("BUFF")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = efd.efdate_","_efd.buff_","_efd.seq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = efd.efdate_","_efd.buff_","_efd.seq // Copy new keys into object
	type RecordEFD vnewrec = efd.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EFD",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordEFD efd

	if vux("EFDATE").exists() set efd.efdate = vux("EFDATE").piece("|",i)
	if vux("BUFF").exists() set efd.buff = vux("BUFF").piece("|",i)
	if vux("SEQ").exists() set efd.seq = vux("SEQ").piece("|",i)
	quit
