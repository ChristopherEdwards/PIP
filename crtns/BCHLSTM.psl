BCHLSTM //Batch BCHLETSTM - Combined Statement Extract Records
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLETSTM Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLETSTM")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLETSTM") quit
 do JOBMGR^BCHUTL(%FN,"BCHLETSTM",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLETSTM")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(ACN,STMGRP) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLETSTM","*","",ACN.get()_","_STMGRP.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLETSTM",ACN.get()_","_STMGRP.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLETSTM",ACN.get()_","_STMGRP.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,ACN,STMGRP)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLETSTM","*","",ACN.get()_","_STMGRP.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLETSTM",ACN.get()_","_STMGRP.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,ACN,STMGRP) //
	type public Date EJD // EJD is set in the scheduler and passed to the thread process.
	type public Number UID
	type public String UCLS
				
	type Date EFD=EJD
	type Number CID
	type String CO

	set CID=""
	type ResultSet rs=Db.select("CID","CMBSTM","ACN=:ACN AND STMGRP=:STMGRP","CID")
	if rs.next() set CID=rs.getCol("CID")
		
	set CO=$$GETCO^LETTERU(ACN,CID)
	set UID=%UserID
	set UCLS=%UserClass

	//do STM^LETTRIG
	do CMBGRP^LETTRIG  //CR27303
	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,ACN,STMGRP
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set ACN=vRECORD.piece($C(9),1)
 set STMGRP=vRECORD.piece($C(9),2)
 do vPROC(ACN,STMGRP)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,ACN,STMGRP
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32000 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+17>32000 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Number BCHJOB  //CR27303
	type public Date EJD		//CR27303
        type String %READ,%TAB,VFMQ
        
	set %TAB("EJD")=".EJD5"
        set %READ="@@%FN/REV/CEN,,EJD"
        do ^UTLREAD if VFMQ="Q" set vEXIT=1 quit
	if EJD.isNull() set EJD=%SystemDate
	set BCHJOB=%ProcessID
	
	do Db.fastDelete("TMPRPT3","PID=:BCHJOB")

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("ACN,STMGRP","CMBGRP","SNDT=:EJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public String SKPARRAY()
	
	type public Boolean STMTINTRTC
	type public Date LETTJD  //CR27303
	   
        set LETTJD=%SystemDate
        
	//haileyk - 4/6/01
        type ResultSet rs2=Db.select("PTYPE","UTBLSKIPSTM")
        if 'rs2.isEmpty() while rs2.next() set SKPARRAY(rs2.getCol(1))=""

	set STMTINTRTC=CUVAR.stmtintrtc
 
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public Number BCHJOB
	type public String SKPARRAY()
	
	type Date Dt,DAT
	type String ACCTNUM,CHKNUM,CHKAMT,REC,RT,STMFILE

	do OPNFILE^STMREG
	set RT=CUVAR.rt

	type ResultSet rs=Db.select("KEY2,KEY3,DATA","TMPRPT3","PID=:BCHJOB")
	while rs.next() do {
		set ACCTNUM=rs.getCol("KEY2")
		set CHKNUM=rs.getCol("KEY3")
		set REC=rs.getCol("DATA")
		set CHKAMT=REC.piece("|",1)
		set DAT=REC.piece("|",2)
		set Dt=DAT.toString("YEARMMDD")
		use STMFILE write RT_","_Dt_","_ACCTNUM_","_CHKNUM_","_CHKAMT,! use 0
		}

	use STMFILE write !!

	do CLSFILE^STMREG

	do Db.fastDelete("TMPRPT3","PID=:BCHJOB")

	//haileyk - 4/6/01 
	kill SKPARRAY

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
