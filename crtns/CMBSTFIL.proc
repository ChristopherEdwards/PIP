CMBSTFIL(RecordCMBSTM cmbstm, String vpar, Boolean vparNorm) // CMBSTM - Combined Statement Maintenance Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:22 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (6)              01/24/2005
	// Trigger Definition (8)                      07/19/2005
	// Journal File Definition (6)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = cmbstm.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(cmbstm,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(cmbstm,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = cmbstm.acn
	type String STMGRP = cmbstm.stmgrp
	type String CID = cmbstm.cid

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("STMGRP").exists()!vx("CID").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("CMBSTM",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("CMBSTM","ACN = :cmbstm.acn and STMGRP = :cmbstm.stmgrp and CID = :cmbstm.cid") // No record exists
		if vpar["/TRIGBEF/" do VBD                            // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String STMGRP
	type public String CID

	type RecordCMBSTM cmbstm = Db.getRecord("CMBSTM","ACN=:ACN,STMGRP=:STMGRP,CID=:CID")
	if (%ProcessMode = 2) do {
		do cmbstm.setMode(2)

		do CMBSTFIL(cmbstm,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordCMBSTM cmbstm

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("CMBSTM","ACN = :cmbstm.acn and STMGRP = :cmbstm.stmgrp and CID = :cmbstm.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(cmbstm))  S ^CIF(vobj(cmbstm,-3),110,vobj(cmbstm,-4),vobj(cmbstm,-5))=vobj(cmbstm)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.cmbstm)              // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordCMBSTM cmbstm

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/JOURNAL/" do VJOURNAL(.cmbstm)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^CIF(vobj(cmbstm,-3),110,vobj(cmbstm,-4),vobj(cmbstm,-5)) // Delete Record
	quit


vinit // Initialize default values

	type public RecordCMBSTM cmbstm

	// Type local variables for access keys for defaults
	type public String ACN
	type public String STMGRP
	type public String CID

	if cmbstm.sumry.isNull() set cmbstm.sumry = 0          // sumry
	quit


vreqn // Validate required data items

	type public RecordCMBSTM cmbstm

	if cmbstm.sumry.isNull() do vreqerr("SUMRY") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordCMBSTM cmbstm

	if cmbstm.acn.isNull() do vreqerr("ACN") quit
	if cmbstm.stmgrp.isNull() do vreqerr("STMGRP") quit
	if cmbstm.cid.isNull() do vreqerr("CID") quit

		if vx("SUMRY").exists(),cmbstm.sumry.isNull() do vreqerr("SUMRY") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CMBSTM","MSG",1767,"CMBSTM."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordCMBSTM cmbstm
	if 'cmbstm.stmgrp.isNull() set vfkey("^CIF("_""""_cmbstm.acn_""""_","_110_","_""""_cmbstm.stmgrp_""""_")")="CMBSTM(ACN,STMGRP) -> CMBGRP"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordCMBSTM cmbstm
	type public Number %O
	type String vERRMSG

	if 'cmbstm.acn.isNull(),'cmbstm.stmgrp.isNull() if 'Db.isDefined("CMBGRP",":cmbstm.acn,:cmbstm.stmgrp") set vERRMSG = $$^MSG(8563,"CMBSTM(ACN,STMGRP) -> CMBGRP") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("SUMRY").exists() do vau3 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBD //
	type public Number ER = 0
	type public String vx(),RM
	do vbd1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordCMBSTM cmbstm
	if vx("").order().isNull() do AUDIT^UCUTILN(cmbstm,.vx(),1,"|") quit
	if vx("SUMRY").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(cmbstm,.vx(),1,"|")
	quit


vad1 // Trigger AFTER_DELETE - CMBSTM After Delete Trigger

	type public RecordCMBSTM cmbstm
	/*
	----Revision History---------------------------------------------------
	09/23/99 - CARROLLJ - 33890
		   Convert to PSL.
	*/

	// Delete ^ACN(CID,110,ACN)
	if 'cmbstm.sumry do Db.delete("CMBCID","CID=:CID AND ACN=:ACN")
	quit

vai1 // Trigger AFTER_INSERT - CMBSTM After Insert Trigger

	type public RecordCMBSTM cmbstm
	/*
	Revision History

	05/22/02 - Allan Mattson - 49302
		   Modified to update CMBGRP.SNDT if it is in the past.  This
		   change is necessary as this column in no longer updated
		   by QUE029 (Advance Next Statement Date) if there are no
		   accounts linked to the statement group.
	
	05/22/00 - KLINEB - 40186
		   Modified %ProcessMode check to correct a problem in which
		   the do was not being executed when %Processmode was not
		   two.

	01/11/00 - KLINEB - 36429
	           Roll Forward changes from V61 to update SFRE in DEP
	           if SFRE does not default from the product type.
	           This is necessary as SFRE is no longer computed due
	           to the statment frequency project.  
	
	12/20/99 - SHANL - 31126
		Fixed error when called from dep insert trigger.

	*/            	
	
	if %ProcessMode'=2 do {

		type RecordCMBGRP cmbgrp
		set cmbgrp=Db.getRecord("CMBGRP","ACN=:ACN,STMGRP=:STMGRP")

		if cmbgrp.sndt<%SystemDate do {
			new NJD

			set NJD=$$NJD^UFRE(%SystemDate,cmbgrp.sfre) quit:ER
			set cmbgrp.sndt=NJD
			do cmbgrp.save()
			}

		if cmbstm.sumry quit

		type RecordCMBCID cmbcid
		set cmbcid=Class.new("RecordCMBCID")

		set cmbcid.cid=CID
		set cmbcid.acn=ACN
		set cmbcid.stmgrp=STMGRP
		do cmbcid.save()

		type RecordACN acn
		set acn=Db.getRecord("ACN",":CID")

		set acn.sfre=cmbgrp.sfre
		do acn.save()
		}
	quit

vau1 // Trigger AU_SACN - After update of ACN

	type public RecordCMBSTM cmbstm
	/* ------- Revision History ----------------------------------

	09/10/01 - APPLEYARDM - 45929
		   Deleted code from this section. The purpose of this code 
		   was to update CMBCID when the primary key ACN was modified 
		   in CMBSTM. The original code setting OLDACN did not 
		   function as intended - this value was lost after execution 
		   of the before update trigger, and the update would fail. 
		   This update will now be handled via a new foreign key 
		   definition relating CMBCID to CMBSTM.

	*/

	quit
	

vau2 // Trigger AU_STMGRP - After Update Statement Group

	type public RecordCMBSTM cmbstm
	/*
								05/22/02 - Allan Mattson - 49302
																			Modified to update CMBGRP.SNDT if it is in the past.  This
																			change is necessary as this column in no longer updated
																			by QUE029 (Advance Next Statement Date) if there are no
																			accounts linked to the statement group.
	*/

	type RecordCMBGRP cmbgrp
	set cmbgrp=Db.getRecord("CMBGRP","ACN=:ACN,STMGRP=:STMGRP")

	if cmbgrp.sndt<%SystemDate do {
		new NJD
	
		set NJD=$$NJD^UFRE(%SystemDate,cmbgrp.sfre) quit:ER
		set cmbgrp.sndt=NJD
		do cmbgrp.save()
		}

	if cmbstm.sumry quit 
	
	type RecordCMBCID cmbcid
	set cmbcid=Db.getRecord("CMBCID","CID=:CID,ACN=:ACN")

	set cmbcid.stmgrp=STMGRP
	do cmbcid.save()
	quit

vau3 // Trigger AU_SUMRY - After Update Summary Account

	type public RecordCMBSTM cmbstm
	new cmbcid
	type RecordCMBCID cmbcid=Db.getRecord("CMBCID","CID,ACN")
	
	if 'cmbstm.sumry do {
		set cmbcid.stmgrp=cmbstm.stmgrp
		do Db.insert("CMBCID","CID,ACN",":CID,:ACN")
		}
	// Delete CMBCID
	else  do Db.delete("CMBCID","CID=:CID AND ACN=:ACN")
	quit

vbd1 // Trigger BEFORE_DELETE - CMBSTM Before Delete Trigger

	type public RecordCMBSTM cmbstm
	/*
	----------------- Revision History ------------------------------------
	07/19/05 - RussellDS - CR16614
		   Remove reference to vpar("SYSTEM", replace with vpar variable.
		   
		   Cleaned up PSL
		   
		   Remove old revision history.
	*/
	
	type public Boolean ER
	type public String vpar

	type RecordACN acn = Db.getRecord("ACN","CID")
	
	if (cmbstm.stmgrp.oldVal = cmbstm.stmgrp),'vpar.isLike("%/FRMFILER/%") do { quit:ER 
		// Cannot delete primary CIF
		if 'cmbstm.sumry, cmbstm.acn = acn.acn, acn.smet do Runtime.setErrMSG("CMBSTM", 437) quit:ER 
	}

	quit
	

vbi1 // Trigger BEFORE_INSERT - Before Insert CMBSTM

	type public RecordCMBSTM cmbstm
	new cmbgrp
	type RecordCMBGRP cmbgrp=Db.getRecord("CMBGRP","ACN,STMGRP")
	
	if 'cmbstm.sumry do { quit:ER 
		// Account p1 is not a statement account - Must be statement if detail
		new SMET,XCID,CLS
		set XCID=cmbstm.cid
		set CLS=Db.getOneRow("CLS","ACN","XCID")
		if CLS="D" set SMET=Db.getOneRow("SMET","DEP","XCID")
		else  set SMET=Db.getOneRow("SMET","LN","XCID")
		if SMET'=1 do Runtime.setErrMSG("CMBSTM",116,XCID) quit:ER 
		// An account detail entry already exist for CIF
		if Db.isDefined("CMBCID","cmbstm.cid,cmbstm.acn") do Runtime.setErrMSG("CMBSTM",285,cmbstm.acn) quit:ER 
		}
	// Restricted group. No summary entries allowed.
	else  if cmbgrp.rest do Runtime.setErrMSG("CMBSTM",2405) quit:ER 
	;
	if 'cmbgrp.restavl do Runtime.setErrMSG("CMBSTM",2406) quit:ER 
	quit 

vbu1 // Trigger BU_SUMRY - Before Update Summary Account

	type public RecordCMBSTM cmbstm
	do cmbstm.setAuditFlag(1)
	new cmbgrp
	type RecordCMBGRP cmbgrp=Db.getRecord("CMBGRP","ACN,STMGRP")
	
	if 'cmbstm.sumry do { quit:ER 
		// Account p1 is not a statement account - Must be statement if detail
		new XCID,XCLS,SMET
		set XCID=cmbstm.cid
		set XCLS=Db.getOneRow("CLS","ACN","XCID")
		if XCLS="D" set SMET=Db.getOneRow("SMET","DEP","XCID")
		else  set SMET=Db.getOneRow("SMET","LN","XCID")
		if SMET'=1 do Runtime.setErrMSG("CMBSTM",116,XCID) quit:ER 
		// An account detail entry already exist for CIF
		if Db.isDefined("CMBCID","cmbstm.cid,cmbstm.acn") do Runtime.setErrMSG("CMBSTM",285,cmbstm.acn) quit:ER 
		}
	// Restricted group. No summary entries allowed.
	else  if cmbgrp.rest do Runtime.setErrMSG("CMBSTM",2405) quit:ER 
	
	if 'cmbgrp.restavl do Runtime.setErrMSG("CMBSTM",2406) quit:ER 
	quit 


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordCMBSTM cmbstm

	set X = cmbstm.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
	set X = cmbstm.stmgrp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("STMGRP", vRM) quit
	set X = cmbstm.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = cmbstm.sltd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SLTD", vRM) quit
	set X = cmbstm.stpr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STPR", vRM) quit
	if '("01"[cmbstm.SUMRY) set vRM=$$^MSG(742,"L") do vdderr("SUMRY", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("CMBSTM","MSG",979,"CMBSTM."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordCMBSTM cmbstm)	//CMBSTM Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.cmbstm)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=CMBSTM_D
			do vj3(.cmbstm)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=CMBSTM_SUM_D
			}
		else  if TSRC="O" do {
			do vj1(.cmbstm)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=CMBSTM_D
			do vj3(.cmbstm)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=CMBSTM_SUM_D
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.cmbstm)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=CMBSTM_I
			do vj4(.cmbstm)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=CMBSTM_SUM_I
			}
		else  if TSRC="O" do {
			do vj2(.cmbstm)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CMBSTM_I
			do vj4(.cmbstm)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=CMBSTM_SUM_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj5(.cmbstm)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=CMBSTM_SUM_U
			do vj6(.cmbstm)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=CMBSTM_U
			}
		else  if TSRC="O" do {
			do vj5(.cmbstm)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CMBSTM_SUM_U
			do vj6(.cmbstm)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=CMBSTM_U
			}
		}

	quit


vj1(RecordCMBSTM cmbstm)	// CMBSTM_D  Table HIST  Hist Journal Delete Statement 

	if +cmbstm.sumry'=1
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cmbstm.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(643,"[CMBSTM]STMGRP:"_cmbstm.stmgrp_":",cmbstm.acn)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordCMBSTM cmbstm)	// CMBSTM_I  Table HIST  Hist Journal Insert Statement 

	if +cmbstm.sumry'=1
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cmbstm.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(5564,"[CMBSTM]STMGRP::"_cmbstm.stmgrp,cmbstm.acn)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordCMBSTM cmbstm)	// CMBSTM_SUM_D  Table HIST  Hist Journal Delete Summary Statement 

	if +cmbstm.sumry=1
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cmbstm.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(627,"[CMBSTM]STMGRP:"_cmbstm.stmgrp_":",cmbstm.acn)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordCMBSTM cmbstm)	// CMBSTM_SUM_I  Table HIST  Hist Journal Insert Summary Statement 

	if +cmbstm.sumry=1
	else  quit

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=cmbstm.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(5563,"[CMBSTM]STMGRP::"_cmbstm.stmgrp,cmbstm.acn)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj5(RecordCMBSTM cmbstm)	// CMBSTM_SUM_U  Table HIST  Hist Journal Update Summary Statement

	if +cmbstm.sumry=1
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=cmbstm.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$^MSG(5561,$$TCMTFM^ACNFUNCS(cmbstm.acn_","_cmbstm.stmgrp_","_cmbstm.cid,"CMBSTM",vdi,vold,vnew,,,vfmtable),cmbstm.acn)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj6(RecordCMBSTM cmbstm)	// CMBSTM_U  Table HIST  Hist Journal Update Statement

	if +cmbstm.sumry'=1
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=cmbstm.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$^MSG(5562,$$TCMTFM^ACNFUNCS(cmbstm.acn_","_cmbstm.stmgrp_","_cmbstm.cid,"CMBSTM",vdi,vold,vnew,,,vfmtable),cmbstm.acn)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordCMBSTM cmbstm

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("STMGRP").exists() set vux("STMGRP") = vx("STMGRP")
	if vx("CID").exists() set vux("CID") = vx("CID")
	do vkey(1) set voldkey = cmbstm.acn_","_cmbstm.stmgrp_","_cmbstm.cid // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = cmbstm.acn_","_cmbstm.stmgrp_","_cmbstm.cid // Copy new keys into object
	type RecordCMBSTM vnewrec = cmbstm.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("CMBSTM",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do {
		do VAU
		if vx("ACN").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
		if vx("STMGRP").exists() do vau2 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	}

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordCMBSTM cmbstm

	if vux("ACN").exists() set cmbstm.acn = vux("ACN").piece("|",i)
	if vux("STMGRP").exists() set cmbstm.stmgrp = vux("STMGRP").piece("|",i)
	if vux("CID").exists() set cmbstm.cid = vux("CID").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordCMBSTM cmbstm
	type public String vpar

	do Db.delete("CMBCID","ACN=:cmbstm.acn AND STMGRP=:cmbstm.stmgrp AND CID=:cmbstm.cid",vpar) // Cascade delete

	quit
