BCHARSED //Batch BCHARSEOD - Account Reconciliation End-of-Day
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHARSEOD Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHARSEOD")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHARSEOD") quit
 do JOBMGR^BCHUTL(%FN,"BCHARSEOD",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHARSEOD")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHARSEOD","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHARSEOD",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHARSEOD",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHARSEOD","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHARSEOD",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
 new arscid,ET,FRE,JD,LDT,NDT,%ZTSEQ
	
 type RecordARSCID arscid=Db.getRecord("ARSCID","CID") if CID="" quit
 if arscid.arsndt+arscid.arsofst'=%SystemDate quit
 set ARSNDT=arscid.arsndt

 new ars,arsb,oldarsb
 type RecordARSB oldarsb
 if 'Db.isDefined("ARSB","CID,ARSNDT") do { 
	set oldarsb=Class.new("RecordARSB")
	set oldarsb.cid=CID
	set oldarsb.arsndt=ARSNDT
	}	
 else  set oldarsb=Db.getRecord("ARSB","CID,ARSNDT") 

 type RecordARSB arsb=Class.new("RecordARSB")
 set arsb.cid=CID

 do HIST(.arscid)
 do CKSOUT(.arscid,.arsb)
 do FILE(.oldarsb,.arscid,.arsb)
 quit
	
HIST(RecordARSCID arscid) //
 /* 
 Collate through history to get the total credits and total non-check
 debits for the period LDT through NDT, and also the balance as of NDT. 
 This will be filed in ^ARSB for reporting purposes. 
 */
	
 type RecordDEP dep
 set dep=Db.getRecord("DEP","CID")
	
 set seq="",tot(0)=0,tot(1)=0,totdr=0 

 set LDT=arscid.arsldt
 type ResultSet hist=Db.select("TJD,ITC,TAMT,TSO","HIST","CID=:CID and TJD<=:LDT")
 while hist.next() do {
	set date=hist.getCol("TJD")
	set DC=hist.getCol("ITC")
	// After end date
	if date>arscid.arsndt quit
	
	// Debit Credit Indicator  0=Decrease, 1=Increase
	set DC=$$DC^UTRB(DC.extract(),dep.trb) if DC=""!("01"'[DC) quit
	set tamt=hist.getCol("TAMT") if tamt["#" set tamt=tamt.piece("#",2)
	if 'tamt quit
	
	if 'DC do { 
	
		if tamt>0 set totdr=totdr+tamt
		if tamt<0 do {
	
			if hist.getCol("ITC").extract(12) set tot(1)=tot(1)-tamt 
			if hist.getCol("ITC").extract(6) set totdr=totdr+tamt
	
			}
		set CK=$$FIELD^UTSO(hist.getCol("TSO"),"CK")
	                
		}
	if 'DC,CK.get()'="" quit
	set tot(DC)=tot(DC).get()+tamt
 }	
 quit

CKSOUT(RecordARSCID arscid,RecordARSB arsb) //
 
 /* 
 Start with the current outstanding amount and collate through the
 check register (ARS). Any checks paid or void in the next period
 (NDT) are added back in, and any checks issued in the next period are
 subtracted out. This should leave the outstanding amount (OUT) as of
 NDT. This will be filed in ^ARSB for reporting. Also, all checks issued, 
 paid, and paid but not issued are totaled. 
 */
	
 type Boolean nextpd
 type Number IAMT,DAMT,PAMT,PNAMT,RAMT,RPAMT,VAMT
 
 set (IAMT,DAMT,PAMT,PNAMT,RAMT,RPAMT,VAMT)=0

 type ResultSet rs=Db.select("CKNO","ARS","CID=:CID")
 if rs.isEmpty() quit
 while rs.next() do {
	set CKNO=rs.getCol("CKNO")
	type RecordARS ars=Db.getRecord("ARS","CID=:CID,CKNO=:CKNO")

	// Issued Next Period
	if ((ars.iactdt>arscid.arsndt)&(ars.opt="I"))!('ars.iactdt) set arscid.cksout=arscid.cksout-ars.iamt,nextpd=1
	// Issued in Period
	else  if (ars.iactdt>arscid.arsldt)&(ars.opt="I") do {
		set IAMT=IAMT+ars.iamt,nextpd=0
		set arsb.issip=IAMT
		}
	
	// Paid Next Period  
	if ars.pactdt>arscid.arsndt set arscid.cksout=arscid.cksout+ars.pamt
	// Paid in Period
	else  if (ars.pactdt>arscid.arsldt) do {
		if (nextpd.get()="")!(nextpd=0) do {
			if ars.pamt.isNull() set PAMT=PAMT+ars.iamt
			else  set PAMT=PAMT+ars.pamt
			set arsb.pdip=PAMT
			}
		else  do {
			if ars.pamt.isNull() set PNAMT=PNAMT+ars.iamt
			else  set PNAMT=PNAMT+ars.pamt 
			set arsb.pniip=PNAMT
			}
 		}	
	
	// Void Next Period
	if ars.vactdt>arscid.arsndt set arscid.cksout=arscid.cksout+ars.iamt
	// Void in Period
	else  if (ars.vactdt>arscid.arsldt) do {
		set VAMT=VAMT+ars.iamt
		set arsb.vdip=VAMT
		}
	
	// Deleted Next Period 
	if ars.ddt>arscid.arsndt set arscid.cksout=arscid.cksout+ars.iamt
	// Deleted in Period
	else  if (ars.ddt>arscid.arsldt) do {
		set DAMT=DAMT+ars.iamt
		set arsb.delip=DAMT
		}
	
	// Reversal Next Period
	if ars.ractdt>arscid.arsndt set arscid.cksout=arscid.cksout+ars.iamt
	else  do {
	
		// Not Reversed
		if (ars.ractdt="") quit
    	
		// Reversed Prior Period
		if ars.ractdt'>arscid.arsldt quit
	
		// Reversed in Period
		if (ars.ractdt>arscid.arsldt) do {
			set RAMT=RAMT+ars.iamt
			set arsb.revip=RAMT
			}
			
		// Paid in Period
		if (ars.rpdt>arscid.arsldt) do {
			set RPAMT=RPAMT+ars.iamt
			set arsb.pdip=RPAMT
			}
		}
	}
 quit
 

FILE(RecordARSB oldarsb,RecordARSCID arscid,RecordARSB arsb) //

 // Bump Dates, File Balances

 set njd=$$NJD^UFRE(arscid.arsndt,arscid.arsfre)
 set arscid.arspdt=arscid.arsldt
 set arscid.arsldt=arscid.arsndt
 set arscid.arsndt=njd 
 set arsb.balp=oldarsb.balp+tot(1)-totdr
 set arsb.arsndt=arscid.arsldt			//2/16/99 mas
 set arsb.totdr=totdr
 set arsb.totcr=tot(1)
 set arsb.cksoutp=arscid.cksout

 do arsb.bypassSave()
 do arscid.bypassSave()

 quit
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","ARSCID","ARSCID.CID=CID")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
