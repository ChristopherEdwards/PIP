R01S702	// YER435 - NR4 Earnings Year-End Forms
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:04 - joynerd

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String acn
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String REPDI=CUVAR.spldir_"YER435-"_$$DAT^%ZM(%CurrentDate,"MMDD")_".PBS"
	type String VIN2="ALL"
	type Number ZIPYADJ

	set RID="YER435"
	set RN="NR4 Earnings Year-End Forms"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("REPDI")="|40|||[DEVICE]||||T|Report Device|||||"
	set %TAB("VIN2")="|255||[NR4EINF]ACN|[NR4EINF]ACN:DISTINCT:NOVAL||set acn=X D EXT^DBSQRY||T|Customer Number|||||"
	set %TAB("ZIPYADJ")="|1|||[STBLIPYADJ]||||N|Change Int Pr Yr Adjustment Option|||||"

	set %READ="IO/REQ,REPDI#1,VIN2#0,ZIPYADJ#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=37
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String acn
	type public Number ZIPYADJ
	type public String REPDI,VIN2
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %BLK,%NOCLOSE,%NOOPEN,%TIM,A(),ACN,AD(),B12,B22,CAD(),CCODE,CNAME,CONAM,DATA(),DUMMY,ET,MYQRY,NR4REC,PGM,RID,RN,SIO,START,STOP,TAXID,TOTGI,TOTIS,TOTNR,VL,VLOF,VRF(),VSTATS(),YEAR,YEAR2,vCOL,vHDG,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,vovc1,vovc2,vovc3,vp4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="YER435",RN="NR4 Earnings Year-End Forms"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","YER435","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=99999999			// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=81")
		write $$CLEARXY^%TRMVT
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN2.get()="" set VIN2="ALL"
		if VIN2'="ALL" set DQQRY(SEQ)="[NR4EINF]ACN "_VIN2,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("NR4EINF,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}


	// Alignment pattern
	if cuvar.alcount,IOTYP'="TRM",'VRWOPT("NOALIGN").get() do ^DBSRWALN(RID,IO,cuvar.alcount)

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT=""
	set VSELECT=VSELECT_"NR4EINF.ACN,NR4EINF.BOO,NR4EINF.CID,CIF.TAXID,CIF."
	set VSELECT=VSELECT_"NRCNTRY,CIF.MAD1,CIF.MAD2,CIF.MAD3,CIF.MCITY,CIF.M"
	set VSELECT=VSELECT_"STATE,CIF.MZIP,CIF.XNAME,CIF.PCNTRY,CIF.PERS,CIF.B"
	set VSELECT=VSELECT_"OO,NR4EINF.NRI,NR4EINF.INCCD,NR4EINF.GIC,NR4EINF.C"
	set VSELECT=VSELECT_"FWA,NR4EINF.CNTW"

	#ACCEPT DATE=08/30/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"NR4EINF,CIF",VWHERE,"NR4EINF.ACN,NR4EINF.BOO,NR4EINF.CID","","DQMODE=1/PROTECTION=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=rwrs.getRowProt()		// Data item protection
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3
	set vovc1="",vovc2="",vovc3=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3
	set vovc1=vc1,vovc2=vc2,vovc3=vc3
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vp4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc20
	set vc1=V.piece($C(9),1)			// NR4EINF.ACN
	set vc2=V.piece($C(9),2)			// NR4EINF.BOO
	set vc3=V.piece($C(9),3)			// NR4EINF.CID
	set vc4=V.piece($C(9),4)			// CIF.TAXID
	set vp4=VI.extract(4)				// Protection indicator
	set vc5=V.piece($C(9),5)			// CIF.NRCNTRY
	set vc6=V.piece($C(9),6)			// CIF.MAD1
	set vc7=V.piece($C(9),7)			// CIF.MAD2
	set vc8=V.piece($C(9),8)			// CIF.MAD3
	set vc9=V.piece($C(9),9)			// CIF.MCITY
	set vc10=V.piece($C(9),10)			// CIF.MSTATE
	set vc11=V.piece($C(9),11)			// CIF.MZIP
	set vc12=V.piece($C(9),12)			// CIF.XNAME
	set vc13=V.piece($C(9),13)			// CIF.PCNTRY
	set vc14=V.piece($C(9),14)			// CIF.PERS
	set vc15=V.piece($C(9),15)			// CIF.BOO
	set vc16=V.piece($C(9),16)			// NR4EINF.NRI
	set vc17=V.piece($C(9),17)			// NR4EINF.INCCD
	set vc18=V.piece($C(9),18)			// NR4EINF.GIC
	set vc19=V.piece($C(9),19)			// NR4EINF.CFWA
	set vc20=V.piece($C(9),20)			// NR4EINF.CNTW
	quit

	// User-defined pre/post-processor code

VPREAQ	// Pre-processor (after query)

 type public Number START,STOP,TOTGI,TOTIS,TOTNR
 type public String acn,AD(),A(),CAD(),DATA(),ET,MYQRY,YEAR,YEAR2,ZIPYADJ

 // If TERMINATE PRIOR YEAR UPDATE is on, then set [CUVAR]IPYADJ to off.
 if ZIPYADJ do {
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set cuvar.ipyadj=ZIPYADJ
	do cuvar.save()	
 	set ET="[CUVAR]IPYADJ (Prior Yr Int Update Option) Modified"
 	do LOG^UTLEXC(%RoutineName,"*","NR4 Earnings Yearend Forms|1","","",ET,"")
 	}
 set MYQRY=acn.translate(",","!")

 if acn'="ALL" do {
 	type Number I,EX,X
 	set EX=""
	set START=MYQRY.piece("!",1)-0.0001
	for I=1:1 do { quit:EX=1
		set X=MYQRY.piece("!",I)
		if X'="" set A(1,I)=X
		else  set EX=1
		}
	set STOP=A(1,A(1,"").order(-1))+0.0001
 	}
 else  set START=0,STOP=10000000000000000000

 set (TOTGI,TOTIS,TOTNR)=0
 do NR4E^NR4YER
 set YEAR2=YEAR.extract(3,4)
	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=acn

 do Db.fastDelete("NR4EINF")
 do Db.fastDelete("NR4SUM","PID=%ProcessID")
 do Db.fastDelete("TMPRPT2","PID=%ProcessID")
	quit

VRPOST	// Report post-processor

 type public String %BLK,IO,IOPAR,IOTYP,MYQRY,%NOOPEN,%NOCLOSE,PGM,REPDI,RID,SIO
 type public Number vcrt
 type public Boolean VFMQ
 type Number PN

 do CLOSE^SCAIO 
 set SIO=IO
 set IO=REPDI
 set %NOCLOSE=""
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set IOPAR="WRITE/APPEND"
 set IOTYP="RMS"
 set RID="YER441" do ^URID
 if PGM.length() set %BLK="/,"_REPDI do V0^@PGM

 set (%NOOPEN,%NOCLOSE)=""
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set RID="YER436" do ^URID
 if PGM.length() set %BLK="/,"_REPDI do V0^@PGM

 
 set %NOOPEN=""
 if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
 set RID="YER442" do ^URID
 if PGM.length() do V0^@PGM
 do CLOSE^SCAIO

 set IO=SIO set %NOCLOSE=""

 do Db.fastDelete("NR4SUM","PID=%ProcessID")
 do Db.fastDelete("TMPRPT2","PID=%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb2!(+vovc1'=+vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(+vovc2'=+vc2) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VDTL4	// Detail
	type public String %BLK,%NOCLOSE,%NOOPEN,A(),ACN,AD(),B12,B22,CAD(),CCODE,CNAME,DATA(),DUMMY,ET,IO,IOPAR,IOSL,IOTYP,MYQRY,NR4REC,PGM,REPDI,RID,SIO,START,STOP,TAXID,TOTGI,TOTIS,TOTNR,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VT(),YEAR,YEAR2,ZIPYADJ,acn,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vp4

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	do VP1 quit:VFMQ!verror.get()  set V=$E(DUMMY,1,1) set VL=V
	if 'VL.translate(" ").isNull() do VOM
	quit

VSUM4	// Summary
	type public String %BLK,%NOCLOSE,%NOOPEN,A(),ACN,AD(),B12,B22,CAD(),CCODE,CNAME,DATA(),DUMMY,ET,I,IO,IOPAR,IOSL,IOTYP,MYQRY,NR4REC,PGM,REPDI,RID,SIO,START,STOP,TAXID,TOTGI,TOTIS,TOTNR,V,VFMQ,VL,VLC,VO,VOFFLG,VT(),VX(),YEAR,YEAR2,ZIPYADJ,acn,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc2,vovc3,vp4

	if 'VT(4) quit
	if VLC+23>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="        "_$J(YEAR2,2)
	do VP2 quit:VFMQ!verror.get()  set V=$J(NR4REC,1)
	set VL=VL_$J("",14-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$E(CCODE,1,3)
	set VL=VL_$J("",20-VL.length())_V
	set V=vc1,VO=V set V=$J(V,12) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",37-VL.length())_V
	set VL=VL_$J("",56-VL.length())_$E(vc4,1,20)
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	do VP5 quit:VFMQ!verror.get()  set V=$E(DATA(1,1),1,3) set VL="          "_V
	do VP6 quit:VFMQ!verror.get()  set V=$E(DATA(1,2),1,3)
	set VL=VL_$J("",18-VL.length())_V
	set VL=VL_$J("",27-VL.length())_$S(+DATA(1,3)=0:$J("",12),1:$J($FN(DATA(1,3),",",2),12))
	do VP7 quit:VFMQ!verror.get()  set V=$S(+DATA(1,5)=0:$J("",12),1:$J($FN(DATA(1,5),",",2),12))
	set VL=VL_$J("",45-VL.length())_V
	do VP8 quit:VFMQ!verror.get()  set V=$E(B12,1,1)
	set VL=VL_$J("",64-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	do VP9 quit:VFMQ!verror.get()  set V=$E(DATA(2,1),1,3) set VL="          "_V
	set VL=VL_$J("",18-VL.length())_$E(DATA(2,2),1,3)
	set VL=VL_$J("",27-VL.length())_$S(+DATA(2,3)=0:$J("",12),1:$J($FN(DATA(2,3),",",2),12))
	do VP10 quit:VFMQ!verror.get()  set V=$S(+DATA(2,5)=0:$J("",12),1:$J($FN(DATA(2,5),",",2),12))
	set VL=VL_$J("",45-VL.length())_V
	do VP11 quit:VFMQ!verror.get()  set V=$E(B22,1,1)
	set VL=VL_$J("",64-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	do VP12 quit:VFMQ!verror.get()  set V=$E(CAD(0),1,34) set VL="      "_V
	do VOM
	set VL="      "_$E(CAD(1),1,34)
	do VP13 quit:VFMQ!verror.get()  set V=$E(CNAME,1,34)
	set VL=VL_$J("",42-VL.length())_V
	do VOM
	do VP14 quit:VFMQ!verror.get()  set V=$E(CAD(2),1,34) set VL="      "_V
	do VP15 quit:VFMQ!verror.get()  set V=$E(AD(0),1,34)
	set VL=VL_$J("",42-VL.length())_V
	do VOM
	do VP16 quit:VFMQ!verror.get()  set V=$E(CAD(3),1,34) set VL="      "_V
	set VL=VL_$J("",42-VL.length())_$E(AD(1),1,34)
	do VOM
	set VL="      "_$E(CAD(4),1,34)
	set VL=VL_$J("",42-VL.length())_$E(AD(2),1,34)
	do VOM
	set VL="      "_$E(CAD(5),1,34)
	set VL=VL_$J("",42-VL.length())_$E(AD(3),1,34)
	do VOM
	set VL="      "_$E(CAD(6),1,34)
	do VOM
	set VL="      "_$E(CAD(7),1,34)
	do VOM
	do VP17 quit:VFMQ!verror.get()  set V=$E(CAD(8),1,40) set VL="    "_V
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="" do VOM
	do VP18 quit:VFMQ!verror.get()  set V=$E(DUMMY,1,1) set VL=V
	do VOM
	quit

VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %BLK,%MSKD,%NOCLOSE,%NOOPEN,%TIM,A(),ACN,AD(),B12,B22,CAD(),CCODE,CNAME,CONAM,DATA(),DUMMY,ET,IO,IOPAR,IOTYP,MYQRY,NR4REC,PGM,REPDI,RID,RN,SIO,START,STOP,TAXID,TOTGI,TOTIS,TOTNR,VL,YEAR,YEAR2,ZIPYADJ,acn,vc1,vc10,vc11,vc12,vc13,vc14,vc15,vc16,vc17,vc18,vc19,vc2,vc20,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vp4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+0,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	use IO if 'VLC,'vcrt set $Y=1
	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: DUMMY

 type public String DUMMY

 // Total the values for each customer.

 set DUMMY=""
 
	quit

VP2	// Column pre-processor - Variable: NR4REC

	type public String vc3
 /* Retrieve the recipient type from the latest account since each customer's 
    account should have the same recipient code. */

 type public Number RELC,NR4REC

 // Account Relationship Code
 type RecordACN acn=Db.getRecord("ACN","CID=:vc3")
 set RELC=acn.acnrelc
 
 type RecordRELCODE1 relcode1=Db.getRecord("RELCODE1","REL=:RELC")
 set NR4REC=relcode1.nr4rec
	quit

VP3	// Column pre-processor - Variable: CCODE

	type public String vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12,vc13,vc14
 type public Number I
 type public String ACN,CAD(),CCODE,COUNTRY
 type String cntry
 if vc5="" set CCODE="OMC"
 else  do {
	set cntry=vc5
	type RecordSTBLCNTRY stblcntry=Db.getRecord("STBLCNTRY","CNTRY=:cntry",1)
	if stblcntry.getMode() set CCODE=stblcntry.isoc
	}
 

 for I=0:1:8 set CAD(I)=""

 // Set up the address.
 // Set up the CAD array with the primary owners address.

 set CAD(2)=vc6
 set CAD(3)=vc7
 set CAD(4)=vc8
 
 // Find the first line with no address data, starting from CAD(6) up.
 for I=4:-1:1 quit:CAD(I).length()
 
 // Add the City and State line of the address.
 set CAD(I+1)=vc9_", "_vc10
 
 // Set CAD(5) equal to the zip code.
 set CAD(5)=vc11
 
 // find title for the primary owner
 if ACN>0 set CAD(0)=vc12
 
 // find the primary owners country code.
 set COUNTRY=vc13
 
 // Restrict the address lines to 33 positions.
 for I=0:1:4 set CAD(I)=CAD(I).extract(1,33)
 
 // if primary customer is non-personal set 2nd name line to null
 if vc14'=1 quit
 else  set CAD(1)=""
	quit

VP4	// Column post-processor - [SYSDEV,NR4EINF]ACN

	type public String vc15,vc16,vc17,vc18,vc19,vc20
 type public String TDATA(,)
 type Number BOO,NRTRN

 set BOO=vc15
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")
 set NRTRN=utblbrcd.nrtrn

 // If this account has non-reportable information in it, skip it.
 if vc16 do SKIPTD
 
 // Set The Income Code
 set TDATA(vc17,"CAD").piece("|",1)=vc17

 // Set The Currency Code
 set TDATA(vc17,"CAD").piece("|",2)="CAD"

 // Calculate The Gross Income
 set TDATA(vc17,"CAD").piece("|",3)=TDATA(vc17,"CAD").piece("|",31)+vc18
 
 // Calculate The Income Subject To Withholding
 set TDATA(vc17,"CAD").piece("|",4)=TDATA(vc17,"CAD").piece("|",4)+vc19

 // Calculate The Non-Resident Tax Withheld
 set TDATA(vc17,"CAD").piece("|",5)=TDATA(vc17,"CAD").piece("|",5)+vc20
 quit
SKIPTD  //Dummy line tag used to skip over building TDATA array for an account.
	quit

VP5	// Column pre-processor - Variable: DATA(1

 type Number I,J
 type public String CRCD,DATA(,),INCCD
 type public String TDATA(,)


 for I=1:1:4 for J=1:1:5 set DATA(I,J)=""
 set (CRCD,INCCD,I,J)=""
 for  set INCCD=TDATA(INCCD).order() quit:INCCD=""  do {
	for  set CRCD=TDATA(INCCD,CRCD).order() quit:CRCD=""  set I=I+1 do {
		for J=1:1:5 set DATA(I,J)=(TDATA(INCCD,CRCD)).piece("|",J)
 		}
	}
 kill TDATA
	quit

VP6	// Column pre-processor - Variable: DATA(1

 type Number I,J                          
 type public String CRCD,DATA(,),INCCD
 type public String TDATA(,)
 // Define the DATA array.

 for I=1:1:4 for J=1:1:5 set DATA(I,J)="" 
 set (CRCD,INCCD,I,J)=""
 for  set INCCD=TDATA(INCCD).order() quit:INCCD=""  do {
        for  set CRCD=TDATA(INCCD,CRCD).order() quit:CRCD=""  set I=I+1 do {
		for J=1:1:5 set DATA(I,J)=(TDATA(INCCD,CRCD)).piece("|",J)
		}
	}   
 kill TDATA
	quit

VP7	// Column pre-processor - Variable: DATA(1

 type public String B12,DATA()

 if DATA(1,5)=0,DATA(1,1)="18" set B12="B"
 else  set B12=""
	quit

VP8	// Column pre-processor - Variable: B12

 type public String B12,DATA()

 if DATA(1,5)=0,DATA(1,1)="18" set B12="B"
 else  set B12=""
	quit

VP9	// Column pre-processor - Variable: DATA(2

 type public String B12,DATA()

 if DATA(1,5)=0,DATA(1,1)="18" set B12="B" 
 else  set B12=""
	quit

VP10	// Column pre-processor - Variable: DATA(2

 type public String B22,DATA()

 if DATA(2,5)=0,DATA(2,1)="18" set B22="B" 
 else  set B22=""
	quit

VP11	// Column pre-processor - Variable: B22

 type public String B22,DATA()

 if DATA(2,5)=0,DATA(2,1)="18" set B22="B"
 else  set B22=""
	quit

VP12	// Column pre-processor - Variable: CAD(0)

 type public String B22,DATA()

 if DATA(2,5)=0,DATA(2,1)="18" set B22="B"
 else  set B22=""


	quit

VP13	// Column pre-processor - Variable: CNAME

 type public String CNAME

 type RecordCUVAR cuvar=Db.getRecord("CUVAR")
 set CNAME=cuvar.cname
	quit

VP14	// Column pre-processor - Variable: CAD(2)

	type public String vc15
 type Number I,J
 type public String AD(),TSTAD()
 type Number BOO

 set BOO=vc15
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")

 /* Set up the AD array with the customer's branch of ownerships name 
  and address*/
 set TSTAD(0)=utblbrcd.desc
 set TSTAD(1)=utblbrcd.brad1
 set TSTAD(2)=utblbrcd.brad2
 set TSTAD(3)=utblbrcd.brad3
 set TSTAD(4)=utblbrcd.brcity_"|"_utblbrcd.brstate_"|"_utblbrcd.brzip

 // Copy all records with information from the TSTAD array to the AD array.
 // This will delete any blank lines in between the address line.
 set J=0
 for I=0:1:3 do {
 	set AD(I)=""
 	if '(TSTAD(I).get()).isNull() set AD(J)=TSTAD(I),J=J+1
	}
 if J>3 set J=3
 set AD(J)=TSTAD(4)
	quit

VP15	// Column pre-processor - Variable: AD(0)

	type public String vc15
 type public Number I,J
 type public String AD(),TSTAD()
 type Number BOO

 set BOO=vc15
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")

 /* Set up the AD array with the customer's branch of ownerships name
  and address */

 set TSTAD(0)=utblbrcd.desc
 set TSTAD(1)=utblbrcd.brad1               
 set TSTAD(2)=utblbrcd.brad2               
 set TSTAD(3)=utblbrcd.brad3               
 set TSTAD(4)=utblbrcd.brcity_"|"_utblbrcd.brstate_"|"_utblbrcd.brzip

 /* Copy all records with information from the TSTAD array to the AD array.
  This will delete any blank lines in between the address line.*/
	
 set J=0
 for I=0:1:3 do {
 	set AD(I)=""
	if '(TSTAD(I).get()).isNull() set AD(J)=TSTAD(I),J=J+1
	}
 if J>3 set J=3
 set AD(J)=TSTAD(4)
	quit

VP16	// Column pre-processor - Variable: CAD(3)

	type public String vc15
 type public Number I,J  
 type public String AD(),TSTAD()
 type Number BOO
 
 set BOO=vc15
 type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:BOO")
 /* Set up the AD array with the customer's branch of ownerships name
 and address */
 set TSTAD(0)=utblbrcd.desc             
 set TSTAD(1)=utblbrcd.brad1              
 set TSTAD(2)=utblbrcd.brad2              
 set TSTAD(3)=utblbrcd.brad3              
 set TSTAD(4)=utblbrcd.brcity_"|"_utblbrcd.brstate_"|"_utblbrcd.brzip

 /* Copy all records with information from the TSTAD array to the AD array.
 This will delete any blank lines in between the address line.*/

 set J=0                             
 for I=0:1:3 do {                                            
	set AD(I)=""                       
	if '(TSTAD(I).get()).isNull() set AD(J)=TSTAD(I),J=J+1
	}
 if J>3 set J=3                           
 set AD(J)=TSTAD(4) 
	quit

VP17	// Column pre-processor - Variable: CAD(8)

 type public Number IOSL,NRTRN,NR4REC,TOT,VLC,VFMQ,verror
 type public String A(),AD(),CAD(),DATA(),CCODE,DUMMY,VL,V,YEAR2
 type Number I,J

 set DUMMY=""
 set TOT=0
 for I=3:1:4 for J=1:1:5 set TOT=TOT+DATA(I,J).get()
 if 'TOT quit


 if VLC+25>IOSL do VHDG0 quit:VFMQ
 do VOM
 set VL="        "_$J(YEAR2,2)
 do VP2 quit:verror.get()  set VL=VL_$J("",14-VL.length())_$J(NR4REC,1)
 do VP3 set V=CCODE.extract(1,3) quit:verror.get()  set VL=VL_$J("",20-VL.length())_V
 set VL=VL_$J("",40-VL.length())_NRTRN
 do VOM
 do VOM
 do VOM
 do VP4 quit:verror.get()  set VL="          "_DATA(3,1)
 set VL=VL_$J("",18-VL.length())_DATA(3,2)
 set VL=VL_$J("",27-VL.length()) set V=DATA(3,3)
 if +V=0 set VL=VL_$J("",12)
 else  set VL=VL_$J($FN(V,",",2),12)
 set VL=VL_$J("",45-VL.length()) set V=DATA(3,5)
 if +V=0 set VL=VL_$J("",12)
 else  set VL=VL_$J($FN(V,",",2),12)
 do VOM
 do VOM
 do VOM
 set VL="          "_DATA(4,1)
 set VL=VL_$J("",18-VL.length())_DATA(4,2)
 set VL=VL_$J("",27-VL.length()) set V=DATA(4,3)
 if +V=0 set VL=VL_$J("",12)
 else  set VL=VL_$J($FN(V,",",2),12)
 set VL=VL_$J("",45-VL.length()) set V=DATA(4,5)
 if +VL=0 set VL=VL_$J("",12)
 else  set VL=VL_$J($FN(V,",",2),12)
 do VOM
 do VOM
 do VOM
 set VL="      "_CAD(0)
 do VOM
 set VL="      "_CAD(1)
 set VL=VL_$J("",42-VL.length())_$P(A("ADDR"),"|",7).extract(1,34)
 do VOM
 set VL="      "_CAD(2)
 do VP5 quit:verror.get()  set VL=VL_$J("",42-VL.length())_AD(0)
 do VOM
 set VL="      "_CAD(3)
 set VL=VL_$J("",42-VL.length())_AD(1)
 do VOM
 set VL="      "_CAD(4)
 set VL=VL_$J("",42-VL.length())_AD(2)
 do VOM
 set VL="      "_CAD(5)
 set VL=VL_$J("",42-VL.length())_AD(3)
 do VOM
 set VL="      "_CAD(6)
 do VOM
 set VL="      "_CAD(7)
 do VOM
 do VOM
 set VL="    "_CAD(8)
 do VOM
 do VP6 quit:verror.get()  set VL=DUMMY
 if VL'?." " do VOM
 set VL=""
 do VOM
 do VOM
 do VOM
 do VOM
	quit

VP18	// Column pre-processor - Variable: DUMMY


	quit
