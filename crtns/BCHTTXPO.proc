BCHTTXPO //Batch BCHTTXPOS - Batch Posting
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/22/2007 04:12 - vajamber
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHTTXPOS Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit quit
 do JOBMGR^BCHUTL(%FN,"BCHTTXPOS",.vINPUT)
 do ^JOBMGR(.vINPUT)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(TJD,BRCD,UID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHTTXPOS","*","",TJD.get()_","_BRCD.get()_","_UID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,TJD,BRCD,UID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHTTXPOS","*","",TJD.get()_","_BRCD.get()_","_UID.get(),"",et)
 }
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,TJD,BRCD,UID) //
	/*
	A 'trollback' is done because TRNDRV is handling the posting of the
	entire batch for a Branch and User ID.  TRNBATCH^TRNDRV section contains
	the neccessary TP/Restart logic for processing this batch.
	*/
	
	type public Date TPD
	type public String ET
	
	type Boolean %ODP, %RET, RTSN
	type Number BSEQ, MARTY, REJMET, STATUS
	type String ETC, SRC, X, Y
	
	do Runtime.rollback()
 
	set %UserID = UID
	
	type RecordTTXUID ttxuid = Db.getRecord("TTXUID", "TJD=:TJD,BRCD=:BRCD,UID=:%UserID")

	if (ttxuid.badttx = 1) do { quit
		// Bad posting file 
		set ET = $$^MSG(5158)
		do ^UTLERR
	}
	set BSEQ = (ttxuid.lpseq + 1) * 1000
	set SRC = ttxuid.src

	type ResultSet ttx=Db.select("TSEQ","TTX","TJD=:TJD AND BRCD=:BRCD AND UID=:UID AND TSEQ>:BSEQ")

	// Quit if there are no unposted transactions
	quit:ttx.isEmpty()

	// Set up posting source information

	type RecordSCAU scau = Db.getRecord("SCAU","UID")

	set %UserClass = scau.%ucls		// Userclass
	set %ODP = scau.odp			// Overdraft Protection Flag
	set REJMET = scau.batrej			// Batch Reject Handling
	set RTSN = scau.sdrty			// Same Day Retry Flag
	set MARTY = scau.marty			// Maximum Number of Retries
 
	if SRC.isNull() set %RET=0
	else  do {
		type RecordCTBLINC ctblinc = Db.getRecord("CTBLINC", "KEY=:SRC", 1)
		
		if (+ctblinc.getMode() = 0) set %RET = 0
		else  do {
			set %RET = ctblinc.ret
			if %RET do {
				
				#if (CUVAR.RETOPT > 0)
				set %RET = CUVAR.RETOPT
				#else
				set %RET = 1
				#endif
			}
		}
	}

	if (MARTY > 0), RTSN set %ODP = 0

	set STATUS = 2
	do ^TTXLOK
	
	do TRNBATCH^TRNDRV(TPD, BRCD, %UserID)
	
	type RecordTTXUID ttxuid2 = Db.getRecord("TTXUID", "TJD,BRCD,UID")
	set ttxuid2.badttx = 0
	do ttxuid2.bypassSave()

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,TJD,BRCD,UID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set TJD=vRECORD.piece($C(9),1)
 set BRCD=vRECORD.piece($C(9),2)
 set UID=vRECORD.piece($C(9),3)
 do vPROC(TJD,BRCD,UID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,TJD,BRCD,UID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>34 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+39>34 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("TJD,BRCD,UID","TTXUID","TJD=:TJD")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Date TPD
	type public String RTSN(,)
	
	set TPD=%SystemDate
	
	type ResultSet rs = Db.select("GRP,REST", "UTBLRETRY", "", "GRP,REST ASC")
	while rs.next() set RTSN(rs.getCol("GRP"), rs.getCol("REST")) = ""

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
	type public Boolean ER = 0

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
