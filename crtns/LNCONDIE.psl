LNCONDIE
	/*
	       ORIG:  Neal E. Gorman (5053) - 03/05/87
	  CALLED BY:
	      CALLS:  ^SCAIO,^UACN,^USID,^UTLERR,^UTLREAD
	   PROJ #'S:
	       DESC:

	   LNES(N)=ECID|BIL POSITION|TRTYPE|CURR PMT|LUMP|ACR|BAL|PAYEE|NEXT PMT|
	            REMND|REM PR YR|REMYTD

	  ---- Revision History ------------------------------------------------

	   03/07/05 - KELLYP - CR 14452
	   	      Reconverted this procedure as screen driver now handles 
	   	      repeating regions on its own.  Also modified procedure to
	   	      conform to current PSL standards and removed previous
	   	      revision history.

	  ----------------------------------------------------------------------

	*/

	type Public Boolean ER

	type Date CEFD
	type Number CID,%PAGE,%PG,TACR,TBAL,TNPMT,TPMT
	type String BIL0,VFMQ
	type RecordLNES LNES()		// Dummy record array for screen input

	do VPG00			// Query screen
	
	if VFMQ="Q" do END quit
	
	do VPG01(.LNES())		// Screen Input
	
	if VFMQ="F",'ER do FILE(.LNES())
	
	do END
	
	quit


VPG00	// Set up and display query screen

	type Public Boolean ER
	type Public Date CEFD

	type String CLS,%READ,%TAB()

	set %TAB("CID")=".CID3/HLP=[LN]CID/XPP=D PP^LNCONDIE"
	set %TAB("CEFD")=".CEFD1"
	set CLS="L"
	set CEFD=%SystemDate-1
	set %READ="@@%FN,,,CEFD/REQ,CID/REQ"

	do ^UTLREAD

	quit

PP	// Account Number Post-Processor

	type Public Boolean ER
	type Public String BIL0,X

	type RecordLN ln=Db.getRecord("LN","CID=:X",1)

	// Account does not exist
	if 'ln.getMode() do Runtime.setErrMSG("LN",57) quit:ER

	// Account has already been converted
	if Db.isDefined("XCNVMAN","X"),ln.hisctf do Runtime.setErrSTBLER("LN","ACARC") quit:ER

	type ResultSet rs=Db.select(",PE01,PE02,PE03,PE04,PE05,PE06,PE07,PE08,PE09,PE10,PE11,PE12,PE13,PE14,PE15,PE16,PE17,PE18,PE19,PE20","LNBIL0","CID=:X")
	if rs.next() do {
		set BIL0=rs.getRow()
		set BIL0=BIL0.translate($C(9),"|")
		}
	
	type Boolean HASESC
	type Number I
	type String ELMT
	
	set HASESC=0
	
	for I=2:1:BIL0.length("|") do {
		set ELMT=BIL0.piece("|",I)
		set ELMT=ELMT.piece("#",1)
		if $$ESC^LNU(ELMT) set HASESC=1
		}
	
	// No escrow accounts tied to this loan
	if 'HASESC do Runtime.setErrMSG("LN","1934") quit:ER

	quit

VPG01(RecordLNES LNES())	// Screen Driver

	type Public Number CID

	type String CHG
	
	do INIT(.LNES())	// Initialize LNES() and var's used on screen
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")

 	// Not Analyzed
	set CHG=$$^MSG("3965")

	do DRV^USID(1,"LNCONES1",.ln,.LNES())

	quit


INIT(RecordLNES LNES())	// Initialize LNES array and var's used on screen

	type Public Boolean ER
	type Public Number APCND,CID,TACR,TBAL,TNPMT,TPMT
	type Public String BIL0

	type Boolean NEPF
	type Number CNT,ECID,P
	type String A,ETYP,ITEM

	set TACR=0
	set TBAL=0
	set TPMT=0
	set TNPMT=0
	set CNT=0
	set NEPF=0

	// Set up LNES record array
	for P=2:1:BIL0.length("|") do { quit:ER
		
		set A=BIL0.piece("|",P)
		if A.isNull() quit
		
		set ETYP=A.piece("#",1)
		if '(ETYP.length()-1) quit

		set ITEM=$$TT^LNU(ETYP)

		type ResultSet rs=Db.select("NEPF","LNTRS","TRTYPE=:ITEM")
		if rs.next() set NEPF=rs.getCol("NEPF")
		
		if NEPF quit	// Non-escrow processing
		
		set ECID=A.piece("#",2)
		
		type RecordDEP dep=Db.getRecord("DEP","CID=:ECID")

		set CNT=CNT+1
		set LNES(CNT)=Class.new("RecordLNES")

		// Totals for all ESC* groupings
		set TPMT=TPMT+dep.curramt
		set TNPMT=TNPMT+dep.recamt
		set TACR=TACR+dep.posacr
		set TBAL=TBAL+dep.bal
		
		// Values for each ESC* grouping
		set LNES(CNT).ecid=ETYP			// Escrow grouping (e.g., ESC1)
		set LNES(CNT).cid=ECID			// Escrow acct number
		set LNES(CNT).pce=P			// Position in LNBIL0
		set LNES(CNT).acr=dep.posacr		// Current accrual
		set LNES(CNT).bal=dep.bal		// Current balance
		set LNES(CNT).cpmt=dep.curramt		// Current payment amount
		set LNES(CNT).lpmt=+A.piece("#",5)	// Lump payment - next bill
		set LNES(CNT).npmt=dep.recamt		// Next payment amount

		type DbSet ds=Db.selectDbSet("TRTYPE","CID=:ECID","TYP")
		
		// Details for each transfer type for each ESC* grouping
		while ds.next() do {
			type RecordTRTYPE trtype=ds.getRecord()
			
			set LNES(CNT).cid=ECID			// Escrow acct number
			set LNES(CNT).trtype=trtype.typ		// Escrow type
			set LNES(CNT).payee=trtype.payid	// Payee
			set LNES(CNT).remnd=trtype.remnd	// Next remittance date
			set LNES(CNT).rempy=trtype.rempy	// Remitted prior year
			set LNES(CNT).remytd=trtype.remytd	// Remitted year to date

			set CNT=CNT+1
			}
		}

	set TACR=$$^SCARND(TACR,12,CID)
	set TPMT=$$^SCARND(TPMT,12,CID)
	set TBAL=$$^SCARND(TBAL,12,CID)
	set TNPMT=$$^SCARND(TNPMT,12,CID)

	quit


FILE(RecordLNES LNES())	// File data

	type Public Boolean ER
	type Public Date CEFD
	type Public Number CID
	type Public String BIL0

	type Number ECID,N
	type String COL,EAB(),TYP

	do Db.delete("LNCONVES","CEFD=:CEFD AND CID=:CID")

	do PFILE(.LNES())	// Pre-File Checks and Totals

	type RecordLNCONBL1 lnconbl1=Db.getRecord("LNCONBL1","CEFD=:CEFD,CID=:CID,BSEQ=0",1)

	// Save LNCONBL1 record for BIL level 0
	for N=2:1:BIL0.length("|") do { quit:ER
		if N<11 set COL="PE0"_(N-1)
		else  set COL="PE"_(N-1)
		set lnconbl1.@COL=BIL0.piece("|",N)
		}
		
	do lnconbl1.save()	
		
	set N=""
	for  set N=LNES(N).order() quit:N.isNull()  do {

		set ECID=LNES(N).cid	// Escrow acct number
		
		type RecordLNCONVEST fLNCONVT=Db.getRecord("LNCONVEST","CEFD=:CEFD,CID=:CID,ECID=ECID",1)
		set fLNCONVT.curramt=EAB(CID).get().piece("|",1)
		set fLNCONVT.remamt=EAB(CID).get().piece("|",2)
		do fLNCONVT.save()

		set TYP=LNES(N).trtype
		type RecordLNCONVES fLNCONVE=Db.getRecord("LNCONVES","CEFD=:CEFD,CID=:CID,ECID=:ECID,TYP=:TYP",1)
		set fLNCONVE.pce=LNES(N).pce
		set fLNCONVE.trtype=TYP
		set fLNCONVE.cpmt=LNES(N).cpmt
		set fLNCONVE.lpmt=LNES(N).lpmt
		set fLNCONVE.acr=LNES(N).acr
		set fLNCONVE.bal=LNES(N).bal
		set fLNCONVE.payee=LNES(N).payee
		set fLNCONVE.npmt=LNES(N).npmt
		set fLNCONVE.remnd=LNES(N).remnd
		set fLNCONVE.rempy=LNES(N).rempy
		set fLNCONVE.remytd=LNES(N).remytd
		do fLNCONVE.save()
		}
	quit


END	// End processing

	type Public Number CID
	type Public String ER,RM,VFMQ

	if ER!(ER="W") quit
	
	set CID=CID.get() // In case CID wasn't entered and user F11'd out of function

	// Conversion escrow file for account ~p1 not created
	if VFMQ="Q" set RM=$$^MSG("610",CID)

	// Conversion escrow file for account ~p1 created
	else  set RM=$$^MSG("609",CID)

	set ER="W"

	quit


PFILE(RecordLNES LNES())	//

	type Public String BIL0,EAB()

	type Number N
	
	set N=""
	
	// For each LNES record...
	for  set N=LNES(N).order() quit:N.isNull()  do {

		type Number CID
		set CID=LNES(N).cid

		// New next payment amount defined, add it to EAB Pos 2
		if LNES(N).npmt'=LNES(N).npmt.oldVal do {
			set EAB(CID).piece("|",2)=EAB(CID).get().piece("|",2)+LNES(N).npmt
			}

		// Rest of the checks are for primary ESC* identifiers only
		if LNES(N).ecid.isNull() quit

		// New lump payment amount defined, add it to 0 level of bill
		if LNES(N).lpmt'=LNES(N).lpmt.oldVal do {
			
			type Number PCE
			type String ESCPCE
			
			set PCE=LNES(N).pce
			set ESCPCE=BIL0.piece("|",PCE)
			
			set ESCPCE.piece("#",5)=LNES(N).lpmt
			set BIL0.piece("|",PCE)=ESCPCE
			}
	
		// New current payment amount defined, set it into EAB Pos 1
		if LNES(N).cpmt'=LNES(N).cpmt.oldVal do {
			
			set EAB(CID).piece("|",1)=LNES(N).cpmt
			}
		}

	quit
 #OPTION ResultClass ON
Public String vSIG()	quit "59966^43527^Pat Kelly^7055"	// Signature - LTD^TIME^USER^SIZE
