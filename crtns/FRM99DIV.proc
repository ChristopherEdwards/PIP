public FRM99DIV	// Prepare Dividend Reporting Information
	/*
	ORIG: Vince Arpa 1/21/97
	DESC: This procedure takes dividend information from M1099 and
	      DEP and stores the data to be reported in a REP099D table.
	
	INPUTS:
		. CORR	Correction run flag		/TYP=L/NOREQ
	
		. LRD	Last Run Date			/TYP=D/NOREQ
	
		. MULTI	Separate multiple form flag	/TYP=L/NOREQ
			Specifies whether to separate those customers with
			multiple 1099-DIV forms from those with only one form.
	
	I18N=QUIT: Excluded from I18N standards.
	
	---- Revision History ------------------------------------------------

	05/26/06 - TITOVE - CR 21509
		   Scoped TYPCIF array as public in IRSUPD section to make
		   sure same records do not process multiple times. Removed
		   CIF and M1099 tags. In BOND section, added ORDER BY clause
		   to ensure the latest record will be processed last.
		   Performed light clean up.

 	05/15/06 - DESHPANDE S K - 21167
	     	   Modified CID section. Set the value of ORDDIV after adding 
	     	   DEP.NRNEGIPTY(NRes Alien Negative Interest Pr Tax Yr) column.	
	
	12/30/05 - SWARNALP - CR 18751
		   Removed the IRSXSEQ table reference since it has been
		   obsoleted.
	
	09/21/05 - HAILEYM - CR17143
		   Converted to PSL.
	
	*/
	
	type public Boolean CORR,MULTI
	type public Date LRD
	type public String %MSKD
	
	type Boolean CTOFA
	type Date BEGYR,ENDYR
	type Number CTOF,SBN
	type String EIN,PSBN
	
	set CORR=CORR.get(),LRD=LRD.get(),MULTI=MULTI.get()
	
	// Beginning of tax year
	set BEGYR=$$BOTY^SCADAT($$BOTY^SCADAT(%SystemDate,1)-1,1)
	// End of tax year
	set ENDYR=$$EOTY^SCADAT(BEGYR,1)
	
	set EIN=CUVAR.EIN
	set CTOFA=CUVAR.CTOF1099
	set SBN=CUVAR.SBINSTNO
	if 'SBN.isNull() set PSBN=SBN_"-"
	
	type RecordUTBLIRS utblirs=Db.getRecord("UTBLIRS","KEY='1099-DIV'",1)	

	set CTOF=utblirs.fctoff
	
	do Db.fastDelete("REP099D","JOB=:%ProcessID")
	
	// Correction Reporting Run
	if CORR do CORR(LRD) quit
	
	// Original Reporting Run
	
	// File M1099 data into REP099D table
	type ResultSet rs=Db.select("DISTINCT TAXID","M1099")
	
	while rs.next() do BOND(rs.getCol("TAXID"),0,"")
	
	// Collate through all of the accounts in the system. Store any taxable
	// interest accounts data in the REP099D table.
	type ResultSet rs1=Db.select("ACN","CIF")
	
	while rs1.next() do ACN(rs1.getCol("ACN"),"",0,"","")
 	
 	quit
	

BOND(String TAXID,
     Number CCODE,
     Date ZEFD)
     
	// Process bond transactions for one taxid
	
	type public Boolean CORR
	type public Date BEGYR,ENDYR
	
	type Number ACN,FEDINC,MF,ORDDIV
	type String ZIP9
	
	type DbSet ds
	type RecordCIF cif
	type RecordM1099 m1099
	type RecordREP099D rep099d
	
	set (ORDDIV,FEDINC)=0
	set ds=Db.selectDbSet("M1099","TAXID=:TAXID","SEQ ASC")
	while ds.next() do {
		set m1099=ds.getRecord("M1099")
		
		if m1099.td<BEGYR!(m1099.td>ENDYR) quit
		set ORDDIV=ORDDIV+m1099.orddiv
		set FEDINC=FEDINC+m1099.fedinc
		}
	
	if ORDDIV+FEDINC=0 quit		// Nothing to report
	
	// Use the address of the last transaction
	set ACN=m1099.relacn 
	if ACN.isNull() set ACN=0
	if ACN do {
		set cif=Db.getRecord("CIF","ACN=:ACN",1)
		if 'cif.getMode() set ZIP9=0,MF=1 quit
		
		set ZIP9=cif.mzip9 
		set MF=cif.mf
		}
	else  set ZIP9=m1099.mzip,MF=m1099.mf
	
	if ZIP9?5N set ZIP9=ZIP9_"-0000"
	if ZIP9.isNull() set ZIP9=0
	if MF.isNull() set MF=1
	
	// Store the data to the REP099D table. The last key (CID) is set to 0
	// since no specific account is being used.
	set rep099d=Class.new("RecordREP099D")
	set rep099d.job=%ProcessID
	set rep099d.mf=MF
	set rep099d.taxid=TAXID
	set rep099d.acn=ACN
	set rep099d.cid=0
	set rep099d.orddiv=ORDDIV
	set rep099d.fedinc=FEDINC
	set rep099d.corrflg=CCODE
	if CORR set rep099d.cjd=ZEFD.get()
	do rep099d.save()	

	quit
	

ACN(Number ACN,
    Number ZB,
    Number CCODE,
    Date ZEFD,
    String CTAXID)
    
	// Process accounts owned by this customer
	
	type public Boolean CORR,CTOFA
	type public Number CTOF
	
	type Number CID,FEDINC,MF,ORDDIV
	type String ACNCORR(),ACNDTL(),TAXID,ZIP9
	
	type RecordCIF cif
	type RecordREP099D rep099d
	
	set cif=Db.getRecord("CIF","ACN=:ACN")
	
	set ZIP9=cif.mzip9 
	if ZIP9?5N set ZIP9=ZIP9_"-0000"
	if ZIP9.isNull() set ZIP9=0
	
	set TAXID=cif.taxid 
	if TAXID.isNull() set TAXID=0
	
	if cif.mf.isNull() set MF=1
	else  set MF=cif.mf
	
	if CORR do CID(ACN,ZB,.ACNDTL(),.ACNCORR(),CCODE,ZEFD)
	if 'CORR do {
		type ResultSet rs1=Db.select("CID","RELCIF","ACN=:ACN")
		while rs1.next() do CID(ACN,rs1.getCol("CID"),.ACNDTL(),.ACNCORR(),CCODE,ZEFD)
		}
	
	// Calculate total interest
	set CID=""
	set (ORDDIV,FEDINC)=0
	for  set CID=ACNDTL(CID).order() quit:CID.isNull()  do {
		set ORDDIV=ORDDIV+ACNDTL(CID).piece("|",1)
		set FEDINC=FEDINC+ACNDTL(CID).piece("|",2)
		}
		
	if ORDDIV+FEDINC=0 quit		// Nothing to report
	if 'CORR,CTOFA,ORDDIV<CTOF quit
	
	set rep099d=Class.new("RecordREP099D")
	set rep099d.job=%ProcessID
	set rep099d.mf=MF
	set rep099d.taxid=TAXID
	set rep099d.acn=ACN
		
	set CID=""
	for  set CID=ACNDTL(CID).order() quit:CID.isNull()  do {
		if rep099d.getMode() do rep099d.setMode(0)
		set rep099d.cid=CID
		set rep099d.orddiv=ACNDTL(CID).piece("|",1)
		set rep099d.fedinc=ACNDTL(CID).piece("|",2)
		set rep099d.corrflg=CCODE
		set rep099d.cjd=ACNDTL(CID).piece("|",8)
		do rep099d.save()
		}
	
	if 'CORR quit

	do SORT(MF,ZIP9,CTAXID,ACN,.ACNCORR())
	quit
	

CID(Number ACN,
    Number CID,
    String ACNDTL(),
    String ACNCORR(),
    Number CCODE,
    Date ZEFD)
    
	// Accumulate interest and withholding for customer

	type public Boolean CORR
	
	type Boolean SEPT
	type Number FEDINC,ORDDIV
	
	type RecordDEP dep
	type RecordRELCIF relcif
	
	set dep=Db.getRecord("DEP","CID=:CID",1)
	if 'dep.getMode() quit
	
	if dep.acn<>ACN quit
	if dep.irsexm<>2 quit
	
	set ORDDIV=dep.ipty+dep.negipty-dep.nrposipty+dep.nrnegipty
	if ORDDIV<0 quit		// Don't report negative dividend
	
	set FEDINC=dep.bwpty-dep.nrwhpty
	
	if (ORDDIV+FEDINC)=0 quit	// Nothing to report
	
	// If RELCIF.S1099 flag is set, separate 1099 reporting is required
	set relcif=Db.getRecord("RELCIF","ACN=:ACN,CID=:CID",1)
	if 'relcif.getMode() set SEPT=0
	else  set SEPT=+relcif.s1099
	
	if CORR set ACNDTL(CID)=ORDDIV_"|"_FEDINC_"|"_SEPT_"||||"_CCODE_"|"_ZEFD.get()
	else  set ACNDTL(CID)=ORDDIV_"|"_FEDINC_"|"_SEPT_"||||"_CCODE
	
	/*
	If change in tax id, set up another entry showing the original reported 
	tax id with zero amount and change the correction flag locally for this
	entry to report as new
	*/
	if CORR,(CCODE=2) set ACNCORR(CID)="0|0|"_SEPT_"||||3"_"|"_ZEFD.get()
	quit     
	

SORT(Number MF,
     String ZIP9,
     String TAXID,
     Number ACN,
     String ACNDTL())
     
	// Sort the records into forms and tables

	type Number CID,CNT,FRM,NFRM
	
	type RecordREP099D rep099d
	
	set FRM=1
	set NFRM=2
	set CNT=0
	
	/* 
	Sort records into forms, 8 records each form. Use separate forms for
	accounts that require separate reporting.
	*/
	set CID=""
	for  set CID=ACNDTL(CID).order() quit:CID.isNull()  do {
		// If separate reporting
		if ACNDTL(CID).piece("|",3) do { quit
			set ACNDTL(CID).piece("|",4)=NFRM
			set NFRM=NFRM+1
			}
		
		set CNT=CNT+1
		if CNT>8 set CNT=1,FRM=NFRM,NFRM=NFRM+1
		set ACNDTL(CID).piece("|",4)=FRM
		}
	
	/*
	Sort CIF with single form and CIF with multiple forms into different
	file if applicable
	*/
	
	set rep099d=Class.new("RecordREP099D")
	set rep099d.job=%ProcessID
	set rep099d.mf=MF
	set rep099d.taxid=TAXID
	set rep099d.acn=ACN
		
	set CID=""
	for  set CID=ACNDTL(CID).order() quit:CID.isNull()  do {
		if rep099d.getMode() do rep099d.setMode(0)
		set rep099d.cid=CID
		set rep099d.orddiv=ACNDTL(CID).piece("|",1)
		set rep099d.fedinc=ACNDTL(CID).piece("|",2)
		set rep099d.corrflg=ACNDTL(CID).piece("|",7)
		set rep099d.cjd=ACNDTL(CID).piece("|",8)
		do rep099d.save()
		}
	quit
	

CORR(Date LRD)	// Collates IRSUPD for 1099-DIV Corrections Section

	type Date EFD
	type String TYPCIF(,,)

	type DbSet ds
	type RecordIRSUPD irsupd
	
	set EFD=LRD-1
	
	set ds=Db.selectDbSet("IRSUPD","TJD>:EFD AND FTYPE IN (13,14)")
	while ds.next() do {
		set irsupd=ds.getRecord("IRSUPD")
		
		do IRSUPD(.irsupd)
		}
	quit
	

IRSUPD(RecordIRSUPD irsupd)	// Detail processing of IRSUPD

	type Number ACN
	type public String TYPCIF(,,)
	
	type RecordACN acn
	
	// If correction forms for this taxid and form type already processed
	if $$PROCESSED(irsupd.ftype,irsupd.ocif,irsupd.miscseq,.TYPCIF(,,)) quit
	
	// If this is a correction to a BOND 1099-DIV
	if irsupd.ftype=14 do BOND(irsupd.miscseq,irsupd.ccode,irsupd.tjd) quit
	
	if irsupd.ftype=13 do { quit
		set acn=Db.getRecord("ACN","CID=:irsupd.miscseq",1)
		if 'acn.getMode() set ACN=0
		else  set ACN=acn.acn
		do ACN(ACN,irsupd.miscseq,irsupd.ccode,irsupd.tjd,irsupd.otin)
		}
	quit
	

PROCESSED(Number TYPE,
	  String CIF,
	  String CID,
	  String TYPCIF(,,))		//REF:W
		 
	// Check if tax id and account for this form type have already been processed

	// No CIF and it is a bond
	if CIF.isNull(), (TYPE = 14) quit 0
	
	// No CIF associated with this account
	if CIF.isNull() quit 1
	
	// Not processed
	if 'TYPCIF(TYPE,CIF,CID).exists() set TYPCIF(TYPE,CIF,CID) = "" quit 0
	
	// Processed
	quit 1

vSIG()	quit "60411^49440^Eugene Titov^8718"	// Signature - LTD^TIME^USER^SIZE
