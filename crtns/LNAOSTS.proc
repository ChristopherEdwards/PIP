LNAOSTS	// Insurance/Dealer Items Inquiry/Maintenance
	/*
	       ORIG:  Chuck Hardy (6721) - 03/03/87
	       DESC:  Insurance/Dealer Items Inquiry/Maintenance

	---- Revision History ------------------------------------------------

	04/04/06 - TITOVE - CR 20320
		   Removed logic related to PTS<>1. The only remaining function
		   that calls this procedure is LNNF04 and it sets PTS=1.
		   This means we ony deal with Net Deferred Fee plans and
		   associated LNCYCPTS table. Among other things that meant
		   we no longer have a need for TYP prompt anymore. Removed 
		   INQ section, the function that called it has been obsoleted.
		   Cleaned up logic and brought up to standards.

	*/
	quit
	

public UPD

	do INIT(1)

	quit


INIT(Number %ProcessMode)

	type public Number %PAGE, %PG, PTS
	
	type Date %EffectiveDate = %SystemDate
	type String TYP, VFMQ

	type RecordLNCYCPTS fLNCPTS
	type RecordLN LN
	type RecordAOAMO fAOAMO

	set %PG = 0 
	set %PAGE = 1
	set PTS = PTS.get()
	
	set TYP = "PTS"
	
	do VPG(.LN, .fAOAMO, .fLNCPTS)

	quit


VPG(RecordLN LN,
    RecordAOAMO fAOAMO,
    RecordLNCYCPTS fLNCPTS)

	type public Number %PG, ER
	type public String VFMQ

	type Boolean FINISH = 0

	for   do { quit:FINISH
		
		if (%PG = 0) do VPG00 if ER set FINISH = 1 quit

		if (%PG > 0) do VPG01(.LN, .fAOAMO, .fLNCPTS) if ER set FINISH = 1 quit

		if "DFQ"[VFMQ do VER(.LN, .fLNCPTS) set FINISH = 1 quit

		set %PG = %PG + 1
		}
	quit


VPG00

	type public Number ER
	type public String %TAB, %READ, VFMQ
	
	set %TAB("CID") = ".CID3/XPP=D PP^LNAOSTS"

	set %READ = "@@%FN,,,CID/REQ"

	do ^UTLREAD 

	if (VFMQ = "Q") set ER = 1 quit

	quit


VPG01(RecordLN LN,
      RecordAOAMO fAOAMO,
      RecordLNCYCPTS fLNCPTS)

	type public Number CID
	type public String ET, PAYEE, PLAN, TYP
	
	// Record locked by another user
	lock +ACN(CID):2 else  set ET = "RECLOC" do ERR quit

	set LN = Db.getRecord("LN","CID = :CID")

	set fLNCPTS = Db.getRecord("LNCYCPTS", "CID = :CID, TYP = :TYP")
	
	do fLNCPTS.setAuditFlag(1)
	
	set PAYEE = fLNCPTS.payee
	set PLAN = fLNCPTS.plan
	
	set fAOAMO = Db.getRecord("AOAMO", "TYP = :TYP,PAYEE = :PAYEE, PLAN = :PLAN")
	
	do DRV^USID(%ProcessMode, "LIAOP", .fLNCPTS, .LN, .fAOAMO)

	quit


ERR
	type public Number ER
	type public String VFMQ

	set ER = 1
	
	do ^UTLERR

	set VFMQ = "Q"
	
	quit


VER(RecordLN LN,
    RecordLNCYCPTS fLNCPTS)

	type public String VFMQ

	if (%ProcessMode = 2) ! (%ProcessMode = 4) ! (VFMQ = "Q") do END quit

	do FILE(.LN, .fLNCPTS)

	do END

	quit
	

FILE(RecordLN LN,
     RecordLNCYCPTS fLNCPTS)	// File data

	type public Number ER
	
	do POST(.LN, .fLNCPTS) quit:ER

	do fLNCPTS.save() 

	quit


POST(RecordLN LN,
     RecordLNCYCPTS fLNCPTS)

	type public Number CID, ER
	type public String PAYEE, TYP
	
	type Boolean NEWPLAN = 0,NEWAMT = 0,NEWCALTD = 0
	type String PLN

	// Date Account Opened - BCHLNNFDE will take care of GL transaction posting
	if (LN.odt = %SystemDate) quit

	// Get an original record from database, for comparison
	type RecordLNCYCPTS cycpts = Db.getRecord("LNCYCPTS", "CID = :CID, TYP = :TYP")

	// Determine if changes were made that would require to generate transactions
	if (+fLNCPTS.amt '= +cycpts.amt) set NEWAMT = 1
		
	if (+fLNCPTS.caltd '= +cycpts.caltd) set NEWCALTD = 1
	
	if (fLNCPTS.plan '= cycpts.plan) set NEWPLAN = 1
		
	// No changes made
	if 'NEWAMT , 'NEWCALTD, 'NEWPLAN quit

	// Payee Plan
	set PLN = $select(NEWPLAN:fLNCPTS.plan,1:cycpts.plan)

	type RecordAOAMO aoamo1 = Db.getRecord("AOAMO", "TYP = :TYP, PAYEE = :PAYEE, PLAN = :PLN")

	type RecordTRN trn = Db.getRecord("TRN", "ETC = :aoamo1.dtran")

	type RecordTRN trn1 = Db.getRecord("TRN", "ETC = :aoamo1.ctran")
	
	if NEWAMT do AMT(.fLNCPTS, .aoamo1, +cycpts.amt, trn.itc, trn1.itc) quit:ER
	
	if NEWCALTD do CALTD(.fLNCPTS, .aoamo1, +cycpts.caltd, trn.itc, trn1.itc) quit:ER
	
	if NEWPLAN do PLAN(.fLNCPTS, .aoamo1, .cycpts, NEWAMT, NEWCALTD, trn.itc, trn1.itc) quit:ER
	
	quit
 

AMT(RecordLNCYCPTS fLNCPTS,
    RecordAOAMO aoamo1,
    Number OLDAMT,
    String DRITC,
    String CRITC)

	// Post DR to CNAGL and CR to DNAGL for old amount.
        // Post DR to DNAGL and CR to CNAGL for new amount.
	type public Number CID, ER

	type String DES

	// Modify Orig Def ~p1
	set DES = $$^MSG(3834, CID)

	if (OLDAMT <> 0) do TTX(aoamo1.cnagl, aoamo1.dnagl, aoamo1.dtran, aoamo1.ctran, DRITC, CRITC, OLDAMT, DES)
	
	if ER do ERR quit

	if (+fLNCPTS.amt <> 0) do TTX(aoamo1.dnagl, aoamo1.cnagl, aoamo1.dtran, aoamo1.ctran, DRITC, CRITC, fLNCPTS.amt, DES)
	
	if ER do ERR quit

	quit


CALTD(RecordLNCYCPTS fLNCPTS,
      RecordAOAMO aoamo1,
      Number OLDCALTD,
      String DRITC,
      String CRITC)
	
	// Post DR to CGL and CR to DGL for old amount.
        // Post DR to DGL and CR to CGL for new amount.
	type public Number CID, ER

	type String DES
	
	// Mod Amort TD ~p1
	set DES = $$^MSG(3833, CID)

	if (OLDCALTD <> 0) do TTX(aoamo1.dgl, aoamo1.cgl, aoamo1.dtran, aoamo1.ctran, DRITC, CRITC, OLDCALTD, DES)
	
	if ER do ERR quit

	if (+fLNCPTS.caltd <> 0) do TTX(aoamo1.cgl, aoamo1.dgl, aoamo1.dtran, aoamo1.ctran, DRITC, CRITC, fLNCPTS.caltd, DES)
	
	if ER do ERR quit
	
	quit


PLAN(RecordLNCYCPTS fLNCPTS,
     RecordAOAMO aoamo1,
     RecordLNCYCPTS cycpts,
     Boolean NEWAMT,
     Boolean NEWCALTD,
     String ODRITC,
     String OCRITC)
	
	// Post DR to CNAGL for old plan and CR to CNAGL for new plan (orig def).
	// Post CR to DGL for old plan and DR to DGL for new plan (amort to date).
	type public Number CID, ER
	type public String PAYEE, TYP
	
	type Number AMT
	type String DES

        type RecordAOAMO aoamo2 = Db.getRecord("AOAMO", "TYP = :TYP, PAYEE = :PAYEE, PLAN = :fLNCPTS.plan")
 
	type RecordTRN trn = Db.getRecord("TRN", "ETC = :aoamo2.dtran")

	type RecordTRN trn1 = Db.getRecord("TRN", "ETC = :aoamo2.ctran")

	// Chng Plan ~p1:~p2 ~p3
	set DES = $$^MSG(3832, aoamo1.plan, fLNCPTS.plan, CID)

	// Reverse and recapture original deferred amount
	set AMT = +$select(NEWAMT:fLNCPTS.amt,1:cycpts.amt)

	if (AMT <> 0) do TTX(aoamo1.cnagl, aoamo1.dnagl, aoamo1.dtran, aoamo1.ctran, ODRITC, OCRITC, AMT, DES)
	
	if ER do ERR quit

	if (AMT <> 0) do TTX(aoamo2.dnagl, aoamo2.cnagl, aoamo2.dtran, aoamo2.ctran, trn.itc, trn1.itc, AMT, DES)
	
	if ER do ERR quit

	// Reverse and recapture Amortized-to-Date
	set AMT = +$select(NEWCALTD:fLNCPTS.caltd,1:cycpts.caltd)

	if (AMT <> 0) do TTX(aoamo1.dgl, aoamo1.cgl, aoamo1.dtran, aoamo1.ctran, ODRITC, OCRITC, AMT, DES)
	
	if ER do ERR quit

	if (AMT <> 0) do TTX(aoamo2.dgl, aoamo2.cgl, aoamo2.dtran, aoamo2.ctran, trn.itc, trn1.itc, AMT, DES)
	
	if ER do ERR quit

	quit
	

TTX(Number DRC,			// Debit GL Account
    Number CRC,			// Credit GL Account
    String DRETC,		// Debit ETC
    String CRETC,		// Credit ETC
    String DRITC,		// Debit ITC
    String CRITC,		// Credit ITC
    Number AMT,			// Transaction Amount
    String DES)			// Transaction Comment

	// Build and post debit and credit transactions for GL accounts
	type public Number ER
	
	type RecordTTX ttx = Class.new("RecordTTX")
	
	set ttx.cid = DRC
	set ttx.itc = DRITC
	set ttx.etc = DRETC
	set ttx.tamt = AMT
	set ttx.efd = %EffectiveDate
	set ttx.tlo = %UserStation
	set ttx.tcmt = DES
	set ttx.cdt = %CurrentDate
	set ttx.tim = %CurrentTime

	do TRNSINGL^TRNDRV(.ttx, , %SystemDate, CUVAR.bobr, 4) quit:ER

	type RecordTTX ttx1 = Class.new("RecordTTX")
	
	set ttx1.cid = CRC
	set ttx1.itc = CRITC
	set ttx1.etc = CRETC
	set ttx1.tamt = AMT
	set ttx1.efd = %EffectiveDate
	set ttx1.tlo = %UserStation
	set ttx1.tcmt = DES
	set ttx1.cdt = %CurrentDate
	set ttx1.tim = %CurrentTime

	do TRNSINGL^TRNDRV(.ttx1, , %SystemDate, CUVAR.bobr, 4) quit:ER

	quit


END

	type public Number CID, ER	
	type public String RM, VFMQ

	if ER ! (%ProcessMode = 2) ! (%ProcessMode = 4) quit
	
	set CID = CID.get()

	// Account ~p1 not modified
	if (VFMQ = "Q") set RM = $$^MSG(135, CID)

	// Account ~p1 modified
	else  set RM = $$^MSG(122, CID)

	set ER = "W"

	quit


PP	// Check if this loan has deferred fee plan level

	type public Number CID, ER, X
	
	type Number %EXT = 1
	type String ZCLS = "L"

	do ^UACN quit:ER

	if 'CID.get() ! X.isNull() quit

	type ResultSet rs = Db.select("TYP", "LNCYCPTS", "CID=:X")
	
	// Account does not contain net deferred fees
	if rs.isEmpty() do Runtime.setErrSTBLER("LNCYCPTS", "NONFEE") quit

	quit

vSIG()	quit "60361^77711^Eugene Titov^7922"	// Signature - LTD^TIME^USER^SIZE
