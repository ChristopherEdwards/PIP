R01S104	// SCA033 - Annual Retirement/ Savings Cont Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 09/10/2007 15:38 - root

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String TO
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type Number YEAR

	set RID="SCA033"
	set RN="Annual Retirement/ Savings Cont Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB
	set %TAB("YEAR")="|4|||||S FROM=$$^SCAJD(""1/1/""_X),TO=$$^SCAJD(""12/31/""_X)||N|Tax Year||1980|||"

	set %READ="IO/REQ,YEAR#1,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String TO
	type public Number YEAR
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,BAL,CID,CONAM,CTAMT,DAT,DC,ETC,I,ITC,NAM,PRECID,PTAMT,RCTAMT,RID,RN,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,VL,VLOF,VRF(),VSKIPREC,VSTATS(),YDES1,YDES2,ZTSO,iradist(),vCOL,vHDG,vc1,vc10,vc11,vc12,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc10,vovc2,vovc9,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA033",RN="Annual Retirement/ Savings Cont Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA033","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[HIST]TJD#59#10,[HIST]RPACONTCD#71#8"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE


		set VWHERE=""
		set VWHERE=VWHERE_"DEP.IRA>0 AND DEP.BAL NOT =0 AND HIST.TJD NOT >(:T"
		set VWHERE=VWHERE_"O+106) AND HIST.TJD NOT <:FROM AND HIST.ITC1 IS NO"
		set VWHERE=VWHERE_"T NULL AND HIST.TAMT IS NOT NULL AND HIST.TSO IS N"
		set VWHERE=VWHERE_"OT NULL AND (HIST.ITC6 NOT =1 OR HIST.ITC6 IS NULL"
		set VWHERE=VWHERE_") AND (HIST.ITC12 NOT =1 OR HIST.ITC12 IS NULL) AN"
		set VWHERE=VWHERE_"D HIST.ETC IS NOT NULL AND HIST.RPACONTCD IS NOT N"
		set VWHERE=VWHERE_"ULL"
		set VBNRINFO("WHERE")=VWHERE

		set VBNRINFO("DESC")="Annual Retirement/ Savings Cont Report"
		set VBNRINFO("PGM")="R01S104"
		set VBNRINFO("RID")="SCA033"
		set VBNRINFO("TABLES")="HIST,DEP"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,DEP]ACN"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,HIST]CID"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,DEP]RPASEQ"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,HIST]TSEQ"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:1 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("HIST.CID,HIST.TSEQ,HIST.ITC,HIST.ETC,HIST.TAMT,HIST.TSO,HIST.TJD,DEP.IRA,DEP.ACN,DEP.RPASEQ,DEP.CID,HIST.RPACONTCD","HIST,DEP","DEP.IRA>0 AND DEP.BAL NOT =0 AND HIST.TJD NOT >(:TO+106) AND HIST.TJD NOT <:FROM AND HIST.ITC1 IS NOT NULL AND HIST.TAMT IS NOT NULL AND HIST.TSO IS NOT NULL AND (HIST.ITC6 NOT =1 OR HIST.ITC6 IS NULL) AND (HIST.ITC12 NOT =1 OR HIST.ITC12 IS NULL) AND HIST.ETC IS NOT NULL AND HIST.RPACONTCD IS NOT NULL","DEP.ACN,HIST.CID,DEP.RPASEQ,HIST.TSEQ","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		do VFPRE quit:VFMQ
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc9,vovc1,vovc10,vovc2
	set vovc9="",vovc1="",vovc10="",vovc2=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc9,vc9,vovc1,vc1,vovc10,vc10,vovc2,vc2
	set vovc9=vc9,vovc1=vc1,vovc10=vc10,vovc2=vc2
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vc10,vc11,vc12
	set vc1=V.piece($C(9),1)			// HIST.CID
	set vc2=V.piece($C(9),2)			// HIST.TSEQ
	set vc3=V.piece($C(9),3)			// HIST.ITC
	set vc4=V.piece($C(9),4)			// HIST.ETC
	set vc5=V.piece($C(9),5)			// HIST.TAMT
	set vc6=V.piece($C(9),6)			// HIST.TSO
	set vc7=V.piece($C(9),7)			// HIST.TJD
	set vc8=V.piece($C(9),8)			// DEP.IRA
	set vc9=V.piece($C(9),9)			// DEP.ACN
	set vc10=V.piece($C(9),10)			// DEP.RPASEQ
	set vc11=V.piece($C(9),11)			// DEP.CID
	set vc12=V.piece($C(9),12)			// HIST.RPACONTCD
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

	type public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8
 type public Number CID,DC,ETC,ITC,TSEQ,TTSO,TYP
 type public String TAMT,TSO,ZTSO
 type public Number iradist()
 type public Boolean VSKIPREC
 type public Date DAT,TO

 set CID=vc1
 set TSEQ=vc2

 if Db.isDefined("HISTR","CID=:CID,TSEQ=:TSEQ") set VSKIPREC=1 quit

 set ITC=vc3
 set DC=$E(ITC)
 set ETC=vc4
 set TAMT=vc5
 set TSO=vc6
 set DAT=vc7
 set TYP=vc8

 if TAMT["#" set TAMT=TAMT.piece("#",2)

 if 'DC set VSKIPREC=1 quit

 kill ZTSO 
 set ZTSO="" 
 do OUT^UTSO(.ZTSO,TSO)
 set ZTSO=+$G(ZTSO("IRAC"))
 set TTSO=iradist(ZTSO).get()

 if TTSO.isNull() set VSKIPREC=1 quit

 if DAT>TO,'("/2/10/17/"[("/"_TTSO_"/")) set VSKIPREC=1 quit
 if DAT'>TO,("/2/10/3/7/8/11/12/17/"[("/"_TTSO_"/")) set VSKIPREC=1
 
	quit

VFPRE	// FETCH pre-processor

 type public Date DAT,TO
 type public Number BAL,CID,DC,PRECID
 type public String TAMT

 if DAT'>TO if DC set BAL=BAL+TAMT else  set BAL=BAL-TAMT
 set TAMT=0
 set PRECID=CID.get()
	quit

VPREAQ	// Pre-processor (after query)

 /*
    ------ Revision History --------------------------------------------

	05/30/07 - DHANALAKSHMI R - CR25413
		Updated to include the IRA types 18 & 19 for 
		Initialization.
  
    --------------------------------------------------------------------

    Initialize arrays for Report Summary totals. Currently supports 15 
    types. If any other type is entered into ^STBL("IRA") this report will 
    have to be modified to reflect the changes. 
 */

 type public Number iradist()

 type ResultSet rs=Db.select("KEY,RSN","UTBLIRADIS")
 while rs.next() set iradist(rs.getCol("KEY"))=rs.getCol("RSN")
 
 type public Number BAL,CTAMT,DC,I,PTAMT,RCTAMT,RPTAMT,RRTAMT,RTAMT,TCTAMT,TPTAMT,YEAR
 type public Date DAT
 type public String RRTAMTID(),TAMT,TCTAMTID(),TPTAMTID(),YDES1,YDES2
 
 set CTAMT=0
 set TAMT=0
 set DAT=""
 set DC=0
 set PTAMT=0
 set RCTAMT=0
 set RPTAMT=0
 set RTAMT=0
 set RRTAMT=0
 set BAL=0

 set YDES1=YEAR_" For "_YEAR
 set YDES2=(YEAR+1)_" For "_YEAR  
 
 for I=1:1:19 set (TCTAMTID(I),TPTAMTID(I),RRTAMTID(I))="" set (RRTAMT(I),TCTAMT(I),TPTAMT(I))=0
 
 set rs=Db.select("IRA,MNEMONIC","STBLIRA","IRA>0")
 
 while rs.next() do {
	set I=rs.getCol("IRA")
 	set TCTAMTID(I)=rs.getCol("MNEMONIC")
	set TPTAMTID(I)=rs.getCol("MNEMONIC")
	set RRTAMTID(I)=rs.getCol("MNEMONIC")
 	}

	quit

VPREBQ	// Pre-processor (before query)

 //Incoming=TO
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'VFMQ do VRSUM
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VBREAK,stat^DBSRWUTL(2)
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(1)=1,vskp(2)=1,vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VHDG2 quit:VFMQ
	do VHDG4 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc9,vovc9,vc1,vovc1,vc10,vovc10,vc2,vovc2
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(+vovc9'=+vc9) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1
	if vb2!(+vovc1'=+vc1) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(+vovc10'=+vc10) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do VSUM2 quit:VFMQ  do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT(),TAMT
	type Public String VSTATS

	set VT(4)=VT(4)+1
	set VT(4,1,1)=VT(4,1,1)+TAMT			// @TOT(<<TAMT>>)
	quit

VHDG2	// Group Header
	type public String %MSKD,%TIM,BAL,CID,CONAM,CTAMT,DAT,DC,ER,ETC,I,IOSL,ITC,NAM,PRECID,PTAMT,RCTAMT,RID,RN,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TO,TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,VSKIPREC,YDES1,YDES2,YEAR,ZTSO,iradist(),vc1,vc10,vc11,vc12,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc10,vovc2,vovc9,vrundate

	quit:vh(2)  set vh(2)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL=$J(vc9,12)
	do VP1 quit:VFMQ!verror.get()  set V=$E(NAM,1,40)
	set VL=VL_$J("",14-VL.length())_V
	do VOM
	quit

VSUM2	// Summary
	type public String %TIM,BAL,CID,CTAMT,DAT,DC,ETC,I,IOSL,ITC,NAM,PRECID,PTAMT,RCTAMT,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TO,TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,V,VFMQ,VL,VLC,VO,VOFFLG,VSKIPREC,VT(),VX(),YDES1,YDES2,YEAR,ZTSO,iradist(),vc1,vc10,vc11,vc12,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc10,vovc2,vovc9,vrundate

	if 'VT(2) quit
	if VLC+4>IOSL do VHDG0 quit:VFMQ

	set VL="" do VOM
	set VL="                                           "_"Total Contributions In"
	set VL=VL_$J("",66-VL.length())_$E(YDES1,1,13)
	set V=$J($FN(PTAMT,",",2),18) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",81-VL.length())_V
	do VOM
	set VL="                                           "_"Total Contributions In"
	set VL=VL_$J("",66-VL.length())_$E(YDES2,1,13)
	set V=$J($FN(CTAMT,",",2),18) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",81-VL.length())_V
	do VOM
	set VL="                                                 "_"Rollover and Trustee transfers"
	set V=$J($FN(RTAMT,",",2),18) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",81-VL.length())_V
	do VOM
	set VL="                                                           "_"Total Contributions:"
	set V=VT(2,1,1)					// @TOT(<<TAMT>>,)
	set VL=VL_$J("",81-VL.length())_$J($FN(V,",",2),18)
	do VP5 quit:VFMQ!verror.get()  set V=$J($FN(BAL,",",2),18) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",112-VL.length())_V
	do VOM
	quit

VHDG4	// Group Header
	type public String %MSKD,%TIM,BAL,CID,CONAM,CTAMT,DAT,DC,ER,ETC,I,IOSL,ITC,NAM,PRECID,PTAMT,RCTAMT,RID,RN,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TO,TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,V,VFMQ,VL,VLC,VNEWHDR,VO,VOFFLG,VPN,VRG,VSKIPREC,YDES1,YDES2,YEAR,ZTSO,iradist(),vc1,vc10,vc11,vc12,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vcrt,verror,vh(),vovc1,vovc10,vovc2,vovc9,vrundate

	quit:vh(4)  set vh(4)=1				// Print flag
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="     "_$J(vc10,12)
	set VL=VL_$J("",23-VL.length())_$J(vc8,2)
	set VL=VL_$J("",42-VL.length())_$J(vc11,12)
	do VOM
	quit

VDTL4	// Detail
	type public String %TIM,BAL,CID,CTAMT,DAT,DC,ETC,I,IOSL,ITC,NAM,PRECID,PTAMT,RCTAMT,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TO,TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VRG,VSKIPREC,VT(),YDES1,YDES2,YEAR,ZTSO,iradist(),vc1,vc10,vc11,vc12,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc10,vovc2,vovc9,vrundate

	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="                                                          "_$J($$DAT^%ZM(vc7),10)
	set VL=VL_$J("",70-VL.length())_$E(vc12,1,8)
	set V=vc5,VO=V set V=$J($FN(V,",",2),18) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",81-VL.length())_V
	do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,BAL,CID,CONAM,CTAMT,DAT,DC,ETC,I,ITC,NAM,PRECID,PTAMT,RCTAMT,RID,RN,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TO,TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,VL,VSKIPREC,YDES1,YDES2,YEAR,ZTSO,iradist(),vc1,vc10,vc11,vc12,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc10,vovc2,vovc9,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+7,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,40)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",122-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  (SCA033)"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E($$DAT^%ZM(TO,$G(%MSKD)),1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$E($J(VPN,3),1,3)
	do VOM
	set VL="" do VOM
	set VL="  "_"       CIF  Name                                                                                                        Balance As"
	do VOM
	set VL="    "_"Plan Sequence    Type                      Account          Date  Code           Tran Amount"
	set VL=VL_$J("",119-VL.length())_"OF 12/31/"_YEAR
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="" do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VRSUM	// Report Summary
	type Public Number IOSL,verror,VFMQ,vh,VLC,VT(),VX()
	type Public String %TIM,BAL,CID,CTAMT,DAT,DC,ETC,ITC,NAM,PRECID,PTAMT,RCTAMT,RPTAMT,RRTAMT,RRTAMTID(),RTAMT,TAMT,TCTAMT,TCTAMTID(),TO,TOTCONT,TPTAMT,TPTAMTID(),TSEQ,TSO,TTSO,TYP,VSKIPREC,YDES1,YDES2,YEAR,ZTSO,iradist(),vc5,vovc1,vovc10,vovc2,vovc9,vrundate
	type Number I
	type String V,VL

	set VL=""
	if 'vh(0) do VHDG0 quit:VFMQ
	if VLC+28>IOSL do VHDG0 quit:VFMQ

	set VL="                                                    "_"Report Summary"
	do VOM
	set VL="" do VOM
	set VL=" "_"Total Contributions In"
	set VL=VL_$J("",24-VL.length())_$E(YDES1,1,13)
	set VL=VL_$J("",51-VL.length())_"Total Contributions In"
	set VL=VL_$J("",74-VL.length())_$E(YDES2,1,13)
	set VL=VL_$J("",102-VL.length())_"Rollover and Trustee transfers"
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_"------------------------------------              ------------------------------------               ------------------------------"
	if 'VL.translate(" ").isNull() do VOM
	set VL="" do VOM
	set VL=" "_$E(TPTAMTID(1),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(1),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(1),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(1),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(1),1,10)
	set V=$J($FN(RRTAMT(1),",",2),15) do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(2),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(2),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(2),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(2),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(2),1,10)
	set V=$J($FN(RRTAMT(2),",",2),15) do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(3),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(3),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(3),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(3),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(3),1,10)
	set V=$J($FN(RRTAMT(3),",",2),15) do VP10 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(4),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(4),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(4),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(4),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(4),1,10)
	set V=$J($FN(RRTAMT(4),",",2),15) do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(5),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(5),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(5),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(5),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(5),1,10)
	set V=$J($FN(RRTAMT(5),",",2),15) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(6),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(6),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(6),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(6),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(6),1,10)
	set V=$J($FN(RRTAMT(6),",",2),15) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(7),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(7),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(7),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(7),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(7),1,10)
	set V=$J($FN(RRTAMT(7),",",2),15) do VP14 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(8),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(8),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(8),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(8),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(8),1,10)
	set V=$J($FN(RRTAMT(8),",",2),15) do VP15 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(9),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(9),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(9),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(9),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(9),1,10)
	set V=$J($FN(RRTAMT(9),",",2),15) do VP16 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(10),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(10),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(10),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(10),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(10),1,10)
	set V=$J($FN(RRTAMT(10),",",2),15) do VP17 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(11),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(11),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(11),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(11),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(11),1,10)
	set V=$J($FN(RRTAMT(11),",",2),15) do VP18 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(12),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(12),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(12),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(12),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(12),1,10)
	set V=$J($FN(RRTAMT(12),",",2),15) do VP19 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(13),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(13),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(13),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(13),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(13),1,10)
	set V=$J($FN(RRTAMT(13),",",2),15) do VP20 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL=" "_$E(TPTAMTID(14),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(14),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(14),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(14),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(14),1,10)
	set V=$J($FN(RRTAMT(14),",",2),15) do VP21 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL=" "_$E(TPTAMTID(15),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(15),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(15),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(15),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(15),1,10)
	set V=$J($FN(RRTAMT(15),",",2),15) do VP22 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL=" "_$E(TPTAMTID(16),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(16),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(16),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(16),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(16),1,10)
	set V=$J($FN(RRTAMT(16),",",2),15) do VP23 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL=" "_$E(TPTAMTID(17),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(17),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(17),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(17),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(17),1,10)
	set V=$J($FN(RRTAMT(17),",",2),15) do VP24 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL=" "_$E(TPTAMTID(18),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(18),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(18),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(18),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(18),1,10)
	set V=$J($FN(RRTAMT(18),",",2),15) do VP25 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL=" "_$E(TPTAMTID(19),1,10)
	set VL=VL_$J("",22-VL.length())_$J($FN(TPTAMT(19),",",2),15)
	set VL=VL_$J("",51-VL.length())_$E(TCTAMTID(19),1,10)
	set VL=VL_$J("",72-VL.length())_$J($FN(TCTAMT(19),",",2),15)
	set VL=VL_$J("",102-VL.length())_$E(RRTAMTID(19),1,10)
	set V=$J($FN(RRTAMT(19),",",2),15) do VP26 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL="                      "_"---------------                                   ---------------                             ----------------"
	do VOM
	set VL="               "_"Total"
	set VL=VL_$J("",22-VL.length())_$J($FN(RPTAMT,",",2),15)
	set VL=VL_$J("",65-VL.length())_"Total"
	set VL=VL_$J("",72-VL.length())_$J($FN(RCTAMT,",",2),15)
	set VL=VL_$J("",110-VL.length())_"Total"
	set V=$J($FN(RRTAMT,",",2),15) do VP27 quit:VFMQ!verror.get()
	set VL=VL_$J("",117-VL.length())_V
	do VOM
	set VL="" do VOM
	set VL=" "_"Total Contributions:"
	set VL=VL_$J("",23-VL.length())_$J($FN(TOTCONT,",",2),20)
	do VOM
	quit

VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: NAM

	type public String vc9
 type Public String NAM
 type Public Number ACN

 set ACN=vc9

 type RecordCIF cif=Db.getRecord("CIF","ACN")
 set NAM=cif.nam
 
	quit

VP2	// Column post-processor - Variable: PTAMT

 type public Number PTAMT
 set PTAMT=0
	quit

VP3	// Column post-processor - Variable: CTAMT

 type public Number CTAMT
 set CTAMT=0
	quit

VP4	// Column post-processor - Variable: RTAMT

 type public Number RTAMT
 set RTAMT=0
	quit

VP5	// Column pre-processor - Variable: BAL

 type public Number BAL,CID,PRECID
 type public String TAMT

 if PRECID=CID set BAL=BAL+TAMT 
	quit

VP6	// Column post-processor - Variable: BAL

 type public Number BAL
 set BAL=0
	quit

VP7	// Column post-processor - Variable: TAMT

 type public Number CTAMT,PTAMT,RCTAMT,RPTAMT,RRTAMT,RTAMT,TCTAMT,TPTAMT,TTSO,TYP
 type public Date DAT,TO
 type public String TAMT
 if DAT>TO do {
	set CTAMT=CTAMT+TAMT
	set RCTAMT=RCTAMT+TAMT
	set TCTAMT(TYP)=TCTAMT(TYP)+TAMT
	} 
 else  do {
	if ("/4/5/"[("/"_TTSO_"/")) do {
		set RTAMT=RTAMT+TAMT,RRTAMT=RRTAMT+TAMT
		set RRTAMT(TYP)=RRTAMT(TYP)+TAMT
	}
	else  do {
		set PTAMT=PTAMT+TAMT
		set RPTAMT=RPTAMT+TAMT
		set TPTAMT(TYP)=TPTAMT(TYP)+TAMT
	}
 }


	quit

VP8	// Column post-processor - Variable: RRTAMT(1)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(1)="" S (V,VL)=""
	quit

VP9	// Column post-processor - Variable: RRTAMT(2)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(2)="" set (V,VL)=""
	quit

VP10	// Column post-processor - Variable: RRTAMT(3)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(3)="" set (V,VL)=""
	quit

VP11	// Column post-processor - Variable: RRTAMT(4)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(4)="" set (V,VL)=""
	quit

VP12	// Column post-processor - Variable: RRTAMT(5)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(5)="" set (V,VL)=""
	quit

VP13	// Column post-processor - Variable: RRTAMT(6)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(6)="" set (V,VL)=""
	quit

VP14	// Column post-processor - Variable: RRTAMT(7)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(7)="" set (V,VL)=""
	quit

VP15	// Column post-processor - Variable: RRTAMT(8)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(8)="" set (V,VL)=""
	quit

VP16	// Column post-processor - Variable: RRTAMT(9)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(9)="" set (V,VL)=""
	quit

VP17	// Column post-processor - Variable: RRTAMT(10)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(10)="" set (V,VL)=""
	quit

VP18	// Column post-processor - Variable: RRTAMT(11)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(11)="" set (V,VL)=""
	quit

VP19	// Column post-processor - Variable: RRTAMT(12)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(12)="" set (V,VL)=""
	quit

VP20	// Column post-processor - Variable: RRTAMT(13)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(13)="" set (V,VL)=""

	quit

VP21	// Column post-processor - Variable: RRTAMT(14)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(14)="" set (V,VL)=""

	quit

VP22	// Column post-processor - Variable: RRTAMT(15)

 type public Number TPTAMTID
 type public String V,VL
 if TPTAMTID(15)="" set (V,VL)=""
	quit

VP23	// Column post-processor - Variable: RRTAMT(16)

 type public Number TPTAMTID()
 type public String V,VL

 if TPTAMTID(16)="" set (V,VL)=""

	quit

VP24	// Column post-processor - Variable: RRTAMT(17)

 type public Number TPTAMTID()
 type public String V,VL

 if TPTAMTID(17)="" set (V,VL)=""

	quit

VP25	// Column post-processor - Variable: RRTAMT(18)

 type public Number TPTAMTID()
 type public String V,VL

 if TPTAMTID(18)="" set (V,VL)=""
	quit

VP26	// Column post-processor - Variable: RRTAMT(19)

 type public Number TPTAMTID()
 type public String V,VL

 if TPTAMTID(19)="" set (V,VL)=""
	quit

VP27	// Column post-processor - Variable: RRTAMT

 type public Number RCTAMT,RPTAMT,TOTCONT,RRTAMT

 set TOTCONT=RPTAMT+RCTAMT+RRTAMT

	quit
