BCHLNCAP //Batch BCHLNCAP - Capitalize Interest Due
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:08 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHLNCAP Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHLNCAP")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHLNCAP") quit
 do JOBMGR^BCHUTL(%FN,"BCHLNCAP",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHLNCAP")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHLNCAP","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHLNCAP",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHLNCAP",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHLNCAP","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHLNCAP",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	type public Boolean ER

        type RecordLN ln=Db.getRecord("LN","CID=:CID")
 
	if ln.icap < 1 quit

	do EXEC^CAPINT(%SystemDate, .ln, "1")

	if ln.vatintopt do UPDVATOFF(.ln)
	
	quit


public	EXTERN(RecordLN ln,Date %SystemDate)	// External entrypoint (called by UANTICLN)

	if ln.icap < 1 quit

	do EXEC^CAPINT(%SystemDate, .ln, "0")

	quit


public UPDVATOFF(RecordLN ln)

	type public String VATOFF(,,,,)

	type Number CC,TYPE
	type String CRCD,GLSC

	set CRCD=ln.crcd
	set TYPE=ln.type
	set GLSC=ln.glsc
	set CC=ln.cc

	if VATOFF(CRCD,TYPE,GLSC,CC).exists() do {

		type Number CRAMT,DRAMT
		type String LITERAL,X

		set LITERAL="VATOFF"
		if 'Db.isDefined("TMPBCHOFF","TJD,""VATINT"",%ProcessID,LITERAL,CRCD,TYPE,GLSC,CC") do {
			set X=VATOFF(CRCD,TYPE,GLSC,CC)
			do BDOFFSET^BCHSOURC("VATINT","VATOFF",CRCD,TYPE,GLSC,CC,X.piece("|",1),X.piece("|",3),X.piece("|",2),X.piece("|",4),X.piece("|",6))
			}

		set DRAMT=VATOFF(CRCD,TYPE,GLSC,CC,0).get()
		set CRAMT=VATOFF(CRCD,TYPE,GLSC,CC,1).get()
		if DRAMT do UPOFFSET^BCHSOURC("VATINT","VATOFF",CRCD,TYPE,GLSC,CC,0,DRAMT)
		if CRAMT do UPOFFSET^BCHSOURC("VATINT","VATOFF",CRCD,TYPE,GLSC,CC,1,CRAMT)
		}	

	quit

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type public Boolean ER
	type public String BRCD

	do SOURCE^BCHSOURC("BOFF","NEGAM",.%UserID,.BRCD,.%UserClass)

	// Interest capitalization teller not defined
	if BRCD.get().isNull(),%UserID.isNull() do Runtime.setErrMSG("UTBLSRC",1249) set %BatchExit=1 quit:ER

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("DISTINCT CID","DAYENDNEGAM","DAYENDNEGAM.TJD=:%SystemDate")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public String BRCD

	do SOURCE^BCHSOURC("BOFF","NEGAM",.%UserID,.BRCD,.%UserClass)

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	type public String BRCD

	// File accumulated VAT Interest offsets
	do OFFSET^TTXBLD(%SystemDate,BRCD,%UserID,"VATINT")

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
