ACNSEGFL(RecordACNSEG acnseg, String vpar, Boolean vparNorm) // ACNSEG - Account Segment Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 14:13 - joynerd
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (15)             02/12/2007
	// Journal File Definition (3)                 02/09/2007
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = acnseg.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar

	if %O = 0 do AUDIT^UCUTILN(acnseg,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(acnseg,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEGMENT").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ACNSEG",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACNSEG","CID = :acnseg.cid and SEGMENT = :acnseg.segment") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEGMENT

	type RecordACNSEG acnseg = Db.getRecord("ACNSEG","CID=:CID,SEGMENT=:SEGMENT")
	if (%ProcessMode = 2) do {
		do acnseg.setMode(2)

		do ACNSEGFL(acnseg,vpar)
	}
	else  do VINDEX(acnseg)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordACNSEG acnseg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACNSEG","CID = :acnseg.cid and SEGMENT = :acnseg.segment") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(acnseg)) S ^ACN(vobj(acnseg,-3),200,vobj(acnseg,-4))=vobj(acnseg)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.acnseg)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.acnseg) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordACNSEG acnseg

	if vpar["/INDEX/" do VINDEX(.acnseg)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.acnseg)               // Create journal entries

	// Allow global reference - Delete record
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	ZWI ^ACN(vobj(acnseg,-3),200,vobj(acnseg,-4))
	#ENDBYPASS
	quit


vreqn // Validate required data items

	type public RecordACNSEG acnseg

	if acnseg.cls.isNull() do vreqerr("CLS") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordACNSEG acnseg

	if acnseg.cid.isNull() do vreqerr("CID") quit
	if acnseg.segment.isNull() do vreqerr("SEGMENT") quit

		if vx("CLS").exists(),acnseg.cls.isNull() do vreqerr("CLS") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACNSEG","MSG",1767,"ACNSEG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordACNSEG acnseg

	set X = acnseg.cid if 'X.isNull(),'Db.isDefined("ACN","X") set vRM = $$^MSG(1485,X) do vdderr("CID", vRM) quit
	set X = acnseg.segment if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("SEGMENT", vRM) quit
	set X = acnseg.bal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACNSEG.BAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = acnseg.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
	set X = acnseg.ichld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHLD", vRM) quit
	set X = acnseg.ichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHND", vRM) quit
	if acnseg.index.length()>20 set vRM = $$^MSG(1076,20) do vdderr("INDEX", vRM) quit
	set X = acnseg.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[ACNSEG]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
	set X = acnseg.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
	if acnseg.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
	set X = acnseg.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ACNSEG.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if acnseg.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
	set X = acnseg.segmdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGMDT", vRM) quit
	set X = acnseg.segstart if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SEGSTART", vRM) quit
	if acnseg.segterm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("SEGTERM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACNSEG","MSG",979,"ACNSEG."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordACNSEG acnseg)	//ACNSEG Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.acnseg)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.acnseg)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.acnseg)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.acnseg)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.acnseg)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.acnseg)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordACNSEG acnseg)	// HIST_DELETE  Table HIST  History of Record Deletion for ACNSEG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=acnseg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3477,acnseg.segment)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordACNSEG acnseg)	// HIST_INSERT  Table HIST  History for New Record in ACNSEG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=acnseg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(3475,acnseg.segment)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordACNSEG acnseg)	// HIST_UPDATE  Table HIST  History on Update of ACNSEG

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=acnseg.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(acnseg.cid_","_acnseg.segment,"ACNSEG",vdi,vold,vnew,$G(EFD),$$^MSG(3476,acnseg.segment),vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordACNSEG acnseg) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("INDEX").exists() do vi1(.acnseg)
		if vx("INTMAT").exists() do vi2(.acnseg)
	}
	do vi1(.acnseg)
	do vi2(.acnseg)

	quit
	

vi1(RecordACNSEG acnseg) // Maintain INDEXSEG index entries (Segment Interest Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acnseg.index
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acnseg.cid
	type String v4 = acnseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(acnseg,-3),200,vobj(acnseg,-4)))#2,'$D(^XREF("INDEXSEG",v2,v3,v4)) do vidxerr("INDEXSEG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("INDEXSEG",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INDEX").exists() set v2=vx("INDEX").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("INDEXSEG",v2,v3,v4)
	#ENDBYPASS
	quit

vi2(RecordACNSEG acnseg) // Maintain MATRIXSG index entries (Segment Interest Matrix)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acnseg.intmat
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acnseg.cid
	type String v4 = acnseg.segment

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
		#BYPASS
		if $D(^ACN(vobj(acnseg,-3),200,vobj(acnseg,-4)))#2,'$D(^XREF("MATATSEG",v2,v3,v4)) do vidxerr("MATRIXSG")
		#ENDBYPASS
		}

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	if %O<2 set ^XREF("MATATSEG",v2,v3,v4)="" 
	#ENDBYPASS
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INTMAT").exists() set v2=vx("INTMAT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
	#BYPASS
	kill ^XREF("MATATSEG",v2,v3,v4)
	#ENDBYPASS
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("ACNSEG")

	while ds.next() do {
		type RecordACNSEG acnseg=ds.getRecord("ACNSEG")
		if vlist.contains("VINDEX") do VINDEX(.acnseg) quit
		if vlist.contains("INDEXSEG") do vi1(.acnseg)
		if vlist.contains("MATRIXSG") do vi2(.acnseg)
	}

	quit


public VIDXBLD1(RecordACNSEG acnseg, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.acnseg) quit
	if vlist.contains("INDEXSEG") do vi1(.acnseg)
	if vlist.contains("MATRIXSG") do vi2(.acnseg)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("ACNSEG","MSG",1225,"ACNSEG."_di)

	quit


vkchged // Access key changed

	type public RecordACNSEG acnseg

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEGMENT").exists() set vux("SEGMENT") = vx("SEGMENT")
	do vkey(1) set voldkey = acnseg.cid_","_acnseg.segment // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = acnseg.cid_","_acnseg.segment // Copy new keys into object
	type RecordACNSEG vnewrec = acnseg.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ACNSEG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordACNSEG acnseg

	if vux("CID").exists() set acnseg.cid = vux("CID").piece("|",i)
	if vux("SEGMENT").exists() set acnseg.segment = vux("SEGMENT").piece("|",i)
	quit

VIDXPGM()	quit "ACNSEGFL"	// Location of index program

