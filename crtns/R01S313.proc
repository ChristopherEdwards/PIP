R01S313	// SCA316 - Teller/Branch Summary Activity Report
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:47 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String BRCD,IEC,INQ,INTERVAL,IRV,OPT,POSITION,STRT,UID
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ

	set RID="SCA316"
	set RN="Teller/Branch Summary Activity Report"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("IO")=$$IO^SCATAB

	set %READ="IO/REQ,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String BRCD,IEC,INQ,INTERVAL,IRV,OPT,POSITION,STRT,UID
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String %TIM,ALLT,BTTOT,CONAM,DATE,IECT,INQT,IRVT,LIN1,LIN2,RID,RN,STPP,VL,VLOF,VRF(),VSTATS(),vCOL,vHDG,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA316",RN="Teller/Branch Summary Activity Report"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA316","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()

	set vCOL="[TMPRPT3]KEY3#1#5"

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO(),VWHERE


		set VWHERE=""
		set VWHERE=VWHERE_"TMPRPT1.PID=:%ProcessID AND TMPRPT2.PID=:%ProcessI"
		set VWHERE=VWHERE_"D AND TMPRPT3.PID=:%ProcessID"
		set VBNRINFO("WHERE")=VWHERE

		set VBNRINFO("DESC")="Teller/Branch Summary Activity Report"
		set VBNRINFO("PGM")="R01S313"
		set VBNRINFO("RID")="SCA316"
		set VBNRINFO("TABLES")="TMPRPT3,TMPRPT2,TMPRPT1"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,TMPRPT3]PID"
		set VBNRINFO("ORDERBY",2)="[SYSDEV,TMPRPT3]KEY1"
		set VBNRINFO("ORDERBY",3)="[SYSDEV,TMPRPT3]KEY2"
		set VBNRINFO("ORDERBY",4)="[SYSDEV,TMPRPT3]KEY3"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:4 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	set vh(0)=0

	// Run report directly
	do VINILAST
	type ResultSet rwrs=Db.select("TMPRPT3.PID,TMPRPT3.KEY1,TMPRPT3.KEY2,TMPRPT3.KEY3,TMPRPT2.KEY2,TMPRPT1.DATA,TMPRPT3.DATA,TMPRPT2.DATA,TMPRPT1.KEY1","TMPRPT3,TMPRPT2,TMPRPT1","TMPRPT1.PID=:%ProcessID AND TMPRPT2.PID=:%ProcessID AND TMPRPT3.PID=:%ProcessID","TMPRPT3.PID,TMPRPT3.KEY1,TMPRPT3.KEY2,TMPRPT3.KEY3","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT(0)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1,vovc2,vovc3,vovc4
	set vovc1="",vovc2="",vovc3="",vovc4=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1,vovc2,vc2,vovc3,vc3,vovc4,vc4
	set vovc1=vc1,vovc2=vc2,vovc3=vc3,vovc4=vc4
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9
	set vc1=V.piece($C(9),1)			// TMPRPT3.PID
	set vc2=V.piece($C(9),2)			// TMPRPT3.KEY1
	set vc3=V.piece($C(9),3)			// TMPRPT3.KEY2
	set vc4=V.piece($C(9),4)			// TMPRPT3.KEY3
	set vc5=V.piece($C(9),5)			// TMPRPT2.KEY2
	set vc6=V.piece($C(9),6)			// TMPRPT1.DATA
	set vc7=V.piece($C(9),7)			// TMPRPT3.DATA
	set vc8=V.piece($C(9),8)			// TMPRPT2.DATA
	set vc9=V.piece($C(9),9)			// TMPRPT1.KEY1
	quit

	// User-defined pre/post-processor code

VPREBQ	// Pre-processor (before query)

 //Incoming=BRCD,IEC,INQ,IRV,INTERVAL,OPT,POSITION,STRT,UID
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0,vs(2)=0,vs(3)=0,vs(4)=0
	if 'VFMQ do VSUM
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	if VRWOPT("NODTL").get() set vskp(3)=1,vskp(4)=1	// Skip detail
	do VBREAK
	do VSUM quit:VFMQ

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	if 'vskp(4).get() do VDTL4 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(4)
	type Public String vc1,vovc1,vc2,vovc2,vc3,vovc3,vc4,vovc4
	type Number vb1,vb2,vb3,vb4
	set (vb1,vb2,vb3,vb4)=0
	if vb1!(+vovc1'=+vc1) set vs(2)=0,vh(2)=0,VD(1)=0,vb2=1,vb3=1,vb4=1
	if vb2!(vovc2'=vc2) set vs(3)=0,vh(3)=0,VD(2)=0,vb3=1,vb4=1
	if vb3!(vovc3'=vc3) set vs(4)=0,vh(4)=0,VD(3)=0,vb4=1,VH0=1
	quit

VSUM	// Report Group Summary
	type Public Number VFMQ,vs()
	if 'vs(4) set vs(4)=1 do VSUM4 quit:VFMQ  do stat^DBSRWUTL(4)
	if 'vs(3) set vs(3)=1 do VSUM3 quit:VFMQ  do stat^DBSRWUTL(3)
	if 'vs(2) set vs(2)=1 do stat^DBSRWUTL(2)
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(4)=VT(4)+1
	quit

VSUM3	// Summary
	type public String %TIM,ALLT,BRCD,BTTOT,DATE,I,IEC,IECT,INQ,INQT,INTERVAL,IOSL,IRV,IRVT,LIN1,LIN2,OPT,POSITION,STPP,STRT,UID,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if 'VT(3) quit
	if VLC+1>IOSL do VHDG0 quit:VFMQ

	set VL="           "_"============================================================================================================="
	set VL=VL_$J("",121-VL.length())_"=========="
	do VOM
	set VL="DATE"
	do VP1 quit:VFMQ!verror.get()  set V=$J(ALL(1),8) do VP2 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V
	set V=$J(ALL(2),8) do VP3 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V
	set V=$J(ALL(3),8) do VP4 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(ALL(4),8) do VP5 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V
	set V=$J(ALL(5),8) do VP6 quit:VFMQ!verror.get()
	set VL=VL_$J("",47-VL.length())_V
	set V=$J(ALL(6),8) do VP7 quit:VFMQ!verror.get()
	set VL=VL_$J("",56-VL.length())_V
	set V=$J(ALL(7),8) do VP8 quit:VFMQ!verror.get()
	set VL=VL_$J("",65-VL.length())_V
	set V=$J(ALL(8),8) do VP9 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	set V=$J(ALL(9),8) do VP10 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V
	set V=$J(ALL(10),8) do VP11 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	set V=$J(ALL(11),8) do VP12 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V
	set V=$J(ALL(12),8) do VP13 quit:VFMQ!verror.get()
	set VL=VL_$J("",110-VL.length())_V
	do VP14 quit:VFMQ!verror.get()  set V=$J(ALLT,10)
	set VL=VL_$J("",121-VL.length())_V
	do VOM
	quit

VDTL4	// Detail
	type public String %TIM,ALLT,BRCD,BTTOT,DATE,IEC,IECT,INQ,INQT,INTERVAL,IOSL,IRV,IRVT,LIN1,LIN2,OPT,POSITION,STPP,STRT,UID,V,VD(),VFMQ,VL,VLC,VO,VOFFLG,VPN,VRG,VT(),vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if VLC+3>IOSL do VHDG0 quit:VFMQ

	set VL=$E(vc4,1,5)
	set VL=VL_$J("",6-VL.length())_"CR"
	do VP15 quit:VFMQ!verror.get()  set V=$J(SLT(11),8) do VP16 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V
	set V=$J(SLT(21),8) do VP17 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V
	set V=$J(SLT(31),8) do VP18 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(SLT(41),8) do VP19 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V
	set V=$J(SLT(51),8) do VP20 quit:VFMQ!verror.get()
	set VL=VL_$J("",47-VL.length())_V
	set V=$J(SLT(61),8) do VP21 quit:VFMQ!verror.get()
	set VL=VL_$J("",56-VL.length())_V
	set V=$J(SLT(71),8) do VP22 quit:VFMQ!verror.get()
	set VL=VL_$J("",65-VL.length())_V
	set V=$J(SLT(81),8) do VP23 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	set V=$J(SLT(91),8) do VP24 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V
	set V=$J(SLT(101),8) do VP25 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	set V=$J(SLT(111),8) do VP26 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V
	set V=$J(SLT(121),8) do VP27 quit:VFMQ!verror.get()
	set VL=VL_$J("",110-VL.length())_V
	set VL=VL_$J("",121-VL.length())_$J(SLTOT(1),10)
	do VOM
	set VL="      "_"DR"
	set V=$J(SLT(10),8) do VP28 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V
	set V=$J(SLT(20),8) do VP29 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V
	set V=$J(SLT(30),8) do VP30 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(SLT(40),8) do VP31 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V
	set V=$J(SLT(50),8) do VP32 quit:VFMQ!verror.get()
	set VL=VL_$J("",47-VL.length())_V
	set V=$J(SLT(60),8) do VP33 quit:VFMQ!verror.get()
	set VL=VL_$J("",56-VL.length())_V
	set V=$J(SLT(70),8) do VP34 quit:VFMQ!verror.get()
	set VL=VL_$J("",65-VL.length())_V
	set V=$J(SLT(80),8) do VP35 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	set V=$J(SLT(90),8) do VP36 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V
	set V=$J(SLT(100),8) do VP37 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	set V=$J(SLT(110),8) do VP38 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V
	set V=$J(SLT(120),8) do VP39 quit:VFMQ!verror.get()
	set VL=VL_$J("",110-VL.length())_V
	set VL=VL_$J("",121-VL.length())_$J(SLTOT(0),10)
	do VOM
	do VP40 quit:VFMQ!verror.get()  set V=$E(OPT,1,1) set VL=V
	do VOM
	quit

VSUM4	// Summary
	type public String %TIM,ALLT,BRCD,BTTOT,DATE,I,IEC,IECT,INQ,INQT,INTERVAL,IOSL,IRV,IRVT,LIN1,LIN2,OPT,POSITION,STPP,STRT,UID,V,VFMQ,VL,VLC,VO,VOFFLG,VPN,VT(),VX(),vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,verror,vh(),vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate

	if 'VT(4) quit
	if VLC+7>IOSL do VHDG0 quit:VFMQ

	set VL="     "_"ERR"
	do VP41 quit:VFMQ!verror.get()  set V=$J(IEC(1),8) do VP42 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V
	set V=$J(IEC(2),8) do VP43 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V
	set V=$J(IEC(3),8) do VP44 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(IEC(4),8) do VP45 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V
	set V=$J(IEC(5),8) do VP46 quit:VFMQ!verror.get()
	set VL=VL_$J("",47-VL.length())_V
	set V=$J(IEC(6),8) do VP47 quit:VFMQ!verror.get()
	set VL=VL_$J("",56-VL.length())_V
	set V=$J(IEC(7),8) do VP48 quit:VFMQ!verror.get()
	set VL=VL_$J("",65-VL.length())_V
	set V=$J(IEC(8),8) do VP49 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	set V=$J(IEC(9),8) do VP50 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V
	set V=$J(IEC(10),8) do VP51 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	set V=$J(IEC(11),8) do VP52 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V
	set V=$J(IEC(12),8) do VP53 quit:VFMQ!verror.get()
	set VL=VL_$J("",110-VL.length())_V
	set V=$J(IECT,10) do VP54 quit:VFMQ!verror.get()
	set VL=VL_$J("",121-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP55 quit:VFMQ!verror.get()  set V=$E(LIN1,1,1) do VP56 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"REV"
	set V=$J(IRV(1),8) do VP57 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V
	set V=$J(IRV(2),8) do VP58 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V
	set V=$J(IRV(3),8) do VP59 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(IRV(4),8) do VP60 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V
	set V=$J(IRV(5),8) do VP61 quit:VFMQ!verror.get()
	set VL=VL_$J("",47-VL.length())_V
	set V=$J(IRV(6),8) do VP62 quit:VFMQ!verror.get()
	set VL=VL_$J("",56-VL.length())_V
	set V=$J(IRV(7),8) do VP63 quit:VFMQ!verror.get()
	set VL=VL_$J("",65-VL.length())_V
	set V=$J(IRV(8),8) do VP64 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	set V=$J(IRV(9),8) do VP65 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V
	set V=$J(IRV(10),8) do VP66 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	set V=$J(IRV(11),8) do VP67 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V
	set V=$J(IRV(12),8) do VP68 quit:VFMQ!verror.get()
	set VL=VL_$J("",110-VL.length())_V
	set V=$J(IRVT,10) do VP69 quit:VFMQ!verror.get()
	set VL=VL_$J("",121-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	do VP70 quit:VFMQ!verror.get()  set V=$E(LIN2,1,1) do VP71 quit:VFMQ!verror.get()  set VL=V
	if 'VL.translate(" ").isNull() do VOM
	set VL="     "_"INQ"
	set V=$J(INQ(1),8) do VP72 quit:VFMQ!verror.get()
	set VL=VL_$J("",11-VL.length())_V
	set V=$J(INQ(2),8) do VP73 quit:VFMQ!verror.get()
	set VL=VL_$J("",20-VL.length())_V
	set V=$J(INQ(3),8) do VP74 quit:VFMQ!verror.get()
	set VL=VL_$J("",29-VL.length())_V
	set V=$J(INQ(4),8) do VP75 quit:VFMQ!verror.get()
	set VL=VL_$J("",38-VL.length())_V
	set V=$J(INQ(5),8) do VP76 quit:VFMQ!verror.get()
	set VL=VL_$J("",47-VL.length())_V
	set V=$J(INQ(6),8) do VP77 quit:VFMQ!verror.get()
	set VL=VL_$J("",56-VL.length())_V
	set V=$J(INQ(7),8) do VP78 quit:VFMQ!verror.get()
	set VL=VL_$J("",65-VL.length())_V
	set V=$J(INQ(8),8) do VP79 quit:VFMQ!verror.get()
	set VL=VL_$J("",74-VL.length())_V
	set V=$J(INQ(9),8) do VP80 quit:VFMQ!verror.get()
	set VL=VL_$J("",83-VL.length())_V
	set V=$J(INQ(10),8) do VP81 quit:VFMQ!verror.get()
	set VL=VL_$J("",92-VL.length())_V
	set V=$J(INQ(11),8) do VP82 quit:VFMQ!verror.get()
	set VL=VL_$J("",101-VL.length())_V
	set V=$J(INQ(12),8) do VP83 quit:VFMQ!verror.get()
	set VL=VL_$J("",110-VL.length())_V
	set V=$J(INQT,10) do VP84 quit:VFMQ!verror.get()
	set VL=VL_$J("",121-VL.length())_V
	if 'VL.translate(" ").isNull() do VOM
	set VL="           "_"-------------------------------------------------------------------------------------------------------------"
	set VL=VL_$J("",121-VL.length())_"----------"
	do VOM
	set VL="BRANCH "
	set VL=VL_$J("",11-VL.length())_$J(BRTOT(1),8)
	set VL=VL_$J("",20-VL.length())_$J(BRTOT(2),8)
	set VL=VL_$J("",29-VL.length())_$J(BRTOT(3),8)
	set VL=VL_$J("",38-VL.length())_$J(BRTOT(4),8)
	set VL=VL_$J("",47-VL.length())_$J(BRTOT(5),8)
	set VL=VL_$J("",56-VL.length())_$J(BRTOT(6),8)
	set VL=VL_$J("",65-VL.length())_$J(BRTOT(7),8)
	set VL=VL_$J("",74-VL.length())_$J(BRTOT(8),8)
	set VL=VL_$J("",83-VL.length())_$J(BRTOT(9),8)
	set VL=VL_$J("",92-VL.length())_$J(BRTOT(10),8)
	set VL=VL_$J("",101-VL.length())_$J(BRTOT(11),8)
	set VL=VL_$J("",110-VL.length())_$J(BRTOT(12),8)
	set VL=VL_$J("",121-VL.length())_$J(BTTOT,10)
	do VOM
	set VL="" do VOM
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,ALLT,BRCD,BTTOT,CONAM,DATE,IEC,IECT,INQ,INQT,INTERVAL,IRV,IRVT,LIN1,LIN2,OPT,POSITION,RID,RN,STPP,STRT,UID,VL,vc1,vc2,vc3,vc4,vc5,vc6,vc7,vc8,vc9,vovc1,vovc2,vovc3,vovc4,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+9,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E($G(CONAM),1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	set VL="  "_"DATE:"
	do VP85 quit:VFMQ!verror.get()  set V=$E(DATE,1,10)
	set VL=VL_$J("",8-VL.length())_V
	do VOM
	set VL="BRANCH:"
	set VL=VL_$J("",8-VL.length())_$E(vc5,1,10)
	set VL=VL_$J("",104-VL.length())_"START TIME:"
	set VL=VL_$J("",116-VL.length())_$E(STRT,1,9)
	do VOM
	set VL="TELLER:"
	set VL=VL_$J("",8-VL.length())_$E(UID,1,20)
	set VL=VL_$J("",62-VL.length())_"INTERVAL:"
	set VL=VL_$J("",73-VL.length())_$E(INTERVAL,1,12)
	set VL=VL_$J("",103-VL.length())_"ENDING TIME:"
	do VP86 quit:VFMQ!verror.get()  set V=$E(STPP,1,10)
	set VL=VL_$J("",116-VL.length())_V
	do VOM
	set VL="=========================================================== ENDING TIME INTERVAL =================================================="
	do VOM
	set VL="GROUP"
	set VL=VL_$J("",14-VL.length())_$E(INTERVAL(1),1,8)
	set VL=VL_$J("",23-VL.length())_$E(INTERVAL(2),1,8)
	set VL=VL_$J("",32-VL.length())_$E(INTERVAL(3),1,8)
	set VL=VL_$J("",41-VL.length())_$E(INTERVAL(4),1,8)
	set VL=VL_$J("",50-VL.length())_$E(INTERVAL(5),1,8)
	set VL=VL_$J("",59-VL.length())_$E(INTERVAL(6),1,8)
	set VL=VL_$J("",68-VL.length())_$E(INTERVAL(7),1,8)
	set VL=VL_$J("",77-VL.length())_$E(INTERVAL(8),1,8)
	set VL=VL_$J("",86-VL.length())_$E(INTERVAL(9),1,8)
	set VL=VL_$J("",95-VL.length())_$E(INTERVAL(10),1,8)
	set VL=VL_$J("",104-VL.length())_$E(INTERVAL(11),1,8)
	set VL=VL_$J("",113-VL.length())_$E(INTERVAL(12),1,8)
	set VL=VL_$J("",125-VL.length())_"TOTALS"
	do VOM
	set VL="           "_"------------------------------------------------------------------------------------------------------------------------"
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - Variable: ALL(1)

	type public String vc6
	type public Number ALL(), ALLT, POSITION(,,)

	type String DATA
	type Number END, POS, START

	set DATA = vc6
 
	// Parse DATA to populate display arrays for system date-level

	set START = POSITION("ALLT", "DTL") + 1
	set END = START + 11
	for POS = START:1:END set ALL(POS) = +DATA.piece("|", POS)
	set ALLT = +DATA.piece("|", POSITION("ALLT", "TOT"))
	quit

VP2	// Column post-processor - Variable: ALL(1)

	type public String INTERVAL(), V

	if INTERVAL(1).isNull() set V = ""
	quit

VP3	// Column post-processor - Variable: ALL(2)

	type public String INTERVAL(), V

	if INTERVAL(2).isNull() set V = ""
	quit

VP4	// Column post-processor - Variable: ALL(3)

	type public String INTERVAL(), V

	if INTERVAL(3).isNull() set V = ""
	quit

VP5	// Column post-processor - Variable: ALL(4)

	type public String INTERVAL(), V

	if INTERVAL(4).isNull() set V = ""
	quit

VP6	// Column post-processor - Variable: ALL(5)

	type public String INTERVAL(),V

	if INTERVAL(5).isNull() set V = ""
	quit

VP7	// Column post-processor - Variable: ALL(6)

	type public String INTERVAL(), V

	if INTERVAL(6).isNull() set V = ""
	quit

VP8	// Column post-processor - Variable: ALL(7)

	type public String INTERVAL(), V

	if INTERVAL(7).isNull() set V = ""
	quit

VP9	// Column post-processor - Variable: ALL(8)

	type public String INTERVAL(),V

	if INTERVAL(8).isNull() set V = ""
	quit

VP10	// Column post-processor - Variable: ALL(9)

	type public String INTERVAL(), V

	if INTERVAL(9).isNull() set V = ""
	quit

VP11	// Column post-processor - Variable: ALL(10)

	type public String INTERVAL(), V

	if INTERVAL(10).isNull() set V = ""
	quit

VP12	// Column post-processor - Variable: ALL(11)

	type public String INTERVAL(), V

	if INTERVAL(11).isNull() set V = ""
	quit

VP13	// Column post-processor - Variable: ALL(12)

	type public String INTERVAL(), V

	if INTERVAL(12).isNull() set V = ""
	quit

VP14	// Column pre-processor - Variable: ALLT


	quit

VP15	// Column pre-processor - Variable: SLT(11)

	type public String vc7
	type public Number LAST, SLT(), SLTOT(), POSITION(,,)

	type String DATA
	type Number END, POS, START

	set DATA = vc7

	// Parse DATA to populate display arrays for group-level

	set START = POSITION("DRS", "DTL") + 1
	set END = POSITION("CRS", "DTL")
	for POS = START:1:END do {
		set SLT(POS * 10) = +DATA.piece("|", POS)
		set SLT((POS * 10) + 1) = +DATA.piece("|", POS + LAST)
	}
	set SLTOT(0) = +DATA.piece("|", POSITION("DRS", "TOT"))
	set SLTOT(1) = +DATA.piece("|", POSITION("CRS", "TOT"))
	quit

VP16	// Column post-processor - Variable: SLT(11)

	type public String INTERVAL(), V

	if INTERVAL(1).isNull() set V = ""
	quit

VP17	// Column post-processor - Variable: SLT(21)

	type public String INTERVAL(), V

	if INTERVAL(2).isNull() set V = ""
	quit

VP18	// Column post-processor - Variable: SLT(31)

	type public String INTERVAL(), V

	if INTERVAL(3).isNull() set V = ""
	quit

VP19	// Column post-processor - Variable: SLT(41)

	type public String INTERVAL(), V

	if INTERVAL(4).isNull() set V = ""
	quit

VP20	// Column post-processor - Variable: SLT(51)

	type public String INTERVAL(), V

	if INTERVAL(5).isNull() set V = ""
	quit

VP21	// Column post-processor - Variable: SLT(61)

	type public String INTERVAL(), V

	if INTERVAL(6).isNull() set V = ""
	quit

VP22	// Column post-processor - Variable: SLT(71)

	type public String INTERVAL(), V

	if INTERVAL(7).isNull() set V = ""
	quit

VP23	// Column post-processor - Variable: SLT(81)

	type public String INTERVAL(), V

	if INTERVAL(8).isNull() set V = ""
	quit

VP24	// Column post-processor - Variable: SLT(91)

	type public String INTERVAL(), V

	if INTERVAL(9).isNull() set V = ""
	quit

VP25	// Column post-processor - Variable: SLT(101)

	type public String INTERVAL(), V

	if INTERVAL(10).isNull() set V = ""
	quit

VP26	// Column post-processor - Variable: SLT(111)

	type public String INTERVAL(), V

	if INTERVAL(11).isNull() set V=""
	quit

VP27	// Column post-processor - Variable: SLT(121)

	type public String INTERVAL(), V

	if INTERVAL(12).isNull() set V = ""
	quit

VP28	// Column post-processor - Variable: SLT(10)

	type public String INTERVAL(), V

	if INTERVAL(1).isNull() set V = ""
	quit

VP29	// Column post-processor - Variable: SLT(20)

	type public String INTERVAL(), V

	if INTERVAL(2).isNull() set V = ""
	quit

VP30	// Column post-processor - Variable: SLT(30)

	type public String INTERVAL(), V

	if INTERVAL(3).isNull() set V = ""
	quit

VP31	// Column post-processor - Variable: SLT(40)

	type public String INTERVAL(), V

	if INTERVAL(4).isNull() set V = ""
	quit

VP32	// Column post-processor - Variable: SLT(50)

	type public String INTERVAL(), V

	if INTERVAL(5).isNull() set V = ""
	quit

VP33	// Column post-processor - Variable: SLT(60)

	type public String INTERVAL(), V

	if INTERVAL(6).isNull() set V = ""
	quit

VP34	// Column post-processor - Variable: SLT(70)

	type public String INTERVAL(), V

	if INTERVAL(7).isNull() set V = ""
	quit

VP35	// Column post-processor - Variable: SLT(80)

	type public String INTERVAL(), V

	if INTERVAL(8).isNull() set V = ""
	quit

VP36	// Column post-processor - Variable: SLT(90)

	type public String INTERVAL(), V

	if INTERVAL(9).isNull() set V = ""
	quit

VP37	// Column post-processor - Variable: SLT(100)

	type public String INTERVAL(), V

	if INTERVAL(10).isNull() set V = ""
	quit

VP38	// Column post-processor - Variable: SLT(110)

	type public String INTERVAL(), V

	if INTERVAL(11).isNull() set V = ""
	quit

VP39	// Column post-processor - Variable: SLT(120)

	type public String INTERVAL(), V

	if INTERVAL(12).isNull() set V = ""
	quit

VP40	// Column pre-processor - Variable: OPT

	type public String OPT

	set OPT=$C(1)
	quit

VP41	// Column pre-processor - Variable: IEC(1)

	type public String vc8
	type public Number BRTOT(), BTTOT, IEC(), IECT, INQ(), INQT
	type public Number IRV(), IRVT, LAST, POSITION(,,)

	type String DATA
	type Number END, POS, START

	set DATA = vc8
 
	// Parse DATA to populate display arrays for branch-level

	set START = POSITION("ECS", "DTL") + 1
	set END = START + 11
	for POS = START:1:END set IEC(POS) = +DATA.piece("|", POS)
	set IECT = +DATA.piece("|", POSITION("ECS", "TOT"))
 
	set START = POSITION("REVS", "DTL") + 1
	set END = START + 11
	for POS = START:1:END set IRV(POS - START + 1) = +DATA.piece("|", POS)
	set IRVT = +DATA.piece("|", POSITION("REVS", "TOT"))
 
	set START = POSITION("INQS", "DTL") + 1
	set END = START + 11
	for POS = START:1:END set INQ(POS - START + 1) = +DATA.piece("|", POS)
	set INQT = +DATA.piece("|", POSITION("INQS", "TOT"))
 
	set START = POSITION("BRTS", "DTL") + 1
	set END = START + 11
	for POS = START:1:END set BRTOT(POS - START + 1) = +DATA.piece("|", POS)
	set BTTOT = +DATA.piece("|", POSITION("BRTS", "TOT"))
	quit

VP42	// Column post-processor - Variable: IEC(1)

	type public String INTERVAL(), V

	if INTERVAL(1).isNull() set V = ""
	quit

VP43	// Column post-processor - Variable: IEC(2)

	type public String INTERVAL(), V

	if INTERVAL(2).isNull() set V = ""
	quit

VP44	// Column post-processor - Variable: IEC(3)

	type public String INTERVAL(), V

	if INTERVAL(3).isNull() set V = ""
	quit

VP45	// Column post-processor - Variable: IEC(4)

	type public String INTERVAL(), V

	if INTERVAL(4).isNull() set V = ""
	quit

VP46	// Column post-processor - Variable: IEC(5)

	type public String INTERVAL(), V

	if INTERVAL(5).isNull() set V = ""
	quit

VP47	// Column post-processor - Variable: IEC(6)

	type public String INTERVAL(), V

	if INTERVAL(6).isNull() set V = ""
	quit

VP48	// Column post-processor - Variable: IEC(7)

	type public String INTERVAL(), V

	if INTERVAL(7).isNull() set V = ""
	quit

VP49	// Column post-processor - Variable: IEC(8)

	type public String INTERVAL(), V

	if INTERVAL(8).isNull() set V = ""
	quit

VP50	// Column post-processor - Variable: IEC(9)

	type public String INTERVAL(), V

	if INTERVAL(9).isNull() set V = ""
	quit

VP51	// Column post-processor - Variable: IEC(10)

	type public String INTERVAL(), V

	if INTERVAL(10).isNull() set V = ""
	quit

VP52	// Column post-processor - Variable: IEC(11)

	type public String INTERVAL(), V

	if INTERVAL(11).isNull() set V = ""
	quit

VP53	// Column post-processor - Variable: IEC(12)

	type public String INTERVAL(), V

	if INTERVAL(12).isNull() set V = ""
	quit

VP54	// Column post-processor - Variable: IECT

	type public Boolean IEC, V, VL

	if 'IEC set (V, VL) = ""
	quit

VP55	// Column pre-processor - Variable: LIN1

	type public String LIN1

	set LIN1=$C(0)
	quit

VP56	// Column post-processor - Variable: LIN1

	type public Boolean IEC, INQ, IRV
	type public String V, VL

	if 'IEC ! ('IRV & ('INQ)) set (V, VL) = ""
	quit

VP57	// Column post-processor - Variable: IRV(1)

	type public String INTERVAL(), V

	if INTERVAL(1).isNull() set V = ""
	quit

VP58	// Column post-processor - Variable: IRV(2)

	type public String INTERVAL(), V

	if INTERVAL(2).isNull() set V = ""
	quit

VP59	// Column post-processor - Variable: IRV(3)

	type public String INTERVAL(), V

	if INTERVAL(3).isNull() set V = ""
	quit

VP60	// Column post-processor - Variable: IRV(4)

	type public String INTERVAL(),V

	if INTERVAL(4).isNull() set V = ""
	quit

VP61	// Column post-processor - Variable: IRV(5)

	type public String INTERVAL(), V

	if INTERVAL(5).isNull() set V = ""
	quit

VP62	// Column post-processor - Variable: IRV(6)

	type public String INTERVAL(),V

	if INTERVAL(6).isNull() set V = ""
	quit

VP63	// Column post-processor - Variable: IRV(7)

	type public String INTERVAL(), V

	if INTERVAL(7).isNull() set V = ""
	quit

VP64	// Column post-processor - Variable: IRV(8)

	type public String INTERVAL(), V

	if INTERVAL(8).isNull() set V = ""
	quit

VP65	// Column post-processor - Variable: IRV(9)

	type public String INTERVAL(), V

	if INTERVAL(9).isNull() set V = ""
	quit

VP66	// Column post-processor - Variable: IRV(10)

	type public String INTERVAL(), V

	if INTERVAL(10).isNull() set V = ""
	quit

VP67	// Column post-processor - Variable: IRV(11)

	type public String INTERVAL(), V

	if INTERVAL(11).isNull() set V = ""
	quit

VP68	// Column post-processor - Variable: IRV(12)

	type public String INTERVAL(), V

	if INTERVAL(12).isNull() set V = ""
	quit

VP69	// Column post-processor - Variable: IRVT

	type public Boolean IRV, V, VL

	if 'IRV set (V, VL) = ""
	quit

VP70	// Column pre-processor - Variable: LIN2

	type public String LIN2

	set LIN2 = $C(0)
	quit

VP71	// Column post-processor - Variable: LIN2

	type public Boolean INQ, IRV
	type public String V, VL

	if 'IRV ! ('INQ) set (V, VL) = ""
	quit

VP72	// Column post-processor - Variable: INQ(1)

	type public String INTERVAL(), V

	if INTERVAL(1).isNull() set V = ""
	quit

VP73	// Column post-processor - Variable: INQ(2)

	type public String INTERVAL(), V

	if INTERVAL(2).isNull() set V = ""
	quit

VP74	// Column post-processor - Variable: INQ(3)

	type public String INTERVAL(), V

	if INTERVAL(3).isNull() set V = ""
	quit

VP75	// Column post-processor - Variable: INQ(4)

	type public String INTERVAL(), V

	if INTERVAL(4).isNull() set V = ""
	quit

VP76	// Column post-processor - Variable: INQ(5)

	type public String INTERVAL(), V

	if INTERVAL(5).isNull() set V = ""
	quit

VP77	// Column post-processor - Variable: INQ(6)

	type public String INTERVAL(), V

	if INTERVAL(6).isNull() set V = ""
	quit

VP78	// Column post-processor - Variable: INQ(7)

	type public String INTERVAL(), V

	if INTERVAL(7).isNull() set V = ""
	quit

VP79	// Column post-processor - Variable: INQ(8)

	type public String INTERVAL(), V

	if INTERVAL(8) set V=""
	quit

VP80	// Column post-processor - Variable: INQ(9)

	type public String INTERVAL(), V

	if INTERVAL(9).isNull() set V = ""
	quit

VP81	// Column post-processor - Variable: INQ(10)

	type public String INTERVAL(), V

	if INTERVAL(10).isNull() set V = ""
	quit

VP82	// Column post-processor - Variable: INQ(11)

	type public String INTERVAL(), V

	if INTERVAL(11).isNull() set V = ""
	quit

VP83	// Column post-processor - Variable: INQ(12)

	type public String INTERVAL(), V

	if INTERVAL(12).isNull() set V = ""
	quit

VP84	// Column post-processor - Variable: INQT

	type public Boolean INQ, V, VL

	if 'INQ set (V, VL) = ""
	quit

VP85	// Column pre-processor - Variable: DATE

	type public String vc9
	type public Date DATE

	set DATE = vc9

	set DATE = DATE.toString()
	quit

VP86	// Column pre-processor - Variable: STPP

	type public String %TN, %TS, STOP, STPP

	if STOP.isNull() set STPP = "" quit 
	set %TN = STOP set:%TN > 86400 %TN = 86400 do ^SCATIM1 set STPP = %TS
	quit
