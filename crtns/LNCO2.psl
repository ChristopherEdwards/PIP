LNCO2
	/*
		Loan Computed Operations - Part 2


	   ORIG:  Neal E. Gorman (5053) - 03/04/87
	
	---- Revision History ------------------------------------------------
	
	07/31/06 - KELLYP - CR 22048
		   Modified F and T sections to eliminate PRECEDENCE warnings.
	
	05/04/06 - SPR - 21048
		   Modified LTVC section to set the loan-to-value for the 
		   collateral. The collateral valuation is based on the 
		   lower of purchase price or value. If the price is lower
		   than value, then price should be added with total value.
		   Previously collateral value alone was considered.
	
	11/11/05 - ARPAVC - 18183
		   Modified section SCIF to return X as the correct number
		   of secondary CIF's found.  Previously this was
		   one greater than the actual amount.
		   
	08/02/05 - KUMARB - CR16684
		Modified section C1, changed the table name LNLCOM 
		to LN in Db.select

	05/06/05 - ARPAVC - 15570
		   Modified SNAM section to return if XLN14 is returned as null.
		   If that is the case, then no secondary CIF exists and continuing 
		   will result in a undefined error when getting CIF.
		   
		   Modified LTVC section to set variable COLVAL for addition to
		   the total.  Previously this only was set when the currency was 
		   different.
		   
	04/06/05 - KinI - 14385
		   Modified LTVC section to make it public and quit with LTVC 
		   value expected by LTVC^LNCDI.

	09/08/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.  Also modified section SCIF
		   to bring it in-line with current PSL standards.
		   
	05/12/03 - GRAY - 51351
		   Replaced PSAF sub-routine which was removed in error.

	03/25/03 - GRAY - 51349
		   Corrected undefined error in section COLL. 
	
	01/10/03 - CARROLLJ - 51349
		   Modified COLL section to correct undefined error when
		   creating a mortage account

	11/12/02 - CARROLLJ - 43583
		   PSL conversion cleanup.	


	01/09/02 - SCOTTC - 43583
		   Convert to PSL.  Remove history prior to 2000.
		   Remove sections "PSAF" & "FMATRB".  Nothing calls
		   them anymore.
	
	*/

	quit

public C(XCID)       // Commercial loan commitments
 
	new ARUF,AVLBAL,BAL,COMMITED,CCL,CPF,STAT,Z
	set XLN05=""
	/*
	All non-commitment loans (lowest level of each commitment) are
	loaded into Z(CID).  Now collate through Z and add up balances.
	*/

	do C1(XCID)

	set XCID=""
	for  set XCID=$O(Z(XCID)) quit:XCID=""  do {
		do C1(XCID)
		if Db.isDefined("LN","XCID") do {
			type RecordLN ln=Db.getRecord("LN","CID=:XCID")
			set data=ln.aruf_"|"_ln.bal_"|"_ln.stat_"|"_ln.cpf
			if CPF quit
			do AVLBAL^LNCO(,XCID)
			// Total balances
			set $P(XLN05,"|",1)=$P(XLN05,"|",1)+$S(ln.aruf:ln.bal-ln.udbal,1:ln.bal)
			// Total available balance
			set $P(XLN05,"|",2)=$P(XLN05,"|",2)+AVLBAL
			// Open
			if ln.stat'=4 set $P(XLN05,"|",3)=$P(XLN05,"|",3)+1
			// Closed accounts
			else  set $P(XLN05,"|",4)=$P(XLN05,"|",4)+1
			}
		}
	quit

C1(CCL) // Collate through LN to find loan commitments 

	new CID,ER
	set ER=0
	type ResultSet rs=Db.select("CID","LN","CCL=:CCL")
	if rs.isEmpty() quit
	while rs.next() do { quit:ER
	        set CID=rs.getCol(1)
		set Z(C)=0
		}
	quit


public T(CID) // Last Primary Transaction
	/*
	
	   INPUT:  
	   
	   .CID		Account ID		/TYP=N/REQ

	   RETURNS: 
	   
	   .XLN08	Computed LN item	/TYP=N

	
	*/
	quit:'$D(CID) 
	quit:CID="" 
	
	new B,TAMT
	set XLN08=""
	set ER=0
	type ResultSet rs=Db.select("TJD,ITC,ETC,TAMT,UID,TSEQ","HIST","CID=:CID and ITC IS NOT NULL","TSEQ DESC")
	while rs.next() do { if ($E(ITC)=0)!($E(ITC)=1) quit
		set ITC=rs.getCol(2)
		//  System date
		set B=$E(ITC,7) quit:'B
		set $P(XLN08,"|",4)=rs.getCol(1)
		//   Teller id (UID)
		set $P(XLN08,"|",3)=rs.getCol(5)
		//  Tran code
		set $P(XLN08,"|",2)=rs.getCol(3)
		set TAMT=rs.getCol(4)
		// Dollar amount
		set $P(XLN08,"|",1)=$P(TAMT,"#",1)
		}
	quit 
	

public F(CID) // First Primary Transaction
	/*
	
	   INPUT:  
	   
	   .CID		Account ID		/TYP=N/REQ

	   RETURNS: 
	   
	   .XLN26	Computed LN item	/TYP=N
	
	*/

	quit:'$D(CID) 
	quit:CID="" 
	
	new TAMT
	set XLN26=""
	set B=1
	set ER=0
	type ResultSet rs=Db.select("TJD,ETC,TAMT,UID","HIST","CID=:CID	and ITC is not null")
	if rs.isEmpty() quit B
	if rs.next() do { quit:ER
		set ITC=rs.getCol(2)
		set B=$E(ITC,7) quit:'B
		if ($E(ITC)=0)!($E(ITC)=1) do { 
			//  System date
			set $P(XLN26,"|",4)=rs.getCol(1)
			//   Teller id (UID)
			set $P(XLN26,"|",3)=rs.getCol(4)
			//  Tran code
			set $P(XLN26,"|",2)=rs.getCol(2)
			set TAMT=rs.getCol(3)
			// Dollar amount
			set $P(XLN26,"|",1)=$P(TAMT,"#",1)
			}
		if ($E(ITC)=0)!($E(ITC)=1) quit
		}
	quit 
	

SCIF(Number CID) // Secondary CIFs
	/*
	   INPUT:  
	   
	   .CID		Account ID		/TYP=N/REQ

	   RETURNS: 
	   
	   . XLN14	Secondary CIF		/TYP=S

	*/
	
	type Public String ER,XLN14
	type Public Number X
	
	type Number PACN,SACN
	
	set PACN=""

	type RecordLN ln=Db.getRecord("LN","CID=:CID")

	set PACN=ln.acn
	set SACN=""
	set XLN14=""
	set X=0
	
	// 11982 - Replaced RELACN with RELCIF
	type ResultSet rs=Db.select("ACN","RELCIF","CID=:CID")
	if rs.isEmpty() quit
	while rs.next() do { quit:ER
		set SACN=rs.getCol(1)
		if (SACN'=PACN) do { quit:X=3
			set X=X+1
			set XLN14.piece("|",X)=SACN
			}
		}
	
	quit 
	

public SNAM(CID) // Secondary CIF borrower's
	/*
	   INPUT:  
	   
	   .CID		Account ID		/TYP=N/REQ

	   RETURNS: 
	   
	   . XLN15	Secondary CIF Borrowers	/TYP=S

	*/

	type Number ACN,I,X
	type public String XLN14,XLN15
	
	set XLN15="" 
	do SCIF(CID)
	if XLN14.isNull() quit
	// X is defined in XLN14
	for I=1:1:X  do {
		set ACN=$P(XLN14,"|",I)
		type RecordCIF cif=Db.getRecord("CIF","ACN=:ACN")
		set $P(XLN15,"|",I)=cif.nam
 		}
	quit
		
Public COLL(CID,PFLG)	// Collateral values

	/*
	The function is used to compute [LN]XLN16
 
	ARGUMENTS:
	        . CID  Account Number   /TYP=N/REQ/MECH=VAL
		. PFLG 			/TYP=L
 
	RETURNS:
	        . XLN16			/TYP=T
 
	EXAMPLE:
	        COLL^LNCO2(1234,)
	*/

	set XLN16=""
	
	new ARUF,BAL,CRLMT,COL,COLAMT,COLCRCD,ER,X
	set ER=0
	set X=0

	type RecordLN ln=Db.getRecord("LN","CID=:CID",1)
	if ln.getMode()=0 quit
		
	type ResultSet rs=Db.select("COLL","LNCOL","CID=:CID")
	if rs.isEmpty() do COLL2(.ln) quit
	while rs.next() do { quit:ER
		new COLVAL,COLCRCD
		set COLL=rs.getCol(1)
		type RecordCOL col=Db.getRecord("COL","COLL=:COLL",1)
		if col.getMode()=0 quit
		set COLVAL=col.colval
		set COLCRCD=col.crcd
		if COLCRCD="" set COLCRCD=ln.crcd
	    	if $G(PFLG) set COLVAL=$$^SCARND(col.colval*col.colpct/100,0,CID,COLCRCD)
		if COLCRCD'=ln.crcd do CAMT^CRCDUTL(COLCRCD,ln.crcd,.COLVAL)
		set X=X+COLVAL

		do COLL2(.ln)
		}

	quit

COLL2(RecordLN ln)	// Set up XLN16

	set $P(XLN16,"|",1)=X-$S(ln.aruf:ln.bal-ln.udbal,1:ln.bal)
	set $P(XLN16,"|",2)=X-ln.crlmt
	set $P(XLN16,"|",3)=X
	quit 
	

public RPY(CID) // Remitted prior year

	new ESCACCT,I,M,T
	set (T,I,M)=0
	type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID")

	//Get the escrow account number from lnbil0
	set ELENUM=0
	for  set ACCT=$$ESCACT^BILFUNCS(.lnbil0,.ELENUM) quit:ACCT=""  do {
		set ESCACCT=$P(ACCT,$C(9),1)
		if ESCACCT do RPYA(ESCACCT)
		}
	set XLN20=T_"|"_I_"|"_M 
	quit 
	
RPYA(ESCACCT) 

	new TYP
	set (T,I,M)=""
	type ResultSet rs=Db.select("TRTYPE,REMPY","TRTYPE","CID=:ESCACCT")
	if rs.isEmpty() quit
	while rs.next() do { quit:ER
		set TYP=rs.getCol(1)
       		if Db.isDefined("LNTRS","TRTYPE=:TYP") do {
			type RecordLNTRS lntrs=Db.getRecord("LNTRS","TRTYPE=:TYP")
			if lntrs.etyp=1 set T=T+rs.getCol(2)
			if lntrs.etyp=2 set I=I+rs.getCol(2)
			if lntrs.etyp=3 set M=M+rs.getCol(2)
			}
		}
	quit 

public LTVC(CID)	// Calculate current loan to value ratio
	/*
	   INPUT:  
	   	.CID	Account ID			/TYP=N/REQ
	   RETURNS: 	   
	   	. LTVC	Current loan to value ratio	/TYP=N
	*/

	type public String ER
	type Number COLL, COLVAL, LTVC, TOTAL
	type String COLCRCD

	set (LTVC,TOTAL)=0

	type RecordLN ln=Db.getRecord("LN","CID=:CID")

	type ResultSet rs=Db.select("COLL","LNCOL","CID=:CID")
	if rs.isEmpty() quit LTVC

	while rs.next() do {
		set COLL=rs.getCol(1)

		type RecordCOL col=Db.getRecord("COL","COLL=:COLL",1)

		if col.colval.isNull() quit
		set COLVAL=col.colval
		
		if col.price.isNull() quit
		
		set COLCRCD=col.crcd 
		if COLCRCD.isNull() set COLCRCD=ln.crcd quit     

		if COLCRCD '= ln.crcd do CAMT^CRCDUTL(COLCRCD,ln.crcd,.COLVAL)

		if COLVAL.get()<col.price set TOTAL = TOTAL + COLVAL.get()
		else  set TOTAL = TOTAL + col.price
		
		}

	if (ER) ! (TOTAL=0) quit LTVC

	set LTVC=$$^SCARND(ln.bal/TOTAL*100,0,"","",0)

	quit LTVC
	
	
public PSAF(CID,DIST,%FD,%TD)	// Compute payment schedule af's

        new CNT,D,FD,TD

        set %FD=%FD.get()
	set FD=""

	type ResultSet rs=Db.select("PDD","LNPS1","CID=:CID")
	if rs.next() set FD=rs.getCol(1)

        if %FD<FD set %FD=FD
        if '%FD quit 0
        set %FD=%FD-1
        
        set %TD=%TD.get()
	set TD=Db.currVal("LNPS1","CID=:CID")
        if '%TD set %TD=TD+1
        set %TD=%TD-1
        
        set DIST=DIST.get() if DIST'="" set DIST=DIST-1
        set CNT=0
	set D=%FD
        
        // Total the number of payments from %FD to (but not including) %TD
	type DbSet ds=Db.selectDbSet("LNPS1","CID=:CID AND PDD>:D")
	while ds.next() do {
		type RecordLNPS1 lnps1=ds.getRecord("LNPS1")
		set D=lnps1.pdd
		quit:D>%TD
 		set CNT=CNT+1
		if 'DIST quit

		if DIST=2,lnps1.d2f quit
		else  if DIST=3,lnps1.d3f quit
		else  if DIST=4,lnps1.d4f quit

		set CNT=CNT-1	
		}
	
        quit +$$^SCARND(CNT*365/(%TD-%FD),0,"","",5)
 #OPTION ResultClass ON
Public String vSIG()	quit "60477^65450^Pat Kelly^9171"	// Signature - LTD^TIME^USER^SIZE
