BCHFYE //Batch BCHFYE - Beginning of Financial Year Reset
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 08/30/2007 15:07 - joynerd
 //
 // ********** This is a DATA-QWIK generated Routine **********
 // Level 33  - BCHFYE Batch Definition
 // ***********************************************************
 //
 //
 type public Number ER
 type public String %FN,RM
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 type Number %BatchExit,%BatchRestart,vBCHSTS
 type String vCONTEXT,vINPUT,vSYSVAR,vRESULT
 set %BatchExit=0,%BatchRestart=0,ER=0,RM=""
 do INIT^BCHUTL(.vSYSVAR)
 set vBCHSTS=$$STATUS^BCHUTL("BCHFYE")
 if vBCHSTS=1 set ER=1,RM=$$^MSG(3410) quit
 if vBCHSTS=2 set ER=1,RM=$$^MSG(3414) quit
 if vBCHSTS=0 set %BatchRestart=1
 do vOPEN(.vINPUT,.%BatchExit) if %BatchExit do EXIT^BCHUTL("BCHFYE") quit
 do JOBMGR^BCHUTL(%FN,"BCHFYE",.vINPUT)
 do ^JOBMGR(.vINPUT)
 do EXIT^BCHUTL("BCHFYE")
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vPROC(CID) //
 type public Number ER
 type public String ET,%EVENT,%FN,%INTRPT(),RM,vCONTEXT
 catch vERROR {
 type public Number ER
 type public String RM
 
 do Runtime.rollback()
 
 do LOG^UTLEXC("BCHFYE","*","",CID.get(), vERROR.thrownAt, vERROR.type)
 
 // DBFILER errors do not log on a call to ZE^UTLERR
 if vERROR.type="%PSL-E-DBFILER" do {
  type String ET = vERROR.type
  do ^UTLERR
 }
 else  do ZE^UTLERR
 
 set ER = 1
 set RM = vERROR.description
 }
 if ('%INTRPT.get().isNull())!(%INTRPT.data() > 1) do INTRPT^BCHUTL(%EVENT.get())
 if %BatchRestart,$$CHKLOG^BCHUTL(%SystemDate,%FN,"BCHFYE",CID.get()) do { quit
 do LOG^BCHUTL(%SystemDate,%FN,"BCHFYE",CID.get(),"Record already processed")
 }
 do Runtime.start("BA")
 set vCONTEXT=""
 set (ET,RM)=""
 set ER=0
 do vEXEC(.vCONTEXT,CID)
 if ER.get() do { quit
 type String et
 set et=$S(ET.get().isNull():RM.get(),1:ET)
 
 do Runtime.rollback()
 do LOG^UTLEXC("BCHFYE","*","",CID.get(),"",et)
 }
 do UPDLOG^BCHUTL(%SystemDate,%FN,"BCHFYE",CID.get(),vCONTEXT)
 do Runtime.commit()
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vEXEC(vCONTEXT,CID) //
	type public Boolean ARUF
	type public Date HJD, LADT, MDT
	type public Number BAOLA, HABL1, HABL2, IAM, IPL, IRN, IUN, NACRCF, TEB, UDBAL
	type public String ACR, ACRYTD
	
	type Number NACRYTD
	
	type RecordACN acn = Db.getRecord("ACN", "CID = :CID")
	
	set acn.ipy = +acn.iytd
	set acn.ppy = +acn.pytd
	set acn.pytd = 0

	// Update Return Item Prior Year and reset Return Item Fee Year to Date Buckets
        set acn.retfcpy = +acn.retfcytd,acn.retfcytd = 0
        set acn.retfwpy = +acn.retfwytd,acn.retfwytd = 0
	
	do acn.bypassSave()

	/*
	Move the value in the current Paid - Year to Date field (PYTD) 
	to the Paid - Prior Year field (PPYR) and initializes PYTD
        to null in CTFPLNCID table.
	*/

	type DbSet ds = Db.selectDbSet("CTFPLNCID", "CID=:CID")
  
        while ds.next() do {
        	
  		type RecordCTFPLNCID plncid = ds.getRecord("CTFPLNCID")
		
		set plncid.ppyr = +plncid.pytd
                set plncid.pytd = 0
                
                do plncid.bypassSave()	
                }	
	

	if (acn.cls = "D") do DEP(.acn)
	
	if (acn.cls = "L") do LN(.acn)
	
	// File History

	type RecordHIST0 hist0 = Db.getRecord("HIST0", "CID = :CID, JD = :HJD", 1)
	
	set hist0.bal = +acn.bal
	set hist0.seqzero = Db.currVal("HIST", "CID") 
	
	set hist0.acrat = +ACRYTD		// Annual positive accrual
	set hist0.acrcf = +ACR			// Accrual as of year-end
	
	if (acn.cls = "D") do {
		
		set hist0.baola = +ACR
		set hist0.yeirn = IRN		// Year-end interest rate
		set hist0.yemdt = MDT		// Maturity date
		set hist0.nacrat = +NACRYTD	// Annual negative accrual
		set hist0.nacrcf = +NACRCF	// Neg accrual as of year-end
		}
	if (acn.cls = "L") do {
		
		set hist0.baola = +BAOLA
		set hist0.ladt = LADT
		set hist0.habl1 = +HABL1
		set hist0.habl2 = +HABL2
		set hist0.teb = +TEB
		if ARUF set hist0.udbal = +UDBAL
		if IAM set hist0.iunt = IUN - IPL
		}
		
	do hist0.bypassSave()
	
	quit
	
	
DEP(RecordDEP dep)	// Deposit specific
	
	type public Date MDT
	type public Number ACRYTD, CID, IRN, NACRCF, NACRYTD, TAXYR
	type public String ACR
		
	set ACR = +dep.posacr
	set IRN = dep.irn
	set MDT = dep.mdt
	set NACRCF = +dep.negacr

	// Annual total net positive and negative accruals
	
	set ACRYTD = dep.iytd + ACR - $$ACRCF^HISTP(CID, 2) 

	// Negative Accrued - last year's
	set NACRYTD = +$$NACRYTD^HISTP(CID)

	set dep.negipy = +dep.negiytd	       
	
	if dep.oid do {
		
		type RecordOID oid = Class.new("RecordOID")
		
		set oid.cid = CID
		set oid.taxyr = TAXYR
		set oid.ial = ACR + dep.ipl
			
		do oid.bypassSave()
		}
	
	
	set dep.iytd = 0 			
	set dep.negiytd = 0			
	set dep.bwp = +dep.bwy		 	
	set dep.bwy = 0	 			
	set dep.fwp = +dep.fwy			// Federal W/H
	set dep.fwy = 0
	set dep.swp = +dep.swy			// State W/H
	set dep.swy = 0

	set dep.vosnum = 0			// MT950 SWIFT
	set dep.mt942stmt = 0			// MT942 SWIFT
	set dep.sw940num = 0			// MT940 SWIFT

        set dep.aepy = +dep.aeytd		// LSP
        set dep.aeytd = 0    

	if dep.segflg do SEGMENT(.dep)		// Segments in Use Flag
	
	// Shuffle current year NSF counters to prior year and clear current year
		
	set dep.nsfi1 = +dep.nsfi13,dep.nsfi13 = 0
	set dep.nsfi2 = +dep.nsfi14,dep.nsfi14 = 0
	set dep.nsfi3 = +dep.nsfi15,dep.nsfi15 = 0
	set dep.nsfi4 = +dep.nsfi16,dep.nsfi16 = 0
	set dep.nsfi5 = +dep.nsfi17,dep.nsfi17 = 0
	set dep.nsfi6 = +dep.nsfi18,dep.nsfi18 = 0
	set dep.nsfi7 = +dep.nsfi19,dep.nsfi19 = 0
	set dep.nsfi8 = +dep.nsfi20,dep.nsfi20 = 0
	set dep.nsfi9 = +dep.nsfi21,dep.nsfi21 = 0
	set dep.nsfi10 = +dep.nsfi22,dep.nsfi22 = 0
	set dep.nsfi11 = +dep.nsfi23,dep.nsfi23 = 0
	set dep.nsfi12 = +dep.nsfi24,dep.nsfi24 = 0

	set dep.nsfo1 = +dep.nsfo13,dep.nsfo13 = 0
	set dep.nsfo2 = +dep.nsfo14,dep.nsfo14 = 0
	set dep.nsfo3 = +dep.nsfo15,dep.nsfo15 = 0
	set dep.nsfo4 = +dep.nsfo16,dep.nsfo16 = 0
	set dep.nsfo5 = +dep.nsfo17,dep.nsfo17 = 0
	set dep.nsfo6 = +dep.nsfo18,dep.nsfo18 = 0
	set dep.nsfo7 = +dep.nsfo19,dep.nsfo19 = 0
	set dep.nsfo8 = +dep.nsfo20,dep.nsfo20 = 0
	set dep.nsfo9 = +dep.nsfo21,dep.nsfo21 = 0
	set dep.nsfo10 = +dep.nsfo22,dep.nsfo22 = 0
	set dep.nsfo11 = +dep.nsfo23,dep.nsfo23 = 0
	set dep.nsfo12 = +dep.nsfo24,dep.nsfo24 = 0
	
	set dep.negi1 = +dep.negi13,dep.negi13 = 0
	set dep.negi2 = +dep.negi14,dep.negi14 = 0
	set dep.negi3 = +dep.negi15,dep.negi15 = 0
	set dep.negi4 = +dep.negi16,dep.negi16 = 0
	set dep.negi5 = +dep.negi17,dep.negi17 = 0
	set dep.negi6 = +dep.negi18,dep.negi18 = 0
	set dep.negi7 = +dep.negi19,dep.negi19 = 0
	set dep.negi8 = +dep.negi20,dep.negi20 = 0
	set dep.negi9 = +dep.negi21,dep.negi21 = 0
	set dep.negi10 = +dep.negi22,dep.negi22 = 0
	set dep.negi11 = +dep.negi23,dep.negi23 = 0
	set dep.negi12 = +dep.negi24,dep.negi24 = 0
		
	set dep.nego1 = +dep.nego13,dep.nego13 = 0
	set dep.nego2 = +dep.nego14,dep.nego14 = 0
	set dep.nego3 = +dep.nego15,dep.nego15 = 0
	set dep.nego4 = +dep.nego16,dep.nego16 = 0
	set dep.nego5 = +dep.nego17,dep.nego17 = 0
	set dep.nego6 = +dep.nego18,dep.nego18 = 0
	set dep.nego7 = +dep.nego19,dep.nego19 = 0
	set dep.nego8 = +dep.nego20,dep.nego20 = 0
	set dep.nego9 = +dep.nego21,dep.nego21 = 0
	set dep.nego10 = +dep.nego22,dep.nego22 = 0
	set dep.nego11 = +dep.nego23,dep.nego23 = 0
	set dep.nego12 = +dep.nego24,dep.nego24 = 0
	
	set dep.reti1 = +dep.reti13,dep.reti13 = 0
	set dep.reti2 = +dep.reti14,dep.reti14 = 0
	set dep.reti3 = +dep.reti15,dep.reti15 = 0
	set dep.reti4 = +dep.reti16,dep.reti16 = 0
	set dep.reti5 = +dep.reti17,dep.reti17 = 0
	set dep.reti6 = +dep.reti18,dep.reti18 = 0
	set dep.reti7 = +dep.reti19,dep.reti19 = 0
	set dep.reti8 = +dep.reti20,dep.reti20 = 0
	set dep.reti9 = +dep.reti21,dep.reti21 = 0
	set dep.reti10 = +dep.reti22,dep.reti22 = 0
	set dep.reti11 = +dep.reti23,dep.reti23 = 0
	set dep.reti12 = +dep.reti24,dep.reti24 = 0

	set dep.reto1 = +dep.reto13,dep.reto13 = 0
	set dep.reto2 = +dep.reto14,dep.reto14 = 0
	set dep.reto3 = +dep.reto15,dep.reto15 = 0
	set dep.reto4 = +dep.reto16,dep.reto16 = 0
	set dep.reto5 = +dep.reto17,dep.reto17 = 0
	set dep.reto6 = +dep.reto18,dep.reto18 = 0
	set dep.reto7 = +dep.reto19,dep.reto19 = 0
	set dep.reto8 = +dep.reto20,dep.reto20 = 0
	set dep.reto9 = +dep.reto21,dep.reto21 = 0
	set dep.reto10 = +dep.reto22,dep.reto22 = 0
	set dep.reto11 = +dep.reto23,dep.reto23 = 0
	set dep.reto12 = +dep.reto24,dep.reto24 = 0
		

	// Reset the non-resident buckets
	
	set dep.nrposipy = +dep.nrposicy
	set dep.nrposicy = 0
	set dep.nrwapy = +dep.nrwacy
	set dep.nrwacy = 0
	set dep.nrwhpy = +dep.nrwhcy
	set dep.nrwhcy = 0
	set dep.nrnegipy = +dep.nrnegicy
	set dep.nrnegicy = 0
	set dep.nrppy = +dep.nrpcy
	set dep.nrpcy = 0
 
	// Reset the Commission Paid Buckets
	
	set dep.comppy = +dep.compytd
	set dep.compytd = 0
	
	do FISDEP(.dep)
	
	do dep.bypassSave()
	
	quit


SEGMENT(RecordDEP dep)	// Resets of segmented account interest fields

	type public Number CID

	if 'Db.isDefined("DEPSEG","CID=:CID,SEGMENT=0") quit	// Not a segmented acct

	set dep.ipimppy = +dep.ipimpytd
	set dep.ipimpytd = 0
	set dep.ipinmpy = +dep.ipinmytd
	set dep.ipinmytd = 0
	set dep.ipmppy = +dep.ipmpytd
	set dep.ipmpytd = 0
	set dep.ipnmppy = +dep.ipnmpytd
	set dep.ipnmpytd = 0

	quit
	

LN(RecordLN ln)	// Loan specific
	
	type public Boolean ARUF
	type public Date LADT
	type public Number ACRYTD, BAOLA, CID, HABL1, HABL2, IAM, IPL, IUN, TEB, UDBAL
	type public String ACR
	
	set ACR = +ln.acr
	set ARUF = ln.aruf
	set IAM = ln.iam
	set IPL = ln.ipl
	set IUN = ln.iun
	set UDBAL = +ln.udbal
	
	set ACRYTD = ln.iytd + ACR - $$ACRCF^HISTP(CID, 2) + ln.intdef

	set ln.negipy = +ln.negiytd		
	set ln.diaa = 0				
	set ln.idefly = +ln.intdef			// Save deferred interest
	set ln.iytd = +ln.intdef,ln.intdef = 0  	// Deferred interest
	set ln.copy = +ln.coytd,ln.coytd = 0		// Charge-off YTD, prior year
	set ln.recpy = +ln.recytd,ln.recytd = 0		// Recovery YTD, prior year
	type RecordCIF cif = Db.getRecord("CIF","ACN = :ln.acn") //BASEL II	
	set ln.nucollyr = ln.nucolytd			//BASEL II
	set ln.nucolytd = "" 				//BASEL II
	set cif.doodpror = cif.doodytd			//BASEL II
	
	do cif.save()					//BASEL II
	
	// Miscellaneous charges YTD and prior year are now computed data items

	set ln.lcan = 0				// # of Late charges assessed this year
	set ln.papy = +ln.paytd,ln.paytd = 0	// Late charges assessed
	
	// Move misc charge YTD to prior year

	type DbSet dslnfee1 = Db.selectDbSet("LNFEE", "CID=:CID")
	
	while dslnfee1.next() do {

		type RecordLNFEE lnfee1 = dslnfee1.getRecord("LNFEE")
		
		set lnfee1.feepy = +lnfee1.feeytd,lnfee1.feeytd = 0	// Fee paid
		set lnfee1.aspy = +lnfee1.asytd,lnfee1.asytd = 0	// Fee assessed
		
		do lnfee1.bypassSave()			
		}
	
	// Move delinquency categories to prior year
	
	set ln.dp1 = +ln.dy1,ln.dy1 = 0
	set ln.dp2 = +ln.dy2,ln.dy2 = 0
	set ln.dp3 = +ln.dy3,ln.dy3 = 0
	set ln.dp4 = +ln.dy4,ln.dy4 = 0
	set ln.dp5 = +ln.dy5,ln.dy5 = 0
	set ln.dp6 = +ln.dy6,ln.dy6 = 0
	set ln.dp7 = +ln.dy7,ln.dy7 = 0
	
	// Move full pmts made to prior year

	set ln.fpp01 = +ln.fpc01,ln.fpc01 = 0
	set ln.fpp02 = +ln.fpc02,ln.fpc02 = 0
	set ln.fpp03 = +ln.fpc03,ln.fpc03 = 0
	set ln.fpp04 = +ln.fpc04,ln.fpc04 = 0
	set ln.fpp05 = +ln.fpc05,ln.fpc05 = 0
	set ln.fpp06 = +ln.fpc06,ln.fpc06 = 0
	set ln.fpp07 = +ln.fpc07,ln.fpc07 = 0
	set ln.fpp08 = +ln.fpc08,ln.fpc08 = 0
	set ln.fpp09 = +ln.fpc09,ln.fpc09 = 0
	set ln.fpp10 = +ln.fpc10,ln.fpc10 = 0
	set ln.fpp11 = +ln.fpc11,ln.fpc11 = 0
	set ln.fpp12 = +ln.fpc12,ln.fpc12 = 0
	
	set HABL1 = +ln.habl1
	set LADT = ln.ladt
	set BAOLA = +ln.baola
	set HABL2 = +ln.habl2
	set TEB = +ln.teb

	// Reset the Commission Paid Buckets
	
	set ln.comppy = +ln.compytd
	set ln.compytd = 0
	
	do FISCAL(.ln)

	do ln.bypassSave()
	
	quit
	

FISCAL(RecordLN ln)

	type public Number CID, UTBL(,,), UTBL1(,,), TAXYR

	type Number FEEPY, FISBAL, FISINT
	
	set ln.dafpy = +ln.dafyd,ln.dafyd = 0
	set ln.ndafpy = +ln.ndafyd,ln.ndafyd = 0
	
	set FEEPY = 0
	set FISBAL = 0
	set FISINT = 0
	
	type DbSet dslnfee2 = Db.selectDbSet("LNFEE", "CID=:CID")

        while dslnfee2.next() do {

                type RecordLNFEE lnfee = dslnfee2.getRecord("LNFEE")
                
                set FEEPY = FEEPY + lnfee.feepy  
 		}                            

	// Calculating LN.FISBAL,LN.FISINT 
              
	if UTBL("FISBAL",ln.type,"LN.BALCMP").exists() set FISBAL = FISBAL + $$BALCMP^LNCDI(ln.aruf, ln.bal, ln.udbal)
	if UTBL("FISBAL",ln.type,"LN.PAPY").exists() set FISBAL = FISBAL + ln.papy
	if UTBL("FISBAL",ln.type,"LN.PPY").exists() set FISBAL = FISBAL - ln.ppy
 
	if UTBL1("FISINT",ln.type,"LN.IPY").exists() set FISINT = FISINT + ln.ipy
	if UTBL1("FISINT",ln.type,"LN.COMPPY").exists() set FISINT = FISINT + ln.comppy
	if UTBL1("FISINT",ln.type,"LN.PPY").exists() set FISINT = FISINT + ln.ppy
	if UTBL1("FISINT",ln.type,"LNFEE.FEEPY").exists() set FISINT = FISINT + FEEPY
	if UTBL1("FISINT",ln.type,"LN.PAPY").exists() set FISINT = FISINT + ln.papy
	if UTBL1("FISINT",ln.type,"LN.DEDPPY").exists() set FISINT = FISINT + $$DEDPPY^LNCDI(CID)
	if UTBL1("FISINT",ln.type,"LN.IBPY").exists() set FISINT = FISINT + $$IBPY^LNCDI(CID)
	
	type RecordLNYR lnyr = Class.new("RecordLNYR")

	set ln.fisbal = +FISBAL
	set ln.fisint = +FISINT
	set lnyr.cid = CID
	set lnyr.year = TAXYR
	set lnyr.fisbal = +ln.fisbal
	set lnyr.fisint = +ln.fisint
	
	do lnyr.bypassSave()
	
	quit
	

FISDEP(RecordDEP dep)
 
	type public Number CID, UTBL(,,), UTBL1(,,), TAXYR

	type Number FISBAL, FISINT
	
	set FISBAL = 0
	set FISINT = 0

        // Calculating DEP.FISBAL,DEP.FISINT

	if UTBL("FISBAL",dep.type,"DEP.BAL").exists() set FISBAL = FISBAL + dep.bal
 
	if UTBL1("FISINT",dep.type,"DEP.IPY").exists() set FISINT = FISINT + dep.ipy
	if UTBL1("FISINT",dep.type,"DEP.NEGIPY").exists() set FISINT = FISINT - dep.negipy
	if UTBL1("FISINT",dep.type,"DEP.PPY").exists() set FISINT = FISINT + dep.ppy
	if UTBL1("FISINT",dep.type,"DEP.IPMPPY").exists() set FISINT = FISINT + dep.ipmppy
	if UTBL1("FISINT",dep.type,"DEP.IPNMPPY").exists() set FISINT = FISINT + dep.ipnmppy
	if UTBL1("FISINT",dep.type,"DEP.IPIMPPY").exists() set FISINT = FISINT + dep.ipimppy
	if UTBL1("FISINT",dep.type,"DEP.IPINMPY").exists() set FISINT = FISINT + dep.ipinmpy
 
	set dep.fisint = FISINT
	set dep.fisbal = FISBAL	
 
	if 'dep.emplben quit
 
	// Reset Employee/Employer Contribution fields
 
	type RecordDEPYR depyr = Class.new("RecordDEPYR")
 
	set depyr.cid  =  CID
	set depyr.year = TAXYR
	set depyr.empytd = +dep.empytd
	set dep.empytd = 0
	set depyr.emprytd = +dep.emprytd
	set dep.emprytd = 0
	set depyr.maxemprc = +dep.maxemprc
	set dep.maxemprc = 0
	set depyr.maxempc = +dep.maxempc
	set dep.maxempc = 0
	set depyr.pratio = +dep.pratio       
	set dep.pratio = 0
	set depyr.fisbal = +dep.fisbal
	set depyr.fisint = +dep.fisint

        do depyr.bypassSave()
        
        quit
        
	
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXEC(vINPUT,vRETURN) //
 type String vRECORD,CID
 for  set vRECORD=vINPUT.piece("|",1),vINPUT=vINPUT.extract(vRECORD.length()+2,99999) quit:vRECORD.isNull()  do {
 set CID=vRECORD.piece($C(9),1)
 do vPROC(CID)
 }
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXEC(vINPUT,vRETURN) //
 type public String vBUFOVFL
 type String vRECORD,vrow,CID
 type Number vcur,vlen
 set vINPUT=vBUFOVFL.get()
 set vBUFOVFL="",vlen=0
 type public ResultSet vRESULT
 for  do { quit:'vcur
 set vcur=vRESULT.next() if 'vcur quit
 set vrow=vRESULT.getRow()_"|",vlen=vlen+vrow.length()
 if vlen>32767 set vBUFOVFL=vrow,vcur=0 quit
 set vINPUT=vINPUT_vrow if vlen+13>32767 set vcur=0 quit
 }
 set vINPUT=vINPUT.extract(1,vINPUT.length()-1)
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHPOST(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vOPEN(String vINPUT, Boolean %BatchExit) //
	type Date FYE = CUVAR.FINYE + 1
	
	if (FYE '= %SystemDate) set %BatchExit = 1 quit	 

 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 type public ResultSet vRESULT=Db.select("CID","ACN","")
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 if vRESULT.isEmpty() set %BatchExit=1 quit
 #ACCEPT Date=08/01/03;PGM=Allan Mattson;CR=20967
 set %BatchExit=0
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHRINIT(vINPUT,vRETURN) //
	type public Date HJD = %SystemDate - 1
	type public Number UTBL(,,), UTBL1(,,)
	type public String TAXYR = %SystemDate.year() - 1
	
	type Number TYPE

	type ResultSet rsdftl = Db.select("TYPE", "PRODDFTL")
	
	while rsdftl.next() do {
		
		set TYPE = rsdftl.getCol("TYPE")
		
		if Db.isDefined("UTBLFISBAL","TYPE=:TYPE,COL='LN.BALCMP'") set UTBL("FISBAL",TYPE,"LN.BALCMP") = 0
		if Db.isDefined("UTBLFISBAL","TYPE=:TYPE,COL='LN.PAPY'") set UTBL("FISBAL",TYPE,"LN.PAPY") = 0
		if Db.isDefined("UTBLFISBAL","TYPE=:TYPE,COL='LN.PPY'") set UTBL("FISBAL",TYPE,"LN.PPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LN.IPY'") set UTBL1("FISINT",TYPE,"LN.IPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LN.COMPPY'") set UTBL1("FISINT",TYPE,"LN.COMPPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LN.PPY'") set UTBL1("FISINT",TYPE,"LN.PPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LNFEE.FEEPY'") set UTBL1("FISINT",TYPE,"LNFEE.FEEPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LN.PAPY'") set UTBL1("FISINT",TYPE,"LN.PAPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LN.DEDPPY'") set UTBL1("FISINT",TYPE,"LN.DEDPPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='LN.IBPY'") set UTBL1("FISINT",TYPE,"LN.IBPY") = 0
		}
		
	type ResultSet rsdftd = Db.select("TYPE", "PRODDFTD")
	
	while rsdftd.next() do {
		
		set TYPE = rsdftd.getCol("TYPE")
		
		if Db.isDefined("UTBLFISBAL","TYPE=:TYPE,COL='DEP.BAL'") set UTBL("FISBAL",TYPE,"DEP.BAL") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.IPY'") set UTBL1("FISINT",TYPE,"DEP.IPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.NEGIPY'") set UTBL1("FISINT",TYPE,"DEP.NEGIPY") = 0 
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.PPY'") set UTBL1("FISINT",TYPE,"DEP.PPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.IPMPPY'") set UTBL1("FISINT",TYPE,"DEP.IPMPPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.IPNMPPY'") set UTBL1("FISINT",TYPE,"DEP.IPNMPPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.IPIMPPY'") set UTBL1("FISINT",TYPE,"DEP.IPIMPPY") = 0
		if Db.isDefined("UTBLFISINT","TYPE=:TYPE,COL='DEP.IPINMPY'") set UTBL1("FISINT",TYPE,"DEP.IPINMPY") = 0
		}
		

 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vTHREXIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHINIT(vINPUT,vRETURN) //
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
private vSCHEXIT(vINPUT,vRETURN) //
	/* 
  	Reset IPYADJ - Interest Prior Year Adjustment Flag 
	Reset PRYRBKD - Prior Year Backdate Deadline
	Reset Financial Year-end
	*/ 	
	
	type public Number CID, ER
	type public String RM
	
	type RecordCUVAR cuvar = Db.getRecord("CUVAR")
	do cuvar.setAuditFlag(1)
        set cuvar.rpanet = $select(cuvar.ipyadj=1:1,cuvar.ipyadj=2:2,cuvar.ipyadj=3:1,cuvar.ipyadj=4:2,cuvar.ipyadj=5:1,1:0)

        if 'cuvar.pryrbkd.isNull() set cuvar.pryrbkd = $$ADDMJD^SCADAT(cuvar.pryrbkd, 12)

	// Reset Last/Next Financial Year-End values
        set cuvar.finyel = cuvar.finye
        set cuvar.finye = $$DSJD^SCADAT(cuvar.finye.month()_"/"_cuvar.finye.day()_"/"_(cuvar.finye.year()+1))

	do cuvar.save()
	
	/*
	Reinitialize the UTBLRSPDEF.PRYRDTE - Deadline for prior year 
	contributions year PER PLAN and UTBLRSLDEF.DISDEAD - Minimum 
	Annual Dist Deadline (Year 1). 
	*/
	
	type DbSet dsrspd = Db.selectDbSet("UTBLRSPDEF")
	
	while dsrspd.next() do {
		
		type RecordUTBLRSPDEF rspdef = dsrspd.getRecord("UTBLRSPDEF")
		
		if rspdef.pryrdte.isNull() quit

		set rspdef.pryrdte = $$ADDMJD^SCADAT(rspdef.pryrdte, 12)
		
		// For any invalid recalculations, reset PRYRDTE to null
		if ER set ER = 0 set rspdef.pryrdte = ""
		
		if rspdef.disdead.isNull() quit

		set rspdef.disdead = $$ADDMJD^SCADAT(rspdef.disdead, 12)
		
		if ER set ER = 0 set rspdef.disdead = ""
		
		do rspdef.bypassSave()
		}


	// Participations purchased
	
	type DbSet dslnpp2 = Db.selectDbSet("LNPP2")
	
	while dslnpp2.next() do {

		type RecordLNPP2 lnpp2 = dslnpp2.getRecord("LNPP2")
			
		set lnpp2.ipy = +lnpp2.iytd,lnpp2.iytd = 0		// INT
		set lnpp2.spy = +lnpp2.sytd,lnpp2.sytd = 0		// FEE
		set lnpp2.prpy = +lnpp2.prytd,lnpp2.prytd = 0		// PRIN
		
		do lnpp2.bypassSave()
		}

	// Loans purchased
	
	type DbSet dslnpp6 = Db.selectDbSet("LNPP6")

	while dslnpp6.next() do {
	
		type RecordLNPP6 lnpp6 = dslnpp6.getRecord("LNPP6")
			
		set lnpp6.pyrpr = +lnpp6.ytdpr,lnpp6.ytdpr = 0		// PRIN
		set lnpp6.pyrsf = +lnpp6.ytdsf,lnpp6.ytdsf = 0		// FEE
		set lnpp6.pyrin = +lnpp6.ytdin,lnpp6.ytdin = 0		// INT
		
		do lnpp6.bypassSave()
		}
		
	quit
	     
        
 #ACCEPT Date=07/15/03;PGM=Allan Mattson;CR=20967
 quit
vVERSION() // Compiler Version ID
 quit "V7-0.02"
