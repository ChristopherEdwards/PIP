V01S600(%ProcessMode,RecordUTBLTRNSET fUTBLTRN)   // -  - SID= <TRNSET> Transaction Sets
 ;;Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:53 - shetyes
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'$D(%ProcessMode) %ProcessMode=5
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,RPT,TNS",VSID="TRNSET",VPGM=$T(+0),VSNAME="Transaction Sets"
 set VFSN("UTBLTRNSET")="zfUTBLTRN"
 set vPSL=1
 set KEYS(1)=fUTBLTRN.TRNSET
 set KEYS(2)=fUTBLTRN.SEQ
 set KEYS(3)=fUTBLTRN.TRNFIELD
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 set %MODS=1,%REPEAT=17 do VPR(.fUTBLTRN),VDA1(.fUTBLTRN),V5^DBSPNT quit

 if '%ProcessMode do VNEW(.fUTBLTRN),VPR(.fUTBLTRN),VDA1(.fUTBLTRN)
 if %ProcessMode do VLOD(.fUTBLTRN) quit:$G(ER)  do VPR(.fUTBLTRN),VDA1(.fUTBLTRN)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fUTBLTRN)
	quit


VNEW(RecordUTBLTRNSET fUTBLTRN) // Initialize arrays if %O=0
 
 do VDEF(.fUTBLTRN)
 do VLOD(.fUTBLTRN)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
VDEF(RecordUTBLTRNSET fUTBLTRN)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
 ;
VLOD(RecordUTBLTRNSET fUTBLTRN) // Load data from disc - %O = (1-5)
 if '$D(%REPEAT) set %REPEAT=17
 if '$D(%MODS) set %MODS=1
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordUTBLTRNSET fUTBLTRN) // Display screen prompts
 set VO="15||13|0"
 set VO(0)="|0"
 set VO(1)=$C(1,1,17,1,0,0,0,0,0,0)_"01T Transaction Set:"
 set VO(2)=$C(1,32,27,0,0,0,0,0,0,0)_"01T Number of Times to Repeat:"
 set VO(3)=$C(2,13,5,1,0,0,0,0,0,0)_"01T Seq:"
 set VO(4)=$C(2,34,45,2,0,0,0,0,0,0)_"01T** After changes rebuild procedure MRPC076 **"
 set VO(5)=$C(3,34,45,2,0,0,0,0,0,0)_"01T***      and stop and restart servers     ***"
 set VO(6)=$C(4,2,11,0,0,0,0,0,0,0)_"01TTrans Field"
 set VO(7)=$C(4,20,9,0,0,0,0,0,0,0)_"01TRef Trans"
 set VO(8)=$C(4,31,11,0,0,0,0,0,0,0)_"01TFixed Value"
 set VO(9)=$C(4,44,12,0,0,0,0,0,0,0)_"01TTable.Column"
 set VO(10)=$C(4,69,4,0,0,0,0,0,0,0)_"01TDate"
 set VO(11)=$C(5,25,4,0,0,0,0,0,0,0)_"01TZero"
 set VO(12)=$C(5,33,9,0,0,0,0,0,0,0)_"01TTSO Entry"
 set VO(13)=$C(5,47,8,0,0,0,0,0,0,0)_"01TFunction"
 set VO(14)=$C(5,63,9,0,0,0,0,0,0,0)_"01TProtected"
 set VO(15)=$C(5,73,6,0,0,0,0,0,0,0)_"01TDelete"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VDA1(RecordUTBLTRNSET fUTBLTRN)  // Display screen data
 new V
 s RPT=$G(RPT)
 s TNS=$G(TNS)
 //
 set VO="18|16|13|0"
 set VO(16)=$C(1,19,12,2,0,0,0,0,0,0)_"01T"_$E(fUTBLTRN.TRNSET,1,12)
 set VO(17)=$C(1,60,20,2,0,0,0,0,0,0)_"00T"_$G(RPT)
 set VO(18)=$C(2,19,2,2,0,0,0,0,0,0)_"01N"_fUTBLTRN.SEQ
  
 set:'$D(%MODS) %MODS=1 set VX=$P(VO,"|",2)+2,DY=6 for I=%MODS:1:%REPEAT+%MODS-1 do VRDA(.fUTBLTRN)
 set $piece(VO,"|",1)=VX quit  // EOD pointer
 
VRDA(RecordUTBLTRNSET fUTBLTRN)  // Display data %REPEAT times
 //instantiate new object if necessary
 if %ProcessMode=5 new v1
 if  set (v1)=""
 else  new v1
 else  set (v1,TNS(I))=$G(TNS(I))
 
 set VO(VX+1)=$C(DY,2,20,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",1)
 set VO(VX+2)=$C(DY,26,2,2,0,0,0,0,0,0)_"00N"_$P(v1,"|",2)
 set VO(VX+3)=$C(DY,30,12,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",3)
 set VO(VX+4)=$C(DY,44,15,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",4)
 set VO(VX+5)=$C(DY,66,10,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",5)
 set VO(VX+6)=$C(DY+1,27,1,2,0,0,0,0,0,0)_"00L"_$S($P(v1,"|",11):"Y",1:"N")
 set VO(VX+7)=$C(DY+1,30,12,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",6)
 set VO(VX+8)=$C(DY+1,44,20,2,0,0,0,0,0,0)_"00T"_$P(v1,"|",7)
 set VO(VX+9)=$C(DY+1,67,1,2,0,0,0,0,0,0)_"00L"_$S($P(v1,"|",13):"Y",1:"N")
 set VO(VX+10)=$C(DY+1,75,1,2,0,0,0,0,0,0)_"00L"_$S($P(v1,"|",9):"Y",1:"N")
 set DY=DY+2,VX=VX+10
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
	
	
VTAB(RecordUTBLTRNSET fUTBLTRN)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab set %MODGRP=2
 set %MODOFF=3,%MOD=10,%MAX=(%MOD*%REPEAT)+%MODOFF,VPT=1,VPB=5+(%REPEAT*2),BLKSIZ=(94*%REPEAT)+34,PGM=$T(+0),DLIB="SYSDEV",DFID="UTBLTRNSET",VSCRPP=1,VSCRPP=1
 set OLNTB=VPB*1000
 
 set VFSN("UTBLTRNSET")="zfUTBLTRN"
 //
 for I=14:1:%MAX set %TAB(I)=""
	
	
 set %TAB(1)=$C(0,18,12)_"21T12401|1|[UTBLTRNSET]TRNSET"
 set %TAB(2)=$C(0,59,20)_"00T|*RPT|[*]@RPT|||do VP1^V01S600(.fUTBLTRN)|do VP2^V01S600(.fUTBLTRN)"
 set %TAB(3)=$C(1,18,2)_"21N12402|1|[UTBLTRNSET]SEQ"
 set %TAB(4)=$C(5,1,20)_"00T12401|*TNS(1)|[*]@TRNFIELD|TRNFLD(||do VP3^V01S600(.fUTBLTRN)|do VP4^V01S600(.fUTBLTRN)"
 set %TAB(5)=$C(5,25,2)_"00N12402|*TNS(1)|[*]@REFTRAN|||do VP5^V01S600(.fUTBLTRN)"
 set %TAB(6)=$C(5,29,12)_"00T12403|*TNS(1)|[*]@REFTRAN|||do VP6^V01S600(.fUTBLTRN)"
 set %TAB(7)=$C(5,43,15)_"00T12404|*TNS(1)|[*]@TABLECOL|||do VP7^V01S600(.fUTBLTRN)"
 set %TAB(8)=$C(5,65,10)_"00T12405|*TNS(1)|[*]@DATE|||do VP8^V01S600(.fUTBLTRN)"
 set %TAB(9)=$C(6,26,1)_"00L12411|*TNS(1)|[*]@DISZERO"
 set %TAB(10)=$C(6,29,12)_"00T12406|*TNS(1)|[*]@TNS|||do VP9^V01S600(.fUTBLTRN)"
 set %TAB(11)=$C(6,43,20)_"00T12407|*TNS(1)|[*]@FUNCTION|||do VP10^V01S600(.fUTBLTRN)"
 set %TAB(12)=$C(6,66,1)_"00L12413|*TNS(1)|[*]@PROT"
 set %TAB(13)=$C(6,74,1)_"00L12409|*TNS(1)|[*]@DEL"
 do VTBL(.fUTBLTRN)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VTBL(RecordUTBLTRNSET fUTBLTRN) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


VSPP   // screen post proc
 type Public RecordUTBLTRNSET fUTBLTRN
 do VSPP1(.fUTBLTRN)
 #ACCEPT Date=11/05/03; pgm=Screen Compilerxxx
 quit
VSPP1(RecordUTBLTRNSET fUTBLTRN)
 type public String RPT  
 type String FLD
 set FLD=""
 for  set FLD=TNS(FLD).order() quit:FLD.get().isNull()  do {
 	if 'TNS(FLD).piece("|",1).isNull() set TNS(FLD).piece("|",8)=RPT
 	}
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit


  //user-defined post procs
 //
VP1(RecordUTBLTRNSET fUTBLTRN) //
 type public String X
 type String ZRTN,ZTAG

 if X.isNull() quit 

 set ZRTN=X.piece("(",1)
 set ZTAG=ZRTN.piece("^",1)
 set ZRTN=ZRTN.piece("^",2)

 if ZTAG.extract(1,2)="$$" set ZTAG=ZTAG.extract(3,99)

 // Routine does not exist
 if (ZTAG?.E1P.E)!(ZRTN?.E1P.E) do Runtime.setErrMSG("UTBLTRNSET",2438) quit

 // Routine does not exist
 if '$$VALID^%ZRTNS(ZRTN) do Runtime.setErrMSG("UTBLTRNSET",2438) quit

 set ZTAG=ZTAG.translate("$")
 if 'ZTAG.isNull() do { if ER quit 
	type String X
 	set ZRTN=ZTAG_"^"_ZRTN
	#ACCEPT PGM=RENGASP;DATE=11/24/05
 	set X="S X=$T("_ZRTN_")" xecute X

	// Invalid line tag
 	if X.isNull() do Runtime.setErrMSG("UTBLTRNSET",1390) quit

 	}

 if X.extract(1,2)'="$$" set X="$$"_X

VP2(RecordUTBLTRNSET fUTBLTRN) //
 type public Number SEQ,TRNSET
 type String RPT

 set RPT=""
 type RecordUTBLTRNSET utbltrn=Db.getRecord("UTBLTRNSET","TRNSET=:TRNSET,SEQ=:SEQ,TRNFIELD='CID'",1)
 if utbltrn.getMode() set RPT=utbltrn.repeat

 do DISPLAY^DBSMACRO("@RPT","","0")

VP3(RecordUTBLTRNSET fUTBLTRN) //
 type public Number BIGSEQ(),I,minipage,SEQ,z1
 type public String X 

 if X.isNull() quit

 type RecordSTBLTSO stbltso=Db.getRecord("STBLTSO","KEY=:X",1)
 type RecordUTBLZTSO utblztso=Db.getRecord("UTBLZTSO","KEY=:X",1)
 type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID='TTX',DI=:X",1)
 
 // Transaction field must be a column from TTX or entry from STBLTSO/UTBLZTSO
 if 'stbltso.getMode(),'utblztso.getMode(),'dbtbl1d.getMode() do Runtime.setErrMSG("UTBLTRNSET",3610) quit

 if z1=MAX,'X.isNull() do {
	if minipage.get().isNull() set BIGSEQ(SEQ)=2,minipage=1
 	if 'minipage.get().isNull() do {
		if minipage=BIGSEQ(SEQ) set BIGSEQ(SEQ)=BIGSEQ(SEQ)+1
		} 
	}

 for I=1:1:9 do {

	// Duplicate Item
 	if (I'=z1),(TNS(I).get().piece("|",1)=X) do Runtime.setErrMSG("UTBLTRNSET",6614) quit 

 	}

VP4(RecordUTBLTRNSET fUTBLTRN) //
 type public String TRNFLD()

 type String DI,KEY

 type ResultSet rs=Db.select("DI,DES","DBTBL1D","FID='TTX'")
 while rs.next() do {
 	set DI=rs.getCol("DI")
	set TRNFLD(DI)=rs.getCol("DES")
	}

 type ResultSet rs=Db.select("KEY,DES","UTBLZTSO")
 while rs.next() do {
        set KEY=rs.getCol("KEY")
        set TRNFLD(KEY)=rs.getCol("DES")
        }

 type ResultSet rs=Db.select("KEY,DESC","STBLTSO")
 while rs.next() do {
        set KEY=rs.getCol("KEY")
        set TRNFLD(KEY)=rs.getCol("DESC")
        }

 do CHANGE^DBSMACRO("TBL","TRNFLD(")


VP5(RecordUTBLTRNSET fUTBLTRN) //
 type public Number X

 if X.isNull() quit
 
 //Ref Tran number must be between 1 and the current sequence
 if (X<1)!(X>fUTBLTRN.seq) do Runtime.setErrMSG("UTBLTRNSET",3612) 

VP6(RecordUTBLTRNSET fUTBLTRN) //
 type public Number z1
 type public String TNS()
 
 // Use EXTCRP for transaction sets
 if (TNS(z1).piece("|",1)="ETC"),(X="EXTCR") do Runtime.setErrMSG("UTBLTRNSET",3623) quit

 // Use EXTDRP for transaction sets
 if (TNS(z1).piece("|",1)="ETC")&(X="EXTDR") do Runtime.setErrMSG("UTBLTRNSET",3624) quit  


VP7(RecordUTBLTRNSET fUTBLTRN) //
 type public Number z1
 type public String TNS(),X

 if X.isNull() quit

 // Table.column must have transaction reference number
 if TNS(z1).piece("|",2).isNull() do Runtime.setErrMSG("UTBLTRNSET",3754) quit

VP8(RecordUTBLTRNSET fUTBLTRN) //
 type public Boolean ER
 type public Number z1
 type public String TNS(),X
 type Number COUNT,NUMBERS
 type String DI,FIELD,SECCHAR

 if X.isNull() quit

 set DI=""
 set FIELD=TNS(z1).piece("|",1)

 type ResultSet rs=Db.select("DI","DBTBL1D","%LIBS='SYSDEV' AND FID='TTX' AND DI=:FIELD")
 if rs.next() set DI=rs.getCol("DI")

 // Date cannot be applied to this TTX transaction field
 if (FIELD=DI),(FIELD'="VDT"),(FIELD'="EFD") do Runtime.setErrMSG("UTBLTRNSET",3768) quit

 // Date must be expressed in the format of T, T+ or T-
 if X.extract()'="T" do Runtime.setErrMSG("UTBLTRNSET",3763) quit

 set NUMBERS=0123456789

 // Date must be expressed in the format of T, T+ or T-
 if X.length()=2 do Runtime.setErrMSG("UTBLTRNSET",3763) quit

 if (X.length()<2) quit

 set SECCHAR=X.extract(2)

 // Date must be expressed in the format of T, T+ or T-
 if 'SECCHAR.isNull(),(SECCHAR'="+"),(SECCHAR'="-") do Runtime.setErrMSG("UTBLTRNSET",3763) quit 

 set COUNT=3
 for  do { if (COUNT>X.length())!(ER) quit

	// Date must be expressed in the format of T, T+ or T-
 	if 'NUMBERS.find(X.extract(COUNT)) do Runtime.setErrMSG("UTBLTRNSET",3763) quit

 	set COUNT=COUNT+1
 	}


VP9(RecordUTBLTRNSET fUTBLTRN) //
 type public Number z1
 type public String TNS(),X

 //TSO entry must have transaction ref #
 if X.isNull() quit

 // TSO entry must have a transaction reference number 
 if TNS(z1).piece("|",2)="" do Runtime.setErrMSG("UTBLTRNSET",3625) quit

 // TSO Entry must be a value from STBLTSO/UTBLZTSO.
 type RecordSTBLTSO stbltso=Db.getRecord("STBLTSO","KEY=:X",1)
 type RecordUTBLZTSO utblztso=Db.getRecord("UTBLZTSO","KEY=:X",1)
 if 'stbltso.getMode(),'utblztso.getMode() do Runtime.setErrMSG("UTBLTRNSET",3638) quit

VP10(RecordUTBLTRNSET fUTBLTRN) //
 type public Boolean ER
 type public String X,ZRTN,ZTAG

 if X.isNull() quit 

 set ZRTN=X.piece("(",1)
 set ZTAG=ZRTN.piece("^",1)
 set ZRTN=ZRTN.piece("^",2)
 if ZTAG.extract(1,2)="$$" set ZTAG=ZTAG.extract(3,99)

 // Routine does not exist
 if (ZTAG?.E1P.E)!(ZRTN?.E1P.E) do Runtime.setErrMSG("UTBLTRNSET",2438) quit

 // Routine does not exist
 if '$$VALID^%ZRTNS(ZRTN) do Runtime.setErrMSG("UTBLTRNSET",2438) quit

 set ZTAG=ZTAG.translate("$")
 if 'ZTAG.isNull() do { if ER quit 
	type String X
 	set ZRTN=ZTAG_"^"_ZRTN
	#ACCEPT PGM=RENGASP;DATE=11/24/05
 	set X="S X=$T("_ZRTN_")" xecute X

	// Invalid line tag
 	if X.isNull() do Runtime.setErrMSG("UTBLTRNSET",1390) quit

 	}
 if X.extract(1,2)'="$$" set X="$$"_X


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordUTBLTRNSET fUTBLTRN
 do VPR(.fUTBLTRN)
 do VDA1(.fUTBLTRN)
 do ^DBSPNT()
 quit

VW(RecordUTBLTRNSET fUTBLTRN)
 do VDA1(.fUTBLTRN)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordUTBLTRNSET fUTBLTRN)
 do VDA1(.fUTBLTRN)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordUTBLTRNSET fUTBLTRN
 do VDA1(.fUTBLTRN)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
 
vSET(sn,di,X)
 type Public RecordUTBLTRNSET fUTBLTRN
 if sn="UTBLTRNSET" do vSET1(.fUTBLTRN,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
vSET1(RecordUTBLTRNSET fUTBLTRN,di,X)
 do fUTBLTRN.setAuditFlag(1)
 set fUTBLTRN.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
vREAD(fid,di)
 type Public RecordUTBLTRNSET fUTBLTRN
 if fid="UTBLTRNSET" quit $$vREAD1(.fUTBLTRN,di)
 quit ""
vREAD1(RecordUTBLTRNSET fUTBLTRN,di)
 quit fUTBLTRN.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler
	quit
