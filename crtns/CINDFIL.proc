CINDFIL(RecordUTBLCOMINDX utblcomindx, String vpar, Boolean vparNorm) // UTBLCOMINDX - Commission Index User Table Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (5)              11/22/2003
	// Trigger Definition (1)                      12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = utblcomindx.getMode()                 // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(utblcomindx,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(utblcomindx,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CINDEX = utblcomindx.cindex

	if %O = 0 do { quit                                    // Create record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CINDEX").exists() do vkchged quit              // Primary key changed
		if vpar["/TRIGBEF/" do VBU                            // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("UTBLCOMINDX",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("UTBLCOMINDX","CINDEX = :utblcomindx.cindex") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CINDEX

	type RecordUTBLCOMINDX utblcomindx = Db.getRecord("UTBLCOMINDX","CINDEX=:CINDEX")
	if (%ProcessMode = 2) do {
		do utblcomindx.setMode(2)

		do CINDFIL(utblcomindx,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordUTBLCOMINDX utblcomindx

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("UTBLCOMINDX","CINDEX = :utblcomindx.cindex") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0, vpar'["/NOLOG/" do ^DBSLOGIT(utblcomindx,%O,.vxins())
		if %O = 1, vpar'["/NOLOG/" do ^DBSLOGIT(utblcomindx,%O,.vx())

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(utblcomindx))  S ^UTBL("CINDEX",vobj(utblcomindx,-3))=vobj(utblcomindx)
		#ENDBYPASS
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordUTBLCOMINDX utblcomindx

	if vpar'["/NOLOG/" do ^DBSLOGIT(utblcomindx,3)

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^UTBL("CINDEX",vobj(utblcomindx,-3))               // Delete Record
	quit


vreqn // Validate required data items

	type public RecordUTBLCOMINDX utblcomindx

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordUTBLCOMINDX utblcomindx

	if utblcomindx.cindex.isNull() do vreqerr("CINDEX") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCOMINDX","MSG",1767,"UTBLCOMINDX."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VBU //
	type public Number ER = 0
	type public String vx(),RM
	type public RecordUTBLCOMINDX utblcomindx
	if vx("").order().isNull() do AUDIT^UCUTILN(utblcomindx,.vx(),1,"|") quit
	if vx("COMTYPE").exists() do vbu1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	do AUDIT^UCUTILN(utblcomindx,.vx(),1,"|")
	quit


vbu1 // Trigger BU_COMTYPE - Before Update - Commission Type

	type public RecordUTBLCOMINDX utblcomindx
	do utblcomindx.setAuditFlag(1)
	/*
	-----Revision History---------------------------------------------------
	09/21/99 - CARROLLJ - 31126
		   Convert to PSL.


	If this is changed and values are already set up in the user table for
	an effective date, then this needs to be removed and added again
	in order to change the commission type.
	*/
	
	new rs
	
	type ResultSet rs=Db.select("EFD","UTBLCOMINDX1","CINDEX=:CINDEX") 
	if rs.isEmpty() quit

	//  Remove tier data items from index before maintaining index type
	set ER=1
	do Runtime.setErrMSG("UTBLCOMINDX",905)

	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordUTBLCOMINDX utblcomindx

	if utblcomindx.cindex.length()>12 set vRM = $$^MSG(1076,12) do vdderr("CINDEX", vRM) quit
	set X = utblcomindx.comtype if 'X.isNull(),'Db.isDefined("STBLCOMTYPE","X") set vRM = $$^MSG(1485,X) do vdderr("COMTYPE", vRM) quit
	if utblcomindx.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
	if utblcomindx.descr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DESCR", vRM) quit
	set X = utblcomindx.indtyp if 'X.isNull(),'Db.isDefined("STBLINDTYP","X") set vRM = $$^MSG(1485,X) do vdderr("INDTYP", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("UTBLCOMINDX","MSG",979,"UTBLCOMINDX."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordUTBLCOMINDX utblcomindx

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("CINDEX")
	set voldkey = vux.piece("|",1),vobj(utblcomindx,-3) = voldkey // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(utblcomindx,-3) = vnewkey // Copy new keys into object
	type RecordUTBLCOMINDX vnewrec = utblcomindx.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("UTBLCOMINDX",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(utblcomindx,-3) = vux.piece("|",1)            // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit
