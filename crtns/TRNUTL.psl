TRNUTL	 	/*
 	 PROCEDURE ID:	TRNUTL
 	     Original:	Erik Scheetz
		 Date:	4/27/2002 - 2:03:10 PM
		 Desc:	Transaction Driver Utility Procedure
 
 	---- Comments --------------------------------------------------------
 
 	Common transaction utilities for the transaction driver (TRNDRV).
 	
 	---- Revision History --------------------------------------------------
	
	05/25/06 - DESHPANDE S K - CR 20748
		   Replaced public variable %TRNHSEQ and %TRNSEQ in subroutine 
		   OM() with calls to ttx.getStoredValue("HistSeq") and
		   ttx.getStoredValue("TranSeq") respectively. Renamed local
		   variable TRNSEQ as ETRNSEQ in section CTR to remove ambiguity
		   with global variable.
		   
		   
	02/10/06 - KELLYP - CR 19298
		   Modified CTR section to accept ttx array as a parameter 
		   instead of a single ttx record and removed the CTR array
		   parameter.  These changes are necessary because the entire
		   ttx array needs to be reviewed to find customer account 
		   transactions when the amount of a cash transaction exceeds
		   the amount defined by the Currency Transaction Threshold in
		   CUVAR.

        07/26/05 - SkariahV- CR16679
                   Removed #WARN and #OPTIMIZE directives.
	              
 	11/05/04 - Frans S.C. Witte - CR 13088
 		   Function $$TRANCID: changed type of parameter from "RecordACN"
 		   to "RecordTTX".

	09/08/04 - KELLYP - CR 11982
		   Replaced references to RELACN with RELCIF.  RELACN is an index
		   and should not be directly referenced.  The RELACN table was 
		   also obsoleted from the M database.

	05/10/04 - Erik Scheetz - 7590
		   Moved certain sections back into TRNDRV and left utilities
		   called by multiple modules in this procedure.

	07/14/03 - Erik Scheetz - 51349
		   PSL conversion clean up.  Moved most linetags back into 
		   TRNDRV and kept only the public linetags for other transaction
		   related modules to use.
		     
		      
 	*/
 	
	quit

public CTR(RecordTTX ttx())	// Currency Transaction Threshold

	/*
	ARGUMENTS:
		ttx()	Transaction record array	/TYP=RecordTTX/REQ/MECH=REFARR:RW

	This section, called at the bottom of the ttx loop in TRNSET^TRNDRV, will
	build the CTR array that is referenced by PBSTSSP.  The CTR array is used 
	by PBSTSSP to form pieces of the reply string sent to the client so that 
	the client can identify which customers have had transactions processed 
	against their accounts that included cash amounts in excess of the value
	defined by CUVAR.CRCDTHR.
	*/

	type public Cache %CACHE()
	type public String CTR()

	type Number CID,ETRNSEQ
	type String ETC

	set ETRNSEQ=""

	for  set ETRNSEQ=ttx(ETRNSEQ).order() quit:ETRNSEQ.isNull()  do {

		set CTR(ETRNSEQ)="1|"

		set ETC=ttx(ETRNSEQ).etc
		
		type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC = :ETC")

		if trn.trntyp quit	// Not a customer account transaction

		set CID=ttx(ETRNSEQ).cid
		
		// Get all customers for this account and add to the CTR array
		type ResultSet rsrel=Db.select("ACN","RELCIF","CID=:CID")
		while rsrel.next() set CTR(ETRNSEQ)=CTR(ETRNSEQ)_rsrel.getCol("ACN")_","
		}

	quit


public GLACN(RecordTRN trn,UID)
	/*
	
	   This subroutine will return the G/L account number associated with
	   a specified miscellaneous transaction code.  If the tran code does
	   not have a default account number, the transaction debit or credit
	   suspense account number from the user table will be returned.  If
	   there is no suspense account number in the user table, the system
	   transaction suspense account number is returned.

	   ARGUMENTS:
		. trn	Transaction object	/TYP=RecordTRN/REQ/MECH=REF:R
		. UID	User ID				/TYP=N/NOREQ/MECH=VAL/DFT=%UserID
	
	   Sample Call: S GLACN=$$GLACN^TTXP2(.trn)

	*/
	if trn.acn'="" quit trn.acn

	type Number GLACN

	if UID.get()="" set UID=%UserID

	type RecordSCAU scau=Db.getRecord("SCAU","UID")	
	if trn.itc.curVal.extract() set GLACN=scau.tscr
	else  set GLACN=scau.tsdr

	if GLACN="" set GLACN=CUVAR.GLTS 

	quit GLACN	





public OM(RecordTTX ttx)	// Output Message
	/*
	
	   Construct an output message for client processes.  Note that the
	   history sequence number will be appended to OM(seq) if TR(seq)
	   is a customer transaction.
	
	   ARGUMENTS:
		. ttx	Transaction object	/TYP=RecortdTTX/REQ/MECH=REFARR:R 
	   RETURNS:
		. $$ Reply message
	    	     ER|RM|TRC|TAMT|BAL|TNSEQ

	   INPUTS:
		. RJ Array	Rejection reason array
		. TRC		Transaction Trace number
		. TNSEQ		History sequence
	  ----------------------------------------------------------------------
	
	*/

	type Public String RJ(),TRC
	
	type String REPLY
	type Number LTRNSEQ = ttx.getStoredValue("TranSeq") 
	
	// ER Flag and Return Message (if any)  
	set REPLY=RJ(LTRNSEQ).get()
	set REPLY.piece("|",3)=TRC
	set REPLY.piece("|",4)=ttx.tamt
	set REPLY.piece("|",5)=ttx.endbal
	set REPLY.piece("|",6)=ttx.getStoredValue("HistSeq")

	quit REPLY


public TAMT(TAMT)	// Reverse component transaction amounts
	/*
	ARGUMENTS:
	  . TAMT	Transaction Amount Field	/TYP=T/REQ/MECH=VAL

	RETURNS:
	  $$ TAMT	Transaction Amount Field
			(with reversed subfields)
	*/
	type Number I 
	for I=1:1:$L(TAMT,"#") set:$P(TAMT,"#",I) TAMT.piece("#",I)=-TAMT.piece("#",I)

	quit TAMT


	/* ****************************************************************** */
private	TRANCID(RecordTTX ttx)	// the TTX record		/MECH=VAL

	/* Return the account number of a TTX record for TransSet class processing.
	   This function is called by UCTS to obtain the value of the column.
	   As long as UCTS is an M routine, retrieval of RecordTTX column values
	   require calls to a PSL module.
	   
	RETURNS:
	  $$ CID	Account Number		/TYP=N
	*/

	quit ttx.cid
 #OPTION ResultClass ON
Public String vSIG()	quit "60460^57401^Shriram Deshpande^5463"	// Signature - LTD^TIME^USER^SIZE
