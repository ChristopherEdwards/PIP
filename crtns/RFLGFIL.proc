RFLGFIL(RecordRFLG rflg, String vpar, Boolean vparNorm) // RFLG - Restrict Flag Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:23 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (9)              11/22/2003
	// Trigger Definition (3)                      12/17/2004
	// Journal File Definition (3)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = rflg.getMode()                        // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(rflg,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(rflg,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = rflg.cid
	type String RFLG = rflg.rflg

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("RFLG").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("RFLG",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("RFLG","CID = :rflg.cid and RFLG = :rflg.rflg") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String RFLG

	type RecordRFLG rflg = Db.getRecord("RFLG","CID=:CID,RFLG=:RFLG")
	if (%ProcessMode = 2) do {
		do rflg.setMode(2)

		do RFLGFIL(rflg,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordRFLG rflg

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("RFLG","CID = :rflg.cid and RFLG = :rflg.rflg") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set rflg.JDT = %SystemDate
		if %O = 0  set rflg.TIM = %CurrentTime
		if %O = 0  set rflg.UID = %UserID
		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(rflg))  S ^HLD(1,vobj(rflg,-3),vobj(rflg,-4))=vobj(rflg)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.rflg)                // Create journal files
	}

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordRFLG rflg

	if vpar["/JOURNAL/" do VJOURNAL(.rflg)                 // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^HLD(1,vobj(rflg,-3),vobj(rflg,-4))                // Delete Record
	quit


vinit // Initialize default values

	type public RecordRFLG rflg

	// Type local variables for access keys for defaults
	type public String CID
	type public String RFLG

	type public String TLO
	if rflg.tlo.isNull() set rflg.tlo = TLO                // tlo
	quit


vreqn // Validate required data items

	type public RecordRFLG rflg

	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordRFLG rflg

	if rflg.cid.isNull() do vreqerr("CID") quit
	if rflg.rflg.isNull() do vreqerr("RFLG") quit

	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLG","MSG",1767,"RFLG."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete Restriction

	type public RecordRFLG rflg
	/*
	   ---------- Revision History ------------------------------------------

	   09/16/99 - CHOK - 31126
		      Converted to PSL.
	*/

	// Delete Restriction flag if no restrictions.
	
	new SEL,CLS,RFL	
	new rs 
	type ResultSet rs=Db.select("ACN","RFLGCCID","CID=:CID") 
	if 'rs.isEmpty() quit
		
	if Db.isDefined("RFLG","CID,RFLG") quit 
	
	new EXPDATE
	set EXPDATE=%SystemDate
	new rs 
	type ResultSet rs=Db.select("EXDT","RFLG","CID=:CID AND EXDT>=:EXPDATE")

	if 'rs.isEmpty() quit

	set SEL=Db.getOneRow("CLS,RFLG","ACN","CID")
	set CLS=$P(SEL,$C(9),1)
	set RFL=$P(SEL,$C(9),2)
	
	if CLS="D",(RFL'=0) do Db.update("DEP","RFLG=0","CID=:CID") quit 
	
	if CLS="L",(RFL'=0) do Db.update("LN","RFLG=0","CID=:CID") quit 
	quit

vai1 // Trigger AFTER_INSERT - After Insert Restriction

	type public RecordRFLG rflg
	/*
	   ---------- Revision History ------------------------------------------

	   09/16/99 - CHOK - 31126
		      Converted to PSL
	*/

	// Set restriction flag after insert.

	new SEL,CLS,RFL
	set SEL=Db.getOneRow("CLS,RFLG","ACN","CID")
	set CLS=$P(SEL,$C(9),1)
	set RFL=$P(SEL,$C(9),2)
	
	if CLS="D",(RFL'=1) do Db.update("DEP","RFLG=1","CID=:CID") quit 
	
	if CLS="L",(RFL'=1) do Db.update("LN","RFLG=1","CID=:CID") quit 
	quit
	

vbi1 // Trigger BEFORE_INSERT - Before insert trigger

	type public RecordRFLG rflg
	// Default value
	
	set rflg.tlo=%UserStation
	quit
	


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordRFLG rflg

	set X = rflg.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if rflg.rflg.length()>4 set vRM = $$^MSG(1076,4) do vdderr("RFLG", vRM) quit
	set X = rflg.exdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXDT", vRM) quit
	set X = rflg.jdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("JDT", vRM) quit
	set X = rflg.stdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("STDT", vRM) quit
	if rflg.tcmt.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TCMT", vRM) quit
	set X = rflg.tim if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIM", vRM) quit
	if rflg.tlo.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TLO", vRM) quit
	if rflg.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("RFLG","MSG",979,"RFLG."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordRFLG rflg)	//RFLG Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.rflg)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.rflg)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.rflg)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.rflg)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.rflg)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		else  if TSRC="O" do {
			do vj3(.rflg)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_UPDATE
			}
		}

	quit


vj1(RecordRFLG rflg)	// HIST_DELETE  Table HIST  History for deletion of RFLG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=rflg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5775",rflg.rflg)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordRFLG rflg)	// HIST_INSERT  Table HIST  History for creation of RFLG

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=rflg.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5774",rflg.rflg)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordRFLG rflg)	// HIST_UPDATE  Table HIST  History for updates to RFLG

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=rflg.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS(rflg.cid_","_rflg.rflg,"RFLG",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



vkchged // Access key changed

	type public RecordRFLG rflg

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("RFLG").exists() set vux("RFLG") = vx("RFLG")
	do vkey(1) set voldkey = rflg.cid_","_rflg.rflg        // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = rflg.cid_","_rflg.rflg        // Copy new keys into object
	type RecordRFLG vnewrec = rflg.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("RFLG",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordRFLG rflg

	if vux("CID").exists() set rflg.cid = vux("CID").piece("|",i)
	if vux("RFLG").exists() set rflg.rflg = vux("RFLG").piece("|",i)
	quit
