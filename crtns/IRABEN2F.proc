IRABEN2F(RecordIRABEN2 iraben2, String vpar, Boolean vparNorm) // IRABEN2 - RPA Beneficiary Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:25 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (17)             11/22/2003
	// Trigger Definition (2)                      09/21/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = iraben2.getMode()                     // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(iraben2,.vxins(),10,"|")
	if %O = 1 quit:'iraben2.isChanged()  do AUDIT^UCUTILN(iraben2,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String ACN = iraben2.acn
	type String RPASEQ = iraben2.rpaseq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("ACN").exists()!vx("RPASEQ").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("IRABEN2",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("IRABEN2","ACN = :iraben2.acn and RPASEQ = :iraben2.rpaseq") // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String ACN
	type public String RPASEQ

	type RecordIRABEN2 iraben2 = Db.getRecord("IRABEN2","ACN=:ACN,RPASEQ=:RPASEQ")
	if (%ProcessMode = 2) do {
		do iraben2.setMode(2)

		do IRABEN2F(iraben2,vpar)
	}

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordIRABEN2 iraben2

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("IRABEN2","ACN = :iraben2.acn and RPASEQ = :iraben2.rpaseq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(iraben2,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^IRABEN(vobj(iraben2,-3),vobj(iraben2,-4),n)=vobj(iraben2,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(iraben2,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(iraben2,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^IRABEN(vobj(iraben2,-3),vobj(iraben2,-4),n)=vobj(iraben2,n)
			#ENDBYPASS
		}

	}

	quit

vload // Record Load - force loading of unloaded data

	type public RecordIRABEN2 iraben2
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^IRABEN(vobj(iraben2,-3),vobj(iraben2,-4),n)) quit:n.isNull()  if 'vobj(iraben2,n).data(),^IRABEN(vobj(iraben2,-3),vobj(iraben2,-4),n).data()#2 set vobj(iraben2,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordIRABEN2 iraben2

	if 'vkeychg.get(),iraben2.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^IRABEN(vobj(iraben2,-3),vobj(iraben2,-4))        // Delete Record
	quit


vinit // Initialize default values

	type public RecordIRABEN2 iraben2

	// Type local variables for access keys for defaults
	type public String ACN
	type public String RPASEQ

	if iraben2.fmvelg.isNull() set iraben2.fmvelg = 0      // fmvelg
	quit


vreqn // Validate required data items

	type public RecordIRABEN2 iraben2

	if iraben2.benmad1.isNull() do vreqerr("BENMAD1") quit
	if iraben2.benname.isNull() do vreqerr("BENNAME") quit
	if iraben2.benrel.isNull() do vreqerr("BENREL") quit
	if iraben2.bentyp.isNull() do vreqerr("BENTYP") quit
	if iraben2.fmvelg.isNull() do vreqerr("FMVELG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordIRABEN2 iraben2

	if iraben2.acn.isNull() do vreqerr("ACN") quit
	if iraben2.rpaseq.isNull() do vreqerr("RPASEQ") quit

	if 'vobj(iraben2,-100,1,"").order().isNull() do {
		if vx("BENTYP").exists(),iraben2.bentyp.isNull() do vreqerr("BENTYP") quit
		if vx("BENREL").exists(),iraben2.benrel.isNull() do vreqerr("BENREL") quit
		if vx("BENNAME").exists(),iraben2.benname.isNull() do vreqerr("BENNAME") quit
		if vx("BENMAD1").exists(),iraben2.benmad1.isNull() do vreqerr("BENMAD1") quit
		if vx("FMVELG").exists(),iraben2.fmvelg.isNull() do vreqerr("FMVELG") quit
	}
		if vx("BENMAD1").exists(),iraben2.benmad1.isNull() do vreqerr("BENMAD1") quit
		if vx("BENNAME").exists(),iraben2.benname.isNull() do vreqerr("BENNAME") quit
		if vx("BENREL").exists(),iraben2.benrel.isNull() do vreqerr("BENREL") quit
		if vx("BENTYP").exists(),iraben2.bentyp.isNull() do vreqerr("BENTYP") quit
		if vx("FMVELG").exists(),iraben2.fmvelg.isNull() do vreqerr("FMVELG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRABEN2","MSG",1767,"IRABEN2."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("BENZIP").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vai1 // Trigger AFTER_INSERT - After Insert

	type public RecordIRABEN2 iraben2

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with beneficiary.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Beneficiary
	do ZIP^PROCZIP(iraben2.bencntry, iraben2.benstate, iraben2.benzip)
	if ER.get() do Runtime.setErrMSG("IRABEN2", 3333, RM)

	quit 
	

vau1 // Trigger AU_BENZIP - After Update of Beneficiary ZIP Code

	type public RecordIRABEN2 iraben2

	/*
	--Revision History-----------------------------------------------------------

	08/21/06 - KumarSS - 22169
		   Initial Revision.
		   This trigger validates ZIP code column associated with beneficiary.
	-----------------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String RM

	// Validate ZIP code - Beneficiary
	do ZIP^PROCZIP(iraben2.bencntry, iraben2.benstate, iraben2.benzip)
	if ER.get() do Runtime.setErrMSG("IRABEN2", 3333, RM)

	quit


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordIRABEN2 iraben2

	if (%O = 2) do vload

	if vobj(iraben2,1).exists() do {

		set X = iraben2.benacn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BENACN", vRM) quit
		if iraben2.bencity.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENCITY", vRM) quit
		set X = iraben2.bencntry if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("BENCNTRY", vRM) quit
		if iraben2.benlnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("BENLNM", vRM) quit
		if iraben2.benmad1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENMAD1", vRM) quit
		if iraben2.benmad2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENMAD2", vRM) quit
		if iraben2.benmad3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENMAD3", vRM) quit
		if iraben2.benname.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BENNAME", vRM) quit
		set X = iraben2.benpct if 'X.isNull(),X'?1.9N,X'?1"-"1.8N set vRM=$$^MSG(742,"N") do vdderr("BENPCT", vRM) quit
		set X = iraben2.benrel if 'X.isNull(),'Db.isDefined("UTBLBENREL","X") set vRM = $$^MSG(1485,X) do vdderr("BENREL", vRM) quit
		if iraben2.benstate.length()>2 set vRM = $$^MSG(1076,2) do vdderr("BENSTATE", vRM) quit
		if iraben2.bentaxid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("BENTAXID", vRM) quit
		set X = iraben2.bentyp if 'X.isNull(),'Db.isDefined("UTBLBENTYP","X") set vRM = $$^MSG(1485,X) do vdderr("BENTYP", vRM) quit
		if iraben2.benzip.length()>10 set vRM = $$^MSG(1076,10) do vdderr("BENZIP", vRM) quit
		if '("01"[iraben2.FMVELG) set vRM=$$^MSG(742,"L") do vdderr("FMVELG", vRM) quit
	}
	set X = iraben2.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
	set X = iraben2.rpaseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("RPASEQ", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("IRABEN2","MSG",979,"IRABEN2."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vkchged // Access key changed

	type public RecordIRABEN2 iraben2

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("ACN").exists() set vux("ACN") = vx("ACN")
	if vx("RPASEQ").exists() set vux("RPASEQ") = vx("RPASEQ")
	do vkey(1) set voldkey = iraben2.acn_","_iraben2.rpaseq // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = iraben2.acn_","_iraben2.rpaseq // Copy new keys into object
	type RecordIRABEN2 vnewrec = iraben2.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("IRABEN2",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordIRABEN2 iraben2

	if vux("ACN").exists() set iraben2.acn = vux("ACN").piece("|",i)
	if vux("RPASEQ").exists() set iraben2.rpaseq = vux("RPASEQ").piece("|",i)
	quit
