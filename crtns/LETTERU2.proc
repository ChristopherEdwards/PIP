LETTERU2	  /*
ORIG: OFALTR - 09/12/2000
DESC: Additional Record Process

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------
	
	12/21/06 - PUTTASWH - CR 24538
		   Modified to declare 650 and 890 sections as public.

	01/30/06 Radhika - CR 17423
		 .Eliminated PSL deprecated features and warnings.
		 .Removed revision history prior to 2004.

*/

	quit

public 650(Number XCID)	// Create Funds Availability Records (Record Type 650).
 	
 	type public Date LETTJD,TJD
 	type public String AGRP,FORM
 	type public Number ACN,CID,VAR
 	type Date EXPDATE,XTJD
 	type String EXP,REASON,REC,XCHKFLT,X
 	type Number AGG,CHKAMT,CHKFLT(),EXC,I,RECSEQ
 	type RecordSTBLREGCCX regccx
 	
	set XTJD=TJD.get()

        type ResultSet rs=Db.select("CHKFLT","HLDD","TJD=:XTJD AND CID=:XCID")
        if 'rs.isEmpty() while rs.next() do {
                set XCHKFLT=rs.getCol("CHKFLT")
		set XCHKFLT="~"_XCHKFLT
                set I=0
                set X=XCHKFLT.piece("~CHK#",2)
                while 'X.isNull() do {
                        set I=I+1
                        set EXPDATE=X.piece("#",1)
                        set CHKAMT=X.piece("#",2)
                        set CHKFLT(EXPDATE)=CHKFLT(EXPDATE).get()+CHKAMT
                        set X=XCHKFLT.piece("~CHK#",2+I)
                        }
                }

        type RecordDEP dp=Db.getRecord("DEP","CID=:XCID")
        set EXC=dp.regccexc //Reg CC Exception Account

	if (EXC=2)!(EXC=1) set regccx=Db.getRecord("STBLREGCCX","REGCCEXC=:EXC") set REASON=regccx.desc
	//Aggregate daily deposit is $5,000 or more.
	else  set REASON=$$^MSG(4497)

        type RecordDAYENDRCC0 daye=Db.getRecord("DAYENDRCC0","TJD=:XTJD,OPT=:XCID")
        set AGG=daye.agg

	// myersk - 43728
	// Set up all necessary variables and call into 650^LETTERF
	// This forces the record to match the field definitions in STBLFORM
	#ACCEPT DATE=12/08/03;PGM=John Carroll
        for I=1:1:10 set X="set (EXPDAT"_I_",HLDAMT"_I_")=""""" xecute X
        set I=0,EXP=""
        for  set EXP=CHKFLT(EXP).order() quit:EXP.isNull()  do {
                set I=I+1
                set X="HLDAMT"_I,@X=CHKFLT(EXP)
                set X="EXPDAT"_I,@X=EXP
        	}
                
        set REC=$$650^LETTERF(XTJD,XCID)

        set RECSEQ=Db.nextVal("LETTER","LETTJD,AGRP,FORM,VAR,ACN,CID,650")
        do FILE^LETTERU(ACN.get(),CID.get(0),FORM,AGRP,VAR,650,RECSEQ,REC)
        quit

	// myersk - 43728
	// Added parameter CID
public 890(CID)	//Produce 890 record for Newaccount Rate Sheet 

	type public Date LETTJD
	type public String AGRP,FORM
	type public Number CHECK
	type Date Dt,EFDEND,RSSTART,RSEND,XEFD
	type Number JOB,LBAL,QFLG,REQMIN,XSEQ,XTYP
	type String DES,KEY1,KEY2,REC890
	
	do Db.fastDelete("TMPRPT5","PID=:%ProcessID")

	set JOB=%ProcessID

	set Dt=LETTJD+1
	set KEY1=AGRP.get()
	set QFLG=0
	
	if FORM="NEWACCT" do { quit:QFLG=1

		type ResultSet rs4=Db.select("ACN","LETTER","SJD=:LETTJD AND CO=:AGRP AND FORM='NEWACCT' AND VAR=:VAR AND ACN=:ACN AND RECTYPE=890")
		if 'rs4.isEmpty() set QFLG=1
		}

	do CHECK

	if CHECK quit

        type ResultSet rs=Db.select("DISTINCT RATECD","UTBLRSHEET","CO=:KEY1")
        if rs.isEmpty() quit
        while rs.next() do {
                set KEY2=rs.getCol("RATECD")

		type RecordUTBLRSHEET0 rsheet0=Db.getRecord("UTBLRSHEET0","CO=:KEY1,RATECD=:KEY2")

		type ResultSet rs1=Db.select("TEFD","UTBLRSHEET","CO=:KEY1 AND RATECD=:KEY2 AND TEFD<:Dt","TEFD DESC")
		if 'rs1.isEmpty(),rs1.next() do {
			set XEFD=rs1.getCol("TEFD")

			type ResultSet rs2=Db.select("TYP,SEQ,LOWBAL","UTBLRSHEET","CO=:KEY1 AND RATECD=:KEY2 AND TEFD=:XEFD")
			if rs2.isEmpty() quit
			while rs2.next() do { 

				set XTYP=rs2.getCol("TYP")
				set XSEQ=rs2.getCol("SEQ")
				set LBAL=rs2.getCol("LOWBAL")

				set DES=rsheet0.des
				set REQMIN=rsheet0.reqmin
                                set EFDEND=rsheet0.efdend
                                set RSSTART=rsheet0.rsstart
                                set RSEND=rsheet0.rsend

				set REC890=$$890^LETTERF(KEY1,KEY2,XEFD,XTYP,XSEQ,LBAL)

				type RecordTMPRPT5 tmprpt5=Class.new("RecordTMPRPT5")
				set tmprpt5.pid=JOB
				set tmprpt5.key1=KEY1
				set tmprpt5.key2=KEY2
				set tmprpt5.key3=XTYP
				set tmprpt5.key4=XSEQ
				set tmprpt5.key5=LBAL
				set tmprpt5.data=REC890

				do tmprpt5.bypassSave()

				do RFILE(REC890) quit

				}
			}
		}
	quit


RFILE(String REC)	//
	
	type public Date LETTJD
 	type public String AGRP,FORM
 	type public Number ACN,CID,VAR
 	type Number RECSEQ
 	
	set RECSEQ=Db.nextVal("LETTER","LETTJD,AGRP,FORM,VAR,ACN,CID,890")
	do FILE^LETTERU(ACN.get(),CID.get(0),FORM,AGRP,VAR,890,RECSEQ,REC)

	quit

CHECK	// Check to see if TMP record exists

	type public Number CHECK
	type public String KEY1
	type Number JOB
	type String CURR,REC

	set CHECK=0
	set JOB=%ProcessID

	set CURR=Db.currVal("TMPRPT5","PID=:JOB,KEY1=:KEY1")

	if 'CURR.get().isNull() do { quit
		type ResultSet rs3=Db.select("DATA","TMPRPT5","PID=:%ProcessID AND KEY1=:KEY1")
		if rs3.isEmpty() quit
		while rs3.next() do {
			set CHECK=1
			set REC=rs3.getCol("DATA")
			do RFILE(REC)
			}
		}

	if 'Db.currVal("UTBLRSHEET0","KEY1").isNull() quit

	if KEY1'="*" set KEY1="*" do CHECK 

	quit

ACNRELC(Number CID,String CODES)

	/*
	Verify whether the Account Relationship Code on account CID is
	contained in the list passed in CODES

	Arguments
	    .CID	The account number
	    .CODES	A comma-delimited list of Relationship Codes

	Retruns
	    .$$		0 - The relationship code on the account is not in
				the list
			1 - The relationship code on the account is in the list
	*/
	

	if CODES.get().isNull() quit 0
	set CODES=","_CODES_","
 
	quit:'CID.get() 0

	type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
	if 'acn.getMode() quit 0
	quit:acn.acnrelc.isNull() 0

	quit CODES[(","_acn.acnrelc_",")

CLS(Number CID,String CODES)

	/*
	Verify whether the Class Code on account CID is contained in the list
	passed in CODES

	Arguments
	    .CID	The account number
	    .CODES	A comma-delimited list of Class Codes

	Retruns
	    .$$		0 - The class on the account is not in the list
			1 - The class on the account is in the list
	*/

	if CODES.get().isNull() quit 0
	set CODES=","_CODES_","
 
	quit:'CID.get() 0
	type RecordACN acn=Db.getRecord("ACN","CID",1)
	if 'acn.getMode() quit 0
	quit:acn.cls.isNull() 0

	quit CODES[(","_acn.cls_",")

GRP(Number CID,String CODES)

	/*
	Verify whether the Group Code on account CID is contained in the list
	passed in CODES

	Arguments
	    .CID	The account number
	    .CODES	A comma-delimited list of Group Codes

	Retruns
	    .$$		0 - The group code on the account is not in the list
			1 - The group code on the account is in the list
	*/

	if CODES.get().isNull() quit 0
	set CODES=","_CODES_","
 
	quit:'CID.get() 0

	type RecordACN acn=Db.getRecord("ACN","CID",1)
	if 'acn.getMode() quit 0
	quit:acn.grp.isNull() 0
	quit CODES[(","_acn.grp_",")

TYPE(Number CID,String CODES)

	/*
	Verify whether the Type Code on account CID is contained in the list
	passed in CODES

	Arguments
	    .CID	The account number
	    .CODES	A comma-delimited list of Type Codes

	Retruns
	    .$$		0 - The type code on the account is not in the list
			1 - The type code on the account is in the list
	*/

	if CODES.get().isNull() quit 0
	set CODES=","_CODES_","
 
	quit:'CID.get() 0

	type RecordACN acn=Db.getRecord("ACN","CID",1)
	if 'acn.getMode() quit 0
	quit:acn.type.isNull() 0

	quit CODES[(","_acn.type_",")

vSIG()	quit "60627^22210^Hema Puttaswamy^7269"	// Signature - LTD^TIME^USER^SIZE
