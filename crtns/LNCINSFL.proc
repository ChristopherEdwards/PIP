LNCINSFL(RecordLNCYCINS lncycins, String vpar, Boolean vparNorm) // LNCYCINS - Loan Cycled Items - Insurance Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:26 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (37)             06/20/2006
	// Trigger Definition (4)                      01/10/2007
	// Journal File Definition (2)                 12/17/2004
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = lncycins.getMode()                    // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(lncycins,.vxins(),1,"|")
	if %O = 1 do AUDIT^UCUTILN(lncycins,.vx(),1,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = lncycins.cid
	type String TYP = lncycins.typ

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI                            // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("TYP").exists() do vkchged quit // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("LNCYCINS",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU                            // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI                            // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("LNCYCINS","CID = :lncycins.cid and TYP = :lncycins.typ") // No record exists
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD                            // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String TYP

	type RecordLNCYCINS lncycins = Db.getRecord("LNCYCINS","CID=:CID,TYP=:TYP")
	if (%ProcessMode = 2) do {
		do lncycins.setMode(2)

		do LNCINSFL(lncycins,vpar)
	}
	else  do VINDEX(lncycins)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordLNCYCINS lncycins

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("LNCYCINS","CID = :lncycins.cid and TYP = :lncycins.typ") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))
	if vpar["/VALFK/" do CHKFKS                            // Check foreign keys
	if vpar["/VALRI/" do VFKEYS                            // Foreign key definition

	if vpar'["/NOUPDATE/" do {

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(lncycins))  S ^LNCYC("INS",vobj(lncycins,-3),vobj(lncycins,-4))=vobj(lncycins)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.lncycins)            // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.lncycins) // Update Index files

	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordLNCYCINS lncycins

	if vpar["/INDEX/" do VINDEX(.lncycins)                 // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.lncycins)             // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	ZWI ^LNCYC("INS",vobj(lncycins,-3),vobj(lncycins,-4))  // Delete Record
	quit


vinit // Initialize default values

	type public RecordLNCYCINS lncycins

	// Type local variables for access keys for defaults
	type public String CID
	type public String TYP

	if lncycins.apr.isNull() set lncycins.apr = 0          // apr
	if lncycins.pbal.isNull() set lncycins.pbal = 100      // pbal
	if lncycins.rcm.isNull() set lncycins.rcm = 0          // rcm
	quit


vreqn // Validate required data items

	type public RecordLNCYCINS lncycins

	if lncycins.apr.isNull() do vreqerr("APR") quit
	if lncycins.rcm.isNull() do vreqerr("RCM") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordLNCYCINS lncycins

	if lncycins.cid.isNull() do vreqerr("CID") quit
	if lncycins.typ.isNull() do vreqerr("TYP") quit

		if vx("APR").exists(),lncycins.apr.isNull() do vreqerr("APR") quit
		if vx("RCM").exists(),lncycins.rcm.isNull() do vreqerr("RCM") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCINS","MSG",1767,"LNCYCINS."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


VFKEYS // Foreign keys

	type public String vfkey(),vpar

	type public RecordLNCYCINS lncycins
	if 'lncycins.cid.isNull() set vfkey("^ACN("_""""_lncycins.cid_""""_","_50_")")="LNCYCINS(CID) -> LN"
	quit

CHKFKS   // Check foreign keys when not under buffer


	type public RecordLNCYCINS lncycins
	type public Number %O
	type String vERRMSG

	if 'Db.isDefined("LN",":lncycins.cid") set vERRMSG = $$^MSG(8563,"LNCYCINS(CID) -> LN") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))
	quit


VAD //
	type public Number ER = 0
	type public String vx(),RM
	do vad1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAI //
	type public Number ER = 0
	type public String vx(),RM
	do vai1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VAU //
	type public Number ER = 0
	type public String vx(),RM
	if vx("").order().isNull() quit
	if vx("NXADT").exists() do vau1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VBI //
	type public Number ER = 0
	type public String vx(),RM
	do vbi1 if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit


vad1 // Trigger AFTER_DELETE - After Delete LNCYCINS

	type public RecordLNCYCINS lncycins
	/*
	---------- Revision History ------------------------------------------

	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.
		   	
	05/18/01 - MBUIM - 44605
	           Delete flags in loan record.
	*/
	
	type public Number CID
			
	type RecordLN ln=Db.getRecord("LN","CID",1)

	if lncycins.typ="ID" set ln.dip=0
	if lncycins.typ="IL" set ln.lip=0
	if lncycins.typ="IH" set ln.hip=0
	
	do ln.save()
	
	do Db.delete("DAYENDAOAMO","NXADT=:lncycins.nxadt AND TYP=:lncycins.typ AND PAYEE=:lncycins.payee AND PLAN=:lncycins.plan AND CID=:lncycins.cid")
	
	quit
	

vai1 // Trigger AFTER_INSERT - After Insert LNCYCINS

	type public RecordLNCYCINS lncycins
	/*
	---------- Revision History ------------------------------------------

	10/30/06 - KELLYP - CR 23814
		   Removed the setting of the audit flag for loan column 
		   changes.  This prevents a fatal integ from appearing on
		   the account after an account is opened with financed
		   cycled items and a backdated disbursement is processed.

	10/27/06 - KELLYP - CR 23304
		   Added edit checks on beginning/end dates defined in the
		   cycled item's corresponding AOAMO record.  Also removed
		   pre-2003 revision history and added code for updating
		   counter on the AOAMO record that was missing.

	03/10/06 - AlagarsamyS - 20036
		   Modified the condtion statement.
	
	03/09/06 - Alagarsamy - CR 19088	
		   Modified code to avoid SQL Fail error.
	
								09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.        

	*/

	type public Boolean ER
		
	if %ProcessMode'=2 do { quit:ER

		type RecordAOAMO aoamo = Db.getRecord("AOAMO","TYP=:lncycins.typ,PAYEE=:lncycins.payee,PLAN=:lncycins.plan",1)
		
		// Payee ended on ~p1
		if (aoamo.pldate),(%SystemDate > aoamo.pldate) do Runtime.setErrMSG("LNCYCINS","2151",aoamo.pldate.toString()) quit:ER
		
		// Payee does not begin until ~p1
		if (aoamo.pbdate),(%SystemDate < aoamo.pbdate) do Runtime.setErrMSG("LNCYCINS","2150",aoamo.pbdate.toString()) quit:ER

		type RecordLN ln=Db.getRecord("LN","CID=:lncycins.cid",1)

		// Update loan credit limit for insurance premiums
		if lncycins.amt,lncycins.pdby do {

			type RecordSTBLIPDBY sipdby=Db.getRecord("STBLIPDBY","KEY=:lncycins.pdby",1)
		
			if 'sipdby.add quit
	
																								// Recalculate payment and disclosure information
																								do PROC^LNCYCPRO(.ln)

			set ln.crlmt=ln.crlmt+lncycins.amt
			set ln.udbal=ln.udbal+lncycins.amt
			set ln.aoamtorg=ln.aoamtorg+lncycins.amt
 			}

		// Update flags in loan record
		if lncycins.typ="ID" set ln.dip=1
		if lncycins.typ="IL" set ln.lip=1
		if lncycins.typ="IH" set ln.hip=1

		set aoamo.cnt=aoamo.cnt+1
		do aoamo.save()

		do ln.save()
		}
		
	// To insert the data into the DAYENDAOAMO table manually.
	type ResultSet rs1=Db.select("NCD","DAYENDAOAMO","CID=:lncycins.cid")
	if rs1.next() do {
		if 'rs1.getCol("NCD").isNull() do {
			type RecordDAYENDAOAMO daoamo=Class.new("RecordDAYENDAOAMO")
			set daoamo.nxadt= rs1.getCol("NCD")
	            	set daoamo.typ=lncycins.typ
	            	set daoamo.payee=lncycins.payee
		        set daoamo.plan=lncycins.plan
		        set daoamo.cid=lncycins.cid
		        do daoamo.save()
			}
		}	
	
	quit
	

vau1 // Trigger AU_NXADT - After Update Next Action Date

	type public RecordLNCYCINS lncycins
	/*
	---------- Revision History ------------------------------------------

	12/21/06 - KELLYP - CR 24622
		   Added this new trigger to delete the old DAYENDAOAMO record
		   and create a new one when the Next Action Date on the cycled 
		   item is modified.

	-----------------------------------------------------------------------
	*/

	type Date OLDDT

	set OLDDT = lncycins.nxadt.oldVal

	do Db.delete("DAYENDAOAMO","NXADT=:OLDDT AND TYP=:lncycins.typ AND PAYEE=:lncycins.payee AND PLAN=:lncycins.plan AND CID=:lncycins.cid")

	type RecordDAYENDAOAMO daoamo = Db.getRecord("DAYENDAOAMO","NXADT=:lncycins.nxadt,TYP=:lncycins.typ,PAYEE=:lncycins.payee,PLAN=:lncycins.plan,CID=:lncycins.cid",1)

	if daoamo.getMode() quit

	do daoamo.bypassSave()

	quit

vbi1 // Trigger BEFORE_INSERT - Before Insert LNCYCINS.

	type public RecordLNCYCINS lncycins
	/*
								---------- Revision History ------------------------------------------

	01/10/06 - KELLYP - CR 24662
		   Modified to remove DAYENDAOAMO record creation.  This is
		   already handled by the after insert trigger.  Also modified
		   to use a scratch variable when appending an "A" onto itrm
		   to prevent the original value from being overwritten and 
		   removed pre-2004 revision history.
	
	09/26/05 - Satyanas - CR16994
		   Modified the Code to PSL Standards.	

								*/

	type public Boolean ER
	type public Number amt,CID

	type Date ENDDT,NJD
	
	type RecordLN ln=Db.getRecord("LN","CID",1)
	
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ln.acn",1)

	if (lncycins.typ).extract()="I",'lncycins.amt do { quit:ER 
		
		type String params()

		if lncycins.typ.isNull()!lncycins.payee.isNull()!lncycins.plan.isNull() quit
								
		type RecordAOAMO aoamo1=Db.getRecord("AOAMO","TYP=:lncycins.typ,PAYEE=:lncycins.payee,PLAN=:lncycins.plan",1) 

		if 'aoamo1.getMode() quit	

		if aoamo1.cmet.isNull() quit 
		
		type RecordLNINS lnins=Db.getRecord("LNINS","TYPE=:lncycins.typ,PAYEE=:lncycins.payee,PLAN=:aoamo1.cmet",1)
				
		if lnins.ppgm.isNull() quit 
	
		/*
		Program must be extrinsic function that returns amt
		Function parameters are TJD and params list
		*/
		if lnins.ppgm'?1"$$".E1"^".E quit 
		set params("AMTREQ")=ln.amtreq
		set params("TRM")=ln.trm
		set params("DIST1FRE")=ln.dist1fre
		set params("ODD")=ln.odd
		set params("DIST1ND")=ln.dist1nd
		set params("IRN")=ln.irn
		set params("DOB")=cif.dob
		set params("PAYEE")=lncycins.payee
		set params("PLAN")=lncycins.plan
		#ACCEPT DATE=12/30/03;PGM=John Carroll
		xecute "S amt="_lnins.ppgm_"("_%SystemDate_",.params)"
	
		if amt.get() set lncycins.amt=amt
		}
	
	// set defaults if the fields have not been provided
	
	type RecordAOAMO aoamo=Db.getRecord("AOAMO","TYP=:lncycins.typ,PAYEE=:lncycins.payee,PLAN=:lncycins.plan",1)
			
	if 'aoamo.getMode() quit

	set lncycins.caltd=0
	set lncycins.cntr=0
	if lncycins.freq.isNull() set lncycins.freq=aoamo.fre
	if lncycins.freq.isNull() set lncycins.freq=ln.dist1fre
	if 'lncycins.rate.isNull(),aoamo.met'="ACT" set lncycins.rate=""
	if lncycins.rate.isNull(),aoamo.met="ACT" set lncycins.rate=ln.irn
	if 'lncycins.apr set lncycins.apr=aoamo.apr
	if 'lncycins.rcm set lncycins.rcm=aoamo.rcm
	if 'lncycins.dcp set lncycins.dcp=aoamo.dcp
		
	if lncycins.nxadt.isNull() do {
	
		set NJD=(ln.odt).nextFreqDate(lncycins.freq) quit:ER
		set lncycins.nxadt=NJD
		}
		
	if 'lncycins.term do { quit:ER		
		
		type Number FA,FANP,NP
		type String FRE,STOP
		
		if lncycins.itrm.isNull() set lncycins.itrm=ln.trm 
		if lncycins.itrm.isNull() quit 
		
		set FRE = lncycins.itrm
		if (FRE.length()-(+FRE).length()) = 1 set FRE=FRE_"A"
		
		// ~p1
		set NJD=ln.odd.nextFreqDate(FRE) if ER.get() do Runtime.setErrMSG("LNCYCINS",3333,"RM") quit:ER 
		set ENDDT=NJD 
		set STOP=""
		for NP=1:1 set NJD=(ln.odd).nextFreqDate(lncycins.freq) quit:ER  do { quit:STOP 
			if NJD>ENDDT set STOP=1 quit 
			set ln.odd=NJD
			}
		if ER.get() quit 
		
		set FA=NP#1
		set FANP=$S(FA:NP+.5,1:NP-1)
		set NP=FANP.roundDec(0,"","")
		set lncycins.term=NP
		}

	quit
		
		


vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordLNCYCINS lncycins

	set X = lncycins.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	if lncycins.typ.length()>8 set vRM = $$^MSG(1076,8) do vdderr("TYP", vRM) quit
	set X = lncycins.amt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.AMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycins.APR) set vRM=$$^MSG(742,"L") do vdderr("APR", vRM) quit
	set X = lncycins.cacr if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.CACR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.caltd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.CALTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.cbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.CBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.cipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.CIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.cntr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CNTR", vRM) quit
	if lncycins.cnum.length()>15 set vRM = $$^MSG(1076,15) do vdderr("CNUM", vRM) quit
	set X = lncycins.cseq if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CSEQ", vRM) quit
	set X = lncycins.dcp if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.DCP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycins.drc.length()>40 set vRM = $$^MSG(1076,40) do vdderr("DRC", vRM) quit
	set X = lncycins.freq if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCINS]FREQ",0) if 'vRM.get().isNull() do vdderr("FREQ", vRM) quit
	set X = lncycins.iamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.IAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.inspmtst if 'X.isNull(),'Db.isDefined("UTBLINSPMTST","X") set vRM = $$^MSG(1485,X) do vdderr("INSPMTST", vRM) quit
	set X = lncycins.irla if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.IRLA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycins.itrm.length()>8 set vRM = $$^MSG(1076,8) do vdderr("ITRM", vRM) quit
	set X = lncycins.lsadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LSADT", vRM) quit
	set X = lncycins.mben if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.MBEN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.npda if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.NPDA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.nsip if 'X.isNull(),'Db.isDefined("STBLNSIP","X") set vRM = $$^MSG(1485,X) do vdderr("NSIP", vRM) quit
	set X = lncycins.nxadt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("NXADT", vRM) quit
	set X = lncycins.nyld if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.NYLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.oipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.OIPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if lncycins.payee.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PAYEE", vRM) quit
	set X = lncycins.pbal if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.PBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.pdby if 'X.isNull(),'Db.isDefined("STBLIPDBY","X") set vRM = $$^MSG(1485,X) do vdderr("PDBY", vRM) quit
	if lncycins.plan.length()>6 set vRM = $$^MSG(1076,6) do vdderr("PLAN", vRM) quit
	set X = lncycins.ramt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.RAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",10,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	if '("01"[lncycins.RCM) set vRM=$$^MSG(742,"L") do vdderr("RCM", vRM) quit
	set X = lncycins.reb if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"LNCYCINS.REB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	set X = lncycins.ryfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[LNCYCINS]RYFRE",0) if 'vRM.get().isNull() do vdderr("RYFRE", vRM) quit
	set X = lncycins.ryld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYLD", vRM) quit
	set X = lncycins.rynd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RYND", vRM) quit
	set X = lncycins.term if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("TERM", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("LNCYCINS","MSG",979,"LNCYCINS."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordLNCYCINS lncycins)	//LNCYCINS Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=3 do {
		if TSRC="B" do {
			do vj1(.lncycins)	// Mode=D Tran=B EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		else  if TSRC="O" do {
			do vj1(.lncycins)	// Mode=D Tran=O EFD=N,E Seq=1 JRNID=HIST_DELETE
			}
		}
	else  if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj2(.lncycins)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		else  if TSRC="O" do {
			do vj2(.lncycins)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_INSERT
			}
		}

	quit


vj1(RecordLNCYCINS lncycins)	// HIST_DELETE  Table HIST  History for deletion of the record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycins.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG("5084","INS",lncycins.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordLNCYCINS lncycins)	// HIST_INSERT  Table HIST  History for creation of new record

	type Public String EFD,%IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=lncycins.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.cdt=+$H
	set hist.efd=$G(EFD)
	set hist.ident=%IDENT
	set hist.tcmt=$$LNAMOJRN^LNFUNCS("INS",lncycins.plan)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit



public VINDEX(RecordLNCYCINS lncycins) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		if vx("NXADT").exists()!vx("PAYEE").exists()!vx("PLAN").exists() do vi1(.lncycins)
		if vx("PAYEE").exists()!vx("PLAN").exists() do vi2(.lncycins)
	}
	do vi1(.lncycins)
	do vi2(.lncycins)

	quit
	

vi1(RecordLNCYCINS lncycins) // Maintain AOAMOINS index entries (Insurances - Next Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = lncycins.nxadt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = lncycins.typ
	type String v4 = lncycins.payee
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycins.plan
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = lncycins.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^LNCYC("INS",vobj(lncycins,-3),vobj(lncycins,-4)))#2,'$D(^DAYEND(v1,"AOAMO",v3,v4,v5,v6)) do vidxerr("AOAMOINS")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"AOAMO",v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("NXADT").exists() set v1=vx("NXADT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("PAYEE").exists() set v4=vx("PAYEE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v5=vx("PLAN").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"AOAMO",v3,v4,v5,v6)
	quit

vi2(RecordLNCYCINS lncycins) // Maintain LNXAINS index entries (Payee, Plan, CID X-Ref)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = lncycins.typ
	type String v3 = lncycins.payee
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = lncycins.plan
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = lncycins.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $D(^LNCYC("INS",vobj(lncycins,-3),vobj(lncycins,-4)))#2,'$D(^XREF("LNCYCINS",v2,v3,v4,v5)) do vidxerr("LNXAINS")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("LNCYCINS",v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PAYEE").exists() set v3=vx("PAYEE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PLAN").exists() set v4=vx("PLAN").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("LNCYCINS",v2,v3,v4,v5)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("LNCYCINS")

	while ds.next() do {
		type RecordLNCYCINS lncycins=ds.getRecord("LNCYCINS")
		if vlist.contains("VINDEX") do VINDEX(.lncycins) quit
		if vlist.contains("AOAMOINS") do vi1(.lncycins)
		if vlist.contains("LNXAINS") do vi2(.lncycins)
	}

	quit


public VIDXBLD1(RecordLNCYCINS lncycins, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.lncycins) quit
	if vlist.contains("AOAMOINS") do vi1(.lncycins)
	if vlist.contains("LNXAINS") do vi2(.lncycins)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("LNCYCINS","MSG",1225,"LNCYCINS."_di)

	quit


vkchged // Access key changed

	type public RecordLNCYCINS lncycins

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("TYP").exists() set vux("TYP") = vx("TYP")
	do vkey(1) set voldkey = lncycins.cid_","_lncycins.typ // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = lncycins.cid_","_lncycins.typ // Copy new keys into object
	type RecordLNCYCINS vnewrec = lncycins.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("LNCYCINS",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordLNCYCINS lncycins

	if vux("CID").exists() set lncycins.cid = vux("CID").piece("|",i)
	if vux("TYP").exists() set lncycins.typ = vux("TYP").piece("|",i)
	quit

VIDXPGM()	quit "LNCINSFL"	// Location of index program

