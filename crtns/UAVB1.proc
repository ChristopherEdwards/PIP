UAVB1	//PBS -  - V2.0 - Average balance calculations
	/*
	  ;Copyright(c)2001 Sanchez Computer Associates, Inc.  All Rights Reserved - 12/27/01 11:02:52 - VETSENM

	       DESC:

	----------------Revision History --------------------------------------
	
	09/28/06 - KinI - 22447
		   Modified AB90D1 section to type X variable locally since
		   it used to be unnecessary redefined here.

	05/22/06 - TitovE/KinI - 20978
		   Modified ADBC2 section to eliminate endless loop.

	05/06/05 - KinI - 15524
		   Modified ADBC2 section to replace lnbil1.bp1 piece reference
		   with direct sub-field lnbil1.cbcd per DBI standards.
	  	   Modified INIT^UAVB calls in EXEC section to pass CID as the
	  	   second parameter instead of third.
	  	   
	04/26/05 - SmithCD - CR 15305
		   Removed occurrence of "ORDER BY" in order by clause of 
		   select and statement b/c they can cause problems in an 
		   Oracle environment. Removed old revision history.
		   
	04/11/03 - Dan Russell - 51351
		   Correct call to INIT^UAVB.  Parameters were not
		   positioned correctly.

	-----------------------------------------------------------------------
		
	*/

	quit

	//---------------------------------------------------------------------
public ADBS1	// ADB this statement period
	//---------------------------------------------------------------------
	/*

	Inputs:
 
	. CID				/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XDEP03			/TYP=S

	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XDEP03=""

	type RecordDEP dep=Db.getRecord("DEP","CID")
	set PCIF=dep.acn

	type RecordCMBCID cmbcid=Db.getRecord("CMBCID","CID,PCIF")
	set SGRP=cmbcid.stmgrp

	type RecordCMBGRP cmbgrp=Db.getRecord("CMBGRP","PCIF,SGRP")
	set TD=cmbgrp.sndt

	type RecordCMBSTM cmbstm=Db.getRecord("CMBSTM","PCIF,SGRP,CID")
	set FD=cmbstm.sltd+1

	set:TD>%SystemDate TD=%SystemDate

	do EXEC
	
	set XDEP03=X

	quit

	//-----------------------------------------------------------------------
public ADBS2	// ADB prior statement period
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID				/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XDEP04			/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XDEP04=""

	type RecordDEP dep=Db.getRecord("DEP","CID")
	set PCIF=dep.acn

	type RecordCMBCID cmbcid=Db.getRecord("CMBCID","CID,PCIF")
	set SGRP=cmbcid.stmgrp

	type RecordCMBGRP cmbgrp=Db.getRecord("CMBGRP","PCIF,SGRP")
	set TD=cmbgrp.sndt

	type RecordCMBSTM cmbstm=Db.getRecord("CMBSTM","PCIF,SGRP,CID")
	set FD=cmbstm.sltd+1

	do EXEC
	
	set XDEP04=X

	quit

	//-----------------------------------------------------------------------
public ADBM1	// ADB this month (calendar)
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID				/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XDEP01			/TYP=S
	. XLN03				/TYP=S 

	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XDEP01=""
	set XLN03=""

	set X=%SystemDate
	set Y=$$DAT^%ZM(X,"MM/DD/YEAR")
	set Z=$P(Y,"/",2)-1
	set Z=X-Z
	set FD=Z
	set X=+Y

	set Z=$S(X=9!(X=11)!(X=4)!(X=6):30,X=2:28,1:31)
	if X=2,'($P(Y,"/",3)#4) set Z=Z+1

	set TD=FD+Z-1
	set:TD>%SystemDate TD=%SystemDate

	do EXEC
	
	set XDEP01=X
	set XLN03=X

	quit

	//-----------------------------------------------------------------------
public ADBM2	// ADB prior month (calendar)
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XDEP02			/TYP=S
 	. XLN04				/TYP=S

	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XDEP02=""
	set XLN04=""

	set X=%SystemDate
	set Y=$$DAT^%ZM(X,"MM/DD/YEAR")
	set Z=$P(Y,"/",2)-1
	set Z=X-Z
	set TD=Z-1
	set X=+Y-1

	set Z=$S(X=9!(X=11)!(X=4)!(X=6):30,X=2:28,1:31)
	if X=2,'($P(Y,"/",3)#4) set Z=Z+1

	set FD=TD-(Z-1)

	do EXEC
	
	set XDEP02=X
	set XLN04=X

	quit

	//-----------------------------------------------------------------------
public ADBC1	// ADB this billing period
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XLN01				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XLN01=""

	type RecordLN ln=Db.getRecord("LN","CID")

	set TD=ln.bndt
	set FD=ln.bldt

	set:TD>%SystemDate TD=%SystemDate

	do EXEC

	set XLN01=X

	quit


public ADBC2	// ADB prior billing period

	catch vERROR {
		type String ET, RM
		
		set ET = vERROR.type

		if ET.isLike("%%GTM-%") do ZE^UTLERR

		set ET = ET_"-"_vERROR.thrownAt
		set RM = vERROR.description

		do ^UTLERR
		}

	type public Number CID
	type public String XLN02 = ""
	
	type Date FD = "", TD
	type Number SCHSEQ
	type String X

	type RecordLN ln = Db.getRecord("LN", "CID = :CID")

	set TD = ln.bldt

	// No bill records have been created
	if TD.isNull() quit

	// Attempt to set From Date equal to Pmt Due Date + 1 on the bill record that is
	// previous to the one where Pmt Due Date is equal to Billing - Last Date
	type ResultSet rs = Db.select("SCHSEQ", "LNBIL1", "CID=:CID AND CBCD=:TD", "SCHSEQ DESC")

	if rs.next() do {
		
		set SCHSEQ = rs.getCol("SCHSEQ")
		
		type ResultSet rs1 = Db.select("CBCD", "LNBIL1", "CID=:CID AND SCHSEQ<:SCHSEQ", "SCHSEQ DESC")
		
		if rs1.next() set FD = rs1.getCol("CBCD") + 1
		}

	// If there is only one bill, use the Date of Note as the from date
	if FD.isNull() ! (FD = 1) set FD = ln.dtnt

	do EXEC
	
	set XLN02 = X

	quit


	//-----------------------------------------------------------------------
public ADBY1	// ADB year-to-date
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XLN18				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XLN18=""
	
	set TD=%SystemDate

	set X=$P($$DAT^%ZM(TD,"MM/DD/YEAR"),"/",3)
	set FINB=$$BOFY^SCADAT(TD,1)

	set %DS=$$DAT^%ZM(FINB,"MM/DD/YEAR")
	set FD=$$^SCAJD(%DS)

	do EXEC
	
	set XLN18=X

	quit

	//-----------------------------------------------------------------------
public ADBP1	// ADB prior year
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XLN19				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XLN19=""

	set %DT=%SystemDate
	set X=$P($$DAT^%ZM(%DT,"MM/DD/YEAR"),"/",3)

	set FINB=$$BOFY^SCADAT(%DT,1)
	set FINE=$$EOFY^SCADAT(%DT,1)

	set FBPY=$P($$DAT^%ZM(FINB,"MM/DD/YEAR"),"/",3)-1
	set FEPY=$P($$DAT^%ZM(FINE,"MM/DD/YEAR"),"/",3)-1

	set %DS=$$DAT^%ZM(FINB,"MM/DD/")_FBPY
	set FD=$$^SCAJD(%DS)

	set %DS=$$DAT^%ZM(FINE,"MM/DD/")_FEPY
	set TD=$$^SCAJD(%DS)


	type RecordLN ln=Db.getRecord("LN","CID")

	//Orig. disb. date
	if ln.odd>TD set XLN19=0 quit

	do EXEC
	
	set XLN19=X

	quit

	//-----------------------------------------------------------------------
public ACBSC(FD,ODT)	// Average Collected Balance For Service Charge Period
	//-----------------------------------------------------------------------
	/*
	  If flag=1, return average balance for service charge period
	  If flag=2, return total debits for s. c. period

	Arguments:

	. FD	Service Charge Last Date	/TYP=D/REQ/MECH=VAL
	. ODT	Account Opending Date		/TYP=D/REQ/MECH=VAL

	Inputs:
 
	. CID	Account Number			/TYP=N/REQ/MECH=VAL

	Outputs:
 
	. XDEP10				/TYP=S
 
	------------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	new UAVB

	set ER=""

	set FD=$S(FD'="":FD,1:ODT)
	set TD=%SystemDate

	do EXEC

	set XDEP10=X

	quit

	//-----------------------------------------------------------------------
public AB90D1	//The average balance over the first 90 days from the date
	//	  the initial deposit was made.
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. AB90D				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	type Date TD,FD
	type String X

	set AB90D=""

	type RecordDEP dep=Db.getRecord("DEP","CID")
	set FD=dep.dfdep

	//If From Date is not defined quit with average balance equal to zero.
	if 'FD set AB90D=0 quit

	set TD=FD+90

	//Convert From and To dates to Julian dates.
	set TD=$$^SCAJD(TD)
	set FD=$$^SCAJD(FD)

	do EXEC
	
	set AB90D=X
	
	quit

	//-----------------------------------------------------------------------
public ADBQ1	// Average Balance for Prior Quarter
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID				/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. ADUBQ				/TYP=S

	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	new TD,FD

	set ADUBQ=""

	do QUARTER(%SystemDate,.FD,.TD)
	
	set ER=0
	set RM=""

	set TD=$$^SCAJD(TD)
	set FD=$$^SCAJD(FD)

	do EXEC
	
	set ADUBQ=X

	quit

	//-----------------------------------------------------------------------
QUARTER(QDATE,DATE1,DATE2)	//
	//-----------------------------------------------------------------------
	/*  Determine what quarter of the year QDATE occurs in.

	Arguments:
 
	. QDATE				/TYP=D/REQ/MECH=VAL
 
	Returns:
 
	. DATE1	 Beginning of quarter 	/TYP=D
 	. DATE2  End of quarter		/TYP=D

	-----------------------------------------------------------------------
	*/

	new NUM,Q
	
	set NUM=0
	set Q=0

	set YEAR=$$YEAR^SCADAT(QDATE,1)
	if YEAR="" quit 0

	set Q=$$VRNG^SCADAT(QDATE,"01/01/"_YEAR,"03/31/"_YEAR)
	set NUM=1

	if Q=0 do {
		set Q=$$VRNG^SCADAT(QDATE,"04/01/"_YEAR,"06/30/"_YEAR)
		set NUM=2
		}

	if Q=0 do {
		set Q=$$VRNG^SCADAT(QDATE,"07/01/"_YEAR,"09/30/"_YEAR)
		set NUM=3
		}

	if Q=0 do {
		set Q=$$VRNG^SCADAT(QDATE,"10/01/"_YEAR,"12/31/"_YEAR)
		set NUM=4
		}

	if NUM=1 do { quit
		 set DATE1="10/01/"_(YEAR-1)
		 set DATE2="12/31/"_(YEAR-1)
		 }

	if NUM=2 do { quit
		set DATE1="01/01/"_YEAR
		set DATE2="03/31/"_YEAR
		}

	if NUM=3 do { quit
		set DATE1="04/01/"_YEAR
		set DATE2="06/30/"_YEAR
		}

	if NUM=4 do { quit
		set DATE1="07/01/"_YEAR
		set DATE2="09/30/"_YEAR
		}
	quit

	//-----------------------------------------------------------------------
EXEC	// Calculations
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID	Account Number		/TYP=N/REQ/MECH=VAL
	. FD 	From Date		/TYP-D/REQ/MECH=VAL
	. TD	To Date			/TYP=D/REQ/MECH=VAL

	Outputs:
 
	. X				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	new acn,N,UAVB

	set ER=""
	set N=""

	type RecordACN acn=Db.getRecord("ACN","CID")

	if acn.cls="D" do INIT^UAVB(,CID,FD,TD,"001000000000001")
	if acn.cls="L" do INIT^UAVB(,CID,FD,TD,"1001101")

	if ER set X="" quit

	set X=(+UAVB(1))_"|"_$P(UAVB(1),"|",2)_"|"_$P(UAVB(1),"|",5)
	set X=X_"|"_$P(UAVB(1),"|",6)_"|"_$P(UAVB(2),"|",3)_"|"_$P(UAVB(1),"|",11)
	set X=X_"|"_$P(UAVB(1),"|",10)_"|"_$P(UAVB(1),"|",9)_"|"_$P(UAVB(1),"|",8)
	set X=X_"|"_$P(UAVB(2),"|",14)

	quit

	//-----------------------------------------------------------------------
public ADBPTY	// ADB prior tax year
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID				/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XLN31				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XLN31=""

	set TAXB=$$BOTY^SCADAT(%SystemDate,1)
	set TAXE=$$EOTY^SCADAT(%SystemDate,1)

	// Retrieve current tax year start and end dates
	set BPTY=$$DAT^%ZM(TAXB,"MM/DD/YEAR")
	set EPTY=$$DAT^%ZM(TAXE,"MM/DD/YEAR")

	// set the year for the prior tax year start and end dates
	set $P(BPTY,"/",3)=$P(BPTY,"/",3)-1
	set $P(EPTY,"/",3)=$P(EPTY,"/",3)-1

	set FD=$$^SCAJD(BPTY)
	set TD=$$^SCAJD(EPTY)

	type RecordLN ln=Db.getRecord("LN","CID")

	//Orig. disb. date
	if ln.odd>TD set XLN31=0 quit

	do EXEC
	
	set XLN31=X

	quit

	//-----------------------------------------------------------------------
public ADBTYTD	// ADB Tax year-to-date
	//-----------------------------------------------------------------------
	/*

	Inputs:
 
	. CID				/TYP=N/REQ/MECH=VAL
 
	Outputs:
 
	. XLN30				/TYP=S
 
	-----------------------------------------------------------------------
	*/

	catch vERROR {
		new ET,RM
		set ET=vERROR.type

		if ET["%GTM-" do ZE^UTLERR

		set ET=ET_"-"_vERROR.thrownAt
		set RM=vERROR.description

		do ^UTLERR
		}

	set XLN30=""

	set TD=%SystemDate
	set FD=$$BOTY^SCADAT(TD,1)

	do EXEC
	
	set XLN30=X

	quit

vSIG()	quit "60536^68755^Irina Kin^13522"	// Signature - LTD^TIME^USER^SIZE
