EFTFILE(RecordEFTPAY eftpay, String vpar, Boolean vparNorm) // EFTPAY - Electronic Payment File Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:24 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (222)            10/05/2006
	// Trigger Definition (23)                     12/17/2004
	// Journal File Definition (10)                10/24/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = eftpay.getMode()                      // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(eftpay,.vxins(),11,"|")
	if %O = 1 quit:'eftpay.isChanged()  do AUDIT^UCUTILN(eftpay,.vx(),11,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	// Define local variables for access keys for legacy triggers
	type String CID = eftpay.cid
	type String SEQ = eftpay.seq

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/TRIGBEF/" do VBI^EFTFIL0                    // Before insert triggers
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
		if vpar["/TRIGAFT/" do VAI^EFTFIL0                    // After insert triggers
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists()!vx("SEQ").exists() do vkchged quit // Primary key changed
		if vpar["/TRIGBEF/" do VBU^EFTFIL0                    // Before update triggers
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("EFTPAY",.vx)
		set %O = 1 do vexec
		if vpar["/TRIGAFT/" do VAU^EFTFIL0                    // After update triggers
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
		if vpar["/TRIGAFT/" do VAI^EFTFIL0                    // After insert triggers
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("EFTPAY","CID = :eftpay.cid and SEQ = :eftpay.seq") // No record exists
		if vpar["/TRIGBEF/" do VBD^EFTFIL0                    // Before delete triggers
		do vdelete(0)
		if vpar["/TRIGAFT/" do VAD^EFTFIL0                    // After delete triggers
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID
	type public String SEQ

	type RecordEFTPAY eftpay = Db.getRecord("EFTPAY","CID=:CID,SEQ=:SEQ")
	if (%ProcessMode = 2) do {
		do eftpay.setMode(2)

		do EFTFILE(eftpay,vpar)
	}
	else  do VINDEX(eftpay)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordEFTPAY eftpay

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("EFTPAY","CID = :eftpay.cid and SEQ = :eftpay.seq") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		if %O = 0  set eftpay.LCHDT = %SystemDate
		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(eftpay,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^EFTPAY(vobj(eftpay,-3),vobj(eftpay,-4),n)=vobj(eftpay,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(eftpay,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(eftpay,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^EFTPAY(vobj(eftpay,-3),vobj(eftpay,-4),n)=vobj(eftpay,n)
			#ENDBYPASS
		}

		// Allow global reference and M source code
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
		#BYPASS
		if $D(vobj(eftpay))  S ^EFTPAY(vobj(eftpay,-3),vobj(eftpay,-4))=vobj(eftpay)
		#ENDBYPASS

		if vpar["/JOURNAL/" do VJOURNAL(.eftpay)              // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.eftpay) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordEFTPAY eftpay
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^EFTPAY(vobj(eftpay,-3),vobj(eftpay,-4),n)) quit:n.isNull()  if 'vobj(eftpay,n).data(),^EFTPAY(vobj(eftpay,-3),vobj(eftpay,-4),n).data()#2 set vobj(eftpay,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordEFTPAY eftpay

	if 'vkeychg.get(),eftpay.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.eftpay)                   // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.eftpay)               // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTPAY(vobj(eftpay,-3),vobj(eftpay,-4))          // Delete Record
	quit


vinit // Initialize default values

	type public RecordEFTPAY eftpay

	// Type local variables for access keys for defaults
	type public String CID
	type public String SEQ

	if eftpay.creatseq.isNull() set eftpay.creatseq = 0    // creatseq
	type public String TJD
	if eftpay.datecre.isNull() set eftpay.datecre = TJD    // datecre
	if eftpay.erivalid.isNull() set eftpay.erivalid = 0    // erivalid
	if eftpay.exttrf.isNull() set eftpay.exttrf = 0        // exttrf
	if eftpay.feeconv.isNull() set eftpay.feeconv = 0      // feeconv
	if eftpay.hldauto.isNull() set eftpay.hldauto = 0      // hldauto
	if eftpay.inttrn.isNull() set eftpay.inttrn = 0        // inttrn
	if eftpay.mt103flg.isNull() set eftpay.mt103flg = 0    // mt103flg
	if eftpay.mt202flg.isNull() set eftpay.mt202flg = 0    // mt202flg
	if eftpay.nxtpmt.isNull() set eftpay.nxtpmt = 0        // nxtpmt
	if eftpay.origfee.isNull() set eftpay.origfee = 0      // origfee
	if eftpay.ovstop.isNull() set eftpay.ovstop = 0        // ovstop
	if eftpay.pri.isNull() set eftpay.pri = 0              // pri
	if eftpay.prtpmt.isNull() set eftpay.prtpmt = 0        // prtpmt
	if eftpay.reject.isNull() set eftpay.reject = 0        // reject
	if eftpay.repair.isNull() set eftpay.repair = 0        // repair
	if eftpay.repost.isNull() set eftpay.repost = 0        // repost
	if eftpay.rtrnflg.isNull() set eftpay.rtrnflg = 0      // rtrnflg
	if eftpay.timecre.isNull() set eftpay.timecre = $P($H,",",2) // timecre
	type public String %UID
	if eftpay.uid.isNull() set eftpay.uid = %UID           // uid
	quit


vreqn // Validate required data items

	type public RecordEFTPAY eftpay

	if eftpay.amttyp.isNull() do vreqerr("AMTTYP") quit
	if eftpay.cc.isNull() do vreqerr("CC") quit
	if eftpay.crcdcid.isNull() do vreqerr("CRCDCID") quit
	if eftpay.creatseq.isNull() do vreqerr("CREATSEQ") quit
	if eftpay.efttype.isNull() do vreqerr("EFTTYPE") quit
	if eftpay.erivalid.isNull() do vreqerr("ERIVALID") quit
	if eftpay.exttrf.isNull() do vreqerr("EXTTRF") quit
	if eftpay.feeconv.isNull() do vreqerr("FEECONV") quit
	if eftpay.hldauto.isNull() do vreqerr("HLDAUTO") quit
	if eftpay.inttrn.isNull() do vreqerr("INTTRN") quit
	if eftpay.met.isNull() do vreqerr("MET") quit
	if eftpay.mt103flg.isNull() do vreqerr("MT103FLG") quit
	if eftpay.mt202flg.isNull() do vreqerr("MT202FLG") quit
	if eftpay.nxtpmt.isNull() do vreqerr("NXTPMT") quit
	if eftpay.origfee.isNull() do vreqerr("ORIGFEE") quit
	if eftpay.ovstop.isNull() do vreqerr("OVSTOP") quit
	if eftpay.pri.isNull() do vreqerr("PRI") quit
	if eftpay.prtpmt.isNull() do vreqerr("PRTPMT") quit
	if eftpay.reject.isNull() do vreqerr("REJECT") quit
	if eftpay.repair.isNull() do vreqerr("REPAIR") quit
	if eftpay.repost.isNull() do vreqerr("REPOST") quit
	if eftpay.rtrnflg.isNull() do vreqerr("RTRNFLG") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordEFTPAY eftpay

	if eftpay.cid.isNull() do vreqerr("CID") quit
	if eftpay.seq.isNull() do vreqerr("SEQ") quit

	if 'vobj(eftpay,-100,0,"").order().isNull() do {
		if vx("FEECONV").exists(),eftpay.feeconv.isNull() do vreqerr("FEECONV") quit
		if vx("INTTRN").exists(),eftpay.inttrn.isNull() do vreqerr("INTTRN") quit
		if vx("CRCDCID").exists(),eftpay.crcdcid.isNull() do vreqerr("CRCDCID") quit
	}
	if 'vobj(eftpay,-100,20,"").order().isNull() do {
		if vx("MT202FLG").exists(),eftpay.mt202flg.isNull() do vreqerr("MT202FLG") quit
		if vx("MT103FLG").exists(),eftpay.mt103flg.isNull() do vreqerr("MT103FLG") quit
	}
	if 'vobj(eftpay,-100,21,"").order().isNull() do {
		if vx("RTRNFLG").exists(),eftpay.rtrnflg.isNull() do vreqerr("RTRNFLG") quit
		if vx("ORIGFEE").exists(),eftpay.origfee.isNull() do vreqerr("ORIGFEE") quit
		if vx("REPAIR").exists(),eftpay.repair.isNull() do vreqerr("REPAIR") quit
	}
	if 'vobj(eftpay,-100,"0*","").order().isNull() do {
		if vx("CC").exists(),eftpay.cc.isNull() do vreqerr("CC") quit
		if vx("MET").exists(),eftpay.met.isNull() do vreqerr("MET") quit
		if vx("AMTTYP").exists(),eftpay.amttyp.isNull() do vreqerr("AMTTYP") quit
		if vx("EFTTYPE").exists(),eftpay.efttype.isNull() do vreqerr("EFTTYPE") quit
		if vx("PRI").exists(),eftpay.pri.isNull() do vreqerr("PRI") quit
		if vx("NXTPMT").exists(),eftpay.nxtpmt.isNull() do vreqerr("NXTPMT") quit
		if vx("REJECT").exists(),eftpay.reject.isNull() do vreqerr("REJECT") quit
		if vx("REPOST").exists(),eftpay.repost.isNull() do vreqerr("REPOST") quit
		if vx("PRTPMT").exists(),eftpay.prtpmt.isNull() do vreqerr("PRTPMT") quit
		if vx("OVSTOP").exists(),eftpay.ovstop.isNull() do vreqerr("OVSTOP") quit
		if vx("CREATSEQ").exists(),eftpay.creatseq.isNull() do vreqerr("CREATSEQ") quit
		if vx("HLDAUTO").exists(),eftpay.hldauto.isNull() do vreqerr("HLDAUTO") quit
		if vx("EXTTRF").exists(),eftpay.exttrf.isNull() do vreqerr("EXTTRF") quit
	}
	if 'vobj(eftpay,-100,"EUR","").order().isNull() do {
		if vx("ERIVALID").exists(),eftpay.erivalid.isNull() do vreqerr("ERIVALID") quit
	}
		if vx("AMTTYP").exists(),eftpay.amttyp.isNull() do vreqerr("AMTTYP") quit
		if vx("CC").exists(),eftpay.cc.isNull() do vreqerr("CC") quit
		if vx("CRCDCID").exists(),eftpay.crcdcid.isNull() do vreqerr("CRCDCID") quit
		if vx("CREATSEQ").exists(),eftpay.creatseq.isNull() do vreqerr("CREATSEQ") quit
		if vx("EFTTYPE").exists(),eftpay.efttype.isNull() do vreqerr("EFTTYPE") quit
		if vx("ERIVALID").exists(),eftpay.erivalid.isNull() do vreqerr("ERIVALID") quit
		if vx("EXTTRF").exists(),eftpay.exttrf.isNull() do vreqerr("EXTTRF") quit
		if vx("FEECONV").exists(),eftpay.feeconv.isNull() do vreqerr("FEECONV") quit
		if vx("HLDAUTO").exists(),eftpay.hldauto.isNull() do vreqerr("HLDAUTO") quit
		if vx("INTTRN").exists(),eftpay.inttrn.isNull() do vreqerr("INTTRN") quit
		if vx("MET").exists(),eftpay.met.isNull() do vreqerr("MET") quit
		if vx("MT103FLG").exists(),eftpay.mt103flg.isNull() do vreqerr("MT103FLG") quit
		if vx("MT202FLG").exists(),eftpay.mt202flg.isNull() do vreqerr("MT202FLG") quit
		if vx("NXTPMT").exists(),eftpay.nxtpmt.isNull() do vreqerr("NXTPMT") quit
		if vx("ORIGFEE").exists(),eftpay.origfee.isNull() do vreqerr("ORIGFEE") quit
		if vx("OVSTOP").exists(),eftpay.ovstop.isNull() do vreqerr("OVSTOP") quit
		if vx("PRI").exists(),eftpay.pri.isNull() do vreqerr("PRI") quit
		if vx("PRTPMT").exists(),eftpay.prtpmt.isNull() do vreqerr("PRTPMT") quit
		if vx("REJECT").exists(),eftpay.reject.isNull() do vreqerr("REJECT") quit
		if vx("REPAIR").exists(),eftpay.repair.isNull() do vreqerr("REPAIR") quit
		if vx("REPOST").exists(),eftpay.repost.isNull() do vreqerr("REPOST") quit
		if vx("RTRNFLG").exists(),eftpay.rtrnflg.isNull() do vreqerr("RTRNFLG") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFTPAY","MSG",1767,"EFTPAY."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit



vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordEFTPAY eftpay

	if (%O = 2) do vload

	if vobj(eftpay,0).exists() do {

		set X = eftpay.acn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACN", vRM) quit
		set X = eftpay.addhld if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ADDHLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.antamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ANTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.antfee1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ANTFEE1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.antfee2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ANTFEE2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.antrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ANTRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.anttotal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ANTTOTAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if eftpay.benacn.length()>34 set vRM = $$^MSG(1076,34) do vdderr("BENACN", vRM) quit
		if eftpay.benad1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD1", vRM) quit
		if eftpay.benad2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD2", vRM) quit
		if eftpay.benad3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD3", vRM) quit
		if eftpay.benad4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENAD4", vRM) quit
		set X = eftpay.beninst if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("BENINST", vRM) quit
		if eftpay.beninst1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINST1", vRM) quit
		if eftpay.beninst2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINST2", vRM) quit
		if eftpay.beninst3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINST3", vRM) quit
		if eftpay.beninst4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINST4", vRM) quit
		if eftpay.beninstl.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINSTL", vRM) quit
		set X = eftpay.benseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("BENSEQ", vRM) quit
		set X = eftpay.ccode if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
		if eftpay.cifinst.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CIFINST", vRM) quit
		set X = eftpay.consndpo if 'X.isNull(),'Db.isDefined("UTBLFOREX","X") set vRM = $$^MSG(1485,X) do vdderr("CONSNDPO", vRM) quit
		if eftpay.crcdcid.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCDCID", vRM) quit
		set X = eftpay.feeamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.FEEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.feeamt2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.FEEAMT2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[eftpay.FEECONV) set vRM=$$^MSG(742,"L") do vdderr("FEECONV", vRM) quit
		if eftpay.feecrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("FEECRCD", vRM) quit
		if eftpay.feecrcd2.length()>3 set vRM = $$^MSG(1076,3) do vdderr("FEECRCD2", vRM) quit
		set X = eftpay.feepayor if 'X.isNull(),'Db.isDefined("STBLFEEPAYOR","X") set vRM = $$^MSG(1485,X) do vdderr("FEEPAYOR", vRM) quit
		set X = eftpay.feetype if 'X.isNull(),'Db.isDefined("EFTFEE","X") set vRM = $$^MSG(1485,X) do vdderr("FEETYPE", vRM) quit
		set X = eftpay.hldseq if 'X.isNull(),X'?1.5N,X'?1"-"1.4N set vRM=$$^MSG(742,"N") do vdderr("HLDSEQ", vRM) quit
		set X = eftpay.inter if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("INTER", vRM) quit
		if eftpay.inter1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER1", vRM) quit
		if eftpay.inter2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER2", vRM) quit
		if eftpay.inter3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER3", vRM) quit
		if eftpay.inter4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTER4", vRM) quit
		if '("01"[eftpay.INTTRN) set vRM=$$^MSG(742,"L") do vdderr("INTTRN", vRM) quit
		set X = eftpay.lchdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LCHDT", vRM) quit
		set X = eftpay.loaddate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LOADDATE", vRM) quit
		if eftpay.ord1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD1", vRM) quit
		if eftpay.ord2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD2", vRM) quit
		if eftpay.ord3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD3", vRM) quit
		if eftpay.ord4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORD4", vRM) quit
		if eftpay.origamt.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ORIGAMT", vRM) quit
		if eftpay.origamt2.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ORIGAMT2", vRM) quit
		if eftpay.origcid.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ORIGCID", vRM) quit
		if eftpay.origfile.length()>60 set vRM = $$^MSG(1076,60) do vdderr("ORIGFILE", vRM) quit
		set X = eftpay.origin if 'X.isNull(),'Db.isDefined("STBLEFTORG","X") set vRM = $$^MSG(1485,X) do vdderr("ORIGIN", vRM) quit
		set X = eftpay.pri2 if 'X.isNull(),'Db.isDefined("STBLPRIORITY","X") set vRM = $$^MSG(1485,X) do vdderr("PRI2", vRM) quit
		set X = eftpay.rate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.RATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if eftpay.reccorr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RECCORR", vRM) quit
		set X = eftpay.recv if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("RECV", vRM) quit
		if eftpay.recvcorr.length()>12 set vRM = $$^MSG(1076,12) do vdderr("RECVCORR", vRM) quit
		set X = eftpay.recvopt if 'X.isNull(),'{List}"A,B,D".contains(X) set vRM = $$^MSG(1485,X) do vdderr("RECVOPT", vRM) quit
		if eftpay.refno.length()>20 set vRM = $$^MSG(1076,20) do vdderr("REFNO", vRM) quit
		if eftpay.relrefno.length()>16 set vRM = $$^MSG(1076,16) do vdderr("RELREFNO", vRM) quit
		set X = eftpay.sendcorr if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("SENDCORR", vRM) quit
		set X = eftpay.sendnos if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SENDNOS", vRM) quit
		if eftpay.sndr.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDR", vRM) quit
		if eftpay.uidacc.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDACC", vRM) quit
		if eftpay.uidadd.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDADD", vRM) quit
		if eftpay.uidapp.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDAPP", vRM) quit
		if eftpay.uidmod.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDMOD", vRM) quit
		if eftpay.uidver.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UIDVER", vRM) quit
		set X = eftpay.varndpo if 'X.isNull(),'Db.isDefined("STBLCNTRY","X") set vRM = $$^MSG(1485,X) do vdderr("VARNDPO", vRM) quit
	}

	if vobj(eftpay,1).exists() do {

		if eftpay.msg1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSG1", vRM) quit
		if eftpay.msg2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSG2", vRM) quit
		if eftpay.msg3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSG3", vRM) quit
		if eftpay.msg4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSG4", vRM) quit
		set X = eftpay.pcode if 'X.isNull(),'Db.isDefined("STBLEFTPCODE","X") set vRM = $$^MSG(1485,X) do vdderr("PCODE", vRM) quit
		set X = eftpay.rectype if 'X.isNull(),'Db.isDefined("UTBLEXTYP","X") set vRM = $$^MSG(1485,X) do vdderr("RECTYPE", vRM) quit
	}

	if vobj(eftpay,5).exists() do {

		if eftpay.msgfp1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSGFP1", vRM) quit
		if eftpay.msgfp2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSGFP2", vRM) quit
		if eftpay.msgfp3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSGFP3", vRM) quit
		if eftpay.msgfp4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSGFP4", vRM) quit
		if eftpay.msgfp5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSGFP5", vRM) quit
		if eftpay.msgfp6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("MSGFP6", vRM) quit
	}

	if vobj(eftpay,10).exists() do {

		set X = eftpay.ordinst if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("ORDINST", vRM) quit
		if eftpay.ordinst1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST1", vRM) quit
		if eftpay.ordinst2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST2", vRM) quit
		if eftpay.ordinst3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST3", vRM) quit
		if eftpay.ordinst4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDINST4", vRM) quit
	}

	if vobj(eftpay,11).exists() do {

		if eftpay.recv1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV1", vRM) quit
		if eftpay.recv2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV2", vRM) quit
		if eftpay.recv3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV3", vRM) quit
		if eftpay.recv4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV4", vRM) quit
		if eftpay.recv5.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV5", vRM) quit
		if eftpay.recv6.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RECV6", vRM) quit
	}

	if vobj(eftpay,12).exists() do {

		if eftpay.brhqmsg1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BRHQMSG1", vRM) quit
		if eftpay.brhqmsg2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BRHQMSG2", vRM) quit
		if eftpay.brhqmsg3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BRHQMSG3", vRM) quit
		if eftpay.brhqmsg4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BRHQMSG4", vRM) quit
		set X = eftpay.gltscode if 'X.isNull(),'Db.isDefined("STBLGLTSCODE","X") set vRM = $$^MSG(1485,X) do vdderr("GLTSCODE", vRM) quit
	}

	if vobj(eftpay,20).exists() do {

		if '("01"[eftpay.MT103FLG) set vRM=$$^MSG(742,"L") do vdderr("MT103FLG", vRM) quit
		if '("01"[eftpay.MT202FLG) set vRM=$$^MSG(742,"L") do vdderr("MT202FLG", vRM) quit
	}

	if vobj(eftpay,21).exists() do {

		if eftpay.benacnsw.length()>34 set vRM = $$^MSG(1076,34) do vdderr("BENACNSW", vRM) quit
		if eftpay.efdkey.length()>20 set vRM = $$^MSG(1076,20) do vdderr("EFDKEY", vRM) quit
		set X = eftpay.feeamtpmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.FEEAMTPMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[eftpay.ORIGFEE) set vRM=$$^MSG(742,"L") do vdderr("ORIGFEE", vRM) quit
		if eftpay.origmtyp.length()>12 set vRM = $$^MSG(1076,12) do vdderr("ORIGMTYP", vRM) quit
		set X = eftpay.origseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ORIGSEQ", vRM) quit
		if eftpay.origtrno.length()>17 set vRM = $$^MSG(1076,17) do vdderr("ORIGTRNO", vRM) quit
		if eftpay.prockey.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PROCKEY", vRM) quit
		if '("01"[eftpay.REPAIR) set vRM=$$^MSG(742,"L") do vdderr("REPAIR", vRM) quit
		set X = eftpay.rtndt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("RTNDT", vRM) quit
		set X = eftpay.rtnfeeamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.RTNFEEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.rtnfeeamt2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.RTNFEEAMT2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if eftpay.rtnfeecrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RTNFEECRCD", vRM) quit
		set X = eftpay.rtnfeetype if 'X.isNull(),'Db.isDefined("EFTFEE","X") set vRM = $$^MSG(1485,X) do vdderr("RTNFEETYPE", vRM) quit
		set X = eftpay.rtntotcid if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.RTNTOTCID"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.rtntotpmt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.RTNTOTPMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[eftpay.RTRNFLG) set vRM=$$^MSG(742,"L") do vdderr("RTRNFLG", vRM) quit
		set X = eftpay.subcc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("SUBCC", vRM) quit
		set X = eftpay.subscid if 'X.isNull(),'Db.isDefined("GLAD","X") set vRM = $$^MSG(1485,X) do vdderr("SUBSCID", vRM) quit
	}

	if vobj(eftpay,25).exists() do {

		set X = eftpay.bgtseq if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("BGTSEQ", vRM) quit
		if eftpay.blaccnbr.length()>40 set vRM = $$^MSG(1076,40) do vdderr("BLACCNBR", vRM) quit
		set X = eftpay.ptystat if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PTYSTAT", vRM) quit
	}

	if vobj(eftpay,100).exists() do {

		if eftpay.ordp.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDP", vRM) quit
		if eftpay.rcvrcorp.length()>35 set vRM = $$^MSG(1076,35) do vdderr("RCVRCORP", vRM) quit
		if eftpay.sndrcorp.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDRCORP", vRM) quit
		if eftpay.sndrp.length()>35 set vRM = $$^MSG(1076,35) do vdderr("SNDRP", vRM) quit
		if eftpay.trip.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIP", vRM) quit
	}

	if vobj(eftpay,103).exists() do {

		set X = eftpay.actrcvrchg if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ACTRCVRCHG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.bankop if 'X.isNull(),'Db.isDefined("STBLSWBOP","X") set vRM = $$^MSG(1485,X) do vdderr("BANKOP", vRM) quit
		set X = eftpay.ben if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("BEN", vRM) quit
		if eftpay.beninstp.length()>35 set vRM = $$^MSG(1076,35) do vdderr("BENINSTP", vRM) quit
		set X = eftpay.freeptr if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("FREEPTR", vRM) quit
		if eftpay.interp.length()>35 set vRM = $$^MSG(1076,35) do vdderr("INTERP", vRM) quit
		set X = eftpay.msgtyp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MSGTYP", vRM) quit
		set X = eftpay.ord if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("ORD", vRM) quit
		if eftpay.ordacc.length()>35 set vRM = $$^MSG(1076,35) do vdderr("ORDACC", vRM) quit
		if eftpay.origcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("ORIGCRCD", vRM) quit
		set X = eftpay.rcvrchg if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.RCVRCHG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if eftpay.rcvrchgc.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RCVRCHGC", vRM) quit
		if eftpay.regrep1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("REGREP1", vRM) quit
		if eftpay.regrep2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("REGREP2", vRM) quit
		if eftpay.regrep3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("REGREP3", vRM) quit
		set X = eftpay.sendinst if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("SENDINST", vRM) quit
		set X = eftpay.sworgamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.SWORGAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.swrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,8) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.SWRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if eftpay.triadd1.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD1", vRM) quit
		if eftpay.triadd2.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD2", vRM) quit
		if eftpay.triadd3.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD3", vRM) quit
		if eftpay.triadd4.length()>35 set vRM = $$^MSG(1076,35) do vdderr("TRIADD4", vRM) quit
		set X = eftpay.trib if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("TRIB", vRM) quit
		if eftpay.trntypcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("TRNTYPCD", vRM) quit
	}
	set X = eftpay.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	set X = eftpay.seq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SEQ", vRM) quit

	if vobj(eftpay,"EUR").exists() do {

		if '("01"[eftpay.ERIVALID) set vRM=$$^MSG(742,"L") do vdderr("ERIVALID", vRM) quit
		set X = eftpay.euramt if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.EURAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.eurrate if 'X.isNull() set vRM = $$VAL^DBSVER("N",12,0,,,,,6) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.EURRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.setcrcd if 'X.isNull(),'Db.isDefined("STBLEURSC","X") set vRM = $$^MSG(1485,X) do vdderr("SETCRCD", vRM) quit
	}

	if vobj(eftpay).exists() ! 'vobj(eftpay,"").order().isNull() do {

		set X = eftpay.actamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ACTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.actamtfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ACTAMTFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.actcnv if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ACTCNV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.actfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.ACTFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.amount if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.AMOUNT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.amttyp if 'X.isNull(),'Db.isDefined("STBLAMTTYP","X") set vRM = $$^MSG(1485,X) do vdderr("AMTTYP", vRM) quit
		if eftpay.benname.length()>32 set vRM = $$^MSG(1076,32) do vdderr("BENNAME", vRM) quit
		set X = eftpay.brcd if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BRCD", vRM) quit
		set X = eftpay.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
		set X = eftpay.chkid if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("CHKID", vRM) quit
		set X = eftpay.constant if 'X.isNull(),'Db.isDefined("UTBLECOACT","X") set vRM = $$^MSG(1485,X) do vdderr("CONSTANT", vRM) quit
		set X = eftpay.crcc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CRCC", vRM) quit
		if eftpay.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		set X = eftpay.crctacct if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("CRCTACCT", vRM) quit
		set X = eftpay.crctgl if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("CRCTGL", vRM) quit
		if '("01"[eftpay.CREATSEQ) set vRM=$$^MSG(742,"L") do vdderr("CREATSEQ", vRM) quit
		if eftpay.custid.length()>32 set vRM = $$^MSG(1076,32) do vdderr("CUSTID", vRM) quit
		set X = eftpay.datecre if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DATECRE", vRM) quit
		set X = eftpay.daysoutstndg if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DAYSOUTSTNDG", vRM) quit
		set X = eftpay.efd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EFD", vRM) quit
		set X = eftpay.eftsrcdd if 'X.isNull(),'Db.isDefined("STBLEFTSRCDD","X") set vRM = $$^MSG(1485,X) do vdderr("EFTSRCDD", vRM) quit
		set X = eftpay.efttype if 'X.isNull(),'Db.isDefined("CTBLEFTTYPE","X") set vRM = $$^MSG(1485,X) do vdderr("EFTTYPE", vRM) quit
		if eftpay.etc.length()>10 set vRM = $$^MSG(1076,10) do vdderr("ETC", vRM) quit
		set X = eftpay.expdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EXPDT", vRM) quit
		if '("01"[eftpay.EXTTRF) set vRM=$$^MSG(742,"L") do vdderr("EXTTRF", vRM) quit
		set X = eftpay.frequency if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[EFTPAY]FREQUENCY",0) if 'vRM.get().isNull() do vdderr("FREQUENCY", vRM) quit
		if '("01"[eftpay.HLDAUTO) set vRM=$$^MSG(742,"L") do vdderr("HLDAUTO", vRM) quit
		set X = eftpay.intext if 'X.isNull(),'{List}"0,1".contains(X) set vRM = $$^MSG(1485,X) do vdderr("INTEXT", vRM) quit
		if eftpay.lnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNM", vRM) quit
		set X = eftpay.lpdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LPDT", vRM) quit
		set X = eftpay.lppdate if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LPPDATE", vRM) quit
		set X = eftpay.met if 'X.isNull(),'Db.isDefined("STBLPAYMET","X") set vRM = $$^MSG(1485,X) do vdderr("MET", vRM) quit
		set X = eftpay.mkrid if 'X.isNull(),'Db.isDefined("SCAU","X") set vRM = $$^MSG(1485,X) do vdderr("MKRID", vRM) quit
		if eftpay.msg103dt.length()>22 set vRM = $$^MSG(1076,22) do vdderr("MSG103DT", vRM) quit
		if eftpay.msg192dt.length()>22 set vRM = $$^MSG(1076,22) do vdderr("MSG192DT", vRM) quit
		if eftpay.msg199dt.length()>22 set vRM = $$^MSG(1076,22) do vdderr("MSG199DT", vRM) quit
		if eftpay.msg202dt.length()>22 set vRM = $$^MSG(1076,22) do vdderr("MSG202DT", vRM) quit
		if eftpay.msg292dt.length()>22 set vRM = $$^MSG(1076,22) do vdderr("MSG292DT", vRM) quit
		if '("01"[eftpay.NXTPMT) set vRM=$$^MSG(742,"L") do vdderr("NXTPMT", vRM) quit
		if '("01"[eftpay.OVSTOP) set vRM=$$^MSG(742,"L") do vdderr("OVSTOP", vRM) quit
		set X = eftpay.partamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.PARTAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[eftpay.PRI) set vRM=$$^MSG(742,"L") do vdderr("PRI", vRM) quit
		set X = eftpay.procdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROCDT", vRM) quit
		if '("01"[eftpay.PRTPMT) set vRM=$$^MSG(742,"L") do vdderr("PRTPMT", vRM) quit
		if eftpay.recacct.length()>34 set vRM = $$^MSG(1076,34) do vdderr("RECACCT", vRM) quit
		set X = eftpay.recinst if 'X.isNull(),'Db.isDefined("UTBLEFTINST","X") set vRM = $$^MSG(1485,X) do vdderr("RECINST", vRM) quit
		if '("01"[eftpay.REJECT) set vRM=$$^MSG(742,"L") do vdderr("REJECT", vRM) quit
		set X = eftpay.rejreas if 'X.isNull(),'Db.isDefined("UTBLCCRJ","X") set vRM = $$^MSG(1485,X) do vdderr("REJREAS", vRM) quit
		set X = eftpay.rempay if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.REMPAY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[eftpay.REPOST) set vRM=$$^MSG(742,"L") do vdderr("REPOST", vRM) quit
		set X = eftpay.retcode if 'X.isNull(),'Db.isDefined("UTBLRETCODE","X") set vRM = $$^MSG(1485,X) do vdderr("RETCODE", vRM) quit
		set X = eftpay.sfpseq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("SFPSEQ", vRM) quit
		if eftpay.source.length()>200 set vRM = $$^MSG(1076,200) do vdderr("SOURCE", vRM) quit
		if eftpay.specific.length()>10 set vRM = $$^MSG(1076,10) do vdderr("SPECIFIC", vRM) quit
		set X = eftpay.status if 'X.isNull(),'Db.isDefined("STBLESTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STATUS", vRM) quit
		if eftpay.subcid.length()>16 set vRM = $$^MSG(1076,16) do vdderr("SUBCID", vRM) quit
		if eftpay.subcode.length()>2 set vRM = $$^MSG(1076,2) do vdderr("SUBCODE", vRM) quit
		if eftpay.subnam.length()>32 set vRM = $$^MSG(1076,32) do vdderr("SUBNAM", vRM) quit
		set X = eftpay.thold if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.THOLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.timecre if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"C") do vdderr("TIMECRE", vRM) quit
		set X = eftpay.totpaid if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.TOTPAID"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.tpaawcmp if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"EFTPAY.TPAAWCMP"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = eftpay.tries if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("TRIES", vRM) quit
		set X = eftpay.tseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("TSEQ", vRM) quit
		set X = eftpay.ttype if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("TTYPE", vRM) quit
		if eftpay.uid.length()>20 set vRM = $$^MSG(1076,20) do vdderr("UID", vRM) quit
		if eftpay.uniqtso.length()>150 set vRM = $$^MSG(1076,150) do vdderr("UNIQTSO", vRM) quit
		if eftpay.utilityid.length()>24 set vRM = $$^MSG(1076,24) do vdderr("UTILITYID", vRM) quit
		if eftpay.variable.length()>10 set vRM = $$^MSG(1076,10) do vdderr("VARIABLE", vRM) quit
		set X = eftpay.xseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("XSEQ", vRM) quit
	}
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("EFTPAY","MSG",979,"EFTPAY."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordEFTPAY eftpay)	//EFTPAY Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			do vj1(.eftpay)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=EFTPAY1_I
			do vj2(.eftpay)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=EFTREF_I
			do vj5(.eftpay)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=HIST_I
			do vj9(.eftpay)	// Mode=I Tran=B EFD=N,E Seq=1 JRNID=PAYHIST_I
			}
		else  if TSRC="O" do {
			do vj1(.eftpay)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=EFTPAY1_I
			do vj2(.eftpay)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=EFTREF_I
			do vj5(.eftpay)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=HIST_I
			do vj9(.eftpay)	// Mode=I Tran=O EFD=N,E Seq=1 JRNID=PAYHIST_I
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj3(.eftpay)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=EFTREF_U
			do vj4(.eftpay)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_D
			do vj8(.eftpay)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=PAYHIST_D
			do vj10(.eftpay)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=PAYHIST_U
			quit:'vx.data()
			if vx("STATUS").data() do vj6(.eftpay,"STATUS")	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U_C
			if vx("STATUS").data() do vj7(.eftpay,"STATUS")	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U_SUP
			}
		else  if TSRC="F" do {
			quit:'vx.data()
			if vx("STATUS").data() do vj6(.eftpay,"STATUS")	// Mode=U Tran=F EFD=N,E Seq=1 JRNID=HIST_U_C
			if vx("STATUS").data() do vj7(.eftpay,"STATUS")	// Mode=U Tran=F EFD=N,E Seq=1 JRNID=HIST_U_SUP
			}
		else  if TSRC="O" do {
			do vj3(.eftpay)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=EFTREF_U
			do vj4(.eftpay)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_D
			do vj8(.eftpay)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=PAYHIST_D
			do vj10(.eftpay)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=PAYHIST_U
			quit:'vx.data()
			if vx("STATUS").data() do vj6(.eftpay,"STATUS")	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U_C
			if vx("STATUS").data() do vj7(.eftpay,"STATUS")	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U_SUP
			}
		}

	quit


vj1(RecordEFTPAY eftpay)	// EFTPAY1_I  Table EFTPAY1  EFTPAY Account Number Level (Insert)

							//// Save this line for Public datatyping, if needed
	type String vlastkey
	set vlastkey=eftpay.cid
	type RecordEFTPAY1 eftpay1=Db.getRecord("EFTPAY1","CID=:vlastkey",1)
	set eftpay1.seq=eftpay.seq

	do eftpay1.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordEFTPAY eftpay)	// EFTREF_I  Table EFTREF  EFT Tres Ref Index (Insert)

	if eftpay.refno'=""
	else  quit

							//// Save this line for Public datatyping, if needed
	type String vlastkey
	set vlastkey=eftpay.refno
	type RecordEFTREF eftref=Db.getRecord("EFTREF","REFNO=:vlastkey",1)
	set eftref.cid=eftpay.cid
	set eftref.seq=eftpay.seq

	do eftref.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordEFTPAY eftpay)	// EFTREF_U  Table EFTREF  EFT Tres Ref Index (Update)

	if eftpay.refno'=""
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
							//// Save this line for Public datatyping, if needed
		type String vlastkey
		set vlastkey=eftpay.refno
		type RecordEFTREF eftref=Db.getRecord("EFTREF","REFNO=:vlastkey",1)
		set eftref.cid=eftpay.cid
		set eftref.seq=eftpay.seq

		do eftref.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj4(RecordEFTPAY eftpay)	// HIST_D  Table HIST  Transaction History (Delete)

	if eftpay.status="D"
	else  quit
	if eftpay.ttype<2&(eftpay.ttype'="")
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String %IDENT,%UID,TJD,TLO
		type String v1,vlastkey
		set v1=eftpay.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=eftpay.brcd
		set hist.cdt=+$H
		set hist.crcd=eftpay.crcd
		set hist.ident=%IDENT
		set hist.tcmt=$$^MSG(3028,eftpay.eftdesc)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj5(RecordEFTPAY eftpay)	// HIST_I  Table HIST  Transaction History (Insert)

	if +eftpay.ttype<2&(+eftpay.ttype'="")
	else  quit

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=eftpay.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=eftpay.brcd
	set hist.cdt=+$H
	set hist.crcd=eftpay.crcd
	set hist.efd=eftpay.efd
	set hist.ident=%IDENT
	set hist.tcmt=$$EFTDSC^EFTFUNCS(eftpay.efttype,eftpay.recinst,eftpay.recacct,eftpay.rectype,eftpay.status)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.tso=eftpay.source
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj6(RecordEFTPAY eftpay,String vdi)	// HIST_U_C  Table HIST  HIST Record for STATUS="C"

	if eftpay.status="C"
	else  quit
	if eftpay.ttype<2&(eftpay.ttype'="")
	else  quit

	type Public String %UID,TJD,TLO
	type String v1,vlastkey
	set v1=eftpay.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=eftpay.brcd
	set hist.cdt=+$H
	set hist.tcmt=$$EFTDSC^EFTFUNCS(eftpay.efttype,eftpay.recinst,eftpay.recacct,eftpay.rectype,eftpay.status)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj7(RecordEFTPAY eftpay,String vdi)	// HIST_U_SUP  Table HIST  HIST record for STATUS="SUP"

	if eftpay.status="SUP"
	else  quit
	if eftpay.ttype<2&(eftpay.ttype'="")
	else  quit

	type Public String %UID,TJD,TLO
	type String v1,vlastkey
	set v1=eftpay.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=eftpay.brcd
	set hist.cdt=+$H
	set hist.tcmt=$$TCMTSUP^EFTFUNCS(eftpay.cid)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj8(RecordEFTPAY eftpay)	// PAYHIST_D  Table PAYHIST  Electronic Payment Hist. (Delete)

	if eftpay.status="D"
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do { quit
		type Public String %UID,TJD,TLO
		type String v1,v2,vlastkey
		set v1=eftpay.cid
		set v2=eftpay.seq
		set vlastkey=Db.nextVal("PAYHIST","CID=:v1,SEQ=:v2")
		type RecordPAYHIST payhist=Db.getRecord("PAYHIST","CID=:v1,SEQ=:v2,TSEQ=:vlastkey",1)
		set payhist.brcd=eftpay.brcd
		set payhist.cdt=+$H
		set payhist.src=eftpay.efttype
		set payhist.tcmt=$$^MSG(3028,eftpay.eftdesc)
		set payhist.time=$P($H,",",2)
		set payhist.tjd=TJD
		set payhist.tlo=TLO
		set payhist.uid=%UID

		do payhist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit


vj9(RecordEFTPAY eftpay)	// PAYHIST_I  Table PAYHIST  Electronic Payment Hist. (Insert)

	type Public String %UID,TJD,TLO
	type String v1,v2,vlastkey
	set v1=eftpay.cid
	set v2=eftpay.seq
	set vlastkey=Db.nextVal("PAYHIST","CID=:v1,SEQ=:v2")
	type RecordPAYHIST payhist=Db.getRecord("PAYHIST","CID=:v1,SEQ=:v2,TSEQ=:vlastkey",1)
	set payhist.brcd=eftpay.brcd
	set payhist.cdt=+$H
	set payhist.efd=eftpay.efd
	set payhist.src=eftpay.efttype
	set payhist.tcmt=$$^MSG(6712,eftpay.eftdesc)
	set payhist.time=$P($H,",",2)
	set payhist.tjd=TJD
	set payhist.tlo=TLO
	set payhist.uid=%UID

	do payhist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj10(RecordEFTPAY eftpay)	// PAYHIST_U  Table PAYHIST  Electronic Payment Hist. (Update)

	if eftpay.status'="D"
	else  quit

	type Public String vx()
	type String vdi

	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  do {
		type Public String vx(),%UID,TJD,TLO
		type String v1,v2,vlastkey

		type String vold,vnew

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)

		set v1=eftpay.cid
		set v2=eftpay.seq
		set vlastkey=Db.nextVal("PAYHIST","CID=:v1,SEQ=:v2")
		type RecordPAYHIST payhist=Db.getRecord("PAYHIST","CID=:v1,SEQ=:v2,TSEQ=:vlastkey",1)
		set payhist.brcd=eftpay.brcd
		set payhist.cdt=+$H
		set payhist.efd=eftpay.efd
		set payhist.src=eftpay.efttype
		set payhist.tcmt=$$TCMTFM^ACNFUNCS("","EFTPAY",vdi,vold,vnew)
		set payhist.time=$P($H,",",2)
		set payhist.tjd=TJD
		set payhist.tlo=TLO
		set payhist.uid=%UID

		do payhist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordEFTPAY eftpay) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		type String vf,vi,viMap,vxn
		set viMap=",PROCDT,EFTTYPE,PTYSTAT,~1~|,EFD,EFTTYPE,~2~|,BRCD,~3~|,BRCD,~4~|,BRCD,SFPSEQ,~5~|,EFTTYPE,~6~|,DATECRE,EFTTYPE,BRCD,~7~|,REFNO,EFTTYPE,BRCD,~8~|,LNM,BRCD,STATUS,~9~|,LOADDATE,BRCD,~10~|"
		set vf=0
		set vxn=""
		for  set vxn=vx(vxn).order() quit:vxn=""  do {
			for  set vf=$F(viMap,(","_vxn_","),vf) quit:vf=0  do {
				set vi=viMap.extract(vf,999).piece("~",2)
				set viMap.piece("|",vi)=""
				do @("vi"_vi_"(.eftpay)")
			}
		}
	}
	do vi1(.eftpay)
	do vi2(.eftpay)
	do vi3(.eftpay)
	do vi4(.eftpay)
	do vi5(.eftpay)
	do vi6(.eftpay)
	do vi7(.eftpay)
	do vi8(.eftpay)
	do vi9(.eftpay)
	do vi10(.eftpay)

	quit
	

vi1(RecordEFTPAY eftpay) // Maintain DAYENDEF index entries (Index by Process Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.procdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.efttype
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = eftpay.cid
	type String v5 = eftpay.ptystat
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^DAYEND(v1,"EFTOUT",v3,v4,v5,v6)) do vidxerr("DAYENDEF")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"EFTOUT",v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PROCDT").exists() set v1=vx("PROCDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("EFTTYPE").exists() set v3=vx("EFTTYPE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PTYSTAT").exists() set v5=vx("PTYSTAT").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"EFTOUT",v3,v4,v5,v6)
	quit

vi2(RecordEFTPAY eftpay) // Maintain EFTINDX index entries (Index by Effective Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.efd
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = eftpay.cid
	type String v3 = eftpay.efttype
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^EFTINDX(v1,v2,v3,v4)) do vidxerr("EFTINDX")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EFTINDX(v1,v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EFD").exists() set v1=vx("EFD").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("EFTTYPE").exists() set v3=vx("EFTTYPE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTINDX(v1,v2,v3,v4)
	quit

vi3(RecordEFTPAY eftpay) // Maintain EFTSFPX1 index entries (Index NDPOSTs by BRCD,CID,SEQ)

	type Public String vx()
	type Boolean vdelete = 0
	type Boolean vflag = 0
	type String v2 = eftpay.brcd
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.cid
	type String v4 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $$vq3(.eftpay) if '$D(^EFTSFPX("NDPOST",v2,v3,v4)) do vidxerr("EFTSFPX1")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 if $$vq3(.eftpay) set vflag=1 set ^EFTSFPX("NDPOST",v2,v3,v4)="" 
	quit:%ProcessMode=0

	if vflag,'vx("BRCD").exists() quit
	if %ProcessMode=3 set vdelete=1
	if vx("BRCD").exists() set v2=vx("BRCD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if (%ProcessMode=3)!vflag!'$$vq3(.eftpay)  kill ^EFTSFPX("NDPOST",v2,v3,v4)
	quit

vq3(RecordEFTPAY eftpay) // Conditional index query for Index NDPOSTs by BRCD,CID,SEQ

	if '(eftpay.efttype="NDPOST") quit 0
	quit 1


vi4(RecordEFTPAY eftpay) // Maintain EFTSFPX2 index entries (Index NDPOs by BRCD,CID,SEQ)

	type Public String vx()
	type Boolean vdelete = 0
	type Boolean vflag = 0
	type String v2 = eftpay.brcd
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.cid
	type String v4 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if $$vq4(.eftpay) if '$D(^EFTSFPX("NDPOAS",v2,v3,v4)) do vidxerr("EFTSFPX2")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 if $$vq4(.eftpay) set vflag=1 set ^EFTSFPX("NDPOAS",v2,v3,v4)="" 
	quit:%ProcessMode=0

	if vflag,'vx("BRCD").exists() quit
	if %ProcessMode=3 set vdelete=1
	if vx("BRCD").exists() set v2=vx("BRCD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if (%ProcessMode=3)!vflag!'$$vq4(.eftpay)  kill ^EFTSFPX("NDPOAS",v2,v3,v4)
	quit

vq4(RecordEFTPAY eftpay) // Conditional index query for Index NDPOs by BRCD,CID,SEQ

	if '(eftpay.efttype="NDPO") quit 0
	if '(eftpay.status="AS") quit 0
	quit 1


vi5(RecordEFTPAY eftpay) // Maintain EFTSFPX3 index entries (Index NDPOSTs by BRCD,SFPSEQ)

	type Public String vx()
	type Boolean vdelete = 0
	type Boolean vflag = 0
	type String v2 = eftpay.brcd
	type String v3 = eftpay.cid
	type String v4 = eftpay.sfpseq
	type String v5 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if v2'="",v4'="" if $$vq5(.eftpay) if '$D(^EFTSFPX("SFP",v2,v3,v4,v5)) do vidxerr("EFTSFPX3")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if v2'="",v4'="" if %ProcessMode<2 if $$vq5(.eftpay) set vflag=1 set ^EFTSFPX("SFP",v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if vflag,'vx("BRCD").exists(),'vx("SFPSEQ").exists() quit
	if %ProcessMode=3 set vdelete=1
	if vx("BRCD").exists() set v2=vx("BRCD").piece("|",1)
	if v2.isNull() quit
	if vx("SFPSEQ").exists() set v4=vx("SFPSEQ").piece("|",1)
	if v4.isNull() quit

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if (%ProcessMode=3)!vflag!'$$vq5(.eftpay)  kill ^EFTSFPX("SFP",v2,v3,v4,v5)
	quit

vq5(RecordEFTPAY eftpay) // Conditional index query for Index NDPOSTs by BRCD,SFPSEQ

	if '(eftpay.efttype="NDPOST") quit 0
	quit 1


vi6(RecordEFTPAY eftpay) // Maintain EFTX1 index entries (Index by Account & Pmt Type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.cid
	type String v2 = eftpay.efttype
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^EFTX1(v1,v2,v3)) do vidxerr("EFTX1")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EFTX1(v1,v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("EFTTYPE").exists() set v2=vx("EFTTYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTX1(v1,v2,v3)
	quit

vi7(RecordEFTPAY eftpay) // Maintain EFTX2 index entries (Index by Create Date & Type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.datecre
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = eftpay.efttype
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.brcd
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = eftpay.cid
	type String v5 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^EFTX2(v1,v2,v3,v4,v5)) do vidxerr("EFTX2")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EFTX2(v1,v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("DATECRE").exists() set v1=vx("DATECRE").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("EFTTYPE").exists() set v2=vx("EFTTYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("BRCD").exists() set v3=vx("BRCD").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTX2(v1,v2,v3,v4,v5)
	quit

vi8(RecordEFTPAY eftpay) // Maintain EFTX3 index entries (Index by reference number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.refno
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = eftpay.efttype
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.brcd
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = eftpay.cid
	type String v5 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^EFTX3(v1,v2,v3,v4,v5)) do vidxerr("EFTX3")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EFTX3(v1,v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("REFNO").exists() set v1=vx("REFNO").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("EFTTYPE").exists() set v2=vx("EFTTYPE").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("BRCD").exists() set v3=vx("BRCD").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTX3(v1,v2,v3,v4,v5)
	quit

vi9(RecordEFTPAY eftpay) // Maintain EFTX4 index entries (Index by last name, branch)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.lnm
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = eftpay.brcd
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.status
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = eftpay.cid
	type String v5 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^EFTX4(v1,v2,v3,v4,v5)) do vidxerr("EFTX4")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EFTX4(v1,v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("LNM").exists() set v1=vx("LNM").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("BRCD").exists() set v2=vx("BRCD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("STATUS").exists() set v3=vx("STATUS").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTX4(v1,v2,v3,v4,v5)
	quit

vi10(RecordEFTPAY eftpay) // Maintain EFTXLD index entries (Index by Load Date, Branch)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = eftpay.loaddate
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = eftpay.brcd
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = eftpay.cid
	type String v4 = eftpay.seq

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^EFTXLD(v1,v2,v3,v4)) do vidxerr("EFTXLD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^EFTXLD(v1,v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("LOADDATE").exists() set v1=vx("LOADDATE").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("BRCD").exists() set v2=vx("BRCD").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^EFTXLD(v1,v2,v3,v4)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("EFTPAY")

	while ds.next() do {
		type RecordEFTPAY eftpay=ds.getRecord("EFTPAY")
		if vlist.contains("VINDEX") do VINDEX(.eftpay) quit
		if vlist.contains("DAYENDEF") do vi1(.eftpay)
		if vlist.contains("EFTINDX") do vi2(.eftpay)
		if vlist.contains("EFTSFPX1") do vi3(.eftpay)
		if vlist.contains("EFTSFPX2") do vi4(.eftpay)
		if vlist.contains("EFTSFPX3") do vi5(.eftpay)
		if vlist.contains("EFTX1") do vi6(.eftpay)
		if vlist.contains("EFTX2") do vi7(.eftpay)
		if vlist.contains("EFTX3") do vi8(.eftpay)
		if vlist.contains("EFTX4") do vi9(.eftpay)
		if vlist.contains("EFTXLD") do vi10(.eftpay)
	}

	quit


public VIDXBLD1(RecordEFTPAY eftpay, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.eftpay) quit
	if vlist.contains("DAYENDEF") do vi1(.eftpay)
	if vlist.contains("EFTINDX") do vi2(.eftpay)
	if vlist.contains("EFTSFPX1") do vi3(.eftpay)
	if vlist.contains("EFTSFPX2") do vi4(.eftpay)
	if vlist.contains("EFTSFPX3") do vi5(.eftpay)
	if vlist.contains("EFTX1") do vi6(.eftpay)
	if vlist.contains("EFTX2") do vi7(.eftpay)
	if vlist.contains("EFTX3") do vi8(.eftpay)
	if vlist.contains("EFTX4") do vi9(.eftpay)
	if vlist.contains("EFTXLD") do vi10(.eftpay)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("EFTPAY","MSG",1225,"EFTPAY."_di)

	quit


vkchged // Access key changed

	type public RecordEFTPAY eftpay

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux
	type String voldpar = vpar.get()                       // Save filer switches

	if vx("CID").exists() set vux("CID") = vx("CID")
	if vx("SEQ").exists() set vux("SEQ") = vx("SEQ")
	do vkey(1) set voldkey = eftpay.cid_","_eftpay.seq     // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/TRIGBEF/" do VBU^EFTFIL0
	if vpar["/VALDD/" do vddver
	do vexec

	do vkey(2) set vnewkey = eftpay.cid_","_eftpay.seq     // Copy new keys into object
	type RecordEFTPAY vnewrec = eftpay.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("EFTPAY",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update
	set vpar = voldpar
	if vpar["/TRIGAFT/" do VAU^EFTFIL0

	do vkey(1)                                             // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

vkey(Number i) // Restore access keys

	type public String vux()
	type public RecordEFTPAY eftpay

	if vux("CID").exists() set eftpay.cid = vux("CID").piece("|",i)
	if vux("SEQ").exists() set eftpay.seq = vux("SEQ").piece("|",i)
	quit

VCASDEL // Cascade delete logic

	type public RecordEFTPAY eftpay
	type public String vpar

	do Db.delete("PAYHIST","CID=:eftpay.cid AND SEQ=:eftpay.seq",vpar) // Cascade delete

	quit

VIDXPGM()	quit "EFTFILE"	// Location of index program

