ACNFILE(RecordACN acn, String vpar, Boolean vparNorm) // ACN - Account file Filer
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 11:21 - shetyes
	// Generated from DATA-QWIK schema in: /profile/v72qa_gtmlx  by: /v72qa_gtmlx/crtns/DBSFILB.obj

	// Data Dictionary Data Items (250)            04/05/2006
	// Journal File Definition (4)                 12/25/2006
	/*
		vpar      Runtime qualifiers:      /NOREQ/MECH=REFARR:R

		/[NO]CASDEL   - Cascade delete
		/[NO]FRMFILER - Called from another filer
		/[NO]INDEX    - Update Indexes
		/[NO]JOURNAL  - Journal update
		/[NO]TRIGAFT  - After update triggers
		/[NO]TRIGBEF  - Before update triggers
		/[NO]UPDATE   - Update primary table
		/[NO]VALDD    - Validate column values
		/[NO]VALFK    - Validate foreign keys
		/[NO]VALREQ   - Validate not null values
		/[NO]VALRI    - Validate transaction integrity
		/[NO]VALST    - Validate database state
	*/

	type public String verrors()

	type String vx(), vxins()                              // audit column array
	type Number %O = acn.getMode()                         // Processing mode
	set vpar = vpar.get()                                  // Initialize vpar
	if %O = 0 do AUDIT^UCUTILN(acn,.vxins(),10,"|")
	if %O = 1 quit:'acn.isChanged()  do AUDIT^UCUTILN(acn,.vx(),10,"|")

	if 'vparNorm.get() set vpar = $$initPar^UCUTILN(vpar)  // Run-time qualifiers

	if %O = 0 do { quit                                    // Create record control block
		do vinit                                              // Initialize column values
		if vpar["/VALREQ/" do vreqn                           // Check required
		if vpar["/VALDD/" do vddver                           // Check values
		do vexec
	}

	if %O = 1 do { quit                                    // Update record control block
		if vx("CID").exists() do vkchged quit                 // Primary key changed
		if vpar["/VALREQ/" do vrequ                           // Check required
		if vpar["/VALDD/" do VDDUX^DBSFILER("ACN",.vx)
		set %O = 1 do vexec
	}

	if %O = 2 do { quit                                    // Verify record control block
		if vpar["/VALREQ/" do vreqn                           // Check required
		set vpar = $$setPar^UCUTILN(vpar,"NOJOURNAL/NOUPDATE")
		do vexec
	}

	if %O = 3 do { quit                                    // Delete record control block
		quit:'Db.isDefined("ACN","CID = :acn.cid")            // No record exists
		do vdelete(0)
	}

	quit

vlegacy(Number %ProcessMode,String vpar) // Legacy interface (^DBSDF9 for %O=0, EXT^DBSFILER for %O = 2)

	type public String CID

	type RecordACN acn = Db.getRecord("ACN","CID=:CID")
	if (%ProcessMode = 2) do {
		do acn.setMode(2)

		do ACNFILE(acn,vpar)
	}
	else  do VINDEX(acn)

	quit

vLITCHK() quit 0 // Table does not have columns involved in literals


vexec // Execute transaction

	type public Number %O
	type public String vpar,vobj(),vx(),vxins()

	type public RecordACN acn

	type String vERRMSG

	if vpar["/VALST/" if '(''Db.isDefined("ACN","CID = :acn.cid") = ''%O) set vERRMSG = $$^MSG($select(%O:7932,1:2327)) throw Class.new("Error","%PSL-E-DBSFILER,"_vERRMSG.replace(",","~"))

	if vpar'["/NOUPDATE/" do {

		type String n = -1
		type String x

		if %O = 0 for  set n = vobj(acn,n).order() quit:n.isNull()  do {
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(acn,-3),n)=vobj(acn,n)
			#ENDBYPASS
		}

		else  for  set n = vobj(acn,-100,n).order() quit:n.isNull()  do {
			quit:'$D(vobj(acn,n))
			// Allow global reference and M source code
			#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
			#BYPASS
				S ^ACN(vobj(acn,-3),n)=vobj(acn,n)
			#ENDBYPASS
		}


		if vpar["/JOURNAL/" do VJOURNAL(.acn)                 // Create journal files
	}

	if vpar["/INDEX/",'(%O = 1)!'vx("").order().isNull() do VINDEX(.acn) // Update Index files

	quit

vload // Record Load - force loading of unloaded data

	type public RecordACN acn
	type String n = ""

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	for  set n = $order(^ACN(vobj(acn,-3),n)) quit:n.isNull()  if 'vobj(acn,n).data(),^ACN(vobj(acn,-3),n).data()#2 set vobj(acn,n) = ^(n)
	quit

vdelete(Boolean vkeychg) // Record Delete

	type public String vobj(),vpar
	type public RecordACN acn

	if 'vkeychg.get(),acn.isChanged() throw Class.new("Error","%PSL-E-DBFILER,Deleted object cannot be modified")

	if vpar["/CASDEL/" do VCASDEL                          // Cascade delete
	if vpar["/INDEX/" do VINDEX(.acn)                      // Delete index entries
	if vpar["/JOURNAL/" do VJOURNAL(.acn)                  // Create journal entries

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^ACN(vobj(acn,-3))                                // Delete Record
	quit


vinit // Initialize default values

	type public RecordACN acn

	// Type local variables for access keys for defaults
	type public String CID

	if acn.actibpay.isNull() set acn.actibpay = 0          // actibpay
	if acn.aomcode.isNull() set acn.aomcode = 0            // aomcode
	if acn.chkeuro.isNull() set acn.chkeuro = 0            // chkeuro
	if acn.chkiss.isNull() set acn.chkiss = 0              // chkiss
	if acn.cmsflg.isNull() set acn.cmsflg = 0              // cmsflg
	if acn.cof.isNull() set acn.cof = 0                    // cof
	if acn.collque.isNull() set acn.collque = 0            // collque
	if acn.comm.isNull() set acn.comm = 0                  // comm
	if acn.custom1.isNull() set acn.custom1 = 0            // custom1
	if acn.custom2.isNull() set acn.custom2 = 0            // custom2
	if acn.custom3.isNull() set acn.custom3 = 0            // custom3
	if acn.eftdeb.isNull() set acn.eftdeb = 0              // eftdeb
	if acn.eftreq.isNull() set acn.eftreq = 0              // eftreq
	if acn.highvol.isNull() set acn.highvol = 0            // highvol
	if acn.mt900.isNull() set acn.mt900 = 0                // mt900
	if acn.mt910.isNull() set acn.mt910 = 0                // mt910
	type public String TJD
	if acn.odt.isNull() set acn.odt = TJD                  // odt
	if acn.osgncrdc.isNull() set acn.osgncrdc = 0          // osgncrdc
	if acn.pbi.isNull() set acn.pbi = 0                    // pbi
	if acn.regcc.isNull() set acn.regcc = 0                // regcc
	if acn.rflg.isNull() set acn.rflg = 0                  // rflg
	if acn.smet.isNull() set acn.smet = 0                  // smet
	quit


vreqn // Validate required data items

	type public RecordACN acn

	if acn.acn.isNull() do vreqerr("ACN") quit
	if acn.acnrelc.isNull() do vreqerr("ACNRELC") quit
	if acn.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	if acn.boo.isNull() do vreqerr("BOO") quit
	if acn.cc.isNull() do vreqerr("CC") quit
	if acn.chkeuro.isNull() do vreqerr("CHKEURO") quit
	if acn.chkiss.isNull() do vreqerr("CHKISS") quit
	if acn.cls.isNull() do vreqerr("CLS") quit
	if acn.cmsflg.isNull() do vreqerr("CMSFLG") quit
	if acn.cof.isNull() do vreqerr("COF") quit
	if acn.collque.isNull() do vreqerr("COLLQUE") quit
	if acn.comm.isNull() do vreqerr("COMM") quit
	if acn.crcd.isNull() do vreqerr("CRCD") quit
	if acn.custom1.isNull() do vreqerr("CUSTOM1") quit
	if acn.custom2.isNull() do vreqerr("CUSTOM2") quit
	if acn.custom3.isNull() do vreqerr("CUSTOM3") quit
	if acn.eftdeb.isNull() do vreqerr("EFTDEB") quit
	if acn.eftreq.isNull() do vreqerr("EFTREQ") quit
	if acn.glsc.isNull() do vreqerr("GLSC") quit
	if acn.grp.isNull() do vreqerr("GRP") quit
	if acn.highvol.isNull() do vreqerr("HIGHVOL") quit
	if acn.mt900.isNull() do vreqerr("MT900") quit
	if acn.mt910.isNull() do vreqerr("MT910") quit
	if acn.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
	if acn.pbi.isNull() do vreqerr("PBI") quit
	if acn.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
	if acn.regcc.isNull() do vreqerr("REGCC") quit
	if acn.rflg.isNull() do vreqerr("RFLG") quit
	if acn.sgncrd.isNull() do vreqerr("SGNCRD") quit
	if acn.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	if acn.smet.isNull() do vreqerr("SMET") quit
	if acn.stat.isNull() do vreqerr("STAT") quit
	if acn.type.isNull() do vreqerr("TYPE") quit
	quit

vrequ // Valid required columns on update


	type public String vx()
	type public RecordACN acn

	if acn.cid.isNull() do vreqerr("CID") quit

	if 'vobj(acn,-100,50,"").order().isNull() do {
		if vx("TYPE").exists(),acn.type.isNull() do vreqerr("TYPE") quit
		if vx("CLS").exists(),acn.cls.isNull() do vreqerr("CLS") quit
		if vx("GRP").exists(),acn.grp.isNull() do vreqerr("GRP") quit
		if vx("CC").exists(),acn.cc.isNull() do vreqerr("CC") quit
		if vx("CRCD").exists(),acn.crcd.isNull() do vreqerr("CRCD") quit
		if vx("COMM").exists(),acn.comm.isNull() do vreqerr("COMM") quit
		if vx("REGCC").exists(),acn.regcc.isNull() do vreqerr("REGCC") quit
		if vx("GLSC").exists(),acn.glsc.isNull() do vreqerr("GLSC") quit
		if vx("CUSTOM1").exists(),acn.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),acn.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),acn.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("HIGHVOL").exists(),acn.highvol.isNull() do vreqerr("HIGHVOL") quit
	}
	if 'vobj(acn,-100,51,"").order().isNull() do {
		if vx("RFLG").exists(),acn.rflg.isNull() do vreqerr("RFLG") quit
		if vx("PBI").exists(),acn.pbi.isNull() do vreqerr("PBI") quit
		if vx("STAT").exists(),acn.stat.isNull() do vreqerr("STAT") quit
	}
	if 'vobj(acn,-100,52,"").order().isNull() do {
		if vx("BOO").exists(),acn.boo.isNull() do vreqerr("BOO") quit
	}
	if 'vobj(acn,-100,61,"").order().isNull() do {
		if vx("CHKISS").exists(),acn.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CHKEURO").exists(),acn.chkeuro.isNull() do vreqerr("CHKEURO") quit
	}
	if 'vobj(acn,-100,62,"").order().isNull() do {
		if vx("EFTDEB").exists(),acn.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),acn.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("SMET").exists(),acn.smet.isNull() do vreqerr("SMET") quit
		if vx("ACTIBPAY").exists(),acn.actibpay.isNull() do vreqerr("ACTIBPAY") quit
	}
	if 'vobj(acn,-100,70,"").order().isNull() do {
		if vx("CMSFLG").exists(),acn.cmsflg.isNull() do vreqerr("CMSFLG") quit
	}
	if 'vobj(acn,-100,99,"").order().isNull() do {
		if vx("ACN").exists(),acn.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),acn.acnrelc.isNull() do vreqerr("ACNRELC") quit
	}
	if 'vobj(acn,-100,432,"").order().isNull() do {
		if vx("COLLQUE").exists(),acn.collque.isNull() do vreqerr("COLLQUE") quit
	}
	if 'vobj(acn,-100,438,"").order().isNull() do {
		if vx("MT900").exists(),acn.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),acn.mt910.isNull() do vreqerr("MT910") quit
	}
	if 'vobj(acn,-100,440,"").order().isNull() do {
		if vx("COF").exists(),acn.cof.isNull() do vreqerr("COF") quit
	}
	if 'vobj(acn,-100,448,"").order().isNull() do {
		if vx("SGNCRD").exists(),acn.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("PSGNCRDR").exists(),acn.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("OSGNCRDC").exists(),acn.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("SGNCRDCHGDT").exists(),acn.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
	}
		if vx("ACN").exists(),acn.acn.isNull() do vreqerr("ACN") quit
		if vx("ACNRELC").exists(),acn.acnrelc.isNull() do vreqerr("ACNRELC") quit
		if vx("ACTIBPAY").exists(),acn.actibpay.isNull() do vreqerr("ACTIBPAY") quit
		if vx("BOO").exists(),acn.boo.isNull() do vreqerr("BOO") quit
		if vx("CC").exists(),acn.cc.isNull() do vreqerr("CC") quit
		if vx("CHKEURO").exists(),acn.chkeuro.isNull() do vreqerr("CHKEURO") quit
		if vx("CHKISS").exists(),acn.chkiss.isNull() do vreqerr("CHKISS") quit
		if vx("CLS").exists(),acn.cls.isNull() do vreqerr("CLS") quit
		if vx("CMSFLG").exists(),acn.cmsflg.isNull() do vreqerr("CMSFLG") quit
		if vx("COF").exists(),acn.cof.isNull() do vreqerr("COF") quit
		if vx("COLLQUE").exists(),acn.collque.isNull() do vreqerr("COLLQUE") quit
		if vx("COMM").exists(),acn.comm.isNull() do vreqerr("COMM") quit
		if vx("CRCD").exists(),acn.crcd.isNull() do vreqerr("CRCD") quit
		if vx("CUSTOM1").exists(),acn.custom1.isNull() do vreqerr("CUSTOM1") quit
		if vx("CUSTOM2").exists(),acn.custom2.isNull() do vreqerr("CUSTOM2") quit
		if vx("CUSTOM3").exists(),acn.custom3.isNull() do vreqerr("CUSTOM3") quit
		if vx("EFTDEB").exists(),acn.eftdeb.isNull() do vreqerr("EFTDEB") quit
		if vx("EFTREQ").exists(),acn.eftreq.isNull() do vreqerr("EFTREQ") quit
		if vx("GLSC").exists(),acn.glsc.isNull() do vreqerr("GLSC") quit
		if vx("GRP").exists(),acn.grp.isNull() do vreqerr("GRP") quit
		if vx("HIGHVOL").exists(),acn.highvol.isNull() do vreqerr("HIGHVOL") quit
		if vx("MT900").exists(),acn.mt900.isNull() do vreqerr("MT900") quit
		if vx("MT910").exists(),acn.mt910.isNull() do vreqerr("MT910") quit
		if vx("OSGNCRDC").exists(),acn.osgncrdc.isNull() do vreqerr("OSGNCRDC") quit
		if vx("PBI").exists(),acn.pbi.isNull() do vreqerr("PBI") quit
		if vx("PSGNCRDR").exists(),acn.psgncrdr.isNull() do vreqerr("PSGNCRDR") quit
		if vx("REGCC").exists(),acn.regcc.isNull() do vreqerr("REGCC") quit
		if vx("RFLG").exists(),acn.rflg.isNull() do vreqerr("RFLG") quit
		if vx("SGNCRD").exists(),acn.sgncrd.isNull() do vreqerr("SGNCRD") quit
		if vx("SGNCRDCHGDT").exists(),acn.sgncrdchgdt.isNull() do vreqerr("SGNCRDCHGDT") quit
		if vx("SMET").exists(),acn.smet.isNull() do vreqerr("SMET") quit
		if vx("STAT").exists(),acn.stat.isNull() do vreqerr("STAT") quit
		if vx("TYPE").exists(),acn.type.isNull() do vreqerr("TYPE") quit
	quit

vreqerr(di) // Required error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACN","MSG",1767,"ACN."_di)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit




vddver // Validate data dictionary attributes

	type public Number %O
	type public String vpar,vx()

	type String vRM,X
	type public RecordACN acn

	if (%O = 2) do vload

	if vobj(acn,1).exists() do {

		if acn.acctname.length()>25 set vRM = $$^MSG(1076,25) do vdderr("ACCTNAME", vRM) quit
		if acn.title1.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE1", vRM) quit
		if acn.title2.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE2", vRM) quit
		if acn.title3.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE3", vRM) quit
		if acn.title4.length()>40 set vRM = $$^MSG(1076,40) do vdderr("TITLE4", vRM) quit
	}

	if vobj(acn,49).exists() do {

		set X = acn.incdr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.INCDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.maxdrct if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("MAXDRCT", vRM) quit
		set X = acn.mindr if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MINDR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.odo if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("ODO", vRM) quit
		set X = acn.trb if 'X.isNull(),'Db.isDefined("STBLDC","X") set vRM = $$^MSG(1485,X) do vdderr("TRB", vRM) quit
	}

	if vobj(acn,50).exists() do {

		set X = acn.acngrp if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("ACNGRP", vRM) quit
		set X = acn.aomcode if 'X.isNull(),'Db.isDefined("STBLCINTMET","X") set vRM = $$^MSG(1485,X) do vdderr("AOMCODE", vRM) quit
		if acn.atn.length()>50 set vRM = $$^MSG(1076,50) do vdderr("ATN", vRM) quit
		set X = acn.cc if 'X.isNull(),'Db.isDefined("UTBLCCNTR","X") set vRM = $$^MSG(1485,X) do vdderr("CC", vRM) quit
		set X = acn.ccode if 'X.isNull(),'Db.isDefined("UTBLCC","X") set vRM = $$^MSG(1485,X) do vdderr("CCODE", vRM) quit
		set X = acn.cls if 'X.isNull(),'Db.isDefined("STBLCLS","X") set vRM = $$^MSG(1485,X) do vdderr("CLS", vRM) quit
		if '("01"[acn.COMM) set vRM=$$^MSG(742,"L") do vdderr("COMM", vRM) quit
		if acn.crcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("CRCD", vRM) quit
		if '("01"[acn.CUSTOM1) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM1", vRM) quit
		if '("01"[acn.CUSTOM2) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM2", vRM) quit
		if '("01"[acn.CUSTOM3) set vRM=$$^MSG(742,"L") do vdderr("CUSTOM3", vRM) quit
		set X = acn.glsc if 'X.isNull(),'Db.isDefined("UTBLGLSC","X") set vRM = $$^MSG(1485,X) do vdderr("GLSC", vRM) quit
		if acn.grp.length()>4 set vRM = $$^MSG(1076,4) do vdderr("GRP", vRM) quit
		if '("01"[acn.HIGHVOL) set vRM=$$^MSG(742,"L") do vdderr("HIGHVOL", vRM) quit
		if acn.lnm.length()>20 set vRM = $$^MSG(1076,20) do vdderr("LNM", vRM) quit
		set X = acn.mf if 'X.isNull(),'Db.isDefined("UTBLMF","X") set vRM = $$^MSG(1485,X) do vdderr("MF", vRM) quit
		set X = acn.pers if 'X.isNull(),'Db.isDefined("STBLPERS","X") set vRM = $$^MSG(1485,X) do vdderr("PERS", vRM) quit
		if '("01"[acn.REGCC) set vRM=$$^MSG(742,"L") do vdderr("REGCC", vRM) quit
		set X = acn.regccexc if 'X.isNull(),'Db.isDefined("STBLREGCCX","X") set vRM = $$^MSG(1485,X) do vdderr("REGCCEXC", vRM) quit
		set X = acn.regccexp if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("REGCCEXP", vRM) quit
		set X = acn.regd if 'X.isNull(),'Db.isDefined("STBLREGD1","X") set vRM = $$^MSG(1485,X) do vdderr("REGD", vRM) quit
		set X = acn.secgrp if 'X.isNull(),'Db.isDefined("UTBLSECGRP","X") set vRM = $$^MSG(1485,X) do vdderr("SECGRP", vRM) quit
		set X = acn.type if 'X.isNull(),'Db.isDefined("PRODCTL","X") set vRM = $$^MSG(1485,X) do vdderr("TYPE", vRM) quit
	}

	if vobj(acn,51).exists() do {

		set X = acn.bal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.BAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.balcol if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.BALCOL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ccld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CCLD", vRM) quit
		set X = acn.chkhld if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.CHKHLD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.cntdr if 'X.isNull(),X'?1.10N,X'?1"-"1.9N set vRM=$$^MSG(742,"N") do vdderr("CNTDR", vRM) quit
		set X = acn.donrsk if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DONRSK"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.flttbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("FLTTBL", vRM) quit
		set X = acn.fmld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("FMLD", vRM) quit
		set X = acn.hldtbl if 'X.isNull(),'Db.isDefined("UTBLRTTBL","X") set vRM = $$^MSG(1485,X) do vdderr("HLDTBL", vRM) quit
		if '("01"[acn.PBI) set vRM=$$^MSG(742,"L") do vdderr("PBI", vRM) quit
		if '("01"[acn.RFLG) set vRM=$$^MSG(742,"L") do vdderr("RFLG", vRM) quit
		set X = acn.rskopt if 'X.isNull(),'Db.isDefined("STBLRSKOPT","X") set vRM = $$^MSG(1485,X) do vdderr("RSKOPT", vRM) quit
		set X = acn.stat if 'X.isNull(),'Db.isDefined("STBLSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("STAT", vRM) quit
		set X = acn.stfnet if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.STFNET"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.tld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TLD", vRM) quit
	}

	if vobj(acn,52).exists() do {

		set X = acn.boo if 'X.isNull(),'Db.isDefined("UTBLBRCD","X") set vRM = $$^MSG(1485,X) do vdderr("BOO", vRM) quit
		if acn.convacn.length()>40 set vRM = $$^MSG(1076,40) do vdderr("CONVACN", vRM) quit
		set X = acn.convdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("CONVDT", vRM) quit
		set X = acn.dtc if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DTC", vRM) quit
		set X = acn.hisctf if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("HISCTF", vRM) quit
		set X = acn.iro if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.IRO"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.maxbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MAXBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.maxfta if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MAXFTA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.maxftd if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("MAXFTD", vRM) quit
		set X = acn.odt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ODT", vRM) quit
		set X = acn.off if 'X.isNull(),'Db.isDefined("UTBLOFF","X") set vRM = $$^MSG(1485,X) do vdderr("OFF", vRM) quit
		set X = acn.onp if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("ONP", vRM) quit
		if acn.refnum.length()>12 set vRM = $$^MSG(1076,12) do vdderr("REFNUM", vRM) quit
		set X = acn.rescd if 'X.isNull(),'Db.isDefined("UTBLRESCD","X") set vRM = $$^MSG(1485,X) do vdderr("RESCD", vRM) quit
	}

	if vobj(acn,53).exists() do {

		set X = acn.busopt if 'X.isNull(),'Db.isDefined("STBLBUSOPT","X") set vRM = $$^MSG(1485,X) do vdderr("BUSOPT", vRM) quit
		set X = acn.mdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("MDT", vRM) quit
		set X = acn.nbdc if 'X.isNull(),'Db.isDefined("UTBLNBD","X") set vRM = $$^MSG(1485,X) do vdderr("NBDC", vRM) quit
		set X = acn.org if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.ORG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,54).exists() do {

		set X = acn.acs if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ACS", vRM) quit
		set X = acn.daa if 'X.isNull() set vRM = $$VAL^DBSVER("N",15,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DAA"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.intdef if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.INTDEF"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ipl if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.IPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ipy if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.IPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.iytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.IYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.probal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PROBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.proind if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("PROIND", vRM) quit
		set X = acn.trate if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.TRATE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.trexd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("TREXD", vRM) quit
	}

	if vobj(acn,55).exists() do {

		set X = acn.darcexpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DARCEXPD", vRM) quit
		set X = acn.darcls if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DARCLS", vRM) quit
		set X = acn.darcovr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("DARCOVR", vRM) quit
		set X = acn.ppl if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PPL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ppy if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.pytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.suspect if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("SUSPECT", vRM) quit
	}

	if vobj(acn,57).exists() do {

		set X = acn.eod if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EOD", vRM) quit
		set X = acn.ichld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHLD", vRM) quit
		set X = acn.ichnd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("ICHND", vRM) quit
		set X = acn.irf if 'X.isNull(),'Db.isDefined("STBLIRF","X") set vRM = $$^MSG(1485,X) do vdderr("IRF", vRM) quit
		set X = acn.irn if 'X.isNull() set vRM = $$VAL^DBSVER("N",8,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.IRN"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,60).exists() do {

		set X = acn.index if 'X.isNull(),'Db.isDefined("INDEX","X") set vRM = $$^MSG(1485,X) do vdderr("INDEX", vRM) quit
		set X = acn.intfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[ACN]INTFRE",0) if 'vRM.get().isNull() do vdderr("INTFRE", vRM) quit
		set X = acn.intmat if 'X.isNull(),'Db.isDefined("UTBLMATATT","X") set vRM = $$^MSG(1485,X) do vdderr("INTMAT", vRM) quit
		if acn.intspr.length()>9 set vRM = $$^MSG(1076,9) do vdderr("INTSPR", vRM) quit
		if acn.rndmtd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("RNDMTD", vRM) quit
	}

	if vobj(acn,61).exists() do {

		set X = acn.chkcnt if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CHKCNT", vRM) quit
		if '("01"[acn.CHKEURO) set vRM=$$^MSG(742,"L") do vdderr("CHKEURO", vRM) quit
		if '("01"[acn.CHKISS) set vRM=$$^MSG(742,"L") do vdderr("CHKISS", vRM) quit
		set X = acn.chkout if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CHKOUT", vRM) quit
		set X = acn.chks if 'X.isNull(),'Db.isDefined("UTBLCHKS","X") set vRM = $$^MSG(1485,X) do vdderr("CHKS", vRM) quit
		set X = acn.fltd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD1", vRM) quit
		set X = acn.fltd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD2", vRM) quit
		set X = acn.fltd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD3", vRM) quit
		set X = acn.fltd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD4", vRM) quit
		set X = acn.fltd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("FLTD5", vRM) quit
		set X = acn.fltp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP1", vRM) quit
		set X = acn.fltp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP2", vRM) quit
		set X = acn.fltp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP3", vRM) quit
		set X = acn.fltp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP4", vRM) quit
		set X = acn.fltp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("FLTP5", vRM) quit
		set X = acn.hldd1 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD1", vRM) quit
		set X = acn.hldd2 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD2", vRM) quit
		set X = acn.hldd3 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD3", vRM) quit
		set X = acn.hldd4 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD4", vRM) quit
		set X = acn.hldd5 if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("HLDD5", vRM) quit
		set X = acn.hldp1 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP1", vRM) quit
		set X = acn.hldp2 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP2", vRM) quit
		set X = acn.hldp3 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP3", vRM) quit
		set X = acn.hldp4 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP4", vRM) quit
		set X = acn.hldp5 if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("HLDP5", vRM) quit
	}

	if vobj(acn,62).exists() do {

		if '("01"[acn.ACTIBPAY) set vRM=$$^MSG(742,"L") do vdderr("ACTIBPAY", vRM) quit
		if '("01"[acn.EFTDEB) set vRM=$$^MSG(742,"L") do vdderr("EFTDEB", vRM) quit
		if '("01"[acn.EFTREQ) set vRM=$$^MSG(742,"L") do vdderr("EFTREQ", vRM) quit
		if '("01"[acn.SMET) set vRM=$$^MSG(742,"L") do vdderr("SMET", vRM) quit
	}

	if vobj(acn,67).exists() do {

		set X = acn.ddbal1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal10 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL10"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal11 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL11"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal12 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL12"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal6 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL6"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal7 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL7"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal8 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL8"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbal9 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBAL9"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.ddbalcur if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DDBALCUR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,68).exists() do {

		set X = acn.mebal1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal10 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL10"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal11 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL11"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal12 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL12"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal6 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL6"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal7 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL7"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal8 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL8"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.mebal9 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MEBAL9"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef1 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF1"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef10 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF10"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef2 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF2"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef3 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF3"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef4 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF4"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef5 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF5"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef6 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF6"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef7 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF7"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef8 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF8"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.usrdef9 if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.USRDEF9"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,70).exists() do {

		if '("01"[acn.CMSFLG) set vRM=$$^MSG(742,"L") do vdderr("CMSFLG", vRM) quit
	}

	if vobj(acn,98).exists() do {

		set X = acn.corre if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("CORRE", vRM) quit
		if acn.correacn.length()>35 set vRM = $$^MSG(1076,35) do vdderr("CORREACN", vRM) quit
	}

	if vobj(acn,99).exists() do {

		set X = acn.acn if 'X.isNull(),'Db.isDefined("CIF","X") set vRM = $$^MSG(1485,X) do vdderr("ACN", vRM) quit
		if acn.acnrelc.length()>2 set vRM = $$^MSG(1076,2) do vdderr("ACNRELC", vRM) quit
		if acn.aplid.length()>25 set vRM = $$^MSG(1076,25) do vdderr("APLID", vRM) quit
	}

	if vobj(acn,107).exists() do {

		set X = acn.colcdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("COLCDTE", vRM) quit
		set X = acn.pcollst if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("PCOLLST", vRM) quit
		set X = acn.promamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PROMAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.prombrd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMBRD", vRM) quit
		set X = acn.prommd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMMD", vRM) quit
		set X = acn.promsd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROMSD", vRM) quit
	}

	if vobj(acn,111).exists() do {

		set X = acn.calacls if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("CALACLS", vRM) quit
		set X = acn.provbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",15,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PROVBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.provcat if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("PROVCAT", vRM) quit
		set X = acn.provexpd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PROVEXPD", vRM) quit
		set X = acn.provoamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",12,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PROVOAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.provopct if 'X.isNull() set vRM = $$VAL^DBSVER("N",9,0,,,,,5) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PROVOPCT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.racovr if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("RACOVR", vRM) quit
	}

	if vobj(acn,300).exists() do {

		set X = acn.pbkld if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("PBKLD", vRM) quit
		set X = acn.pbkseq if 'X.isNull(),X'?1.6N,X'?1"-"1.5N set vRM=$$^MSG(742,"N") do vdderr("PBKSEQ", vRM) quit
		set X = acn.pbksn if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("PBKSN", vRM) quit
	}

	if vobj(acn,426).exists() do {

		set X = acn.retfcpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.RETFCPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.retfcytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.RETFCYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.retfwpy if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.RETFWPY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.retfwytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.RETFWYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.retmxfee if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.RETMXFEE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,429).exists() do {

		set X = acn.lmtatm if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.LMTATM"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.lmtcjd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("LMTCJD", vRM) quit
		set X = acn.lmtpos if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.LMTPOS"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,430).exists() do {

		set X = acn.eurbatch if 'X.isNull(),X'?1.4N,X'?1"-"1.3N set vRM=$$^MSG(742,"N") do vdderr("EURBATCH", vRM) quit
		set X = acn.eurcnvd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EURCNVD", vRM) quit
		set X = acn.eurcvinbal if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.EURCVINBAL"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.eurefd if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EUREFD", vRM) quit
		set X = acn.eureqdat if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EUREQDAT", vRM) quit
		set X = acn.eurevdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("EUREVDT", vRM) quit
		set X = acn.eurstat if 'X.isNull(),'Db.isDefined("STBLEURSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("EURSTAT", vRM) quit
		set X = acn.eurudrq if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("EURUDRQ", vRM) quit
		if acn.orgcrcd.length()>3 set vRM = $$^MSG(1076,3) do vdderr("ORGCRCD", vRM) quit
		if acn.orgindex.length()>20 set vRM = $$^MSG(1076,20) do vdderr("ORGINDEX", vRM) quit
		set X = acn.orgsch if 'X.isNull(),'Db.isDefined("UTBLRATE","X") set vRM = $$^MSG(1485,X) do vdderr("ORGSCH", vRM) quit
	}

	if vobj(acn,431).exists() do {

		set X = acn.sfre if 'X.isNull() set vRM = "" do DBSEDT^UFRE("[ACN]SFRE",0) if 'vRM.get().isNull() do vdderr("SFRE", vRM) quit
	}

	if vobj(acn,432).exists() do {

		set X = acn.cnvtyp if 'X.isNull(),'Db.isDefined("STBLCNVTYP","X") set vRM = $$^MSG(1485,X) do vdderr("CNVTYP", vRM) quit
		if '("01"[acn.COLLQUE) set vRM=$$^MSG(742,"L") do vdderr("COLLQUE", vRM) quit
		set X = acn.collst if 'X.isNull(),'Db.isDefined("UTBLCOLLST","X") set vRM = $$^MSG(1485,X) do vdderr("COLLST", vRM) quit
		set X = acn.ipty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.IPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.itytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.ITYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.penpty if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PENPTY"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.pentytd if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.PENTYTD"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.restyp if 'X.isNull(),'Db.isDefined("STBLRESTYP","X") set vRM = $$^MSG(1485,X) do vdderr("RESTYP", vRM) quit
		set X = acn.wrkdte if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("WRKDTE", vRM) quit
	}

	if vobj(acn,438).exists() do {

		if '("01"[acn.MT900) set vRM=$$^MSG(742,"L") do vdderr("MT900", vRM) quit
		set X = acn.mt900a if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("MT900A", vRM) quit
		set X = acn.mt900thr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MT900THR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[acn.MT910) set vRM=$$^MSG(742,"L") do vdderr("MT910", vRM) quit
		set X = acn.mt910a if 'X.isNull(),'Db.isDefined("UTBLCORRE","X") set vRM = $$^MSG(1485,X) do vdderr("MT910A", vRM) quit
		set X = acn.mt910thr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.MT910THR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	}

	if vobj(acn,440).exists() do {

		if '("01"[acn.COF) set vRM=$$^MSG(742,"L") do vdderr("COF", vRM) quit
		if acn.cogs.length()>4 set vRM = $$^MSG(1076,4) do vdderr("COGS", vRM) quit
		set X = acn.com if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COM", vRM) quit
		set X = acn.cot if 'X.isNull(),X'?1N set vRM=$$^MSG(742,"N") do vdderr("COT", vRM) quit
		set X = acn.dtco if 'X.isNull(),X'?1.3N,X'?1"-"1.2N set vRM=$$^MSG(742,"N") do vdderr("DTCO", vRM) quit
	}

	if vobj(acn,447).exists() do {

		set X = acn.pcidstat if 'X.isNull(),'Db.isDefined("STBLPCIDSTAT","X") set vRM = $$^MSG(1485,X) do vdderr("PCIDSTAT", vRM) quit
	}

	if vobj(acn,448).exists() do {

		set X = acn.npiaab if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.NPIAAB"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		if '("01"[acn.OSGNCRDC) set vRM=$$^MSG(742,"L") do vdderr("OSGNCRDC", vRM) quit
		set X = acn.psgncrdr if 'X.isNull(),'Db.isDefined("STBLPSGNCRDR","X") set vRM = $$^MSG(1485,X) do vdderr("PSGNCRDR", vRM) quit
		set X = acn.sgncrd if 'X.isNull(),'Db.isDefined("STBLSGNCRD","X") set vRM = $$^MSG(1485,X) do vdderr("SGNCRD", vRM) quit
		set X = acn.sgncrdchgdt if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("SGNCRDCHGDT", vRM) quit
	}

	if vobj(acn,454).exists() do {

		set X = acn.precard if 'X.isNull(),X'?1.20N,X'?1"-"1.19N set vRM=$$^MSG(742,"N") do vdderr("PRECARD", vRM) quit
		if acn.prepin.length()>20 set vRM = $$^MSG(1076,20) do vdderr("PREPIN", vRM) quit
	}

	if vobj(acn,456).exists() do {

		set X = acn.colexthrsh if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.COLEXTHRSH"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.colextrdys if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("COLEXTRDYS", vRM) quit
		set X = acn.regeamt if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.REGEAMT"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.stmtsrt if 'X.isNull(),'Db.isDefined("STBLSTMTSRT","X") set vRM = $$^MSG(1485,X) do vdderr("STMTSRT", vRM) quit
	}

	if vobj(acn,458).exists() do {

		set X = acn.clr if 'X.isNull(),X'?1.2N,X'?1"-"1.1N set vRM=$$^MSG(742,"N") do vdderr("CLR", vRM) quit
		set X = acn.slc if 'X.isNull(),'Db.isDefined("STBLSBSLC","X") set vRM = $$^MSG(1485,X) do vdderr("SLC", vRM) quit
	}

	if vobj(acn,500).exists() do {

		if acn.acycode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ACYCODE", vRM) quit
		if acn.agcode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("AGCODE", vRM) quit
		if acn.agtypec.length()>15 set vRM = $$^MSG(1076,15) do vdderr("AGTYPEC", vRM) quit
		if acn.busadv.length()>15 set vRM = $$^MSG(1076,15) do vdderr("BUSADV", vRM) quit
		set X = acn.cptag if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.CPTAG"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.cptbadv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.CPTBADV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.cptiae if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.CPTIAE"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.cptrefr if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.CPTREFR"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.dcptag if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTAG", vRM) quit
		set X = acn.dcptbadv if 'X.isNull() set vRM = $$VAL^DBSVER("$",18,0,,,,,2) if 'vRM.isNull() set vRM = $$^MSG(979,"ACN.DCPTBADV"_" "_vRM) throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
		set X = acn.dcptiae if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTIAE", vRM) quit
		set X = acn.dcptrefr if 'X.isNull(),X'?1.5N set vRM=$$^MSG(742,"D") do vdderr("DCPTREFR", vRM) quit
		if acn.ilcode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("ILCODE", vRM) quit
		if acn.refrep.length()>15 set vRM = $$^MSG(1076,15) do vdderr("REFREP", vRM) quit
		if acn.sofcode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("SOFCODE", vRM) quit
		if acn.subscode.length()>15 set vRM = $$^MSG(1076,15) do vdderr("SUBSCODE", vRM) quit
	}
	set X = acn.cid if 'X.isNull(),X'?1.12N,X'?1"-"1.11N set vRM=$$^MSG(742,"N") do vdderr("CID", vRM) quit
	quit

vdderr(di, vRM) // Column attribute error

	type public Boolean ER = 0
	type public String RM
	do SETERR^DBSEXECU("ACN","MSG",979,"ACN."_di_" "_vRM)
	if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~"))
	quit

VJOURNAL(RecordACN acn)	//ACN Journal file entries

	type Public Date %EffectiveDate
	type Public String %TSRC,vpar,vx()
	type String TSRC,vdi,vdx()

	if %TSRC.get().isNull() set TSRC="O"
	else  set TSRC=%TSRC

	if %ProcessMode=0 do {
		if TSRC="B" do {
			if 'EFD.get() do {
				do vj1(.acn)	// Mode=I Tran=B EFD=N Seq=1 JRNID=DTJNAACN_I
				do vj2(.acn)	// Mode=I Tran=B EFD=N Seq=1 JRNID=DTJNA_I
				do vj3(.acn)	// Mode=I Tran=B EFD=N Seq=1 JRNID=HIST_I
				}
			}
		else  if TSRC="O" do {
			if 'EFD.get() do {
				do vj1(.acn)	// Mode=I Tran=O EFD=N Seq=1 JRNID=DTJNAACN_I
				do vj2(.acn)	// Mode=I Tran=O EFD=N Seq=1 JRNID=DTJNA_I
				do vj3(.acn)	// Mode=I Tran=O EFD=N Seq=1 JRNID=HIST_I
				}
			}
		}
	else  if %ProcessMode=1 do {
		if TSRC="B" do {
			do vj4(.acn)	// Mode=U Tran=B EFD=N,E Seq=1 JRNID=HIST_U
			}
		else  if TSRC="O" do {
			do vj4(.acn)	// Mode=U Tran=O EFD=N,E Seq=1 JRNID=HIST_U
			}
		}

	quit


vj1(RecordACN acn)	// DTJNAACN_I  Table DTJNAACN  New Account Insert Journal

	type Public String TJD
	type String v1,v2,v3,v4,v5,vlastkey
	set v1=TJD
	set v2=acn.acn
	set v3=acn.cls
	set v4=acn.grp
	set v5=acn.type
	set vlastkey=acn.cid
	type RecordDTJNAACN dtjnaacn=Db.getRecord("DTJNAACN","SJD=:v1,ACN=:v2,CLS=:v3,GRP=:v4,TYPE=:v5,CID=:vlastkey",1)

	do dtjnaacn.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj2(RecordACN acn)	// DTJNA_I  Table DTJNA  Daily New Account Journal

	type Public String %IDENT,TJD
	type String v1,v2,v3,v4,vlastkey
	set v1=TJD
	set v2=acn.cls
	set v3=acn.grp
	set v4=acn.type
	set vlastkey=acn.cid
	type RecordDTJNA dtjna=Db.getRecord("DTJNA","TJD=:v1,CLS=:v2,GRP=:v3,TYP=:v4,CID=:vlastkey",1)
	set dtjna.ident=%IDENT

	do dtjna.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj3(RecordACN acn)	// HIST_I  Table HIST  History Entry for New Account

	type Public String %IDENT,%UID,TJD,TLO
	type String v1,vlastkey
	set v1=acn.cid
	set vlastkey=Db.nextVal("HIST","CID=:v1")
	type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
	set hist.brcd=acn.boo
	set hist.cdt=+$H
	set hist.ident=%IDENT
	set hist.tcmt=$$^MSG(6795)
	set hist.time=$P($H,",",2)
	set hist.tjd=TJD
	set hist.tlo=TLO
	set hist.uid=%UID

	do hist.save("/NOVALFK/NOVALDD/NOVALRI")

	quit


vj4(RecordACN acn)	// HIST_U  Table HIST  History for File Maintenance

	type Public String vx()
	type String vdi
	set vdi="" for  set vdi=vx(vdi).order() quit:vdi=""  if 'vx(vdi).piece("|",3) if vdi'="TLD" do {
		type Public String vx(),EFD,%IDENT,%UID,TJD,TLO,vfmtable
		type String v1,vlastkey

		type String vold,vnew,vfmtable

		set vold=vx(vdi).piece("|",1)
		set vnew=vx(vdi).piece("|",2)
		set vfmtable=vx(vdi).piece("|",11)

		set v1=acn.cid
		set vlastkey=Db.nextVal("HIST","CID=:v1")
		type RecordHIST hist=Db.getRecord("HIST","CID=:v1,TSEQ=:vlastkey",1)
		set hist.brcd=acn.boo
		set hist.cdt=+$H
		set hist.efd=$G(EFD)
		set hist.ident=%IDENT
		set hist.tcmt=$$TCMTFM^ACNFUNCS("","ACN",vdi,vold,vnew,$G(EFD),,vfmtable)
		set hist.time=$P($H,",",2)
		set hist.tjd=TJD
		set hist.tlo=TLO
		set hist.uid=%UID

		do hist.save("/NOVALFK/NOVALDD/NOVALRI")
		}

	quit



public VINDEX(RecordACN acn) // Update index entries

		type Public String vx()

	if %ProcessMode=1 do { quit
		type String vf,vi,viMap,vxn
		set viMap=",CONVACN,~1~|,COLEXTRDYS,~2~|,DTC,CLS,GRP,TYPE,~3~|,INDEX,~4~|,INTMAT,~5~|,MDT,~6~|,CLS,ACN,~7~|,BOO,~8~|,CC,CLS,GRP,TYPE,~9~|,CLS,GRP,TYPE,~10~|,CLS,~11~|,CLS,GRP,TYPE,CRCD,~12~|,CLS,BOO,PROVCAT,TYPE,~13~|,PBKSN,~14~|"
		set vf=0
		set vxn=""
		for  set vxn=vx(vxn).order() quit:vxn=""  do {
			for  set vf=$F(viMap,(","_vxn_","),vf) quit:vf=0  do {
				set vi=viMap.extract(vf,999).piece("~",2)
				set viMap.piece("|",vi)=""
				do @("vi"_vi_"(.acn)")
			}
		}
	}
	do vi1(.acn)
	do vi2(.acn)
	do vi3(.acn)
	do vi4(.acn)
	do vi5(.acn)
	do vi6(.acn)
	do vi7(.acn)
	do vi8(.acn)
	do vi9(.acn)
	do vi10(.acn)
	do vi11(.acn)
	do vi12(.acn)
	do vi13(.acn)
	do vi14(.acn)

	quit
	

vi1(RecordACN acn) // Maintain ACONVACN index entries (Converted Account/Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.convacn
	type String v2 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if v1'="" if '$D(^XCONVACN(v1,v2)) do vidxerr("ACONVACN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if v1'="" if %ProcessMode<2 set ^XCONVACN(v1,v2)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CONVACN").exists() set v1=vx("CONVACN").piece("|",1)
	if v1.isNull() quit

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XCONVACN(v1,v2)
	quit

vi2(RecordACN acn) // Maintain COLEXTRDYS index entries (Collection Extract Days)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acn.colextrdys
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("COLEXTRDYS",v2,v3)) do vidxerr("COLEXTRDYS")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("COLEXTRDYS",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("COLEXTRDYS").exists() set v2=vx("COLEXTRDYS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("COLEXTRDYS",v2,v3)
	quit

vi3(RecordACN acn) // Maintain DTC index entries (Closed Account Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.dtc
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = acn.cls
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.grp
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = acn.type
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^DTJCL(v1,v2,v3,v4,v5)) do vidxerr("DTC")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DTJCL(v1,v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("DTC").exists() set v1=vx("DTC").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("CLS").exists() set v2=vx("CLS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v3=vx("GRP").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v4=vx("TYPE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DTJCL(v1,v2,v3,v4,v5)
	quit

vi4(RecordACN acn) // Maintain INTINDEX index entries (Interest Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acn.index
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("INDEX",v2,v3)) do vidxerr("INTINDEX")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("INDEX",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INDEX").exists() set v2=vx("INDEX").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("INDEX",v2,v3)
	quit

vi5(RecordACN acn) // Maintain MATRIX index entries (Interest Matrix Processing)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acn.intmat
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("MATATT",v2,v3)) do vidxerr("MATRIX")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("MATATT",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("INTMAT").exists() set v2=vx("INTMAT").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("MATATT",v2,v3)
	quit

vi6(RecordACN acn) // Maintain MDT index entries (Account Maturity Date)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.mdt
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^DAYEND(v1,"MDT",v3)) do vidxerr("MDT")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^DAYEND(v1,"MDT",v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("MDT").exists() set v1=vx("MDT").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^DAYEND(v1,"MDT",v3)
	quit

vi7(RecordACN acn) // Maintain XACN index entries (Primary CIF/Account Index)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = acn.acn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XACN(v1,v2,v3)) do vidxerr("XACN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XACN(v1,v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("ACN").exists() set v2=vx("ACN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XACN(v1,v2,v3)
	quit

vi8(RecordACN acn) // Maintain XBRCD index entries (Branch of Ownership/Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = +acn.boo
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("XBRCD",v2,v3)) do vidxerr("XBRCD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("XBRCD",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("BOO").exists() set v2=vx("BOO").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("XBRCD",v2,v3)
	quit

vi9(RecordACN acn) // Maintain XCC index entries (Cost Center Cross-Reference)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.cc
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = acn.cls
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.grp
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = acn.type
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XCC(v1,v2,v3,v4,v5)) do vidxerr("XCC")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XCC(v1,v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CC").exists() set v1=vx("CC").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("CLS").exists() set v2=vx("CLS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v3=vx("GRP").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v4=vx("TYPE").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XCC(v1,v2,v3,v4,v5)
	quit

vi10(RecordACN acn) // Maintain XCLS index entries (Class/Group/Type)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = acn.grp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.type
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XCLS(v1,v2,v3,v4)) do vidxerr("XCLS")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XCLS(v1,v2,v3,v4)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v2=vx("GRP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v3=vx("TYPE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XCLS(v1,v2,v3,v4)
	quit

vi11(RecordACN acn) // Maintain XCLSACN index entries (Class/Account)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XCLSACN(v1,v2)) do vidxerr("XCLSACN")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XCLSACN(v1,v2)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XCLSACN(v1,v2)
	quit

vi12(RecordACN acn) // Maintain XCRCD index entries (Currency Code)

	type Public String vx()
	type Boolean vdelete = 0
	type String v1 = acn.cls
	if v1.isNull() set v1=(PSL.maxCharValue-1).char()
	type String v2 = acn.grp
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.type
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = acn.crcd
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XCRCD(v1,v2,v3,v4,v5)) do vidxerr("XCRCD")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XCRCD(v1,v2,v3,v4,v5)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v1=vx("CLS").piece("|",1) set:v1.isNull() v1=(PSL.maxCharValue-1).char()
	if vx("GRP").exists() set v2=vx("GRP").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v3=vx("TYPE").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("CRCD").exists() set v4=vx("CRCD").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XCRCD(v1,v2,v3,v4,v5)
	quit

vi13(RecordACN acn) // Maintain XREFXLNR index entries (Provision Accounts)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acn.cls
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = +acn.boo
	if v3.isNull() set v3=(PSL.maxCharValue-1).char()
	type String v4 = acn.provcat
	if v4.isNull() set v4=(PSL.maxCharValue-1).char()
	type String v5 = acn.type
	if v5.isNull() set v5=(PSL.maxCharValue-1).char()
	type String v6 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("PROVPOST",v2,v3,v4,v5,v6)) do vidxerr("XREFXLNR")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("PROVPOST",v2,v3,v4,v5,v6)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("CLS").exists() set v2=vx("CLS").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()
	if vx("BOO").exists() set v3=vx("BOO").piece("|",1) set:v3.isNull() v3=(PSL.maxCharValue-1).char()
	if vx("PROVCAT").exists() set v4=vx("PROVCAT").piece("|",1) set:v4.isNull() v4=(PSL.maxCharValue-1).char()
	if vx("TYPE").exists() set v5=vx("TYPE").piece("|",1) set:v5.isNull() v5=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("PROVPOST",v2,v3,v4,v5,v6)
	quit

vi14(RecordACN acn) // Maintain XSERNUM index entries (Serial Number)

	type Public String vx()
	type Boolean vdelete = 0
	type String v2 = acn.pbksn
	if v2.isNull() set v2=(PSL.maxCharValue-1).char()
	type String v3 = acn.cid

	if %ProcessMode=2 do { quit

		// Allow global reference
		#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
		if '$D(^XREF("XSER",v2,v3)) do vidxerr("XSERNUM")
		}


	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	if %ProcessMode<2 set ^XREF("XSER",v2,v3)="" 
	quit:%ProcessMode=0

	if %ProcessMode=3 set vdelete=1
	if vx("PBKSN").exists() set v2=vx("PBKSN").piece("|",1) set:v2.isNull() v2=(PSL.maxCharValue-1).char()

	// Allow global reference
	#ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602
	kill ^XREF("XSER",v2,v3)
	quit

public VIDXBLD(List vlist) // Rebuild index files (External call)


	type Number %ProcessMode=0                             // Create mode
	type Number i

	if vlist.get().isNull() set vlist="VINDEX"             // Build all

	type DbSet ds=Db.selectDbSet("ACN")

	while ds.next() do {
		type RecordACN acn=ds.getRecord("ACN")
		if vlist.contains("VINDEX") do VINDEX(.acn) quit
		if vlist.contains("ACONVACN") do vi1(.acn)
		if vlist.contains("COLEXTRDYS") do vi2(.acn)
		if vlist.contains("DTC") do vi3(.acn)
		if vlist.contains("INTINDEX") do vi4(.acn)
		if vlist.contains("MATRIX") do vi5(.acn)
		if vlist.contains("MDT") do vi6(.acn)
		if vlist.contains("XACN") do vi7(.acn)
		if vlist.contains("XBRCD") do vi8(.acn)
		if vlist.contains("XCC") do vi9(.acn)
		if vlist.contains("XCLS") do vi10(.acn)
		if vlist.contains("XCLSACN") do vi11(.acn)
		if vlist.contains("XCRCD") do vi12(.acn)
		if vlist.contains("XREFXLNR") do vi13(.acn)
		if vlist.contains("XSERNUM") do vi14(.acn)
	}

	quit


public VIDXBLD1(RecordACN acn, List vlist) // Rebuild index files for one record (External call)


	type Number i

	if vlist.contains("VINDEX") do VINDEX(.acn) quit
	if vlist.contains("ACONVACN") do vi1(.acn)
	if vlist.contains("COLEXTRDYS") do vi2(.acn)
	if vlist.contains("DTC") do vi3(.acn)
	if vlist.contains("INTINDEX") do vi4(.acn)
	if vlist.contains("MATRIX") do vi5(.acn)
	if vlist.contains("MDT") do vi6(.acn)
	if vlist.contains("XACN") do vi7(.acn)
	if vlist.contains("XBRCD") do vi8(.acn)
	if vlist.contains("XCC") do vi9(.acn)
	if vlist.contains("XCLS") do vi10(.acn)
	if vlist.contains("XCLSACN") do vi11(.acn)
	if vlist.contains("XCRCD") do vi12(.acn)
	if vlist.contains("XREFXLNR") do vi13(.acn)
	if vlist.contains("XSERNUM") do vi14(.acn)

	quit


vidxerr(di) // Error message

	D SETERR^DBSEXECU("ACN","MSG",1225,"ACN."_di)

	quit


vkchged // Access key changed

	type public RecordACN acn

	type public Boolean ER = 0
	type public String RM,vpar,vx()

	type Number %O = 1
	type String vnewkey,voldkey,vux

	set vux = vx("CID")
	set voldkey = vux.piece("|",1),vobj(acn,-3) = voldkey  // Copy old keys into object

	set vpar = $$setPar^UCUTILN(vpar,"NOINDEX")            // Switch Index off
	do vload                                               // Make sure all data is loaded locally
	if vpar["/VALREQ/" do vrequ
	if vpar["/VALDD/" do vddver
	do vexec

	set vnewkey = vux.piece("|",2),vobj(acn,-3) = vnewkey  // Copy new keys into object
	type RecordACN vnewrec = acn.copy()
	do vnewrec.setMode(0)
	do vnewrec.save("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")

	set %O = 1 do CASUPD^DBSEXECU("ACN",voldkey,vnewkey) if ER throw Class.new("Error","%PSL-E-DBFILER,"_RM.get().replace(",","~")) // Cascade update

	set vobj(acn,-3) = vux.piece("|",1)                    // Reset key for delete
	set vpar = $$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
	set %O = 3 do vdelete(1)                               // Delete old record

	quit

VCASDEL // Cascade delete logic

	type public RecordACN acn
	type public String vpar

	type String vERRMSG

	do Db.delete("ACCTTOEVENTS","CID=:acn.cid",vpar)       // Cascade delete

	do Db.delete("ACNADDR","CID=:acn.cid",vpar)            // Cascade delete

	if Db.isDefined("ARSCID","CID=:acn.cid") set vERRMSG = $$^MSG(8563,"ARSCID(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~")) // Restriction on delete

	do Db.delete("ATMDUP","CID=:acn.cid",vpar)             // Cascade delete

	do Db.delete("ATMHLD","CID=:acn.cid",vpar)             // Cascade delete

	do Db.delete("CMBCID","CID=:acn.cid",vpar)             // Cascade delete

	do Db.delete("COMDEF","CID=:acn.cid",vpar)             // Cascade delete

	do Db.delete("COMPLNCID","CID=:acn.cid",vpar)          // Cascade delete

	type ResultSet rs9=Db.select("NOSTROFX","CRCD","NOSTROFX=:acn.cid") // Restriction on delete
	if 'rs9.isEmpty() set vERRMSG = $$^MSG(8563,"CRCD(NOSTROFX) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs10=Db.select("OURPREF","CRCD","OURPREF=:acn.cid") // Restriction on delete
	if 'rs10.isEmpty() set vERRMSG = $$^MSG(8563,"CRCD(OURPREF) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs11=Db.select("CID","CRDEXT","CID=:acn.cid") // Restriction on delete
	if 'rs11.isEmpty() set vERRMSG = $$^MSG(8563,"CRDEXT(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("CTFPLNCID","CID=:acn.cid",vpar)          // Cascade delete

	do Db.delete("DAYENDCRDFI","CID=:acn.cid",vpar)        // Cascade delete

	do Db.delete("DAYENDERA","CID=:acn.cid",vpar)          // Cascade delete

	do Db.delete("DAYENDFNDT","CID=:acn.cid",vpar)         // Cascade delete

	type ResultSet rs16=Db.select("CID","DAYENDUSRAUT","CID=:acn.cid") // Restriction on delete
	if 'rs16.isEmpty() set vERRMSG = $$^MSG(8563,"DAYENDUSRAUT(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("DTJCL","CID=:acn.cid",vpar)              // Cascade delete

	do Db.delete("DTJFM","CID=:acn.cid",vpar)              // Cascade delete

	do Db.delete("HIST","CID=:acn.cid",vpar)               // Cascade delete

	do Db.delete("HLD10","CID=:acn.cid",vpar)              // Cascade delete

	do Db.delete("HLD11","CID=:acn.cid",vpar)              // Cascade delete

	do Db.delete("HLD12","CID=:acn.cid",vpar)              // Cascade delete

	do Db.delete("HLD7","CID=:acn.cid",vpar)               // Cascade delete

	do Db.delete("HLD8","CID=:acn.cid",vpar)               // Cascade delete

	do Db.delete("HLDD","CID=:acn.cid",vpar)               // Cascade delete

	do Db.delete("HLDDTL","CID=:acn.cid",vpar)             // Cascade delete

	do Db.delete("LNCRADTL","CID=:acn.cid",vpar)           // Cascade delete

	do Db.delete("LNOTSSC1","CID=:acn.cid",vpar)           // Cascade delete

	do Db.delete("LPSWEEP","CID=:acn.cid",vpar)            // Cascade delete

	do Db.delete("LPSWEEP","LPCID=:acn.cid",vpar)          // Cascade delete

	do Db.delete("MDATAACN","CID=:acn.cid",vpar)           // Cascade delete

	type ResultSet rs32=Db.select("CID","MPSREC1","CID=:acn.cid") // Restriction on delete
	if 'rs32.isEmpty() set vERRMSG = $$^MSG(8563,"MPSREC1(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("PDO","CID=:acn.cid",vpar)                // Cascade delete

	do Db.delete("PHLD","CID=:acn.cid",vpar)               // Cascade delete

	do Db.delete("PHLD9","CID=:acn.cid",vpar)              // Cascade delete

	type ResultSet rs36=Db.select("CID","PNLTYEVENT","CID=:acn.cid") // Restriction on delete
	if 'rs36.isEmpty() set vERRMSG = $$^MSG(8563,"PNLTYEVENT(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("PURGDACN","CID=:acn.cid",vpar)           // Cascade delete

	do Db.delete("Q1042S","CID=:acn.cid",vpar)             // Cascade delete

	do Db.delete("RELCIF","CID=:acn.cid",vpar)             // Cascade delete

	type ResultSet rs40=Db.select("CID","RETFHIST","CID=:acn.cid") // Restriction on delete
	if 'rs40.isEmpty() set vERRMSG = $$^MSG(8563,"RETFHIST(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs41=Db.select("CID","RFLGCCID","CID=:acn.cid") // Restriction on delete
	if 'rs41.isEmpty() set vERRMSG = $$^MSG(8563,"RFLGCCID(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs42=Db.select("CID","RFLGRPACID","CID=:acn.cid") // Restriction on delete
	if 'rs42.isEmpty() set vERRMSG = $$^MSG(8563,"RFLGRPACID(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("SADDRACN","CID=:acn.cid",vpar)           // Cascade delete

	type ResultSet rs44=Db.select("CID","SW942","CID=:acn.cid") // Restriction on delete
	if 'rs44.isEmpty() set vERRMSG = $$^MSG(8563,"SW942(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	do Db.delete("TIKLACN","CID=:acn.cid",vpar)            // Cascade delete

	do Db.delete("TTXSRT","CID=:acn.cid",vpar)             // Cascade delete

	type ResultSet rs47=Db.select("CID","USRAUTH","CID=:acn.cid") // Restriction on delete
	if 'rs47.isEmpty() set vERRMSG = $$^MSG(8563,"USRAUTH(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs48=Db.select("CID","XRETFWA","CID=:acn.cid") // Restriction on delete
	if 'rs48.isEmpty() set vERRMSG = $$^MSG(8563,"XRETFWA(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	type ResultSet rs49=Db.select("CID","XRETFWU","CID=:acn.cid") // Restriction on delete
	if 'rs49.isEmpty() set vERRMSG = $$^MSG(8563,"XRETFWU(CID) -> ACN(CID)") throw Class.new("Error","%PSL-E-DBFILER,"_vERRMSG.replace(",","~"))

	quit

VIDXPGM()	quit "ACNFILE"	// Location of index program

