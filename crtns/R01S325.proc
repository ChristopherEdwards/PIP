R01S325	// SCA335 - Cross-Sell Ratio Report by Household
	// Copyright(c)2007 Sanchez Computer Associates, Inc.  All Rights Reserved - 01/31/2007 12:48 - shetyes

	type public Number ER=0
	type public Number vbatchq
	type public String IO,RM,VRWOPT()
	type public String PGM
	type String A,A(),CIFL(),CIFQ(),LC(),Q,QCIF(),TPGM,VAL,VAL1,X
	type Number OLNTB
	type String %READ,RID,RN,%TAB,VFMQ
	type String HHTYP
	type String QCIF1
	type String QCIF2
	type String QCIF3
	type String QCIF4
	type String QCIF5
	type String QCIF6
	type String QCIF7
	type String QCIF8
	type String QCIF9
	type String VIN11="ALL"
	type String VIN12="ALL"
	type String VIN13="ALL"

	set RID="SCA335"
	set RN="Cross-Sell Ratio Report by Household"
	if IO.get()="" set IO=$I

	do INIT^%ZM()

	do VPREBQ quit:VFMQ.get()			// Pre-processor (before query)

	set %TAB("HHTYP")="|4|||^UTBL(""HHOLD"",||D POSHH^@TPGM||T|Household Type|||||"
	set %TAB("IO")=$$IO^SCATAB
	set %TAB("QCIF1")="|40|||||D POSCIF^@TPGM|K QEXT|T|CIF Query Input|||||"
	set %TAB("QCIF2")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF3")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF4")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF5")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF6")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF7")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF8")="|40|||||D POSCIF^@TPGM||T|CIF Query Input|||||"
	set %TAB("QCIF9")="|40|||||D LASCIF^@TPGM|K QEXT|T|CIF Query Input|||||"
	set %TAB("VIN11")="|255||[ACN]CLS|[STBLCLS]:NOVAL||D EXT^DBSQRY||T|Product Class|||||"
	set %TAB("VIN12")="|255||[ACN]GRP|[STBLGRP]:NOVAL||D EXT^DBSQRY||T|Product Group|||||"
	set %TAB("VIN13")="|255||[ACN]TYPE|[PRODCTL]:NOVAL||D EXT^DBSQRY||T|Product Type|||||"

	set %READ="IO/REQ,HHTYP#0,QCIF1#0,QCIF2#0,QCIF3#0,QCIF4#0,QCIF5#0,QCIF6#0,QCIF7#0,QCIF8#0,QCIF9#0,VIN11#0,VIN12#0,VIN13#0,"

	// Skip device prompt option
	if VRWOPT("NOOPEN").get() set %READ=%READ.piece(",",2,99)

	set VFMQ=""
	if %READ'="" do { quit:VFMQ.get()="Q"
		set OLNTB=30
		set %READ="@RN/CEN#1,,"_%READ
		do ^UTLREAD
		}

	if 'vbatchq.get() do V0
	quit

V0	// External report entry point

	type Boolean VHIT
	type public Number AUXPTR,ER,VTBLNAM
	type public String IO,IOPAR,IOSL,IOTYP,%MSKD,RM,VDISTKEY,VRWOPT()
	type public String PGM
	type public String A,A(),CIFL(),CIFQ(),LC(),Q,QCIF(),TPGM,VAL,VAL1,X
	type public String HHTYP,QCIF1,QCIF2,QCIF3,QCIF4,QCIF5,QCIF6,QCIF7,QCIF8,QCIF9,VIN11,VIN12,VIN13
	type Number vcrt,VD(),VFMQ,vh(),vI,vlc,VLC,VNEWHDR,VOFFLG,VPN,VR,VRG,vs(),VSEQ,VT()
	type String VWHERE
	type Literal String VSELECT
	type String %TIM,ACN,AMT,AVG,BAL,CID,CLS,CNT,COMMON(),CONAM,COUNT,DES,GRP,HEAD,LINE,MCLS,MIN(),ODESC,OGRP,OPT,OTYP(),OTYPE,OTYPE(),PTCNT,PTVAL,Q,QTOT(),QTYPE(),RAT,RID,RN,SCNT,START(),STAT,SVAL,TBAL,TCNT,TOT(),TVAL,TYPE,VAL,VL,VLOF,VRF(),VSTATS(),X,vCOL,vHDG,vc1,vc2,vc3,vovc1,vrundate,vsysdate

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set CONAM=CUVAR.conam
	set ER=0,RID="SCA335",RN="Cross-Sell Ratio Report by Household"
	set VL=""

	use 0 if 'VRWOPT("NOOPEN").get() do { quit:ER
		if 'VRWOPT("IOPAR").get().isNull() set IOPAR = VRWOPT("IOPAR")
		else  if ((IOTYP.get()="RMS")!(IOTYP.get()="PNTQ")),('IOPAR.get().isLike("%/OCHSET=%")),$$VALID^%ZRTNS("UCIOENCD") do {
			// Accept warning if ^UCIOENCD does not exist
			#ACCEPT Date=07/26/06; Pgm=RussellDS; CR=22121; Group=MISMATCH
			type String CHRSET=$$^UCIOENCD("Report","SCA335","V0","*")
			if 'CHRSET.isNull() set IOPAR = IOPAR_"/OCHSET="_CHRSET
		}
		do OPEN^SCAIO
	}
	set vcrt=(IOTYP="TRM")
	if 'vcrt set IOSL=60				// Non-interactive
	else  do {					// Interactive
		do TERM^%ZUSE(IO,"WIDTH=133")
		write $$CLEARXY^%TRMVT
		write $$SCR132^%TRMVT			// Switch to 132 col mode
		}

	do INIT^%ZM()


	// Build WHERE clause to use for dynamic query
	do {
		type Number SEQ=1
		type String DQQRY(),FROM
		if VIN11.get()="" set VIN11="ALL"
		if VIN11'="ALL" set DQQRY(SEQ)="[ACN]CLS "_VIN11,SEQ=SEQ+1
		if VIN12.get()="" set VIN12="ALL"
		if VIN12'="ALL" set DQQRY(SEQ)="[ACN]GRP "_VIN12,SEQ=SEQ+1
		if VIN13.get()="" set VIN13="ALL"
		if VIN13'="ALL" set DQQRY(SEQ)="[ACN]TYPE "_VIN13,SEQ=SEQ+1
		set FROM=$$DQJOIN^SQLCONV("ACN,CIF") quit:ER
		set VWHERE=$$WHERE^SQLCONV(.DQQRY,"")
		}

	// Print Report Banner Page
	if cuvar.banner,'VRWOPT("NOBANNER").get(),IOTYP'="TRM",'AUXPTR.get() do {
		type String VBNRINFO()

		set VBNRINFO("PROMPTS",11)="WC2|"_"Product Class"_"|VIN11|"_VIN11.get()
		set VBNRINFO("PROMPTS",12)="WC2|"_"Product Group"_"|VIN12|"_VIN12.get()
		set VBNRINFO("PROMPTS",13)="WC2|"_"Product Type"_"|VIN13|"_VIN13.get()


		do {
			type Number SEQ
			type String VALUE,VAR,X
			set X=VWHERE
			set SEQ=""
			for  set SEQ=VBNRINFO("PROMPTS",SEQ).order() quit:SEQ=""  do {
				set VAR=VBNRINFO("PROMPTS",SEQ).piece("|",3))
				set VALUE=VBNRINFO("PROMPTS",SEQ).piece("|",4,99)
				set X=$$replace^DBSRWUTL(X,":"_VAR,"'"_VALUE_"'")
				}
			set VBNRINFO("WHERE")=X
			}

		set VBNRINFO("DESC")="Cross-Sell Ratio Report by Household"
		set VBNRINFO("PGM")="R01S325"
		set VBNRINFO("RID")="SCA335"
		set VBNRINFO("TABLES")="ACN,CIF"

		set VBNRINFO("ORDERBY",1)="[SYSDEV,ACN]CID"


		do ^DBSRWBNR(IO,.VBNRINFO)		// Print banner
		}

	// Initialize variables
	set (vc1,vc2,vc3)=""
	set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0
	set VHIT = 0
	set VNEWHDR=1
	set VLOF=""
	set %TIM=$$TIM^%ZM
	set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()

	do {
		type Number I,J,K
		for I=0:1:1 do {
			set (vh(I),VD(I))=0,vs(I)=1	// Group break flags
			set VT(I)=0			// Group count
			for J=1:1:0 do {
				for K=1:1:3 set VT(I,J,K)=""	// Initialize function stats
				}
			}
		}

	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data
	if VDISTKEY.get()="" do { quit:VFMQ		// Report Pre-processor (after query)
		do VPREAQ
		if VFMQ set vh(0)=1 do VEXIT(0)
		}

	set vh(0)=0

	// Run report directly
	do VINILAST

	set VSELECT="ACN.CID,ACN.TYPE,ACN.GRP"

	#ACCEPT DATE=01/31/2007;PGM=Report Writer Generator;CR=20967
	type ResultSet rwrs=Db.select(VSELECT,"ACN,CIF",VWHERE,"ACN.CID","","DQMODE=1")
	if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"",1)	// Debug Mode
	if rwrs.isEmpty() do VEXIT(1) quit
	while rwrs.next() do { quit:VFMQ
	type Boolean VSKIPREC = 0
		type String V,VI
		set V=rwrs.getRow().toString()
		set VI=""
		do VGETDATA(V,VI)
		do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1
		do VPRINT quit:VFMQ
		do VSAVLAST
		}
	do VEXIT('VHIT)

	quit


VINILAST	// Initialize last access key values
	type Public String vovc1
	set vovc1=""
	quit

VSAVLAST	// Save last access keys values
	type Public String vovc1,vc1
	set vovc1=vc1
	quit


VGETDATA(String V,String VI)	//
	type Public String vc1,vc2,vc3
	set vc1=V.piece($C(9),1)			// ACN.CID
	set vc2=V.piece($C(9),2)			// ACN.TYPE
	set vc3=V.piece($C(9),3)			// ACN.GRP
	quit

	// User-defined pre/post-processor code

VFPOST	// FETCH post-processor

 // CID COLLATING

 type public Number CID
 type public String CLS,GRP,COMMON(),OTYPE,START(),TYPE

 type ResultSet rsacn=Db.select("CID,TYPE,GRP,CLS","ACN")
 if START(TYPE) do {
	while rsacn.next() do {
		set CID=rsacn.getCol("CID")
		set TYPE=rsacn.getCol("TYPE")
		set GRP=rsacn.getCol("GRP")
		set CLS=rsacn.getCol("CLS")

		if CID'="" do START 
		set START(TYPE)=0
		}

	}

 if START(GRP) set START(GRP)=0 

 set OTYPE=COMMON(TYPE,OTYPE).order() if OTYPE'="" set VD(4)=0
	quit

VPREAQ	// Pre-processor (after query)

 /*
  DEFINE ARRAY OF TYPES WHICH WILL BE INCLUDED IN REPORT
   Variables included in report arrays:
 
   START(CLS or GRP or TYPE) - "Print indicator" flag.  Since this report
  requires two passes though XCLS (first to accumulate, second to print),
  this variable set is used to control collating relative to which pass
  is being addressed.
   QTYPE(TYPE) - Listing of TYPES to include (those that pass query).
   TOT(TYPE)   - Totals count and amount for all from ^XCLS, regardless
  of query values.
   OTYPE(TYPE) - Status indicator if other type hgas been reviewed for detail
  TYPE.
   COMMON(TYPE,OTYPE) - Totals count of occurances for each "other" type
   on report for each detail TYPE.
 */
 type public Number MIN()
 type public String MCLS,GRP,TYPE
 type public String CLS,Q,X
 type public Number OTYP(),QTYPE(),QTOT(),START(),TOT()
 
 set CLS="*",(GRP,TYPE)="",START=1

 type ResultSet rs=Db.select("CLS,GRP,TYPE","ACN")
 while rs.next() do {
       set CLS=rs.getCol("CLS")
       if CLS="" do SET1 quit
         
	set START(CLS)=1
        set GRP=rs.getCol("GRP")

 	if 'OTYPE.exists() set OTYPE=""
 	set START(GRP)=1

 	set TYPE=rs.getCol("TYPE")
        set (QTYPE(TYPE),TOT(TYPE),QTOT(TYPE))="0|0",(START(TYPE),OTYP(TYPE))=1
       }

SET1 // DEFINE COMMON ARRAY
 type public String QTYPE()
 type Number I,J
 type String VAL,VAL1

 set (VAL,VAL1)=""
 for I=1:1 set VAL=QTYPE(VAL).order() quit:VAL.isNull()  for J=1:1 set VAL1=QTYPE(VAL1).order() quit:VAL1.isNull()  set COMMON(VAL,VAL1)=""
 quit

START //

 type public Number ACN,BAL,CID,COUNT,OPT,STAT,TBAL,VAL
 type public String OTYPE(),OTYPE,TOT(),TYPE
 type Number I  
 
 type RecordACN acn=Db.getRecord("ACN","CID=:CID",1)
 if acn.getMode() do {
        set STAT=acn.stat
        set BAL=acn.bal
	set TYPE=acn.type
        }

 // Disregard closed accounts
 quit:STAT=4

 // Define head of household.
 set ACN=acn.acn

 // Disregard if not of queried household type
 type ResultSet rs=Db.select("HHTYP","CIFHH","ACN=:ACN")
 while rs.next() do {
	set HHTYP=rs.getCol("HHTYP")
	}

 if 'HHTYP.exists() quit

 // Replace ACN with that of acutal head of HH.
 type Number HEADACN
 
 set HEADACN=""

 type ResultSet rsacn=Db.select("HEADACN","CIFHH","ACN=:ACN AND HHTYP=:HHTYP")
 while rs.next() do {
	set ACN=rsacn.getCol("HEADACN")
	do STARTLOOP
	}
 quit

STARTLOOP

 // Accumulate TYPE totals
 set COUNT=TOT(TYPE).piece("|",1),TBAL=TOT(TYPE).piece("|",2)
 set TBAL=TBAL+BAL,TOT(TYPE)=COUNT_"|"_TBAL

 // Verify if valid CIF account
 type RecordTMPRPT1 tmprpt1=Db.getRecord("TMPRPT1","PID=:%ProcessID,KEY1=:ACN",1)
 if tmprpt1.getMode() set OPT=tmprpt1.data

 // OPT="" then ACN not checked yet
 // OPT=0 ACN checked and not valid

 // Verify if valid CIF per queries, set OPT in ^TMP.
 if OPT.isNull() do CHECK1

 // Already processed for this TYPE.
 type RecordTMPRPT2 tmprpt22=Db.getRecord("TMPRPT2","PID=:%ProcessID,KEY1=:ACN,KEY2=:TYPE",1)
 if tmprpt22.getMode() quit

 type RecordTMPRPT2 tmprpt2=Class.new("RecordTMPRPT2")
 set tmprpt2.PID=%ProcessID
 set tmprpt2.KEY1=ACN
 set tmprpt2.KEY2=TYPE
 set tmprpt2.data=""
 do tmprpt2.save()

 // New CIF for type, so add count
 set COUNT=COUNT+1,TOT(TYPE).piece("|",1)=COUNT

 // Failed CIF test, back to collate to pick up next CID
 if OPT=0 quit

 set VAL=""
 // Only re-set the counter flags for head-of-household, don't count the
 // member CIFs, just add their balances.
 
 for I=1:1 set VAL=OTYP(VAL).order() quit:VAL.isNull()  set OTYP(VAL)=1
 do COL9

 // Review other accounts (CIF's) associated with this head of household

 set ACN1=ACN,ACN=""

 type ResultSet rs1=Db.select("MACN","CIFHH0","ACN=:ACN1 AND HHTYP=:HHTYP")
 if rs1.next() set ACN=rs1.getCol("MACN")

 if (ACN="")!(ACN=ACN1) quit

 do COL9

 // Quit after all CIFs for qualifying head-of-household have been reviewed
 quit
 
COL9 // COLLATE THROUGH NODE 99

 // For each CIF, collate through all CID's held
 type ResultSet rs=Db.select("CID","RELCIF","ACN=:ACN")
 while rs.next() do { quit:VAL.isNull()
	set VAL=rs.getCol("CID")

	type RecordACN acncid=Db.getRecord("ACN","CID=:VAL",1)
	if acncid.getMode() set CIDACN=acncid.acn

	// This CIF not primary for this CID
	if CIDACN'=ACN quit	
	set OTYPE=acncid.type
	
 	// Not included TYPE
	if 'QTYPE(OTYPE).exists() quit

	// Account closed, disregard
 	if acncid.stat=4 quit

	set BAL=acncid.bal

	set COUNT=COMMON(TYPE,OTYPE).piece("|",1)
	set TBAL=COMMON(TYPE,OTYPE).piece("|",2)

 	// Variable OTYP indicates if for this TYPE this CIF has been counted.  Where
	// a given CIF has multiple accounts of a given TYPE, only count the CIF once,
 	// but total the dollars for all accounts of that TYPE.

	if OTYP(OTYPE) set COUNT=COUNT+1,OTYP(OTYPE)=0
 	set TBAL=TBAL+BAL
 	set COMMON(TYPE,OTYPE)=COUNT_"|"_TBAL
 	}

CHECK1 // Verify if valid CIF account

 set VAL="",OPT=1
 kill CIF

 // Process CIF queries
 for I=1:1 set VAL=CIFL(VAL).order() quit:VAL.isNull()  xecute CIFL(VAL)
 for I=1:1 set VAL=CIFQ(VAL).order() quit:VAL=""  if 1 xecute CIFQ(VAL) else  quit
 else  set OPT=0
 type RecordTMPRPT1 tmprpt1=Db.getRecord("TMPRPT1","PID=:%ProcessID,KEY1=:ACN",1)
 if tmprpt1.getMode() do {
        set tmprpt1.data=OPT
        do tmprpt1.save()
        }
 quit
	quit

VPREBQ	// Pre-processor (before query)

 type public String TPGM
 type String RID
 //Incoming=PGM

 set START=1
 set RID="SCA335" do ^URID set TPGM=PGM

 do Db.delete("TMPRPT1","PID=:%ProcessID")
 do Db.delete("TMPRPT2","PID=:%ProcessID")
 quit

POSCIF // POST PROCESS CIF QUERY INPUT
 type public String X
 
 if X.isNull() quit
 if 1 if X["[CIF]"!(X["[ZCIF]")

 // Queries limited to CIF file only
 else  do Runtime.setErrMSG("CIF",2293) quit
 do ^DBSQRY
 quit
 
POSHH // POST PROCESS HOUSEHOLD TYPE
 type public String X

 // Required
 if X.isNull() do Runtime.setErrMSG("CIF",2385) quit
 quit
 
LASCIF // PROCESS AFTER LAST CIF QUERY INPUT ENTRY
 
 type public String A,CIFL(),CIFQ(),LC(),Q,QCIF(),X
 type Number CTR,I,MIN,MAX
 type String FILES,VAL,VAL1

 do POSCIF

 set (VAL,VAL1)=""

 kill A,LC

 if 'Q.exists() quit

 set FILES="CIF"

 do ^DBSQRYA
 do ^DBSVLOD("",.LC,1)

 set CTR=1
 for I=1:1 set VAL=LC(VAL).order() quit:VAL.isNull()  if LC(VAL).extract()=" " if LC(VAL).extract(2)'=";" set CIFL(CTR)=LC(VAL).extract(2,99),CTR=CTR+1
 for I=1:1 set VAL=Q(5,VAL).order() quit:VAL.isNull()  set CIFQ(CTR)=Q(5,VAL),CTR=CTR+1

 kill Q
 quit

 // PROCESS AND DISPATCH TO DBSVLOD TO DEFINE LOAD FOR CIF PASS

SET // Strip Q array to define included data items

 type public String A(),Q,VAL,VAL1,X

 set X=Q(VAL,VAL1) quit:X'["CIF]"  set X=X.piece($C(1),1)
 set X=X.piece(",",2),X="["_X
 set A(X)=""
 quit
	quit

VRPOST	// Report post-processor

 do Db.delete("TMPRPT1","PID=:%ProcessID")
 do Db.delete("TMPRPT2","PID=:%ProcessID")
	quit

VBRSAVE(Number LINE,String DATA)	// Save for report browser
	type RecordTMPRPTBR tmprptbr=Class.new("RecordTMPRPTBR")
	set tmprptbr.jobno=%ProcessID
	set tmprptbr.lineno=LINE
	set tmprptbr.pageno=0
	set tmprptbr.seq=0
	set tmprptbr.data=DATA
	do tmprptbr.bypassSave()
	quit

VEXIT(NOINFO)	// Exit from report
	type Public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()
	type Public String IO,VTBLNAM
	type Number I,PN,vs(),z
	type String VL=""
	set vs(1)=0
	if 'vh(0) do VHDG0
	if 'VFMQ do {
		// No information available to display
		if NOINFO=1 set VL=$$^MSG(4655) do VOM
		if vcrt set VL="" for z=VLC+1:1:IOSL do VOM

		if 'VTBLNAM.exists() do {
			set vs(2)=0
			do VRPOST			// Report Post-Processor
			}
		}

	if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)
	if 'VRWOPT("NOCLOSE").get() do CLOSE^SCAIO
	do Db.delete("TMPRPTBR","JOBNO=:%ProcessID")	// Report browser data

	quit

VPRINT	// Print section
	type Public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ
	type Number vskp()

	do VBREAK

	if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0	// Page Break
	if 'vh(0) do VHDG0 quit:VFMQ
	do VSTAT
	quit

VBREAK	//
	type Public Number VD(),vh(),VH0,vs(),VT()
	quit:'VT(1)
	type Public String vc1,vovc1
	type Number vb1
	set (vb1)=0
	quit

VSTAT	// Data field statistics
	type Public Number VRWOPT(),VT()
	type Public String VSTATS

	set VT(1)=VT(1)+1
	quit


VHDG0	// Page Header
	type Public Number ER,IOSL,vcrt,verror,VFMQ,vh(),VLC,VNEWHDR,VPN,VRG,VRWOPT()
	type public String %MSKD,%TIM,A,A(),ACN,AMT,AVG,BAL,CID,CIFL(),CIFQ(),CLS,CNT,COMMON(),CONAM,COUNT,DES,GRP,HEAD,LC(),LINE,MCLS,MIN(),ODESC,OGRP,OPT,OTYP(),OTYPE,OTYPE(),PGM,PTCNT,PTVAL,Q,QCIF(),QTOT(),QTYPE(),RAT,RID,RN,SCNT,START(),STAT,SVAL,TBAL,TCNT,TOT(),TPGM,TVAL,TYPE,VAL,VAL1,VL,X,vc1,vc2,vc3,vovc1,vrundate,vsysdate
	type Number PN,V,VO
	if VRWOPT("NOHDR").get() quit			// Skip page header
	set vh(0)=1,VRG=0
	if VL'="" do VOM
	if vcrt,VPN>0 do { quit:VFMQ!'VNEWHDR
		type Number PN,X
		set VL=""
		for X=VLC+1:1:IOSL do VOM
		set PN=VPN
		do ^DBSRWBR(2)
		set VLC=0
		quit:VFMQ
		if VNEWHDR write $$CLEARXY^%TRMVT
		else  set VLC=VLC+17,VPN=VPN+1
		}

	set ER=0,VPN=VPN+1,VLC=0

	set VL=$E(CONAM,1,45)
	set VL=VL_$J("",100-VL.length())_"Run Date:"
	set VL=VL_$J("",110-VL.length())_$E(vrundate,1,10)
	set VL=VL_$J("",123-VL.length())_$E(%TIM,1,8)
	do VOM
	set VL=RN_"  ("_RID_")"
	set VL=VL_$J("",102-VL.length())_"System:"
	set VL=VL_$J("",110-VL.length())_$E(vsysdate,1,10)
	set VL=VL_$J("",122-VL.length())_"Page:"
	set VL=VL_$J("",128-VL.length())_$J(VPN,3)
	do VOM
	set VL="" do VOM
	do VP1 quit:VFMQ!verror.get()  set V="HOUSEHOLD TYPE: "_HEAD set VL=V
	do VOM
	set VL="                                                  "_"---- Within Sample -----      ----- Type Totals ------      --- % of Total ---"
	do VOM
	set VL="     "_"Type   Group  Description                      Count          Balance        Count          Balance       Count     Balance"
	do VOM
	set VL="===================================================================================================================================="
	do VOM
	set VL="" do VOM
	set VL="" do VOM
	set VL="   "_$J(vc2,6)
	set VL=VL_$J("",12-VL.length())_$E(vc3,1,4)
	do VP2 quit:VFMQ!verror.get()  set V=$E(DES,1,25)
	set VL=VL_$J("",19-VL.length())_V
	do VP3 quit:VFMQ!verror.get()  set V=$J($FN(SCNT,",",0),7)
	set VL=VL_$J("",50-VL.length())_V
	set VL=VL_$J("",59-VL.length())_$J($FN(SVAL,",",0),15)
	set VL=VL_$J("",80-VL.length())_$J($FN(TCNT,",",0),7)
	set VL=VL_$J("",89-VL.length())_$J($FN(TVAL,",",0),15)
	set VL=VL_$J("",109-VL.length())_$J(PTCNT,7,2)
	set VL=VL_$J("",122-VL.length())_$J(PTVAL,6,2)
	do VOM
	set VL="" do VOM
	do VP4 quit:VFMQ!verror.get()  set V=$E(LINE,1,51) set VL="              "_V
	do VOM
	set VL="" do VOM
	set VL="              "_"Type    Group  Description             Ratio (%)     Count      Total Balances    Avg/Household"
	do VOM
	set VL="              "_"-----------------------------------------------------------------------------------------------"
	do VOM
	set VL="" do VOM
	set VL="              "_$E(OTYPE,1,4)
	do VP5 quit:VFMQ!verror.get()  set V=$E(OGRP,1,6)
	set VL=VL_$J("",21-VL.length())_V
	set VL=VL_$J("",29-VL.length())_$E(ODESC,1,25)
	do VP6 quit:VFMQ!verror.get()  set V=$J(RAT,6,2)
	set VL=VL_$J("",56-VL.length())_V
	set VL=VL_$J("",64-VL.length())_$J($FN(CNT,",",0),8)
	set VL=VL_$J("",74-VL.length())_$J($FN(AMT,",",0),18)
	set VL=VL_$J("",94-VL.length())_$J($FN(AVG,",",0),15)
	do VOM

	set VNEWHDR=0
	if vcrt set PN=VPN do ^DBSRWBR(2,1)		// Lock report page heading

	quit


VOM	// Output print line
	type Public Number AUXPTR,vcrt,vlc,VLC,VRG
	type Public String IO,VL

	use IO

	// Advance to a new page
	if 'VLC,'vcrt do {				// Non-CRT device (form feed)
		if 'AUXPTR.get() write $C(12),!
		else  write $$PRNTFF^%TRMVT,!
		set $Y=1
		}

	if vcrt<2 write VL,!				// Output line buffer
	if vcrt set vlc=vlc+1 do VBRSAVE(vlc,VL)	// Save in BROWSER buffer
	set VLC=VLC+1,VL=""				// Reset line buffer
	quit

	// Pre/post-processors

VP1	// Column pre-processor - HOUSEHOLD TYPE: <<HEAD>>

 type public String HHTYP
 type public String DESC,HEAD

 type RecordUHHOLD uhhold=Db.getRecord("UHHOLD","KEY=:HHTYP",1)
 if uhhold.getMode() set DESC=uhhold.desc
 set HEAD=HHTYP_" - "_DESC
	quit

VP2	// Column pre-processor - Variable: DES

	type public String vc2
 type public String DES,TYPE

 set TYPE=vc2

 type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:TYPE",1)
 if proddftd.getMode() set DES=proddftd.des
	quit

VP3	// Column pre-processor - Variable: SCNT

 type public String COMMON(),TOT(),TYPE 
 type public Number PTCNT,PTVAL,SCNT,SVAL,TCNT,TVAL

 set SCNT=(COMMON(TYPE,TYPE).get()).piece("|",1)
 set SVAL=(COMMON(TYPE,TYPE).get()).piece("|",2)
 set TCNT=(TOT(TYPE).get()).piece("|",1)
 set TVAL=(TOT(TYPE).get()).piece("|",2)

 set PTCNT=0

 if SCNT,TCNT set PTCNT=(SCNT/TCNT)*100

 set PTVAL=0

 if SVAL,TVAL set PTVAL=(SVAL/TVAL)*100
	quit

VP4	// Column pre-processor - Variable: LINE

 type public Number SCNT
 type public String LINE,LINE1,TYPE
 type Number LEN
 type String LFT

 set LINE1.piece("-",120)=""

 if SCNT.isNull() set SCNT=0

 // PRODUCT RATIOS (BASED ON ~p1 HOUSEHOLD~p2 OWNING TYPE ~p3)
 set LINE=$$^MSG(6480,SCNT,$S(SCNT=1:"",1:"S"),TYPE)

 set LEN=LINE.length(),LFT=(95-LEN)/2,LFT=LINE1.extract(1,LFT)

 set LINE=LFT_LINE_LINE1.extract(1,(95-(LINE.length()+LFT.length())))
	quit

VP5	// Column pre-processor - Variable: OGRP

 type public String CLS,OGRP,ODESC

 set G="",OGRP="",ODESC=""
 for CLS="D","L" do { quit:OGRP'=""
      type ResultSet rs=Db.select("GRP,TYPE","ACN","CLS=:CLS")
      while rs.next() do {
      	set G=rs.getCol("GRP")
     	set OTYPE=rs.getCol("TYPE")
        set OGRP=G
        if OGRP.isNull() quit
        type RecordPRODCTL prodctl1=Db.getRecord("PRODCTL","TYPE=:OTYPE",1)
        if prodctl1.getMode() set ODESC=prodctl1.des
        }
 }
	quit

VP6	// Column pre-processor - Variable: RAT

 type public String COMMON(),OTYPE,TYPE
 type public Number AMT,AVG,CNT,RAT,TCOUNT

 set RAT=0
 set CNT=(COMMON(TYPE,OTYPE).get()).piece("|",1)
 set AMT=(COMMON(TYPE,OTYPE).get()).piece("|",2)
 set TCOUNT=(COMMON(TYPE,TYPE).get()).piece("|",1)

 if TCOUNT,CNT set RAT=(CNT/TCOUNT)*100

 set AVG=0

 if AMT,CNT set AVG=AMT/CNT
	quit
