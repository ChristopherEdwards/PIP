EFTPAY2	//Private;Incoming Foreign Payment Order Creation & Maintenance
	//Copyright(c)2002 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/07/02 11:12:56 - RICKARDSC
	/*-----------------------------------------------------------------------
	 Origin:	Matt Lessig (Based on routine EFTPAY by Pete Chenard)
	 Description:	Incoming Foreign Payment Order Creation & Maintenance
			This routine is used for the creation and maintenance
			incoming foreign payment orders.
	---- Revision History -------------------------------------------------
	
		09/29/05 - KUMARB - CR 17050
			Converted to PSL.
	*/
	
	do NEW
	
	quit
	
public NEW	// Create a new NDPO

	type Number usrfld
	type String usrdi
	
	set %ProcessMode=0,usrfld=51,usrdi="UIDADD"
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")
	
	do INIT(.eftpay)
	
	quit
	
public UPD	// Modify Payment Order

	type String EFTQRY
	
	set %ProcessMode=1,EFTQRY="[EFTPAY]STATUS=A AND [EFTPAY]EFTTYPE=<<SRC>>"
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")
	
	do INIT(.eftpay)
	
	quit
	
public APP	// Approve Payment Order

	type Number usrfld
	type String EFTQRY,usrdi
	
	set %ProcessMode=1,usrfld=54,usrdi="UIDAPP"
	set EFTQRY="[EFTPAY]STATUS=A,AP AND [EFTPAY]EFTTYPE=<<SRC>>"
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")

	do INIT(.eftpay)
	
	quit
	
public ACC	// Accept/Process Payment Order

	type Number usrfld
	type String EFTQRY,usrdi
	
	set %ProcessMode=2,usrfld=55,usrdi="UIDACC"
	set EFTQRY="[EFTPAY]STATUS=AP AND [EFTPAY]EFTTYPE=<<SRC>>"
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")
	
	do INIT(.eftpay)
	
	quit
	
public DIS	// Display Payment Order

	type String EFTQRY
	
	set %ProcessMode=2,EFTQRY="[EFTPAY]EFTTYPE=<<SRC>>"
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")
	
	do INIT(.eftpay)
	
	quit
	
public DEL	// Delete Payment Order

	type String EFTQRY
	
	set %ProcessMode=3,EFTQRY="[EFTPAY]STATUS=A,M,AP AND [EFTPAY]EFTTYPE=<<SRC>>"

	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")

	do INIT(.eftpay)

	quit
	
public CAN	// Cancel/Reverse (Return) Payment Order

	type String EFTQRY

	set %ProcessMode=2,EFTQRY="[EFTPAY]STATUS=C AND [EFTPAY]EFTTYPE=<<SRC>>"
	
	type RecordEFTPAY eftpay=Class.new("RecordEFTPAY")

	do INIT(.eftpay)

	quit
	
INIT(RecordEFTPAY eftpay)	// Initialize variables

	type public Boolean CANCEL,DELETE,NDPOB,NDPOH,RETURN,REVERSE
	type public String EFTQRY,SRC

	type Boolean APPFLG,ACCFLG,gl,ogl
	type Number CC,CID,DCC,IO,MSG,MSGSTR,SEQ,SEQQRY,SOURCE
	type String GLQRY,REFNO,SID,SIDLNK,VFMQ
	
	//query to exclude header GLs
	set GLQRY="{GLAD.TYPE}'=""H"""
	
	set SOURCE=3,REFNO=""
	set MSG=1,MSGSTR=5
	set DELETE=%ProcessMode=3
	
	if 'CANCEL.get() set CANCEL=0
	if 'REVERSE.get() set REVERSE=0
	if 'RETURN.get() set RETURN=0
	
	// Query for sequence field
	if (%ProcessMode'=0) set SEQQRY=EFTQRY_" AND [EFTPAY]CID=<<CID>>"
	
	do QUERY(.eftpay)
	
	if VFMQ["Q" do VER(.eftpay) quit
	
	do SCREEN(.eftpay)
	
	do VER(.eftpay)

	quit
	
QUERY(RecordEFTPAY eftpay)	// Set up prompts in %TAB

	type public Boolean gl,ogl
	type public Number CID,DCC,GL,SEQ
	type public String %NOPRMT,IO,REFNO,VFMQ
	
	type String %READ,%TAB()
	
	set (CID,GL,DCC,REFNO,SEQ)=""
	set %TAB("CID")=".CID1/XPP=D CIDPP^EFTPAY2"
	set %TAB("GL")=".GL1/TBL=[GLAD]:QUERY GLQRY/XPP=D GLPP^EFTPAY2"
	set %TAB("DCC")="[EFTPAY]CC/TBL=[UTBLCCNTR]"
	
	if (%ProcessMode'=0) do {
		set %TAB("REFNO")="[EFTPAY]REFNO/TBL=""[EFTREF]REFNO,[EFTREF]CID,[EFTREF]SEQ,[EFTPAY]EFD,[EFTPAY]AMOUNT,[EFTPAY]CRCD,[EFTPAY]STATUS:QU EFTQRY""/XPP=D REFNOPP^EFTPAY2"
		set %TAB("SEQ")="[EFTPAY]SEQ/TBL=""[EFTPAY]SEQ,[EFTREF]REFNO,CID,[EFTPAY]EFD,AMOUNT,CRCD,STATUS:QU SEQQRY""/XPP=D POST^EFTPAY2"
		}
	
	if (%ProcessMode=2) set %TAB("IO")=$$IO^SCATAB($I)
	
	if '%ProcessMode set %READ="@@%FN,,,CID,GL,DCC/REQ"
	else  set %READ="@@%FN,,,REFNO,CID,GL,SEQ"
	
	if (%ProcessMode=2) set %READ=%READ_",,IO#1"
	
	set %NOPRMT="C"
	do ^UTLREAD
	if "Q"[VFMQ quit
	
	if GL'="" set CID=GL,(gl,ogl)=1
	else  set (gl,ogl)=0
	
	if (%ProcessMode=2),IO'=$I do OPEN^SCAIO
	
	quit
	

CIDPP	// Account Number Post-Processor

	type public Boolean ER,ogl
	type public Number GL,%OSAVE
	type public String X

	type Boolean %EXT
	type Number CID
	
	if X.isNull() quit
	
	set GL=GL.get()
		
	// Not permitted to enter both a customer and a G/L number
	if 'GL.isNull() do Runtime.setErrMSG("EFTPAY",2045) quit
	
	do DEFAULT^DBSMACRO("@GL","")
	do DISPLAY^DBSMACRO("@GL","")
	
	set %EXT=1
	do ^UACN quit:ER
	 
	// ~p1 Not a valid account number
	if '+CID do Runtime.setErrMSG("EFTPAY",3058,CID) quit
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
	// Account ~p1 is closed
	if dep.stat=4 do Runtime.setErrMSG("DEP",6050,CID) quit
	
	// Account ~p1 not permitted for foreign payments
	if dep.eftdeb=0 do Runtime.setErrMSG("DEP",7664,CID) quit
	if dep.eftdeb=1 do { quit
		if CID.length(),%OSAVE do GOTO^DBSMACRO("@SEQ")
		if CID.length(),'%OSAVE do GOTO^DBSMACRO("END")
		}
	
	type RecordPRODDFTD proddftd=Db.getRecord("PRODDFTD","TYPE=:dep.type")
	// Product ~p1 not permitted for foreign payments
	if proddftd.eftdeb=0 do Runtime.setErrMSG("PRODDFTD",7679,proddftd.type) quit
	if proddftd.eftdeb=1 do { quit
		if CID.length(),%OSAVE do GOTO^DBSMACRO("@SEQ")
		if CID.length(),'%OSAVE do GOTO^DBSMACRO("END")
		}
	
	// Permisson for foreign payments on product ~p1 not defined
	 do Runtime.setErrMSG("PRODDFTD",7678,proddftd.type) quit:ER
	 
	 quit

GLPP	// Post-processor for G/L Account

	type public Boolean ER,ogl
	type public Number CID,GL
	type public String X

	if X.isNull() set (GL,ogl)="" 
	
	// Enter either a customer account or G/L account
	if X.isNull(),CID.isNull() do Runtime.setErrMSG("EFTPAY",3456) quit
	
	if X.isNull() quit
	
	set CID=X,ogl=1
	
	quit
	

POST	// Post-processor for Sequence

	type public Boolean CANCEL,DELETE,ER,NDPOB,NDPOH,REVERSE
	type public Number %OSAVE,CID,GL,SEQ
	type public String X
	
	// Must enter Sequence
	if X.isNull(),('CID.isNull()!'GL.isNull()) do Runtime.setErrMSG("EFTPAY","7672") quit:ER
	
	// Record not found
	type RecordEFTPAY eftpay=Db.getRecord("EFTPAY","CID=:CID,SEQ=:X",1)
	if 'eftpay.getMode() quit
	
	// Account ~p1 Sequence ~p2 is for a G/L account 
	if eftpay.ttype=3,GL.isNull() do Runtime.setErrMSG("EFTPAY","7666",CID_"~"_X) quit:ER

	// Account ~p1 Sequence ~p2 is for a customer account
	if eftpay.ttype=0,'GL.isNull() do Runtime.setErrMSG("EFTPAY","7665",CID_"~"_X) quit:ER
	
	if 'NDPOB.get() set NDPOB=0
	if 'NDPOH.get() set NDPOH=0
	
	type RecordSTBLESTAT estat=Db.getRecord("STBLESTAT","STATUS=:eftpay.status")
		
	// Branch cannot delete record with a status of ~p1
	if NDPOB,DELETE,(eftpay.status'="A") do Runtime.setErrMSG("EFTPAY","7667",estat.desc) quit
	
	// Headquarters cannot delete record with a status of ~p1
	if NDPOH,DELETE,(eftpay.status'="AP"),(eftpay.status'="A") do Runtime.setErrMSG("EFTPAY","7667",estat.desc) quit
	
	// Cannot delete EFT record with a status of ~p1
	if 'NDPOH,DELETE,(eftpay.status'="A") do Runtime.setErrMSG("EFTPAY","7667",estat.desc) quit
		
	// Cannot modify EFT record with a status of ~p1
	if (%OSAVE=1),'(eftpay.status'="A"!(eftpay.status'="Y")) do Runtime.setErrMSG("EFTPAY","7667",estat.desc) quit
	
	if (CANCEL)!(REVERSE) do { quit:ER
		// Not permitted to return/reverse payment with a status of ~p1
		I (eftpay.status'="C") do Runtime.setErrMSG("EFTPAY","7667",estat.desc) quit
		}
	
	do UIDPP(CID,X)
	if ER quit
	
	set SEQ=X
	
	quit
	
REFNOPP	// Post processor for Transaction Reference Number 

	type public Boolean ER
	type public Number CID,GL,SEQ
	type public String I(),X
	
	if X.isNull() quit
	set GL=""
	do DEFAULT^DBSMACRO("@GL","") 
	do DISPLAY^DBSMACRO("@GL","") 
	
	type RecordEFTREF eftref=Db.getRecord("EFTREF","REFNO=:X",1)
	
	// Transaction reference number does not exist
	if 'eftref.getMode() do Runtime.setErrMSG("EFTREF","7680") quit:ER

	// Record locked by another user
	lock +EFTREF(X):3 else  do Runtime.setErrMSG("EFTREF","2333") quit:ER
	 
	set CID=eftref.cid
	set SEQ=eftref.seq
	do UIDPP(CID,SEQ) quit:ER
	
	if Db.isDefined("GLAD","ACN=:CID") set GL=CID
	else  if Db.isDefined("ACN","CID=:CID") set GL=CID
	 
	type String INTBL
	set INTBL="" 
	if I(3).data() set INTBL=$$VER^DBSTBL(I(3),X,"T")
	if INTBL.isNull() quit
	 
	do GOTO^DBSMACRO("END")
	
	quit 
	
UIDPP(Number CID,Number SEQ)		// User ID validation

	type public Boolean APPFLG,ER
	
	type RecordEFTPAY eftpay=Db.getRecord("EFTPAY","CID=:CID,SEQ=:SEQ",1)
	if 'eftpay.getMode() quit
	
	if 'APPFLG.get() set APPFLG=0
	if APPFLG do { quit:ER
		// User who added payment order cannot approve it
		if eftpay.uidadd=%UserID do Runtime.setErrMSG("EFTPAY",7751) quit
		}
	
	quit
	
SCREEN(RecordEFTPAY eftpay)	// Screen

	type public Boolean ACCFLG,ER,gl,NDPOB,NDPOH,ogl
	type public Number CID,CC,DCC,SEQ
	type public String REFNO,SID,SIDLNK,SOURCE,SRC,VFMQ

	type Number X
	type String INSTCD(),INSTMSG(),MSG,SCRHQ,SNDCRCD,SNDRCHG,TXT

	set NDPOB=NDPOB.get(),NDPOH=NDPOH.get(),ACCFLG=ACCFLG.get()
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
	type RecordCTBLEFTTYPE eftctbl=Db.getRecord("CTBLEFTTYPE","KEY=:SRC")
	
	// Default values for new incoming foreign payments
	if '%ProcessMode do {
		type String TEMP
		set TEMP="EFTPAY|"_CID_"|"_SEQ.get()
		
		do ^TRREFNO(SOURCE,.REFNO,TEMP)
		
		if ogl set DCC=CC,eftpay.cc=CC
		else  set eftpay.crcd=dep.crcd
		
		set eftpay.status="A"
		set eftpay.met=eftctbl.paymetdft		
		set eftpay.amttyp=1
		set eftpay.efttype=SRC
		set eftpay.feetype=eftctbl.feemetdft
		set eftpay.refno=REFNO
		set eftpay.brcd=DCC
		set eftpay.datecre=%SystemDate		
		set eftpay.origin=1
		set eftpay.feeamt=0
		set eftpay.feeamt2=0
		set eftpay.pri2="N"
		set eftpay.ccode=eftctbl.ccode
		set eftpay.intext=1
		set eftpay.ttype=$S(ogl:3,1:0)
		
		if ogl quit

		set eftpay.brcd=dep.boo
		set eftpay.cc=dep.cc
		set eftpay.acn=dep.acn	// EFTPAY.ACN
		}
	
	// Determine screen(s)
	set SCRHQ=eftctbl.scrhq
	if SCRHQ="" set SCRHQ="INTRECHQ00" 
	set (SID,SIDLNK)=SCRHQ
	
	// Record locked by another user
	if %ProcessMode lock +EFTPAY(CID,SEQ):3 else  set VFMQ="Q" do Runtime.setErrMSG("EFTPAY","2333") quit:ER

	if REFNO.get().isNull() set REFNO=eftpay.refno
	
	if %ProcessMode do {
		set eftpay=Db.getRecord("EFTPAY","CID=:CID,SEQ=:SEQ")
		
		if eftpay.ttype.isNull(),(gl!ogl) set eftpay.ttype=3
		
		if eftpay.freeptr.isNull() quit
		
		// Load SWIFT instruction codes into INSTCD and INSTMSG arrays.
		set TXT=$$MULT2^SWIFTCDI("IN",eftpay.freeptr,"23E")
		for X=1:1 set MSG=TXT.piece($C(13,10),X)  quit:MSG=""  set INSTCD(X)=MSG.piece("/",1),INSTMSG(X)=MSG.piece("/",2)
		
		// Load Sender's Charges into sender charges variables.
		// Amounts are stored in ^SWFREE in 12345,67 format.
		set TXT=$$MULT2^SWIFTCDI("IN",eftpay.freeptr,"71F")
		for X=1:1 set MSG=TXT.piece($C(13,10),X) do { quit:MSG=""
			set SNDCRCD="SNDCRCD"_X
			set SNDRCHG="SNDRCHG"_X
			set @(SNDCRCD)=MSG.extract(1,3)
			set @(SNDRCHG)=$$INT^%ZM(MSG.extract(4,20),"$",",.",2)
			}
		}
	
	do DRV^USID(%ProcessMode,SID,.eftpay,.dep)
	
	quit
	
VER(RecordEFTPAY eftpay)	//

	type public Boolean ACCFLG,APPFLG,CANCEL,ER,REVERSE
	type public Number CID,SEQ
	type public String VFMQ
	
	type Boolean INTTRN

	if 'APPFLG.get() set APPFLG=0
	if 'ACCFLG.get() set ACCFLG=0
	if (%ProcessMode=2&'CANCEL&'REVERSE&'ACCFLG)!(%ProcessMode=4) do { do END quit
		if ('CID.get())!('SEQ.get()) quit
		if eftpay.status'="RET" quit
		do RTNSCN(2,.eftpay)
		}
	
	//load from disk
	if (APPFLG)!(ACCFLG)!(CANCEL)!(REVERSE) do {
		if ('CID.get())!('SEQ.get()) quit
		set eftpay=Db.getRecord("EFTPAY","CID=:CID,SEQ=:SEQ",1)
		set VFMQ="F"
		}
	
	if (VFMQ="Q") do END quit
	do FILE(.eftpay)
	if ER quit
	
	if (VFMQ="Q") do END quit
	
	set INTTRN=eftpay.inttrn
	do END quit
	
FILE(RecordEFTPAY eftpay)	// File data, and in some cases prompt user for response.

	type public Boolean ACCFLG,APPFLG,CANCEL,DELETE,ER,NDPOH,REVERSE
	type public Number CID,SEQ
	type public String SID,SIDLNK,SRC,usrdi,VFMQ

	type Number OPT,ZSEQ
	type String EFTTYPE
	
	set %ProcessMode=$S(CANCEL:2,REVERSE:2,1:%ProcessMode)
	
	if usrdi.exists() set eftpay.@usrdi=%UserID
	
	// Approval by Headquarters
	if 'APPFLG.get() set APPFLG=0
	if (%ProcessMode=1),(NDPOH),('DELETE),(APPFLG) do { quit:ER
		set OPT=$$^DBSMBAR(151)
		if OPT'=1 set VFMQ="Q" quit
		// Must view final screen prior to approval
		if SID'=$$LASTSID(SIDLNK) set OPT=0 do Runtime.setErrMSG("EFTPAY",7674) quit
		set eftpay.status="AP"
		}
	
	// Accept/Process by HQ
	if 'ACCFLG.get() set ACCFLG=0
	if (%ProcessMode=2),(NDPOH),('DELETE),(ACCFLG) do { quit:ER
		set OPT=$$^DBSMBAR(152)
		if OPT'=1 set VFMQ="Q" quit
		// Must view final screen prior to acceptance
		if SID'=$$LASTSID(SIDLNK) set OPT=0 do Runtime.setErrMSG("EFTPAY",7673) quit
		}
	
	// Cancellation/Reversal by HQ
	if (CANCEL)!(REVERSE) do { quit:ER
		if (REVERSE) set OPT=$$^DBSMBAR(154)
		else  set OPT=$$^DBSMBAR(156)
		if OPT'=1 set VFMQ="Q" quit
		// Must view final screen prior to reversal
		if SID'=$$LASTSID(SIDLNK) set OPT=0 do Runtime.setErrMSG("EFTPAY",7749) quit
		if REVERSE quit
		do RTNSCN(1,.eftpay)
		}
	
	// Deletion
	if DELETE do { quit:OPT'=1
		set OPT=$$^DBSMBAR(149)
		if OPT'=1 set VFMQ="Q" quit
		set eftpay.status="D"
		set %ProcessMode=1
		}
	
	// process payment
	if (ACCFLG),(%ProcessMode=2),(OPT.get()) do PROC(.eftpay)  quit
	// process reversals
	if (CANCEL)!(REVERSE) do PROCREV  quit
	
	set EFTTYPE=SRC
	set eftpay.lchdt=%SystemDate
	
	// Get next sequence number
	if '%ProcessMode do {  quit:ER.get()
		type RecordEFTPAY1 eftpay1=Db.getRecord("EFTPAY1","CID=:CID",1)
		if 'eftpay1.getMode() set (SEQ,ZSEQ)=1
		else  set (SEQ,ZSEQ)=eftpay1.seq+1
		}
	
	do RPCFILE(%ProcessMode,.eftpay)
	
	do PROC(.eftpay) quit
	
PROC(RecordEFTPAY eftpay)	// Individual processing of incoming payment order.
	
	type Number BALAVL,MINBAL,OPT,SAVCID
	
	type public Boolean ACCFLG,CANCEL,ER,REVERSE
	type public Number CID,SEQ
	type public String VFMQ
	
	if (VFMQ="Q")!('ACCFLG) quit
	
	// Check available balance for vostro accounts (DDA)
	if (eftpay.intext=0),('CANCEL),('REVERSE) do { quit:ER
		set SAVCID=CID
		set CID=eftpay.sendnos
		
		// Determine vostro account available balance
		set BALAVL=$$BALAVL^DEPCDI(CID,0,0)
		if ER quit
		
		// Insufficient funds in loro - not processed
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
		set MINBAL=dep.minbal
		if (BALAVL-MINBAL)<eftpay.amount do Runtime.setErrMSG("EFTPAY",8392) quit
		
		set CID=SAVCID
		}
	
	// Process the foreign payment
	set OPT=$S(CANCEL:1,REVERSE:2,1:0)
	do ^EFTNDPO(CID,SEQ,OPT,1,0)
	
	quit
	 
LASTSID(String SIDLNK)	// Determine the last screen in a linkage
	
	type Number LOOP
	type String LASTSID,NEXTSID,RECORD
	
	type RecordDBTBL2 dbtbl2=Db.getRecord("DBTBL2","LIBS='SYSDEV',SID=:SIDLNK",1)
	
	if dbtbl2.lnk1.isNull() quit SIDLNK
	
	set RECORD=dbtbl2.lnk1_"|"_dbtbl2.lnk2_"|"_dbtbl2.lnk3_"|"_dbtbl2.lnk4_"|"_dbtbl2.lnk5_"|"
	set RECORD=RECORD_dbtbl2.lnk6_"|"_dbtbl2.lnk7_"|"_dbtbl2.lnk8_"|"_dbtbl2.lnk9_"|"_dbtbl2.lnk10_"|"
	set RECORD=RECORD_dbtbl2.lnk11_"|"_dbtbl2.lnk12_"|"_dbtbl2.lnk13_"|"_dbtbl2.lnk14_"|"_dbtbl2.lnk15_"|"
	set RECORD=RECORD_dbtbl2.lnk16_"|"_dbtbl2.lnk17_"|"_dbtbl2.lnk18_"|"_dbtbl2.lnk19_"|"_dbtbl2.lnk20_"|"
	set RECORD=RECORD_dbtbl2.lnk21_"|"_dbtbl2.lnk22_"|"_dbtbl2.lnk23_"|"_dbtbl2.lnk24_"|"_dbtbl2.lnk25_"|"
	set RECORD=RECORD_dbtbl2.lnk26_"|"_dbtbl2.lnk27_"|"_dbtbl2.lnk28

	set LOOP=1,NEXTSID=""

	for  do {  quit:NEXTSID.isNull()
		set NEXTSID=RECORD.piece("|",LOOP)
		if NEXTSID.isNull() quit
		set LASTSID=NEXTSID
		set LOOP=LOOP+1
		}
	
	quit LASTSID
	
	
PROCREV	// Individual processing of reversals.

	type Number OPT
	
	type public Boolean CANCEL,RETURN,REVERSE
	type public Number CID,SEQ
	type public String VFMQ
	
	if VFMQ="Q" quit
	
	// Process the foreign payment
	set OPT=$S(RETURN:3,REVERSE:2,CANCEL:1,1:0)
	do ^EFTNDPO(CID,SEQ,OPT,1,0)
	
	quit
	
RTNSCN(Number %ProcessMode,RecordEFTPAY eftpay)	// Return Payment Screen

	type Number OPT,RETURN
	type String SID
	
	type public Number CID
	type public String VFMQ
	
	if %ProcessMode=2 set OPT=$$^DBSMBAR(1010) if OPT'=1 set VFMQ="Q" quit
	if %ProcessMode=1 set RETURN=1
	
	type RecordDEP dep=Db.getRecord("DEP","CID=:CID",1)
	
	set SID="INTRTNHQ10"
	do DRV^USID(%ProcessMode,SID,.eftpay,.dep)

	quit
	
RTNFEE(Number RTNFEE,String RTNCCY,RecordEFTPAY eftpay)	// Return Fee Processing

	type Number AAMT,ACNF,AFEE,ARTE,CNVAMT
	type String CNVCRCD
	type public Boolean ER
	type public String X

	if X.isNull() quit
		
	// Calculate return fee and return currency
	set eftpay.feetype=X
	do XEFTFCALC^EFTFCALC(.eftpay,.RTNFEE,.RTNCCY,.CNVAMT,.CNVCRCD,.AAMT,.ARTE,.AFEE,.ACNF)
	if ER quit
	
	set RTNFEE=RTNFEE.roundCur(RTNCCY)
	set eftpay.rtnfeeamt=RTNFEE
	set eftpay.rtnfeecrcd=RTNCCY
	
	quit
	
END	// End processing.

	type public Boolean APPFLG,CANCEL,DELETE,ER,RETURN,REVERSE
	type public Number CID,INTTRN,OPT,SEQ
	type public String RM,VFMQ
	
	set OPT=OPT.get()
	if (ER.get())!(%ProcessMode=2)!(%ProcessMode=4),'CANCEL,'REVERSE,(INTTRN.get()),(OPT=1) do NEW^EFTPAY1 quit
	if (ER.get())!(%ProcessMode=2)!(%ProcessMode=4),'CANCEL,'REVERSE quit 
	
	if VFMQ="Q" do {
		// Foreign payment for account ~p1 not returned
		if RETURN set RM=$$^MSG(8642,CID.get()) quit
		// Foreign payment for account ~p1 not reversed
		if REVERSE set RM=$$^MSG(7746,CID.get()) quit
		// Foreign payment for account ~p1 not cancelled
		if CANCEL set RM=$$^MSG(7742,CID.get()) quit
		// Foreign payment for account ~p1 not deleted
		if DELETE set RM=$$^MSG(7744,CID.get()) quit
		// Foreign payment for account ~p1 not created
		if %ProcessMode=0 set RM=$$^MSG(7743,CID.get()) quit
		// Foreign payment for account ~p1 not approved
		if APPFLG set RM=$$^MSG(7741,CID.get()) quit
		// Foreign payment for account ~p1 not modified
		set RM=$$^MSG(7745,CID.get())
		}
	else  do {
		// Foreign payment for account ~p1 returned
		if RETURN set RM=$$^MSG(8641,CID.get()) quit
		// Foreign payment for account ~p1 reversed
		if REVERSE set RM=$$^MSG(7711,CID.get()) quit
		// Foreign payment for account ~p1 cancelled
		if CANCEL set RM=$$^MSG(7707,CID.get()) quit
		// Foreign payment for account ~p1 deleted
		if DELETE set RM=$$^MSG(7709,CID.get()) quit
		// Foreign payment for account ~p1 Sequence ~p2 created
		if %ProcessMode=0 set RM=$$^MSG(7708,$G(CID)_" "_$$^MSG(6742,SEQ.get())) quit
		// Foreign payment for account ~p1 approved
		if APPFLG set RM=$$^MSG(7706,CID.get()) quit
		// Foreign payment for account ~p1 modified
		set RM=$$^MSG(7710,$G(CID))
		}
	
	set ER="W"
	
	quit
	
RPCFILE(Number %ProcessMode,RecordEFTPAY eftpay)	// Remote Procedure Call

	do eftpay.save()
	
	quit

vSIG()	quit "60211^8835^Upendra Sahoo^17834"	// Signature - LTD^TIME^USER^SIZE
