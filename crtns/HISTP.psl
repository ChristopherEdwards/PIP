HISTP	// History Inquiry Utility Routine
	/*
	   ORIG:  Kathie Jalbuena (7070) - 08/03/87

	  ----Revision History --------------------------------------------------
	   05/26/05 - SWARNALATHA P - 16048
	   	      Modified the HISTPIECE section to pass the third 
	   	      parameter in to the DB.getRecord() method, so that 
	   	      the error will not be thrown if the record does 
	   	      not exist."
	   
	   07/15/02 - TELIV - 49794
		      Converting from M to PSL

	   05/10/02 - Allan Mattson - 49110
	              Modified function $$NACRYTD to remove the logic that
	              added amounts found in history for transaction code
	              specified by DTYPE.DRADIE or LTYPE.DRADII to the
	              computed amount.

	              Removed pre-2001 revision history.

	   12/12/01 - HALPINJ - 45719
	              Added code to NACRYTD to include UNCACR in the calculation
		      of NACRYTD.

	   11/13/01 - HALPINJ - 45719
	              Added code to NACRYTD to include NEGACRUN and NEGIYTD in
	              the calculation of NACRYTD.

	   08/14/01 - SCHWARTZC - 46701
	              Modified to use $%CurrentDateIST0^UHFETCH to retrieve HIST0 entries
	              instead of direct global references to ^HIST0.

	   07/26/00 - YENDAPALLIS - 41250
	              Added code in HISTPIECE section to avoid an undefined
	              error by quitting when JD is undefined

	   07/18/00 - KINI - 36760
	              Modified HISTPIECE section to avoid undefined error when
	              TJD is not equals to the Tax or Fin year-end.

	   06/23/00 - KINI - 40277
	              Modified HISTPIECE section to consider Tax Year-end.

	   03/02/00 - KINI - 35437
	              Modified HISTPIECE to recognize Financial Year-end defined
	              in CUVAR to calculate accrual amount. All references of
	              the Calendar Year-end were removed from the routine.

	----------------------------------------------------------------------

	*/

VP4	// [SYSDEV,HIST]TAMT

	if +VO=+PRIN set PRIN=""
	if +VO=+INT,CLS="D" set INT=""

	quit


VP6	// [SYSDEV,HIST]PRIN

	// ~p1 Principal
	if V'="",(V'?1" "." ") set V=$$^MSG(3665,V)
	quit


VP8	// [SYSDEV,HIST]INT

	// ~p1 Interest
	if V'="",(V'?1" "." ") set V=$$^MSG(3664,V)
	quit

VP13	//
	type RecordACN acn=Db.getRecord("ACN","CID=:XCID")
	set NAM=acn.lnm
	quit

VP14	//
	set HPTD=$S(CLS="L":"Paid",1:"    ")
 	quit


VP15	// Report Pre-Processor

	type RecordSTBLGLDESCD stbld
	type RecordSTBLGLDESCL stbll

	// Record not on file
	if 'Db.isDefined("ACN","CID=:CID") set ER=1,ET="RECNOF" quit

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Product Class
	set CLS=acn.cls

	if CLS="L" for I=4:1:15 do {
		set stbll=Db.getRecord("STBLGLDESCL","KEY=:I")
		set GLDESC(CLS,I)=stbll.sdesc
		}

	if CLS="D" for I=4:1:15 do {
                set stbld=Db.getRecord("STBLGLDESCD","KEY=:I")
                set GLDESC(CLS,I)=stbld.sdesc
                }

	// Account History Inquiry
	set RN=$$^MSG(3663)
	set HISTPGM=$P(PGM,"^",2)
	set (CLS,SPR)=""
	quit


VTAMT7	// Piece 7 of TAMT

	if GRP="ESC" set V="" set PD(7)=""
	quit


FMCMT	// File maintenance comment

	set (FMD1,FMD2,FMD3,FMD4,FMD5,FMD6,FMD7,FMD8,FMD9,FMD10,FMD11,FMD12)=""
	set (TC1,TC2,TC3)=""

	type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ")
	set TCMT=hist.tcmt
	if TCMT'["[" do FMCMT2 quit

	set C=$P(TCMT,"[",1)
	set TCMT="["_$P(TCMT,"[",2)
	set FMD1=$P(TCMT,":",1)_":  "
	if C'=CID set FMD1=C_FMD1

	do TCMT^DEPDI

	set TC1=SPR

	new TCMTP1

	set TCMTP1=$P(TCMT,":",1) 
	set:(TCMTP1["[]")!(TCMTP1[" [")!(TCMTP1["[ ") $P(TCMT,":",1)=""

	new FID,ITEM,LIB,TYP,X
	set FID=$P($P(FMD1,"]",1),"[",2)

	set LIB=%LIBS
	if FID'="",'Db.isDefined("DBTBL1","%LIBS=:LIB,FID=:FID") set $P(TCMT,":",1)=""

	if $P(TCMT,":",1)="" set FMD1=$P(FMD1,":",1)
	set FMD2=FMD1_$P(TCMT,":",1)

	// From: ~p1
	set FMD3=$$^MSG(6728)
	
	// To: ~p1
	set FMD12=$$^MSG(3526)
	
	set FMD4=$P(TCMT,":",2)
	set FMD8=$P(TCMT,":",3)
	set FMD9=$P(TCMT,":",4)

	set ITEM=$P($P(FMD1,"]",2),":",1)

	type RecordDBTBL1D dbtbl1d=Db.getRecord("DBTBL1D","%LIBS=LIB,FID=:FID,DI=:ITEM")
	set TYP=dbtbl1d.typ_$C(9)_dbtbl1d.dec

	quit:TYP=""

	if $E(TYP,1)="L"!(TYP="$") do { quit
		set FMD4=$$EXT^%ZM(FMD4,$P(TYP,$C(9),1),$P(TYP,$C(9),2))
		set FMD8=$$EXT^%ZM(FMD8,$P(TYP,$C(9),1),$P(TYP,$C(9),2))
		}
	quit

FMCMT2	//
	set TCL=23
	set TC1=$E(TCMT,1,TCL) set TC2=$E(TCMT,TCL+1,99)
	if TC2'="" for I=$L(TC1):-1:1 if $E(TC1,I)=" "!($E(TC1,I)=":") set TC1=$E(TC1,1,I) set TC2=$E(TCMT,I+1,99) quit
	set TC1=$E(TCMT,1,TCL)
	set TC2=$E(TCMT,TCL+1,99)
	if TC2'="" for I=$L(TC1):-1:1 if $E(TC1,I)=" "!($E(TC1,I)=":") set TC1=$E(TC1,1,I) set TC2=$E(TCMT,I+1,99) quit
	set TC3=$E(TC2,TCL,99)
	if TC3'="" for I=TCL:-1:1 if $E(TC2,I)=" "!($E(TC2,I)=":") set TC3=$E(TC2,I+1,99) set TC2=$E(TC2,1,I) quit
	quit


L1PP	// Level 1 post processor

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	// Product Type
	set TYPE=acn.type

	// Product Class
	set CLS=acn.cls

	// Product Group
	set GRP=acn.grp

	set K1=""
	quit


L2C(RecordHIST hist)	// Level 2 collating

	set V1C=0

	type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID AND TSEQ>:TSEQ","TSEQ")
	if rs.isEmpty() set V1C=1 set VT(1)=VT(1)+VT(2) quit

	if 'rs.isEmpty(),rs.next() do {
		set TSEQ=rs.getCol(1)
		set hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ")
		}

	quit


L2RA	// Level 2 record access

	type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:TSEQ")

	// Transaction Trace Number
	set TRC=hist.trc set EC=""

	// Transaction Trace Number
	set hist.trc=$J("",8-$L(TRC))_TRC

	// Transaction Amount
	if hist.itc6 set EC=$S(hist.tamt<0:"**",1:"*")

	// Transaction Amount
	if hist.itc12 set EC=$S(hist.tamt<0:"--",1:"-")

	// Transaction Source of Funds
	if hist.itc7 set EC="+"_EC

	// External Transaction Code
	set hist.etc=hist.etc_EC

	// Transaction Amount
	set T=hist.tamt
	for I=4:1:15 do {
		set P(I)="" 
		set PD(I)="" 
		set X=$P(T,"#",I) 
		if X set P(I)=X set PD(I)=GLDESC(CLS,I)
		}
	quit


TSO(V,AR,N,L)	// HIST.TSO - Break into next line(L) if excessively long

	new I

	// Field is null
	if V="" do { quit
		for I=1:1:N set AR(I)=""
		}

	for I=1:1:$L(V,"~") if $P($P(V,"~",I),"#",2)="" set $P(V,"~",I)=""
	if $E(V)="~" for  set V=$E(V,2,$L(V)) quit:$E(V)'="~"

	if 'N quit

	// Not excessively long
	if $L(V)'>L do { quit
		for I=1:1:N set AR(I)=""
		}

	set AR(1)=$P(V,"~",2,99)
	set V=$P(V,"~",1)

	set S=1
	if $L(AR(1))>L do TSOMOV(.S)

	for I=S+1:1:N set AR(I)=""
	quit


TSOMOV(S)	// Move excess length into next subscript

	if S+1'<N quit

	new I
	for I=$L(AR(S),"~"):-1:1 quit:$L($P(AR(S),"~",1,I))<L
	set AR(S+1)=$P(AR(S),"~",I+1,999) set AR(S)=$P(AR(S),"~",1,I)
	set S=S+1 if $L(AR(S))>L,N>S do TSOMOV(.S)
	quit


ACRYTD(CID)	// Calculated Year to Date Acrrual

	new CLS,X
	set X=""

	type RecordACN acn=Db.getRecord("ACN","CID=:CID")

	set CLS=acn.cls

	if CLS="D" do { quit X
		type RecordDEP dep=Db.getRecord("DEP","CID=:CID")
		set X=dep.iytd+(dep.posacr-$$ACRCF(CID,1))
		}
	
	if CLS="L" do { quit X
		type RecordLN ln=Db.getRecord("LN","CID=:CID")
		set X=ln.iytd+(ln.acr-$$ACRCF(CID,1))
		set X=X+ln.intdef
		}
	
	quit ""

ACRPY(CID,PYEAR)	// Previous year total accrual
	
	// [LN]ACRPY AND [DEP]ACRPY Previous year total accrual
	
	quit +$$HISTPIECE(CID,PYEAR,10)

ACRCF(CID,PYEAR)	//  Amount Accrued and Carried Forward
	
	quit +$$HISTPIECE(CID,PYEAR,11)

NACRPY(CID,PYEAR)	// Previous year total accrual
	
	// [LN]ACRPY AND [DEP]ACRPY Previous year total accrual
	
	quit +$$HISTPIECE(CID,PYEAR,12)

NACRCF(CID,PYEAR)	// Amount Accrued and Carried Forward
	
	// Amount Accrued and Carried Forward
	
	quit +$$HISTPIECE(CID,PYEAR,13)

HISTPIECE(CID,PYEAR,PIECE)	//
	/*
	PYEAR represents the number of years in the past. If no 0 level is
	found the amount is assumed to have been 0.
	*/
	
	new DP,FYE,JD,MP,TYE,YEAR,YP

	if '$G(PYEAR) quit ""

	// year portion
	set YP=($$YEAR^SCADAT(%SystemDate,1)-PYEAR)

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	if %SystemDate=cuvar.finye do {

		// Fin year-end
		set FYE=$$EOFY^SCADAT(%SystemDate,1)

		// day portion of Fin year-end
		set DP=$$DAY^SCADAT(FYE,1)

		// month portion of Fin year-end
		set MP=$$MON^SCADAT(FYE,1)

		set JD=$$DSJD^SCADAT(MP_"/"_DP_"/"_YP)
		}
	
	else  do {

		// Tax year-end
		set TYE=$$EOTY^SCADAT(%SystemDate,1)

		// day portion of Tax year-end
		set DP=$$DAY^SCADAT(TYE,1)

		// month portion of Tax year-end
		set MP=$$MON^SCADAT(TYE,1)

		set JD=$$DSJD^SCADAT(MP_"/"_DP_"/"_YP)
		}

	// No finanical or tax year end information.
	if '$G(JD) quit ""

	type RecordHIST0 hist0=Db.getRecord("HIST0","CID=:CID,JD=:JD",1)
	if 'hist0.getMode() quit ""
	/*
	This section is only called by this procedure and only retrieves
	pieces 10 thru 13 from HIST0.
	*/
	
	if PIECE=10 quit hist0.acrat
	if PIECE=11 quit hist0.acrcf
	if PIECE=12 quit hist0.nacrat
	if PIECE=13 quit hist0.nacrcf

	quit ""

NACRYTD(CID,YEAREND)	//Negative accrued YTD

	/*
	   ARGUMENTS:
	       . CID 		Account number   /TYP=N/REQ/MECH=REF
	       . YEAREND 	Year-end flag    /TYP=N/NOREQ/MECH=REF
	    			Note that this argument is no longer used within
	                 	this function.  It remains simply to maintain
	                 	backward compatibility for routines that may
	                 	call into this function.

	*/

	new NACRYTD

	type RecordDEP dep=Db.getRecord("DEP","CID=:CID")

	set NACRYTD=dep.negacr+dep.negiytd+dep.negacrun+dep.uncacr
	set NACRYTD=NACRYTD-$$NACRCF(CID,1)
	quit NACRYTD
 #OPTION ResultClass ON
Public String vSIG()	quit "60046^62192^P.R. Swarnalatha^9027"	// Signature - LTD^TIME^USER^SIZE
