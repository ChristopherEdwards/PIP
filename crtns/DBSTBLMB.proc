DBSTBLMB(Number %ProcessMode, RecordDBTBL1 dbtbl1, String KEY())	// C-S-UTBL Table Maintenance Compiled Program
	// Last compiled:  01/31/2007 11:01 AM - shetyes

	// THIS IS A COMPILED ROUTINE.  Compiled by procedure DBSTBLMA

	// See DBSTBLMA for argument definitions

	type String ERMSG, SCREEN, TABLE

	set SCREEN = dbtbl1.screen
	set TABLE = dbtbl1.fid

	if TABLE = "CTBLEFTTYPE" set ERMSG = $$tm1(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "CTBLINC" set ERMSG = $$tm2(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "CTBLMATATT" set ERMSG = $$tm3(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "CTBLSRVNAM" set ERMSG = $$tm4(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "STBLER" set ERMSG = $$tm5(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "STBLMFVARP" set ERMSG = $$tm6(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "STBLSWIFT" set ERMSG = $$tm7(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "STBLTSD" set ERMSG = $$tm8(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "CRDTYP" set ERMSG = $$tm9(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLABDM" set ERMSG = $$tm10(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLACC" set ERMSG = $$tm11(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLACCRXPO" set ERMSG = $$tm12(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLACHRT" set ERMSG = $$tm13(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLAUDIT" set ERMSG = $$tm14(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLBRCD" set ERMSG = $$tm15(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCHKACT1" set ERMSG = $$tm16(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCHKACT2" set ERMSG = $$tm17(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCHKACT3" set ERMSG = $$tm18(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCHKDEF1" set ERMSG = $$tm19(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCHKDEF2" set ERMSG = $$tm20(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCHKS" set ERMSG = $$tm21(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCNTRYLIM" set ERMSG = $$tm22(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCO" set ERMSG = $$tm23(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCOLCD" set ERMSG = $$tm24(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCOMPLN" set ERMSG = $$tm25(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCORRE" set ERMSG = $$tm26(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLCTFPLN" set ERMSG = $$tm27(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLDELUXEPR" set ERMSG = $$tm28(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLEFTINST" set ERMSG = $$tm29(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLEMPLOYER" set ERMSG = $$tm30(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLESCHEAT" set ERMSG = $$tm31(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLET" set ERMSG = $$tm32(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLEURINT" set ERMSG = $$tm33(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLFEETBL" set ERMSG = $$tm34(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLFPI" set ERMSG = $$tm35(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLICPA" set ERMSG = $$tm36(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLLNSUB" set ERMSG = $$tm37(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLMPS" set ERMSG = $$tm38(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLMPSPROD" set ERMSG = $$tm39(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLOFILIM" set ERMSG = $$tm40(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLPPDPL" set ERMSG = $$tm41(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLRADR" set ERMSG = $$tm42(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLRATE" set ERMSG = $$tm43(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLREGION" set ERMSG = $$tm44(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLRSPDEF" set ERMSG = $$tm45(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLSRC" set ERMSG = $$tm46(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLSRVCAT" set ERMSG = $$tm47(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLSRVLOC" set ERMSG = $$tm48(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLSRVSTAT" set ERMSG = $$tm49(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLSRVTYP" set ERMSG = $$tm50(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLSTMTR" set ERMSG = $$tm51(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLTAPEFMT" set ERMSG = $$tm52(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLWCALC" set ERMSG = $$tm53(%ProcessMode, .KEY(), SCREEN)
	else  if TABLE = "UTBLZTSD" set ERMSG = $$tm54(%ProcessMode, .KEY(), SCREEN)

	quit ERMSG


tm1(%ProcessMode, String KEY(), String SCREEN)  // CTBLEFTTYPE - EFT Payment Types

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordCTBLEFTTYPE fCTBLEFT = Db.getRecord("CTBLEFTTYPE","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fCTBLEFT)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fCTBLEFT.save()
		if %ProcessMode = 3 do Db.delete("CTBLEFTTYPE","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm2(%ProcessMode, String KEY(), String SCREEN)  // CTBLINC - Posting Source Data

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordCTBLINC fUTBL = Db.getRecord("CTBLINC","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBL.save()
		if %ProcessMode = 3 do Db.delete("CTBLINC","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm3(%ProcessMode, String KEY(), String SCREEN)  // CTBLMATATT - Interest/Dividend Matrix Attributes

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordCTBLMATATT fCTBLMAT = Db.getRecord("CTBLMATATT","MATATT = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fCTBLMAT)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fCTBLMAT.save()
		if %ProcessMode = 3 do Db.delete("CTBLMATATT","MATATT = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm4(%ProcessMode, String KEY(), String SCREEN)  // CTBLSRVNAM - Service Names

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordCTBLSRVNAM fCTBLSRV = Db.getRecord("CTBLSRVNAM","SRVCAT = :KEY(1),  SERVICE = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fCTBLSRV)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fCTBLSRV.save()
		if %ProcessMode = 3 do Db.delete("CTBLSRVNAM","SRVCAT = :KEY(1) AND SERVICE = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm5(%ProcessMode, String KEY(), String SCREEN)  // STBLER - Error Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordSTBLER UTBL = Db.getRecord("STBLER","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("STBLER","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm6(%ProcessMode, String KEY(), String SCREEN)  // STBLMFVARP - Miscellaneous Fields - Processing

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordSTBLMFVARP UTBL = Db.getRecord("STBLMFVARP","CLS = :KEY(1),  KEY = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("STBLMFVARP","CLS = :KEY(1) AND KEY = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm7(%ProcessMode, String KEY(), String SCREEN)  // STBLSWIFT - SWIFT Message Format

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordSTBLSWIFT fSTBLSW = Db.getRecord("STBLSWIFT","TYPE = :KEY(1),  SEQ = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fSTBLSW)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fSTBLSW.save()
		if %ProcessMode = 3 do Db.delete("STBLSWIFT","TYPE = :KEY(1) AND SEQ = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm8(%ProcessMode, String KEY(), String SCREEN)  // STBLTSD - Transaction Support Data System Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordSTBLTSD fSTBLTSD = Db.getRecord("STBLTSD","SEQ = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fSTBLTSD)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fSTBLTSD.save()
		if %ProcessMode = 3 do Db.delete("STBLTSD","SEQ = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm9(%ProcessMode, String KEY(), String SCREEN)  // CRDTYP - Card Type

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordCRDTYP fCRDTYP = Db.getRecord("CRDTYP","CARDTYPE = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fCRDTYP)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fCRDTYP.save()
		if %ProcessMode = 3 do Db.delete("CRDTYP","CARDTYPE = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm10(%ProcessMode, String KEY(), String SCREEN)  // UTBLABDM - Asset Class Base User Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLABDM UTBL = Db.getRecord("UTBLABDM","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLABDM","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm11(%ProcessMode, String KEY(), String SCREEN)  // UTBLACC - Asset Category Classification

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLACC fUTBLACC = Db.getRecord("UTBLACC","CLS = :KEY(1),  AC = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLACC)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLACC.save()
		if %ProcessMode = 3 do Db.delete("UTBLACC","CLS = :KEY(1) AND AC = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm12(%ProcessMode, String KEY(), String SCREEN)  // UTBLACCRXPO - Accrual User Exit Definitions

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLACCRXPO fUTBLAC = Db.getRecord("UTBLACCRXPO","ACCRXNAM = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLAC)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLAC.save()
		if %ProcessMode = 3 do Db.delete("UTBLACCRXPO","ACCRXNAM = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm13(%ProcessMode, String KEY(), String SCREEN)  // UTBLACHRT - ACH Routing & Transit Numbers

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLACHRT fUTACHRT = Db.getRecord("UTBLACHRT","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTACHRT)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTACHRT.save()
		if %ProcessMode = 3 do Db.delete("UTBLACHRT","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm14(%ProcessMode, String KEY(), String SCREEN)  // UTBLAUDIT - Auditors Name/Address

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLAUDIT UTBL = Db.getRecord("UTBLAUDIT","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLAUDIT","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm15(%ProcessMode, String KEY(), String SCREEN)  // UTBLBRCD - Branch Codes User Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLBRCD fUTBRCD = Db.getRecord("UTBLBRCD","BRCD = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBRCD)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBRCD.save()
		if %ProcessMode = 3 do Db.delete("UTBLBRCD","BRCD = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm16(%ProcessMode, String KEY(), String SCREEN)  // UTBLCHKACT1 - Check Action Table - Check Type level

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCHKACT1 UTBL = Db.getRecord("UTBLCHKACT1","CHKS = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLCHKACT1","CHKS = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm17(%ProcessMode, String KEY(), String SCREEN)  // UTBLCHKACT2 - Check Action Table - Check Action level

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCHKACT2 UTBL = Db.getRecord("UTBLCHKACT2","CHKS = :KEY(1),  CHKACT = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLCHKACT2","CHKS = :KEY(1) AND CHKACT = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm18(%ProcessMode, String KEY(), String SCREEN)  // UTBLCHKACT3 - Check Action Table-Check Stat/seq level

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCHKACT3 UTBL = Db.getRecord("UTBLCHKACT3","CHKS = :KEY(1),  CHKACT = :KEY(2),  CHKSTS = :KEY(3),  CHKSEQ = :KEY(4)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLCHKACT3","CHKS = :KEY(1) AND CHKACT = :KEY(2) AND CHKSTS = :KEY(3) AND CHKSEQ = :KEY(4)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm19(%ProcessMode, String KEY(), String SCREEN)  // UTBLCHKDEF1 - Check Definition

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCHKDEF1 fCHKDEF1 = Db.getRecord("UTBLCHKDEF1","DEFCHK = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fCHKDEF1)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fCHKDEF1.save()
		if %ProcessMode = 3 do Db.delete("UTBLCHKDEF1","DEFCHK = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm20(%ProcessMode, String KEY(), String SCREEN)  // UTBLCHKDEF2 - Check Line Definition

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCHKDEF2 fCHKDEF2 = Db.getRecord("UTBLCHKDEF2","DEFCHK = :KEY(1),  CHKLIN = :KEY(2),  CHKCOL = :KEY(3)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fCHKDEF2)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fCHKDEF2.save()
		if %ProcessMode = 3 do Db.delete("UTBLCHKDEF2","DEFCHK = :KEY(1) AND CHKLIN = :KEY(2) AND CHKCOL = :KEY(3)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm21(%ProcessMode, String KEY(), String SCREEN)  // UTBLCHKS - Check Types 

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCHKS UTBL = Db.getRecord("UTBLCHKS","CHKS = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLCHKS","CHKS = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm22(%ProcessMode, String KEY(), String SCREEN)  // UTBLCNTRYLIM - Country Limits

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCNTRYLIM fUTBLCNT = Db.getRecord("UTBLCNTRYLIM","CNTRY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLCNT)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLCNT.save()
		if %ProcessMode = 3 do Db.delete("UTBLCNTRYLIM","CNTRY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm23(%ProcessMode, String KEY(), String SCREEN)  // UTBLCO - Company

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCO fUTBLCO = Db.getRecord("UTBLCO","CO = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLCO)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLCO.save()
		if %ProcessMode = 3 do Db.delete("UTBLCO","CO = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm24(%ProcessMode, String KEY(), String SCREEN)  // UTBLCOLCD - Collateral Codes

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCOLCD fUTBLCOL = Db.getRecord("UTBLCOLCD","GRP = :KEY(1),  KEY = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLCOL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLCOL.save()
		if %ProcessMode = 3 do Db.delete("UTBLCOLCD","GRP = :KEY(1) AND KEY = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm25(%ProcessMode, String KEY(), String SCREEN)  // UTBLCOMPLN - Commission Plan User Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCOMPLN fUTBLCOM = Db.getRecord("UTBLCOMPLN","CPLAN = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLCOM)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLCOM.save()
		if %ProcessMode = 3 do Db.delete("UTBLCOMPLN","CPLAN = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm26(%ProcessMode, String KEY(), String SCREEN)  // UTBLCORRE - Correspondent Institutions

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCORRE UTBL = Db.getRecord("UTBLCORRE","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLCORRE","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm27(%ProcessMode, String KEY(), String SCREEN)  // UTBLCTFPLN - Commissions, Taxes, and Fees Plan

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLCTFPLN fUTBLCTF = Db.getRecord("UTBLCTFPLN","CTFPLN = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLCTF)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLCTF.save()
		if %ProcessMode = 3 do Db.delete("UTBLCTFPLN","CTFPLN = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm28(%ProcessMode, String KEY(), String SCREEN)  // UTBLDELUXEPR - Deluxe Check Order Options-Product Type

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLDELUXEPR fUTBLDEL = Db.getRecord("UTBLDELUXEPR","CO = :KEY(1),  TYP = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLDEL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLDEL.save()
		if %ProcessMode = 3 do Db.delete("UTBLDELUXEPR","CO = :KEY(1) AND TYP = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm29(%ProcessMode, String KEY(), String SCREEN)  // UTBLEFTINST - EFT Institutions

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLEFTINST fUTBL = Db.getRecord("UTBLEFTINST","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLEFTINST","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm30(%ProcessMode, String KEY(), String SCREEN)  // UTBLEMPLOYER - Employer Code

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLEMPLOYER fUTBLEMP = Db.getRecord("UTBLEMPLOYER","EMPLNO = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLEMP)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLEMP.save()
		if %ProcessMode = 3 do Db.delete("UTBLEMPLOYER","EMPLNO = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm31(%ProcessMode, String KEY(), String SCREEN)  // UTBLESCHEAT - Escheat Query Parameter Input

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLESCHEAT fUTBLESH = Db.getRecord("UTBLESCHEAT","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLESH)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLESH.save()
		if %ProcessMode = 3 do Db.delete("UTBLESCHEAT","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm32(%ProcessMode, String KEY(), String SCREEN)  // UTBLET - Integrity Error Action

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLET UTBL = Db.getRecord("UTBLET","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLET","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm33(%ProcessMode, String KEY(), String SCREEN)  // UTBLEURINT - Euro Interest Index Mapping

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLEURINT fUTBLEUR = Db.getRecord("UTBLEURINT","INDEX = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLEUR)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLEUR.save()
		if %ProcessMode = 3 do Db.delete("UTBLEURINT","INDEX = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm34(%ProcessMode, String KEY(), String SCREEN)  // UTBLFEETBL - Service Fee Table Files

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLFEETBL fUTBLFTBL = Db.getRecord("UTBLFEETBL","FEETBL = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLFTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLFTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLFEETBL","FEETBL = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm35(%ProcessMode, String KEY(), String SCREEN)  // UTBLFPI - Foreign Processor Interface

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLFPI UTBL = Db.getRecord("UTBLFPI","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLFPI","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm36(%ProcessMode, String KEY(), String SCREEN)  // UTBLICPA - Int Calculation Principal Adjustment

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLICPA fUTICPA = Db.getRecord("UTBLICPA","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTICPA)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTICPA.save()
		if %ProcessMode = 3 do Db.delete("UTBLICPA","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm37(%ProcessMode, String KEY(), String SCREEN)  // UTBLLNSUB - Subsidy Loan Plan Definition

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLLNSUB fUTBL = Db.getRecord("UTBLLNSUB","SUBPLN = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLLNSUB","SUBPLN = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm38(%ProcessMode, String KEY(), String SCREEN)  // UTBLMPS - MPS Card Extract Options

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLMPS fUTBLMPS = Db.getRecord("UTBLMPS","CO = :KEY(1),  CARDTYP = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLMPS)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLMPS.save()
		if %ProcessMode = 3 do Db.delete("UTBLMPS","CO = :KEY(1) AND CARDTYP = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm39(%ProcessMode, String KEY(), String SCREEN)  // UTBLMPSPROD - MPS Card Extract Options - Product Type

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLMPSPROD fMPSPR = Db.getRecord("UTBLMPSPROD","CO = :KEY(1),  CARDTYP = :KEY(2),  TYP = :KEY(3)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fMPSPR)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fMPSPR.save()
		if %ProcessMode = 3 do Db.delete("UTBLMPSPROD","CO = :KEY(1) AND CARDTYP = :KEY(2) AND TYP = :KEY(3)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm40(%ProcessMode, String KEY(), String SCREEN)  // UTBLOFILIM - Officer Per Lending Limits

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLOFILIM UTBL = Db.getRecord("UTBLOFILIM","OFFC = :KEY(1),  KEY = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLOFILIM","OFFC = :KEY(1) AND KEY = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm41(%ProcessMode, String KEY(), String SCREEN)  // UTBLPPDPL - Prepayment Penalty Determination

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLPPDPL fUTBLPPD = Db.getRecord("UTBLPPDPL","PLAN = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLPPD)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLPPD.save()
		if %ProcessMode = 3 do Db.delete("UTBLPPDPL","PLAN = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm42(%ProcessMode, String KEY(), String SCREEN)  // UTBLRADR - Trader File

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLRADR UTBL = Db.getRecord("UTBLRADR","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLRADR","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm43(%ProcessMode, String KEY(), String SCREEN)  // UTBLRATE - Rate Schedule Support File

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLRATE UTBL = Db.getRecord("UTBLRATE","SCH = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLRATE","SCH = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm44(%ProcessMode, String KEY(), String SCREEN)  // UTBLREGION - Region Code User Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLREGION UTBL = Db.getRecord("UTBLREGION","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLREGION","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm45(%ProcessMode, String KEY(), String SCREEN)  // UTBLRSPDEF - Retirement Sav Plan Definition

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLRSPDEF fUTBLRSP = Db.getRecord("UTBLRSPDEF","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLRSP)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLRSP.save()
		if %ProcessMode = 3 do Db.delete("UTBLRSPDEF","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm46(%ProcessMode, String KEY(), String SCREEN)  // UTBLSRC - Posting Source Data

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLSRC fUTBLSRC = Db.getRecord("UTBLSRC","SRCTYP = :KEY(1),  KEY = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLSRC)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLSRC.save()
		if %ProcessMode = 3 do Db.delete("UTBLSRC","SRCTYP = :KEY(1) AND KEY = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm47(%ProcessMode, String KEY(), String SCREEN)  // UTBLSRVCAT - Service Item Category

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLSRVCAT fUTSRVCAT = Db.getRecord("UTBLSRVCAT","SRVCAT = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTSRVCAT)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTSRVCAT.save()
		if %ProcessMode = 3 do Db.delete("UTBLSRVCAT","SRVCAT = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm48(%ProcessMode, String KEY(), String SCREEN)  // UTBLSRVLOC - Service Item Location

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLSRVLOC fUTSRVLO = Db.getRecord("UTBLSRVLOC","SRVCAT = :KEY(1),  SRVTYP = :KEY(2),  SRVLOC = :KEY(3)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTSRVLO)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTSRVLO.save()
		if %ProcessMode = 3 do Db.delete("UTBLSRVLOC","SRVCAT = :KEY(1) AND SRVTYP = :KEY(2) AND SRVLOC = :KEY(3)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm49(%ProcessMode, String KEY(), String SCREEN)  // UTBLSRVSTAT - Service Item Status

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLSRVSTAT fUTSRVST = Db.getRecord("UTBLSRVSTAT","SRVCAT = :KEY(1),  SRVST = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTSRVST)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTSRVST.save()
		if %ProcessMode = 3 do Db.delete("UTBLSRVSTAT","SRVCAT = :KEY(1) AND SRVST = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm50(%ProcessMode, String KEY(), String SCREEN)  // UTBLSRVTYP - Service Item Type

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLSRVTYP fUTSRVTYP = Db.getRecord("UTBLSRVTYP","SRVCAT = :KEY(1),  SRVTYP = :KEY(2)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTSRVTYP)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTSRVTYP.save()
		if %ProcessMode = 3 do Db.delete("UTBLSRVTYP","SRVCAT = :KEY(1) AND SRVTYP = :KEY(2)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm51(%ProcessMode, String KEY(), String SCREEN)  // UTBLSTMTR - Statement Transaction Categories

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLSTMTR fUTBLSTM = Db.getRecord("UTBLSTMTR","CAT = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLSTM)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLSTM.save()
		if %ProcessMode = 3 do Db.delete("UTBLSTMTR","CAT = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm52(%ProcessMode, String KEY(), String SCREEN)  // UTBLTAPEFMT - DATA-QWIK RMS-To-Tape Formats

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLTAPEFMT UTBL = Db.getRecord("UTBLTAPEFMT","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .UTBL)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do UTBL.save()
		if %ProcessMode = 3 do Db.delete("UTBLTAPEFMT","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm53(%ProcessMode, String KEY(), String SCREEN)  // UTBLWCALC - Withholding Calculation Method

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLWCALC fUTBLWCA = Db.getRecord("UTBLWCALC","KEY = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBLWCA)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBLWCA.save()
		if %ProcessMode = 3 do Db.delete("UTBLWCALC","KEY = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


tm54(%ProcessMode, String KEY(), String SCREEN)  // UTBLZTSD - Transaction Support Data System Table

	type Public String VFMQ

	type Number ER = 0
	type String ERMSG, RM

	set (ERMSG, VFMQ) = ""

	type RecordUTBLZTSD fUTBZTSD = Db.getRecord("UTBLZTSD","SEQ = :KEY(1)",1)

	do DRV^USID(%ProcessMode, SCREEN, .fUTBZTSD)
	if VFMQ '= "Q" do {

		if %ProcessMode < 2 do fUTBZTSD.save()
		if %ProcessMode = 3 do Db.delete("UTBLZTSD","SEQ = :KEY(1)")
	}

	if ER set ERMSG = RM.get()

	quit ERMSG


LOWERLVL(String fid, String KEY())  // Check tables at lower level
	type Boolean RETURN = 0

	if fid = "CTBLEFTTYPE" set RETURN = $$LL1(.KEY())
	else  if fid = "FEEPLN" set RETURN = $$LL2(.KEY())
	else  if fid = "FEESRV" set RETURN = $$LL3(.KEY())
	else  if fid = "INDEX" set RETURN = $$LL4(.KEY())
	else  if fid = "INDEX0" set RETURN = $$LL5(.KEY())
	else  if fid = "LNAOP" set RETURN = $$LL6(.KEY())
	else  if fid = "LNAOT" set RETURN = $$LL7(.KEY())
	else  if fid = "LNESCPS" set RETURN = $$LL8(.KEY())
	else  if fid = "LNFEEP" set RETURN = $$LL9(.KEY())
	else  if fid = "LNLS1" set RETURN = $$LL10(.KEY())
	else  if fid = "LNLS2" set RETURN = $$LL11(.KEY())
	else  if fid = "LNPAS2" set RETURN = $$LL12(.KEY())
	else  if fid = "LNPATH" set RETURN = $$LL13(.KEY())
	else  if fid = "LNPDS" set RETURN = $$LL14(.KEY())
	else  if fid = "LNPP1" set RETURN = $$LL15(.KEY())
	else  if fid = "LNTRS" set RETURN = $$LL16(.KEY())
	else  if fid = "PDAG" set RETURN = $$LL17(.KEY())
	else  if fid = "RELCODE1" set RETURN = $$LL18(.KEY())
	else  if fid = "STBLCLS" set RETURN = $$LL19(.KEY())
	else  if fid = "STBLCNTRY" set RETURN = $$LL20(.KEY())
	else  if fid = "STBLFORM0" set RETURN = $$LL21(.KEY())
	else  if fid = "STBLFTPSYS" set RETURN = $$LL22(.KEY())
	else  if fid = "STBLIRSTAPE" set RETURN = $$LL23(.KEY())
	else  if fid = "STBLLFSC1" set RETURN = $$LL24(.KEY())
	else  if fid = "STBLPCM1" set RETURN = $$LL25(.KEY())
	else  if fid = "STBLSWFTDSC" set RETURN = $$LL26(.KEY())
	else  if fid = "STMMSG" set RETURN = $$LL27(.KEY())
	else  if fid = "USRFRE" set RETURN = $$LL28(.KEY())
	else  if fid = "USRFRE2" set RETURN = $$LL29(.KEY())
	else  if fid = "UTBLACCRXPO" set RETURN = $$LL30(.KEY())
	else  if fid = "UTBLAWTI" set RETURN = $$LL31(.KEY())
	else  if fid = "UTBLAWTIEFD" set RETURN = $$LL32(.KEY())
	else  if fid = "UTBLBING" set RETURN = $$LL33(.KEY())
	else  if fid = "UTBLCHKACT1" set RETURN = $$LL34(.KEY())
	else  if fid = "UTBLCHKACT2" set RETURN = $$LL35(.KEY())
	else  if fid = "UTBLCHKBANK" set RETURN = $$LL36(.KEY())
	else  if fid = "UTBLCHKDEF1" set RETURN = $$LL37(.KEY())
	else  if fid = "UTBLCMSFILE" set RETURN = $$LL38(.KEY())
	else  if fid = "UTBLCOMGRPT" set RETURN = $$LL39(.KEY())
	else  if fid = "UTBLCOMINDX" set RETURN = $$LL40(.KEY())
	else  if fid = "UTBLCRDSTAT" set RETURN = $$LL41(.KEY())
	else  if fid = "UTBLCTFGRP" set RETURN = $$LL42(.KEY())
	else  if fid = "UTBLDELUXE" set RETURN = $$LL43(.KEY())
	else  if fid = "UTBLDFT1" set RETURN = $$LL44(.KEY())
	else  if fid = "UTBLDFTT" set RETURN = $$LL45(.KEY())
	else  if fid = "UTBLDNOD" set RETURN = $$LL46(.KEY())
	else  if fid = "UTBLENTS" set RETURN = $$LL47(.KEY())
	else  if fid = "UTBLESAPDATE" set RETURN = $$LL48(.KEY())
	else  if fid = "UTBLEVENT" set RETURN = $$LL49(.KEY())
	else  if fid = "UTBLEVENTAUT" set RETURN = $$LL50(.KEY())
	else  if fid = "UTBLEXPGRTHT" set RETURN = $$LL51(.KEY())
	else  if fid = "UTBLEXTINT" set RETURN = $$LL52(.KEY())
	else  if fid = "UTBLEXTSMC" set RETURN = $$LL53(.KEY())
	else  if fid = "UTBLEXTTLR" set RETURN = $$LL54(.KEY())
	else  if fid = "UTBLEXTTRN" set RETURN = $$LL55(.KEY())
	else  if fid = "UTBLFEESCH" set RETURN = $$LL56(.KEY())
	else  if fid = "UTBLFORM0" set RETURN = $$LL57(.KEY())
	else  if fid = "UTBLGCRBALT" set RETURN = $$LL58(.KEY())
	else  if fid = "UTBLGCRDS" set RETURN = $$LL59(.KEY())
	else  if fid = "UTBLGLSC" set RETURN = $$LL60(.KEY())
	else  if fid = "UTBLIMAGE1" set RETURN = $$LL61(.KEY())
	else  if fid = "UTBLIMPBALT" set RETURN = $$LL62(.KEY())
	else  if fid = "UTBLINSTLIM" set RETURN = $$LL63(.KEY())
	else  if fid = "UTBLINVPLN" set RETURN = $$LL64(.KEY())
	else  if fid = "UTBLLIFDESC" set RETURN = $$LL65(.KEY())
	else  if fid = "UTBLLLDT" set RETURN = $$LL66(.KEY())
	else  if fid = "UTBLLNFEEGRP" set RETURN = $$LL67(.KEY())
	else  if fid = "UTBLLNPPN" set RETURN = $$LL68(.KEY())
	else  if fid = "UTBLMADDESC" set RETURN = $$LL69(.KEY())
	else  if fid = "UTBLMARSEG" set RETURN = $$LL70(.KEY())
	else  if fid = "UTBLMATATT" set RETURN = $$LL71(.KEY())
	else  if fid = "UTBLMATATT1" set RETURN = $$LL72(.KEY())
	else  if fid = "UTBLMPS" set RETURN = $$LL73(.KEY())
	else  if fid = "UTBLMXUCLS1" set RETURN = $$LL74(.KEY())
	else  if fid = "UTBLNBD" set RETURN = $$LL75(.KEY())
	else  if fid = "UTBLNCIDT" set RETURN = $$LL76(.KEY())
	else  if fid = "UTBLODOPTT" set RETURN = $$LL77(.KEY())
	else  if fid = "UTBLOVR" set RETURN = $$LL78(.KEY())
	else  if fid = "UTBLPRODRL" set RETURN = $$LL79(.KEY())
	else  if fid = "UTBLPRODRT" set RETURN = $$LL80(.KEY())
	else  if fid = "UTBLRATE" set RETURN = $$LL81(.KEY())
	else  if fid = "UTBLRDEPT" set RETURN = $$LL82(.KEY())
	else  if fid = "UTBLRELMAT" set RETURN = $$LL83(.KEY())
	else  if fid = "UTBLRELMAT1" set RETURN = $$LL84(.KEY())
	else  if fid = "UTBLRFL3" set RETURN = $$LL85(.KEY())
	else  if fid = "UTBLRFLG" set RETURN = $$LL86(.KEY())
	else  if fid = "UTBLRPP" set RETURN = $$LL87(.KEY())
	else  if fid = "UTBLRSHEET0" set RETURN = $$LL88(.KEY())
	else  if fid = "UTBLRSPWSCH1" set RETURN = $$LL89(.KEY())
	else  if fid = "UTBLRT" set RETURN = $$LL90(.KEY())
	else  if fid = "UTBLSRC1" set RETURN = $$LL91(.KEY())
	else  if fid = "UTBLSRVCAT" set RETURN = $$LL92(.KEY())
	else  if fid = "UTBLSRVTYP" set RETURN = $$LL93(.KEY())
	else  if fid = "UTBLSUBJ" set RETURN = $$LL94(.KEY())
	else  if fid = "UTBLTRNGRPLT" set RETURN = $$LL95(.KEY())
	else  if fid = "UTBLTRNGRPT" set RETURN = $$LL96(.KEY())
	else  if fid = "UTBLUCIDCLS" set RETURN = $$LL97(.KEY())
	else  if fid = "UTBLUCIDGRP" set RETURN = $$LL98(.KEY())
	else  if fid = "UTBLWPFT" set RETURN = $$LL99(.KEY())
	else  if fid = "UTBLXMCTYP" set RETURN = $$LL100(.KEY())
	else  if fid = "YFEEEXP" set RETURN = $$LL101(.KEY())

	quit RETURN


LLSELECT(String SELECT, String FROM, String WHERE)

	type Public String KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8
	#ACCEPT Date=09/21/04; PGM=Dan Russell
	type ResultSet rs = Db.select(SELECT, FROM, WHERE)

	if rs.next() quit 1

	quit 0


LL1(String KEY())  // CTBLEFTTYPE

	type String KEY1 = KEY(1)
	if $$LLSELECT("CTBLEFTPROD.EFTTYPE", "CTBLEFTPROD", "CTBLEFTPROD.EFTTYPE = :KEY1") quit 1

	quit 0


LL2(String KEY())  // FEEPLN

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("FEEQRY.PLAN,FEEQRY.FEEDT", "FEEQRY", "FEEQRY.PLAN = :KEY1 AND FEEQRY.FEEDT = :KEY2") quit 1

	if $$LLSELECT("FEESRV.PLAN,FEESRV.FEEDT", "FEESRV", "FEESRV.PLAN = :KEY1 AND FEESRV.FEEDT = :KEY2") quit 1

	quit 0


LL3(String KEY())  // FEESRV

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	type String KEY3 = KEY(3)
	type String KEY4 = KEY(4)
	if $$LLSELECT("FEEQRY.PLAN,FEEQRY.FEEDT,FEEQRY.FEECAT,FEEQRY.FEETYP", "FEEQRY", "FEEQRY.PLAN = :KEY1 AND FEEQRY.FEEDT = :KEY2 AND FEEQRY.FEECAT = :KEY3 AND FEEQRY.FEETYP = :KEY4") quit 1

	quit 0


LL4(String KEY())  // INDEX

	type String KEY1 = KEY(1)
	if $$LLSELECT("INDEX0.INDEX", "INDEX0", "INDEX0.INDEX = :KEY1") quit 1

	if $$LLSELECT("INDEX1.INDEX", "INDEX1", "INDEX1.INDEX = :KEY1") quit 1

	quit 0


LL5(String KEY())  // INDEX0

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("INDEX1.INDEX,INDEX1.EFD", "INDEX1", "INDEX1.INDEX = :KEY1 AND INDEX1.EFD = :KEY2") quit 1

	quit 0


LL6(String KEY())  // LNAOP

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("AOAMO.TYP,AOAMO.PAYEE", "AOAMO", "AOAMO.TYP = :KEY1 AND AOAMO.PAYEE = :KEY2") quit 1

	quit 0


LL7(String KEY())  // LNAOT

	type String KEY1 = KEY(1)
	if $$LLSELECT("AOAMO.TYP", "AOAMO", "AOAMO.TYP = :KEY1") quit 1

	if $$LLSELECT("LNAOP.TYP", "LNAOP", "LNAOP.TYP = :KEY1") quit 1

	quit 0


LL8(String KEY())  // LNESCPS

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("LNESCPQ.ANOFF,LNESCPQ.SEQ", "LNESCPQ", "LNESCPQ.ANOFF = :KEY1 AND LNESCPQ.SEQ = :KEY2") quit 1

	quit 0


LL9(String KEY())  // LNFEEP

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNFEEPS.FEETYP", "LNFEEPS", "LNFEEPS.FEETYP = :KEY1") quit 1

	quit 0


LL10(String KEY())  // LNLS1

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNLS2.INCD", "LNLS2", "LNLS2.INCD = :KEY1") quit 1

	if $$LLSELECT("LNLS3.INCD", "LNLS3", "LNLS3.INCD = :KEY1") quit 1

	quit 0


LL11(String KEY())  // LNLS2

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("LNLS3.INCD,LNLS3.PL", "LNLS3", "LNLS3.INCD = :KEY1 AND LNLS3.PL = :KEY2") quit 1

	quit 0


LL12(String KEY())  // LNPAS2

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNPATH.TABLE", "LNPATH", "LNPATH.TABLE = :KEY1") quit 1

	if $$LLSELECT("LNPATH1.TABLE", "LNPATH1", "LNPATH1.TABLE = :KEY1") quit 1

	quit 0


LL13(String KEY())  // LNPATH

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("LNPATH1.TABLE,LNPATH1.PATH", "LNPATH1", "LNPATH1.TABLE = :KEY1 AND LNPATH1.PATH = :KEY2") quit 1

	quit 0


LL14(String KEY())  // LNPDS

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNPDS2.TABLE", "LNPDS2", "LNPDS2.TABLE = :KEY1") quit 1

	quit 0


LL15(String KEY())  // LNPP1

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNPP2.SLCD", "LNPP2", "LNPP2.SLCD = :KEY1") quit 1

	quit 0


LL16(String KEY())  // LNTRS

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNTRS1.TRTYPE", "LNTRS1", "LNTRS1.TRTYPE = :KEY1") quit 1

	quit 0


LL17(String KEY())  // PDAG

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("LNPDAG.GRP,LNPDAG.TABLE", "LNPDAG", "LNPDAG.GRP = :KEY1 AND LNPDAG.TABLE = :KEY2") quit 1

	quit 0


LL18(String KEY())  // RELCODE1

	type String KEY1 = KEY(1)
	if $$LLSELECT("RELCODE.REL", "RELCODE", "RELCODE.REL = :KEY1") quit 1

	quit 0


LL19(String KEY())  // STBLCLS

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLGRP.CLS", "STBLGRP", "STBLGRP.CLS = :KEY1") quit 1

	quit 0


LL20(String KEY())  // STBLCNTRY

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLCNTRY1.CNTRY", "STBLCNTRY1", "STBLCNTRY1.CNTRY = :KEY1") quit 1

	quit 0


LL21(String KEY())  // STBLFORM0

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLFORM.RECTYPE", "STBLFORM", "STBLFORM.RECTYPE = :KEY1") quit 1

	quit 0


LL22(String KEY())  // STBLFTPSYS

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLFTPINT.SYS", "STBLFTPINT", "STBLFTPINT.SYS = :KEY1") quit 1

	quit 0


LL23(String KEY())  // STBLIRSTAPE

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLIRSTAPE2.FGRP", "STBLIRSTAPE2", "STBLIRSTAPE2.FGRP = :KEY1") quit 1

	quit 0


LL24(String KEY())  // STBLLFSC1

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLLFSC.LFPC", "STBLLFSC", "STBLLFSC.LFPC = :KEY1") quit 1

	quit 0


LL25(String KEY())  // STBLPCM1

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("STBLPCM2.CAL,STBLPCM2.POS", "STBLPCM2", "STBLPCM2.CAL = :KEY1 AND STBLPCM2.POS = :KEY2") quit 1

	quit 0


LL26(String KEY())  // STBLSWFTDSC

	type String KEY1 = KEY(1)
	if $$LLSELECT("STBLSWIFT.TYPE", "STBLSWIFT", "STBLSWIFT.TYPE = :KEY1") quit 1

	quit 0


LL27(String KEY())  // STMMSG

	type String KEY1 = KEY(1)
	if $$LLSELECT("STMMSGD.MSGID", "STMMSGD", "STMMSGD.MSGID = :KEY1") quit 1

	quit 0


LL28(String KEY())  // USRFRE

	type String KEY1 = KEY(1)
	if $$LLSELECT("USRFRE1.UFRE", "USRFRE1", "USRFRE1.UFRE = :KEY1") quit 1

	if $$LLSELECT("USRFRE2.UFRE", "USRFRE2", "USRFRE2.UFRE = :KEY1") quit 1

	quit 0


LL29(String KEY())  // USRFRE2

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("USRFRE1.UFRE,USRFRE1.MONTH", "USRFRE1", "USRFRE1.UFRE = :KEY1 AND USRFRE1.MONTH = :KEY2") quit 1

	quit 0


LL30(String KEY())  // UTBLACCRXPO

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLACRXDTL.ACCRXNAM", "UTBLACRXDTL", "UTBLACRXDTL.ACCRXNAM = :KEY1") quit 1

	quit 0


LL31(String KEY())  // UTBLAWTI

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLAWTIEFD.AWTI", "UTBLAWTIEFD", "UTBLAWTIEFD.AWTI = :KEY1") quit 1

	if $$LLSELECT("UTBLAWTIR.AWTI", "UTBLAWTIR", "UTBLAWTIR.AWTI = :KEY1") quit 1

	quit 0


LL32(String KEY())  // UTBLAWTIEFD

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLAWTIR.AWTI,UTBLAWTIR.EFDATE", "UTBLAWTIR", "UTBLAWTIR.AWTI = :KEY1 AND UTBLAWTIR.EFDATE = :KEY2") quit 1

	quit 0


LL33(String KEY())  // UTBLBING

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLBING1.BINGRP", "UTBLBING1", "UTBLBING1.BINGRP = :KEY1") quit 1

	quit 0


LL34(String KEY())  // UTBLCHKACT1

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCHKACT2.CHKS", "UTBLCHKACT2", "UTBLCHKACT2.CHKS = :KEY1") quit 1

	if $$LLSELECT("UTBLCHKACT3.CHKS", "UTBLCHKACT3", "UTBLCHKACT3.CHKS = :KEY1") quit 1

	quit 0


LL35(String KEY())  // UTBLCHKACT2

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLCHKACT3.CHKS,UTBLCHKACT3.CHKACT", "UTBLCHKACT3", "UTBLCHKACT3.CHKS = :KEY1 AND UTBLCHKACT3.CHKACT = :KEY2") quit 1

	quit 0


LL36(String KEY())  // UTBLCHKBANK

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCHKBANK1.CO", "UTBLCHKBANK1", "UTBLCHKBANK1.CO = :KEY1") quit 1

	quit 0


LL37(String KEY())  // UTBLCHKDEF1

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCHKDEF2.DEFCHK", "UTBLCHKDEF2", "UTBLCHKDEF2.DEFCHK = :KEY1") quit 1

	quit 0


LL38(String KEY())  // UTBLCMSFILE

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCMSFILE2.FLTYP", "UTBLCMSFILE2", "UTBLCMSFILE2.FLTYP = :KEY1") quit 1

	quit 0


LL39(String KEY())  // UTBLCOMGRPT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCOMGRP.COMGRP", "UTBLCOMGRP", "UTBLCOMGRP.COMGRP = :KEY1") quit 1

	quit 0


LL40(String KEY())  // UTBLCOMINDX

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCOMINDX1.CINDEX", "UTBLCOMINDX1", "UTBLCOMINDX1.CINDEX = :KEY1") quit 1

	quit 0


LL41(String KEY())  // UTBLCRDSTAT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCRDSTAT1.CRDST", "UTBLCRDSTAT1", "UTBLCRDSTAT1.CRDST = :KEY1") quit 1

	quit 0


LL42(String KEY())  // UTBLCTFGRP

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLCTFGRP1.GRPNAME", "UTBLCTFGRP1", "UTBLCTFGRP1.GRPNAME = :KEY1") quit 1

	quit 0


LL43(String KEY())  // UTBLDELUXE

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLDELUXEPR.CO", "UTBLDELUXEPR", "UTBLDELUXEPR.CO = :KEY1") quit 1

	quit 0


LL44(String KEY())  // UTBLDFT1

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLDFT.DFTTYP,UTBLDFT.DFTGRP", "UTBLDFT", "UTBLDFT.DFTTYP = :KEY1 AND UTBLDFT.DFTGRP = :KEY2") quit 1

	quit 0


LL45(String KEY())  // UTBLDFTT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLDFT.DFTTYP", "UTBLDFT", "UTBLDFT.DFTTYP = :KEY1") quit 1

	if $$LLSELECT("UTBLDFT1.DFTTYP", "UTBLDFT1", "UTBLDFT1.DFTTYP = :KEY1") quit 1

	quit 0


LL46(String KEY())  // UTBLDNOD

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLDEVICE.NODE", "UTBLDEVICE", "UTBLDEVICE.NODE = :KEY1") quit 1

	quit 0


LL47(String KEY())  // UTBLENTS

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLES.SET", "UTBLES", "UTBLES.SET = :KEY1") quit 1

	quit 0


LL48(String KEY())  // UTBLESAPDATE

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNESCPQ.ANOFF", "LNESCPQ", "LNESCPQ.ANOFF = :KEY1") quit 1

	if $$LLSELECT("LNESCPS.ANOFF", "LNESCPS", "LNESCPS.ANOFF = :KEY1") quit 1

	quit 0


LL49(String KEY())  // UTBLEVENT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEBCH.EVENT", "UTBLEBCH", "UTBLEBCH.EVENT = :KEY1") quit 1

	quit 0


LL50(String KEY())  // UTBLEVENTAUT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEVENTAUH.EVENT", "UTBLEVENTAUH", "UTBLEVENTAUH.EVENT = :KEY1") quit 1

	quit 0


LL51(String KEY())  // UTBLEXPGRTHT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEXPGRTH.GTBL", "UTBLEXPGRTH", "UTBLEXPGRTH.GTBL = :KEY1") quit 1

	quit 0


LL52(String KEY())  // UTBLEXTINT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEXTENC1.INTRFACE", "UTBLEXTENC1", "UTBLEXTENC1.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTOVR1.INTRFACE", "UTBLEXTOVR1", "UTBLEXTOVR1.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTRSP1.INTRFACE", "UTBLEXTRSP1", "UTBLEXTRSP1.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTSMC.INTRFACE", "UTBLEXTSMC", "UTBLEXTSMC.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTSMC1.INTRFACE", "UTBLEXTSMC1", "UTBLEXTSMC1.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTTLR.INTRFACE", "UTBLEXTTLR", "UTBLEXTTLR.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTTLR1.INTRFACE", "UTBLEXTTLR1", "UTBLEXTTLR1.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTTRN.INTRFACE", "UTBLEXTTRN", "UTBLEXTTRN.INTRFACE = :KEY1") quit 1

	if $$LLSELECT("UTBLEXTTRN1.INTRFACE", "UTBLEXTTRN1", "UTBLEXTTRN1.INTRFACE = :KEY1") quit 1

	quit 0


LL53(String KEY())  // UTBLEXTSMC

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEXTSMC1.INTRFACE", "UTBLEXTSMC1", "UTBLEXTSMC1.INTRFACE = :KEY1") quit 1

	quit 0


LL54(String KEY())  // UTBLEXTTLR

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEXTTLR1.INTRFACE", "UTBLEXTTLR1", "UTBLEXTTLR1.INTRFACE = :KEY1") quit 1

	quit 0


LL55(String KEY())  // UTBLEXTTRN

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLEXTTRN1.INTRFACE", "UTBLEXTTRN1", "UTBLEXTTRN1.INTRFACE = :KEY1") quit 1

	quit 0


LL56(String KEY())  // UTBLFEESCH

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLFEESCH1.FEESCH,UTBLFEESCH1.FEESCHDT", "UTBLFEESCH1", "UTBLFEESCH1.FEESCH = :KEY1 AND UTBLFEESCH1.FEESCHDT = :KEY2") quit 1

	quit 0


LL57(String KEY())  // UTBLFORM0

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLFORM.RECTYPE", "UTBLFORM", "UTBLFORM.RECTYPE = :KEY1") quit 1

	quit 0


LL58(String KEY())  // UTBLGCRBALT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLGCRBAL.TBLNM", "UTBLGCRBAL", "UTBLGCRBAL.TBLNM = :KEY1") quit 1

	quit 0


LL59(String KEY())  // UTBLGCRDS

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLGCRDD.TBLNM", "UTBLGCRDD", "UTBLGCRDD.TBLNM = :KEY1") quit 1

	quit 0


LL60(String KEY())  // UTBLGLSC

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLGLSCM.GLSC", "UTBLGLSCM", "UTBLGLSCM.GLSC = :KEY1") quit 1

	if $$LLSELECT("UTBLGLSCR.GLSC", "UTBLGLSCR", "UTBLGLSCR.GLSC = :KEY1") quit 1

	quit 0


LL61(String KEY())  // UTBLIMAGE1

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLIMAGE.NAME", "UTBLIMAGE", "UTBLIMAGE.NAME = :KEY1") quit 1

	quit 0


LL62(String KEY())  // UTBLIMPBALT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLIMPBAL.IMPBAL", "UTBLIMPBAL", "UTBLIMPBAL.IMPBAL = :KEY1") quit 1

	quit 0


LL63(String KEY())  // UTBLINSTLIM

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLPLANTLIM.GRPLIM", "UTBLPLANTLIM", "UTBLPLANTLIM.GRPLIM = :KEY1") quit 1

	quit 0


LL64(String KEY())  // UTBLINVPLN

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLINVTYP.PLAN", "UTBLINVTYP", "UTBLINVTYP.PLAN = :KEY1") quit 1

	quit 0


LL65(String KEY())  // UTBLLIFDESC

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLLIFPCT.TABLE", "UTBLLIFPCT", "UTBLLIFPCT.TABLE = :KEY1") quit 1

	quit 0


LL66(String KEY())  // UTBLLLDT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLLLD.DFTDEF", "UTBLLLD", "UTBLLLD.DFTDEF = :KEY1") quit 1

	quit 0


LL67(String KEY())  // UTBLLNFEEGRP

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNFEEGRP1.FEEGRP", "LNFEEGRP1", "LNFEEGRP1.FEEGRP = :KEY1") quit 1

	quit 0


LL68(String KEY())  // UTBLLNPPN

	type String KEY1 = KEY(1)
	if $$LLSELECT("LNEPPMS.METHOD", "LNEPPMS", "LNEPPMS.METHOD = :KEY1") quit 1

	quit 0


LL69(String KEY())  // UTBLMADDESC

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLMADPCT.TABLE", "UTBLMADPCT", "UTBLMADPCT.TABLE = :KEY1") quit 1

	quit 0


LL70(String KEY())  // UTBLMARSEG

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLMARSEGDT.MARSEG", "UTBLMARSEGDT", "UTBLMARSEGDT.MARSEG = :KEY1") quit 1

	quit 0


LL71(String KEY())  // UTBLMATATT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLMATATT1.NAME", "UTBLMATATT1", "UTBLMATATT1.NAME = :KEY1") quit 1

	if $$LLSELECT("UTBLMATATT2.NAME", "UTBLMATATT2", "UTBLMATATT2.NAME = :KEY1") quit 1

	quit 0


LL72(String KEY())  // UTBLMATATT1

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	type String KEY3 = KEY(3)
	if $$LLSELECT("UTBLMATATT2.NAME,UTBLMATATT2.EFD,UTBLMATATT2.ROW", "UTBLMATATT2", "UTBLMATATT2.NAME = :KEY1 AND UTBLMATATT2.EFD = :KEY2 AND UTBLMATATT2.ROW = :KEY3") quit 1

	quit 0


LL73(String KEY())  // UTBLMPS

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLMPSPROD.CO,UTBLMPSPROD.CARDTYP", "UTBLMPSPROD", "UTBLMPSPROD.CO = :KEY1 AND UTBLMPSPROD.CARDTYP = :KEY2") quit 1

	quit 0


LL74(String KEY())  // UTBLMXUCLS1

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLMXUCLS2.CRCD,UTBLMXUCLS2.UCLS", "UTBLMXUCLS2", "UTBLMXUCLS2.CRCD = :KEY1 AND UTBLMXUCLS2.UCLS = :KEY2") quit 1

	quit 0


LL75(String KEY())  // UTBLNBD

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLNBD1.NBDC", "UTBLNBD1", "UTBLNBD1.NBDC = :KEY1") quit 1

	quit 0


LL76(String KEY())  // UTBLNCIDT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLNXTCID.TYPE", "UTBLNXTCID", "UTBLNXTCID.TYPE = :KEY1") quit 1

	quit 0


LL77(String KEY())  // UTBLODOPTT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLODOPT.ODOPT", "UTBLODOPT", "UTBLODOPT.ODOPT = :KEY1") quit 1

	quit 0


LL78(String KEY())  // UTBLOVR

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLOVR1.GRP,UTBLOVR1.OVR", "UTBLOVR1", "UTBLOVR1.GRP = :KEY1 AND UTBLOVR1.OVR = :KEY2") quit 1

	quit 0


LL79(String KEY())  // UTBLPRODRL

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLPRODRLDT.RULEID", "UTBLPRODRLDT", "UTBLPRODRLDT.RULEID = :KEY1") quit 1

	quit 0


LL80(String KEY())  // UTBLPRODRT

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLPRODRTDT.COLNAME,UTBLPRODRTDT.RESULTSID", "UTBLPRODRTDT", "UTBLPRODRTDT.COLNAME = :KEY1 AND UTBLPRODRTDT.RESULTSID = :KEY2") quit 1

	quit 0


LL81(String KEY())  // UTBLRATE

	type String KEY1 = KEY(1)
	if $$LLSELECT("RATE1.SCH", "RATE1", "RATE1.SCH = :KEY1") quit 1

	quit 0


LL82(String KEY())  // UTBLRDEPT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLSUBJ.RDEPT", "UTBLSUBJ", "UTBLSUBJ.RDEPT = :KEY1") quit 1

	if $$LLSELECT("UTBLSUBJDL.RDEPT", "UTBLSUBJDL", "UTBLSUBJDL.RDEPT = :KEY1") quit 1

	quit 0


LL83(String KEY())  // UTBLRELMAT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLRELMAT1.MATRIX", "UTBLRELMAT1", "UTBLRELMAT1.MATRIX = :KEY1") quit 1

	if $$LLSELECT("UTBLRELMAT2.MATRIX", "UTBLRELMAT2", "UTBLRELMAT2.MATRIX = :KEY1") quit 1

	quit 0


LL84(String KEY())  // UTBLRELMAT1

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLRELMAT2.MATRIX,UTBLRELMAT2.MATROW", "UTBLRELMAT2", "UTBLRELMAT2.MATRIX = :KEY1 AND UTBLRELMAT2.MATROW = :KEY2") quit 1

	quit 0


LL85(String KEY())  // UTBLRFL3

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	type String KEY3 = KEY(3)
	if $$LLSELECT("UTBLRFLG3.GRP,UTBLRFLG3.RFLG,UTBLRFLG3.UCLS", "UTBLRFLG3", "UTBLRFLG3.GRP = :KEY1 AND UTBLRFLG3.RFLG = :KEY2 AND UTBLRFLG3.UCLS = :KEY3") quit 1

	quit 0


LL86(String KEY())  // UTBLRFLG

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLRFL1.GRP,UTBLRFL1.RFLG", "UTBLRFL1", "UTBLRFL1.GRP = :KEY1 AND UTBLRFL1.RFLG = :KEY2") quit 1

	quit 0


LL87(String KEY())  // UTBLRPP

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLRPPB.PLAN", "UTBLRPPB", "UTBLRPPB.PLAN = :KEY1") quit 1

	quit 0


LL88(String KEY())  // UTBLRSHEET0

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLRSHEET.CO,UTBLRSHEET.RATECD", "UTBLRSHEET", "UTBLRSHEET.CO = :KEY1 AND UTBLRSHEET.RATECD = :KEY2") quit 1

	quit 0


LL89(String KEY())  // UTBLRSPWSCH1

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLRSPWSCH.WSCH", "UTBLRSPWSCH", "UTBLRSPWSCH.WSCH = :KEY1") quit 1

	quit 0


LL90(String KEY())  // UTBLRT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLRTH.NUM", "UTBLRTH", "UTBLRTH.NUM = :KEY1") quit 1

	quit 0


LL91(String KEY())  // UTBLSRC1

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLSRC.SRCTYP", "UTBLSRC", "UTBLSRC.SRCTYP = :KEY1") quit 1

	quit 0


LL92(String KEY())  // UTBLSRVCAT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLSRVLOC.SRVCAT", "UTBLSRVLOC", "UTBLSRVLOC.SRVCAT = :KEY1") quit 1

	if $$LLSELECT("UTBLSRVTYP.SRVCAT", "UTBLSRVTYP", "UTBLSRVTYP.SRVCAT = :KEY1") quit 1

	quit 0


LL93(String KEY())  // UTBLSRVTYP

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLSRVLOC.SRVCAT,UTBLSRVLOC.SRVTYP", "UTBLSRVLOC", "UTBLSRVLOC.SRVCAT = :KEY1 AND UTBLSRVLOC.SRVTYP = :KEY2") quit 1

	quit 0


LL94(String KEY())  // UTBLSUBJ

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLSUBJDL.RDEPT,UTBLSUBJDL.SUBJECT", "UTBLSUBJDL", "UTBLSUBJDL.RDEPT = :KEY1 AND UTBLSUBJDL.SUBJECT = :KEY2") quit 1

	quit 0


LL95(String KEY())  // UTBLTRNGRPLT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLTRNGRPL.TRNGRP", "UTBLTRNGRPL", "UTBLTRNGRPL.TRNGRP = :KEY1") quit 1

	quit 0


LL96(String KEY())  // UTBLTRNGRPT

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLTRNGRP.TRNGRP,UTBLTRNGRP.TRNGRPDT", "UTBLTRNGRP", "UTBLTRNGRP.TRNGRP = :KEY1 AND UTBLTRNGRP.TRNGRPDT = :KEY2") quit 1

	quit 0


LL97(String KEY())  // UTBLUCIDCLS

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLUCIDGRP.CLS", "UTBLUCIDGRP", "UTBLUCIDGRP.CLS = :KEY1") quit 1

	if $$LLSELECT("UTBLUCIDTYPE.CLS", "UTBLUCIDTYPE", "UTBLUCIDTYPE.CLS = :KEY1") quit 1

	quit 0


LL98(String KEY())  // UTBLUCIDGRP

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("UTBLUCIDTYPE.CLS,UTBLUCIDTYPE.GRP", "UTBLUCIDTYPE", "UTBLUCIDTYPE.CLS = :KEY1 AND UTBLUCIDTYPE.GRP = :KEY2") quit 1

	quit 0


LL99(String KEY())  // UTBLWPFT

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLWPFTQ.WPFT", "UTBLWPFTQ", "UTBLWPFTQ.WPFT = :KEY1") quit 1

	quit 0


LL100(String KEY())  // UTBLXMCTYP

	type String KEY1 = KEY(1)
	if $$LLSELECT("UTBLXMCTYP1.GRP", "UTBLXMCTYP1", "UTBLXMCTYP1.GRP = :KEY1") quit 1

	quit 0


LL101(String KEY())  // YFEEEXP

	type String KEY1 = KEY(1)
	type String KEY2 = KEY(2)
	if $$LLSELECT("YFEEEXP1.PLAN,YFEEEXP1.EFD", "YFEEEXP1", "YFEEEXP1.PLAN = :KEY1 AND YFEEEXP1.EFD = :KEY2") quit 1

	if $$LLSELECT("YFEEEXP3.PLAN,YFEEEXP3.EFD", "YFEEEXP3", "YFEEEXP3.PLAN = :KEY1 AND YFEEEXP3.EFD = :KEY2") quit 1

	if $$LLSELECT("YFEEEXP4.PLAN,YFEEEXP4.EFD", "YFEEEXP4", "YFEEEXP4.PLAN = :KEY1 AND YFEEEXP4.EFD = :KEY2") quit 1

	quit 0
